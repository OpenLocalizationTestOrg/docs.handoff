<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="synclock-statement.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a12c3ac7250ee2904d571406d5008d451c9dc35</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\synclock-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc2ef771077af5f434eb4c2a96afd07992d92e9b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5127d7bedc4bce09e292bcefbbf090f19468c9f8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>SyncLock Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SyncLock Statement</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Acquires an exclusive lock for a statement block before executing the block.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Expression that evaluates to an object reference.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Block of statements that are to execute when the lock is acquired.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Terminates a <ph id="ph1">`SyncLock`</ph> block.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SyncLock`</ph> statement ensures that multiple threads do not execute the statement block at the same time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyncLock`</ph> prevents each thread from entering the block until no other thread is executing it.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The most common use of <ph id="ph1">`SyncLock`</ph> is to protect data from being updated by more than one thread simultaneously.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the statements that manipulate the data must go to completion without interruption, put them inside a <ph id="ph1">`SyncLock`</ph> block.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A statement block protected by an exclusive lock is sometimes called a <bpt id="p1">*</bpt>critical section<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Rules</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Branching.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You cannot branch into a <ph id="ph1">`SyncLock`</ph> block from outside the block.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Lock Object Value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`lockobject`</ph> cannot be <ph id="ph2">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You must create the lock object before you use it in a <ph id="ph1">`SyncLock`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You cannot change the value of <ph id="ph1">`lockobject`</ph> while executing a <ph id="ph2">`SyncLock`</ph> block.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The mechanism requires that the lock object remain unchanged.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can't use the <bpt id="p1">[</bpt>Await<ept id="p1">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in a <ph id="ph1">`SyncLock`</ph> block.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Mechanism.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When a thread reaches the <ph id="ph1">`SyncLock`</ph> statement, it evaluates the <ph id="ph2">`lockobject`</ph> expression and suspends execution until it acquires an exclusive lock on the object returned by the expression.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When another thread reaches the <ph id="ph1">`SyncLock`</ph> statement, it does not acquire a lock until the first thread executes the <ph id="ph2">`End SyncLock`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Protected Data.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lockobject`</ph> is a <ph id="ph2">`Shared`</ph> variable, the exclusive lock prevents a thread in any instance of the class from executing the <ph id="ph3">`SyncLock`</ph> block while any other thread is executing it.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This protects data that is shared among all the instances.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lockobject`</ph> is an instance variable (not <ph id="ph2">`Shared`</ph>), the lock prevents a thread running in the current instance from executing the <ph id="ph3">`SyncLock`</ph> block at the same time as another thread in the same instance.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This protects data maintained by the individual instance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Acquisition and Release.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`SyncLock`</ph> block behaves like a <ph id="ph2">`Try...Finally`</ph> construction in which the <ph id="ph3">`Try`</ph> block acquires an exclusive lock on <ph id="ph4">`lockobject`</ph> and the <ph id="ph5">`Finally`</ph> block releases it.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because of this, the <ph id="ph1">`SyncLock`</ph> block guarantees release of the lock, no matter how you exit the block.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is true even in the case of an unhandled exception.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Framework Calls.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SyncLock`</ph> block acquires and releases the exclusive lock by calling the <ph id="ph2">`Enter`</ph> and <ph id="ph3">`Exit`</ph> methods of the <ph id="ph4">`Monitor`</ph> class in the <ph id="ph5">&lt;xref:System.Threading&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Programming Practices</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lockobject`</ph> expression should always evaluate to an object that belongs exclusively to your class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You should declare a <ph id="ph1">`Private`</ph> object variable to protect data belonging to the current instance, or a <ph id="ph2">`Private Shared`</ph> object variable to protect data common to all instances.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You should not use the <ph id="ph1">`Me`</ph> keyword to provide a lock object for instance data.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If code external to your class has a reference to an instance of your class, it could use that reference as a lock object for a <ph id="ph1">`SyncLock`</ph> block completely different from yours, protecting different data.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this way, your class and the other class could block each other from executing their unrelated <ph id="ph1">`SyncLock`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Similarly locking on a string can be problematic since any other code in the process using the same string will share the same lock.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You should also not use the <ph id="ph1">`Me.GetType`</ph> method to provide a lock object for shared data.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is because <ph id="ph1">`GetType`</ph> always returns the same <ph id="ph2">`Type`</ph> object for a given class name.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>External code could call <ph id="ph1">`GetType`</ph> on your class and obtain the same lock object you are using.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This would result in the two classes blocking each other from their <ph id="ph1">`SyncLock`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example shows a class that maintains a simple list of messages.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It holds the messages in an array and the last used element of that array in a variable.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`addAnotherMessage`</ph> procedure increments the last element and stores the new message.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Those two operations are protected by the <ph id="ph1">`SyncLock`</ph> and <ph id="ph2">`End SyncLock`</ph> statements, because once the last element has been incremented, the new message must be stored before any other thread can increment the last element again.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`simpleMessageList`</ph> class shared one list of messages among all its instances, the variables <ph id="ph2">`messagesList`</ph> and <ph id="ph3">`messagesLast`</ph> would be declared as <ph id="ph4">`Shared`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this case, the variable <ph id="ph1">`messagesLock`</ph> should also be <ph id="ph2">`Shared`</ph>, so that there would be a single lock object used by every instance.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example uses threads and <ph id="ph1">`SyncLock`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>As long as the <ph id="ph1">`SyncLock`</ph> statement is present, the statement block is a critical section and <ph id="ph2">`balance`</ph> never becomes a negative number.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can comment out the <ph id="ph1">`SyncLock`</ph> and <ph id="ph2">`End SyncLock`</ph> statements to see the effect of leaving out the <ph id="ph3">`SyncLock`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overview of synchronization primitives<ept id="p1">](../../../standard/threading/overview-of-synchronization-primitives.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>