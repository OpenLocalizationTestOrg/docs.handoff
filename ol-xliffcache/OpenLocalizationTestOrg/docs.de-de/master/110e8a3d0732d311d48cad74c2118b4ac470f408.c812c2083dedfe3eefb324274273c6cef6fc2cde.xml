{"content":"---\ntitle: \"How to: Dispose of a System Resource (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Using statement, disposing of system resources\"\n  - \"Visual Basic code, control flow\"\n  - \"system resources, disposing of\"\n  - \"resources [Visual Basic], disposing of system\"\n  - \"system resources\"\n  - \"Using statement, Using...End Using\"\n  - \"Using block\"\nms.assetid: 8be2b239-8090-419b-8e7e-bcaa75b0ecc8\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Dispose of a System Resource (Visual Basic)\nYou can use a `Using` block to guarantee that the system disposes of a resource when your code exits the block. This is useful if you are using a system resource that consumes a large amount of memory, or that other components also want to use.  \n  \n### To dispose of a database connection when your code is finished with it  \n  \n1.  Make sure you include the appropriate [Imports Statement (.NET Namespace and Type)](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) for the database connection at the beginning of your source file (in this case, <xref:System.Data.SqlClient>).  \n  \n2.  Create a `Using` block with the `Using` and `End Using` statements. Inside the block, put the code that deals with the database connection.  \n  \n3.  Declare the connection and create an instance of it as part of the `Using` statement.  \n  \n    ```  \n    ' Insert the following line at the beginning of your source file.  \n    Imports System.Data.SqlClient  \n    Public Sub AccessSql(ByVal s As String)  \n        Using sqc As New System.Data.SqlClient.SqlConnection(s)  \n            MsgBox(\"Connected with string \"\"\" & sqc.ConnectionString & \"\"\"\")  \n        End Using  \n    End Sub  \n    ```  \n  \n     The system disposes of the resource no matter how you exit the block, including the case of an unhandled exception.  \n  \n     Note that you cannot access `sqc` from outside the `Using` block, because its scope is limited to the block.  \n  \n     You can use this same technique on a system resource such as a file handle or a COM wrapper. You use a `Using` block when you want to be sure to leave the resource available for other components after you have exited the `Using` block.  \n  \n## See Also  \n <xref:System.Data.SqlClient.SqlConnection>   \n [Control Flow](../../../../visual-basic/programming-guide/language-features/control-flow/index.md)   \n [Decision Structures](../../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)   \n [Loop Structures](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)   \n [Other Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/other-control-structures.md)   \n [Nested Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)   \n [Using Statement](../../../../visual-basic/language-reference/statements/using-statement.md)","nodes":[{"pos":[4,830],"embed":true,"restype":"x-metadata","content":"title: \"How to: Dispose of a System Resource (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Using statement, disposing of system resources\"\n  - \"Visual Basic code, control flow\"\n  - \"system resources, disposing of\"\n  - \"resources [Visual Basic], disposing of system\"\n  - \"system resources\"\n  - \"Using statement, Using...End Using\"\n  - \"Using block\"\nms.assetid: 8be2b239-8090-419b-8e7e-bcaa75b0ecc8\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Dispose of a System Resource (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,68],"content":"How to: Dispose of a System Resource (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Dispose of a System Resource (Visual Basic) | Microsoft Docs","pos":[0,68]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[837,888],"content":"How to: Dispose of a System Resource (Visual Basic)","linkify":"How to: Dispose of a System Resource (Visual Basic)","nodes":[{"content":"How to: Dispose of a System Resource (Visual Basic)","pos":[0,51]}]},{"content":"You can use a <ph id=\"ph1\">`Using`</ph> block to guarantee that the system disposes of a resource when your code exits the block.","pos":[889,1000],"source":"You can use a `Using` block to guarantee that the system disposes of a resource when your code exits the block."},{"content":"This is useful if you are using a system resource that consumes a large amount of memory, or that other components also want to use.","pos":[1001,1133]},{"pos":[1143,1213],"content":"To dispose of a database connection when your code is finished with it","linkify":"To dispose of a database connection when your code is finished with it","nodes":[{"content":"To dispose of a database connection when your code is finished with it","pos":[0,70]}]},{"pos":[1223,1517],"content":"Make sure you include the appropriate <bpt id=\"p1\">[</bpt>Imports Statement (.NET Namespace and Type)<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept> for the database connection at the beginning of your source file (in this case, <ph id=\"ph1\">&lt;xref:System.Data.SqlClient&gt;</ph>).","source":"Make sure you include the appropriate [Imports Statement (.NET Namespace and Type)](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) for the database connection at the beginning of your source file (in this case, <xref:System.Data.SqlClient>)."},{"content":"Create a <ph id=\"ph1\">`Using`</ph> block with the <ph id=\"ph2\">`Using`</ph> and <ph id=\"ph3\">`End Using`</ph> statements.","pos":[1527,1594],"source":"Create a `Using` block with the `Using` and `End Using` statements."},{"content":"Inside the block, put the code that deals with the database connection.","pos":[1595,1666]},{"pos":[1676,1761],"content":"Declare the connection and create an instance of it as part of the <ph id=\"ph1\">`Using`</ph> statement.","source":"Declare the connection and create an instance of it as part of the `Using` statement."},{"content":"The system disposes of the resource no matter how you exit the block, including the case of an unhandled exception.","pos":[2128,2243]},{"pos":[2254,2362],"content":"Note that you cannot access <ph id=\"ph1\">`sqc`</ph> from outside the <ph id=\"ph2\">`Using`</ph> block, because its scope is limited to the block.","source":"Note that you cannot access `sqc` from outside the `Using` block, because its scope is limited to the block."},{"content":"You can use this same technique on a system resource such as a file handle or a COM wrapper.","pos":[2373,2465]},{"content":"You use a <ph id=\"ph1\">`Using`</ph> block when you want to be sure to leave the resource available for other components after you have exited the <ph id=\"ph2\">`Using`</ph> block.","pos":[2466,2608],"source":" You use a `Using` block when you want to be sure to leave the resource available for other components after you have exited the `Using` block."},{"pos":[2617,2625],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Control Flow<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2676,2775],"source":"[Control Flow](../../../../visual-basic/programming-guide/language-features/control-flow/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Decision Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[2779,2899],"source":"[Decision Structures](../../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Loop Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[2903,3015],"source":"[Loop Structures](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Other Control Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/other-control-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3019,3149],"source":"[Other Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/other-control-structures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3153,3285],"source":"[Nested Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Using Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/using-statement.md)</ept>","pos":[3289,3381],"source":"[Using Statement](../../../../visual-basic/language-reference/statements/using-statement.md)"}]}