<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e0e6bd4ffbd382418253ea2e93f966e99b1c41c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\navigation-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdcb576e2e43f7d8d06a4c170cfbb0427b5fedba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a2ccb13a7b2cc0255000508ccbfbf41609bf208</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Navigation Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Navigation Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> supports browser-style navigation that can be used in two types of applications: standalone applications and              <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](../../../../includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To package content for navigation,              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> provides the              <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can navigate from one              <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> to another declaratively, by using a              <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, or programmatically, by using the              <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> uses the journal to remember pages that have been navigated from and to navigate back to them.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph>,              <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>,              <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph>, and the journal form the core of the navigation support offered by              <ph id="ph4">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This overview explores these features in detail before covering advanced navigation support that includes navigation to loose              <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> files,              <ph id="ph2">[!INCLUDE[TLA#tla_html](../../../../includes/tlasharptla-html-md.md)]</ph> files, and objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this topic, the term "browser" refers only to browsers that can host                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications, which currently includes                  <ph id="ph2">[!INCLUDE[TLA#tla_ie](../../../../includes/tlasharptla-ie-md.md)]</ph> and Firefox.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Where specific                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> features are supported only by a particular browser, the browser version is referred to.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Navigation in WPF Applications</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of the key navigation capabilities in                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These capabilities are available to both standalone applications and                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>, although this topic presents them within the context of an                  <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This topic doesn't discuss how to build and deploy                      <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information on                      <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>, see                      <bpt id="p1">[</bpt>WPF XAML Browser Applications Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-xaml-browser-applications-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This section explains and demonstrates the following aspects of navigation:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing a Page<ept id="p1">](#CreatingAXAMLPage)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Configuring a Start Page<ept id="p1">](#Configuring_a_Start_Page)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Configuring the Host Window's Title, Width, and Height<ept id="p1">](#ConfiguringAXAMLPage)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hyperlink Navigation<ept id="p1">](#NavigatingBetweenXAMLPages)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fragment Navigation<ept id="p1">](#FragmentNavigation)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Navigation Service<ept id="p1">](#NavigationService)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programmatic Navigation with the Navigation Service<ept id="p1">](#Programmatic_Navigation_with_the_Navigation_Service)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Navigation Lifetime<ept id="p1">](#Navigation_Lifetime)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Remembering Navigation with the Journal<ept id="p1">](#NavigationHistory)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Page Lifetime and the Journal<ept id="p1">](#PageLifetime)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retaining Content State with Navigation History<ept id="p1">](#RetainingContentStateWithNavigationHistory)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cookies<ept id="p1">](#Cookies)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Structured Navigation<ept id="p1">](#Structured_Navigation)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Implementing a Page</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, you can navigate to several content types that include                          <ph id="ph2">[!INCLUDE[TLA2#tla_winfx](../../../../includes/tla2sharptla-winfx-md.md)]</ph> objects, custom objects, enumeration values, user controls,                          <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> files, and                          <ph id="ph4">[!INCLUDE[TLA#tla_html](../../../../includes/tlasharptla-html-md.md)]</ph> files.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, you'll find that the most common and convenient way to package content is by using                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Furthermore,                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> implements navigation-specific features to enhance their appearance and simplify development.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Using                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph>, you can declaratively implement a navigable page of                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> content by using markup like the following.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#Page1XAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/Page1.xaml#page1xaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that is implemented in                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup has                          <ph id="ph3">`Page`</ph> as its root element and requires the                          <ph id="ph4">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph><ph id="ph5">[!INCLUDE[TLA#tla_xml](../../../../includes/tlasharptla-xml-md.md)]</ph> namespace declaration.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">`Page`</ph> element contains the content that you want to navigate to and display.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You add content by setting the                          <ph id="ph1">`Page.Content`</ph> property element, as shown in the following markup.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#Page2XAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/Page2.xaml#page2xaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Page.Content`</ph> can only contain one child element; in the preceding example, the content is a single string, "Hello, Page!"</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In practice, you will usually use a layout control as the child element (see                          <bpt id="p1">[</bpt>Layout<ept id="p1">](../../../../docs/framework/wpf/advanced/layout.md)</ept>) to contain and compose your content.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The child elements of a                          <ph id="ph1">`Page`</ph> element are considered to be the content of a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> and, consequently, you don't need to use the explicit                          <ph id="ph3">`Page.Content`</ph> declaration.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following markup is the declarative equivalent to the preceding sample.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#Page3XAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/Page3.xaml#page3xaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In this case,                          <ph id="ph1">`Page.Content`</ph> is automatically set with the child elements of the                          <ph id="ph2">`Page`</ph> element.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see                          <bpt id="p1">[</bpt>WPF Content Model<ept id="p1">](../../../../docs/framework/wpf/controls/wpf-content-model.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A markup-only                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is useful for displaying content.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> can also display controls that allow users to interact with the page, and it can respond to user interaction by handling events and calling application logic.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An interactive                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is implemented by using a combination of markup and code-behind, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XBAPAppDefSnippets#HomePageMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XBAPAppDefSnippets/CSharp/HomePage.xaml#homepagemarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XBAPAppDefSnippets#HomePageCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XBAPAppDefSnippets/CSharp/HomePage.xaml.cs#homepagecodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XBAPAppDefSnippets#HomePageCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/XBAPAppDefSnippets/VisualBasic/HomePage.xaml.vb#homepagecodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To allow a markup file and code-behind file to work together, the following configuration is required:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In markup, the                                  <ph id="ph1">`Page`</ph> element must include the                                  <ph id="ph2">`x:Class`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When the application is built, the existence of                                  <ph id="ph1">`x:Class`</ph> in the markup file causes                                  <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)]</ph> to create a                                  <ph id="ph3">`partial`</ph> class that derives from                                  <ph id="ph4">&lt;xref:System.Windows.Controls.Page&gt;</ph> and has the name that is specified by the                                  <ph id="ph5">`x:Class`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This requires the addition of an                                  <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> namespace declaration for the                                  <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> schema (                                  <ph id="ph3">`xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"`</ph> ).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The generated                                  <ph id="ph1">`partial`</ph> class implements                                  <ph id="ph2">`InitializeComponent`</ph>, which is called to register the events and set the properties that are implemented in markup.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In code-behind, the class must be a                                  <ph id="ph1">`partial`</ph> class with the same name that is specified by the                                  <ph id="ph2">`x:Class`</ph> attribute in markup, and it must derive from                                  <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This allows the code-behind file to be associated with the                                  <ph id="ph1">`partial`</ph> class that is generated for the markup file when the application is built (see                                  <bpt id="p1">[</bpt>Building a WPF Application<ept id="p1">](../../../../docs/framework/wpf/app-development/building-a-wpf-application-wpf.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In code-behind, the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> class must implement a constructor that calls the                                  <ph id="ph2">`InitializeComponent`</ph> method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InitializeComponent`</ph> is implemented by the markup file's generated                                  <ph id="ph2">`partial`</ph> class to register events and set properties that are defined in markup.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When you add a new                              <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> to your project using                              <ph id="ph2">[!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)]</ph>, the                              <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> is implemented using both markup and code-behind, and it includes the necessary configuration to create the association between the markup and code-behind files as described here.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Once you have a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph>, you can navigate to it.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To specify the first                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that an application navigates to, you need to configure the start                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Configuring a Start Page</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> require a certain amount of application infrastructure to be hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, the                          <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> class is part of an application definition that establishes the required application infrastructure (see                          <bpt id="p1">[</bpt>Application Management Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/application-management-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An application definition is usually implemented using both markup and code-behind, with the markup file configured as an                          <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph2">`ApplicationDefinition`</ph> item.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following is an application definition for an                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XBAPAppDefSnippets#XBAPApplicationDefinitionMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XBAPAppDefSnippets/CSharp/App.xaml#xbapapplicationdefinitionmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XBAPAppDefSnippets#XBAPApplicationDefinitionCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XBAPAppDefSnippets/CSharp/App.xaml.cs#xbapapplicationdefinitioncodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XBAPAppDefSnippets#XBAPApplicationDefinitionCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/XBAPAppDefSnippets/VisualBasic/Application.xaml.vb#xbapapplicationdefinitioncodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> can use its application definition to specify a start                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>, which is the                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> that is automatically loaded when the                          <ph id="ph4">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> is launched.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You do this by setting the                          <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> property with the                          <ph id="ph2">[!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)]</ph> for the desired                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In most cases, the                              <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is either compiled into or deployed with an application.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In these cases, the                              <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that identifies a                              <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> is a pack                              <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>, which is a                              <ph id="ph4">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that conforms to the                              <bpt id="p1">*</bpt>pack<ept id="p1">*</ept> scheme.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Pack                              <ph id="ph1">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph> are discussed further in                              <bpt id="p1">[</bpt>Pack URIs in WPF<ept id="p1">](../../../../docs/framework/wpf/app-development/pack-uris-in-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can also navigate to content using the http scheme, which is discussed below.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can set                          <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> declaratively in markup, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#XBAPApplicationDefinitionMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/App.xaml#xbapapplicationdefinitionmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this example, the                          <ph id="ph1">`StartupUri`</ph> attribute is set with a relative pack                          <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that identifies HomePage.xaml.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When the                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> is launched, HomePage.xaml is automatically navigated to and displayed.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is demonstrated by the following figure, which shows an                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> that was launched from a Web server.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>XBAP page<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure9.png "</bpt>NavigationOverviewFigure9<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information regarding the development and deployment of                              <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>, see                              <bpt id="p1">[</bpt>WPF XAML Browser Applications Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-xaml-browser-applications-overview.md)</ept> and                              <bpt id="p2">[</bpt>Deploying a WPF Application<ept id="p2">](../../../../docs/framework/wpf/app-development/deploying-a-wpf-application-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Configuring the Host Window's Title, Width, and Height</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>One thing you may have noticed from the previous figure is that the title of both the browser and the tab panel is the                          <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for the                          <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Besides being long, the title is neither attractive nor informative.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For this reason,                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> offers a way for you to change the title by setting the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Furthermore, you can configure the width and height of the browser window by setting                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page.WindowWidth%2A&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page.WindowHeight%2A&gt;</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A&gt;</ph>,                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page.WindowWidth%2A&gt;</ph>, and                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page.WindowHeight%2A&gt;</ph> can be set declaratively in markup, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#HomePageMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/HomePage.xaml#homepagemarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The result is shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Window title, height, width<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure2.png "</bpt>NavigationOverviewFigure2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Hyperlink Navigation</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A typical                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> comprises several pages.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The simplest way to navigate from one page to another is to use a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can declaratively add a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> to a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> by using the                          <ph id="ph3">`Hyperlink`</ph> element, which is shown in the following markup.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#HyperlinkXAML1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithHyperlink.xaml#hyperlinkxaml1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#HyperlinkXAML2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithHyperlink.xaml#hyperlinkxaml2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#HyperlinkXAML3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithHyperlink.xaml#hyperlinkxaml3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A                          <ph id="ph1">`Hyperlink`</ph> element requires the following:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The pack                                  <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> of the                                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> to navigate to, as specified by the                                  <ph id="ph3">`NavigateUri`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Content that a user can click to initiate the navigation, such as text and images (for the content that the                                  <ph id="ph1">`Hyperlink`</ph> element can contain, see                                  <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following figure shows an                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> with a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> that has a                          <ph id="ph3">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Page with Hyperlink<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure3.png "</bpt>NavigationOverviewFigure3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>As you would expect, clicking the                          <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> causes the                          <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> to navigate to the                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> that is identified by the                          <ph id="ph4">`NavigateUri`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Additionally, the                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> adds an entry for the previous                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> to the Recent Pages list in                          <ph id="ph3">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This is shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Back and Forward buttons<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure4.png "</bpt>NavigationOverviewFigure4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>As well as supporting navigation from one                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> to another,                          <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> also supports fragment navigation.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Fragment Navigation</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Fragment navigation<ept id="p1">*</ept> is the navigation to a content fragment in either the current                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> or another                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, a content fragment is the content that is contained by a named element.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A named element is an element that has its                          <ph id="ph1">`Name`</ph> attribute set.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The following markup shows a named                          <ph id="ph1">`TextBlock`</ph> element that contains a content fragment.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageWithContentFragmentsMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithFragments.xaml#pagewithcontentfragmentsmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageWithContentFragmentsMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithFragments.xaml#pagewithcontentfragmentsmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageWithContentFragmentsMARKUP3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithFragments.xaml#pagewithcontentfragmentsmarkup3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> to navigate to a content fragment, the                          <ph id="ph2">`NavigateUri`</ph> attribute must include the following:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> of the                                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> with the content fragment to navigate to.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A "#" character.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The name of the element on the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that contains the content fragment.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A fragment                          <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> has the following format.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>PageURI<ept id="p1">*</ept> <ph id="ph1">`#`</ph> <bpt id="p2">*</bpt>ElementName<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following shows an example of a                          <ph id="ph1">`Hyperlink`</ph> that is configured to navigate to a content fragment.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageThatNavigatesXAML1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageThatNavigatesToFragment.xaml#pagethatnavigatesxaml1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageThatNavigatesXAML2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageThatNavigatesToFragment.xaml#pagethatnavigatesxaml2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageThatNavigatesXAML3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageThatNavigatesToFragment.xaml#pagethatnavigatesxaml3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This section describes the default fragment navigation implementation in                              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> also allows you to implement your own fragment navigation scheme which, in part, requires handling the                              <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can navigate to fragments in loose                              <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> pages (markup-only                              <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> files with                              <ph id="ph3">`Page`</ph> as the root element) only if the pages can be browsed via                              <ph id="ph4">[!INCLUDE[TLA2#tla_http](../../../../includes/tla2sharptla-http-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>However, a loose                              <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> page can navigate to its own fragments.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Navigation Service</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>While                          <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> allows a user to initiate navigation to a particular                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>, the work of locating and downloading the page is performed by the                          <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Essentially,                          <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> provides the ability to process a navigation request on behalf of client code, such as the                          <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Additionally,                          <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> implements higher-level support for tracking and influencing a navigation request.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> is clicked,                          <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> calls                          <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName&gt;</ph> to locate and download the                          <ph id="ph4">&lt;xref:System.Windows.Controls.Page&gt;</ph> at the specified pack                          <ph id="ph5">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The downloaded                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is converted to a tree of objects whose root object is an instance of the downloaded                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A reference to the root                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> object is stored in the                          <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService.Content%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The pack                          <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for the content that was navigated to is stored in the                          <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService.Source%2A?displayProperty=fullName&gt;</ph> property, while the                          <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationService.CurrentSource%2A?displayProperty=fullName&gt;</ph> stores the pack                          <ph id="ph4">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for the last page that was navigated to.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>It is possible for a                              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application to have more than one currently active                              <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information, see                              <bpt id="p1">[</bpt>Navigation Hosts<ept id="p1">](#Navigation_Hosts)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Programmatic Navigation with the Navigation Service</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You don't need to know about                          <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> if navigation is implemented declaratively in markup using                          <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, because                          <ph id="ph3">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> uses the                          <ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> on your behalf.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This means that, as long as either the direct or indirect parent of a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> is a navigation host (see                          <bpt id="p1">[</bpt>Navigation Hosts<ept id="p1">](#Navigation_Hosts)</ept>),                          <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> will be able to find and use the navigation host's navigation service to process a navigation request.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>However, there are situations when you need to use                          <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> directly, including the following:</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>When you need to instantiate a                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> using a non-default constructor.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>When you need to set properties on the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> before you navigate to it.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>When the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that needs to be navigated to can only be determined at run time.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>In these situations, you need to write code to programmatically initiate navigation by calling the                          <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.Navigate%2A&gt;</ph> method of the                          <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>That requires getting a reference to a                          <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Getting a Reference to the NavigationService</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For reasons that are covered in the                                  <bpt id="p1">[</bpt>Navigation Hosts<ept id="p1">](#Navigation_Hosts)</ept> section, a                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application can have more than one                                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This means that your code needs a way to find a                                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph>, which is usually the                                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> that navigated to the current                                  <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>You can get a reference to a                                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> by calling the                                  <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationService.GetNavigationService%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>To get the                                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> that navigated to a particular                                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>, you pass a reference to the                                  <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> as the argument of the                                  <ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationService.GetNavigationService%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The following code shows how to get the                                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> for the current                                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#GetNSCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/GetNSPage.xaml.cs#getnscodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#GetNSCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/GetNSPage.xaml.cs#getnscodebehind2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#GetNSCODEBEHIND2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/GetNSPage.xaml.vb#getnscodebehind2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>As a shortcut for finding the                                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> for a                                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>,                                  <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> implements the                                  <ph id="ph4">&lt;xref:System.Windows.Controls.Page.NavigationService%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#GetNSShortcutCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/GetNSPageShortCut.xaml.cs#getnsshortcutcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#GetNSShortcutCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/GetNSPageShortCut.xaml.cs#getnsshortcutcodebehind2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#GetNSShortcutCODEBEHIND2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/GetNSPageShortCut.xaml.vb#getnsshortcutcodebehind2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A                                      <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> can only get a reference to its                                      <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> when                                      <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> raises the                                      <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Programmatic Navigation to a Page Object</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the                                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> to programmatically navigate to a                                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Programmatic navigation is required because the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that is being navigated to can only be instantiated using a single, non-default constructor.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> with the non-default constructor is shown in the following markup and code.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageWithNonDefaultConstructorXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithNonDefaultConstructor.xaml#pagewithnondefaultconstructorxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageWithNonDefaultConstructorCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithNonDefaultConstructor.xaml.cs#pagewithnondefaultconstructorcodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#PageWithNonDefaultConstructorCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/PageWithNonDefaultConstructor.xaml.vb#pagewithnondefaultconstructorcodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that navigates to the                                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> with the non-default constructor is shown in the following markup and code.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NSNavigationPageXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NSNavigationPage.xaml#nsnavigationpagexaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NSNavigationPageCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NSNavigationPage.xaml.cs#nsnavigationpagecodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#NSNavigationPageCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/NSNavigationPage.xaml.vb#nsnavigationpagecodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>When the                                  <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> on this                                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> is clicked, navigation is initiated by instantiating the                                  <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> to navigate to using the non-default constructor and calling the                                  <ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.Navigate%2A&gt;</ph> accepts a reference to the object that the                                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> will navigate to, rather than a pack                                  <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Programmatic Navigation with a Pack URI</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If you need to construct a pack                                  <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> programmatically (when you can only determine the pack                                  <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> at run time, for example), you can use the                                  <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NSUriNavigationPageXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NSUriNavigationPage.xaml#nsurinavigationpagexaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NSUriNavigationPageCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NSUriNavigationPage.xaml.cs#nsurinavigationpagecodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#NSUriNavigationPageCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/NSUriNavigationPage.xaml.vb#nsurinavigationpagecodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Refreshing the Current Page</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is not downloaded if it has the same pack                                  <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> as the pack                                  <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that is stored in the                                  <ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationService.Source%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>To force                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> to download the current page again, you can call the                                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService.Refresh%2A?displayProperty=fullName&gt;</ph> method, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NSRefreshNavigationPageXAML1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NSRefreshNavigationPage.xaml#nsrefreshnavigationpagexaml1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NSRefreshNavigationPageCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NSRefreshNavigationPage.xaml.cs#nsrefreshnavigationpagecodebehind1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#NSRefreshNavigationPageCODEBEHIND1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/NSRefreshNavigationPage.xaml.vb#nsrefreshnavigationpagecodebehind1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NSRefreshNavigationPageCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NSRefreshNavigationPage.xaml.cs#nsrefreshnavigationpagecodebehind2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#NSRefreshNavigationPageCODEBEHIND2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/NSRefreshNavigationPage.xaml.vb#nsrefreshnavigationpagecodebehind2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Navigation Lifetime</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>There are many ways to initiate navigation, as you've seen.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>When navigation is initiated, and while navigation is in progress, you can track and influence the navigation using the following events that are implemented by                          <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.Navigating&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Occurs when a new navigation is requested.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Can be used to cancel the navigation.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationProgress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Occurs periodically during a download to provide navigation progress information.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.Navigated&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Occurs when the page has been located and downloaded.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationStopped&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Occurs when the navigation is stopped (by calling                                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.StopLoading%2A&gt;</ph>), or when a new navigation is requested while a current navigation is in progress.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Occurs when an error is raised while navigating to the requested content.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.LoadCompleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Occurs when content that was navigated to is loaded and parsed, and has begun rendering.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.FragmentNavigation&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Occurs when navigation to a content fragment begins, which happens:</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Immediately, if the desired fragment is in the current content.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>After the source content has been loaded, if the desired fragment is in different content.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The navigation events are raised in the order that is illustrated by the following figure.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Page navigation flow chart<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure11.png "</bpt>NavigationOverviewFigure11<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In general, a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> isn't concerned about these events.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>It is more likely that an application is concerned with them and, for that reason, these events are also raised by the                          <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Every time                          <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> raises an event, the                          <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> class raises the corresponding event.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> offer the same events to detect navigation within their respective scopes.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>In some cases, a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> might be interested in these events.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>For example, a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> might handle the                          <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName&gt;</ph> event to determine whether or not to cancel navigation away from itself.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>This is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#CancelNavigationPageXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/CancelNavigationPage.xaml#cancelnavigationpagexaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#CancelNavigationPageCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/CancelNavigationPage.xaml.cs#cancelnavigationpagecodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#CancelNavigationPageCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/CancelNavigationPage.xaml.vb#cancelnavigationpagecodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If you register a handler with a navigation event from a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph>, as the preceding example does, you must also unregister the event handler.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>If you don't, there may be side effects with respect to how                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> navigation remembers                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> navigation using the journal.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Remembering Navigation with the Journal</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> uses two stacks to remember the pages that you have navigated from: a back stack and a forward stack.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>When you navigate from the current                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> to a new                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> or forward to an existing                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph>, the current                          <ph id="ph4">&lt;xref:System.Windows.Controls.Page&gt;</ph> is added to the                          <bpt id="p1">*</bpt>back stack<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>When you navigate from the current                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> back to the previous                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>, the current                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> is added to the                          <bpt id="p1">*</bpt>forward stack<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The back stack, the forward stack, and the functionality to manage them, are collectively referred to as the journal.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Each item in the back stack and the forward stack is an instance of the                          <ph id="ph1">&lt;xref:System.Windows.Navigation.JournalEntry&gt;</ph> class, and is referred to as a                          <bpt id="p1">*</bpt>journal entry<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Navigating the Journal from Internet Explorer</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Conceptually, the journal operates the same way that the                                  <bpt id="p1">**</bpt>Back<ept id="p1">**</ept> and                                  <bpt id="p2">**</bpt>Forward<ept id="p2">**</ept> buttons in                                  <ph id="ph1">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph> do.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>These are shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Back and Forward buttons<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure4.png "</bpt>NavigationOverviewFigure4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>For                                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that are hosted by                                  <ph id="ph2">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph>,                                  <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> integrates the journal into the navigation                                  <ph id="ph4">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> of                                  <ph id="ph5">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This allows users to navigate pages in an                                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> by using the                                  <bpt id="p1">**</bpt>Back<ept id="p1">**</ept>,                                  <bpt id="p2">**</bpt>Forward<ept id="p2">**</ept>, and                                  <bpt id="p3">**</bpt>Recent Pages<ept id="p3">**</ept> buttons in                                  <ph id="ph2">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The journal is not integrated into                                  <ph id="ph1">[!INCLUDE[TLA2#tla_ie6](../../../../includes/tla2sharptla-ie6-md.md)]</ph> in the same way it is for                                  <ph id="ph2">[!INCLUDE[TLA2#tla_ie7](../../../../includes/tla2sharptla-ie7-md.md)]</ph> or Internet Explorer 8.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Instead,                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> renders a substitute navigation                                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>In                                      <ph id="ph1">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph>, when a user navigates away from and back to an                                      <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>, only the journal entries for pages that were not kept alive are retained in the journal.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>For discussion on keeping pages alive, see                                      <bpt id="p1">[</bpt>Page Lifetime and the Journal<ept id="p1">](#PageLifetime)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>By default, the text for each                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that appears in the                                  <bpt id="p1">**</bpt>Recent Pages<ept id="p1">**</ept> list of                                  <ph id="ph2">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph> is the                                  <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for the                                  <ph id="ph4">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>In many cases, this is not particularly meaningful to the user.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Fortunately, you can change the text using one the following options:</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The attached                                          <ph id="ph1">`JournalEntry.Name`</ph> attribute value.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The                                          <ph id="ph1">`Page.Title`</ph> attribute value.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The                                          <ph id="ph1">`Page.WindowTitle`</ph> attribute value and the                                          <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for the current                                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The                                          <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for the current                                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>(Default)</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The order in which the options are listed matches the order of precedence for finding the text.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>For example, if                                  <ph id="ph1">`JournalEntry.Name`</ph> is set, the other values are ignored.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The following example uses the                                  <ph id="ph1">`Page.Title`</ph> attribute to change the text that appears for a journal entry.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageTitleMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithTitle.xaml#pagetitlemarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageTitleMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithTitle.xaml#pagetitlemarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageTitleCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithTitle.xaml.cs#pagetitlecodebehind1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#PageTitleCODEBEHIND1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/PageWithTitle.xaml.vb#pagetitlecodebehind1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#PageTitleCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/PageWithTitle.xaml.cs#pagetitlecodebehind2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigationOverviewSnippets#PageTitleCODEBEHIND2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationOverviewSnippets/VisualBasic/PageWithTitle.xaml.vb#pagetitlecodebehind2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Navigating the Journal Using WPF</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Although a user can navigate the journal by using the                                  <bpt id="p1">**</bpt>Back<ept id="p1">**</ept>,                                  <bpt id="p2">**</bpt>Forward<ept id="p2">**</ept>, and                                  <bpt id="p3">**</bpt>Recent Pages<ept id="p3">**</ept> in                                  <ph id="ph1">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph>, you can also navigate the journal using both declarative and programmatic mechanisms provided by                                  <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>One reason to do this is to provide custom navigation                                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> in your pages.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>You can declaratively add journal navigation support by using the navigation commands exposed by                                  <ph id="ph1">&lt;xref:System.Windows.Input.NavigationCommands&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the                                  <ph id="ph1">`BrowseBack`</ph> navigation command.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NavigationCommandsPageXAML1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NavigationCommandsPage.xaml#navigationcommandspagexaml1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NavigationCommandsPageXAML2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NavigationCommandsPage.xaml#navigationcommandspagexaml2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NavigationCommandsPageXAML3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NavigationCommandsPage.xaml#navigationcommandspagexaml3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#NavigationCommandsPageXAML4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/NavigationCommandsPage.xaml#navigationcommandspagexaml4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>You can programmatically navigate the journal by using one of the following members of the                                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The journal can also be manipulated programmatically, as discussed in                                  <bpt id="p1">[</bpt>Retaining Content State with Navigation History<ept id="p1">](#RetainingContentStateWithNavigationHistory)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Page Lifetime and the Journal</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Consider an                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> with several pages that contain rich content, including graphics, animations, and media.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The memory footprint for pages like these could be quite large, particularly if video and audio media are used.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Given that the journal "remembers" pages that have been navigated to, such an                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> could quickly consume a large and noticeable amount of memory.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>For this reason, the default behavior of the journal is to store                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> metadata in each journal entry rather than a reference to a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>When a journal entry is navigated to, its                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> metadata is used to create a new instance of the specified                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>As a consequence, each                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that is navigated has the lifetime that is illustrated by the following figure.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Page lifetime<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure10.PNG "</bpt>NavigationOverviewFigure10<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Although using the default journaling behavior can save on memory consumption, per-page rendering performance might be reduced; reinstantiating a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> can be time-intensive, particularly if it has a lot of content.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>If you need to retain a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> instance in the journal, you can draw on two techniques for doing so.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>First, you can programmatically navigate to a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> object by calling the                          <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Second, you can specify that                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> retain an instance of a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> in the journal by setting the                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page.KeepAlive%2A&gt;</ph> property to                          <ph id="ph4">`true`</ph> (the default is                          <ph id="ph5">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>As shown in the following example, you can set                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page.KeepAlive%2A&gt;</ph> declaratively in markup.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#KeepAlivePageXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/KeepAlivePage.xaml#keepalivepagexaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The lifetime of a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that is kept alive is subtly different from one that is not.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The first time a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that is kept alive is navigated to, it is instantiated just like a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> that is not kept alive.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>However, because an instance of the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is retained in the journal, it is never instantiated again for as long as it remains in the journal.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Consequently, if a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> has initialization logic that needs to be called every time the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> is navigated to, you should move it from the constructor into a handler for the                          <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>As shown in the following figure, the                          <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> events are still raised each time a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> is navigated to and from, respectively.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>When the Loaded and Unloaded events are raised<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure17.png "</bpt>NavigationOverviewFigure17<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>When a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is not kept alive, you should not do either of the following:</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Store a reference to it, or any part of it.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Register event handlers with events that are not implemented by it.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Doing either of these will create references that force the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> to be retained in memory, even after it has been removed from the journal.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>In general, you should prefer the default                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> behavior of not keeping a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> alive.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>However, this has state implications that are discussed in the next section.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Retaining Content State with Navigation History</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>If a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is not kept alive, and it has controls that collect data from the user, what happens to the data if a user navigates away from and back to the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>?</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>From a user experience perspective, the user should expect to see the data they entered previously.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Unfortunately, because a new instance of the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is created with each navigation, the controls that collected the data are reinstantiated and the data is lost.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Fortunately, the journal provides support for remembering data across                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> navigations, including control data.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Specifically, the journal entry for each                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> acts as a temporary container for the associated                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The following steps outline how this support is used when a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is navigated from:</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>An entry for the current                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is added to the journal.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The state of the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is stored with the journal entry for that page, which is added to the back stack.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The new                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is navigated to.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>When the page                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is navigated back to, using the journal, the following steps take place:</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> (the top journal entry on the back stack) is instantiated.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is refreshed with the state that was stored with the journal entry for the                                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> is navigated back to.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> automatically uses this support when the following controls are used on a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>If a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> uses these controls, data entered into them is remembered across                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> navigations, as demonstrated by the                          <bpt id="p1">**</bpt>Favorite Color<ept id="p1">**</ept><ph id="ph3">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> in the following figure.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Page with controls that remember state<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure13.png "</bpt>NavigationOverviewFigure13<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>When a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> has controls other than those in the preceding list, or when state is stored in custom objects, you need to write code to cause the journal to remember state across                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> navigations.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>If you need to remember small pieces of state across                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> navigations, you can use dependency properties (see                          <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph>) that are configured with the                          <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Journal%2A?displayProperty=fullName&gt;</ph> metadata flag.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>If the state that your                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> needs to remember across navigations comprises multiple pieces of data, you may find it less code intensive to encapsulate your state in a single class and implement the                          <ph id="ph2">&lt;xref:System.Windows.Navigation.IProvideCustomContentState&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>If you need to navigate through various states of a single                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph>, without navigating from the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> itself, you can use                          <ph id="ph3">&lt;xref:System.Windows.Navigation.IProvideCustomContentState&gt;</ph> and                          <ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Cookies</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Another way that                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications can store data is with cookies, which are created, updated, and deleted by using the                          <ph id="ph2">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph> and                          <ph id="ph3">&lt;xref:System.Windows.Application.GetCookie%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The cookies that you can create in                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> are the same cookies that other types of Web applications use; cookies are arbitrary pieces of data that are stored by an application on a client machine either during or across application sessions.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Cookie data typically takes the form of a name/value pair in the following format.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Name<ept id="p1">*</ept> <ph id="ph1">`=`</ph> <bpt id="p2">*</bpt>Value<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>When the data is passed to                          <ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>, along with the                          <ph id="ph2">&lt;xref:System.Uri&gt;</ph> of the location for which the cookie should be set, a cookie is created in-memory, and it is only available for the duration of the current application session.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>This type of cookie is referred to as a                          <bpt id="p1">*</bpt>session cookie<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>To store a cookie across application sessions, an expiration date must be added to the cookie, using the following format.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>NAME<ept id="p1">*</ept> <ph id="ph1">`=`</ph> <bpt id="p2">*</bpt>VALUE<ept id="p2">*</ept> <ph id="ph2">`; expires=DAY, DD-MMM-YYYY HH:MM:SS GMT`</ph></source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>A cookie with an expiration date is stored in the current                          <ph id="ph1">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph> installation's Temporary Internet Files folder until the cookie expires.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Such a cookie is known as a                          <bpt id="p1">*</bpt>persistent cookie<ept id="p1">*</ept> because it persists across application sessions.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>You retrieve both session and persistent cookies by calling the                          <ph id="ph1">&lt;xref:System.Windows.Application.GetCookie%2A&gt;</ph> method, passing the                          <ph id="ph2">&lt;xref:System.Uri&gt;</ph> of the location where the cookie was set with the                          <ph id="ph3">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The following are some of the ways that cookies are supported in                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> standalone applications and                                  <ph id="ph2">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> can both create and manage cookies.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Cookies that are created by an                                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> can be accessed from the browser.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> from the same domain can create and share cookies.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> and                                  <ph id="ph2">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph> pages from the same domain can create and share cookies.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Cookies are dispatched when                                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> and loose                                  <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> pages make Web requests.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Both top-level                                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> and                                  <ph id="ph2">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> hosted in IFRAMES can access cookies.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Cookie support in                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> is the same for all supported browsers.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>In                                  <ph id="ph1">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph>, P3P policy that pertains to cookies is honored by                                  <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, particularly with respect to first-party and third-party                                  <ph id="ph3">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Structured Navigation</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>If you need to pass data from one                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> to another, you can pass the data as arguments to a non-default constructor of the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Note that if you use this technique, you must keep the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> alive; if not, the next time you navigate to the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>,                          <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> reinstantiates the                          <ph id="ph4">&lt;xref:System.Windows.Controls.Page&gt;</ph> by using the default constructor.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Alternatively, your                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> can implement properties that are set with the data that needs to be passed.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Things become tricky, however, when a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> needs to pass data back to the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> that navigated to it.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The problem is that navigation doesn't natively support mechanisms for guaranteeing that a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> will be returned to after it is navigated from.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Essentially, navigation doesn't support call/return semantics.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>To solve this problem,                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> provides the                          <ph id="ph2">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph> class that you can use to ensure that a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> is returned to in a predictable and structured fashion.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>For more information, see                          <bpt id="p1">[</bpt>Structured Navigation Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/structured-navigation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The NavigationWindow Class</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>To this point, you've seen the gamut of navigation services that you are most likely to use to build applications with navigable content.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>These services were discussed in the context of                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>, although they are not limited to                  <ph id="ph2">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Modern operating systems and                  <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> applications take advantage of the browser experience of modern users to incorporate browser-style navigation into standalone applications.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Common examples include:</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Word Thesaurus<ept id="p1">**</ept>: Navigate word choices.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>File Explorer<ept id="p1">**</ept>: Navigate files and folders.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Wizards<ept id="p1">**</ept>: Breaking down a complex task into multiple pages that can be navigated between.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>An example is the Windows Components Wizard that handles adding and removing                          <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> features.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>To incorporate browser-style navigation into your standalone applications, you can use the                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> derives from                  <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> and extends it with the same support for navigation that                  <ph id="ph3">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> provide.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>You can use                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> as either the main window of your standalone application or as a secondary window such as a dialog box.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>To implement a                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, as with most top-level classes in                  <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> (                 <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>,                  <ph id="ph4">&lt;xref:System.Windows.Controls.Page&gt;</ph>, and so on), you use a combination of markup and code-behind.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>This is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>IntroToNavNavigationWindowSnippets#NavigationWindowMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/IntroToNavNavigationWindowSnippets/CSharp/MainWindow.xaml#navigationwindowmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>IntroToNavNavigationWindowSnippets#NavigationWindowCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/IntroToNavNavigationWindowSnippets/CSharp/MainWindow.xaml.cs#navigationwindowcodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>IntroToNavNavigationWindowSnippets#NavigationWindowCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/IntroToNavNavigationWindowSnippets/VisualBasic/MainWindow.xaml.vb#navigationwindowcodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This code creates a                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> that automatically navigates to a                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> (HomePage.xaml) when the                  <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> is opened.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>If the                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> is the main application window, you can use the                  <ph id="ph2">`StartupUri`</ph> attribute to launch it.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>This is shown in the following markup.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>IntroToNavNavigationWindowSnippets#AppLaunchNavWindow<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/IntroToNavNavigationWindowSnippets/CSharp/App.xaml#applaunchnavwindow)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The following figure shows the                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> as the main window of a standalone application.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A main window<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure18.png "</bpt>NavigationOverviewFigure18<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>From the figure, you can see that the                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> has a title, even though it wasn't set in the                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> implementation code from the preceding example.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Instead, the title is set using the                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A&gt;</ph> property, which is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>IntroToNavNavigationWindowSnippets#HomePageMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/IntroToNavNavigationWindowSnippets/CSharp/HomePage.xaml#homepagemarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>IntroToNavNavigationWindowSnippets#HomePageMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/IntroToNavNavigationWindowSnippets/CSharp/HomePage.xaml#homepagemarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Setting the                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page.WindowWidth%2A&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page.WindowHeight%2A&gt;</ph> properties also affects the                  <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Usually, you implement your own                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> when you need to customize either its behavior or its appearance.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>If you do neither, you can use a shortcut.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>If you specify the pack                  <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> of a                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> as the                  <ph id="ph3">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> in a standalone application,                  <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph> automatically creates a                  <ph id="ph5">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> to host the                  <ph id="ph6">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The following markup shows how to enable this.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>IntroToNavNavigationWindowSnippets#AppLaunchPage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/IntroToNavNavigationWindowSnippets/CSharp/AnotherApp.xaml#applaunchpage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>If you want a secondary application window such as a dialog box to be a                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, you can use the code in the following example to open it.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>IntroToNavNavigationWindowSnippets#CreateNWDialogBox<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/IntroToNavNavigationWindowSnippets/CSharp/DialogOwnerWindow.xaml.cs#createnwdialogbox)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>IntroToNavNavigationWindowSnippets#CreateNWDialogBox<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/IntroToNavNavigationWindowSnippets/VisualBasic/DialogOwnerWindow.xaml.vb#createnwdialogbox)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The following figure shows the result.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A dialog box<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure19.png "</bpt>NavigationOverviewFigure19<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>As you can see,                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> displays                  <ph id="ph2">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph>-style                  <bpt id="p1">**</bpt>Back<ept id="p1">**</ept> and                  <bpt id="p2">**</bpt>Forward<ept id="p2">**</ept> buttons that allow users to navigate the journal.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>These buttons provide the same user experience, as shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Back and Forward buttons in a NavigationWindow<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure20.png "</bpt>NavigationOverviewFigure20<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>If your pages provide their own journal navigation support and UI, you can hide the                  <bpt id="p1">**</bpt>Back<ept id="p1">**</ept> and                  <bpt id="p2">**</bpt>Forward<ept id="p2">**</ept> buttons displayed by                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> by setting the value of the                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow.ShowsNavigationUI%2A&gt;</ph> property to                  <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use customization support in                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> to replace the                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> of the                  <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> itself.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The Frame Class</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Both the browser and                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> are windows that host navigable content.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>In some cases, applications have content that does not need to be hosted by an entire window.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Instead, such content be hosted inside other content.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>You can insert navigable content into other content by using the                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> provides the same support as                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> and                  <ph id="ph3">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> to a                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> declaratively by using the                  <ph id="ph3">`Frame`</ph> element.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHostPageXAML1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHostPage.xaml#framehostpagexaml1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHostPageXAML2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHostPage.xaml#framehostpagexaml2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHostPageXAML3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHostPage.xaml#framehostpagexaml3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>This markup sets the                  <ph id="ph1">`Source`</ph> attribute of the                  <ph id="ph2">`Frame`</ph> element with a pack                  <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> for the                  <ph id="ph4">&lt;xref:System.Windows.Controls.Page&gt;</ph> that the                  <ph id="ph5">&lt;xref:System.Windows.Controls.Frame&gt;</ph> should initially navigate to.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>The following figure shows an                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> with a                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> that has a                  <ph id="ph3">&lt;xref:System.Windows.Controls.Frame&gt;</ph> that has navigated between several pages.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A frame that has navigated between multiple pages<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure5.png "</bpt>NavigationOverviewFigure5<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>You don't only have to use                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> inside the content of a                  <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>It is also common to host a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> inside the content of a                  <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>By default,                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> only uses its own journal in the absence of another journal.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>If a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> is part of content that is hosted inside either a                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or an                  <ph id="ph3">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>,                  <ph id="ph4">&lt;xref:System.Windows.Controls.Frame&gt;</ph> uses the journal that belongs to the                  <ph id="ph5">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or                  <ph id="ph6">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Sometimes, though, a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> might need to be responsible for its own journal.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>One reason to do so is to allow journal navigation within the pages that are hosted by a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>This is illustrated by the following figure.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Frame and Page diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure7.png "</bpt>NavigationOverviewFigure7<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>In this case, you can configure the                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> to use its own journal by setting the                  <ph id="ph2">&lt;xref:System.Windows.Controls.Frame.JournalOwnership%2A&gt;</ph> property of the                  <ph id="ph3">&lt;xref:System.Windows.Controls.Frame&gt;</ph> to                  <ph id="ph4">&lt;xref:System.Windows.Navigation.JournalOwnership&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>This is shown in the following markup.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHostPageOwnJournalXAML1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHostPageOwnJournal.xaml#framehostpageownjournalxaml1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHostPageOwnJournalXAML2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHostPageOwnJournal.xaml#framehostpageownjournalxaml2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHostPageOwnJournalXAML3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHostPageOwnJournal.xaml#framehostpageownjournalxaml3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The following figure illustrates the effect of navigating within a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> that uses its own journal.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A frame that uses its own journal<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure8.png "</bpt>NavigationOverviewFigure8<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Notice that the journal entries are shown by the navigation                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> in the                  <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>, rather than by                  <ph id="ph3">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>If a                      <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> is part of content that is hosted in a                      <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>,                      <ph id="ph3">&lt;xref:System.Windows.Controls.Frame&gt;</ph> uses its own journal and, consequently, displays its own navigation                      <ph id="ph4">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>If your user experience requires a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> to provide its own journal without showing the navigation                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, you can hide the navigation                  <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> by setting the                  <ph id="ph4">&lt;xref:System.Windows.Controls.Frame.NavigationUIVisibility%2A&gt;</ph> to                  <ph id="ph5">&lt;xref:System.Windows.Visibility&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>This is shown in the following markup.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHostPageHidesUIXAML1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHostPageOwnHiddenJournal.xaml#framehostpagehidesuixaml1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHostPageHidesUIXAML2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHostPageOwnHiddenJournal.xaml#framehostpagehidesuixaml2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHostPageHidesUIXAML3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHostPageOwnHiddenJournal.xaml#framehostpagehidesuixaml3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Navigation Hosts</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> are classes that are known as navigation hosts.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>A                  <bpt id="p1">*</bpt>navigation host<ept id="p1">*</ept> is a class that can navigate to and display content.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>To accomplish this, each navigation host uses its own                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> and journal.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The basic construction of a navigation host is shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Navigator diagrams<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure15.png "</bpt>NavigationOverviewFigure15<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Essentially, this allows                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph> to provide the same navigation support that an                  <ph id="ph3">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> provides when hosted in the browser.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Besides using                  <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> and a journal, navigation hosts implement the same members that                  <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationService&gt;</ph> implements.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>This is illustrated by the following figure.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A journal in a Frame and in a NavigationWindow<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/naivgationoverviewfigure24.png "</bpt>NaivgationOverviewFigure24<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>This allows you to program navigation support directly against them.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>You may consider this if you need to provide a custom navigation                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> for a                  <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph> that is hosted in a                  <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Furthermore, both types implement additional, navigation-related members, including                  <ph id="ph1">`BackStack`</ph> (                 <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow.BackStack%2A?displayProperty=fullName&gt;</ph>,                  <ph id="ph3">&lt;xref:System.Windows.Controls.Frame.BackStack%2A?displayProperty=fullName&gt;</ph>) and                  <ph id="ph4">`ForwardStack`</ph> (                 <ph id="ph5">&lt;xref:System.Windows.Navigation.NavigationWindow.ForwardStack%2A?displayProperty=fullName&gt;</ph>,                  <ph id="ph6">&lt;xref:System.Windows.Controls.Frame.ForwardStack%2A?displayProperty=fullName&gt;</ph>), which allow you to enumerate the journal entries in the back stack and forward stack, respectively.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, more than one journal can exist within an application.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The following figure provides an example of when this can happen.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Multiple journals within one application<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/naivgationoverviewfigure25.png "</bpt>NaivgationOverviewFigure25<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Navigating to Content Other than XAML Pages</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Throughout this topic,                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> and pack                  <ph id="ph2">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> have been used to demonstrate the various navigation capabilities of                  <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>However, a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that is compiled into an application is not the only type of content that can be navigated to, and pack                  <ph id="ph2">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> aren't the only way to identify content.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>As this section demonstrates, you can also navigate to loose                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> files,                  <ph id="ph2">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph> files, and objects.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Navigating to Loose XAML Files</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>A loose                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file is a file with the following characteristics:</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Contains only                                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> (that is, no code).</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Has an appropriate namespace declaration.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Has the .xaml file name extension.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For example, consider the following content that is stored as a loose                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file, Person.xaml.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#LooseXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/Person.xaml#loosexaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>When you double-click the file, the browser opens and navigates to and displays the content.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>This is shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Display of the content in the Person.XAML file<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure21.png "</bpt>NavigationOverviewFigure21<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>You can display a loose                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file from the following:</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>A Web site on the local machine, the intranet, or the Internet.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>A                                  <ph id="ph1">[!INCLUDE[TLA#tla_unc](../../../../includes/tlasharptla-unc-md.md)]</ph> file share.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The local disk.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>A loose                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file can be added to the browser's favorites, or be the browser's home page.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>For more information about publishing and launching loose                              <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> pages, see                              <bpt id="p1">[</bpt>Deploying a WPF Application<ept id="p1">](../../../../docs/framework/wpf/app-development/deploying-a-wpf-application-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>One limitation with respect to loose                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> is that you can only host content that is safe to run in partial trust.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>For example,                          <ph id="ph1">`Window`</ph> cannot be the root element of a loose                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>For more information, see                          <bpt id="p1">[</bpt>WPF Partial Trust Security<ept id="p1">](../../../../docs/framework/wpf/wpf-partial-trust-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Navigating to HTML Files by Using Frame</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>As you might expect, you can also navigate to                          <ph id="ph1">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>You simply need to provide a                          <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that uses the http scheme.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>For example, the following                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> shows a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph> that navigates to an                          <ph id="ph3">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph> page.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigationOverviewSnippets#FrameHtmlNavMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigationOverviewSnippets/CSharp/FrameHTMLNavPage.xaml#framehtmlnavmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Navigating to                          <ph id="ph1">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph> requires special permissions.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>For example, you can't navigate from an                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> that is running in the Internet zone partial trust security sandbox.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>For more information, see                          <bpt id="p1">[</bpt>WPF Partial Trust Security<ept id="p1">](../../../../docs/framework/wpf/wpf-partial-trust-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Navigating to HTML Files by Using the WebBrowser Control</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Controls.WebBrowser&gt;</ph> control supports                          <ph id="ph2">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph> document hosting, navigation and script/managed code interoperability.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>For detailed information regarding the                          <ph id="ph1">&lt;xref:System.Windows.Controls.WebBrowser&gt;</ph> control, see                          <ph id="ph2">&lt;xref:System.Windows.Controls.WebBrowser&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Like                          <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>, navigating to                          <ph id="ph2">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph> using                          <ph id="ph3">&lt;xref:System.Windows.Controls.WebBrowser&gt;</ph> requires special permissions.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>For example, from a partial-trust application, you can navigate only to                          <ph id="ph1">[!INCLUDE[TLA2#tla_html](../../../../includes/tla2sharptla-html-md.md)]</ph> located at the site of origin.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>For more information, see                          <bpt id="p1">[</bpt>WPF Partial Trust Security<ept id="p1">](../../../../docs/framework/wpf/wpf-partial-trust-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Navigating to Custom Objects</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>If you have data that is stored as custom objects, one way to display that data is to create a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> with content that is bound to those objects (see                          <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>If you don't need the overhead of creating an entire page just to display the objects, you can navigate directly to them instead.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Consider the                          <ph id="ph1">`Person`</ph> class that is implemented in the following code.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigateToObjectSnippets#PersonClassCODE<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigateToObjectSnippets/CSharp/Person.cs#personclasscode)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigateToObjectSnippets#PersonClassCODE<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigateToObjectSnippets/VisualBasic/Person.vb#personclasscode)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>To navigate to it, you call the                          <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow.Navigate%2A?displayProperty=fullName&gt;</ph> method, as demonstrated by the following code.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigateToObjectSnippets#PageThatNavsToObject1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigateToObjectSnippets/CSharp/HomePage.xaml#pagethatnavstoobject1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigateToObjectSnippets#PageThatNavsToObject2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigateToObjectSnippets/CSharp/HomePage.xaml#pagethatnavstoobject2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigateToObjectSnippets#PageThatNavsToObject3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigateToObjectSnippets/CSharp/HomePage.xaml#pagethatnavstoobject3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NavigateToObjectSnippets#PageThatNavsToObjectCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigateToObjectSnippets/CSharp/HomePage.xaml.cs#pagethatnavstoobjectcodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>NavigateToObjectSnippets#PageThatNavsToObjectCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/NavigateToObjectSnippets/VisualBasic/HomePage.xaml.vb#pagethatnavstoobjectcodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The following figure shows the result.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A page that navigates to a class<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure22.png "</bpt>NavigationOverviewFigure22<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>From this figure, you can see that nothing useful is displayed.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>In fact, the value that is displayed is the return value of the                          <ph id="ph1">`ToString`</ph> method for the                          <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> object; by default, this is the only value that                          <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> can use to represent your object.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>You could override the                          <ph id="ph1">`ToString`</ph> method to return more meaningful information, although it will still only be a string value.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>One technique you can use that takes advantage of the presentation capabilities of                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> is to use a data template.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>You can implement a data template that                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> can associate with an object of a particular type.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>The following code shows a data template for the                          <ph id="ph1">`Person`</ph> object.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>NavigateToObjectSnippets#DataTemplateMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/NavigateToObjectSnippets/CSharp/App.xaml#datatemplatemarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Here, the data template is associated with the                          <ph id="ph1">`Person`</ph> type by using the                          <ph id="ph2">`x:Type`</ph> markup extension in the                          <ph id="ph3">`DataType`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The data template then binds                          <ph id="ph1">`TextBlock`</ph> elements (see                          <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>) to the properties of the                          <ph id="ph3">`Person`</ph> class.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The following figure shows the updated appearance of the                          <ph id="ph1">`Person`</ph> object.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Navigating to a class that has a data template<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/navigationoverviewfigure23.png "</bpt>NavigationOverviewFigure23<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>An advantage of this technique is the consistency you gain by being able to reuse the data template to display your objects consistently anywhere in your application.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>For more information on data templates, see                          <bpt id="p1">[</bpt>Data Templating Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-templating-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Security</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> navigation support allows                  <ph id="ph2">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> to be navigated to across the Internet, and it allows applications to host third-party content.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>To protect both applications and users from harmful behavior,                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> provides a variety of security features that are discussed in                  <bpt id="p1">[</bpt>Security<ept id="p1">](../../../../docs/framework/wpf/security-wpf.md)</ept> and                  <bpt id="p2">[</bpt>WPF Partial Trust Security<ept id="p2">](../../../../docs/framework/wpf/wpf-partial-trust-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.GetCookie%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Application Management Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/application-management-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Pack URIs in WPF<ept id="p1">](../../../../docs/framework/wpf/app-development/pack-uris-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structured Navigation Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/structured-navigation-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Navigation Topologies Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/navigation-topologies-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How-to Topics<ept id="p1">](../../../../docs/framework/wpf/app-development/navigation-how-to-topics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Deploying a WPF Application<ept id="p1">](../../../../docs/framework/wpf/app-development/deploying-a-wpf-application-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>