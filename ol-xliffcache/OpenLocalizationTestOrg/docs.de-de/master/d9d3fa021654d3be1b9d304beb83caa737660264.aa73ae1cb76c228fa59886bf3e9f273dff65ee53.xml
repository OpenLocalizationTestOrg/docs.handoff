{"content":"---\ntitle: \"/= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb./=\"\nhelpviewer_keywords: \n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"/= operator [Visual Basic]\"\n  - \"operator /=\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: a1e22d0e-8380-4761-9da1-84fb51c34821\n---\n# /= Operator (Visual Basic)\nDivides the value of a variable or property by the value of an expression and assigns the floating-point result to the variable or property.  \n  \n## Syntax  \n  \n```  \nvariableorproperty /= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric variable or property.  \n  \n `expression`  \n Required. Any numeric expression.  \n  \n## Remarks  \n The element on the left side of the `/=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `/=` operator first divides the value of the variable or property (on the left-hand side of the operator) by the value of the expression (on the right-hand side of the operator). The operator then assigns the floating-point result of that operation to the variable or property.  \n  \n This statement assigns a `Double` value to the variable or property on the left. If `Option Strict` is `On`, `variableorproperty` must be a `Double`. If `Option Strict` is `Off`, Visual Basic performs an implicit conversion and assigns the resulting value to `variableorproperty`, with a possible error at run time. For more information, see [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md) and [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md).  \n  \n## Overloading  \n The [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `/` operator affects the behavior of the `/=` operator. If your code uses `/=` on a class or structure that overloads `/`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `/=` operator to divide one `Integer` variable by a second and assign the quotient to the first variable.  \n  \n [!code-vb[VbVbalrOperators#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#17)]  \n  \n## See also\n\n- [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)\n- [\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)\n- [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n","nodes":[{"pos":[4,365],"embed":true,"restype":"x-metadata","content":"title: \"/= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb./=\"\nhelpviewer_keywords: \n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"/= operator [Visual Basic]\"\n  - \"operator /=\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: a1e22d0e-8380-4761-9da1-84fb51c34821","nodes":[{"content":"/= Operator (Visual Basic)","nodes":[{"pos":[0,26],"content":"/= Operator (Visual Basic)","nodes":[{"content":"/= Operator (Visual Basic)","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[372,398],"content":"/= Operator (Visual Basic)","linkify":"/= Operator (Visual Basic)","nodes":[{"content":"/= Operator (Visual Basic)","pos":[0,26]}]},{"content":"Divides the value of a variable or property by the value of an expression and assigns the floating-point result to the variable or property.","pos":[399,539]},{"pos":[548,554],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[613,618],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[646,655]},{"content":"Any numeric variable or property.","pos":[656,689]},{"content":"Required.","pos":[712,721]},{"content":"Any numeric expression.","pos":[722,745]},{"pos":[754,761],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`/=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[765,886],"source":"The element on the left side of the `/=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[887,997],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`/=`</ph> operator first divides the value of the variable or property (on the left-hand side of the operator) by the value of the expression (on the right-hand side of the operator).","pos":[1004,1186],"source":"The `/=` operator first divides the value of the variable or property (on the left-hand side of the operator) by the value of the expression (on the right-hand side of the operator)."},{"content":"The operator then assigns the floating-point result of that operation to the variable or property.","pos":[1187,1285]},{"content":"This statement assigns a <ph id=\"ph1\">`Double`</ph> value to the variable or property on the left.","pos":[1292,1372],"source":"This statement assigns a `Double` value to the variable or property on the left."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`On`</ph>, <ph id=\"ph3\">`variableorproperty`</ph> must be a <ph id=\"ph4\">`Double`</ph>.","pos":[1373,1441],"source":" If `Option Strict` is `On`, `variableorproperty` must be a `Double`."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, Visual Basic performs an implicit conversion and assigns the resulting value to <ph id=\"ph3\">`variableorproperty`</ph>, with a possible error at run time.","pos":[1442,1607],"source":" If `Option Strict` is `Off`, Visual Basic performs an implicit conversion and assigns the resulting value to `variableorproperty`, with a possible error at run time."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept> and <bpt id=\"p2\">[</bpt>Option Strict Statement<ept id=\"p2\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>.","pos":[1608,1889],"source":" For more information, see [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md) and [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)."},{"pos":[1898,1909],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>/ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1913,2174],"source":"The [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`/`</ph> operator affects the behavior of the <ph id=\"ph2\">`/=`</ph> operator.","pos":[2175,2246],"source":" Overloading the `/` operator affects the behavior of the `/=` operator."},{"content":"If your code uses <ph id=\"ph1\">`/=`</ph> on a class or structure that overloads <ph id=\"ph2\">`/`</ph>, be sure you understand its redefined behavior.","pos":[2247,2360],"source":" If your code uses `/=` on a class or structure that overloads `/`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[2361,2502],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[2511,2518],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2522,2658],"content":"The following example uses the <ph id=\"ph1\">`/=`</ph> operator to divide one <ph id=\"ph2\">`Integer`</ph> variable by a second and assign the quotient to the first variable.","source":"The following example uses the `/=` operator to divide one `Integer` variable by a second and assign the quotient to the first variable."},{"pos":[2791,2799],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2803,2918],"content":"<bpt id=\"p1\">[</bpt>/ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept>","source":"[/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)"},{"pos":[2921,3027],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\\\</ph>= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)</ept>","source":"[\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)"},{"pos":[3030,3128],"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>","source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)"},{"pos":[3131,3229],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[3232,3344],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[3347,3471],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[3474,3559],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}