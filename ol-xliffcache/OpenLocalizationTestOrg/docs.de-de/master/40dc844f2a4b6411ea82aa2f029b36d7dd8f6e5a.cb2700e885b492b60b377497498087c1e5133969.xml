{"content":"---\ntitle: \"= Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/26/2018\nf1_keywords: \n  - \"=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"= operator [C#]\"\nms.assetid: d802a6d5-32f0-42b8-b180-12f5a081bfc1\n---\n# = Operator (C# Reference)\n\nThe assignment operator `=` assigns the value of its right-hand operand to a variable, a [property](../../programming-guide/classes-and-structs/properties.md), or an [indexer](../../../csharp/programming-guide/indexers/index.md) element given by its left-hand operand. The result of an assignment expression is the value assigned to the left-hand operand. The type of the right-hand operand must be the same as the type of the left-hand operand or implicitly convertible to it.\n\nThe assignment operator is right-associative, that is, an expression of the form\n\n```csharp\na = b = c\n```\n\nis evaluated as\n\n```csharp\na = (b = c)\n```\n\nThe following example demonstrates the usage of the assignment operator to assign values to a local variable, a property, and an indexer element:\n\n[!code-csharp-interactive[assignment operator](~/samples/snippets/csharp/language-reference/operators/AssignmentExamples.cs#Assignments)]\n\n## ref assignment operator\n\nBeginning with C# 7.3, you can use the ref assignment operator `= ref` to reassign a [ref local](../keywords/ref.md#ref-locals) or [ref readonly local](../keywords/ref.md#ref-readonly-locals) variable. The following example demonstrates the usage of the ref assignment operator:\n\n[!code-csharp[ref assignment operator](~/samples/snippets/csharp/language-reference/operators/AssignmentExamples.cs#RefAssignment)]\n\nIn the case of the ref assignment operator, the type of the left operand and the right operand must be the same.\n\nFor more information, see the [feature proposal note](../../../../_csharplang/proposals/csharp-7.3/ref-local-reassignment.md).\n\n## Operator overloadability\n\nA user-defined type cannot overload the assignment operator. However, a user-defined type can define an implicit conversion to another type. That way, the value of a user-defined type can be assigned to a variable, a property, or an indexer element of another type. For more information, see the [implicit](../keywords/implicit.md) keyword article.\n\n## C# language specification\n\nFor more information, see the [Simple assignment](~/_csharplang/spec/expressions.md#simple-assignment) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [ref keyword](../keywords/ref.md)\n","nodes":[{"pos":[4,208],"embed":true,"restype":"x-metadata","content":"title: \"= Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/26/2018\nf1_keywords: \n  - \"=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"= operator [C#]\"\nms.assetid: d802a6d5-32f0-42b8-b180-12f5a081bfc1","nodes":[{"content":"= Operator - C# Reference","nodes":[{"pos":[0,25],"content":"= Operator - C# Reference","nodes":[{"content":"= Operator - C# Reference","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[215,240],"content":"= Operator (C# Reference)","linkify":"= Operator (C# Reference)","nodes":[{"content":"= Operator (C# Reference)","pos":[0,25]}]},{"content":"The assignment operator <ph id=\"ph1\">`=`</ph> assigns the value of its right-hand operand to a variable, a <bpt id=\"p1\">[</bpt>property<ept id=\"p1\">](../../programming-guide/classes-and-structs/properties.md)</ept>, or an <bpt id=\"p2\">[</bpt>indexer<ept id=\"p2\">](../../../csharp/programming-guide/indexers/index.md)</ept> element given by its left-hand operand.","pos":[242,510],"source":"The assignment operator `=` assigns the value of its right-hand operand to a variable, a [property](../../programming-guide/classes-and-structs/properties.md), or an [indexer](../../../csharp/programming-guide/indexers/index.md) element given by its left-hand operand."},{"content":"The result of an assignment expression is the value assigned to the left-hand operand.","pos":[511,597]},{"content":"The type of the right-hand operand must be the same as the type of the left-hand operand or implicitly convertible to it.","pos":[598,719]},{"content":"The assignment operator is right-associative, that is, an expression of the form","pos":[721,801]},{"content":"is evaluated as","pos":[828,843]},{"content":"The following example demonstrates the usage of the assignment operator to assign values to a local variable, a property, and an indexer element:","pos":[872,1017]},{"pos":[1161,1184],"content":"ref assignment operator","linkify":"ref assignment operator","nodes":[{"content":"ref assignment operator","pos":[0,23]}]},{"content":"Beginning with C# 7.3, you can use the ref assignment operator <ph id=\"ph1\">`= ref`</ph> to reassign a <bpt id=\"p1\">[</bpt>ref local<ept id=\"p1\">](../keywords/ref.md#ref-locals)</ept> or <bpt id=\"p2\">[</bpt>ref readonly local<ept id=\"p2\">](../keywords/ref.md#ref-readonly-locals)</ept> variable.","pos":[1186,1387],"source":"Beginning with C# 7.3, you can use the ref assignment operator `= ref` to reassign a [ref local](../keywords/ref.md#ref-locals) or [ref readonly local](../keywords/ref.md#ref-readonly-locals) variable."},{"content":"The following example demonstrates the usage of the ref assignment operator:","pos":[1388,1464]},{"content":"In the case of the ref assignment operator, the type of the left operand and the right operand must be the same.","pos":[1599,1711]},{"pos":[1713,1839],"content":"For more information, see the <bpt id=\"p1\">[</bpt>feature proposal note<ept id=\"p1\">](../../../../_csharplang/proposals/csharp-7.3/ref-local-reassignment.md)</ept>.","source":"For more information, see the [feature proposal note](../../../../_csharplang/proposals/csharp-7.3/ref-local-reassignment.md)."},{"pos":[1844,1868],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"A user-defined type cannot overload the assignment operator.","pos":[1870,1930]},{"content":"However, a user-defined type can define an implicit conversion to another type.","pos":[1931,2010]},{"content":"That way, the value of a user-defined type can be assigned to a variable, a property, or an indexer element of another type.","pos":[2011,2135]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>implicit<ept id=\"p1\">](../keywords/implicit.md)</ept> keyword article.","pos":[2136,2218],"source":" For more information, see the [implicit](../keywords/implicit.md) keyword article."},{"pos":[2223,2248],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2250,2432],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Simple assignment<ept id=\"p1\">](~/_csharplang/spec/expressions.md#simple-assignment)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Simple assignment](~/_csharplang/spec/expressions.md#simple-assignment) section of the [C# language specification](../language-specification/index.md)."},{"pos":[2437,2445],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2449,2476],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2479,2535],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2538,2562],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[2565,2598],"content":"<bpt id=\"p1\">[</bpt>ref keyword<ept id=\"p1\">](../keywords/ref.md)</ept>","source":"[ref keyword](../keywords/ref.md)"}]}