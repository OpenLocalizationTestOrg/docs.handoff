{"content":"---\ntitle: \"The type for variable &#39;&lt;variablename&gt;&#39; will not be inferred because it is bound to a field in an enclosing scope | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc42110\"\n  - \"bc42110\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"BC42110\"\nms.assetid: ef4442eb-08d1-434f-a03b-4aa2ed4e4414\ncaps.latest.revision: 33\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# The type for variable &#39;&lt;variablename&gt;&#39; will not be inferred because it is bound to a field in an enclosing scope\nThe type for variable '\\<variablename>' will not be inferred because it is bound to a field in an enclosing scope. Either change the name of '\\<variablename>', or use the fully qualified name (for example, 'Me.variablename' or 'MyBase.variablename').  \n  \n A loop control variable in your code has the same name as a field of the class or other enclosing scope. Because the control variable is used without an `As` clause, it is bound to the field in the enclosing scope, and the compiler does not create a new variable for it or infer its type.  \n  \n In the following example, `Index`, the control variable in the `For` statement, is bound to the `Index` field in the `Customer` class. The compiler does not create a new variable for the control variable `Index` or infer its type.  \n  \n```  \nClass Customer  \n  \n    ' The class has a field named Index.  \n    Private Index As Integer  \n  \n    Sub Main()  \n  \n    ' The following line will raise this warning.  \n        For Index = 1 To 10  \n            ' ...  \n        Next  \n  \n    End Sub  \nEnd Class  \n  \n```  \n  \n By default, this message is a warning. For information about how to hide warnings or how to treat warnings as errors, see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic).  \n  \n **Error ID:** BC42110  \n  \n### To address this warning  \n  \n-   Make the loop control variable local by changing its name to an identifier that is not also the name of a field of the class.  \n  \n    ```  \n    For I = 1 To 10  \n    ```  \n  \n-   Clarify that the loop control variable binds to the class field by prefixing `Me.` to the variable name.  \n  \n    ```  \n    For Me.Index = 1 To 10  \n    ```  \n  \n-   Instead of relying on local type inference, use an `As` clause to specify a type for the loop control variable.  \n  \n    ```  \n    For Index As Integer = 1 To 10  \n    ```  \n  \n## Example  \n The following code shows the earlier example with the first correction in place.  \n  \n```  \nClass Customer  \n  \n    ' The class has a field named Index.  \n    Private Index As Integer  \n  \n    Sub Main()  \n  \n        For I = 1 To 10  \n            ' ...  \n        Next  \n  \n    End Sub  \nEnd Class  \n```  \n  \n## See Also  \n [Option Infer Statement](../../../visual-basic/language-reference/statements/option-infer-statement.md)   \n [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md)   \n [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)   \n [How to: Refer to the Current Instance of an Object](../../../visual-basic/programming-guide/language-features/variables/how-to-refer-to-the-current-instance-of-an-object.md)   \n [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)   \n [Me, My, MyBase, and MyClass](../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)","nodes":[{"pos":[4,713],"nodes":[{"content":"The type for variable &#39;&lt;variablename&gt;&#39; will not be inferred because it is bound to a field in an enclosing scope | Microsoft Docs","nodes":[{"pos":[0,143],"content":"The type for variable &#39;&lt;variablename&gt;&#39; will not be inferred because it is bound to a field in an enclosing scope | Microsoft Docs","nodes":[{"content":"The type for variable &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>variablename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; will not be inferred because it is bound to a field in an enclosing scope | Microsoft Docs","pos":[0,143],"source":"The type for variable &#39;&lt;variablename&gt;&#39; will not be inferred because it is bound to a field in an enclosing scope | Microsoft Docs"}]}],"pos":[6,152],"yaml":true}],"content":"title: \"The type for variable &#39;&lt;variablename&gt;&#39; will not be inferred because it is bound to a field in an enclosing scope | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc42110\"\n  - \"bc42110\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"BC42110\"\nms.assetid: ef4442eb-08d1-434f-a03b-4aa2ed4e4414\ncaps.latest.revision: 33\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[720,846],"content":"The type for variable &#39;&lt;variablename&gt;&#39; will not be inferred because it is bound to a field in an enclosing scope","linkify":"The type for variable &#39;&lt;variablename&gt;&#39; will not be inferred because it is bound to a field in an enclosing scope","nodes":[{"content":"The type for variable &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>variablename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; will not be inferred because it is bound to a field in an enclosing scope","pos":[0,126],"source":"The type for variable &#39;&lt;variablename&gt;&#39; will not be inferred because it is bound to a field in an enclosing scope"}]},{"content":"The type for variable '<ph id=\"ph1\">\\&lt;</ph>variablename&gt;' will not be inferred because it is bound to a field in an enclosing scope.","pos":[847,961],"source":"The type for variable '\\<variablename>' will not be inferred because it is bound to a field in an enclosing scope."},{"content":"Either change the name of '<ph id=\"ph1\">\\&lt;</ph>variablename&gt;', or use the fully qualified name (for example, 'Me.variablename' or 'MyBase.variablename').","pos":[962,1097],"source":" Either change the name of '\\<variablename>', or use the fully qualified name (for example, 'Me.variablename' or 'MyBase.variablename')."},{"content":"A loop control variable in your code has the same name as a field of the class or other enclosing scope.","pos":[1104,1208]},{"content":"Because the control variable is used without an <ph id=\"ph1\">`As`</ph> clause, it is bound to the field in the enclosing scope, and the compiler does not create a new variable for it or infer its type.","pos":[1209,1392],"source":" Because the control variable is used without an `As` clause, it is bound to the field in the enclosing scope, and the compiler does not create a new variable for it or infer its type."},{"content":"In the following example, <ph id=\"ph1\">`Index`</ph>, the control variable in the <ph id=\"ph2\">`For`</ph> statement, is bound to the <ph id=\"ph3\">`Index`</ph> field in the <ph id=\"ph4\">`Customer`</ph> class.","pos":[1399,1533],"source":"In the following example, `Index`, the control variable in the `For` statement, is bound to the `Index` field in the `Customer` class."},{"content":"The compiler does not create a new variable for the control variable <ph id=\"ph1\">`Index`</ph> or infer its type.","pos":[1534,1629],"source":" The compiler does not create a new variable for the control variable `Index` or infer its type."},{"content":"By default, this message is a warning.","pos":[1917,1955]},{"content":"For information about how to hide warnings or how to treat warnings as errors, see <bpt id=\"p1\">[</bpt>Configuring Warnings in Visual Basic<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)</ept>.","pos":[1956,2160],"source":" For information about how to hide warnings or how to treat warnings as errors, see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)."},{"pos":[2167,2188],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC42110","source":"**Error ID:** BC42110"},{"pos":[2198,2221],"content":"To address this warning","linkify":"To address this warning","nodes":[{"content":"To address this warning","pos":[0,23]}]},{"content":"Make the loop control variable local by changing its name to an identifier that is not also the name of a field of the class.","pos":[2231,2356]},{"pos":[2411,2515],"content":"Clarify that the loop control variable binds to the class field by prefixing <ph id=\"ph1\">`Me.`</ph> to the variable name.","source":"Clarify that the loop control variable binds to the class field by prefixing `Me.` to the variable name."},{"pos":[2577,2688],"content":"Instead of relying on local type inference, use an <ph id=\"ph1\">`As`</ph> clause to specify a type for the loop control variable.","source":"Instead of relying on local type inference, use an `As` clause to specify a type for the loop control variable."},{"pos":[2757,2764],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code shows the earlier example with the first correction in place.","pos":[2768,2848]},{"pos":[3079,3087],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Option Infer Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3091,3195],"source":"[Option Infer Statement](../../../visual-basic/language-reference/statements/option-infer-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3199,3307],"source":"[For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3311,3409],"source":"[For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Refer to the Current Instance of an Object<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/how-to-refer-to-the-current-instance-of-an-object.md)</ept><ph id=\"ph1\"> </ph>","pos":[3413,3588],"source":"[How to: Refer to the Current Instance of an Object](../../../visual-basic/programming-guide/language-features/variables/how-to-refer-to-the-current-instance-of-an-object.md) "},{"content":"<bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id=\"ph1\"> </ph>","pos":[3592,3708],"source":"[Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md) "},{"content":"<bpt id=\"p1\">[</bpt>Me, My, MyBase, and MyClass<ept id=\"p1\">](../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept>","pos":[3712,3828],"source":"[Me, My, MyBase, and MyClass](../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)"}]}