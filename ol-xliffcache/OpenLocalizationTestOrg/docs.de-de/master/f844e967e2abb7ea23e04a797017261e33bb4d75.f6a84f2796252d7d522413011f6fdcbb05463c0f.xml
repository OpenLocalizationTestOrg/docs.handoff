{"content":"---\ntitle: \"C# Features That Support LINQ | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"LINQ [C#], features supporting LINQ\"\nms.assetid: 524b0078-ebfd-45a7-b390-f2ceb9d84797\ncaps.latest.revision: 23\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# C# Features That Support LINQ\nThe following section introduces new language constructs introduced in C# 3.0. Although these new features are all used to a degree with [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] queries, they are not limited to [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] and can be used in any context where you find them useful.  \n  \n## Query Expressions  \n Queries expressions use a declarative syntax similar to SQL or XQuery to query over IEnumerable collections. At compile time query syntax is converted to method calls to a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] provider's implementation of the standard query operator extension methods. Applications control the standard query operators that are in scope by specifying the appropriate namespace with a `using` directive. The following query expression takes an array of strings, groups them according to the first character in the string, and orders the groups.  \n  \n```  \nvar query = from str in stringArray  \n            group str by str[0] into stringGroup  \n            orderby stringGroup.Key  \n            select stringGroup;  \n```  \n  \n For more information, see [LINQ Query Expressions](../../../../csharp/programming-guide/linq-query-expressions/index.md).  \n  \n## Implicitly Typed Variables (var)  \n Instead of explicitly specifying a type when you declare and initialize a variable, you can use the [var](../../../../csharp/language-reference/keywords/var.md) modifier to instruct the compiler to infer and assign the type, as shown here:  \n  \n```  \nvar number = 5;  \nvar name = \"Virginia\";  \nvar query = from str in stringArray  \n            where str[0] == 'm'  \n            select str;  \n```  \n  \n Variables declared as `var` are just as strongly-typed as variables whose type you specify explicitly. The use of `var` makes it possible to create anonymous types, but it can be used for any local variable. Arrays can also be declared with implicit typing.  \n  \n For more information, see [Implicitly Typed Local Variables](../../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md).  \n  \n## Object and Collection Initializers  \n Object and collection initializers make it possible to initialize objects without explicitly calling a constructor for the object. Initializers are typically used in query expressions when they project the source data into a new data type. Assuming a class named `Customer` with public `Name` and `Phone` properties, the object initializer can be used as in the following code:  \n  \n```  \nCustomer cust = new Customer { Name = \"Mike\", Phone = \"555-1212\" };  \n```  \n  \n For more information, see [Object and Collection Initializers](../../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md).  \n  \n## Anonymous Types  \n An anonymous type is constructed by the compiler and the type name is only available to the compiler. Anonymous types provide a convenient way to group a set of properties temporarily in a query result without having to define a separate named type. Anonymous types are initialized with a new expression and an object initializer, as shown here:  \n  \n```  \nselect new {name = cust.Name, phone = cust.Phone};  \n```  \n  \n For more information, see [Anonymous Types](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md).  \n  \n## Extension Methods  \n An extension method is a static method that can be associated with a type, so that it can be called as if it were an instance method on the type. This feature enables you to, in effect, \"add\" new methods to existing types without actually modifying them. The standard query operators are a set of extension methods that provide [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query functionality for any type that implements <xref:System.Collections.Generic.IEnumerable%601>.  \n  \n For more information, see [Extension Methods](../../../../csharp/programming-guide/classes-and-structs/extension-methods.md).  \n  \n## Lambda Expressions  \n A lambda expression is an inline function that uses the => operator to separate input parameters from the function body and can be converted at compile time to a delegate or an expression tree. In [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] programming, you will encounter lambda expressions when you make direct method calls to the standard query operators.  \n  \n For more information, see:  \n  \n-   [Anonymous Functions](../../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)  \n  \n-   [Lambda Expressions](../../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)  \n  \n-   [Expression Trees (C#)](../../../../csharp/programming-guide/concepts/expression-trees/index.md)  \n  \n## Auto-Implemented Properties  \n Auto-implemented properties make property-declaration more concise. When you declare a property as shown in the following example, the compiler will create a private, anonymous backing field that is not accessible except through the property getter and setter.  \n  \n```  \npublic string Name {get; set;}  \n```  \n  \n For more information, see [Auto-Implemented Properties](../../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md).  \n  \n## See Also  \n [Language-Integrated Query (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/index.md)","nodes":[{"pos":[12,58],"content":"C# Features That Support LINQ | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C# Features That Support LINQ | Microsoft Docs","pos":[0,46]}]},{"pos":[616,645],"content":"C# Features That Support LINQ","linkify":"C# Features That Support LINQ","nodes":[{"content":"C# Features That Support LINQ","pos":[0,29]}]},{"content":"The following section introduces new language constructs introduced in C# 3.0.","pos":[646,724]},{"content":"Although these new features are all used to a degree with <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries, they are not limited to <ph id=\"ph2\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> and can be used in any context where you find them useful.","pos":[725,1008],"source":" Although these new features are all used to a degree with [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] queries, they are not limited to [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] and can be used in any context where you find them useful."},{"pos":[1017,1034],"content":"Query Expressions","linkify":"Query Expressions","nodes":[{"content":"Query Expressions","pos":[0,17]}]},{"content":"Queries expressions use a declarative syntax similar to SQL or XQuery to query over IEnumerable collections.","pos":[1038,1146]},{"content":"At compile time query syntax is converted to method calls to a <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> provider's implementation of the standard query operator extension methods.","pos":[1147,1352],"source":" At compile time query syntax is converted to method calls to a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] provider's implementation of the standard query operator extension methods."},{"content":"Applications control the standard query operators that are in scope by specifying the appropriate namespace with a <ph id=\"ph1\">`using`</ph> directive.","pos":[1353,1486],"source":" Applications control the standard query operators that are in scope by specifying the appropriate namespace with a `using` directive."},{"content":"The following query expression takes an array of strings, groups them according to the first character in the string, and orders the groups.","pos":[1487,1627]},{"pos":[1810,1931],"content":"For more information, see <bpt id=\"p1\">[</bpt>LINQ Query Expressions<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/index.md)</ept>.","source":"For more information, see [LINQ Query Expressions](../../../../csharp/programming-guide/linq-query-expressions/index.md)."},{"pos":[1940,1972],"content":"Implicitly Typed Variables (var)","linkify":"Implicitly Typed Variables (var)","nodes":[{"content":"Implicitly Typed Variables (var)","pos":[0,32]}]},{"pos":[1976,2215],"content":"Instead of explicitly specifying a type when you declare and initialize a variable, you can use the <bpt id=\"p1\">[</bpt>var<ept id=\"p1\">](../../../../csharp/language-reference/keywords/var.md)</ept> modifier to instruct the compiler to infer and assign the type, as shown here:","source":"Instead of explicitly specifying a type when you declare and initialize a variable, you can use the [var](../../../../csharp/language-reference/keywords/var.md) modifier to instruct the compiler to infer and assign the type, as shown here:"},{"content":"Variables declared as <ph id=\"ph1\">`var`</ph> are just as strongly-typed as variables whose type you specify explicitly.","pos":[2378,2480],"source":"Variables declared as `var` are just as strongly-typed as variables whose type you specify explicitly."},{"content":"The use of <ph id=\"ph1\">`var`</ph> makes it possible to create anonymous types, but it can be used for any local variable.","pos":[2481,2585],"source":" The use of `var` makes it possible to create anonymous types, but it can be used for any local variable."},{"content":"Arrays can also be declared with implicit typing.","pos":[2586,2635]},{"pos":[2642,2797],"content":"For more information, see <bpt id=\"p1\">[</bpt>Implicitly Typed Local Variables<ept id=\"p1\">](../../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>.","source":"For more information, see [Implicitly Typed Local Variables](../../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)."},{"pos":[2806,2840],"content":"Object and Collection Initializers","linkify":"Object and Collection Initializers","nodes":[{"content":"Object and Collection Initializers","pos":[0,34]}]},{"content":"Object and collection initializers make it possible to initialize objects without explicitly calling a constructor for the object.","pos":[2844,2974]},{"content":"Initializers are typically used in query expressions when they project the source data into a new data type.","pos":[2975,3083]},{"content":"Assuming a class named <ph id=\"ph1\">`Customer`</ph> with public <ph id=\"ph2\">`Name`</ph> and <ph id=\"ph3\">`Phone`</ph> properties, the object initializer can be used as in the following code:","pos":[3084,3221],"source":" Assuming a class named `Customer` with public `Name` and `Phone` properties, the object initializer can be used as in the following code:"},{"pos":[3313,3472],"content":"For more information, see <bpt id=\"p1\">[</bpt>Object and Collection Initializers<ept id=\"p1\">](../../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>.","source":"For more information, see [Object and Collection Initializers](../../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)."},{"pos":[3481,3496],"content":"Anonymous Types","linkify":"Anonymous Types","nodes":[{"content":"Anonymous Types","pos":[0,15]}]},{"content":"An anonymous type is constructed by the compiler and the type name is only available to the compiler.","pos":[3500,3601]},{"content":"Anonymous types provide a convenient way to group a set of properties temporarily in a query result without having to define a separate named type.","pos":[3602,3749]},{"content":"Anonymous types are initialized with a new expression and an object initializer, as shown here:","pos":[3750,3845]},{"pos":[3920,4041],"content":"For more information, see <bpt id=\"p1\">[</bpt>Anonymous Types<ept id=\"p1\">](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)</ept>.","source":"For more information, see [Anonymous Types](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)."},{"pos":[4050,4067],"content":"Extension Methods","linkify":"Extension Methods","nodes":[{"content":"Extension Methods","pos":[0,17]}]},{"content":"An extension method is a static method that can be associated with a type, so that it can be called as if it were an instance method on the type.","pos":[4071,4216]},{"content":"This feature enables you to, in effect, \"add\" new methods to existing types without actually modifying them.","pos":[4217,4325]},{"content":"The standard query operators are a set of extension methods that provide <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query functionality for any type that implements <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[4326,4565],"source":" The standard query operators are a set of extension methods that provide [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query functionality for any type that implements <xref:System.Collections.Generic.IEnumerable%601>."},{"pos":[4572,4697],"content":"For more information, see <bpt id=\"p1\">[</bpt>Extension Methods<ept id=\"p1\">](../../../../csharp/programming-guide/classes-and-structs/extension-methods.md)</ept>.","source":"For more information, see [Extension Methods](../../../../csharp/programming-guide/classes-and-structs/extension-methods.md)."},{"pos":[4706,4724],"content":"Lambda Expressions","linkify":"Lambda Expressions","nodes":[{"content":"Lambda Expressions","pos":[0,18]}]},{"content":"A lambda expression is an inline function that uses the =&gt; operator to separate input parameters from the function body and can be converted at compile time to a delegate or an expression tree.","pos":[4728,4921],"source":"A lambda expression is an inline function that uses the => operator to separate input parameters from the function body and can be converted at compile time to a delegate or an expression tree."},{"content":"In <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> programming, you will encounter lambda expressions when you make direct method calls to the standard query operators.","pos":[4922,5109],"source":" In [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] programming, you will encounter lambda expressions when you make direct method calls to the standard query operators."},{"content":"For more information, see:","pos":[5116,5142]},{"pos":[5152,5267],"content":"<bpt id=\"p1\">[</bpt>Anonymous Functions<ept id=\"p1\">](../../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)</ept>","source":"[Anonymous Functions](../../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)"},{"pos":[5277,5390],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)"},{"pos":[5400,5496],"content":"<bpt id=\"p1\">[</bpt>Expression Trees (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/expression-trees/index.md)</ept>","source":"[Expression Trees (C#)](../../../../csharp/programming-guide/concepts/expression-trees/index.md)"},{"pos":[5505,5532],"content":"Auto-Implemented Properties","linkify":"Auto-Implemented Properties","nodes":[{"content":"Auto-Implemented Properties","pos":[0,27]}]},{"content":"Auto-implemented properties make property-declaration more concise.","pos":[5536,5603]},{"content":"When you declare a property as shown in the following example, the compiler will create a private, anonymous backing field that is not accessible except through the property getter and setter.","pos":[5604,5796]},{"pos":[5851,5996],"content":"For more information, see <bpt id=\"p1\">[</bpt>Auto-Implemented Properties<ept id=\"p1\">](../../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)</ept>.","source":"For more information, see [Auto-Implemented Properties](../../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)."},{"pos":[6005,6013],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6017,6117],"content":"<bpt id=\"p1\">[</bpt>Language-Integrated Query (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/index.md)</ept>","source":"[Language-Integrated Query (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/index.md)"}]}