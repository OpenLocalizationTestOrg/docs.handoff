<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2852093c0ee2e649d683d79f828b260d90c078d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\try-catch.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">856092fa2168a550663ec4e7326a2dcf5531e946</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d224fcdb40d16ff424d6dd734bff9cc8f281241a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>try-catch (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>try-catch (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The try-catch statement consists of a <ph id="ph1">`try`</ph> block followed by one or more <ph id="ph2">`catch`</ph> clauses, which specify handlers for different exceptions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When an exception is thrown, the common language runtime (CLR) looks for the <ph id="ph1">`catch`</ph> statement that handles this exception.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If the currently executing method does not contain such a <ph id="ph1">`catch`</ph> block, the CLR looks at the method that called the current method, and so on up the call stack.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`catch`</ph> block is found, then the CLR displays an unhandled exception message to the user and stops execution of the program.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`try`</ph> block contains the guarded code that may cause the exception.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The block is executed until an exception is thrown or it is completed successfully.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the following attempt to cast a <ph id="ph1">`null`</ph> object raises the <ph id="ph2">&lt;xref:System.NullReferenceException&gt;</ph> exception:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`catch`</ph> clause can be used without arguments to catch any type of exception, this usage is not recommended.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In general, you should only catch those exceptions that you know how to recover from.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Therefore, you should always specify an object argument derived from <ph id="ph1">&lt;xref:System.Exception?displayProperty=fullName&gt;</ph> For example:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is possible to use more than one specific <ph id="ph1">`catch`</ph> clause in the same try-catch statement.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this case, the order of the <ph id="ph1">`catch`</ph> clauses is important because the <ph id="ph2">`catch`</ph> clauses are examined in order.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Catch the more specific exceptions before the less specific ones.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The compiler produces an error if you order your catch blocks so that a later block can never be reached.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`catch`</ph> arguments is one way to filter for the exceptions you want to handle.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can also use a predicate expression that further examines the exception to decide whether to handle it.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the predicate expression returns false, then the search for a handler continues.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Exception filters are preferable to catching and rethrowing (explained below) because filters leave the stack unharmed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If a later handler dumps the stack, you can see where the exception originally came from, rather than just the last place it was rethrown.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A common use of exception filter expressions is logging.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can create a predicate function that always returns false that also outputs to a log, you can log exceptions as they go by without having to handle them and rethrow.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>throw<ept id="p1">](../../../csharp/language-reference/keywords/throw.md)</ept> statement can be used in a <ph id="ph1">`catch`</ph> block to re-throw the exception that is caught by the <ph id="ph2">`catch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example extracts source information from an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> exception, and then throws the exception to the parent method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can catch one exception and throw a different exception.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When you do this, specify the exception that you caught as the inner exception, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can also re-throw an exception when a specified condition is true, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>From inside a <ph id="ph1">`try`</ph> block, initialize only variables that are declared therein.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Otherwise, an exception can occur before the execution of the block is completed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, in the following code example, the variable <ph id="ph1">`n`</ph> is initialized inside the <ph id="ph2">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An attempt to use this variable outside the <ph id="ph1">`try`</ph> block in the <ph id="ph2">`Write(n)`</ph> statement will generate a compiler error.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about catch, see <bpt id="p1">[</bpt>try-catch-finally<ept id="p1">](../../../csharp/language-reference/keywords/try-catch-finally.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Exceptions in Async Methods</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An async method is marked  by an  <bpt id="p1">[</bpt>async<ept id="p1">](../../../csharp/language-reference/keywords/async.md)</ept> modifier and usually contains one or more await expressions or statements.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An await expression applies the <bpt id="p1">[</bpt>await<ept id="p1">](../../../csharp/language-reference/keywords/await.md)</ept> operator to a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When control reaches an <ph id="ph1">`await`</ph> in the async method, progress in the method is suspended until the awaited task completes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When the task  is complete, execution can resume in the method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming with async and await<ept id="p1">](../../../csharp/programming-guide/concepts/async/index.md)</ept> and <bpt id="p2">[</bpt>Control Flow in Async Programs<ept id="p2">](../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The completed task to which <ph id="ph1">`await`</ph> is applied might be in a faulted state because of an unhandled exception in the method that returns the task.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Awaiting the task throws an exception.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A task can also end up in a canceled state if the asynchronous process that returns it is canceled.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Awaiting a canceled task throws  an <ph id="ph1">`OperationCanceledException`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information about how to cancel an asynchronous process, see <bpt id="p1">[</bpt>Fine-Tuning Your Async Application<ept id="p1">](http://msdn.microsoft.com/library/daaa32ea-c84c-4761-8230-c8292ffebd74)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To catch the exception, await the task in a <ph id="ph1">`try`</ph> block, and catch the exception in the associated <ph id="ph2">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For an example, see the "Example" section.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A task can be in a faulted state because multiple exceptions occurred in the awaited async method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, the task might be the result of a call to <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When you await such a task, only one of the exceptions is caught, and you can't predict which exception will be caught.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For an example, see the "Example" section.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`try`</ph> block contains a call to the <ph id="ph2">`ProcessString`</ph> method that may cause an exception.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`catch`</ph> clause contains the exception handler that just displays a message on the screen.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`throw`</ph> statement is called from inside <ph id="ph2">`MyMethod`</ph>, the system looks for the <ph id="ph3">`catch`</ph> statement and displays the message <ph id="ph4">`Exception caught`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsExceptions#2<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-catch_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the following example, two catch blocks are used, and the most specific exception, which comes first, is caught.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To catch the least specific exception, you can replace the throw statement in <ph id="ph1">`ProcessString`</ph> with the following statement: <ph id="ph2">`throw new Exception()`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you place the least-specific catch block first in the example, the following  error message appears: <ph id="ph1">`A previous catch clause already catches all exceptions of this or a super type ('System.Exception')`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsExceptions#3<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-catch_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling for async methods.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To catch an exception that an async task throws, place the <ph id="ph1">`await`</ph> expression in a <ph id="ph2">`try`</ph> block, and catch the exception in a <ph id="ph3">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`throw new Exception`</ph> line in the example to demonstrate exception handling.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The task's <ph id="ph1">`IsFaulted`</ph> property is set to <ph id="ph2">`True`</ph>, the task's <ph id="ph3">`Exception.InnerException`</ph> property is set to the exception, and the exception is caught in the <ph id="ph4">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`throw new OperationCancelledException`</ph> line to demonstrate what happens when you cancel an asynchronous process.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The task's <ph id="ph1">`IsCanceled`</ph> property is set to <ph id="ph2">`true`</ph>, and the exception is caught in the <ph id="ph3">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Under some conditions that don't apply to this example, the task's <ph id="ph1">`IsFaulted`</ph> property is set to <ph id="ph2">`true`</ph> and <ph id="ph3">`IsCanceled`</ph> is set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csAsyncExceptions#2<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-catch_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling where multiple tasks can result in multiple exceptions.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`try`</ph> block awaits the task that's returned by a call to <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The task is complete when the three tasks to which WhenAll is applied are complete.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Each of the three tasks causes an exception.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`catch`</ph> block iterates through the exceptions, which are found in the <ph id="ph2">`Exception.InnerExceptions`</ph> property of the task that was returned by <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csAsyncExceptions#4<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-catch_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>try, throw, and catch Statements (C++)<ept id="p1">](https://docs.microsoft.com/cpp/cpp/try-throw-and-catch-statements-cpp)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Handling Statements<ept id="p1">](../../../csharp/language-reference/keywords/exception-handling-statements.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>throw<ept id="p1">](../../../csharp/language-reference/keywords/throw.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>try-finally<ept id="p1">](../../../csharp/language-reference/keywords/try-finally.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Explicitly Throw Exceptions<ept id="p1">](https://msdn.microsoft.com/library/xhcbs8fz)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>