<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="multifile-assemblies.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bad63bbc8e221f306e5807f51fbbb8eb4761d0fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\app-domains\multifile-assemblies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8cded1ea279451bf5ca1b1fd4f16fb51f8f600e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6c675f8d7771d7a4315fb1c3125a73d6e313cfc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Multifile Assemblies</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multifile Assemblies</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can create multifile assemblies using command-line compilers or Visual Studio with Visual C++.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>One file in the assembly must contain the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An assembly that starts an application must also contain an entry point, such as a Main or WinMain method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, suppose you have an application that contains two code modules, Client.cs and Stringer.cs.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Stringer.cs creates the <ph id="ph1">`myStringer`</ph> namespace that is referenced by the code in Client.cs.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Client.cs contains the <ph id="ph1">`Main`</ph> method, which is the application's entry point.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this example, you compile the two code modules, and then create a third file that contains the assembly manifest, which launches the application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The assembly manifest references both the <ph id="ph1">`Client`</ph> and <ph id="ph2">`Stringer`</ph> modules.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Multifile assemblies can have only one entry point, even if the assembly has multiple code modules.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There are several reasons you might want to create a multifile assembly:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To combine modules written in different languages.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is the most common reason for creating a multifile assembly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To optimize downloading an application by putting seldom-used types in a module that is downloaded only when needed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you are creating applications that will be downloaded using the <ph id="ph1">`&lt;object&gt;`</ph> tag with Microsoft Internet Explorer, it is important that you create multifile assemblies.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this scenario, you create a file separate from your code modules that contains only the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Internet Explorer downloads the assembly manifest first, and then creates worker threads to download any additional modules or assemblies required.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>While the file containing the assembly manifest is being downloaded, Internet Explorer will be unresponsive to user input.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The smaller the file containing the assembly manifest, the less time Internet Explorer will be unresponsive.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To combine code modules written by several developers.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Although each developer can compile each code module into an assembly, this can force some types to be exposed publicly that are not exposed if all modules are put into a multifile assembly.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Once you create the assembly, you can sign the file that contains the assembly manifest (and hence the assembly), or you can give the file (and the assembly) a strong name and put it in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Build a Multifile Assembly<ept id="p1">](../../../docs/framework/app-domains/how-to-build-a-multifile-assembly.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming with Assemblies<ept id="p1">](../../../docs/framework/app-domains/programming-with-assemblies.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>