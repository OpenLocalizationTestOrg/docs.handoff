<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-use-the-try-catch-block-to-catch-exceptions.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5183a854ee2b7462ecc27786a5fc0697565194c0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\exceptions\how-to-use-the-try-catch-block-to-catch-exceptions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fe0234cc00cffa9efa989fae9223357975db957</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd7617c347b17b1e920e41ca67f244871c4deed2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Use the Try-Catch Block to Catch Exceptions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to use the try/catch block to catch exceptions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Place any code statements that might raise or throw an exception in a <ph id="ph1">`try`</ph> block, and place statements used to handle the exception or exceptions in one or more <ph id="ph2">`catch`</ph> blocks below the <ph id="ph3">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`catch`</ph> block includes the exception type and can contain additional statements needed to handle that exception type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> opens a file called <bpt id="p1">*</bpt>data.txt<ept id="p1">*</ept> and retrieves a line from the file.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Since the code might throw any of three exceptions, it's placed in a <ph id="ph1">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Three <ph id="ph1">`catch`</ph> blocks catch the exceptions and handle them by displaying the results to the console.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Common Language Runtime (CLR) catches exceptions not handled by <ph id="ph1">`catch`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If an exception is caught by the CLR, one of the following results may occur depending on your CLR configuration:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The program stops execution and a dialog box with exception information appears.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An error prints out to the <bpt id="p1">[</bpt>standard error output stream<ept id="p1">](xref:System.Console.Error)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Most code can throw an exception, and some exceptions, like <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph>, can be thrown by the CLR itself at any time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>While applications aren't required to deal with these exceptions, be aware of the possibility when writing libraries to be used by others.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For suggestions on when to set code in a <ph id="ph1">`try`</ph> block, see <bpt id="p1">[</bpt>Best Practices for Exceptions<ept id="p1">](best-practices-for-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exceptions<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Handling I/O errors in .NET<ept id="p1">](../io/handling-io-errors.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>