{"content":"---\ntitle: \"How to: Define and Use Custom Numeric Format Providers\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"numeric format strings [.NET Framework]\"\n  - \"formatting [.NET Framework], numbers\"\n  - \"number formatting [.NET Framework]\"\n  - \"custom numeric format strings\"\n  - \"numbers [.NET Framework], custom numeric format strings\"\n  - \"displaying date and time data\"\n  - \"format providers [.NET Framework]\"\n  - \"custom format strings\"\nms.assetid: a281bfbf-6596-45ed-a2d6-3782d535ada2\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Define and Use Custom Numeric Format Providers\nThe [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] gives you extensive control over the string representation of numeric values. It supports the following features for customizing the format of numeric values:  \n  \n-   Standard numeric format strings, which provide a predefined set of formats for converting numbers to their string representation. You can use them with any numeric formatting method, such as <xref:System.Decimal.ToString%28System.String%29?displayProperty=nameWithType>, that has a `format` parameter. For details, see [Standard Numeric Format Strings](../../../docs/standard/base-types/standard-numeric-format-strings.md).  \n  \n-   Custom numeric format strings, which provide a set of symbols that can be combined to define custom numeric format specifiers. They can also be used with any numeric formatting method, such as <xref:System.Decimal.ToString%28System.String%29?displayProperty=nameWithType>, that has a `format` parameter. For details, see [Custom Numeric Format Strings](../../../docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   Custom <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.NumberFormatInfo> objects, which define the symbols and format patterns used in displaying the string representations of numeric values. You can use them with any numeric formatting method, such as <xref:System.Int32.ToString%2A>, that has a `provider` parameter. Typically, the `provider` parameter is used to specify culture-specific formatting.  \n  \n In some cases (such as when an application must display a formatted account number, an identification number, or a postal code) these three techniques are inappropriate. The [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] also enables you to define a formatting object that is neither a <xref:System.Globalization.CultureInfo> nor a <xref:System.Globalization.NumberFormatInfo> object to determine how a numeric value is formatted. This topic provides the step-by-step instructions for implementing such an object, and provides an example that formats telephone numbers.  \n  \n### To define a custom format provider  \n  \n1.  Define a class that implements the <xref:System.IFormatProvider> and <xref:System.ICustomFormatter> interfaces.  \n  \n2.  Implement the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method. <xref:System.IFormatProvider.GetFormat%2A> is a callback method that the formatting method (such as the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method) invokes to retrieve the object that is actually responsible for performing custom formatting. A typical implementation of <xref:System.IFormatProvider.GetFormat%2A> does the following:  \n  \n    1.  Determines whether the <xref:System.Type> object passed as a method parameter represents an <xref:System.ICustomFormatter> interface.  \n  \n    2.  If the parameter does represent the <xref:System.ICustomFormatter> interface, <xref:System.IFormatProvider.GetFormat%2A> returns an object that implements the <xref:System.ICustomFormatter> interface that is responsible for providing custom formatting. Typically, the custom formatting object returns itself.  \n  \n    3.  If the parameter does not represent the <xref:System.ICustomFormatter> interface, <xref:System.IFormatProvider.GetFormat%2A> returns `null`.  \n  \n3.  Implement the <xref:System.ICustomFormatter.Format%2A> method. This method is called by the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method and is responsible for returning the string representation of a number. Implementing the method typically involves the following:  \n  \n    1.  Optionally, make sure that the method is legitimately intended to provide formatting services by examining the `provider` parameter. For formatting objects that implement both <xref:System.IFormatProvider> and <xref:System.ICustomFormatter>, this involves testing the `provider` parameter for equality with the current formatting object.  \n  \n    2.  Determine whether the formatting object should support custom format specifiers. (For example, an \"N\" format specifier might indicate that a U.S. telephone number should be output in NANP format, and an \"I\" might indicate output in ITU-T Recommendation E.123 format.) If format specifiers are used, the method should handle the specific format specifier. It is passed to the method in the `format` parameter. If no specifier is present, the value of the `format` parameter is <xref:System.String.Empty?displayProperty=nameWithType>.  \n  \n    3.  Retrieve the numeric value passed to the method as the `arg` parameter. Perform whatever manipulations are required to convert it to its string representation.  \n  \n    4.  Return the string representation of the `arg` parameter.  \n  \n### To use a custom numeric formatting object  \n  \n1.  Create a new instance of the custom formatting class.  \n  \n2.  Call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> formatting method, passing it the custom formatting object, the formatting specifier (or <xref:System.String.Empty?displayProperty=nameWithType>, if one is not used), and the numeric value to be formatted.  \n  \n## Example  \n The following example defines a custom numeric format provider named `TelephoneFormatter` that converts a number that represents a U.S. telephone number to its NANP or E.123 format. The method handles two format specifiers, \"N\" (which outputs the NANP format) and \"I\" (which outputs the international E.123 format).  \n  \n [!code-csharp[Formatting.HowTo.NumericValue#1](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.NumericValue/cs/Telephone1.cs#1)]\n [!code-vb[Formatting.HowTo.NumericValue#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.NumericValue/vb/Telephone1.vb#1)]  \n  \n The custom numeric format provider can be used only with the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method. The other overloads of numeric formatting methods (such as `ToString`) that have a parameter of type <xref:System.IFormatProvider> all pass the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. In return, they expect the method to return a <xref:System.Globalization.NumberFormatInfo> object. If it does not, the custom numeric format provider is ignored, and the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used in its place. In the example, the `TelephoneFormatter.GetFormat` method handles the possibility that it may be inappropriately passed to a numeric formatting method by examining the method parameter and returning `null` if it represents a type other than <xref:System.ICustomFormatter>.  \n  \n If a custom numeric format provider supports a set of format specifiers, make sure you provide a default behavior if no format specifier is supplied in the format item used in the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method call. In the example, \"N\" is the default format specifier. This allows for a number to be converted to a formatted telephone number by providing an explicit format specifier. The following example illustrates such a method call.  \n  \n [!code-csharp[Formatting.HowTo.NumericValue#2](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.NumericValue/cs/Telephone1.cs#2)]\n [!code-vb[Formatting.HowTo.NumericValue#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.NumericValue/vb/Telephone1.vb#2)]  \n  \n But it also allows the conversion to occur if no format specifier is present. The following example illustrates such a method call.  \n  \n [!code-csharp[Formatting.HowTo.NumericValue#3](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.NumericValue/cs/Telephone1.cs#3)]\n [!code-vb[Formatting.HowTo.NumericValue#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.NumericValue/vb/Telephone1.vb#3)]  \n  \n If no default format specifier is defined, your implementation of the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method should include code such as the following so that .NET can provide formatting that your code does not support.  \n  \n [!code-csharp[System.ICustomFormatter.Format#1](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.ICustomFormatter.Format/cs/format.cs#1)]\n [!code-vb[System.ICustomFormatter.Format#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.ICustomFormatter.Format/vb/Format.vb#1)]  \n  \n In the case of this example, the method that implements <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is intended to serve as a callback method for the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method. Therefore, it examines the `formatProvider` parameter to determine whether it contains a reference to the current `TelephoneFormatter` object. However, the method can also be called directly from code. In that case, you can use the `formatProvider` parameter to provide a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.NumberFormatInfo> object that supplies culture-specific formatting information.  \n  \n## Compiling the Code  \n Compile the code at the command line using csc.exe or vb.exe. To compile the code in Visual Studio, put it in a console application project template.  \n  \n## See also\n\n- [Performing Formatting Operations](../../../docs/standard/base-types/performing-formatting-operations.md)\n","nodes":[{"pos":[4,597],"embed":true,"restype":"x-metadata","content":"title: \"How to: Define and Use Custom Numeric Format Providers\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"numeric format strings [.NET Framework]\"\n  - \"formatting [.NET Framework], numbers\"\n  - \"number formatting [.NET Framework]\"\n  - \"custom numeric format strings\"\n  - \"numbers [.NET Framework], custom numeric format strings\"\n  - \"displaying date and time data\"\n  - \"format providers [.NET Framework]\"\n  - \"custom format strings\"\nms.assetid: a281bfbf-6596-45ed-a2d6-3782d535ada2\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Define and Use Custom Numeric Format Providers","nodes":[{"pos":[0,54],"content":"How to: Define and Use Custom Numeric Format Providers","nodes":[{"content":"How to: Define and Use Custom Numeric Format Providers","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[604,658],"content":"How to: Define and Use Custom Numeric Format Providers","linkify":"How to: Define and Use Custom Numeric Format Providers","nodes":[{"content":"How to: Define and Use Custom Numeric Format Providers","pos":[0,54]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> gives you extensive control over the string representation of numeric values.","pos":[659,801],"source":"The [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] gives you extensive control over the string representation of numeric values."},{"content":"It supports the following features for customizing the format of numeric values:","pos":[802,882]},{"content":"Standard numeric format strings, which provide a predefined set of formats for converting numbers to their string representation.","pos":[892,1021]},{"content":"You can use them with any numeric formatting method, such as <ph id=\"ph1\">&lt;xref:System.Decimal.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph>, that has a <ph id=\"ph2\">`format`</ph> parameter.","pos":[1022,1193],"source":" You can use them with any numeric formatting method, such as <xref:System.Decimal.ToString%28System.String%29?displayProperty=nameWithType>, that has a `format` parameter."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](../../../docs/standard/base-types/standard-numeric-format-strings.md)</ept>.","pos":[1194,1315],"source":" For details, see [Standard Numeric Format Strings](../../../docs/standard/base-types/standard-numeric-format-strings.md)."},{"content":"Custom numeric format strings, which provide a set of symbols that can be combined to define custom numeric format specifiers.","pos":[1325,1451]},{"content":"They can also be used with any numeric formatting method, such as <ph id=\"ph1\">&lt;xref:System.Decimal.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph>, that has a <ph id=\"ph2\">`format`</ph> parameter.","pos":[1452,1628],"source":" They can also be used with any numeric formatting method, such as <xref:System.Decimal.ToString%28System.String%29?displayProperty=nameWithType>, that has a `format` parameter."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Custom Numeric Format Strings<ept id=\"p1\">](../../../docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[1629,1746],"source":" For details, see [Custom Numeric Format Strings](../../../docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"Custom <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objects, which define the symbols and format patterns used in displaying the string representations of numeric values.","pos":[1756,1969],"source":"Custom <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.NumberFormatInfo> objects, which define the symbols and format patterns used in displaying the string representations of numeric values."},{"content":"You can use them with any numeric formatting method, such as <ph id=\"ph1\">&lt;xref:System.Int32.ToString%2A&gt;</ph>, that has a <ph id=\"ph2\">`provider`</ph> parameter.","pos":[1970,2096],"source":" You can use them with any numeric formatting method, such as <xref:System.Int32.ToString%2A>, that has a `provider` parameter."},{"content":"Typically, the <ph id=\"ph1\">`provider`</ph> parameter is used to specify culture-specific formatting.","pos":[2097,2180],"source":" Typically, the `provider` parameter is used to specify culture-specific formatting."},{"content":"In some cases (such as when an application must display a formatted account number, an identification number, or a postal code) these three techniques are inappropriate.","pos":[2187,2356]},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> also enables you to define a formatting object that is neither a <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> nor a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object to determine how a numeric value is formatted.","pos":[2357,2631],"source":" The [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] also enables you to define a formatting object that is neither a <xref:System.Globalization.CultureInfo> nor a <xref:System.Globalization.NumberFormatInfo> object to determine how a numeric value is formatted."},{"content":"This topic provides the step-by-step instructions for implementing such an object, and provides an example that formats telephone numbers.","pos":[2632,2770]},{"pos":[2780,2814],"content":"To define a custom format provider","linkify":"To define a custom format provider","nodes":[{"content":"To define a custom format provider","pos":[0,34]}]},{"pos":[2824,2935],"content":"Define a class that implements the <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ICustomFormatter&gt;</ph> interfaces.","source":"Define a class that implements the <xref:System.IFormatProvider> and <xref:System.ICustomFormatter> interfaces."},{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[2945,3038],"source":"Implement the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> is a callback method that the formatting method (such as the <ph id=\"ph2\">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method) invokes to retrieve the object that is actually responsible for performing custom formatting.","pos":[3039,3367],"source":"<xref:System.IFormatProvider.GetFormat%2A> is a callback method that the formatting method (such as the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method) invokes to retrieve the object that is actually responsible for performing custom formatting."},{"content":"A typical implementation of <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> does the following:","pos":[3368,3458],"source":" A typical implementation of <xref:System.IFormatProvider.GetFormat%2A> does the following:"},{"pos":[3472,3605],"content":"Determines whether the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object passed as a method parameter represents an <ph id=\"ph2\">&lt;xref:System.ICustomFormatter&gt;</ph> interface.","source":"Determines whether the <xref:System.Type> object passed as a method parameter represents an <xref:System.ICustomFormatter> interface."},{"content":"If the parameter does represent the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface, <ph id=\"ph2\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> returns an object that implements the <ph id=\"ph3\">&lt;xref:System.ICustomFormatter&gt;</ph> interface that is responsible for providing custom formatting.","pos":[3619,3871],"source":"If the parameter does represent the <xref:System.ICustomFormatter> interface, <xref:System.IFormatProvider.GetFormat%2A> returns an object that implements the <xref:System.ICustomFormatter> interface that is responsible for providing custom formatting."},{"content":"Typically, the custom formatting object returns itself.","pos":[3872,3927]},{"pos":[3941,4081],"content":"If the parameter does not represent the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface, <ph id=\"ph2\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> returns <ph id=\"ph3\">`null`</ph>.","source":"If the parameter does not represent the <xref:System.ICustomFormatter> interface, <xref:System.IFormatProvider.GetFormat%2A> returns `null`."},{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method.","pos":[4091,4153],"source":"Implement the <xref:System.ICustomFormatter.Format%2A> method."},{"content":"This method is called by the <ph id=\"ph1\">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method and is responsible for returning the string representation of a number.","pos":[4154,4384],"source":" This method is called by the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method and is responsible for returning the string representation of a number."},{"content":"Implementing the method typically involves the following:","pos":[4385,4442]},{"content":"Optionally, make sure that the method is legitimately intended to provide formatting services by examining the <ph id=\"ph1\">`provider`</ph> parameter.","pos":[4456,4588],"source":"Optionally, make sure that the method is legitimately intended to provide formatting services by examining the `provider` parameter."},{"content":"For formatting objects that implement both <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ICustomFormatter&gt;</ph>, this involves testing the <ph id=\"ph3\">`provider`</ph> parameter for equality with the current formatting object.","pos":[4589,4793],"source":" For formatting objects that implement both <xref:System.IFormatProvider> and <xref:System.ICustomFormatter>, this involves testing the `provider` parameter for equality with the current formatting object."},{"content":"Determine whether the formatting object should support custom format specifiers.","pos":[4807,4887]},{"content":"(For example, an \"N\" format specifier might indicate that a U.S. telephone number should be output in NANP format, and an \"I\" might indicate output in ITU-T Recommendation E.123 format.) If format specifiers are used, the method should handle the specific format specifier.","pos":[4888,5161]},{"content":"It is passed to the method in the <ph id=\"ph1\">`format`</ph> parameter.","pos":[5162,5215],"source":" It is passed to the method in the `format` parameter."},{"content":"If no specifier is present, the value of the <ph id=\"ph1\">`format`</ph> parameter is <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.","pos":[5216,5339],"source":" If no specifier is present, the value of the `format` parameter is <xref:System.String.Empty?displayProperty=nameWithType>."},{"content":"Retrieve the numeric value passed to the method as the <ph id=\"ph1\">`arg`</ph> parameter.","pos":[5353,5424],"source":"Retrieve the numeric value passed to the method as the `arg` parameter."},{"content":"Perform whatever manipulations are required to convert it to its string representation.","pos":[5425,5512]},{"pos":[5526,5582],"content":"Return the string representation of the <ph id=\"ph1\">`arg`</ph> parameter.","source":"Return the string representation of the `arg` parameter."},{"pos":[5592,5633],"content":"To use a custom numeric formatting object","linkify":"To use a custom numeric formatting object","nodes":[{"content":"To use a custom numeric formatting object","pos":[0,41]}]},{"content":"Create a new instance of the custom formatting class.","pos":[5643,5696]},{"pos":[5706,6043],"content":"Call the <ph id=\"ph1\">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> formatting method, passing it the custom formatting object, the formatting specifier (or <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, if one is not used), and the numeric value to be formatted.","source":"Call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> formatting method, passing it the custom formatting object, the formatting specifier (or <xref:System.String.Empty?displayProperty=nameWithType>, if one is not used), and the numeric value to be formatted."},{"pos":[6052,6059],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example defines a custom numeric format provider named <ph id=\"ph1\">`TelephoneFormatter`</ph> that converts a number that represents a U.S. telephone number to its NANP or E.123 format.","pos":[6063,6244],"source":"The following example defines a custom numeric format provider named `TelephoneFormatter` that converts a number that represents a U.S. telephone number to its NANP or E.123 format."},{"content":"The method handles two format specifiers, \"N\" (which outputs the NANP format) and \"I\" (which outputs the international E.123 format).","pos":[6245,6378]},{"content":"The custom numeric format provider can be used only with the <ph id=\"ph1\">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.","pos":[6687,6878],"source":"The custom numeric format provider can be used only with the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method."},{"content":"The other overloads of numeric formatting methods (such as <ph id=\"ph1\">`ToString`</ph>) that have a parameter of type <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> all pass the <ph id=\"ph3\">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> implementation a <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph> object that represents the <ph id=\"ph5\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> type.","pos":[6879,7208],"source":" The other overloads of numeric formatting methods (such as `ToString`) that have a parameter of type <xref:System.IFormatProvider> all pass the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type."},{"content":"In return, they expect the method to return a <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[7209,7307],"source":" In return, they expect the method to return a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"If it does not, the custom numeric format provider is ignored, and the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture is used in its place.","pos":[7308,7476],"source":" If it does not, the custom numeric format provider is ignored, and the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used in its place."},{"content":"In the example, the <ph id=\"ph1\">`TelephoneFormatter.GetFormat`</ph> method handles the possibility that it may be inappropriately passed to a numeric formatting method by examining the method parameter and returning <ph id=\"ph2\">`null`</ph> if it represents a type other than <ph id=\"ph3\">&lt;xref:System.ICustomFormatter&gt;</ph>.","pos":[7477,7749],"source":" In the example, the `TelephoneFormatter.GetFormat` method handles the possibility that it may be inappropriately passed to a numeric formatting method by examining the method parameter and returning `null` if it represents a type other than <xref:System.ICustomFormatter>."},{"content":"If a custom numeric format provider supports a set of format specifiers, make sure you provide a default behavior if no format specifier is supplied in the format item used in the <ph id=\"ph1\">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method call.","pos":[7756,8071],"source":"If a custom numeric format provider supports a set of format specifiers, make sure you provide a default behavior if no format specifier is supplied in the format item used in the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method call."},{"content":"In the example, \"N\" is the default format specifier.","pos":[8072,8124]},{"content":"This allows for a number to be converted to a formatted telephone number by providing an explicit format specifier.","pos":[8125,8240]},{"content":"The following example illustrates such a method call.","pos":[8241,8294]},{"content":"But it also allows the conversion to occur if no format specifier is present.","pos":[8603,8680]},{"content":"The following example illustrates such a method call.","pos":[8681,8734]},{"pos":[9043,9300],"content":"If no default format specifier is defined, your implementation of the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> method should include code such as the following so that .NET can provide formatting that your code does not support.","source":"If no default format specifier is defined, your implementation of the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method should include code such as the following so that .NET can provide formatting that your code does not support."},{"content":"In the case of this example, the method that implements <ph id=\"ph1\">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> is intended to serve as a callback method for the <ph id=\"ph2\">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.","pos":[9619,9925],"source":"In the case of this example, the method that implements <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is intended to serve as a callback method for the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method."},{"content":"Therefore, it examines the <ph id=\"ph1\">`formatProvider`</ph> parameter to determine whether it contains a reference to the current <ph id=\"ph2\">`TelephoneFormatter`</ph> object.","pos":[9926,10068],"source":" Therefore, it examines the `formatProvider` parameter to determine whether it contains a reference to the current `TelephoneFormatter` object."},{"content":"However, the method can also be called directly from code.","pos":[10069,10127]},{"content":"In that case, you can use the <ph id=\"ph1\">`formatProvider`</ph> parameter to provide a <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that supplies culture-specific formatting information.","pos":[10128,10347],"source":" In that case, you can use the `formatProvider` parameter to provide a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.NumberFormatInfo> object that supplies culture-specific formatting information."},{"pos":[10356,10374],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"Compile the code at the command line using csc.exe or vb.exe.","pos":[10378,10439]},{"content":"To compile the code in Visual Studio, put it in a console application project template.","pos":[10440,10527]},{"pos":[10536,10544],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[10548,10653],"content":"<bpt id=\"p1\">[</bpt>Performing Formatting Operations<ept id=\"p1\">](../../../docs/standard/base-types/performing-formatting-operations.md)</ept>","source":"[Performing Formatting Operations](../../../docs/standard/base-types/performing-formatting-operations.md)"}]}