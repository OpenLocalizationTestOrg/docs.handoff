{"content":"---\ntitle: \"Feed Formatter (JSON)\"\nms.date: \"03/30/2017\"\nms.assetid: f9c0b295-55e7-48ea-b308-ba51c7d31143\n---\n# Feed Formatter (JSON)\nThis sample shows how to serialize an instance of a <xref:System.ServiceModel.Syndication.SyndicationFeed> class in JavaScript Object Notation (JSON) format by using a custom <xref:System.ServiceModel.Syndication.SyndicationFeedFormatter> and the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>.  \n  \n## Architecture of the Sample  \n The sample implements a class named `JsonFeedFormatter` that inherits from <xref:System.ServiceModel.Syndication.SyndicationFeedFormatter>. The `JsonFeedFormatter` class relies on the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> to read and write the data in JSON format. Internally, the formatter uses a custom set of data contract types named `JsonSyndicationFeed` and `JsonSyndicationItem` to control the format of the JSON data produced by the serializer. These implementation details are hidden from the end user, allowing calls to be made against the standard <xref:System.ServiceModel.Syndication.SyndicationFeed> and <xref:System.ServiceModel.Syndication.SyndicationItem> classes.  \n  \n## Writing JSON feeds  \n Writing a JSON feed can be accomplished by using the `JsonFeedFormatter` (implemented in this sample) with the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> as shown in the following sample code.  \n  \n```  \n//Basic feed with sample data  \nSyndicationFeed feed = new SyndicationFeed(\"Custom JSON feed\", \"A Syndication extensibility sample\", null);  \nfeed.LastUpdatedTime = DateTime.Now;  \nfeed.Items = from s in new string[] { \"hello\", \"world\" }  \nselect new SyndicationItem()  \n{  \n    Summary = SyndicationContent.CreatePlaintextContent(s)  \n};  \n  \n//Write the feed out to a MemoryStream in JSON format  \nDataContractJsonSerializer writeSerializer = new DataContractJsonSerializer(typeof(JsonFeedFormatter));  \nwriteSerializer.WriteObject(stream, new JsonFeedFormatter(feed));  \n```  \n  \n## Reading a JSON feed  \n Obtaining a <xref:System.ServiceModel.Syndication.SyndicationFeed> from a stream of JSON-formatted data can be accomplished with the `JsonFeedFormatter` as show in the following code.  \n  \n `//Read in the feed using the DataContractJsonSerializer`  \n  \n `DataContractJsonSerializer readSerializer = new DataContractJsonSerializer(typeof(JsonFeedFormatter));`  \n  \n `JsonFeedFormatter formatter = readSerializer.ReadObject(stream) as JsonFeedFormatter;`  \n  \n `SyndicationFeed feedRead = formatter.Feed;`  \n  \n#### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md).  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your computer. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Extensibility\\Syndication\\JsonFeeds`  \n","nodes":[{"pos":[4,105],"embed":true,"restype":"x-metadata","content":"title: \"Feed Formatter (JSON)\"\nms.date: \"03/30/2017\"\nms.assetid: f9c0b295-55e7-48ea-b308-ba51c7d31143","nodes":[{"content":"Feed Formatter (JSON)","nodes":[{"pos":[0,21],"content":"Feed Formatter (JSON)","nodes":[{"content":"Feed Formatter (JSON)","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[112,133],"content":"Feed Formatter (JSON)","linkify":"Feed Formatter (JSON)","nodes":[{"content":"Feed Formatter (JSON)","pos":[0,21]}]},{"pos":[134,449],"content":"This sample shows how to serialize an instance of a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed&gt;</ph> class in JavaScript Object Notation (JSON) format by using a custom <ph id=\"ph2\">&lt;xref:System.ServiceModel.Syndication.SyndicationFeedFormatter&gt;</ph> and the <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>.","source":"This sample shows how to serialize an instance of a <xref:System.ServiceModel.Syndication.SyndicationFeed> class in JavaScript Object Notation (JSON) format by using a custom <xref:System.ServiceModel.Syndication.SyndicationFeedFormatter> and the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>."},{"pos":[458,484],"content":"Architecture of the Sample","linkify":"Architecture of the Sample","nodes":[{"content":"Architecture of the Sample","pos":[0,26]}]},{"content":"The sample implements a class named <ph id=\"ph1\">`JsonFeedFormatter`</ph> that inherits from <ph id=\"ph2\">&lt;xref:System.ServiceModel.Syndication.SyndicationFeedFormatter&gt;</ph>.","pos":[488,627],"source":"The sample implements a class named `JsonFeedFormatter` that inherits from <xref:System.ServiceModel.Syndication.SyndicationFeedFormatter>."},{"content":"The <ph id=\"ph1\">`JsonFeedFormatter`</ph> class relies on the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> to read and write the data in JSON format.","pos":[628,782],"source":" The `JsonFeedFormatter` class relies on the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> to read and write the data in JSON format."},{"content":"Internally, the formatter uses a custom set of data contract types named <ph id=\"ph1\">`JsonSyndicationFeed`</ph> and <ph id=\"ph2\">`JsonSyndicationItem`</ph> to control the format of the JSON data produced by the serializer.","pos":[783,970],"source":" Internally, the formatter uses a custom set of data contract types named `JsonSyndicationFeed` and `JsonSyndicationItem` to control the format of the JSON data produced by the serializer."},{"content":"These implementation details are hidden from the end user, allowing calls to be made against the standard <ph id=\"ph1\">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Syndication.SyndicationItem&gt;</ph> classes.","pos":[971,1199],"source":" These implementation details are hidden from the end user, allowing calls to be made against the standard <xref:System.ServiceModel.Syndication.SyndicationFeed> and <xref:System.ServiceModel.Syndication.SyndicationItem> classes."},{"pos":[1208,1226],"content":"Writing JSON feeds","linkify":"Writing JSON feeds","nodes":[{"content":"Writing JSON feeds","pos":[0,18]}]},{"pos":[1230,1447],"content":"Writing a JSON feed can be accomplished by using the <ph id=\"ph1\">`JsonFeedFormatter`</ph> (implemented in this sample) with the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> as shown in the following sample code.","source":"Writing a JSON feed can be accomplished by using the `JsonFeedFormatter` (implemented in this sample) with the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> as shown in the following sample code."},{"pos":[2045,2064],"content":"Reading a JSON feed","linkify":"Reading a JSON feed","nodes":[{"content":"Reading a JSON feed","pos":[0,19]}]},{"pos":[2068,2251],"content":"Obtaining a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed&gt;</ph> from a stream of JSON-formatted data can be accomplished with the <ph id=\"ph2\">`JsonFeedFormatter`</ph> as show in the following code.","source":"Obtaining a <xref:System.ServiceModel.Syndication.SyndicationFeed> from a stream of JSON-formatted data can be accomplished with the `JsonFeedFormatter` as show in the following code."},{"pos":[2582,2618],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[2628,2827],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[2837,3046],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[3056,3264],"content":"To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.","source":"To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md)."},{"pos":[3272,3405],"content":"[!IMPORTANT]\n The samples may already be installed on your computer. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your computer. Check for the following (default) directory before continuing.","pos":[14,131],"nodes":[{"content":"The samples may already be installed on your computer.","pos":[0,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[3459,3769],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[3770,3820]}]}