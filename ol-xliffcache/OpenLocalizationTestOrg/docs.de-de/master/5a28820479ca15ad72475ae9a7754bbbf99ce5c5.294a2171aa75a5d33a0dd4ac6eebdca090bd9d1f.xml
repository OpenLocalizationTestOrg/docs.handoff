{"content":"---\ntitle: \"dirtyCastAndCallOnInterface MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"managed debugging assistants (MDAs), early bound calls AutoDispatch\"\n  - \"dispatch-only mode\"\n  - \"dirtyCastAndCallOnInterface\"\n  - \"early-bound managed classes\"\n  - \"early bound calls on AutoDispatch\"\n  - \"MDAs (managed debugging assistants), early bound calls AutoDispatch\"\n  - \"EarlyBoundCallOnAutorDispatchClassInteface MDA\"\nms.assetid: aa388ed3-7e3d-48ea-a0b5-c47ae19cec38\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# dirtyCastAndCallOnInterface MDA\nThe `dirtyCastAndCallOnInterface` managed debugging assistant (MDA) is activated when an early-bound call through a vtable is attempted on a class interface that has been marked late-bound only.  \n  \n## Symptoms  \n An application throws an access violation or has unexpected behavior when placing an early-bound call via COM into the CLR.  \n  \n## Cause  \n Code is attempting an early-bound call through a vtable via a class interface that is late-bound only. Note that by default class interfaces are identified as being late-bound only. They can also be identified as late-bound with the <xref:System.Runtime.InteropServices.ClassInterfaceAttribute> attribute with an <xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch> value (`[ClassInterface(ClassInterfaceType.AutoDispatch)]`).  \n  \n## Resolution  \n The recommended resolution is to define an explicit interface for use by COM and have the COM clients call through this interface instead of through the automatically generated class interface. Alternatively, the call from COM can be transformed into a late-bound call via `IDispatch`.  \n  \n Finally, it is possible to identify the class as <xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDual> (`[ClassInterface(ClassInterfaceType.AutoDual)]`) to allow early bound calls to be placed from COM; however, using <xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDual> is strongly discouraged because of the versioning limitations described in <xref:System.Runtime.InteropServices.ClassInterfaceAttribute>.  \n  \n## Effect on the Runtime  \n This MDA has no effect on the CLR. It only reports data about early-bound calls on late-bound interfaces.  \n  \n## Output  \n The name of the method or name of the field being accessed early-bound.  \n  \n## Configuration  \n  \n```xml  \n<mdaConfig>  \n  <assistants>  \n    <dirtyCastAndCallOnInterface />  \n  </assistants>  \n</mdaConfig>  \n```  \n  \n## See also\n\n- <xref:System.Runtime.InteropServices.ClassInterfaceAttribute>\n- [Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)\n","nodes":[{"pos":[4,508],"embed":true,"restype":"x-metadata","content":"title: \"dirtyCastAndCallOnInterface MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"managed debugging assistants (MDAs), early bound calls AutoDispatch\"\n  - \"dispatch-only mode\"\n  - \"dirtyCastAndCallOnInterface\"\n  - \"early-bound managed classes\"\n  - \"early bound calls on AutoDispatch\"\n  - \"MDAs (managed debugging assistants), early bound calls AutoDispatch\"\n  - \"EarlyBoundCallOnAutorDispatchClassInteface MDA\"\nms.assetid: aa388ed3-7e3d-48ea-a0b5-c47ae19cec38\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"dirtyCastAndCallOnInterface MDA","nodes":[{"pos":[0,31],"content":"dirtyCastAndCallOnInterface MDA","nodes":[{"content":"dirtyCastAndCallOnInterface MDA","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[515,546],"content":"dirtyCastAndCallOnInterface MDA","linkify":"dirtyCastAndCallOnInterface MDA","nodes":[{"content":"dirtyCastAndCallOnInterface MDA","pos":[0,31]}]},{"pos":[547,741],"content":"The <ph id=\"ph1\">`dirtyCastAndCallOnInterface`</ph> managed debugging assistant (MDA) is activated when an early-bound call through a vtable is attempted on a class interface that has been marked late-bound only.","source":"The `dirtyCastAndCallOnInterface` managed debugging assistant (MDA) is activated when an early-bound call through a vtable is attempted on a class interface that has been marked late-bound only."},{"pos":[750,758],"content":"Symptoms","linkify":"Symptoms","nodes":[{"content":"Symptoms","pos":[0,8]}]},{"content":"An application throws an access violation or has unexpected behavior when placing an early-bound call via COM into the CLR.","pos":[762,885]},{"pos":[894,899],"content":"Cause","linkify":"Cause","nodes":[{"content":"Cause","pos":[0,5]}]},{"content":"Code is attempting an early-bound call through a vtable via a class interface that is late-bound only.","pos":[903,1005]},{"content":"Note that by default class interfaces are identified as being late-bound only.","pos":[1006,1084]},{"content":"They can also be identified as late-bound with the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> attribute with an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch&gt;</ph> value (<ph id=\"ph3\">`[ClassInterface(ClassInterfaceType.AutoDispatch)]`</ph>).","pos":[1085,1346],"source":" They can also be identified as late-bound with the <xref:System.Runtime.InteropServices.ClassInterfaceAttribute> attribute with an <xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch> value (`[ClassInterface(ClassInterfaceType.AutoDispatch)]`)."},{"pos":[1355,1365],"content":"Resolution","linkify":"Resolution","nodes":[{"content":"Resolution","pos":[0,10]}]},{"content":"The recommended resolution is to define an explicit interface for use by COM and have the COM clients call through this interface instead of through the automatically generated class interface.","pos":[1369,1562]},{"content":"Alternatively, the call from COM can be transformed into a late-bound call via <ph id=\"ph1\">`IDispatch`</ph>.","pos":[1563,1654],"source":" Alternatively, the call from COM can be transformed into a late-bound call via `IDispatch`."},{"pos":[1661,2094],"content":"Finally, it is possible to identify the class as <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDual&gt;</ph> (<ph id=\"ph2\">`[ClassInterface(ClassInterfaceType.AutoDual)]`</ph>) to allow early bound calls to be placed from COM; however, using <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDual&gt;</ph> is strongly discouraged because of the versioning limitations described in <ph id=\"ph4\">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph>.","source":"Finally, it is possible to identify the class as <xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDual> (`[ClassInterface(ClassInterfaceType.AutoDual)]`) to allow early bound calls to be placed from COM; however, using <xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDual> is strongly discouraged because of the versioning limitations described in <xref:System.Runtime.InteropServices.ClassInterfaceAttribute>."},{"pos":[2103,2124],"content":"Effect on the Runtime","linkify":"Effect on the Runtime","nodes":[{"content":"Effect on the Runtime","pos":[0,21]}]},{"content":"This MDA has no effect on the CLR.","pos":[2128,2162]},{"content":"It only reports data about early-bound calls on late-bound interfaces.","pos":[2163,2233]},{"pos":[2242,2248],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"The name of the method or name of the field being accessed early-bound.","pos":[2252,2323]},{"pos":[2332,2345],"content":"Configuration","linkify":"Configuration","nodes":[{"content":"Configuration","pos":[0,13]}]},{"pos":[2474,2482],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2550,2703],"content":"<bpt id=\"p1\">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept>","source":"[Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)"}]}