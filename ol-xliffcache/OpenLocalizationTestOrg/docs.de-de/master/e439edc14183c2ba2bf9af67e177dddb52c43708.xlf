<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="changing-the-cache-sharing-levels-for-send-activities.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e439edc14183c2ba2bf9af67e177dddb52c43708</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\changing-the-cache-sharing-levels-for-send-activities.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">616e22c1021dc1eabea446c1764e05edcd82cab1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aef235167befb6a0c9751f92d5d0312acaf08fac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Changing the Cache Sharing Levels for Send Activities</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Changing the Cache Sharing Levels for Send Activities</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> extension enables you to customize the cache sharing levels, the settings of the channel factory cache, and the settings of the channel cache for workflows that send messages to service endpoints using <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> messaging activities.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These workflows are typically client workflows but could also be workflow services that are hosted in a <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The channel factory cache contains cached <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The channel cache contains cached channels.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Workflows can use <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> messaging activities to send either messages or parameters.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The workflow runtime adds channel factories to the cache that create channels of type <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph> when you use a <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> activity with a <ph id="ph3">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity, and an <ph id="ph4">&lt;xref:System.ServiceModel.Channels.IOutputChannel&gt;</ph> when just using a <ph id="ph5">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity (no <ph id="ph6">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Cache Sharing Levels</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By default, in a workflow hosted by a <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> the cache used by <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> messaging activities is shared across all workflow instances in the <ph id="ph3">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> (host-level caching).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a client workflow that is not hosted by a <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph>, the cache is available only to the workflow instance (instance-level caching).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The cache is only available for <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activities that do not use endpoints defined in configuration unless unsafe caching is enabled.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following are the different cache sharing levels available for <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activities in a workflow and their recommended use:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Host Level<ept id="p1">**</ept>: In the host sharing level, the cache is available only to the workflow instances hosted in the workflow service host.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A cache can also be shared between workflow service hosts in a process-wide cache.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Instance Level<ept id="p1">**</ept>: In the instance sharing level, the cache is available to a particular workflow instance throughout its lifetime but the cache is not available to other workflow instances.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>No Cache<ept id="p1">**</ept>: The cache is turned off by default if you have a workflow that uses endpoints defined in configuration.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is also recommended to keep the cache turned off in this case because turning it on could be unsecure.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, if a different identity (different credentials or using impersonation) is required for each send.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Changing the Cache Sharing Level for a Client Workflow</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To set the cache sharing in a client workflow, add an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> class as an extension to the desired set of workflow instances.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This results in sharing the cache across all the workflow instances.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following code examples show how to perform these steps.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>First, declare an instance of type <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Next, add the cache extension to each client workflow instance.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Changing the Cache Sharing Level for a Hosted Workflow Service</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To set the cache sharing in a hosted workflow service, add an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> class as an extension to all the workflow service hosts.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This results in sharing the cache across all the workflow service hosts.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code examples show to perform these steps.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>First, declare an instance  of type <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> at the class level.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Next, add the static cache extension to each workflow service host.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To set the cache sharing in a hosted workflow service to the instance level, add a <ph id="ph1">`Func&lt;SendMessageChannelCache&gt;`</ph> delegate as an extension to the workflow service host and assign this delegate to the code that instantiates a new instance of the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This results in a different cache for each individual workflow instance, instead of a single cache shared by all workflow instances in the workflow service host.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following code example shows how to achieve this by using a lambda expression to directly define the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> extension that the delegate points to.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Customizing Cache Settings</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can customize the cache settings for the channel factory cache and the channel cache.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The cache settings are defined in the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.ChannelCacheSettings&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> class defines default cache settings for the channel factory cache and the channel cache in its default constructor.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following table lists the default values of these cache settings for each type of cache.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Settings</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>LeaseTimeout (min)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>IdleTimeout (min)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>MaxItemsInCache</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Factory Cache Default</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>TimeSpan.MaxValue</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>16</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Channel Cache Default</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>16</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To customize the factory cache and channel cache settings, instantiate the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> class using the parameterized constructor <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache.%23ctor%2A&gt;</ph> and pass a new instance of the <ph id="ph3">&lt;xref:System.ServiceModel.Activities.ChannelCacheSettings&gt;</ph> with custom values to each of the <ph id="ph4">`factorySettings`</ph> and <ph id="ph5">`channelSettings`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Next, add the new instance of this class as an extension to a workflow service host or a workflow instance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following code example shows how to perform these steps for a workflow instance.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To enable caching when your workflow service has endpoints defined in configuration, instantiate the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> class using the parameterized constructor <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache.%23ctor%2A&gt;</ph> with the <ph id="ph3">`allowUnsafeCaching`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Next, add the new instance of this class as an extension to a workflow service host or a workflow instance.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following code example shows how to enable caching for a workflow instance.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To disable the cache completely for the channel factories and the channels, disable the channel factory cache.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Doing so also turns off the channel cache as the channels are owned by their corresponding channel factories.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To disable the channel factory cache, pass the <ph id="ph1">`factorySettings`</ph> parameter to the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache.%23ctor%2A&gt;</ph> constructor initialized to a <ph id="ph3">&lt;xref:System.ServiceModel.Activities.ChannelCacheSettings&gt;</ph> instance with a <ph id="ph4">&lt;xref:System.ServiceModel.Activities.ChannelCacheSettings.MaxItemsInCache%2A&gt;</ph> value of 0.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following code example shows this.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can choose to use only the channel factory cache and disable the channel cache by passing the <ph id="ph1">`channelSettings`</ph> parameter to the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache.%23ctor%2A&gt;</ph> constructor initialized to a <ph id="ph3">&lt;xref:System.ServiceModel.Activities.ChannelCacheSettings&gt;</ph> instance with a <ph id="ph4">&lt;xref:System.ServiceModel.Activities.ChannelCacheSettings.MaxItemsInCache%2A&gt;</ph> value of 0.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following code example shows this.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In a hosted workflow service, you can specify the factory cache and channel cache settings in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To do so, add a service behavior that contains the cache settings for the factory and channel cache and add this service behavior to your service.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following example shows the contents of a configuration file that contains the <ph id="ph1">`MyChannelCacheBehavior`</ph> service behavior with the custom factory cache and channel cache settings.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This service behavior is added to the service through the <ph id="ph1">`behaviorConfiguarion`</ph> attribute.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>