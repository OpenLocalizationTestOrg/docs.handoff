{"content":"---\ntitle: \"float keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"float\"\n  - \"float_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"float keyword [C#]\"\n  - \"floating-point numbers [C#], float keyword\"\nms.assetid: 1e77db7b-dedb-48b7-8dd1-b055e96a9258\n---\n# float (C# Reference)\n\nThe `float` keyword signifies a simple type that stores 32-bit floating-point values. The following table shows the precision and approximate range for the `float` type.\n\n|Type|Approximate range|Precision|.NET type|  \n|----------|-----------------------|---------------|-------------------------|  \n|`float`|±1.5 x 10<sup>−45</sup> to ±3.4 x 10<sup>38</sup>|~6-9 digits|<xref:System.Single?displayProperty=nameWithType>|  \n\n## Literals\n\nBy default, a real numeric literal on the right side of the assignment operator is treated as [double](double.md). Therefore, to initialize a float variable, use the suffix `f` or `F`, as in the following example:\n\n```csharp\nfloat x = 3.5F;\n```\n\nIf you do not use the suffix in the previous declaration, you will get a compilation error because you are trying to store a [double](double.md) value into a `float` variable.\n\n## Conversions\n\nYou can mix numeric integral types and floating-point types in an expression. In this case, the integral types are converted to floating-point types. The evaluation of the expression is performed according to the following rules:\n\n- If one of the floating-point types is [double](double.md), the expression evaluates to [double](double.md), or to [bool](bool.md) in relational comparisons or comparisons for equality.\n\n- If there is no [double](double.md) type in the expression, the expression evaluates to `float`, or to [bool](bool.md) in relational comparisons or comparisons for equality.\n\nA floating-point expression can contain the following sets of values:\n\n- Positive and negative zero\n\n- Positive and negative infinity\n\n- Not-a-Number value (NaN)\n\n- The finite set of nonzero values\n\nFor more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the [IEEE](https://www.ieee.org) website.\n\n## Example\n\nIn the following example, an [int](int.md), a [short](short.md), and a `float` are included in a mathematical expression giving a `float` result. (Remember that `float` is an alias for the <xref:System.Single?displayProperty=nameWithType> type.) Notice that there is no [double](double.md) in the expression.\n\n[!code-csharp[csrefKeywordsTypes#13](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#13)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- <xref:System.Single>\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [Casting and Type Conversions](../../programming-guide/types/casting-and-type-conversions.md)\n- [C# Keywords](index.md)\n- [Integral Types Table](integral-types-table.md)\n- [Built-In Types Table](built-in-types-table.md)\n- [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)\n","nodes":[{"pos":[4,279],"embed":true,"restype":"x-metadata","content":"title: \"float keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"float\"\n  - \"float_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"float keyword [C#]\"\n  - \"floating-point numbers [C#], float keyword\"\nms.assetid: 1e77db7b-dedb-48b7-8dd1-b055e96a9258","nodes":[{"content":"float keyword - C# Reference","nodes":[{"pos":[0,28],"content":"float keyword - C# Reference","nodes":[{"content":"float keyword - C# Reference","pos":[0,28]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[286,306],"content":"float (C# Reference)","linkify":"float (C# Reference)","nodes":[{"content":"float (C# Reference)","pos":[0,20]}]},{"content":"The <ph id=\"ph1\">`float`</ph> keyword signifies a simple type that stores 32-bit floating-point values.","pos":[308,393],"source":"The `float` keyword signifies a simple type that stores 32-bit floating-point values."},{"content":"The following table shows the precision and approximate range for the <ph id=\"ph1\">`float`</ph> type.","pos":[394,477],"source":" The following table shows the precision and approximate range for the `float` type."},{"content":"Type","pos":[480,484]},{"content":"Approximate range","pos":[485,502]},{"content":"Precision","pos":[503,512]},{"content":".NET type","pos":[513,522]},{"pos":[616,665],"content":"±1.5 x 10<bpt id=\"p1\">&lt;sup&gt;</bpt>−45<ept id=\"p1\">&lt;/sup&gt;</ept> to ±3.4 x 10<bpt id=\"p2\">&lt;sup&gt;</bpt>38<ept id=\"p2\">&lt;/sup&gt;</ept>","source":"±1.5 x 10<sup>−45</sup> to ±3.4 x 10<sup>38</sup>"},{"content":"~6-9 digits","pos":[666,677]},{"pos":[735,743],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"By default, a real numeric literal on the right side of the assignment operator is treated as <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept>.","pos":[745,859],"source":"By default, a real numeric literal on the right side of the assignment operator is treated as [double](double.md)."},{"content":"Therefore, to initialize a float variable, use the suffix <ph id=\"ph1\">`f`</ph> or <ph id=\"ph2\">`F`</ph>, as in the following example:","pos":[860,958],"source":" Therefore, to initialize a float variable, use the suffix `f` or `F`, as in the following example:"},{"pos":[991,1166],"content":"If you do not use the suffix in the previous declaration, you will get a compilation error because you are trying to store a <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept> value into a <ph id=\"ph1\">`float`</ph> variable.","source":"If you do not use the suffix in the previous declaration, you will get a compilation error because you are trying to store a [double](double.md) value into a `float` variable."},{"pos":[1171,1182],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"You can mix numeric integral types and floating-point types in an expression.","pos":[1184,1261]},{"content":"In this case, the integral types are converted to floating-point types.","pos":[1262,1333]},{"content":"The evaluation of the expression is performed according to the following rules:","pos":[1334,1413]},{"pos":[1417,1601],"content":"If one of the floating-point types is <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept>, the expression evaluates to <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](double.md)</ept>, or to <bpt id=\"p3\">[</bpt>bool<ept id=\"p3\">](bool.md)</ept> in relational comparisons or comparisons for equality.","source":"If one of the floating-point types is [double](double.md), the expression evaluates to [double](double.md), or to [bool](bool.md) in relational comparisons or comparisons for equality."},{"pos":[1605,1777],"content":"If there is no <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept> type in the expression, the expression evaluates to <ph id=\"ph1\">`float`</ph>, or to <bpt id=\"p2\">[</bpt>bool<ept id=\"p2\">](bool.md)</ept> in relational comparisons or comparisons for equality.","source":"If there is no [double](double.md) type in the expression, the expression evaluates to `float`, or to [bool](bool.md) in relational comparisons or comparisons for equality."},{"content":"A floating-point expression can contain the following sets of values:","pos":[1779,1848]},{"content":"Positive and negative zero","pos":[1852,1878]},{"content":"Positive and negative infinity","pos":[1882,1912]},{"content":"Not-a-Number value (NaN)","pos":[1916,1940]},{"content":"The finite set of nonzero values","pos":[1944,1976]},{"pos":[1978,2129],"content":"For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the <bpt id=\"p1\">[</bpt>IEEE<ept id=\"p1\">](https://www.ieee.org)</ept> website.","source":"For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the [IEEE](https://www.ieee.org) website."},{"pos":[2134,2141],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>, a <bpt id=\"p2\">[</bpt>short<ept id=\"p2\">](short.md)</ept>, and a <ph id=\"ph1\">`float`</ph> are included in a mathematical expression giving a <ph id=\"ph2\">`float`</ph> result.","pos":[2143,2288],"source":"In the following example, an [int](int.md), a [short](short.md), and a `float` are included in a mathematical expression giving a `float` result."},{"content":"(Remember that <ph id=\"ph1\">`float`</ph> is an alias for the <ph id=\"ph2\">&lt;xref:System.Single?displayProperty=nameWithType&gt;</ph> type.) Notice that there is no <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept> in the expression.","pos":[2289,2451],"source":" (Remember that `float` is an alias for the <xref:System.Single?displayProperty=nameWithType> type.) Notice that there is no [double](double.md) in the expression."},{"pos":[2585,2610],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2676,2684],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2711,2738],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2741,2797],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2800,2893],"content":"<bpt id=\"p1\">[</bpt>Casting and Type Conversions<ept id=\"p1\">](../../programming-guide/types/casting-and-type-conversions.md)</ept>","source":"[Casting and Type Conversions](../../programming-guide/types/casting-and-type-conversions.md)"},{"pos":[2896,2919],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[2922,2969],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](integral-types-table.md)</ept>","source":"[Integral Types Table](integral-types-table.md)"},{"pos":[2972,3019],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](built-in-types-table.md)</ept>","source":"[Built-In Types Table](built-in-types-table.md)"},{"pos":[3022,3097],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)"},{"pos":[3100,3175],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)"}]}