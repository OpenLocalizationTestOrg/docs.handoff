<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">824f5d788b8b2743d417a3f1766d0f1509352100</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\net-native\reflection-and-net-native.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f9f7c52cb6b35df23f89a2d0ebed35f82abb41e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca47cc9907ba8afed18da0030a8726ad465c7b49</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reflection and .NET Native | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Reflection and .NET Native</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, managed development supports metaprogramming through the reflection API.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Reflection allows you to inspect objects in an app, call methods on objects discovered through inspection, generate new types at run time, and supports many other dynamic code scenarios.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It also supports serialization and deserialization, which allows an object's field values to be persisted and later restored.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These scenarios all require the .NET Framework just-in-time (JIT) compiler to generate native code based on available metadata.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> runtime doesn't include a JIT compiler.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As a result, all necessary native code must be generated in advance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A set of heuristics is used to determine what code should be generated, but these heuristics cannot cover all possible metaprogramming scenarios.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, you must provide hints for these metaprogramming scenarios by using <bpt id="p1">[</bpt>runtime directives<ept id="p1">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the necessary metadata or implementation code is not available at runtime, your app throws a <bpt id="p1">[</bpt>MissingMetadataException<ept id="p1">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept>, <bpt id="p2">[</bpt>MissingRuntimeArtifactException<ept id="p2">](../../../docs/framework/net-native/missingruntimeartifactexception-class-net-native.md)</ept>, or <bpt id="p3">[</bpt>MissingInteropDataException<ept id="p3">](../../../docs/framework/net-native/missinginteropdataexception-class-net-native.md)</ept> exception.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Two troubleshooters are available that will generate the appropriate entry for your runtime directives file that eliminates the exception:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>MissingMetadataException troubleshooter<ept id="p1">](http://dotnet.github.io/native/troubleshooter/type.html)</ept> for types.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>MissingMetadataException troubleshooter<ept id="p1">](http://dotnet.github.io/native/troubleshooter/method.html)</ept> for methods.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For an overview of the .NET Native compilation process that provides background on why a runtime directives file is needed, see <bpt id="p1">[</bpt>.NET Native and Compilation<ept id="p1">](../../../docs/framework/net-native/net-native-and-compilation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In addition, <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> doesn't allow you to reflect over private members of the .NET Framework class library.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, a call to the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredFields%2A?displayProperty=fullName&gt;</ph> property to retrieve the fields of a .NET Framework class library type returns only public or protected fields.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following topics provide the conceptual and reference documentation that you need to support reflection and serialization in your apps:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>APIs That Rely on Reflection<ept id="p1">](../../../docs/framework/net-native/apis-that-rely-on-reflection.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reflection API Reference<ept id="p1">](../../../docs/framework/net-native/net-native-reflection-api-reference.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id="p1">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compiling Apps with .NET Native<ept id="p1">](../../../docs/framework/net-native/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>.NET Native and Compilation<ept id="p1">](../../../docs/framework/net-native/net-native-and-compilation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>