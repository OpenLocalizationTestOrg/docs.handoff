{"content":"---\ntitle: \"Creating the GamePiece Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 37a27a86-ac1c-47be-b477-cb4b819459d3\ncaps.latest.revision: 9\nauthor: \"wadepickett\"\nms.author: \"wpickett\"\nmanager: \"wpickett\"\n---\n# Creating the GamePiece Class\nThe **GamePiece** class encapsulates all the functionality required to load a Microsoft XNA game piece image, track the state of the mouse in relation to the game piece, capture the mouse, provide manipulation and inertia processing, and provide bouncing capability when the game piece reaches the limits of the view port.  \n  \n## Private Members  \n At the top of the **GamePiece** class, several private members are declared.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_PrivateMembers](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_privatemembers)]  \n  \n## Public Properties  \n Three of these private members are exposed through public properties. The **Scale** and **PieceColor** properties enable the application to specify the scale and the color of the piece, respectively. The **Bounds** property is exposed to enable one piece to use the bounds of another to render itself, such as when one piece should overlay another. The following code shows the declaration of the public properties.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_PublicProperties](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_publicproperties)]  \n  \n## Class Constructor  \n The constructor for the **GamePiece** class accepts the following parameters:  \n  \n-   A [SpriteBatch](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.aspx) type. The reference passed here is assigned to the private member `spriteBatch`, and is used to access the [SpriteBatch.Draw](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.draw.aspx) method when the game piece renders itself. In addition, the [GraphicsDevice](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.graphicsdevice.aspx) property is used to create the [Texture](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.texture.aspx) object associated with the game piece, and to obtain the size of the view port in order to detect when the game piece encounters a window boundary so that the piece can bounce.  \n  \n-   A string that specifies the file name of the image to use for the game piece.  \n  \n The constructor also creates a <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> object and an <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> object, and establishes event handlers for their events.  \n  \n The following code shows the constructor for the **GamePiece** class.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_Constructor](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_constructor)]  \n  \n## Capturing Mouse Input  \n The **UpdateFromMouse** method is responsible for detecting when a mouse button is pressed while the mouse is within the boundaries of the game piece, and for detecting when the mouse button has been released.  \n  \n When the left mouse button is pressed (while the mouse is inside the piece boundaries), this method sets a flag to indicate that this game piece has captured the mouse, and begins manipulation processing.  \n  \n Manipulation processing is started by creating an array of <xref:System.Windows.Input.Manipulations.Manipulator2D> objects and passing them to the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> object. This causes the manipulation processor to evaluate the manipulators (in this case a single manipulator), and raise manipulation events.  \n  \n In addition, the point at which the drag is occurring is saved. This is used later during the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta> event to adjust the delta translation values so that the game piece swings into line behind the drag point.  \n  \n Finally, this method returns the state of the mouse capture. This enables the [GamePieceCollection](../../../docs/framework/common-client-technologies/creating-the-gamepiececollection-class.md) object to manage capturing when there are multiple game pieces.  \n  \n The following code shows the **UpdateFromMouse** method.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_UpdateFromMouse](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_updatefrommouse)]  \n  \n## Processing Manipulations  \n When manipulation begins, the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started> event is raised. The handler for this event stops inertia processing if it is occurring, and sets the *processInertia* flag to `false`.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_OnManipulationStarted](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationstarted)]  \n  \n As the values associated with the manipulation change, the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta> event is raised. The handler for this event uses the delta values passed in the event arguments to make changes to the position and rotation values of the game piece.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_OnManipulationDelta](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationdelta)]  \n  \n When all of the manipulators (in this case, a single manipulator) that are associated with a manipulation are removed, the manipulation processor raises the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> event. The handler for this event begins inertia processing by setting the initial velocities of the inertia processor to those reported by the event arguments, and sets the *processInertia* flag to `true`.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_OnManipulationCompleted](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationcompleted)]  \n  \n## Processing Inertia  \n As inertia processing extrapolates new values for angular and linear velocities, position (translation) coordinates, and rotation, the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta> event is raised. The handler for this event uses the delta values passed in the event arguments to modify the position and rotation of the game piece.  \n  \n If the new coordinates result in the game piece moving beyond the view port boundaries, the velocity of the inertia processing is reversed. This causes the game piece to bounce off the view port boundary that it has encountered.  \n  \n You cannot change the properties of an <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> object while it is running extrapolation. Therefore, when reversing the X or Y velocity, the event handler first stops inertia by calling the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A> method. It then assigns the new initial velocity values to be the current velocity values (adjusted for sponge behavior), and sets the *processInertia* flag to `true`.  \n  \n The following code shows the event handler for the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta> event.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_OnInertiaDelta](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_oninertiadelta)]  \n  \n When inertia processing is complete, the inertia processor raises the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> event. The handler for this event sets the *processInertia* flag to `false`.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_OnInertiaCompleted](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_oninertiacompleted)]  \n  \n None of the logic presented so far actually causes inertia extrapolation to occur. This is accomplished in the **ProcessInertia** method. This method, which is called repeatedly from the game update loop (the [Game.Update](http://msdn.microsoft.com/library/microsoft.xna.framework.game.update.aspx) method) checks to see if the *processInertia* flag is set to `true`, and if so, calls the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Process%2A> method. Calling this method causes extrapolation to occur, and raises the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta> event.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_ProcessInertia](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_processinertia)]  \n  \n The game piece is not actually rendered until one of the Draw method overloads is called. The first overload of this method is called repeatedly from the game draw loop (the [Game.Draw](http://msdn.microsoft.com/library/microsoft.xna.framework.game.draw.aspx) method). This renders the game piece with the current position, rotation, and scale factors.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_Draw](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_draw)]  \n  \n## Additional Properties  \n Three private properties are used by the **GamePiece** class.  \n  \n1.  **Timestamp** – Gets a timestamp value to be used by the manipulation and inertia processors.  \n  \n2.  **X** – Gets or sets the X coordinate of the game piece. When setting, adjusts the bounds used for hit testing and the pivot location of the manipulation processor.  \n  \n3.  **Y** – Gets or sets the Y coordinate of the game piece. When setting, adjusts the bounds used for hit testing and the pivot location of the manipulation processor.  \n  \n [!code-csharp[ManipulationXNA#_GamePiece_PrivateProperties](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_privateproperties)]  \n  \n## See Also  \n [Manipulations and Inertia](../../../docs/framework/common-client-technologies/manipulations-and-inertia.md)   \n [Using Manipulations and Inertia in an XNA Application](../../../docs/framework/common-client-technologies/use-manipulations-and-inertia-in-an-xna-application.md)   \n [Creating the GamePieceCollection Class](../../../docs/framework/common-client-technologies/creating-the-gamepiececollection-class.md)   \n [Creating the Game1 Class](../../../docs/framework/common-client-technologies/creating-the-game1-class.md)","nodes":[{"pos":[4,357],"nodes":[{"content":"Creating the GamePiece Class | Microsoft Docs","nodes":[{"pos":[0,45],"content":"Creating the GamePiece Class | Microsoft Docs","nodes":[{"content":"Creating the GamePiece Class | Microsoft Docs","pos":[0,45]}]}],"pos":[6,54],"yaml":true}],"content":"title: \"Creating the GamePiece Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 37a27a86-ac1c-47be-b477-cb4b819459d3\ncaps.latest.revision: 9\nauthor: \"wadepickett\"\nms.author: \"wpickett\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[364,392],"content":"Creating the GamePiece Class","linkify":"Creating the GamePiece Class","nodes":[{"content":"Creating the GamePiece Class","pos":[0,28]}]},{"pos":[393,715],"content":"The <bpt id=\"p1\">**</bpt>GamePiece<ept id=\"p1\">**</ept> class encapsulates all the functionality required to load a Microsoft XNA game piece image, track the state of the mouse in relation to the game piece, capture the mouse, provide manipulation and inertia processing, and provide bouncing capability when the game piece reaches the limits of the view port.","source":"The **GamePiece** class encapsulates all the functionality required to load a Microsoft XNA game piece image, track the state of the mouse in relation to the game piece, capture the mouse, provide manipulation and inertia processing, and provide bouncing capability when the game piece reaches the limits of the view port."},{"pos":[724,739],"content":"Private Members","linkify":"Private Members","nodes":[{"content":"Private Members","pos":[0,15]}]},{"pos":[743,819],"content":"At the top of the <bpt id=\"p1\">**</bpt>GamePiece<ept id=\"p1\">**</ept> class, several private members are declared.","source":"At the top of the **GamePiece** class, several private members are declared."},{"pos":[826,992],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_PrivateMembers<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_privatemembers)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_PrivateMembers](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_privatemembers)]"},{"pos":[1001,1018],"content":"Public Properties","linkify":"Public Properties","nodes":[{"content":"Public Properties","pos":[0,17]}]},{"content":"Three of these private members are exposed through public properties.","pos":[1022,1091]},{"content":"The <bpt id=\"p1\">**</bpt>Scale<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>PieceColor<ept id=\"p2\">**</ept> properties enable the application to specify the scale and the color of the piece, respectively.","pos":[1092,1221],"source":" The **Scale** and **PieceColor** properties enable the application to specify the scale and the color of the piece, respectively."},{"content":"The <bpt id=\"p1\">**</bpt>Bounds<ept id=\"p1\">**</ept> property is exposed to enable one piece to use the bounds of another to render itself, such as when one piece should overlay another.","pos":[1222,1370],"source":" The **Bounds** property is exposed to enable one piece to use the bounds of another to render itself, such as when one piece should overlay another."},{"content":"The following code shows the declaration of the public properties.","pos":[1371,1437]},{"pos":[1444,1614],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_PublicProperties<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_publicproperties)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_PublicProperties](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_publicproperties)]"},{"pos":[1623,1640],"content":"Class Constructor","linkify":"Class Constructor","nodes":[{"content":"Class Constructor","pos":[0,17]}]},{"pos":[1644,1721],"content":"The constructor for the <bpt id=\"p1\">**</bpt>GamePiece<ept id=\"p1\">**</ept> class accepts the following parameters:","source":"The constructor for the **GamePiece** class accepts the following parameters:"},{"content":"A <bpt id=\"p1\">[</bpt>SpriteBatch<ept id=\"p1\">](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.aspx)</ept> type.","pos":[1731,1837],"source":"A [SpriteBatch](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.aspx) type."},{"content":"The reference passed here is assigned to the private member <ph id=\"ph1\">`spriteBatch`</ph>, and is used to access the <bpt id=\"p1\">[</bpt>SpriteBatch.Draw<ept id=\"p1\">](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.draw.aspx)</ept> method when the game piece renders itself.","pos":[1838,2090],"source":" The reference passed here is assigned to the private member `spriteBatch`, and is used to access the [SpriteBatch.Draw](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.draw.aspx) method when the game piece renders itself."},{"content":"In addition, the <bpt id=\"p1\">[</bpt>GraphicsDevice<ept id=\"p1\">](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.graphicsdevice.aspx)</ept> property is used to create the <bpt id=\"p2\">[</bpt>Texture<ept id=\"p2\">](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.texture.aspx)</ept> object associated with the game piece, and to obtain the size of the view port in order to detect when the game piece encounters a window boundary so that the piece can bounce.","pos":[2091,2523],"source":" In addition, the [GraphicsDevice](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.graphicsdevice.aspx) property is used to create the [Texture](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.texture.aspx) object associated with the game piece, and to obtain the size of the view port in order to detect when the game piece encounters a window boundary so that the piece can bounce."},{"content":"A string that specifies the file name of the image to use for the game piece.","pos":[2533,2610]},{"content":"The constructor also creates a <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D&gt;</ph> object and an <ph id=\"ph2\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D&gt;</ph> object, and establishes event handlers for their events.","pos":[2617,2845],"source":"The constructor also creates a <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> object and an <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> object, and establishes event handlers for their events."},{"pos":[2852,2921],"content":"The following code shows the constructor for the <bpt id=\"p1\">**</bpt>GamePiece<ept id=\"p1\">**</ept> class.","source":"The following code shows the constructor for the **GamePiece** class."},{"pos":[2928,3088],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_Constructor<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_constructor)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_Constructor](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_constructor)]"},{"pos":[3097,3118],"content":"Capturing Mouse Input","linkify":"Capturing Mouse Input","nodes":[{"content":"Capturing Mouse Input","pos":[0,21]}]},{"pos":[3122,3331],"content":"The <bpt id=\"p1\">**</bpt>UpdateFromMouse<ept id=\"p1\">**</ept> method is responsible for detecting when a mouse button is pressed while the mouse is within the boundaries of the game piece, and for detecting when the mouse button has been released.","source":"The **UpdateFromMouse** method is responsible for detecting when a mouse button is pressed while the mouse is within the boundaries of the game piece, and for detecting when the mouse button has been released."},{"content":"When the left mouse button is pressed (while the mouse is inside the piece boundaries), this method sets a flag to indicate that this game piece has captured the mouse, and begins manipulation processing.","pos":[3338,3542]},{"content":"Manipulation processing is started by creating an array of <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.Manipulator2D&gt;</ph> objects and passing them to the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D&gt;</ph> object.","pos":[3549,3769],"source":"Manipulation processing is started by creating an array of <xref:System.Windows.Input.Manipulations.Manipulator2D> objects and passing them to the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> object."},{"content":"This causes the manipulation processor to evaluate the manipulators (in this case a single manipulator), and raise manipulation events.","pos":[3770,3905]},{"content":"In addition, the point at which the drag is occurring is saved.","pos":[3912,3975]},{"content":"This is used later during the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta&gt;</ph> event to adjust the delta translation values so that the game piece swings into line behind the drag point.","pos":[3976,4185],"source":" This is used later during the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta> event to adjust the delta translation values so that the game piece swings into line behind the drag point."},{"content":"Finally, this method returns the state of the mouse capture.","pos":[4192,4252]},{"content":"This enables the <bpt id=\"p1\">[</bpt>GamePieceCollection<ept id=\"p1\">](../../../docs/framework/common-client-technologies/creating-the-gamepiececollection-class.md)</ept> object to manage capturing when there are multiple game pieces.","pos":[4253,4449],"source":" This enables the [GamePieceCollection](../../../docs/framework/common-client-technologies/creating-the-gamepiececollection-class.md) object to manage capturing when there are multiple game pieces."},{"pos":[4456,4512],"content":"The following code shows the <bpt id=\"p1\">**</bpt>UpdateFromMouse<ept id=\"p1\">**</ept> method.","source":"The following code shows the **UpdateFromMouse** method."},{"pos":[4519,4687],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_UpdateFromMouse<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_updatefrommouse)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_UpdateFromMouse](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_updatefrommouse)]"},{"pos":[4696,4720],"content":"Processing Manipulations","linkify":"Processing Manipulations","nodes":[{"content":"Processing Manipulations","pos":[0,24]}]},{"content":"When manipulation begins, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started&gt;</ph> event is raised.","pos":[4724,4844],"source":"When manipulation begins, the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started> event is raised."},{"content":"The handler for this event stops inertia processing if it is occurring, and sets the <bpt id=\"p1\">*</bpt>processInertia<ept id=\"p1\">*</ept> flag to <ph id=\"ph1\">`false`</ph>.","pos":[4845,4963],"source":" The handler for this event stops inertia processing if it is occurring, and sets the *processInertia* flag to `false`."},{"pos":[4970,5150],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_OnManipulationStarted<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationstarted)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_OnManipulationStarted](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationstarted)]"},{"content":"As the values associated with the manipulation change, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta&gt;</ph> event is raised.","pos":[5157,5304],"source":"As the values associated with the manipulation change, the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta> event is raised."},{"content":"The handler for this event uses the delta values passed in the event arguments to make changes to the position and rotation values of the game piece.","pos":[5305,5454]},{"pos":[5461,5637],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_OnManipulationDelta<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationdelta)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_OnManipulationDelta](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationdelta)]"},{"content":"When all of the manipulators (in this case, a single manipulator) that are associated with a manipulation are removed, the manipulation processor raises the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed&gt;</ph> event.","pos":[5644,5883],"source":"When all of the manipulators (in this case, a single manipulator) that are associated with a manipulation are removed, the manipulation processor raises the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> event."},{"content":"The handler for this event begins inertia processing by setting the initial velocities of the inertia processor to those reported by the event arguments, and sets the <bpt id=\"p1\">*</bpt>processInertia<ept id=\"p1\">*</ept> flag to <ph id=\"ph1\">`true`</ph>.","pos":[5884,6083],"source":" The handler for this event begins inertia processing by setting the initial velocities of the inertia processor to those reported by the event arguments, and sets the *processInertia* flag to `true`."},{"pos":[6090,6274],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_OnManipulationCompleted<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationcompleted)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_OnManipulationCompleted](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationcompleted)]"},{"pos":[6283,6301],"content":"Processing Inertia","linkify":"Processing Inertia","nodes":[{"content":"Processing Inertia","pos":[0,18]}]},{"content":"As inertia processing extrapolates new values for angular and linear velocities, position (translation) coordinates, and rotation, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta&gt;</ph> event is raised.","pos":[6305,6523],"source":"As inertia processing extrapolates new values for angular and linear velocities, position (translation) coordinates, and rotation, the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta> event is raised."},{"content":"The handler for this event uses the delta values passed in the event arguments to modify the position and rotation of the game piece.","pos":[6524,6657]},{"content":"If the new coordinates result in the game piece moving beyond the view port boundaries, the velocity of the inertia processing is reversed.","pos":[6664,6803]},{"content":"This causes the game piece to bounce off the view port boundary that it has encountered.","pos":[6804,6892]},{"content":"You cannot change the properties of an <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D&gt;</ph> object while it is running extrapolation.","pos":[6899,7040],"source":"You cannot change the properties of an <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> object while it is running extrapolation."},{"content":"Therefore, when reversing the X or Y velocity, the event handler first stops inertia by calling the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A&gt;</ph> method.","pos":[7041,7221],"source":" Therefore, when reversing the X or Y velocity, the event handler first stops inertia by calling the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A> method."},{"content":"It then assigns the new initial velocity values to be the current velocity values (adjusted for sponge behavior), and sets the <bpt id=\"p1\">*</bpt>processInertia<ept id=\"p1\">*</ept> flag to <ph id=\"ph1\">`true`</ph>.","pos":[7222,7381],"source":" It then assigns the new initial velocity values to be the current velocity values (adjusted for sponge behavior), and sets the *processInertia* flag to `true`."},{"content":"The following code shows the event handler for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta&gt;</ph> event.","pos":[7388,7512],"source":"The following code shows the event handler for the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta> event."},{"pos":[7519,7685],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_OnInertiaDelta<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_oninertiadelta)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_OnInertiaDelta](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_oninertiadelta)]"},{"content":"When inertia processing is complete, the inertia processor raises the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed&gt;</ph> event.","pos":[7692,7839],"source":"When inertia processing is complete, the inertia processor raises the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> event."},{"content":"The handler for this event sets the <bpt id=\"p1\">*</bpt>processInertia<ept id=\"p1\">*</ept> flag to <ph id=\"ph1\">`false`</ph>.","pos":[7840,7909],"source":" The handler for this event sets the *processInertia* flag to `false`."},{"pos":[7916,8090],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_OnInertiaCompleted<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_oninertiacompleted)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_OnInertiaCompleted](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_oninertiacompleted)]"},{"content":"None of the logic presented so far actually causes inertia extrapolation to occur.","pos":[8097,8179]},{"content":"This is accomplished in the <bpt id=\"p1\">**</bpt>ProcessInertia<ept id=\"p1\">**</ept> method.","pos":[8180,8234],"source":" This is accomplished in the **ProcessInertia** method."},{"content":"This method, which is called repeatedly from the game update loop (the <bpt id=\"p1\">[</bpt>Game.Update<ept id=\"p1\">](http://msdn.microsoft.com/library/microsoft.xna.framework.game.update.aspx)</ept> method) checks to see if the <bpt id=\"p2\">*</bpt>processInertia<ept id=\"p2\">*</ept> flag is set to <ph id=\"ph1\">`true`</ph>, and if so, calls the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Process%2A&gt;</ph> method.","pos":[8235,8565],"source":" This method, which is called repeatedly from the game update loop (the [Game.Update](http://msdn.microsoft.com/library/microsoft.xna.framework.game.update.aspx) method) checks to see if the *processInertia* flag is set to `true`, and if so, calls the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Process%2A> method."},{"content":"Calling this method causes extrapolation to occur, and raises the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta&gt;</ph> event.","pos":[8566,8705],"source":" Calling this method causes extrapolation to occur, and raises the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta> event."},{"pos":[8712,8878],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_ProcessInertia<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_processinertia)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_ProcessInertia](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_processinertia)]"},{"content":"The game piece is not actually rendered until one of the Draw method overloads is called.","pos":[8885,8974]},{"content":"The first overload of this method is called repeatedly from the game draw loop (the <bpt id=\"p1\">[</bpt>Game.Draw<ept id=\"p1\">](http://msdn.microsoft.com/library/microsoft.xna.framework.game.draw.aspx)</ept> method).","pos":[8975,9153],"source":" The first overload of this method is called repeatedly from the game draw loop (the [Game.Draw](http://msdn.microsoft.com/library/microsoft.xna.framework.game.draw.aspx) method)."},{"content":"This renders the game piece with the current position, rotation, and scale factors.","pos":[9154,9237]},{"pos":[9244,9390],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_Draw<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_draw)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_Draw](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_draw)]"},{"pos":[9399,9420],"content":"Additional Properties","linkify":"Additional Properties","nodes":[{"content":"Additional Properties","pos":[0,21]}]},{"pos":[9424,9485],"content":"Three private properties are used by the <bpt id=\"p1\">**</bpt>GamePiece<ept id=\"p1\">**</ept> class.","source":"Three private properties are used by the **GamePiece** class."},{"pos":[9495,9588],"content":"<bpt id=\"p1\">**</bpt>Timestamp<ept id=\"p1\">**</ept> – Gets a timestamp value to be used by the manipulation and inertia processors.","source":"**Timestamp** – Gets a timestamp value to be used by the manipulation and inertia processors."},{"content":"<bpt id=\"p1\">**</bpt>X<ept id=\"p1\">**</ept> – Gets or sets the X coordinate of the game piece.","pos":[9598,9654],"source":"**X** – Gets or sets the X coordinate of the game piece."},{"content":"When setting, adjusts the bounds used for hit testing and the pivot location of the manipulation processor.","pos":[9655,9762]},{"content":"<bpt id=\"p1\">**</bpt>Y<ept id=\"p1\">**</ept> – Gets or sets the Y coordinate of the game piece.","pos":[9772,9828],"source":"**Y** – Gets or sets the Y coordinate of the game piece."},{"content":"When setting, adjusts the bounds used for hit testing and the pivot location of the manipulation processor.","pos":[9829,9936]},{"pos":[9943,10115],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePiece_PrivateProperties<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_privateproperties)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePiece_PrivateProperties](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_privateproperties)]"},{"pos":[10124,10132],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Manipulations and Inertia<ept id=\"p1\">](../../../docs/framework/common-client-technologies/manipulations-and-inertia.md)</ept><ph id=\"ph1\"> </ph>","pos":[10136,10245],"source":"[Manipulations and Inertia](../../../docs/framework/common-client-technologies/manipulations-and-inertia.md) "},{"content":"<bpt id=\"p1\">[</bpt>Using Manipulations and Inertia in an XNA Application<ept id=\"p1\">](../../../docs/framework/common-client-technologies/use-manipulations-and-inertia-in-an-xna-application.md)</ept><ph id=\"ph1\"> </ph>","pos":[10249,10412],"source":"[Using Manipulations and Inertia in an XNA Application](../../../docs/framework/common-client-technologies/use-manipulations-and-inertia-in-an-xna-application.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating the GamePieceCollection Class<ept id=\"p1\">](../../../docs/framework/common-client-technologies/creating-the-gamepiececollection-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[10416,10551],"source":"[Creating the GamePieceCollection Class](../../../docs/framework/common-client-technologies/creating-the-gamepiececollection-class.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating the Game1 Class<ept id=\"p1\">](../../../docs/framework/common-client-technologies/creating-the-game1-class.md)</ept>","pos":[10555,10661],"source":"[Creating the Game1 Class](../../../docs/framework/common-client-technologies/creating-the-game1-class.md)"}]}