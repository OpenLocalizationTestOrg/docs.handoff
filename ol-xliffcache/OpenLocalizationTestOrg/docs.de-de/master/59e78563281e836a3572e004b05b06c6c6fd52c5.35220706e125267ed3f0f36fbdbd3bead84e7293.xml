{"content":"---\ntitle: \"Timers | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"threading [.NET Framework], timers\"\n  - \"timers, about timers\"\nms.assetid: 7091500d-be18-499b-a942-95366ce185e5\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Timers\nTimers are lightweight objects that enable you to specify a delegate to be called at a specified time. A thread in the thread pool performs the wait operation.  \n  \n Using the <xref:System.Threading.Timer?displayProperty=fullName> class is straightforward. You create a **Timer**, passing a <xref:System.Threading.TimerCallback> delegate to the callback method, an object representing state that will be passed to the callback, an initial raise time, and a time representing the period between callback invocations. To cancel a pending timer, call the **Timer.Dispose** function.  \n  \n> [!NOTE]\n>  There are two other timer classes. The <xref:System.Windows.Forms.Timer?displayProperty=fullName> class is a control that works with visual designers and is meant to be used in user interface contexts; it raises events on the user interface thread. The <xref:System.Timers.Timer?displayProperty=fullName> class derives from <xref:System.ComponentModel.Component>, so it can be used with visual designers; it also raises events, but it raises them on a <xref:System.Threading.ThreadPool> thread. The <xref:System.Threading.Timer?displayProperty=fullName> class makes callbacks on a <xref:System.Threading.ThreadPool> thread and does not use the event model at all. It also provides a state object to the callback method, which the other timers do not. It is extremely lightweight.  \n  \n The following code example starts a timer that starts after one second (1000 milliseconds) and ticks every second until you press the **Enter** key. The variable containing the reference to the timer is a class-level field, to ensure that the timer is not subject to garbage collection while it is still running. For more information on aggressive garbage collection, see <xref:System.GC.KeepAlive%2A>.  \n  \n [!code-cpp[System.Threading.Timer#2](../../../samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source2.cpp#2)]\n [!code-csharp[System.Threading.Timer#2](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source2.cs#2)]\n [!code-vb[System.Threading.Timer#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source2.vb#2)]  \n  \n## See Also  \n <xref:System.Threading.Timer>   \n [Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md)","nodes":[{"pos":[12,35],"content":"Timers | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Timers | Microsoft Docs","pos":[0,23]}]},{"pos":[417,423],"content":"Timers","linkify":"Timers","nodes":[{"content":"Timers","pos":[0,6]}]},{"content":"Timers are lightweight objects that enable you to specify a delegate to be called at a specified time.","pos":[424,526]},{"content":"A thread in the thread pool performs the wait operation.","pos":[527,583]},{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph> class is straightforward.","pos":[590,680],"source":"Using the <xref:System.Threading.Timer?displayProperty=fullName> class is straightforward."},{"content":"You create a <bpt id=\"p1\">**</bpt>Timer<ept id=\"p1\">**</ept>, passing a <ph id=\"ph1\">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate to the callback method, an object representing state that will be passed to the callback, an initial raise time, and a time representing the period between callback invocations.","pos":[681,939],"source":" You create a **Timer**, passing a <xref:System.Threading.TimerCallback> delegate to the callback method, an object representing state that will be passed to the callback, an initial raise time, and a time representing the period between callback invocations."},{"content":"To cancel a pending timer, call the <bpt id=\"p1\">**</bpt>Timer.Dispose<ept id=\"p1\">**</ept> function.","pos":[940,1003],"source":" To cancel a pending timer, call the **Timer.Dispose** function."},{"pos":[1011,1801],"content":"[!NOTE]\n There are two other timer classes. The <xref:System.Windows.Forms.Timer?displayProperty=fullName> class is a control that works with visual designers and is meant to be used in user interface contexts; it raises events on the user interface thread. The <xref:System.Timers.Timer?displayProperty=fullName> class derives from <xref:System.ComponentModel.Component>, so it can be used with visual designers; it also raises events, but it raises them on a <xref:System.Threading.ThreadPool> thread. The <xref:System.Threading.Timer?displayProperty=fullName> class makes callbacks on a <xref:System.Threading.ThreadPool> thread and does not use the event model at all. It also provides a state object to the callback method, which the other timers do not. It is extremely lightweight.","leadings":["","> "],"nodes":[{"content":" There are two other timer classes. The <xref:System.Windows.Forms.Timer?displayProperty=fullName> class is a control that works with visual designers and is meant to be used in user interface contexts; it raises events on the user interface thread. The <xref:System.Timers.Timer?displayProperty=fullName> class derives from <xref:System.ComponentModel.Component>, so it can be used with visual designers; it also raises events, but it raises them on a <xref:System.Threading.ThreadPool> thread. The <xref:System.Threading.Timer?displayProperty=fullName> class makes callbacks on a <xref:System.Threading.ThreadPool> thread and does not use the event model at all. It also provides a state object to the callback method, which the other timers do not. It is extremely lightweight.","pos":[8,788],"nodes":[{"content":"There are two other timer classes.","pos":[1,35]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;</ph> class is a control that works with visual designers and is meant to be used in user interface contexts; it raises events on the user interface thread.","pos":[36,249],"source":" The <xref:System.Windows.Forms.Timer?displayProperty=fullName> class is a control that works with visual designers and is meant to be used in user interface contexts; it raises events on the user interface thread."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> class derives from <ph id=\"ph2\">&lt;xref:System.ComponentModel.Component&gt;</ph>, so it can be used with visual designers; it also raises events, but it raises them on a <ph id=\"ph3\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.","pos":[250,495],"source":" The <xref:System.Timers.Timer?displayProperty=fullName> class derives from <xref:System.ComponentModel.Component>, so it can be used with visual designers; it also raises events, but it raises them on a <xref:System.Threading.ThreadPool> thread."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph> class makes callbacks on a <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread and does not use the event model at all.","pos":[496,664],"source":" The <xref:System.Threading.Timer?displayProperty=fullName> class makes callbacks on a <xref:System.Threading.ThreadPool> thread and does not use the event model at all."},{"content":"It also provides a state object to the callback method, which the other timers do not.","pos":[665,751]},{"content":"It is extremely lightweight.","pos":[752,780]}]}]},{"content":"The following code example starts a timer that starts after one second (1000 milliseconds) and ticks every second until you press the <bpt id=\"p1\">**</bpt>Enter<ept id=\"p1\">**</ept> key.","pos":[1808,1956],"source":"The following code example starts a timer that starts after one second (1000 milliseconds) and ticks every second until you press the **Enter** key."},{"content":"The variable containing the reference to the timer is a class-level field, to ensure that the timer is not subject to garbage collection while it is still running.","pos":[1957,2120]},{"content":"For more information on aggressive garbage collection, see <ph id=\"ph1\">&lt;xref:System.GC.KeepAlive%2A&gt;</ph>.","pos":[2121,2210],"source":" For more information on aggressive garbage collection, see <xref:System.GC.KeepAlive%2A>."},{"pos":[2217,2626],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Timer#2<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source2.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Threading.Timer#2<ept id=\"p4\">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source2.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Threading.Timer#2<ept id=\"p6\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source2.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Threading.Timer#2](../../../samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source2.cpp#2)]\n [!code-csharp[System.Threading.Timer#2](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source2.cs#2)]\n [!code-vb[System.Threading.Timer#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source2.vb#2)]"},{"pos":[2635,2643],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Threading Objects and Features<ept id=\"p1\">](../../../docs/standard/threading/threading-objects-and-features.md)</ept>","pos":[2680,2781],"source":" [Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md)"}]}