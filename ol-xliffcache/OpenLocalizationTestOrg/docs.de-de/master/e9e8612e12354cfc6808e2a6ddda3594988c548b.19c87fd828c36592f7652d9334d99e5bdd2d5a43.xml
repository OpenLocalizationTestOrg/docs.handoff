{"content":"---\ntitle: \"Using Indexers (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"indexers [C#], about indexers\"\nms.assetid: df70e1a2-3ce3-4aba-ad80-4b2f3538699f\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using Indexers (C# Programming Guide)\nIndexers are a syntactic convenience that enable you to create a [class](../../../csharp/language-reference/keywords/class.md), [struct](../../../csharp/language-reference/keywords/struct.md), or [interface](../../../csharp/language-reference/keywords/interface.md) that client applications can access just as an array. Indexers are most frequently implemented in types whose primary purpose is to encapsulate an internal collection or array. For example, suppose you have a class named TempRecord that represents the temperature in Farenheit as recorded at 10 different times during a 24 hour period. The class contains an array named \"temps\" of type float to represent the temperatures, and a <xref:System.DateTime> that represents the date the temperatures were recorded. By implementing an indexer in this class, clients can access the temperatures in a TempRecord instance as `float temp = tr[4]` instead of as `float temp = tr.temps[4]`. The indexer notation not only simplifies the syntax for client applications; it also makes the class and its purpose more intuitive for other developers to understand.  \n  \n To declare an indexer on a class or struct, use the [this](../../../csharp/language-reference/keywords/this.md) keyword, as in this example:  \n  \n```  \npublic int this[int index]    // Indexer declaration  \n{  \n    // get and set accessors  \n}  \n  \n```  \n  \n## Remarks  \n The type of an indexer and the type of its parameters must be at least as accessible as the indexer itself. For more information about accessibility levels, see [Access Modifiers](../../../csharp/language-reference/keywords/access-modifiers.md).  \n  \n For more information about how to use indexers with an interface, see [Interface Indexers](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md).  \n  \n The signature of an indexer consists of the number and types of its formal parameters. It does not include the indexer type or the names of the formal parameters. If you declare more than one indexer in the same class, they must have different signatures.  \n  \n An indexer value is not classified as a variable; therefore, you cannot pass an indexer value as a [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out.md) parameter.  \n  \n To provide the indexer with a name that other languages can use, use a `name` attribute in the declaration. For example:  \n  \n```  \n[System.Runtime.CompilerServices.IndexerName(\"TheItem\")]  \npublic int this [int index]   // Indexer declaration  \n{  \n}  \n```  \n  \n This indexer will have the name `TheItem`. Not providing the name attribute would make `Item` the default name.  \n  \n## Example 1  \n  \n### Description  \n The following example shows how to declare a private array field, `temps`, and an indexer. The indexer enables direct access to the instance `tempRecord[i]`. The alternative to using the indexer is to declare the array as a [public](../../../csharp/language-reference/keywords/public.md) member and access its members, `tempRecord.temps[i]`, directly.  \n  \n Notice that when an indexer's access is evaluated, for example, in a `Console.Write` statement, the [get](../../../csharp/language-reference/keywords/get.md) accessor is invoked. Therefore, if no `get` accessor exists, a compile-time error occurs.  \n  \n### Code  \n [!code-cs[csProgGuideIndexers#1](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/using-indexers_1.cs)]  \n  \n## Indexing Using Other Values  \n C# does not limit the index type to integer. For example, it may be useful to use a string with an indexer. Such an indexer might be implemented by searching for the string in the collection, and returning the appropriate value. As accessors can be overloaded, the string and integer versions can co-exist.  \n  \n## Example 2  \n  \n### Description  \n In this example, a class is declared that stores the days of the week. A `get` accessor is declared that takes a string, the name of a day, and returns the corresponding integer. For example, Sunday will return 0, Monday will return 1, and so on.  \n  \n### Code  \n [!code-cs[csProgGuideIndexers#2](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/using-indexers_2.cs)]  \n  \n## Robust Programming  \n There are two main ways in which the security and reliability of indexers can be improved:  \n  \n-   Be sure to incorporate some type of error-handling strategy to handle the chance of client code passing in an invalid index value. In the first example earlier in this topic, the TempRecord class provides a Length property that enables the client code to verify the input before passing it to the indexer. You can also put the error handling code inside the indexer itself. Be sure to document for users any exceptions that you throw inside an indexer accessor.  \n  \n-   Set the accessibility of the `get` and [set](../../../csharp/language-reference/keywords/set.md) accessors to be as restrictive as is reasonable. This is important for the `set` accessor in particular. For more information, see [Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md).  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Indexers](../../../csharp/programming-guide/indexers/index.md)   \n [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)","nodes":[{"pos":[12,66],"content":"Using Indexers (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Indexers (C# Programming Guide) | Microsoft Docs","pos":[0,54]}]},{"pos":[552,589],"content":"Using Indexers (C# Programming Guide)","linkify":"Using Indexers (C# Programming Guide)","nodes":[{"content":"Using Indexers (C# Programming Guide)","pos":[0,37]}]},{"content":"Indexers are a syntactic convenience that enable you to create a <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](../../../csharp/language-reference/keywords/class.md)</ept>, <bpt id=\"p2\">[</bpt>struct<ept id=\"p2\">](../../../csharp/language-reference/keywords/struct.md)</ept>, or <bpt id=\"p3\">[</bpt>interface<ept id=\"p3\">](../../../csharp/language-reference/keywords/interface.md)</ept> that client applications can access just as an array.","pos":[590,909],"source":"Indexers are a syntactic convenience that enable you to create a [class](../../../csharp/language-reference/keywords/class.md), [struct](../../../csharp/language-reference/keywords/struct.md), or [interface](../../../csharp/language-reference/keywords/interface.md) that client applications can access just as an array."},{"content":"Indexers are most frequently implemented in types whose primary purpose is to encapsulate an internal collection or array.","pos":[910,1032]},{"content":"For example, suppose you have a class named TempRecord that represents the temperature in Farenheit as recorded at 10 different times during a 24 hour period.","pos":[1033,1191]},{"content":"The class contains an array named \"temps\" of type float to represent the temperatures, and a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> that represents the date the temperatures were recorded.","pos":[1192,1364],"source":" The class contains an array named \"temps\" of type float to represent the temperatures, and a <xref:System.DateTime> that represents the date the temperatures were recorded."},{"content":"By implementing an indexer in this class, clients can access the temperatures in a TempRecord instance as <ph id=\"ph1\">`float temp = tr[4]`</ph> instead of as <ph id=\"ph2\">`float temp = tr.temps[4]`</ph>.","pos":[1365,1533],"source":" By implementing an indexer in this class, clients can access the temperatures in a TempRecord instance as `float temp = tr[4]` instead of as `float temp = tr.temps[4]`."},{"content":"The indexer notation not only simplifies the syntax for client applications; it also makes the class and its purpose more intuitive for other developers to understand.","pos":[1534,1701]},{"pos":[1708,1848],"content":"To declare an indexer on a class or struct, use the <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](../../../csharp/language-reference/keywords/this.md)</ept> keyword, as in this example:","source":"To declare an indexer on a class or struct, use the [this](../../../csharp/language-reference/keywords/this.md) keyword, as in this example:"},{"pos":[1969,1976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of an indexer and the type of its parameters must be at least as accessible as the indexer itself.","pos":[1980,2087]},{"content":"For more information about accessibility levels, see <bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/access-modifiers.md)</ept>.","pos":[2088,2225],"source":" For more information about accessibility levels, see [Access Modifiers](../../../csharp/language-reference/keywords/access-modifiers.md)."},{"pos":[2232,2393],"content":"For more information about how to use indexers with an interface, see <bpt id=\"p1\">[</bpt>Interface Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)</ept>.","source":"For more information about how to use indexers with an interface, see [Interface Indexers](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)."},{"content":"The signature of an indexer consists of the number and types of its formal parameters.","pos":[2400,2486]},{"content":"It does not include the indexer type or the names of the formal parameters.","pos":[2487,2562]},{"content":"If you declare more than one indexer in the same class, they must have different signatures.","pos":[2563,2655]},{"pos":[2662,2890],"content":"An indexer value is not classified as a variable; therefore, you cannot pass an indexer value as a <bpt id=\"p1\">[</bpt>ref<ept id=\"p1\">](../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id=\"p2\">[</bpt>out<ept id=\"p2\">](../../../csharp/language-reference/keywords/out.md)</ept> parameter.","source":"An indexer value is not classified as a variable; therefore, you cannot pass an indexer value as a [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out.md) parameter."},{"content":"To provide the indexer with a name that other languages can use, use a <ph id=\"ph1\">`name`</ph> attribute in the declaration.","pos":[2897,3004],"source":"To provide the indexer with a name that other languages can use, use a `name` attribute in the declaration."},{"content":"For example:","pos":[3005,3017]},{"content":"This indexer will have the name <ph id=\"ph1\">`TheItem`</ph>.","pos":[3161,3203],"source":"This indexer will have the name `TheItem`."},{"content":"Not providing the name attribute would make <ph id=\"ph1\">`Item`</ph> the default name.","pos":[3204,3272],"source":" Not providing the name attribute would make `Item` the default name."},{"pos":[3281,3290],"content":"Example 1","linkify":"Example 1","nodes":[{"content":"Example 1","pos":[0,9]}]},{"pos":[3300,3311],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"The following example shows how to declare a private array field, <ph id=\"ph1\">`temps`</ph>, and an indexer.","pos":[3315,3405],"source":"The following example shows how to declare a private array field, `temps`, and an indexer."},{"content":"The indexer enables direct access to the instance <ph id=\"ph1\">`tempRecord[i]`</ph>.","pos":[3406,3472],"source":" The indexer enables direct access to the instance `tempRecord[i]`."},{"content":"The alternative to using the indexer is to declare the array as a <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../../../csharp/language-reference/keywords/public.md)</ept> member and access its members, <ph id=\"ph1\">`tempRecord.temps[i]`</ph>, directly.","pos":[3473,3666],"source":" The alternative to using the indexer is to declare the array as a [public](../../../csharp/language-reference/keywords/public.md) member and access its members, `tempRecord.temps[i]`, directly."},{"content":"Notice that when an indexer's access is evaluated, for example, in a <ph id=\"ph1\">`Console.Write`</ph> statement, the <bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](../../../csharp/language-reference/keywords/get.md)</ept> accessor is invoked.","pos":[3673,3851],"source":"Notice that when an indexer's access is evaluated, for example, in a `Console.Write` statement, the [get](../../../csharp/language-reference/keywords/get.md) accessor is invoked."},{"content":"Therefore, if no <ph id=\"ph1\">`get`</ph> accessor exists, a compile-time error occurs.","pos":[3852,3920],"source":" Therefore, if no `get` accessor exists, a compile-time error occurs."},{"pos":[3930,3934],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[3938,4065],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideIndexers#1<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/using-indexers_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideIndexers#1](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/using-indexers_1.cs)]"},{"pos":[4074,4101],"content":"Indexing Using Other Values","linkify":"Indexing Using Other Values","nodes":[{"content":"Indexing Using Other Values","pos":[0,27]}]},{"content":"C# does not limit the index type to integer.","pos":[4105,4149]},{"content":"For example, it may be useful to use a string with an indexer.","pos":[4150,4212]},{"content":"Such an indexer might be implemented by searching for the string in the collection, and returning the appropriate value.","pos":[4213,4333]},{"content":"As accessors can be overloaded, the string and integer versions can co-exist.","pos":[4334,4411]},{"pos":[4420,4429],"content":"Example 2","linkify":"Example 2","nodes":[{"content":"Example 2","pos":[0,9]}]},{"pos":[4439,4450],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"In this example, a class is declared that stores the days of the week.","pos":[4454,4524]},{"content":"A <ph id=\"ph1\">`get`</ph> accessor is declared that takes a string, the name of a day, and returns the corresponding integer.","pos":[4525,4632],"source":" A `get` accessor is declared that takes a string, the name of a day, and returns the corresponding integer."},{"content":"For example, Sunday will return 0, Monday will return 1, and so on.","pos":[4633,4700]},{"pos":[4710,4714],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[4718,4845],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideIndexers#2<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/using-indexers_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideIndexers#2](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/using-indexers_2.cs)]"},{"pos":[4854,4872],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"There are two main ways in which the security and reliability of indexers can be improved:","pos":[4876,4966]},{"content":"Be sure to incorporate some type of error-handling strategy to handle the chance of client code passing in an invalid index value.","pos":[4976,5106]},{"content":"In the first example earlier in this topic, the TempRecord class provides a Length property that enables the client code to verify the input before passing it to the indexer.","pos":[5107,5281]},{"content":"You can also put the error handling code inside the indexer itself.","pos":[5282,5349]},{"content":"Be sure to document for users any exceptions that you throw inside an indexer accessor.","pos":[5350,5437]},{"content":"Set the accessibility of the <ph id=\"ph1\">`get`</ph> and <bpt id=\"p1\">[</bpt>set<ept id=\"p1\">](../../../csharp/language-reference/keywords/set.md)</ept> accessors to be as restrictive as is reasonable.","pos":[5447,5592],"source":"Set the accessibility of the `get` and [set](../../../csharp/language-reference/keywords/set.md) accessors to be as restrictive as is reasonable."},{"content":"This is important for the <ph id=\"ph1\">`set`</ph> accessor in particular.","pos":[5593,5648],"source":" This is important for the `set` accessor in particular."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Restricting Accessor Accessibility<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept>.","pos":[5649,5805],"source":" For more information, see [Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)."},{"pos":[5814,5822],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5826,5893],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5896,5961],"source":" [Indexers](../../../csharp/programming-guide/indexers/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","pos":[5964,6046],"source":" [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"}]}