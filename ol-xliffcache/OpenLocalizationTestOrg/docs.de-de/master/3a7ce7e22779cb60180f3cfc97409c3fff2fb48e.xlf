<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a7ce7e22779cb60180f3cfc97409c3fff2fb48e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\optimizing-performance-object-behavior.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3751ff5c162e62963a576946134655949d89b1df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da10cb4a848b89a28686caf8dc61764ca5d231a2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Optimizing Performance: Object Behavior | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Optimizing Performance: Object Behavior</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Understanding the intrinsic behavior of <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> objects will help you make the right tradeoffs between functionality and performance.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Not Removing Event Handlers on Objects may Keep Objects Alive</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The delegate that an object passes to its event is effectively a reference to that object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Therefore, event handlers can keep objects alive longer than expected.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When performing clean up of an object that has registered to listen to an object's event, it is essential to remove that delegate before releasing the object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Keeping unneeded objects alive increases the application's memory usage.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is especially true when the object is the root of a logical tree or a visual tree.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> introduces a weak event listener pattern for events that can be useful in situations where the object lifetime relationships between source and listener are difficult to keep track of.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Some existing <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> events use this pattern.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you are implementing objects with custom events, this pattern may be of use to you.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Weak Event Patterns<ept id="p1">](../../../../docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are several tools, such as the CLR Profiler and the Working Set Viewer, that can provides information on the memory usage of a specified process.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The CLR Profiler includes a number of very useful views of the allocation profile, including a histogram of allocated types, allocation and call graphs, a time line showing garbage collections of various generations and the resulting state of the managed heap after those collections, and a call tree showing per-method allocations and assembly loads.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>.NET Framework Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=117435)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Dependency Properties and Objects</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In general, accessing a dependency property of a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> is not slower than accessing a <ph id="ph2">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>While there is a small performance overhead for setting a property value, getting a value is as fast as getting the value from a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> property.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Offsetting the small performance overhead is the fact that dependency properties support robust features, such as data binding, animation, inheritance, and styling.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>DependencyProperty Optimizations</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You should define dependency properties in your application very carefully.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> affects only render type metadata options, rather than other metadata options such as <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph>, you should mark it as such by overriding its metadata.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about overriding or obtaining property metadata, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-metadata.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It may be more efficient to have a property change handler invalidate the measure, arrange, and render passes manually if not all property changes actually affect measure, arrange, and render.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For instance, you might decide to re-render a background only when a value is greater than a set limit.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this case, your property change handler would only invalidate render when the value exceeds the set limit.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Making a DependencyProperty Inheritable is Not Free</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>By default, registered dependency properties are non-inheritable.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, you can explicitly make any property inheritable.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>While this is a useful feature, converting a property to be inheritable impacts performance by increasing the length of time for property invalidation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use RegisterClassHandler Carefully</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>While calling <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> allows you to save your instance state, it is important to be aware that the handler is called on every instance, which can cause performance problems.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Only use <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> when your application requires that you save your instance state.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Set the Default Value for a DependencyProperty during Registration</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When creating a <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> that requires a default value, set the value using the default metadata passed as a parameter to the <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use this technique rather than setting the property value in a constructor or on each instance of an element.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Set the PropertyMetadata Value using Register</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When creating a <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>, you have the option of setting the <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> using either the <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Although your object could have a static constructor to call <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, this is not the optimal solution and will impact performance.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For best performance, set the <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> during the call to <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Freezable Objects</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> is a special type of object that has two states: unfrozen and frozen.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Freezing objects whenever possible improves the performance of your application and reduces its working set.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> has a <ph id="ph2">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event that is raised whenever it changes.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, change notifications are costly in terms of application performance.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Consider the following example in which each <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> uses the same <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph> object:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Performance#PerformanceSnippet2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Performance/CSharp/Window1.xaml.cs#performancesnippet2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Performance#PerformanceSnippet2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/Performance/visualbasic/window1.xaml.vb#performancesnippet2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides an event handler for the <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> object's <ph id="ph3">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event in order to invalidate the <ph id="ph4">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> object's <ph id="ph5">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this case, each time the <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> has to fire its <ph id="ph2">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event it is required to invoke the callback function for each <ph id="ph3">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>—the accumulation of these callback function invocations impose a significant performance penalty.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In addition, it is very performance intensive to add and remove handlers at this point since the application would have to traverse the entire list to do so.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If your application scenario never changes the <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>, you will be paying the cost of maintaining <ph id="ph2">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event handlers unnecessarily.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Freezing a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> can improve its performance, because it no longer needs to expend resources on maintaining change notifications.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The table below shows the size of a simple <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> when its <ph id="ph2">&lt;xref:System.Windows.Freezable.IsFrozen%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>, compared to when it is not.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This assumes applying one brush to the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property of ten <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>State<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Size<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Frozen <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>212 Bytes</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Non-frozen <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>972 Bytes</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following code sample demonstrates this concept:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Performance#PerformanceSnippet3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Performance/CSharp/Window1.xaml.cs#performancesnippet3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Performance#PerformanceSnippet3<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/Performance/visualbasic/window1.xaml.vb#performancesnippet3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Changed Handlers on Unfrozen Freezables may Keep Objects Alive</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The delegate that an object passes to a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> object's <ph id="ph2">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event is effectively a reference to that object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event handlers can keep objects alive longer than expected.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When performing clean up of an object that has registered to listen to a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> object's <ph id="ph2">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event, it is essential to remove that delegate before releasing the object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> also hooks up <ph id="ph2">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> events internally.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, all dependency properties which take <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> as a value will listen to <ph id="ph2">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> events automatically.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property, which takes a <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>, illustrates this concept.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Performance#PerformanceSnippet4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Performance/CSharp/Window1.xaml.cs#performancesnippet4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Performance#PerformanceSnippet4<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/Performance/visualbasic/window1.xaml.vb#performancesnippet4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>On the assignment of <ph id="ph1">`myBrush`</ph> to <ph id="ph2">`myRectangle.Fill`</ph>, a delegate pointing back to the <ph id="ph3">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> object will be added to the <ph id="ph4">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> object's <ph id="ph5">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This means the following code does not actually make <ph id="ph1">`myRect`</ph> eligible for garbage collection:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Performance#PerformanceSnippet5<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Performance/CSharp/Window1.xaml.cs#performancesnippet5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Performance#PerformanceSnippet5<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/Performance/visualbasic/window1.xaml.vb#performancesnippet5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In this case <ph id="ph1">`myBrush`</ph> is still keeping <ph id="ph2">`myRectangle`</ph> alive and will call back to it when it fires its <ph id="ph3">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Note that assigning <ph id="ph1">`myBrush`</ph> to the <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property of a new <ph id="ph3">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> will simply add another event handler to <ph id="ph4">`myBrush`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The recommended way to clean up these types of objects is to remove the <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> from the <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property, which will in turn remove the <ph id="ph3">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Performance#PerformanceSnippet6<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Performance/CSharp/Window1.xaml.cs#performancesnippet6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Performance#PerformanceSnippet6<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/Performance/visualbasic/window1.xaml.vb#performancesnippet6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>User Interface Virtualization</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> also provides a variation of the <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> element that automatically "virtualizes" data-bound child content.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In this context, the word virtualize refers to a technique by which a subset of objects are generated from a larger number of data items based upon which items are visible on-screen.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It is intensive, both in terms of memory and processor, to generate a large number of UI elements when only a few may be on the screen at a given time.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> (through functionality provided by <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingPanel&gt;</ph>) calculates visible items and works with the <ph id="ph3">&lt;xref:System.Windows.Controls.ItemContainerGenerator&gt;</ph> from an <ph id="ph4">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> (such as <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> or <ph id="ph6">&lt;xref:System.Windows.Controls.ListView&gt;</ph>) to only create elements for visible items.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>As a performance optimization, visual objects for these items are only generated or kept alive if they are visible on the screen.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When they are no longer in the viewable area of the control, the visual objects may be removed.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This is not to be confused with data virtualization, where data objects are not all present in the local collection- rather streamed in as needed.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The table below shows the elapsed time adding and rendering 5000 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements to a <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> and a <ph id="ph3">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In this scenario, the measurements represent the time between attaching a text string to the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl.ItemsSource%2A&gt;</ph> property of an <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> object to the time when the panel elements display the text string.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Host panel<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Render time (ms)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>3210</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>46</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Optimizing WPF Application Performance<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-wpf-application-performance.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Planning for Application Performance<ept id="p1">](../../../../docs/framework/wpf/advanced/planning-for-application-performance.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Taking Advantage of Hardware<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-taking-advantage-of-hardware.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout and Design<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-layout-and-design.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>2D Graphics and Imaging<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-2d-graphics-and-imaging.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-application-resources.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Text<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-text.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-data-binding.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Other Performance Recommendations<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-other-recommendations.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>