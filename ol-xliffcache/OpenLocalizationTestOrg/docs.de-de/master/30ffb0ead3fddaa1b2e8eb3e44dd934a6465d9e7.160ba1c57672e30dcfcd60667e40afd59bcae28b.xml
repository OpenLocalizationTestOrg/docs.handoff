{"content":"---\ntitle: \"Examples of XML Serialization | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"XML serialization, examples\"\n  - \"arrays, serializing\"\n  - \"ICollection interface, serializing\"\n  - \"XmlSerializer class, serializing\"\n  - \"serialization, examples\"\n  - \"DataSet class, serializing\"\n  - \"XML Schema, serializing\"\nms.assetid: eec46337-9696-435b-a375-dc5effae6992\ncaps.latest.revision: 6\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Examples of XML Serialization\nXML serialization can take more than one form, from simple to complex. For example, you can serialize a class that simply consists of public fields and properties, as shown in [Introducing XML Serialization](../../../docs/framework/serialization/introducing-xml-serialization.md). The following code examples address various advanced scenarios, including how to use XML serialization to generate an XML stream that conforms to a specific XML Schema (XSD) document.  \n  \n## Serializing a DataSet  \n Besides serializing an instance of a public class, an instance of a <xref:System.Data.DataSet> can also be serialized, as shown in the following code example.  \n  \n```vb  \nPrivate Sub SerializeDataSet(filename As String)  \n    Dim ser As XmlSerializer = new XmlSerializer(GetType(DataSet))  \n    ' Creates a DataSet; adds a table, column, and ten rows.  \n    Dim ds As DataSet = new DataSet(\"myDataSet\")  \n    Dim t As DataTable = new DataTable(\"table1\")  \n    Dim c As DataColumn = new DataColumn(\"thing\")  \n    t.Columns.Add(c)  \n    ds.Tables.Add(t)  \n    Dim r As DataRow  \n    Dim i As Integer  \n    for i = 0 to 10  \n        r = t.NewRow()  \n        r(0) = \"Thing \" &  i  \n        t.Rows.Add(r)  \n    Next  \n    Dim writer As TextWriter = new StreamWriter(filename)  \n    ser.Serialize(writer, ds)  \n    writer.Close()  \nEnd Sub  \n  \n```  \n  \n```csharp  \nprivate void SerializeDataSet(string filename){  \n    XmlSerializer ser = new XmlSerializer(typeof(DataSet));  \n  \n    // Creates a DataSet; adds a table, column, and ten rows.  \n    DataSet ds = new DataSet(\"myDataSet\");  \n    DataTable t = new DataTable(\"table1\");  \n    DataColumn c = new DataColumn(\"thing\");  \n    t.Columns.Add(c);  \n    ds.Tables.Add(t);  \n    DataRow r;  \n    for(int i = 0; i<10;i++){  \n        r = t.NewRow();  \n        r[0] = \"Thing \" + i;  \n        t.Rows.Add(r);  \n    }  \n    TextWriter writer = new StreamWriter(filename);  \n    ser.Serialize(writer, ds);  \n    writer.Close();  \n}  \n```  \n  \n## Serializing an XmlElement and XmlNode  \n You can also serialize instances of a <xref:System.Xml.XmlElement> or <xref:System.Xml.XmlNode> class, as shown in the following code example.  \n  \n```vb  \nprivate Sub SerializeElement(filename As String)  \n    Dim ser As XmlSerializer = new XmlSerializer(GetType(XmlElement))  \n    Dim myElement As XmlElement = _  \n    new XmlDocument().CreateElement(\"MyElement\", \"ns\")  \n    myElement.InnerText = \"Hello World\"  \n    Dim writer As TextWriter = new StreamWriter(filename)  \n    ser.Serialize(writer, myElement)  \n    writer.Close()  \nEnd Sub  \n  \nPrivate Sub SerializeNode(filename As String)  \n    Dim ser As XmlSerializer = _  \n    new XmlSerializer(GetType(XmlNode))  \n    Dim myNode As XmlNode = new XmlDocument(). _  \n    CreateNode(XmlNodeType.Element, \"MyNode\", \"ns\")  \n    myNode.InnerText = \"Hello Node\"  \n    Dim writer As TextWriter = new StreamWriter(filename)  \n    ser.Serialize(writer, myNode)  \n    writer.Close()  \nEnd Sub  \n  \n```  \n  \n```csharp  \nprivate void SerializeElement(string filename){  \n    XmlSerializer ser = new XmlSerializer(typeof(XmlElement));  \n    XmlElement myElement=   \n    new XmlDocument().CreateElement(\"MyElement\", \"ns\");  \n    myElement.InnerText = \"Hello World\";  \n    TextWriter writer = new StreamWriter(filename);  \n    ser.Serialize(writer, myElement);  \n    writer.Close();  \n}  \n  \nprivate void SerializeNode(string filename){  \n    XmlSerializer ser = new XmlSerializer(typeof(XmlNode));  \n    XmlNode myNode= new XmlDocument().  \n    CreateNode(XmlNodeType.Element, \"MyNode\", \"ns\");  \n    myNode.InnerText = \"Hello Node\";  \n    TextWriter writer = new StreamWriter(filename);  \n    ser.Serialize(writer, myNode);  \n    writer.Close();  \n}  \n```  \n  \n## Serializing a Class that Contains a Field Returning a Complex Object  \n If a property or field returns a complex object (such as an array or a class instance), the [XmlSerializer](https://msdn.microsoft.com/library/system.xml.serialization.xmlserializer.aspx) converts it to an element nested within the main XML document. For example, the first class in the following code example returns an instance of the second class.  \n  \n```vb  \nPublic Class PurchaseOrder  \n    Public MyAdress As Address  \nEnd Class  \n  \nPublic Class Address  \n    Public FirstName As String  \nEnd Class  \n  \n```  \n  \n```csharp  \npublic class PurchaseOrder  \n{  \n    public Address MyAddress;  \n}  \npublic class Address  \n{  \n    public string FirstName;  \n}  \n```  \n  \n The serialized XML output might resemble the following.  \n  \n```  \n<PurchaseOrder>  \n    <Address>  \n        <FirstName>George</FirstName>  \n    </Address>  \n</PurchaseOrder>  \n```  \n  \n## Serializing an Array of Objects  \n You can also serialize a field that returns an array of objects, as shown in the following code example.  \n  \n```vb  \nPublic Class PurchaseOrder  \n    public ItemsOrders () As Item  \nEnd Class  \n  \nPublic Class Item  \n    Public ItemID As String  \n    Public ItemPrice As decimal  \nEnd Class  \n  \n```  \n  \n```csharp  \npublic class PurchaseOrder  \n{  \n    public Item [] ItemsOrders  \n}  \n  \npublic class Item  \n{  \n    public string ItemID  \n    public decimal ItemPrice  \n}  \n  \n```  \n  \n The serialized class instance might resemble the following, if two items are ordered.  \n  \n```  \n<PurchaseOrder xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">  \n    <Items>  \n        <Item>  \n            <ItemID>aaa111</ItemID>  \n            <ItemPrice>34.22</ItemPrice>  \n        <Item>  \n        <Item>  \n            <ItemID>bbb222</ItemID>  \n            <ItemPrice>2.89</ItemPrice>  \n        <Item>  \n    </Items>  \n</PurchaseOrder>  \n```  \n  \n## Serializing a Class that Implements the ICollection Interface  \n You can create your own collection classes by implementing the <xref:System.Collections.ICollection> interface, and use the <xref:System.Xml.Serialization.XmlSerializer> to serialize instances of these classes. Note that when a class implements the <xref:System.Collections.ICollection> interface, only the collection contained by the class is serialized. Any public properties or fields added to the class will not be serialized. The class must include an **Add** method and an **Item** property (C# indexer) to be serialized.  \n  \n```vb  \nImports System  \nImports System.IO  \nImports System.Collections  \nImports System.Xml.Serialization  \n  \nPublic Class Test  \n    Shared Sub Main()  \n        Dim t As Test= new Test()  \n        t.SerializeCollection(\"coll.xml\")  \n    End Sub  \n  \n    Private Sub SerializeCollection(filename As String)  \n        Dim Emps As Employees  = new Employees()  \n        ' Note that only the collection is serialized -- not the   \n        ' CollectionName or any other public property of the class.  \n        Emps.CollectionName = \"Employees\"  \n        Dim John100 As Employee = new Employee(\"John\", \"100xxx\")  \n        Emps.Add(John100)  \n        Dim x As XmlSerializer = new XmlSerializer(GetType(Employees))  \n        Dim writer As TextWriter = new StreamWriter(filename)  \n        x.Serialize(writer, Emps)  \n        writer.Close()  \n    End Sub  \nEnd Class  \n  \nPublic Class Employees  \n    Implements ICollection  \n    Public CollectionName As String   \n    Private empArray As ArrayList = new ArrayList()   \n  \n    Public ReadOnly Default Overloads _  \n    Property Item(index As Integer) As Employee  \n        get  \n        return CType (empArray(index), Employee)  \n        End Get  \n    End Property  \n  \n    Public Sub CopyTo(a As Array, index As Integer) _  \n    Implements ICollection.CopyTo  \n        empArray.CopyTo(a, index)  \n    End Sub  \n  \n    Public ReadOnly Property Count () As integer Implements _  \n    ICollection.Count  \n        get   \n            Count = empArray.Count  \n        End Get  \n  \n    End Property  \n  \n    Public ReadOnly Property SyncRoot ()As Object _  \n    Implements ICollection.SyncRoot  \n        get  \n        return me  \n        End Get  \n    End Property  \n  \n    Public ReadOnly Property IsSynchronized () As Boolean _  \n    Implements ICollection.IsSynchronized  \n        get   \n        return false  \n        End Get  \n    End Property  \n  \n    Public Function GetEnumerator() As IEnumerator _  \n    Implements IEnumerable.GetEnumerator  \n  \n        return empArray.GetEnumerator()  \n    End Function   \n  \n    Public Function Add(newEmployee As Employee) As Integer  \n        empArray.Add(newEmployee)  \n        return empArray.Count  \n    End Function  \nEnd Class  \n  \nPublic Class Employee  \n    Public EmpName As String   \n    Public EmpID As String   \n  \n    Public Sub New ()  \n    End Sub  \n  \n    Public Sub New (newName As String , newID As String )   \n        EmpName = newName  \n        EmpID = newID  \n    End Sub  \nEnd Class  \n  \n```  \n  \n```csharp  \nusing System;  \nusing System.IO;  \nusing System.Collections;  \nusing System.Xml.Serialization;  \n  \npublic class Test{  \n    static void Main(){  \n        Test t = new Test();  \n        t.SerializeCollection(\"coll.xml\");  \n    }  \n  \n    private void SerializeCollection(string filename){  \n        Employees Emps = new Employees();  \n        // Note that only the collection is serialized -- not the   \n        // CollectionName or any other public property of the class.  \n        Emps.CollectionName = \"Employees\";  \n        Employee John100 = new Employee(\"John\", \"100xxx\");  \n        Emps.Add(John100);  \n        XmlSerializer x = new XmlSerializer(typeof(Employees));  \n        TextWriter writer = new StreamWriter(filename);  \n        x.Serialize(writer, Emps);  \n    }  \n}  \npublic class Employees:ICollection{  \n    public string CollectionName;  \n    private ArrayList empArray = new ArrayList();   \n  \n    public Employee this[int index]{  \n        get{return (Employee) empArray[index];}  \n    }  \n  \n    public void CopyTo(Array a, int index){  \n        empArray.CopyTo(a, index);  \n    }  \n    public int Count{  \n        get{return empArray.Count;}  \n    }  \n    public object SyncRoot{  \n        get{return this;}  \n    }  \n    public bool IsSynchronized{  \n        get{return false;}  \n    }  \n    public IEnumerator GetEnumerator(){  \n        return empArray.GetEnumerator();  \n    }  \n  \n    public void Add(Employee newEmployee){  \n        empArray.Add(newEmployee);  \n    }  \n}  \n  \npublic class Employee{  \n    public string EmpName;  \n    public string EmpID;  \n    public Employee(){}  \n    public Employee(string empName, string empID){  \n        EmpName = empName;  \n        EmpID = empID;  \n    }  \n}  \n```  \n  \n## Purchase Order Example  \n You can cut and paste the following example code into a text file renamed with a .cs or .vb file name extension. Use the C# or Visual Basic compiler to compile the file. Then run it using the name of the executable.  \n  \n This example uses a simple scenario to demonstrate how an instance of an object is created and serialized into a file stream using the <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method. The XML stream is saved to a file, and the same file is then read back and reconstructed into a copy of the original object using the <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> method.  \n  \n In this example, a class named `PurchaseOrder` is serialized and then deserialized. A second class named `Address` is also included because the public field named `ShipTo` must be set to an `Address`. Similarly, an `OrderedItem` class is included because an array of `OrderedItem` objects must be set to the `OrderedItems` field. Finally, a class named `Test` contains the code that serializes and deserializes the classes.  \n  \n The `CreatePO` method creates the `PurchaseOrder`, `Address`, and `OrderedItem` class objects, and sets the public field values. The method also constructs an instance of the <xref:System.Xml.Serialization.XmlSerializer> class that is used to serialize and deserialize the `PurchaseOrder`. Note that the code passes the type of the class that will be serialized to the constructor. The code also creates a `FileStream` that is used to write the XML stream to an XML document.  \n  \n The `ReadPo` method is a little simpler. It just creates objects to deserialize and reads out their values. As with the `CreatePo` method, you must first construct a <xref:System.Xml.Serialization.XmlSerializer>, passing the type of the class to be deserialized to the constructor. Also, a <xref:System.IO.FileStream> is required to read the XML document. To deserialize the objects, call the <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> method with the <xref:System.IO.FileStream> as an argument. The deserialized object must be cast to an object variable of type `PurchaseOrder`. The code then reads the values of the deserialized `PurchaseOrder`. Note that you can also read the PO.xml file that is created to see the actual XML output.  \n  \n```vb  \nImports System  \nImports System.Xml  \nImports System.Xml.Serialization  \nImports System.IO  \nImports Microsoft.VisualBasic  \n  \n' The XmlRootAttribute allows you to set an alternate name  \n' (PurchaseOrder) for the XML element and its namespace. By  \n' default, the XmlSerializer uses the class name. The attribute  \n' also allows you to set the XML namespace for the element. Lastly,  \n' the attribute sets the IsNullable property, which specifies whether  \n' the xsi:null attribute appears if the class instance is set to  \n' a null reference.   \n<XmlRootAttribute(\"PurchaseOrder\", _  \n Namespace := \"http://www.cpandl.com\", IsNullable := False)> _  \nPublic Class PurchaseOrder  \n    Public ShipTo As Address  \n    Public OrderDate As String  \n    ' The XmlArrayAttribute changes the XML element name  \n    ' from the default of \"OrderedItems\" to \"Items\".   \n    <XmlArrayAttribute(\"Items\")> _  \n    Public OrderedItems() As OrderedItem  \n    Public SubTotal As Decimal  \n    Public ShipCost As Decimal  \n    Public TotalCost As Decimal  \nEnd Class   \n  \nPublic Class Address  \n    ' The XmlAttribute instructs the XmlSerializer to serialize the   \n    ' Name field as an XML attribute instead of an XML element (the   \n    ' default behavior).   \n    <XmlAttribute()> _  \n    Public Name As String  \n    Public Line1 As String  \n  \n    ' Setting the IsNullable property to false instructs the  \n    ' XmlSerializer that the XML attribute will not appear if  \n    ' the City field is set to a null reference.   \n    <XmlElementAttribute(IsNullable := False)> _  \n    Public City As String  \n    Public State As String  \n    Public Zip As String  \nEnd Class   \n  \nPublic Class OrderedItem  \n    Public ItemName As String  \n    Public Description As String  \n    Public UnitPrice As Decimal  \n    Public Quantity As Integer  \n    Public LineTotal As Decimal  \n  \n    ' Calculate is a custom method that calculates the price per item  \n    ' and stores the value in a field.   \n    Public Sub Calculate()  \n    LineTotal = UnitPrice * Quantity  \n    End Sub   \nEnd Class   \n  \nPublic Class Test  \n        Public Shared Sub Main()  \n    ' Read and write purchase orders.  \n    Dim t As New Test()  \n    t.CreatePO(\"po.xml\")  \n    t.ReadPO(\"po.xml\")  \n    End Sub   \n  \n    Private Sub CreatePO(filename As String)  \n        ' Creates an instance of the XmlSerializer class;  \n        ' specifies the type of object to serialize.  \n        Dim serializer As New XmlSerializer(GetType(PurchaseOrder))  \n        Dim writer As New StreamWriter(filename)  \n        Dim po As New PurchaseOrder()  \n  \n        ' Creates an address to ship and bill to.  \n        Dim billAddress As New Address()  \n        billAddress.Name = \"Teresa Atkinson\"  \n        billAddress.Line1 = \"1 Main St.\"  \n        billAddress.City = \"AnyTown\"  \n        billAddress.State = \"WA\"  \n        billAddress.Zip = \"00000\"  \n        ' Set ShipTo and BillTo to the same addressee.  \n        po.ShipTo = billAddress  \n        po.OrderDate = System.DateTime.Now.ToLongDateString()  \n  \n        ' Creates an OrderedItem.  \n        Dim i1 As New OrderedItem()  \n        i1.ItemName = \"Widget S\"  \n        i1.Description = \"Small widget\"  \n        i1.UnitPrice = CDec(5.23)  \n        i1.Quantity = 3  \n        i1.Calculate()  \n  \n        ' Inserts the item into the array.  \n        Dim items(0) As OrderedItem  \n        items(0) = i1  \n        po.OrderedItems = items  \n        ' Calculates the total cost.  \n        Dim subTotal As New Decimal()  \n        Dim oi As OrderedItem  \n        For Each oi In  items  \n            subTotal += oi.LineTotal  \n        Next oi  \n        po.SubTotal = subTotal  \n        po.ShipCost = CDec(12.51)  \n        po.TotalCost = po.SubTotal + po.ShipCost  \n        ' Serializes the purchase order, and close the TextWriter.  \n        serializer.Serialize(writer, po)  \n        writer.Close()  \n    End Sub   \n  \n    Protected Sub ReadPO(filename As String)  \n        ' Creates an instance of the XmlSerializer class;  \n        ' specifies the type of object to be deserialized.  \n        Dim serializer As New XmlSerializer(GetType(PurchaseOrder))  \n        ' If the XML document has been altered with unknown  \n        ' nodes or attributes, handles them with the  \n        ' UnknownNode and UnknownAttribute events.  \n        AddHandler serializer.UnknownNode, AddressOf serializer_UnknownNode  \n        AddHandler serializer.UnknownAttribute, AddressOf _  \n        serializer_UnknownAttribute  \n  \n        ' A FileStream is needed to read the XML document.  \n        Dim fs As New FileStream(filename, FileMode.Open)  \n        ' Declare an object variable of the type to be deserialized.  \n        Dim po As PurchaseOrder  \n        ' Uses the Deserialize method to restore the object's state   \n        ' with data from the XML document.   \n        po = CType(serializer.Deserialize(fs), PurchaseOrder)  \n        ' Reads the order date.  \n        Console.WriteLine((\"OrderDate: \" & po.OrderDate))  \n  \n        ' Reads the shipping address.  \n        Dim shipTo As Address = po.ShipTo  \n        ReadAddress(shipTo, \"Ship To:\")  \n        ' Reads the list of ordered items.  \n        Dim items As OrderedItem() = po.OrderedItems  \n        Console.WriteLine(\"Items to be shipped:\")  \n        Dim oi As OrderedItem  \n        For Each oi In items  \n            Console.WriteLine((ControlChars.Tab & oi.ItemName & _  \n            ControlChars.Tab & _  \n                oi.Description & ControlChars.Tab & oi.UnitPrice & _  \n                ControlChars.Tab & _  \n                oi.Quantity & ControlChars.Tab & oi.LineTotal))  \n        Next oi  \n        ' Reads the subtotal, shipping cost, and total cost.  \n        Console.WriteLine((ControlChars.Cr & New String _  \n        (ControlChars.Tab, 5) & _  \n        \" Subtotal\" & ControlChars.Tab & po.SubTotal & ControlChars.Cr & _  \n        New String(ControlChars.Tab, 5) & \" Shipping\" & ControlChars.Tab & _  \n        po.ShipCost & ControlChars.Cr &  New String(ControlChars.Tab, 5) & _  \n        \" Total\" & New String(ControlChars.Tab, 2) & po.TotalCost))  \n    End Sub   \n  \n    Protected Sub ReadAddress(a As Address, label As String)  \n        ' Reads the fields of the Address.  \n        Console.WriteLine(label)  \n        Console.Write((ControlChars.Tab & a.Name & ControlChars.Cr & _  \n        ControlChars.Tab & a.Line1 & ControlChars.Cr & ControlChars.Tab & _  \n        a.City & ControlChars.Tab & a.State & ControlChars.Cr & _  \n        ControlChars.Tab & a.Zip & ControlChars.Cr))  \n    End Sub   \n  \n    Protected Sub serializer_UnknownNode(sender As Object, e As _  \n    XmlNodeEventArgs)  \n        Console.WriteLine((\"Unknown Node:\" & e.Name & _  \n        ControlChars.Tab & e.Text))  \n    End Sub   \n  \n    Protected Sub serializer_UnknownAttribute(sender As Object, _  \n    e As XmlAttributeEventArgs)  \n        Dim attr As System.Xml.XmlAttribute = e.Attr  \n        Console.WriteLine((\"Unknown attribute \" & attr.Name & \"='\" & _  \n        attr.Value & \"'\"))  \n    End Sub 'serializer_UnknownAttribute  \nEnd Class 'Test  \n  \n```  \n  \n```csharp  \nusing System;  \nusing System.Xml;  \nusing System.Xml.Serialization;  \nusing System.IO;  \n  \n// The XmlRootAttribute allows you to set an alternate name   \n// (PurchaseOrder) for the XML element and its namespace. By   \n// default, the XmlSerializer uses the class name. The attribute   \n// also allows you to set the XML namespace for the element. Lastly,  \n// the attribute sets the IsNullable property, which specifies whether   \n// the xsi:null attribute appears if the class instance is set to   \n// a null reference.  \n[XmlRootAttribute(\"PurchaseOrder\", Namespace=\"http://www.cpandl.com\",   \nIsNullable = false)]  \npublic class PurchaseOrder  \n{  \n    public Address ShipTo;  \n    public string OrderDate;   \n    // The XmlArrayAttribute changes the XML element name  \n    // from the default of \"OrderedItems\" to \"Items\".  \n    [XmlArrayAttribute(\"Items\")]  \n    public OrderedItem[] OrderedItems;  \n    public decimal SubTotal;  \n    public decimal ShipCost;  \n    public decimal TotalCost;     \n}  \n  \npublic class Address  \n{  \n    // The XmlAttribute instructs the XmlSerializer to serialize the   \n    // Name field as an XML attribute instead of an XML element (the   \n    // default behavior).  \n    [XmlAttribute]  \n    public string Name;  \n    public string Line1;  \n  \n    // Setting the IsNullable property to false instructs the   \n    // XmlSerializer that the XML attribute will not appear if   \n    // the City field is set to a null reference.  \n    [XmlElementAttribute(IsNullable = false)]  \n    public string City;  \n    public string State;  \n    public string Zip;  \n}  \n  \npublic class OrderedItem  \n{  \n    public string ItemName;  \n    public string Description;  \n    public decimal UnitPrice;  \n    public int Quantity;  \n    public decimal LineTotal;  \n  \n    // Calculate is a custom method that calculates the price per item  \n    // and stores the value in a field.  \n    public void Calculate()  \n    {  \n        LineTotal = UnitPrice * Quantity;  \n    }  \n}  \n  \npublic class Test  \n{  \n    public static void Main()  \n    {  \n        // Read and write purchase orders.  \n        Test t = new Test();  \n        t.CreatePO(\"po.xml\");  \n        t.ReadPO(\"po.xml\");  \n    }  \n  \n    private void CreatePO(string filename)  \n    {  \n        // Creates an instance of the XmlSerializer class;  \n        // specifies the type of object to serialize.  \n        XmlSerializer serializer =   \n        new XmlSerializer(typeof(PurchaseOrder));  \n        TextWriter writer = new StreamWriter(filename);  \n        PurchaseOrder po=new PurchaseOrder();  \n  \n        // Creates an address to ship and bill to.  \n        Address billAddress = new Address();  \n        billAddress.Name = \"Teresa Atkinson\";  \n        billAddress.Line1 = \"1 Main St.\";  \n        billAddress.City = \"AnyTown\";  \n        billAddress.State = \"WA\";  \n        billAddress.Zip = \"00000\";  \n        // Sets ShipTo and BillTo to the same addressee.  \n        po.ShipTo = billAddress;  \n        po.OrderDate = System.DateTime.Now.ToLongDateString();  \n  \n        // Creates an OrderedItem.  \n        OrderedItem i1 = new OrderedItem();  \n        i1.ItemName = \"Widget S\";  \n        i1.Description = \"Small widget\";  \n        i1.UnitPrice = (decimal) 5.23;  \n        i1.Quantity = 3;  \n        i1.Calculate();  \n  \n        // Inserts the item into the array.  \n        OrderedItem [] items = {i1};  \n        po.OrderedItems = items;  \n        // Calculate the total cost.  \n        decimal subTotal = new decimal();  \n        foreach(OrderedItem oi in items)  \n        {  \n            subTotal += oi.LineTotal;  \n        }  \n        po.SubTotal = subTotal;  \n        po.ShipCost = (decimal) 12.51;   \n        po.TotalCost = po.SubTotal + po.ShipCost;   \n        // Serializes the purchase order, and closes the TextWriter.  \n        serializer.Serialize(writer, po);  \n        writer.Close();  \n    }  \n  \n    protected void ReadPO(string filename)  \n    {  \n        // Creates an instance of the XmlSerializer class;  \n        // specifies the type of object to be deserialized.  \n        XmlSerializer serializer = new XmlSerializer(typeof(PurchaseOrder));  \n        // If the XML document has been altered with unknown   \n        // nodes or attributes, handles them with the   \n        // UnknownNode and UnknownAttribute events.  \n        serializer.UnknownNode+= new   \n        XmlNodeEventHandler(serializer_UnknownNode);  \n        serializer.UnknownAttribute+= new   \n        XmlAttributeEventHandler(serializer_UnknownAttribute);  \n  \n        // A FileStream is needed to read the XML document.  \n        FileStream fs = new FileStream(filename, FileMode.Open);  \n        // Declares an object variable of the type to be deserialized.  \n        PurchaseOrder po;  \n        // Uses the Deserialize method to restore the object's state   \n        // with data from the XML document. */  \n        po = (PurchaseOrder) serializer.Deserialize(fs);  \n        // Reads the order date.  \n        Console.WriteLine (\"OrderDate: \" + po.OrderDate);  \n  \n        // Reads the shipping address.  \n        Address shipTo = po.ShipTo;  \n        ReadAddress(shipTo, \"Ship To:\");  \n        // Reads the list of ordered items.  \n        OrderedItem [] items = po.OrderedItems;  \n        Console.WriteLine(\"Items to be shipped:\");  \n        foreach(OrderedItem oi in items)  \n        {  \n            Console.WriteLine(\"\\t\"+  \n            oi.ItemName + \"\\t\" +   \n            oi.Description + \"\\t\" +  \n            oi.UnitPrice + \"\\t\" +  \n            oi.Quantity + \"\\t\" +  \n            oi.LineTotal);  \n        }  \n        // Reads the subtotal, shipping cost, and total cost.  \n        Console.WriteLine(  \n        \"\\n\\t\\t\\t\\t\\t Subtotal\\t\" + po.SubTotal +   \n        \"\\n\\t\\t\\t\\t\\t Shipping\\t\" + po.ShipCost +   \n        \"\\n\\t\\t\\t\\t\\t Total\\t\\t\" + po.TotalCost  \n        );  \n    }  \n  \n    protected void ReadAddress(Address a, string label)  \n    {  \n        // Reads the fields of the Address.  \n        Console.WriteLine(label);  \n        Console.Write(\"\\t\"+  \n        a.Name +\"\\n\\t\" +  \n        a.Line1 +\"\\n\\t\" +  \n        a.City +\"\\t\" +  \n        a.State +\"\\n\\t\" +  \n        a.Zip +\"\\n\");  \n    }  \n  \n    protected void serializer_UnknownNode  \n    (object sender, XmlNodeEventArgs e)  \n    {  \n        Console.WriteLine(\"Unknown Node:\" +   e.Name + \"\\t\" + e.Text);  \n    }  \n  \n    protected void serializer_UnknownAttribute  \n    (object sender, XmlAttributeEventArgs e)  \n    {  \n        System.Xml.XmlAttribute attr = e.Attr;  \n        Console.WriteLine(\"Unknown attribute \" +   \n        attr.Name + \"='\" + attr.Value + \"'\");  \n    }  \n}  \n```  \n  \n The XML output might resemble the following.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<PurchaseOrder xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"http://www.cpandl.com\">  \n    <ShipTo Name=\"Teresa Atkinson\">  \n        <Line1>1 Main St.</Line1>  \n        <City>AnyTown</City>  \n        <State>WA</State>  \n        <Zip>00000</Zip>  \n    </ShipTo>  \n    <OrderDate>Wednesday, June 27, 2001</OrderDate>  \n    <Items>  \n        <OrderedItem>  \n            <ItemName>Widget S</ItemName>  \n            <Description>Small widget</Description>  \n            <UnitPrice>5.23</UnitPrice>  \n            <Quantity>3</Quantity>  \n            <LineTotal>15.69</LineTotal>  \n        </OrderedItem>  \n    </Items>  \n    <SubTotal>15.69</SubTotal>  \n    <ShipCost>12.51</ShipCost>  \n    <TotalCost>28.2</TotalCost>  \n</PurchaseOrder>  \n```  \n  \n## See Also  \n [Introducing XML Serialization](../../../docs/framework/serialization/introducing-xml-serialization.md)   \n [Controlling XML Serialization Using Attributes](../../../docs/framework/serialization/controlling-xml-serialization-using-attributes.md)   \n [Attributes That Control XML Serialization](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)   \n [XmlSerializer Class](https://msdn.microsoft.com/library/system.xml.serialization.xmlserializer.aspx)   \n [How to: Serialize an Object](../../../docs/framework/serialization/how-to-serialize-an-object.md)   \n [How to: Deserialize an Object](../../../docs/framework/serialization/how-to-deserialize-an-object.md)\n","nodes":[{"pos":[12,58],"content":"Examples of XML Serialization | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Examples of XML Serialization | Microsoft Docs","pos":[0,46]}]},{"pos":[635,664],"content":"Examples of XML Serialization","linkify":"Examples of XML Serialization","nodes":[{"content":"Examples of XML Serialization","pos":[0,29]}]},{"content":"XML serialization can take more than one form, from simple to complex.","pos":[665,735]},{"content":"For example, you can serialize a class that simply consists of public fields and properties, as shown in <bpt id=\"p1\">[</bpt>Introducing XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/introducing-xml-serialization.md)</ept>.","pos":[736,945],"source":" For example, you can serialize a class that simply consists of public fields and properties, as shown in [Introducing XML Serialization](../../../docs/framework/serialization/introducing-xml-serialization.md)."},{"content":"The following code examples address various advanced scenarios, including how to use XML serialization to generate an XML stream that conforms to a specific XML Schema (XSD) document.","pos":[946,1129]},{"pos":[1138,1159],"content":"Serializing a DataSet","linkify":"Serializing a DataSet","nodes":[{"content":"Serializing a DataSet","pos":[0,21]}]},{"content":"Besides serializing an instance of a public class, an instance of a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> can also be serialized, as shown in the following code example.","pos":[1163,1321],"source":"Besides serializing an instance of a public class, an instance of a <xref:System.Data.DataSet> can also be serialized, as shown in the following code example."},{"pos":[2651,2688],"content":"Serializing an XmlElement and XmlNode","linkify":"Serializing an XmlElement and XmlNode","nodes":[{"content":"Serializing an XmlElement and XmlNode","pos":[0,37]}]},{"content":"You can also serialize instances of a <ph id=\"ph1\">&lt;xref:System.Xml.XmlElement&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Xml.XmlNode&gt;</ph> class, as shown in the following code example.","pos":[2692,2834],"source":"You can also serialize instances of a <xref:System.Xml.XmlElement> or <xref:System.Xml.XmlNode> class, as shown in the following code example."},{"pos":[4401,4469],"content":"Serializing a Class that Contains a Field Returning a Complex Object","linkify":"Serializing a Class that Contains a Field Returning a Complex Object","nodes":[{"content":"Serializing a Class that Contains a Field Returning a Complex Object","pos":[0,68]}]},{"content":"If a property or field returns a complex object (such as an array or a class instance), the <bpt id=\"p1\">[</bpt>XmlSerializer<ept id=\"p1\">](https://msdn.microsoft.com/library/system.xml.serialization.xmlserializer.aspx)</ept> converts it to an element nested within the main XML document.","pos":[4473,4723],"source":"If a property or field returns a complex object (such as an array or a class instance), the [XmlSerializer](https://msdn.microsoft.com/library/system.xml.serialization.xmlserializer.aspx) converts it to an element nested within the main XML document."},{"content":"For example, the first class in the following code example returns an instance of the second class.","pos":[4724,4823]},{"content":"The serialized XML output might resemble the following.","pos":[5147,5202]},{"pos":[5336,5367],"content":"Serializing an Array of Objects","linkify":"Serializing an Array of Objects","nodes":[{"content":"Serializing an Array of Objects","pos":[0,31]}]},{"content":"You can also serialize a field that returns an array of objects, as shown in the following code example.","pos":[5371,5475]},{"content":"The serialized class instance might resemble the following, if two items are ordered.","pos":[5861,5946]},{"pos":[6362,6423],"content":"Serializing a Class that Implements the ICollection Interface","linkify":"Serializing a Class that Implements the ICollection Interface","nodes":[{"content":"Serializing a Class that Implements the ICollection Interface","pos":[0,61]}]},{"content":"You can create your own collection classes by implementing the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> interface, and use the <ph id=\"ph2\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to serialize instances of these classes.","pos":[6427,6637],"source":"You can create your own collection classes by implementing the <xref:System.Collections.ICollection> interface, and use the <xref:System.Xml.Serialization.XmlSerializer> to serialize instances of these classes."},{"content":"Note that when a class implements the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> interface, only the collection contained by the class is serialized.","pos":[6638,6782],"source":" Note that when a class implements the <xref:System.Collections.ICollection> interface, only the collection contained by the class is serialized."},{"content":"Any public properties or fields added to the class will not be serialized.","pos":[6783,6857]},{"content":"The class must include an <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> method and an <bpt id=\"p2\">**</bpt>Item<ept id=\"p2\">**</ept> property (C# indexer) to be serialized.","pos":[6858,6954],"source":" The class must include an **Add** method and an **Item** property (C# indexer) to be serialized."},{"pos":[11217,11239],"content":"Purchase Order Example","linkify":"Purchase Order Example","nodes":[{"content":"Purchase Order Example","pos":[0,22]}]},{"content":"You can cut and paste the following example code into a text file renamed with a .cs or .vb file name extension.","pos":[11243,11355]},{"content":"Use the C# or Visual Basic compiler to compile the file.","pos":[11356,11412]},{"content":"Then run it using the name of the executable.","pos":[11413,11458]},{"content":"This example uses a simple scenario to demonstrate how an instance of an object is created and serialized into a file stream using the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method.","pos":[11465,11666],"source":"This example uses a simple scenario to demonstrate how an instance of an object is created and serialized into a file stream using the <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method."},{"content":"The XML stream is saved to a file, and the same file is then read back and reconstructed into a copy of the original object using the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method.","pos":[11667,11869],"source":" The XML stream is saved to a file, and the same file is then read back and reconstructed into a copy of the original object using the <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> method."},{"content":"In this example, a class named <ph id=\"ph1\">`PurchaseOrder`</ph> is serialized and then deserialized.","pos":[11876,11959],"source":"In this example, a class named `PurchaseOrder` is serialized and then deserialized."},{"content":"A second class named <ph id=\"ph1\">`Address`</ph> is also included because the public field named <ph id=\"ph2\">`ShipTo`</ph> must be set to an <ph id=\"ph3\">`Address`</ph>.","pos":[11960,12076],"source":" A second class named `Address` is also included because the public field named `ShipTo` must be set to an `Address`."},{"content":"Similarly, an <ph id=\"ph1\">`OrderedItem`</ph> class is included because an array of <ph id=\"ph2\">`OrderedItem`</ph> objects must be set to the <ph id=\"ph3\">`OrderedItems`</ph> field.","pos":[12077,12205],"source":" Similarly, an `OrderedItem` class is included because an array of `OrderedItem` objects must be set to the `OrderedItems` field."},{"content":"Finally, a class named <ph id=\"ph1\">`Test`</ph> contains the code that serializes and deserializes the classes.","pos":[12206,12299],"source":" Finally, a class named `Test` contains the code that serializes and deserializes the classes."},{"content":"The <ph id=\"ph1\">`CreatePO`</ph> method creates the <ph id=\"ph2\">`PurchaseOrder`</ph>, <ph id=\"ph3\">`Address`</ph>, and <ph id=\"ph4\">`OrderedItem`</ph> class objects, and sets the public field values.","pos":[12306,12434],"source":"The `CreatePO` method creates the `PurchaseOrder`, `Address`, and `OrderedItem` class objects, and sets the public field values."},{"content":"The method also constructs an instance of the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class that is used to serialize and deserialize the <ph id=\"ph2\">`PurchaseOrder`</ph>.","pos":[12435,12595],"source":" The method also constructs an instance of the <xref:System.Xml.Serialization.XmlSerializer> class that is used to serialize and deserialize the `PurchaseOrder`."},{"content":"Note that the code passes the type of the class that will be serialized to the constructor.","pos":[12596,12687]},{"content":"The code also creates a <ph id=\"ph1\">`FileStream`</ph> that is used to write the XML stream to an XML document.","pos":[12688,12781],"source":" The code also creates a `FileStream` that is used to write the XML stream to an XML document."},{"content":"The <ph id=\"ph1\">`ReadPo`</ph> method is a little simpler.","pos":[12788,12828],"source":"The `ReadPo` method is a little simpler."},{"content":"It just creates objects to deserialize and reads out their values.","pos":[12829,12895]},{"content":"As with the <ph id=\"ph1\">`CreatePo`</ph> method, you must first construct a <ph id=\"ph2\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>, passing the type of the class to be deserialized to the constructor.","pos":[12896,13069],"source":" As with the `CreatePo` method, you must first construct a <xref:System.Xml.Serialization.XmlSerializer>, passing the type of the class to be deserialized to the constructor."},{"content":"Also, a <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> is required to read the XML document.","pos":[13070,13143],"source":" Also, a <xref:System.IO.FileStream> is required to read the XML document."},{"content":"To deserialize the objects, call the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method with the <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> as an argument.","pos":[13144,13301],"source":" To deserialize the objects, call the <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> method with the <xref:System.IO.FileStream> as an argument."},{"content":"The deserialized object must be cast to an object variable of type <ph id=\"ph1\">`PurchaseOrder`</ph>.","pos":[13302,13385],"source":" The deserialized object must be cast to an object variable of type `PurchaseOrder`."},{"content":"The code then reads the values of the deserialized <ph id=\"ph1\">`PurchaseOrder`</ph>.","pos":[13386,13453],"source":" The code then reads the values of the deserialized `PurchaseOrder`."},{"content":"Note that you can also read the PO.xml file that is created to see the actual XML output.","pos":[13454,13543]},{"content":"The XML output might resemble the following.","pos":[27302,27346]},{"pos":[28205,28213],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Introducing XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/introducing-xml-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[28217,28321],"source":"[Introducing XML Serialization](../../../docs/framework/serialization/introducing-xml-serialization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Controlling XML Serialization Using Attributes<ept id=\"p1\">](../../../docs/framework/serialization/controlling-xml-serialization-using-attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[28324,28463],"source":" [Controlling XML Serialization Using Attributes](../../../docs/framework/serialization/controlling-xml-serialization-using-attributes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Attributes That Control XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[28466,28595],"source":" [Attributes That Control XML Serialization](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>XmlSerializer Class<ept id=\"p1\">](https://msdn.microsoft.com/library/system.xml.serialization.xmlserializer.aspx)</ept><ph id=\"ph1\"> </ph>","pos":[28598,28701],"source":" [XmlSerializer Class](https://msdn.microsoft.com/library/system.xml.serialization.xmlserializer.aspx) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Serialize an Object<ept id=\"p1\">](../../../docs/framework/serialization/how-to-serialize-an-object.md)</ept><ph id=\"ph1\"> </ph>","pos":[28704,28804],"source":" [How to: Serialize an Object](../../../docs/framework/serialization/how-to-serialize-an-object.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Deserialize an Object<ept id=\"p1\">](../../../docs/framework/serialization/how-to-deserialize-an-object.md)</ept>","pos":[28807,28910],"source":" [How to: Deserialize an Object](../../../docs/framework/serialization/how-to-deserialize-an-object.md)"}]}