<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50912c113738566130fe930474bdfd5005a3c271</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\lambda-expressions-in-plinq-and-tpl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4554a4a96e24f3ab44af0e7b75f98d66e34b5d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27ff18f81904a82c2d74235f69bfc226e0519aed</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Lambda Expressions in PLINQ and TPL | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Lambda Expressions in PLINQ and TPL</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Task Parallel Library (TPL) contains many methods that take one of the <ph id="ph1">&lt;xref:System.Func%601?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Action?displayProperty=fullName&gt;</ph> family of delegates as input parameters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You use these delegates to pass in your custom program logic to the parallel loop, task or query.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The code examples for TPL as well as PLINQ use lambda expressions to create instances of those delegates as inline code blocks.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic provides a brief introduction to Func and Action and shows you how to use lambda expressions in the Task Parallel Library and PLINQ.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> For more information about delegates in general, see <bpt id="p2">[</bpt>Delegates<ept id="p2">](../../csharp/programming-guide/delegates/index.md)</ept> and <bpt id="p3">[</bpt>Delegates<ept id="p3">](../../visual-basic/programming-guide/language-features/delegates/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about lambda expressions in C# and <ph id="ph1">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Func Delegate</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Func`</ph> delegate encapsulates a method that returns a value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In a Func signature, the last or rightmost type parameter always specifies the return type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>One common cause of compiler errors is to attempt to pass in two input parameters to a <ph id="ph1">&lt;xref:System.Func%602?displayProperty=fullName&gt;</ph>; in fact this type takes only one input parameter.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Framework Class Library defines 17 versions of <ph id="ph1">`Func`</ph>: <ph id="ph2">&lt;xref:System.Func%601?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Func%602?displayProperty=fullName&gt;</ph>, <ph id="ph4">&lt;xref:System.Func%603?displayProperty=fullName&gt;</ph>, and so on up through <ph id="ph5">&lt;xref:System.Func%6017?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Action Delegate</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Action?displayProperty=fullName&gt;</ph> delegate encapsulates a method (Sub in <ph id="ph2">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>) that does not return a value, or returns <bpt id="p1">[</bpt>void<ept id="p1">](~/docs/csharp/language-reference/keywords/void.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In an Action type signature, the type parameters represent only input parameters.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Like Func, the Framework Class Library defines 17 versions of Action, from a version that has no type parameters up through a version that has 16 type parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example for the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%601%7D%2CSystem.Func%7B%60%600%2CSystem.Threading.Tasks.ParallelLoopState%2C%60%601%2C%60%601%7D%2CSystem.Action%7B%60%601%7D%29?displayProperty=fullName&gt;</ph> method shows how to express both Func and Action delegates by using lambda expressions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Threading.Tasks.Parallel#02<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Threading.Tasks.Parallel#02<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel Programming<ept id="p1">](../../../docs/standard/parallel-programming/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>