{"content":"---\ntitle: \"Main() Return Values - C# Programming Guide\"\nms.custom: seodec18\nms.date: 08/02/2017\nhelpviewer_keywords: \n  - \"Main method [C#], return values\"\nms.assetid: c2f5a1d8-1676-4bea-bc7e-44a97e72d5bc\n---\n\n# Main() return values (C# Programming Guide)\n\nThe `Main` method can return `void`:\n\n [!code-csharp[csProgGuideMain#12](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideMain/CS/Class3.cs#12)]\n\nIt can also return an `int`:\n\n [!code-csharp[csProgGuideMain#13](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideMain/CS/Class3.cs#13)]\n\nIf the return value from `Main` is not used, returning `void` allows for slightly simpler code. However, returning an integer enables the program to communicate status information to other programs or scripts that invoke the executable file. The return value from `Main` is treated as the exit code for the process. The following example shows how the return value from `Main` can be accessed.\n\n## Example\n\nThis example uses [.NET Core](../../../core/index.md) command line tools. If you are unfamiliar with .NET Core command line tools, you can learn about them in this [Get started topic](../../../core/tutorials/using-with-xplat-cli.md).\n\nModify the `Main` method in *program.cs* as follows:\n\n [!code-csharp[csProgGuideMain#14](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideMain/CS/Class3.cs#14)]\n\nWhen a program is executed in Windows, any value returned from the `Main` function is stored in an environment variable. This environment variable can be retrieved using `ERRORLEVEL` from a batch file, or `$LastExitCode` from powershell.\n\nYou can build the application using the [dotnet CLI](../../../core/tools/dotnet.md) `dotnet build` command.\n\nNext, create a Powershell script to run the application and display the result. Paste the following code into a text file and save it as `test.ps1` in the folder that contains the project. Run the powershell script by typing `test.ps1` at the powershell prompt.\n\nBecause the code returns zero, the batch file will report success. However, if you change MainReturnValTest.cs to return a non-zero value and then re-compile the program, subsequent execution of the powershell script will report failure.\n\n```powershell\ndotnet run\nif ($LastExitCode -eq 0) {\n    Write-Host \"Execution succeeded\"\n} else\n{\n    Write-Host \"Execution Failed\"\n}\nWrite-Host \"Return value = \" $LastExitCode\n```\n\n## Sample output\n\n```txt\nExecution succeeded\nReturn value = 0\n```\n\n## Async Main return values\n\nAsync Main return values move the boilerplate code necessary for calling asynchronous methods in `Main` to code generated by the compiler. Previously, you would need to write this construct to call asynchronous code and ensure your program ran until the asynchronous operation completed:\n\n```csharp\npublic static void Main()\n{\n    AsyncConsoleWork().GetAwaiter().GetResult();\n}\n\nprivate static async Task<int> AsyncConsoleWork()\n{\n    // Main body here\n    return 0;\n}\n```\n\nNow, this can be replaced by:\n\n[!code-csharp[AsyncMain](../../../../samples/snippets/csharp/main-arguments/program.cs#AsyncMain)]\n\nThe advantage of the new syntax is that the compiler always generates the correct code.\n\n## Compiler generated code\n\nWhen the application entry point returns a `Task` or `Task<int>`, the compiler generates a new entry point that calls the entry point method declared in the application code. Assuming that this entry point is called `$GeneratedMain`, the compiler generates the following code for these entry points:\n\n- `static Task Main()` results in the compiler emitting the equivalent of `private static void $GeneratedMain() => Main().GetAwaiter().GetResult();`\n- `static Task Main(string[])` results in the compiler emitting the equivalent of `private static void $GeneratedMain(string[] args) => Main(args).GetAwaiter().GetResult();`\n- `static Task<int> Main()` results in the compiler emitting the equivalent of `private static int $GeneratedMain() => Main().GetAwaiter().GetResult();`\n- `static Task<int> Main(string[])` results in the compiler emitting the equivalent of `private static int $GeneratedMain(string[] args) => Main(args).GetAwaiter().GetResult();`\n\n> [!NOTE]\n>If the examples used `async` modifier on the `Main` method, the compiler would generate the same code.\n\n## See also\n\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Reference](../index.md)\n- [Main() and Command-Line Arguments](index.md)\n- [How to: Display Command Line Arguments](../../programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)\n- [How to: Access Command-Line Arguments Using foreach](../../programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)\n","nodes":[{"pos":[4,205],"embed":true,"restype":"x-metadata","content":"title: \"Main() Return Values - C# Programming Guide\"\nms.custom: seodec18\nms.date: 08/02/2017\nhelpviewer_keywords: \n  - \"Main method [C#], return values\"\nms.assetid: c2f5a1d8-1676-4bea-bc7e-44a97e72d5bc","nodes":[{"content":"Main() Return Values - C# Programming Guide","nodes":[{"pos":[0,43],"content":"Main() Return Values - C# Programming Guide","nodes":[{"content":"Main() Return Values - C# Programming Guide","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[213,256],"content":"Main() return values (C# Programming Guide)","linkify":"Main() return values (C# Programming Guide)","nodes":[{"content":"Main() return values (C# Programming Guide)","pos":[0,43]}]},{"pos":[258,294],"content":"The <ph id=\"ph1\">`Main`</ph> method can return <ph id=\"ph2\">`void`</ph>:","source":"The `Main` method can return `void`:"},{"pos":[413,441],"content":"It can also return an <ph id=\"ph1\">`int`</ph>:","source":"It can also return an `int`:"},{"content":"If the return value from <ph id=\"ph1\">`Main`</ph> is not used, returning <ph id=\"ph2\">`void`</ph> allows for slightly simpler code.","pos":[560,655],"source":"If the return value from `Main` is not used, returning `void` allows for slightly simpler code."},{"content":"However, returning an integer enables the program to communicate status information to other programs or scripts that invoke the executable file.","pos":[656,801]},{"content":"The return value from <ph id=\"ph1\">`Main`</ph> is treated as the exit code for the process.","pos":[802,875],"source":" The return value from `Main` is treated as the exit code for the process."},{"content":"The following example shows how the return value from <ph id=\"ph1\">`Main`</ph> can be accessed.","pos":[876,953],"source":" The following example shows how the return value from `Main` can be accessed."},{"pos":[958,965],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses <bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](../../../core/index.md)</ept> command line tools.","pos":[967,1040],"source":"This example uses [.NET Core](../../../core/index.md) command line tools."},{"content":"If you are unfamiliar with .NET Core command line tools, you can learn about them in this <bpt id=\"p1\">[</bpt>Get started topic<ept id=\"p1\">](../../../core/tutorials/using-with-xplat-cli.md)</ept>.","pos":[1041,1200],"source":" If you are unfamiliar with .NET Core command line tools, you can learn about them in this [Get started topic](../../../core/tutorials/using-with-xplat-cli.md)."},{"pos":[1202,1254],"content":"Modify the <ph id=\"ph1\">`Main`</ph> method in <bpt id=\"p1\">*</bpt>program.cs<ept id=\"p1\">*</ept> as follows:","source":"Modify the `Main` method in *program.cs* as follows:"},{"content":"When a program is executed in Windows, any value returned from the <ph id=\"ph1\">`Main`</ph> function is stored in an environment variable.","pos":[1373,1493],"source":"When a program is executed in Windows, any value returned from the `Main` function is stored in an environment variable."},{"content":"This environment variable can be retrieved using <ph id=\"ph1\">`ERRORLEVEL`</ph> from a batch file, or <ph id=\"ph2\">`$LastExitCode`</ph> from powershell.","pos":[1494,1610],"source":" This environment variable can be retrieved using `ERRORLEVEL` from a batch file, or `$LastExitCode` from powershell."},{"pos":[1612,1719],"content":"You can build the application using the <bpt id=\"p1\">[</bpt>dotnet CLI<ept id=\"p1\">](../../../core/tools/dotnet.md)</ept> <ph id=\"ph1\">`dotnet build`</ph> command.","source":"You can build the application using the [dotnet CLI](../../../core/tools/dotnet.md) `dotnet build` command."},{"content":"Next, create a Powershell script to run the application and display the result.","pos":[1721,1800]},{"content":"Paste the following code into a text file and save it as <ph id=\"ph1\">`test.ps1`</ph> in the folder that contains the project.","pos":[1801,1909],"source":" Paste the following code into a text file and save it as `test.ps1` in the folder that contains the project."},{"content":"Run the powershell script by typing <ph id=\"ph1\">`test.ps1`</ph> at the powershell prompt.","pos":[1910,1982],"source":" Run the powershell script by typing `test.ps1` at the powershell prompt."},{"content":"Because the code returns zero, the batch file will report success.","pos":[1984,2050]},{"content":"However, if you change MainReturnValTest.cs to return a non-zero value and then re-compile the program, subsequent execution of the powershell script will report failure.","pos":[2051,2221]},{"pos":[2408,2421],"content":"Sample output","linkify":"Sample output","nodes":[{"content":"Sample output","pos":[0,13]}]},{"pos":[2475,2499],"content":"Async Main return values","linkify":"Async Main return values","nodes":[{"content":"Async Main return values","pos":[0,24]}]},{"content":"Async Main return values move the boilerplate code necessary for calling asynchronous methods in <ph id=\"ph1\">`Main`</ph> to code generated by the compiler.","pos":[2501,2639],"source":"Async Main return values move the boilerplate code necessary for calling asynchronous methods in `Main` to code generated by the compiler."},{"content":"Previously, you would need to write this construct to call asynchronous code and ensure your program ran until the asynchronous operation completed:","pos":[2640,2788]},{"content":"Now, this can be replaced by:","pos":[2975,3004]},{"content":"The advantage of the new syntax is that the compiler always generates the correct code.","pos":[3106,3193]},{"pos":[3198,3221],"content":"Compiler generated code","linkify":"Compiler generated code","nodes":[{"content":"Compiler generated code","pos":[0,23]}]},{"content":"When the application entry point returns a <ph id=\"ph1\">`Task`</ph> or <ph id=\"ph2\">`Task&lt;int&gt;`</ph>, the compiler generates a new entry point that calls the entry point method declared in the application code.","pos":[3223,3397],"source":"When the application entry point returns a `Task` or `Task<int>`, the compiler generates a new entry point that calls the entry point method declared in the application code."},{"content":"Assuming that this entry point is called <ph id=\"ph1\">`$GeneratedMain`</ph>, the compiler generates the following code for these entry points:","pos":[3398,3522],"source":" Assuming that this entry point is called `$GeneratedMain`, the compiler generates the following code for these entry points:"},{"pos":[3526,3672],"content":"<ph id=\"ph1\">`static Task Main()`</ph> results in the compiler emitting the equivalent of <ph id=\"ph2\">`private static void $GeneratedMain() =&gt; Main().GetAwaiter().GetResult();`</ph>","source":"`static Task Main()` results in the compiler emitting the equivalent of `private static void $GeneratedMain() => Main().GetAwaiter().GetResult();`"},{"pos":[3675,3846],"content":"<ph id=\"ph1\">`static Task Main(string[])`</ph> results in the compiler emitting the equivalent of <ph id=\"ph2\">`private static void $GeneratedMain(string[] args) =&gt; Main(args).GetAwaiter().GetResult();`</ph>","source":"`static Task Main(string[])` results in the compiler emitting the equivalent of `private static void $GeneratedMain(string[] args) => Main(args).GetAwaiter().GetResult();`"},{"pos":[3849,3999],"content":"<ph id=\"ph1\">`static Task&lt;int&gt; Main()`</ph> results in the compiler emitting the equivalent of <ph id=\"ph2\">`private static int $GeneratedMain() =&gt; Main().GetAwaiter().GetResult();`</ph>","source":"`static Task<int> Main()` results in the compiler emitting the equivalent of `private static int $GeneratedMain() => Main().GetAwaiter().GetResult();`"},{"pos":[4002,4177],"content":"<ph id=\"ph1\">`static Task&lt;int&gt; Main(string[])`</ph> results in the compiler emitting the equivalent of <ph id=\"ph2\">`private static int $GeneratedMain(string[] args) =&gt; Main(args).GetAwaiter().GetResult();`</ph>","source":"`static Task<int> Main(string[])` results in the compiler emitting the equivalent of `private static int $GeneratedMain(string[] args) => Main(args).GetAwaiter().GetResult();`"},{"pos":[4181,4292],"content":"[!NOTE]\nIf the examples used `async` modifier on the `Main` method, the compiler would generate the same code.","leadings":["",">"],"nodes":[{"content":"If the examples used <ph id=\"ph1\">`async`</ph> modifier on the <ph id=\"ph2\">`Main`</ph> method, the compiler would generate the same code.","pos":[8,110],"source":"If the examples used `async` modifier on the `Main` method, the compiler would generate the same code."}]},{"pos":[4297,4305],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4309,4365],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4368,4395],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4398,4443],"content":"<bpt id=\"p1\">[</bpt>Main() and Command-Line Arguments<ept id=\"p1\">](index.md)</ept>","source":"[Main() and Command-Line Arguments](index.md)"},{"pos":[4446,4574],"content":"<bpt id=\"p1\">[</bpt>How to: Display Command Line Arguments<ept id=\"p1\">](../../programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)</ept>","source":"[How to: Display Command Line Arguments](../../programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)"},{"pos":[4577,4731],"content":"<bpt id=\"p1\">[</bpt>How to: Access Command-Line Arguments Using foreach<ept id=\"p1\">](../../programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)</ept>","source":"[How to: Access Command-Line Arguments Using foreach](../../programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)"}]}