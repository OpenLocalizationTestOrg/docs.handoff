{"content":"---\ntitle: Classes and objects  - Introduction to C# tutorial\ndescription: Create your first C# program and explore object oriented concepts\nms.date: 10/11/2017\nms.custom: mvc\n---\n# Explore object oriented programming with classes and objects\n\nThis tutorial expects that you have a machine you can use for development. The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux. A quick overview of the commands you'll use is in the [Become familiar with the development tools](local-environment.md) with links to more details.\n\n## Create your application\n\nUsing a terminal window, create a directory named **classes**. You'll build your application there. Change to that directory and type `dotnet new console` in the console window. This command creates your application. Open **Program.cs**. It should look like this:\n\n```csharp\nusing System;\n\nnamespace classes\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n```\n\nIn this tutorial, you're going to create new types that represent a bank account. Typically developers define each class in a different text file. That makes it easier to manage as a program grows in size.  Create a new file named **BankAccount.cs** in the **classes** directory. \n\nThis file will contain the definition of a ***bank account***. Object Oriented programming organizes code by creating types in the form of ***classes***. These classes contain the code that represents a specific entity. The `BankAccount` class represents a bank account. The code implements specific operations through methods and properties. In this tutorial, the bank account supports this behavior:\n\n1. It has a 10-digit number that uniquely identifies the bank account.\n1. It has a string that stores the name or names of the owners.\n1. The balance can be retrieved.\n1. It accepts deposits.\n1. It accepts withdrawals.\n1. The initial balance must be positive.\n1. Withdrawals cannot result in a negative balance.\n\n## Define the bank account type\n\nYou can start by creating the basics of a class that defines that behavior. It would look like this:\n\n```csharp\nusing System;\n\nnamespace classes\n{\n    public class BankAccount\n    {\n        public string Number { get; }\n        public string Owner { get; set; }\n        public decimal Balance { get; }\n\n        public void MakeDeposit(decimal amount, DateTime date, string note)\n        {\n        }\n\n        public void MakeWithdrawal(decimal amount, DateTime date, string note)\n        {\n        }\n    }\n}\n```\n\nBefore going on, let's take a look at what you've built.  The `namespace` declaration provides a way to logically organize your code. This tutorial is relatively small, so you'll put all the code in one namespace. \n\n`public class BankAccount` defines the class, or type, you are creating. Everything inside the `{` and `}` that follows the class declaration defines the behavior of the class. There are five ***members*** of the `BankAccount` class. The first three are ***properties***. Properties are data elements and can have code that enforces validation or other rules. The last two are ***methods***. Methods are blocks of code that perform a single function. Reading the names of each of the members should provide enough information for you or another developer to understand what the class does.\n\n## Open a new account\n\nThe first feature to implement is to open a bank account. When a customer opens an account, they must supply an initial balance, and information about the owner or owners of that account. \n\nCreating a new object of the `BankAccount` type means defining a ***constructor*** that assigns those values. A ***constructor*** is a member that has the same name as the class. It is used to initialize objects of that class type. Add the following constructor to the `BankAccount` type:\n\n```csharp\npublic BankAccount(string name, decimal initialBalance)\n{\n    this.Owner = name;\n    this.Balance = initialBalance;\n}\n```\n\nConstructors are called when you create an object using [`new`](../../language-reference/keywords/new.md). Replace the line `Console.WriteLine(\"Hello World!\");` in ***program.cs*** with the following line (replace `<name>` with your name):\n\n```csharp\nvar account = new BankAccount(\"<name>\", 1000);\nConsole.WriteLine($\"Account {account.Number} was created for {account.Owner} with {account.Balance} initial balance.\");\n```\n\nType `dotnet run` to see what happens.  \n\nDid you notice that the account number is blank? It's time to fix that. The account number should be assigned when the object is constructed. But it shouldn't be the responsibility of the caller to create it. The `BankAccount` class code should know how to assign new account numbers.  A simple way to do this is to start with a 10-digit number. Increment it when each new account is created. Finally, store the current account number when an object is constructed.\n\nAdd the following member declaration to the `BankAccount` class:\n\n```csharp\nprivate static int accountNumberSeed = 1234567890;\n```\n\nThis is a data member. It's `private`, which means it can only be accessed by code inside the `BankAccount` class. It's a way of separating the public responsibilities (like having an account number) from the private implementation (how account numbers are generated.) It is also `static`, which means it is shared by all of the `BankAccount` objects. The value of a non-static variable is unique to each instance of the `BankAccount` object. Add the following two lines to the constructor to assign the account number:\n\n```csharp\nthis.Number = accountNumberSeed.ToString();\naccountNumberSeed++;\n```\n\nType `dotnet run` to see the results.\n\n## Create deposits and withdrawals\n\nYour bank account class needs to accept deposits and withdrawals to work correctly. Let's implement deposits and withdrawals by creating a journal of every transaction for the account. That has a few advantages over simply updating the balance on each transaction. The history can be used to audit all transactions and manage daily balances. By computing the balance from the history of all transactions when needed, any errors in a single transaction that are fixed will be correctly reflected in the balance on the next computation.\n\nLet's start by creating a new type to represent a transaction. This is a simple type that doesn't have any responsibilities. It needs a few properties. Create a new file named ***Transaction.cs***. Add the following code to it:\n\n[!code-csharp[Transaction](../../../../samples/csharp/classes-quickstart/Transaction.cs \"Transaction declaration\")]\n\nNow, let's add a <xref:System.Collections.Generic.List%601> of `Transaction` objects to the `BankAccount` class. Add the following declaration:\n\n[!code-csharp[TransactionDecl](../../../../samples/csharp/classes-quickstart/BankAccount.cs#TransactionDeclaration \"Transaction declaration\")]\n\nThe <xref:System.Collections.Generic.List%601> class requires you to import a different namespace. Add the following at the beginning of **BankAccount.cs**:\n\n```csharp\nusing System.Collections.Generic;\n```\n\nNow, let's change how the `Balance` is reported.  It can be found by summing the values of all transactions. Modify the declaration of `Balance` in the `BankAccount` class to the following:\n\n[!code-csharp[BalanceComputation](../../../../samples/csharp/classes-quickstart/BankAccount.cs#BalanceComputation \"Computing the balance\")]\n\nThis example shows an important aspect of ***properties***. You're now computing the balance when another programmer asks for the value. Your computation enumerates all transactions, and provides the sum as the current balance.\n\nNext, implement the `MakeDeposit` and `MakeWithdrawal` methods. These methods will enforce the final two rules: that the initial balance must be positive, and that any withdrawal must not create a negative balance. \n\nThis introduces the concept of ***exceptions***. The standard way of indicating that a method cannot complete its work successfully is to throw an exception. The type of exception and the message associated with it describe the error. Here, the `MakeDeposit` method throws an exception if the amount of the deposit is negative. The `MakeWithdrawal` method throws an exception if the withdrawal amount is negative, or if applying the withdrawal results in a negative balance:\n\n[!code-csharp[DepositAndWithdrawal](../../../../samples/csharp/classes-quickstart/BankAccount.cs#DepositAndWithdrawal \"Make deposits and withdrawals\")]\n\nThe [`throw`](../../language-reference/keywords/throw.md) statement **throws** an exception. Execution of the current block ends, and control transfers to the first matching `catch` block found in the call stack. You'll add a `catch` block to test this code a little later on.\n\nThe constructor should get one change so that it adds an initial transaction, rather than updating the balance directly. Since you already wrote the `MakeDeposit` method, call it from your constructor. The finished constructor should look like this:\n\n[!code-csharp[Constructor](../../../../samples/csharp/classes-quickstart/BankAccount.cs#Constructor \"The final version of the constructor\")]\n\n<xref:System.DateTime.Now?displayProperty=nameWithType> is a property that returns the current date and time. Test this by adding a few deposits and withdrawals in your `Main` method:\n\n```csharp\naccount.MakeWithdrawal(500, DateTime.Now, \"Rent payment\");\nConsole.WriteLine(account.Balance);\naccount.MakeDeposit(100, DateTime.Now, \"Friend paid me back\");\nConsole.WriteLine(account.Balance);\n```\n\nNext, test that you are catching error conditions by trying to create an account with a negative balance:\n\n```csharp\n// Test that the initial balances must be positive.\ntry\n{\n    var invalidAccount = new BankAccount(\"invalid\", -55);\n}\ncatch (ArgumentOutOfRangeException e)\n{\n    Console.WriteLine(\"Exception caught creating account with negative balance\");\n    Console.WriteLine(e.ToString());\n}\n```\n\nYou use the [`try` and `catch` statements](../../language-reference/keywords/try-catch.md) to mark a block of code that may throw exceptions and to catch those errors that you expect. You can use the same technique to test the code that throws an exception for a negative balance:\n\n```csharp\n// Test for a negative balance:\ntry\n{\n    account.MakeWithdrawal(750, DateTime.Now, \"Attempt to overdraw\");\n}\ncatch (InvalidOperationException e)\n{\n    Console.WriteLine(\"Exception caught trying to overdraw\");\n    Console.WriteLine(e.ToString());\n}\n```\n\nSave the file and type `dotnet run` to try it.\n\n## Challenge - log all transactions\n\nTo finish this tutorial, you can write the `GetAccountHistory` method that creates a `string` for the transaction history. Add this method to the `BankAccount` type:\n\n[!code-csharp[History](../../../../samples/csharp/classes-quickstart/BankAccount.cs#History \"Display transaction history\")]\n\nThis uses the <xref:System.Text.StringBuilder> class to format a string that contains one line for each transaction. You've seen the string formatting code earlier in these tutorials. One new character is `\\t`. That inserts a tab to format the output.\n\nAdd this line to test it in **Program.cs**:\n\n```csharp\nConsole.WriteLine(account.GetAccountHistory());\n```\n\nType `dotnet run` to see the results.\n\n## Next Steps\n\nIf you got stuck, you can see the source for this tutorial [in our GitHub repo](https://github.com/dotnet/samples/tree/master/csharp/classes-quickstart/)\n\nCongratulations, you've finished all our introduction to C# tutorials. If you're eager to learn more, try more of our [tutorials](../index.md)\n","nodes":[{"pos":[4,175],"embed":true,"restype":"x-metadata","content":"title: Classes and objects  - Introduction to C# tutorial\ndescription: Create your first C# program and explore object oriented concepts\nms.date: 10/11/2017\nms.custom: mvc","nodes":[{"content":"Classes and objects  - Introduction to C# tutorial","nodes":[{"pos":[0,50],"content":"Classes and objects  - Introduction to C# tutorial","nodes":[{"content":"Classes and objects  - Introduction to C# tutorial","pos":[0,50]}]}],"path":["title"],"nosxs":false},{"content":"Create your first C# program and explore object oriented concepts","nodes":[{"pos":[0,65],"content":"Create your first C# program and explore object oriented concepts","nodes":[{"content":"Create your first C# program and explore object oriented concepts","pos":[0,65]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[182,242],"content":"Explore object oriented programming with classes and objects","linkify":"Explore object oriented programming with classes and objects","nodes":[{"content":"Explore object oriented programming with classes and objects","pos":[0,60]}]},{"content":"This tutorial expects that you have a machine you can use for development.","pos":[244,318]},{"content":"The .NET topic <bpt id=\"p1\">[</bpt>Get Started in 10 minutes<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.","pos":[319,485],"source":" The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux."},{"content":"A quick overview of the commands you'll use is in the <bpt id=\"p1\">[</bpt>Become familiar with the development tools<ept id=\"p1\">](local-environment.md)</ept> with links to more details.","pos":[486,634],"source":" A quick overview of the commands you'll use is in the [Become familiar with the development tools](local-environment.md) with links to more details."},{"pos":[639,662],"content":"Create your application","linkify":"Create your application","nodes":[{"content":"Create your application","pos":[0,23]}]},{"content":"Using a terminal window, create a directory named <bpt id=\"p1\">**</bpt>classes<ept id=\"p1\">**</ept>.","pos":[664,726],"source":"Using a terminal window, create a directory named **classes**."},{"content":"You'll build your application there.","pos":[727,763]},{"content":"Change to that directory and type <ph id=\"ph1\">`dotnet new console`</ph> in the console window.","pos":[764,841],"source":" Change to that directory and type `dotnet new console` in the console window."},{"content":"This command creates your application.","pos":[842,880]},{"content":"Open <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>.","pos":[881,901],"source":" Open **Program.cs**."},{"content":"It should look like this:","pos":[902,927]},{"content":"In this tutorial, you're going to create new types that represent a bank account.","pos":[1118,1199]},{"content":"Typically developers define each class in a different text file.","pos":[1200,1264]},{"content":"That makes it easier to manage as a program grows in size.","pos":[1265,1323]},{"content":"Create a new file named <bpt id=\"p1\">**</bpt>BankAccount.cs<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>classes<ept id=\"p2\">**</ept> directory.","pos":[1325,1397],"source":"  Create a new file named **BankAccount.cs** in the **classes** directory."},{"content":"This file will contain the definition of a <bpt id=\"p1\">***</bpt>bank account<ept id=\"p1\">***</ept>.","pos":[1400,1462],"source":"This file will contain the definition of a ***bank account***."},{"content":"Object Oriented programming organizes code by creating types in the form of <bpt id=\"p1\">***</bpt>classes<ept id=\"p1\">***</ept>.","pos":[1463,1553],"source":" Object Oriented programming organizes code by creating types in the form of ***classes***."},{"content":"These classes contain the code that represents a specific entity.","pos":[1554,1619]},{"content":"The <ph id=\"ph1\">`BankAccount`</ph> class represents a bank account.","pos":[1620,1670],"source":" The `BankAccount` class represents a bank account."},{"content":"The code implements specific operations through methods and properties.","pos":[1671,1742]},{"content":"In this tutorial, the bank account supports this behavior:","pos":[1743,1801]},{"content":"It has a 10-digit number that uniquely identifies the bank account.","pos":[1806,1873]},{"content":"It has a string that stores the name or names of the owners.","pos":[1877,1937]},{"content":"The balance can be retrieved.","pos":[1941,1970]},{"content":"It accepts deposits.","pos":[1974,1994]},{"content":"It accepts withdrawals.","pos":[1998,2021]},{"content":"The initial balance must be positive.","pos":[2025,2062]},{"content":"Withdrawals cannot result in a negative balance.","pos":[2066,2114]},{"pos":[2119,2147],"content":"Define the bank account type","linkify":"Define the bank account type","nodes":[{"content":"Define the bank account type","pos":[0,28]}]},{"content":"You can start by creating the basics of a class that defines that behavior.","pos":[2149,2224]},{"content":"It would look like this:","pos":[2225,2249]},{"content":"Before going on, let's take a look at what you've built.","pos":[2661,2717]},{"content":"The <ph id=\"ph1\">`namespace`</ph> declaration provides a way to logically organize your code.","pos":[2719,2794],"source":"  The `namespace` declaration provides a way to logically organize your code."},{"content":"This tutorial is relatively small, so you'll put all the code in one namespace.","pos":[2795,2874]},{"content":"<ph id=\"ph1\">`public class BankAccount`</ph> defines the class, or type, you are creating.","pos":[2877,2949],"source":"`public class BankAccount` defines the class, or type, you are creating."},{"content":"Everything inside the <ph id=\"ph1\">`{`</ph> and <ph id=\"ph2\">`}`</ph> that follows the class declaration defines the behavior of the class.","pos":[2950,3053],"source":" Everything inside the `{` and `}` that follows the class declaration defines the behavior of the class."},{"content":"There are five <bpt id=\"p1\">***</bpt>members<ept id=\"p1\">***</ept> of the <ph id=\"ph1\">`BankAccount`</ph> class.","pos":[3054,3110],"source":" There are five ***members*** of the `BankAccount` class."},{"content":"The first three are <bpt id=\"p1\">***</bpt>properties<ept id=\"p1\">***</ept>.","pos":[3111,3148],"source":" The first three are ***properties***."},{"content":"Properties are data elements and can have code that enforces validation or other rules.","pos":[3149,3236]},{"content":"The last two are <bpt id=\"p1\">***</bpt>methods<ept id=\"p1\">***</ept>.","pos":[3237,3268],"source":" The last two are ***methods***."},{"content":"Methods are blocks of code that perform a single function.","pos":[3269,3327]},{"content":"Reading the names of each of the members should provide enough information for you or another developer to understand what the class does.","pos":[3328,3466]},{"pos":[3471,3489],"content":"Open a new account","linkify":"Open a new account","nodes":[{"content":"Open a new account","pos":[0,18]}]},{"content":"The first feature to implement is to open a bank account.","pos":[3491,3548]},{"content":"When a customer opens an account, they must supply an initial balance, and information about the owner or owners of that account.","pos":[3549,3678]},{"content":"Creating a new object of the <ph id=\"ph1\">`BankAccount`</ph> type means defining a <bpt id=\"p1\">***</bpt>constructor<ept id=\"p1\">***</ept> that assigns those values.","pos":[3681,3790],"source":"Creating a new object of the `BankAccount` type means defining a ***constructor*** that assigns those values."},{"content":"A <bpt id=\"p1\">***</bpt>constructor<ept id=\"p1\">***</ept> is a member that has the same name as the class.","pos":[3791,3859],"source":" A ***constructor*** is a member that has the same name as the class."},{"content":"It is used to initialize objects of that class type.","pos":[3860,3912]},{"content":"Add the following constructor to the <ph id=\"ph1\">`BankAccount`</ph> type:","pos":[3913,3969],"source":" Add the following constructor to the `BankAccount` type:"},{"content":"Constructors are called when you create an object using <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`new`</ph><ept id=\"p1\">](../../language-reference/keywords/new.md)</ept>.","pos":[4104,4210],"source":"Constructors are called when you create an object using [`new`](../../language-reference/keywords/new.md)."},{"content":"Replace the line <ph id=\"ph1\">`Console.WriteLine(\"Hello World!\");`</ph> in <bpt id=\"p1\">***</bpt>program.cs<ept id=\"p1\">***</ept> with the following line (replace <ph id=\"ph2\">`&lt;name&gt;`</ph> with your name):","pos":[4211,4343],"source":" Replace the line `Console.WriteLine(\"Hello World!\");` in ***program.cs*** with the following line (replace `<name>` with your name):"},{"pos":[4527,4565],"content":"Type <ph id=\"ph1\">`dotnet run`</ph> to see what happens.","source":"Type `dotnet run` to see what happens."},{"content":"Did you notice that the account number is blank?","pos":[4569,4617]},{"content":"It's time to fix that.","pos":[4618,4640]},{"content":"The account number should be assigned when the object is constructed.","pos":[4641,4710]},{"content":"But it shouldn't be the responsibility of the caller to create it.","pos":[4711,4777]},{"content":"The <ph id=\"ph1\">`BankAccount`</ph> class code should know how to assign new account numbers.","pos":[4778,4853],"source":" The `BankAccount` class code should know how to assign new account numbers."},{"content":"A simple way to do this is to start with a 10-digit number.","pos":[4855,4914]},{"content":"Increment it when each new account is created.","pos":[4915,4961]},{"content":"Finally, store the current account number when an object is constructed.","pos":[4962,5034]},{"pos":[5036,5100],"content":"Add the following member declaration to the <ph id=\"ph1\">`BankAccount`</ph> class:","source":"Add the following member declaration to the `BankAccount` class:"},{"content":"This is a data member.","pos":[5168,5190]},{"content":"It's <ph id=\"ph1\">`private`</ph>, which means it can only be accessed by code inside the <ph id=\"ph2\">`BankAccount`</ph> class.","pos":[5191,5282],"source":" It's `private`, which means it can only be accessed by code inside the `BankAccount` class."},{"content":"It's a way of separating the public responsibilities (like having an account number) from the private implementation (how account numbers are generated.) It is also <ph id=\"ph1\">`static`</ph>, which means it is shared by all of the <ph id=\"ph2\">`BankAccount`</ph> objects.","pos":[5283,5519],"source":" It's a way of separating the public responsibilities (like having an account number) from the private implementation (how account numbers are generated.) It is also `static`, which means it is shared by all of the `BankAccount` objects."},{"content":"The value of a non-static variable is unique to each instance of the <ph id=\"ph1\">`BankAccount`</ph> object.","pos":[5520,5610],"source":" The value of a non-static variable is unique to each instance of the `BankAccount` object."},{"content":"Add the following two lines to the constructor to assign the account number:","pos":[5611,5687]},{"pos":[5769,5806],"content":"Type <ph id=\"ph1\">`dotnet run`</ph> to see the results.","source":"Type `dotnet run` to see the results."},{"pos":[5811,5842],"content":"Create deposits and withdrawals","linkify":"Create deposits and withdrawals","nodes":[{"content":"Create deposits and withdrawals","pos":[0,31]}]},{"content":"Your bank account class needs to accept deposits and withdrawals to work correctly.","pos":[5844,5927]},{"content":"Let's implement deposits and withdrawals by creating a journal of every transaction for the account.","pos":[5928,6028]},{"content":"That has a few advantages over simply updating the balance on each transaction.","pos":[6029,6108]},{"content":"The history can be used to audit all transactions and manage daily balances.","pos":[6109,6185]},{"content":"By computing the balance from the history of all transactions when needed, any errors in a single transaction that are fixed will be correctly reflected in the balance on the next computation.","pos":[6186,6378]},{"content":"Let's start by creating a new type to represent a transaction.","pos":[6380,6442]},{"content":"This is a simple type that doesn't have any responsibilities.","pos":[6443,6504]},{"content":"It needs a few properties.","pos":[6505,6531]},{"content":"Create a new file named <bpt id=\"p1\">***</bpt>Transaction.cs<ept id=\"p1\">***</ept>.","pos":[6532,6577],"source":" Create a new file named ***Transaction.cs***."},{"content":"Add the following code to it:","pos":[6578,6607]},{"content":"Now, let's add a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of <ph id=\"ph2\">`Transaction`</ph> objects to the <ph id=\"ph3\">`BankAccount`</ph> class.","pos":[6726,6838],"source":"Now, let's add a <xref:System.Collections.Generic.List%601> of `Transaction` objects to the `BankAccount` class."},{"content":"Add the following declaration:","pos":[6839,6869]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class requires you to import a different namespace.","pos":[7015,7113],"source":"The <xref:System.Collections.Generic.List%601> class requires you to import a different namespace."},{"content":"Add the following at the beginning of <bpt id=\"p1\">**</bpt>BankAccount.cs<ept id=\"p1\">**</ept>:","pos":[7114,7171],"source":" Add the following at the beginning of **BankAccount.cs**:"},{"content":"Now, let's change how the <ph id=\"ph1\">`Balance`</ph> is reported.","pos":[7222,7270],"source":"Now, let's change how the `Balance` is reported."},{"content":"It can be found by summing the values of all transactions.","pos":[7272,7330]},{"content":"Modify the declaration of <ph id=\"ph1\">`Balance`</ph> in the <ph id=\"ph2\">`BankAccount`</ph> class to the following:","pos":[7331,7411],"source":" Modify the declaration of `Balance` in the `BankAccount` class to the following:"},{"content":"This example shows an important aspect of <bpt id=\"p1\">***</bpt>properties<ept id=\"p1\">***</ept>.","pos":[7554,7613],"source":"This example shows an important aspect of ***properties***."},{"content":"You're now computing the balance when another programmer asks for the value.","pos":[7614,7690]},{"content":"Your computation enumerates all transactions, and provides the sum as the current balance.","pos":[7691,7781]},{"content":"Next, implement the <ph id=\"ph1\">`MakeDeposit`</ph> and <ph id=\"ph2\">`MakeWithdrawal`</ph> methods.","pos":[7783,7846],"source":"Next, implement the `MakeDeposit` and `MakeWithdrawal` methods."},{"content":"These methods will enforce the final two rules: that the initial balance must be positive, and that any withdrawal must not create a negative balance.","pos":[7847,7997]},{"content":"This introduces the concept of <bpt id=\"p1\">***</bpt>exceptions<ept id=\"p1\">***</ept>.","pos":[8000,8048],"source":"This introduces the concept of ***exceptions***."},{"content":"The standard way of indicating that a method cannot complete its work successfully is to throw an exception.","pos":[8049,8157]},{"content":"The type of exception and the message associated with it describe the error.","pos":[8158,8234]},{"content":"Here, the <ph id=\"ph1\">`MakeDeposit`</ph> method throws an exception if the amount of the deposit is negative.","pos":[8235,8327],"source":" Here, the `MakeDeposit` method throws an exception if the amount of the deposit is negative."},{"content":"The <ph id=\"ph1\">`MakeWithdrawal`</ph> method throws an exception if the withdrawal amount is negative, or if applying the withdrawal results in a negative balance:","pos":[8328,8474],"source":" The `MakeWithdrawal` method throws an exception if the withdrawal amount is negative, or if applying the withdrawal results in a negative balance:"},{"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`throw`</ph><ept id=\"p1\">](../../language-reference/keywords/throw.md)</ept> statement <bpt id=\"p2\">**</bpt>throws<ept id=\"p2\">**</ept> an exception.","pos":[8629,8721],"source":"The [`throw`](../../language-reference/keywords/throw.md) statement **throws** an exception."},{"content":"Execution of the current block ends, and control transfers to the first matching <ph id=\"ph1\">`catch`</ph> block found in the call stack.","pos":[8722,8841],"source":" Execution of the current block ends, and control transfers to the first matching `catch` block found in the call stack."},{"content":"You'll add a <ph id=\"ph1\">`catch`</ph> block to test this code a little later on.","pos":[8842,8905],"source":" You'll add a `catch` block to test this code a little later on."},{"content":"The constructor should get one change so that it adds an initial transaction, rather than updating the balance directly.","pos":[8907,9027]},{"content":"Since you already wrote the <ph id=\"ph1\">`MakeDeposit`</ph> method, call it from your constructor.","pos":[9028,9108],"source":" Since you already wrote the `MakeDeposit` method, call it from your constructor."},{"content":"The finished constructor should look like this:","pos":[9109,9156]},{"content":"<ph id=\"ph1\">&lt;xref:System.DateTime.Now?displayProperty=nameWithType&gt;</ph> is a property that returns the current date and time.","pos":[9300,9409],"source":"<xref:System.DateTime.Now?displayProperty=nameWithType> is a property that returns the current date and time."},{"content":"Test this by adding a few deposits and withdrawals in your <ph id=\"ph1\">`Main`</ph> method:","pos":[9410,9483],"source":" Test this by adding a few deposits and withdrawals in your `Main` method:"},{"content":"Next, test that you are catching error conditions by trying to create an account with a negative balance:","pos":[9694,9799]},{"content":"You use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`try`</ph> and <ph id=\"ph2\">`catch`</ph> statements<ept id=\"p1\">](../../language-reference/keywords/try-catch.md)</ept> to mark a block of code that may throw exceptions and to catch those errors that you expect.","pos":[10095,10278],"source":"You use the [`try` and `catch` statements](../../language-reference/keywords/try-catch.md) to mark a block of code that may throw exceptions and to catch those errors that you expect."},{"content":"You can use the same technique to test the code that throws an exception for a negative balance:","pos":[10279,10375]},{"pos":[10641,10687],"content":"Save the file and type <ph id=\"ph1\">`dotnet run`</ph> to try it.","source":"Save the file and type `dotnet run` to try it."},{"pos":[10692,10724],"content":"Challenge - log all transactions","linkify":"Challenge - log all transactions","nodes":[{"content":"Challenge - log all transactions","pos":[0,32]}]},{"content":"To finish this tutorial, you can write the <ph id=\"ph1\">`GetAccountHistory`</ph> method that creates a <ph id=\"ph2\">`string`</ph> for the transaction history.","pos":[10726,10848],"source":"To finish this tutorial, you can write the `GetAccountHistory` method that creates a `string` for the transaction history."},{"content":"Add this method to the <ph id=\"ph1\">`BankAccount`</ph> type:","pos":[10849,10891],"source":" Add this method to the `BankAccount` type:"},{"content":"This uses the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class to format a string that contains one line for each transaction.","pos":[11018,11134],"source":"This uses the <xref:System.Text.StringBuilder> class to format a string that contains one line for each transaction."},{"content":"You've seen the string formatting code earlier in these tutorials.","pos":[11135,11201]},{"content":"One new character is <ph id=\"ph1\">`\\t`</ph>.","pos":[11202,11228],"source":" One new character is `\\t`."},{"content":"That inserts a tab to format the output.","pos":[11229,11269]},{"pos":[11271,11314],"content":"Add this line to test it in <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>:","source":"Add this line to test it in **Program.cs**:"},{"pos":[11379,11416],"content":"Type <ph id=\"ph1\">`dotnet run`</ph> to see the results.","source":"Type `dotnet run` to see the results."},{"pos":[11421,11431],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"pos":[11433,11586],"content":"If you got stuck, you can see the source for this tutorial <bpt id=\"p1\">[</bpt>in our GitHub repo<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/csharp/classes-quickstart/)</ept>","source":"If you got stuck, you can see the source for this tutorial [in our GitHub repo](https://github.com/dotnet/samples/tree/master/csharp/classes-quickstart/)"},{"content":"Congratulations, you've finished all our introduction to C# tutorials.","pos":[11588,11658]},{"content":"If you're eager to learn more, try more of our <bpt id=\"p1\">[</bpt>tutorials<ept id=\"p1\">](../index.md)</ept>","pos":[11659,11730],"source":" If you're eager to learn more, try more of our [tutorials](../index.md)"}]}