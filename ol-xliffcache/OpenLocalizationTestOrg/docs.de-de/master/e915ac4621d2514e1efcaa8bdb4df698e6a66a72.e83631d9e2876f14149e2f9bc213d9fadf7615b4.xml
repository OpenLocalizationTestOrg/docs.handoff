{"content":"---\ntitle: \"readonly (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"readonly_CSharpKeyword\"\n  - \"readonly\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"readonly keyword [C#]\"\nms.assetid: 2f8081f6-0de2-4903-898d-99696c48d2f4\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# readonly (C# Reference)\nThe `readonly` keyword is a modifier that you can use on fields. When a field declaration includes a `readonly` modifier, assignments to the fields introduced by the declaration can only occur as part of the declaration or in a constructor in the same class.  \n  \n## Example  \n In this example, the value of the field `year` cannot be changed in the method `ChangeYear`, even though it is assigned a value in the class constructor:  \n  \n [!code-cs[csrefKeywordsModifiers#14](../../../csharp/language-reference/keywords/codesnippet/CSharp/readonly_1.cs)]  \n  \n You can assign a value to a `readonly` field only in the following contexts:  \n  \n-   When the variable is initialized in the declaration, for example:  \n  \n    ```  \n    public readonly int y = 5;  \n    ```  \n  \n-   For an instance field, in the instance constructors of the class that contains the field declaration, or for a static field, in the static constructor of the class that contains the field declaration. These are also the only contexts in which it is valid to pass a `readonly` field as an [out](../../../csharp/language-reference/keywords/out.md) or [ref](../../../csharp/language-reference/keywords/ref.md) parameter.  \n  \n> [!NOTE]\n>  The `readonly` keyword is different from the [const](../../../csharp/language-reference/keywords/const.md) keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be initialized either at the declaration or in a constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, while a `const` field is a compile-time constant, the `readonly` field can be used for runtime constants as in the following example:  \n  \n```  \npublic static readonly uint timeStamp = (uint)DateTime.Now.Ticks;  \n```  \n  \n## Example  \n [!code-cs[csrefKeywordsModifiers#15](../../../csharp/language-reference/keywords/codesnippet/CSharp/readonly_2.cs)]  \n  \n In the preceding example, if you use a statement like this:  \n  \n `p2.y = 66;        // Error`  \n  \n you will get the compiler error message:  \n  \n `The left-hand side of an assignment must be an l-value`  \n  \n which is the same error you get when you attempt to assign a value to a constant.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Modifiers](../../../csharp/language-reference/keywords/modifiers.md)   \n [const](../../../csharp/language-reference/keywords/const.md)   \n [Fields](../../../csharp/programming-guide/classes-and-structs/fields.md)","nodes":[{"pos":[4,576],"embed":true,"restype":"x-metadata","content":"title: \"readonly (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"readonly_CSharpKeyword\"\n  - \"readonly\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"readonly keyword [C#]\"\nms.assetid: 2f8081f6-0de2-4903-898d-99696c48d2f4\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"readonly (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,40],"content":"readonly (C# Reference) | Microsoft Docs","nodes":[{"content":"readonly (C# Reference) | Microsoft Docs","pos":[0,40]}]}],"path":["title"]}],"yml":true},{"pos":[583,606],"content":"readonly (C# Reference)","linkify":"readonly (C# Reference)","nodes":[{"content":"readonly (C# Reference)","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">`readonly`</ph> keyword is a modifier that you can use on fields.","pos":[607,671],"source":"The `readonly` keyword is a modifier that you can use on fields."},{"content":"When a field declaration includes a <ph id=\"ph1\">`readonly`</ph> modifier, assignments to the fields introduced by the declaration can only occur as part of the declaration or in a constructor in the same class.","pos":[672,865],"source":" When a field declaration includes a `readonly` modifier, assignments to the fields introduced by the declaration can only occur as part of the declaration or in a constructor in the same class."},{"pos":[874,881],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[885,1038],"content":"In this example, the value of the field <ph id=\"ph1\">`year`</ph> cannot be changed in the method <ph id=\"ph2\">`ChangeYear`</ph>, even though it is assigned a value in the class constructor:","source":"In this example, the value of the field `year` cannot be changed in the method `ChangeYear`, even though it is assigned a value in the class constructor:"},{"pos":[1167,1243],"content":"You can assign a value to a <ph id=\"ph1\">`readonly`</ph> field only in the following contexts:","source":"You can assign a value to a `readonly` field only in the following contexts:"},{"content":"When the variable is initialized in the declaration, for example:","pos":[1253,1318]},{"content":"For an instance field, in the instance constructors of the class that contains the field declaration, or for a static field, in the static constructor of the class that contains the field declaration.","pos":[1384,1584]},{"content":"These are also the only contexts in which it is valid to pass a <ph id=\"ph1\">`readonly`</ph> field as an <bpt id=\"p1\">[</bpt>out<ept id=\"p1\">](../../../csharp/language-reference/keywords/out.md)</ept> or <bpt id=\"p2\">[</bpt>ref<ept id=\"p2\">](../../../csharp/language-reference/keywords/ref.md)</ept> parameter.","pos":[1585,1801],"source":" These are also the only contexts in which it is valid to pass a `readonly` field as an [out](../../../csharp/language-reference/keywords/out.md) or [ref](../../../csharp/language-reference/keywords/ref.md) parameter."},{"pos":[1809,2323],"content":"[!NOTE]\n The `readonly` keyword is different from the [const](../../../csharp/language-reference/keywords/const.md) keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be initialized either at the declaration or in a constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, while a `const` field is a compile-time constant, the `readonly` field can be used for runtime constants as in the following example:","leadings":["","> "],"nodes":[{"content":"The `readonly` keyword is different from the [const](../../../csharp/language-reference/keywords/const.md) keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be initialized either at the declaration or in a constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, while a `const` field is a compile-time constant, the `readonly` field can be used for runtime constants as in the following example:","pos":[9,512],"nodes":[{"content":"The <ph id=\"ph1\">`readonly`</ph> keyword is different from the <bpt id=\"p1\">[</bpt>const<ept id=\"p1\">](../../../csharp/language-reference/keywords/const.md)</ept> keyword.","pos":[0,115],"source":"The `readonly` keyword is different from the [const](../../../csharp/language-reference/keywords/const.md) keyword."},{"content":"A <ph id=\"ph1\">`const`</ph> field can only be initialized at the declaration of the field.","pos":[116,188],"source":" A `const` field can only be initialized at the declaration of the field."},{"content":"A <ph id=\"ph1\">`readonly`</ph> field can be initialized either at the declaration or in a constructor.","pos":[189,273],"source":" A `readonly` field can be initialized either at the declaration or in a constructor."},{"content":"Therefore, <ph id=\"ph1\">`readonly`</ph> fields can have different values depending on the constructor used.","pos":[274,363],"source":" Therefore, `readonly` fields can have different values depending on the constructor used."},{"content":"Also, while a <ph id=\"ph1\">`const`</ph> field is a compile-time constant, the <ph id=\"ph2\">`readonly`</ph> field can be used for runtime constants as in the following example:","pos":[364,503],"source":" Also, while a `const` field is a compile-time constant, the `readonly` field can be used for runtime constants as in the following example:"}]}]},{"pos":[2415,2422],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the preceding example, if you use a statement like this:","pos":[2548,2607]},{"content":"you will get the compiler error message:","pos":[2649,2689]},{"content":"which is the same error you get when you attempt to assign a value to a constant.","pos":[2759,2840]},{"pos":[2849,2874],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2988,2996],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3000,3060],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3064,3131],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3135,3203],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/modifiers.md)</ept><ph id=\"ph1\"> </ph>","pos":[3207,3277],"source":"[Modifiers](../../../csharp/language-reference/keywords/modifiers.md) "},{"content":"<bpt id=\"p1\">[</bpt>const<ept id=\"p1\">](../../../csharp/language-reference/keywords/const.md)</ept><ph id=\"ph1\"> </ph>","pos":[3281,3343],"source":"[const](../../../csharp/language-reference/keywords/const.md) "},{"content":"<bpt id=\"p1\">[</bpt>Fields<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/fields.md)</ept>","pos":[3347,3420],"source":"[Fields](../../../csharp/programming-guide/classes-and-structs/fields.md)"}]}