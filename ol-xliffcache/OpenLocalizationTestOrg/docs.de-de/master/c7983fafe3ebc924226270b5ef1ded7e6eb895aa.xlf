<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7983fafe3ebc924226270b5ef1ded7e6eb895aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\common-schema-collections.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c1f3330b32353fabbc7ccd84dc8dded393724f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">736a43123be8eec683453a9355f8aa4ee48f9028</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Common Schema Collections | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Common Schema Collections</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The common schema collections are the schema collections that are implemented by each of the .NET Framework managed providers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can query a .NET Framework managed provider to determine the list of supported schema collections by calling the <bpt id="p1">**</bpt>GetSchema<ept id="p1">**</ept> method with no arguments, or with the schema collection name "MetaDataCollections".</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This will return a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with a list of the supported schema collections, the number of restrictions that they each support, and the number of identifier parts that they use.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These collections describe all of the required columns.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Providers are free to add additional columns if they wish.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`SqlClient`</ph> and <ph id="ph2">`OracleClient`</ph> add ParameterName to the restrictions collection.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a provider is unable to determine the value of a required column, it will return null.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about using the <bpt id="p1">**</bpt>GetSchema<ept id="p1">**</ept> methods, see <bpt id="p2">[</bpt>GetSchema and Schema Collections<ept id="p2">](../../../../docs/framework/data/adonet/getschema-and-schema-collections.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>MetaDataCollections</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This schema collection exposes information about all of the schema collections supported by the .NET Framework managed provider that is currently used to connect to the database.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ColumnName</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>DataType</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CollectionName</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The name of the collection to pass to the <bpt id="p1">**</bpt>GetSchema<ept id="p1">**</ept> method to return the collection.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>NumberOfRestriction</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The number of restrictions that may be specified for the collection.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>NumberOfIdentifierParts</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The number of parts in the composite identifier/database object name.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, in SQL Server, this would be 3 for tables and 4 for columns.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In Oracle, it would be 2 for tables and 3 for columns.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>DataSourceInformation</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This schema collection exposes information about data source that the .NET Framework managed provider is currently connect to.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>ColumnName</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>DataType</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CompositeIdentifierSeparatorPattern</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The regular expression to match the composite separators in a composite identifier.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, "<ph id="ph1">\\</ph>." (for SQL Server) or "@&amp;#124;<ph id="ph2">\\</ph>."</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(for Oracle).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A composite identifier is typically what is used for a database object name, for example: pubs.dbo.authors or <ph id="ph1">pubs@dbo.authors</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For SQL Server, use the regular expression "<ph id="ph1">\\</ph>.".</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For OracleClient, use "@&amp;#124;<ph id="ph1">\\</ph>.".</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For ODBC use the Catalog_name_seperator.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For OLE DB use DBLITERAL_CATALOG_SEPARATOR or DBLITERAL_SCHEMA_SEPARATOR.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>DataSourceProductName</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The name of the product accessed by the provider, such as "Oracle" or "SQLServer".</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>DataSourceProductVersion</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Indicates the version of the product accessed by the provider, in the data sources native format and not in Microsoft format.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In some cases DataSourceProductVersion and DataSourceProductVersionNormalized will be the same value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the case of OLE DB and ODBC, these will always be the same as they are mapped to the same function call in the underlying native API.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>DataSourceProductVersionNormalized</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A normalized version for the data source, such that it can be compared with <ph id="ph1">`String.Compare()`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The format of this is consistent for all versions of the provider to prevent version 10 from sorting between version 1 and version 2.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, the Oracle provider uses a format of "nn.nn.nn.nn.nn" for its normalized version, which causes an Oracle 8i data source to return "08.01.07.04.01".</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>SQL Server uses the typical Microsoft "nn.nn.nnnn" format.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In some cases, DataSourceProductVersion and DataSourceProductVersionNormalized will be the same value.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the case of OLE DB and ODBC these will always be the same as they are mapped to the same function call in the underlying native API.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>GroupByBehavior</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies the relationship between the columns in a GROUP BY clause and the non-aggregated columns in the select list.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>IdentifierPattern</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A regular expression that matches an identifier and has a match value of the identifier.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example "[A-Za-z0-9_#$]".</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>IdentifierCase</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Indicates whether non-quoted identifiers are treated as case sensitive or not.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>OrderByColumnsInSelect</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Specifies whether columns in an ORDER BY clause must be in the select list.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A value of true indicates that they are required to be in the select list, a value of false indicates that they are not required to be in the select list.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>ParameterMarkerFormat</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A format string that represents how to format a parameter.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If named parameters are supported by the data source, the first placeholder in this string should be where the parameter name should be formatted.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, if the data source expects parameters to be named and prefixed with an ‘:’ this would be ":{0}".</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When formatting this with a parameter name of "p1" the resulting string is ":p1".</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the data source expects parameters to be prefixed with the ‘@’, but the names already include them, this would be ‘{0}’, and the result of formatting a parameter named "<ph id="ph1">@p1</ph>" would simply be "<ph id="ph2">@p1</ph>".</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For data sources that do not expect named parameters and expect the use of the ‘?’</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>character, the format string can be specified as simply ‘?’, which would ignore the parameter name.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For OLE DB we return ‘?’.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ParameterMarkerPattern</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A regular expression that matches a parameter marker.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It will have a match value of the parameter name, if any.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, if named parameters are supported with an ‘@’ lead-in character that will be included in the parameter name, this would be: "(@[A-Za-z0-9_$#]*)".</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>However, if named parameters are supported with a ‘:’ as the lead-in character and it is not part of the parameter name, this would be: ":([A-Za-z0-9_$#]<ph id="ph1">\*</ph>)".</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Of course, if the data source doesn’t support named parameters, this would simply be "?".</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>ParameterNameMaxLength</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The maximum length of a parameter name in characters.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Visual Studio expects that if parameter names are supported, the minimum value for the maximum length is 30 characters.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the data source does not support named parameters, this property returns zero.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>ParameterNamePattern</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A regular expression that matches the valid parameter names.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Different data sources have different rules regarding the characters that may be used for parameter names.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Visual Studio expects that if parameter names are supported, the characters "\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}\p{Nd}" are the minimum supported set of characters that are valid for parameter names.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>QuotedIdentifierPattern</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A regular expression that matches a quoted identifier and has a match value of the identifier itself without the quotes.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For example, if the data source used double-quotes to identify quoted identifiers, this would be: "(([^<ph id="ph1">\\</ph>"]&amp;#124;<ph id="ph2">\\</ph>"<ph id="ph3">\\</ph>")*)".</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>QuotedIdentifierCase</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Indicates whether quoted identifiers are treated as case sensitive or not.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>StatementSeparatorPattern</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A regular expression that matches the statement separator.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>StringLiteralPattern</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A regular expression that matches a string literal and has a match value of the literal itself.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For example, if the data source used single-quotes to identify strings, this would be: "('([^']&amp;#124;'')*')"'</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>SupportedJoinOperators</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Specifies what types of SQL join statements are supported by the data source.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>DataTypes</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This schema collection exposes information about the data types that are supported by the database that the .NET Framework managed provider is currently connected to.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>ColumnName</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>DataType</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>TypeName</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The provider-specific data type name.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>ProviderDbType</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The provider-specific type value that should be used when specifying a parameter’s type.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For example, SqlDbType.Money or OracleType.Blob.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>ColumnSize</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The length of a non-numeric column or parameter refers to either the maximum or the length defined for this type by the provider.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For character data, this is the maximum or defined length in units, defined by the data source.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Oracle has the concept of specifying a length and then specifying the actual storage size for some character data types.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This defines only the length in units for Oracle.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For date-time data types, this is the length of the string representation (assuming the maximum allowed precision of the fractional seconds component).</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If the data type is numeric, this is the upper bound on the maximum precision of the data type.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CreateFormat</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Format string that represents how to add this column to a data definition statement, such as CREATE TABLE.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Each element in the CreateParameter array should be represented by a "parameter marker" in the format string.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For example, the SQL data type DECIMAL needs a precision and a scale.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In this case, the format string would be "DECIMAL({0},{1})".</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CreateParameters</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The creation parameters that must be specified when creating a column of this data type.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Each creation parameter is listed in the string, separated by a comma in the order they are to be supplied.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For example, the SQL data type DECIMAL needs a precision and a scale.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>In this case, the creation parameters should contain the string "precision, scale".</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>In a text command to create a DECIMAL column with a precision of 10 and a scale of 2, the value of the CreateFormat column might be DECIMAL({0},{1})" and the complete type specification would be DECIMAL(10,2).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>DataType</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The name of the .NET Framework type of the data type.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>IsAutoincrementable</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>true—Values of this data type may be auto-incrementing.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>false—Values of this data type may not be auto-incrementing.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Note that this merely indicates whether a column of this data type may be auto-incrementing, not that all columns of this type are auto-incrementing.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>IsBestMatch</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>true—The data type is the best match between all data types in the data store and the .NET Framework data type indicated by the value in the DataType column.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>false—The data type is not the best match.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For each set of rows in which the value of the DataType column is the same, the IsBestMatch column is set to true in only one row.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>IsCaseSensitive</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>true—The data type is a character type and is case-sensitive.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>false—The data type is not a character type or is not case-sensitive.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>IsFixedLength</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>true—Columns of this data type created by the data definition language (DDL) will be of fixed length.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>false—Columns of this data type created by the DDL will be of variable length.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>DBNull.Value—It is not known whether the provider will map this field with a fixed-length or variable-length column.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>IsFixedPrecisionScale</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>true—The data type has a fixed precision and scale.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>false—The data type does not have a fixed precision and scale.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>IsLong</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>true—The data type contains very long data; the definition of very long data is provider-specific.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>false—The data type does not contain very long data.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>IsNullable</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>true—The data type is nullable.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>false—The data type is not nullable.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>DBNull.Value—It is not known whether the data type is nullable.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>IsSearchable</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>true—The data type can be used in a WHERE clause with any operator except the LIKE predicate.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>false—The data type cannot be used in a WHERE clause with any operator except the LIKE predicate.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>IsSearchableWithLike</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>true—The data type can be used with the LIKE predicate</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>false—The data type cannot be used with the LIKE predicate.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>IsUnsigned</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>true—The data type is unsigned.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>false—The data type is signed.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>DBNull.Value—Not applicable to data type.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>MaximumScale</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>If the type indicator is a numeric type, this is the maximum number of digits allowed to the right of the decimal point.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Otherwise, this is DBNull.Value.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>MinimumScale</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>If the type indicator is a numeric type, this is the minimum number of digits allowed to the right of the decimal point.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Otherwise, this is DBNull.Value.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>IsConcurrencyType</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>true – the data type is updated by the database every time the row is changed and the value of the column is different from all previous values</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>false – the data type is note updated by the database every time the row is changed</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>DBNull.Value – the database does not support this type of data type</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>IsLiteralsSupported</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>true – the data type can be expressed as a literal</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>false – the data type can not be expressed as a literal</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>LiteralPrefix</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The prefix applied to a given literal.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>LitteralSuffix</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The suffix applied to a given literal.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>NativeDataType</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>String</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>NativeDataType is an OLE DB specific column for exposing the OLE DB type of the data type .</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Restrictions</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This schema collection exposed information about the restrictions that are supported by the .NET Framework managed provider that is currently used to connect to the database.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>ColumnName</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>DataType</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>CollectionName</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The name of the collection that these restrictions apply to.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>RestrictionName</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The name of the restriction in the collection.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>RestrictionDefault</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>RestrictionNumber</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The actual location in the collections restrictions that this particular restriction falls in.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>ReservedWords</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>This schema collection exposes information about the words that are reserved by the database that the .NET Framework managed provider that is currently connected to.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>ColumnName</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>DataType</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>ReservedWords</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Provider specific reserved words.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving Database Schema Information<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>GetSchema and Schema Collections<ept id="p1">](../../../../docs/framework/data/adonet/getschema-and-schema-collections.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>