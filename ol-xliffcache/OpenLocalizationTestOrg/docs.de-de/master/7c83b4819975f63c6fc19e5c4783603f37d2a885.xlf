<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="fixed-size-buffers.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c83b4819975f63c6fc19e5c4783603f37d2a885</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\unsafe-code-pointers\fixed-size-buffers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eeaacea0cc094d23a7b154a74c8f578a72df2882</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfcb5f075713bb2a1fa0792948ae23a82cd70888</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Fixed Size Buffers - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Fixed Size Buffers (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In C#, you can use the <bpt id="p1">[</bpt>fixed<ept id="p1">](../../language-reference/keywords/fixed-statement.md)</ept> statement to create a buffer with a fixed size array in a data structure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Fixed size buffers are useful when you write methods that interop with data sources from other languages or platforms.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The fixed array can take any attributes or modifiers that are allowed for regular struct members.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The only restriction is that the array type must be <ph id="ph1">`bool`</ph>, <ph id="ph2">`byte`</ph>, <ph id="ph3">`char`</ph>, <ph id="ph4">`short`</ph>, <ph id="ph5">`int`</ph>, <ph id="ph6">`long`</ph>, <ph id="ph7">`sbyte`</ph>, <ph id="ph8">`ushort`</ph>, <ph id="ph9">`uint`</ph>, <ph id="ph10">`ulong`</ph>, <ph id="ph11">`float`</ph>, or <ph id="ph12">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In safe code, a C# struct that contains an array does not contain the array elements.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Instead, the struct contains a reference to the elements.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can embed an array of fixed size in a <bpt id="p1">[</bpt>struct<ept id="p1">](../../language-reference/keywords/struct.md)</ept> when it is used in an <bpt id="p2">[</bpt>unsafe<ept id="p2">](../../language-reference/keywords/unsafe.md)</ept> code block.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`struct`</ph> is 8 bytes in size.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pathName`</ph> array is a reference:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`struct`</ph> can contain an embedded array in unsafe code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`fixedBuffer`</ph> array has a fixed size.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You use a <ph id="ph1">`fixed`</ph> statement to establish a pointer to the first element.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You access the elements of the array through this pointer.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`fixed`</ph> statement pins the <ph id="ph2">`fixedBuffer`</ph> instance field to a specific location in memory.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The size of the 128 element <ph id="ph1">`char`</ph> array is 256 bytes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Fixed size <bpt id="p1">[</bpt>char<ept id="p1">](../../language-reference/keywords/char.md)</ept> buffers always take two bytes per character, regardless of the encoding.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is true even when char buffers are marshaled to API methods or structs with <ph id="ph1">`CharSet = CharSet.Auto`</ph> or <ph id="ph2">`CharSet = CharSet.Ansi`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The  preceding example demonstrates accessing <ph id="ph1">`fixed`</ph> fields without pinning, which is available starting with C# 7.3.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another common fixed-size array is the <bpt id="p1">[</bpt>bool<ept id="p1">](../../language-reference/keywords/bool.md)</ept> array.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The elements in a <ph id="ph1">`bool`</ph> array are always one byte in size.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`bool`</ph> arrays are not appropriate for creating bit arrays or buffers.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Except for memory created by using <bpt id="p1">[</bpt>stackalloc<ept id="p1">](../../language-reference/keywords/stackalloc.md)</ept>, the C# compiler and the common language runtime (CLR) do not perform any security buffer overrun checks.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As with all unsafe code, use caution.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Unsafe buffers differ from regular arrays in the following ways:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can only use unsafe buffers in an unsafe context.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Unsafe buffers are always vectors, or one-dimensional arrays.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The declaration of the array should include a count, such as <ph id="ph1">`char id[8]`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You cannot use <ph id="ph1">`char id[]`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Unsafe buffers can only be instance fields of structs in an unsafe context.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Unsafe Code and Pointers<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fixed Statement<ept id="p1">](../../language-reference/keywords/fixed-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interoperability<ept id="p1">](../interop/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>