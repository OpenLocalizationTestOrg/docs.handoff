{"content":"---\ntitle: \"Class Statement (Visual Basic)\"\nms.date: 05/12/2018\nf1_keywords: \n  - \"vb.Class\"\nhelpviewer_keywords: \n  - \"class modules\"\n  - \"Class statement [Visual Basic]\"\n  - \"classes [Visual Basic], fields\"\n  - \"fields [Visual Basic], of classes\"\n  - \"class types [Visual Basic], class statements\"\n  - \"classes [Visual Basic], creating\"\n  - \"classes [Visual Basic], data members\"\n  - \"data members [Visual Basic], of classes\"\nms.assetid: f2664f38-eb5a-4d4b-a374-1d041521fb6c\n---\n# Class Statement (Visual Basic)\nDeclares the name of a class and introduces the definition of the variables, properties, events, and procedures that the class comprises.  \n  \n## Syntax  \n  \n```  \n[ <attributelist> ] [ accessmodifier ] [ Shadows ] [ MustInherit | NotInheritable ] [ Partial ] _  \nClass name [ ( Of typelist ) ]  \n    [ Inherits classname ]  \n    [ Implements interfacenames ]  \n    [ statements ]  \nEnd Class  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`attributelist`|Optional. See [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md).|  \n|`accessmodifier`|Optional. Can be one of the following:<br /><br /> -   [Public](../../../visual-basic/language-reference/modifiers/public.md)<br />-   [Protected](../../../visual-basic/language-reference/modifiers/protected.md)<br />-   [Friend](../../../visual-basic/language-reference/modifiers/friend.md)<br />-   [Private](../../../visual-basic/language-reference/modifiers/private.md)<br />-   [Protected Friend](../../language-reference/modifiers/protected-friend.md)<br />- [Private Protected](../../language-reference/modifiers/private-protected.md)<br/><br/> See [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).|  \n|`Shadows`|Optional. See [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md).|  \n|`MustInherit`|Optional. See [MustInherit](../../../visual-basic/language-reference/modifiers/mustinherit.md).|  \n|`NotInheritable`|Optional. See [NotInheritable](../../../visual-basic/language-reference/modifiers/notinheritable.md).|  \n|`Partial`|Optional. Indicates a partial definition of the class. See [Partial](../../../visual-basic/language-reference/modifiers/partial.md).|  \n|`name`|Required. Name of this class. See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md).|  \n|`Of`|Optional. Specifies that this is a generic class.|  \n|`typelist`|Required if you use the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword. List of type parameters for this class. See [Type List](../../../visual-basic/language-reference/statements/type-list.md).|  \n|`Inherits`|Optional. Indicates that this class inherits the members of another class. See [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md).|  \n|`classname`|Required if you use the `Inherits` statement. The name of the class from which this class derives.|  \n|`Implements`|Optional. Indicates that this class implements the members of one or more interfaces. See [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md).|  \n|`interfacenames`|Required if you use the `Implements` statement. The names of the interfaces this class implements.|  \n|`statements`|Optional. Statements which define the members of this class.|  \n|`End Class`|Required. Terminates the `Class` definition.|  \n  \n## Remarks  \n A `Class` statement defines a new data type. A *class* is a fundamental building block of object-oriented programming (OOP). For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md).  \n  \n You can use `Class` only at namespace or module level. This means the *declaration context* for a class must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure or block. For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md).  \n  \n Each instance of a class has a lifetime independent of all other instances. This lifetime begins when it is created by a [New Operator](../../../visual-basic/language-reference/operators/new-operator.md) clause or by a function such as <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A>. It ends when all variables pointing to the instance have been set to [Nothing](../../../visual-basic/language-reference/nothing.md) or to instances of other classes.  \n  \n Classes default to [Friend](../../../visual-basic/language-reference/modifiers/friend.md) access. You can adjust their access levels with the access modifiers. For more information, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n## Rules  \n  \n-   **Nesting.** You can define one class within another. The outer class is called the *containing class*, and the inner class is called a *nested class*.  \n  \n-   **Inheritance.** If the class uses the [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md), you can specify only one base class or interface. A class cannot inherit from more than one element.  \n  \n     A class cannot inherit from another class with a more restrictive access level. For example, a `Public` class cannot inherit from a `Friend` class.  \n  \n     A class cannot inherit from a class nested within it.  \n  \n-   **Implementation.** If the class uses the [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md), you must implement every member defined by every interface you specify in `interfacenames`. An exception to this is reimplementation of a base class member. For more information, see \"Reimplementation\" in [Implements](../../../visual-basic/language-reference/statements/implements-clause.md).  \n  \n-   **Default Property.** A class can specify at most one property as its *default property*. For more information, see [Default](../../../visual-basic/language-reference/modifiers/default.md).  \n  \n## Behavior  \n  \n-   **Access Level.** Within a class, you can declare each member with its own access level. Class members default to [Public](../../../visual-basic/language-reference/modifiers/public.md) access, except variables and constants, which default to [Private](../../../visual-basic/language-reference/modifiers/private.md) access. When a class has more restricted access than one of its members, the class access level takes precedence.  \n  \n-   **Scope.** A class is in scope throughout its containing namespace, class, structure, or module.  \n  \n     The scope of every class member is the entire class.  \n  \n     **Lifetime.** Visual Basic does not support static classes. The functional equivalent of a static class is provided by a module. For more information, see [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md).  \n  \n     Class members have lifetimes depending on how and where they are declared. For more information, see [Lifetime in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md).  \n  \n-   **Qualification.** Code outside a class must qualify a member's name with the name of that class.  \n  \n     If code inside a nested class makes an unqualified reference to a programming element, Visual Basic searches for the element first in the nested class, then in its containing class, and so on out to the outermost containing element.  \n  \n## Classes and Modules  \n These elements have many similarities, but there are some important differences as well.  \n  \n-   **Terminology.** Previous versions of Visual Basic recognize two types of modules: *class modules* (.cls files) and *standard modules* (.bas files). The current version calls these *classes* and *modules*, respectively.  \n  \n-   **Shared Members.** You can control whether a member of a class is a shared or instance member.  \n  \n-   **Object Orientation.** Classes are object-oriented, but modules are not. You can create one or more instances of a class. For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md).  \n  \n## Example  \n The following example uses a `Class` statement to define a class and several members.  \n  \n [!code-vb[VbVbalrStatements#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#62)]  \n  \n## See also\n\n- [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)\n- [Structures and Classes](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)\n- [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)\n- [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)\n- [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)\n- [Object Lifetime: How Objects Are Created and Destroyed](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)\n- [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)\n","nodes":[{"pos":[4,476],"embed":true,"restype":"x-metadata","content":"title: \"Class Statement (Visual Basic)\"\nms.date: 05/12/2018\nf1_keywords: \n  - \"vb.Class\"\nhelpviewer_keywords: \n  - \"class modules\"\n  - \"Class statement [Visual Basic]\"\n  - \"classes [Visual Basic], fields\"\n  - \"fields [Visual Basic], of classes\"\n  - \"class types [Visual Basic], class statements\"\n  - \"classes [Visual Basic], creating\"\n  - \"classes [Visual Basic], data members\"\n  - \"data members [Visual Basic], of classes\"\nms.assetid: f2664f38-eb5a-4d4b-a374-1d041521fb6c","nodes":[{"content":"Class Statement (Visual Basic)","nodes":[{"pos":[0,30],"content":"Class Statement (Visual Basic)","nodes":[{"content":"Class Statement (Visual Basic)","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[483,513],"content":"Class Statement (Visual Basic)","linkify":"Class Statement (Visual Basic)","nodes":[{"content":"Class Statement (Visual Basic)","pos":[0,30]}]},{"content":"Declares the name of a class and introduces the definition of the variables, properties, events, and procedures that the class comprises.","pos":[514,651]},{"pos":[660,666],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[921,926],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[933,937]},{"content":"Definition","pos":[938,948]},{"content":"Optional.","pos":[981,990]},{"content":"See <bpt id=\"p1\">[</bpt>Attribute List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>.","pos":[991,1083],"source":" See [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md)."},{"content":"Optional.","pos":[1105,1114]},{"content":"Can be one of the following:","pos":[1115,1143]},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept>","pos":[1156,1230],"source":"-   [Public](../../../visual-basic/language-reference/modifiers/public.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Protected<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/protected.md)</ept>","pos":[1236,1316],"source":"-   [Protected](../../../visual-basic/language-reference/modifiers/protected.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>","pos":[1322,1396],"source":"-   [Friend](../../../visual-basic/language-reference/modifiers/friend.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/private.md)</ept>","pos":[1402,1478],"source":"-   [Private](../../../visual-basic/language-reference/modifiers/private.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Protected Friend<ept id=\"p1\">](../../language-reference/modifiers/protected-friend.md)</ept>","pos":[1484,1562],"source":"-   [Protected Friend](../../language-reference/modifiers/protected-friend.md)"},{"content":"<ph id=\"ph1\">- </ph><bpt id=\"p1\">[</bpt>Private Protected<ept id=\"p1\">](../../language-reference/modifiers/private-protected.md)</ept>","pos":[1568,1646],"source":"- [Private Protected](../../language-reference/modifiers/private-protected.md)"},{"content":"See <bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[1657,1787],"source":"See [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"content":"Optional.","pos":[1802,1811]},{"content":"See <bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>.","pos":[1812,1889],"source":" See [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)."},{"content":"Optional.","pos":[1908,1917]},{"content":"See <bpt id=\"p1\">[</bpt>MustInherit<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/mustinherit.md)</ept>.","pos":[1918,2003],"source":" See [MustInherit](../../../visual-basic/language-reference/modifiers/mustinherit.md)."},{"content":"Optional.","pos":[2025,2034]},{"content":"See <bpt id=\"p1\">[</bpt>NotInheritable<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/notinheritable.md)</ept>.","pos":[2035,2126],"source":" See [NotInheritable](../../../visual-basic/language-reference/modifiers/notinheritable.md)."},{"content":"Optional.","pos":[2141,2150]},{"content":"Indicates a partial definition of the class.","pos":[2151,2195]},{"content":"See <bpt id=\"p1\">[</bpt>Partial<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/partial.md)</ept>.","pos":[2196,2273],"source":" See [Partial](../../../visual-basic/language-reference/modifiers/partial.md)."},{"content":"Required.","pos":[2285,2294]},{"content":"Name of this class.","pos":[2295,2314]},{"content":"See <bpt id=\"p1\">[</bpt>Declared Element Names<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.","pos":[2315,2447],"source":" See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)."},{"content":"Optional.","pos":[2457,2466]},{"content":"Specifies that this is a generic class.","pos":[2467,2506]},{"content":"Required if you use the <bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../../visual-basic/language-reference/statements/of-clause.md)</ept> keyword.","pos":[2522,2625],"source":"Required if you use the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword."},{"content":"List of type parameters for this class.","pos":[2626,2665]},{"content":"See <bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/type-list.md)</ept>.","pos":[2666,2748],"source":" See [Type List](../../../visual-basic/language-reference/statements/type-list.md)."},{"content":"Optional.","pos":[2764,2773]},{"content":"Indicates that this class inherits the members of another class.","pos":[2774,2838]},{"content":"See <bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept>.","pos":[2839,2939],"source":" See [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md)."},{"content":"Required if you use the <ph id=\"ph1\">`Inherits`</ph> statement.","pos":[2956,3001],"source":"Required if you use the `Inherits` statement."},{"content":"The name of the class from which this class derives.","pos":[3002,3054]},{"content":"Optional.","pos":[3072,3081]},{"content":"Indicates that this class implements the members of one or more interfaces.","pos":[3082,3157]},{"content":"See <bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept>.","pos":[3158,3262],"source":" See [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md)."},{"content":"Required if you use the <ph id=\"ph1\">`Implements`</ph> statement.","pos":[3284,3331],"source":"Required if you use the `Implements` statement."},{"content":"The names of the interfaces this class implements.","pos":[3332,3382]},{"content":"Optional.","pos":[3400,3409]},{"content":"Statements which define the members of this class.","pos":[3410,3460]},{"content":"Required.","pos":[3477,3486]},{"content":"Terminates the <ph id=\"ph1\">`Class`</ph> definition.","pos":[3487,3521],"source":" Terminates the `Class` definition."},{"pos":[3531,3538],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <ph id=\"ph1\">`Class`</ph> statement defines a new data type.","pos":[3542,3586],"source":"A `Class` statement defines a new data type."},{"content":"A <bpt id=\"p1\">*</bpt>class<ept id=\"p1\">*</ept> is a fundamental building block of object-oriented programming (OOP).","pos":[3587,3666],"source":" A *class* is a fundamental building block of object-oriented programming (OOP)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>.","pos":[3667,3803],"source":" For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)."},{"content":"You can use <ph id=\"ph1\">`Class`</ph> only at namespace or module level.","pos":[3810,3864],"source":"You can use `Class` only at namespace or module level."},{"content":"This means the <bpt id=\"p1\">*</bpt>declaration context<ept id=\"p1\">*</ept> for a class must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure or block.","pos":[3865,4023],"source":" This means the *declaration context* for a class must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure or block."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Declaration Contexts and Default Access Levels<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.","pos":[4024,4202],"source":" For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)."},{"content":"Each instance of a class has a lifetime independent of all other instances.","pos":[4209,4284]},{"content":"This lifetime begins when it is created by a <bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> clause or by a function such as <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Interaction.CreateObject%2A&gt;</ph>.","pos":[4285,4502],"source":" This lifetime begins when it is created by a [New Operator](../../../visual-basic/language-reference/operators/new-operator.md) clause or by a function such as <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A>."},{"content":"It ends when all variables pointing to the instance have been set to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept> or to instances of other classes.","pos":[4503,4668],"source":" It ends when all variables pointing to the instance have been set to [Nothing](../../../visual-basic/language-reference/nothing.md) or to instances of other classes."},{"content":"Classes default to <bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept> access.","pos":[4675,4772],"source":"Classes default to [Friend](../../../visual-basic/language-reference/modifiers/friend.md) access."},{"content":"You can adjust their access levels with the access modifiers.","pos":[4773,4834]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[4835,4987],"source":" For more information, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[4996,5001],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Nesting.<ept id=\"p1\">**</ept>","pos":[5011,5023],"source":"**Nesting.**"},{"content":"You can define one class within another.","pos":[5024,5064]},{"content":"The outer class is called the <bpt id=\"p1\">*</bpt>containing class<ept id=\"p1\">*</ept>, and the inner class is called a <bpt id=\"p2\">*</bpt>nested class<ept id=\"p2\">*</ept>.","pos":[5065,5162],"source":" The outer class is called the *containing class*, and the inner class is called a *nested class*."},{"content":"<bpt id=\"p1\">**</bpt>Inheritance.<ept id=\"p1\">**</ept>","pos":[5172,5188],"source":"**Inheritance.**"},{"content":"If the class uses the <bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept>, you can specify only one base class or interface.","pos":[5189,5357],"source":" If the class uses the [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md), you can specify only one base class or interface."},{"content":"A class cannot inherit from more than one element.","pos":[5358,5408]},{"content":"A class cannot inherit from another class with a more restrictive access level.","pos":[5419,5498]},{"content":"For example, a <ph id=\"ph1\">`Public`</ph> class cannot inherit from a <ph id=\"ph2\">`Friend`</ph> class.","pos":[5499,5566],"source":" For example, a `Public` class cannot inherit from a `Friend` class."},{"content":"A class cannot inherit from a class nested within it.","pos":[5577,5630]},{"content":"<bpt id=\"p1\">**</bpt>Implementation.<ept id=\"p1\">**</ept>","pos":[5640,5659],"source":"**Implementation.**"},{"content":"If the class uses the <bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept>, you must implement every member defined by every interface you specify in <ph id=\"ph1\">`interfacenames`</ph>.","pos":[5660,5874],"source":" If the class uses the [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md), you must implement every member defined by every interface you specify in `interfacenames`."},{"content":"An exception to this is reimplementation of a base class member.","pos":[5875,5939]},{"content":"For more information, see \"Reimplementation\" in <bpt id=\"p1\">[</bpt>Implements<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-clause.md)</ept>.","pos":[5940,6075],"source":" For more information, see \"Reimplementation\" in [Implements](../../../visual-basic/language-reference/statements/implements-clause.md)."},{"content":"<bpt id=\"p1\">**</bpt>Default Property.<ept id=\"p1\">**</ept>","pos":[6085,6106],"source":"**Default Property.**"},{"content":"A class can specify at most one property as its <bpt id=\"p1\">*</bpt>default property<ept id=\"p1\">*</ept>.","pos":[6107,6174],"source":" A class can specify at most one property as its *default property*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Default<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/default.md)</ept>.","pos":[6175,6274],"source":" For more information, see [Default](../../../visual-basic/language-reference/modifiers/default.md)."},{"pos":[6283,6291],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>Access Level.<ept id=\"p1\">**</ept>","pos":[6301,6318],"source":"**Access Level.**"},{"content":"Within a class, you can declare each member with its own access level.","pos":[6319,6389]},{"content":"Class members default to <bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept> access, except variables and constants, which default to <bpt id=\"p2\">[</bpt>Private<ept id=\"p2\">](../../../visual-basic/language-reference/modifiers/private.md)</ept> access.","pos":[6390,6623],"source":" Class members default to [Public](../../../visual-basic/language-reference/modifiers/public.md) access, except variables and constants, which default to [Private](../../../visual-basic/language-reference/modifiers/private.md) access."},{"content":"When a class has more restricted access than one of its members, the class access level takes precedence.","pos":[6624,6729]},{"content":"<bpt id=\"p1\">**</bpt>Scope.<ept id=\"p1\">**</ept>","pos":[6739,6749],"source":"**Scope.**"},{"content":"A class is in scope throughout its containing namespace, class, structure, or module.","pos":[6750,6835]},{"content":"The scope of every class member is the entire class.","pos":[6846,6898]},{"content":"<bpt id=\"p1\">**</bpt>Lifetime.<ept id=\"p1\">**</ept>","pos":[6909,6922],"source":"**Lifetime.**"},{"content":"Visual Basic does not support static classes.","pos":[6923,6968]},{"content":"The functional equivalent of a static class is provided by a module.","pos":[6969,7037]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Module Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/module-statement.md)</ept>.","pos":[7038,7156],"source":" For more information, see [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)."},{"content":"Class members have lifetimes depending on how and where they are declared.","pos":[7167,7241]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lifetime in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)</ept>.","pos":[7242,7384],"source":" For more information, see [Lifetime in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)."},{"content":"<bpt id=\"p1\">**</bpt>Qualification.<ept id=\"p1\">**</ept>","pos":[7394,7412],"source":"**Qualification.**"},{"content":"Code outside a class must qualify a member's name with the name of that class.","pos":[7413,7491]},{"content":"If code inside a nested class makes an unqualified reference to a programming element, Visual Basic searches for the element first in the nested class, then in its containing class, and so on out to the outermost containing element.","pos":[7502,7734]},{"pos":[7743,7762],"content":"Classes and Modules","linkify":"Classes and Modules","nodes":[{"content":"Classes and Modules","pos":[0,19]}]},{"content":"These elements have many similarities, but there are some important differences as well.","pos":[7766,7854]},{"content":"<bpt id=\"p1\">**</bpt>Terminology.<ept id=\"p1\">**</ept>","pos":[7864,7880],"source":"**Terminology.**"},{"content":"Previous versions of Visual Basic recognize two types of modules: <bpt id=\"p1\">*</bpt>class modules<ept id=\"p1\">*</ept> (.cls files) and <bpt id=\"p2\">*</bpt>standard modules<ept id=\"p2\">*</ept> (.bas files).","pos":[7881,8012],"source":" Previous versions of Visual Basic recognize two types of modules: *class modules* (.cls files) and *standard modules* (.bas files)."},{"content":"The current version calls these <bpt id=\"p1\">*</bpt>classes<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>modules<ept id=\"p2\">*</ept>, respectively.","pos":[8013,8083],"source":" The current version calls these *classes* and *modules*, respectively."},{"content":"<bpt id=\"p1\">**</bpt>Shared Members.<ept id=\"p1\">**</ept>","pos":[8093,8112],"source":"**Shared Members.**"},{"content":"You can control whether a member of a class is a shared or instance member.","pos":[8113,8188]},{"content":"<bpt id=\"p1\">**</bpt>Object Orientation.<ept id=\"p1\">**</ept>","pos":[8198,8221],"source":"**Object Orientation.**"},{"content":"Classes are object-oriented, but modules are not.","pos":[8222,8271]},{"content":"You can create one or more instances of a class.","pos":[8272,8320]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>.","pos":[8321,8457],"source":" For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)."},{"pos":[8466,8473],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8477,8562],"content":"The following example uses a <ph id=\"ph1\">`Class`</ph> statement to define a class and several members.","source":"The following example uses a `Class` statement to define a class and several members."},{"pos":[8697,8705],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8709,8818],"content":"<bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>","source":"[Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)"},{"pos":[8821,8941],"content":"<bpt id=\"p1\">[</bpt>Structures and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)</ept>","source":"[Structures and Classes](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)"},{"pos":[8944,9041],"content":"<bpt id=\"p1\">[</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept>","source":"[Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)"},{"pos":[9044,9135],"content":"<bpt id=\"p1\">[</bpt>Module Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/module-statement.md)</ept>","source":"[Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)"},{"pos":[9138,9233],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[9236,9428],"content":"<bpt id=\"p1\">[</bpt>Object Lifetime: How Objects Are Created and Destroyed<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept>","source":"[Object Lifetime: How Objects Are Created and Destroyed](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)"},{"pos":[9431,9549],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[9552,9681],"content":"<bpt id=\"p1\">[</bpt>How to: Use a Generic Class<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept>","source":"[How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)"}]}