<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="branches-and-loops-local.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad5891c11c516a7c5e3d46bea9c17c85b4a8536e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\intro-to-csharp\branches-and-loops-local.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">696c82e1ace5427eb9ea7f28303a8e6bc78ce035</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53d6e674f7d62148844d2dd2e7e0c032b3954a7d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Branches and loops - Introduction to C# tutorial</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>In this tutorial about branches and loops, you write C# code to explore the language syntax that supports conditional branches and loops to execute statements repeatedly.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Learn conditional logic with branch and loop statements</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you how to write code that examines variables and changes the execution path based on those variables.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You write C# code and see the results of compiling and running it.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The tutorial contains a series of lessons that explore branching and looping constructs in C#.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These lessons teach you the fundamentals of the C# language.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This tutorial expects you to have a machine you can use for development.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The .NET topic <bpt id="p1">[</bpt>Get Started in 10 minutes<ept id="p1">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A quick overview of the commands you'll use is in the <bpt id="p1">[</bpt>Become familiar with the development tools<ept id="p1">](local-environment.md)</ept> with links to more details.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Make decisions using the <ph id="ph1">`if`</ph> statement</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a directory named <bpt id="p1">**</bpt>branches-tutorial<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Make that the current directory and run <ph id="ph1">`dotnet new console -n BranchesAndLoops -o .`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This command creates a new .NET Core console application in the current directory.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> in your favorite editor, and replace the line <ph id="ph1">`Console.WriteLine("Hello World!");`</ph> with the following code:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Try this code by typing <ph id="ph1">`dotnet run`</ph> in your console window.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You should see the message "The answer is greater than 10."</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>printed to your console.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Modify the declaration of <ph id="ph1">`b`</ph> so that the sum is less than 10:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`dotnet run`</ph> again.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Because the answer is less than 10, nothing is printed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>condition<ept id="p1">**</ept> you're testing is false.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You don't have any code to execute because you've only written one of the possible branches for an <ph id="ph1">`if`</ph> statement: the true branch.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As you explore C# (or any programming language), you'll make mistakes when you write code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The compiler will find and report the errors.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Look closely at the error output and the code that generated the error.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The compiler error can usually help you find the problem.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This first sample shows the power of <ph id="ph1">`if`</ph> and Boolean types.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>Boolean<ept id="p1">*</ept> is a variable that can have one of two values: <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>C# defines a special type, <ph id="ph1">`bool`</ph> for Boolean variables.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`if`</ph> statement checks the value of a <ph id="ph2">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When the value is <ph id="ph1">`true`</ph>, the statement following the <ph id="ph2">`if`</ph> executes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Otherwise, it is skipped.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This process of checking conditions and executing statements based on those conditions is very powerful.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Make if and else work together</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To execute different code in both the true and false branches, you create an <ph id="ph1">`else`</ph> branch that executes when the condition is false.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Try this.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Add the last two lines in the code below to your <ph id="ph1">`Main`</ph> method (you should already have the first four):</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The statement following the <ph id="ph1">`else`</ph> keyword executes only when the condition being tested is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Combining <ph id="ph1">`if`</ph> and <ph id="ph2">`else`</ph> with Boolean conditions provides all the power you need to handle both a <ph id="ph3">`true`</ph> and a <ph id="ph4">`false`</ph> condition.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The indentation under the <ph id="ph1">`if`</ph> and <ph id="ph2">`else`</ph> statements is for human readers.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The C# language doesn't treat indentation or white space as significant.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The statement following the <ph id="ph1">`if`</ph> or <ph id="ph2">`else`</ph> keyword will be executed based on the condition.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Because indentation is not significant, you need to use <ph id="ph1">`{`</ph> and <ph id="ph2">`}`</ph> to indicate when you want more than one statement to be part of the block that executes conditionally.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>C# programmers typically use those braces on all <ph id="ph1">`if`</ph> and <ph id="ph2">`else`</ph> clauses.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example is the same as the one you just created.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Modify your code above to match the following code:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can test more complicated conditions.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Add the following code in your <ph id="ph1">`Main`</ph> method after the code you've written so far:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&amp;&amp;`</ph> represents "and".</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It means both conditions must be true to execute the statement in the true branch.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in <ph id="ph1">`{`</ph> and <ph id="ph2">`}`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can also use  <ph id="ph1">`||`</ph> to represent "or".</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add the following code after what you've written so far:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You've finished the first step.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Before you start the next section, let's move the current code into a separate method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>That makes it easier to start working with a new example.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Rename your <ph id="ph1">`Main`</ph> method to <ph id="ph2">`ExploreIf`</ph> and write a new <ph id="ph3">`Main`</ph> method that calls <ph id="ph4">`ExploreIf`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When you have finished, your code should look like this:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Comment out the call to <ph id="ph1">`ExploreIf()`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It will make the output less cluttered as you work in this section:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`//`</ph> starts a <bpt id="p1">**</bpt>comment<ept id="p1">**</ept> in C#.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Comments are any text you want to keep in your source code but not execute as code.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The compiler does not generate any executable code from comments.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Use loops to repeat operations</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In this section you use <bpt id="p1">**</bpt>loops<ept id="p1">**</ept> to repeat statements.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Try this code in your <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`while`</ph> statement checks a condition and executes the statement or statement block following the <ph id="ph2">`while`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It repeatedly checks the condition and executing those statements until the condition is false.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>There's one other new operator in this example.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`++`</ph> after the <ph id="ph2">`counter`</ph> variable is the <bpt id="p1">**</bpt>increment<ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It adds 1 to the value of <ph id="ph1">`counter`</ph> and stores that value in the <ph id="ph2">`counter`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Make sure that the <ph id="ph1">`while`</ph> loop condition changes to false as you execute the code.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Otherwise, you create an <bpt id="p1">**</bpt>infinite loop<ept id="p1">**</ept> where your program never ends.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>That is not demonstrated in this sample, because you have to force your program to quit using <bpt id="p1">**</bpt>CTRL-C<ept id="p1">**</ept> or other means.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`while`</ph> loop tests the condition before executing the code following the <ph id="ph2">`while`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`do`</ph> ... <ph id="ph2">`while`</ph> loop executes the code first, and then checks the condition.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The do while loop is shown in the following code:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`do`</ph> loop and the earlier <ph id="ph2">`while`</ph> loop produce the same output.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Work with the for loop</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop is commonly used in C#.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Try this code in your Main() method:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This does the same work as the <ph id="ph1">`while`</ph> loop and the <ph id="ph2">`do`</ph> loop you've already used.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`for`</ph> statement has three parts that control how it works.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The first part is the <bpt id="p1">**</bpt>for initializer<ept id="p1">**</ept>: <ph id="ph1">`int index = 0;`</ph> declares that <ph id="ph2">`index`</ph> is the loop variable, and sets its initial value to <ph id="ph3">`0`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The middle part is the <bpt id="p1">**</bpt>for condition<ept id="p1">**</ept>: <ph id="ph1">`index &lt; 10`</ph> declares that this <ph id="ph2">`for`</ph> loop continues to execute as long as the value of counter is less than 10.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The final part is the <bpt id="p1">**</bpt>for iterator<ept id="p1">**</ept>: <ph id="ph1">`index++`</ph> specifies how to modify the loop variable after executing the block following the <ph id="ph2">`for`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Here, it specifies that <ph id="ph1">`index`</ph> should be incremented by 1 each time the block executes.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Experiment with these yourself.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Try each of the following:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Change the initializer to start at a different value.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Change the condition to stop at a different value.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When you're done, let's move on to write some code yourself to use what you've learned.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Combine branches and loops</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Now that you've seen the <ph id="ph1">`if`</ph> statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Here are a few hints:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`%`</ph> operator gives you the remainder of a division operation.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`if`</ph> statement gives you the condition to see if a number should be part of the sum.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`for`</ph> loop can help you repeat a series of steps for all the numbers 1 through 20.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Try it yourself.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Then check how you did.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You should get 63 for an answer.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can see one possible answer by <bpt id="p1">[</bpt>viewing the completed code on GitHub<ept id="p1">](https://github.com/dotnet/samples/tree/master/csharp/branches-quickstart/Program.cs#L46-L54)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You've completed the "branches and loops" tutorial.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can continue with the <bpt id="p1">[</bpt>Arrays and collections<ept id="p1">](arrays-and-collections.md)</ept> tutorial in your own development environment.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can learn more about these concepts in these topics:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>If and else statement<ept id="p1">](../../language-reference/keywords/if-else.md)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>While statement<ept id="p1">](../../language-reference/keywords/while.md)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Do statement<ept id="p1">](../../language-reference/keywords/do.md)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For statement<ept id="p1">](../../language-reference/keywords/for.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>