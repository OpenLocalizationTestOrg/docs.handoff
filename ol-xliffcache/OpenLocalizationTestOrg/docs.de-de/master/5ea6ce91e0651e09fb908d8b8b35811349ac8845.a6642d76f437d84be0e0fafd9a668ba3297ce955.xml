{"content":"---\ntitle: \"ISymUnmanagedWriter::OpenScope Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ISymUnmanagedWriter.OpenScope\"\napi_location: \n  - \"diasymreader.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ISymUnmanagedWriter::OpenScope\"\nhelpviewer_keywords: \n  - \"OpenScope method, ISymUnmanagedWriter interface [.NET Framework debugging]\"\n  - \"ISymUnmanagedWriter::OpenScope method [.NET Framework debugging]\"\nms.assetid: dbea0644-3873-4329-90b8-624163e87467\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# ISymUnmanagedWriter::OpenScope Method\nOpens a new lexical scope in the current method. The scope becomes the new current scope and is pushed onto a stack of scopes. Scopes must form a hierarchy. Siblings are not allowed to overlap.  \n  \n## Syntax  \n  \n```  \nHRESULT OpenScope(  \n    [in] ULONG32 startOffset,  \n    [out, retval] ULONG32* pRetVal);  \n```  \n  \n## Parameters  \n `startOffset`  \n [in] The offset of the first instruction in the lexical scope, in bytes, from the beginning of the method.  \n  \n `pRetVal`  \n [out] A pointer to a `ULONG32` that receives the scope identifier.  \n  \n## Return Value  \n S_OK if the method succeeds; otherwise, E_FAIL or some other error code.  \n  \n## Remarks  \n `ISymUnmanagedWriter::OpenScope` returns an opaque scope identifier that can be used with [ISymUnmanagedWriter::SetScopeRange](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-setscoperange-method.md) to define a scope's starting and ending offset at a later time. In this case, the offsets passed to `ISymUnmanagedWriter::OpenScope` and [ISymUnmanagedWriter::CloseScope](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-closescope-method.md) are ignored. Scope identifiers are valid only in the current method.  \n  \n## Requirements  \n **Header:** CorSym.idl, CorSym.h  \n  \n## See also\n\n- [ISymUnmanagedWriter Interface](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)\n","nodes":[{"pos":[4,515],"embed":true,"restype":"x-metadata","content":"title: \"ISymUnmanagedWriter::OpenScope Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ISymUnmanagedWriter.OpenScope\"\napi_location: \n  - \"diasymreader.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ISymUnmanagedWriter::OpenScope\"\nhelpviewer_keywords: \n  - \"OpenScope method, ISymUnmanagedWriter interface [.NET Framework debugging]\"\n  - \"ISymUnmanagedWriter::OpenScope method [.NET Framework debugging]\"\nms.assetid: dbea0644-3873-4329-90b8-624163e87467\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"ISymUnmanagedWriter::OpenScope Method","nodes":[{"pos":[0,37],"content":"ISymUnmanagedWriter::OpenScope Method","nodes":[{"content":"ISymUnmanagedWriter::OpenScope Method","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[522,559],"content":"ISymUnmanagedWriter::OpenScope Method","linkify":"ISymUnmanagedWriter::OpenScope Method","nodes":[{"content":"ISymUnmanagedWriter::OpenScope Method","pos":[0,37]}]},{"content":"Opens a new lexical scope in the current method.","pos":[560,608]},{"content":"The scope becomes the new current scope and is pushed onto a stack of scopes.","pos":[609,686]},{"content":"Scopes must form a hierarchy.","pos":[687,716]},{"content":"Siblings are not allowed to overlap.","pos":[717,753]},{"pos":[762,768],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[884,894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The offset of the first instruction in the lexical scope, in bytes, from the beginning of the method.","pos":[915,1021]},{"content":"[out] A pointer to a <ph id=\"ph1\">`ULONG32`</ph> that receives the scope identifier.","pos":[1041,1107],"source":"[out] A pointer to a `ULONG32` that receives the scope identifier."},{"pos":[1116,1128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if the method succeeds; otherwise, E_FAIL or some other error code.","pos":[1132,1204]},{"pos":[1213,1220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`ISymUnmanagedWriter::OpenScope`</ph> returns an opaque scope identifier that can be used with <bpt id=\"p1\">[</bpt>ISymUnmanagedWriter::SetScopeRange<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-setscoperange-method.md)</ept> to define a scope's starting and ending offset at a later time.","pos":[1224,1512],"source":"`ISymUnmanagedWriter::OpenScope` returns an opaque scope identifier that can be used with [ISymUnmanagedWriter::SetScopeRange](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-setscoperange-method.md) to define a scope's starting and ending offset at a later time."},{"content":"In this case, the offsets passed to <ph id=\"ph1\">`ISymUnmanagedWriter::OpenScope`</ph> and <bpt id=\"p1\">[</bpt>ISymUnmanagedWriter::CloseScope<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-closescope-method.md)</ept> are ignored.","pos":[1513,1727],"source":" In this case, the offsets passed to `ISymUnmanagedWriter::OpenScope` and [ISymUnmanagedWriter::CloseScope](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-closescope-method.md) are ignored."},{"content":"Scope identifiers are valid only in the current method.","pos":[1728,1783]},{"pos":[1792,1804],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1808,1840],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorSym.idl, CorSym.h","source":"**Header:** CorSym.idl, CorSym.h"},{"pos":[1849,1857],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1861,1979],"content":"<bpt id=\"p1\">[</bpt>ISymUnmanagedWriter Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)</ept>","source":"[ISymUnmanagedWriter Interface](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)"}]}