<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cbaf531d34f14bb87f56ab4d9f13b806d1f8ec38</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\marshaling-a-delegate-as-a-callback-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">908420d79868c2df37e1fa418ea9596a8cb19ad7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e18310ca0efcb25ee8af19a755d778d069945295</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Marshaling a Delegate as a Callback Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Marshaling a Delegate as a Callback Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to pass delegates to an unmanaged function expecting function pointers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A delegate is a class that can hold a reference to a method and is equivalent to a type-safe function pointer or a callback function.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you use a delegate inside a call, the common language runtime protects the delegate from being garbage collected for the duration of that call.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, if the unmanaged function stores the delegate to use after the call completes, you must manually prevent garbage collection until the unmanaged function finishes with the delegate.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>HandleRef Sample<ept id="p1">](http://msdn.microsoft.com/en-us/ab23b04e-1d53-4ec7-b27a-e892d9298959)</ept> and <bpt id="p2">[</bpt>GCHandle Sample<ept id="p2">](http://msdn.microsoft.com/en-us/6acce798-0385-4ded-a790-77da842c113f)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Callback sample uses the following unmanaged functions, shown with their original function declaration:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TestCallBack<ept id="p1">**</ept> exported from PinvokeLib.dll.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TestCallBack2<ept id="p1">**</ept> exported from PinvokeLib.dll.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>PinvokeLib.dll<ept id="p1">](http://msdn.microsoft.com/en-us/5d1438d7-9946-489d-8ede-6c694a08f614)</ept> is a custom unmanaged library that contains an implementation for the previously listed functions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this sample, the <ph id="ph1">`LibWrap`</ph> class contains managed prototypes for the <ph id="ph2">`TestCallBack`</ph> and <ph id="ph3">`TestCallBack2`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Both methods pass a delegate to a callback function as a parameter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The signature of the delegate must match the signature of the method it references.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`FPtr`</ph> and <ph id="ph2">`FPtr2`</ph> delegates have signatures that are identical to the <ph id="ph3">`DoSomething`</ph> and <ph id="ph4">`DoSomething2`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Declaring Prototypes</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#37<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/callback.cpp#37)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#37<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/callback.cs#37)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#37<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/callback.vb#37)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Calling Functions</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#38<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/callback.cpp#38)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#38<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/callback.cs#38)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#38<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/callback.vb#38)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Miscellaneous Marshaling Samples<ept id="p1">](http://msdn.microsoft.com/en-us/a915c948-54e9-4d0f-a525-95a77fd8ed70)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Platform Invoke Data Types<ept id="p1">](http://msdn.microsoft.com/en-us/16014d9f-d6bd-481e-83f0-df11377c550f)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Prototypes in Managed Code<ept id="p1">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>