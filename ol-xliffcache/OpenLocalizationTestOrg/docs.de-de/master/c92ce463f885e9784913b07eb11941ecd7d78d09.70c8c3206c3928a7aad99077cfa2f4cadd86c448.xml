{"content":"---\ntitle: \"Specifying a Custom Crypto Algorithm\"\nms.date: \"03/30/2017\"\nms.assetid: d662a305-8e09-451d-9a59-b0f12b012f1d\n---\n# Specifying a Custom Crypto Algorithm\nWCF allows you to specify a custom crypto algorithm to use when encrypting data or computing digital signatures. This is done by the following steps:  \n  \n1.  Derive a class from <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>  \n  \n2.  Register the algorithm  \n  \n3.  Configure the binding with the <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>-derived class.  \n  \n## Derive a class from SecurityAlgorithmSuite  \n The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> is an abstract base class that allows you to specify the algorithm to use when performing various security related operations. For example, computing a hash for a digital signature or encrypting a message. The following code shows how to derive a class from <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>:  \n  \n```csharp  \npublic class MyCustomAlgorithmSuite : SecurityAlgorithmSuite  \n    {  \n        public override string DefaultAsymmetricKeyWrapAlgorithm  \n        {  \n            get { return SecurityAlgorithms.RsaOaepKeyWrap; }  \n        }  \n  \n        public override string DefaultAsymmetricSignatureAlgorithm  \n        {  \n            get { return SecurityAlgorithms.RsaSha1Signature; }  \n        }  \n  \n        public override string DefaultCanonicalizationAlgorithm  \n        {  \n            get { return SecurityAlgorithms.ExclusiveC14n; ; }  \n        }  \n  \n        public override string DefaultDigestAlgorithm  \n        {  \n            get { return SecurityAlgorithms.MyCustomHashAlgorithm; }  \n        }  \n  \n        public override string DefaultEncryptionAlgorithm  \n        {  \n            get { return SecurityAlgorithms.Aes128Encryption; }  \n        }  \n  \n        public override int DefaultEncryptionKeyDerivationLength  \n        {  \n            get { return 128; }  \n        }  \n  \n        public override int DefaultSignatureKeyDerivationLength  \n        {  \n            get { return 128; }  \n        }  \n  \n        public override int DefaultSymmetricKeyLength  \n        {  \n            get { return 128; }  \n        }  \n  \n        public override string DefaultSymmetricKeyWrapAlgorithm  \n        {  \n            get { return SecurityAlgorithms.Aes128Encryption; }  \n        }  \n  \n        public override string DefaultSymmetricSignatureAlgorithm  \n        {  \n            get { return SecurityAlgorithms.HmacSha1Signature; }  \n        }  \n  \n        public override bool IsAsymmetricKeyLengthSupported(int length)  \n        {  \n            return length >= 1024 && length <= 4096;  \n        }  \n  \n        public override bool IsSymmetricKeyLengthSupported(int length)  \n        {  \n            return length >= 128 && length <= 256;  \n        }  \n    }  \n```  \n  \n## Register the Custom Algorithm  \n Registration can be done in a configuration file or in imperative code. Registering a custom algorithm is done by creating a mapping between a class that implements a crypto service provider and an alias. The alias is then mapped to a URI which is used when specifying the algorithm in the WCF service’s binding. The following configuration snippet illustrates how to register a custom algorithm in config:  \n  \n```xml  \n<configuration>  \n   <mscorlib>  \n      <cryptographySettings>  \n         <cryptoNameMapping>  \n           <cryptoClasses>  \n              <cryptoClass SHA256CSP=\"System.Security.Cryptography.SHA256CryptoServiceProvider, System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" />  \n           </cryptoClasses>  \n           <nameEntry name=\"http://constoso.com/CustomAlgorithms/CustomHashAlgorithm\"  \n              class=\"SHA256CSP\" />  \n           </cryptoNameMapping>  \n        </cryptographySettings>  \n    </mscorlib>  \n</configuration>  \n```  \n  \n The section under the <`cryptoClasses`> element creates the mapping between the SHA256CryptoServiceProvider and the alias \"SHA256CSP\". The <`nameEntry`> element creates the mapping between the \"SHA256CSP\" alias and the specified URL (http://constoso.com/CustomAlgorithms/CustomHashAlgorithm ).  \n  \n To register the custom algorithm in code use the <xref:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])> method. This method creates both mappings. The following example shows how to call this method:  \n  \n```  \n// Register the custom URI string defined for the hashAlgorithm in MyCustomAlgorithmSuite class to create the   \n// SHA256CryptoServiceProvider hash algorithm object.  \nCryptoConfig.AddAlgorithm(typeof(SHA256CryptoServiceProvider), \"http://constoso.com/CustomAlgorithms/CustomHashAlgorithm\");  \n```  \n  \n## Configure the Binding  \n You configure the binding by specifying the custom <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>-derived class in the binding settings as shown in the following code snippet:  \n  \n```csharp  \nWSHttpBinding binding = new WSHttpBinding();  \n            binding.Security.Message.AlgorithmSuite = new MyCustomAlgorithmSuite();  \n```  \n  \n For a complete code example, see the [Cryptographic Agility in WCF Security](../../../../docs/framework/wcf/samples/cryptographic-agility-in-wcf-security.md) sample.  \n  \n## See also\n\n- [Securing Services and Clients](../../../../docs/framework/wcf/feature-details/securing-services-and-clients.md)\n- [Securing Services](../../../../docs/framework/wcf/securing-services.md)\n- [Security Overview](../../../../docs/framework/wcf/feature-details/security-overview.md)\n- [Security Concepts](../../../../docs/framework/wcf/feature-details/security-concepts.md)\n","nodes":[{"pos":[4,120],"embed":true,"restype":"x-metadata","content":"title: \"Specifying a Custom Crypto Algorithm\"\nms.date: \"03/30/2017\"\nms.assetid: d662a305-8e09-451d-9a59-b0f12b012f1d","nodes":[{"content":"Specifying a Custom Crypto Algorithm","nodes":[{"pos":[0,36],"content":"Specifying a Custom Crypto Algorithm","nodes":[{"content":"Specifying a Custom Crypto Algorithm","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[127,163],"content":"Specifying a Custom Crypto Algorithm","linkify":"Specifying a Custom Crypto Algorithm","nodes":[{"content":"Specifying a Custom Crypto Algorithm","pos":[0,36]}]},{"content":"WCF allows you to specify a custom crypto algorithm to use when encrypting data or computing digital signatures.","pos":[164,276]},{"content":"This is done by the following steps:","pos":[277,313]},{"pos":[323,401],"content":"Derive a class from <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.SecurityAlgorithmSuite&gt;</ph>","source":"Derive a class from <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>"},{"content":"Register the algorithm","pos":[411,433]},{"pos":[443,547],"content":"Configure the binding with the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.SecurityAlgorithmSuite&gt;</ph>-derived class.","source":"Configure the binding with the <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>-derived class."},{"pos":[556,598],"content":"Derive a class from SecurityAlgorithmSuite","linkify":"Derive a class from SecurityAlgorithmSuite","nodes":[{"content":"Derive a class from SecurityAlgorithmSuite","pos":[0,42]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.SecurityAlgorithmSuite&gt;</ph> is an abstract base class that allows you to specify the algorithm to use when performing various security related operations.","pos":[602,791],"source":"The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> is an abstract base class that allows you to specify the algorithm to use when performing various security related operations."},{"content":"For example, computing a hash for a digital signature or encrypting a message.","pos":[792,870]},{"content":"The following code shows how to derive a class from <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.SecurityAlgorithmSuite&gt;</ph>:","pos":[871,982],"source":" The following code shows how to derive a class from <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>:"},{"pos":[2875,2904],"content":"Register the Custom Algorithm","linkify":"Register the Custom Algorithm","nodes":[{"content":"Register the Custom Algorithm","pos":[0,29]}]},{"content":"Registration can be done in a configuration file or in imperative code.","pos":[2908,2979]},{"content":"Registering a custom algorithm is done by creating a mapping between a class that implements a crypto service provider and an alias.","pos":[2980,3112]},{"content":"The alias is then mapped to a URI which is used when specifying the algorithm in the WCF service’s binding.","pos":[3113,3220]},{"content":"The following configuration snippet illustrates how to register a custom algorithm in config:","pos":[3221,3314]},{"content":"The section under the &lt;<ph id=\"ph1\">`cryptoClasses`</ph>&gt; element creates the mapping between the SHA256CryptoServiceProvider and the alias \"SHA256CSP\".","pos":[3905,4039],"source":"The section under the <`cryptoClasses`> element creates the mapping between the SHA256CryptoServiceProvider and the alias \"SHA256CSP\"."},{"content":"The &lt;<ph id=\"ph1\">`nameEntry`</ph>&gt; element creates the mapping between the \"SHA256CSP\" alias and the specified URL (<ph id=\"ph2\">http://constoso.com/CustomAlgorithms/CustomHashAlgorithm</ph> ).","pos":[4040,4198],"source":" The <`nameEntry`> element creates the mapping between the \"SHA256CSP\" alias and the specified URL (http://constoso.com/CustomAlgorithms/CustomHashAlgorithm )."},{"content":"To register the custom algorithm in code use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])&gt;</ph> method.","pos":[4205,4352],"source":"To register the custom algorithm in code use the <xref:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])> method."},{"content":"This method creates both mappings.","pos":[4353,4387]},{"content":"The following example shows how to call this method:","pos":[4388,4440]},{"pos":[4759,4780],"content":"Configure the Binding","linkify":"Configure the Binding","nodes":[{"content":"Configure the Binding","pos":[0,21]}]},{"pos":[4784,4971],"content":"You configure the binding by specifying the custom <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.SecurityAlgorithmSuite&gt;</ph>-derived class in the binding settings as shown in the following code snippet:","source":"You configure the binding by specifying the custom <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>-derived class in the binding settings as shown in the following code snippet:"},{"pos":[5132,5297],"content":"For a complete code example, see the <bpt id=\"p1\">[</bpt>Cryptographic Agility in WCF Security<ept id=\"p1\">](../../../../docs/framework/wcf/samples/cryptographic-agility-in-wcf-security.md)</ept> sample.","source":"For a complete code example, see the [Cryptographic Agility in WCF Security](../../../../docs/framework/wcf/samples/cryptographic-agility-in-wcf-security.md) sample."},{"pos":[5306,5314],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5318,5430],"content":"<bpt id=\"p1\">[</bpt>Securing Services and Clients<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/securing-services-and-clients.md)</ept>","source":"[Securing Services and Clients](../../../../docs/framework/wcf/feature-details/securing-services-and-clients.md)"},{"pos":[5433,5505],"content":"<bpt id=\"p1\">[</bpt>Securing Services<ept id=\"p1\">](../../../../docs/framework/wcf/securing-services.md)</ept>","source":"[Securing Services](../../../../docs/framework/wcf/securing-services.md)"},{"pos":[5508,5596],"content":"<bpt id=\"p1\">[</bpt>Security Overview<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/security-overview.md)</ept>","source":"[Security Overview](../../../../docs/framework/wcf/feature-details/security-overview.md)"},{"pos":[5599,5687],"content":"<bpt id=\"p1\">[</bpt>Security Concepts<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/security-concepts.md)</ept>","source":"[Security Concepts](../../../../docs/framework/wcf/feature-details/security-concepts.md)"}]}