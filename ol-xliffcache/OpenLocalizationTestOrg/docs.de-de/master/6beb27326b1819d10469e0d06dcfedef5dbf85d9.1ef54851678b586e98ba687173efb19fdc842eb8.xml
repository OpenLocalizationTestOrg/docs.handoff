{"content":"---\ntitle: \"AttributeUsage (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 22c45568-9a6a-4c2f-8480-f38c1caa0a99\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# AttributeUsage (C#)\nDetermines how a custom attribute class can be used. `AttributeUsage` is an attribute that can be applied to custom attribute definitions to control how the new attribute can be applied. The default settings look like this when applied explicitly:  \n  \n```csharp  \n[System.AttributeUsage(System.AttributeTargets.All,  \n                   AllowMultiple = false,  \n                   Inherited = true)]  \nclass NewAttribute : System.Attribute { }  \n```  \n  \n In this example, the `NewAttribute` class can be applied to any attribute-able code entity, but can be applied only once to each entity. It is inherited by derived classes when applied to a base class.  \n  \n The `AllowMultiple` and `Inherited` arguments are optional, so this code has the same effect:  \n  \n```csharp  \n[System.AttributeUsage(System.AttributeTargets.All)]  \nclass NewAttribute : System.Attribute { }  \n```  \n  \n The first `AttributeUsage` argument must be one or more elements of the <xref:System.AttributeTargets> enumeration. Multiple target types can be linked together with the OR operator, like this:  \n  \n```csharp  \nusing System;  \n```  \n  \n```csharp  \n[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]  \nclass NewPropertyOrFieldAttribute : Attribute { }  \n```  \n  \n If the `AllowMultiple` argument is set to `true`, then the resulting attribute can be applied more than once to a single entity, like this:  \n  \n```csharp  \nusing System;  \n```  \n  \n```csharp  \n[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]  \nclass MultiUseAttr : Attribute { }  \n  \n[MultiUseAttr]  \n[MultiUseAttr]  \nclass Class1 { }  \n  \n[MultiUseAttr, MultiUseAttr]  \nclass Class2 { }  \n```  \n  \n In this case `MultiUseAttr` can be applied repeatedly because `AllowMultiple` is set to `true`. Both formats shown for applying multiple attributes are valid.  \n  \n If `Inherited` is set to `false`, then the attribute is not inherited by classes that are derived from a class that is attributed. For example:  \n  \n```csharp  \nusing System;  \n```  \n  \n```csharp  \n[AttributeUsage(AttributeTargets.Class, Inherited = false)]  \nclass Attr1 : Attribute { }  \n  \n[Attr1]  \nclass BClass { }  \n  \nclass DClass : BClass { }  \n```  \n  \n In this case `Attr1` is not applied to `DClass` via inheritance.  \n  \n## Remarks  \n The `AttributeUsage` attribute is a single-use attribute--it cannot be applied more than once to the same class. `AttributeUsage` is an alias for <xref:System.AttributeUsageAttribute>.  \n  \n For more information, see [Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md).  \n  \n## Example  \n The following example demonstrates the effect of the `Inherited` and `AllowMultiple` arguments to the `AttributeUsage` attribute, and how the custom attributes applied to a class can be enumerated.  \n  \n```csharp  \nusing System;  \n```  \n  \n```csharp  \n// Create some custom attributes:  \n[AttributeUsage(System.AttributeTargets.Class, Inherited = false)]  \nclass A1 : System.Attribute { }  \n  \n[AttributeUsage(System.AttributeTargets.Class)]  \nclass A2 : System.Attribute { }  \n  \n[AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]  \nclass A3 : System.Attribute { }  \n  \n// Apply custom attributes to classes:  \n[A1, A2]  \nclass BaseClass { }  \n  \n[A3, A3]  \nclass DerivedClass : BaseClass { }  \n  \npublic class TestAttributeUsage  \n{  \n    static void Main()  \n    {  \n        BaseClass b = new BaseClass();  \n        DerivedClass d = new DerivedClass();  \n  \n        // Display custom attributes for each class.  \n        Console.WriteLine(\"Attributes on Base Class:\");  \n        object[] attrs = b.GetType().GetCustomAttributes(true);  \n        foreach (Attribute attr in attrs)  \n        {  \n            Console.WriteLine(attr);  \n        }  \n  \n        Console.WriteLine(\"Attributes on Derived Class:\");  \n        attrs = d.GetType().GetCustomAttributes(true);  \n        foreach (Attribute attr in attrs)  \n        {  \n            Console.WriteLine(attr);  \n        }  \n    }  \n}  \n```  \n  \n## Sample Output  \n  \n```  \nAttributes on Base Class:  \nA1  \nA2  \nAttributes on Derived Class:  \nA3  \nA3  \nA2  \n```  \n  \n## See Also  \n <xref:System.Attribute>   \n <xref:System.Reflection>   \n [C# Programming Guide](../../../../csharp/programming-guide/index.md)   \n [Attributes](https://msdn.microsoft.com/library/5x6cd29c)   \n [Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md)   \n [Attributes](../../../../csharp/programming-guide/concepts/attributes/index.md)   \n [Creating Custom Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)   \n [Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)","nodes":[{"pos":[4,400],"embed":true,"restype":"x-metadata","content":"title: \"AttributeUsage (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 22c45568-9a6a-4c2f-8480-f38c1caa0a99\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"AttributeUsage (C#) | Microsoft Docs","nodes":[{"pos":[0,36],"content":"AttributeUsage (C#) | Microsoft Docs","nodes":[{"content":"AttributeUsage (C#) | Microsoft Docs","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[407,426],"content":"AttributeUsage (C#)","linkify":"AttributeUsage (C#)","nodes":[{"content":"AttributeUsage (C#)","pos":[0,19]}]},{"content":"Determines how a custom attribute class can be used.","pos":[427,479]},{"content":"<ph id=\"ph1\">`AttributeUsage`</ph> is an attribute that can be applied to custom attribute definitions to control how the new attribute can be applied.","pos":[480,613],"source":"`AttributeUsage` is an attribute that can be applied to custom attribute definitions to control how the new attribute can be applied."},{"content":"The default settings look like this when applied explicitly:","pos":[614,674]},{"content":"In this example, the <ph id=\"ph1\">`NewAttribute`</ph> class can be applied to any attribute-able code entity, but can be applied only once to each entity.","pos":[884,1020],"source":"In this example, the `NewAttribute` class can be applied to any attribute-able code entity, but can be applied only once to each entity."},{"content":"It is inherited by derived classes when applied to a base class.","pos":[1021,1085]},{"pos":[1092,1185],"content":"The <ph id=\"ph1\">`AllowMultiple`</ph> and <ph id=\"ph2\">`Inherited`</ph> arguments are optional, so this code has the same effect:","source":"The `AllowMultiple` and `Inherited` arguments are optional, so this code has the same effect:"},{"content":"The first <ph id=\"ph1\">`AttributeUsage`</ph> argument must be one or more elements of the <ph id=\"ph2\">&lt;xref:System.AttributeTargets&gt;</ph> enumeration.","pos":[1312,1427],"source":"The first `AttributeUsage` argument must be one or more elements of the <xref:System.AttributeTargets> enumeration."},{"content":"Multiple target types can be linked together with the OR operator, like this:","pos":[1428,1505]},{"pos":[1693,1832],"content":"If the <ph id=\"ph1\">`AllowMultiple`</ph> argument is set to <ph id=\"ph2\">`true`</ph>, then the resulting attribute can be applied more than once to a single entity, like this:","source":"If the `AllowMultiple` argument is set to `true`, then the resulting attribute can be applied more than once to a single entity, like this:"},{"content":"In this case <ph id=\"ph1\">`MultiUseAttr`</ph> can be applied repeatedly because <ph id=\"ph2\">`AllowMultiple`</ph> is set to <ph id=\"ph3\">`true`</ph>.","pos":[2108,2203],"source":"In this case `MultiUseAttr` can be applied repeatedly because `AllowMultiple` is set to `true`."},{"content":"Both formats shown for applying multiple attributes are valid.","pos":[2204,2266]},{"content":"If <ph id=\"ph1\">`Inherited`</ph> is set to <ph id=\"ph2\">`false`</ph>, then the attribute is not inherited by classes that are derived from a class that is attributed.","pos":[2273,2403],"source":"If `Inherited` is set to `false`, then the attribute is not inherited by classes that are derived from a class that is attributed."},{"content":"For example:","pos":[2404,2416]},{"pos":[2636,2700],"content":"In this case <ph id=\"ph1\">`Attr1`</ph> is not applied to <ph id=\"ph2\">`DClass`</ph> via inheritance.","source":"In this case `Attr1` is not applied to `DClass` via inheritance."},{"pos":[2709,2716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`AttributeUsage`</ph> attribute is a single-use attribute--it cannot be applied more than once to the same class.","pos":[2720,2832],"source":"The `AttributeUsage` attribute is a single-use attribute--it cannot be applied more than once to the same class."},{"content":"<ph id=\"ph1\">`AttributeUsage`</ph> is an alias for <ph id=\"ph2\">&lt;xref:System.AttributeUsageAttribute&gt;</ph>.","pos":[2833,2904],"source":"`AttributeUsage` is an alias for <xref:System.AttributeUsageAttribute>."},{"pos":[2911,3087],"content":"For more information, see <bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>.","source":"For more information, see [Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)."},{"pos":[3096,3103],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3107,3304],"content":"The following example demonstrates the effect of the <ph id=\"ph1\">`Inherited`</ph> and <ph id=\"ph2\">`AllowMultiple`</ph> arguments to the <ph id=\"ph3\">`AttributeUsage`</ph> attribute, and how the custom attributes applied to a class can be enumerated.","source":"The following example demonstrates the effect of the `Inherited` and `AllowMultiple` arguments to the `AttributeUsage` attribute, and how the custom attributes applied to a class can be enumerated."},{"pos":[4525,4538],"content":"Sample Output","linkify":"Sample Output","nodes":[{"content":"Sample Output","pos":[0,13]}]},{"pos":[4646,4654],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4715,4785],"source":"[C# Programming Guide](../../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](https://msdn.microsoft.com/library/5x6cd29c)</ept><ph id=\"ph1\"> </ph>","pos":[4789,4847],"source":"[Attributes](https://msdn.microsoft.com/library/5x6cd29c) "},{"content":"<bpt id=\"p1\">[</bpt>Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/reflection.md)</ept><ph id=\"ph1\"> </ph>","pos":[4851,4930],"source":"[Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md) "},{"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4934,5014],"source":"[Attributes](../../../../csharp/programming-guide/concepts/attributes/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating Custom Attributes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[5018,5140],"source":"[Creating Custom Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md) "},{"content":"<bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>","pos":[5144,5293],"source":"[Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)"}]}