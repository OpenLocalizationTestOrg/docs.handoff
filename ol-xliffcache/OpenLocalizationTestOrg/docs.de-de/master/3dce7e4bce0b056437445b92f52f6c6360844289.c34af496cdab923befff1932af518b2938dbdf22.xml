{"content":"---\ntitle: \"Walkthrough: Office Programming (C# and Visual Basic)\"\nms.date: 07/20/2015\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Office, programming in Visual Basic and C#\"\n  - \"Office programming [C#]\"\n  - \"Office programming [Visual Basic]\"\nms.assetid: 519cff31-f80b-4f0e-a56b-26358d0f8c51\n---\n# Walkthrough: Office Programming (C# and Visual Basic)\nVisual Studio offers features in C# and Visual Basic that improve Microsoft Office programming. Helpful C# features include named and optional arguments and return values of type `dynamic`. In COM programming, you can omit the `ref` keyword and gain access to indexed properties. Features in Visual Basic include auto-implemented properties, statements in lambda expressions, and collection initializers.\n\nBoth languages enable embedding of type information, which allows deployment of assemblies that interact with COM components without deploying primary interop assemblies (PIAs) to the user's computer. For more information, see [Walkthrough: Embedding Types from Managed Assemblies](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md).  \n  \nThis walkthrough demonstrates these features in the context of Office programming, but many of these features are also useful in general programming. In the walkthrough, you use an Excel Add-in application to create an Excel workbook. Next, you create a Word document that contains a link to the workbook. Finally, you see how to enable and disable the PIA dependency.  \n  \n## Prerequisites  \n\nYou must have Microsoft Office Excel and Microsoft Office Word installed on your computer to complete this walkthrough.  \n  \n If you are using an operating system that is older than [!INCLUDE[windowsver](~/includes/windowsver-md.md)], make sure that [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] is installed.  \n  \n[!INCLUDE[note_settings_general](~/includes/note-settings-general-md.md)]  \n  \n### To set up an Excel Add-in application  \n  \n1.  Start Visual Studio.  \n  \n2.  On the **File** menu, point to **New**, and then click **Project**.  \n  \n3.  In the **Installed Templates** pane, expand **Visual Basic** or **Visual C#**, expand **Office**, and then click the version year of the Office product.  \n  \n4.  In the **Templates** pane, click **Excel \\<version> Add-in**.  \n  \n5.  Look at the top of the **Templates** pane to make sure that **.NET Framework 4**, or a later version, appears in the **Target Framework** box.  \n  \n6.  Type a name for your project in the **Name** box, if you want to.  \n  \n7.  Click **OK**.  \n  \n8.  The new project appears in **Solution Explorer**.  \n  \n### To add references  \n  \n1.  In **Solution Explorer**, right-click your project's name and then click **Add Reference**. The **Add Reference** dialog box appears.  \n  \n2.  On the **Assemblies** tab, select **Microsoft.Office.Interop.Excel**, version `<version>.0.0.0` (for a key to the Office product version numbers, see [Microsoft Versions](https://en.wikipedia.org/wiki/Microsoft_Office#Versions)), in the **Component Name** list, and then hold down the CTRL key and select **Microsoft.Office.Interop.Word**, `version <version>.0.0.0`. If you do not see the assemblies, you may need to ensure they are installed and displayed (see [How to: Install Office Primary Interop Assemblies](/visualstudio/vsto/how-to-install-office-primary-interop-assemblies)).  \n  \n3.  Click **OK**.  \n  \n### To add necessary Imports statements or using directives  \n  \n1.  In **Solution Explorer**, right-click the **ThisAddIn.vb** or **ThisAddIn.cs** file and then click **View Code**.  \n  \n2.  Add the following `Imports` statements (Visual Basic) or `using` directives (C#) to the top of the code file if they are not already present.  \n  \n     [!code-csharp[csOfficeWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/thisaddin.cs#1)]\n\n     [!code-vb[csOfficeWalkthrough#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/csofficewalkthrough/vb/thisaddin.vb#1)]\n  \n### To create a list of bank accounts  \n  \n1.  In **Solution Explorer**, right-click your project's name, click **Add**, and then click **Class**. Name the class Account.vb if you are using Visual Basic or Account.cs if you are using C#. Click **Add**.  \n  \n2.  Replace the definition of the `Account` class with the following code. The class definitions use *auto-implemented properties*. For more information, see [Auto-Implemented Properties](../../../visual-basic/programming-guide/language-features/procedures/auto-implemented-properties.md).  \n  \n     [!code-csharp[csOfficeWalkthrough#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/account.cs#2)]\n\n     [!code-vb[csOfficeWalkthrough#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/csofficewalkthrough/vb/account.vb#2)]  \n  \n3.  To create a `bankAccounts` list that contains two accounts, add the following code to the `ThisAddIn_Startup` method in *ThisAddIn.vb* or *ThisAddIn.cs*. The list declarations use *collection initializers*. For more information, see [Collection Initializers](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md).  \n  \n     [!code-csharp[csOfficeWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/thisaddin.cs#3)]\n\n     [!code-vb[csOfficeWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/csofficewalkthrough/vb/thisaddin.vb#3)]  \n  \n### To export data to Excel  \n  \n1.  In the same file, add the following method to the `ThisAddIn` class. The method sets up an Excel workbook and exports data to it.  \n  \n     [!code-csharp[csOfficeWalkthrough#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/thisaddin.cs#4)]\n\n     [!code-vb[csOfficeWalkthrough#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/csofficewalkthrough/vb/thisaddin.vb#4)]  \n  \n     Two new C# features are used in this method. Both of these features already exist in Visual Basic.  \n  \n    -   Method [Add](<xref:Microsoft.Office.Interop.Excel.Workbooks.Add%2A>) has an *optional parameter* for specifying a particular template. Optional parameters, new in [!INCLUDE[csharp_dev10_long](~/includes/csharp-dev10-long-md.md)], enable you to omit the argument for that parameter if you want to use the parameter's default value. Because no argument is sent in the previous example, `Add` uses the default template and creates a new workbook. The equivalent statement in earlier versions of C# requires a placeholder argument: `excelApp.Workbooks.Add(Type.Missing)`.  \n  \n         For more information, see [Named and Optional Arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md).  \n  \n    -   The `Range` and `Offset` properties of the [Range](<xref:Microsoft.Office.Interop.Excel.Range>) object use the *indexed properties* feature. This feature enables you to consume these properties from COM types by using the following typical C# syntax. Indexed properties also enable you to use the `Value` property of the `Range` object, eliminating the need to use the `Value2` property. The `Value` property is indexed, but the index is optional. Optional arguments and indexed properties work together in the following example.  \n  \n         [!code-csharp[csOfficeWalkthrough#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/thisaddin.cs#5)]  \n  \n         In earlier versions of the language, the following special syntax is required.  \n  \n         [!code-csharp[csOfficeWalkthrough#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/thisaddin.cs#6)]  \n  \n         You cannot create indexed properties of your own. The feature only supports consumption of existing indexed properties.  \n  \n         For more information, see [How to: Use Indexed Properties in COM Interop Programming](../../../csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md).  \n  \n2.  Add the following code at the end of `DisplayInExcel` to adjust the column widths to fit the content.  \n  \n     [!code-csharp[csOfficeWalkthrough#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/thisaddin.cs#7)]\n\n     [!code-vb[csOfficeWalkthrough#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/csofficewalkthrough/vb/thisaddin.vb#7)]  \n  \n     These additions demonstrate another feature in C#: treating `Object` values returned from COM hosts such as Office as if they have type [dynamic](../../../csharp/language-reference/keywords/dynamic.md). This happens automatically when **Embed Interop Types** is set to its default value, `True`, or, equivalently, when the assembly is referenced by the [/link](../../../csharp/language-reference/compiler-options/link-compiler-option.md) compiler option. Type `dynamic` allows late binding, already available in Visual Basic, and avoids the explicit casting required in Visual C# 2008 and earlier versions of the language.  \n  \n     For example, `excelApp.Columns[1]` returns an `Object`, and `AutoFit` is an Excel  [Range](<xref:Microsoft.Office.Interop.Excel.Range>) method. Without `dynamic`, you must cast the object returned by `excelApp.Columns[1]` as an instance of `Range` before calling method `AutoFit`.  \n  \n     [!code-csharp[csOfficeWalkthrough#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/thisaddin.cs#8)]  \n  \n     For more information about embedding interop types, see procedures \"To find the PIA reference\" and \"To restore the PIA dependency\" later in this topic. For more information about `dynamic`, see [dynamic](../../../csharp/language-reference/keywords/dynamic.md) or [Using Type dynamic](../../../csharp/programming-guide/types/using-type-dynamic.md).  \n  \n### To invoke DisplayInExcel  \n  \n1.  Add the following code at the end of the `ThisAddIn_StartUp` method. The call to `DisplayInExcel` contains two arguments. The first argument is the name of the list of accounts to be processed. The second argument is a multiline lambda expression that defines how the data is to be processed. The `ID` and `balance` values for each account are displayed in adjacent cells, and the row is displayed in red if the balance is less than zero. For more information, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md).  \n  \n     [!code-csharp[csOfficeWalkthrough#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/thisaddin.cs#9)]\n\n     [!code-vb[csOfficeWalkthrough#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/csofficewalkthrough/vb/thisaddin.vb#9)]  \n  \n2.  To run the program, press F5. An Excel worksheet appears that contains the data from the accounts.  \n  \n### To add a Word document  \n  \n1.  Add the following code at the end of the `ThisAddIn_StartUp` method to create a Word document that contains a link to the Excel workbook.  \n  \n     [!code-csharp[csOfficeWalkthrough#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csofficewalkthrough/cs/thisaddin.cs#10)]\n\n     [!code-vb[csOfficeWalkthrough#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/csofficewalkthrough/vb/thisaddin.vb#10)]  \n  \n     This code demonstrates several of the new features in C#: the ability to omit the `ref` keyword in COM programming, named arguments, and optional arguments. These features already exist in Visual Basic. The [PasteSpecial](<xref:Microsoft.Office.Interop.Word.Selection.PasteSpecial%2A>) method has seven parameters, all of which are defined as optional reference parameters. Named and optional arguments enable you to designate the parameters you want to access by name and to send arguments to only those parameters. In this example, arguments are sent to indicate that a link to the workbook on the Clipboard should be created (parameter `Link`) and that the link is to be displayed in the Word document as an icon (parameter `DisplayAsIcon`). Visual C# also enables you to omit the `ref` keyword for these arguments.\n  \n### To run the application  \n  \n1.  Press F5 to run the application. Excel starts and displays a table that contains the information from the two accounts in `bankAccounts`. Then a Word document appears that contains a link to the Excel table.  \n  \n### To clean up the completed project  \n  \n1.  In Visual Studio, click **Clean Solution** on the **Build** menu. Otherwise, the add-in will run every time that you open Excel on your computer.  \n  \n### To find the PIA reference  \n  \n1.  Run the application again, but do not click **Clean Solution**.  \n  \n2.  Select the **Start**. Locate **Microsoft Visual Studio \\<version>** and open a developer command prompt.  \n  \n3.  Type `ildasm` in the Developer Command Prompt for Visual Studio window, and then press ENTER. The IL DASM window appears.  \n  \n4.  On the **File** menu in the IL DASM window, select **File** > **Open**. Double-click **Visual Studio \\<version>**, and then double-click **Projects**. Open the folder for your project, and look in the bin/Debug folder for *your project name*.dll. Double-click *your project name*.dll. A new window displays your project's attributes, in addition to references to other modules and assemblies. Note that namespaces `Microsoft.Office.Interop.Excel` and `Microsoft.Office.Interop.Word` are included in the assembly. By default in Visual Studio, the compiler imports the types you need from a referenced PIA into your assembly.  \n  \n     For more information, see [How to: View Assembly Contents](../../../framework/app-domains/how-to-view-assembly-contents.md).  \n  \n5.  Double-click the **MANIFEST** icon. A window appears that contains a list of assemblies that contain items referenced by the project. `Microsoft.Office.Interop.Excel` and `Microsoft.Office.Interop.Word` are not included in the list. Because the types your project needs have been imported into your assembly, references to a PIA are not required. This makes deployment easier. The PIAs do not have to be present on the user's computer, and because an application does not require deployment of a specific version of a PIA, applications can be designed to work with multiple versions of Office, provided that the necessary APIs exist in all versions.  \n  \n     Because deployment of PIAs is no longer necessary, you can create an application in advanced scenarios that works with multiple versions of Office, including earlier versions. However, this works only if your code does not use any APIs that are not available in the version of Office you are working with. It is not always clear whether a particular API was available in an earlier version, and for that reason working with earlier versions of Office is not recommended.  \n  \n    > [!NOTE]\n    > Office did not publish PIAs before Office 2003. Therefore, the only way to generate an interop assembly for Office 2002 or earlier versions is by importing the COM reference.  \n  \n6.  Close the manifest window and the assembly window.  \n  \n### To restore the PIA dependency  \n  \n1.  In **Solution Explorer**, click the **Show All Files** button. Expand the **References** folder and select **Microsoft.Office.Interop.Excel**. Press F4 to display the **Properties** window.  \n  \n2.  In the **Properties** window, change the **Embed Interop Types** property from **True** to **False**.  \n  \n3.  Repeat steps 1 and 2 in this procedure for `Microsoft.Office.Interop.Word`.  \n  \n4.  In C#, comment out the two calls to `Autofit` at the end of the `DisplayInExcel` method.  \n  \n5.  Press F5 to verify that the project still runs correctly.  \n  \n6.  Repeat steps 1-3 from the previous procedure to open the assembly window. Notice that `Microsoft.Office.Interop.Word` and `Microsoft.Office.Interop.Excel` are no longer in the list of embedded assemblies.  \n  \n7.  Double-click the **MANIFEST** icon and scroll through the list of referenced assemblies. Both `Microsoft.Office.Interop.Word` and `Microsoft.Office.Interop.Excel` are in the list. Because the application references the Excel and Word PIAs, and the **Embed Interop Types** property is set to **False**, both assemblies must exist on the end user's computer.  \n  \n8.  In Visual Studio, click **Clean Solution** on the **Build** menu to clean up the completed project.  \n  \n## See also\n\n- [Auto-Implemented Properties (Visual Basic)](../../../visual-basic/programming-guide/language-features/procedures/auto-implemented-properties.md)\n- [Auto-Implemented Properties (C#)](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)\n- [Collection Initializers](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)\n- [Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)\n- [Optional Parameters](../../../visual-basic/programming-guide/language-features/procedures/optional-parameters.md)\n- [Passing Arguments by Position and by Name](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-position-and-by-name.md)\n- [Named and Optional Arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)\n- [Early and Late Binding](../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)\n- [dynamic](../../../csharp/language-reference/keywords/dynamic.md)\n- [Using Type dynamic](../../../csharp/programming-guide/types/using-type-dynamic.md)\n- [Lambda Expressions (Visual Basic)](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)\n- [Lambda Expressions (C#)](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)\n- [How to: Use Indexed Properties in COM Interop Programming](../../../csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md)\n- [Walkthrough: Embedding Type Information from Microsoft Office Assemblies in Visual Studio](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ee317478(v%3dvs.120))\n- [Walkthrough: Embedding Types from Managed Assemblies](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)\n- [Walkthrough: Creating Your First VSTO Add-in for Excel](/visualstudio/vsto/walkthrough-creating-your-first-vsto-add-in-for-excel)\n- [COM Interop](../../../visual-basic/programming-guide/com-interop/index.md)\n- [Interoperability](../../../csharp/programming-guide/interop/index.md)\n","nodes":[{"pos":[4,310],"embed":true,"restype":"x-metadata","content":"title: \"Walkthrough: Office Programming (C# and Visual Basic)\"\nms.date: 07/20/2015\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Office, programming in Visual Basic and C#\"\n  - \"Office programming [C#]\"\n  - \"Office programming [Visual Basic]\"\nms.assetid: 519cff31-f80b-4f0e-a56b-26358d0f8c51","nodes":[{"content":"Walkthrough: Office Programming (C# and Visual Basic)","nodes":[{"pos":[0,53],"content":"Walkthrough: Office Programming (C# and Visual Basic)","nodes":[{"content":"Walkthrough: Office Programming (C# and Visual Basic)","pos":[0,53]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[317,370],"content":"Walkthrough: Office Programming (C# and Visual Basic)","linkify":"Walkthrough: Office Programming (C# and Visual Basic)","nodes":[{"content":"Walkthrough: Office Programming (C# and Visual Basic)","pos":[0,53]}]},{"content":"Visual Studio offers features in C# and Visual Basic that improve Microsoft Office programming.","pos":[371,466]},{"content":"Helpful C# features include named and optional arguments and return values of type <ph id=\"ph1\">`dynamic`</ph>.","pos":[467,560],"source":" Helpful C# features include named and optional arguments and return values of type `dynamic`."},{"content":"In COM programming, you can omit the <ph id=\"ph1\">`ref`</ph> keyword and gain access to indexed properties.","pos":[561,650],"source":" In COM programming, you can omit the `ref` keyword and gain access to indexed properties."},{"content":"Features in Visual Basic include auto-implemented properties, statements in lambda expressions, and collection initializers.","pos":[651,775]},{"content":"Both languages enable embedding of type information, which allows deployment of assemblies that interact with COM components without deploying primary interop assemblies (PIAs) to the user's computer.","pos":[777,977]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Embedding Types from Managed Assemblies<ept id=\"p1\">](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)</ept>.","pos":[978,1190],"source":" For more information, see [Walkthrough: Embedding Types from Managed Assemblies](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)."},{"content":"This walkthrough demonstrates these features in the context of Office programming, but many of these features are also useful in general programming.","pos":[1196,1345]},{"content":"In the walkthrough, you use an Excel Add-in application to create an Excel workbook.","pos":[1346,1430]},{"content":"Next, you create a Word document that contains a link to the workbook.","pos":[1431,1501]},{"content":"Finally, you see how to enable and disable the PIA dependency.","pos":[1502,1564]},{"pos":[1573,1586],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"You must have Microsoft Office Excel and Microsoft Office Word installed on your computer to complete this walkthrough.","pos":[1590,1709]},{"pos":[1716,1905],"content":"If you are using an operating system that is older than <ph id=\"ph1\">[!INCLUDE[windowsver](~/includes/windowsver-md.md)]</ph>, make sure that <ph id=\"ph2\">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> is installed.","source":"If you are using an operating system that is older than [!INCLUDE[windowsver](~/includes/windowsver-md.md)], make sure that [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] is installed."},{"pos":[1994,2031],"content":"To set up an Excel Add-in application","linkify":"To set up an Excel Add-in application","nodes":[{"content":"To set up an Excel Add-in application","pos":[0,37]}]},{"content":"Start Visual Studio.","pos":[2041,2061]},{"pos":[2071,2138],"content":"On the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, point to <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"On the **File** menu, point to **New**, and then click **Project**."},{"pos":[2148,2300],"content":"In the <bpt id=\"p1\">**</bpt>Installed Templates<ept id=\"p1\">**</ept> pane, expand <bpt id=\"p2\">**</bpt>Visual Basic<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Visual C#<ept id=\"p3\">**</ept>, expand <bpt id=\"p4\">**</bpt>Office<ept id=\"p4\">**</ept>, and then click the version year of the Office product.","source":"In the **Installed Templates** pane, expand **Visual Basic** or **Visual C#**, expand **Office**, and then click the version year of the Office product."},{"pos":[2310,2371],"content":"In the <bpt id=\"p1\">**</bpt>Templates<ept id=\"p1\">**</ept> pane, click <bpt id=\"p2\">**</bpt>Excel <ph id=\"ph1\">\\&lt;</ph>version&gt; Add-in<ept id=\"p2\">**</ept>.","source":"In the **Templates** pane, click **Excel \\<version> Add-in**."},{"pos":[2381,2523],"content":"Look at the top of the <bpt id=\"p1\">**</bpt>Templates<ept id=\"p1\">**</ept> pane to make sure that <bpt id=\"p2\">**</bpt>.NET Framework 4<ept id=\"p2\">**</ept>, or a later version, appears in the <bpt id=\"p3\">**</bpt>Target Framework<ept id=\"p3\">**</ept> box.","source":"Look at the top of the **Templates** pane to make sure that **.NET Framework 4**, or a later version, appears in the **Target Framework** box."},{"pos":[2533,2598],"content":"Type a name for your project in the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box, if you want to.","source":"Type a name for your project in the **Name** box, if you want to."},{"pos":[2608,2621],"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Click **OK**."},{"pos":[2631,2680],"content":"The new project appears in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>.","source":"The new project appears in **Solution Explorer**."},{"pos":[2690,2707],"content":"To add references","linkify":"To add references","nodes":[{"content":"To add references","pos":[0,17]}]},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click your project's name and then click <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept>.","pos":[2717,2808],"source":"In **Solution Explorer**, right-click your project's name and then click **Add Reference**."},{"content":"The <bpt id=\"p1\">**</bpt>Add Reference<ept id=\"p1\">**</ept> dialog box appears.","pos":[2809,2850],"source":" The **Add Reference** dialog box appears."},{"content":"On the <bpt id=\"p1\">**</bpt>Assemblies<ept id=\"p1\">**</ept> tab, select <bpt id=\"p2\">**</bpt>Microsoft.Office.Interop.Excel<ept id=\"p2\">**</ept>, version <ph id=\"ph1\">`&lt;version&gt;.0.0.0`</ph> (for a key to the Office product version numbers, see <bpt id=\"p3\">[</bpt>Microsoft Versions<ept id=\"p3\">](https://en.wikipedia.org/wiki/Microsoft_Office#Versions)</ept>), in the <bpt id=\"p4\">**</bpt>Component Name<ept id=\"p4\">**</ept> list, and then hold down the CTRL key and select <bpt id=\"p5\">**</bpt>Microsoft.Office.Interop.Word<ept id=\"p5\">**</ept>, <ph id=\"ph2\">`version &lt;version&gt;.0.0.0`</ph>.","pos":[2860,3226],"source":"On the **Assemblies** tab, select **Microsoft.Office.Interop.Excel**, version `<version>.0.0.0` (for a key to the Office product version numbers, see [Microsoft Versions](https://en.wikipedia.org/wiki/Microsoft_Office#Versions)), in the **Component Name** list, and then hold down the CTRL key and select **Microsoft.Office.Interop.Word**, `version <version>.0.0.0`."},{"content":"If you do not see the assemblies, you may need to ensure they are installed and displayed (see <bpt id=\"p1\">[</bpt>How to: Install Office Primary Interop Assemblies<ept id=\"p1\">](/visualstudio/vsto/how-to-install-office-primary-interop-assemblies)</ept>).","pos":[3227,3444],"source":" If you do not see the assemblies, you may need to ensure they are installed and displayed (see [How to: Install Office Primary Interop Assemblies](/visualstudio/vsto/how-to-install-office-primary-interop-assemblies))."},{"pos":[3454,3467],"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Click **OK**."},{"pos":[3477,3532],"content":"To add necessary Imports statements or using directives","linkify":"To add necessary Imports statements or using directives","nodes":[{"content":"To add necessary Imports statements or using directives","pos":[0,55]}]},{"pos":[3542,3655],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the <bpt id=\"p2\">**</bpt>ThisAddIn.vb<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>ThisAddIn.cs<ept id=\"p3\">**</ept> file and then click <bpt id=\"p4\">**</bpt>View Code<ept id=\"p4\">**</ept>.","source":"In **Solution Explorer**, right-click the **ThisAddIn.vb** or **ThisAddIn.cs** file and then click **View Code**."},{"pos":[3665,3806],"content":"Add the following <ph id=\"ph1\">`Imports`</ph> statements (Visual Basic) or <ph id=\"ph2\">`using`</ph> directives (C#) to the top of the code file if they are not already present.","source":"Add the following `Imports` statements (Visual Basic) or `using` directives (C#) to the top of the code file if they are not already present."},{"pos":[4079,4112],"content":"To create a list of bank accounts","linkify":"To create a list of bank accounts","nodes":[{"content":"To create a list of bank accounts","pos":[0,33]}]},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click your project's name, click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Class<ept id=\"p3\">**</ept>.","pos":[4122,4221],"source":"In **Solution Explorer**, right-click your project's name, click **Add**, and then click **Class**."},{"content":"Name the class Account.vb if you are using Visual Basic or Account.cs if you are using C#.","pos":[4222,4312]},{"content":"Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>.","pos":[4313,4327],"source":" Click **Add**."},{"content":"Replace the definition of the <ph id=\"ph1\">`Account`</ph> class with the following code.","pos":[4337,4407],"source":"Replace the definition of the `Account` class with the following code."},{"content":"The class definitions use <bpt id=\"p1\">*</bpt>auto-implemented properties<ept id=\"p1\">*</ept>.","pos":[4408,4464],"source":" The class definitions use *auto-implemented properties*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Auto-Implemented Properties<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/auto-implemented-properties.md)</ept>.","pos":[4465,4622],"source":" For more information, see [Auto-Implemented Properties](../../../visual-basic/programming-guide/language-features/procedures/auto-implemented-properties.md)."},{"content":"To create a <ph id=\"ph1\">`bankAccounts`</ph> list that contains two accounts, add the following code to the <ph id=\"ph2\">`ThisAddIn_Startup`</ph> method in <bpt id=\"p1\">*</bpt>ThisAddIn.vb<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>ThisAddIn.cs<ept id=\"p2\">*</ept>.","pos":[4893,5046],"source":"To create a `bankAccounts` list that contains two accounts, add the following code to the `ThisAddIn_Startup` method in *ThisAddIn.vb* or *ThisAddIn.cs*."},{"content":"The list declarations use <bpt id=\"p1\">*</bpt>collection initializers<ept id=\"p1\">*</ept>.","pos":[5047,5099],"source":" The list declarations use *collection initializers*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Collection Initializers<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.","pos":[5100,5244],"source":" For more information, see [Collection Initializers](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)."},{"pos":[5519,5542],"content":"To export data to Excel","linkify":"To export data to Excel","nodes":[{"content":"To export data to Excel","pos":[0,23]}]},{"content":"In the same file, add the following method to the <ph id=\"ph1\">`ThisAddIn`</ph> class.","pos":[5552,5620],"source":"In the same file, add the following method to the `ThisAddIn` class."},{"content":"The method sets up an Excel workbook and exports data to it.","pos":[5621,5681]},{"content":"Two new C# features are used in this method.","pos":[5957,6001]},{"content":"Both of these features already exist in Visual Basic.","pos":[6002,6055]},{"content":"Method <bpt id=\"p1\">[</bpt>Add<ept id=\"p1\">](&lt;xref:Microsoft.Office.Interop.Excel.Workbooks.Add%2A&gt;)</ept> has an <bpt id=\"p2\">*</bpt>optional parameter<ept id=\"p2\">*</ept> for specifying a particular template.","pos":[6069,6203],"source":"Method [Add](<xref:Microsoft.Office.Interop.Excel.Workbooks.Add%2A>) has an *optional parameter* for specifying a particular template."},{"content":"Optional parameters, new in <ph id=\"ph1\">[!INCLUDE[csharp_dev10_long](~/includes/csharp-dev10-long-md.md)]</ph>, enable you to omit the argument for that parameter if you want to use the parameter's default value.","pos":[6204,6399],"source":" Optional parameters, new in [!INCLUDE[csharp_dev10_long](~/includes/csharp-dev10-long-md.md)], enable you to omit the argument for that parameter if you want to use the parameter's default value."},{"content":"Because no argument is sent in the previous example, <ph id=\"ph1\">`Add`</ph> uses the default template and creates a new workbook.","pos":[6400,6512],"source":" Because no argument is sent in the previous example, `Add` uses the default template and creates a new workbook."},{"content":"The equivalent statement in earlier versions of C# requires a placeholder argument: <ph id=\"ph1\">`excelApp.Workbooks.Add(Type.Missing)`</ph>.","pos":[6513,6636],"source":" The equivalent statement in earlier versions of C# requires a placeholder argument: `excelApp.Workbooks.Add(Type.Missing)`."},{"pos":[6651,6795],"content":"For more information, see <bpt id=\"p1\">[</bpt>Named and Optional Arguments<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>.","source":"For more information, see [Named and Optional Arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)."},{"content":"The <ph id=\"ph1\">`Range`</ph> and <ph id=\"ph2\">`Offset`</ph> properties of the <bpt id=\"p1\">[</bpt>Range<ept id=\"p1\">](&lt;xref:Microsoft.Office.Interop.Excel.Range&gt;)</ept> object use the <bpt id=\"p2\">*</bpt>indexed properties<ept id=\"p2\">*</ept> feature.","pos":[6809,6949],"source":"The `Range` and `Offset` properties of the [Range](<xref:Microsoft.Office.Interop.Excel.Range>) object use the *indexed properties* feature."},{"content":"This feature enables you to consume these properties from COM types by using the following typical C# syntax.","pos":[6950,7059]},{"content":"Indexed properties also enable you to use the <ph id=\"ph1\">`Value`</ph> property of the <ph id=\"ph2\">`Range`</ph> object, eliminating the need to use the <ph id=\"ph3\">`Value2`</ph> property.","pos":[7060,7196],"source":" Indexed properties also enable you to use the `Value` property of the `Range` object, eliminating the need to use the `Value2` property."},{"content":"The <ph id=\"ph1\">`Value`</ph> property is indexed, but the index is optional.","pos":[7197,7256],"source":" The `Value` property is indexed, but the index is optional."},{"content":"Optional arguments and indexed properties work together in the following example.","pos":[7257,7338]},{"content":"In earlier versions of the language, the following special syntax is required.","pos":[7491,7569]},{"content":"You cannot create indexed properties of your own.","pos":[7722,7771]},{"content":"The feature only supports consumption of existing indexed properties.","pos":[7772,7841]},{"pos":[7856,8044],"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Use Indexed Properties in COM Interop Programming<ept id=\"p1\">](../../../csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md)</ept>.","source":"For more information, see [How to: Use Indexed Properties in COM Interop Programming](../../../csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md)."},{"pos":[8054,8155],"content":"Add the following code at the end of <ph id=\"ph1\">`DisplayInExcel`</ph> to adjust the column widths to fit the content.","source":"Add the following code at the end of `DisplayInExcel` to adjust the column widths to fit the content."},{"content":"These additions demonstrate another feature in C#: treating <ph id=\"ph1\">`Object`</ph> values returned from COM hosts such as Office as if they have type <bpt id=\"p1\">[</bpt>dynamic<ept id=\"p1\">](../../../csharp/language-reference/keywords/dynamic.md)</ept>.","pos":[8431,8633],"source":"These additions demonstrate another feature in C#: treating `Object` values returned from COM hosts such as Office as if they have type [dynamic](../../../csharp/language-reference/keywords/dynamic.md)."},{"content":"This happens automatically when <bpt id=\"p1\">**</bpt>Embed Interop Types<ept id=\"p1\">**</ept> is set to its default value, <ph id=\"ph1\">`True`</ph>, or, equivalently, when the assembly is referenced by the <bpt id=\"p2\">[</bpt>/link<ept id=\"p2\">](../../../csharp/language-reference/compiler-options/link-compiler-option.md)</ept> compiler option.","pos":[8634,8885],"source":" This happens automatically when **Embed Interop Types** is set to its default value, `True`, or, equivalently, when the assembly is referenced by the [/link](../../../csharp/language-reference/compiler-options/link-compiler-option.md) compiler option."},{"content":"Type <ph id=\"ph1\">`dynamic`</ph> allows late binding, already available in Visual Basic, and avoids the explicit casting required in Visual C# 2008 and earlier versions of the language.","pos":[8886,9053],"source":" Type `dynamic` allows late binding, already available in Visual Basic, and avoids the explicit casting required in Visual C# 2008 and earlier versions of the language."},{"content":"For example, <ph id=\"ph1\">`excelApp.Columns[1]`</ph> returns an <ph id=\"ph2\">`Object`</ph>, and <ph id=\"ph3\">`AutoFit`</ph> is an Excel  <bpt id=\"p1\">[</bpt>Range<ept id=\"p1\">](&lt;xref:Microsoft.Office.Interop.Excel.Range&gt;)</ept> method.","pos":[9064,9207],"source":"For example, `excelApp.Columns[1]` returns an `Object`, and `AutoFit` is an Excel  [Range](<xref:Microsoft.Office.Interop.Excel.Range>) method."},{"content":"Without <ph id=\"ph1\">`dynamic`</ph>, you must cast the object returned by <ph id=\"ph2\">`excelApp.Columns[1]`</ph> as an instance of <ph id=\"ph3\">`Range`</ph> before calling method <ph id=\"ph4\">`AutoFit`</ph>.","pos":[9208,9344],"source":" Without `dynamic`, you must cast the object returned by `excelApp.Columns[1]` as an instance of `Range` before calling method `AutoFit`."},{"content":"For more information about embedding interop types, see procedures \"To find the PIA reference\" and \"To restore the PIA dependency\" later in this topic.","pos":[9489,9640]},{"content":"For more information about <ph id=\"ph1\">`dynamic`</ph>, see <bpt id=\"p1\">[</bpt>dynamic<ept id=\"p1\">](../../../csharp/language-reference/keywords/dynamic.md)</ept> or <bpt id=\"p2\">[</bpt>Using Type dynamic<ept id=\"p2\">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept>.","pos":[9641,9836],"source":" For more information about `dynamic`, see [dynamic](../../../csharp/language-reference/keywords/dynamic.md) or [Using Type dynamic](../../../csharp/programming-guide/types/using-type-dynamic.md)."},{"pos":[9846,9870],"content":"To invoke DisplayInExcel","linkify":"To invoke DisplayInExcel","nodes":[{"content":"To invoke DisplayInExcel","pos":[0,24]}]},{"content":"Add the following code at the end of the <ph id=\"ph1\">`ThisAddIn_StartUp`</ph> method.","pos":[9880,9948],"source":"Add the following code at the end of the `ThisAddIn_StartUp` method."},{"content":"The call to <ph id=\"ph1\">`DisplayInExcel`</ph> contains two arguments.","pos":[9949,10001],"source":" The call to `DisplayInExcel` contains two arguments."},{"content":"The first argument is the name of the list of accounts to be processed.","pos":[10002,10073]},{"content":"The second argument is a multiline lambda expression that defines how the data is to be processed.","pos":[10074,10172]},{"content":"The <ph id=\"ph1\">`ID`</ph> and <ph id=\"ph2\">`balance`</ph> values for each account are displayed in adjacent cells, and the row is displayed in red if the balance is less than zero.","pos":[10173,10318],"source":" The `ID` and `balance` values for each account are displayed in adjacent cells, and the row is displayed in red if the balance is less than zero."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.","pos":[10319,10458],"source":" For more information, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)."},{"content":"To run the program, press F5.","pos":[10733,10762]},{"content":"An Excel worksheet appears that contains the data from the accounts.","pos":[10763,10831]},{"pos":[10841,10863],"content":"To add a Word document","linkify":"To add a Word document","nodes":[{"content":"To add a Word document","pos":[0,22]}]},{"pos":[10873,11010],"content":"Add the following code at the end of the <ph id=\"ph1\">`ThisAddIn_StartUp`</ph> method to create a Word document that contains a link to the Excel workbook.","source":"Add the following code at the end of the `ThisAddIn_StartUp` method to create a Word document that contains a link to the Excel workbook."},{"content":"This code demonstrates several of the new features in C#: the ability to omit the <ph id=\"ph1\">`ref`</ph> keyword in COM programming, named arguments, and optional arguments.","pos":[11290,11446],"source":"This code demonstrates several of the new features in C#: the ability to omit the `ref` keyword in COM programming, named arguments, and optional arguments."},{"content":"These features already exist in Visual Basic.","pos":[11447,11492]},{"content":"The <bpt id=\"p1\">[</bpt>PasteSpecial<ept id=\"p1\">](&lt;xref:Microsoft.Office.Interop.Word.Selection.PasteSpecial%2A&gt;)</ept> method has seven parameters, all of which are defined as optional reference parameters.","pos":[11493,11663],"source":" The [PasteSpecial](<xref:Microsoft.Office.Interop.Word.Selection.PasteSpecial%2A>) method has seven parameters, all of which are defined as optional reference parameters."},{"content":"Named and optional arguments enable you to designate the parameters you want to access by name and to send arguments to only those parameters.","pos":[11664,11806]},{"content":"In this example, arguments are sent to indicate that a link to the workbook on the Clipboard should be created (parameter <ph id=\"ph1\">`Link`</ph>) and that the link is to be displayed in the Word document as an icon (parameter <ph id=\"ph2\">`DisplayAsIcon`</ph>).","pos":[11807,12034],"source":" In this example, arguments are sent to indicate that a link to the workbook on the Clipboard should be created (parameter `Link`) and that the link is to be displayed in the Word document as an icon (parameter `DisplayAsIcon`)."},{"content":"Visual C# also enables you to omit the <ph id=\"ph1\">`ref`</ph> keyword for these arguments.","pos":[12035,12108],"source":" Visual C# also enables you to omit the `ref` keyword for these arguments."},{"pos":[12116,12138],"content":"To run the application","linkify":"To run the application","nodes":[{"content":"To run the application","pos":[0,22]}]},{"content":"Press F5 to run the application.","pos":[12148,12180]},{"content":"Excel starts and displays a table that contains the information from the two accounts in <ph id=\"ph1\">`bankAccounts`</ph>.","pos":[12181,12285],"source":" Excel starts and displays a table that contains the information from the two accounts in `bankAccounts`."},{"content":"Then a Word document appears that contains a link to the Excel table.","pos":[12286,12355]},{"pos":[12365,12398],"content":"To clean up the completed project","linkify":"To clean up the completed project","nodes":[{"content":"To clean up the completed project","pos":[0,33]}]},{"content":"In Visual Studio, click <bpt id=\"p1\">**</bpt>Clean Solution<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Build<ept id=\"p2\">**</ept> menu.","pos":[12408,12473],"source":"In Visual Studio, click **Clean Solution** on the **Build** menu."},{"content":"Otherwise, the add-in will run every time that you open Excel on your computer.","pos":[12474,12553]},{"pos":[12563,12588],"content":"To find the PIA reference","linkify":"To find the PIA reference","nodes":[{"content":"To find the PIA reference","pos":[0,25]}]},{"pos":[12598,12661],"content":"Run the application again, but do not click <bpt id=\"p1\">**</bpt>Clean Solution<ept id=\"p1\">**</ept>.","source":"Run the application again, but do not click **Clean Solution**."},{"content":"Select the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>.","pos":[12671,12692],"source":"Select the **Start**."},{"content":"Locate <bpt id=\"p1\">**</bpt>Microsoft Visual Studio <ph id=\"ph1\">\\&lt;</ph>version&gt;<ept id=\"p1\">**</ept> and open a developer command prompt.","pos":[12693,12775],"source":" Locate **Microsoft Visual Studio \\<version>** and open a developer command prompt."},{"content":"Type <ph id=\"ph1\">`ildasm`</ph> in the Developer Command Prompt for Visual Studio window, and then press ENTER.","pos":[12785,12878],"source":"Type `ildasm` in the Developer Command Prompt for Visual Studio window, and then press ENTER."},{"content":"The IL DASM window appears.","pos":[12879,12906]},{"content":"On the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu in the IL DASM window, select <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Open<ept id=\"p3\">**</ept>.","pos":[12916,12987],"source":"On the **File** menu in the IL DASM window, select **File** > **Open**."},{"content":"Double-click <bpt id=\"p1\">**</bpt>Visual Studio <ph id=\"ph1\">\\&lt;</ph>version&gt;<ept id=\"p1\">**</ept>, and then double-click <bpt id=\"p2\">**</bpt>Projects<ept id=\"p2\">**</ept>.","pos":[12988,13066],"source":" Double-click **Visual Studio \\<version>**, and then double-click **Projects**."},{"content":"Open the folder for your project, and look in the bin/Debug folder for <bpt id=\"p1\">*</bpt>your project name<ept id=\"p1\">*</ept>.dll.","pos":[13067,13162],"source":" Open the folder for your project, and look in the bin/Debug folder for *your project name*.dll."},{"content":"Double-click <bpt id=\"p1\">*</bpt>your project name<ept id=\"p1\">*</ept>.dll.","pos":[13163,13200],"source":" Double-click *your project name*.dll."},{"content":"A new window displays your project's attributes, in addition to references to other modules and assemblies.","pos":[13201,13308]},{"content":"Note that namespaces <ph id=\"ph1\">`Microsoft.Office.Interop.Excel`</ph> and <ph id=\"ph2\">`Microsoft.Office.Interop.Word`</ph> are included in the assembly.","pos":[13309,13428],"source":" Note that namespaces `Microsoft.Office.Interop.Excel` and `Microsoft.Office.Interop.Word` are included in the assembly."},{"content":"By default in Visual Studio, the compiler imports the types you need from a referenced PIA into your assembly.","pos":[13429,13539]},{"pos":[13550,13674],"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: View Assembly Contents<ept id=\"p1\">](../../../framework/app-domains/how-to-view-assembly-contents.md)</ept>.","source":"For more information, see [How to: View Assembly Contents](../../../framework/app-domains/how-to-view-assembly-contents.md)."},{"content":"Double-click the <bpt id=\"p1\">**</bpt>MANIFEST<ept id=\"p1\">**</ept> icon.","pos":[13684,13719],"source":"Double-click the **MANIFEST** icon."},{"content":"A window appears that contains a list of assemblies that contain items referenced by the project.","pos":[13720,13817]},{"content":"<ph id=\"ph1\">`Microsoft.Office.Interop.Excel`</ph> and <ph id=\"ph2\">`Microsoft.Office.Interop.Word`</ph> are not included in the list.","pos":[13818,13916],"source":"`Microsoft.Office.Interop.Excel` and `Microsoft.Office.Interop.Word` are not included in the list."},{"content":"Because the types your project needs have been imported into your assembly, references to a PIA are not required.","pos":[13917,14030]},{"content":"This makes deployment easier.","pos":[14031,14060]},{"content":"The PIAs do not have to be present on the user's computer, and because an application does not require deployment of a specific version of a PIA, applications can be designed to work with multiple versions of Office, provided that the necessary APIs exist in all versions.","pos":[14061,14333]},{"content":"Because deployment of PIAs is no longer necessary, you can create an application in advanced scenarios that works with multiple versions of Office, including earlier versions.","pos":[14344,14519]},{"content":"However, this works only if your code does not use any APIs that are not available in the version of Office you are working with.","pos":[14520,14649]},{"content":"It is not always clear whether a particular API was available in an earlier version, and for that reason working with earlier versions of Office is not recommended.","pos":[14650,14814]},{"pos":[14826,15014],"content":"[!NOTE]\nOffice did not publish PIAs before Office 2003. Therefore, the only way to generate an interop assembly for Office 2002 or earlier versions is by importing the COM reference.","leadings":["","    > "],"nodes":[{"content":"Office did not publish PIAs before Office 2003. Therefore, the only way to generate an interop assembly for Office 2002 or earlier versions is by importing the COM reference.","pos":[8,182],"nodes":[{"content":"Office did not publish PIAs before Office 2003.","pos":[0,47]},{"content":"Therefore, the only way to generate an interop assembly for Office 2002 or earlier versions is by importing the COM reference.","pos":[48,174]}]}]},{"content":"Close the manifest window and the assembly window.","pos":[15024,15074]},{"pos":[15084,15113],"content":"To restore the PIA dependency","linkify":"To restore the PIA dependency","nodes":[{"content":"To restore the PIA dependency","pos":[0,29]}]},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, click the <bpt id=\"p2\">**</bpt>Show All Files<ept id=\"p2\">**</ept> button.","pos":[15123,15185],"source":"In **Solution Explorer**, click the **Show All Files** button."},{"content":"Expand the <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept> folder and select <bpt id=\"p2\">**</bpt>Microsoft.Office.Interop.Excel<ept id=\"p2\">**</ept>.","pos":[15186,15265],"source":" Expand the **References** folder and select **Microsoft.Office.Interop.Excel**."},{"content":"Press F4 to display the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window.","pos":[15266,15312],"source":" Press F4 to display the **Properties** window."},{"pos":[15322,15423],"content":"In the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, change the <bpt id=\"p2\">**</bpt>Embed Interop Types<ept id=\"p2\">**</ept> property from <bpt id=\"p3\">**</bpt>True<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>False<ept id=\"p4\">**</ept>.","source":"In the **Properties** window, change the **Embed Interop Types** property from **True** to **False**."},{"pos":[15433,15508],"content":"Repeat steps 1 and 2 in this procedure for <ph id=\"ph1\">`Microsoft.Office.Interop.Word`</ph>.","source":"Repeat steps 1 and 2 in this procedure for `Microsoft.Office.Interop.Word`."},{"pos":[15518,15606],"content":"In C#, comment out the two calls to <ph id=\"ph1\">`Autofit`</ph> at the end of the <ph id=\"ph2\">`DisplayInExcel`</ph> method.","source":"In C#, comment out the two calls to `Autofit` at the end of the `DisplayInExcel` method."},{"content":"Press F5 to verify that the project still runs correctly.","pos":[15616,15673]},{"content":"Repeat steps 1-3 from the previous procedure to open the assembly window.","pos":[15683,15756]},{"content":"Notice that <ph id=\"ph1\">`Microsoft.Office.Interop.Word`</ph> and <ph id=\"ph2\">`Microsoft.Office.Interop.Excel`</ph> are no longer in the list of embedded assemblies.","pos":[15757,15887],"source":" Notice that `Microsoft.Office.Interop.Word` and `Microsoft.Office.Interop.Excel` are no longer in the list of embedded assemblies."},{"content":"Double-click the <bpt id=\"p1\">**</bpt>MANIFEST<ept id=\"p1\">**</ept> icon and scroll through the list of referenced assemblies.","pos":[15897,15985],"source":"Double-click the **MANIFEST** icon and scroll through the list of referenced assemblies."},{"content":"Both <ph id=\"ph1\">`Microsoft.Office.Interop.Word`</ph> and <ph id=\"ph2\">`Microsoft.Office.Interop.Excel`</ph> are in the list.","pos":[15986,16076],"source":" Both `Microsoft.Office.Interop.Word` and `Microsoft.Office.Interop.Excel` are in the list."},{"content":"Because the application references the Excel and Word PIAs, and the <bpt id=\"p1\">**</bpt>Embed Interop Types<ept id=\"p1\">**</ept> property is set to <bpt id=\"p2\">**</bpt>False<ept id=\"p2\">**</ept>, both assemblies must exist on the end user's computer.","pos":[16077,16253],"source":" Because the application references the Excel and Word PIAs, and the **Embed Interop Types** property is set to **False**, both assemblies must exist on the end user's computer."},{"pos":[16263,16362],"content":"In Visual Studio, click <bpt id=\"p1\">**</bpt>Clean Solution<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Build<ept id=\"p2\">**</ept> menu to clean up the completed project.","source":"In Visual Studio, click **Clean Solution** on the **Build** menu to clean up the completed project."},{"pos":[16371,16379],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[16383,16528],"content":"<bpt id=\"p1\">[</bpt>Auto-Implemented Properties (Visual Basic)<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/auto-implemented-properties.md)</ept>","source":"[Auto-Implemented Properties (Visual Basic)](../../../visual-basic/programming-guide/language-features/procedures/auto-implemented-properties.md)"},{"pos":[16531,16651],"content":"<bpt id=\"p1\">[</bpt>Auto-Implemented Properties (C#)<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)</ept>","source":"[Auto-Implemented Properties (C#)](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)"},{"pos":[16654,16771],"content":"<bpt id=\"p1\">[</bpt>Collection Initializers<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>","source":"[Collection Initializers](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)"},{"pos":[16774,16903],"content":"<bpt id=\"p1\">[</bpt>Object and Collection Initializers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>","source":"[Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)"},{"pos":[16906,17020],"content":"<bpt id=\"p1\">[</bpt>Optional Parameters<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/optional-parameters.md)</ept>","source":"[Optional Parameters](../../../visual-basic/programming-guide/language-features/procedures/optional-parameters.md)"},{"pos":[17023,17181],"content":"<bpt id=\"p1\">[</bpt>Passing Arguments by Position and by Name<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-position-and-by-name.md)</ept>","source":"[Passing Arguments by Position and by Name](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-position-and-by-name.md)"},{"pos":[17184,17301],"content":"<bpt id=\"p1\">[</bpt>Named and Optional Arguments<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>","source":"[Named and Optional Arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)"},{"pos":[17304,17415],"content":"<bpt id=\"p1\">[</bpt>Early and Late Binding<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)</ept>","source":"[Early and Late Binding](../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)"},{"pos":[17418,17483],"content":"<bpt id=\"p1\">[</bpt>dynamic<ept id=\"p1\">](../../../csharp/language-reference/keywords/dynamic.md)</ept>","source":"[dynamic](../../../csharp/language-reference/keywords/dynamic.md)"},{"pos":[17486,17569],"content":"<bpt id=\"p1\">[</bpt>Using Type dynamic<ept id=\"p1\">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept>","source":"[Using Type dynamic](../../../csharp/programming-guide/types/using-type-dynamic.md)"},{"pos":[17572,17699],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions (Visual Basic)<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>","source":"[Lambda Expressions (Visual Basic)](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)"},{"pos":[17702,17817],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions (C#)<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>","source":"[Lambda Expressions (C#)](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)"},{"pos":[17820,17981],"content":"<bpt id=\"p1\">[</bpt>How to: Use Indexed Properties in COM Interop Programming<ept id=\"p1\">](../../../csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md)</ept>","source":"[How to: Use Indexed Properties in COM Interop Programming](../../../csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md)"},{"pos":[17984,18174],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Embedding Type Information from Microsoft Office Assemblies in Visual Studio<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ee317478(v%3dvs.120))</ept>","source":"[Walkthrough: Embedding Type Information from Microsoft Office Assemblies in Visual Studio](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ee317478(v%3dvs.120))"},{"pos":[18177,18362],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Embedding Types from Managed Assemblies<ept id=\"p1\">](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)</ept>","source":"[Walkthrough: Embedding Types from Managed Assemblies](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)"},{"pos":[18365,18495],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Creating Your First VSTO Add-in for Excel<ept id=\"p1\">](/visualstudio/vsto/walkthrough-creating-your-first-vsto-add-in-for-excel)</ept>","source":"[Walkthrough: Creating Your First VSTO Add-in for Excel](/visualstudio/vsto/walkthrough-creating-your-first-vsto-add-in-for-excel)"},{"pos":[18498,18573],"content":"<bpt id=\"p1\">[</bpt>COM Interop<ept id=\"p1\">](../../../visual-basic/programming-guide/com-interop/index.md)</ept>","source":"[COM Interop](../../../visual-basic/programming-guide/com-interop/index.md)"},{"pos":[18576,18646],"content":"<bpt id=\"p1\">[</bpt>Interoperability<ept id=\"p1\">](../../../csharp/programming-guide/interop/index.md)</ept>","source":"[Interoperability](../../../csharp/programming-guide/interop/index.md)"}]}