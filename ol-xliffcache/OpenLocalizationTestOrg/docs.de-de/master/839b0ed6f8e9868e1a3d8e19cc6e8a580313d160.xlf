<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-generate-primary-interop-assemblies-using-tlbimp-exe.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">839b0ed6f8e9868e1a3d8e19cc6e8a580313d160</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\how-to-generate-primary-interop-assemblies-using-tlbimp-exe.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8bbfaf13f67d5f24fd8dd691f90079a93d60e60e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a9d454b02748eaf772c5497282bb56db8f36091</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Generate Primary Interop Assemblies Using Tlbimp.exe</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Generate Primary Interop Assemblies Using Tlbimp.exe</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>There are two ways to generate a primary interop assembly:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">[</bpt>Type Library Importer (Tlbimp.exe)<ept id="p1">](../../../docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> provided by the <ph id="ph1">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The most straightforward way to produce primary interop assemblies is to use the <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](../../../docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Tlbimp.exe provides the following safeguards:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Checks for other registered primary interop assemblies before creating new interop assemblies for any nested type library references.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Fails to emit the primary interop assembly if you do not specify either the container or file name to give the primary interop assembly a strong name.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Fails to emit a primary interop assembly if you omit references to dependent assemblies.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Fails to emit a primary interop assembly if you add references to dependent assemblies that are not primary interop assemblies.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating primary interop assemblies manually in source code by using a language that is compliant with the Common Language Specification (CLS), such as C#.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This approach is useful when a type library is unavailable.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You must have a cryptographic key pair to sign the assembly with a strong name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Creating A Key Pair<ept id="p1">](../../../docs/framework/app-domains/how-to-create-a-public-private-key-pair.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To generate a primary interop assembly using Tlbimp.exe</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>At the command prompt, type:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>tlbimp<ept id="p1">**</ept> <bpt id="p2">*</bpt>tlbfile<ept id="p2">*</ept>  <bpt id="p3">**</bpt>/primary /keyfile:<ept id="p3">**</ept> <bpt id="p4">*</bpt>filename<ept id="p4">*</ept> <bpt id="p5">**</bpt>/out:<ept id="p5">**</ept> <bpt id="p6">*</bpt>assemblyname<ept id="p6">*</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this command, <bpt id="p1">*</bpt>tlbfile<ept id="p1">*</ept> is the file containing the COM type library, <bpt id="p2">*</bpt>filename<ept id="p2">*</ept> is the name of the container or file that contains the key pair, and <bpt id="p3">*</bpt>assemblyname<ept id="p3">*</ept> is the name of the assembly to sign with a strong name.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Primary interop assemblies can reference only other primary interop assemblies.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If your assembly references types from a third-party COM type library, you must obtain a primary interop assembly from the publisher before you can generate your primary interop assembly.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you are the publisher, you must generate a primary interop assembly for the dependent type library before generating the referencing primary interop assembly.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A dependent primary interop assembly with a version number that differs from that of the original type library is not discoverable when installed in the current directory.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You must either register the dependent primary interop assembly in the Windows registry or use the <bpt id="p1">**</bpt>/reference<ept id="p1">**</ept> option to be sure that Tlbimp.exe finds the dependent DLL.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also wrap multiple versions of a type library.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For instructions, see <bpt id="p1">[</bpt>How to: Wrap Multiple Versions of Type Libraries<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1565h6hc(v=vs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example imports the COM type library <ph id="ph1">`LibUtil.tlb`</ph> and signs the assembly <ph id="ph2">`LibUtil.dll`</ph> with a strong name using the key file <ph id="ph3">`CompanyA.snk`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>By omitting a specific namespace name, this example produces the default namespace, <ph id="ph1">`LibUtil`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For a more descriptive name (using the <bpt id="p1">*</bpt>VendorName<ept id="p1">*</ept>.<bpt id="p2">*</bpt>LibraryName<ept id="p2">*</ept> naming guideline), the following example overrides the default assembly file name and namespace name.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example imports <ph id="ph1">`MyLib.tlb`</ph>, which references <ph id="ph2">`CompanyA.LibUtil.dll`</ph>, and signs the assembly <ph id="ph3">`CompanyB.MyLib.dll`</ph> with a strong name using the key file <ph id="ph4">`CompanyB.snk`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The namespace, <ph id="ph1">`CompanyB.MyLib`</ph>, overrides the default namespace name.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Register Primary Interop Assemblies<ept id="p1">](../../../docs/framework/interop/how-to-register-primary-interop-assemblies.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>