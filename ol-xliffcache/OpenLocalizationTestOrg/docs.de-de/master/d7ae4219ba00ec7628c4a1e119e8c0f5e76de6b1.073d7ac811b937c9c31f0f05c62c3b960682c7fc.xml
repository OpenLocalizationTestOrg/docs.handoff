{"content":"---\ntitle: \"Managed Thread States | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"threading [.NET Framework], states\"\nms.assetid: 63890d5e-6025-4a7c-aaf0-d8bfd54b455f\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Managed Thread States\nThe property <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> provides a bit mask that indicates the thread's current state. A thread is always in at least one of the possible states in the <xref:System.Threading.ThreadState> enumeration, and can be in multiple states at the same time.  \n  \n> [!IMPORTANT]\n>  Thread state is only of interest in a few debugging scenarios. Your code should never use thread state to synchronize the activities of threads.  \n  \n When you create a managed thread, it is in the <xref:System.Threading.ThreadState> state. The thread remains in the <xref:System.Threading.ThreadState> state until it is moved into the started state by the operating system. Calling <xref:System.Threading.Thread.Start%2A> lets the operating system know that the thread can be started; it does not change the state of the thread.  \n  \n Unmanaged threads that enter the managed environment are already in the started state. Once a thread is in the started state, a number of actions can cause it to change states. The following table lists the actions that cause a change of state, along with the corresponding new state.  \n  \n|Action|Resulting new state|  \n|------------|-------------------------|  \n|The constructor for the <xref:System.Threading.Thread> class is called.|<xref:System.Threading.ThreadState>|  \n|Another thread calls <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>.|<xref:System.Threading.ThreadState>|  \n|The thread responds to <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> and starts running.|<xref:System.Threading.ThreadState>|  \n|The thread calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName>.|<xref:System.Threading.ThreadState>|  \n|The thread calls <xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName> on another object.|<xref:System.Threading.ThreadState>|  \n|The thread calls <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> on another thread.|<xref:System.Threading.ThreadState>|  \n|Another thread calls <xref:System.Threading.Thread.Suspend%2A?displayProperty=fullName>.|<xref:System.Threading.ThreadState>|  \n|The thread responds to a <xref:System.Threading.Thread.Suspend%2A?displayProperty=fullName> request.|<xref:System.Threading.ThreadState>|  \n|Another thread calls <xref:System.Threading.Thread.Resume%2A?displayProperty=fullName>.|<xref:System.Threading.ThreadState>|  \n|Another thread calls <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.|<xref:System.Threading.ThreadState>|  \n|The thread responds to an <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.|<xref:System.Threading.ThreadState>, then <xref:System.Threading.ThreadState>|  \n  \n Because the <xref:System.Threading.ThreadState> state has a value of 0, it is not possible to perform a bit test to discover this state. Instead, the following test (in pseudo-code) can be used:  \n  \n```  \nif ((state & (Unstarted | Stopped)) == 0)   // implies Running     \n```  \n  \n Threads are often in more than one state at any given time. For example, if a thread is blocked on a <xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName> call and another thread calls <xref:System.Threading.Thread.Abort%2A> on that same thread, the thread will be in both the <xref:System.Threading.ThreadState> and the <xref:System.Threading.ThreadState> states at the same time. In that case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException>.  \n  \n Once a thread leaves the <xref:System.Threading.ThreadState> state as the result of a call to <xref:System.Threading.Thread.Start%2A>, it can never return to the <xref:System.Threading.ThreadState> state. A thread can never leave the <xref:System.Threading.ThreadState> state.  \n  \n## See Also  \n <xref:System.Threading.ThreadAbortException>   \n <xref:System.Threading.Thread>   \n <xref:System.Threading.ThreadState>   \n [Threading](../../../docs/standard/threading/index.md)","nodes":[{"pos":[4,398],"nodes":[{"content":"Managed Thread States | Microsoft Docs","nodes":[{"pos":[0,38],"content":"Managed Thread States | Microsoft Docs","nodes":[{"content":"Managed Thread States | Microsoft Docs","pos":[0,38]}]}],"pos":[6,47],"yaml":true}],"content":"title: \"Managed Thread States | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"threading [.NET Framework], states\"\nms.assetid: 63890d5e-6025-4a7c-aaf0-d8bfd54b455f\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[405,426],"content":"Managed Thread States","linkify":"Managed Thread States","nodes":[{"content":"Managed Thread States","pos":[0,21]}]},{"content":"The property <ph id=\"ph1\">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;</ph> provides a bit mask that indicates the thread's current state.","pos":[427,573],"source":"The property <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> provides a bit mask that indicates the thread's current state."},{"content":"A thread is always in at least one of the possible states in the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph> enumeration, and can be in multiple states at the same time.","pos":[574,735],"source":" A thread is always in at least one of the possible states in the <xref:System.Threading.ThreadState> enumeration, and can be in multiple states at the same time."},{"pos":[743,903],"content":"[!IMPORTANT]\n Thread state is only of interest in a few debugging scenarios. Your code should never use thread state to synchronize the activities of threads.","leadings":["","> "],"nodes":[{"content":"Thread state is only of interest in a few debugging scenarios. Your code should never use thread state to synchronize the activities of threads.","pos":[14,158],"nodes":[{"content":"Thread state is only of interest in a few debugging scenarios.","pos":[0,62]},{"content":"Your code should never use thread state to synchronize the activities of threads.","pos":[63,144]}]}]},{"content":"When you create a managed thread, it is in the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph> state.","pos":[910,999],"source":"When you create a managed thread, it is in the <xref:System.Threading.ThreadState> state."},{"content":"The thread remains in the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph> state until it is moved into the started state by the operating system.","pos":[1000,1133],"source":" The thread remains in the <xref:System.Threading.ThreadState> state until it is moved into the started state by the operating system."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> lets the operating system know that the thread can be started; it does not change the state of the thread.","pos":[1134,1288],"source":" Calling <xref:System.Threading.Thread.Start%2A> lets the operating system know that the thread can be started; it does not change the state of the thread."},{"content":"Unmanaged threads that enter the managed environment are already in the started state.","pos":[1295,1381]},{"content":"Once a thread is in the started state, a number of actions can cause it to change states.","pos":[1382,1471]},{"content":"The following table lists the actions that cause a change of state, along with the corresponding new state.","pos":[1472,1579]},{"content":"Action","pos":[1586,1592]},{"content":"Resulting new state","pos":[1593,1612]},{"content":"The constructor for the <ph id=\"ph1\">&lt;xref:System.Threading.Thread&gt;</ph> class is called.","pos":[1660,1731],"source":"The constructor for the <xref:System.Threading.Thread> class is called."},{"content":"Another thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</ph>.","pos":[1772,1858],"source":"Another thread calls <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>."},{"content":"The thread responds to <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</ph> and starts running.","pos":[1899,2006],"source":"The thread responds to <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> and starts running."},{"content":"The thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph>.","pos":[2047,2129],"source":"The thread calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName>."},{"content":"The thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt;</ph> on another object.","pos":[2170,2270],"source":"The thread calls <xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName> on another object."},{"content":"The thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;</ph> on another thread.","pos":[2311,2410],"source":"The thread calls <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> on another thread."},{"content":"Another thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Suspend%2A?displayProperty=fullName&gt;</ph>.","pos":[2451,2539],"source":"Another thread calls <xref:System.Threading.Thread.Suspend%2A?displayProperty=fullName>."},{"content":"The thread responds to a <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Suspend%2A?displayProperty=fullName&gt;</ph> request.","pos":[2580,2680],"source":"The thread responds to a <xref:System.Threading.Thread.Suspend%2A?displayProperty=fullName> request."},{"content":"Another thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Resume%2A?displayProperty=fullName&gt;</ph>.","pos":[2721,2808],"source":"Another thread calls <xref:System.Threading.Thread.Resume%2A?displayProperty=fullName>."},{"content":"Another thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph>.","pos":[2849,2935],"source":"Another thread calls <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>."},{"content":"The thread responds to an <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph>.","pos":[2976,3067],"source":"The thread responds to an <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph>, then <ph id=\"ph2\">&lt;xref:System.Threading.ThreadState&gt;</ph>","pos":[3068,3145],"source":"<xref:System.Threading.ThreadState>, then <xref:System.Threading.ThreadState>"},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph> state has a value of 0, it is not possible to perform a bit test to discover this state.","pos":[3153,3289],"source":"Because the <xref:System.Threading.ThreadState> state has a value of 0, it is not possible to perform a bit test to discover this state."},{"content":"Instead, the following test (in pseudo-code) can be used:","pos":[3290,3347]},{"content":"Threads are often in more than one state at any given time.","pos":[3437,3496]},{"content":"For example, if a thread is blocked on a <ph id=\"ph1\">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt;</ph> call and another thread calls <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> on that same thread, the thread will be in both the <ph id=\"ph3\">&lt;xref:System.Threading.ThreadState&gt;</ph> and the <ph id=\"ph4\">&lt;xref:System.Threading.ThreadState&gt;</ph> states at the same time.","pos":[3497,3829],"source":" For example, if a thread is blocked on a <xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName> call and another thread calls <xref:System.Threading.Thread.Abort%2A> on that same thread, the thread will be in both the <xref:System.Threading.ThreadState> and the <xref:System.Threading.ThreadState> states at the same time."},{"content":"In that case, as soon as the thread returns from the call to <ph id=\"ph1\">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> or is interrupted, it will receive the <ph id=\"ph2\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>.","pos":[3830,4015],"source":" In that case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException>."},{"content":"Once a thread leaves the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph> state as the result of a call to <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>, it can never return to the <ph id=\"ph3\">&lt;xref:System.Threading.ThreadState&gt;</ph> state.","pos":[4022,4226],"source":"Once a thread leaves the <xref:System.Threading.ThreadState> state as the result of a call to <xref:System.Threading.Thread.Start%2A>, it can never return to the <xref:System.Threading.ThreadState> state."},{"content":"A thread can never leave the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph> state.","pos":[4227,4298],"source":" A thread can never leave the <xref:System.Threading.ThreadState> state."},{"pos":[4307,4315],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>","pos":[4319,4363],"source":"<xref:System.Threading.ThreadAbortException> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Thread&gt;</ph>","pos":[4368,4398],"source":"<xref:System.Threading.Thread> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph>","pos":[4403,4438],"source":"<xref:System.Threading.ThreadState> "},{"content":"<bpt id=\"p1\">[</bpt>Threading<ept id=\"p1\">](../../../docs/standard/threading/index.md)</ept>","pos":[4443,4497],"source":"[Threading](../../../docs/standard/threading/index.md)"}]}