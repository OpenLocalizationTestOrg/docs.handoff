{"content":"---\ntitle: \"Maintaining Name-Value Pairs (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 57ac2072-d9f5-432b-84f0-a889c62fd813\n---\n# Maintaining Name/Value Pairs (Visual Basic)\nMany applications have to maintain information that is best kept as name/value pairs. This information might be configuration information or global settings. [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] contains some methods that make it easy to keep a set of name/value pairs. You can either keep the information as attributes or as a set of child elements.  \n  \n One difference between keeping the information as attributes or as child elements is that attributes have the constraint that there can be only one attribute with a particular name for an element. This limitation does not apply to child elements.  \n  \n## SetAttributeValue and SetElementValue  \n The two methods that facilitate keeping name/value pairs are <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> and <xref:System.Xml.Linq.XElement.SetElementValue%2A>. These two methods have similar semantics.  \n  \n <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> can add, modify, or remove attributes of an element.  \n  \n-   If you call <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> with a name of an attribute that does not exist, the method creates a new attribute and adds it to the specified element.  \n  \n-   If you call <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> with a name of an existing attribute and with some specified content, the contents of the attribute are replaced with the specified content.  \n  \n-   If you call <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> with a name of an existing attribute, and specify null for the content, the attribute is removed from its parent.  \n  \n <xref:System.Xml.Linq.XElement.SetElementValue%2A> can add, modify, or remove child elements of an element.  \n  \n-   If you call <xref:System.Xml.Linq.XElement.SetElementValue%2A> with a name of a child element that does not exist, the method creates a new element and adds it to the specified element.  \n  \n-   If you call <xref:System.Xml.Linq.XElement.SetElementValue%2A> with a name of an existing element and with some specified content, the contents of the element are replaced with the specified content.  \n  \n-   If you call <xref:System.Xml.Linq.XElement.SetElementValue%2A> with a name of an existing element, and specify null for the content, the element is removed from its parent.  \n  \n## Example  \n The following example creates an element with no attributes. It then uses the <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> method to create and maintain a list of name/value pairs.  \n  \n```vb  \n' Create an element with no content.  \nDim root As XElement = <Root/>  \n  \n' Add a number of name/value pairs as attributes.  \nroot.SetAttributeValue(\"Top\", 22)  \nroot.SetAttributeValue(\"Left\", 20)  \nroot.SetAttributeValue(\"Bottom\", 122)  \nroot.SetAttributeValue(\"Right\", 300)  \nroot.SetAttributeValue(\"DefaultColor\", \"Color.Red\")  \nConsole.WriteLine(root)  \n  \n' Replace the value of Top.  \nroot.SetAttributeValue(\"Top\", 10)  \nConsole.WriteLine(root)  \n  \n' Remove DefaultColor.  \nroot.SetAttributeValue(\"DefaultColor\", Nothing)  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root Top=\"22\" Left=\"20\" Bottom=\"122\" Right=\"300\" DefaultColor=\"Color.Red\" />  \n<Root Top=\"10\" Left=\"20\" Bottom=\"122\" Right=\"300\" DefaultColor=\"Color.Red\" />  \n<Root Top=\"10\" Left=\"20\" Bottom=\"122\" Right=\"300\" />  \n```  \n  \n## Example  \n The following example creates an element with no child elements. It then uses the <xref:System.Xml.Linq.XElement.SetElementValue%2A> method to create and maintain a list of name/value pairs.  \n  \n```vb  \n' Create an element with no content.  \nDim root As XElement = <Root/>  \n  \n' Add a number of name/value pairs as elements.  \nroot.SetElementValue(\"Top\", 22)  \nroot.SetElementValue(\"Left\", 20)  \nroot.SetElementValue(\"Bottom\", 122)  \nroot.SetElementValue(\"Right\", 300)  \nroot.SetElementValue(\"DefaultColor\", \"Color.Red\")  \nConsole.WriteLine(root)  \nConsole.WriteLine(\"----\")  \n  \n' Replace the value of Top.  \nroot.SetElementValue(\"Top\", 10)  \nConsole.WriteLine(root)  \nConsole.WriteLine(\"----\")  \n  \n' Remove DefaultColor.  \nroot.SetElementValue(\"DefaultColor\", Nothing)  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>  \n  <Top>22</Top>  \n  <Left>20</Left>  \n  <Bottom>122</Bottom>  \n  <Right>300</Right>  \n  <DefaultColor>Color.Red</DefaultColor>  \n</Root>  \n----  \n<Root>  \n  <Top>10</Top>  \n  <Left>20</Left>  \n  <Bottom>122</Bottom>  \n  <Right>300</Right>  \n  <DefaultColor>Color.Red</DefaultColor>  \n</Root>  \n----  \n<Root>  \n  <Top>10</Top>  \n  <Left>20</Left>  \n  <Bottom>122</Bottom>  \n  <Right>300</Right>  \n</Root>  \n```  \n  \n## See also\n\n- <xref:System.Xml.Linq.XElement.SetAttributeValue%2A>\n- <xref:System.Xml.Linq.XElement.SetElementValue%2A>\n- [Modifying XML Trees (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/modifying-xml-trees-linq-to-xml.md)\n","nodes":[{"pos":[4,125],"embed":true,"restype":"x-metadata","content":"title: \"Maintaining Name-Value Pairs (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 57ac2072-d9f5-432b-84f0-a889c62fd813","nodes":[{"content":"Maintaining Name-Value Pairs (Visual Basic)","nodes":[{"pos":[0,43],"content":"Maintaining Name-Value Pairs (Visual Basic)","nodes":[{"content":"Maintaining Name-Value Pairs (Visual Basic)","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[132,175],"content":"Maintaining Name/Value Pairs (Visual Basic)","linkify":"Maintaining Name/Value Pairs (Visual Basic)","nodes":[{"content":"Maintaining Name/Value Pairs (Visual Basic)","pos":[0,43]}]},{"content":"Many applications have to maintain information that is best kept as name/value pairs.","pos":[176,261]},{"content":"This information might be configuration information or global settings.","pos":[262,333]},{"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> contains some methods that make it easy to keep a set of name/value pairs.","pos":[334,462],"source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] contains some methods that make it easy to keep a set of name/value pairs."},{"content":"You can either keep the information as attributes or as a set of child elements.","pos":[463,543]},{"content":"One difference between keeping the information as attributes or as child elements is that attributes have the constraint that there can be only one attribute with a particular name for an element.","pos":[550,746]},{"content":"This limitation does not apply to child elements.","pos":[747,796]},{"pos":[805,842],"content":"SetAttributeValue and SetElementValue","linkify":"SetAttributeValue and SetElementValue","nodes":[{"content":"SetAttributeValue and SetElementValue","pos":[0,37]}]},{"content":"The two methods that facilitate keeping name/value pairs are <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph>.","pos":[846,1015],"source":"The two methods that facilitate keeping name/value pairs are <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> and <xref:System.Xml.Linq.XElement.SetElementValue%2A>."},{"content":"These two methods have similar semantics.","pos":[1016,1057]},{"pos":[1064,1169],"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> can add, modify, or remove attributes of an element.","source":"<xref:System.Xml.Linq.XElement.SetAttributeValue%2A> can add, modify, or remove attributes of an element."},{"pos":[1179,1365],"content":"If you call <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> with a name of an attribute that does not exist, the method creates a new attribute and adds it to the specified element.","source":"If you call <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> with a name of an attribute that does not exist, the method creates a new attribute and adds it to the specified element."},{"pos":[1375,1580],"content":"If you call <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> with a name of an existing attribute and with some specified content, the contents of the attribute are replaced with the specified content.","source":"If you call <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> with a name of an existing attribute and with some specified content, the contents of the attribute are replaced with the specified content."},{"pos":[1590,1768],"content":"If you call <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> with a name of an existing attribute, and specify null for the content, the attribute is removed from its parent.","source":"If you call <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> with a name of an existing attribute, and specify null for the content, the attribute is removed from its parent."},{"pos":[1775,1882],"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> can add, modify, or remove child elements of an element.","source":"<xref:System.Xml.Linq.XElement.SetElementValue%2A> can add, modify, or remove child elements of an element."},{"pos":[1892,2077],"content":"If you call <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> with a name of a child element that does not exist, the method creates a new element and adds it to the specified element.","source":"If you call <xref:System.Xml.Linq.XElement.SetElementValue%2A> with a name of a child element that does not exist, the method creates a new element and adds it to the specified element."},{"pos":[2087,2286],"content":"If you call <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> with a name of an existing element and with some specified content, the contents of the element are replaced with the specified content.","source":"If you call <xref:System.Xml.Linq.XElement.SetElementValue%2A> with a name of an existing element and with some specified content, the contents of the element are replaced with the specified content."},{"pos":[2296,2468],"content":"If you call <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> with a name of an existing element, and specify null for the content, the element is removed from its parent.","source":"If you call <xref:System.Xml.Linq.XElement.SetElementValue%2A> with a name of an existing element, and specify null for the content, the element is removed from its parent."},{"pos":[2477,2484],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates an element with no attributes.","pos":[2488,2548]},{"content":"It then uses the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> method to create and maintain a list of name/value pairs.","pos":[2549,2676],"source":" It then uses the <xref:System.Xml.Linq.XElement.SetAttributeValue%2A> method to create and maintain a list of name/value pairs."},{"content":"This example produces the following output:","pos":[3258,3301]},{"pos":[3543,3550],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates an element with no child elements.","pos":[3554,3618]},{"content":"It then uses the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> method to create and maintain a list of name/value pairs.","pos":[3619,3744],"source":" It then uses the <xref:System.Xml.Linq.XElement.SetElementValue%2A> method to create and maintain a list of name/value pairs."},{"content":"This example produces the following output:","pos":[4366,4409]},{"pos":[4851,4859],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4971,5114],"content":"<bpt id=\"p1\">[</bpt>Modifying XML Trees (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/modifying-xml-trees-linq-to-xml.md)</ept>","source":"[Modifying XML Trees (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/modifying-xml-trees-linq-to-xml.md)"}]}