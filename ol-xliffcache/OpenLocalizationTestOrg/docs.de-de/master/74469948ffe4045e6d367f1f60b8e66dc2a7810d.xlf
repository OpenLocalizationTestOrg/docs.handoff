<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="retrieving-resources-in-desktop-apps.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74469948ffe4045e6d367f1f60b8e66dc2a7810d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\resources\retrieving-resources-in-desktop-apps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b618a22c5174f8c1c0dad3ca4ef7ec852040fb74</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3ef12187510998b85ba6eaa965c0a6056e63d08</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Retrieving Resources in Desktop Apps</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Retrieving Resources in Desktop Apps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you work with localized resources in .NET Framework desktop apps, you should ideally package the resources for the default or neutral culture with the main assembly and create a separate satellite assembly for each language or culture that your app supports.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class as described in the next section to access named resources.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you choose not to embed your resources in the main assembly and satellite assemblies, you can also access binary .resources files directly, as discussed in the section <bpt id="p1">[</bpt>Retrieving Resources from .resources files<ept id="p1">](#from_file)</ept> later in this article.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To retrieve resources in <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps, see <bpt id="p1">[</bpt>Creating and retrieving resources in Windows Store apps<ept id="p1">](https://go.microsoft.com/fwlink/p/?LinkID=241674)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Retrieving Resources from Assemblies</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class provides access to resources at run time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType&gt;</ph> method to retrieve string resources and the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=nameWithType&gt;</ph> method to retrieve non-string resources.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each method has two overloads:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An overload whose single parameter is a string that contains the name of the resource.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The method attempts to retrieve that resource for the current thread culture.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph>, <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29&gt;</ph>, and <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%29&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An overload that has two parameters: a string containing the name of the resource, and a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture whose resource is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If a resource set for that culture cannot be found, the resource manager uses fallback rules to retrieve an appropriate resource.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>, <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>, and <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The resource manager uses the resource fallback process to control how the app retrieves culture-specific resources.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see the "Resource Fallback Process" section in <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For information about instantiating a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object, see the "Instantiating a ResourceManager Object" section in the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Retrieving String Data: An Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph> method to retrieve the string resources of the current UI culture.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It includes a neutral string resource for the English (United States) culture and localized resources for the French (France) and Russian (Russia) cultures.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following English (United States) resource is in a file named Strings.txt:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The French (France) resource is in a file named Strings.fr-FR.txt:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The Russian (Russia) resource is in a file named Strings.ru-RU-txt:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The source code for this example, which is in a file named GetString.cs for the C# version of the code and GetString.vb for the Visual Basic version, defines a string array that contains the name of four cultures: the three cultures for which resources are available and the Spanish (Spain) culture.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A loop that executes five times randomly selects one of these cultures and assigns it to the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph> method to retrieve the localized string, which it displays along with the time of day.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following batch (.bat) file compiles the example and generates satellite assemblies in the appropriate directories.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The commands are provided for the C# language and compiler.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For Visual Basic, change <ph id="ph1">`csc`</ph> to <ph id="ph2">`vbc`</ph>, and change <ph id="ph3">`GetString.cs`</ph> to <ph id="ph4">`GetString.vb`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When the current UI culture is Spanish (Spain), note that the example displays English language resources, because Spanish language resources are unavailable, and English is the example's default culture.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieving Object Data: Two Examples</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> methods to retrieve object data.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This includes primitive data types, serializable objects, and objects that are stored in binary format (such as images).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%29&gt;</ph> method to retrieve a bitmap that is used in an app's opening splash window.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following source code in a file named CreateResources.cs (for C#) or CreateResources.vb (for Visual Basic) generates a .resx file that contains the serialized image.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In this case, the image is loaded from a file named SplashScreen.jpg; you can modify the file name to substitute your own image.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following code retrieves the resource and displays the image in a <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can use the following batch file to build the C# example.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For Visual Basic, change <ph id="ph1">`csc`</ph> to <ph id="ph2">`vbc`</ph>, and change the extension of the source code file from <ph id="ph3">`.cs`</ph> to <ph id="ph4">`.vb`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29?displayProperty=nameWithType&gt;</ph> method to deserialize a custom object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The example includes a source code file named UIElements.cs (UIElements.vb for Visual Basic) that defines the following structure named <ph id="ph1">`PersonTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This structure is intended to be used by a general table display routine that displays the localized names of table columns.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`PersonTable`</ph> structure is marked with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following code from a file named CreateResources.cs (CreateResources.vb for Visual Basic) creates an XML resource file named UIResources.resx that stores a table title and a <ph id="ph1">`PersonTable`</ph> object that contains information for an app that is localized for the English language.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following code in a source code file named GetObject.cs (GetObject.vb) then retrieves the resources and displays them to the console.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can build the necessary resource file and assemblies and run the app by executing the following batch file.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You must use the <ph id="ph1">`/r`</ph> option to supply Resgen.exe with a reference to UIElements.dll so that it can access information about the <ph id="ph2">`PersonTable`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you're using C#, replace the <ph id="ph1">`vbc`</ph> compiler name with <ph id="ph2">`csc`</ph>, and replace the <ph id="ph3">`.vb`</ph> extension with <ph id="ph4">`.cs`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Versioning Support for Satellite Assemblies</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>By default, when the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object retrieves requested resources, it looks for satellite assemblies that have version numbers that match the version number of the main assembly.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>After you have deployed an app, you might want to update the main assembly or specific resource satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides support for versioning the main assembly and satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.SatelliteContractVersionAttribute&gt;</ph> attribute  provides versioning support for a main assembly.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifying this attribute on an app's main assembly enables you to update and redeploy a main assembly without updating its satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>After you update the main assembly, increment the main assembly's version number but leave the satellite contract version number unchanged.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When the resource manager retrieves requested resources, it loads the satellite assembly version specified by this attribute.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Publisher policy assemblies provide support for versioning satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can update and redeploy a satellite assembly without updating the main assembly.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>After you update a satellite assembly, increment its version number and ship it with a publisher policy assembly.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the publisher policy assembly, specify that your new satellite assembly is backward-compatible with its previous version.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The resource manager will use the <ph id="ph1">&lt;xref:System.Resources.SatelliteContractVersionAttribute&gt;</ph> attribute to determine the version of the satellite assembly, but the assembly loader will bind to the satellite assembly version specified by the publisher policy.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information about publisher policy assemblies, see <bpt id="p1">[</bpt>Creating a Publisher Policy File<ept id="p1">](../../../docs/framework/configure-apps/how-to-create-a-publisher-policy.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To enable full assembly versioning support, we recommend that you deploy strong-named assemblies in the <bpt id="p1">[</bpt>global assembly cache<ept id="p1">](../../../docs/framework/app-domains/gac.md)</ept> and deploy assemblies that don't have strong names in the application directory.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you want to deploy strong-named assemblies in the application directory, you will not be able to increment a satellite assembly's version number when you update the assembly.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Instead, you must perform an in-place update where you replace the existing code with the updated code and maintain the same version number.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, if you want to update version 1.0.0.0 of a satellite assembly with the fully specified assembly name "myApp.resources, Version=1.0.0.0, Culture=de, PublicKeyToken=b03f5f11d50a3a", overwrite it with the updated myApp.resources.dll that has been compiled with the same, fully specified assembly name "myApp.resources, Version=1.0.0.0, Culture=de, PublicKeyToken=b03f5f11d50a3a".</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Note that using in-place updates on satellite assembly files makes it difficult for an app to accurately determine the version of a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information about assembly versioning, see <bpt id="p1">[</bpt>Assembly Versioning<ept id="p1">](../../../docs/framework/app-domains/assembly-versioning.md)</ept> and <bpt id="p2">[</bpt>How the Runtime Locates Assemblies<ept id="p2">](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Retrieving Resources from .resources Files</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you choose not to deploy resources in satellite assemblies, you can still use a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object to access resources from .resources files directly.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To do this, you must deploy the .resources files correctly.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Then you use the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A?displayProperty=nameWithType&gt;</ph> method to instantiate a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object and specify the directory that contains the standalone .resources files.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Deploying .resources Files</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When you embed .resources files in an application assembly and satellite assemblies, each satellite assembly has the same file name, but is placed in a subdirectory that reflects the satellite assembly's culture.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In contrast, when you access resources from .resources files directly, you can place all the .resources files in a single directory, usually a subdirectory of the application directory.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The name of the app's default .resources file consists of a root name only, with no indication of its culture (for example, strings.resources).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The resources for each localized culture are stored in a file whose name consists of the root name followed by the culture (for example, strings.ja.resources or strings.de-DE.resources).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following illustration shows where resource files should be located in the directory structure.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>It also gives the naming conventions for .resource files.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Illustration that shows the main directory for your application.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Using the Resource Manager</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>After you have created your resources and placed them in the appropriate directory, you create a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object to use the resources by calling the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%28System.String%2CSystem.String%2CSystem.Type%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The first parameter specifies the root name of the app's default .resources file (this would be "strings" for the example in the previous section).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The second parameter specifies the location of the resources ("Resources" for the previous example).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The third parameter specifies the <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> implementation to use.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If the third parameter is <ph id="ph1">`null`</ph>, the default runtime <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> is used.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Do not deploy ASP.NET apps using standalone .resources files.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This can cause locking issues and breaks XCOPY deployment.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>We recommend that you deploy ASP.NET resources in satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ASP.NET Web Page Resources Overview<ept id="p1">](https://docs.microsoft.com/previous-versions/aspnet/ms227427(v=vs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>After you instantiate the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object, you use the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> methods as discussed earlier to retrieve the resources.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>However, the retrieval of resources directly from .resources files differs from the retrieval of embedded resources from assemblies.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When you retrieve resources from .resources files, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph>, <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29&gt;</ph>, and <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%29&gt;</ph> methods always retrieve the default culture's resources regardless of the current culture.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To retrieve the resources of the either the app's current culture or a specific culture, you must call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>, <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>, or <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method and specify the culture whose resources are to be retrieved.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To retrieve the resources of the current culture, specify the value of the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> property as the <ph id="ph2">`culture`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If the resource manager cannot retrieve the resources of <ph id="ph1">`culture`</ph>, it uses the standard resource fallback rules to retrieve the appropriate resources.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An Example</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following example illustrates how the resource manager retrieves resources directly from .resources files.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The example consists of three text-based resource files for the English (United States), French (France), and Russian (Russia) cultures.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>English (United States) is the example's default culture.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Its resources are stored in the following file named Strings.txt:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Resources for the French (France) culture are stored in the following file, which is named Strings.fr-FR.txt:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Resources for the Russian (Russia) culture are stored in the following file, which is named Strings.ru-RU.txt:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following is the source code for the example.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The example instantiates <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objects for the English (United States), English (Canada), French (France), and Russian (Russia) cultures, and makes each the current culture.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph> method then supplies the value of the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> property as the <ph id="ph3">`culture`</ph> argument to retrieve the appropriate culture-specific resources.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You can compile the C# version of the example by running the following batch file.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If you're using Visual Basic, replace <ph id="ph1">`csc`</ph> with <ph id="ph2">`vbc`</ph>, and replace the <ph id="ph3">`.cs`</ph> extension with <ph id="ph4">`.vb`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resources in Desktop Apps<ept id="p1">](../../../docs/framework/resources/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How the Runtime Locates Assemblies<ept id="p1">](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating and retrieving resources in Windows Store apps<ept id="p1">](https://go.microsoft.com/fwlink/p/?LinkID=241674)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>