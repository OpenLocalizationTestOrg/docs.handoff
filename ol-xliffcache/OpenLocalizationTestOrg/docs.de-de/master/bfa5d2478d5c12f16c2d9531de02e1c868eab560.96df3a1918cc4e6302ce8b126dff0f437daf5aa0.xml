{"content":"---\ntitle: \"Client: Channel Factories and Channels\"\nms.date: \"03/30/2017\"\nms.assetid: ef245191-fdab-4468-a0da-7c6f25d2110f\n---\n# Client: Channel Factories and Channels\nThis topic discusses the creation of channel factories and channels.  \n  \n## Channel Factories and Channels  \n Channel factories are responsible for creating channels. Channels created by channel factories are used for sending messages. These channels are responsible for getting the message from the layer above, performing whatever processing is necessary, then sending the message to the layer below. The following graphic illustrates this process.  \n  \n ![Client Factories and Channels](../../../../docs/framework/wcf/extending/media/wcfc-wcfchannelsigure2highlevelfactgoriesc.gif \"wcfc_WCFChannelsigure2HIghLevelFactgoriesc\")  \nA channel factory creates channels.  \n  \n When closed, channel factories are responsible for closing any channels they created that are not yet closed. Note that the model is asymmetric here because when a channel listener is closed, it only stops accepting new channels but leaves existing channels open so that they can continue receiving messages.  \n  \n WCF provides base class helpers for this process. (For a diagram of the channel helper classes discussed in this topic, see [Channel Model Overview](../../../../docs/framework/wcf/extending/channel-model-overview.md).)  \n  \n-   The <xref:System.ServiceModel.Channels.CommunicationObject> class implements <xref:System.ServiceModel.ICommunicationObject> and enforces the state machine described in step 2 of [Developing Channels](../../../../docs/framework/wcf/extending/developing-channels.md).  \n  \n-   The <xref:System.ServiceModel.Channels.ChannelManagerBase> class implements <xref:System.ServiceModel.Channels.CommunicationObject> and provides a unified base class for <xref:System.ServiceModel.Channels.ChannelFactoryBase?displayProperty=nameWithType> and <xref:System.ServiceModel.Channels.ChannelListenerBase?displayProperty=nameWithType>. The <xref:System.ServiceModel.Channels.ChannelManagerBase> class works in conjunction with <xref:System.ServiceModel.Channels.ChannelBase>, which is a base class that implements <xref:System.ServiceModel.Channels.IChannel>.\n  \n-   The <xref:System.ServiceModel.Channels.ChannelFactoryBase> class implements <xref:System.ServiceModel.Channels.ChannelManagerBase> and <xref:System.ServiceModel.Channels.IChannelFactory> and consolidates the `CreateChannel` overloads into one `OnCreateChannel` abstract method.\n  \n-   The <xref:System.ServiceModel.Channels.ChannelListenerBase> class implements <xref:System.ServiceModel.Channels.IChannelListener>. It takes care of basic state management. \n  \n The following discussion is based upon the [Transport: UDP](../../../../docs/framework/wcf/samples/transport-udp.md) sample.  \n  \n### Creating a Channel Factory  \n The `UdpChannelFactory` derives from <xref:System.ServiceModel.Channels.ChannelFactoryBase>. The sample overrides <xref:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty%2A> to provide access to the message version of the message encoder. The sample also overrides <xref:System.ServiceModel.Channels.ChannelFactoryBase.OnClose%2A> to tear down our instance of <xref:System.ServiceModel.Channels.BufferManager> when the state machine transitions.  \n  \n#### The UDP Output Channel  \n The `UdpOutputChannel` implements <xref:System.ServiceModel.Channels.IOutputChannel>. The constructor validates the arguments and constructs a destination <xref:System.Net.EndPoint> object based on the <xref:System.ServiceModel.EndpointAddress> that is passed in.  \n  \n The override of <xref:System.ServiceModel.Channels.CommunicationObject.OnOpen%2A> creates a socket that is used to send messages to this <xref:System.Net.EndPoint>.  \n  \n ```csharp \nthis.socket = new Socket(  \nthis.remoteEndPoint.AddressFamily,\n   SocketType.Dgram,\n   ProtocolType.Udp\n);  \n```  \n\n The channel can be closed gracefully or ungracefully. If the channel is closed gracefully the socket is closed and a call is made to the base class `OnClose` method. If this throws an exception, the infrastructure calls `Abort` to ensure the channel is cleaned up.  \n  \n```csharp  \nthis.socket.Close();  \nbase.OnClose(timeout);  \n```  \n  \n Implement `Send()` and `BeginSend()`/`EndSend()`. This breaks down into two main sections. First serialize the message into a byte array:  \n  \n```csharp  \nArraySegment<byte> messageBuffer = EncodeMessage(message);  \n```  \n  \n Then send the resulting data on the wire:  \n  \n```csharp  \nthis.socket.SendTo(  \n  messageBuffer.Array,   \n  messageBuffer.Offset,   \n  messageBuffer.Count,   \n  SocketFlags.None,   \n  this.remoteEndPoint  \n);  \n```  \n  \n## See also\n\n- [Developing Channels](../../../../docs/framework/wcf/extending/developing-channels.md)\n","nodes":[{"pos":[4,122],"embed":true,"restype":"x-metadata","content":"title: \"Client: Channel Factories and Channels\"\nms.date: \"03/30/2017\"\nms.assetid: ef245191-fdab-4468-a0da-7c6f25d2110f","nodes":[{"content":"Client: Channel Factories and Channels","nodes":[{"pos":[0,38],"content":"Client: Channel Factories and Channels","nodes":[{"content":"Client: Channel Factories and Channels","pos":[0,38]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[129,167],"content":"Client: Channel Factories and Channels","linkify":"Client: Channel Factories and Channels","nodes":[{"content":"Client: Channel Factories and Channels","pos":[0,38]}]},{"content":"This topic discusses the creation of channel factories and channels.","pos":[168,236]},{"pos":[245,275],"content":"Channel Factories and Channels","linkify":"Channel Factories and Channels","nodes":[{"content":"Channel Factories and Channels","pos":[0,30]}]},{"content":"Channel factories are responsible for creating channels.","pos":[279,335]},{"content":"Channels created by channel factories are used for sending messages.","pos":[336,404]},{"content":"These channels are responsible for getting the message from the layer above, performing whatever processing is necessary, then sending the message to the layer below.","pos":[405,571]},{"content":"The following graphic illustrates this process.","pos":[572,619]},{"content":"<bpt id=\"p1\">![</bpt>Client Factories and Channels<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wcf/extending/media/wcfc-wcfchannelsigure2highlevelfactgoriesc.gif \"</bpt>wcfc_WCFChannelsigure2HIghLevelFactgoriesc<ept id=\"p2\">\")</ept>","pos":[626,798],"source":"![Client Factories and Channels](../../../../docs/framework/wcf/extending/media/wcfc-wcfchannelsigure2highlevelfactgoriesc.gif \"wcfc_WCFChannelsigure2HIghLevelFactgoriesc\")"},{"content":"A channel factory creates channels.","pos":[801,836]},{"content":"When closed, channel factories are responsible for closing any channels they created that are not yet closed.","pos":[843,952]},{"content":"Note that the model is asymmetric here because when a channel listener is closed, it only stops accepting new channels but leaves existing channels open so that they can continue receiving messages.","pos":[953,1151]},{"content":"WCF provides base class helpers for this process.","pos":[1158,1207]},{"content":"(For a diagram of the channel helper classes discussed in this topic, see <bpt id=\"p1\">[</bpt>Channel Model Overview<ept id=\"p1\">](../../../../docs/framework/wcf/extending/channel-model-overview.md)</ept>.)","pos":[1208,1376],"source":" (For a diagram of the channel helper classes discussed in this topic, see [Channel Model Overview](../../../../docs/framework/wcf/extending/channel-model-overview.md).)"},{"pos":[1386,1652],"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.CommunicationObject&gt;</ph> class implements <ph id=\"ph2\">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> and enforces the state machine described in step 2 of <bpt id=\"p1\">[</bpt>Developing Channels<ept id=\"p1\">](../../../../docs/framework/wcf/extending/developing-channels.md)</ept>.","source":"The <xref:System.ServiceModel.Channels.CommunicationObject> class implements <xref:System.ServiceModel.ICommunicationObject> and enforces the state machine described in step 2 of [Developing Channels](../../../../docs/framework/wcf/extending/developing-channels.md)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ChannelManagerBase&gt;</ph> class implements <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.CommunicationObject&gt;</ph> and provides a unified base class for <ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ServiceModel.Channels.ChannelListenerBase?displayProperty=nameWithType&gt;</ph>.","pos":[1662,2005],"source":"The <xref:System.ServiceModel.Channels.ChannelManagerBase> class implements <xref:System.ServiceModel.Channels.CommunicationObject> and provides a unified base class for <xref:System.ServiceModel.Channels.ChannelFactoryBase?displayProperty=nameWithType> and <xref:System.ServiceModel.Channels.ChannelListenerBase?displayProperty=nameWithType>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ChannelManagerBase&gt;</ph> class works in conjunction with <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.ChannelBase&gt;</ph>, which is a base class that implements <ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.IChannel&gt;</ph>.","pos":[2006,2229],"source":" The <xref:System.ServiceModel.Channels.ChannelManagerBase> class works in conjunction with <xref:System.ServiceModel.Channels.ChannelBase>, which is a base class that implements <xref:System.ServiceModel.Channels.IChannel>."},{"pos":[2237,2514],"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase&gt;</ph> class implements <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.ChannelManagerBase&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.IChannelFactory&gt;</ph> and consolidates the <ph id=\"ph4\">`CreateChannel`</ph> overloads into one <ph id=\"ph5\">`OnCreateChannel`</ph> abstract method.","source":"The <xref:System.ServiceModel.Channels.ChannelFactoryBase> class implements <xref:System.ServiceModel.Channels.ChannelManagerBase> and <xref:System.ServiceModel.Channels.IChannelFactory> and consolidates the `CreateChannel` overloads into one `OnCreateChannel` abstract method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ChannelListenerBase&gt;</ph> class implements <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph>.","pos":[2522,2652],"source":"The <xref:System.ServiceModel.Channels.ChannelListenerBase> class implements <xref:System.ServiceModel.Channels.IChannelListener>."},{"content":"It takes care of basic state management.","pos":[2653,2693]},{"pos":[2699,2823],"content":"The following discussion is based upon the <bpt id=\"p1\">[</bpt>Transport: UDP<ept id=\"p1\">](../../../../docs/framework/wcf/samples/transport-udp.md)</ept> sample.","source":"The following discussion is based upon the [Transport: UDP](../../../../docs/framework/wcf/samples/transport-udp.md) sample."},{"pos":[2833,2859],"content":"Creating a Channel Factory","linkify":"Creating a Channel Factory","nodes":[{"content":"Creating a Channel Factory","pos":[0,26]}]},{"content":"The <ph id=\"ph1\">`UdpChannelFactory`</ph> derives from <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase&gt;</ph>.","pos":[2863,2955],"source":"The `UdpChannelFactory` derives from <xref:System.ServiceModel.Channels.ChannelFactoryBase>."},{"content":"The sample overrides <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty%2A&gt;</ph> to provide access to the message version of the message encoder.","pos":[2956,3111],"source":" The sample overrides <xref:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty%2A> to provide access to the message version of the message encoder."},{"content":"The sample also overrides <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase.OnClose%2A&gt;</ph> to tear down our instance of <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.BufferManager&gt;</ph> when the state machine transitions.","pos":[3112,3318],"source":" The sample also overrides <xref:System.ServiceModel.Channels.ChannelFactoryBase.OnClose%2A> to tear down our instance of <xref:System.ServiceModel.Channels.BufferManager> when the state machine transitions."},{"pos":[3329,3351],"content":"The UDP Output Channel","linkify":"The UDP Output Channel","nodes":[{"content":"The UDP Output Channel","pos":[0,22]}]},{"content":"The <ph id=\"ph1\">`UdpOutputChannel`</ph> implements <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.IOutputChannel&gt;</ph>.","pos":[3355,3440],"source":"The `UdpOutputChannel` implements <xref:System.ServiceModel.Channels.IOutputChannel>."},{"content":"The constructor validates the arguments and constructs a destination <ph id=\"ph1\">&lt;xref:System.Net.EndPoint&gt;</ph> object based on the <ph id=\"ph2\">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> that is passed in.","pos":[3441,3618],"source":" The constructor validates the arguments and constructs a destination <xref:System.Net.EndPoint> object based on the <xref:System.ServiceModel.EndpointAddress> that is passed in."},{"pos":[3625,3789],"content":"The override of <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.CommunicationObject.OnOpen%2A&gt;</ph> creates a socket that is used to send messages to this <ph id=\"ph2\">&lt;xref:System.Net.EndPoint&gt;</ph>.","source":"The override of <xref:System.ServiceModel.Channels.CommunicationObject.OnOpen%2A> creates a socket that is used to send messages to this <xref:System.Net.EndPoint>."},{"content":"The channel can be closed gracefully or ungracefully.","pos":[3924,3977]},{"content":"If the channel is closed gracefully the socket is closed and a call is made to the base class <ph id=\"ph1\">`OnClose`</ph> method.","pos":[3978,4089],"source":" If the channel is closed gracefully the socket is closed and a call is made to the base class `OnClose` method."},{"content":"If this throws an exception, the infrastructure calls <ph id=\"ph1\">`Abort`</ph> to ensure the channel is cleaned up.","pos":[4090,4188],"source":" If this throws an exception, the infrastructure calls `Abort` to ensure the channel is cleaned up."},{"content":"Implement <ph id=\"ph1\">`Send()`</ph> and <ph id=\"ph2\">`BeginSend()`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`EndSend()`</ph>.","pos":[4264,4313],"source":"Implement `Send()` and `BeginSend()`/`EndSend()`."},{"content":"This breaks down into two main sections.","pos":[4314,4354]},{"content":"First serialize the message into a byte array:","pos":[4355,4401]},{"content":"Then send the resulting data on the wire:","pos":[4490,4531]},{"pos":[4714,4722],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4726,4812],"content":"<bpt id=\"p1\">[</bpt>Developing Channels<ept id=\"p1\">](../../../../docs/framework/wcf/extending/developing-channels.md)</ept>","source":"[Developing Channels](../../../../docs/framework/wcf/extending/developing-channels.md)"}]}