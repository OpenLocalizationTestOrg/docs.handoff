<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="x-key-directive.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ac878f24de594f8557ded8b0c3356217021b035</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\x-key-directive.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2c607532398425a77037c7e403ad49ff483a867</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7f3f1acdcfde26e9486c54d65c3b5d6e9dae908</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>x:Key Directive</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>x:Key Directive</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Uniquely identifies elements that are created and referenced in a XAML-defined dictionary.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Adding an <ph id="ph1">`x:Key`</ph> value to a XAML object element is the most common way to identify a resource in a resource dictionary, for example in a WPF <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage (WPF-specific)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A text string to use as a key.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The text string must conform to the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](xamlname-grammar.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Within the markup extension delimiters <ph id="ph1">{}</ph>, a markup extension usage that provides an object to use as a key.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Key`</ph> supports the XAML resource dictionary concept.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>XAML as a language doesn't define a resource dictionary implementation, that is left to specific UI frameworks.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To learn more about how XAML resource dictionaries are implemented in WPF, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In XAML 2006 and WPF, <ph id="ph1">`x:Key`</ph> must be provided as an attribute.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can still use nonstring keys, but this requires a markup extension usage in order to provide the nonstring value in attribute form.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you are using XAML 2009, <ph id="ph1">`x:Key`</ph> can be specified as an element, to explicitly support dictionaries keyed by object types other than strings without requiring a markup extension intermediate.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See the "XAML 2009" section in this topic.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The remainder of the Remarks section applies specifically to the XAML 2006 implementation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The attribute value of <ph id="ph1">`x:Key`</ph> can be any string defined in the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](xamlname-grammar.md)</ept> or can be an object evaluated through a markup extension.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See "WPF Usage Notes" for an example from WPF.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Child elements of a parent element that is an <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> implementation must typically include an <ph id="ph2">`x:Key`</ph> attribute that specifies a unique key value within that dictionary.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Frameworks might implement aliased key properties to substitute for <ph id="ph1">`x:Key`</ph> on particular types; types that define such properties should be attributed with <ph id="ph2">&lt;xref:System.Windows.Markup.DictionaryKeyPropertyAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The code equivalent of specifying <ph id="ph1">`x:Key`</ph> is the key that is used for the underlying <ph id="ph2">&lt;xref:System.Collections.IDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, an <ph id="ph1">`x:Key`</ph> that is applied in markup for a resource in WPF is equivalent to the value of the <ph id="ph2">`key`</ph> parameter of <ph id="ph3">&lt;xref:System.Windows.ResourceDictionary.Add%2A?displayProperty=nameWithType&gt;</ph> when you add the resource to a WPF <ph id="ph4">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> in code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Child objects of a parent object that is an <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> implementation, such as the WPF <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, must typically include an <ph id="ph3">`x:Key`</ph> attribute, and the key value must be unique within that dictionary.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are two notable exceptions:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Some WPF types declare an implicit key for dictionary usage.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph>, or a <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph> with a <ph id="ph4">&lt;xref:System.Windows.DataTemplate.DataType%2A&gt;</ph>, can be  in a <ph id="ph5">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> and use the implicit key.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>WPF supports a merged resource dictionary concept.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Keys can be shared between the merged dictionaries, and the shared key behavior can be accessed using <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.FindResource%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Merged Resource Dictionaries<ept id="p1">](../wpf/advanced/merged-resource-dictionaries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the overall WPF XAML implementation and application model, key uniqueness is not checked by the XAML markup compiler.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Instead, missing or nonunique <ph id="ph1">`x:Key`</ph> values cause load-time XAML parser errors.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, Visual Studio handling of dictionaries for WPF can often note such errors in the design phase.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Note that in the syntax shown, the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> object is implicit in how the WPF XAML processor produces a collection to populate a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> is not typically provided explicitly as an element in markup, although it can be in some cases if wanted for clarity (it would be a collection object element between the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> property element and the items within that populate the dictionary).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For information about why a collection object is almost always an implicit element in markup, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](../wpf/advanced/xaml-syntax-in-detail.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the WPF XAML implementation, the handling for resource dictionary keys is defined by the <ph id="ph1">&lt;xref:System.Windows.ResourceKey&gt;</ph> abstract class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However the WPF XAML processor produces different underlying extension types for keys based on their usages.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, the key for a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> or any derived class is handled separately, and produces a distinct <ph id="ph2">&lt;xref:System.Windows.DataTemplateKey&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Keys and names use different directives and language elements (<ph id="ph1">`x:Key`</ph> versus <ph id="ph2">`x:Name`</ph>) in the basic XAML definition.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Keys and names are also used in different situations by the WPF definition and application of these concepts.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](../wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>As stated previously, the value of a key can be supplied through a markup extension and can be other than a string value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An example WPF scenario is that the value of <ph id="ph1">`x:Key`</ph> may be a <bpt id="p1">[</bpt>ComponentResourceKey<ept id="p1">](../wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Certain controls expose a style key of that type for a custom style resource that influences part of the appearance and behavior of that control without totally replacing the style.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An example of such a key is <ph id="ph1">&lt;xref:System.Windows.Controls.ToolBar.ButtonStyleKey%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The WPF merged dictionary feature introduces additional considerations for key uniqueness and key lookup behavior.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Merged Resource Dictionaries<ept id="p1">](../wpf/advanced/merged-resource-dictionaries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>XAML 2009</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>XAML 2009 relaxes the restriction that <ph id="ph1">`x:Key`</ph> always be provided in attribute form.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In WPF, you can use XAML 2009 features, but only for XAML that is not markup-compiled.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Under XAML 2009, you can specify <ph id="ph1">`x:Key`</ph> elements through the following usage:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>XAML Element Usage (XAML 2009 only)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Object element for the object that is used as the key for a given <ph id="ph1">`object`</ph> in a specialized dictionary.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The container/parent for this kind of use is not shown here.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`object`</ph> is expected to be a child of an object element that represents a specialized dictionary implementation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`keyObject`</ph> is expected to be an object instance (or a value of a value type) that is appropriate as the key for that particular specialized dictionary implementation.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>WPF does not implement dictionaries that require this usage.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Object keys is more a general feature of the XAML language, possibly useful for certain custom dictionary scenarios where creating the dictionary in XAML is desirable.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For WPF features such as implicit styles that use non-string keys for resources, other techniques for establishing or specifying the keys exist, so using an object key is not necessary.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>keyObject<ept id="p1">*</ept> could also be a markup extension usage in object element form, rather than a direct object instance.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Silverlight Usage Notes</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Key`</ph> for Silverlight is documented separately.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Namespace (x:) Language Features (Silverlight)<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=199081)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../wpf/advanced/xaml-resources.md)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resources and Code<ept id="p1">](../wpf/advanced/resources-and-code.md)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](../wpf/advanced/staticresource-markup-extension.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>