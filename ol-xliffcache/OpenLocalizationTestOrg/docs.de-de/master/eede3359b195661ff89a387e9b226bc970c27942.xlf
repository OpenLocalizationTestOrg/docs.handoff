<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="virtual.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eede3359b195661ff89a387e9b226bc970c27942</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\virtual.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df44b254602b1184a0df0f7bf630c7e5da832548</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16227f246b24736846364bde47edfaa3ef960a28</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>virtual - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>virtual (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`virtual`</ph> keyword is used to modify a method, property, indexer, or event declaration and allow for it to be overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, this method can be overridden by any class that inherits it:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The implementation of a virtual member can be changed by an <bpt id="p1">[</bpt>overriding member<ept id="p1">](override.md)</ept> in a derived class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`virtual`</ph> keyword, see <bpt id="p1">[</bpt>Versioning with the Override and New Keywords<ept id="p1">](../../programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords.md)</ept> and <bpt id="p2">[</bpt>Knowing When to Use Override and New Keywords<ept id="p2">](../../programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When a virtual method is invoked, the run-time type of the object is checked for an overriding member.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The overriding member in the most derived class is called, which might be the original member, if no derived class has overridden the member.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By default, methods are non-virtual.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You cannot override a non-virtual method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You cannot use the <ph id="ph1">`virtual`</ph> modifier with the <ph id="ph2">`static`</ph>, <ph id="ph3">`abstract`</ph>, <ph id="ph4">`private`</ph>, or <ph id="ph5">`override`</ph> modifiers.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example shows a virtual property:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Virtual properties behave like abstract methods, except for the differences in declaration and invocation syntax.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It is an error to use the <ph id="ph1">`virtual`</ph> modifier on a static property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A virtual inherited property can be overridden in a derived class by including a property declaration that uses the <ph id="ph1">`override`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`Shape`</ph> class contains the two coordinates <ph id="ph2">`x`</ph>, <ph id="ph3">`y`</ph>, and the <ph id="ph4">`Area()`</ph> virtual method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Different shape classes such as <ph id="ph1">`Circle`</ph>, <ph id="ph2">`Cylinder`</ph>, and <ph id="ph3">`Sphere`</ph> inherit the <ph id="ph4">`Shape`</ph> class, and the surface area is calculated for each figure.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each derived class has its own override implementation of <ph id="ph1">`Area()`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Notice that the inherited classes <ph id="ph1">`Circle`</ph>, <ph id="ph2">`Sphere`</ph>, and <ph id="ph3">`Cylinder`</ph> all use constructors that initialize the base class, as shown in the following declaration.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following program calculates and displays the appropriate area for each figure by invoking the appropriate implementation of the <ph id="ph1">`Area()`</ph> method, according to the object that is associated with the method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Modifiers<ept id="p1">](modifiers.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Polymorphism<ept id="p1">](../../programming-guide/classes-and-structs/polymorphism.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>abstract<ept id="p1">](abstract.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>override<ept id="p1">](override.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>new<ept id="p1">](new.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>