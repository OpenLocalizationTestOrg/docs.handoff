<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="connection-events.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a71758781511f18ddf5451feaf0d308af1b4a652</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\connection-events.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6375965b19b27e02d82558fedf951810f55f6105</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70fae13e47a64c091e8c0e954af39d4b4c691560</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Connection Events</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Connection Events</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>All of the .NET Framework data providers have <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> objects with two events that you can use to retrieve informational messages from a data source or to determine if the state of a <bpt id="p2">**</bpt>Connection<ept id="p2">**</ept> has changed.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following table describes the events of the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Event</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>InfoMessage<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Occurs when an informational message is returned from a data source.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Informational messages are messages from a data source that do not result in an exception being thrown.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StateChange<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Occurs when the state of the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> changes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Working with the InfoMessage Event</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can retrieve warnings and informational messages from a SQL Server data source using the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Errors returned from the data source with a severity level of 11 through 16 cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event can be used to obtain messages from the data source that are not associated with an error.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the case of Microsoft SQL Server, any error with a severity of 10 or less is considered to be an informational message, and can be captured by using the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Database Engine Error Severities<ept id="p1">](/sql/relational-databases/errors-events/database-engine-error-severities)</ept> article.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event receives an <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlInfoMessageEventArgs&gt;</ph> object containing, in its <bpt id="p1">**</bpt>Errors<ept id="p1">**</ept> property, a collection of the messages from the data source.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can query the <bpt id="p1">**</bpt>Error<ept id="p1">**</ept> objects in this collection for the error number and message text, as well as the source of the error.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The .NET Framework Data Provider for SQL Server also includes detail about the database, stored procedure, and line number that the message came from.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code example shows how to add an event handler for the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Handling Errors as InfoMessages</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event will normally fire only for informational and warning messages that are sent from the server.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, when an actual error occurs, the execution of the <bpt id="p1">**</bpt>ExecuteNonQuery<ept id="p1">**</ept> or <bpt id="p2">**</bpt>ExecuteReader<ept id="p2">**</ept> method that initiated the server operation is halted and an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you want to continue processing the rest of the statements in a command regardless of any errors produced by the server, set the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Doing this causes the connection to fire the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event for errors instead of throwing an exception and interrupting processing.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The client application can then handle this event and respond to error conditions.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An error with a severity level of 17 or above that causes the server to stop processing the command must be handled as an exception.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this case, an exception is thrown regardless of how the error is handled in the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Working with the StateChange Event</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>StateChange<ept id="p1">**</ept> event occurs when the state of a <bpt id="p2">**</bpt>Connection<ept id="p2">**</ept> changes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>StateChange<ept id="p1">**</ept> event receives <ph id="ph1">&lt;xref:System.Data.StateChangeEventArgs&gt;</ph> that enable you to determine the change in state of the <bpt id="p2">**</bpt>Connection<ept id="p2">**</ept> by using the <bpt id="p3">**</bpt>OriginalState<ept id="p3">**</ept> and <bpt id="p4">**</bpt>CurrentState<ept id="p4">**</ept> properties.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>OriginalState<ept id="p1">**</ept> property is a <ph id="ph1">&lt;xref:System.Data.ConnectionState&gt;</ph> enumeration that indicates the state of the <bpt id="p2">**</bpt>Connection<ept id="p2">**</ept> before it changed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CurrentState<ept id="p1">**</ept> is a <ph id="ph1">&lt;xref:System.Data.ConnectionState&gt;</ph> enumeration that indicates the state of the <bpt id="p2">**</bpt>Connection<ept id="p2">**</ept> after it changed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code example uses the <bpt id="p1">**</bpt>StateChange<ept id="p1">**</ept> event to write a message to the console when the state of the <bpt id="p2">**</bpt>Connection<ept id="p2">**</ept> changes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Connecting to a Data Source<ept id="p1">](../../../../docs/framework/data/adonet/connecting-to-a-data-source.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>