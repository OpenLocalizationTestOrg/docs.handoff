{"content":"---\ntitle: \"Sub Expression (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"lambda expressions [Visual Basic], sub expression\"\n  - \"Sub Expression [Visual Basic]\"\n  - \"subroutines [Visual Basic], sub expressions\"\nms.assetid: 36b6bfd1-6539-4d8f-a5eb-6541a745ffde\ncaps.latest.revision: 6\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Sub Expression (Visual Basic)\nDeclares the parameters and code that define a subroutine lambda expression.  \n  \n## Syntax  \n  \n```  \nSub ( [ parameterlist ] ) statement  \n- or -  \nSub ( [ parameterlist ] )  \n  [ statements ]  \nEnd Sub  \n  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`parameterlist`|Optional. A list of local variable names that represent the parameters of the procedure. The parentheses must be present even when the list is empty. For more information, see [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md).|  \n|`statement`|Required. A single statement.|  \n|`statements`|Required. A list of statements.|  \n  \n## Remarks  \n A *lambda expression* is a subroutine that does not have a name and that executes one or more statements. You can use a lambda expression anywhere that you can use a delegate type, except as an argument to `RemoveHandler`. For more information about delegates, and the use of lambda expressions with delegates, see [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md) and [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md).  \n  \n## Lambda Expression Syntax  \n The syntax of a lambda expression resembles that of a standard subroutine. The differences are as follows:  \n  \n-   A lambda expression does not have a name.  \n  \n-   A lambda expression cannot have a modifier, such as `Overloads` or `Overrides`.  \n  \n-   The body of a single-line lambda expression must be a statement, not an expression. The body can consist of a call to a sub procedure, but not a call to a function procedure.  \n  \n-   In a lambda expression, either all parameters must have specified data types or all parameters must be inferred.  \n  \n-   Optional and `ParamArray` parameters are not permitted in lambda expressions.  \n  \n-   Generic parameters are not permitted in lambda expressions.  \n  \n## Example  \n Following is an example of a lambda expression that writes a value to the console. The example shows both the single-line and multiline lambda expression syntax for a subroutine. For more examples, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md).  \n  \n [!code-vb[VbVbalrLambdas#15](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/sub-expression_1.vb)]  \n  \n## See Also  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)   \n [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)   \n [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)   \n [Statements](../../../visual-basic/programming-guide/language-features/statements.md)   \n [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)\n","nodes":[{"pos":[4,653],"nodes":[{"content":"Sub Expression (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"Sub Expression (Visual Basic) | Microsoft Docs","nodes":[{"content":"Sub Expression (Visual Basic) | Microsoft Docs","pos":[0,46]}]}],"pos":[6,55],"yaml":true}],"content":"title: \"Sub Expression (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"lambda expressions [Visual Basic], sub expression\"\n  - \"Sub Expression [Visual Basic]\"\n  - \"subroutines [Visual Basic], sub expressions\"\nms.assetid: 36b6bfd1-6539-4d8f-a5eb-6541a745ffde\ncaps.latest.revision: 6\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[660,689],"content":"Sub Expression (Visual Basic)","linkify":"Sub Expression (Visual Basic)","nodes":[{"content":"Sub Expression (Visual Basic)","pos":[0,29]}]},{"content":"Declares the parameters and code that define a subroutine lambda expression.","pos":[690,766]},{"pos":[775,781],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[912,917],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[924,928]},{"content":"Definition","pos":[929,939]},{"content":"Optional.","pos":[972,981]},{"content":"A list of local variable names that represent the parameters of the procedure.","pos":[982,1060]},{"content":"The parentheses must be present even when the list is empty.","pos":[1061,1121]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Parameter List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept>.","pos":[1122,1236],"source":" For more information, see [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md)."},{"content":"Required.","pos":[1253,1262]},{"content":"A single statement.","pos":[1263,1282]},{"content":"Required.","pos":[1300,1309]},{"content":"A list of statements.","pos":[1310,1331]},{"pos":[1341,1348],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <bpt id=\"p1\">*</bpt>lambda expression<ept id=\"p1\">*</ept> is a subroutine that does not have a name and that executes one or more statements.","pos":[1352,1457],"source":"A *lambda expression* is a subroutine that does not have a name and that executes one or more statements."},{"content":"You can use a lambda expression anywhere that you can use a delegate type, except as an argument to <ph id=\"ph1\">`RemoveHandler`</ph>.","pos":[1458,1574],"source":" You can use a lambda expression anywhere that you can use a delegate type, except as an argument to `RemoveHandler`."},{"content":"For more information about delegates, and the use of lambda expressions with delegates, see <bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept> and <bpt id=\"p2\">[</bpt>Relaxed Delegate Conversion<ept id=\"p2\">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>.","pos":[1575,1897],"source":" For more information about delegates, and the use of lambda expressions with delegates, see [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md) and [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)."},{"pos":[1906,1930],"content":"Lambda Expression Syntax","linkify":"Lambda Expression Syntax","nodes":[{"content":"Lambda Expression Syntax","pos":[0,24]}]},{"content":"The syntax of a lambda expression resembles that of a standard subroutine.","pos":[1934,2008]},{"content":"The differences are as follows:","pos":[2009,2040]},{"content":"A lambda expression does not have a name.","pos":[2050,2091]},{"pos":[2101,2180],"content":"A lambda expression cannot have a modifier, such as <ph id=\"ph1\">`Overloads`</ph> or <ph id=\"ph2\">`Overrides`</ph>.","source":"A lambda expression cannot have a modifier, such as `Overloads` or `Overrides`."},{"content":"The body of a single-line lambda expression must be a statement, not an expression.","pos":[2190,2273]},{"content":"The body can consist of a call to a sub procedure, but not a call to a function procedure.","pos":[2274,2364]},{"content":"In a lambda expression, either all parameters must have specified data types or all parameters must be inferred.","pos":[2374,2486]},{"pos":[2496,2573],"content":"Optional and <ph id=\"ph1\">`ParamArray`</ph> parameters are not permitted in lambda expressions.","source":"Optional and `ParamArray` parameters are not permitted in lambda expressions."},{"content":"Generic parameters are not permitted in lambda expressions.","pos":[2583,2642]},{"pos":[2651,2658],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Following is an example of a lambda expression that writes a value to the console.","pos":[2662,2744]},{"content":"The example shows both the single-line and multiline lambda expression syntax for a subroutine.","pos":[2745,2840]},{"content":"For more examples, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.","pos":[2841,2977],"source":" For more examples, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)."},{"pos":[2984,3109],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrLambdas#15<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/sub-expression_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrLambdas#15](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/sub-expression_1.vb)]"},{"pos":[3118,3126],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3130,3216],"source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3220,3333],"source":"[Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3337,3459],"source":"[Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept><ph id=\"ph1\"> </ph>","pos":[3463,3549],"source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md) "},{"content":"<bpt id=\"p1\">[</bpt>Relaxed Delegate Conversion<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>","pos":[3553,3682],"source":"[Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)"}]}