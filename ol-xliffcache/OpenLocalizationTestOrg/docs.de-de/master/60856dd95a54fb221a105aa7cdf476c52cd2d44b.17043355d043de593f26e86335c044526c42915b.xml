{"content":"---\ntitle: \"Generic methods cannot use 'Handles' clause\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc32080\"\n  - \"BC32080\"\nhelpviewer_keywords: \n  - \"BC32080\"\nms.assetid: 88c62a1c-aee3-46b2-ad78-76790022c04c\n---\n# Generic methods cannot use 'Handles' clause\nA generic `Sub` procedure includes a [Handles](../../visual-basic/language-reference/statements/handles-clause.md) clause in its declaration.  \n  \n A `Handles` clause specifies a list of events that the `Sub` procedure handles. To be an event handler, the `Sub` procedure must have the same signature as each event it is to handle. A generic procedure can be created more than once, with signatures that Visual Basic cannot predict at compile time. Therefore, Visual Basic cannot guarantee a signature that matches those of the events in the `Handles` clause.  \n  \n **Error ID:** BC32080  \n  \n## To correct this error  \n  \n-   If the `Sub` procedure needs to be generic, remove the `Handles` clause from its declaration. Use the [AddHandler Statement](../../visual-basic/language-reference/statements/addhandler-statement.md) to associate this event handler with an event.  \n  \n-   If the `Sub` procedure needs to use the `Handles` clause to associate events, remove the [Of](../../visual-basic/language-reference/statements/of-clause.md) clause from its declaration. You must use a nongeneric procedure with `Handles`.  \n  \n## See also\n\n- [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [Events (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/events/index.md)\n","nodes":[{"pos":[4,204],"embed":true,"restype":"x-metadata","content":"title: \"Generic methods cannot use 'Handles' clause\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc32080\"\n  - \"BC32080\"\nhelpviewer_keywords: \n  - \"BC32080\"\nms.assetid: 88c62a1c-aee3-46b2-ad78-76790022c04c","nodes":[{"content":"Generic methods cannot use 'Handles' clause","nodes":[{"pos":[0,43],"content":"Generic methods cannot use 'Handles' clause","nodes":[{"content":"Generic methods cannot use 'Handles' clause","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[211,254],"content":"Generic methods cannot use 'Handles' clause","linkify":"Generic methods cannot use 'Handles' clause","nodes":[{"content":"Generic methods cannot use 'Handles' clause","pos":[0,43]}]},{"pos":[255,396],"content":"A generic <ph id=\"ph1\">`Sub`</ph> procedure includes a <bpt id=\"p1\">[</bpt>Handles<ept id=\"p1\">](../../visual-basic/language-reference/statements/handles-clause.md)</ept> clause in its declaration.","source":"A generic `Sub` procedure includes a [Handles](../../visual-basic/language-reference/statements/handles-clause.md) clause in its declaration."},{"content":"A <ph id=\"ph1\">`Handles`</ph> clause specifies a list of events that the <ph id=\"ph2\">`Sub`</ph> procedure handles.","pos":[403,482],"source":"A `Handles` clause specifies a list of events that the `Sub` procedure handles."},{"content":"To be an event handler, the <ph id=\"ph1\">`Sub`</ph> procedure must have the same signature as each event it is to handle.","pos":[483,586],"source":" To be an event handler, the `Sub` procedure must have the same signature as each event it is to handle."},{"content":"A generic procedure can be created more than once, with signatures that Visual Basic cannot predict at compile time.","pos":[587,703]},{"content":"Therefore, Visual Basic cannot guarantee a signature that matches those of the events in the <ph id=\"ph1\">`Handles`</ph> clause.","pos":[704,814],"source":" Therefore, Visual Basic cannot guarantee a signature that matches those of the events in the `Handles` clause."},{"pos":[821,842],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32080","source":"**Error ID:** BC32080"},{"pos":[851,872],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"If the <ph id=\"ph1\">`Sub`</ph> procedure needs to be generic, remove the <ph id=\"ph2\">`Handles`</ph> clause from its declaration.","pos":[882,975],"source":"If the `Sub` procedure needs to be generic, remove the `Handles` clause from its declaration."},{"content":"Use the <bpt id=\"p1\">[</bpt>AddHandler Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/addhandler-statement.md)</ept> to associate this event handler with an event.","pos":[976,1127],"source":" Use the [AddHandler Statement](../../visual-basic/language-reference/statements/addhandler-statement.md) to associate this event handler with an event."},{"content":"If the <ph id=\"ph1\">`Sub`</ph> procedure needs to use the <ph id=\"ph2\">`Handles`</ph> clause to associate events, remove the <bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../visual-basic/language-reference/statements/of-clause.md)</ept> clause from its declaration.","pos":[1137,1322],"source":"If the `Sub` procedure needs to use the `Handles` clause to associate events, remove the [Of](../../visual-basic/language-reference/statements/of-clause.md) clause from its declaration."},{"content":"You must use a nongeneric procedure with <ph id=\"ph1\">`Handles`</ph>.","pos":[1323,1374],"source":" You must use a nongeneric procedure with `Handles`."},{"pos":[1383,1391],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1395,1510],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[1513,1609],"content":"<bpt id=\"p1\">[</bpt>Events (Visual Basic)<ept id=\"p1\">](~/docs/visual-basic/programming-guide/language-features/events/index.md)</ept>","source":"[Events (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/events/index.md)"}]}