{"content":"---\ntitle: Perform a subquery on a grouping operation (LINQ in C#)\ndescription: How to perform a subquery on a grouping operation using LINQ in C#.\nms.date: 12/01/2016\nms.assetid: d75a588e-9b6f-4f37-b195-f99ec8503855\n---\n# Perform a subquery on a grouping operation\n\nThis article shows two different ways to create a query that orders the source data into groups, and then performs a subquery over each group individually. The basic technique in each example is to group the source elements by using a *continuation* named `newGroup`, and then generating a new subquery against `newGroup`. This subquery is run against each new group that is created by the outer query. Note that in this particular example the final output is not a group, but a flat sequence of anonymous types.  \n  \nFor more information about how to group, see [group clause](../language-reference/keywords/group-clause.md).  \n  \nFor more information about continuations, see [into](../language-reference/keywords/into.md). The following example uses an in-memory data structure as the data source, but the same principles apply for any kind of LINQ data source.  \n  \n## Example\n\n> [!NOTE]\n> This example contains references to objects that are defined in the sample code in [Query a collection of objects](query-a-collection-of-objects.md).\n\n[!code-csharp[csProgGuideLINQ#23](~/samples/snippets/csharp/concepts/linq/how-to-perform-a-subquery-on-a-grouping-operation_1.cs)] \n\nThe query in the snippet above can also be written using method syntax. The following code snippet has a semantically equivalent query written using method syntax.\n\n[!code-csharp[csProgGuideLINQ#86](~/samples/snippets/csharp/concepts/linq/how-to-perform-a-subquery-on-a-grouping-operation_2.cs)]\n\n## See also\n\n- [Language Integrated Query (LINQ)](index.md)\n","nodes":[{"pos":[4,216],"embed":true,"restype":"x-metadata","content":"title: Perform a subquery on a grouping operation (LINQ in C#)\ndescription: How to perform a subquery on a grouping operation using LINQ in C#.\nms.date: 12/01/2016\nms.assetid: d75a588e-9b6f-4f37-b195-f99ec8503855","nodes":[{"content":"Perform a subquery on a grouping operation (LINQ in C#)","nodes":[{"pos":[0,55],"content":"Perform a subquery on a grouping operation (LINQ in C#)","nodes":[{"content":"Perform a subquery on a grouping operation (LINQ in C#)","pos":[0,55]}]}],"path":["title"],"nosxs":false},{"content":"How to perform a subquery on a grouping operation using LINQ in C#.","nodes":[{"pos":[0,67],"content":"How to perform a subquery on a grouping operation using LINQ in C#.","nodes":[{"content":"How to perform a subquery on a grouping operation using LINQ in C#.","pos":[0,67]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[223,265],"content":"Perform a subquery on a grouping operation","linkify":"Perform a subquery on a grouping operation","nodes":[{"content":"Perform a subquery on a grouping operation","pos":[0,42]}]},{"content":"This article shows two different ways to create a query that orders the source data into groups, and then performs a subquery over each group individually.","pos":[267,422]},{"content":"The basic technique in each example is to group the source elements by using a <bpt id=\"p1\">*</bpt>continuation<ept id=\"p1\">*</ept> named <ph id=\"ph1\">`newGroup`</ph>, and then generating a new subquery against <ph id=\"ph2\">`newGroup`</ph>.","pos":[423,589],"source":" The basic technique in each example is to group the source elements by using a *continuation* named `newGroup`, and then generating a new subquery against `newGroup`."},{"content":"This subquery is run against each new group that is created by the outer query.","pos":[590,669]},{"content":"Note that in this particular example the final output is not a group, but a flat sequence of anonymous types.","pos":[670,779]},{"pos":[785,893],"content":"For more information about how to group, see <bpt id=\"p1\">[</bpt>group clause<ept id=\"p1\">](../language-reference/keywords/group-clause.md)</ept>.","source":"For more information about how to group, see [group clause](../language-reference/keywords/group-clause.md)."},{"content":"For more information about continuations, see <bpt id=\"p1\">[</bpt>into<ept id=\"p1\">](../language-reference/keywords/into.md)</ept>.","pos":[899,992],"source":"For more information about continuations, see [into](../language-reference/keywords/into.md)."},{"content":"The following example uses an in-memory data structure as the data source, but the same principles apply for any kind of LINQ data source.","pos":[993,1131]},{"pos":[1140,1147],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1151,1310],"content":"[!NOTE]\nThis example contains references to objects that are defined in the sample code in [Query a collection of objects](query-a-collection-of-objects.md).","leadings":["","> "],"nodes":[{"content":"This example contains references to objects that are defined in the sample code in <bpt id=\"p1\">[</bpt>Query a collection of objects<ept id=\"p1\">](query-a-collection-of-objects.md)</ept>.","pos":[8,157],"source":"This example contains references to objects that are defined in the sample code in [Query a collection of objects](query-a-collection-of-objects.md)."}]},{"content":"The query in the snippet above can also be written using method syntax.","pos":[1445,1516]},{"content":"The following code snippet has a semantically equivalent query written using method syntax.","pos":[1517,1608]},{"pos":[1745,1753],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1757,1801],"content":"<bpt id=\"p1\">[</bpt>Language Integrated Query (LINQ)<ept id=\"p1\">](index.md)</ept>","source":"[Language Integrated Query (LINQ)](index.md)"}]}