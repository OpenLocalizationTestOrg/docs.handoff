{"content":"---\ntitle: \"Compiler Error CS1943\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1943\"\nhelpviewer_keywords: \n  - \"CS1943\"\nms.assetid: eb3e36b7-1372-471c-8cfb-a955a86c379e\n---\n# Compiler Error CS1943\nAn expression of type 'type' is not allowed in a subsequent from clause in a query expression with source type 'type'. Type inference failed in the call to 'method'.  \n  \n All range variables must represent queryable types.  \n  \n## To correct this error  \n  \n1.  Make sure that the type is a queryable type that implements `IEnumerable`, `IEnumerable<T>` or a derived interface, or any other type which has a query pattern defined for it.  \n  \n2.  If the type is a non-generic `IEnumerable`, provide an explicit type on the range variable.  \n  \n## Example  \n The following code generates CS1943:  \n  \n```csharp  \n// cs1943.cs  \nusing System.Linq;  \nclass Test  \n{  \n    class TestClass  \n    { }  \n    static void Main()  \n    {  \n        int[] nums = { 0, 1, 2, 3, 4, 5 };  \n        TestClass tc = new TestClass();  \n  \n        var x = from n in nums  \n                from s in tc // CS1943  \n                select n + s;  \n    }  \n}  \n```\n","nodes":[{"pos":[4,165],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Error CS1943\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1943\"\nhelpviewer_keywords: \n  - \"CS1943\"\nms.assetid: eb3e36b7-1372-471c-8cfb-a955a86c379e","nodes":[{"content":"Compiler Error CS1943","nodes":[{"pos":[0,21],"content":"Compiler Error CS1943","nodes":[{"content":"Compiler Error CS1943","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[172,193],"content":"Compiler Error CS1943","linkify":"Compiler Error CS1943","nodes":[{"content":"Compiler Error CS1943","pos":[0,21]}]},{"content":"An expression of type 'type' is not allowed in a subsequent from clause in a query expression with source type 'type'.","pos":[194,312]},{"content":"Type inference failed in the call to 'method'.","pos":[313,359]},{"content":"All range variables must represent queryable types.","pos":[366,417]},{"pos":[426,447],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[457,632],"content":"Make sure that the type is a queryable type that implements <ph id=\"ph1\">`IEnumerable`</ph>, <ph id=\"ph2\">`IEnumerable&lt;T&gt;`</ph> or a derived interface, or any other type which has a query pattern defined for it.","source":"Make sure that the type is a queryable type that implements `IEnumerable`, `IEnumerable<T>` or a derived interface, or any other type which has a query pattern defined for it."},{"pos":[642,733],"content":"If the type is a non-generic <ph id=\"ph1\">`IEnumerable`</ph>, provide an explicit type on the range variable.","source":"If the type is a non-generic `IEnumerable`, provide an explicit type on the range variable."},{"pos":[742,749],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code generates CS1943:","pos":[753,789]}]}