{"content":"---\ntitle: \"Option Infer Statement | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.OptionInfer\"\n  - \"vb.Infer\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"variables [Visual Basic], declaring\"\n  - \"Option Infer statement\"\n  - \"Infer keyword\"\n  - \"declaring variables, inferred\"\n  - \"inferred variable declaration\"\nms.assetid: 4ad3e6e9-8f5b-4209-a248-de22ef6e4652\ncaps.latest.revision: 72\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Option Infer Statement\nEnables the use of local type inference in declaring variables.  \n  \n## Syntax  \n  \n```  \nOption Infer { On | Off }  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`On`|Optional. Enables local type inference.|  \n|`Off`|Optional. Disables local type inference.|  \n  \n## Remarks  \n To set `Option Infer` in a file, type `Option Infer On` or `Option Infer Off` at the top of the file, before any other source code. If the value set for `Option Infer` in a file conflicts with the value set in the IDE or on the command line, the value in the file has precedence.  \n  \n When you set `Option Infer` to `On`, you can declare local variables without explicitly stating a data type. The compiler infers the data type of a variable from the type of its initialization expression.  \n  \n In the following illustration, `Option Infer` is turned on. The variable in the declaration `Dim someVar = 2` is declared as an integer by type inference.  \n  \n ![IntelliSense view of the declaration.](../../../visual-basic/language-reference/statements/media/optioninferasinteger.png \"optionInferAsInteger\")  \nIntelliSense when Option Infer is on  \n  \n In the following illustration, `Option Infer` is turned off. The variable in the declaration `Dim someVar = 2` is declared as an `Object` by type inference. In this example, the **Option Strict** setting is set to **Off** on the [Compile Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic).  \n  \n ![IntelliSense view of the declaration.](../../../visual-basic/language-reference/statements/media/optioninferasobject.png \"optionInferAsObject\")  \nIntelliSense when Option Infer is off  \n  \n> [!NOTE]\n>  When a variable is declared as an `Object`, the run-time type can change while the program is running. [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs operations called *boxing* and *unboxing* to convert between an `Object` and a value type, which makes execution slower. For information about boxing and unboxing, see the [Visual Basic Language Specification](../../../visual-basic/reference/language-specification.md).  \n  \n Type inference applies at the procedure level, and does not apply outside a procedure in a class, structure, module, or interface.  \n  \n For additional information, see [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md).  \n  \n## When an Option Infer Statement Is Not Present  \n If the source code does not contain an `Option Infer` statement, the **Option Infer** setting on the [Compile Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic) is used. If the command-line compiler is used, the [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md) compiler option is used.  \n  \n#### To set Option Infer in the IDE  \n  \n1.  In **Solution Explorer**, select a project. On the **Project** menu, click **Properties**. For more information, see [NIB: Managing Project Properties with the Project Designer](http://msdn.microsoft.com/en-us/983f3c18-832f-4666-afec-74b716ff3e0e).  \n  \n2.  Click the **Compile** tab.  \n  \n3.  Set the value in the **Option infer** box.  \n  \n When you create a new project, the **Option Infer** setting on the **Compile** tab is set to the **Option Infer** setting in the **VB Defaults** dialog box. To access the **VB Defaults** dialog box, on the **Tools** menu, click **Options**. In the **Options** dialog box, expand **Projects and Solutions**, and then click **VB Defaults**. The initial default setting in **VB Defaults** is `On`.  \n  \n#### To set Option Infer on the command line  \n  \n-   Include the [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md) compiler option in the **vbc** command.  \n  \n## Default Data Types and Values  \n The following table describes the results of various combinations of specifying the data type and initializer in a `Dim` statement.  \n  \n|Data type specified?|Initializer specified?|Example|Result|  \n|---|---|---|---|  \n|No|No|`Dim qty`|If `Option Strict` is off (the default), the variable is set to `Nothing`.<br /><br /> If `Option Strict` is on, a compile-time error occurs.|  \n|No|Yes|`Dim qty = 5`|If `Option Infer` is on (the default), the variable takes the data type of the initializer. See [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md).<br /><br /> If `Option Infer` is off and `Option Strict` is off, the variable takes the data type of `Object`.<br /><br /> If `Option Infer` is off and `Option Strict` is on, a compile-time error occurs.|  \n|Yes|No|`Dim qty As Integer`|The variable is initialized to the default value for the data type. For more information, see [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md).|  \n|Yes|Yes|`Dim qty  As Integer = 5`|If the data type of the initializer is not convertible to the specified data type, a compile-time error occurs.|  \n  \n## Example  \n The following examples demonstrate how the `Option Infer` statement enables local type inference.  \n  \n [!code-vb[VbVbalrTypeInference#6](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/option-infer-statement_1.vb)]  \n  \n## Example  \n The following example demonstrates that the run-time type can differ when a variable is identified as an `Object`.  \n  \n [!code-vb[VbVbalrTypeInference#11](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/option-infer-statement_2.vb)]  \n  \n## See Also  \n [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)   \n [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)   \n [Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md)   \n [Option Explicit Statement](../../../visual-basic/language-reference/statements/option-explicit-statement.md)   \n [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)   \n [Visual Basic Defaults, Projects, Options Dialog Box](https://docs.microsoft.com/visualstudio/ide/reference/visual-basic-defaults-projects-options-dialog-box)   \n [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md)   \n [Boxing and Unboxing](../../../csharp/programming-guide/types/boxing-and-unboxing.md)","nodes":[{"pos":[4,739],"embed":true,"restype":"x-metadata","content":"title: \"Option Infer Statement | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.OptionInfer\"\n  - \"vb.Infer\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"variables [Visual Basic], declaring\"\n  - \"Option Infer statement\"\n  - \"Infer keyword\"\n  - \"declaring variables, inferred\"\n  - \"inferred variable declaration\"\nms.assetid: 4ad3e6e9-8f5b-4209-a248-de22ef6e4652\ncaps.latest.revision: 72\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Option Infer Statement | Microsoft Docs","nodes":[{"pos":[0,39],"content":"Option Infer Statement | Microsoft Docs","nodes":[{"content":"Option Infer Statement | Microsoft Docs","pos":[0,39]}]}],"path":["title"]}],"yml":true},{"pos":[746,768],"content":"Option Infer Statement","linkify":"Option Infer Statement","nodes":[{"content":"Option Infer Statement","pos":[0,22]}]},{"content":"Enables the use of local type inference in declaring variables.","pos":[769,832]},{"pos":[841,847],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[899,904],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[911,915]},{"content":"Definition","pos":[916,926]},{"content":"Optional.","pos":[948,957]},{"content":"Enables local type inference.","pos":[958,987]},{"content":"Optional.","pos":[998,1007]},{"content":"Disables local type inference.","pos":[1008,1038]},{"pos":[1048,1055],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To set <ph id=\"ph1\">`Option Infer`</ph> in a file, type <ph id=\"ph2\">`Option Infer On`</ph> or <ph id=\"ph3\">`Option Infer Off`</ph> at the top of the file, before any other source code.","pos":[1059,1190],"source":"To set `Option Infer` in a file, type `Option Infer On` or `Option Infer Off` at the top of the file, before any other source code."},{"content":"If the value set for <ph id=\"ph1\">`Option Infer`</ph> in a file conflicts with the value set in the IDE or on the command line, the value in the file has precedence.","pos":[1191,1338],"source":" If the value set for `Option Infer` in a file conflicts with the value set in the IDE or on the command line, the value in the file has precedence."},{"content":"When you set <ph id=\"ph1\">`Option Infer`</ph> to <ph id=\"ph2\">`On`</ph>, you can declare local variables without explicitly stating a data type.","pos":[1345,1453],"source":"When you set `Option Infer` to `On`, you can declare local variables without explicitly stating a data type."},{"content":"The compiler infers the data type of a variable from the type of its initialization expression.","pos":[1454,1549]},{"content":"In the following illustration, <ph id=\"ph1\">`Option Infer`</ph> is turned on.","pos":[1556,1615],"source":"In the following illustration, `Option Infer` is turned on."},{"content":"The variable in the declaration <ph id=\"ph1\">`Dim someVar = 2`</ph> is declared as an integer by type inference.","pos":[1616,1710],"source":" The variable in the declaration `Dim someVar = 2` is declared as an integer by type inference."},{"content":"<bpt id=\"p1\">![</bpt>IntelliSense view of the declaration.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../visual-basic/language-reference/statements/media/optioninferasinteger.png \"</bpt>optionInferAsInteger<ept id=\"p2\">\")</ept>","pos":[1717,1864],"source":"![IntelliSense view of the declaration.](../../../visual-basic/language-reference/statements/media/optioninferasinteger.png \"optionInferAsInteger\")"},{"content":"IntelliSense when Option Infer is on","pos":[1867,1903]},{"content":"In the following illustration, <ph id=\"ph1\">`Option Infer`</ph> is turned off.","pos":[1910,1970],"source":"In the following illustration, `Option Infer` is turned off."},{"content":"The variable in the declaration <ph id=\"ph1\">`Dim someVar = 2`</ph> is declared as an <ph id=\"ph2\">`Object`</ph> by type inference.","pos":[1971,2066],"source":" The variable in the declaration `Dim someVar = 2` is declared as an `Object` by type inference."},{"content":"In this example, the <bpt id=\"p1\">**</bpt>Option Strict<ept id=\"p1\">**</ept> setting is set to <bpt id=\"p2\">**</bpt>Off<ept id=\"p2\">**</ept> on the <bpt id=\"p3\">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id=\"p3\">](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept>.","pos":[2067,2285],"source":" In this example, the **Option Strict** setting is set to **Off** on the [Compile Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic)."},{"content":"<bpt id=\"p1\">![</bpt>IntelliSense view of the declaration.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../visual-basic/language-reference/statements/media/optioninferasobject.png \"</bpt>optionInferAsObject<ept id=\"p2\">\")</ept>","pos":[2292,2437],"source":"![IntelliSense view of the declaration.](../../../visual-basic/language-reference/statements/media/optioninferasobject.png \"optionInferAsObject\")"},{"content":"IntelliSense when Option Infer is off","pos":[2440,2477]},{"pos":[2485,2967],"content":"[!NOTE]\n When a variable is declared as an `Object`, the run-time type can change while the program is running. [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs operations called *boxing* and *unboxing* to convert between an `Object` and a value type, which makes execution slower. For information about boxing and unboxing, see the [Visual Basic Language Specification](../../../visual-basic/reference/language-specification.md).","leadings":["","> "],"nodes":[{"content":"When a variable is declared as an `Object`, the run-time type can change while the program is running. [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs operations called *boxing* and *unboxing* to convert between an `Object` and a value type, which makes execution slower. For information about boxing and unboxing, see the [Visual Basic Language Specification](../../../visual-basic/reference/language-specification.md).","pos":[9,480],"nodes":[{"content":"When a variable is declared as an <ph id=\"ph1\">`Object`</ph>, the run-time type can change while the program is running.","pos":[0,102],"source":"When a variable is declared as an `Object`, the run-time type can change while the program is running."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> performs operations called <bpt id=\"p1\">*</bpt>boxing<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>unboxing<ept id=\"p2\">*</ept> to convert between an <ph id=\"ph2\">`Object`</ph> and a value type, which makes execution slower.","pos":[103,322],"source":"[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs operations called *boxing* and *unboxing* to convert between an `Object` and a value type, which makes execution slower."},{"content":"For information about boxing and unboxing, see the <bpt id=\"p1\">[</bpt>Visual Basic Language Specification<ept id=\"p1\">](../../../visual-basic/reference/language-specification.md)</ept>.","pos":[323,471],"source":" For information about boxing and unboxing, see the [Visual Basic Language Specification](../../../visual-basic/reference/language-specification.md)."}]}]},{"content":"Type inference applies at the procedure level, and does not apply outside a procedure in a class, structure, module, or interface.","pos":[2974,3104]},{"pos":[3111,3259],"content":"For additional information, see <bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.","source":"For additional information, see [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)."},{"pos":[3268,3313],"content":"When an Option Infer Statement Is Not Present","linkify":"When an Option Infer Statement Is Not Present","nodes":[{"content":"When an Option Infer Statement Is Not Present","pos":[0,45]}]},{"content":"If the source code does not contain an <ph id=\"ph1\">`Option Infer`</ph> statement, the <bpt id=\"p1\">**</bpt>Option Infer<ept id=\"p1\">**</ept> setting on the <bpt id=\"p2\">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id=\"p2\">](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept> is used.","pos":[3317,3572],"source":"If the source code does not contain an `Option Infer` statement, the **Option Infer** setting on the [Compile Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic) is used."},{"content":"If the command-line compiler is used, the <bpt id=\"p1\">[</bpt>/optioninfer<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/optioninfer.md)</ept> compiler option is used.","pos":[3573,3724],"source":" If the command-line compiler is used, the [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md) compiler option is used."},{"pos":[3735,3765],"content":"To set Option Infer in the IDE","linkify":"To set Option Infer in the IDE","nodes":[{"content":"To set Option Infer in the IDE","pos":[0,30]}]},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, select a project.","pos":[3775,3818],"source":"In **Solution Explorer**, select a project."},{"content":"On the <bpt id=\"p1\">**</bpt>Project<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>.","pos":[3819,3865],"source":" On the **Project** menu, click **Properties**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Managing Project Properties with the Project Designer<ept id=\"p1\">](http://msdn.microsoft.com/en-us/983f3c18-832f-4666-afec-74b716ff3e0e)</ept>.","pos":[3866,4023],"source":" For more information, see [NIB: Managing Project Properties with the Project Designer](http://msdn.microsoft.com/en-us/983f3c18-832f-4666-afec-74b716ff3e0e)."},{"pos":[4033,4059],"content":"Click the <bpt id=\"p1\">**</bpt>Compile<ept id=\"p1\">**</ept> tab.","source":"Click the **Compile** tab."},{"pos":[4069,4111],"content":"Set the value in the <bpt id=\"p1\">**</bpt>Option infer<ept id=\"p1\">**</ept> box.","source":"Set the value in the **Option infer** box."},{"content":"When you create a new project, the <bpt id=\"p1\">**</bpt>Option Infer<ept id=\"p1\">**</ept> setting on the <bpt id=\"p2\">**</bpt>Compile<ept id=\"p2\">**</ept> tab is set to the <bpt id=\"p3\">**</bpt>Option Infer<ept id=\"p3\">**</ept> setting in the <bpt id=\"p4\">**</bpt>VB Defaults<ept id=\"p4\">**</ept> dialog box.","pos":[4118,4274],"source":"When you create a new project, the **Option Infer** setting on the **Compile** tab is set to the **Option Infer** setting in the **VB Defaults** dialog box."},{"content":"To access the <bpt id=\"p1\">**</bpt>VB Defaults<ept id=\"p1\">**</ept> dialog box, on the <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept> menu, click <bpt id=\"p3\">**</bpt>Options<ept id=\"p3\">**</ept>.","pos":[4275,4358],"source":" To access the **VB Defaults** dialog box, on the **Tools** menu, click **Options**."},{"content":"In the <bpt id=\"p1\">**</bpt>Options<ept id=\"p1\">**</ept> dialog box, expand <bpt id=\"p2\">**</bpt>Projects and Solutions<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>VB Defaults<ept id=\"p3\">**</ept>.","pos":[4359,4456],"source":" In the **Options** dialog box, expand **Projects and Solutions**, and then click **VB Defaults**."},{"content":"The initial default setting in <bpt id=\"p1\">**</bpt>VB Defaults<ept id=\"p1\">**</ept> is <ph id=\"ph1\">`On`</ph>.","pos":[4457,4512],"source":" The initial default setting in **VB Defaults** is `On`."},{"pos":[4523,4562],"content":"To set Option Infer on the command line","linkify":"To set Option Infer on the command line","nodes":[{"content":"To set Option Infer on the command line","pos":[0,39]}]},{"pos":[4572,4708],"content":"Include the <bpt id=\"p1\">[</bpt>/optioninfer<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/optioninfer.md)</ept> compiler option in the <bpt id=\"p2\">**</bpt>vbc<ept id=\"p2\">**</ept> command.","source":"Include the [/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md) compiler option in the **vbc** command."},{"pos":[4717,4746],"content":"Default Data Types and Values","linkify":"Default Data Types and Values","nodes":[{"content":"Default Data Types and Values","pos":[0,29]}]},{"pos":[4750,4881],"content":"The following table describes the results of various combinations of specifying the data type and initializer in a <ph id=\"ph1\">`Dim`</ph> statement.","source":"The following table describes the results of various combinations of specifying the data type and initializer in a `Dim` statement."},{"content":"Data type specified?","pos":[4888,4908]},{"content":"Initializer specified?","pos":[4909,4931]},{"content":"Example","pos":[4932,4939]},{"content":"Result","pos":[4940,4946]},{"content":"No","pos":[4971,4973]},{"content":"No","pos":[4974,4976]},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is off (the default), the variable is set to <ph id=\"ph2\">`Nothing`</ph>.","pos":[4987,5061],"source":"If `Option Strict` is off (the default), the variable is set to `Nothing`."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is on, a compile-time error occurs.","pos":[5074,5128],"source":"If `Option Strict` is on, a compile-time error occurs."},{"content":"No","pos":[5133,5135]},{"content":"Yes","pos":[5136,5139]},{"content":"If <ph id=\"ph1\">`Option Infer`</ph> is on (the default), the variable takes the data type of the initializer.","pos":[5154,5245],"source":"If `Option Infer` is on (the default), the variable takes the data type of the initializer."},{"content":"See <bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.","pos":[5246,5366],"source":" See [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)."},{"content":"If <ph id=\"ph1\">`Option Infer`</ph> is off and <ph id=\"ph2\">`Option Strict`</ph> is off, the variable takes the data type of <ph id=\"ph3\">`Object`</ph>.","pos":[5379,5477],"source":"If `Option Infer` is off and `Option Strict` is off, the variable takes the data type of `Object`."},{"content":"If <ph id=\"ph1\">`Option Infer`</ph> is off and <ph id=\"ph2\">`Option Strict`</ph> is on, a compile-time error occurs.","pos":[5490,5570],"source":"If `Option Infer` is off and `Option Strict` is on, a compile-time error occurs."},{"content":"Yes","pos":[5575,5578]},{"content":"No","pos":[5579,5581]},{"content":"The variable is initialized to the default value for the data type.","pos":[5603,5670]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.","pos":[5671,5783],"source":" For more information, see [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)."},{"content":"Yes","pos":[5788,5791]},{"content":"Yes","pos":[5792,5795]},{"content":"If the data type of the initializer is not convertible to the specified data type, a compile-time error occurs.","pos":[5822,5933]},{"pos":[5943,5950],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5954,6051],"content":"The following examples demonstrate how the <ph id=\"ph1\">`Option Infer`</ph> statement enables local type inference.","source":"The following examples demonstrate how the `Option Infer` statement enables local type inference."},{"pos":[6206,6213],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6217,6331],"content":"The following example demonstrates that the run-time type can differ when a variable is identified as an <ph id=\"ph1\">`Object`</ph>.","source":"The following example demonstrates that the run-time type can differ when a variable is identified as an `Object`."},{"pos":[6487,6495],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6499,6585],"source":"[Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id=\"ph1\"> </ph>","pos":[6589,6705],"source":"[Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md) "},{"content":"<bpt id=\"p1\">[</bpt>Option Compare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6709,6817],"source":"[Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Option Explicit Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-explicit-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6821,6931],"source":"[Option Explicit Statement](../../../visual-basic/language-reference/statements/option-explicit-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6935,7041],"source":"[Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Visual Basic Defaults, Projects, Options Dialog Box<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/reference/visual-basic-defaults-projects-options-dialog-box)</ept><ph id=\"ph1\"> </ph>","pos":[7045,7204],"source":"[Visual Basic Defaults, Projects, Options Dialog Box](https://docs.microsoft.com/visualstudio/ide/reference/visual-basic-defaults-projects-options-dialog-box) "},{"content":"<bpt id=\"p1\">[</bpt>/optioninfer<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/optioninfer.md)</ept><ph id=\"ph1\"> </ph>","pos":[7208,7293],"source":"[/optioninfer](../../../visual-basic/reference/command-line-compiler/optioninfer.md) "},{"content":"<bpt id=\"p1\">[</bpt>Boxing and Unboxing<ept id=\"p1\">](../../../csharp/programming-guide/types/boxing-and-unboxing.md)</ept>","pos":[7297,7382],"source":"[Boxing and Unboxing](../../../csharp/programming-guide/types/boxing-and-unboxing.md)"}]}