<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f2881bb09b493f4ae28338bd75113fa4f54a1f2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\serialization\custom-serialization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">949e8462fed58d2bd986a81c51b3e3f30290cafe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc1dbaf1e6b3beb0435ac455fbdd5f2bb834ecad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Custom Serialization | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Custom Serialization</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom serialization is the process of controlling the serialization and deserialization of a type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By controlling serialization, it is possible to ensure serialization compatibility, which is the ability to serialize and deserialize between versions of a type without breaking the core functionality of the type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, in the first version of a type, there may be only two fields.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the next version of a type, several more fields are added.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Yet the second version of an application must be able to serialize and deserialize both types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following sections describe how to control serialization.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In versions previous to.NET Framework 4.0, serialization of custom user data in a partially trusted assembly was accomplished using the GetObjectData.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Starting with version 4.0, that method is marked with the <ph id="ph1">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> attribute which prevents execution in partially trusted assemblies.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To work around this condition, implement the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Running Custom Methods During and After Serialization</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The best practice and easiest way (introduced in version 2.0 of the .NET Framework) is to apply the following attributes to methods that are used to correct data during and after serialization:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These attributes allow the type to participate in any one of, or all four of the phases, of the serialization and deserialization processes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The attributes specify the methods of the type that should be invoked during each phase.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The methods do not access the serialization stream but instead allow you to alter the object before and after serialization, or before and after deserialization.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The attributes can be applied at all levels of the type inheritance hierarchy, and each method is called in the hierarchy from the base to the most derived.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This mechanism avoids the complexity and any resulting issues of implementing the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface by giving the responsibility for serialization and deserialization to the most derived implementation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Additionally, this mechanism allows the formatters to ignore the population of fields and retrieval from the serialization stream.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For details and examples of controlling serialization and deserialization, click any of the previous links.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In addition, when adding a new field to an existing serializable type, apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.OptionalFieldAttribute&gt;</ph> attribute to the field.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph> and the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph> ignores the absence of the field when a stream that is missing the new field is processed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Implementing the ISerializable Interface</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The other way to control serialization is achieved by implementing the <ph id="ph1">`ISerializable`</ph> interface on an object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note, however, that the method in the previous section supersedes this method to control serialization.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In addition, you should not use default serialization on a class that is marked with the <ph id="ph1">`Serializable`</ph> attribute and has declarative or imperative security at the class level or on its constructors.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Instead, these classes should always implement the <bpt id="p1">**</bpt>ISerializable<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Implementing <bpt id="p1">**</bpt>ISerializable<ept id="p1">**</ept> involves implementing the <ph id="ph1">`GetObjectData`</ph> method and a special constructor that is used when the object is deserialized.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following sample code shows how to implement <bpt id="p1">**</bpt>ISerializable<ept id="p1">**</ept> on the <ph id="ph1">`MyObject`</ph> class from a previous section.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>GetObjectData<ept id="p1">**</ept> is called during serialization, you are responsible for populating the <ph id="ph1">`SerializationInfo`</ph> provided with the method call.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Add the variables to be serialized as name and value pairs.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Any text can be used as the name.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You have the freedom to decide which member variables are added to the <bpt id="p1">**</bpt>SerializationInfo<ept id="p1">**</ept>, provided that sufficient data is serialized to restore the object during deserialization.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Derived classes should call the <bpt id="p1">**</bpt>GetObjectData<ept id="p1">**</ept> method on the base object if the latter implements <bpt id="p2">**</bpt>ISerializable.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Note that serialization can allow other code to see or modify object instance data that is otherwise inaccessible.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Therefore, code that performs serialization requires the <ph id="ph1">`SecurityPermission`</ph> with the <ph id="ph2">`SerializationFormatter`</ph> flag specified.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Under default policy, this permission is not given to Internet-downloaded or intranet code; only code on the local computer is granted this permission.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GetObjectData<ept id="p1">**</ept> method must be explicitly protected either by demanding the <bpt id="p2">**</bpt>SecurityPermission<ept id="p2">**</ept>with the<bpt id="p3">**</bpt>SerializationFormatter<ept id="p3">**</ept> flag specified or by demanding other permissions that specifically help protect private data.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If a private field stores sensitive information, you should demand the appropriate permissions on <bpt id="p1">**</bpt>GetObjectData<ept id="p1">**</ept> to protect the data.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remember that code that has been granted <bpt id="p1">**</bpt>SecurityPermission<ept id="p1">**</ept>with the<bpt id="p2">**</bpt>SerializationFormatter<ept id="p2">**</ept> flag specified can view and modify the data stored in private fields.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A malicious caller granted this <bpt id="p1">**</bpt>SecurityPermission<ept id="p1">**</ept> can view data such as hidden directory locations or granted permissions and use the data to exploit a security vulnerability on the computer.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For a complete list of the security permission flags you can specify, see the <ph id="ph1">`SecurityPermissionFlag Enumeration`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It is important to stress that when <bpt id="p1">**</bpt>ISerializable<ept id="p1">**</ept> is added to a class you must implement both <bpt id="p2">**</bpt>GetObjectData<ept id="p2">**</ept> and the special constructor.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The compiler warns you if <bpt id="p1">**</bpt>GetObjectData<ept id="p1">**</ept> is missing.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>However, because it is impossible to enforce the implementation of a constructor, no warning is provided if the constructor is absent, and an exception is thrown when an attempt is made to deserialize a class without the constructor.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The current design was favored above a <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializationSurrogate.SetObjectData%2A&gt;</ph> method to get around potential security and versioning problems.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`SetObjectData`</ph> method must be public if it is defined as part of an interface; thus users must write code to defend against having the <bpt id="p1">**</bpt>SetObjectData<ept id="p1">**</ept> method called multiple times.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Otherwise, a malicious application that calls the <bpt id="p1">**</bpt>SetObjectData<ept id="p1">**</ept> method on an object in the process of executing an operation can cause potential problems.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>During deserialization, <bpt id="p1">**</bpt>SerializationInfo<ept id="p1">**</ept> is passed to the class using the constructor provided for this purpose.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Any visibility constraints placed on the constructor are ignored when the object is deserialized; so you can mark the class as public, protected, internal, or private.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, it is a best practice to make the constructor protected unless the class is sealed, in which case the constructor should be marked private.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The constructor should also perform thorough input validation.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To avoid misuse by malicious code, the constructor should enforce the same security checks and permissions required to obtain an instance of the class using any other constructor.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you do not follow this recommendation, malicious code can preserialize an object, obtain control with the <bpt id="p1">**</bpt>SecurityPermission<ept id="p1">**</ept>with the<bpt id="p2">**</bpt>SerializationFormatter<ept id="p2">**</ept> flag specified and deserialize the object on a client computer bypassing any security that would have been applied during standard instance construction using a public constructor.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To restore the state of the object, simply retrieve the values of the variables from <bpt id="p1">**</bpt>SerializationInfo<ept id="p1">**</ept> using the names used during serialization.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the base class implements <bpt id="p1">**</bpt>ISerializable<ept id="p1">**</ept>, the base constructor should be called to allow the base object to restore its variables.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you derive a new class from one that implements <bpt id="p1">**</bpt>ISerializable,<ept id="p1">**</ept> the derived class must implement both the constructor as well as the <bpt id="p2">**</bpt>GetObjectData<ept id="p2">**</ept> method if it has variables that need to be serialized.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code example shows how this is done using the <ph id="ph1">`MyObject`</ph> class shown previously.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Do not forget to call the base class in the deserialization constructor.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If this is not done, the constructor on the base class is never called, and the object is not fully constructed after deserialization.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Objects are reconstructed from the inside out; and calling methods during deserialization can have undesirable side effects, because the methods called might refer to object references that have not been deserialized by the time the call is made.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the class being deserialized implements the IDeserializationCallback<ph id="ph1">`, the `</ph>OnDeserialization` method is automatically called when the entire object graph has been deserialized.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>At this point, all the child objects referenced have been fully restored.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A hash table is a typical example of a class that is difficult to deserialize without using the event listener.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It is easy to retrieve the key and value pairs during deserialization, but adding these objects back to the hash table can cause problems, because there is no guarantee that classes that derived from the hash table have been deserialized.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Calling methods on a hash table at this stage is therefore not advisable.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Binary Serialization<ept id="p1">](../../../docs/framework/serialization/binary-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/xml-and-soap-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security and Serialization<ept id="p1">](../../../docs/framework/misc/security-and-serialization.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>