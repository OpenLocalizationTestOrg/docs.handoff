{"content":"---\ntitle: \"How to: Filter on an Attribute (XPath-LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: ffefb9d6-45ec-4677-a396-dd9c2b36298f\n---\n# How to: Filter on an Attribute (XPath-LINQ to XML) (Visual Basic)\nThis topic shows how to get the descendant elements with a specified name, and with an attribute with a specified value.  \n  \n The XPath expression is:  \n  \n `.//Address[@Type='Shipping']`  \n  \n## Example  \n This example finds all descendants elements with the name of `Address`, and with a `Type` attribute with a value of \"Shipping\".  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md).  \n  \n```vb  \nDim po As XDocument = XDocument.Load(\"PurchaseOrders.xml\")  \n  \n' LINQ to XML query  \nDim list1 As IEnumerable(Of XElement) = _  \n    From el In po...<Address> _  \n    Where el.@Type = \"Shipping\" _  \n    Select el  \n  \n' XPath expression  \nDim list2 As IEnumerable(Of XElement) = _  \n    po.XPathSelectElements(\".//Address[@Type='Shipping']\")  \n  \nIf (list1.Count = list2.Count And _  \n        list1.Intersect(list2).Count() = list1.Count()) Then  \n    Console.WriteLine(\"Results are identical\")  \nElse  \n    Console.WriteLine(\"Results differ\")  \nEnd If  \nFor Each el As XElement In list1  \n    Console.WriteLine(el)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \nResults are identical  \n<Address Type=\"Shipping\">  \n  <Name>Ellen Adams</Name>  \n  <Street>123 Maple Street</Street>  \n  <City>Mill Valley</City>  \n  <State>CA</State>  \n  <Zip>10999</Zip>  \n  <Country>USA</Country>  \n</Address>  \n<Address Type=\"Shipping\">  \n  <Name>Cristian Osorio</Name>  \n  <Street>456 Main Street</Street>  \n  <City>Buffalo</City>  \n  <State>NY</State>  \n  <Zip>98112</Zip>  \n  <Country>USA</Country>  \n</Address>  \n<Address Type=\"Shipping\">  \n  <Name>Jessica Arnold</Name>  \n  <Street>4055 Madison Ave</Street>  \n  <City>Seattle</City>  \n  <State>WA</State>  \n  <Zip>98112</Zip>  \n  <Country>USA</Country>  \n</Address>  \n```  \n  \n## See also\n\n- [LINQ to XML for XPath Users (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)\n","nodes":[{"pos":[4,147],"embed":true,"restype":"x-metadata","content":"title: \"How to: Filter on an Attribute (XPath-LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: ffefb9d6-45ec-4677-a396-dd9c2b36298f","nodes":[{"content":"How to: Filter on an Attribute (XPath-LINQ to XML) (Visual Basic)","nodes":[{"pos":[0,65],"content":"How to: Filter on an Attribute (XPath-LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Filter on an Attribute (XPath-LINQ to XML) (Visual Basic)","pos":[0,65]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[154,219],"content":"How to: Filter on an Attribute (XPath-LINQ to XML) (Visual Basic)","linkify":"How to: Filter on an Attribute (XPath-LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Filter on an Attribute (XPath-LINQ to XML) (Visual Basic)","pos":[0,65]}]},{"content":"This topic shows how to get the descendant elements with a specified name, and with an attribute with a specified value.","pos":[220,340]},{"content":"The XPath expression is:","pos":[347,371]},{"pos":[417,424],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[428,555],"content":"This example finds all descendants elements with the name of <ph id=\"ph1\">`Address`</ph>, and with a <ph id=\"ph2\">`Type`</ph> attribute with a value of \"Shipping\".","source":"This example finds all descendants elements with the name of `Address`, and with a `Type` attribute with a value of \"Shipping\"."},{"pos":[562,780],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)."},{"content":"This example produces the following output:","pos":[1430,1473]},{"pos":[2140,2148],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2152,2285],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML for XPath Users (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)</ept>","source":"[LINQ to XML for XPath Users (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)"}]}