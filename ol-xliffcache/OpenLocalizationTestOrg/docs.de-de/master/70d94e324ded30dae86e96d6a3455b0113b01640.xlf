<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70d94e324ded30dae86e96d6a3455b0113b01640</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\generics-in-xaml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1140f87cc2d5cbfe441860d98eccfe802e37ce69</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">670db4fda3580326b3fd35c35e68a08626e657f1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generics in XAML | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generics in XAML</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework XAML Services as implemented in System.Xaml provides support for using generic CLR types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This support includes specifying the constraints of generics as a type argument and enforcing the constraint by calling the appropriate <ph id="ph1">`Add`</ph> method for generic collection cases.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes aspects of using and referencing generic types in XAML.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>x:TypeArguments</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:TypeArguments`</ph> is a directive defined by the XAML language.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When it is used as a member of a XAML type that is backed by a generic type, <ph id="ph1">`x:TypeArguments`</ph> passes constraining type arguments of the generic to the backing constructor.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For reference syntax that pertains to .NET Framework XAML Services use of <ph id="ph1">`x:TypeArguments`</ph>, which includes syntax examples, see <bpt id="p1">[</bpt>x:TypeArguments Directive<ept id="p1">](../../../docs/framework/xaml-services/x-typearguments-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`x:TypeArguments`</ph> takes a string, and has type converter backing, it is typically declared in XAML usage as an attribute.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the XAML node stream, the information declared by <ph id="ph1">`x:TypeArguments`</ph> can be obtained from <ph id="ph2">&lt;xref:System.Xaml.XamlType.TypeArguments%2A?displayProperty=fullName&gt;</ph> at a <ph id="ph3">`StartObject`</ph> position in the node stream.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The return value of <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeArguments%2A?displayProperty=fullName&gt;</ph> is a list of <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Determination of whether a XAML type represents a generic type can be made by calling <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsGeneric%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Rules and Syntax Conventions for Generics in XAML</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In XAML, a generic type must always be represented as a constrained generic; an unconstrained generic is never present in the XAML type system or a XAML node stream and cannot be represented in XAML markup.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A generic can be referenced within XAML attribute syntax, for cases where it is a nested type constraint of a generic being referenced by <ph id="ph1">`x:TypeArguments`</ph>, or for cases where <ph id="ph2">`x:Type`</ph> supplies a CLR type reference for a generic type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is supported through the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeTypeConverter&gt;</ph> class defined by .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The XAML attribute syntax form enabled by <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeTypeConverter&gt;</ph> alters the typical MSIL / CLR syntax convention that uses angle brackets for types and constraints of generics, and instead substitutes parentheses for the constraint container.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>x:TypeArguments Directive<ept id="p1">](../../../docs/framework/xaml-services/x-typearguments-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Generics and XAML 2009 Features</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you use XAML 2009 instead of mapping the CLR base types to obtain XAML types for common language primitives, you can use <bpt id="p1">[</bpt>XAML 2009 built-in types<ept id="p1">](../../../docs/framework/xaml-services/built-in-types-for-common-xaml-language-primitives.md)</ept> as information items in <ph id="ph1">`x:TypeArguments`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, you could declare the following (prefix mappings not shown, but <ph id="ph1">`x`</ph> is the XAML language XAML namespace for XAML 2009):</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Generics Support in WPF and Other v3.5 Frameworks</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For XAML 2006 usage when specifically targeting WPF, <bpt id="p1">[</bpt>x:Class<ept id="p1">](../../../docs/framework/xaml-services/x-class-directive.md)</ept> must also be provided on the same element as <ph id="ph1">`x:TypeArguments`</ph>, and that element must be the root element in a XAML document.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The root element must map to a generic type with at least one type argument.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An example is <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Possible workarounds to support generic usages include defining a custom markup extension that can return generic types, or providing a wrapping class definition that derives from a generic type but flattens the generic constraint in its own class definition.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In WPF and targeting <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, you can use XAML 2009 features together with <ph id="ph2">`x:TypeArguments`</ph>, but only for loose XAML (XAML that is not markup-compiled).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Custom workflows in <ph id="ph1">[!INCLUDE[TLA#tla_workflow](../../../includes/tlasharptla-workflow-md.md)]</ph> for <ph id="ph2">[!INCLUDE[net_v35_short](../../../includes/net-v35-short-md.md)]</ph> do not support generic XAML usage.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:TypeArguments Directive<ept id="p1">](../../../docs/framework/xaml-services/x-typearguments-directive.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Class Directive<ept id="p1">](../../../docs/framework/xaml-services/x-class-directive.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Built-in Types for Common XAML Language Primitives<ept id="p1">](../../../docs/framework/xaml-services/built-in-types-for-common-xaml-language-primitives.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>