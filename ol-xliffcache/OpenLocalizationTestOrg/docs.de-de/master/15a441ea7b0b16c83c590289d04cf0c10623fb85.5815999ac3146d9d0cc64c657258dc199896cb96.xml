{"content":"---\ntitle: \"Specifying an Entry Point\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"EntryPoint field\"\n  - \"platform invoke, attribute fields\"\n  - \"attribute fields in platform invoke, EntryPoint\"\nms.assetid: d1247f08-0965-416a-b978-e0b50652dfe3\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Specifying an Entry Point\nAn entry point identifies the location of a function in a DLL. Within a managed project, the original name or ordinal entry point of a target function identifies that function across the interoperation boundary. Further, you can map the entry point to a different name, effectively renaming the function.  \n  \n Following is a list of possible reasons to rename a DLL function:  \n  \n-   To avoid using case-sensitive API function names  \n  \n-   To comply with existing naming standards  \n  \n-   To accommodate functions that take different data types (by declaring multiple versions of the same DLL function)  \n  \n-   To simplify using APIs that contain ANSI and Unicode versions  \n  \n This topic demonstrates how to rename a DLL function in managed code.  \n  \n## Renaming a Function in Visual Basic  \n Visual Basic uses the **Function** keyword in the **Declare** statement to set the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint?displayProperty=nameWithType> field. The following example shows a basic declaration.  \n  \n```vb\nImports System\n\nFriend Class WindowsAPI\n    Friend Shared Declare Auto Function MessageBox Lib \"user32.dll\" (\n        ByVal hWnd As IntPtr,\n        ByVal lpText As String,\n        ByVal lpCaption As String,\n        ByVal uType As UInteger) As Integer\nEnd Class\n```\n  \n You can replace the **MessageBox** entry point with **MsgBox** by including the **Alias** keyword in your definition, as shown in the following example. In both examples the **Auto** keyword eliminates the need to specify the character-set version of the entry point. For more information about selecting a character set, see [Specifying a Character Set](../../../docs/framework/interop/specifying-a-character-set.md).  \n  \n```vb\nImports System\n\nFriend Class WindowsAPI\n    Friend Shared Declare Auto Function MsgBox _\n        Lib \"user32.dll\" Alias \"MessageBox\" (\n        ByVal hWnd As IntPtr,\n        ByVal lpText As String,\n        ByVal lpCaption As String,\n        ByVal uType As UInteger) As Integer\nEnd Class\n```\n  \n## Renaming a Function in C# and C++  \n You can use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint?displayProperty=nameWithType> field to specify a DLL function by name or ordinal. If the name of the function in your method definition is the same as the entry point in the DLL, you do not have to explicitly identify the function with the **EntryPoint** field. Otherwise, use one of the following attribute forms to indicate a name or ordinal:  \n  \n```csharp\n[DllImport(\"DllName\", EntryPoint = \"Functionname\")]\n[DllImport(\"DllName\", EntryPoint = \"#123\")]\n```\n  \n Notice that you must prefix an ordinal with the pound sign (#).  \n  \n The following example demonstrates how to replace **MessageBoxA** with **MsgBox** in your code by using the **EntryPoint** field.  \n  \n```csharp\nusing System;\nusing System.Runtime.InteropServices;\n\ninternal static class WindowsAPI\n{\n    [DllImport(\"user32.dll\", EntryPoint = \"MessageBoxA\")]\n    internal static extern int MessageBox(\n        IntPtr hWnd, string lpText, string lpCaption, uint uType);\n}\n```\n  \n```cpp\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\n\ntypedef void* HWND;\n[DllImport(\"user32\", EntryPoint = \"MessageBoxA\")]\nextern \"C\" int MsgBox(\n    HWND hWnd, String* lpText, String* lpCaption, unsigned int uType);\n```\n  \n## See also\n\n- <xref:System.Runtime.InteropServices.DllImportAttribute>\n- [Creating Prototypes in Managed Code](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)\n- [Platform Invoke Examples](../../../docs/framework/interop/platform-invoke-examples.md)\n- [Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)\n","nodes":[{"pos":[4,288],"embed":true,"restype":"x-metadata","content":"title: \"Specifying an Entry Point\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"EntryPoint field\"\n  - \"platform invoke, attribute fields\"\n  - \"attribute fields in platform invoke, EntryPoint\"\nms.assetid: d1247f08-0965-416a-b978-e0b50652dfe3\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Specifying an Entry Point","nodes":[{"pos":[0,25],"content":"Specifying an Entry Point","nodes":[{"content":"Specifying an Entry Point","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[295,320],"content":"Specifying an Entry Point","linkify":"Specifying an Entry Point","nodes":[{"content":"Specifying an Entry Point","pos":[0,25]}]},{"content":"An entry point identifies the location of a function in a DLL.","pos":[321,383]},{"content":"Within a managed project, the original name or ordinal entry point of a target function identifies that function across the interoperation boundary.","pos":[384,532]},{"content":"Further, you can map the entry point to a different name, effectively renaming the function.","pos":[533,625]},{"content":"Following is a list of possible reasons to rename a DLL function:","pos":[632,697]},{"content":"To avoid using case-sensitive API function names","pos":[707,755]},{"content":"To comply with existing naming standards","pos":[765,805]},{"content":"To accommodate functions that take different data types (by declaring multiple versions of the same DLL function)","pos":[815,928]},{"content":"To simplify using APIs that contain ANSI and Unicode versions","pos":[938,999]},{"content":"This topic demonstrates how to rename a DLL function in managed code.","pos":[1006,1075]},{"pos":[1084,1119],"content":"Renaming a Function in Visual Basic","linkify":"Renaming a Function in Visual Basic","nodes":[{"content":"Renaming a Function in Visual Basic","pos":[0,35]}]},{"content":"Visual Basic uses the <bpt id=\"p1\">**</bpt>Function<ept id=\"p1\">**</ept> keyword in the <bpt id=\"p2\">**</bpt>Declare<ept id=\"p2\">**</ept> statement to set the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint?displayProperty=nameWithType&gt;</ph> field.","pos":[1123,1309],"source":"Visual Basic uses the **Function** keyword in the **Declare** statement to set the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint?displayProperty=nameWithType> field."},{"content":"The following example shows a basic declaration.","pos":[1310,1358]},{"content":"You can replace the <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept> entry point with <bpt id=\"p2\">**</bpt>MsgBox<ept id=\"p2\">**</ept> by including the <bpt id=\"p3\">**</bpt>Alias<ept id=\"p3\">**</ept> keyword in your definition, as shown in the following example.","pos":[1639,1791],"source":"You can replace the **MessageBox** entry point with **MsgBox** by including the **Alias** keyword in your definition, as shown in the following example."},{"content":"In both examples the <bpt id=\"p1\">**</bpt>Auto<ept id=\"p1\">**</ept> keyword eliminates the need to specify the character-set version of the entry point.","pos":[1792,1906],"source":" In both examples the **Auto** keyword eliminates the need to specify the character-set version of the entry point."},{"content":"For more information about selecting a character set, see <bpt id=\"p1\">[</bpt>Specifying a Character Set<ept id=\"p1\">](../../../docs/framework/interop/specifying-a-character-set.md)</ept>.","pos":[1907,2057],"source":" For more information about selecting a character set, see [Specifying a Character Set](../../../docs/framework/interop/specifying-a-character-set.md)."},{"pos":[2365,2398],"content":"Renaming a Function in C# and C++","linkify":"Renaming a Function in C# and C++","nodes":[{"content":"Renaming a Function in C# and C++","pos":[0,33]}]},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint?displayProperty=nameWithType&gt;</ph> field to specify a DLL function by name or ordinal.","pos":[2402,2566],"source":"You can use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint?displayProperty=nameWithType> field to specify a DLL function by name or ordinal."},{"content":"If the name of the function in your method definition is the same as the entry point in the DLL, you do not have to explicitly identify the function with the <bpt id=\"p1\">**</bpt>EntryPoint<ept id=\"p1\">**</ept> field.","pos":[2567,2746],"source":" If the name of the function in your method definition is the same as the entry point in the DLL, you do not have to explicitly identify the function with the **EntryPoint** field."},{"content":"Otherwise, use one of the following attribute forms to indicate a name or ordinal:","pos":[2747,2829]},{"content":"Notice that you must prefix an ordinal with the pound sign (#).","pos":[2949,3012]},{"pos":[3019,3148],"content":"The following example demonstrates how to replace <bpt id=\"p1\">**</bpt>MessageBoxA<ept id=\"p1\">**</ept> with <bpt id=\"p2\">**</bpt>MsgBox<ept id=\"p2\">**</ept> in your code by using the <bpt id=\"p3\">**</bpt>EntryPoint<ept id=\"p3\">**</ept> field.","source":"The following example demonstrates how to replace **MessageBoxA** with **MsgBox** in your code by using the **EntryPoint** field."},{"pos":[3685,3693],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3756,3865],"content":"<bpt id=\"p1\">[</bpt>Creating Prototypes in Managed Code<ept id=\"p1\">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept>","source":"[Creating Prototypes in Managed Code](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)"},{"pos":[3868,3955],"content":"<bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](../../../docs/framework/interop/platform-invoke-examples.md)</ept>","source":"[Platform Invoke Examples](../../../docs/framework/interop/platform-invoke-examples.md)"},{"pos":[3958,4069],"content":"<bpt id=\"p1\">[</bpt>Marshaling Data with Platform Invoke<ept id=\"p1\">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept>","source":"[Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)"}]}