<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="comparisons-and-sorts-within-collections.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0da0bed43cb7871f522b94b134afb164d8ee3ab5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\collections\comparisons-and-sorts-within-collections.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">758ea697be752e99644948485ee4f4ab7cdb17fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a20c5cb07031c5751451988c9320dd3ca547cd81</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Comparisons and Sorts Within Collections | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Comparisons and Sorts Within Collections</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections&gt;</ph> classes perform comparisons in almost all the processes involved in managing collections, whether searching for the element to remove or returning the value of a key-and-value pair.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Collections typically utilize an equality comparer and/or an ordering comparer.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Two constructs are used for comparisons.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Checking for equality</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Methods such as <ph id="ph1">`Contains`</ph>, <ph id="ph2">&lt;xref:System.Collections.IList.IndexOf%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>, and <ph id="ph4">`Remove`</ph> use an equality comparer for the collection elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the collection is generic, than items are compared for equality according to the following guidelines:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If type T implements the <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, then the equality comparer is the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method of that interface.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If type T does not implement <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph>, <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph> is used.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In addition, Some constructor overloads for dictionary collections accept an <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> implementation, which is used to compare keys for equality.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%2A?displayProperty=fullName&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Determining sort order</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Methods such as <ph id="ph1">`BinarySearch`</ph> and <ph id="ph2">`Sort`</ph> use an ordering comparer for the collection elements.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The comparisons can be between elements of the collection, or between an element and a specified value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For comparing objects, there is the concept of a <ph id="ph1">`default comparer`</ph> and an <ph id="ph2">`explicit comparer`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The default comparer relies on at least one of the objects being compared to implement the <bpt id="p1">**</bpt>IComparable<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is a good practice to implement <bpt id="p1">**</bpt>IComparable<ept id="p1">**</ept> on all classes are used as values in a list collection or as keys in a dictionary collection.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For a generic collection, equality comparison is determined according to the following:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If type T implements the <ph id="ph1">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface, then the default comparer is the <ph id="ph2">&lt;xref:System.IComparable%601.CompareTo%28%600%29?displayProperty=fullName&gt;</ph> method of that interface</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If type T implements the non-generic <ph id="ph1">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface, then the default comparer is the <ph id="ph2">&lt;xref:System.IComparable.CompareTo%28System.Object%29?displayProperty=fullName&gt;</ph> method of that interface.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If type T doesnâ€™t implement either interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To provide explicit comparisons, some methods accept an <bpt id="p1">**</bpt>IComparer<ept id="p1">**</ept> implementation as a parameter.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName&gt;</ph> method accepts an <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=fullName&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The current culture setting of the system can affect the comparisons and sorts within a collection.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>By default, the comparisons and sorts in the <bpt id="p1">**</bpt>Collections<ept id="p1">**</ept> classes are culture-sensitive.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To ignore the culture setting and therefore obtain consistent comparison and sorting results, use the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> with member overloads that accept a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Performing Culture-Insensitive String Operations in Collections<ept id="p1">](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md)</ept> and <bpt id="p2">[</bpt>Performing Culture-Insensitive String Operations in Arrays<ept id="p2">](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Equality and sort example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code demonstrates an implementation of <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> on a simple business object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In addition, when the object is stored in a list and sorted, you will see that calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method results in the use of the default comparer for the <ph id="ph2">`Part`</ph> type, and the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method implemented by using an anonymous method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Collections.Generic.List.Sort#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Collections.Generic.List.Sort#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>