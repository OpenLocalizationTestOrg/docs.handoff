{"content":"---\ntitle: Running Console applications in Docker\ndescription: Learn how to take an existing .NET Framework console application and run it in a Windows Docker container.\nauthor: spboyer\nms.date: 09/28/2016\nms.assetid: 85cca1d5-c9a4-4eb2-93e6-4f878de07fd7\n---\n\n# Running console applications in Windows containers\n\nConsole applications are used for many purposes; from simple querying of a status to long running document image processing tasks. In any case, the ability to start up and scale these applications are met with limitations of hardware acquisitions, startup times or running multiple instances.\n\nMoving your console applications to use Docker and Windows Server containers allows for starting these applications from a clean state, enabling them to perform the operation and then shutdown cleanly. This topic will show the steps needed to move a console application to a Windows based container and start it using a PowerShell script.\n\nThe sample console application is a simple example which takes an argument, a question in this case, and returns a random answer. This could take a `customer_id` and process their taxes, or create a thumbnail for an `image_url` argument.\n\nIn addition to the answer, the `Environment.MachineName` has been added to the response to show the difference between running the application locally and in a Windows container. When running the application locally, your local machine name should be returned and when running in a Windows Container; the container session id is returned.\n\nThe [complete example](https://github.com/dotnet/samples/tree/master/framework/docker/ConsoleRandomAnswerGenerator) is available in the dotnet/samples repository on GitHub. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\nYou need to be familiar with some Docker terms before you begin working\non moving your application to a container.\n\n> A *Docker image* is a read-only template that defines the environment\n> for a running container, including the operating system (OS), system components, and application(s).\n\nOne important feature of Docker images is that images are composed from a\nbase image. Each new image adds a small set of features to an existing\nimage. \n\n> A *Docker container* is a running instance of an image. \n\nYou scale an application by running the same image in many containers.\nConceptually, this is similar to running the same application in multiple\nhosts.\n\nYou can learn more about the Docker architecture by reading the \n[Docker Overview](https://docs.docker.com/engine/understanding-docker/)\non the Docker site. \n\nMoving your console application is a matter of a few steps.\n\n1. [Build the application](#building-the-application)\n1. [Creating a Dockerfile for the image](#creating-the-dockerfile)\n1. [Process to build and run the Docker container](#creating-the-image)\n\n## Prerequisites\nWindows containers are supported on [Windows 10 Anniversary Update](https://www.microsoft.com/en-us/software-download/windows10/) or \n[Windows Server 2016](https://www.microsoft.com/en-us/cloud-platform/windows-server).\n\n> [!NOTE]\n>If you are using Windows Server 2016, you must enable containers manually since the Docker for Windows installer will not enable the feature. Make sure all updates have run for the OS and then follow the instructions from the [Container Host Deployment](/virtualization/windowscontainers/deploy-containers/deploy-containers-on-server) article to install the containers and Docker features.\n\nYou need to have Docker for Windows, version 1.12 Beta 26 or higher to support Windows containers. By default, Docker enables Linux based containers; switch to Windows containers by right clicking the Docker icon in the system tray and select **Switch to Windows containers**. Docker will run the process to change and a restart may be required.\n\n![Screenshot of the Windows container menu option.](./media/console/windows-container-option.png)\n\n## Building the application\nTypically console applications are distributed through an installer, FTP, or File Share deployment. When deploying to a container, the assets need to be compiled and staged to a location that can be used when the Docker image is created.\n\nHere is the sample application: [ConsoleRandomAnswerGenerator](https://github.com/dotnet/samples/tree/master/framework/docker/ConsoleRandomAnswerGenerator)\n\nIn *build.ps1*<sup>[[source]](https://github.com/dotnet/samples/blob/master/framework/docker/ConsoleRandomAnswerGenerator/ConsoleRandomAnswerGenerator/build.ps1)</sup>, the script uses [MSBuild](/visualstudio/msbuild/msbuild) to compile the application to complete the task of building the assets. There are a few parameters passed to MSBuild to finalize the needed assets. The name of the project file or solution to be compiled, the location for the output and finally the configuration (Release or Debug).\n\nIn the call to `Invoke-MSBuild` the `OutputPath` is set to **publish** and  `Configuration` set to **Release**. \n\n```powershell\nfunction Invoke-MSBuild ([string]$MSBuildPath, [string]$MSBuildParameters) {\n    Invoke-Expression \"$MSBuildPath $MSBuildParameters\"\n}\n\nInvoke-MSBuild -MSBuildPath \"MSBuild.exe\" -MSBuildParameters \".\\ConsoleRandomAnswerGenerator.csproj -p:OutputPath=.\\publish -p:Configuration=Release\"\n```\n\n## Creating the Dockerfile\nThe base image used for a console .NET Framework application is `microsoft/windowsservercore`, publicly available on [Docker Hub](https://hub.docker.com/r/microsoft/windowsservercore/). The base image contains a minimal installation of Windows Server 2016, .NET Framework 4.6.2 and serves as the base OS image for Windows Containers.\n\n```\nFROM microsoft/windowsservercore\nADD publish/ /\nENTRYPOINT ConsoleRandomAnswerGenerator.exe\n```\nThe first line in the Dockerfile designates the base image using the [`FROM`](https://docs.docker.com/engine/reference/builder/#/from) instruction. Next, [`ADD`](https://docs.docker.com/engine/reference/builder/#/add) in the file copies the application assets from the **publish** folder to root folder of the container and last; setting the [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#/entrypoint) of the image states that this is the command or application that will run when the container starts. \n\n## Creating the image\nIn order to create the Docker image, the following code is added to the *build.ps1* script. When the script is run, the `console-random-answer-generator` image is created using the assets compiled from MSBuild defined in the [Building the application](#building-the-application) section.\n\n```powershell\n$ImageName=\"console-random-answer-generator\"\n\nfunction Invoke-Docker-Build ([string]$ImageName, [string]$ImagePath, [string]$DockerBuildArgs = \"\") {\n    echo \"docker build -t $ImageName $ImagePath $DockerBuildArgs\"\n    Invoke-Expression \"docker build -t $ImageName $ImagePath $DockerBuildArgs\"\n}\n\nInvoke-Docker-Build -ImageName $ImageName -ImagePath \".\"\n```\n\nRun the script using `.\\build.ps1` from the PowerShell command prompt.\n\nWhen the build is complete, using the `docker images` command from a command line or PowerShell prompt; you'll see that the image is created and ready to be run.\n\n```\nREPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE\nconsole-random-answer-generator   latest              8f7c807db1b5        8 seconds ago       7.33 GB\n```\n\n## Running the container\nYou can start the container from the command line using the Docker commands.\n\n```\ndocker run console-random-answer-generator \"Are you a square container?\"\n```\n\nThe output is\n\n```\nThe answer to your question: 'Are you a square container?' is Concentrate and ask again on (70C3D48F4343)\n```\n\nIf you run the `docker ps -a` command from PowerShell, you can see that the container still exists.\n\n```\nCONTAINER ID        IMAGE                             COMMAND                  CREATED             STATUS                          \n70c3d48f4343        console-random-answer-generator   \"cmd /S /C ConsoleRan\"   2 minutes ago       Exited (0) About a minute ago      \n```\n\nThe STATUS column shows at \"About a minute ago\", the application was complete and could be shut down. If the command was run a hundred times, there would be a hundred containers left static with no work to do. In the beginning scenario the ideal operation was to do the work and shutdown or cleanup. To accomplish that workflow, adding the `--rm` option to the `docker run` command will remove the container as soon as the `Exited` signal is received.\n\n```\ndocker run --rm console-random-answer-generator \"Are you a square container?\"\n```\n\nRunning the command with this option and then looking at the output of `docker ps -a` command; notice that the container id (the `Environment.MachineName`) is not in the list.\n\n### Running the container using PowerShell\nIn the sample project files there is also a *run.ps1* which is an example of how to use PowerShell to run the application accepting the arguments.\n\nTo run, open PowerShell and use the following command:\n\n```powershell\n.\\run.ps1 \"Is this easy or what?\"\n```\n\n## Summary\nJust by adding a Dockerfile and publishing the application, you can containerize your .NET Framework console applications and now take the advantage of running multiple instances, clean start and stop and more Windows Server 2016 capabilities without making any changes to the application code at all.\n","nodes":[{"pos":[4,254],"embed":true,"restype":"x-metadata","content":"title: Running Console applications in Docker\ndescription: Learn how to take an existing .NET Framework console application and run it in a Windows Docker container.\nauthor: spboyer\nms.date: 09/28/2016\nms.assetid: 85cca1d5-c9a4-4eb2-93e6-4f878de07fd7","nodes":[{"content":"Running Console applications in Docker","nodes":[{"pos":[0,38],"content":"Running Console applications in Docker","nodes":[{"content":"Running Console applications in Docker","pos":[0,38]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to take an existing .NET Framework console application and run it in a Windows Docker container.","nodes":[{"pos":[0,106],"content":"Learn how to take an existing .NET Framework console application and run it in a Windows Docker container.","nodes":[{"content":"Learn how to take an existing .NET Framework console application and run it in a Windows Docker container.","pos":[0,106]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[262,312],"content":"Running console applications in Windows containers","linkify":"Running console applications in Windows containers","nodes":[{"content":"Running console applications in Windows containers","pos":[0,50]}]},{"content":"Console applications are used for many purposes; from simple querying of a status to long running document image processing tasks.","pos":[314,444]},{"content":"In any case, the ability to start up and scale these applications are met with limitations of hardware acquisitions, startup times or running multiple instances.","pos":[445,606]},{"content":"Moving your console applications to use Docker and Windows Server containers allows for starting these applications from a clean state, enabling them to perform the operation and then shutdown cleanly.","pos":[608,809]},{"content":"This topic will show the steps needed to move a console application to a Windows based container and start it using a PowerShell script.","pos":[810,946]},{"content":"The sample console application is a simple example which takes an argument, a question in this case, and returns a random answer.","pos":[948,1077]},{"content":"This could take a <ph id=\"ph1\">`customer_id`</ph> and process their taxes, or create a thumbnail for an <ph id=\"ph2\">`image_url`</ph> argument.","pos":[1078,1185],"source":" This could take a `customer_id` and process their taxes, or create a thumbnail for an `image_url` argument."},{"content":"In addition to the answer, the <ph id=\"ph1\">`Environment.MachineName`</ph> has been added to the response to show the difference between running the application locally and in a Windows container.","pos":[1187,1365],"source":"In addition to the answer, the `Environment.MachineName` has been added to the response to show the difference between running the application locally and in a Windows container."},{"content":"When running the application locally, your local machine name should be returned and when running in a Windows Container; the container session id is returned.","pos":[1366,1525]},{"content":"The <bpt id=\"p1\">[</bpt>complete example<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/framework/docker/ConsoleRandomAnswerGenerator)</ept> is available in the dotnet/samples repository on GitHub.","pos":[1527,1699],"source":"The [complete example](https://github.com/dotnet/samples/tree/master/framework/docker/ConsoleRandomAnswerGenerator) is available in the dotnet/samples repository on GitHub."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[1700,1825],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"pos":[1827,1941],"content":"You need to be familiar with some Docker terms before you begin working on moving your application to a container.","source":"You need to be familiar with some Docker terms before you begin working\non moving your application to a container."},{"pos":[1945,2117],"content":"A <bpt id=\"p1\">*</bpt>Docker image<ept id=\"p1\">*</ept> is a read-only template that defines the environment for a running container, including the operating system (OS), system components, and application(s).","leadings":["","> "],"source":"A *Docker image* is a read-only template that defines the environment\nfor a running container, including the operating system (OS), system components, and application(s)."},{"content":"One important feature of Docker images is that images are composed from a base image.","pos":[2119,2204],"source":"One important feature of Docker images is that images are composed from a\nbase image."},{"content":"Each new image adds a small set of features to an existing image.","pos":[2205,2270],"source":" Each new image adds a small set of features to an existing\nimage."},{"pos":[2275,2330],"content":"A <bpt id=\"p1\">*</bpt>Docker container<ept id=\"p1\">*</ept> is a running instance of an image.","source":"A *Docker container* is a running instance of an image."},{"content":"You scale an application by running the same image in many containers.","pos":[2333,2403]},{"content":"Conceptually, this is similar to running the same application in multiple hosts.","pos":[2404,2484],"source":"\nConceptually, this is similar to running the same application in multiple\nhosts."},{"pos":[2486,2642],"content":"You can learn more about the Docker architecture by reading the <bpt id=\"p1\">[</bpt>Docker Overview<ept id=\"p1\">](https://docs.docker.com/engine/understanding-docker/)</ept> on the Docker site.","source":"You can learn more about the Docker architecture by reading the \n[Docker Overview](https://docs.docker.com/engine/understanding-docker/)\non the Docker site."},{"content":"Moving your console application is a matter of a few steps.","pos":[2645,2704]},{"pos":[2709,2759],"content":"<bpt id=\"p1\">[</bpt>Build the application<ept id=\"p1\">](#building-the-application)</ept>","source":"[Build the application](#building-the-application)"},{"pos":[2763,2826],"content":"<bpt id=\"p1\">[</bpt>Creating a Dockerfile for the image<ept id=\"p1\">](#creating-the-dockerfile)</ept>","source":"[Creating a Dockerfile for the image](#creating-the-dockerfile)"},{"pos":[2830,2898],"content":"<bpt id=\"p1\">[</bpt>Process to build and run the Docker container<ept id=\"p1\">](#creating-the-image)</ept>","source":"[Process to build and run the Docker container](#creating-the-image)"},{"pos":[2903,2916],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[2917,3136],"content":"Windows containers are supported on <bpt id=\"p1\">[</bpt>Windows 10 Anniversary Update<ept id=\"p1\">](https://www.microsoft.com/en-us/software-download/windows10/)</ept> or <bpt id=\"p2\">[</bpt>Windows Server 2016<ept id=\"p2\">](https://www.microsoft.com/en-us/cloud-platform/windows-server)</ept>.","source":"Windows containers are supported on [Windows 10 Anniversary Update](https://www.microsoft.com/en-us/software-download/windows10/) or \n[Windows Server 2016](https://www.microsoft.com/en-us/cloud-platform/windows-server)."},{"pos":[3140,3538],"content":"[!NOTE]\nIf you are using Windows Server 2016, you must enable containers manually since the Docker for Windows installer will not enable the feature. Make sure all updates have run for the OS and then follow the instructions from the [Container Host Deployment](/virtualization/windowscontainers/deploy-containers/deploy-containers-on-server) article to install the containers and Docker features.","leadings":["",">"],"nodes":[{"content":"If you are using Windows Server 2016, you must enable containers manually since the Docker for Windows installer will not enable the feature. Make sure all updates have run for the OS and then follow the instructions from the [Container Host Deployment](/virtualization/windowscontainers/deploy-containers/deploy-containers-on-server) article to install the containers and Docker features.","pos":[8,397],"nodes":[{"content":"If you are using Windows Server 2016, you must enable containers manually since the Docker for Windows installer will not enable the feature.","pos":[0,141]},{"content":"Make sure all updates have run for the OS and then follow the instructions from the <bpt id=\"p1\">[</bpt>Container Host Deployment<ept id=\"p1\">](/virtualization/windowscontainers/deploy-containers/deploy-containers-on-server)</ept> article to install the containers and Docker features.","pos":[142,389],"source":" Make sure all updates have run for the OS and then follow the instructions from the [Container Host Deployment](/virtualization/windowscontainers/deploy-containers/deploy-containers-on-server) article to install the containers and Docker features."}]}]},{"content":"You need to have Docker for Windows, version 1.12 Beta 26 or higher to support Windows containers.","pos":[3540,3638]},{"content":"By default, Docker enables Linux based containers; switch to Windows containers by right clicking the Docker icon in the system tray and select <bpt id=\"p1\">**</bpt>Switch to Windows containers<ept id=\"p1\">**</ept>.","pos":[3639,3816],"source":" By default, Docker enables Linux based containers; switch to Windows containers by right clicking the Docker icon in the system tray and select **Switch to Windows containers**."},{"content":"Docker will run the process to change and a restart may be required.","pos":[3817,3885]},{"content":"Screenshot of the Windows container menu option.","pos":[3889,3937]},{"pos":[3989,4013],"content":"Building the application","linkify":"Building the application","nodes":[{"content":"Building the application","pos":[0,24]}]},{"content":"Typically console applications are distributed through an installer, FTP, or File Share deployment.","pos":[4014,4113]},{"content":"When deploying to a container, the assets need to be compiled and staged to a location that can be used when the Docker image is created.","pos":[4114,4251]},{"pos":[4253,4408],"content":"Here is the sample application: <bpt id=\"p1\">[</bpt>ConsoleRandomAnswerGenerator<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/framework/docker/ConsoleRandomAnswerGenerator)</ept>","source":"Here is the sample application: [ConsoleRandomAnswerGenerator](https://github.com/dotnet/samples/tree/master/framework/docker/ConsoleRandomAnswerGenerator)"},{"content":"In <bpt id=\"p1\">*</bpt>build.ps1<ept id=\"p1\">*</ept><bpt id=\"p2\">&lt;sup&gt;</bpt><bpt id=\"p3\">[</bpt>[source]<ept id=\"p3\">](https://github.com/dotnet/samples/blob/master/framework/docker/ConsoleRandomAnswerGenerator/ConsoleRandomAnswerGenerator/build.ps1)</ept><ept id=\"p2\">&lt;/sup&gt;</ept>, the script uses <bpt id=\"p4\">[</bpt>MSBuild<ept id=\"p4\">](/visualstudio/msbuild/msbuild)</ept> to compile the application to complete the task of building the assets.","pos":[4410,4707],"source":"In *build.ps1*<sup>[[source]](https://github.com/dotnet/samples/blob/master/framework/docker/ConsoleRandomAnswerGenerator/ConsoleRandomAnswerGenerator/build.ps1)</sup>, the script uses [MSBuild](/visualstudio/msbuild/msbuild) to compile the application to complete the task of building the assets."},{"content":"There are a few parameters passed to MSBuild to finalize the needed assets.","pos":[4708,4783]},{"content":"The name of the project file or solution to be compiled, the location for the output and finally the configuration (Release or Debug).","pos":[4784,4918]},{"pos":[4920,5031],"content":"In the call to <ph id=\"ph1\">`Invoke-MSBuild`</ph> the <ph id=\"ph2\">`OutputPath`</ph> is set to <bpt id=\"p1\">**</bpt>publish<ept id=\"p1\">**</ept> and  <ph id=\"ph3\">`Configuration`</ph> set to <bpt id=\"p2\">**</bpt>Release<ept id=\"p2\">**</ept>.","source":"In the call to `Invoke-MSBuild` the `OutputPath` is set to **publish** and  `Configuration` set to **Release**."},{"pos":[5342,5365],"content":"Creating the Dockerfile","linkify":"Creating the Dockerfile","nodes":[{"content":"Creating the Dockerfile","pos":[0,23]}]},{"content":"The base image used for a console .NET Framework application is <ph id=\"ph1\">`microsoft/windowsservercore`</ph>, publicly available on <bpt id=\"p1\">[</bpt>Docker Hub<ept id=\"p1\">](https://hub.docker.com/r/microsoft/windowsservercore/)</ept>.","pos":[5366,5551],"source":"The base image used for a console .NET Framework application is `microsoft/windowsservercore`, publicly available on [Docker Hub](https://hub.docker.com/r/microsoft/windowsservercore/)."},{"content":"The base image contains a minimal installation of Windows Server 2016, .NET Framework 4.6.2 and serves as the base OS image for Windows Containers.","pos":[5552,5699]},{"content":"The first line in the Dockerfile designates the base image using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`FROM`</ph><ept id=\"p1\">](https://docs.docker.com/engine/reference/builder/#/from)</ept> instruction.","pos":[5801,5948],"source":"The first line in the Dockerfile designates the base image using the [`FROM`](https://docs.docker.com/engine/reference/builder/#/from) instruction."},{"content":"Next, <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`ADD`</ph><ept id=\"p1\">](https://docs.docker.com/engine/reference/builder/#/add)</ept> in the file copies the application assets from the <bpt id=\"p2\">**</bpt>publish<ept id=\"p2\">**</ept> folder to root folder of the container and last; setting the <bpt id=\"p3\">[</bpt><ph id=\"ph2\">`ENTRYPOINT`</ph><ept id=\"p3\">](https://docs.docker.com/engine/reference/builder/#/entrypoint)</ept> of the image states that this is the command or application that will run when the container starts.","pos":[5949,6321],"source":" Next, [`ADD`](https://docs.docker.com/engine/reference/builder/#/add) in the file copies the application assets from the **publish** folder to root folder of the container and last; setting the [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#/entrypoint) of the image states that this is the command or application that will run when the container starts."},{"pos":[6327,6345],"content":"Creating the image","linkify":"Creating the image","nodes":[{"content":"Creating the image","pos":[0,18]}]},{"content":"In order to create the Docker image, the following code is added to the <bpt id=\"p1\">*</bpt>build.ps1<ept id=\"p1\">*</ept> script.","pos":[6346,6437],"source":"In order to create the Docker image, the following code is added to the *build.ps1* script."},{"content":"When the script is run, the <ph id=\"ph1\">`console-random-answer-generator`</ph> image is created using the assets compiled from MSBuild defined in the <bpt id=\"p1\">[</bpt>Building the application<ept id=\"p1\">](#building-the-application)</ept> section.","pos":[6438,6633],"source":" When the script is run, the `console-random-answer-generator` image is created using the assets compiled from MSBuild defined in the [Building the application](#building-the-application) section."},{"pos":[7008,7078],"content":"Run the script using <ph id=\"ph1\">`.\\build.ps1`</ph> from the PowerShell command prompt.","source":"Run the script using `.\\build.ps1` from the PowerShell command prompt."},{"pos":[7080,7241],"content":"When the build is complete, using the <ph id=\"ph1\">`docker images`</ph> command from a command line or PowerShell prompt; you'll see that the image is created and ready to be run.","source":"When the build is complete, using the `docker images` command from a command line or PowerShell prompt; you'll see that the image is created and ready to be run."},{"pos":[7456,7477],"content":"Running the container","linkify":"Running the container","nodes":[{"content":"Running the container","pos":[0,21]}]},{"content":"You can start the container from the command line using the Docker commands.","pos":[7478,7554]},{"content":"The output is","pos":[7638,7651]},{"pos":[7768,7867],"content":"If you run the <ph id=\"ph1\">`docker ps -a`</ph> command from PowerShell, you can see that the container still exists.","source":"If you run the `docker ps -a` command from PowerShell, you can see that the container still exists."},{"content":"The STATUS column shows at \"About a minute ago\", the application was complete and could be shut down.","pos":[8145,8246]},{"content":"If the command was run a hundred times, there would be a hundred containers left static with no work to do.","pos":[8247,8354]},{"content":"In the beginning scenario the ideal operation was to do the work and shutdown or cleanup.","pos":[8355,8444]},{"content":"To accomplish that workflow, adding the <ph id=\"ph1\">`--rm`</ph> option to the <ph id=\"ph2\">`docker run`</ph> command will remove the container as soon as the <ph id=\"ph3\">`Exited`</ph> signal is received.","pos":[8445,8596],"source":" To accomplish that workflow, adding the `--rm` option to the `docker run` command will remove the container as soon as the `Exited` signal is received."},{"pos":[8685,8860],"content":"Running the command with this option and then looking at the output of <ph id=\"ph1\">`docker ps -a`</ph> command; notice that the container id (the <ph id=\"ph2\">`Environment.MachineName`</ph>) is not in the list.","source":"Running the command with this option and then looking at the output of `docker ps -a` command; notice that the container id (the `Environment.MachineName`) is not in the list."},{"pos":[8866,8904],"content":"Running the container using PowerShell","linkify":"Running the container using PowerShell","nodes":[{"content":"Running the container using PowerShell","pos":[0,38]}]},{"pos":[8905,9051],"content":"In the sample project files there is also a <bpt id=\"p1\">*</bpt>run.ps1<ept id=\"p1\">*</ept> which is an example of how to use PowerShell to run the application accepting the arguments.","source":"In the sample project files there is also a *run.ps1* which is an example of how to use PowerShell to run the application accepting the arguments."},{"content":"To run, open PowerShell and use the following command:","pos":[9053,9107]},{"pos":[9165,9172],"content":"Summary","linkify":"Summary","nodes":[{"content":"Summary","pos":[0,7]}]},{"content":"Just by adding a Dockerfile and publishing the application, you can containerize your .NET Framework console applications and now take the advantage of running multiple instances, clean start and stop and more Windows Server 2016 capabilities without making any changes to the application code at all.","pos":[9173,9474]}]}