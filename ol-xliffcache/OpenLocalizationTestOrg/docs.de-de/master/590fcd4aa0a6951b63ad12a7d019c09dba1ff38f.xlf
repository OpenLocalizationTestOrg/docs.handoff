<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="try-catch-finally-statement.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">590fcd4aa0a6951b63ad12a7d019c09dba1ff38f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\try-catch-finally-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37f678b4bed96192fcc4b010f796a0c16d1a8916</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1fa5c73546599643d8e7f9dba778c4ed3e558254</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Try...Catch...Finally Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides a way to handle some or all possible errors that may occur in a given block of code, while still running code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Statement(s) where an error can occur.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Can be a compound statement.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Multiple <ph id="ph1">`Catch`</ph> blocks permitted.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If an exception occurs when processing the <ph id="ph1">`Try`</ph> block, each <ph id="ph2">`Catch`</ph> statement is examined in textual order to determine whether it handles the exception, with <ph id="ph3">`exception`</ph> representing the exception that has been thrown.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Any variable name.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The initial value of <ph id="ph1">`exception`</ph> is the value of the thrown error.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">`Catch`</ph> to specify the error caught.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If omitted, the <ph id="ph1">`Catch`</ph> statement catches any exception.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Specifies the type of class filter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the value of <ph id="ph1">`exception`</ph> is of the type specified by <ph id="ph2">`type`</ph> or of a derived type, the identifier becomes bound to the exception object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> statement with a <ph id="ph2">`When`</ph> clause catches exceptions only when <ph id="ph3">`expression`</ph> evaluates to <ph id="ph4">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`When`</ph> clause is applied only after checking the type of the exception, and <ph id="ph2">`expression`</ph> may refer to the identifier representing the exception.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Must be implicitly convertible to <ph id="ph1">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any expression that describes a generic filter.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically used to filter by error number.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">`When`</ph> keyword to specify circumstances under which the error is caught.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Statement(s) to handle errors that occur in the associated <ph id="ph1">`Try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Can be a compound statement.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Keyword that breaks out of the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Execution resumes with the code immediately following the <ph id="ph1">`End Try`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Finally`</ph> statement will still be executed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Not allowed in <ph id="ph1">`Finally`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Finally`</ph> block is always executed when execution leaves any part of the <ph id="ph2">`Try...Catch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Statement(s) that are executed after all other error processing has occurred.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you expect that a particular exception might occur during a particular section of code, put the code in a <ph id="ph1">`Try`</ph> block and use a <ph id="ph2">`Catch`</ph> block to retain control and handle the exception if it occurs.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Tryâ€¦Catch`</ph> statement consists of a <ph id="ph2">`Try`</ph> block followed by one or more <ph id="ph3">`Catch`</ph> clauses, which specify handlers for various exceptions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When an exception is thrown in a <ph id="ph1">`Try`</ph> block, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> looks for the <ph id="ph3">`Catch`</ph> statement that handles the exception.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If a matching <ph id="ph1">`Catch`</ph> statement is not found, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> examines the method that called the current method, and so on up the call stack.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`Catch`</ph> block is found, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> displays an unhandled exception message to the user and stops execution of the program.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can use more than one <ph id="ph1">`Catch`</ph> statement in a <ph id="ph2">`Tryâ€¦Catch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you do this, the order of the <ph id="ph1">`Catch`</ph> clauses is significant because they are examined in order.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Catch the more specific exceptions before the less specific ones.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Catch`</ph> statement conditions are the least specific, and will catch all exceptions that derive from the <ph id="ph2">&lt;xref:System.Exception&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You should ordinarily use one of these variations as the last <ph id="ph1">`Catch`</ph> block in the <ph id="ph2">`Try...Catch...Finally`</ph> structure, after catching all the specific exceptions you expect.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Control flow can never reach a <ph id="ph1">`Catch`</ph> block that follows either of these variations.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`type`</ph> is <ph id="ph2">`Exception`</ph>, for example: <ph id="ph3">`Catch ex As Exception`</ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The statement has no <ph id="ph1">`exception`</ph> variable, for example: <ph id="ph2">`Catch`</ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Tryâ€¦Catchâ€¦Finally`</ph> statement is nested in another <ph id="ph2">`Try`</ph> block, <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> first examines each <ph id="ph4">`Catch`</ph> statement in the innermost <ph id="ph5">`Try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If no matching <ph id="ph1">`Catch`</ph> statement is found, the search proceeds to the <ph id="ph2">`Catch`</ph> statements of the outer <ph id="ph3">`Tryâ€¦Catchâ€¦Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Local variables from a <ph id="ph1">`Try`</ph> block are not available in a <ph id="ph2">`Catch`</ph> block because they are separate blocks.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you want to use a variable in more than one block, declare the variable outside the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Tryâ€¦Catchâ€¦Finally`</ph> statement is available as an IntelliSense code snippet.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the Code Snippets Manager, expand <bpt id="p1">**</bpt>Code Patterns - If, For Each, Try Catch, Property, etc<ept id="p1">**</ept>, and then <bpt id="p2">**</bpt>Error Handling (Exceptions)<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Code Snippets<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/code-snippets)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally Block</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you have one or more statements that must run before you exit the <ph id="ph1">`Try`</ph> structure, use a <ph id="ph2">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Control passes to the <ph id="ph1">`Finally`</ph> block just before it passes out of the <ph id="ph2">`Tryâ€¦Catch`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is true even if an exception occurs anywhere inside the <ph id="ph1">`Try`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Finally`</ph> block is useful for running any code that must execute even if there is an exception.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Control is passed to the <ph id="ph1">`Finally`</ph> block regardless of how the <ph id="ph2">`Try...Catch`</ph> block exits.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The code in a <ph id="ph1">`Finally`</ph> block runs even if your code encounters a <ph id="ph2">`Return`</ph> statement in a <ph id="ph3">`Try`</ph> or <ph id="ph4">`Catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Control does not pass from a <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block to the corresponding <ph id="ph3">`Finally`</ph> block in the following cases:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>End Statement<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept> is encountered in the <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.StackOverflowException&gt;</ph> is thrown in the <ph id="ph2">`Try`</ph> or <ph id="ph3">`Catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It is not valid to explicitly transfer execution into a <ph id="ph1">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Transferring execution out of a <ph id="ph1">`Finally`</ph> block is not valid, except through an exception.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Try`</ph> statement does not contain at least one <ph id="ph2">`Catch`</ph> block, it must contain a <ph id="ph3">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you do not have to catch specific exceptions, the <ph id="ph1">`Using`</ph> statement behaves like a <ph id="ph2">`Tryâ€¦Finally`</ph> block, and guarantees disposal of the resources, regardless of how you exit the block.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is true even with an unhandled exception.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Statement<ept id="p1">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Exception Argument</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Catch`</ph> block <ph id="ph2">`exception`</ph> argument is an instance of the <ph id="ph3">&lt;xref:System.Exception&gt;</ph> class or a class that derives from the <ph id="ph4">`Exception`</ph> class.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Exception`</ph> class instance corresponds to the error that occurred in the <ph id="ph2">`Try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The properties of the <ph id="ph1">`Exception`</ph> object help to identify the cause and location of an exception.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property lists the called methods that led to the exception, helping you find where the error occurred in the code.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> returns a message that describes the exception.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Exception.HelpLink%2A&gt;</ph> returns a link to an associated Help file.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> returns the <ph id="ph2">`Exception`</ph> object that caused the current exception, or it returns <ph id="ph3">`Nothing`</ph> if there is no original <ph id="ph4">`Exception`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Considerations When Using a Tryâ€¦Catch Statement</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`Tryâ€¦Catch`</ph> statement only to signal the occurrence of unusual or unanticipated program events.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Reasons for this include the following:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Catching exceptions at runtime creates additional overhead, and is likely to be slower than pre-checking to avoid exceptions.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Catch`</ph> block is not handled correctly, the exception might not be reported correctly to users.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Exception handling makes a program more complex.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You do not always need a <ph id="ph1">`Tryâ€¦Catch`</ph> statement to check for a condition that is likely to occur.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following example checks whether a file exists before trying to open it.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This reduces the need for catching an exception thrown by the <ph id="ph1">&lt;xref:System.IO.File.OpenText%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Ensure that code in <ph id="ph1">`Catch`</ph> blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Otherwise, exceptions might remain unknown.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Async Methods</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you mark a method with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier, you can use the <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in the method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A statement with the <ph id="ph1">`Await`</ph> operator suspends execution of the method until the awaited task completes.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The task represents ongoing work.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When the task that's associated with the <ph id="ph1">`Await`</ph> operator finishes, execution resumes in the same method.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Control Flow in Async Programs<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A task returned by an Async method may end in a faulted state, indicating that it completed due to an unhandled exception.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A task may also end in a canceled state, which results in an <ph id="ph1">`OperationCanceledException`</ph> being thrown out of the await expression.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To catch either type of exception, place the <ph id="ph1">`Await`</ph> expression that's associated with the task in a <ph id="ph2">`Try`</ph> block, and catch the exception in the <ph id="ph3">`Catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>An example is provided later in this topic.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A task can be in a faulted state because multiple exceptions were responsible for its faulting.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For example, the task might be the result of a call to <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When you await such a task, the caught exception is only one of the exceptions, and you can't predict which exception will be caught.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An example is provided later in this topic.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Await`</ph> expression can't be inside a <ph id="ph2">`Catch`</ph> block or <ph id="ph3">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Iterators</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An iterator function or <ph id="ph1">`Get`</ph> accessor performs a custom iteration over a collection.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An iterator uses a <bpt id="p1">[</bpt>Yield<ept id="p1">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> statement to return each element of the collection one at a time.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You call an iterator function by using a <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement can be inside a <ph id="ph2">`Try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try`</ph> block that contains a <ph id="ph2">`Yield`</ph> statement can have <ph id="ph3">`Catch`</ph> blocks, and can have a <ph id="ph4">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>See the "Try Blocks in Visual Basic" section of <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept> for an example.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement cannot be inside a <ph id="ph2">`Catch`</ph> block or a <ph id="ph3">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`For Each`</ph> body (outside of the iterator function) throws an exception, a <ph id="ph2">`Catch`</ph> block in the iterator function is not executed, but a <ph id="ph3">`Finally`</ph> block in the iterator function is executed.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> block inside an iterator function catches only exceptions that occur inside the iterator function.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Partial-Trust Situations</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In partial-trust situations, such as an application hosted on a network share, <ph id="ph1">`Try...Catch...Finally`</ph> does not catch security exceptions that occur before the method that contains the call is invoked.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following example, when you put it on a server share and run from there, produces the error "System.Security.SecurityException: Request Failed."</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For more information about security exceptions, see the <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In such a partial-trust situation, you have to put the <ph id="ph1">`Process.Start`</ph> statement in a separate <ph id="ph2">`Sub`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The initial call to the <ph id="ph1">`Sub`</ph> will fail.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This enables <ph id="ph1">`Try...Catch`</ph> to catch it before the <ph id="ph2">`Sub`</ph> that contains <ph id="ph3">`Process.Start`</ph> is started and the security exception produced.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The following example illustrates the structure of the <ph id="ph1">`Try...Catch...Finally`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`CreateException`</ph> method throws a <ph id="ph2">`NullReferenceException`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The code that generates the exception is not in a <ph id="ph1">`Try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`CreateException`</ph> method does not handle the exception.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RunSample`</ph> method does handle the exception because the call to the <ph id="ph2">`CreateException`</ph> method is in a <ph id="ph3">`Try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The example includes <ph id="ph1">`Catch`</ph> statements for several types of exceptions, ordered from the most specific to the most general.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a <ph id="ph1">`Catch When`</ph> statement to filter on a conditional expression.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If the conditional expression evaluates to <ph id="ph1">`True`</ph>, the code in the <ph id="ph2">`Catch`</ph> block runs.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The following example has a <ph id="ph1">`Tryâ€¦Catch`</ph> statement that is contained in a <ph id="ph2">`Try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The inner <ph id="ph1">`Catch`</ph> block throws an exception that has its <ph id="ph2">`InnerException`</ph> property set to the original exception.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The outer <ph id="ph1">`Catch`</ph> block reports its own exception and the inner exception.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling for async methods.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To catch an exception that applies to an async task, the <ph id="ph1">`Await`</ph> expression is in a <ph id="ph2">`Try`</ph> block of the caller, and the exception is caught in the <ph id="ph3">`Catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`Throw New Exception`</ph> line in the example to demonstrate exception handling.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The exception is caught in the <ph id="ph1">`Catch`</ph> block, the task's <ph id="ph2">`IsFaulted`</ph> property is set to <ph id="ph3">`True`</ph>, and the task's <ph id="ph4">`Exception.InnerException`</ph> property is set to the exception.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`Throw New OperationCancelledException`</ph> line to demonstrate what happens when you cancel an asynchronous process.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The exception is caught in the <ph id="ph1">`Catch`</ph> block, and the task's <ph id="ph2">`IsCanceled`</ph> property is set to <ph id="ph3">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>However, under some conditions that don't apply to this example, <ph id="ph1">`IsFaulted`</ph> is set to <ph id="ph2">`True`</ph> and <ph id="ph3">`IsCanceled`</ph> is set to <ph id="ph4">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling where multiple tasks can result in multiple exceptions.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Try`</ph> block has the <ph id="ph2">`Await`</ph> expression for the task that <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph> returned.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The task is complete when the three tasks to which <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph> is applied are complete.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Each of the three tasks causes an exception.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Catch`</ph> block iterates through the exceptions, which are found in the <ph id="ph2">`Exception.InnerExceptions`</ph> property of the task that <ph id="ph3">`Task.WhenAll`</ph> returned.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Exception&gt;</ph></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>On Error Statement<ept id="p1">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Best Practices for Using Code Snippets<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Handling<ept id="p1">](https://msdn.microsoft.com/library/dd997415)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Throw Statement<ept id="p1">](../../../visual-basic/language-reference/statements/throw-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>