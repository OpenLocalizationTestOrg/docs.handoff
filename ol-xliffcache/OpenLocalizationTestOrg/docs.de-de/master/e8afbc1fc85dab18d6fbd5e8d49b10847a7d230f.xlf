<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="message-inspectors.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8afbc1fc85dab18d6fbd5e8d49b10847a7d230f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\message-inspectors.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">756e09996d8c5301a1ca7226270f46745d5e25ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c14e5d80ff8122b1b583317d412ad518269a5b21</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Message Inspectors</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Message Inspectors</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to implement and configure client and service message inspectors.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A message inspector is an extensibility object that can be used in the service model's client runtime and dispatch runtime programmatically or through configuration and that can inspect and alter messages after they are received or before they are sent.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This sample implements a basic client and service message validation mechanism that validates incoming messages against a set of configurable XML Schema documents.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Note that this sample does not validate messages for each operation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is an intentional simplification.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Message Inspector</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Client message inspectors implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> interface and service message inspectors implement the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The implementations can be combined into a single class to form a message inspector that works for both sides.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This sample implements such a combined message inspector.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The inspector is constructed passing in a set of schemas against which incoming and outgoing messages are validated and allows the developer to specify whether incoming or outgoing messages are validated and whether the inspector is in dispatch or client mode, which affects the error handling as discussed later in this topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Any service (dispatcher) message inspector must implement the two <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> methods <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%28System.ServiceModel.Channels.Message%40%2CSystem.Object%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> is invoked by the dispatcher when a message has been received, processed by the channel stack and assigned to a service, but before it is deserialized and dispatched to an operation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the incoming message was encrypted, the message is already decrypted when it reaches the message inspector.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The method gets the <ph id="ph1">`request`</ph> message passed as a reference parameter, which allows the message to be inspected, manipulated or replaced as required.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The return value can be any object and is used as a correlation state object that is passed to <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> when the service returns a reply to the current message.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this sample, <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> delegates the inspection (validation) of the message to the private, local method <ph id="ph2">`ValidateMessageBody`</ph> and returns no correlation state object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This method ensures that no invalid messages pass into the service.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%28System.ServiceModel.Channels.Message%40%2CSystem.Object%29&gt;</ph> is invoked whenever a reply is ready to be sent back to a client, or in the case of one-way messages, when the incoming message has been processed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This allows extensions to count on being called symmetrically, regardless of MEP.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>As with <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph>, the message is passed as a reference parameter and can be inspected, modified or replaced.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The validation of the message that is performed in this sample is again delegated to the <ph id="ph1">`ValidMessageBody`</ph> method, but the handling of validation errors is slightly different in this case.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If a validation error occurs on the service, the <ph id="ph1">`ValidateMessageBody`</ph> method throws <ph id="ph2">&lt;xref:System.ServiceModel.FaultException&gt;</ph>-derived exceptions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph>, these exceptions can be put into the service model infrastructure where they are automatically transformed into SOAP faults and relayed to the client.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.FaultException&gt;</ph> exceptions must not be put into the infrastructure, because the transformation of fault exceptions thrown by the service occurs before the message inspector is called.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Therefore the following implementation catches the known <ph id="ph1">`ReplyValidationFault`</ph> exception and replaces the reply message with an explicit fault message.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This method ensures that no invalid messages are returned by the service implementation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The client message inspector is very similar.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The two methods that must be implemented from <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> are <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> is invoked when the message has been composed either by the client application or by the operation formatter.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>As with the dispatcher message inspectors, the message can just be inspected or entirely replaced.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this sample, the inspector delegates to the same local <ph id="ph1">`ValidateMessageBody`</ph> helper method that is also used for the dispatch message inspectors.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The behavioral difference between the client and service validation (as specified in the constructor) is that the client validation throws local exceptions that are put into the user code because they occur locally and not because of a service failure.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Generally, the rule is that service dispatcher inspectors throw faults and that client inspectors throw exceptions.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> implementation ensures that no invalid messages are sent to the service.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AfterReceiveReply`</ph> implementation ensures that no invalid messages received from the service are relayed to the client user code.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The heart of this particular message inspector is the <ph id="ph1">`ValidateMessageBody`</ph> method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To perform its work, it wraps a validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> around the body content sub-tree of the passed message.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The reader is populated with the set of schemas that the message inspector holds and the validation callback is set to a delegate referring to the <ph id="ph1">`InspectionValidationHandler`</ph> that is defined alongside this method.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To perform the validation, the message is then read and spooled into a memory stream-backed <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a validation error or warning occurs in the process, the callback method is invoked.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If no error occurs, a new message is constructed that copies the properties and headers from the original message and uses the now-validated infoset in the memory stream, which is wrapped by an <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> and added to the replacement message.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InspectionValidationHandler`</ph> method is called by the validating <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> whenever a schema validation error or warning occurs.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following implementation only works with errors and ignores all warnings.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>On first consideration, it might seem possible to inject a validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> into the message with the message inspector and let the validation happen as the message is processed and without buffering the message.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>That, however, means that this callback throws the validation exceptions somewhere into the service model infrastructure or the user code as invalid XML nodes are detected, resulting in unpredictable behavior.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The buffering approach shields the user code from invalid messages, entirely.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>As previously discussed, the exceptions thrown by the handler differ between the client and the service.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>On the service, the exceptions are derived from <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph>, on the client the exceptions are regular custom exceptions.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Message inspectors are extensions to the client runtime or the dispatch runtime.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Such extensions are configured using <bpt id="p1">*</bpt>behaviors<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A behavior is a class that changes the behavior of the service model runtime by changing the default configuration or adding extensions (such as message inspectors) to it.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`SchemaValidationBehavior`</ph> class is the behavior used to add this sample's message inspector to the client or dispatch runtime.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The implementation is rather basic in both cases.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A&gt;</ph>, the message inspector is created and added to the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> collection of the respective runtime.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This particular behavior does not double as an attribute and therefore cannot be added declaratively onto a contract type of a service type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is a by-design decision made because the schema collection cannot be loaded in an attribute declaration and referring to an extra configuration location (for instance to the application settings) in this attribute means creating a configuration element that is not consistent with the rest of the service model configuration.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Therefore, this behavior can only be added imperatively through code and through a service model configuration extension.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Adding the Message Inspector through Configuration</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For configuring a custom behavior on an endpoint in the application configuration file, the service model requires implementers to create a configuration <bpt id="p1">*</bpt>extension element<ept id="p1">*</ept> represented by a class derived from <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This extension must then be added to the service model's configuration section for extensions as shown for the following extension discussed in this section.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Extensions can be added in the application or ASP.NET configuration file, which is the most common choice, or in the machine configuration file.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When the extension is added to a configuration scope, the behavior can be added to a behavior configuration as it is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Behavior configurations are reusable elements that can be applied to multiple endpoints as required.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because the particular behavior to be configured here implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph>, it is only valid in the respective configuration section in the configuration file.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;schemaValidator&gt;`</ph> element that configures the message inspector is backed by the <ph id="ph2">`SchemaValidationBehaviorExtensionElement`</ph> class.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The class exposes two Boolean public properties named <ph id="ph1">`ValidateRequest`</ph> and <ph id="ph2">`ValidateReply`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Both of these are marked with a <ph id="ph1">&lt;xref:System.Configuration.ConfigurationPropertyAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This attribute constitutes the link between the code properties and the XML attributes that can be seen on the preceding XML configuration element.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The class also has a property <ph id="ph1">`Schemas`</ph> that is additionally marked with the <ph id="ph2">&lt;xref:System.Configuration.ConfigurationCollectionAttribute&gt;</ph> and is of the type <ph id="ph3">`SchemaCollection`</ph>, which is also part of this sample but omitted from this document for brevity.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This property along with the collection and the collection element class <ph id="ph1">`SchemaConfigElement`</ph> backs the <ph id="ph2">`&lt;schemas&gt;`</ph> element in the preceding configuration snippet and allows adding a collection of schemas to the validation set.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The overridden <ph id="ph1">`CreateBehavior`</ph> method turns the configuration data into a behavior object when the runtime evaluates the configuration data as it builds a client or an endpoint.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Adding Message Inspectors Imperatively</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Except through attributes (which is not supported in this sample for the reason cited previously) and configuration, behaviors can quite easily be added to a client and service runtime using imperative code.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In this sample, this is done in the client application to test the client message inspector.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GenericClient`</ph> class is derived from <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph>, which exposes the endpoint configuration to the user code.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Before the client is implicitly opened the endpoint configuration can be changed, for instance by adding behaviors as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Adding the behavior on the service is largely equivalent to the client technique shown here and must be performed before the service host is opened.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To build the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id="p1">[</bpt>Running the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id="ph1">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>