<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">740b39c9c729f0768e75b0465eb8ca98eb5b318f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\nullable-types\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e9ba762132ba983ba83a6209ed1ed353cbab4df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdbe2614af2532a45b7d12fe75665b0f91643afa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Nullable types - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about C# nullable types and how to use them</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Nullable types (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Nullable types are instances of the <ph id="ph1">&lt;xref:System.Nullable%601?displayProperty=nameWithType&gt;</ph> struct.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Nullable types can represent all the values of an underlying type <ph id="ph1">`T`</ph>, and an additional <bpt id="p1">[</bpt>null<ept id="p1">](../../language-reference/keywords/null.md)</ept> value.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The underlying type <ph id="ph1">`T`</ph> can be any non-nullable <bpt id="p1">[</bpt>value type<ept id="p1">](../../language-reference/keywords/value-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`T`</ph> cannot be a reference type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, you can assign <ph id="ph1">`null`</ph> or any integer value from <ph id="ph2">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> to a <ph id="ph4">`Nullable&lt;int&gt;`</ph> and <bpt id="p1">[</bpt>true<ept id="p1">](../../language-reference/keywords/true-literal.md)</ept>, <bpt id="p2">[</bpt>false<ept id="p2">](../../language-reference/keywords/false-literal.md)</ept>, or <ph id="ph5">`null`</ph> to a <ph id="ph6">`Nullable&lt;bool&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You use a nullable type when you need to represent the undefined value of an underlying type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A Boolean variable can have only two values: true and false.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There is no "undefined" value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In many programming applications, most notably database interactions, a variable value can be undefined or missing.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, a field in a database may contain the values true or false, or it may contain no value at all.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You use a <ph id="ph1">`Nullable&lt;bool&gt;`</ph> type in that case.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Nullable types have the following characteristics:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Nullable types represent value-type variables that can be assigned the <ph id="ph1">`null`</ph> value.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You cannot create a nullable type based on a reference type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Reference types already support the <ph id="ph1">`null`</ph> value.)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The syntax <ph id="ph1">`T?`</ph> is shorthand for <ph id="ph2">`Nullable&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The two forms are interchangeable.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Assign a value to a nullable type just as you would for an underlying value type: <ph id="ph1">`int? x = 10;`</ph> or <ph id="ph2">`double? d = 4.108;`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You also can assign the <ph id="ph1">`null`</ph> value: <ph id="ph2">`int? x = null;`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Nullable%601.Value%2A?displayProperty=nameWithType&gt;</ph> readonly properties to test for null and retrieve the value, as shown in the following example: <ph id="ph3">`if (x.HasValue) y = x.Value;`</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the variable contains a value, or <ph id="ph3">`false`</ph> if it's <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property returns a value if <ph id="ph2">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> returns <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Otherwise, an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> operators with a nullable type, as shown in the following example: <ph id="ph3">`if (x != null) y = x.Value;`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`a`</ph> and <ph id="ph2">`b`</ph> are both null, <ph id="ph3">`a == b`</ph> evaluates to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.0, you can use <bpt id="p1">[</bpt>pattern matching<ept id="p1">](../../pattern-matching.md#the-is-type-pattern-expression)</ept> to both examine and get a value of a nullable type: <ph id="ph1">`if (x is int valueOfX) y = valueOfX;`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default value of <ph id="ph1">`T?`</ph> is an instance whose <ph id="ph2">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Nullable%601.GetValueOrDefault&gt;</ph> method to return either the assigned value, or the <bpt id="p1">[</bpt>default<ept id="p1">](../../language-reference/keywords/default-values-table.md)</ept> value of the underlying value type if the value of the nullable type is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Nullable%601.GetValueOrDefault(%600)&gt;</ph> method to return either the assigned value, or the provided default value if the value of the nullable type is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>null-coalescing operator<ept id="p1">](../../language-reference/operators/null-coalescing-operator.md)</ept>, <ph id="ph1">`??`</ph>, to assign a value to an underlying type based on a value of the nullable type: <ph id="ph2">`int? x = null; int y = x ?? -1;`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the example, since <ph id="ph1">`x`</ph> is null, the result value of <ph id="ph2">`y`</ph> is <ph id="ph3">`-1`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If a user-defined conversion is defined between two data types, the same conversion can also be used with the nullable versions of these data types.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Nested nullable types are not allowed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following line doesn't compile: <ph id="ph1">`Nullable&lt;Nullable&lt;int&gt;&gt; n;`</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Using nullable types<ept id="p1">](using-nullable-types.md)</ept> and <bpt id="p2">[</bpt>How to: Identify a nullable type<ept id="p2">](how-to-identify-a-nullable-type.md)</ept> topics.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>?? Operator<ept id="p1">](../../language-reference/operators/null-coalescing-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Guide<ept id="p1">](../../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../language-reference/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable Value Types (Visual Basic)<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>