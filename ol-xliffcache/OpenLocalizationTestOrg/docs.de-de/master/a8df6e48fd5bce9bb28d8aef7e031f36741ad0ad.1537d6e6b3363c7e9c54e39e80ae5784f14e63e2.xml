{"content":"---\ntitle: \"Me, My, MyBase, and MyClass in Visual Basic\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"MyClass\"\n  - \"vb.Me\"\n  - \"MyBase\"\n  - \"vb.MyBase\"\n  - \"Me\"\n  - \"vb.MyClass\"\n  - \"vb.This\"\n  - \"vb.My\"\nhelpviewer_keywords: \n  - \"My object\"\n  - \"self-reference [Visual Basic], Me keyword\"\n  - \"MyClass keyword [Visual Basic], relationship to similar programming elements\"\n  - \"Me keyword [Visual Basic], relationship to similar programming elements\"\n  - \"Me keyword [Visual Basic], referring to the current instance of an object\"\n  - \"Me keyword [Visual Basic]\"\n  - \"self-reference\"\n  - \"current instance [Visual Basic], Me keyword\"\n  - \"MyBase keyword [Visual Basic], relationship to similar programming elements\"\nms.assetid: f8e241ae-b1ed-4886-9aa0-08c632154029\n---\n# Me, My, MyBase, and MyClass in Visual Basic\n`Me`, `My`, `MyBase`, and `MyClass` in Visual Basic have similar names, but different purposes. This topic describes each of these entities in order to distinguish them.  \n  \n## Me  \n The `Me` keyword provides a way to refer to the specific instance of a class or structure in which the code is currently executing. `Me` behaves like either an object variable or a structure variable referring to the current instance. Using `Me` is particularly useful for passing information about the currently executing instance of a class or structure to a procedure in another class, structure, or module.  \n  \n For example, suppose you have the following procedure in a module.  \n  \n```  \nSub ChangeFormColor(FormName As Form)  \n   Randomize()  \n   FormName.BackColor = Color.FromArgb(Rnd() * 256, Rnd() * 256, Rnd() * 256)  \nEnd Sub  \n```  \n  \n You can call this procedure and pass the current instance of the <xref:System.Windows.Forms.Form> class as an argument by using the following statement.  \n  \n```  \nChangeFormColor(Me)  \n```  \n  \n## My  \n The `My` feature provides easy and intuitive access to a number of [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] classes, enabling the Visual Basic user to interact with the computer, application, settings, resources, and so on.  \n  \n## MyBase  \n The `MyBase` keyword behaves like an object variable referring to the base class of the current instance of a class. `MyBase` is commonly used to access base class members that are overridden or shadowed in a derived class. `MyBase.New` is used to explicitly call a base class constructor from a derived class constructor.  \n  \n## MyClass  \n The `MyClass` keyword behaves like an object variable referring to the current instance of a class as originally implemented. `MyClass` is similar to `Me`, but all method calls on it are treated as if the method were `NotOverridable`.  \n  \n## See also\n\n- [Inheritance Basics](../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)\n","nodes":[{"pos":[4,758],"embed":true,"restype":"x-metadata","content":"title: \"Me, My, MyBase, and MyClass in Visual Basic\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"MyClass\"\n  - \"vb.Me\"\n  - \"MyBase\"\n  - \"vb.MyBase\"\n  - \"Me\"\n  - \"vb.MyClass\"\n  - \"vb.This\"\n  - \"vb.My\"\nhelpviewer_keywords: \n  - \"My object\"\n  - \"self-reference [Visual Basic], Me keyword\"\n  - \"MyClass keyword [Visual Basic], relationship to similar programming elements\"\n  - \"Me keyword [Visual Basic], relationship to similar programming elements\"\n  - \"Me keyword [Visual Basic], referring to the current instance of an object\"\n  - \"Me keyword [Visual Basic]\"\n  - \"self-reference\"\n  - \"current instance [Visual Basic], Me keyword\"\n  - \"MyBase keyword [Visual Basic], relationship to similar programming elements\"\nms.assetid: f8e241ae-b1ed-4886-9aa0-08c632154029","nodes":[{"content":"Me, My, MyBase, and MyClass in Visual Basic","nodes":[{"pos":[0,43],"content":"Me, My, MyBase, and MyClass in Visual Basic","nodes":[{"content":"Me, My, MyBase, and MyClass in Visual Basic","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[765,808],"content":"Me, My, MyBase, and MyClass in Visual Basic","linkify":"Me, My, MyBase, and MyClass in Visual Basic","nodes":[{"content":"Me, My, MyBase, and MyClass in Visual Basic","pos":[0,43]}]},{"content":"<ph id=\"ph1\">`Me`</ph>, <ph id=\"ph2\">`My`</ph>, <ph id=\"ph3\">`MyBase`</ph>, and <ph id=\"ph4\">`MyClass`</ph> in Visual Basic have similar names, but different purposes.","pos":[809,904],"source":"`Me`, `My`, `MyBase`, and `MyClass` in Visual Basic have similar names, but different purposes."},{"content":"This topic describes each of these entities in order to distinguish them.","pos":[905,978]},{"pos":[987,989],"content":"Me","linkify":"Me","nodes":[{"content":"Me","pos":[0,2]}]},{"content":"The <ph id=\"ph1\">`Me`</ph> keyword provides a way to refer to the specific instance of a class or structure in which the code is currently executing.","pos":[993,1124],"source":"The `Me` keyword provides a way to refer to the specific instance of a class or structure in which the code is currently executing."},{"content":"<ph id=\"ph1\">`Me`</ph> behaves like either an object variable or a structure variable referring to the current instance.","pos":[1125,1227],"source":"`Me` behaves like either an object variable or a structure variable referring to the current instance."},{"content":"Using <ph id=\"ph1\">`Me`</ph> is particularly useful for passing information about the currently executing instance of a class or structure to a procedure in another class, structure, or module.","pos":[1228,1403],"source":" Using `Me` is particularly useful for passing information about the currently executing instance of a class or structure to a procedure in another class, structure, or module."},{"content":"For example, suppose you have the following procedure in a module.","pos":[1410,1476]},{"pos":[1645,1797],"content":"You can call this procedure and pass the current instance of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form&gt;</ph> class as an argument by using the following statement.","source":"You can call this procedure and pass the current instance of the <xref:System.Windows.Forms.Form> class as an argument by using the following statement."},{"pos":[1843,1845],"content":"My","linkify":"My","nodes":[{"content":"My","pos":[0,2]}]},{"pos":[1849,2085],"content":"The <ph id=\"ph1\">`My`</ph> feature provides easy and intuitive access to a number of <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> classes, enabling the Visual Basic user to interact with the computer, application, settings, resources, and so on.","source":"The `My` feature provides easy and intuitive access to a number of [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] classes, enabling the Visual Basic user to interact with the computer, application, settings, resources, and so on."},{"pos":[2094,2100],"content":"MyBase","linkify":"MyBase","nodes":[{"content":"MyBase","pos":[0,6]}]},{"content":"The <ph id=\"ph1\">`MyBase`</ph> keyword behaves like an object variable referring to the base class of the current instance of a class.","pos":[2104,2220],"source":"The `MyBase` keyword behaves like an object variable referring to the base class of the current instance of a class."},{"content":"<ph id=\"ph1\">`MyBase`</ph> is commonly used to access base class members that are overridden or shadowed in a derived class.","pos":[2221,2327],"source":"`MyBase` is commonly used to access base class members that are overridden or shadowed in a derived class."},{"content":"<ph id=\"ph1\">`MyBase.New`</ph> is used to explicitly call a base class constructor from a derived class constructor.","pos":[2328,2426],"source":"`MyBase.New` is used to explicitly call a base class constructor from a derived class constructor."},{"pos":[2435,2442],"content":"MyClass","linkify":"MyClass","nodes":[{"content":"MyClass","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`MyClass`</ph> keyword behaves like an object variable referring to the current instance of a class as originally implemented.","pos":[2446,2571],"source":"The `MyClass` keyword behaves like an object variable referring to the current instance of a class as originally implemented."},{"content":"<ph id=\"ph1\">`MyClass`</ph> is similar to <ph id=\"ph2\">`Me`</ph>, but all method calls on it are treated as if the method were <ph id=\"ph3\">`NotOverridable`</ph>.","pos":[2572,2680],"source":"`MyClass` is similar to `Me`, but all method calls on it are treated as if the method were `NotOverridable`."},{"pos":[2689,2697],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2701,2822],"content":"<bpt id=\"p1\">[</bpt>Inheritance Basics<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept>","source":"[Inheritance Basics](../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)"}]}