{"content":"---\ntitle: \"Compiler Error CS0686\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0686\"\nhelpviewer_keywords: \n  - \"CS0686\"\nms.assetid: 821ea0c9-87d8-4902-8f0b-dcad72312132\n---\n# Compiler Error CS0686\nAccessor 'accessor' cannot implement interface member 'member' for type 'type'. Use an explicit interface implementation.  \n  \n Suggested: This error can occur when implementing an interface that contains method names which conflict with the auto-generated methods associated with a property or event. The get/set methods for properties are generated as get_property and set_property, and the add/remove methods for events are generated as add_event and remove_event. If an interface contains either of these methods, a conflict occurs. To avoid this error, implement the methods using an explicit interface implementation. To do this, specify the function as:  \n  \n```csharp  \nInterface.get_property() { /* */ }  \nInterface.set_property() { /* */ }  \n```  \n  \n## Example  \n The following sample generates CS0686:  \n  \n```csharp  \n// CS0686.cs  \ninterface I  \n{  \n    int get_P();  \n}  \n  \nclass C : I  \n{  \n    public int P  \n    {  \n        get { return 1; }  // CS0686  \n    }  \n}  \n// But the following is valid:  \nclass D : I  \n{  \n    int I.get_P() { return 1; }  \n    public static void Main() {}  \n}  \n```  \n  \n## Example  \n This error can also occur when declaring events.  The event construct automatically generates the `add_event` and `remove_event` methods, which could conflict with the methods of the same name in an interface, as in the following sample:  \n  \n```csharp  \n// CS0686b.cs  \nusing System;  \n  \ninterface I  \n{  \n    void add_OnMyEvent(EventHandler e);  \n}  \n  \nclass C : I  \n{  \n    public event EventHandler OnMyEvent  \n    {  \n        add { }  // CS0686  \n        remove { }  \n    }  \n}  \n  \n// Correct (using explicit interface implementation):  \nclass D : I  \n{  \n    void I.add_OnMyEvent(EventHandler e) {}  \n    public static void Main() {}  \n}  \n```\n","nodes":[{"pos":[4,165],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Error CS0686\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0686\"\nhelpviewer_keywords: \n  - \"CS0686\"\nms.assetid: 821ea0c9-87d8-4902-8f0b-dcad72312132","nodes":[{"content":"Compiler Error CS0686","nodes":[{"pos":[0,21],"content":"Compiler Error CS0686","nodes":[{"content":"Compiler Error CS0686","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[172,193],"content":"Compiler Error CS0686","linkify":"Compiler Error CS0686","nodes":[{"content":"Compiler Error CS0686","pos":[0,21]}]},{"content":"Accessor 'accessor' cannot implement interface member 'member' for type 'type'.","pos":[194,273]},{"content":"Use an explicit interface implementation.","pos":[274,315]},{"content":"Suggested: This error can occur when implementing an interface that contains method names which conflict with the auto-generated methods associated with a property or event.","pos":[322,495]},{"content":"The get/set methods for properties are generated as get_property and set_property, and the add/remove methods for events are generated as add_event and remove_event.","pos":[496,661]},{"content":"If an interface contains either of these methods, a conflict occurs.","pos":[662,730]},{"content":"To avoid this error, implement the methods using an explicit interface implementation.","pos":[731,817]},{"content":"To do this, specify the function as:","pos":[818,854]},{"pos":[958,965],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates CS0686:","pos":[969,1007]},{"pos":[1316,1323],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This error can also occur when declaring events.","pos":[1327,1375]},{"content":"The event construct automatically generates the <ph id=\"ph1\">`add_event`</ph> and <ph id=\"ph2\">`remove_event`</ph> methods, which could conflict with the methods of the same name in an interface, as in the following sample:","pos":[1377,1564],"source":"  The event construct automatically generates the `add_event` and `remove_event` methods, which could conflict with the methods of the same name in an interface, as in the following sample:"}]}