{"content":"---\ntitle: \"Factory Model Overview\"\nms.date: \"03/30/2017\"\nms.assetid: b5dc81c4-7554-44b9-b513-769bd61e2e7b\n---\n# Factory Model Overview\nADO.NET 2.0 introduced new base classes in the <xref:System.Data.Common> namespace. The base classes are abstract, which means that they can't be directly instantiated. They include <xref:System.Data.Common.DbConnection>, <xref:System.Data.Common.DbCommand>, and <xref:System.Data.Common.DbDataAdapter> and are shared by the .NET Framework data providers, such as <xref:System.Data.SqlClient> and <xref:System.Data.OleDb>. The addition of base classes simplifies adding functionality to the .NET Framework data providers without having to create new interfaces.  \n  \n ADO.NET 2.0 also introduced abstract base classes, which enable a developer to write generic data access code that does not depend on a specific data provider.  \n  \n## The Factory Design Pattern  \n The programming model for writing provider-independent code is based on the use of the \"factory\" design pattern, which uses a single API to access databases across multiple providers. This pattern is aptly named, as it calls for the use of a specialized object solely to create other objects, much like a real-world factory. For a more detailed description of the factory design pattern, see [Writing Generic Data Access Code in ASP.NET 2.0 and ADO.NET 2.0](https://go.microsoft.com/fwlink/?LinkId=55915).\n  \n Starting with ADO.NET 2.0, the <xref:System.Data.Common.DbProviderFactories> class provides `static` (or `Shared` in Visual Basic) methods for creating a <xref:System.Data.Common.DbProviderFactory> instance. The instance then returns a correct strongly typed object based on provider information and the connection string supplied at run time.  \n  \n## See also\n\n- [Obtaining a DbProviderFactory](../../../../docs/framework/data/adonet/obtaining-a-dbproviderfactory.md)\n- [DbConnection, DbCommand and DbException](../../../../docs/framework/data/adonet/dbconnection-dbcommand-and-dbexception.md)\n- [Modifying Data with a DbDataAdapter](../../../../docs/framework/data/adonet/modifying-data-with-a-dbdataadapter.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,106],"embed":true,"restype":"x-metadata","content":"title: \"Factory Model Overview\"\nms.date: \"03/30/2017\"\nms.assetid: b5dc81c4-7554-44b9-b513-769bd61e2e7b","nodes":[{"content":"Factory Model Overview","nodes":[{"pos":[0,22],"content":"Factory Model Overview","nodes":[{"content":"Factory Model Overview","pos":[0,22]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[113,135],"content":"Factory Model Overview","linkify":"Factory Model Overview","nodes":[{"content":"Factory Model Overview","pos":[0,22]}]},{"content":"ADO.NET 2.0 introduced new base classes in the <ph id=\"ph1\">&lt;xref:System.Data.Common&gt;</ph> namespace.","pos":[136,219],"source":"ADO.NET 2.0 introduced new base classes in the <xref:System.Data.Common> namespace."},{"content":"The base classes are abstract, which means that they can't be directly instantiated.","pos":[220,304]},{"content":"They include <ph id=\"ph1\">&lt;xref:System.Data.Common.DbConnection&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Data.Common.DbCommand&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> and are shared by the .NET Framework data providers, such as <ph id=\"ph4\">&lt;xref:System.Data.SqlClient&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Data.OleDb&gt;</ph>.","pos":[305,558],"source":" They include <xref:System.Data.Common.DbConnection>, <xref:System.Data.Common.DbCommand>, and <xref:System.Data.Common.DbDataAdapter> and are shared by the .NET Framework data providers, such as <xref:System.Data.SqlClient> and <xref:System.Data.OleDb>."},{"content":"The addition of base classes simplifies adding functionality to the .NET Framework data providers without having to create new interfaces.","pos":[559,697]},{"content":"ADO.NET 2.0 also introduced abstract base classes, which enable a developer to write generic data access code that does not depend on a specific data provider.","pos":[704,863]},{"pos":[872,898],"content":"The Factory Design Pattern","linkify":"The Factory Design Pattern","nodes":[{"content":"The Factory Design Pattern","pos":[0,26]}]},{"content":"The programming model for writing provider-independent code is based on the use of the \"factory\" design pattern, which uses a single API to access databases across multiple providers.","pos":[902,1085]},{"content":"This pattern is aptly named, as it calls for the use of a specialized object solely to create other objects, much like a real-world factory.","pos":[1086,1226]},{"content":"For a more detailed description of the factory design pattern, see <bpt id=\"p1\">[</bpt>Writing Generic Data Access Code in ASP.NET 2.0 and ADO.NET 2.0<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=55915)</ept>.","pos":[1227,1407],"source":" For a more detailed description of the factory design pattern, see [Writing Generic Data Access Code in ASP.NET 2.0 and ADO.NET 2.0](https://go.microsoft.com/fwlink/?LinkId=55915)."},{"content":"Starting with ADO.NET 2.0, the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbProviderFactories&gt;</ph> class provides <ph id=\"ph2\">`static`</ph> (or <ph id=\"ph3\">`Shared`</ph> in Visual Basic) methods for creating a <ph id=\"ph4\">&lt;xref:System.Data.Common.DbProviderFactory&gt;</ph> instance.","pos":[1412,1619],"source":"Starting with ADO.NET 2.0, the <xref:System.Data.Common.DbProviderFactories> class provides `static` (or `Shared` in Visual Basic) methods for creating a <xref:System.Data.Common.DbProviderFactory> instance."},{"content":"The instance then returns a correct strongly typed object based on provider information and the connection string supplied at run time.","pos":[1620,1755]},{"pos":[1764,1772],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1776,1880],"content":"<bpt id=\"p1\">[</bpt>Obtaining a DbProviderFactory<ept id=\"p1\">](../../../../docs/framework/data/adonet/obtaining-a-dbproviderfactory.md)</ept>","source":"[Obtaining a DbProviderFactory](../../../../docs/framework/data/adonet/obtaining-a-dbproviderfactory.md)"},{"pos":[1883,2006],"content":"<bpt id=\"p1\">[</bpt>DbConnection, DbCommand and DbException<ept id=\"p1\">](../../../../docs/framework/data/adonet/dbconnection-dbcommand-and-dbexception.md)</ept>","source":"[DbConnection, DbCommand and DbException](../../../../docs/framework/data/adonet/dbconnection-dbcommand-and-dbexception.md)"},{"pos":[2009,2125],"content":"<bpt id=\"p1\">[</bpt>Modifying Data with a DbDataAdapter<ept id=\"p1\">](../../../../docs/framework/data/adonet/modifying-data-with-a-dbdataadapter.md)</ept>","source":"[Modifying Data with a DbDataAdapter](../../../../docs/framework/data/adonet/modifying-data-with-a-dbdataadapter.md)"},{"pos":[2128,2232],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}