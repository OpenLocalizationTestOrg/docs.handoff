{"content":"---\ntitle: \"Non-Generic ParallelForEach | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: de17e7a2-257b-48b3-91a1-860e2e9bf6e6\ncaps.latest.revision: 11\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Non-Generic ParallelForEach\n[!INCLUDE[netfx_current_long](../../../../includes/netfx-current-long-md.md)] ships in its toolbox a set of Control Flow activities, including <xref:System.Activities.Statements.ParallelForEach%601>, which allows iterating through <!--zz <xref:System.Collections.IEnumerable%601> --> `System.Collections.IEnumerable` collections.  \n  \n <xref:System.Activities.Statements.ParallelForEach%601> requires its <xref:System.Activities.Statements.ParallelForEach%601.Values%2A> property to be of type <!--zz <xref:System.Collections.IEnumerable%601> --> `System.Collections.IEnumerable`. This precludes users from iterating over data structures that implement <!--zz <xref:System.Collections.IEnumerable%601> --> `System.Collections.IEnumerable` interface (for example, <xref:System.Collections.ArrayList>). The non-generic version of <xref:System.Activities.Statements.ParallelForEach%601> overcomes this requirement, at the expense of more run-time complexity for ensuring the compatibility of the types of the values in the collection.  \n  \n This sample shows how to implement a non-generic <xref:System.Activities.Statements.ParallelForEach%601> activity and its designer. This activity can be used to iterate through <xref:System.Collections.ArrayList>.  \n  \n## ParallelForEach Activity  \n The C#/VB `foreach` statement enumerates the elements of a collection, executing an embedded statement for each element of the collection. The [!INCLUDE[wf1](../../../../includes/wf1-md.md)] equivalent activities are <xref:System.Activities.Statements.ForEach%601> and <xref:System.Activities.Statements.ParallelForEach%601>. The <xref:System.Activities.Statements.ForEach%601> activity contains a list of values and a body. At runtime, the list is iterated and the body is executed for each value in the list.  \n  \n <xref:System.Activities.Statements.ParallelForEach%601> has a <xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A>, so that the <xref:System.Activities.Statements.ParallelForEach%601> activity could complete early if the evaluation of the <xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A> returns `true`. The <xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A> is evaluated after each iteration is completed.  \n  \n For most cases, the generic version of the activity should be the preferred solution, because it covers most of the scenarios in which it is used and provides type checking at compile time. The non-generic version can be used for iterating through types that implement the non-generic <xref:System.Collections.IEnumerable> interface.  \n  \n## Class Definition  \n The following code example shows the definition of a non-generic `ParallelForEach` activity is.  \n  \n```  \n[ContentProperty(\"Body\")]  \npublic class ParallelForEach : NativeActivity  \n{  \n    [RequiredArgument]  \n    [DefaultValue(null)]  \n    InArgument<IEnumerable> Values { get; set; }  \n  \n    [DefaultValue(null)]  \n    [DependsOn(\"Values\")]  \n    public Activity<bool> CompletionCondition  \n    [DefaultValue(null)]  \n    [DependsOn(\"CompletionCondition\")]  \n    ActivityAction<object> Body { get; set; }   \n}  \n```  \n  \n Body (optional)  \n The <xref:System.Activities.ActivityAction> of type <xref:System.Object>, which is executed for each element in the collection. Each individual element is passed into the Body through its Argument property.  \n  \n Values (optional)  \n The collection of elements that are iterated over. Ensuring that all elements of the collection are of compatible types is done at run-time.  \n  \n CompletionCondition (optional)  \n The <xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A> property is evaluated after any iteration completes. If it evaluates to `true`, then the scheduled pending iterations are canceled. If this property is not set, all activities in the Branches collection execute until completion.  \n  \n## Example of Using ParallelForEach  \n The following code demonstrates how to use the ParallelForEach activity in an application.  \n  \n```  \nstring[] names = { \"bill\", \"steve\", \"ray\" };  \n  \nDelegateInArgument<object> iterationVariable = new DelegateInArgument<object>() { Name = \"iterationVariable\" };  \n  \nActivity sampleUsage =  \n    new ParallelForEach  \n    {  \n       Values = new InArgument<IEnumerable>(c=> names),  \n       Body = new ActivityAction<object>   \n       {                          \n           Argument = iterationVariable,  \n           Handler = new WriteLine  \n           {  \n               Text = new InArgument<string>(env => string.Format(\"Hello {0}\",                                                               iterationVariable.Get(env)))  \n           }  \n       }  \n   };  \n```  \n  \n## ParallelForEach Designer  \n The activity designer for the sample is similar in appearance to the designer provided for the built-in <xref:System.Activities.Statements.ParallelForEach%601> activity. The designer appears in the toolbox in the **Samples**, **Non-Generic Activities** category. The designer is named **ParallelForEachWithBodyFactory** in the toolbox, because the activity exposes an <xref:System.Activities.Presentation.IActivityTemplateFactory> in the toolbox that creates the activity with a properly configured <xref:System.Activities.ActivityAction>.  \n  \n```  \npublic sealed class ParallelForEachWithBodyFactory : IActivityTemplateFactory  \n{  \n    public Activity Create(DependencyObject target)  \n    {  \n        return new Microsoft.Samples.Activities.Statements.ParallelForEach()  \n        {  \n            Body = new ActivityAction<object>()  \n            {  \n                Argument = new DelegateInArgument<object>()  \n                {  \n                    Name = \"item\"  \n                }  \n            }  \n        };  \n    }  \n}  \n```  \n  \n#### To run the sample  \n  \n1.  Set the project of your choice as the startup project of the solution.  \n  \n    1.  **CodeTestClient** shows how to use the activity using code.  \n  \n    2.  **DesignerTestClient** shows how to use the activity within the designer.  \n  \n2.  Build and run the project.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Scenario\\ActivityLibrary\\NonGenericParallelForEach`\n","nodes":[{"pos":[12,56],"content":"Non-Generic ParallelForEach | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Non-Generic ParallelForEach | Microsoft Docs","pos":[0,44]}]},{"pos":[322,349],"content":"Non-Generic ParallelForEach","linkify":"Non-Generic ParallelForEach","nodes":[{"content":"Non-Generic ParallelForEach","pos":[0,27]}]},{"pos":[350,679],"content":"<ph id=\"ph1\">[!INCLUDE[netfx_current_long](../../../../includes/netfx-current-long-md.md)]</ph> ships in its toolbox a set of Control Flow activities, including <ph id=\"ph2\">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph>, which allows iterating through <ph id=\"ph3\">&lt;!--zz &lt;xref:System.Collections.IEnumerable%601&gt; --&gt;</ph> <ph id=\"ph4\">`System.Collections.IEnumerable`</ph> collections.","source":"[!INCLUDE[netfx_current_long](../../../../includes/netfx-current-long-md.md)] ships in its toolbox a set of Control Flow activities, including <xref:System.Activities.Statements.ParallelForEach%601>, which allows iterating through <!--zz <xref:System.Collections.IEnumerable%601> --> `System.Collections.IEnumerable` collections."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph> requires its <ph id=\"ph2\">&lt;xref:System.Activities.Statements.ParallelForEach%601.Values%2A&gt;</ph> property to be of type <ph id=\"ph3\">&lt;!--zz &lt;xref:System.Collections.IEnumerable%601&gt; --&gt;</ph> <ph id=\"ph4\">`System.Collections.IEnumerable`</ph>.","pos":[686,930],"source":"<xref:System.Activities.Statements.ParallelForEach%601> requires its <xref:System.Activities.Statements.ParallelForEach%601.Values%2A> property to be of type <!--zz <xref:System.Collections.IEnumerable%601> --> `System.Collections.IEnumerable`."},{"content":"This precludes users from iterating over data structures that implement <ph id=\"ph1\">&lt;!--zz &lt;xref:System.Collections.IEnumerable%601&gt; --&gt;</ph> <ph id=\"ph2\">`System.Collections.IEnumerable`</ph> interface (for example, <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList&gt;</ph>).","pos":[931,1150],"source":" This precludes users from iterating over data structures that implement <!--zz <xref:System.Collections.IEnumerable%601> --> `System.Collections.IEnumerable` interface (for example, <xref:System.Collections.ArrayList>)."},{"content":"The non-generic version of <ph id=\"ph1\">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph> overcomes this requirement, at the expense of more run-time complexity for ensuring the compatibility of the types of the values in the collection.","pos":[1151,1381],"source":" The non-generic version of <xref:System.Activities.Statements.ParallelForEach%601> overcomes this requirement, at the expense of more run-time complexity for ensuring the compatibility of the types of the values in the collection."},{"content":"This sample shows how to implement a non-generic <ph id=\"ph1\">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph> activity and its designer.","pos":[1388,1519],"source":"This sample shows how to implement a non-generic <xref:System.Activities.Statements.ParallelForEach%601> activity and its designer."},{"content":"This activity can be used to iterate through <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[1520,1601],"source":" This activity can be used to iterate through <xref:System.Collections.ArrayList>."},{"pos":[1610,1634],"content":"ParallelForEach Activity","linkify":"ParallelForEach Activity","nodes":[{"content":"ParallelForEach Activity","pos":[0,24]}]},{"content":"The C#/VB <ph id=\"ph1\">`foreach`</ph> statement enumerates the elements of a collection, executing an embedded statement for each element of the collection.","pos":[1638,1776],"source":"The C#/VB `foreach` statement enumerates the elements of a collection, executing an embedded statement for each element of the collection."},{"content":"The <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> equivalent activities are <ph id=\"ph2\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph>.","pos":[1777,1963],"source":" The [!INCLUDE[wf1](../../../../includes/wf1-md.md)] equivalent activities are <xref:System.Activities.Statements.ForEach%601> and <xref:System.Activities.Statements.ParallelForEach%601>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity contains a list of values and a body.","pos":[1964,2062],"source":" The <xref:System.Activities.Statements.ForEach%601> activity contains a list of values and a body."},{"content":"At runtime, the list is iterated and the body is executed for each value in the list.","pos":[2063,2148]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph> has a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A&gt;</ph>, so that the <ph id=\"ph3\">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph> activity could complete early if the evaluation of the <ph id=\"ph4\">&lt;xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A&gt;</ph> returns <ph id=\"ph5\">`true`</ph>.","pos":[2155,2514],"source":"<xref:System.Activities.Statements.ParallelForEach%601> has a <xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A>, so that the <xref:System.Activities.Statements.ParallelForEach%601> activity could complete early if the evaluation of the <xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A> returns `true`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A&gt;</ph> is evaluated after each iteration is completed.","pos":[2515,2645],"source":" The <xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A> is evaluated after each iteration is completed."},{"content":"For most cases, the generic version of the activity should be the preferred solution, because it covers most of the scenarios in which it is used and provides type checking at compile time.","pos":[2652,2841]},{"content":"The non-generic version can be used for iterating through types that implement the non-generic <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.","pos":[2842,2985],"source":" The non-generic version can be used for iterating through types that implement the non-generic <xref:System.Collections.IEnumerable> interface."},{"pos":[2994,3010],"content":"Class Definition","linkify":"Class Definition","nodes":[{"content":"Class Definition","pos":[0,16]}]},{"pos":[3014,3109],"content":"The following code example shows the definition of a non-generic <ph id=\"ph1\">`ParallelForEach`</ph> activity is.","source":"The following code example shows the definition of a non-generic `ParallelForEach` activity is."},{"content":"Body (optional)","pos":[3541,3556]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.ActivityAction&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>, which is executed for each element in the collection.","pos":[3560,3687],"source":"The <xref:System.Activities.ActivityAction> of type <xref:System.Object>, which is executed for each element in the collection."},{"content":"Each individual element is passed into the Body through its Argument property.","pos":[3688,3766]},{"content":"Values (optional)","pos":[3773,3790]},{"content":"The collection of elements that are iterated over.","pos":[3794,3844]},{"content":"Ensuring that all elements of the collection are of compatible types is done at run-time.","pos":[3845,3934]},{"content":"CompletionCondition (optional)","pos":[3941,3971]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A&gt;</ph> property is evaluated after any iteration completes.","pos":[3975,4110],"source":" The <xref:System.Activities.Statements.ParallelForEach%601.CompletionCondition%2A> property is evaluated after any iteration completes."},{"content":"If it evaluates to <ph id=\"ph1\">`true`</ph>, then the scheduled pending iterations are canceled.","pos":[4111,4189],"source":" If it evaluates to `true`, then the scheduled pending iterations are canceled."},{"content":"If this property is not set, all activities in the Branches collection execute until completion.","pos":[4190,4286]},{"pos":[4295,4327],"content":"Example of Using ParallelForEach","linkify":"Example of Using ParallelForEach","nodes":[{"content":"Example of Using ParallelForEach","pos":[0,32]}]},{"content":"The following code demonstrates how to use the ParallelForEach activity in an application.","pos":[4331,4421]},{"pos":[5109,5133],"content":"ParallelForEach Designer","linkify":"ParallelForEach Designer","nodes":[{"content":"ParallelForEach Designer","pos":[0,24]}]},{"content":"The activity designer for the sample is similar in appearance to the designer provided for the built-in <ph id=\"ph1\">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph> activity.","pos":[5137,5306],"source":"The activity designer for the sample is similar in appearance to the designer provided for the built-in <xref:System.Activities.Statements.ParallelForEach%601> activity."},{"content":"The designer appears in the toolbox in the <bpt id=\"p1\">**</bpt>Samples<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Non-Generic Activities<ept id=\"p2\">**</ept> category.","pos":[5307,5399],"source":" The designer appears in the toolbox in the **Samples**, **Non-Generic Activities** category."},{"content":"The designer is named <bpt id=\"p1\">**</bpt>ParallelForEachWithBodyFactory<ept id=\"p1\">**</ept> in the toolbox, because the activity exposes an <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.IActivityTemplateFactory&gt;</ph> in the toolbox that creates the activity with a properly configured <ph id=\"ph2\">&lt;xref:System.Activities.ActivityAction&gt;</ph>.","pos":[5400,5676],"source":" The designer is named **ParallelForEachWithBodyFactory** in the toolbox, because the activity exposes an <xref:System.Activities.Presentation.IActivityTemplateFactory> in the toolbox that creates the activity with a properly configured <xref:System.Activities.ActivityAction>."},{"pos":[6184,6201],"content":"To run the sample","linkify":"To run the sample","nodes":[{"content":"To run the sample","pos":[0,17]}]},{"content":"Set the project of your choice as the startup project of the solution.","pos":[6211,6281]},{"pos":[6295,6355],"content":"<bpt id=\"p1\">**</bpt>CodeTestClient<ept id=\"p1\">**</ept> shows how to use the activity using code.","source":"**CodeTestClient** shows how to use the activity using code."},{"pos":[6369,6442],"content":"<bpt id=\"p1\">**</bpt>DesignerTestClient<ept id=\"p1\">**</ept> shows how to use the activity within the designer.","source":"**DesignerTestClient** shows how to use the activity within the designer."},{"content":"Build and run the project.","pos":[6452,6478]},{"pos":[6486,6618],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[6672,6998],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[6999,7049]}]}