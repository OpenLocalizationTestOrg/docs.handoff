<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="geometry-overview.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4f109b51ed566d1996b0c59b4ecbe51caa022cc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\geometry-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b64bf8218f1c73c7a2504dacf1ac07f44c9ed44</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffe84af2b84f38b0aa19bba0170a4136eadbeaa4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Geometry Overview</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Geometry Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This overview describes how to use the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph> classes to describe shapes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic also contrasts the differences between <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects and <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>What Is a Geometry?</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class and the classes which derive from it, such as <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph>, enable you to describe the geometry of a 2-D shape.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These geometric descriptions have many uses, such defining a shape to paint to the screen or defining hit-test and clip regions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can even use a geometry to define an animation path.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects can be simple, such as rectangles and circles, or composite, created from two or more geometry objects.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>More complex geometries can be created by using the <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> classes, which enable you to describe arcs and curves.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because a <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> is a type of <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects provide several special features: they can be declared as <bpt id="p1">[</bpt>resources<ept id="p1">](../advanced/xaml-resources.md)</ept>, shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about the different features provided by <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> objects, see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Geometries vs. Shapes</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> classes seem similar in that they both describe 2-D shapes (compare <ph id="ph3">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> for example), but there are important differences.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For one, the <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class inherits from the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> class while the <ph id="ph3">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> class inherits from <ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because they are elements, <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects can render themselves and participate in the layout system, while <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects cannot.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects are more readily usable than <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects, <ph id="ph3">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects are more versatile.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>While a <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object is used to render 2-D graphics, a <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph> object can be used to define the geometric region for 2-D graphics, define a region for clipping, or define a region for hit testing, for example.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Path Shape</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>One <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph> class, actually uses a <ph id="ph3">&lt;xref:System.Windows.Media.Geometry&gt;</ph> to describe its contents.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>By setting the <ph id="ph1">&lt;xref:System.Windows.Shapes.Path.Data%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph> with a <ph id="ph3">&lt;xref:System.Windows.Media.Geometry&gt;</ph> and setting its <ph id="ph4">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> properties, you can render a <ph id="ph6">&lt;xref:System.Windows.Media.Geometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Common Properties That Take a Geometry</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The preceding sections mentioned that Geometry objects can be used with other objects for a variety of purposes, such as drawing shapes, animating, and clipping.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following table lists several classes that have properties that take a <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Simple Geometry Types</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The base class for all geometries is the abstract class <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The classes which derive from the <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class can be roughly grouped into three categories: simple geometries, path geometries, and composite geometries.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Simple geometry classes include <ph id="ph1">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.RectangleGeometry&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> and are used to create basic geometric shapes, such as lines, rectangles, and circles.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph> is defined by specifying the start point of the line and the end point.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.RectangleGeometry&gt;</ph> is defined with a <ph id="ph2">&lt;xref:System.Windows.Rect&gt;</ph> structure which specifies its relative position and its height and width.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can create a rounded rectangle by setting the <ph id="ph1">&lt;xref:System.Windows.Media.RectangleGeometry.RadiusX%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.RectangleGeometry.RadiusY%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> is defined by a center point, an x-radius and a y-radius.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following examples show how to create simple geometries for rendering and for clipping.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>These same shapes, as well as more complex shapes, can be created using a <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> or by combining geometry objects together, but these classes provide a simpler means for producing these basic geometric shapes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example shows how to create and render a <ph id="ph1">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As noted previously, a <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> object is unable to draw itself, so the example uses a <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph> shape to render the line.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Because a line has no area, setting the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph> would have no effect; instead, only the <ph id="ph3">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Shapes.Shape.StrokeThickness%2A&gt;</ph> properties are specified.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following illustration shows the output from the example.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A LineGeometry<ept id="p1">]</ept><bpt id="p2">(./media/graphicsmm-line.gif "</bpt>graphicsmm_line<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A LineGeometry drawn from (10,20) to (100,130)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The next example shows how to create and render an <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The examples sets the <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry.Center%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> is set to the point <ph id="ph3">`50,50`</ph> and the x-radius and the y-radius are both set to <ph id="ph4">`50`</ph>, which creates a circle with a diameter of 100.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The interior of the ellipse is painted by assigning a value to the Path element's Fill property, in this case <ph id="ph1">&lt;xref:System.Windows.Media.Brushes.Gold%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following illustration shows the output from the example.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>An EllipseGeometry<ept id="p1">]</ept><bpt id="p2">(./media/graphicsmm-ellipse.gif "</bpt>graphicsmm_ellipse<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An EllipseGeometry drawn at (50,50)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example shows how to create and render a <ph id="ph1">&lt;xref:System.Windows.Media.RectangleGeometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The position and the dimensions of the rectangle are defined by a <ph id="ph1">&lt;xref:System.Windows.Rect&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The position is <ph id="ph1">`50,50`</ph> and the height and width are both <ph id="ph2">`25`</ph>, which creates a square.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following illustration shows the output from the example.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A RectangleGeometry<ept id="p1">]</ept><bpt id="p2">(./media/graphicsmm-rectangle.gif "</bpt>graphicsmm_rectangle<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A RectangleGeometry drawn at 50,50</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example shows how to use an <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> as the clip region for an image.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> object is defined with a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> of 200 and a <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> of 150.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry.RadiusX%2A&gt;</ph> value of 100, a <ph id="ph3">&lt;xref:System.Windows.Media.EllipseGeometry.RadiusY%2A&gt;</ph> value of 75, and a <ph id="ph4">&lt;xref:System.Windows.Media.EllipseGeometry.Center%2A&gt;</ph> value of 100,75 is set to the <ph id="ph5">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> property of the image.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Only the part of the image that is within the area of the ellipse will be displayed.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following illustration shows the output from the example.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>An Image with and without clipping<ept id="p1">]</ept><bpt id="p2">(./media/graphicsmm-clipexample.png "</bpt>graphicsmm_clipexample<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An EllipseGeometry used to clip an Image control</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Path Geometries</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> class and its light-weight equivalent, the <ph id="ph2">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> class, provide the means to describe multiple complex figures composed of arcs, curves, and lines.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>At the heart of a <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> is a collection of <ph id="ph2">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> objects, so named because each figure describes a discrete shape in the <ph id="ph3">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> is itself comprised of one or more <ph id="ph2">&lt;xref:System.Windows.Media.PathSegment&gt;</ph> objects, each of which describes a segment of the figure.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>There are many types of segments.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Segment Type</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Creates an elliptical arc between two points.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create an Elliptical Arc<ept id="p1">](how-to-create-an-elliptical-arc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Creates a cubic Bezier curve between two points.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a Cubic Bezier Curve<ept id="p1">](how-to-create-a-cubic-bezier-curve.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Creates a line between two points.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a LineSegment in a PathGeometry<ept id="p1">](how-to-create-a-linesegment-in-a-pathgeometry.md)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Creates a series of cubic Bezier curves.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Media.PolyBezierSegment&gt;</ph> type page.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Creates a series of lines.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Media.PolyLineSegment&gt;</ph> type page.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Creates a series of quadratic Bezier curves.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Media.PolyQuadraticBezierSegment&gt;</ph> page.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Creates a quadratic Bezier curve.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a Quadratic Bezier Curve<ept id="p1">](how-to-create-a-quadratic-bezier-curve.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The segments within a <ph id="ph1">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> are combined into a single geometric shape with the end point of each segment being the start point of the next segment.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.PathFigure.StartPoint%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> specifies the point from which the first segment is drawn.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Each subsequent segment starts at the end point of the previous segment.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For example, a vertical line from <ph id="ph1">`10,50`</ph> to <ph id="ph2">`10,150`</ph> can be defined by setting the <ph id="ph3">&lt;xref:System.Windows.Media.PathFigure.StartPoint%2A&gt;</ph> property to <ph id="ph4">`10,50`</ph> and creating a <ph id="ph5">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> with a <ph id="ph6">&lt;xref:System.Windows.Media.LineSegment.Point%2A&gt;</ph> property setting of <ph id="ph7">`10,150`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following example creates a simple <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> comprised of a single <ph id="ph2">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> with a <ph id="ph3">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> and displays it using a <ph id="ph4">&lt;xref:System.Windows.Shapes.Path&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> object's <ph id="ph2">&lt;xref:System.Windows.Media.PathFigure.StartPoint%2A&gt;</ph> is set to <ph id="ph3">`10,20`</ph> and a <ph id="ph4">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> is defined with an end point of <ph id="ph5">`100,130`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following illustration shows the <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> created by this example.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A LineGeometry<ept id="p1">]</ept><bpt id="p2">(./media/graphicsmm-line.gif "</bpt>graphicsmm_line<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A PathGeometry that contains a single LineSegment</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It is worth contrasting this example with the preceding <ph id="ph1">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph> example.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The syntax used for a <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> is much more verbose than that used for a simple <ph id="ph2">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph>, and it may make more sense to use the <ph id="ph3">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph> class in this case, but the verbose syntax of the <ph id="ph4">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> allows for extremely intricate and complex geometric regions.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>More complex geometries can be created by using a combination of <ph id="ph1">&lt;xref:System.Windows.Media.PathSegment&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The next example uses a <ph id="ph1">&lt;xref:System.Windows.Media.BezierSegment&gt;</ph>, a <ph id="ph2">&lt;xref:System.Windows.Media.LineSegment&gt;</ph>, and an <ph id="ph3">&lt;xref:System.Windows.Media.ArcSegment&gt;</ph> to create shape.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The example first creates a cubic Bezier curve is by defining four points: a start point, which is the end point of the previous segment, an end point (<ph id="ph1">&lt;xref:System.Windows.Media.BezierSegment.Point3%2A&gt;</ph>), and two control points (<ph id="ph2">&lt;xref:System.Windows.Media.BezierSegment.Point1%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Media.BezierSegment.Point2%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The two control points of a cubic Bezier curve behave like magnets, attracting portions of what would otherwise be a straight line towards themselves, producing a curve.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The first control point, <ph id="ph1">&lt;xref:System.Windows.Media.BezierSegment.Point1%2A&gt;</ph>, affects the beginning portion of the curve; the second control point, <ph id="ph2">&lt;xref:System.Windows.Media.BezierSegment.Point2%2A&gt;</ph>, affects the ending portion of the curve.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The example then adds a <ph id="ph1">&lt;xref:System.Windows.Media.LineSegment&gt;</ph>, which is drawn between the end point of the preceding <ph id="ph2">&lt;xref:System.Windows.Media.BezierSegment&gt;</ph> that preceded it to the point specified by its <ph id="ph3">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The example then adds an <ph id="ph1">&lt;xref:System.Windows.Media.ArcSegment&gt;</ph>, which is drawn from the end point of the preceding <ph id="ph2">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> to the point specified by its <ph id="ph3">&lt;xref:System.Windows.Media.ArcSegment.Point%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The example also specifies the arc's x- and y-radius (<ph id="ph1">&lt;xref:System.Windows.Media.ArcSegment.Size%2A&gt;</ph>), a rotation angle (<ph id="ph2">&lt;xref:System.Windows.Media.ArcSegment.RotationAngle%2A&gt;</ph>), a flag indicating how large the angle of the resulting arc should be (<ph id="ph3">&lt;xref:System.Windows.Media.ArcSegment.IsLargeArc%2A&gt;</ph>), and a value indicating in which direction the arc is drawn (<ph id="ph4">&lt;xref:System.Windows.Media.ArcSegment.SweepDirection%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following illustration shows the shape created by this example.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A PathGeometry<ept id="p1">]</ept><bpt id="p2">(./media/graphicsmm-path2.gif "</bpt>graphicsmm_path2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A PathGeometry</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Even more complex geometries can be created by using multiple <ph id="ph1">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> objects within a <ph id="ph2">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> with two <ph id="ph2">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> objects, each of which contains multiple <ph id="ph3">&lt;xref:System.Windows.Media.PathSegment&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> from the above example and a <ph id="ph2">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> with a <ph id="ph3">&lt;xref:System.Windows.Media.PolyLineSegment&gt;</ph> and a <ph id="ph4">&lt;xref:System.Windows.Media.QuadraticBezierSegment&gt;</ph> are used.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.PolyLineSegment&gt;</ph> is defined with an array of points and the <ph id="ph2">&lt;xref:System.Windows.Media.QuadraticBezierSegment&gt;</ph> is defined with a control point and an end point.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following illustration shows the shape created by this example.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A PathGeometry<ept id="p1">]</ept><bpt id="p2">(./media/graphicsmm-path.gif "</bpt>graphicsmm_path<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A PathGeometry with multiple figures</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>StreamGeometry</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Like the <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> class, a <ph id="ph2">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> defines a complex geometric shape that may contain curves, arcs, and lines.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Unlike a <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>, the contents of a  <ph id="ph2">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> do not support data binding, animation, or modification.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> when you need to describe a complex geometry but do not want the overhead of supporting data binding, animation, or modification.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Because of its efficiency, the <ph id="ph1">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> class is a good choice for describing adorners.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Create a Shape Using a StreamGeometry<ept id="p1">](how-to-create-a-shape-using-a-streamgeometry.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Path Markup Syntax</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> types support a <ph id="ph3">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> attribute syntax using a special series of move and draw commands.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Path Markup Syntax<ept id="p1">](path-markup-syntax.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Composite Geometries</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Composite geometry objects can be created using a <ph id="ph1">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph>, a <ph id="ph2">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph>, or by calling the static <ph id="ph3">&lt;xref:System.Windows.Media.Geometry&gt;</ph> method <ph id="ph4">&lt;xref:System.Windows.Media.Geometry.Combine%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> object and the <ph id="ph2">&lt;xref:System.Windows.Media.Geometry.Combine%2A&gt;</ph> method performs a Boolean operation to combine the area defined by two geometries.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects that have no area are discarded.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Only two <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects can be combined (although these two geometries may also be composite geometries).</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph> class creates an amalgamation of the <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects it contains without combining their area.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Any number of <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects can be added to a <ph id="ph2">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Create a Composite Shape<ept id="p1">](how-to-create-a-composite-shape.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Because they do not perform a combine operation, using <ph id="ph1">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph> objects provides performance benefits over using <ph id="ph2">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> objects or the <ph id="ph3">&lt;xref:System.Windows.Media.Geometry.Combine%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Combined Geometries</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The preceding section mentioned the <ph id="ph1">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> object and the <ph id="ph2">&lt;xref:System.Windows.Media.Geometry.Combine%2A&gt;</ph> method combine the area defined by the geometries they contain.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.GeometryCombineMode&gt;</ph> enumeration specifies how the geometries are combined.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The possible values for the <ph id="ph1">&lt;xref:System.Windows.Media.CombinedGeometry.GeometryCombineMode%2A&gt;</ph> property are: <ph id="ph2">&lt;xref:System.Windows.Media.GeometryCombineMode.Union&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.GeometryCombineMode.Intersect&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Media.GeometryCombineMode.Exclude&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Media.GeometryCombineMode.Xor&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> is defined with a combine mode of Union.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">&lt;xref:System.Windows.Media.CombinedGeometry.Geometry1%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Media.CombinedGeometry.Geometry2%2A&gt;</ph> are defined as circles of the same radius, but with centers offset by 50.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Results of the Union combine mode<ept id="p1">]</ept><bpt id="p2">(./media/mil-task-combined-geometry-union.PNG "</bpt>mil_task_combined_geometry_union<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> is defined with a combine mode of <ph id="ph2">&lt;xref:System.Windows.Media.GeometryCombineMode.Xor&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">&lt;xref:System.Windows.Media.CombinedGeometry.Geometry1%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Media.CombinedGeometry.Geometry2%2A&gt;</ph> are defined as circles of the same radius, but with centers offset by 50.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Results of the Xor combine mode<ept id="p1">]</ept><bpt id="p2">(./media/mil-task-combined-geometry-xor.PNG "</bpt>mil_task_combined_geometry_xor<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For additional examples, see <bpt id="p1">[</bpt>Create a Composite Shape<ept id="p1">](how-to-create-a-composite-shape.md)</ept> and <bpt id="p2">[</bpt>Create a Combined Geometry<ept id="p2">](how-to-create-a-combined-geometry.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Freezable Features</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Because it inherits from the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class  provide several special features: <ph id="ph3">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects can be declared as <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../advanced/xaml-resources.md)</ept>, shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For more information about the different features provided by <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> objects, see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Other Geometry Features</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class also provides useful utility methods, such as the following:</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Geometry.GetArea%2A&gt;</ph> - Gets the area of the <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Geometry.FillContains%2A&gt;</ph> - Determines whether the Geometry contains another <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Geometry.StrokeContains%2A&gt;</ph> - Determines whether the stroke of a <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph> contains a specified point.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class for a complete listing of its methods.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>2D Graphics and Imaging<ept id="p1">](../advanced/optimizing-performance-2d-graphics-and-imaging.md)</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Path Markup Syntax<ept id="p1">](path-markup-syntax.md)</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How-to Topics<ept id="p1">](geometries-how-to-topics.md)</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation Overview<ept id="p1">](animation-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Shapes and Basic Drawing in WPF Overview<ept id="p1">](shapes-and-basic-drawing-in-wpf-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Drawing Objects Overview<ept id="p1">](drawing-objects-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>