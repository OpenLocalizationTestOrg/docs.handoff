<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="client-channel-level-programming.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb89831357a0a8d5b1e289ad03e8ef3247f310f4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\extending\client-channel-level-programming.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49aeaa2f4836636619027907b395a79235b65db6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1fa1af5ff3d59e0d9edb78509cc38c1c32ec4b84</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Client Channel-Level Programming | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Client Channel-Level Programming</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to write a <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> client application without using the <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601?displayProperty=fullName&gt;</ph> class and its associated object model.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sending Messages</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To be ready to send messages and receive and process replies, the following steps are required:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create a binding.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Build a channel factory.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a channel.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Send a request and read the reply.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Close all channel objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating a Binding</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Similar to the receiving case (see <bpt id="p1">[</bpt>Service Channel-Level Programming<ept id="p1">](../../../../docs/framework/wcf/extending/service-channel-level-programming.md)</ept>), sending messages starts by creating a binding.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This example creates a new <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CustomBinding?displayProperty=fullName&gt;</ph> and adds an <ph id="ph2">&lt;xref:System.ServiceModel.Channels.HttpTransportBindingElement?displayProperty=fullName&gt;</ph> to its Elements collection.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Building a ChannelFactory</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Instead of creating a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IChannelListener?displayProperty=fullName&gt;</ph>, this time we create a <ph id="ph2">&lt;xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName&gt;</ph> by calling <ph id="ph3">&lt;xref:System.ServiceModel.ChannelFactory.CreateFactory%2A?displayProperty=fullName&gt;</ph> on the binding where the type parameter is <ph id="ph4">&lt;xref:System.ServiceModel.Channels.IRequestChannel?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>While channel listeners are used by the side that waits for incoming messages, channel factories are used by the side that initiates the communication to create a channel.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Just like channel listeners, channel factories must be opened first before they can be used.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating a Channel</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We then call <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=fullName&gt;</ph> to create an <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This call takes the address of the endpoint with which we want to communicate using the new channel being created.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Once we have a channel, we call Open on it to put it in a state ready for communication.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Depending on the nature of the transport, this call to Open may initiate a connection with the target endpoint or may do nothing at all on the network.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Sending a Request and Reading the Reply</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once we have an opened channel, we can create a message and use the channel’s Request method to send the request and wait for the reply to come back.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When this method returns, we have a reply message that we can read to find out what the endpoint’s reply was.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Closing Objects</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To avoid leaking resources, we close objects used in communications when they are no longer required.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following code example shows a basic client using the channel factory to send a message and read the reply.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ChannelProgrammingBasic#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/channelprogrammingbasic/cs/clientprogram.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>ChannelProgrammingBasic#2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/channelprogrammingbasic/vb/clientprogram.vb#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>