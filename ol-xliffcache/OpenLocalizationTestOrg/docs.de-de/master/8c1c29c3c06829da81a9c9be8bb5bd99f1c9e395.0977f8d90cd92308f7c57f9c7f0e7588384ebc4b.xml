{"content":"---\ntitle: C# Enums - A tour of the C# language\ndescription: Learn about enums, discrete named constants in C#\nms.date: 08/10/2016\nms.assetid: 7faba1cc-6ea9-4a19-adb9-0335e4b132e5\n---\n\n# Enums\n\nAn ***enum type*** is a distinct value type with a set of named constants. You define enums when you need to define a type that can have a set of discrete values. They use one of the integral value types as their underlying storage. They provide semantic meaning to the discrete values.\n\nThe following example declares and uses an `enum` type named `Color` with three constant values, `Red`, `Green`, and `Blue`.\n\n[!code-csharp[EnumExample](../../../samples/snippets/csharp/tour/enums/Program.cs#L3-L36)]\n\nEach `enum` type has a corresponding integral type called the ***underlying type*** of the `enum` type. An `enum` type that does not explicitly declare an underlying type has an underlying type of `int`. An `enum` type’s storage format and range of possible values are determined by its underlying type. The set of values that an `enum` type can take on is not limited by its `enum` members. In particular, any value of the underlying type of an `enum` can be cast to the `enum` type and is a distinct valid value of that `enum` type.\n\nThe following example declares an `enum` type named `Alignment` with an underlying type of `sbyte`.\n\n[!code-csharp[EnumStorage](../../../samples/snippets/csharp/tour/enums/Program.cs#L38-L43)]\n\nAs shown by the previous example, an `enum` member declaration can include a constant expression that specifies the value of the member. The constant value for each `enum` member must be in the range of the underlying type of the `enum`. When an `enum` member declaration does not explicitly specify a value, the member is given the value zero (if it is the first member in the `enum` type) or the value of the textually preceding `enum` member plus one.\n\n`Enum` values can be converted to integral values and vice versa using type casts. For example:\n\n[!code-csharp[EnumStorage](../../../samples/snippets/csharp/tour/enums/Program.cs#L49-L50)]\n\nThe default value of any `enum` type is the integral value zero converted to the `enum` type. In cases where variables are automatically initialized to a default value, this is the value given to variables of `enum` types. In order for the default value of an `enum` type to be easily available, the literal `0` implicitly converts to any `enum` type. Thus, the following is permitted.\n\n[!code-csharp[EnumZero](../../../samples/snippets/csharp/tour/enums/Program.cs#L58-L58)]\n\n> [!div class=\"step-by-step\"]\n> [Previous](interfaces.md)\n> [Next](delegates.md)\n","nodes":[{"pos":[4,179],"embed":true,"restype":"x-metadata","content":"title: C# Enums - A tour of the C# language\ndescription: Learn about enums, discrete named constants in C#\nms.date: 08/10/2016\nms.assetid: 7faba1cc-6ea9-4a19-adb9-0335e4b132e5","nodes":[{"content":"C# Enums - A tour of the C# language","nodes":[{"pos":[0,36],"content":"C# Enums - A tour of the C# language","nodes":[{"content":"C# Enums - A tour of the C# language","pos":[0,36]}]}],"path":["title"],"nosxs":false},{"content":"Learn about enums, discrete named constants in C#","nodes":[{"pos":[0,49],"content":"Learn about enums, discrete named constants in C#","nodes":[{"content":"Learn about enums, discrete named constants in C#","pos":[0,49]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[187,192],"content":"Enums","linkify":"Enums","nodes":[{"content":"Enums","pos":[0,5]}]},{"content":"An <bpt id=\"p1\">***</bpt>enum type<ept id=\"p1\">***</ept> is a distinct value type with a set of named constants.","pos":[194,268],"source":"An ***enum type*** is a distinct value type with a set of named constants."},{"content":"You define enums when you need to define a type that can have a set of discrete values.","pos":[269,356]},{"content":"They use one of the integral value types as their underlying storage.","pos":[357,426]},{"content":"They provide semantic meaning to the discrete values.","pos":[427,480]},{"pos":[482,606],"content":"The following example declares and uses an <ph id=\"ph1\">`enum`</ph> type named <ph id=\"ph2\">`Color`</ph> with three constant values, <ph id=\"ph3\">`Red`</ph>, <ph id=\"ph4\">`Green`</ph>, and <ph id=\"ph5\">`Blue`</ph>.","source":"The following example declares and uses an `enum` type named `Color` with three constant values, `Red`, `Green`, and `Blue`."},{"content":"Each <ph id=\"ph1\">`enum`</ph> type has a corresponding integral type called the <bpt id=\"p1\">***</bpt>underlying type<ept id=\"p1\">***</ept> of the <ph id=\"ph2\">`enum`</ph> type.","pos":[700,803],"source":"Each `enum` type has a corresponding integral type called the ***underlying type*** of the `enum` type."},{"content":"An <ph id=\"ph1\">`enum`</ph> type that does not explicitly declare an underlying type has an underlying type of <ph id=\"ph2\">`int`</ph>.","pos":[804,903],"source":" An `enum` type that does not explicitly declare an underlying type has an underlying type of `int`."},{"content":"An <ph id=\"ph1\">`enum`</ph> type’s storage format and range of possible values are determined by its underlying type.","pos":[904,1003],"source":" An `enum` type’s storage format and range of possible values are determined by its underlying type."},{"content":"The set of values that an <ph id=\"ph1\">`enum`</ph> type can take on is not limited by its <ph id=\"ph2\">`enum`</ph> members.","pos":[1004,1091],"source":" The set of values that an `enum` type can take on is not limited by its `enum` members."},{"content":"In particular, any value of the underlying type of an <ph id=\"ph1\">`enum`</ph> can be cast to the <ph id=\"ph2\">`enum`</ph> type and is a distinct valid value of that <ph id=\"ph3\">`enum`</ph> type.","pos":[1092,1234],"source":" In particular, any value of the underlying type of an `enum` can be cast to the `enum` type and is a distinct valid value of that `enum` type."},{"pos":[1236,1335],"content":"The following example declares an <ph id=\"ph1\">`enum`</ph> type named <ph id=\"ph2\">`Alignment`</ph> with an underlying type of <ph id=\"ph3\">`sbyte`</ph>.","source":"The following example declares an `enum` type named `Alignment` with an underlying type of `sbyte`."},{"content":"As shown by the previous example, an <ph id=\"ph1\">`enum`</ph> member declaration can include a constant expression that specifies the value of the member.","pos":[1430,1566],"source":"As shown by the previous example, an `enum` member declaration can include a constant expression that specifies the value of the member."},{"content":"The constant value for each <ph id=\"ph1\">`enum`</ph> member must be in the range of the underlying type of the <ph id=\"ph2\">`enum`</ph>.","pos":[1567,1667],"source":" The constant value for each `enum` member must be in the range of the underlying type of the `enum`."},{"content":"When an <ph id=\"ph1\">`enum`</ph> member declaration does not explicitly specify a value, the member is given the value zero (if it is the first member in the <ph id=\"ph2\">`enum`</ph> type) or the value of the textually preceding <ph id=\"ph3\">`enum`</ph> member plus one.","pos":[1668,1884],"source":" When an `enum` member declaration does not explicitly specify a value, the member is given the value zero (if it is the first member in the `enum` type) or the value of the textually preceding `enum` member plus one."},{"content":"<ph id=\"ph1\">`Enum`</ph> values can be converted to integral values and vice versa using type casts.","pos":[1886,1968],"source":"`Enum` values can be converted to integral values and vice versa using type casts."},{"content":"For example:","pos":[1969,1981]},{"content":"The default value of any <ph id=\"ph1\">`enum`</ph> type is the integral value zero converted to the <ph id=\"ph2\">`enum`</ph> type.","pos":[2076,2169],"source":"The default value of any `enum` type is the integral value zero converted to the `enum` type."},{"content":"In cases where variables are automatically initialized to a default value, this is the value given to variables of <ph id=\"ph1\">`enum`</ph> types.","pos":[2170,2298],"source":" In cases where variables are automatically initialized to a default value, this is the value given to variables of `enum` types."},{"content":"In order for the default value of an <ph id=\"ph1\">`enum`</ph> type to be easily available, the literal <ph id=\"ph2\">`0`</ph> implicitly converts to any <ph id=\"ph3\">`enum`</ph> type.","pos":[2299,2427],"source":" In order for the default value of an `enum` type to be easily available, the literal `0` implicitly converts to any `enum` type."},{"content":"Thus, the following is permitted.","pos":[2428,2461]},{"pos":[2555,2633],"content":"[!div class=\"step-by-step\"]\n[Previous](interfaces.md)\n[Next](delegates.md)","leadings":["","> ","> "],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Previous<ept id=\"p1\">](interfaces.md)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">[</bpt>Next<ept id=\"p2\">](delegates.md)</ept>","pos":[28,74],"source":"[Previous](interfaces.md)\n[Next](delegates.md)"}]}]}