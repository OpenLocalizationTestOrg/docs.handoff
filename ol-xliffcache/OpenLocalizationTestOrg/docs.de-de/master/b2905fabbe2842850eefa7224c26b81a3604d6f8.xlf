<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2905fabbe2842850eefa7224c26b81a3604d6f8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-services\introduction-to-windows-service-applications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfc5e8c73435efebaf7e0361aeffdf254cdb7b63</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d754e36b78509c92cdeded0a6adbaf53dd4e254</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Introduction to Windows Service Applications | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introduction to Windows Service Applications</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Windows services, formerly known as NT services, enable you to create long-running executable applications that run in their own Windows sessions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These services can be automatically started when the computer boots, can be paused and restarted, and do not show any user interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These features make services ideal for use on a server or whenever you need long-running functionality that does not interfere with other users who are working on the same computer.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can also run services in the security context of a specific user account that is different from the logged-on user or the default computer account.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about services and Windows sessions, see the Windows SDK documentation in the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can easily create services by creating an application that is installed as a service.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, suppose you want to monitor performance counter data and react to threshold values.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You could write a Windows Service application that listens to the performance counter data, deploy the application, and begin collecting and analyzing data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You create your service as a Microsoft Visual Studio project, defining code within it that controls what commands can be sent to the service and what actions should be taken when those commands are received.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Commands that can be sent to a service include starting, pausing, resuming, and stopping the service; you can also execute custom commands.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>After you create and build the application, you can install it by running the command-line utility InstallUtil.exe and passing the path to the service's executable file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can then use the <bpt id="p1">**</bpt>Services Control Manager<ept id="p1">**</ept> to start, stop, pause, resume, and configure your service.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also accomplish many of these same tasks in the <bpt id="p1">**</bpt>Services<ept id="p1">**</ept> node in <bpt id="p2">**</bpt>Server Explorer<ept id="p2">**</ept> or by using the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Service Applications vs. Other Visual Studio Applications</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Service applications function differently from many other project types in several ways:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The compiled executable file that a service application project creates must be installed on the server before the project can function in a meaningful way.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You cannot debug or run a service application by pressing F5 or F11; you cannot immediately run a service or step into its code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Instead, you must install and start your service, and then attach a debugger to the service's process.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Debug Windows Service Applications<ept id="p1">](../../../docs/framework/windows-services/how-to-debug-windows-service-applications.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Unlike some types of projects, you must create installation components for service applications.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The installation components install and register the service on the server and create an entry for your service with the Windows <bpt id="p1">**</bpt>Services Control Manager<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add Installers to Your Service Application<ept id="p1">](../../../docs/framework/windows-services/how-to-add-installers-to-your-service-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main`</ph> method for your service application must issue the Run command for the services your project contains.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Run`</ph> method loads the services into the <bpt id="p1">**</bpt>Services Control Manager<ept id="p1">**</ept> on the appropriate server.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">**</bpt>Windows Services<ept id="p1">**</ept> project template, this method is written for you automatically.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note that loading a service is not the same thing as starting the service.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See "Service Lifetime" below for more information.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Windows Service applications run in a different window station than the interactive station of the logged-on user.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A window station is a secure object that contains a Clipboard, a set of global atoms, and a group of desktop objects.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Because the station of the Windows service is not an interactive station, dialog boxes raised from within a Windows service application will not be seen and may cause your program to stop responding.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Similarly, error messages should be logged in the Windows event log rather than raised in the user interface.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Windows service classes supported by the .NET Framework do not support interaction with interactive stations, that is, the logged-on user.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The .NET Framework also does not include classes that represent stations and desktops.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If your Windows service must interact with other stations, you will need to access the unmanaged Windows API.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see the Windows SDK documentation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The interaction of the Windows service with the user or other stations must be carefully designed to include scenarios such as there being no logged on user, or the user having an unexpected set of desktop objects.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In some cases, it may be more appropriate to write a Windows application that runs under the control of the user.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Windows service applications run in their own security context and are started before the user logs into the Windows computer on which they are installed.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You should plan carefully what user account to run the service within; a service running under the system account has more permissions and privileges than a user account.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Service Lifetime</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A service goes through several internal states in its lifetime.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>First, the service is installed onto the system on which it will run.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This process executes the installers for the service project and loads the service into the <bpt id="p1">**</bpt>Services Control Manager<ept id="p1">**</ept> for that computer.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Services Control Manager<ept id="p1">**</ept> is the central utility provided by Windows to administer services.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>After the service has been loaded, it must be started.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Starting the service allows it to begin functioning.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can start a service from the <bpt id="p1">**</bpt>Services Control Manager<ept id="p1">**</ept>, from <bpt id="p2">**</bpt>Server Explorer<ept id="p2">**</ept>, or from code by calling the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.Start%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.Start%2A&gt;</ph> method passes processing to the application's <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method and processes any code you have defined there.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A running service can exist in this state indefinitely until it is either stopped or paused or until the computer shuts down.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A service can exist in one of three basic states: <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceControllerStatus&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceControllerStatus&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceControllerStatus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The service can also report the state of a pending command: <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceControllerStatus&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceControllerStatus&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceControllerStatus&gt;</ph>, or <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceControllerStatus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These statuses indicate that a command has been issued, such as a command to pause a running service, but has not been carried out yet.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can query the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.Status%2A&gt;</ph> to determine what state a service is in, or use the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceController.WaitForStatus%2A&gt;</ph> to carry out an action when any of these states occurs.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can pause, stop, or resume a service from the <bpt id="p1">**</bpt>Services Control Manager<ept id="p1">**</ept>, from <bpt id="p2">**</bpt>Server Explorer<ept id="p2">**</ept>, or by calling methods in code.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Each of these actions can call an associated procedure in the service (<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>), in which you can define additional processing to be performed when the service changes state.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Types of Services</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>There are two types of services you can create in Visual Studio using the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Services that are the only service in a process are assigned the type <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Services that share a process with another service are assigned the type <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can retrieve the service type by querying the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.ServiceType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You might occasionally see other service types if you query existing services that were not created in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information on these, see the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Services and the ServiceController Component</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component is used to connect to an installed service and manipulate its state; using a <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component, you can start and stop a service, pause and continue its functioning, and send custom commands to a service.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, you do not need to use a <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component when you create a service application.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In fact, in most cases your <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component should exist in a separate application from the Windows service application that defines your service.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Services must be created in a <bpt id="p1">**</bpt>Windows Service<ept id="p1">**</ept> application project or another .NET Framework–enabled project that creates an .exe file when built and inherits from the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Projects containing Windows services must have installation components for the project and its services.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This can be easily accomplished from the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add Installers to Your Service Application<ept id="p1">](../../../docs/framework/windows-services/how-to-add-installers-to-your-service-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Service Applications<ept id="p1">](../../../docs/framework/windows-services/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Service Application Programming Architecture<ept id="p1">](../../../docs/framework/windows-services/service-application-programming-architecture.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create Windows Services<ept id="p1">](../../../docs/framework/windows-services/how-to-create-windows-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Install and Uninstall Services<ept id="p1">](../../../docs/framework/windows-services/how-to-install-and-uninstall-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Start Services<ept id="p1">](../../../docs/framework/windows-services/how-to-start-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Debug Windows Service Applications<ept id="p1">](../../../docs/framework/windows-services/how-to-debug-windows-service-applications.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Creating a Windows Service Application in the Component Designer<ept id="p1">](../../../docs/framework/windows-services/walkthrough-creating-a-windows-service-application-in-the-component-designer.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Add Installers to Your Service Application<ept id="p1">](../../../docs/framework/windows-services/how-to-add-installers-to-your-service-application.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>