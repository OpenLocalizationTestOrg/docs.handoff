{"content":"---\ntitle: \"Pointer types - C# Programming Guide\"\nms.custom: seodec18\nms.date: 04/20/2018\nhelpviewer_keywords: \n  - \"unsafe code [C#], pointers\"\n  - \"pointers [C#]\"\n---\n# Pointer types (C# Programming Guide)\n\nIn an unsafe context, a type may be a pointer type, a value type, or a reference type. A pointer type declaration takes one of the following forms:\n\n``` csharp\ntype* identifier;\nvoid* identifier; //allowed but not recommended\n```\n\nThe type specified before the `*` in a pointer type is called the **referent type**. Any of the following types may be a referent type:\n\n- Any integral type: [sbyte](../../language-reference/keywords/sbyte.md), [byte](../../language-reference/keywords/byte.md), [short](../../language-reference/keywords/short.md), [ushort](../../language-reference/keywords/ushort.md), [int](../../language-reference/keywords/int.md), [uint](../../language-reference/keywords/uint.md), [long](../../language-reference/keywords/long.md), [ulong](../../language-reference/keywords/ulong.md).\n- Any floating-point type: [float](../../language-reference/keywords/float.md), [double](../../language-reference/keywords/double.md).\n- [char](../../language-reference/keywords/char.md).\n- [bool](../../language-reference/keywords/bool.md).\n- [decimal](../../language-reference/keywords/decimal.md).\n- Any [enum](../../language-reference/keywords/enum.md) type.\n- Any pointer type. This allows expressions such as `void**`.\n- Any user-defined struct type that contains fields of unmanaged types only.\n\nPointer types do not inherit from [object](../../language-reference/keywords/object.md) and no conversions exist between pointer types and `object`. Also, boxing and unboxing do not support pointers. However, you can convert between different pointer types and between pointer types and integral types.\n\nWhen you declare multiple pointers in the same declaration, the asterisk (*) is written together with the underlying type only; it is not used as a prefix to each pointer name. For example:\n\n```csharp\nint* p1, p2, p3;   // Ok\nint *p1, *p2, *p3;   // Invalid in C#\n```\n\nA pointer cannot point to a reference or to a [struct](../../language-reference/keywords/struct.md) that contains references, because an object reference can be garbage collected even if a pointer is pointing to it. The garbage collector does not keep track of whether an object is being pointed to by any pointer types.\n\nThe value of the pointer variable of type `myType*` is the address of a variable of type `myType`. The following are examples of pointer type declarations:\n\n|Example|Description|\n|-------------|-----------------|\n|`int* p`|`p` is a pointer to an integer.|\n|`int** p`|`p` is a pointer to a pointer to an integer.|\n|`int*[] p`|`p` is a single-dimensional array of pointers to integers.|\n|`char* p`|`p` is a pointer to a char.|\n|`void* p`|`p` is a pointer to an unknown type.|\n\nThe pointer indirection operator * can be used to access the contents at the location pointed to by the pointer variable. For example, consider the following declaration:\n\n```csharp\nint* myVariable;\n```\n\nThe expression `*myVariable` denotes the `int` variable found at the address contained in `myVariable`.\n\nThere are several examples of pointers in the topics [fixed Statement](../../language-reference/keywords/fixed-statement.md) and [Pointer Conversions](../../programming-guide/unsafe-code-pointers/pointer-conversions.md). The following example uses the `unsafe` keyword and the `fixed` statement, and shows how to increment an interior pointer.  You can paste this code into the Main function of a console application to run it. These examples must be compiled with the [-unsafe](../../language-reference/compiler-options/unsafe-compiler-option.md) compiler option set.\n\n[!code-csharp[Using pointer types](../../../../samples/snippets/csharp/keywords/FixedKeywordExamples.cs#5)]\n\nYou cannot apply the indirection operator to a pointer of type `void*`. However, you can use a cast to convert a void pointer to any other pointer type, and vice versa.\n\nA pointer can be `null`. Applying the indirection operator to a null pointer causes an implementation-defined behavior.\n\nPassing pointers between methods can cause undefined behavior. Consider a method that returns a pointer to a local variable through an `in`, `out`, or `ref` parameter or as the function result. If the pointer was set in a fixed block, the variable to which it points may no longer be fixed.\n\nThe following table lists the operators and statements that can operate on pointers in an unsafe context:\n\n|Operator/Statement|Use|\n|-------------------------|---------|\n|*|Performs pointer indirection.|\n|->|Accesses a member of a struct through a pointer.|\n|[]|Indexes a pointer.|\n|`&`|Obtains the address of a variable.|\n|++ and --|Increments and decrements pointers.|\n|+ and -|Performs pointer arithmetic.|\n|==, !=, \\<, >, \\<=, and >=|Compares pointers.|\n|`stackalloc`|Allocates memory on the stack.|\n|`fixed` statement|Temporarily fixes a variable so that its address may be found.|\n\n## C# Language Specification\n\n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Programming Guide](../index.md)\n- [Unsafe Code and Pointers](index.md)\n- [Pointer Conversions](pointer-conversions.md)\n- [Pointer Expressions](pointer-expressions.md)\n- [Types](../../language-reference/keywords/types.md)\n- [unsafe](../../language-reference/keywords/unsafe.md)\n- [fixed Statement](../../language-reference/keywords/fixed-statement.md)\n- [stackalloc](../../language-reference/keywords/stackalloc.md)\n- [Boxing and Unboxing](../types/boxing-and-unboxing.md)\n","nodes":[{"pos":[4,164],"embed":true,"restype":"x-metadata","content":"title: \"Pointer types - C# Programming Guide\"\nms.custom: seodec18\nms.date: 04/20/2018\nhelpviewer_keywords: \n  - \"unsafe code [C#], pointers\"\n  - \"pointers [C#]\"","nodes":[{"content":"Pointer types - C# Programming Guide","nodes":[{"pos":[0,36],"content":"Pointer types - C# Programming Guide","nodes":[{"content":"Pointer types - C# Programming Guide","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[171,207],"content":"Pointer types (C# Programming Guide)","linkify":"Pointer types (C# Programming Guide)","nodes":[{"content":"Pointer types (C# Programming Guide)","pos":[0,36]}]},{"content":"In an unsafe context, a type may be a pointer type, a value type, or a reference type.","pos":[209,295]},{"content":"A pointer type declaration takes one of the following forms:","pos":[296,356]},{"content":"The type specified before the <ph id=\"ph1\">`*`</ph> in a pointer type is called the <bpt id=\"p1\">**</bpt>referent type<ept id=\"p1\">**</ept>.","pos":[440,524],"source":"The type specified before the `*` in a pointer type is called the **referent type**."},{"content":"Any of the following types may be a referent type:","pos":[525,575]},{"pos":[579,1013],"content":"Any integral type: <bpt id=\"p1\">[</bpt>sbyte<ept id=\"p1\">](../../language-reference/keywords/sbyte.md)</ept>, <bpt id=\"p2\">[</bpt>byte<ept id=\"p2\">](../../language-reference/keywords/byte.md)</ept>, <bpt id=\"p3\">[</bpt>short<ept id=\"p3\">](../../language-reference/keywords/short.md)</ept>, <bpt id=\"p4\">[</bpt>ushort<ept id=\"p4\">](../../language-reference/keywords/ushort.md)</ept>, <bpt id=\"p5\">[</bpt>int<ept id=\"p5\">](../../language-reference/keywords/int.md)</ept>, <bpt id=\"p6\">[</bpt>uint<ept id=\"p6\">](../../language-reference/keywords/uint.md)</ept>, <bpt id=\"p7\">[</bpt>long<ept id=\"p7\">](../../language-reference/keywords/long.md)</ept>, <bpt id=\"p8\">[</bpt>ulong<ept id=\"p8\">](../../language-reference/keywords/ulong.md)</ept>.","source":"Any integral type: [sbyte](../../language-reference/keywords/sbyte.md), [byte](../../language-reference/keywords/byte.md), [short](../../language-reference/keywords/short.md), [ushort](../../language-reference/keywords/ushort.md), [int](../../language-reference/keywords/int.md), [uint](../../language-reference/keywords/uint.md), [long](../../language-reference/keywords/long.md), [ulong](../../language-reference/keywords/ulong.md)."},{"pos":[1016,1148],"content":"Any floating-point type: <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../language-reference/keywords/float.md)</ept>, <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../language-reference/keywords/double.md)</ept>.","source":"Any floating-point type: [float](../../language-reference/keywords/float.md), [double](../../language-reference/keywords/double.md)."},{"pos":[1151,1201],"content":"<bpt id=\"p1\">[</bpt>char<ept id=\"p1\">](../../language-reference/keywords/char.md)</ept>.","source":"[char](../../language-reference/keywords/char.md)."},{"pos":[1204,1254],"content":"<bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../../language-reference/keywords/bool.md)</ept>.","source":"[bool](../../language-reference/keywords/bool.md)."},{"pos":[1257,1313],"content":"<bpt id=\"p1\">[</bpt>decimal<ept id=\"p1\">](../../language-reference/keywords/decimal.md)</ept>.","source":"[decimal](../../language-reference/keywords/decimal.md)."},{"pos":[1316,1375],"content":"Any <bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](../../language-reference/keywords/enum.md)</ept> type.","source":"Any [enum](../../language-reference/keywords/enum.md) type."},{"content":"Any pointer type.","pos":[1378,1395]},{"content":"This allows expressions such as <ph id=\"ph1\">`void**`</ph>.","pos":[1396,1437],"source":" This allows expressions such as `void**`."},{"content":"Any user-defined struct type that contains fields of unmanaged types only.","pos":[1440,1514]},{"content":"Pointer types do not inherit from <bpt id=\"p1\">[</bpt>object<ept id=\"p1\">](../../language-reference/keywords/object.md)</ept> and no conversions exist between pointer types and <ph id=\"ph1\">`object`</ph>.","pos":[1516,1664],"source":"Pointer types do not inherit from [object](../../language-reference/keywords/object.md) and no conversions exist between pointer types and `object`."},{"content":"Also, boxing and unboxing do not support pointers.","pos":[1665,1715]},{"content":"However, you can convert between different pointer types and between pointer types and integral types.","pos":[1716,1818]},{"content":"When you declare multiple pointers in the same declaration, the asterisk (*) is written together with the underlying type only; it is not used as a prefix to each pointer name.","pos":[1820,1996]},{"content":"For example:","pos":[1997,2009]},{"content":"A pointer cannot point to a reference or to a <bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](../../language-reference/keywords/struct.md)</ept> that contains references, because an object reference can be garbage collected even if a pointer is pointing to it.","pos":[2089,2304],"source":"A pointer cannot point to a reference or to a [struct](../../language-reference/keywords/struct.md) that contains references, because an object reference can be garbage collected even if a pointer is pointing to it."},{"content":"The garbage collector does not keep track of whether an object is being pointed to by any pointer types.","pos":[2305,2409]},{"content":"The value of the pointer variable of type <ph id=\"ph1\">`myType*`</ph> is the address of a variable of type <ph id=\"ph2\">`myType`</ph>.","pos":[2411,2509],"source":"The value of the pointer variable of type `myType*` is the address of a variable of type `myType`."},{"content":"The following are examples of pointer type declarations:","pos":[2510,2566]},{"content":"Example","pos":[2569,2576]},{"content":"Description","pos":[2577,2588]},{"pos":[2634,2665],"content":"<ph id=\"ph1\">`p`</ph> is a pointer to an integer.","source":"`p` is a pointer to an integer."},{"pos":[2678,2722],"content":"<ph id=\"ph1\">`p`</ph> is a pointer to a pointer to an integer.","source":"`p` is a pointer to a pointer to an integer."},{"pos":[2736,2794],"content":"<ph id=\"ph1\">`p`</ph> is a single-dimensional array of pointers to integers.","source":"`p` is a single-dimensional array of pointers to integers."},{"pos":[2807,2834],"content":"<ph id=\"ph1\">`p`</ph> is a pointer to a char.","source":"`p` is a pointer to a char."},{"pos":[2847,2883],"content":"<ph id=\"ph1\">`p`</ph> is a pointer to an unknown type.","source":"`p` is a pointer to an unknown type."},{"content":"The pointer indirection operator * can be used to access the contents at the location pointed to by the pointer variable.","pos":[2886,3007]},{"content":"For example, consider the following declaration:","pos":[3008,3056]},{"pos":[3090,3193],"content":"The expression <ph id=\"ph1\">`*myVariable`</ph> denotes the <ph id=\"ph2\">`int`</ph> variable found at the address contained in <ph id=\"ph3\">`myVariable`</ph>.","source":"The expression `*myVariable` denotes the `int` variable found at the address contained in `myVariable`."},{"content":"There are several examples of pointers in the topics <bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../language-reference/keywords/fixed-statement.md)</ept> and <bpt id=\"p2\">[</bpt>Pointer Conversions<ept id=\"p2\">](../../programming-guide/unsafe-code-pointers/pointer-conversions.md)</ept>.","pos":[3195,3415],"source":"There are several examples of pointers in the topics [fixed Statement](../../language-reference/keywords/fixed-statement.md) and [Pointer Conversions](../../programming-guide/unsafe-code-pointers/pointer-conversions.md)."},{"content":"The following example uses the <ph id=\"ph1\">`unsafe`</ph> keyword and the <ph id=\"ph2\">`fixed`</ph> statement, and shows how to increment an interior pointer.","pos":[3416,3538],"source":" The following example uses the `unsafe` keyword and the `fixed` statement, and shows how to increment an interior pointer."},{"content":"You can paste this code into the Main function of a console application to run it.","pos":[3540,3622]},{"content":"These examples must be compiled with the <bpt id=\"p1\">[</bpt>-unsafe<ept id=\"p1\">](../../language-reference/compiler-options/unsafe-compiler-option.md)</ept> compiler option set.","pos":[3623,3763],"source":" These examples must be compiled with the [-unsafe](../../language-reference/compiler-options/unsafe-compiler-option.md) compiler option set."},{"content":"You cannot apply the indirection operator to a pointer of type <ph id=\"ph1\">`void*`</ph>.","pos":[3874,3945],"source":"You cannot apply the indirection operator to a pointer of type `void*`."},{"content":"However, you can use a cast to convert a void pointer to any other pointer type, and vice versa.","pos":[3946,4042]},{"content":"A pointer can be <ph id=\"ph1\">`null`</ph>.","pos":[4044,4068],"source":"A pointer can be `null`."},{"content":"Applying the indirection operator to a null pointer causes an implementation-defined behavior.","pos":[4069,4163]},{"content":"Passing pointers between methods can cause undefined behavior.","pos":[4165,4227]},{"content":"Consider a method that returns a pointer to a local variable through an <ph id=\"ph1\">`in`</ph>, <ph id=\"ph2\">`out`</ph>, or <ph id=\"ph3\">`ref`</ph> parameter or as the function result.","pos":[4228,4358],"source":" Consider a method that returns a pointer to a local variable through an `in`, `out`, or `ref` parameter or as the function result."},{"content":"If the pointer was set in a fixed block, the variable to which it points may no longer be fixed.","pos":[4359,4455]},{"content":"The following table lists the operators and statements that can operate on pointers in an unsafe context:","pos":[4457,4562]},{"content":"Operator/Statement","pos":[4565,4583]},{"content":"Use","pos":[4584,4587]},{"content":"Performs pointer indirection.","pos":[4630,4659]},{"content":"Accesses a member of a struct through a pointer.","pos":[4665,4713]},{"content":"[]","pos":[4716,4718]},{"content":"Indexes a pointer.","pos":[4719,4737]},{"content":"Obtains the address of a variable.","pos":[4744,4778]},{"content":"++ and --","pos":[4781,4790]},{"content":"Increments and decrements pointers.","pos":[4791,4826]},{"content":"+ and -","pos":[4829,4836]},{"content":"Performs pointer arithmetic.","pos":[4837,4865]},{"content":"==, !=, <ph id=\"ph1\">\\&lt;</ph>, &gt;, <ph id=\"ph2\">\\&lt;</ph>=, and &gt;=","pos":[4868,4894],"source":"==, !=, \\<, >, \\<=, and >="},{"content":"Compares pointers.","pos":[4895,4913]},{"content":"Allocates memory on the stack.","pos":[4929,4959]},{"pos":[4962,4979],"content":"<ph id=\"ph1\">`fixed`</ph> statement","source":"`fixed` statement"},{"content":"Temporarily fixes a variable so that its address may be found.","pos":[4980,5042]},{"pos":[5048,5073],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[5140,5148],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5152,5187],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../index.md)</ept>","source":"[C# Programming Guide](../index.md)"},{"pos":[5190,5226],"content":"<bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](index.md)</ept>","source":"[Unsafe Code and Pointers](index.md)"},{"pos":[5229,5274],"content":"<bpt id=\"p1\">[</bpt>Pointer Conversions<ept id=\"p1\">](pointer-conversions.md)</ept>","source":"[Pointer Conversions](pointer-conversions.md)"},{"pos":[5277,5322],"content":"<bpt id=\"p1\">[</bpt>Pointer Expressions<ept id=\"p1\">](pointer-expressions.md)</ept>","source":"[Pointer Expressions](pointer-expressions.md)"},{"pos":[5325,5376],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../language-reference/keywords/types.md)</ept>","source":"[Types](../../language-reference/keywords/types.md)"},{"pos":[5379,5432],"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../language-reference/keywords/unsafe.md)</ept>","source":"[unsafe](../../language-reference/keywords/unsafe.md)"},{"pos":[5435,5506],"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../language-reference/keywords/fixed-statement.md)</ept>","source":"[fixed Statement](../../language-reference/keywords/fixed-statement.md)"},{"pos":[5509,5570],"content":"<bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../language-reference/keywords/stackalloc.md)</ept>","source":"[stackalloc](../../language-reference/keywords/stackalloc.md)"},{"pos":[5573,5627],"content":"<bpt id=\"p1\">[</bpt>Boxing and Unboxing<ept id=\"p1\">](../types/boxing-and-unboxing.md)</ept>","source":"[Boxing and Unboxing](../types/boxing-and-unboxing.md)"}]}