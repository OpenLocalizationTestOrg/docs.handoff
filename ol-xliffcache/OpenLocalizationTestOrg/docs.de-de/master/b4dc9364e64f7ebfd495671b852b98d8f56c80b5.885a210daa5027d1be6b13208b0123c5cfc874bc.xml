{"content":"---\ntitle: \"How to: Declare and Use Read Write Properties - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"get accessor [C#], declaring properties\"\n  - \"set accessor [C#]\"\n  - \"properties [C#], declaring\"\n  - \"read/write properties [C#]\"\n  - \"accessors [C#], declaring properties with\"\nms.assetid: a4962fef-af7e-4c4b-a929-4ae4d646ab8a\n---\n# How to: Declare and Use Read Write Properties (C# Programming Guide)\nProperties provide the convenience of public data members without the risks that come with unprotected, uncontrolled, and unverified access to an object's data. This is accomplished through *accessors*: special methods that assign and retrieve values from the underlying data member. The [set](../../../csharp/language-reference/keywords/set.md) accessor enables data members to be assigned, and the [get](../../../csharp/language-reference/keywords/get.md) accessor retrieves data member values.  \n  \n This sample shows a `Person` class that has two properties: `Name` (string) and `Age` (int). Both properties provide `get` and `set` accessors, so they are considered read/write properties.  \n  \n## Example  \n [!code-csharp[csProgGuideObjects#33](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#33)]  \n  \n## Robust Programming  \n In the previous example, the `Name` and `Age` properties are [public](../../../csharp/language-reference/keywords/public.md) and include both a `get` and a `set` accessor. This allows any object to read and write these properties. It is sometimes desirable, however, to exclude one of the accessors. Omitting the `set` accessor, for example, makes the property read-only:  \n  \n [!code-csharp[csProgGuideObjects#87](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#87)]  \n  \n Alternatively, you can expose one accessor publicly but make the other private or protected. For more information, see [Asymmetric Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md).  \n  \n Once the properties are declared, they can be used as if they were fields of the class. This allows for a very natural syntax when both getting and setting the value of a property, as in the following statements:  \n  \n [!code-csharp[csProgGuideObjects#35](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#35)]  \n  \n Note that in a property `set` method a special `value` variable is available. This variable contains the value that the user specified, for example:  \n  \n [!code-csharp[csProgGuideObjects#36](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#36)]  \n  \n Notice the clean syntax for incrementing the `Age` property on a `Person` object:  \n  \n [!code-csharp[csProgGuideObjects#37](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#37)]  \n  \n If separate `set` and `get` methods were used to model properties, the equivalent code might look like this:  \n  \n```csharp  \nperson.SetAge(person.GetAge() + 1);   \n```  \n  \n The `ToString` method is overridden in this example:  \n  \n [!code-csharp[csProgGuideObjects#38](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#38)]  \n  \n Notice that `ToString` is not explicitly used in the program. It is invoked by default by the `WriteLine` calls.  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)\n- [Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)\n","nodes":[{"pos":[4,376],"embed":true,"restype":"x-metadata","content":"title: \"How to: Declare and Use Read Write Properties - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"get accessor [C#], declaring properties\"\n  - \"set accessor [C#]\"\n  - \"properties [C#], declaring\"\n  - \"read/write properties [C#]\"\n  - \"accessors [C#], declaring properties with\"\nms.assetid: a4962fef-af7e-4c4b-a929-4ae4d646ab8a","nodes":[{"content":"How to: Declare and Use Read Write Properties - C# Programming Guide","nodes":[{"pos":[0,68],"content":"How to: Declare and Use Read Write Properties - C# Programming Guide","nodes":[{"content":"How to: Declare and Use Read Write Properties - C# Programming Guide","pos":[0,68]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[383,451],"content":"How to: Declare and Use Read Write Properties (C# Programming Guide)","linkify":"How to: Declare and Use Read Write Properties (C# Programming Guide)","nodes":[{"content":"How to: Declare and Use Read Write Properties (C# Programming Guide)","pos":[0,68]}]},{"content":"Properties provide the convenience of public data members without the risks that come with unprotected, uncontrolled, and unverified access to an object's data.","pos":[452,612]},{"content":"This is accomplished through <bpt id=\"p1\">*</bpt>accessors<ept id=\"p1\">*</ept>: special methods that assign and retrieve values from the underlying data member.","pos":[613,735],"source":" This is accomplished through *accessors*: special methods that assign and retrieve values from the underlying data member."},{"content":"The <bpt id=\"p1\">[</bpt>set<ept id=\"p1\">](../../../csharp/language-reference/keywords/set.md)</ept> accessor enables data members to be assigned, and the <bpt id=\"p2\">[</bpt>get<ept id=\"p2\">](../../../csharp/language-reference/keywords/get.md)</ept> accessor retrieves data member values.","pos":[736,948],"source":" The [set](../../../csharp/language-reference/keywords/set.md) accessor enables data members to be assigned, and the [get](../../../csharp/language-reference/keywords/get.md) accessor retrieves data member values."},{"content":"This sample shows a <ph id=\"ph1\">`Person`</ph> class that has two properties: <ph id=\"ph2\">`Name`</ph> (string) and <ph id=\"ph3\">`Age`</ph> (int).","pos":[955,1047],"source":"This sample shows a `Person` class that has two properties: `Name` (string) and `Age` (int)."},{"content":"Both properties provide <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors, so they are considered read/write properties.","pos":[1048,1144],"source":" Both properties provide `get` and `set` accessors, so they are considered read/write properties."},{"pos":[1153,1160],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1294,1312],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"In the previous example, the <ph id=\"ph1\">`Name`</ph> and <ph id=\"ph2\">`Age`</ph> properties are <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../../../csharp/language-reference/keywords/public.md)</ept> and include both a <ph id=\"ph3\">`get`</ph> and a <ph id=\"ph4\">`set`</ph> accessor.","pos":[1316,1487],"source":"In the previous example, the `Name` and `Age` properties are [public](../../../csharp/language-reference/keywords/public.md) and include both a `get` and a `set` accessor."},{"content":"This allows any object to read and write these properties.","pos":[1488,1546]},{"content":"It is sometimes desirable, however, to exclude one of the accessors.","pos":[1547,1615]},{"content":"Omitting the <ph id=\"ph1\">`set`</ph> accessor, for example, makes the property read-only:","pos":[1616,1687],"source":" Omitting the `set` accessor, for example, makes the property read-only:"},{"content":"Alternatively, you can expose one accessor publicly but make the other private or protected.","pos":[1822,1914]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Asymmetric Accessor Accessibility<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept>.","pos":[1915,2070],"source":" For more information, see [Asymmetric Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)."},{"content":"Once the properties are declared, they can be used as if they were fields of the class.","pos":[2077,2164]},{"content":"This allows for a very natural syntax when both getting and setting the value of a property, as in the following statements:","pos":[2165,2289]},{"content":"Note that in a property <ph id=\"ph1\">`set`</ph> method a special <ph id=\"ph2\">`value`</ph> variable is available.","pos":[2424,2501],"source":"Note that in a property `set` method a special `value` variable is available."},{"content":"This variable contains the value that the user specified, for example:","pos":[2502,2572]},{"pos":[2707,2788],"content":"Notice the clean syntax for incrementing the <ph id=\"ph1\">`Age`</ph> property on a <ph id=\"ph2\">`Person`</ph> object:","source":"Notice the clean syntax for incrementing the `Age` property on a `Person` object:"},{"pos":[2923,3031],"content":"If separate <ph id=\"ph1\">`set`</ph> and <ph id=\"ph2\">`get`</ph> methods were used to model properties, the equivalent code might look like this:","source":"If separate `set` and `get` methods were used to model properties, the equivalent code might look like this:"},{"pos":[3098,3150],"content":"The <ph id=\"ph1\">`ToString`</ph> method is overridden in this example:","source":"The `ToString` method is overridden in this example:"},{"content":"Notice that <ph id=\"ph1\">`ToString`</ph> is not explicitly used in the program.","pos":[3285,3346],"source":"Notice that `ToString` is not explicitly used in the program."},{"content":"It is invoked by default by the <ph id=\"ph1\">`WriteLine`</ph> calls.","pos":[3347,3397],"source":" It is invoked by default by the `WriteLine` calls."},{"pos":[3406,3414],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3418,3484],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[3487,3568],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"},{"pos":[3571,3656],"content":"<bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept>","source":"[Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)"}]}