{"content":"---\ntitle: \"How to: Hook Up a Command to a Control with No Command Support\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Control class [WPF], attaching a RoutedCommand\"\n  - \"classes [WPF], Control [WPF], attaching a RoutedCommand\"\n  - \"RoutedCommand class [WPF], attaching to a Control\"\n  - \"classes [WPF], RoutedCommand [WPF], attaching to a Control\"\nms.assetid: dad08f64-700b-46fb-ad3f-fbfee95f0dfe\n---\n# How to: Hook Up a Command to a Control with No Command Support\nThe following example shows how to hook up a <xref:System.Windows.Input.RoutedCommand> to a <xref:System.Windows.Controls.Control> which does not have built in support for the command.  For a complete sample which hooks up commands to multiple sources, see the [Create a Custom RoutedCommand Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Input%20and%20Commands/CustomRoutedCommand) sample.  \n  \n## Example  \n [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] provides a library of common commands which application programmers encounter regularly.  The classes which comprise the command library are: <xref:System.Windows.Input.ApplicationCommands>, <xref:System.Windows.Input.ComponentCommands>, <xref:System.Windows.Input.NavigationCommands>, <xref:System.Windows.Input.MediaCommands>, and <xref:System.Windows.Documents.EditingCommands>.  \n  \n The static <xref:System.Windows.Input.RoutedCommand> objects which make up these classes do not supply command logic.  The logic for the command is associated with the command with a <xref:System.Windows.Input.CommandBinding>.  Many controls in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] have built in support for some of the commands in the command library.  <xref:System.Windows.Controls.TextBox>, for example, supports many of the application edit commands such as <xref:System.Windows.Input.ApplicationCommands.Paste%2A>, <xref:System.Windows.Input.ApplicationCommands.Copy%2A>, <xref:System.Windows.Input.ApplicationCommands.Cut%2A>, <xref:System.Windows.Input.ApplicationCommands.Redo%2A>, and <xref:System.Windows.Input.ApplicationCommands.Undo%2A>.  The application developer does not have to do anything special to get these commands to work with these controls.  If the <xref:System.Windows.Controls.TextBox> is the command target when the command is executed, it will handle the command using the <xref:System.Windows.Input.CommandBinding> that is built into the control.  \n  \n The following shows how to use a <xref:System.Windows.Controls.Button> as the command source for the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  A <xref:System.Windows.Input.CommandBinding> is created that associates the specified <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> with the <xref:System.Windows.Input.RoutedCommand>.  \n  \n First, the command source is created.  A <xref:System.Windows.Controls.Button> is used as the command source.  \n  \n [!code-xaml[commandWithHandler#CommandHandlerCommandSource](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandsource)]  \n  \n [!code-csharp[CommandHandlerProcedural#CommandHandlerButtonCommandSource](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbuttoncommandsource)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerButtonCommandSource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbuttoncommandsource)]  \n  \n Next, the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> are created.  The <xref:System.Windows.Input.ExecutedRoutedEventHandler> simply opens a <xref:System.Windows.MessageBox> to signify that the command executed.  The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> sets the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> property to `true`.  Normally, the can execute handler would perform more robust checks to see if the command could execute on the current command target.  \n  \n [!code-csharp[commandWithHandler#CommandHandlerBothHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerbothhandlers)]\n [!code-vb[commandWithHandler#CommandHandlerBothHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerbothhandlers)]  \n  \n Finally, a <xref:System.Windows.Input.CommandBinding> is created on the root <xref:System.Windows.Window> of the application that associates the routed events handlers to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n## See also\n\n- [Commanding Overview](commanding-overview.md)\n- [Hook Up a Command to a Control with Command Support](how-to-hook-up-a-command-to-a-control-with-command-support.md)\n","nodes":[{"pos":[4,438],"embed":true,"restype":"x-metadata","content":"title: \"How to: Hook Up a Command to a Control with No Command Support\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Control class [WPF], attaching a RoutedCommand\"\n  - \"classes [WPF], Control [WPF], attaching a RoutedCommand\"\n  - \"RoutedCommand class [WPF], attaching to a Control\"\n  - \"classes [WPF], RoutedCommand [WPF], attaching to a Control\"\nms.assetid: dad08f64-700b-46fb-ad3f-fbfee95f0dfe","nodes":[{"content":"How to: Hook Up a Command to a Control with No Command Support","nodes":[{"pos":[0,62],"content":"How to: Hook Up a Command to a Control with No Command Support","nodes":[{"content":"How to: Hook Up a Command to a Control with No Command Support","pos":[0,62]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[445,507],"content":"How to: Hook Up a Command to a Control with No Command Support","linkify":"How to: Hook Up a Command to a Control with No Command Support","nodes":[{"content":"How to: Hook Up a Command to a Control with No Command Support","pos":[0,62]}]},{"content":"The following example shows how to hook up a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control&gt;</ph> which does not have built in support for the command.","pos":[508,692],"source":"The following example shows how to hook up a <xref:System.Windows.Input.RoutedCommand> to a <xref:System.Windows.Controls.Control> which does not have built in support for the command."},{"content":"For a complete sample which hooks up commands to multiple sources, see the <bpt id=\"p1\">[</bpt>Create a Custom RoutedCommand Sample<ept id=\"p1\">](https://github.com/Microsoft/WPF-Samples/tree/master/Input%20and%20Commands/CustomRoutedCommand)</ept> sample.","pos":[694,912],"source":"  For a complete sample which hooks up commands to multiple sources, see the [Create a Custom RoutedCommand Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Input%20and%20Commands/CustomRoutedCommand) sample."},{"pos":[921,928],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides a library of common commands which application programmers encounter regularly.","pos":[932,1100],"source":"[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] provides a library of common commands which application programmers encounter regularly."},{"content":"The classes which comprise the command library are: <ph id=\"ph1\">&lt;xref:System.Windows.Input.ApplicationCommands&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.ComponentCommands&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Input.NavigationCommands&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Input.MediaCommands&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Windows.Documents.EditingCommands&gt;</ph>.","pos":[1102,1393],"source":"  The classes which comprise the command library are: <xref:System.Windows.Input.ApplicationCommands>, <xref:System.Windows.Input.ComponentCommands>, <xref:System.Windows.Input.NavigationCommands>, <xref:System.Windows.Input.MediaCommands>, and <xref:System.Windows.Documents.EditingCommands>."},{"content":"The static <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> objects which make up these classes do not supply command logic.","pos":[1400,1517],"source":"The static <xref:System.Windows.Input.RoutedCommand> objects which make up these classes do not supply command logic."},{"content":"The logic for the command is associated with the command with a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.","pos":[1519,1626],"source":"  The logic for the command is associated with the command with a <xref:System.Windows.Input.CommandBinding>."},{"content":"Many controls in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> have built in support for some of the commands in the command library.","pos":[1628,1797],"source":"  Many controls in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] have built in support for some of the commands in the command library."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, for example, supports many of the application edit commands such as <ph id=\"ph2\">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Input.ApplicationCommands.Copy%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Input.ApplicationCommands.Cut%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.Input.ApplicationCommands.Redo%2A&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Windows.Input.ApplicationCommands.Undo%2A&gt;</ph>.","pos":[1799,2195],"source":"<xref:System.Windows.Controls.TextBox>, for example, supports many of the application edit commands such as <xref:System.Windows.Input.ApplicationCommands.Paste%2A>, <xref:System.Windows.Input.ApplicationCommands.Copy%2A>, <xref:System.Windows.Input.ApplicationCommands.Cut%2A>, <xref:System.Windows.Input.ApplicationCommands.Redo%2A>, and <xref:System.Windows.Input.ApplicationCommands.Undo%2A>."},{"content":"The application developer does not have to do anything special to get these commands to work with these controls.","pos":[2197,2310]},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is the command target when the command is executed, it will handle the command using the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> that is built into the control.","pos":[2312,2521],"source":"  If the <xref:System.Windows.Controls.TextBox> is the command target when the command is executed, it will handle the command using the <xref:System.Windows.Input.CommandBinding> that is built into the control."},{"content":"The following shows how to use a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> as the command source for the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> command.","pos":[2528,2693],"source":"The following shows how to use a <xref:System.Windows.Controls.Button> as the command source for the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is created that associates the specified <ph id=\"ph2\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> with the <ph id=\"ph4\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.","pos":[2695,2954],"source":"  A <xref:System.Windows.Input.CommandBinding> is created that associates the specified <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> with the <xref:System.Windows.Input.RoutedCommand>."},{"content":"First, the command source is created.","pos":[2961,2998]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> is used as the command source.","pos":[3000,3070],"source":"  A <xref:System.Windows.Controls.Button> is used as the command source."},{"content":"Next, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> are created.","pos":[3667,3809],"source":"Next, the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> are created."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> simply opens a <ph id=\"ph2\">&lt;xref:System.Windows.MessageBox&gt;</ph> to signify that the command executed.","pos":[3811,3955],"source":"  The <xref:System.Windows.Input.ExecutedRoutedEventHandler> simply opens a <xref:System.Windows.MessageBox> to signify that the command executed."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> sets the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> property to <ph id=\"ph3\">`true`</ph>.","pos":[3957,4114],"source":"  The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> sets the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> property to `true`."},{"content":"Normally, the can execute handler would perform more robust checks to see if the command could execute on the current command target.","pos":[4116,4249]},{"pos":[4617,4856],"content":"Finally, a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is created on the root <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph> of the application that associates the routed events handlers to the <ph id=\"ph3\">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> command.","source":"Finally, a <xref:System.Windows.Input.CommandBinding> is created on the root <xref:System.Windows.Window> of the application that associates the routed events handlers to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command."},{"pos":[5425,5433],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5437,5482],"content":"<bpt id=\"p1\">[</bpt>Commanding Overview<ept id=\"p1\">](commanding-overview.md)</ept>","source":"[Commanding Overview](commanding-overview.md)"},{"pos":[5485,5601],"content":"<bpt id=\"p1\">[</bpt>Hook Up a Command to a Control with Command Support<ept id=\"p1\">](how-to-hook-up-a-command-to-a-control-with-command-support.md)</ept>","source":"[Hook Up a Command to a Control with Command Support](how-to-hook-up-a-command-to-a-control-with-command-support.md)"}]}