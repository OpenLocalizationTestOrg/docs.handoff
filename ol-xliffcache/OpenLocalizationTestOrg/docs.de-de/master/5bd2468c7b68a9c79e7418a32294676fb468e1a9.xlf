<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="spinlock.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bd2468c7b68a9c79e7418a32294676fb468e1a9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\spinlock.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5f32a9e567876aa500c0d76a5eabf8a660eae37</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4bc94ce5cebdc727521e6150a938b1338e0d7505</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>SpinLock</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SpinLock</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> structure is a low-level, mutual-exclusion synchronization primitive that spins while it waits to acquire a lock.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>On multicore computers, when wait times are expected to be short and when contention is minimal, <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> can perform better than other kinds of locks.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, we recommend that you use <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> only when you determine by profiling that the <ph id="ph2">&lt;xref:System.Threading.Monitor?displayProperty=nameWithType&gt;</ph> method or the <ph id="ph3">&lt;xref:System.Threading.Interlocked&gt;</ph> methods are significantly slowing the performance of your program.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> may yield the time slice of the thread even if it has not yet acquired the lock.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It does this to avoid thread-priority inversion, and to enable the garbage collector to make progress.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When you use a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>, ensure that no thread can hold the lock for more than a very brief time span, and that no thread can block while it holds the lock.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because SpinLock is a value type, you must explicitly pass it by reference if you intend the two copies to refer to the same lock.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about how to use this type, see <ph id="ph1">&lt;xref:System.Threading.SpinLock?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Use SpinLock for Low-Level Synchronization<ept id="p1">](../../../docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> supports a <bpt id="p1">*</bpt>thread<ept id="p1">*</ept><ph id="ph2">-</ph><bpt id="p2">*</bpt>tracking<ept id="p2">*</ept> mode that you can use during the development phase to help track the thread that is holding the lock at a specific time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Thread-tracking mode is very useful for debugging, but we recommend that you turn it off in the release version of your program because it may slow performance.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Enable Thread-Tracking Mode in SpinLock<ept id="p1">](../../../docs/standard/threading/how-to-enable-thread-tracking-mode-in-spinlock.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](../../../docs/standard/threading/threading-objects-and-features.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>