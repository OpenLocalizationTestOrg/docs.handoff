{"content":"---\ntitle: \"Tutorial: Create a Windows service app\"\nms.date: 03/14/2019\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Windows service applications, walkthroughs\"\n  - \"Windows service applications, creating\"\nms.assetid: e24d8a3d-edc6-485c-b6e0-5672d91fb607\nauthor: \"ghogen\"\n---\n# Tutorial: Create a Windows service app\n\nThis article demonstrates how to create a Windows service app in Visual Studio that writes messages to an event log.\n\n## Create a service\n\nTo begin, create the project and set the values that are required for the service to function correctly.\n\n1. From the Visual Studio **File** menu, select **New** > **Project** (or press **Ctrl**+**Shift**+**N**) to open the **New Project** window.\n\n2. Navigate to and select the **Windows Service (.NET Framework)** project template. To find it, expand **Installed** and **Visual C#** or **Visual Basic**, then select **Windows Desktop**. Or, enter *Windows Service* in the search box on the upper right and press **Enter**.\n\n   ![Windows Service template in New Project dialog in Visual Studio](media/new-project-dialog.png)\n\n   > [!NOTE]\n   > If you don't see the **Windows Service** template, you may need to install the **.NET desktop development** workload:\n   >  \n   > In the **New Project** dialog, select **Open Visual Studio Installer** on the lower left. Select the **.NET desktop development** workload, and then select **Modify**.\n\n3. For **Name**, enter *MyNewService*, and then select **OK**.\n\n   The **Design** tab appears (**Service1.cs [Design]** or **Service1.vb [Design]**).\n   \n   The project template includes a component class named `Service1` that inherits from <xref:System.ServiceProcess.ServiceBase?displayProperty=nameWithType>. It includes much of the basic service code, such as the code to start the service.\n\n## Rename the service\n\nRename the service from **Service1** to **MyNewService**.\n\n1. In **Solution Explorer**, select **Service1.cs**, or **Service1.vb**, and choose **Rename** from the shortcut menu. Rename the file to **MyNewService.cs**, or **MyNewService.vb**, and then press **Enter**\n\n    A pop-up window appears asking whether you would like to rename all references to the code element *Service1*.\n\n2. In the pop-up window, select **Yes**.\n\n    ![Rename prompt](media/windows-service-rename.png \"Windows service rename prompt\")\n\n2. In the **Design** tab, select **Properties** from the shortcut menu. From the **Properties** window, change the **ServiceName** value to *MyNewService*.\n\n    ![Service properties](media/windows-service-properties.png \"Windows service properties\")\n\n3. Select **Save All** from the **File** menu.\n\n## Add features to the service\n\nIn this section, you add a custom event log to the Windows service. The <xref:System.Diagnostics.EventLog> component is an example of the type of component you can add to a Windows service.\n\n### Add custom event log functionality\n\n1. In **Solution Explorer**, from the shortcut menu for **MyNewService.cs**, or **MyNewService.vb**, choose **View Designer**.\n\n2. In **Toolbox**, expand **Components**, and then drag the **EventLog** component to the **Service1.cs [Design]**, or **Service1.vb [Design]** tab.\n\n3. In **Solution Explorer**, from the shortcut menu for **MyNewService.cs**, or **MyNewService.vb**, choose **View Code**.\n\n4. Define a custom event log. For C#, edit the existing `MyNewService()` constructor; for Visual Basic, add the `New()` constructor:\n\n   ```csharp\n   public MyNewService()\n   {\n        InitializeComponent();\n\n        eventLog1 = new EventLog();\n        if (!EventLog.SourceExists(\"MySource\"))\n        {\n            EventLog.CreateEventSource(\"MySource\", \"MyNewLog\");\n        }\n        eventLog1.Source = \"MySource\";\n        eventLog1.Log = \"MyNewLog\";\n    }\n   ```\n\n   [!code-vb[VbRadconService#2](../../../samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRadconService/VB/MyNewService.vb#2)]\n\n5. Add a `using` statement to **MyNewService.cs** (if it doesn't already exist), or an `Imports` statement **MyNewService.vb**, for the <xref:System.Diagnostics?displayProperty=nameWithType> namespace:\n\n    ```csharp\n    using System.Diagnostics;\n    ```\n\n    ```vb\n    Imports System.Diagnostics\n    ```\n\n6. Select **Save All** from the **File** menu.\n\n### Define what occurs when the service starts\n\nIn the code editor for **MyNewService.cs** or **MyNewService.vb**, locate the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method; Visual Studio automatically created an empty method definition when you created the project. Add code that writes an entry to the event log when the service starts:\n\n[!code-csharp[VbRadconService#3](../../../samples/snippets/csharp/VS_Snippets_VBCSharp/VbRadconService/CS/MyNewService.cs#3)]\n[!code-vb[VbRadconService#3](../../../samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRadconService/VB/MyNewService.vb#3)]\n\n#### Polling\n\nBecause a service application is designed to be long-running, it usually polls or monitors the system, which you set up in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method. The `OnStart` method must return to the operating system after the service's operation has begun so that the system isn't blocked. \n\nTo set up a simple polling mechanism, use the <xref:System.Timers.Timer?displayProperty=nameWithType> component. The timer raises an <xref:System.Timers.Timer.Elapsed> event at regular intervals, at which time your service can do its monitoring. You use the <xref:System.Timers.Timer> component as follows:\n\n- Set the properties of the <xref:System.Timers.Timer> component in the `MyNewService.OnStart` method.\n- Start the timer by calling the <xref:System.Timers.Timer.Start%2A> method.\n\n##### Set up the polling mechanism.\n\n1. Add the following code in the `MyNewService.OnStart` event to set up the polling mechanism:\n\n   ```csharp\n   // Set up a timer that triggers every minute.\n   Timer timer = new Timer();\n   timer.Interval = 60000; // 60 seconds\n   timer.Elapsed += new ElapsedEventHandler(this.OnTimer);\n   timer.Start();\n   ```\n\n   ```vb\n   ' Set up a timer that triggers every minute.\n   Dim timer As Timer = New Timer()\n   timer.Interval = 60000 ' 60 seconds\n   AddHandler timer.Elapsed, AddressOf Me.OnTimer\n   timer.Start()\n   ```\n\n2. Add a `using` statement to **MyNewService.cs**, or an `Imports` statement to **MyNewService.vb**, for the <xref:System.Timers?displayProperty=nameWithType> namespace:\n\n   ```csharp\n   using System.Timers;\n   ```\n\n   ```vb\n   Imports System.Timers\n   ```\n\n3. In the `MyNewService` class, add the `OnTimer` method to handle the <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event:\n\n   ```csharp\n   public void OnTimer(object sender, ElapsedEventArgs args)\n   {\n       // TODO: Insert monitoring activities here.\n       eventLog1.WriteEntry(\"Monitoring the System\", EventLogEntryType.Information, eventId++);\n   }\n   ```\n\n   ```vb\n   Private Sub OnTimer(sender As Object, e As Timers.ElapsedEventArgs)\n      ' TODO: Insert monitoring activities here.\n      eventLog1.WriteEntry(\"Monitoring the System\", EventLogEntryType.Information, eventId)\n      eventId = eventId + 1\n   End Sub\n   ```\n\n4. In the `MyNewService` class, add a member variable. It contains the identifier of the next event to write into the event log:\n\n   ```csharp\n   private int eventId = 1;\n   ```\n\n   ```vb\n   Private eventId As Integer = 1\n   ```\n\nInstead of running all your work on the main thread, you can run tasks by using background worker threads. For more information, see <xref:System.ComponentModel.BackgroundWorker?displayProperty=fullName>.\n\n### Define what occurs when the service is stopped\n\nInsert a line of code in the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method that adds an entry to the event log when the service is stopped:\n\n```csharp\neventLog1.WriteEntry(\"In OnStop.\");\n```\n\n[!code-vb[VbRadconService#4](../../../samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRadconService/VB/MyNewService.vb#4)]\n\n### Define other actions for the service\n\nYou can override the <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, and <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> methods to define additional processing for your component. \n\nThe following code shows how you to override the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> method in the `MyNewService` class:\n\n[!code-csharp[VbRadconService#5](../../../samples/snippets/csharp/VS_Snippets_VBCSharp/VbRadconService/CS/MyNewService.cs#5)]\n[!code-vb[VbRadconService#5](../../../samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRadconService/VB/MyNewService.vb#5)]\n\n## Set service status\n\nServices report their status to the [Service Control Manager](/windows/desktop/Services/service-control-manager) so that a user can tell whether a service is functioning correctly. By default, a service that inherits from <xref:System.ServiceProcess.ServiceBase> reports a limited set of status settings, which include SERVICE_STOPPED, SERVICE_PAUSED, and SERVICE_RUNNING. If a service takes a while to start up, it's useful to report a SERVICE_START_PENDING status. \n\nYou can implement the SERVICE_START_PENDING and SERVICE_STOP_PENDING status settings by adding code that calls the Windows [SetServiceStatus](/windows/desktop/api/winsvc/nf-winsvc-setservicestatus) function.\n\n### Implement service pending status\n\n1. Add a `using` statement to **MyNewService.cs**, or an `Imports` statement to **MyNewService.vb**, for the <xref:System.Runtime.InteropServices?displayProperty=nameWithType> namespace:\n\n    ```csharp\n    using System.Runtime.InteropServices;\n    ```\n\n    ```vb\n    Imports System.Runtime.InteropServices\n    ```\n\n2. Add the following code to **MyNewService.cs**, or **MyNewService.vb**, to declare the `ServiceState` values and to add a structure for the status, which you'll use in a platform invoke call:\n\n    ```csharp\n    public enum ServiceState\n    {\n        SERVICE_STOPPED = 0x00000001,\n        SERVICE_START_PENDING = 0x00000002,\n        SERVICE_STOP_PENDING = 0x00000003,\n        SERVICE_RUNNING = 0x00000004,\n        SERVICE_CONTINUE_PENDING = 0x00000005,\n        SERVICE_PAUSE_PENDING = 0x00000006,\n        SERVICE_PAUSED = 0x00000007,\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct ServiceStatus\n    {\n        public int dwServiceType;\n        public ServiceState dwCurrentState;\n        public int dwControlsAccepted;\n        public int dwWin32ExitCode;\n        public int dwServiceSpecificExitCode;\n        public int dwCheckPoint;\n        public int dwWaitHint;\n    };\n    ```\n\n    ```vb\n    Public Enum ServiceState\n        SERVICE_STOPPED = 1\n        SERVICE_START_PENDING = 2\n        SERVICE_STOP_PENDING = 3\n        SERVICE_RUNNING = 4\n        SERVICE_CONTINUE_PENDING = 5\n        SERVICE_PAUSE_PENDING = 6\n        SERVICE_PAUSED = 7\n    End Enum\n\n    <StructLayout(LayoutKind.Sequential)>\n    Public Structure ServiceStatus\n        Public dwServiceType As Long\n        Public dwCurrentState As ServiceState\n        Public dwControlsAccepted As Long\n        Public dwWin32ExitCode As Long\n        Public dwServiceSpecificExitCode As Long\n        Public dwCheckPoint As Long\n        Public dwWaitHint As Long\n    End Structure\n    ```\n\n3. In the `MyNewService` class, declare the [SetServiceStatus](/windows/desktop/api/winsvc/nf-winsvc-setservicestatus) function by using [platform invoke](../interop/consuming-unmanaged-dll-functions.md):\n\n    ```csharp\n    [DllImport(\"advapi32.dll\", SetLastError = true)]\n    private static extern bool SetServiceStatus(System.IntPtr handle, ref ServiceStatus serviceStatus);\n    ```\n\n    ```vb\n    Declare Auto Function SetServiceStatus Lib \"advapi32.dll\" (ByVal handle As IntPtr, ByRef serviceStatus As ServiceStatus) As Boolean\n    ```\n\n4. To implement the SERVICE_START_PENDING status, add the following code to the beginning of the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method:\n\n    ```csharp\n    // Update the service state to Start Pending.\n    ServiceStatus serviceStatus = new ServiceStatus();\n    serviceStatus.dwCurrentState = ServiceState.SERVICE_START_PENDING;\n    serviceStatus.dwWaitHint = 100000;\n    SetServiceStatus(this.ServiceHandle, ref serviceStatus);\n    ```\n\n    ```vb\n    ' Update the service state to Start Pending.\n    Dim serviceStatus As ServiceStatus = New ServiceStatus()\n    serviceStatus.dwCurrentState = ServiceState.SERVICE_START_PENDING\n    serviceStatus.dwWaitHint = 100000\n    SetServiceStatus(Me.ServiceHandle, serviceStatus)\n    ```\n\n5. Add code to the end of the `OnStart` method to set the status to SERVICE_RUNNING:\n\n    ```csharp\n    // Update the service state to Running.\n    serviceStatus.dwCurrentState = ServiceState.SERVICE_RUNNING;\n    SetServiceStatus(this.ServiceHandle, ref serviceStatus);\n    ```\n\n    ```vb\n    ' Update the service state to Running.\n    serviceStatus.dwCurrentState = ServiceState.SERVICE_RUNNING\n    SetServiceStatus(Me.ServiceHandle, serviceStatus)\n    ```\n\n6. (Optional) If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is a long-running method, repeat this procedure in the `OnStop` method. Implement the SERVICE_STOP_PENDING status and return the SERVICE_STOPPED status before the `OnStop` method exits.\n\n   For example:\n\n    ```csharp\n    // Update the service state to Stop Pending.\n    ServiceStatus serviceStatus = new ServiceStatus();\n    serviceStatus.dwCurrentState = ServiceState.SERVICE_STOP_PENDING;\n    serviceStatus.dwWaitHint = 100000;\n    SetServiceStatus(this.ServiceHandle, ref serviceStatus);\n\n    // Update the service state to Stopped.\n    serviceStatus.dwCurrentState = ServiceState.SERVICE_STOPPED;\n    SetServiceStatus(this.ServiceHandle, ref serviceStatus);\n    ```\n\n    ```vb\n    ' Update the service state to Stop Pending.\n    Dim serviceStatus As ServiceStatus = New ServiceStatus()\n    serviceStatus.dwCurrentState = ServiceState.SERVICE_STOP_PENDING\n    serviceStatus.dwWaitHint = 100000\n    SetServiceStatus(Me.ServiceHandle, serviceStatus)\n\n    ' Update the service state to Stopped.\n    serviceStatus.dwCurrentState = ServiceState.SERVICE_STOPPED\n    SetServiceStatus(Me.ServiceHandle, serviceStatus)    \n    ```\n\n> [!NOTE]\n> The Service Control Manager uses the `dwWaitHint` and `dwCheckpoint` members of the [SERVICE_STATUS structure](/windows/desktop/api/winsvc/ns-winsvc-_service_status) to determine how much time to wait for a Windows service to start or shut down. If your `OnStart` and `OnStop` methods run long, your service can request more time by calling `SetServiceStatus` again with an incremented `dwCheckPoint` value.\n\n## Add installers to the service\n\nBefore you run a Windows service, you need to install it, which registers it with the Service Control Manager. Add installers to your project to handle the registration details.\n\n1. In **Solution Explorer**, from the shortcut menu for **MyNewService.cs**, or **MyNewService.vb**, choose **View Designer**.\n\n2. In the **Design** view, select the background area, then choose **Add Installer** from the shortcut menu.\n\n     By default, Visual Studio adds a component class named `ProjectInstaller`, which contains two installers, to your project. These installers are for your service and for the service's associated process.\n\n4. In the **Design** view for **ProjectInstaller**, select **serviceInstaller1** for a Visual C# project, or **ServiceInstaller1** for a Visual Basic project, then choose **Properties** from the shortcut menu.\n\n5. In the **Properties** window, verify the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property is set to **MyNewService**.\n\n6. Add text to the <xref:System.ServiceProcess.ServiceInstaller.Description%2A> property, such as *A sample service*. \n\n     This text appears in the **Description** column of the **Services** window and describes the service to the user.\n\n    ![Service description in the Services window.](media/windows-service-description.png \"Service description\")\n\n7. Add text to the <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> property. For example, *MyNewService Display Name*. \n\n     This text appears in the **Display Name** column of the **Services** window. This name can be different from the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property, which is the name the system uses (for example, the name you use for the `net start` command to start your service).\n\n8. Set the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> property to <xref:System.ServiceProcess.ServiceStartMode.Automatic> from the drop-down list.\n\n9. When you're finished, the **Properties** windows should look like the following figure:\n\n     ![Installer Properties for a Windows service](media/windows-service-installer-properties.png \"Windows service installer properties\")\n\n9. In the **Design** view for **ProjectInstaller**, choose **serviceProcessInstaller1** for a Visual C# project, or **ServiceProcessInstaller1** for a Visual Basic project, then choose **Properties** from the shortcut menu. Set the <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> property to <xref:System.ServiceProcess.ServiceAccount.LocalSystem> from the drop-down list. \n\n     This setting installs the service and runs it by using the local system account.\n\n    > [!IMPORTANT]\n    > The <xref:System.ServiceProcess.ServiceAccount.LocalSystem> account has broad permissions, including the ability to write to the event log. Use this account with caution, because it might increase your risk of attacks from malicious software. For other tasks, consider using the <xref:System.ServiceProcess.ServiceAccount.LocalService> account, which acts as a non-privileged user on the local computer and presents anonymous credentials to any remote server. This example fails if you try to use the <xref:System.ServiceProcess.ServiceAccount.LocalService> account, because it needs permission to write to the event log.\n\nFor more information about installers, see [How to: Add installers to your service application](how-to-add-installers-to-your-service-application.md).\n\n## (Optional) Set startup parameters\n\n> [!NOTE]\n> Before you decide to add startup parameters, consider whether it's the best way to pass information to your service. Although they're easy to use and parse, and a user can easily override them, they might be harder for a user to discover and use without documentation. Generally, if your service requires more than just a few startup parameters, you should use the registry or a configuration file instead. \n\nA Windows service can accept command-line arguments, or startup parameters. When you add code to process startup parameters, a user can start your service with their own custom startup parameters in the service properties window. However, these startup parameters aren't persisted the next time the service starts. To set startup parameters permanently, set them in the registry.\n\nEach Windows service has a registry entry under the **HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services** subkey. Under each service's subkey, use the **Parameters** subkey to store information that your service can access. You can use application configuration files for a Windows service the same way you do for other types of programs. For sample code, see <xref:System.Configuration.ConfigurationManager.AppSettings?displayProperty=nameWithType>.\n\n### To add startup parameters\n\n1. Select **Program.cs**, or **MyNewService.Designer.vb**, then choose **View Code** from the shortcut menu. In the `Main` method, change the code to add an input parameter and pass it to the service constructor:\n\n   ```csharp\n   static void Main(string[] args)\n   {\n       ServiceBase[] ServicesToRun;\n       ServicesToRun = new ServiceBase[]\n       {\n           new MyNewService(args)\n       };\n       ServiceBase.Run(ServicesToRun);\n   }\n   ```\n\n   ```vb\n   Shared Sub Main(ByVal cmdArgs() As String)\n       Dim ServicesToRun() As System.ServiceProcess.ServiceBase = New System.ServiceProcess.ServiceBase() {New MyNewService(cmdArgs)}\n       System.ServiceProcess.ServiceBase.Run(ServicesToRun)\n   End Sub\n   ```\n\n2. In **MyNewService.cs**, or **MyNewService.vb**, change the `MyNewService` constructor to process the input parameter as follows:\n\n   ```csharp\n   using System.Diagnostics;\n\n   public MyNewService(string[] args)\n   {\n       InitializeComponent();\n\n       string eventSourceName = \"MySource\";\n       string logName = \"MyNewLog\";\n\n       if (args.Length > 0)\n       {\n          eventSourceName = args[0];\n       }\n\n       if (args.Length > 1)\n       {\n           logName = args[1];\n       }\n\n       eventLog1 = new EventLog();\n\n       if (!EventLog.SourceExists(eventSourceName))\n       {\n           EventLog.CreateEventSource(eventSourceName, logName);\n       }\n\n       eventLog1.Source = eventSourceName;\n       eventLog1.Log = logName;\n   }\n   ```\n\n   ```vb\n   Imports System.Diagnostics\n\n   Public Sub New(ByVal cmdArgs() As String)\n       InitializeComponent()\n       Dim eventSourceName As String = \"MySource\"\n       Dim logName As String = \"MyNewLog\"\n       If (cmdArgs.Count() > 0) Then\n           eventSourceName = cmdArgs(0)\n       End If\n       If (cmdArgs.Count() > 1) Then\n           logName = cmdArgs(1)\n       End If\n       eventLog1 = New EventLog()\n       If (Not EventLog.SourceExists(eventSourceName)) Then\n           EventLog.CreateEventSource(eventSourceName, logName)\n       End If\n       eventLog1.Source = eventSourceName\n       eventLog1.Log = logName\n   End Sub\n   ```\n\n   This code sets the event source and log name according to the startup parameters that the user supplies. If no arguments are supplied, it uses default values.\n\n3. To specify the command-line arguments, add the following code to the `ProjectInstaller` class in **ProjectInstaller.cs**, or **ProjectInstaller.vb**:\n\n   ```csharp\n   protected override void OnBeforeInstall(IDictionary savedState)\n   {\n       string parameter = \"MySource1\\\" \\\"MyLogFile1\";\n       Context.Parameters[\"assemblypath\"] = \"\\\"\" + Context.Parameters[\"assemblypath\"] + \"\\\" \\\"\" + parameter + \"\\\"\";\n       base.OnBeforeInstall(savedState);\n   }\n   ```\n\n   ```vb\n   Protected Overrides Sub OnBeforeInstall(ByVal savedState As IDictionary)\n       Dim parameter As String = \"MySource1\"\" \"\"MyLogFile1\"\n       Context.Parameters(\"assemblypath\") = \"\"\"\" + Context.Parameters(\"assemblypath\") + \"\"\" \"\"\" + parameter + \"\"\"\"\n       MyBase.OnBeforeInstall(savedState)\n   End Sub\n   ```\n\n   Typically, this value contains the full path to the executable for the Windows service. For the service to start up correctly, the user must supply quotation marks for the path and each individual parameter. A user can change the parameters in the **ImagePath** registry entry to change the startup parameters for the Windows service. However, a better way is to change the value programmatically and expose the functionality in a user-friendly way, such as by using a management or configuration utility.\n\n## Build the service\n\n1. In **Solution Explorer**, choose **Properties** from the shortcut menu for the **MyNewService** project.\n\n   The property pages for your project appear.\n\n2. On the **Application** tab, in the **Startup object** list, choose **MyNewService.Program**, or **Sub Main** for Visual Basic projects.\n\n3. To build the project, in **Solution Explorer**, choose **Build** from the shortcut menu for your project (or press **Ctrl**+**Shift**+**B**).\n\n## Install the service\n\nNow that you've built the Windows service, you can install it. To install a Windows service, you must have administrator credentials on the computer where it's installed.\n\n1. Open [Developer Command Prompt for Visual Studio](https://docs.microsoft.com/dotnet/framework/tools/developer-command-prompt-for-vs) with administrative credentials. From the Windows **Start** menu, select **Developer Command Prompt for VS 2017** in the Visual Studio folder, then select **More** > **Run as Administrator** from the shortcut menu.\n\n2. In the **Developer Command Prompt for Visual Studio** window, navigate to the folder that contains your project's output (by default, the *\\bin\\Debug* subdirectory of your project).\n\n3. Enter the following command:\n\n    ```shell\n    installutil MyNewService.exe\n    ```\n\n    If the service installs successfully, the command reports success. \n\n    If the system can't find *installutil.exe*, make sure that it exists on your computer. This tool is installed with the .NET Framework to the folder *%windir%\\Microsoft.NET\\Framework[64]\\\\&lt;framework version&gt;*. For example, the default path for the 64-bit version is *%windir%\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe*.\n\n    If the **installutil.exe** process fails, check the install log to find out why. By default, the log is in the same folder as the service executable. The installation can fail if: \n    - The <xref:System.ComponentModel.RunInstallerAttribute> class isn't present on the `ProjectInstaller` class.\n    -  The attribute isn't set to `true`. \n    - The `ProjectInstaller` class isn't defined as `public`.\n\nFor more information, see [How to: Install and uninstall services](how-to-install-and-uninstall-services.md).\n\n## Start and run the service\n\n1. In Windows, open the **Services** desktop app. Press **Windows**+**R** to open the **Run** box, enter *services.msc*, and then press **Enter** or select **OK**.\n\n     You should see your service listed in **Services**, displayed alphabetically by the display name that you set for it.\n\n     ![MyNewService in the Services window.](media/windowsservices-serviceswindow.PNG)\n\n2. To start the service, choose **Start** from the service's shortcut menu.\n\n3. To stop the service, choose **Stop** from the service's shortcut menu.\n\n4. (Optional) From the command line, use the commands **net start &lt;service name&gt;** and **net stop &lt;service name&gt;** to start and stop your service.\n\n### Verify the event log output of your service\n\n1. In Windows, open the **Event Viewer** desktop app. Enter *Event Viewer* in the Windows search bar, and then select **Event Viewer** from the search results.\n\n   > [!TIP]\n   > In Visual Studio, you can access event logs by opening **Server Explorer** from the **View** menu (or press **Ctrl**+**Alt**+**S**) and expanding the **Event Logs** node for the local computer.\n\n2. In **Event Viewer**, expand **Applications and Services Logs**.\n\n3. Locate the listing for **MyNewLog** (or **MyLogFile1** if you followed the procedure to add command-line arguments) and expand it. You should see the entries for the two actions (start and stop) that your service performed.\n\n     ![Use the Event Viewer to see the event log entries](media/windows-service-event-viewer.png)\n\n## Clean up resources\n\nIf you no longer need the Windows service app, you can remove it. \n\n1. Open **Developer Command Prompt for Visual Studio** with administrative credentials.\n\n2. In the **Developer Command Prompt for Visual Studio** window, navigate to the folder that contains your project's output.\n\n3. Enter the following command:\n\n    ```shell\n    installutil.exe /u MyNewService.exe\n    ```\n\n   If the service uninstalls successfully, the command reports that your service was successfully removed. For more information, see [How to: Install and uninstall services](how-to-install-and-uninstall-services.md).\n\n## Next steps\n\nNow that you've created the service, you can:\n\n- Create a standalone setup program for others to use to install your Windows service. Use the [WiX Toolset](http://wixtoolset.org/) to create an installer for a Windows service. For other ideas, see [Create an installer package](/visualstudio/deployment/deploying-applications-services-and-components#create-an-installer-package-windows-desktop).\n\n- Explore the <xref:System.ServiceProcess.ServiceController> component, which enables you to send commands to the service you've installed.\n\n- Instead of creating the event log when the application runs, use an installer to create an event log when you install the application. The event log is deleted by the installer when you uninstall the application. For more information, see <xref:System.Diagnostics.EventLogInstaller>.\n\n## See also\n\n- [Windows service applications](index.md)\n- [Introduction to Windows service applications](introduction-to-windows-service-applications.md)\n- [How to: Debug Windows service applications](how-to-debug-windows-service-applications.md)\n- [Services (Windows)](/windows/desktop/Services/services)\n","nodes":[{"pos":[4,287],"embed":true,"restype":"x-metadata","content":"title: \"Tutorial: Create a Windows service app\"\nms.date: 03/14/2019\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Windows service applications, walkthroughs\"\n  - \"Windows service applications, creating\"\nms.assetid: e24d8a3d-edc6-485c-b6e0-5672d91fb607\nauthor: \"ghogen\"","nodes":[{"content":"Tutorial: Create a Windows service app","nodes":[{"pos":[0,38],"content":"Tutorial: Create a Windows service app","nodes":[{"content":"Tutorial: Create a Windows service app","pos":[0,38]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[294,332],"content":"Tutorial: Create a Windows service app","linkify":"Tutorial: Create a Windows service app","nodes":[{"content":"Tutorial: Create a Windows service app","pos":[0,38]}]},{"content":"This article demonstrates how to create a Windows service app in Visual Studio that writes messages to an event log.","pos":[334,450]},{"pos":[455,471],"content":"Create a service","linkify":"Create a service","nodes":[{"content":"Create a service","pos":[0,16]}]},{"content":"To begin, create the project and set the values that are required for the service to function correctly.","pos":[473,577]},{"pos":[582,720],"content":"From the Visual Studio <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept> (or press <bpt id=\"p4\">**</bpt>Ctrl<ept id=\"p4\">**</ept><ph id=\"ph2\">+</ph><bpt id=\"p5\">**</bpt>Shift<ept id=\"p5\">**</ept><ph id=\"ph3\">+</ph><bpt id=\"p6\">**</bpt>N<ept id=\"p6\">**</ept>) to open the <bpt id=\"p7\">**</bpt>New Project<ept id=\"p7\">**</ept> window.","source":"From the Visual Studio **File** menu, select **New** > **Project** (or press **Ctrl**+**Shift**+**N**) to open the **New Project** window."},{"content":"Navigate to and select the <bpt id=\"p1\">**</bpt>Windows Service (.NET Framework)<ept id=\"p1\">**</ept> project template.","pos":[725,806],"source":"Navigate to and select the **Windows Service (.NET Framework)** project template."},{"content":"To find it, expand <bpt id=\"p1\">**</bpt>Installed<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Visual Basic<ept id=\"p3\">**</ept>, then select <bpt id=\"p4\">**</bpt>Windows Desktop<ept id=\"p4\">**</ept>.","pos":[807,911],"source":" To find it, expand **Installed** and **Visual C#** or **Visual Basic**, then select **Windows Desktop**."},{"content":"Or, enter <bpt id=\"p1\">*</bpt>Windows Service<ept id=\"p1\">*</ept> in the search box on the upper right and press <bpt id=\"p2\">**</bpt>Enter<ept id=\"p2\">**</ept>.","pos":[912,997],"source":" Or, enter *Windows Service* in the search box on the upper right and press **Enter**."},{"content":"Windows Service template in New Project dialog in Visual Studio","pos":[1004,1067]},{"pos":[1105,1235],"content":"[!NOTE]\nIf you don't see the **Windows Service** template, you may need to install the **.NET desktop development** workload:","leadings":["","   > "],"nodes":[{"content":"If you don't see the <bpt id=\"p1\">**</bpt>Windows Service<ept id=\"p1\">**</ept> template, you may need to install the <bpt id=\"p2\">**</bpt>.NET desktop development<ept id=\"p2\">**</ept> workload:","pos":[8,125],"source":"If you don't see the **Windows Service** template, you may need to install the **.NET desktop development** workload:"}]},{"content":"In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog, select <bpt id=\"p2\">**</bpt>Open Visual Studio Installer<ept id=\"p2\">**</ept> on the lower left.","pos":[1248,1337],"source":"In the **New Project** dialog, select **Open Visual Studio Installer** on the lower left."},{"content":"Select the <bpt id=\"p1\">**</bpt>.NET desktop development<ept id=\"p1\">**</ept> workload, and then select <bpt id=\"p2\">**</bpt>Modify<ept id=\"p2\">**</ept>.","pos":[1338,1415],"source":" Select the **.NET desktop development** workload, and then select **Modify**."},{"pos":[1420,1479],"content":"For <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept>, enter <bpt id=\"p2\">*</bpt>MyNewService<ept id=\"p2\">*</ept>, and then select <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>.","source":"For **Name**, enter *MyNewService*, and then select **OK**."},{"pos":[1484,1566],"content":"The <bpt id=\"p1\">**</bpt>Design<ept id=\"p1\">**</ept> tab appears (<bpt id=\"p2\">**</bpt>Service1.cs [Design]<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Service1.vb [Design]<ept id=\"p3\">**</ept>).","source":"The **Design** tab appears (**Service1.cs [Design]** or **Service1.vb [Design]**)."},{"content":"The project template includes a component class named <ph id=\"ph1\">`Service1`</ph> that inherits from <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase?displayProperty=nameWithType&gt;</ph>.","pos":[1574,1728],"source":"The project template includes a component class named `Service1` that inherits from <xref:System.ServiceProcess.ServiceBase?displayProperty=nameWithType>."},{"content":"It includes much of the basic service code, such as the code to start the service.","pos":[1729,1811]},{"pos":[1816,1834],"content":"Rename the service","linkify":"Rename the service","nodes":[{"content":"Rename the service","pos":[0,18]}]},{"pos":[1836,1893],"content":"Rename the service from <bpt id=\"p1\">**</bpt>Service1<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>MyNewService<ept id=\"p2\">**</ept>.","source":"Rename the service from **Service1** to **MyNewService**."},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Service1.cs<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>Service1.vb<ept id=\"p3\">**</ept>, and choose <bpt id=\"p4\">**</bpt>Rename<ept id=\"p4\">**</ept> from the shortcut menu.","pos":[1898,2013],"source":"In **Solution Explorer**, select **Service1.cs**, or **Service1.vb**, and choose **Rename** from the shortcut menu."},{"content":"Rename the file to <bpt id=\"p1\">**</bpt>MyNewService.cs<ept id=\"p1\">**</ept>, or <bpt id=\"p2\">**</bpt>MyNewService.vb<ept id=\"p2\">**</ept>, and then press <bpt id=\"p3\">**</bpt>Enter<ept id=\"p3\">**</ept>","pos":[2014,2102],"source":" Rename the file to **MyNewService.cs**, or **MyNewService.vb**, and then press **Enter**"},{"pos":[2108,2218],"content":"A pop-up window appears asking whether you would like to rename all references to the code element <bpt id=\"p1\">*</bpt>Service1<ept id=\"p1\">*</ept>.","source":"A pop-up window appears asking whether you would like to rename all references to the code element *Service1*."},{"pos":[2223,2260],"content":"In the pop-up window, select <bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>.","source":"In the pop-up window, select **Yes**."},{"pos":[2266,2348],"content":"<bpt id=\"p1\">![</bpt>Rename prompt<ept id=\"p1\">]</ept><bpt id=\"p2\">(media/windows-service-rename.png \"</bpt>Windows service rename prompt<ept id=\"p2\">\")</ept>","source":"![Rename prompt](media/windows-service-rename.png \"Windows service rename prompt\")"},{"content":"In the <bpt id=\"p1\">**</bpt>Design<ept id=\"p1\">**</ept> tab, select <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> from the shortcut menu.","pos":[2353,2421],"source":"In the **Design** tab, select **Properties** from the shortcut menu."},{"content":"From the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, change the <bpt id=\"p2\">**</bpt>ServiceName<ept id=\"p2\">**</ept> value to <bpt id=\"p3\">*</bpt>MyNewService<ept id=\"p3\">*</ept>.","pos":[2422,2505],"source":" From the **Properties** window, change the **ServiceName** value to *MyNewService*."},{"pos":[2511,2599],"content":"<bpt id=\"p1\">![</bpt>Service properties<ept id=\"p1\">]</ept><bpt id=\"p2\">(media/windows-service-properties.png \"</bpt>Windows service properties<ept id=\"p2\">\")</ept>","source":"![Service properties](media/windows-service-properties.png \"Windows service properties\")"},{"pos":[2604,2647],"content":"Select <bpt id=\"p1\">**</bpt>Save All<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu.","source":"Select **Save All** from the **File** menu."},{"pos":[2652,2679],"content":"Add features to the service","linkify":"Add features to the service","nodes":[{"content":"Add features to the service","pos":[0,27]}]},{"content":"In this section, you add a custom event log to the Windows service.","pos":[2681,2748]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog&gt;</ph> component is an example of the type of component you can add to a Windows service.","pos":[2749,2870],"source":" The <xref:System.Diagnostics.EventLog> component is an example of the type of component you can add to a Windows service."},{"pos":[2876,2910],"content":"Add custom event log functionality","linkify":"Add custom event log functionality","nodes":[{"content":"Add custom event log functionality","pos":[0,34]}]},{"pos":[2915,3038],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, from the shortcut menu for <bpt id=\"p2\">**</bpt>MyNewService.cs<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>MyNewService.vb<ept id=\"p3\">**</ept>, choose <bpt id=\"p4\">**</bpt>View Designer<ept id=\"p4\">**</ept>.","source":"In **Solution Explorer**, from the shortcut menu for **MyNewService.cs**, or **MyNewService.vb**, choose **View Designer**."},{"pos":[3043,3188],"content":"In <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, expand <bpt id=\"p2\">**</bpt>Components<ept id=\"p2\">**</ept>, and then drag the <bpt id=\"p3\">**</bpt>EventLog<ept id=\"p3\">**</ept> component to the <bpt id=\"p4\">**</bpt>Service1.cs [Design]<ept id=\"p4\">**</ept>, or <bpt id=\"p5\">**</bpt>Service1.vb [Design]<ept id=\"p5\">**</ept> tab.","source":"In **Toolbox**, expand **Components**, and then drag the **EventLog** component to the **Service1.cs [Design]**, or **Service1.vb [Design]** tab."},{"pos":[3193,3312],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, from the shortcut menu for <bpt id=\"p2\">**</bpt>MyNewService.cs<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>MyNewService.vb<ept id=\"p3\">**</ept>, choose <bpt id=\"p4\">**</bpt>View Code<ept id=\"p4\">**</ept>.","source":"In **Solution Explorer**, from the shortcut menu for **MyNewService.cs**, or **MyNewService.vb**, choose **View Code**."},{"content":"Define a custom event log.","pos":[3317,3343]},{"content":"For C#, edit the existing <ph id=\"ph1\">`MyNewService()`</ph> constructor; for Visual Basic, add the <ph id=\"ph2\">`New()`</ph> constructor:","pos":[3344,3446],"source":" For C#, edit the existing `MyNewService()` constructor; for Visual Basic, add the `New()` constructor:"},{"pos":[3914,4112],"content":"Add a <ph id=\"ph1\">`using`</ph> statement to <bpt id=\"p1\">**</bpt>MyNewService.cs<ept id=\"p1\">**</ept> (if it doesn't already exist), or an <ph id=\"ph2\">`Imports`</ph> statement <bpt id=\"p2\">**</bpt>MyNewService.vb<ept id=\"p2\">**</ept>, for the <ph id=\"ph3\">&lt;xref:System.Diagnostics?displayProperty=nameWithType&gt;</ph> namespace:","source":"Add a `using` statement to **MyNewService.cs** (if it doesn't already exist), or an `Imports` statement **MyNewService.vb**, for the <xref:System.Diagnostics?displayProperty=nameWithType> namespace:"},{"pos":[4220,4263],"content":"Select <bpt id=\"p1\">**</bpt>Save All<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu.","source":"Select **Save All** from the **File** menu."},{"pos":[4269,4311],"content":"Define what occurs when the service starts","linkify":"Define what occurs when the service starts","nodes":[{"content":"Define what occurs when the service starts","pos":[0,42]}]},{"content":"In the code editor for <bpt id=\"p1\">**</bpt>MyNewService.cs<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>MyNewService.vb<ept id=\"p2\">**</ept>, locate the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method; Visual Studio automatically created an empty method definition when you created the project.","pos":[4313,4543],"source":"In the code editor for **MyNewService.cs** or **MyNewService.vb**, locate the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method; Visual Studio automatically created an empty method definition when you created the project."},{"content":"Add code that writes an entry to the event log when the service starts:","pos":[4544,4615]},{"pos":[4876,4883],"content":"Polling","linkify":"Polling","nodes":[{"content":"Polling","pos":[0,7]}]},{"content":"Because a service application is designed to be long-running, it usually polls or monitors the system, which you set up in the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method.","pos":[4885,5071],"source":"Because a service application is designed to be long-running, it usually polls or monitors the system, which you set up in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method."},{"content":"The <ph id=\"ph1\">`OnStart`</ph> method must return to the operating system after the service's operation has begun so that the system isn't blocked.","pos":[5072,5202],"source":" The `OnStart` method must return to the operating system after the service's operation has begun so that the system isn't blocked."},{"content":"To set up a simple polling mechanism, use the <ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> component.","pos":[5205,5317],"source":"To set up a simple polling mechanism, use the <xref:System.Timers.Timer?displayProperty=nameWithType> component."},{"content":"The timer raises an <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event at regular intervals, at which time your service can do its monitoring.","pos":[5318,5450],"source":" The timer raises an <xref:System.Timers.Timer.Elapsed> event at regular intervals, at which time your service can do its monitoring."},{"content":"You use the <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> component as follows:","pos":[5451,5511],"source":" You use the <xref:System.Timers.Timer> component as follows:"},{"pos":[5515,5615],"content":"Set the properties of the <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> component in the <ph id=\"ph2\">`MyNewService.OnStart`</ph> method.","source":"Set the properties of the <xref:System.Timers.Timer> component in the `MyNewService.OnStart` method."},{"pos":[5618,5692],"content":"Start the timer by calling the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method.","source":"Start the timer by calling the <xref:System.Timers.Timer.Start%2A> method."},{"pos":[5700,5729],"content":"Set up the polling mechanism.","linkify":"Set up the polling mechanism.","nodes":[{"content":"Set up the polling mechanism.","pos":[0,29]}]},{"pos":[5734,5825],"content":"Add the following code in the <ph id=\"ph1\">`MyNewService.OnStart`</ph> event to set up the polling mechanism:","source":"Add the following code in the `MyNewService.OnStart` event to set up the polling mechanism:"},{"pos":[6255,6421],"content":"Add a <ph id=\"ph1\">`using`</ph> statement to <bpt id=\"p1\">**</bpt>MyNewService.cs<ept id=\"p1\">**</ept>, or an <ph id=\"ph2\">`Imports`</ph> statement to <bpt id=\"p2\">**</bpt>MyNewService.vb<ept id=\"p2\">**</ept>, for the <ph id=\"ph3\">&lt;xref:System.Timers?displayProperty=nameWithType&gt;</ph> namespace:","source":"Add a `using` statement to **MyNewService.cs**, or an `Imports` statement to **MyNewService.vb**, for the <xref:System.Timers?displayProperty=nameWithType> namespace:"},{"pos":[6513,6651],"content":"In the <ph id=\"ph1\">`MyNewService`</ph> class, add the <ph id=\"ph2\">`OnTimer`</ph> method to handle the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event:","source":"In the `MyNewService` class, add the `OnTimer` method to handle the <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event:"},{"content":"In the <ph id=\"ph1\">`MyNewService`</ph> class, add a member variable.","pos":[7163,7214],"source":"In the `MyNewService` class, add a member variable."},{"content":"It contains the identifier of the next event to write into the event log:","pos":[7215,7288]},{"content":"Instead of running all your work on the main thread, you can run tasks by using background worker threads.","pos":[7390,7496]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker?displayProperty=fullName&gt;</ph>.","pos":[7497,7594],"source":" For more information, see <xref:System.ComponentModel.BackgroundWorker?displayProperty=fullName>."},{"pos":[7600,7646],"content":"Define what occurs when the service is stopped","linkify":"Define what occurs when the service is stopped","nodes":[{"content":"Define what occurs when the service is stopped","pos":[0,46]}]},{"pos":[7648,7799],"content":"Insert a line of code in the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method that adds an entry to the event log when the service is stopped:","source":"Insert a line of code in the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method that adds an entry to the event log when the service is stopped:"},{"pos":[7984,8020],"content":"Define other actions for the service","linkify":"Define other actions for the service","nodes":[{"content":"Define other actions for the service","pos":[0,36]}]},{"pos":[8022,8270],"content":"You can override the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> methods to define additional processing for your component.","source":"You can override the <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, and <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> methods to define additional processing for your component."},{"pos":[8273,8412],"content":"The following code shows how you to override the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> method in the <ph id=\"ph2\">`MyNewService`</ph> class:","source":"The following code shows how you to override the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> method in the `MyNewService` class:"},{"pos":[8671,8689],"content":"Set service status","linkify":"Set service status","nodes":[{"content":"Set service status","pos":[0,18]}]},{"content":"Services report their status to the <bpt id=\"p1\">[</bpt>Service Control Manager<ept id=\"p1\">](/windows/desktop/Services/service-control-manager)</ept> so that a user can tell whether a service is functioning correctly.","pos":[8691,8871],"source":"Services report their status to the [Service Control Manager](/windows/desktop/Services/service-control-manager) so that a user can tell whether a service is functioning correctly."},{"content":"By default, a service that inherits from <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> reports a limited set of status settings, which include SERVICE_STOPPED, SERVICE_PAUSED, and SERVICE_RUNNING.","pos":[8872,9063],"source":" By default, a service that inherits from <xref:System.ServiceProcess.ServiceBase> reports a limited set of status settings, which include SERVICE_STOPPED, SERVICE_PAUSED, and SERVICE_RUNNING."},{"content":"If a service takes a while to start up, it's useful to report a SERVICE_START_PENDING status.","pos":[9064,9157]},{"pos":[9160,9367],"content":"You can implement the SERVICE_START_PENDING and SERVICE_STOP_PENDING status settings by adding code that calls the Windows <bpt id=\"p1\">[</bpt>SetServiceStatus<ept id=\"p1\">](/windows/desktop/api/winsvc/nf-winsvc-setservicestatus)</ept> function.","source":"You can implement the SERVICE_START_PENDING and SERVICE_STOP_PENDING status settings by adding code that calls the Windows [SetServiceStatus](/windows/desktop/api/winsvc/nf-winsvc-setservicestatus) function."},{"pos":[9373,9405],"content":"Implement service pending status","linkify":"Implement service pending status","nodes":[{"content":"Implement service pending status","pos":[0,32]}]},{"pos":[9410,9593],"content":"Add a <ph id=\"ph1\">`using`</ph> statement to <bpt id=\"p1\">**</bpt>MyNewService.cs<ept id=\"p1\">**</ept>, or an <ph id=\"ph2\">`Imports`</ph> statement to <bpt id=\"p2\">**</bpt>MyNewService.vb<ept id=\"p2\">**</ept>, for the <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices?displayProperty=nameWithType&gt;</ph> namespace:","source":"Add a `using` statement to **MyNewService.cs**, or an `Imports` statement to **MyNewService.vb**, for the <xref:System.Runtime.InteropServices?displayProperty=nameWithType> namespace:"},{"pos":[9725,9915],"content":"Add the following code to <bpt id=\"p1\">**</bpt>MyNewService.cs<ept id=\"p1\">**</ept>, or <bpt id=\"p2\">**</bpt>MyNewService.vb<ept id=\"p2\">**</ept>, to declare the <ph id=\"ph1\">`ServiceState`</ph> values and to add a structure for the status, which you'll use in a platform invoke call:","source":"Add the following code to **MyNewService.cs**, or **MyNewService.vb**, to declare the `ServiceState` values and to add a structure for the status, which you'll use in a platform invoke call:"},{"pos":[11287,11488],"content":"In the <ph id=\"ph1\">`MyNewService`</ph> class, declare the <bpt id=\"p1\">[</bpt>SetServiceStatus<ept id=\"p1\">](/windows/desktop/api/winsvc/nf-winsvc-setservicestatus)</ept> function by using <bpt id=\"p2\">[</bpt>platform invoke<ept id=\"p2\">](../interop/consuming-unmanaged-dll-functions.md)</ept>:","source":"In the `MyNewService` class, declare the [SetServiceStatus](/windows/desktop/api/winsvc/nf-winsvc-setservicestatus) function by using [platform invoke](../interop/consuming-unmanaged-dll-functions.md):"},{"pos":[11828,11981],"content":"To implement the SERVICE_START_PENDING status, add the following code to the beginning of the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method:","source":"To implement the SERVICE_START_PENDING status, add the following code to the beginning of the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method:"},{"pos":[12576,12657],"content":"Add code to the end of the <ph id=\"ph1\">`OnStart`</ph> method to set the status to SERVICE_RUNNING:","source":"Add code to the end of the `OnStart` method to set the status to SERVICE_RUNNING:"},{"content":"(Optional) If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is a long-running method, repeat this procedure in the <ph id=\"ph2\">`OnStop`</ph> method.","pos":[13035,13171],"source":"(Optional) If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is a long-running method, repeat this procedure in the `OnStop` method."},{"content":"Implement the SERVICE_STOP_PENDING status and return the SERVICE_STOPPED status before the <ph id=\"ph1\">`OnStop`</ph> method exits.","pos":[13172,13285],"source":" Implement the SERVICE_STOP_PENDING status and return the SERVICE_STOPPED status before the `OnStop` method exits."},{"content":"For example:","pos":[13290,13302]},{"pos":[14229,14646],"content":"[!NOTE]\nThe Service Control Manager uses the `dwWaitHint` and `dwCheckpoint` members of the [SERVICE_STATUS structure](/windows/desktop/api/winsvc/ns-winsvc-_service_status) to determine how much time to wait for a Windows service to start or shut down. If your `OnStart` and `OnStop` methods run long, your service can request more time by calling `SetServiceStatus` again with an incremented `dwCheckPoint` value.","leadings":["","> "],"nodes":[{"content":"The Service Control Manager uses the `dwWaitHint` and `dwCheckpoint` members of the [SERVICE_STATUS structure](/windows/desktop/api/winsvc/ns-winsvc-_service_status) to determine how much time to wait for a Windows service to start or shut down. If your `OnStart` and `OnStop` methods run long, your service can request more time by calling `SetServiceStatus` again with an incremented `dwCheckPoint` value.","pos":[8,415],"nodes":[{"content":"The Service Control Manager uses the <ph id=\"ph1\">`dwWaitHint`</ph> and <ph id=\"ph2\">`dwCheckpoint`</ph> members of the <bpt id=\"p1\">[</bpt>SERVICE_STATUS structure<ept id=\"p1\">](/windows/desktop/api/winsvc/ns-winsvc-_service_status)</ept> to determine how much time to wait for a Windows service to start or shut down.","pos":[0,245],"source":"The Service Control Manager uses the `dwWaitHint` and `dwCheckpoint` members of the [SERVICE_STATUS structure](/windows/desktop/api/winsvc/ns-winsvc-_service_status) to determine how much time to wait for a Windows service to start or shut down."},{"content":"If your <ph id=\"ph1\">`OnStart`</ph> and <ph id=\"ph2\">`OnStop`</ph> methods run long, your service can request more time by calling <ph id=\"ph3\">`SetServiceStatus`</ph> again with an incremented <ph id=\"ph4\">`dwCheckPoint`</ph> value.","pos":[246,407],"source":" If your `OnStart` and `OnStop` methods run long, your service can request more time by calling `SetServiceStatus` again with an incremented `dwCheckPoint` value."}]}]},{"pos":[14651,14680],"content":"Add installers to the service","linkify":"Add installers to the service","nodes":[{"content":"Add installers to the service","pos":[0,29]}]},{"content":"Before you run a Windows service, you need to install it, which registers it with the Service Control Manager.","pos":[14682,14792]},{"content":"Add installers to your project to handle the registration details.","pos":[14793,14859]},{"pos":[14864,14987],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, from the shortcut menu for <bpt id=\"p2\">**</bpt>MyNewService.cs<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>MyNewService.vb<ept id=\"p3\">**</ept>, choose <bpt id=\"p4\">**</bpt>View Designer<ept id=\"p4\">**</ept>.","source":"In **Solution Explorer**, from the shortcut menu for **MyNewService.cs**, or **MyNewService.vb**, choose **View Designer**."},{"pos":[14992,15097],"content":"In the <bpt id=\"p1\">**</bpt>Design<ept id=\"p1\">**</ept> view, select the background area, then choose <bpt id=\"p2\">**</bpt>Add Installer<ept id=\"p2\">**</ept> from the shortcut menu.","source":"In the **Design** view, select the background area, then choose **Add Installer** from the shortcut menu."},{"content":"By default, Visual Studio adds a component class named <ph id=\"ph1\">`ProjectInstaller`</ph>, which contains two installers, to your project.","pos":[15104,15226],"source":"By default, Visual Studio adds a component class named `ProjectInstaller`, which contains two installers, to your project."},{"content":"These installers are for your service and for the service's associated process.","pos":[15227,15306]},{"pos":[15311,15517],"content":"In the <bpt id=\"p1\">**</bpt>Design<ept id=\"p1\">**</ept> view for <bpt id=\"p2\">**</bpt>ProjectInstaller<ept id=\"p2\">**</ept>, select <bpt id=\"p3\">**</bpt>serviceInstaller1<ept id=\"p3\">**</ept> for a Visual C# project, or <bpt id=\"p4\">**</bpt>ServiceInstaller1<ept id=\"p4\">**</ept> for a Visual Basic project, then choose <bpt id=\"p5\">**</bpt>Properties<ept id=\"p5\">**</ept> from the shortcut menu.","source":"In the **Design** view for **ProjectInstaller**, select **serviceInstaller1** for a Visual C# project, or **ServiceInstaller1** for a Visual Basic project, then choose **Properties** from the shortcut menu."},{"pos":[15522,15660],"content":"In the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, verify the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property is set to <bpt id=\"p2\">**</bpt>MyNewService<ept id=\"p2\">**</ept>.","source":"In the **Properties** window, verify the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property is set to **MyNewService**."},{"pos":[15665,15779],"content":"Add text to the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceInstaller.Description%2A&gt;</ph> property, such as <bpt id=\"p1\">*</bpt>A sample service<ept id=\"p1\">*</ept>.","source":"Add text to the <xref:System.ServiceProcess.ServiceInstaller.Description%2A> property, such as *A sample service*."},{"pos":[15787,15900],"content":"This text appears in the <bpt id=\"p1\">**</bpt>Description<ept id=\"p1\">**</ept> column of the <bpt id=\"p2\">**</bpt>Services<ept id=\"p2\">**</ept> window and describes the service to the user.","source":"This text appears in the **Description** column of the **Services** window and describes the service to the user."},{"pos":[15906,16013],"content":"<bpt id=\"p1\">![</bpt>Service description in the Services window.<ept id=\"p1\">]</ept><bpt id=\"p2\">(media/windows-service-description.png \"</bpt>Service description<ept id=\"p2\">\")</ept>","source":"![Service description in the Services window.](media/windows-service-description.png \"Service description\")"},{"content":"Add text to the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A&gt;</ph> property.","pos":[16018,16104],"source":"Add text to the <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> property."},{"content":"For example, <bpt id=\"p1\">*</bpt>MyNewService Display Name<ept id=\"p1\">*</ept>.","pos":[16105,16146],"source":" For example, *MyNewService Display Name*."},{"content":"This text appears in the <bpt id=\"p1\">**</bpt>Display Name<ept id=\"p1\">**</ept> column of the <bpt id=\"p2\">**</bpt>Services<ept id=\"p2\">**</ept> window.","pos":[16154,16230],"source":"This text appears in the **Display Name** column of the **Services** window."},{"content":"This name can be different from the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property, which is the name the system uses (for example, the name you use for the <ph id=\"ph2\">`net start`</ph> command to start your service).","pos":[16231,16454],"source":" This name can be different from the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property, which is the name the system uses (for example, the name you use for the `net start` command to start your service)."},{"pos":[16459,16618],"content":"Set the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> property to <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph> from the drop-down list.","source":"Set the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> property to <xref:System.ServiceProcess.ServiceStartMode.Automatic> from the drop-down list."},{"pos":[16623,16710],"content":"When you're finished, the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> windows should look like the following figure:","source":"When you're finished, the **Properties** windows should look like the following figure:"},{"pos":[16717,16849],"content":"<bpt id=\"p1\">![</bpt>Installer Properties for a Windows service<ept id=\"p1\">]</ept><bpt id=\"p2\">(media/windows-service-installer-properties.png \"</bpt>Windows service installer properties<ept id=\"p2\">\")</ept>","source":"![Installer Properties for a Windows service](media/windows-service-installer-properties.png \"Windows service installer properties\")"},{"content":"In the <bpt id=\"p1\">**</bpt>Design<ept id=\"p1\">**</ept> view for <bpt id=\"p2\">**</bpt>ProjectInstaller<ept id=\"p2\">**</ept>, choose <bpt id=\"p3\">**</bpt>serviceProcessInstaller1<ept id=\"p3\">**</ept> for a Visual C# project, or <bpt id=\"p4\">**</bpt>ServiceProcessInstaller1<ept id=\"p4\">**</ept> for a Visual Basic project, then choose <bpt id=\"p5\">**</bpt>Properties<ept id=\"p5\">**</ept> from the shortcut menu.","pos":[16854,17074],"source":"In the **Design** view for **ProjectInstaller**, choose **serviceProcessInstaller1** for a Visual C# project, or **ServiceProcessInstaller1** for a Visual Basic project, then choose **Properties** from the shortcut menu."},{"content":"Set the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A&gt;</ph> property to <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceAccount.LocalSystem&gt;</ph> from the drop-down list.","pos":[17075,17239],"source":" Set the <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> property to <xref:System.ServiceProcess.ServiceAccount.LocalSystem> from the drop-down list."},{"content":"This setting installs the service and runs it by using the local system account.","pos":[17247,17327]},{"pos":[17335,17975],"content":"[!IMPORTANT]\nThe <xref:System.ServiceProcess.ServiceAccount.LocalSystem> account has broad permissions, including the ability to write to the event log. Use this account with caution, because it might increase your risk of attacks from malicious software. For other tasks, consider using the <xref:System.ServiceProcess.ServiceAccount.LocalService> account, which acts as a non-privileged user on the local computer and presents anonymous credentials to any remote server. This example fails if you try to use the <xref:System.ServiceProcess.ServiceAccount.LocalService> account, because it needs permission to write to the event log.","leadings":["","    > "],"nodes":[{"content":"The <xref:System.ServiceProcess.ServiceAccount.LocalSystem> account has broad permissions, including the ability to write to the event log. Use this account with caution, because it might increase your risk of attacks from malicious software. For other tasks, consider using the <xref:System.ServiceProcess.ServiceAccount.LocalService> account, which acts as a non-privileged user on the local computer and presents anonymous credentials to any remote server. This example fails if you try to use the <xref:System.ServiceProcess.ServiceAccount.LocalService> account, because it needs permission to write to the event log.","pos":[13,634],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceAccount.LocalSystem&gt;</ph> account has broad permissions, including the ability to write to the event log.","pos":[0,139],"source":"The <xref:System.ServiceProcess.ServiceAccount.LocalSystem> account has broad permissions, including the ability to write to the event log."},{"content":"Use this account with caution, because it might increase your risk of attacks from malicious software.","pos":[140,242]},{"content":"For other tasks, consider using the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceAccount.LocalService&gt;</ph> account, which acts as a non-privileged user on the local computer and presents anonymous credentials to any remote server.","pos":[243,459],"source":" For other tasks, consider using the <xref:System.ServiceProcess.ServiceAccount.LocalService> account, which acts as a non-privileged user on the local computer and presents anonymous credentials to any remote server."},{"content":"This example fails if you try to use the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceAccount.LocalService&gt;</ph> account, because it needs permission to write to the event log.","pos":[460,621],"source":" This example fails if you try to use the <xref:System.ServiceProcess.ServiceAccount.LocalService> account, because it needs permission to write to the event log."}]}]},{"pos":[17977,18127],"content":"For more information about installers, see <bpt id=\"p1\">[</bpt>How to: Add installers to your service application<ept id=\"p1\">](how-to-add-installers-to-your-service-application.md)</ept>.","source":"For more information about installers, see [How to: Add installers to your service application](how-to-add-installers-to-your-service-application.md)."},{"pos":[18132,18165],"content":"(Optional) Set startup parameters","linkify":"(Optional) Set startup parameters","nodes":[{"content":"(Optional) Set startup parameters","pos":[0,33]}]},{"pos":[18169,18585],"content":"[!NOTE]\nBefore you decide to add startup parameters, consider whether it's the best way to pass information to your service. Although they're easy to use and parse, and a user can easily override them, they might be harder for a user to discover and use without documentation. Generally, if your service requires more than just a few startup parameters, you should use the registry or a configuration file instead.","leadings":["","> "],"nodes":[{"content":"Before you decide to add startup parameters, consider whether it's the best way to pass information to your service. Although they're easy to use and parse, and a user can easily override them, they might be harder for a user to discover and use without documentation. Generally, if your service requires more than just a few startup parameters, you should use the registry or a configuration file instead.","pos":[8,414],"nodes":[{"content":"Before you decide to add startup parameters, consider whether it's the best way to pass information to your service.","pos":[0,116]},{"content":"Although they're easy to use and parse, and a user can easily override them, they might be harder for a user to discover and use without documentation.","pos":[117,268]},{"content":"Generally, if your service requires more than just a few startup parameters, you should use the registry or a configuration file instead.","pos":[269,406]}]}]},{"content":"A Windows service can accept command-line arguments, or startup parameters.","pos":[18588,18663]},{"content":"When you add code to process startup parameters, a user can start your service with their own custom startup parameters in the service properties window.","pos":[18664,18817]},{"content":"However, these startup parameters aren't persisted the next time the service starts.","pos":[18818,18902]},{"content":"To set startup parameters permanently, set them in the registry.","pos":[18903,18967]},{"content":"Each Windows service has a registry entry under the <bpt id=\"p1\">**</bpt>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services<ept id=\"p1\">**</ept> subkey.","pos":[18969,19085],"source":"Each Windows service has a registry entry under the **HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services** subkey."},{"content":"Under each service's subkey, use the <bpt id=\"p1\">**</bpt>Parameters<ept id=\"p1\">**</ept> subkey to store information that your service can access.","pos":[19086,19195],"source":" Under each service's subkey, use the **Parameters** subkey to store information that your service can access."},{"content":"You can use application configuration files for a Windows service the same way you do for other types of programs.","pos":[19196,19310]},{"content":"For sample code, see <ph id=\"ph1\">&lt;xref:System.Configuration.ConfigurationManager.AppSettings?displayProperty=nameWithType&gt;</ph>.","pos":[19311,19422],"source":" For sample code, see <xref:System.Configuration.ConfigurationManager.AppSettings?displayProperty=nameWithType>."},{"pos":[19428,19453],"content":"To add startup parameters","linkify":"To add startup parameters","nodes":[{"content":"To add startup parameters","pos":[0,25]}]},{"content":"Select <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>, or <bpt id=\"p2\">**</bpt>MyNewService.Designer.vb<ept id=\"p2\">**</ept>, then choose <bpt id=\"p3\">**</bpt>View Code<ept id=\"p3\">**</ept> from the shortcut menu.","pos":[19458,19563],"source":"Select **Program.cs**, or **MyNewService.Designer.vb**, then choose **View Code** from the shortcut menu."},{"content":"In the <ph id=\"ph1\">`Main`</ph> method, change the code to add an input parameter and pass it to the service constructor:","pos":[19564,19667],"source":" In the `Main` method, change the code to add an input parameter and pass it to the service constructor:"},{"pos":[20175,20303],"content":"In <bpt id=\"p1\">**</bpt>MyNewService.cs<ept id=\"p1\">**</ept>, or <bpt id=\"p2\">**</bpt>MyNewService.vb<ept id=\"p2\">**</ept>, change the <ph id=\"ph1\">`MyNewService`</ph> constructor to process the input parameter as follows:","source":"In **MyNewService.cs**, or **MyNewService.vb**, change the `MyNewService` constructor to process the input parameter as follows:"},{"content":"This code sets the event source and log name according to the startup parameters that the user supplies.","pos":[21571,21675]},{"content":"If no arguments are supplied, it uses default values.","pos":[21676,21729]},{"pos":[21734,21883],"content":"To specify the command-line arguments, add the following code to the <ph id=\"ph1\">`ProjectInstaller`</ph> class in <bpt id=\"p1\">**</bpt>ProjectInstaller.cs<ept id=\"p1\">**</ept>, or <bpt id=\"p2\">**</bpt>ProjectInstaller.vb<ept id=\"p2\">**</ept>:","source":"To specify the command-line arguments, add the following code to the `ProjectInstaller` class in **ProjectInstaller.cs**, or **ProjectInstaller.vb**:"},{"content":"Typically, this value contains the full path to the executable for the Windows service.","pos":[22518,22605]},{"content":"For the service to start up correctly, the user must supply quotation marks for the path and each individual parameter.","pos":[22606,22725]},{"content":"A user can change the parameters in the <bpt id=\"p1\">**</bpt>ImagePath<ept id=\"p1\">**</ept> registry entry to change the startup parameters for the Windows service.","pos":[22726,22852],"source":" A user can change the parameters in the **ImagePath** registry entry to change the startup parameters for the Windows service."},{"content":"However, a better way is to change the value programmatically and expose the functionality in a user-friendly way, such as by using a management or configuration utility.","pos":[22853,23023]},{"pos":[23028,23045],"content":"Build the service","linkify":"Build the service","nodes":[{"content":"Build the service","pos":[0,17]}]},{"pos":[23050,23154],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, choose <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> from the shortcut menu for the <bpt id=\"p3\">**</bpt>MyNewService<ept id=\"p3\">**</ept> project.","source":"In **Solution Explorer**, choose **Properties** from the shortcut menu for the **MyNewService** project."},{"content":"The property pages for your project appear.","pos":[23159,23202]},{"pos":[23207,23342],"content":"On the <bpt id=\"p1\">**</bpt>Application<ept id=\"p1\">**</ept> tab, in the <bpt id=\"p2\">**</bpt>Startup object<ept id=\"p2\">**</ept> list, choose <bpt id=\"p3\">**</bpt>MyNewService.Program<ept id=\"p3\">**</ept>, or <bpt id=\"p4\">**</bpt>Sub Main<ept id=\"p4\">**</ept> for Visual Basic projects.","source":"On the **Application** tab, in the **Startup object** list, choose **MyNewService.Program**, or **Sub Main** for Visual Basic projects."},{"pos":[23347,23488],"content":"To build the project, in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, choose <bpt id=\"p2\">**</bpt>Build<ept id=\"p2\">**</ept> from the shortcut menu for your project (or press <bpt id=\"p3\">**</bpt>Ctrl<ept id=\"p3\">**</ept><ph id=\"ph1\">+</ph><bpt id=\"p4\">**</bpt>Shift<ept id=\"p4\">**</ept><ph id=\"ph2\">+</ph><bpt id=\"p5\">**</bpt>B<ept id=\"p5\">**</ept>).","source":"To build the project, in **Solution Explorer**, choose **Build** from the shortcut menu for your project (or press **Ctrl**+**Shift**+**B**)."},{"pos":[23493,23512],"content":"Install the service","linkify":"Install the service","nodes":[{"content":"Install the service","pos":[0,19]}]},{"content":"Now that you've built the Windows service, you can install it.","pos":[23514,23576]},{"content":"To install a Windows service, you must have administrator credentials on the computer where it's installed.","pos":[23577,23684]},{"content":"Open <bpt id=\"p1\">[</bpt>Developer Command Prompt for Visual Studio<ept id=\"p1\">](https://docs.microsoft.com/dotnet/framework/tools/developer-command-prompt-for-vs)</ept> with administrative credentials.","pos":[23689,23854],"source":"Open [Developer Command Prompt for Visual Studio](https://docs.microsoft.com/dotnet/framework/tools/developer-command-prompt-for-vs) with administrative credentials."},{"content":"From the Windows <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Developer Command Prompt for VS 2017<ept id=\"p2\">**</ept> in the Visual Studio folder, then select <bpt id=\"p3\">**</bpt>More<ept id=\"p3\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p4\">**</bpt>Run as Administrator<ept id=\"p4\">**</ept> from the shortcut menu.","pos":[23855,24036],"source":" From the Windows **Start** menu, select **Developer Command Prompt for VS 2017** in the Visual Studio folder, then select **More** > **Run as Administrator** from the shortcut menu."},{"pos":[24041,24222],"content":"In the <bpt id=\"p1\">**</bpt>Developer Command Prompt for Visual Studio<ept id=\"p1\">**</ept> window, navigate to the folder that contains your project's output (by default, the <bpt id=\"p2\">*</bpt>\\bin\\Debug<ept id=\"p2\">*</ept> subdirectory of your project).","source":"In the **Developer Command Prompt for Visual Studio** window, navigate to the folder that contains your project's output (by default, the *\\bin\\Debug* subdirectory of your project)."},{"content":"Enter the following command:","pos":[24227,24255]},{"content":"If the service installs successfully, the command reports success.","pos":[24316,24382]},{"content":"If the system can't find <bpt id=\"p1\">*</bpt>installutil.exe<ept id=\"p1\">*</ept>, make sure that it exists on your computer.","pos":[24389,24475],"source":"If the system can't find *installutil.exe*, make sure that it exists on your computer."},{"content":"This tool is installed with the .NET Framework to the folder <bpt id=\"p1\">*</bpt>%windir%\\Microsoft.NET\\Framework[64]<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">&amp;lt;</ph>framework version<ph id=\"ph3\">&amp;gt;</ph><ept id=\"p1\">*</ept>.","pos":[24476,24603],"source":" This tool is installed with the .NET Framework to the folder *%windir%\\Microsoft.NET\\Framework[64]\\\\&lt;framework version&gt;*."},{"content":"For example, the default path for the 64-bit version is <bpt id=\"p1\">*</bpt>%windir%\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe<ept id=\"p1\">*</ept>.","pos":[24604,24724],"source":" For example, the default path for the 64-bit version is *%windir%\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe*."},{"content":"If the <bpt id=\"p1\">**</bpt>installutil.exe<ept id=\"p1\">**</ept> process fails, check the install log to find out why.","pos":[24730,24810],"source":"If the **installutil.exe** process fails, check the install log to find out why."},{"content":"By default, the log is in the same folder as the service executable.","pos":[24811,24879]},{"content":"The installation can fail if:","pos":[24880,24909]},{"pos":[24917,25024],"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> class isn't present on the <ph id=\"ph2\">`ProjectInstaller`</ph> class.","source":"The <xref:System.ComponentModel.RunInstallerAttribute> class isn't present on the `ProjectInstaller` class."},{"pos":[25032,25066],"content":"The attribute isn't set to <ph id=\"ph1\">`true`</ph>.","source":"The attribute isn't set to `true`."},{"pos":[25074,25129],"content":"The <ph id=\"ph1\">`ProjectInstaller`</ph> class isn't defined as <ph id=\"ph2\">`public`</ph>.","source":"The `ProjectInstaller` class isn't defined as `public`."},{"pos":[25131,25240],"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Install and uninstall services<ept id=\"p1\">](how-to-install-and-uninstall-services.md)</ept>.","source":"For more information, see [How to: Install and uninstall services](how-to-install-and-uninstall-services.md)."},{"pos":[25245,25270],"content":"Start and run the service","linkify":"Start and run the service","nodes":[{"content":"Start and run the service","pos":[0,25]}]},{"content":"In Windows, open the <bpt id=\"p1\">**</bpt>Services<ept id=\"p1\">**</ept> desktop app.","pos":[25275,25321],"source":"In Windows, open the **Services** desktop app."},{"content":"Press <bpt id=\"p1\">**</bpt>Windows<ept id=\"p1\">**</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">**</bpt>R<ept id=\"p2\">**</ept> to open the <bpt id=\"p3\">**</bpt>Run<ept id=\"p3\">**</ept> box, enter <bpt id=\"p4\">*</bpt>services.msc<ept id=\"p4\">*</ept>, and then press <bpt id=\"p5\">**</bpt>Enter<ept id=\"p5\">**</ept> or select <bpt id=\"p6\">**</bpt>OK<ept id=\"p6\">**</ept>.","pos":[25322,25435],"source":" Press **Windows**+**R** to open the **Run** box, enter *services.msc*, and then press **Enter** or select **OK**."},{"pos":[25442,25559],"content":"You should see your service listed in <bpt id=\"p1\">**</bpt>Services<ept id=\"p1\">**</ept>, displayed alphabetically by the display name that you set for it.","source":"You should see your service listed in **Services**, displayed alphabetically by the display name that you set for it."},{"content":"MyNewService in the Services window.","pos":[25568,25604]},{"pos":[25652,25724],"content":"To start the service, choose <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> from the service's shortcut menu.","source":"To start the service, choose **Start** from the service's shortcut menu."},{"pos":[25729,25799],"content":"To stop the service, choose <bpt id=\"p1\">**</bpt>Stop<ept id=\"p1\">**</ept> from the service's shortcut menu.","source":"To stop the service, choose **Stop** from the service's shortcut menu."},{"pos":[25804,25959],"content":"(Optional) From the command line, use the commands <bpt id=\"p1\">**</bpt>net start <ph id=\"ph1\">&amp;lt;</ph>service name<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>net stop <ph id=\"ph3\">&amp;lt;</ph>service name<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">**</ept> to start and stop your service.","source":"(Optional) From the command line, use the commands **net start &lt;service name&gt;** and **net stop &lt;service name&gt;** to start and stop your service."},{"pos":[25965,26008],"content":"Verify the event log output of your service","linkify":"Verify the event log output of your service","nodes":[{"content":"Verify the event log output of your service","pos":[0,43]}]},{"content":"In Windows, open the <bpt id=\"p1\">**</bpt>Event Viewer<ept id=\"p1\">**</ept> desktop app.","pos":[26013,26063],"source":"In Windows, open the **Event Viewer** desktop app."},{"content":"Enter <bpt id=\"p1\">*</bpt>Event Viewer<ept id=\"p1\">*</ept> in the Windows search bar, and then select <bpt id=\"p2\">**</bpt>Event Viewer<ept id=\"p2\">**</ept> from the search results.","pos":[26064,26169],"source":" Enter *Event Viewer* in the Windows search bar, and then select **Event Viewer** from the search results."},{"pos":[26176,26381],"content":"[!TIP]\nIn Visual Studio, you can access event logs by opening **Server Explorer** from the **View** menu (or press **Ctrl**+**Alt**+**S**) and expanding the **Event Logs** node for the local computer.","leadings":["","   > "],"nodes":[{"content":"In Visual Studio, you can access event logs by opening <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>View<ept id=\"p2\">**</ept> menu (or press <bpt id=\"p3\">**</bpt>Ctrl<ept id=\"p3\">**</ept><ph id=\"ph1\">+</ph><bpt id=\"p4\">**</bpt>Alt<ept id=\"p4\">**</ept><ph id=\"ph2\">+</ph><bpt id=\"p5\">**</bpt>S<ept id=\"p5\">**</ept>) and expanding the <bpt id=\"p6\">**</bpt>Event Logs<ept id=\"p6\">**</ept> node for the local computer.","pos":[7,200],"source":"In Visual Studio, you can access event logs by opening **Server Explorer** from the **View** menu (or press **Ctrl**+**Alt**+**S**) and expanding the **Event Logs** node for the local computer."}]},{"pos":[26386,26449],"content":"In <bpt id=\"p1\">**</bpt>Event Viewer<ept id=\"p1\">**</ept>, expand <bpt id=\"p2\">**</bpt>Applications and Services Logs<ept id=\"p2\">**</ept>.","source":"In **Event Viewer**, expand **Applications and Services Logs**."},{"content":"Locate the listing for <bpt id=\"p1\">**</bpt>MyNewLog<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>MyLogFile1<ept id=\"p2\">**</ept> if you followed the procedure to add command-line arguments) and expand it.","pos":[26454,26584],"source":"Locate the listing for **MyNewLog** (or **MyLogFile1** if you followed the procedure to add command-line arguments) and expand it."},{"content":"You should see the entries for the two actions (start and stop) that your service performed.","pos":[26585,26677]},{"content":"Use the Event Viewer to see the event log entries","pos":[26686,26735]},{"pos":[26781,26799],"content":"Clean up resources","linkify":"Clean up resources","nodes":[{"content":"Clean up resources","pos":[0,18]}]},{"content":"If you no longer need the Windows service app, you can remove it.","pos":[26801,26866]},{"pos":[26872,26956],"content":"Open <bpt id=\"p1\">**</bpt>Developer Command Prompt for Visual Studio<ept id=\"p1\">**</ept> with administrative credentials.","source":"Open **Developer Command Prompt for Visual Studio** with administrative credentials."},{"pos":[26961,27082],"content":"In the <bpt id=\"p1\">**</bpt>Developer Command Prompt for Visual Studio<ept id=\"p1\">**</ept> window, navigate to the folder that contains your project's output.","source":"In the **Developer Command Prompt for Visual Studio** window, navigate to the folder that contains your project's output."},{"content":"Enter the following command:","pos":[27087,27115]},{"content":"If the service uninstalls successfully, the command reports that your service was successfully removed.","pos":[27182,27285]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Install and uninstall services<ept id=\"p1\">](how-to-install-and-uninstall-services.md)</ept>.","pos":[27286,27395],"source":" For more information, see [How to: Install and uninstall services](how-to-install-and-uninstall-services.md)."},{"pos":[27400,27410],"content":"Next steps","linkify":"Next steps","nodes":[{"content":"Next steps","pos":[0,10]}]},{"content":"Now that you've created the service, you can:","pos":[27412,27457]},{"content":"Create a standalone setup program for others to use to install your Windows service.","pos":[27461,27545]},{"content":"Use the <bpt id=\"p1\">[</bpt>WiX Toolset<ept id=\"p1\">](http://wixtoolset.org/)</ept> to create an installer for a Windows service.","pos":[27546,27637],"source":" Use the [WiX Toolset](http://wixtoolset.org/) to create an installer for a Windows service."},{"content":"For other ideas, see <bpt id=\"p1\">[</bpt>Create an installer package<ept id=\"p1\">](/visualstudio/deployment/deploying-applications-services-and-components#create-an-installer-package-windows-desktop)</ept>.","pos":[27638,27806],"source":" For other ideas, see [Create an installer package](/visualstudio/deployment/deploying-applications-services-and-components#create-an-installer-package-windows-desktop)."},{"pos":[27810,27947],"content":"Explore the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component, which enables you to send commands to the service you've installed.","source":"Explore the <xref:System.ServiceProcess.ServiceController> component, which enables you to send commands to the service you've installed."},{"content":"Instead of creating the event log when the application runs, use an installer to create an event log when you install the application.","pos":[27951,28085]},{"content":"The event log is deleted by the installer when you uninstall the application.","pos":[28086,28163]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.","pos":[28164,28234],"source":" For more information, see <xref:System.Diagnostics.EventLogInstaller>."},{"pos":[28239,28247],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[28251,28291],"content":"<bpt id=\"p1\">[</bpt>Windows service applications<ept id=\"p1\">](index.md)</ept>","source":"[Windows service applications](index.md)"},{"pos":[28294,28389],"content":"<bpt id=\"p1\">[</bpt>Introduction to Windows service applications<ept id=\"p1\">](introduction-to-windows-service-applications.md)</ept>","source":"[Introduction to Windows service applications](introduction-to-windows-service-applications.md)"},{"pos":[28392,28482],"content":"<bpt id=\"p1\">[</bpt>How to: Debug Windows service applications<ept id=\"p1\">](how-to-debug-windows-service-applications.md)</ept>","source":"[How to: Debug Windows service applications](how-to-debug-windows-service-applications.md)"},{"pos":[28485,28541],"content":"<bpt id=\"p1\">[</bpt>Services (Windows)<ept id=\"p1\">](/windows/desktop/Services/services)</ept>","source":"[Services (Windows)](/windows/desktop/Services/services)"}]}