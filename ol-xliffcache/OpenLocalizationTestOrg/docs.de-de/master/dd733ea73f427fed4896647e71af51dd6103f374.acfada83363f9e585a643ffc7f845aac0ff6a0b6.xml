{"content":"---\ntitle: \"Integrating Enterprise Services Transactional Components | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 05dab277-b8b2-48cf-b40c-826be128b175\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Integrating Enterprise Services Transactional Components\n[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] provides an automatic mechanism for integrating with Enterprise Services (see [Integrating with COM+ Applications](../../../../docs/framework/wcf/feature-details/integrating-with-com-plus-applications.md)). However, you may want the flexibility to develop services that internally use transactional components hosted within Enterprise Services. Because the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Transactions feature is built on the <xref:System.Transactions> infrastructure, the process for integrating Enterprise Services with [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] is identical to that for specifying interoperability between <xref:System.Transactions> and Enterprise Services, as outlined in [Interoperability with Enterprise Services and COM+ Transactions](http://go.microsoft.com/fwlink/?LinkId=94949).  \n  \n To provide the desired level of interoperability between the incoming flowed transaction and the COM+ context transaction, the service implementation must create a <xref:System.Transactions.TransactionScope> instance and use the appropriate value from the <xref:System.Transactions.EnterpriseServicesInteropOption> enumeration.  \n  \n## Integrating Enterprise Services with a Service Operation  \n The following code demonstrates an operation, with Allowed transaction flow, that creates a <xref:System.Transactions.TransactionScope> with the <xref:System.Transactions.EnterpriseServicesInteropOption> option. The following conditions apply in this scenario:  \n  \n-   If the client flows a transaction, the operation, including the call to the Enterprise Services component, is executed within the scope of that transaction. Using <xref:System.Transactions.EnterpriseServicesInteropOption> ensures that the transaction is synchronized with the <xref:System.EnterpriseServices> context, which means that the ambient transaction for <xref:System.Transactions> and the <xref:System.EnterpriseServices> is the same.  \n  \n-   If the client does not flow a transaction, setting <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired%2A> to `true` creates a new transaction scope for the operation. Similarly, using <xref:System.Transactions.EnterpriseServicesInteropOption> ensures that the operation’s transaction is the same as the transaction used inside the <xref:System.EnterpriseServices> component's context.  \n  \n Any additional method calls also occur within the scope of the same operation’s transaction.  \n  \n```  \n[ServiceContract()]  \npublic interface ICustomerServiceContract  \n{  \n   [OperationContract]  \n   [TransactionFlow(TransactionFlowOption.Allowed)]  \n   void UpdateCustomerNameOperation(int customerID, string newCustomerName);  \n}  \n  \n[ServiceBehavior(TransactionIsolationLevel = System.Transactions.IsolationLevel.Serializable)]  \npublic class CustomerService : ICustomerServiceContract  \n{  \n   [OperationBehavior(TransactionScopeRequired = true, TransactionAutoComplete = true)]  \n   public void UpdateCustomerNameOperation(int customerID, string newCustomerName)  \n   {  \n   // Create a transaction scope with full ES interop  \n      using (TransactionScope ts = new TransactionScope(  \n                     TransactionScopeOption.Required,  \n                     new TransactionOptions(),  \n                     EnterpriseServicesInteropOption.Full))  \n      {  \n         // Create an Enterprise Services component  \n         // Call UpdateCustomer method on an Enterprise Services   \n         // component   \n  \n         // Call UpdateOtherCustomerData method on an Enterprise   \n         // Services component   \n         ts.Complete();  \n      }  \n  \n      // Do UpdateAdditionalData on an non-Enterprise Services  \n      // component  \n   }  \n}  \n```  \n  \n If no synchronization is required between an operation’s current transaction and calls to transactional Enterprise Services components, then use the <xref:System.Transactions.EnterpriseServicesInteropOption> option when instantiating the <xref:System.Transactions.TransactionScope> instance.  \n  \n## Integrating Enterprise Services with a Client  \n The following code demonstrates client code using a <xref:System.Transactions.TransactionScope> instance with the <xref:System.Transactions.EnterpriseServicesInteropOption> setting. In this scenario, calls to service operations that support transaction flow occur within the scope of the same transaction as the calls to Enterprise Services components.  \n  \n```  \nstatic void Main()  \n{  \n    // Create a client  \n    CalculatorClient client = new CalculatorClient();  \n  \n    // Create a transaction scope with full ES interop  \n    using (TransactionScope ts = new TransactionScope(  \n          TransactionScopeOption.Required,  \n          new TransactionOptions(),  \n          EnterpriseServicesInteropOption.Full))  \n    {  \n        // Call Add calculator service operation  \n  \n        // Create an Enterprise Services component  \n  \n        // Call UpdateCustomer method on an Enterprise Services   \n        // component   \n  \n        ts.Complete();  \n    }  \n  \n    // Closing the client gracefully closes the connection and   \n    // cleans up resources  \n    client.Close();  \n}  \n```  \n  \n## See Also  \n [Integrating with COM+ Applications](../../../../docs/framework/wcf/feature-details/integrating-with-com-plus-applications.md)   \n [Integrating with COM Applications](../../../../docs/framework/wcf/feature-details/integrating-with-com-applications.md)","nodes":[{"pos":[4,376],"embed":true,"restype":"x-metadata","content":"title: \"Integrating Enterprise Services Transactional Components | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 05dab277-b8b2-48cf-b40c-826be128b175\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"Integrating Enterprise Services Transactional Components | Microsoft Docs","nodes":[{"pos":[0,73],"content":"Integrating Enterprise Services Transactional Components | Microsoft Docs","nodes":[{"content":"Integrating Enterprise Services Transactional Components | Microsoft Docs","pos":[0,73]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[383,439],"content":"Integrating Enterprise Services Transactional Components","linkify":"Integrating Enterprise Services Transactional Components","nodes":[{"content":"Integrating Enterprise Services Transactional Components","pos":[0,56]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> provides an automatic mechanism for integrating with Enterprise Services (see <bpt id=\"p1\">[</bpt>Integrating with COM+ Applications<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/integrating-with-com-plus-applications.md)</ept>).","pos":[440,702],"source":"[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] provides an automatic mechanism for integrating with Enterprise Services (see [Integrating with COM+ Applications](../../../../docs/framework/wcf/feature-details/integrating-with-com-plus-applications.md))."},{"content":"However, you may want the flexibility to develop services that internally use transactional components hosted within Enterprise Services.","pos":[703,840]},{"content":"Because the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Transactions feature is built on the <ph id=\"ph2\">&lt;xref:System.Transactions&gt;</ph> infrastructure, the process for integrating Enterprise Services with <ph id=\"ph3\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> is identical to that for specifying interoperability between <ph id=\"ph4\">&lt;xref:System.Transactions&gt;</ph> and Enterprise Services, as outlined in <bpt id=\"p1\">[</bpt>Interoperability with Enterprise Services and COM+ Transactions<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=94949)</ept>.","pos":[841,1338],"source":" Because the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Transactions feature is built on the <xref:System.Transactions> infrastructure, the process for integrating Enterprise Services with [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] is identical to that for specifying interoperability between <xref:System.Transactions> and Enterprise Services, as outlined in [Interoperability with Enterprise Services and COM+ Transactions](http://go.microsoft.com/fwlink/?LinkId=94949)."},{"content":"To provide the desired level of interoperability between the incoming flowed transaction and the COM+ context transaction, the service implementation must create a <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> instance and use the appropriate value from the <ph id=\"ph2\">&lt;xref:System.Transactions.EnterpriseServicesInteropOption&gt;</ph> enumeration.","pos":[1345,1672],"source":"To provide the desired level of interoperability between the incoming flowed transaction and the COM+ context transaction, the service implementation must create a <xref:System.Transactions.TransactionScope> instance and use the appropriate value from the <xref:System.Transactions.EnterpriseServicesInteropOption> enumeration."},{"pos":[1681,1737],"content":"Integrating Enterprise Services with a Service Operation","linkify":"Integrating Enterprise Services with a Service Operation","nodes":[{"content":"Integrating Enterprise Services with a Service Operation","pos":[0,56]}]},{"content":"The following code demonstrates an operation, with Allowed transaction flow, that creates a <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Transactions.EnterpriseServicesInteropOption&gt;</ph> option.","pos":[1741,1952],"source":"The following code demonstrates an operation, with Allowed transaction flow, that creates a <xref:System.Transactions.TransactionScope> with the <xref:System.Transactions.EnterpriseServicesInteropOption> option."},{"content":"The following conditions apply in this scenario:","pos":[1953,2001]},{"content":"If the client flows a transaction, the operation, including the call to the Enterprise Services component, is executed within the scope of that transaction.","pos":[2011,2167]},{"content":"Using <ph id=\"ph1\">&lt;xref:System.Transactions.EnterpriseServicesInteropOption&gt;</ph> ensures that the transaction is synchronized with the <ph id=\"ph2\">&lt;xref:System.EnterpriseServices&gt;</ph> context, which means that the ambient transaction for <ph id=\"ph3\">&lt;xref:System.Transactions&gt;</ph> and the <ph id=\"ph4\">&lt;xref:System.EnterpriseServices&gt;</ph> is the same.","pos":[2168,2454],"source":" Using <xref:System.Transactions.EnterpriseServicesInteropOption> ensures that the transaction is synchronized with the <xref:System.EnterpriseServices> context, which means that the ambient transaction for <xref:System.Transactions> and the <xref:System.EnterpriseServices> is the same."},{"content":"If the client does not flow a transaction, setting <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> creates a new transaction scope for the operation.","pos":[2464,2657],"source":"If the client does not flow a transaction, setting <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired%2A> to `true` creates a new transaction scope for the operation."},{"content":"Similarly, using <ph id=\"ph1\">&lt;xref:System.Transactions.EnterpriseServicesInteropOption&gt;</ph> ensures that the operation’s transaction is the same as the transaction used inside the <ph id=\"ph2\">&lt;xref:System.EnterpriseServices&gt;</ph> component's context.","pos":[2658,2875],"source":" Similarly, using <xref:System.Transactions.EnterpriseServicesInteropOption> ensures that the operation’s transaction is the same as the transaction used inside the <xref:System.EnterpriseServices> component's context."},{"content":"Any additional method calls also occur within the scope of the same operation’s transaction.","pos":[2882,2974]},{"content":"If no synchronization is required between an operation’s current transaction and calls to transactional Enterprise Services components, then use the <ph id=\"ph1\">&lt;xref:System.Transactions.EnterpriseServicesInteropOption&gt;</ph> option when instantiating the <ph id=\"ph2\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> instance.","pos":[4252,4543],"source":"If no synchronization is required between an operation’s current transaction and calls to transactional Enterprise Services components, then use the <xref:System.Transactions.EnterpriseServicesInteropOption> option when instantiating the <xref:System.Transactions.TransactionScope> instance."},{"pos":[4552,4597],"content":"Integrating Enterprise Services with a Client","linkify":"Integrating Enterprise Services with a Client","nodes":[{"content":"Integrating Enterprise Services with a Client","pos":[0,45]}]},{"content":"The following code demonstrates client code using a <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> instance with the <ph id=\"ph2\">&lt;xref:System.Transactions.EnterpriseServicesInteropOption&gt;</ph> setting.","pos":[4601,4782],"source":"The following code demonstrates client code using a <xref:System.Transactions.TransactionScope> instance with the <xref:System.Transactions.EnterpriseServicesInteropOption> setting."},{"content":"In this scenario, calls to service operations that support transaction flow occur within the scope of the same transaction as the calls to Enterprise Services components.","pos":[4783,4953]},{"pos":[5703,5711],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Integrating with COM+ Applications<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/integrating-with-com-plus-applications.md)</ept><ph id=\"ph1\"> </ph>","pos":[5715,5842],"source":"[Integrating with COM+ Applications](../../../../docs/framework/wcf/feature-details/integrating-with-com-plus-applications.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integrating with COM Applications<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/integrating-with-com-applications.md)</ept>","pos":[5846,5966],"source":"[Integrating with COM Applications](../../../../docs/framework/wcf/feature-details/integrating-with-com-applications.md)"}]}