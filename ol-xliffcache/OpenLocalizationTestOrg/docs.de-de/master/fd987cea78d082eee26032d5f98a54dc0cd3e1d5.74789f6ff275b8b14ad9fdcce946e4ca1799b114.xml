{"content":"---\ntitle: \"dllMainReturnsFalse MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"managed debugging assistants (MDAs), DllMain returns false\"\n  - \"DllMainReturnsFalse MDA\"\n  - \"DllMain function\"\n  - \"MDAs (managed debugging assistants), DllMain returns false\"\nms.assetid: e2abdd04-f571-4b97-8c16-2221b8588429\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# dllMainReturnsFalse MDA\nThe `dllMainReturnsFalse` managed debugging assistant (MDA) is activated if the managed `DllMain` function of a user assembly, called with reason DLL_PROCESS_ATTACH, returns FALSE.  \n  \n## Symptoms  \n The `DllMain` function returned FALSE, indicating that it did not execute properly. This can cause undetermined issues because `DllMain` functions typically contain important initialization code.  \n  \n## Cause  \n The `DllMain` function is called with reason DLL_PROCESS_ATTACH for DLL initialization upon load. If it returns FALSE, it means that DLL initialization failed.  \n  \n## Resolution  \n Analyze the code of the `DllMain` function of the failed DLL and identify the cause of the initialization failure.  \n  \n## Effect on the Runtime  \n This MDA has no effect on the CLR. It only reports data about the return value for `DllMain`.  \n  \n## Output  \n A message indicating that a `DllMain` function, called for reason DLL_PROCESS_ATTACH, returned FALSE. Note that this MDA is activated only if `DllMain` is implemented in managed code.  \n  \n## Configuration  \n  \n```xml  \n<mdaConfig>  \n  <assistants>  \n    <dllMainReturnsFalse />  \n  </assistants>  \n</mdaConfig>  \n```  \n  \n## See also\n\n- [Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)\n","nodes":[{"pos":[4,349],"embed":true,"restype":"x-metadata","content":"title: \"dllMainReturnsFalse MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"managed debugging assistants (MDAs), DllMain returns false\"\n  - \"DllMainReturnsFalse MDA\"\n  - \"DllMain function\"\n  - \"MDAs (managed debugging assistants), DllMain returns false\"\nms.assetid: e2abdd04-f571-4b97-8c16-2221b8588429\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"dllMainReturnsFalse MDA","nodes":[{"pos":[0,23],"content":"dllMainReturnsFalse MDA","nodes":[{"content":"dllMainReturnsFalse MDA","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[356,379],"content":"dllMainReturnsFalse MDA","linkify":"dllMainReturnsFalse MDA","nodes":[{"content":"dllMainReturnsFalse MDA","pos":[0,23]}]},{"pos":[380,560],"content":"The <ph id=\"ph1\">`dllMainReturnsFalse`</ph> managed debugging assistant (MDA) is activated if the managed <ph id=\"ph2\">`DllMain`</ph> function of a user assembly, called with reason DLL_PROCESS_ATTACH, returns FALSE.","source":"The `dllMainReturnsFalse` managed debugging assistant (MDA) is activated if the managed `DllMain` function of a user assembly, called with reason DLL_PROCESS_ATTACH, returns FALSE."},{"pos":[569,577],"content":"Symptoms","linkify":"Symptoms","nodes":[{"content":"Symptoms","pos":[0,8]}]},{"content":"The <ph id=\"ph1\">`DllMain`</ph> function returned FALSE, indicating that it did not execute properly.","pos":[581,664],"source":"The `DllMain` function returned FALSE, indicating that it did not execute properly."},{"content":"This can cause undetermined issues because <ph id=\"ph1\">`DllMain`</ph> functions typically contain important initialization code.","pos":[665,776],"source":" This can cause undetermined issues because `DllMain` functions typically contain important initialization code."},{"pos":[785,790],"content":"Cause","linkify":"Cause","nodes":[{"content":"Cause","pos":[0,5]}]},{"content":"The <ph id=\"ph1\">`DllMain`</ph> function is called with reason DLL_PROCESS_ATTACH for DLL initialization upon load.","pos":[794,891],"source":"The `DllMain` function is called with reason DLL_PROCESS_ATTACH for DLL initialization upon load."},{"content":"If it returns FALSE, it means that DLL initialization failed.","pos":[892,953]},{"pos":[962,972],"content":"Resolution","linkify":"Resolution","nodes":[{"content":"Resolution","pos":[0,10]}]},{"pos":[976,1090],"content":"Analyze the code of the <ph id=\"ph1\">`DllMain`</ph> function of the failed DLL and identify the cause of the initialization failure.","source":"Analyze the code of the `DllMain` function of the failed DLL and identify the cause of the initialization failure."},{"pos":[1099,1120],"content":"Effect on the Runtime","linkify":"Effect on the Runtime","nodes":[{"content":"Effect on the Runtime","pos":[0,21]}]},{"content":"This MDA has no effect on the CLR.","pos":[1124,1158]},{"content":"It only reports data about the return value for <ph id=\"ph1\">`DllMain`</ph>.","pos":[1159,1217],"source":" It only reports data about the return value for `DllMain`."},{"pos":[1226,1232],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"A message indicating that a <ph id=\"ph1\">`DllMain`</ph> function, called for reason DLL_PROCESS_ATTACH, returned FALSE.","pos":[1236,1337],"source":"A message indicating that a `DllMain` function, called for reason DLL_PROCESS_ATTACH, returned FALSE."},{"content":"Note that this MDA is activated only if <ph id=\"ph1\">`DllMain`</ph> is implemented in managed code.","pos":[1338,1419],"source":" Note that this MDA is activated only if `DllMain` is implemented in managed code."},{"pos":[1428,1441],"content":"Configuration","linkify":"Configuration","nodes":[{"content":"Configuration","pos":[0,13]}]},{"pos":[1562,1570],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1574,1727],"content":"<bpt id=\"p1\">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept>","source":"[Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)"}]}