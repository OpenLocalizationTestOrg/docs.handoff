{"content":"---\ntitle: \"Comparisons and Sorts Within Collections | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"sorting data, collections\"\n  - \"IComparable.CompareTo method\"\n  - \"Collections classes\"\n  - \"Equals method\"\n  - \"collections [.NET Framework], comparisons\"\nms.assetid: 5e4d3b45-97f0-423c-a65f-c492ed40e73b\ncaps.latest.revision: 11\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# Comparisons and Sorts Within Collections\nThe <xref:System.Collections> classes perform comparisons in almost all the processes involved in managing collections, whether searching for the element to remove or returning the value of a key-and-value pair.  \n  \n Collections typically utilize an equality comparer and/or an ordering comparer. Two constructs are used for comparisons.  \n  \n<a name=\"BKMK_Checkingforequality\"></a>   \n## Checking for equality  \n Methods such as `Contains`, <xref:System.Collections.IList.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and `Remove` use an equality comparer for the collection elements. If the collection is generic, than items are compared for equality according to the following guidelines:  \n  \n-   If type T implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface.  \n  \n-   If type T does not implement <xref:System.IEquatable%601>, <xref:System.Object.Equals%2A?displayProperty=fullName> is used.  \n  \n In addition, Some constructor overloads for dictionary collections accept an <xref:System.Collections.Generic.IEqualityComparer%601> implementation, which is used to compare keys for equality. For an example, see the <xref:System.Collections.Generic.Dictionary%602.%23ctor%2A?displayProperty=fullName> constructor.  \n  \n<a name=\"BKMK_Determiningsortorder\"></a>   \n## Determining sort order  \n Methods such as `BinarySearch` and `Sort` use an ordering comparer for the collection elements. The comparisons can be between elements of the collection, or between an element and a specified value. For comparing objects, there is the concept of a `default comparer` and an `explicit comparer`.  \n  \n The default comparer relies on at least one of the objects being compared to implement the **IComparable** interface. It is a good practice to implement **IComparable** on all classes are used as values in a list collection or as keys in a dictionary collection. For a generic collection, equality comparison is determined according to the following:  \n  \n-   If type T implements the <xref:System.IComparable%601?displayProperty=fullName> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29?displayProperty=fullName> method of that interface  \n  \n-   If type T implements the non-generic <xref:System.IComparable?displayProperty=fullName> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29?displayProperty=fullName> method of that interface.  \n  \n-   If type T doesnâ€™t implement either interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.  \n  \n To provide explicit comparisons, some methods accept an **IComparer** implementation as a parameter. For example, the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> method accepts an <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation.  \n  \n The current culture setting of the system can affect the comparisons and sorts within a collection. By default, the comparisons and sorts in the **Collections** classes are culture-sensitive. To ignore the culture setting and therefore obtain consistent comparison and sorting results, use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> with member overloads that accept a <xref:System.Globalization.CultureInfo>. For more information, see [Performing Culture-Insensitive String Operations in Collections](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md) and [Performing Culture-Insensitive String Operations in Arrays](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md).  \n  \n<a name=\"BKMK_Equalityandsortexample\"></a>   \n## Equality and sort example  \n The following code demonstrates an implementation of <xref:System.IEquatable%601> and <xref:System.IComparable%601> on a simple business object. In addition, when the object is stored in a list and sorted, you will see that calling the <xref:System.Collections.Generic.List%601.Sort> method results in the use of the default comparer for the `Part` type, and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method implemented by using an anonymous method.  \n  \n [!code-csharp[System.Collections.Generic.List.Sort#1](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.Sort#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  \n  \n## See Also  \n <xref:System.Collections.IComparer>   \n <xref:System.IEquatable%601>   \n <xref:System.Collections.Generic.IComparer%601>   \n <xref:System.IComparable>   \n <xref:System.IComparable%601>","nodes":[{"pos":[4,534],"embed":true,"restype":"x-metadata","content":"title: \"Comparisons and Sorts Within Collections | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"sorting data, collections\"\n  - \"IComparable.CompareTo method\"\n  - \"Collections classes\"\n  - \"Equals method\"\n  - \"collections [.NET Framework], comparisons\"\nms.assetid: 5e4d3b45-97f0-423c-a65f-c492ed40e73b\ncaps.latest.revision: 11\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","nodes":[{"content":"Comparisons and Sorts Within Collections | Microsoft Docs","nodes":[{"pos":[0,57],"content":"Comparisons and Sorts Within Collections | Microsoft Docs","nodes":[{"content":"Comparisons and Sorts Within Collections | Microsoft Docs","pos":[0,57]}]}],"path":["title"]}],"yml":true},{"pos":[541,581],"content":"Comparisons and Sorts Within Collections","linkify":"Comparisons and Sorts Within Collections","nodes":[{"content":"Comparisons and Sorts Within Collections","pos":[0,40]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections&gt;</ph> classes perform comparisons in almost all the processes involved in managing collections, whether searching for the element to remove or returning the value of a key-and-value pair.","pos":[582,793],"source":"The <xref:System.Collections> classes perform comparisons in almost all the processes involved in managing collections, whether searching for the element to remove or returning the value of a key-and-value pair."},{"content":"Collections typically utilize an equality comparer and/or an ordering comparer.","pos":[800,879]},{"content":"Two constructs are used for comparisons.","pos":[880,920]},{"pos":[972,993],"content":"Checking for equality","linkify":"Checking for equality","nodes":[{"content":"Checking for equality","pos":[0,21]}]},{"content":"Methods such as <ph id=\"ph1\">`Contains`</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.IList.IndexOf%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>, and <ph id=\"ph4\">`Remove`</ph> use an equality comparer for the collection elements.","pos":[997,1194],"source":"Methods such as `Contains`, <xref:System.Collections.IList.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and `Remove` use an equality comparer for the collection elements."},{"content":"If the collection is generic, than items are compared for equality according to the following guidelines:","pos":[1195,1300]},{"content":"If type T implements the <ph id=\"ph1\">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, then the equality comparer is the <ph id=\"ph2\">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method of that interface.","pos":[1310,1481],"source":"If type T implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface."},{"content":"If type T does not implement <ph id=\"ph1\">&lt;xref:System.IEquatable%601&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph> is used.","pos":[1491,1614],"source":"If type T does not implement <xref:System.IEquatable%601>, <xref:System.Object.Equals%2A?displayProperty=fullName> is used."},{"content":"In addition, Some constructor overloads for dictionary collections accept an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> implementation, which is used to compare keys for equality.","pos":[1621,1813],"source":"In addition, Some constructor overloads for dictionary collections accept an <xref:System.Collections.Generic.IEqualityComparer%601> implementation, which is used to compare keys for equality."},{"content":"For an example, see the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%2A?displayProperty=fullName&gt;</ph> constructor.","pos":[1814,1935],"source":" For an example, see the <xref:System.Collections.Generic.Dictionary%602.%23ctor%2A?displayProperty=fullName> constructor."},{"pos":[1988,2010],"content":"Determining sort order","linkify":"Determining sort order","nodes":[{"content":"Determining sort order","pos":[0,22]}]},{"content":"Methods such as <ph id=\"ph1\">`BinarySearch`</ph> and <ph id=\"ph2\">`Sort`</ph> use an ordering comparer for the collection elements.","pos":[2014,2109],"source":"Methods such as `BinarySearch` and `Sort` use an ordering comparer for the collection elements."},{"content":"The comparisons can be between elements of the collection, or between an element and a specified value.","pos":[2110,2213]},{"content":"For comparing objects, there is the concept of a <ph id=\"ph1\">`default comparer`</ph> and an <ph id=\"ph2\">`explicit comparer`</ph>.","pos":[2214,2309],"source":" For comparing objects, there is the concept of a `default comparer` and an `explicit comparer`."},{"content":"The default comparer relies on at least one of the objects being compared to implement the <bpt id=\"p1\">**</bpt>IComparable<ept id=\"p1\">**</ept> interface.","pos":[2316,2433],"source":"The default comparer relies on at least one of the objects being compared to implement the **IComparable** interface."},{"content":"It is a good practice to implement <bpt id=\"p1\">**</bpt>IComparable<ept id=\"p1\">**</ept> on all classes are used as values in a list collection or as keys in a dictionary collection.","pos":[2434,2578],"source":" It is a good practice to implement **IComparable** on all classes are used as values in a list collection or as keys in a dictionary collection."},{"content":"For a generic collection, equality comparison is determined according to the following:","pos":[2579,2666]},{"content":"If type T implements the <ph id=\"ph1\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface, then the default comparer is the <ph id=\"ph2\">&lt;xref:System.IComparable%601.CompareTo%28%600%29?displayProperty=fullName&gt;</ph> method of that interface","pos":[2676,2907],"source":"If type T implements the <xref:System.IComparable%601?displayProperty=fullName> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29?displayProperty=fullName> method of that interface"},{"content":"If type T implements the non-generic <ph id=\"ph1\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface, then the default comparer is the <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%28System.Object%29?displayProperty=fullName&gt;</ph> method of that interface.","pos":[2917,3154],"source":"If type T implements the non-generic <xref:System.IComparable?displayProperty=fullName> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29?displayProperty=fullName> method of that interface."},{"content":"If type T doesnâ€™t implement either interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.","pos":[3164,3311]},{"content":"To provide explicit comparisons, some methods accept an <bpt id=\"p1\">**</bpt>IComparer<ept id=\"p1\">**</ept> implementation as a parameter.","pos":[3318,3418],"source":"To provide explicit comparisons, some methods accept an **IComparer** implementation as a parameter."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName&gt;</ph> method accepts an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=fullName&gt;</ph> implementation.","pos":[3419,3618],"source":" For example, the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> method accepts an <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation."},{"content":"The current culture setting of the system can affect the comparisons and sorts within a collection.","pos":[3625,3724]},{"content":"By default, the comparisons and sorts in the <bpt id=\"p1\">**</bpt>Collections<ept id=\"p1\">**</ept> classes are culture-sensitive.","pos":[3725,3816],"source":" By default, the comparisons and sorts in the **Collections** classes are culture-sensitive."},{"content":"To ignore the culture setting and therefore obtain consistent comparison and sorting results, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> with member overloads that accept a <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph>.","pos":[3817,4055],"source":" To ignore the culture setting and therefore obtain consistent comparison and sorting results, use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> with member overloads that accept a <xref:System.Globalization.CultureInfo>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Performing Culture-Insensitive String Operations in Collections<ept id=\"p1\">](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md)</ept> and <bpt id=\"p2\">[</bpt>Performing Culture-Insensitive String Operations in Arrays<ept id=\"p2\">](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md)</ept>.","pos":[4056,4444],"source":" For more information, see [Performing Culture-Insensitive String Operations in Collections](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md) and [Performing Culture-Insensitive String Operations in Arrays](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md)."},{"pos":[4499,4524],"content":"Equality and sort example","linkify":"Equality and sort example","nodes":[{"content":"Equality and sort example","pos":[0,25]}]},{"content":"The following code demonstrates an implementation of <ph id=\"ph1\">&lt;xref:System.IEquatable%601&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph> on a simple business object.","pos":[4528,4672],"source":"The following code demonstrates an implementation of <xref:System.IEquatable%601> and <xref:System.IComparable%601> on a simple business object."},{"content":"In addition, when the object is stored in a list and sorted, you will see that calling the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method results in the use of the default comparer for the <ph id=\"ph2\">`Part`</ph> type, and the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method implemented by using an anonymous method.","pos":[4673,5020],"source":" In addition, when the object is stored in a list and sorted, you will see that calling the <xref:System.Collections.Generic.List%601.Sort> method results in the use of the default comparer for the `Part` type, and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method implemented by using an anonymous method."},{"pos":[5367,5375],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}