{"content":"---\ntitle: \"Walkthrough: Creating a Custom Dataflow Block Type\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Task Parallel Library, dataflows\"\n  - \"TPL dataflow library, creating custom dataflow blocks\"\n  - \"dataflow blocks, creating custom in TPL\"\nms.assetid: a6147146-0a6a-4d9b-ab0f-237b3c1ac691\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Walkthrough: Creating a Custom Dataflow Block Type\nAlthough the TPL Dataflow Library provides several dataflow block types that enable a variety of functionality, you can also create custom block types. This document describes how to create a dataflow block type that implements custom behavior.  \n  \n## Prerequisites  \n Read [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md) before you read this document.  \n\n[!INCLUDE [tpl-install-instructions](../../../includes/tpl-install-instructions.md)]\n  \n## Defining the Sliding Window Dataflow Block  \n Consider a dataflow application that requires that input values be buffered and then output in a sliding window manner. For example, for the input values {0, 1, 2, 3, 4, 5} and a window size of three, a sliding window dataflow block produces the output arrays {0, 1, 2}, {1, 2, 3}, {2, 3, 4}, and {3, 4, 5}. The following sections describe two ways to create a dataflow block type that implements this custom behavior. The first technique uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method to combine the functionality of an <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> object and an <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> object into one propagator block. The second technique defines a class that derives from <xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602> and combines existing functionality to perform custom behavior.  \n  \n## Using the Encapsulate Method to Define the Sliding Window Dataflow Block  \n The following example uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method to create a propagator block from a target and a source. A propagator block enables a source block and a target block to act as a receiver and sender of data.  \n  \n This technique is useful when you require custom dataflow functionality, but you do not require a type that provides additional methods, properties, or fields.  \n  \n [!code-csharp[TPLDataflow_SlidingWindowBlock#1](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#1)]\n [!code-vb[TPLDataflow_SlidingWindowBlock#1](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#1)]  \n  \n## Deriving from IPropagatorBlock to Define the Sliding Window Dataflow Block  \n The following example shows the `SlidingWindowBlock` class. This class derives from <xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602> so that it can act as both a source and a target of data. As in the previous example, the `SlidingWindowBlock` class is built on existing dataflow block types. However, the `SlidingWindowBlock` class also implements the methods that are required by the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>, <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>, and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock> interfaces. These methods all forward work to the predefined dataflow block type members. For example, the `Post` method defers work to the `m_target` data member, which is also an <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> object.  \n  \n This technique is useful when you require custom dataflow functionality, and also require a type that provides additional methods, properties, or fields. For example, the `SlidingWindowBlock` class also derives from <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601> so that it can provide the <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> and <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceiveAll%2A> methods. The `SlidingWindowBlock` class also demonstrates extensibility by providing the `WindowSize` property, which retrieves the number of elements in the sliding window.  \n  \n [!code-csharp[TPLDataflow_SlidingWindowBlock#2](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#2)]\n [!code-vb[TPLDataflow_SlidingWindowBlock#2](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#2)]  \n  \n## The Complete Example  \n The following example shows the complete code for this walkthrough. It also demonstrates how to use the both sliding window blocks in a method that writes to the block, reads from it, and prints the results to the console.  \n  \n [!code-csharp[TPLDataflow_SlidingWindowBlock#100](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_slidingwindowblock/cs/slidingwindowblock.cs#100)]\n [!code-vb[TPLDataflow_SlidingWindowBlock#100](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_slidingwindowblock/vb/slidingwindowblock.vb#100)]  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `SlidingWindowBlock.cs` (`SlidingWindowBlock.vb` for Visual Basic) and then run the following command in a Developer Command Prompt for Visual Studio window.  \n  \n Visual C#  \n  \n **csc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.cs**  \n  \n Visual Basic  \n  \n **vbc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.vb**  \n\n## See also\n\n- [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)\n","nodes":[{"pos":[4,406],"embed":true,"restype":"x-metadata","content":"title: \"Walkthrough: Creating a Custom Dataflow Block Type\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Task Parallel Library, dataflows\"\n  - \"TPL dataflow library, creating custom dataflow blocks\"\n  - \"dataflow blocks, creating custom in TPL\"\nms.assetid: a6147146-0a6a-4d9b-ab0f-237b3c1ac691\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Walkthrough: Creating a Custom Dataflow Block Type","nodes":[{"pos":[0,50],"content":"Walkthrough: Creating a Custom Dataflow Block Type","nodes":[{"content":"Walkthrough: Creating a Custom Dataflow Block Type","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[413,463],"content":"Walkthrough: Creating a Custom Dataflow Block Type","linkify":"Walkthrough: Creating a Custom Dataflow Block Type","nodes":[{"content":"Walkthrough: Creating a Custom Dataflow Block Type","pos":[0,50]}]},{"content":"Although the TPL Dataflow Library provides several dataflow block types that enable a variety of functionality, you can also create custom block types.","pos":[464,615]},{"content":"This document describes how to create a dataflow block type that implements custom behavior.","pos":[616,708]},{"pos":[717,730],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[734,859],"content":"Read <bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept> before you read this document.","source":"Read [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md) before you read this document."},{"pos":[954,996],"content":"Defining the Sliding Window Dataflow Block","linkify":"Defining the Sliding Window Dataflow Block","nodes":[{"content":"Defining the Sliding Window Dataflow Block","pos":[0,42]}]},{"content":"Consider a dataflow application that requires that input values be buffered and then output in a sliding window manner.","pos":[1000,1119]},{"content":"For example, for the input values {0, 1, 2, 3, 4, 5} and a window size of three, a sliding window dataflow block produces the output arrays {0, 1, 2}, {1, 2, 3}, {2, 3, 4}, and {3, 4, 5}.","pos":[1120,1307]},{"content":"The following sections describe two ways to create a dataflow block type that implements this custom behavior.","pos":[1308,1418]},{"content":"The first technique uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A&gt;</ph> method to combine the functionality of an <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> object and an <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> object into one propagator block.","pos":[1419,1717],"source":" The first technique uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method to combine the functionality of an <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> object and an <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> object into one propagator block."},{"content":"The second technique defines a class that derives from <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602&gt;</ph> and combines existing functionality to perform custom behavior.","pos":[1718,1896],"source":" The second technique defines a class that derives from <xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602> and combines existing functionality to perform custom behavior."},{"pos":[1905,1977],"content":"Using the Encapsulate Method to Define the Sliding Window Dataflow Block","linkify":"Using the Encapsulate Method to Define the Sliding Window Dataflow Block","nodes":[{"content":"Using the Encapsulate Method to Define the Sliding Window Dataflow Block","pos":[0,72]}]},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A&gt;</ph> method to create a propagator block from a target and a source.","pos":[1981,2143],"source":"The following example uses the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method to create a propagator block from a target and a source."},{"content":"A propagator block enables a source block and a target block to act as a receiver and sender of data.","pos":[2144,2245]},{"content":"This technique is useful when you require custom dataflow functionality, but you do not require a type that provides additional methods, properties, or fields.","pos":[2252,2411]},{"pos":[2744,2818],"content":"Deriving from IPropagatorBlock to Define the Sliding Window Dataflow Block","linkify":"Deriving from IPropagatorBlock to Define the Sliding Window Dataflow Block","nodes":[{"content":"Deriving from IPropagatorBlock to Define the Sliding Window Dataflow Block","pos":[0,74]}]},{"content":"The following example shows the <ph id=\"ph1\">`SlidingWindowBlock`</ph> class.","pos":[2822,2881],"source":"The following example shows the `SlidingWindowBlock` class."},{"content":"This class derives from <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602&gt;</ph> so that it can act as both a source and a target of data.","pos":[2882,3023],"source":" This class derives from <xref:System.Threading.Tasks.Dataflow.IPropagatorBlock%602> so that it can act as both a source and a target of data."},{"content":"As in the previous example, the <ph id=\"ph1\">`SlidingWindowBlock`</ph> class is built on existing dataflow block types.","pos":[3024,3125],"source":" As in the previous example, the `SlidingWindowBlock` class is built on existing dataflow block types."},{"content":"However, the <ph id=\"ph1\">`SlidingWindowBlock`</ph> class also implements the methods that are required by the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Dataflow.IDataflowBlock&gt;</ph> interfaces.","pos":[3126,3402],"source":" However, the `SlidingWindowBlock` class also implements the methods that are required by the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>, <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>, and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock> interfaces."},{"content":"These methods all forward work to the predefined dataflow block type members.","pos":[3403,3480]},{"content":"For example, the <ph id=\"ph1\">`Post`</ph> method defers work to the <ph id=\"ph2\">`m_target`</ph> data member, which is also an <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> object.","pos":[3481,3635],"source":" For example, the `Post` method defers work to the `m_target` data member, which is also an <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> object."},{"content":"This technique is useful when you require custom dataflow functionality, and also require a type that provides additional methods, properties, or fields.","pos":[3642,3795]},{"content":"For example, the <ph id=\"ph1\">`SlidingWindowBlock`</ph> class also derives from <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601&gt;</ph> so that it can provide the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceiveAll%2A&gt;</ph> methods.","pos":[3796,4126],"source":" For example, the `SlidingWindowBlock` class also derives from <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601> so that it can provide the <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> and <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceiveAll%2A> methods."},{"content":"The <ph id=\"ph1\">`SlidingWindowBlock`</ph> class also demonstrates extensibility by providing the <ph id=\"ph2\">`WindowSize`</ph> property, which retrieves the number of elements in the sliding window.","pos":[4127,4291],"source":" The `SlidingWindowBlock` class also demonstrates extensibility by providing the `WindowSize` property, which retrieves the number of elements in the sliding window."},{"pos":[4624,4644],"content":"The Complete Example","linkify":"The Complete Example","nodes":[{"content":"The Complete Example","pos":[0,20]}]},{"content":"The following example shows the complete code for this walkthrough.","pos":[4648,4715]},{"content":"It also demonstrates how to use the both sliding window blocks in a method that writes to the block, reads from it, and prints the results to the console.","pos":[4716,4870]},{"pos":[5211,5229],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[5233,5489],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`SlidingWindowBlock.cs`</ph> (<ph id=\"ph2\">`SlidingWindowBlock.vb`</ph> for Visual Basic) and then run the following command in a Developer Command Prompt for Visual Studio window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `SlidingWindowBlock.cs` (`SlidingWindowBlock.vb` for Visual Basic) and then run the following command in a Developer Command Prompt for Visual Studio window."},{"content":"Visual C#","pos":[5496,5505]},{"pos":[5512,5584],"content":"<bpt id=\"p1\">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.cs<ept id=\"p1\">**</ept>","source":"**csc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.cs**"},{"content":"Visual Basic","pos":[5591,5603]},{"pos":[5610,5682],"content":"<bpt id=\"p1\">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.vb<ept id=\"p1\">**</ept>","source":"**vbc.exe /r:System.Threading.Tasks.Dataflow.dll SlidingWindowBlock.vb**"},{"pos":[5689,5697],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5701,5790],"content":"<bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept>","source":"[Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)"}]}