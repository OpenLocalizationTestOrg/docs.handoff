{"content":"---\ntitle: \"Asynchronous Programming Patterns | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"asynchronous design patterns, .NET Framework\"\n  - \".NET Framework, asynchronous design patterns\"\nms.assetid: 4ece5c0b-f8fe-4114-9862-ac02cfe5a5d7\ncaps.latest.revision: 5\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Asynchronous Programming Patterns\nThe .NET Framework provides three patterns for performing asynchronous operations:  \n  \n-   Asynchronous Programming Model (APM) pattern (also called the <xref:System.IAsyncResult> pattern), where asynchronous operations require `Begin` and `End` methods (for example, `BeginWrite` and `EndWrite` for asynchronous write operations). This pattern is no longer recommended for new development. For more information, see [Asynchronous Programming Model (APM)](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  \n  \n-   Event-based Asynchronous Pattern (EAP), which requires a method that has the `Async` suffix, and also requires one or more events, event handler delegate types, and `EventArg`-derived types. EAP was introduced in the .NET Framework 2.0. It is no longer recommended for new development. For more information, see [Event-based Asynchronous Pattern (EAP)](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).  \n  \n-   Task-based Asynchronous Pattern (TAP), which uses a single method to represent the initiation and completion of an asynchronous operation. TAP was introduced in the .NET Framework 4 and is the recommended approach to asynchronous programming in the .NET Framework. The [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) keywords in C# and the [Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) operators in Visual Basic Language add language support for TAP. For more information, see [Task-based Asynchronous Pattern (TAP)](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).  \n  \n## Comparing Patterns  \n For a quick comparison of how the three patterns model asynchronous operations, consider a `Read` method that reads a specified amount of data into a provided buffer starting at a specified offset:  \n  \n```csharp  \npublic class MyClass  \n{  \n    public int Read(byte [] buffer, int offset, int count);  \n}  \n```  \n  \n The APM counterpart of this method would expose the `BeginRead` and `EndRead` methods:  \n  \n```csharp  \npublic class MyClass  \n{  \n    public IAsyncResult BeginRead(  \n        byte [] buffer, int offset, int count,   \n        AsyncCallback callback, object state);  \n    public int EndRead(IAsyncResult asyncResult);  \n}  \n```  \n  \n The EAP counterpart would expose the following set of types and members:  \n  \n```csharp  \npublic class MyClass  \n{  \n    public void ReadAsync(byte [] buffer, int offset, int count);  \n    public event ReadCompletedEventHandler ReadCompleted;  \n}  \n```  \n  \n The TAP counterpart would expose the following single `ReadAsync` method:  \n  \n```csharp  \npublic class MyClass  \n{  \n    public Task<int> ReadAsync(byte [] buffer, int offset, int count);  \n}  \n```  \n  \n For a comprehensive discussion of TAP, APM, and EAP, see the links provided in the next section.  \n  \n## Related Topics  \n  \n|Title|Description|  \n|-----------|-----------------|  \n|[Asynchronous Programming Model (APM)](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)|Describes the legacy model that uses the <xref:System.IAsyncResult> interface to provide asynchronous behavior. This model is no longer recommended for new development.|  \n|[Event-based Asynchronous Pattern (EAP)](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)|Describes the event-based legacy model for providing asynchronous behavior. This model is no longer recommended for new development.|  \n|[Task-based Asynchronous Pattern (TAP)](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)|Describes the new asynchronous pattern based on the <xref:System.Threading.Tasks> namespace. This model is the recommended approach to asynchronous programming in the .NET Framework 4 and later versions.|","nodes":[{"pos":[12,62],"content":"Asynchronous Programming Patterns | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Asynchronous Programming Patterns | Microsoft Docs","pos":[0,50]}]},{"pos":[477,510],"content":"Asynchronous Programming Patterns","linkify":"Asynchronous Programming Patterns","nodes":[{"content":"Asynchronous Programming Patterns","pos":[0,33]}]},{"content":"The .NET Framework provides three patterns for performing asynchronous operations:","pos":[511,593]},{"content":"Asynchronous Programming Model (APM) pattern (also called the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> pattern), where asynchronous operations require <ph id=\"ph2\">`Begin`</ph> and <ph id=\"ph3\">`End`</ph> methods (for example, <ph id=\"ph4\">`BeginWrite`</ph> and <ph id=\"ph5\">`EndWrite`</ph> for asynchronous write operations).","pos":[603,843],"source":"Asynchronous Programming Model (APM) pattern (also called the <xref:System.IAsyncResult> pattern), where asynchronous operations require `Begin` and `End` methods (for example, `BeginWrite` and `EndWrite` for asynchronous write operations)."},{"content":"This pattern is no longer recommended for new development.","pos":[844,902]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Programming Model (APM)<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)</ept>.","pos":[903,1064],"source":" For more information, see [Asynchronous Programming Model (APM)](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)."},{"content":"Event-based Asynchronous Pattern (EAP), which requires a method that has the <ph id=\"ph1\">`Async`</ph> suffix, and also requires one or more events, event handler delegate types, and <ph id=\"ph2\">`EventArg`</ph>-derived types.","pos":[1074,1264],"source":"Event-based Asynchronous Pattern (EAP), which requires a method that has the `Async` suffix, and also requires one or more events, event handler delegate types, and `EventArg`-derived types."},{"content":"EAP was introduced in the .NET Framework 2.0.","pos":[1265,1310]},{"content":"It is no longer recommended for new development.","pos":[1311,1359]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept>.","pos":[1360,1525],"source":" For more information, see [Event-based Asynchronous Pattern (EAP)](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)."},{"content":"Task-based Asynchronous Pattern (TAP), which uses a single method to represent the initiation and completion of an asynchronous operation.","pos":[1535,1673]},{"content":"TAP was introduced in the .NET Framework 4 and is the recommended approach to asynchronous programming in the .NET Framework.","pos":[1674,1799]},{"content":"The <bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/async.md)</ept> and <bpt id=\"p2\">[</bpt>await<ept id=\"p2\">](~/docs/csharp/language-reference/keywords/await.md)</ept> keywords in C# and the <bpt id=\"p3\">[</bpt>Async<ept id=\"p3\">](~/docs/visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id=\"p4\">[</bpt>Await<ept id=\"p4\">](~/docs/visual-basic/language-reference/operators/await-operator.md)</ept> operators in Visual Basic Language add language support for TAP.","pos":[1800,2162],"source":" The [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) keywords in C# and the [Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) operators in Visual Basic Language add language support for TAP."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept>.","pos":[2163,2326],"source":" For more information, see [Task-based Asynchronous Pattern (TAP)](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)."},{"pos":[2335,2353],"content":"Comparing Patterns","linkify":"Comparing Patterns","nodes":[{"content":"Comparing Patterns","pos":[0,18]}]},{"pos":[2357,2554],"content":"For a quick comparison of how the three patterns model asynchronous operations, consider a <ph id=\"ph1\">`Read`</ph> method that reads a specified amount of data into a provided buffer starting at a specified offset:","source":"For a quick comparison of how the three patterns model asynchronous operations, consider a `Read` method that reads a specified amount of data into a provided buffer starting at a specified offset:"},{"pos":[2675,2761],"content":"The APM counterpart of this method would expose the <ph id=\"ph1\">`BeginRead`</ph> and <ph id=\"ph2\">`EndRead`</ph> methods:","source":"The APM counterpart of this method would expose the `BeginRead` and `EndRead` methods:"},{"content":"The EAP counterpart would expose the following set of types and members:","pos":[3008,3080]},{"pos":[3267,3340],"content":"The TAP counterpart would expose the following single <ph id=\"ph1\">`ReadAsync`</ph> method:","source":"The TAP counterpart would expose the following single `ReadAsync` method:"},{"content":"For a comprehensive discussion of TAP, APM, and EAP, see the links provided in the next section.","pos":[3472,3568]},{"pos":[3577,3591],"content":"Related Topics","linkify":"Related Topics","nodes":[{"content":"Related Topics","pos":[0,14]}]},{"content":"Title","pos":[3598,3603]},{"content":"Description","pos":[3604,3615]},{"pos":[3654,3788],"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming Model (APM)<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)</ept>","source":"[Asynchronous Programming Model (APM)](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)"},{"content":"Describes the legacy model that uses the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> interface to provide asynchronous behavior.","pos":[3789,3900],"source":"Describes the legacy model that uses the <xref:System.IAsyncResult> interface to provide asynchronous behavior."},{"content":"This model is no longer recommended for new development.","pos":[3901,3957]},{"pos":[3962,4100],"content":"<bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept>","source":"[Event-based Asynchronous Pattern (EAP)](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)"},{"content":"Describes the event-based legacy model for providing asynchronous behavior.","pos":[4101,4176]},{"content":"This model is no longer recommended for new development.","pos":[4177,4233]},{"pos":[4238,4374],"content":"<bpt id=\"p1\">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept>","source":"[Task-based Asynchronous Pattern (TAP)](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)"},{"content":"Describes the new asynchronous pattern based on the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks&gt;</ph> namespace.","pos":[4375,4467],"source":"Describes the new asynchronous pattern based on the <xref:System.Threading.Tasks> namespace."},{"content":"This model is the recommended approach to asynchronous programming in the .NET Framework 4 and later versions.","pos":[4468,4578]}]}