{"content":"---\ntitle: Introduction to Events\ndescription: Learn about events in .NET Core and our language design goals for events in this overview.\nms.date: 06/20/2016\nms.assetid: 9b8d2a00-1584-4a5b-8994-5003d54d8e0c\n---\n\n# Introduction to Events\n\n[Previous](delegates-patterns.md)\n\nEvents are, like delegates, a *late binding* mechanism. In fact,\nevents are built on the language support for delegates.\n\nEvents are a way for an object to broadcast (to all interested\ncomponents in the system) that something has happened. Any other\ncomponent can subscribe to the event, and be notified when an event\nis raised.\n\nYou've probably used events in some of your programming. Many graphical\nsystems have an event model to report user interaction. These events would\nreport mouse movement, button presses and similar interactions. That's one\nof the most common, but certainly not the only scenario where events are\nused.\n\nYou can define events that should be raised for your classes. One important\nconsideration when working with events is that there may not be any\nobject registered for a particular event. You must write your code so that\nit does not raise events when no listeners are configured.\n\nSubscribing to an event also creates a coupling between two objects (the event\nsource, and the event sink). You need to ensure that the event sink unsubscribes\nfrom the event source when no longer interested in events.\n\n## Design Goals for Event Support\n\nThe language design for events targets these goals.\n\nFirst, enable very minimal\ncoupling between an event source and an event sink. These two components may\nnot be written by the same organization, and may even be updated on totally\ndifferent schedules.\n\nSecondly, it should be very simple to subscribe to an event, and to\nunsubscribe from that same event.\n\nAnd finally, event sources should support multiple event subscribers. It should\nalso support having no event subscribers attached.\n\nYou can see that the goals for events are very similar to the goals for delegates.\nThat's why the event language support is built on the delegate language support.\n\n## Language Support for Events\n\nThe syntax for defining events, and subscribing or unsubscribing from events is\nan extension of the syntax for delegates.\n\nTo define an event you use the `event` keyword:\n\n```csharp\npublic event EventHandler<FileListArgs> Progress;\n```\n\nThe type of the event (`EventHandler<FileListArgs>` in this example) must be a\ndelegate type. There are a number of conventions that you should follow\nwhen declaring an event. Typically, the event delegate type has a void return.\nEvent declarations should be a verb, or a verb phrase.\nUse past tense (as in this example) when\nthe event reports something that has happened. Use a present tense verb (for\nexample, `Closing`) to report something that is about to happen. Often, using\npresent tense indicates that your class supports some kind of customization\nbehavior. One of the most common scenarios is to support cancellation. For example,\na `Closing` event may include an argument that would indicate if the close\noperation should continue, or not.  Other scenarios may enable callers to modify\nbehavior by updating properties of the event arguments. You may raise an\nevent to indicate a proposed next action an algorithm will take. The event\nhandler may mandate a different action by modifying  properties of the event\nargument.\n\nWhen you want to raise the event, you call the event handlers using the delegate invocation\nsyntax:\n\n```csharp\nProgress?.Invoke(this, new FileListArgs(file));\n```\n\nAs discussed in the section on [delegates](delegates-patterns.md), the ?.\noperator makes it easy to ensure that you do not attempt to raise the event\nwhen there are no subscribers to that event.\n \nYou subscribe to an event by using the `+=` operator:\n\n```csharp\nEventHandler<FileListArgs> onProgress = (sender, eventArgs) => \n    Console.WriteLine(eventArgs.FoundFile);\nlister.Progress += onProgress;\n```\n\nThe handler method typically is the prefix 'On' followed\nby the event name, as shown above.\n\nYou unsubscribe using the `-=` operator:\n\n```csharp\nlister.Progress -= onProgress;\n```\n\nIt's important to note that I declared a local variable for the expression that\nrepresents the event handler. That ensures the unsubscribe removes the handler.\nIf, instead, you used the body of the lambda expression, you are attempting\nto remove a handler that has never been attached, which does nothing.\n\nIn the next article, you'll learn more about typical event patterns, and\ndifferent variations on this example.\n\n[Next](event-pattern.md)\n","nodes":[{"pos":[4,206],"embed":true,"restype":"x-metadata","content":"title: Introduction to Events\ndescription: Learn about events in .NET Core and our language design goals for events in this overview.\nms.date: 06/20/2016\nms.assetid: 9b8d2a00-1584-4a5b-8994-5003d54d8e0c","nodes":[{"content":"Introduction to Events","nodes":[{"pos":[0,22],"content":"Introduction to Events","nodes":[{"content":"Introduction to Events","pos":[0,22]}]}],"path":["title"],"nosxs":false},{"content":"Learn about events in .NET Core and our language design goals for events in this overview.","nodes":[{"pos":[0,90],"content":"Learn about events in .NET Core and our language design goals for events in this overview.","nodes":[{"content":"Learn about events in .NET Core and our language design goals for events in this overview.","pos":[0,90]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[214,236],"content":"Introduction to Events","linkify":"Introduction to Events","nodes":[{"content":"Introduction to Events","pos":[0,22]}]},{"pos":[238,271],"content":"<bpt id=\"p1\">[</bpt>Previous<ept id=\"p1\">](delegates-patterns.md)</ept>","source":"[Previous](delegates-patterns.md)"},{"content":"Events are, like delegates, a <bpt id=\"p1\">*</bpt>late binding<ept id=\"p1\">*</ept> mechanism.","pos":[273,328],"source":"Events are, like delegates, a *late binding* mechanism."},{"content":"In fact, events are built on the language support for delegates.","pos":[329,393],"source":" In fact,\nevents are built on the language support for delegates."},{"content":"Events are a way for an object to broadcast (to all interested components in the system) that something has happened.","pos":[395,512],"source":"Events are a way for an object to broadcast (to all interested\ncomponents in the system) that something has happened."},{"content":"Any other component can subscribe to the event, and be notified when an event is raised.","pos":[513,601],"source":" Any other\ncomponent can subscribe to the event, and be notified when an event\nis raised."},{"content":"You've probably used events in some of your programming.","pos":[603,659]},{"content":"Many graphical systems have an event model to report user interaction.","pos":[660,730],"source":" Many graphical\nsystems have an event model to report user interaction."},{"content":"These events would report mouse movement, button presses and similar interactions.","pos":[731,813],"source":" These events would\nreport mouse movement, button presses and similar interactions."},{"content":"That's one of the most common, but certainly not the only scenario where events are used.","pos":[814,903],"source":" That's one\nof the most common, but certainly not the only scenario where events are\nused."},{"content":"You can define events that should be raised for your classes.","pos":[905,966]},{"content":"One important consideration when working with events is that there may not be any object registered for a particular event.","pos":[967,1090],"source":" One important\nconsideration when working with events is that there may not be any\nobject registered for a particular event."},{"content":"You must write your code so that it does not raise events when no listeners are configured.","pos":[1091,1182],"source":" You must write your code so that\nit does not raise events when no listeners are configured."},{"content":"Subscribing to an event also creates a coupling between two objects (the event source, and the event sink).","pos":[1184,1291],"source":"Subscribing to an event also creates a coupling between two objects (the event\nsource, and the event sink)."},{"content":"You need to ensure that the event sink unsubscribes from the event source when no longer interested in events.","pos":[1292,1402],"source":" You need to ensure that the event sink unsubscribes\nfrom the event source when no longer interested in events."},{"pos":[1407,1437],"content":"Design Goals for Event Support","linkify":"Design Goals for Event Support","nodes":[{"content":"Design Goals for Event Support","pos":[0,30]}]},{"content":"The language design for events targets these goals.","pos":[1439,1490]},{"content":"First, enable very minimal coupling between an event source and an event sink.","pos":[1492,1570],"source":"First, enable very minimal\ncoupling between an event source and an event sink."},{"content":"These two components may not be written by the same organization, and may even be updated on totally different schedules.","pos":[1571,1692],"source":" These two components may\nnot be written by the same organization, and may even be updated on totally\ndifferent schedules."},{"pos":[1694,1795],"content":"Secondly, it should be very simple to subscribe to an event, and to unsubscribe from that same event.","source":"Secondly, it should be very simple to subscribe to an event, and to\nunsubscribe from that same event."},{"content":"And finally, event sources should support multiple event subscribers.","pos":[1797,1866]},{"content":"It should also support having no event subscribers attached.","pos":[1867,1927],"source":" It should\nalso support having no event subscribers attached."},{"content":"You can see that the goals for events are very similar to the goals for delegates.","pos":[1929,2011]},{"content":"That's why the event language support is built on the delegate language support.","pos":[2012,2092],"source":"\nThat's why the event language support is built on the delegate language support."},{"pos":[2097,2124],"content":"Language Support for Events","linkify":"Language Support for Events","nodes":[{"content":"Language Support for Events","pos":[0,27]}]},{"pos":[2126,2247],"content":"The syntax for defining events, and subscribing or unsubscribing from events is an extension of the syntax for delegates.","source":"The syntax for defining events, and subscribing or unsubscribing from events is\nan extension of the syntax for delegates."},{"pos":[2249,2296],"content":"To define an event you use the <ph id=\"ph1\">`event`</ph> keyword:","source":"To define an event you use the `event` keyword:"},{"content":"The type of the event (<ph id=\"ph1\">`EventHandler&lt;FileListArgs&gt;`</ph> in this example) must be a delegate type.","pos":[2363,2456],"source":"The type of the event (`EventHandler<FileListArgs>` in this example) must be a\ndelegate type."},{"content":"There are a number of conventions that you should follow when declaring an event.","pos":[2457,2538],"source":" There are a number of conventions that you should follow\nwhen declaring an event."},{"content":"Typically, the event delegate type has a void return.","pos":[2539,2592]},{"content":"Event declarations should be a verb, or a verb phrase.","pos":[2593,2647],"source":"\nEvent declarations should be a verb, or a verb phrase."},{"content":"Use past tense (as in this example) when the event reports something that has happened.","pos":[2648,2735],"source":"\nUse past tense (as in this example) when\nthe event reports something that has happened."},{"content":"Use a present tense verb (for example, <ph id=\"ph1\">`Closing`</ph>) to report something that is about to happen.","pos":[2736,2830],"source":" Use a present tense verb (for\nexample, `Closing`) to report something that is about to happen."},{"content":"Often, using present tense indicates that your class supports some kind of customization behavior.","pos":[2831,2929],"source":" Often, using\npresent tense indicates that your class supports some kind of customization\nbehavior."},{"content":"One of the most common scenarios is to support cancellation.","pos":[2930,2990]},{"content":"For example, a <ph id=\"ph1\">`Closing`</ph> event may include an argument that would indicate if the close operation should continue, or not.","pos":[2991,3113],"source":" For example,\na `Closing` event may include an argument that would indicate if the close\noperation should continue, or not."},{"content":"Other scenarios may enable callers to modify behavior by updating properties of the event arguments.","pos":[3115,3215],"source":"  Other scenarios may enable callers to modify\nbehavior by updating properties of the event arguments."},{"content":"You may raise an event to indicate a proposed next action an algorithm will take.","pos":[3216,3297],"source":" You may raise an\nevent to indicate a proposed next action an algorithm will take."},{"content":"The event handler may mandate a different action by modifying  properties of the event argument.","pos":[3298,3394],"source":" The event\nhandler may mandate a different action by modifying  properties of the event\nargument."},{"pos":[3396,3495],"content":"When you want to raise the event, you call the event handlers using the delegate invocation syntax:","source":"When you want to raise the event, you call the event handlers using the delegate invocation\nsyntax:"},{"content":"As discussed in the section on <bpt id=\"p1\">[</bpt>delegates<ept id=\"p1\">](delegates-patterns.md)</ept>, the ?.","pos":[3560,3633],"source":"As discussed in the section on [delegates](delegates-patterns.md), the ?."},{"content":"operator makes it easy to ensure that you do not attempt to raise the event when there are no subscribers to that event.","pos":[3634,3754],"source":"\noperator makes it easy to ensure that you do not attempt to raise the event\nwhen there are no subscribers to that event."},{"pos":[3757,3810],"content":"You subscribe to an event by using the <ph id=\"ph1\">`+=`</ph> operator:","source":"You subscribe to an event by using the `+=` operator:"},{"pos":[3966,4057],"content":"The handler method typically is the prefix 'On' followed by the event name, as shown above.","source":"The handler method typically is the prefix 'On' followed\nby the event name, as shown above."},{"pos":[4059,4099],"content":"You unsubscribe using the <ph id=\"ph1\">`-=`</ph> operator:","source":"You unsubscribe using the `-=` operator:"},{"content":"It's important to note that I declared a local variable for the expression that represents the event handler.","pos":[4147,4256],"source":"It's important to note that I declared a local variable for the expression that\nrepresents the event handler."},{"content":"That ensures the unsubscribe removes the handler.","pos":[4257,4306]},{"content":"If, instead, you used the body of the lambda expression, you are attempting to remove a handler that has never been attached, which does nothing.","pos":[4307,4452],"source":"\nIf, instead, you used the body of the lambda expression, you are attempting\nto remove a handler that has never been attached, which does nothing."},{"pos":[4454,4564],"content":"In the next article, you'll learn more about typical event patterns, and different variations on this example.","source":"In the next article, you'll learn more about typical event patterns, and\ndifferent variations on this example."},{"pos":[4566,4590],"content":"<bpt id=\"p1\">[</bpt>Next<ept id=\"p1\">](event-pattern.md)</ept>","source":"[Next](event-pattern.md)"}]}