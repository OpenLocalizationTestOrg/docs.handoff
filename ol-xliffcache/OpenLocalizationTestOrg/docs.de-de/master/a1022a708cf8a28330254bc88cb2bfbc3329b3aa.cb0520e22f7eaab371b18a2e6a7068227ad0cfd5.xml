{"content":"---\ntitle: \"Compiler Warning (level 1) CS1956\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1956\"\nhelpviewer_keywords: \n  - \"CS1956\"\nms.assetid: 841f8b2b-692b-49ae-a587-a40797cf9797\n---\n# Compiler Warning (level 1) CS1956\nMember 'name' implements interface member 'name' in type 'type'. There are multiple matches for the interface member at run-time. It is implementation dependent which method will be called.  \n  \n This warning can be generated when two interface methods are differentiated only by whether a particular parameter is marked with `ref` or with `out`. It is best to change your code to avoid this warning because it is not obvious or guaranteed which method is called at runtime.  \n  \n Although C# distinguishes between `out` and `ref`, the CLR sees them as the same. When deciding which method implements the interface, the CLR just picks one.  \n  \n### To avoid this warning  \n  \n1.  Give the compiler some way to differentiate the methods. For example, you can give them different names or provide an additional parameter on one of them.  \n  \n## Example  \n The following code generates CS1956 because the two `Test` methods in `Base` differ only by the `ref`/`out` modifier on the first parameter.  \n  \n```csharp  \n// cs1956.cs  \nclass Base<T, S>  \n{  \n    // This is the method that should be called.  \n    public virtual int Test(out T x) // CS1956  \n    {  \n        x = default(T);  \n        return 0;  \n    }  \n  \n    // This is the \"last\" method and is the one that ends up being called  \n    public virtual int Test(ref S x)  \n    {  \n        return 1;  \n    }  \n}  \n  \ninterface IFace  \n{  \n    int Test(out int x);  \n}  \n  \nclass Derived : Base<int, int>, IFace  \n{  \n    static int Main()  \n    {  \n        IFace x = new Derived();  \n        int y;  \n        return x.Test(out y);  \n    }  \n}  \n```\n","nodes":[{"pos":[4,177],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Warning (level 1) CS1956\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1956\"\nhelpviewer_keywords: \n  - \"CS1956\"\nms.assetid: 841f8b2b-692b-49ae-a587-a40797cf9797","nodes":[{"content":"Compiler Warning (level 1) CS1956","nodes":[{"pos":[0,33],"content":"Compiler Warning (level 1) CS1956","nodes":[{"content":"Compiler Warning (level 1) CS1956","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[184,217],"content":"Compiler Warning (level 1) CS1956","linkify":"Compiler Warning (level 1) CS1956","nodes":[{"content":"Compiler Warning (level 1) CS1956","pos":[0,33]}]},{"content":"Member 'name' implements interface member 'name' in type 'type'.","pos":[218,282]},{"content":"There are multiple matches for the interface member at run-time.","pos":[283,347]},{"content":"It is implementation dependent which method will be called.","pos":[348,407]},{"content":"This warning can be generated when two interface methods are differentiated only by whether a particular parameter is marked with <ph id=\"ph1\">`ref`</ph> or with <ph id=\"ph2\">`out`</ph>.","pos":[414,564],"source":"This warning can be generated when two interface methods are differentiated only by whether a particular parameter is marked with `ref` or with `out`."},{"content":"It is best to change your code to avoid this warning because it is not obvious or guaranteed which method is called at runtime.","pos":[565,692]},{"content":"Although C# distinguishes between <ph id=\"ph1\">`out`</ph> and <ph id=\"ph2\">`ref`</ph>, the CLR sees them as the same.","pos":[699,780],"source":"Although C# distinguishes between `out` and `ref`, the CLR sees them as the same."},{"content":"When deciding which method implements the interface, the CLR just picks one.","pos":[781,857]},{"pos":[867,888],"content":"To avoid this warning","linkify":"To avoid this warning","nodes":[{"content":"To avoid this warning","pos":[0,21]}]},{"content":"Give the compiler some way to differentiate the methods.","pos":[898,954]},{"content":"For example, you can give them different names or provide an additional parameter on one of them.","pos":[955,1052]},{"pos":[1061,1068],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1072,1212],"content":"The following code generates CS1956 because the two <ph id=\"ph1\">`Test`</ph> methods in <ph id=\"ph2\">`Base`</ph> differ only by the <ph id=\"ph3\">`ref`</ph><ph id=\"ph4\">/</ph><ph id=\"ph5\">`out`</ph> modifier on the first parameter.","source":"The following code generates CS1956 because the two `Test` methods in `Base` differ only by the `ref`/`out` modifier on the first parameter."}]}