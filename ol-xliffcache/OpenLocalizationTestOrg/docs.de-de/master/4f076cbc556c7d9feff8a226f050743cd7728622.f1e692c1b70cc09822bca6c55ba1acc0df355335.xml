{"content":"---\ntitle: \"exceptionSwallowedOnCallFromCom MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"messages, informational\"\n  - \"informational messages\"\n  - \"managed debugging assistants (MDAs), exceptions\"\n  - \"exception handling, managed debugging assistants\"\n  - \"MDAs (managed debugging assistants), exceptions\"\n  - \"ExceptionSwallowedOnCallFromCOM MDA\"\nms.assetid: 55d6ab12-f251-4aab-aa64-aacbe9d9f974\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# exceptionSwallowedOnCallFromCom MDA\nThe `exceptionSwallowedOnCallFromCOM` managed debugging assistant (MDA) is activated when an exception is thrown from common language runtime (CLR) code called from COM via a method that does not have an unmanaged HRESULT return type.  \n  \n## Symptoms  \n A call to a managed component from COM returns with a value of FALSE or 0. Alternatively, if the method has a void return type, there may be no indication that an exception was thrown during the execution of the method. In this case, the exception will be silently caught and execution will return to the COM caller.  \n  \n## Cause  \n An exception was thrown, but there is no valid way to report it.  \n  \n## Resolution  \n Informational only, not necessarily indicative of a bug.  \n  \n## Effect on the Runtime  \n This MDA has no effect on the CLR. It only reports data about silently caught exceptions.  \n  \n## Output  \n Informational message containing the method name, type name, and exception message.  \n  \n## Configuration  \n  \n```xml  \n<mdaConfig>  \n  <assistants>  \n    <exceptionSwallowedOnCallFromCom />  \n  </assistants>  \n</mdaConfig>  \n```  \n  \n## See also\n\n- <xref:System.Runtime.InteropServices.MarshalAsAttribute>\n- [Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)\n- [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)\n","nodes":[{"pos":[4,442],"embed":true,"restype":"x-metadata","content":"title: \"exceptionSwallowedOnCallFromCom MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"messages, informational\"\n  - \"informational messages\"\n  - \"managed debugging assistants (MDAs), exceptions\"\n  - \"exception handling, managed debugging assistants\"\n  - \"MDAs (managed debugging assistants), exceptions\"\n  - \"ExceptionSwallowedOnCallFromCOM MDA\"\nms.assetid: 55d6ab12-f251-4aab-aa64-aacbe9d9f974\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"exceptionSwallowedOnCallFromCom MDA","nodes":[{"pos":[0,35],"content":"exceptionSwallowedOnCallFromCom MDA","nodes":[{"content":"exceptionSwallowedOnCallFromCom MDA","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[449,484],"content":"exceptionSwallowedOnCallFromCom MDA","linkify":"exceptionSwallowedOnCallFromCom MDA","nodes":[{"content":"exceptionSwallowedOnCallFromCom MDA","pos":[0,35]}]},{"pos":[485,719],"content":"The <ph id=\"ph1\">`exceptionSwallowedOnCallFromCOM`</ph> managed debugging assistant (MDA) is activated when an exception is thrown from common language runtime (CLR) code called from COM via a method that does not have an unmanaged HRESULT return type.","source":"The `exceptionSwallowedOnCallFromCOM` managed debugging assistant (MDA) is activated when an exception is thrown from common language runtime (CLR) code called from COM via a method that does not have an unmanaged HRESULT return type."},{"pos":[728,736],"content":"Symptoms","linkify":"Symptoms","nodes":[{"content":"Symptoms","pos":[0,8]}]},{"content":"A call to a managed component from COM returns with a value of FALSE or 0.","pos":[740,814]},{"content":"Alternatively, if the method has a void return type, there may be no indication that an exception was thrown during the execution of the method.","pos":[815,959]},{"content":"In this case, the exception will be silently caught and execution will return to the COM caller.","pos":[960,1056]},{"pos":[1065,1070],"content":"Cause","linkify":"Cause","nodes":[{"content":"Cause","pos":[0,5]}]},{"content":"An exception was thrown, but there is no valid way to report it.","pos":[1074,1138]},{"pos":[1147,1157],"content":"Resolution","linkify":"Resolution","nodes":[{"content":"Resolution","pos":[0,10]}]},{"content":"Informational only, not necessarily indicative of a bug.","pos":[1161,1217]},{"pos":[1226,1247],"content":"Effect on the Runtime","linkify":"Effect on the Runtime","nodes":[{"content":"Effect on the Runtime","pos":[0,21]}]},{"content":"This MDA has no effect on the CLR.","pos":[1251,1285]},{"content":"It only reports data about silently caught exceptions.","pos":[1286,1340]},{"pos":[1349,1355],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"Informational message containing the method name, type name, and exception message.","pos":[1359,1442]},{"pos":[1451,1464],"content":"Configuration","linkify":"Configuration","nodes":[{"content":"Configuration","pos":[0,13]}]},{"pos":[1597,1605],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1668,1821],"content":"<bpt id=\"p1\">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept>","source":"[Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)"},{"pos":[1824,1899],"content":"<bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](../../../docs/framework/interop/interop-marshaling.md)</ept>","source":"[Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)"}]}