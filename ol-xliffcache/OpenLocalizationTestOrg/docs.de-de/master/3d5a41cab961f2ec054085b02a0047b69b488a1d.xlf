<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d5a41cab961f2ec054085b02a0047b69b488a1d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba47fe6ee88273365b711f4186286650caf771ec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16b063b5ba1bf660c79b447e990b920334874341</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Make Multiple Web Requests in Parallel by Using Async and Await (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Make Multiple Web Requests in Parallel by Using Async and Await (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In an async method, tasks are started when they’re created.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Await<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator is applied to the task at the point in the method where processing can’t continue until the task finishes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Often a task is awaited as soon as it’s created, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, you can separate creating the task from awaiting the task if your program has other work to accomplish that doesn’t depend on the completion of the task.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Between starting a task and awaiting it, you can start other tasks.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The additional tasks implicitly run in parallel, but no additional threads are created.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following program starts three asynchronous web downloads and then awaits them in the order in which they’re called.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Notice, when you run the program, that the tasks don’t always finish in the order in which they’re created and awaited.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>They start to run when they’re created, and one or more of the tasks might finish before the method reaches the await expressions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To complete this project, you must have Visual Studio 2012 or higher and the .NET Framework 4.5 or higher installed on your computer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For another example that starts multiple tasks at the same time, see <bpt id="p1">[</bpt>How to: Extend the Async Walkthrough by Using Task.WhenAll (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can download the code for this example from <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](https://code.msdn.microsoft.com/Async-Make-Multiple-Web-49adb82e)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To set up the project</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To set up a WPF application, complete the following steps.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can find detailed instructions for these steps in <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Create a WPF application that contains a text box and a button.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name the button <ph id="ph1">`startButton`</ph>, and name the text box <ph id="ph2">`resultsTextBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add a reference for <ph id="ph1">&lt;xref:System.Net.Http&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the MainWindow.xaml.vb file, add an <ph id="ph1">`Imports`</ph> statement for <ph id="ph2">`System.Net.Http`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To add the code</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the design window, MainWindow.xaml, double-click the button to create the <ph id="ph1">`startButton_Click`</ph> event handler in MainWindow.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Copy the following code, and paste it into the body of <ph id="ph1">`startButton_Click`</ph> in MainWindow.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The code calls an asynchronous method, <ph id="ph1">`CreateMultipleTasksAsync`</ph>, which drives the application.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add the following support methods to the project:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ProcessURLAsync`</ph> uses an <ph id="ph2">&lt;xref:System.Net.Http.HttpClient&gt;</ph> method to download the contents of a website as a byte array.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The support method, <ph id="ph1">`ProcessURLAsync`</ph> then displays and returns the length of the array.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DisplayResults`</ph> displays the number of bytes in the byte array for each URL.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This display shows when each task has finished downloading.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Copy the following methods, and paste them after the <ph id="ph1">`startButton_Click`</ph> event handler in MainWindow.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Finally, define method <ph id="ph1">`CreateMultipleTasksAsync`</ph>, which performs the following steps.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The method declares an <ph id="ph1">`HttpClient`</ph> object,which you need  to access method <ph id="ph2">&lt;xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A&gt;</ph> in <ph id="ph3">`ProcessURLAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The method creates and starts three tasks of type <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, where <ph id="ph2">`TResult`</ph> is an integer.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>As each task finishes, <ph id="ph1">`DisplayResults`</ph> displays the task's URL and the length of the downloaded contents.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because the tasks are running asynchronously, the order in which the results appear might differ from the order in which they were declared.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The method awaits the completion of each task.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`Await`</ph> operator suspends execution of <ph id="ph2">`CreateMultipleTasksAsync`</ph> until the awaited task is finished.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The operator also retrieves the return value from the call to <ph id="ph1">`ProcessURLAsync`</ph> from each completed task.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When the tasks have been completed and the integer values have been retrieved, the method sums the lengths of the websites and displays the result.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Copy the following method, and paste it into your solution.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Run the program several times to verify that the three tasks don’t always finish in the same order and that the order in which they finish isn't necessarily the order in which they’re created and awaited.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following code contains the full example.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Extend the Async Walkthrough by Using Task.WhenAll (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>