{"content":"---\ntitle: \"Compiler Error CS0201 | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"CS0201\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS0201\"\nms.assetid: cf5d6701-50cc-4e4f-878b-e1a4ad8a2061\ncaps.latest.revision: 12\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error CS0201\nOnly assignment, call, increment, decrement, and new object expressions can be used as a statement  \n  \n The compiler generates an error when it encounters an invalid statement. An invalid statement is any line or series of lines ending in a semicolon that does not represent an assignment ([=](../../../csharp/language-reference/operators/assignment-operator.md)), method call [()](../../../csharp/language-reference/operators/invocation-operator.md), [new](../../../csharp/language-reference/keywords/new.md), [--](../../../csharp/language-reference/operators/decrement-operator.md) or [++](../../../csharp/language-reference/operators/increment-operator.md) operation. For more information, see [Statements, Expressions, and Operators](../../../csharp/programming-guide/statements-expressions-operators/index.md).  \n  \n## Example  \n The following sample generates CS0201 because 2 * 3 is an expression, not a statement. To make the code compile, try assigning the value of the expression to a  variable.  \n  \n```  \n// CS0201.cs  \npublic class MainClass  \n{  \n   public static void Main()  \n   {  \n      2 * 3;   // CS0201  \n      // Try the following line instead.  \n      //   int i = 2 * 3;  \n   }  \n}  \n```  \n  \n## Example  \n The following sample generates CS0201 because checked by itself is not a statement, even though it is parameterized by an increment operation.  \n  \n```  \n// CS0201_b.cs  \n// compile with: /target:library  \npublic class MyList<T>   \n{  \n   public void Add(T x)  \n   {  \n      int i = 0;  \n      if ( (object)x == null)  \n      {  \n         checked(i++);   // CS0201  \n  \n         // OK  \n         checked {  \n            i++;   \n         }  \n      }  \n   }  \n}  \n```  \n  \n## See Also  \n [C# Compiler Errors](../../../csharp/language-reference/compiler-messages/index.md)","nodes":[{"pos":[12,50],"content":"Compiler Error CS0201 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error CS0201 | Microsoft Docs","pos":[0,38]}]},{"pos":[543,564],"content":"Compiler Error CS0201","linkify":"Compiler Error CS0201","nodes":[{"content":"Compiler Error CS0201","pos":[0,21]}]},{"content":"Only assignment, call, increment, decrement, and new object expressions can be used as a statement","pos":[565,663]},{"content":"The compiler generates an error when it encounters an invalid statement.","pos":[670,742]},{"content":"An invalid statement is any line or series of lines ending in a semicolon that does not represent an assignment (<bpt id=\"p1\">[</bpt><ph id=\"ph1\">=</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/assignment-operator.md)</ept>), method call <bpt id=\"p2\">[</bpt>()<ept id=\"p2\">](../../../csharp/language-reference/operators/invocation-operator.md)</ept>, <bpt id=\"p3\">[</bpt>new<ept id=\"p3\">](../../../csharp/language-reference/keywords/new.md)</ept>, <bpt id=\"p4\">[</bpt><ph id=\"ph2\">--</ph><ept id=\"p4\">](../../../csharp/language-reference/operators/decrement-operator.md)</ept> or <bpt id=\"p5\">[</bpt><ph id=\"ph3\">++</ph><ept id=\"p5\">](../../../csharp/language-reference/operators/increment-operator.md)</ept> operation.","pos":[743,1236],"source":" An invalid statement is any line or series of lines ending in a semicolon that does not represent an assignment ([=](../../../csharp/language-reference/operators/assignment-operator.md)), method call [()](../../../csharp/language-reference/operators/invocation-operator.md), [new](../../../csharp/language-reference/keywords/new.md), [--](../../../csharp/language-reference/operators/decrement-operator.md) or [++](../../../csharp/language-reference/operators/increment-operator.md) operation."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Statements, Expressions, and Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/index.md)</ept>.","pos":[1237,1381],"source":" For more information, see [Statements, Expressions, and Operators](../../../csharp/programming-guide/statements-expressions-operators/index.md)."},{"pos":[1390,1397],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates CS0201 because 2 * 3 is an expression, not a statement.","pos":[1401,1487]},{"content":"To make the code compile, try assigning the value of the expression to a  variable.","pos":[1488,1571]},{"pos":[1786,1793],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates CS0201 because checked by itself is not a statement, even though it is parameterized by an increment operation.","pos":[1797,1939]},{"pos":[2271,2279],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2283,2366],"content":"<bpt id=\"p1\">[</bpt>C# Compiler Errors<ept id=\"p1\">](../../../csharp/language-reference/compiler-messages/index.md)</ept>","source":"[C# Compiler Errors](../../../csharp/language-reference/compiler-messages/index.md)"}]}