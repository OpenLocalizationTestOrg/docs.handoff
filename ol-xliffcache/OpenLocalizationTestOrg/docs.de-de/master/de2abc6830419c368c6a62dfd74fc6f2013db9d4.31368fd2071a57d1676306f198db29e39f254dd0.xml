{"content":"---\ntitle: \"?? Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"??_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"coalesce operator [C#]\"\n  - \"?? operator [C#]\"\n  - \"conditional-AND operator (&&) [C#]\"\nms.assetid: 088b1f0d-c1af-4fe1-b4b8-196fd5ea9132\ncaps.latest.revision: 17\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ?? Operator (C# Reference)\nThe `??` operator is called the null-coalescing operator.  It returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand.  \n  \n## Remarks  \n A nullable type can represent a value from the type’s domain, or the value can be undefined (in which case the value is null). You can use the `??` operator’s syntactic expressiveness to return an appropriate value (the right hand operand) when the left operand has a nullible type whose value is null. If you try to assign a nullable value type to a non-nullable value type without using the `??` operator, you will generate a compile-time error. If you use a cast, and the nullable value type is currently undefined, an `InvalidOperationException` exception will be thrown.  \n  \n For more information, see [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md).  \n  \n The result of a ?? operator is not considered to be a constant even if both its arguments are constants.  \n  \n## Example  \n [!code-cs[csRefOperators#53](../../../csharp/language-reference/operators/codesnippet/CSharp/null-conditional-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)   \n [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)   \n [What Exactly Does 'Lifted' mean?](http://go.microsoft.com/fwlink/?LinkID=112382)","nodes":[{"pos":[12,55],"content":"?? Operator (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"?? Operator (C# Reference) | Microsoft Docs","pos":[0,43],"nodes":[{"content":"??","pos":[0,2]},{"content":"Operator (C# Reference) | Microsoft Docs","pos":[3,43]}]}]},{"pos":[630,656],"content":"?? Operator (C# Reference)","linkify":"?? Operator (C# Reference)","nodes":[{"content":"?? Operator (C# Reference)","pos":[0,26],"nodes":[{"content":"??","pos":[0,2]},{"content":"Operator (C# Reference)","pos":[3,26]}]}]},{"content":"The <ph id=\"ph1\">`??`</ph> operator is called the null-coalescing operator.","pos":[657,714],"source":"The `??` operator is called the null-coalescing operator."},{"content":"It returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand.","pos":[716,821]},{"pos":[830,837],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A nullable type can represent a value from the type’s domain, or the value can be undefined (in which case the value is null).","pos":[841,967]},{"content":"You can use the <ph id=\"ph1\">`??`</ph> operator’s syntactic expressiveness to return an appropriate value (the right hand operand) when the left operand has a nullible type whose value is null.","pos":[968,1143],"source":" You can use the `??` operator’s syntactic expressiveness to return an appropriate value (the right hand operand) when the left operand has a nullible type whose value is null."},{"content":"If you try to assign a nullable value type to a non-nullable value type without using the <ph id=\"ph1\">`??`</ph> operator, you will generate a compile-time error.","pos":[1144,1288],"source":" If you try to assign a nullable value type to a non-nullable value type without using the `??` operator, you will generate a compile-time error."},{"content":"If you use a cast, and the nullable value type is currently undefined, an <ph id=\"ph1\">`InvalidOperationException`</ph> exception will be thrown.","pos":[1289,1416],"source":" If you use a cast, and the nullable value type is currently undefined, an `InvalidOperationException` exception will be thrown."},{"pos":[1423,1525],"content":"For more information, see <bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept>.","source":"For more information, see [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)."},{"content":"The result of a ??","pos":[1532,1550]},{"content":"operator is not considered to be a constant even if both its arguments are constants.","pos":[1551,1636]},{"pos":[1645,1652],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1656,1781],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#53<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/null-conditional-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#53](../../../csharp/language-reference/operators/codesnippet/CSharp/null-conditional-operator_1.cs)]"},{"pos":[1790,1798],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1802,1862],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1865,1933],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1936,2007],"source":" [C# Operators](../../../csharp/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2010,2087],"source":" [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>What Exactly Does 'Lifted' mean?<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=112382)</ept>","pos":[2090,2172],"source":" [What Exactly Does 'Lifted' mean?](http://go.microsoft.com/fwlink/?LinkID=112382)"}]}