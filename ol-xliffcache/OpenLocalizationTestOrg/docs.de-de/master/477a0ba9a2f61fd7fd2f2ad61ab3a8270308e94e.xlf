<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">477a0ba9a2f61fd7fd2f2ad61ab3a8270308e94e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\arrays\array-dimensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e48f7a65b45f0370b0c1e2aee48d56deabd1b946</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea457df36ef9440817bad80ce68c2710fb33a555</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Array Dimensions in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Array Dimensions in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>dimension<ept id="p1">*</ept> is a direction in which you can vary the specification of an array's elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An array that holds the sales total for each day of the month has one dimension (the day of the month).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An array that holds the sales total by department for each day of the month has two dimensions (the department number and the day of the month).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The number of dimensions an array has is called its <bpt id="p1">*</bpt>rank<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Array.Rank%2A&gt;</ph> property to determine the how many dimensions an array has.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Working with Dimensions</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You specify an element of an array by supplying an <bpt id="p1">*</bpt>index<ept id="p1">*</ept> or <bpt id="p2">*</bpt>subscript<ept id="p2">*</ept> for each of its dimensions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The elements are contiguous along each dimension from index 0 through the highest index for that dimension.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following illustrations show the conceptual structure of arrays with different ranks.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each element in the illustrations shows the index values that access it.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, you can access the first element of the second row of the two-dimensional array by specifying indexes <ph id="ph1">`(1, 0)`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic diagram of one&amp;#45;dimensional array<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/media/arrayexdimone.gif "ArrayExDimOne")</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>One-dimensional array</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic diagram of two&amp;#45;dimensional array<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/media/arrayexdimtwo.gif "ArrayExDimTwo")</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Two-dimensional array</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic diagram of three&amp;#45;dimensional array<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/media/arrayexdimthree.gif "ArrayExDimThree")</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Three-dimensional array</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>One Dimension</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Many arrays have only one dimension, such as the number of people of each age.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The only requirement to specify an element is the age for which that element holds the count.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Therefore, such an array uses only one index.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example declares a variable to hold a <bpt id="p1">*</bpt>one-dimensional array<ept id="p1">*</ept> of age counts for ages 0 through 120.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Two Dimensions</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Some arrays have two dimensions, such as the number of offices on each floor of each building on a campus.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The specification of an element requires both the building number and the floor, and each element holds the count for that combination of building and floor.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Therefore, such an array uses two indexes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example declares a variable to hold a <bpt id="p1">*</bpt>two-dimensional array<ept id="p1">*</ept> of office counts, for buildings 0 through 40 and floors 0 through 5.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A two-dimensional array is also called a <bpt id="p1">*</bpt>rectangular array<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Three Dimensions</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A few arrays have three dimensions, such as values in three-dimensional space.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Such an array uses three indexes, which in this case represent the x, y, and z coordinates of physical space.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example declares a variable to hold a <bpt id="p1">*</bpt>three-dimensional array<ept id="p1">*</ept> of air temperatures at various points in a three-dimensional volume.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>More than Three Dimensions</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Although an array can have as many as 32 dimensions, it is rare to have more than three.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you add dimensions to an array, the total storage needed by the array increases considerably, so use multidimensional arrays with care.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Using Different Dimensions</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Suppose you want to track sales amounts for every day of the present month.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You might declare a one-dimensional array with 31 elements, one for each day of the month, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Now suppose you want to track the same information not only for every day of a month but also for every month of the year.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You might declare a two-dimensional array with 12 rows (for the months) and 31 columns (for the days), as the following example shows.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Now suppose you decide to have your array hold information for more than one year.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you want to track sales amounts for 5 years, you could declare a three-dimensional array with 5 layers, 12 rows, and 31 columns, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that, because each index varies from 0 to its maximum, each dimension of <ph id="ph1">`salesAmounts`</ph> is declared as one less than the required length for that dimension.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Note also that the size of the array increases with each new dimension.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The three sizes in the preceding examples are 31, 372, and 1,860 elements respectively.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can create an array without using the <ph id="ph1">`Dim`</ph> statement or the <ph id="ph2">`New`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, you can call the <ph id="ph1">&lt;xref:System.Array.CreateInstance%2A&gt;</ph> method, or another component can pass your code an array created in this manner.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Such an array can have a lower bound other than 0.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can always test for the lower bound of a dimension by using the <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> method or the <ph id="ph2">`LBound`</ph> function.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/troubleshooting-arrays.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>