{"content":"---\ntitle: \"Accessing OperationContext from a Workflow Service | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: b1dafe55-a20e-4db0-9ac8-90c315883cdd\ncaps.latest.revision: 9\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Accessing OperationContext from a Workflow Service\nTo access the <xref:System.ServiceModel.OperationContext> inside a workflow service, you must implement the <xref:System.ServiceModel.Activities.IReceiveMessageCallback> interface in a custom execution property. Override the <xref:System.ServiceModel.Activities.IReceiveMessageCallback.OnReceiveMessage%2A> System.Activities.ExecutionProperties)?qualifyHint=False&autoUpgrade=True method which is passed a reference to the <xref:System.ServiceModel.OperationContext>. This topic will walk you through implementing this execution property to retrieve a custom header, as well as a custom activity that will surface this property to the <xref:System.ServiceModel.Activities.Receive> at runtime.  The custom activity will implement the same behavior as a <!--zz <xref:System.ServiceModel.Activities.Sequence>--> `System.ServiceModel.Activities.Sequence` activity, except that when a <xref:System.ServiceModel.Activities.Receive> is placed inside of it, the <xref:System.ServiceModel.Activities.IReceiveMessageCallback> will be called and the <xref:System.ServiceModel.OperationContext> information will be retrieved.  This topic also shows how to access the client-side <xref:System.ServiceModel.OperationContext> to add outgoing headers via the <xref:System.ServiceModel.Activities.ISendMessageCallback> interface.  \n  \n### Implement the Service-side IReceiveMessageCallback  \n  \n1.  Create an empty [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] solution.  \n  \n2.  Add a new console application called `Service` to the solution.  \n  \n3.  Add references to the following assemblies:  \n  \n    1.  System.Runtime.Serialization  \n  \n    2.  System.ServiceModel  \n  \n    3.  System.ServiceModel.Activities  \n  \n4.  Add a new class called `ReceiveInstanceIdCallback` and implement <xref:System.ServiceModel.Activities.IReceiveMessageCallback> as shown in the following example.  \n  \n    ```csharp  \n    class ReceiveInstanceIdCallback : IReceiveMessageCallback  \n    {  \n          public const string HeaderName = \"InstanceIdHeader\";  \n          public const string HeaderNS = \"http://Microsoft.Samples.AccessingOperationContext\";  \n  \n         public void OnReceiveMessage(System.ServiceModel.OperationContext operationContext, System.Activities.ExecutionProperties activityExecutionProperties)  \n          {              \n                try  \n                {  \n                    Guid instanceId = operationContext.IncomingMessageHeaders.GetHeader<Guid>(HeaderName, HeaderNS);  \n                    Console.WriteLine(\"Received a message from a workflow with instanceId = {0}\", instanceId);  \n                }  \n                catch (MessageHeaderException)  \n                {  \n                    Console.WriteLine(\"This message must not be from a workflow.\");  \n                }  \n            }  \n    }  \n  \n    ```  \n  \n     This code uses the <xref:System.ServiceModel.OperationContext> passed into the method to access the incoming messageâ€™s headers.  \n  \n### Implement a Service-side Native activity to add the IReceiveMessageCallback implementation to the NativeActivityContext  \n  \n1.  Add a new class derived from <xref:System.Activities.NativeActivity> called `ReceiveInstanceIdScope`.  \n  \n2.  Add local variables to keep track of child activities, variables, current activity index, and a <xref:System.Activities.CompletionCallback> callback.  \n  \n    ```  \n    public sealed class ReceiveInstanceIdScope : NativeActivity  \n        {  \n            Collection<Activity> children;  \n            Collection<Variable> variables;  \n            Variable<int> currentIndex;  \n            CompletionCallback onChildComplete;  \n    }  \n  \n    ```  \n  \n3.  Implement the constructor  \n  \n    ```  \n    public ReceiveInstanceIdScope()  \n                : base()  \n            {  \n                this.children = new Collection<Activity>();  \n                this.variables = new Collection<Variable>();  \n                this.currentIndex = new Variable<int>();  \n            }  \n    }  \n  \n    ```  \n  \n4.  Implement the `Activities` and `Variables` properties.  \n  \n    ```  \n    public Collection<Activity> Activities  \n    {  \n         get { return this.children; }  \n    }  \n  \n    public Collection<Variable> Variables  \n    {  \n        get { return this.variables; }  \n    }  \n  \n    ```  \n  \n5.  Override <xref:System.Activities.NativeActivity.CacheMetadata%2A>  \n  \n    ```  \n    protected override void CacheMetadata(NativeActivityMetadata metadata)  \n    {  \n        //call base.CacheMetadata to add the Activities and Variables to this activity's metadata  \n        base.CacheMetadata(metadata);  \n        //add the private implementation variable: currentIndex   \n        metadata.AddImplementationVariable(this.currentIndex);  \n    }  \n  \n    ```  \n  \n6.  Override <xref:System.Activities.NativeActivity.Execute%2A>  \n  \n    ```  \n    protected override void Execute(  \n                NativeActivityContext context)  \n            {  \n                context.Properties.Add(\"ReceiveInstanceIdCallback\", new ReceiveInstanceIdCallback());  \n                InternalExecute(context, null);  \n            }  \n  \n            void InternalExecute(NativeActivityContext context, ActivityInstance instance)  \n            {  \n                //grab the index of the current Activity  \n                int currentActivityIndex = this.currentIndex.Get(context);  \n                if (currentActivityIndex == Activities.Count)  \n                {  \n                    //if the currentActivityIndex is equal to the count of MySequence's Activities  \n                    //MySequence is complete  \n                    return;  \n                }  \n  \n                if (this.onChildComplete == null)  \n                {  \n                    //on completion of the current child, have the runtime call back on this method  \n                    this.onChildComplete = new CompletionCallback(InternalExecute);  \n                }  \n  \n                //grab the next Activity in MySequence.Activities and schedule it  \n                Activity nextChild = Activities[currentActivityIndex];  \n                context.ScheduleActivity(nextChild, this.onChildComplete);  \n  \n                //increment the currentIndex  \n                this.currentIndex.Set(context, ++currentActivityIndex);  \n            }  \n  \n    ```  \n  \n### Implement the workflow service  \n  \n1.  Open the existing `Program` class.  \n  \n2.  Define the following constants:  \n  \n    ```  \n    class Program  \n    {  \n       const string addr = \"http://localhost:8080/Service\";  \n       static XName contract = XName.Get(\"IService\", \"http://tempuri.org\");  \n    }  \n  \n    ```  \n  \n3.  Add a static method called `GetWorkflowService` that creates the workflow service.  \n  \n    ```  \n    static Activity GetServiceWorkflow()  \n            {  \n                Variable<string> echoString = new Variable<string>();  \n  \n                Receive echoRequest = new Receive  \n                {  \n                    CanCreateInstance = true,  \n                    ServiceContractName = contract,  \n                    OperationName = \"Echo\",  \n                    Content = new ReceiveParametersContent()  \n                    {  \n                        Parameters = { { \"echoString\", new OutArgument<string>(echoString) } }  \n                    }  \n                };  \n  \n                return new ReceiveInstanceIdScope  \n                {  \n                    Variables = { echoString },  \n                    Activities =  \n                    {  \n                        echoRequest,  \n                        new WriteLine { Text = new InArgument<string>( (e) => \"Received: \" + echoString.Get(e) ) },  \n                        new SendReply  \n                        {  \n                            Request = echoRequest,  \n                            Content = new SendParametersContent()  \n                            {  \n                                Parameters = { { \"result\", new InArgument<string>(echoString) } }   \n                            }  \n                        }  \n                    }  \n                };  \n            }  \n  \n    ```  \n  \n4.  In the existing `Main` method, host the workflow service.  \n  \n    ```  \n    static void Main(string[] args)  \n            {  \n                string addr = \"http://localhost:8080/Service\";  \n  \n                using (WorkflowServiceHost host = new WorkflowServiceHost(GetServiceWorkflow()))  \n                {  \n                    host.AddServiceEndpoint(contract, new BasicHttpBinding(), addr);  \n  \n                    host.Open();  \n                    Console.WriteLine(\"Service waiting at: \" + addr);  \n                    Console.WriteLine(\"Press [ENTER] to exit\");  \n                    Console.ReadLine();  \n                    host.Close();  \n                }  \n            }  \n  \n    ```  \n  \n### Implement the Client-side ISendMessageCallback  \n  \n1.  Add a new console application called `Service` to the solution.  \n  \n2.  Add references to the following assemblies:  \n  \n    1.  System.Runtime.Serialization  \n  \n    2.  System.ServiceModel  \n  \n    3.  System.ServiceModel.Activities  \n  \n3.  Add a new class called `SendInstanceIdCallback` and implement <xref:System.ServiceModel.Activities.ISendMessageCallback> as shown in the following example.  \n  \n    ```csharp  \n    class SendInstanceIdCallback : ISendMessageCallback  \n        {  \n            public const string HeaderName = \"InstanceIdHeader\";  \n            public const string HeaderNS = \"http://Microsoft.Samples.AccessingOperationContext\";  \n  \n            public Guid InstanceId { get; set; }  \n  \n            public void OnSendMessage(System.ServiceModel.OperationContext operationContext)  \n            {  \n                operationContext.OutgoingMessageHeaders.Add(MessageHeader.CreateHeader(HeaderName, HeaderNS, this.InstanceId));  \n            }  \n        }  \n  \n    ```  \n  \n     This code uses the <xref:System.ServiceModel.OperationContext> passed into the method to add a custom header to the incoming message.  \n  \n### Implement a Client-side Native activity to add the client-side ISendMessageCallback implementation to the NativeActivityContext  \n  \n1.  Add a new class derived from <xref:System.Activities.NativeActivity> called `SendInstanceIdScope`.  \n  \n2.  Add local variables to keep track of child activities, variables, current activity index, and a <xref:System.Activities.CompletionCallback> callback.  \n  \n    ```  \n    public sealed class SendInstanceIdScope : NativeActivity  \n        {  \n            Collection<Activity> children;  \n            Collection<Variable> variables;  \n            Variable<int> currentIndex;  \n            CompletionCallback onChildComplete;  \n    }  \n  \n    ```  \n  \n3.  Implement the constructor  \n  \n    ```  \n    public SendInstanceIdScope()  \n                : base()  \n            {  \n                this.children = new Collection<Activity>();  \n                this.variables = new Collection<Variable>();  \n                this.currentIndex = new Variable<int>();  \n            }  \n  \n    ```  \n  \n4.  Implement the `Activities` and `Variables` properties.  \n  \n    ```  \n    public Collection<Activity> Activities  \n    {  \n         get { return this.children; }  \n    }  \n  \n    public Collection<Variable> Variables  \n    {  \n        get { return this.variables; }  \n    }  \n  \n    ```  \n  \n5.  Override <xref:System.Activities.NativeActivity.CacheMetadata%2A>  \n  \n    ```  \n    protected override void CacheMetadata(NativeActivityMetadata metadata)  \n    {  \n        //call base.CacheMetadata to add the Activities and Variables to this activity's metadata  \n        base.CacheMetadata(metadata);  \n        //add the private implementation variable: currentIndex   \n        metadata.AddImplementationVariable(this.currentIndex);  \n    }  \n  \n    ```  \n  \n6.  Override <xref:System.Activities.NativeActivity.Execute%2A>  \n  \n    ```  \n    protected override void Execute(  \n                NativeActivityContext context)  \n            {  \n                context.Properties.Add(\"SendInstanceIdCallback\", new SendInstanceIdCallback() { InstanceId = context.WorkflowInstanceId });  \n                InternalExecute(context, null);  \n            }  \n  \n            void InternalExecute(NativeActivityContext context, ActivityInstance instance)  \n            {  \n                //grab the index of the current Activity  \n                int currentActivityIndex = this.currentIndex.Get(context);  \n                if (currentActivityIndex == Activities.Count)  \n                {  \n                    //if the currentActivityIndex is equal to the count of MySequence's Activities  \n                    //MySequence is complete  \n                    return;  \n                }  \n  \n                if (this.onChildComplete == null)  \n                {  \n                    //on completion of the current child, have the runtime call back on this method  \n                    this.onChildComplete = new CompletionCallback(InternalExecute);  \n                }  \n  \n                //grab the next Activity in MySequence.Activities and schedule it  \n                Activity nextChild = Activities[currentActivityIndex];  \n                context.ScheduleActivity(nextChild, this.onChildComplete);  \n  \n                //increment the currentIndex  \n                this.currentIndex.Set(context, ++currentActivityIndex);  \n            }  \n    protected override void Execute(  \n                NativeActivityContext context)  \n            {  \n                context.Properties.Add(\"ReceiveInstanceIdCallback\", new ReceiveInstanceIdCallback());  \n                InternalExecute(context, null);  \n            }  \n  \n            void InternalExecute(NativeActivityContext context, ActivityInstance instance)  \n            {  \n                //grab the index of the current Activity  \n                int currentActivityIndex = this.currentIndex.Get(context);  \n                if (currentActivityIndex == Activities.Count)  \n                {  \n                    //if the currentActivityIndex is equal to the count of MySequence's Activities  \n                    //MySequence is complete  \n                    return;  \n                }  \n  \n                if (this.onChildComplete == null)  \n                {  \n                    //on completion of the current child, have the runtime call back on this method  \n                    this.onChildComplete = new CompletionCallback(InternalExecute);  \n                }  \n  \n                //grab the next Activity in MySequence.Activities and schedule it  \n                Activity nextChild = Activities[currentActivityIndex];  \n                context.ScheduleActivity(nextChild, this.onChildComplete);  \n  \n                //increment the currentIndex  \n                this.currentIndex.Set(context, ++currentActivityIndex);  \n            }  \n  \n    ```  \n  \n### Implement a workflow client  \n  \n1.  Create a new console application project called `Client`.  \n  \n2.  Add references to the following assemblies:  \n  \n    1.  System.Activities  \n  \n    2.  System.ServiceModel  \n  \n    3.  System.ServiceModel.Activities  \n  \n3.  Open the generated Program.cs file and add a static method called `GetClientWorkflow` to create the client workflow.  \n  \n    ```  \n    static Activity GetClientWorkflow()  \n            {  \n                Variable<string> echoString = new Variable<string>();  \n  \n                // Define the endpoint  \n                Endpoint clientEndpoint = new Endpoint  \n                {  \n                    Binding = new BasicHttpBinding(),  \n                    AddressUri = new Uri(\"http://localhost:8080/Service\")  \n                };  \n  \n                // Configure the Send activity used to send a message  \n                Send echoRequest = new Send  \n                {  \n                    Endpoint = clientEndpoint,  \n                    ServiceContractName = XName.Get(\"IService\", \"http://tempuri.org\"),  \n                    OperationName = \"Echo\",  \n                    Content = new SendParametersContent()  \n                    {  \n                        Parameters = { { \"echoString\", new InArgument<string>(\"Hello, World\") } }   \n                    }  \n                };  \n  \n                // Place the Send activity in a SendInstanceIdScope. This hooks up the ISendMessageCallback   \n                // implementation to the client workflow.  \n                return new SendInstanceIdScope  \n                {  \n                    Variables = { echoString },  \n                    Activities =  \n                    {                      \n                        new CorrelationScope  \n                        {  \n                            Body = new Sequence  \n                            {  \n                                Activities =   \n                                {  \n                                    // Send the request message  \n                                    echoRequest,  \n  \n                                   // Receive the reply from the service  \n                                    new ReceiveReply  \n                                    {  \n                                        Request = echoRequest,  \n                                        Content = new ReceiveParametersContent  \n                                        {  \n                                            Parameters = { { \"result\", new OutArgument<string>(echoString) } }  \n                                        }  \n                                    }  \n                                }  \n                            }  \n                        },                      \n                        new WriteLine { Text = new InArgument<string>( (e) => \"Received Text: \" + echoString.Get(e) ) },                      \n                    }  \n                };  \n            }  \n  \n    ```  \n  \n4.  Add the following hosting code to the `Main()` method.  \n  \n    ```  \n    static void Main(string[] args)  \n    {  \n       Activity workflow = GetClientWorkflow();  \n       WorkflowInvoker.Invoke(workflow);  \n       WorkflowInvoker.Invoke(workflow);  \n       Console.WriteLine(\"Press [ENTER] to exit\");  \n       Console.ReadLine();  \n    }  \n  \n    ```  \n  \n## Example  \n Here is a complete listing of the source code used in this topic.  \n  \n```  \n// ReceiveInstanceIdScope.cs  \n//----------------------------------------------------------------  \n// Copyright (c) Microsoft Corporation.  All rights reserved.  \n//----------------------------------------------------------------  \n  \nusing System.Activities;  \nusing System.Collections.ObjectModel;  \n  \nnamespace Microsoft.Samples.AccessingOperationContext.Service  \n{  \n    public sealed class ReceiveInstanceIdScope : NativeActivity  \n    {  \n        Collection<Activity> children;  \n        Collection<Variable> variables;  \n        Variable<int> currentIndex;  \n        CompletionCallback onChildComplete;  \n  \n        public ReceiveInstanceIdScope()  \n            : base()  \n        {  \n            this.children = new Collection<Activity>();  \n            this.variables = new Collection<Variable>();  \n            this.currentIndex = new Variable<int>();  \n        }  \n  \n        public Collection<Activity> Activities  \n        {  \n            get  \n            {  \n                return this.children;  \n            }  \n        }  \n  \n        public Collection<Variable> Variables  \n        {  \n            get  \n            {  \n                return this.variables;  \n            }  \n        }  \n  \n        protected override void CacheMetadata(NativeActivityMetadata metadata)  \n        {  \n            //call base.CacheMetadata to add the Activities and Variables to this activity's metadata  \n            base.CacheMetadata(metadata);  \n            //add the private implementation variable: currentIndex   \n            metadata.AddImplementationVariable(this.currentIndex);  \n        }                     \n  \n        protected override void Execute(  \n            NativeActivityContext context)  \n        {  \n            context.Properties.Add(\"ReceiveInstanceIdCallback\", new ReceiveInstanceIdCallback());  \n            InternalExecute(context, null);  \n        }  \n  \n        void InternalExecute(NativeActivityContext context, ActivityInstance instance)  \n        {  \n            //grab the index of the current Activity  \n            int currentActivityIndex = this.currentIndex.Get(context);  \n            if (currentActivityIndex == Activities.Count)  \n            {  \n                //if the currentActivityIndex is equal to the count of MySequence's Activities  \n                //MySequence is complete  \n                return;  \n            }  \n  \n            if (this.onChildComplete == null)  \n            {  \n                //on completion of the current child, have the runtime call back on this method  \n                this.onChildComplete = new CompletionCallback(InternalExecute);  \n            }  \n  \n            //grab the next Activity in MySequence.Activities and schedule it  \n            Activity nextChild = Activities[currentActivityIndex];  \n            context.ScheduleActivity(nextChild, this.onChildComplete);  \n  \n            //increment the currentIndex  \n            this.currentIndex.Set(context, ++currentActivityIndex);  \n        }  \n    }  \n}  \n  \n```  \n  \n```  \n// ReceiveInstanceIdScope.cs  \n//----------------------------------------------------------------  \n// Copyright (c) Microsoft Corporation.  All rights reserved.  \n//----------------------------------------------------------------  \n  \nusing System;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Activities;  \n  \nnamespace Microsoft.Samples.AccessingOperationContext.Service  \n{  \n    class ReceiveInstanceIdCallback : IReceiveMessageCallback  \n    {  \n        public const string HeaderName = \"InstanceIdHeader\";  \n        public const string HeaderNS = \"http://Microsoft.Samples.AccessingOperationContext\";  \n  \n        public void OnReceiveMessage(System.ServiceModel.OperationContext operationContext, System.Activities.ExecutionProperties activityExecutionProperties)  \n        {              \n            try  \n            {  \n                Guid instanceId = operationContext.IncomingMessageHeaders.GetHeader<Guid>(HeaderName, HeaderNS);  \n                Console.WriteLine(\"Received a message from a workflow with instanceId = {0}\", instanceId);  \n            }  \n            catch (MessageHeaderException)  \n            {  \n                Console.WriteLine(\"This message must not be from a workflow.\");  \n            }  \n        }  \n    }  \n}  \n  \n```  \n  \n```  \n// Service.cs  \n//----------------------------------------------------------------  \n// Copyright (c) Microsoft Corporation.  All rights reserved.  \n//----------------------------------------------------------------  \n  \nusing System;  \nusing System.Activities;  \nusing System.Activities.Statements;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Activities;  \nusing System.Xml.Linq;  \n  \nnamespace Microsoft.Samples.AccessingOperationContext.Service  \n{      \n    class Program  \n    {  \n        const string addr = \"http://localhost:8080/Service\";  \n        static XName contract = XName.Get(\"IService\", \"http://tempuri.org\");  \n  \n        static void Main(string[] args)  \n        {  \n            string addr = \"http://localhost:8080/Service\";  \n  \n            using (WorkflowServiceHost host = new WorkflowServiceHost(GetServiceWorkflow()))  \n            {  \n                host.AddServiceEndpoint(contract, new BasicHttpBinding(), addr);  \n  \n                host.Open();  \n                Console.WriteLine(\"Service waiting at: \" + addr);  \n                Console.WriteLine(\"Press [ENTER] to exit\");  \n                Console.ReadLine();  \n                host.Close();  \n            }  \n  \n        }  \n  \n        static Activity GetServiceWorkflow()  \n        {  \n            Variable<string> echoString = new Variable<string>();  \n  \n            Receive echoRequest = new Receive  \n            {  \n                CanCreateInstance = true,  \n                ServiceContractName = contract,  \n                OperationName = \"Echo\",  \n                Content = new ReceiveParametersContent()  \n                {  \n                    Parameters = { { \"echoString\", new OutArgument<string>(echoString) } }  \n                }  \n            };  \n  \n            return new ReceiveInstanceIdScope  \n            {  \n                Variables = { echoString },  \n                Activities =  \n                {  \n                    echoRequest,  \n                    new WriteLine { Text = new InArgument<string>( (e) => \"Received: \" + echoString.Get(e) ) },  \n                    new SendReply  \n                    {  \n                        Request = echoRequest,  \n                        Content = new SendParametersContent()  \n                        {  \n                            Parameters = { { \"result\", new InArgument<string>(echoString) } }   \n                        }  \n                    }  \n                }  \n            };  \n        }  \n    }  \n  \n}  \n  \n```  \n  \n```  \n// SendInstanceIdCallback.cs  \n//----------------------------------------------------------------  \n// Copyright (c) Microsoft Corporation.  All rights reserved.  \n//----------------------------------------------------------------  \n  \nusing System;  \nusing System.ServiceModel.Activities;  \nusing System.ServiceModel.Channels;  \n  \nnamespace Microsoft.Samples.AccessingOperationContext.Client  \n{  \n    class SendInstanceIdCallback : ISendMessageCallback  \n    {  \n        public const string HeaderName = \"InstanceIdHeader\";  \n        public const string HeaderNS = \"http://Microsoft.Samples.AccessingOperationContext\";  \n  \n        public Guid InstanceId { get; set; }  \n  \n        public void OnSendMessage(System.ServiceModel.OperationContext operationContext)  \n        {  \n            operationContext.OutgoingMessageHeaders.Add(MessageHeader.CreateHeader(HeaderName, HeaderNS, this.InstanceId));  \n        }  \n    }  \n}  \n  \n```  \n  \n```  \n// SendInstanceIdScope.cs  \n//----------------------------------------------------------------  \n// Copyright (c) Microsoft Corporation.  All rights reserved.  \n//----------------------------------------------------------------  \n  \nusing System.Activities;  \nusing System.Collections.ObjectModel;  \n  \nnamespace Microsoft.Samples.AccessingOperationContext.Client  \n{  \n    public sealed class SendInstanceIdScope : NativeActivity  \n    {  \n        Collection<Activity> children;  \n        Collection<Variable> variables;  \n        Variable<int> currentIndex;  \n        CompletionCallback onChildComplete;  \n  \n        public SendInstanceIdScope()  \n            : base()  \n        {  \n            this.children = new Collection<Activity>();  \n            this.variables = new Collection<Variable>();  \n            this.currentIndex = new Variable<int>();  \n        }  \n  \n        public Collection<Activity> Activities  \n        {  \n            get  \n            {  \n                return this.children;  \n            }  \n        }  \n  \n        public Collection<Variable> Variables  \n        {  \n            get  \n            {  \n                return this.variables;  \n            }  \n        }  \n  \n        protected override void CacheMetadata(NativeActivityMetadata metadata)  \n        {  \n            //call base.CacheMetadata to add the Activities and Variables to this activity's metadata  \n            base.CacheMetadata(metadata);  \n            //add the private implementation variable: currentIndex   \n            metadata.AddImplementationVariable(this.currentIndex);  \n        }  \n  \n        protected override void Execute(  \n            NativeActivityContext context)  \n        {  \n            context.Properties.Add(\"SendInstanceIdCallback\", new SendInstanceIdCallback() { InstanceId = context.WorkflowInstanceId });  \n            InternalExecute(context, null);  \n        }  \n  \n        void InternalExecute(NativeActivityContext context, ActivityInstance instance)  \n        {  \n            //grab the index of the current Activity  \n            int currentActivityIndex = this.currentIndex.Get(context);  \n            if (currentActivityIndex == Activities.Count)  \n            {  \n                //if the currentActivityIndex is equal to the count of MySequence's Activities  \n                //MySequence is complete  \n                return;  \n            }  \n  \n            if (this.onChildComplete == null)  \n            {  \n                //on completion of the current child, have the runtime call back on this method  \n                this.onChildComplete = new CompletionCallback(InternalExecute);  \n            }  \n  \n            //grab the next Activity in MySequence.Activities and schedule it  \n            Activity nextChild = Activities[currentActivityIndex];  \n            context.ScheduleActivity(nextChild, this.onChildComplete);  \n  \n            //increment the currentIndex  \n            this.currentIndex.Set(context, ++currentActivityIndex);  \n        }  \n    }  \n}  \n  \n```  \n  \n```  \n// Client.cs  \n//----------------------------------------------------------------  \n// Copyright (c) Microsoft Corporation.  All rights reserved.  \n//----------------------------------------------------------------  \n  \nusing System;  \nusing System.Activities;  \nusing System.Activities.Statements;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Activities;  \nusing System.Xml.Linq;  \n  \nnamespace Microsoft.Samples.AccessingOperationContext.Client  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            Activity workflow = GetClientWorkflow();  \n            WorkflowInvoker.Invoke(workflow);  \n            WorkflowInvoker.Invoke(workflow);  \n            Console.WriteLine(\"Press [ENTER] to exit\");  \n            Console.ReadLine();  \n        }  \n  \n        static Activity GetClientWorkflow()  \n        {  \n            Variable<string> echoString = new Variable<string>();  \n  \n            Endpoint clientEndpoint = new Endpoint  \n            {  \n                Binding = new BasicHttpBinding(),  \n                AddressUri = new Uri(\"http://localhost:8080/Service\")  \n            };  \n  \n            Send echoRequest = new Send  \n            {  \n                Endpoint = clientEndpoint,  \n                ServiceContractName = XName.Get(\"IService\", \"http://tempuri.org\"),  \n                OperationName = \"Echo\",  \n                Content = new SendParametersContent()  \n                {  \n                    Parameters = { { \"echoString\", new InArgument<string>(\"Hello, World\") } }   \n                }  \n            };  \n  \n            return new SendInstanceIdScope  \n            {  \n                Variables = { echoString },  \n                Activities =  \n                {                      \n                    new CorrelationScope  \n                    {  \n                        Body = new Sequence  \n                        {  \n                            Activities =   \n                            {  \n                                echoRequest,  \n                                new ReceiveReply  \n                                {  \n                                    Request = echoRequest,  \n                                    Content = new ReceiveParametersContent  \n                                    {  \n                                        Parameters = { { \"result\", new OutArgument<string>(echoString) } }  \n                                    }  \n                                }  \n                            }  \n                        }  \n                    },                      \n                    new WriteLine { Text = new InArgument<string>( (e) => \"Received Text: \" + echoString.Get(e) ) },                      \n                }  \n            };  \n        }  \n    }  \n}  \n  \n```  \n  \n Optional comments.  \n  \n## See Also  \n [Workflow Services](../../../../docs/framework/wcf/feature-details/workflow-services.md)   \n [Accessing OperationContext](../../../../docs/framework/windows-workflow-foundation/samples/accessing-operationcontext.md)   \n [Authoring Workflows, Activities, and Expressions Using Imperative Code](../../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)","nodes":[{"pos":[12,79],"content":"Accessing OperationContext from a Workflow Service | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Accessing OperationContext from a Workflow Service | Microsoft Docs","pos":[0,67]}]},{"pos":[377,427],"content":"Accessing OperationContext from a Workflow Service","linkify":"Accessing OperationContext from a Workflow Service","nodes":[{"content":"Accessing OperationContext from a Workflow Service","pos":[0,50]}]},{"content":"To access the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> inside a workflow service, you must implement the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.IReceiveMessageCallback&gt;</ph> interface in a custom execution property.","pos":[428,639],"source":"To access the <xref:System.ServiceModel.OperationContext> inside a workflow service, you must implement the <xref:System.ServiceModel.Activities.IReceiveMessageCallback> interface in a custom execution property."},{"content":"Override the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.IReceiveMessageCallback.OnReceiveMessage%2A&gt;</ph> System.Activities.ExecutionProperties)?qualifyHint=False&amp;autoUpgrade=True method which is passed a reference to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>.","pos":[640,895],"source":" Override the <xref:System.ServiceModel.Activities.IReceiveMessageCallback.OnReceiveMessage%2A> System.Activities.ExecutionProperties)?qualifyHint=False&autoUpgrade=True method which is passed a reference to the <xref:System.ServiceModel.OperationContext>."},{"content":"This topic will walk you through implementing this execution property to retrieve a custom header, as well as a custom activity that will surface this property to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> at runtime.","pos":[896,1120],"source":" This topic will walk you through implementing this execution property to retrieve a custom header, as well as a custom activity that will surface this property to the <xref:System.ServiceModel.Activities.Receive> at runtime."},{"content":"The custom activity will implement the same behavior as a <ph id=\"ph1\">&lt;!--zz &lt;xref:System.ServiceModel.Activities.Sequence&gt;--&gt;</ph> <ph id=\"ph2\">`System.ServiceModel.Activities.Sequence`</ph> activity, except that when a <ph id=\"ph3\">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> is placed inside of it, the <ph id=\"ph4\">&lt;xref:System.ServiceModel.Activities.IReceiveMessageCallback&gt;</ph> will be called and the <ph id=\"ph5\">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> information will be retrieved.","pos":[1122,1541],"source":"  The custom activity will implement the same behavior as a <!--zz <xref:System.ServiceModel.Activities.Sequence>--> `System.ServiceModel.Activities.Sequence` activity, except that when a <xref:System.ServiceModel.Activities.Receive> is placed inside of it, the <xref:System.ServiceModel.Activities.IReceiveMessageCallback> will be called and the <xref:System.ServiceModel.OperationContext> information will be retrieved."},{"content":"This topic also shows how to access the client-side <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> to add outgoing headers via the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.ISendMessageCallback&gt;</ph> interface.","pos":[1543,1740],"source":"  This topic also shows how to access the client-side <xref:System.ServiceModel.OperationContext> to add outgoing headers via the <xref:System.ServiceModel.Activities.ISendMessageCallback> interface."},{"pos":[1750,1800],"content":"Implement the Service-side IReceiveMessageCallback","linkify":"Implement the Service-side IReceiveMessageCallback","nodes":[{"content":"Implement the Service-side IReceiveMessageCallback","pos":[0,50]}]},{"pos":[1810,1907],"content":"Create an empty <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> solution.","source":"Create an empty [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] solution."},{"pos":[1917,1980],"content":"Add a new console application called <ph id=\"ph1\">`Service`</ph> to the solution.","source":"Add a new console application called `Service` to the solution."},{"content":"Add references to the following assemblies:","pos":[1990,2033]},{"content":"System.Runtime.Serialization","pos":[2047,2075]},{"content":"System.ServiceModel","pos":[2089,2108]},{"content":"System.ServiceModel.Activities","pos":[2122,2152]},{"pos":[2162,2323],"content":"Add a new class called <ph id=\"ph1\">`ReceiveInstanceIdCallback`</ph> and implement <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.IReceiveMessageCallback&gt;</ph> as shown in the following example.","source":"Add a new class called `ReceiveInstanceIdCallback` and implement <xref:System.ServiceModel.Activities.IReceiveMessageCallback> as shown in the following example."},{"content":"This code uses the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> passed into the method to access the incoming messageâ€™s headers.","pos":[3284,3411],"source":"This code uses the <xref:System.ServiceModel.OperationContext> passed into the method to access the incoming messageâ€™s headers."},{"pos":[3421,3540],"content":"Implement a Service-side Native activity to add the IReceiveMessageCallback implementation to the NativeActivityContext","linkify":"Implement a Service-side Native activity to add the IReceiveMessageCallback implementation to the NativeActivityContext","nodes":[{"content":"Implement a Service-side Native activity to add the IReceiveMessageCallback implementation to the NativeActivityContext","pos":[0,119]}]},{"pos":[3550,3651],"content":"Add a new class derived from <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity&gt;</ph> called <ph id=\"ph2\">`ReceiveInstanceIdScope`</ph>.","source":"Add a new class derived from <xref:System.Activities.NativeActivity> called `ReceiveInstanceIdScope`."},{"content":"Add local variables to keep track of child activities, variables, current activity index, and a <ph id=\"ph1\">&lt;xref:System.Activities.CompletionCallback&gt;</ph> callback.","pos":[3661,3810],"source":"Add local variables to keep track of child activities, variables, current activity index, and a <xref:System.Activities.CompletionCallback> callback."},{"content":"Implement the constructor","pos":[4115,4140]},{"pos":[4465,4519],"content":"Implement the <ph id=\"ph1\">`Activities`</ph> and <ph id=\"ph2\">`Variables`</ph> properties.","source":"Implement the `Activities` and `Variables` properties."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity.CacheMetadata%2A&gt;</ph>","pos":[4761,4826],"source":"Override <xref:System.Activities.NativeActivity.CacheMetadata%2A>"},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity.Execute%2A&gt;</ph>","pos":[5227,5286],"source":"Override <xref:System.Activities.NativeActivity.Execute%2A>"},{"pos":[6786,6816],"content":"Implement the workflow service","linkify":"Implement the workflow service","nodes":[{"content":"Implement the workflow service","pos":[0,30]}]},{"pos":[6826,6860],"content":"Open the existing <ph id=\"ph1\">`Program`</ph> class.","source":"Open the existing `Program` class."},{"content":"Define the following constants:","pos":[6870,6901]},{"pos":[7113,7195],"content":"Add a static method called <ph id=\"ph1\">`GetWorkflowService`</ph> that creates the workflow service.","source":"Add a static method called `GetWorkflowService` that creates the workflow service."},{"pos":[8598,8655],"content":"In the existing <ph id=\"ph1\">`Main`</ph> method, host the workflow service.","source":"In the existing `Main` method, host the workflow service."},{"pos":[9309,9355],"content":"Implement the Client-side ISendMessageCallback","linkify":"Implement the Client-side ISendMessageCallback","nodes":[{"content":"Implement the Client-side ISendMessageCallback","pos":[0,46]}]},{"pos":[9365,9428],"content":"Add a new console application called <ph id=\"ph1\">`Service`</ph> to the solution.","source":"Add a new console application called `Service` to the solution."},{"content":"Add references to the following assemblies:","pos":[9438,9481]},{"content":"System.Runtime.Serialization","pos":[9495,9523]},{"content":"System.ServiceModel","pos":[9537,9556]},{"content":"System.ServiceModel.Activities","pos":[9570,9600]},{"pos":[9610,9765],"content":"Add a new class called <ph id=\"ph1\">`SendInstanceIdCallback`</ph> and implement <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.ISendMessageCallback&gt;</ph> as shown in the following example.","source":"Add a new class called `SendInstanceIdCallback` and implement <xref:System.ServiceModel.Activities.ISendMessageCallback> as shown in the following example."},{"content":"This code uses the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> passed into the method to add a custom header to the incoming message.","pos":[10370,10503],"source":"This code uses the <xref:System.ServiceModel.OperationContext> passed into the method to add a custom header to the incoming message."},{"pos":[10513,10640],"content":"Implement a Client-side Native activity to add the client-side ISendMessageCallback implementation to the NativeActivityContext","linkify":"Implement a Client-side Native activity to add the client-side ISendMessageCallback implementation to the NativeActivityContext","nodes":[{"content":"Implement a Client-side Native activity to add the client-side ISendMessageCallback implementation to the NativeActivityContext","pos":[0,127]}]},{"pos":[10650,10748],"content":"Add a new class derived from <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity&gt;</ph> called <ph id=\"ph2\">`SendInstanceIdScope`</ph>.","source":"Add a new class derived from <xref:System.Activities.NativeActivity> called `SendInstanceIdScope`."},{"content":"Add local variables to keep track of child activities, variables, current activity index, and a <ph id=\"ph1\">&lt;xref:System.Activities.CompletionCallback&gt;</ph> callback.","pos":[10758,10907],"source":"Add local variables to keep track of child activities, variables, current activity index, and a <xref:System.Activities.CompletionCallback> callback."},{"content":"Implement the constructor","pos":[11209,11234]},{"pos":[11548,11602],"content":"Implement the <ph id=\"ph1\">`Activities`</ph> and <ph id=\"ph2\">`Variables`</ph> properties.","source":"Implement the `Activities` and `Variables` properties."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity.CacheMetadata%2A&gt;</ph>","pos":[11844,11909],"source":"Override <xref:System.Activities.NativeActivity.CacheMetadata%2A>"},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity.Execute%2A&gt;</ph>","pos":[12310,12369],"source":"Override <xref:System.Activities.NativeActivity.Execute%2A>"},{"pos":[15371,15398],"content":"Implement a workflow client","linkify":"Implement a workflow client","nodes":[{"content":"Implement a workflow client","pos":[0,27]}]},{"pos":[15408,15465],"content":"Create a new console application project called <ph id=\"ph1\">`Client`</ph>.","source":"Create a new console application project called `Client`."},{"content":"Add references to the following assemblies:","pos":[15475,15518]},{"content":"System.Activities","pos":[15532,15549]},{"content":"System.ServiceModel","pos":[15563,15582]},{"content":"System.ServiceModel.Activities","pos":[15596,15626]},{"pos":[15636,15752],"content":"Open the generated Program.cs file and add a static method called <ph id=\"ph1\">`GetClientWorkflow`</ph> to create the client workflow.","source":"Open the generated Program.cs file and add a static method called `GetClientWorkflow` to create the client workflow."},{"pos":[18358,18412],"content":"Add the following hosting code to the <ph id=\"ph1\">`Main()`</ph> method.","source":"Add the following hosting code to the `Main()` method."},{"pos":[18719,18726],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Here is a complete listing of the source code used in this topic.","pos":[18730,18795]},{"content":"Optional comments.","pos":[32403,32421]},{"pos":[32430,32438],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Workflow Services<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/workflow-services.md)</ept><ph id=\"ph1\"> </ph>","pos":[32442,32531],"source":"[Workflow Services](../../../../docs/framework/wcf/feature-details/workflow-services.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Accessing OperationContext<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/samples/accessing-operationcontext.md)</ept><ph id=\"ph1\"> </ph>","pos":[32534,32658],"source":" [Accessing OperationContext](../../../../docs/framework/windows-workflow-foundation/samples/accessing-operationcontext.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Authoring Workflows, Activities, and Expressions Using Imperative Code<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)</ept>","pos":[32661,32862],"source":" [Authoring Workflows, Activities, and Expressions Using Imperative Code](../../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)"}]}