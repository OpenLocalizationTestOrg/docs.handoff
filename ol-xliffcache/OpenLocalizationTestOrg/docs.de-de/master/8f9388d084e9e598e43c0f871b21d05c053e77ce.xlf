<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-tracing.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f9388d084e9e598e43c0f871b21d05c053e77ce</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\data-tracing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5a7f29816a4350ddf396b56575f2223d0d05a21</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d983e33345788f693d79fb3e5b2ea3673d2fc09</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Tracing in ADO.NET</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Tracing in ADO.NET</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ADO.NET features built-in data tracing functionality that is supported by the .NET data providers for SQL Server, Oracle, OLE DB and ODBC, as well as the ADO.NET <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>, and the SQL Server network protocols.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Tracing data access API calls can help diagnose the following problems:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Schema mismatch between client program and the database.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Database unavailability or network library problems.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Incorrect SQL whether hard coded or generated by an application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Incorrect programming logic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Issues resulting from the interaction between multiple ADO.NET components or between ADO.NET and your own components.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To support different trace technologies, tracing is extensible, so a developer can trace a problem at any level of the application stack.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Although tracing is not an ADO.NET-only feature, Microsoft providers take advantage of generalized tracing and instrumentation APIs.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about setting and configuring managed tracing in ADO.NET, see <bpt id="p1">[</bpt>Tracing Data Access<ept id="p1">](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh880086(v=msdn.10))</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Accessing Diagnostic Information in the Extended Events Log</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> Data Provider for SQL Server, data access tracing (<bpt id="p1">[</bpt>Data Access Tracing<ept id="p1">](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh880086(v=msdn.10))</ept>) has been updated to make it easier to easier to correlate client events with diagnostic information, such as connection failures, from the server's connectivity ring buffer and application performance information in the extended events log.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For information about reading the extended events log, see <bpt id="p1">[</bpt>View Event Session Data<ept id="p1">](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh710068(v=sql.110))</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For connection operations, ADO.NET will send a client connection ID.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the connection fails, you can access the connectivity ring buffer (<bpt id="p1">[</bpt>Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=207752)</ept>) and find the <ph id="ph1">`ClientConnectionID`</ph> field and get diagnostic information about the connection failure.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Client connection IDs are logged in the ring buffer only if an error occurs.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>(If a connection fails before sending the prelogin packet, a client connection ID will not be generated.) The client connection ID is a 16-byte GUID.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also find the client connection ID in the extended events target output, if the <ph id="ph1">`client_connection_id`</ph> action is added to events in an extended events session.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can enable data access tracing and rerun the connection command and observe the <ph id="ph1">`ClientConnectionID`</ph> field in the data access trace, if you need further client driver diagnostic assistance.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can get the client connection ID programmatically by using the <ph id="ph1">`SqlConnection.ClientConnectionID`</ph> property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ClientConnectionID`</ph> is available for a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> object that successfully establishes  a connection.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If a connection attempt fails, <ph id="ph1">`ClientConnectionID`</ph> may be available via <ph id="ph2">`SqlException.ToString`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>ADO.NET also sends a thread-specific activity ID.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The activity ID is captured in the extended events sessions if the sessions are started with the TRACK_CAUSALITY option enabled.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For performance issues with an active connection, you can get the activity ID from the client's data access trace (<ph id="ph1">`ActivityID`</ph> field) and then locate the activity ID in the extended events output.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The activity ID in extended events is a 16-byte GUID (not the same as the GUID for the client connection ID) appended with a four-byte sequence number.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The sequence number represents the order of a request within a thread and indicates the relative ordering of batch and RPC statements for the thread.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ActivityID`</ph> is currently optionally sent for SQL batch statements and RPC requests when data access tracing is enabled on and the 18th bit in the data access tracing configuration word is turned ON.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following is a sample that uses <ph id="ph1">[!INCLUDE[tsql](../../../../includes/tsql-md.md)]</ph> to start an extended events session that will be stored in a ring buffer and will record the activity ID sent from a client on RPC and batch operations.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](../../../../docs/framework/network-programming/network-tracing.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tracing and Instrumenting Applications<ept id="p1">](../../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>