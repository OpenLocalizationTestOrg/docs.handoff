<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="implicitly-typed-local-variables.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c6f7ae5d7a579abead2a62f8fdc7c63e5c53328</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\implicitly-typed-local-variables.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2a7feb9073257fc16bea4da1b3ce050f62e02bd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">310dd6c73ccd90567cc5fdd281a5a64594783806</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Implicitly typed local variables - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implicitly typed local variables (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Local variables can be declared without giving an explicit type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`var`</ph> keyword instructs the compiler to infer the type of the variable from the expression on the right side of the initialization statement.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The inferred type may be a built-in type, an anonymous type, a user-defined type, or a type defined in the .NET Framework class library.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about how to initialize arrays with <ph id="ph1">`var`</ph>, see <bpt id="p1">[</bpt>Implicitly Typed Arrays<ept id="p1">](../arrays/implicitly-typed-arrays.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following examples show various ways in which local variables can be declared with <ph id="ph1">`var`</ph>:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It is important to understand that the <ph id="ph1">`var`</ph> keyword does not mean "variant" and does not indicate that the variable is loosely typed, or late-bound.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It just means that the compiler determines and assigns the most appropriate type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`var`</ph> keyword may be used in the following contexts:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>On local variables (variables declared at method scope) as shown in the previous example.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">[</bpt>for<ept id="p1">](../../language-reference/keywords/for.md)</ept> initialization statement.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">[</bpt>foreach<ept id="p1">](../../language-reference/keywords/foreach-in.md)</ept> initialization statement.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">[</bpt>using<ept id="p1">](../../language-reference/keywords/using-statement.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Use Implicitly Typed Local Variables and Arrays in a Query Expression<ept id="p1">](how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>var and anonymous types</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In many cases the use of <ph id="ph1">`var`</ph> is optional and is just a syntactic convenience.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, when a variable is initialized with an anonymous type you must declare the variable as <ph id="ph1">`var`</ph> if you need to access the properties of the object at a later point.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is a common scenario in <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query expressions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](anonymous-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>From the perspective of your source code, an anonymous type has no name.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Therefore, if a query variable has been initialized with <ph id="ph1">`var`</ph>, then the only way to access the properties in the returned sequence of objects is to use <ph id="ph2">`var`</ph> as the type of the iteration variable in the <ph id="ph3">`foreach`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following restrictions apply to implicitly-typed variable declarations:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`var`</ph> can only be used when a local variable is declared and initialized in the same statement; the variable cannot be initialized to null, or to a method group or an anonymous function.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`var`</ph> cannot be used on fields at class scope.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Variables declared by using <ph id="ph1">`var`</ph> cannot be used in the initialization expression.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In other words, this expression is legal<ph id="ph1">`: int i = (i = 20);`</ph> but this expression produces a compile-time error: <ph id="ph2">`var i = (i = 20);`</ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Multiple implicitly-typed variables cannot be initialized in the same statement.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If a type named <ph id="ph1">`var`</ph> is in scope, then the <ph id="ph2">`var`</ph> keyword will resolve to that type name and will not be treated as part of an implicitly typed local variable declaration.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You may find that <ph id="ph1">`var`</ph> can also be useful with query expressions in which the exact constructed type of the query variable is difficult to determine.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This can occur with grouping and ordering operations.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`var`</ph> keyword can also be useful when the specific type of the variable is tedious to type on the keyboard, or is obvious, or does not add to the readability of the code.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>One example where <ph id="ph1">`var`</ph> is helpful in this manner is with nested generic types such as those used with group operations.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the following query, the type of the query variable is <ph id="ph1">`IEnumerable&lt;IGrouping&lt;string, Student&gt;&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>As long as you and others who must maintain your code understand this, there is no problem with using implicit typing for convenience and brevity.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, the use of <ph id="ph1">`var`</ph> does have at least the potential to make your code more difficult to understand for other developers.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For that reason, the C# documentation generally uses <ph id="ph1">`var`</ph> only when it is required.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../language-reference/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicitly Typed Arrays<ept id="p1">](../arrays/implicitly-typed-arrays.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use Implicitly Typed Local Variables and Arrays in a Query Expression<ept id="p1">](how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](anonymous-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object and Collection Initializers<ept id="p1">](object-and-collection-initializers.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>var<ept id="p1">](../../language-reference/keywords/var.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ Query Expressions<ept id="p1">](../linq-query-expressions/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ (Language-Integrated Query)<ept id="p1">](../../linq/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>for<ept id="p1">](../../language-reference/keywords/for.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>foreach, in<ept id="p1">](../../language-reference/keywords/foreach-in.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>using Statement<ept id="p1">](../../language-reference/keywords/using-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>