{"content":"---\ntitle: What's New in C# 8.0 - C# Guide\ndescription: Get an overview of the new features available in C# 8.0. This article is up-to-date with preview 2.\nms.date: 02/12/2019\n---\n# What's new in C# 8.0\n\nThere are many enhancements to the C# language that you can try out already with preview 2. The new features added in preview 2 are:\n\n- [Pattern matching enhancements](#more-patterns-in-more-places):\n  * [Switch expressions](#switch-expressions)\n  * [Property patterns](#property-patterns)\n  * [Tuple patterns](#tuple-patterns)\n  * [Positional patterns](#positional-patterns)\n- [Using declarations](#using-declarations)\n- [Static local functions](#static-local-functions)\n- [Disposable ref structs](#disposable-ref-structs)\n\nThe following language features first appeared in C# 8.0 preview 1:\n\n- [Nullable reference types](#nullable-reference-types)\n- [Asynchronous streams](#asynchronous-streams)\n- [Indices and ranges](#indices-and-ranges)\n\n> [!NOTE]\n> This article was last updated for C# 8.0 preview 2.\n\nThe remainder of this article briefly describes these features. Where in-depth articles are available, links to those tutorials and overviews are provided.\n\n## More patterns in more places\n\n**Pattern matching** gives tools to provide shape-dependent functionality across related but different kinds of data. C# 7.0 introduced syntax for type patterns and constant patterns by using the [`is`](../language-reference/keywords/is.md) expression and the [`switch`](../language-reference/keywords/switch.md) statement. These features represented the first tentative steps toward supporting programming paradigms where data and functionality live apart. As the industry moves toward more microservices and other cloud-based architectures, other language tools are needed.\n\nC# 8.0 expands this vocabulary so you can use more pattern expressions in more places in your code. Consider these features when your data and functionality are separate. Consider pattern matching when your algorithms depend on a fact other than the runtime type of an object. These techniques provide another way to express designs.\n\nIn addition to new patterns in new places, C# 8.0 adds **recursive patterns**. The result of any pattern expression is an expression. A recursive pattern is simply a pattern expression applied to the output of another pattern expression.\n\n### switch expressions\n\nOften, a [`switch`](../language-reference/keywords/switch.md) statement produces a value in each of its `case` blocks. **Switch expressions** enable you to use more concise expression syntax. There are fewer repetitive `case` and `break` keywords, and fewer curly braces.  As an example, consider the following enum that lists the colors of the rainbow:\n\n```csharp\npublic enum Rainbow\n{\n    Red,\n    Orange,\n    Yellow,\n    Green,\n    Blue,\n    Indigo,\n    Violet\n}\n```\n\nYou could convert a `Rainbow` value to its RGB values using the following method containing a switch expression:\n\n```csharp\npublic static RGBColor FromRainbow(Rainbow colorBand) =>\n    colorBand switch\n    {\n        Rainbow.Red    => new RGBColor(0xFF, 0x00, 0x00),\n        Rainbow.Orange => new RGBColor(0xFF, 0x7F, 0x00),\n        Rainbow.Yellow => new RGBColor(0xFF, 0xFF, 0x00),\n        Rainbow.Green  => new RGBColor(0x00, 0xFF, 0x00),\n        Rainbow.Blue   => new RGBColor(0x00, 0x00, 0xFF),\n        Rainbow.Indigo => new RGBColor(0x4B, 0x00, 0x82),\n        Rainbow.Violet => new RGBColor(0x94, 0x00, 0xD3),\n        _              => throw new ArgumentException(message: \"invalid enum value\", paramName: nameof(colorBand)),\n    };\n```\n\nThere are several syntax improvements here:\n\n- The variable comes before the `switch` keyword. The different order makes it visually easy to distinguish the switch expression from the switch statement.\n- The `case` and `:` elements are replaced with `=>`. It's more concise and intuitive.\n- The `default` case is replaced with a `_` discard.\n- The bodies are expressions, not statements.\n\nContrast that with the equivalent code using the classic `switch` statement:\n\n```csharp\npublic static RGBColor FromRainbowClassic(Rainbow colorBand)\n{\n    switch (colorBand)\n    {\n        case Rainbow.Red:\n            return new RGBColor(0xFF, 0x00, 0x00);\n        case Rainbow.Orange:\n            return new RGBColor(0xFF, 0x7F, 0x00);\n        case Rainbow.Yellow:\n            return new RGBColor(0xFF, 0xFF, 0x00);\n        case Rainbow.Green:\n            return new RGBColor(0x00, 0xFF, 0x00);\n        case Rainbow.Blue:\n            return new RGBColor(0x00, 0x00, 0xFF);\n        case Rainbow.Indigo:\n            return new RGBColor(0x4B, 0x00, 0x82);\n        case Rainbow.Violet:\n            return new RGBColor(0x94, 0x00, 0xD3);\n        default:\n            throw new ArgumentException(message: \"invalid enum value\", paramName: nameof(colorBand));\n    };\n}\n```\n\n### Property patterns\n\nThe **property pattern** enables you to match on properties of the object examined. Consider an eCommerce site that must compute sales tax based on the buyer's address. That computation is not a core responsibility of an `Address` class. It will change over time, likely more often than address format changes. The amount of sales tax depends on the `State` property of the address. The following method uses the property pattern to compute the sales tax from the address and the price:\n\n```csharp\npublic static decimal ComputeSalesTax(Address location, decimal salePrice) =>\n    location switch\n    {\n        { State: \"WA\" } => salePrice * 0.06M,\n        { State: \"MN\" } => salePrice * 0.75M,\n        { State: \"MI\" } => salePrice * 0.05M,\n        // other cases removed for brevity...\n        _ => 0M\n    };\n```\n\nPattern matching creates a concise syntax for expressing this algorithm.\n\n### Tuple patterns\n\nSome algorithms depend on multiple inputs. **Tuple patterns** allow you to switch based on multiple values expressed as a [tuple](../tuples.md).  The following code shows a switch expression for the game *rock, paper, scissors*:\n\n```csharp\npublic static string RockPaperScissors(string first, string second)\n    => (first, second) switch\n    {\n        (\"rock\", \"paper\") => \"rock is covered by paper. Paper wins.\",\n        (\"rock\", \"scissors\") => \"rock breaks scissors. Rock wins.\",\n        (\"paper\", \"rock\") => \"paper covers rock. Paper wins.\",\n        (\"paper\", \"scissors\") => \"paper is cut by scissors. Scissors wins.\",\n        (\"scissors\", \"rock\") => \"scissors is broken by rock. Rock wins.\",\n        (\"scissors\", \"paper\") => \"scissors cuts paper. Scissors wins.\",\n        (_, _) => \"tie\"\n    };\n```\n\nThe messages indicate the winner. The discard case represents the three combinations for ties, or other text inputs.\n\n### Positional patterns\n\nSome types include a `Deconstruct` method that deconstructs its properties into discrete variables. When a `Deconstruct` method is accessible, you can use **positional patterns** to inspect properties of the object and use those properties for a pattern.  Consider the following `Point` class that includes a `Deconstruct` method to create discrete variables for `X` and `Y`:\n\n```csharp\npublic class Point\n{\n    public int X { get; }\n    public int Y { get; }\n\n    public Point(int x, int y) => (X, Y) = (x, y);\n\n    public void Deconstruct(out int x, out int y) =>\n        (x, y) = (X, Y);\n}\n```\n\nAdditionally, consider the following enum that represents various positions of a quadrant:\n\n```csharp\npublic enum Quadrant\n{\n    Unknown,\n    Origin,\n    One,\n    Two,\n    Three,\n    Four,\n    OnBorder\n}\n```\n\nThe following method uses the **positional pattern** to extract the values of `x` and `y`. Then, it uses a `when` clause to determine the `Quadrant` of the point:\n\n```csharp\nstatic Quadrant GetQuadrant(Point point) => point switch\n{\n    (0, 0) => Quadrant.Origin,\n    var (x, y) when x > 0 && y > 0 => Quadrant.One,\n    var (x, y) when x < 0 && y > 0 => Quadrant.Two,\n    var (x, y) when x < 0 && y < 0 => Quadrant.Three,\n    var (x, y) when x > 0 && y < 0 => Quadrant.Four,\n    var (_, _) => Quadrant.OnBorder,\n    _ => Quadrant.Unknown\n};\n```\n\nThe discard pattern in the preceding switch matches when either `x` or `y` is 0, but not both. A switch expression must either produce a value or throw an exception. If none of the cases match, the switch expression throws an exception. The compiler generates a warning for you if you do not cover all possible cases in your switch expression.\n\nYou can explore pattern matching techniques in this [advanced tutorial on pattern matching](../tutorials/pattern-matching.md).\n\n## using declarations\n\nA **using declaration** is a variable declaration preceded by the `using` keyword. It tells the compiler that the variable being declared should be disposed at the end of the enclosing scope. For example, consider the following code that writes a text file:\n\n```csharp\nstatic void WriteLinesToFile(IEnumerable<string> lines)\n{\n    using var file = new System.IO.StreamWriter(\"WriteLines2.txt\");\n    foreach (string line in lines)\n    {\n        // If the line doesn't contain the word 'Second', write the line to the file.\n        if (!line.Contains(\"Second\"))\n        {\n            file.WriteLine(line);\n        }\n    }\n// file is disposed here\n}\n```\n\nIn the preceding example, the file is disposed when the closing brace for the method is reached. That's the end of the scope in which `file` is declared. The preceding code is equivalent to the following code using the classic [using statements](../language-reference/keywords/using-statement.md) statement:\n\n```csharp\nstatic void WriteLinesToFile(IEnumerable<string> lines)\n{\n    using (var file = new System.IO.StreamWriter(\"WriteLines2.txt\"))\n    {\n        foreach (string line in lines)\n        {\n            // If the line doesn't contain the word 'Second', write the line to the file.\n            if (!line.Contains(\"Second\"))\n            {\n                file.WriteLine(line);\n            }\n        }\n    } // file is disposed here\n}\n```\n\nIn the preceding example, the file is disposed when the closing brace associated with the `using` statement is reached.\n\nIn both cases, the compiler generates the call to `Dispose()`. The compiler generates an error if the expression in the using statement is not disposable.\n\n## Static local functions\n\nYou can now add the `static` modifier to local functions to ensure that local function doesn't capture (reference) any variables from the enclosing scope. Doing so generates `CS8421`, \"A static local function can't contain a reference to \\<variable>.\" \n\nConsider the following code. The local function `LocalFunction` accesses the variable `y`, declared in the enclosing scope (the method `M`). Therefore, `LocalFunction` can't be declared with the `static` modifier:\n\n```csharp\nint M()\n{\n    int y;\n    LocalFunction();\n    return y;\n\n    void LocalFunction() => y = 0;\n}\n```\n\nThe following code contains a static local function. It can be static because it doesn't access any variables in the enclosing scope:\n\n```csharp\nint M()\n{\n    int y = 5;\n    int x = 7;\n    return Add(x, y);\n\n    static int Add(int left, int right) => left + right;\n}\n```\n\n## Disposable ref structs\n\nA `struct` declared with the `ref` modifier may not implement any interfaces and so cannot implement <xref:System.IDisposable>. Therefore, to enable a `ref struct` to be disposed, it must have an accessible `void Dispose()` method. This also applies to `readonly ref struct` declarations.\n\n## Nullable reference types\n\nInside a nullable annotation context, any variable of a reference type is considered to be a **nonnullable reference type**. If you want to indicate that a variable may be null, you must append the type name with the `?` to declare the variable as a **nullable reference type**.\n\nFor nonnullable reference types, the compiler uses flow analysis to ensure that local variables are initialized to a non-null value when declared. Fields must be initialized during construction. The compiler generates a warning if the variable is not set by a call to any of the available constructors or by an initializer. Furthermore, nonnullable reference types can't be assigned a value that could be null.\n\nNullable reference types aren't checked to ensure they aren't assigned or initialized to null. However, the compiler uses flow analysis to ensure that any variable of a nullable reference type is checked against null before it's accessed or assigned to a nonnullable reference type.\n\nYou can learn more about the feature in the overview of [nullable reference types](../nullable-references.md). Try it yourself in a new application in this [nullable reference types tutorial](../tutorials/nullable-reference-types.md). Learn about the steps to migrate an existing codebase to make use of nullable reference types in the [migrating an application to use nullable reference types tutorial](../tutorials/upgrade-to-nullable-references.md).\n\n## Asynchronous streams\n\nStarting with C# 8.0, you can create and consume streams asynchronously. A method that returns an asynchronous stream has three properties:\n\n1. It's declared with the `async` modifier.\n1. It returns an <xref:System.Collections.Generic.IAsyncEnumerable%601>.\n1. The method contains `yield return` statements to return successive elements in the asynchronous stream.\n\nConsuming an asynchronous stream requires you to add the `await` keyword before the `foreach` keyword when you enumerate the elements of the stream. Adding the `await` keyword requires the method that enumerates the asynchronous stream to be declared with the `async` modifier and to return a type allowed for an `async` method. Typically that means returning a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>. It can also be a <xref:System.Threading.Tasks.ValueTask> or <xref:System.Threading.Tasks.ValueTask%601>. A method can both consume and produce an asynchronous stream, which means it would return an <xref:System.Collections.Generic.IAsyncEnumerable%601>. The following code generates a sequence from 0 to 19, waiting 100 ms between generating each number:\n\n```csharp\npublic static async System.Collections.Generic.IAsyncEnumerable<int> GenerateSequence()\n{\n    for (int i = 0; i < 20; i++)\n    {\n        await Task.Delay(100);\n        yield return i;\n    }\n}\n```\n\nYou would enumerate the sequence using the `await foreach` statement:\n\n```csharp\nawait foreach (var number in GenerateSequence())\n{\n    Console.WriteLine(number);\n}\n```\n\nYou can try asynchronous streams yourself in our tutorial on [creating and consuming async streams](../tutorials/generate-consume-asynchronous-stream.md).\n\n## Indices and ranges\n\nRanges and indices provide a succinct syntax for specifying subranges in an array, <xref:System.Span%601>, or <xref:System.ReadOnlySpan%601>.\n\nYou can specify an index **from the end**. You specify **from the end** using the `^` operator. You are familiar with `array[2]` meaning the element \"2 from the start\". Now, `array[^2]` means the element \"2 from the end\". The index `^0` means \"the end\", or the index that follows the last element.\n\nYou can specify a **range** with the **range operator**: `..`. For example, `0..^0` specifies the entire range of the array: 0 from the start up to, but not including 0 from the end. Either operand may use \"from the start\" or \"from the end\". Furthermore, either operand may be omitted. The defaults are `0` for the start index, and `^0` for the end index.\n\nLet's look at a few examples. Consider the following array, annotated with its index from the start and from the end:\n\n```csharp\nvar words = new string[]\n{\n                // index from start    index from end\n    \"The\",      // 0                   ^9\n    \"quick\",    // 1                   ^8\n    \"brown\",    // 2                   ^7\n    \"fox\",      // 3                   ^6\n    \"jumped\",   // 4                   ^5\n    \"over\",     // 5                   ^4\n    \"the\",      // 6                   ^3\n    \"lazy\",     // 7                   ^2\n    \"dog\"       // 8                   ^1\n};\n```\n\nThe index of each element reinforces the concept of \"from the start\", and \"from the end\", and that ranges are exclusive of the end of the range. The \"start\" of the entire array is the first element. The \"end\" of the entire array is *past* the last element.\n\nYou can retrieve the last word with the `^1` index:\n\n```csharp\nConsole.WriteLine($\"The last word is {words[^1]}\");\n// writes \"dog\"\n```\n\nThe following code creates a subrange with the words \"quick\", \"brown\", and \"fox\". It includes `words[1]` through `words[3]`. The element `words[4]` is not in the range.\n\n```csharp\nvar quickBrownFox = words[1..4];\n```\n\nThe following code creates a subrange with \"lazy\" and \"dog\". It includes `words[^2]` and `words[^1]`. The end index `words[^0]` is not included:\n\n```csharp\nvar lazyDog = words[^2..^0];\n```\n\nThe following examples create ranges that are open ended for the start, end, or both:\n\n```csharp\nvar allWords = words[..]; // contains \"The\" through \"dog\".\nvar firstPhrase = words[..4]; // contains \"The\" through \"fox\"\nvar lastPhrase = words[6..]; // contains \"the, \"lazy\" and \"dog\"\n```\n\nYou can also declare ranges as variables:\n\n```csharp\nRange phrase = 1..4;\n```\n\nThe range can then be used inside the `[` and `]` characters:\n\n```csharp\nvar text = words[phrase];\n```\n","nodes":[{"pos":[4,175],"embed":true,"restype":"x-metadata","content":"title: What's New in C# 8.0 - C# Guide\ndescription: Get an overview of the new features available in C# 8.0. This article is up-to-date with preview 2.\nms.date: 02/12/2019","nodes":[{"content":"What's New in C# 8.0 - C# Guide","nodes":[{"pos":[0,31],"content":"What's New in C# 8.0 - C# Guide","nodes":[{"content":"What's New in C# 8.0 - C# Guide","pos":[0,31]}]}],"path":["title"],"nosxs":false},{"content":"Get an overview of the new features available in C# 8.0. This article is up-to-date with preview 2.","nodes":[{"pos":[0,99],"content":"Get an overview of the new features available in C# 8.0. This article is up-to-date with preview 2.","nodes":[{"content":"Get an overview of the new features available in C# 8.0. This article is up-to-date with preview 2.","pos":[0,99],"nodes":[{"content":"Get an overview of the new features available in C# 8.0.","pos":[0,56]},{"content":"This article is up-to-date with preview 2.","pos":[57,99]}]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[182,202],"content":"What's new in C# 8.0","linkify":"What's new in C# 8.0","nodes":[{"content":"What's new in C# 8.0","pos":[0,20]}]},{"content":"There are many enhancements to the C# language that you can try out already with preview 2.","pos":[204,295]},{"content":"The new features added in preview 2 are:","pos":[296,336]},{"pos":[340,403],"content":"<bpt id=\"p1\">[</bpt>Pattern matching enhancements<ept id=\"p1\">](#more-patterns-in-more-places)</ept>:","source":"[Pattern matching enhancements](#more-patterns-in-more-places):"},{"pos":[408,449],"content":"<bpt id=\"p1\">[</bpt>Switch expressions<ept id=\"p1\">](#switch-expressions)</ept>","source":"[Switch expressions](#switch-expressions)"},{"pos":[454,493],"content":"<bpt id=\"p1\">[</bpt>Property patterns<ept id=\"p1\">](#property-patterns)</ept>","source":"[Property patterns](#property-patterns)"},{"pos":[498,531],"content":"<bpt id=\"p1\">[</bpt>Tuple patterns<ept id=\"p1\">](#tuple-patterns)</ept>","source":"[Tuple patterns](#tuple-patterns)"},{"pos":[536,579],"content":"<bpt id=\"p1\">[</bpt>Positional patterns<ept id=\"p1\">](#positional-patterns)</ept>","source":"[Positional patterns](#positional-patterns)"},{"pos":[582,623],"content":"<bpt id=\"p1\">[</bpt>Using declarations<ept id=\"p1\">](#using-declarations)</ept>","source":"[Using declarations](#using-declarations)"},{"pos":[626,675],"content":"<bpt id=\"p1\">[</bpt>Static local functions<ept id=\"p1\">](#static-local-functions)</ept>","source":"[Static local functions](#static-local-functions)"},{"pos":[678,727],"content":"<bpt id=\"p1\">[</bpt>Disposable ref structs<ept id=\"p1\">](#disposable-ref-structs)</ept>","source":"[Disposable ref structs](#disposable-ref-structs)"},{"content":"The following language features first appeared in C# 8.0 preview 1:","pos":[729,796]},{"pos":[800,853],"content":"<bpt id=\"p1\">[</bpt>Nullable reference types<ept id=\"p1\">](#nullable-reference-types)</ept>","source":"[Nullable reference types](#nullable-reference-types)"},{"pos":[856,901],"content":"<bpt id=\"p1\">[</bpt>Asynchronous streams<ept id=\"p1\">](#asynchronous-streams)</ept>","source":"[Asynchronous streams](#asynchronous-streams)"},{"pos":[904,945],"content":"<bpt id=\"p1\">[</bpt>Indices and ranges<ept id=\"p1\">](#indices-and-ranges)</ept>","source":"[Indices and ranges](#indices-and-ranges)"},{"pos":[949,1010],"content":"[!NOTE]\nThis article was last updated for C# 8.0 preview 2.","leadings":["","> "],"nodes":[{"content":"This article was last updated for C# 8.0 preview 2.","pos":[8,59]}]},{"content":"The remainder of this article briefly describes these features.","pos":[1012,1075]},{"content":"Where in-depth articles are available, links to those tutorials and overviews are provided.","pos":[1076,1167]},{"pos":[1172,1200],"content":"More patterns in more places","linkify":"More patterns in more places","nodes":[{"content":"More patterns in more places","pos":[0,28]}]},{"content":"<bpt id=\"p1\">**</bpt>Pattern matching<ept id=\"p1\">**</ept> gives tools to provide shape-dependent functionality across related but different kinds of data.","pos":[1202,1319],"source":"**Pattern matching** gives tools to provide shape-dependent functionality across related but different kinds of data."},{"content":"C# 7.0 introduced syntax for type patterns and constant patterns by using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`is`</ph><ept id=\"p1\">](../language-reference/keywords/is.md)</ept> expression and the <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`switch`</ph><ept id=\"p2\">](../language-reference/keywords/switch.md)</ept> statement.","pos":[1320,1525],"source":" C# 7.0 introduced syntax for type patterns and constant patterns by using the [`is`](../language-reference/keywords/is.md) expression and the [`switch`](../language-reference/keywords/switch.md) statement."},{"content":"These features represented the first tentative steps toward supporting programming paradigms where data and functionality live apart.","pos":[1526,1659]},{"content":"As the industry moves toward more microservices and other cloud-based architectures, other language tools are needed.","pos":[1660,1777]},{"content":"C# 8.0 expands this vocabulary so you can use more pattern expressions in more places in your code.","pos":[1779,1878]},{"content":"Consider these features when your data and functionality are separate.","pos":[1879,1949]},{"content":"Consider pattern matching when your algorithms depend on a fact other than the runtime type of an object.","pos":[1950,2055]},{"content":"These techniques provide another way to express designs.","pos":[2056,2112]},{"content":"In addition to new patterns in new places, C# 8.0 adds <bpt id=\"p1\">**</bpt>recursive patterns<ept id=\"p1\">**</ept>.","pos":[2114,2192],"source":"In addition to new patterns in new places, C# 8.0 adds **recursive patterns**."},{"content":"The result of any pattern expression is an expression.","pos":[2193,2247]},{"content":"A recursive pattern is simply a pattern expression applied to the output of another pattern expression.","pos":[2248,2351]},{"pos":[2357,2375],"content":"switch expressions","linkify":"switch expressions","nodes":[{"content":"switch expressions","pos":[0,18]}]},{"content":"Often, a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`switch`</ph><ept id=\"p1\">](../language-reference/keywords/switch.md)</ept> statement produces a value in each of its <ph id=\"ph2\">`case`</ph> blocks.","pos":[2377,2495],"source":"Often, a [`switch`](../language-reference/keywords/switch.md) statement produces a value in each of its `case` blocks."},{"content":"<bpt id=\"p1\">**</bpt>Switch expressions<ept id=\"p1\">**</ept> enable you to use more concise expression syntax.","pos":[2496,2568],"source":"**Switch expressions** enable you to use more concise expression syntax."},{"content":"There are fewer repetitive <ph id=\"ph1\">`case`</ph> and <ph id=\"ph2\">`break`</ph> keywords, and fewer curly braces.","pos":[2569,2648],"source":" There are fewer repetitive `case` and `break` keywords, and fewer curly braces."},{"content":"As an example, consider the following enum that lists the colors of the rainbow:","pos":[2650,2730]},{"pos":[2848,2960],"content":"You could convert a <ph id=\"ph1\">`Rainbow`</ph> value to its RGB values using the following method containing a switch expression:","source":"You could convert a `Rainbow` value to its RGB values using the following method containing a switch expression:"},{"content":"There are several syntax improvements here:","pos":[3590,3633]},{"content":"The variable comes before the <ph id=\"ph1\">`switch`</ph> keyword.","pos":[3637,3684],"source":"The variable comes before the `switch` keyword."},{"content":"The different order makes it visually easy to distinguish the switch expression from the switch statement.","pos":[3685,3791]},{"content":"The <ph id=\"ph1\">`case`</ph> and <ph id=\"ph2\">`:`</ph> elements are replaced with <ph id=\"ph3\">`=&gt;`</ph>.","pos":[3794,3845],"source":"The `case` and `:` elements are replaced with `=>`."},{"content":"It's more concise and intuitive.","pos":[3846,3878]},{"pos":[3881,3931],"content":"The <ph id=\"ph1\">`default`</ph> case is replaced with a <ph id=\"ph2\">`_`</ph> discard.","source":"The `default` case is replaced with a `_` discard."},{"content":"The bodies are expressions, not statements.","pos":[3934,3977]},{"pos":[3979,4055],"content":"Contrast that with the equivalent code using the classic <ph id=\"ph1\">`switch`</ph> statement:","source":"Contrast that with the equivalent code using the classic `switch` statement:"},{"pos":[4850,4867],"content":"Property patterns","linkify":"Property patterns","nodes":[{"content":"Property patterns","pos":[0,17]}]},{"content":"The <bpt id=\"p1\">**</bpt>property pattern<ept id=\"p1\">**</ept> enables you to match on properties of the object examined.","pos":[4869,4952],"source":"The **property pattern** enables you to match on properties of the object examined."},{"content":"Consider an eCommerce site that must compute sales tax based on the buyer's address.","pos":[4953,5037]},{"content":"That computation is not a core responsibility of an <ph id=\"ph1\">`Address`</ph> class.","pos":[5038,5106],"source":" That computation is not a core responsibility of an `Address` class."},{"content":"It will change over time, likely more often than address format changes.","pos":[5107,5179]},{"content":"The amount of sales tax depends on the <ph id=\"ph1\">`State`</ph> property of the address.","pos":[5180,5251],"source":" The amount of sales tax depends on the `State` property of the address."},{"content":"The following method uses the property pattern to compute the sales tax from the address and the price:","pos":[5252,5355]},{"content":"Pattern matching creates a concise syntax for expressing this algorithm.","pos":[5683,5755]},{"pos":[5761,5775],"content":"Tuple patterns","linkify":"Tuple patterns","nodes":[{"content":"Tuple patterns","pos":[0,14]}]},{"content":"Some algorithms depend on multiple inputs.","pos":[5777,5819]},{"content":"<bpt id=\"p1\">**</bpt>Tuple patterns<ept id=\"p1\">**</ept> allow you to switch based on multiple values expressed as a <bpt id=\"p2\">[</bpt>tuple<ept id=\"p2\">](../tuples.md)</ept>.","pos":[5820,5921],"source":"**Tuple patterns** allow you to switch based on multiple values expressed as a [tuple](../tuples.md)."},{"content":"The following code shows a switch expression for the game <bpt id=\"p1\">*</bpt>rock, paper, scissors<ept id=\"p1\">*</ept>:","pos":[5923,6005],"source":"  The following code shows a switch expression for the game *rock, paper, scissors*:"},{"content":"The messages indicate the winner.","pos":[6581,6614]},{"content":"The discard case represents the three combinations for ties, or other text inputs.","pos":[6615,6697]},{"pos":[6703,6722],"content":"Positional patterns","linkify":"Positional patterns","nodes":[{"content":"Positional patterns","pos":[0,19]}]},{"content":"Some types include a <ph id=\"ph1\">`Deconstruct`</ph> method that deconstructs its properties into discrete variables.","pos":[6724,6823],"source":"Some types include a `Deconstruct` method that deconstructs its properties into discrete variables."},{"content":"When a <ph id=\"ph1\">`Deconstruct`</ph> method is accessible, you can use <bpt id=\"p1\">**</bpt>positional patterns<ept id=\"p1\">**</ept> to inspect properties of the object and use those properties for a pattern.","pos":[6824,6978],"source":" When a `Deconstruct` method is accessible, you can use **positional patterns** to inspect properties of the object and use those properties for a pattern."},{"content":"Consider the following <ph id=\"ph1\">`Point`</ph> class that includes a <ph id=\"ph2\">`Deconstruct`</ph> method to create discrete variables for <ph id=\"ph3\">`X`</ph> and <ph id=\"ph4\">`Y`</ph>:","pos":[6980,7099],"source":"  Consider the following `Point` class that includes a `Deconstruct` method to create discrete variables for `X` and `Y`:"},{"content":"Additionally, consider the following enum that represents various positions of a quadrant:","pos":[7322,7412]},{"content":"The following method uses the <bpt id=\"p1\">**</bpt>positional pattern<ept id=\"p1\">**</ept> to extract the values of <ph id=\"ph1\">`x`</ph> and <ph id=\"ph2\">`y`</ph>.","pos":[7531,7621],"source":"The following method uses the **positional pattern** to extract the values of `x` and `y`."},{"content":"Then, it uses a <ph id=\"ph1\">`when`</ph> clause to determine the <ph id=\"ph2\">`Quadrant`</ph> of the point:","pos":[7622,7693],"source":" Then, it uses a `when` clause to determine the `Quadrant` of the point:"},{"content":"The discard pattern in the preceding switch matches when either <ph id=\"ph1\">`x`</ph> or <ph id=\"ph2\">`y`</ph> is 0, but not both.","pos":[8077,8171],"source":"The discard pattern in the preceding switch matches when either `x` or `y` is 0, but not both."},{"content":"A switch expression must either produce a value or throw an exception.","pos":[8172,8242]},{"content":"If none of the cases match, the switch expression throws an exception.","pos":[8243,8313]},{"content":"The compiler generates a warning for you if you do not cover all possible cases in your switch expression.","pos":[8314,8420]},{"pos":[8422,8548],"content":"You can explore pattern matching techniques in this <bpt id=\"p1\">[</bpt>advanced tutorial on pattern matching<ept id=\"p1\">](../tutorials/pattern-matching.md)</ept>.","source":"You can explore pattern matching techniques in this [advanced tutorial on pattern matching](../tutorials/pattern-matching.md)."},{"pos":[8553,8571],"content":"using declarations","linkify":"using declarations","nodes":[{"content":"using declarations","pos":[0,18]}]},{"content":"A <bpt id=\"p1\">**</bpt>using declaration<ept id=\"p1\">**</ept> is a variable declaration preceded by the <ph id=\"ph1\">`using`</ph> keyword.","pos":[8573,8655],"source":"A **using declaration** is a variable declaration preceded by the `using` keyword."},{"content":"It tells the compiler that the variable being declared should be disposed at the end of the enclosing scope.","pos":[8656,8764]},{"content":"For example, consider the following code that writes a text file:","pos":[8765,8830]},{"content":"In the preceding example, the file is disposed when the closing brace for the method is reached.","pos":[9225,9321]},{"content":"That's the end of the scope in which <ph id=\"ph1\">`file`</ph> is declared.","pos":[9322,9378],"source":" That's the end of the scope in which `file` is declared."},{"content":"The preceding code is equivalent to the following code using the classic <bpt id=\"p1\">[</bpt>using statements<ept id=\"p1\">](../language-reference/keywords/using-statement.md)</ept> statement:","pos":[9379,9532],"source":" The preceding code is equivalent to the following code using the classic [using statements](../language-reference/keywords/using-statement.md) statement:"},{"pos":[9972,10091],"content":"In the preceding example, the file is disposed when the closing brace associated with the <ph id=\"ph1\">`using`</ph> statement is reached.","source":"In the preceding example, the file is disposed when the closing brace associated with the `using` statement is reached."},{"content":"In both cases, the compiler generates the call to <ph id=\"ph1\">`Dispose()`</ph>.","pos":[10093,10155],"source":"In both cases, the compiler generates the call to `Dispose()`."},{"content":"The compiler generates an error if the expression in the using statement is not disposable.","pos":[10156,10247]},{"pos":[10252,10274],"content":"Static local functions","linkify":"Static local functions","nodes":[{"content":"Static local functions","pos":[0,22]}]},{"content":"You can now add the <ph id=\"ph1\">`static`</ph> modifier to local functions to ensure that local function doesn't capture (reference) any variables from the enclosing scope.","pos":[10276,10430],"source":"You can now add the `static` modifier to local functions to ensure that local function doesn't capture (reference) any variables from the enclosing scope."},{"content":"Doing so generates <ph id=\"ph1\">`CS8421`</ph>, \"A static local function can't contain a reference to <ph id=\"ph2\">\\&lt;</ph>variable&gt;.\"","pos":[10431,10527],"source":" Doing so generates `CS8421`, \"A static local function can't contain a reference to \\<variable>.\""},{"content":"Consider the following code.","pos":[10530,10558]},{"content":"The local function <ph id=\"ph1\">`LocalFunction`</ph> accesses the variable <ph id=\"ph2\">`y`</ph>, declared in the enclosing scope (the method <ph id=\"ph3\">`M`</ph>).","pos":[10559,10670],"source":" The local function `LocalFunction` accesses the variable `y`, declared in the enclosing scope (the method `M`)."},{"content":"Therefore, <ph id=\"ph1\">`LocalFunction`</ph> can't be declared with the <ph id=\"ph2\">`static`</ph> modifier:","pos":[10671,10743],"source":" Therefore, `LocalFunction` can't be declared with the `static` modifier:"},{"content":"The following code contains a static local function.","pos":[10854,10906]},{"content":"It can be static because it doesn't access any variables in the enclosing scope:","pos":[10907,10987]},{"pos":[11129,11151],"content":"Disposable ref structs","linkify":"Disposable ref structs","nodes":[{"content":"Disposable ref structs","pos":[0,22]}]},{"content":"A <ph id=\"ph1\">`struct`</ph> declared with the <ph id=\"ph2\">`ref`</ph> modifier may not implement any interfaces and so cannot implement <ph id=\"ph3\">&lt;xref:System.IDisposable&gt;</ph>.","pos":[11153,11280],"source":"A `struct` declared with the `ref` modifier may not implement any interfaces and so cannot implement <xref:System.IDisposable>."},{"content":"Therefore, to enable a <ph id=\"ph1\">`ref struct`</ph> to be disposed, it must have an accessible <ph id=\"ph2\">`void Dispose()`</ph> method.","pos":[11281,11384],"source":" Therefore, to enable a `ref struct` to be disposed, it must have an accessible `void Dispose()` method."},{"content":"This also applies to <ph id=\"ph1\">`readonly ref struct`</ph> declarations.","pos":[11385,11441],"source":" This also applies to `readonly ref struct` declarations."},{"pos":[11446,11470],"content":"Nullable reference types","linkify":"Nullable reference types","nodes":[{"content":"Nullable reference types","pos":[0,24]}]},{"content":"Inside a nullable annotation context, any variable of a reference type is considered to be a <bpt id=\"p1\">**</bpt>nonnullable reference type<ept id=\"p1\">**</ept>.","pos":[11472,11596],"source":"Inside a nullable annotation context, any variable of a reference type is considered to be a **nonnullable reference type**."},{"content":"If you want to indicate that a variable may be null, you must append the type name with the <ph id=\"ph1\">`?`</ph> to declare the variable as a <bpt id=\"p1\">**</bpt>nullable reference type<ept id=\"p1\">**</ept>.","pos":[11597,11750],"source":" If you want to indicate that a variable may be null, you must append the type name with the `?` to declare the variable as a **nullable reference type**."},{"content":"For nonnullable reference types, the compiler uses flow analysis to ensure that local variables are initialized to a non-null value when declared.","pos":[11752,11898]},{"content":"Fields must be initialized during construction.","pos":[11899,11946]},{"content":"The compiler generates a warning if the variable is not set by a call to any of the available constructors or by an initializer.","pos":[11947,12075]},{"content":"Furthermore, nonnullable reference types can't be assigned a value that could be null.","pos":[12076,12162]},{"content":"Nullable reference types aren't checked to ensure they aren't assigned or initialized to null.","pos":[12164,12258]},{"content":"However, the compiler uses flow analysis to ensure that any variable of a nullable reference type is checked against null before it's accessed or assigned to a nonnullable reference type.","pos":[12259,12446]},{"content":"You can learn more about the feature in the overview of <bpt id=\"p1\">[</bpt>nullable reference types<ept id=\"p1\">](../nullable-references.md)</ept>.","pos":[12448,12558],"source":"You can learn more about the feature in the overview of [nullable reference types](../nullable-references.md)."},{"content":"Try it yourself in a new application in this <bpt id=\"p1\">[</bpt>nullable reference types tutorial<ept id=\"p1\">](../tutorials/nullable-reference-types.md)</ept>.","pos":[12559,12682],"source":" Try it yourself in a new application in this [nullable reference types tutorial](../tutorials/nullable-reference-types.md)."},{"content":"Learn about the steps to migrate an existing codebase to make use of nullable reference types in the <bpt id=\"p1\">[</bpt>migrating an application to use nullable reference types tutorial<ept id=\"p1\">](../tutorials/upgrade-to-nullable-references.md)</ept>.","pos":[12683,12900],"source":" Learn about the steps to migrate an existing codebase to make use of nullable reference types in the [migrating an application to use nullable reference types tutorial](../tutorials/upgrade-to-nullable-references.md)."},{"pos":[12905,12925],"content":"Asynchronous streams","linkify":"Asynchronous streams","nodes":[{"content":"Asynchronous streams","pos":[0,20]}]},{"content":"Starting with C# 8.0, you can create and consume streams asynchronously.","pos":[12927,12999]},{"content":"A method that returns an asynchronous stream has three properties:","pos":[13000,13066]},{"pos":[13071,13111],"content":"It's declared with the <ph id=\"ph1\">`async`</ph> modifier.","source":"It's declared with the `async` modifier."},{"pos":[13115,13184],"content":"It returns an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IAsyncEnumerable%601&gt;</ph>.","source":"It returns an <xref:System.Collections.Generic.IAsyncEnumerable%601>."},{"pos":[13188,13291],"content":"The method contains <ph id=\"ph1\">`yield return`</ph> statements to return successive elements in the asynchronous stream.","source":"The method contains `yield return` statements to return successive elements in the asynchronous stream."},{"content":"Consuming an asynchronous stream requires you to add the <ph id=\"ph1\">`await`</ph> keyword before the <ph id=\"ph2\">`foreach`</ph> keyword when you enumerate the elements of the stream.","pos":[13293,13441],"source":"Consuming an asynchronous stream requires you to add the `await` keyword before the `foreach` keyword when you enumerate the elements of the stream."},{"content":"Adding the <ph id=\"ph1\">`await`</ph> keyword requires the method that enumerates the asynchronous stream to be declared with the <ph id=\"ph2\">`async`</ph> modifier and to return a type allowed for an <ph id=\"ph3\">`async`</ph> method.","pos":[13442,13621],"source":" Adding the `await` keyword requires the method that enumerates the asynchronous stream to be declared with the `async` modifier and to return a type allowed for an `async` method."},{"content":"Typically that means returning a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[13622,13732],"source":" Typically that means returning a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>."},{"content":"It can also be a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ValueTask&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>.","pos":[13733,13837],"source":" It can also be a <xref:System.Threading.Tasks.ValueTask> or <xref:System.Threading.Tasks.ValueTask%601>."},{"content":"A method can both consume and produce an asynchronous stream, which means it would return an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IAsyncEnumerable%601&gt;</ph>.","pos":[13838,13986],"source":" A method can both consume and produce an asynchronous stream, which means it would return an <xref:System.Collections.Generic.IAsyncEnumerable%601>."},{"content":"The following code generates a sequence from 0 to 19, waiting 100 ms between generating each number:","pos":[13987,14087]},{"pos":[14296,14365],"content":"You would enumerate the sequence using the <ph id=\"ph1\">`await foreach`</ph> statement:","source":"You would enumerate the sequence using the `await foreach` statement:"},{"pos":[14466,14620],"content":"You can try asynchronous streams yourself in our tutorial on <bpt id=\"p1\">[</bpt>creating and consuming async streams<ept id=\"p1\">](../tutorials/generate-consume-asynchronous-stream.md)</ept>.","source":"You can try asynchronous streams yourself in our tutorial on [creating and consuming async streams](../tutorials/generate-consume-asynchronous-stream.md)."},{"pos":[14625,14643],"content":"Indices and ranges","linkify":"Indices and ranges","nodes":[{"content":"Indices and ranges","pos":[0,18]}]},{"pos":[14645,14786],"content":"Ranges and indices provide a succinct syntax for specifying subranges in an array, <ph id=\"ph1\">&lt;xref:System.Span%601&gt;</ph>, or <ph id=\"ph2\">&lt;xref:System.ReadOnlySpan%601&gt;</ph>.","source":"Ranges and indices provide a succinct syntax for specifying subranges in an array, <xref:System.Span%601>, or <xref:System.ReadOnlySpan%601>."},{"content":"You can specify an index <bpt id=\"p1\">**</bpt>from the end<ept id=\"p1\">**</ept>.","pos":[14788,14830],"source":"You can specify an index **from the end**."},{"content":"You specify <bpt id=\"p1\">**</bpt>from the end<ept id=\"p1\">**</ept> using the <ph id=\"ph1\">`^`</ph> operator.","pos":[14831,14883],"source":" You specify **from the end** using the `^` operator."},{"content":"You are familiar with <ph id=\"ph1\">`array[2]`</ph> meaning the element \"2 from the start\".","pos":[14884,14956],"source":" You are familiar with `array[2]` meaning the element \"2 from the start\"."},{"content":"Now, <ph id=\"ph1\">`array[^2]`</ph> means the element \"2 from the end\".","pos":[14957,15009],"source":" Now, `array[^2]` means the element \"2 from the end\"."},{"content":"The index <ph id=\"ph1\">`^0`</ph> means \"the end\", or the index that follows the last element.","pos":[15010,15085],"source":" The index `^0` means \"the end\", or the index that follows the last element."},{"content":"You can specify a <bpt id=\"p1\">**</bpt>range<ept id=\"p1\">**</ept> with the <bpt id=\"p2\">**</bpt>range operator<ept id=\"p2\">**</ept>: <ph id=\"ph1\">`..`</ph>.","pos":[15087,15149],"source":"You can specify a **range** with the **range operator**: `..`."},{"content":"For example, <ph id=\"ph1\">`0..^0`</ph> specifies the entire range of the array: 0 from the start up to, but not including 0 from the end.","pos":[15150,15269],"source":" For example, `0..^0` specifies the entire range of the array: 0 from the start up to, but not including 0 from the end."},{"content":"Either operand may use \"from the start\" or \"from the end\".","pos":[15270,15328]},{"content":"Furthermore, either operand may be omitted.","pos":[15329,15372]},{"content":"The defaults are <ph id=\"ph1\">`0`</ph> for the start index, and <ph id=\"ph2\">`^0`</ph> for the end index.","pos":[15373,15442],"source":" The defaults are `0` for the start index, and `^0` for the end index."},{"content":"Let's look at a few examples.","pos":[15444,15473]},{"content":"Consider the following array, annotated with its index from the start and from the end:","pos":[15474,15561]},{"content":"The index of each element reinforces the concept of \"from the start\", and \"from the end\", and that ranges are exclusive of the end of the range.","pos":[16040,16184]},{"content":"The \"start\" of the entire array is the first element.","pos":[16185,16238]},{"content":"The \"end\" of the entire array is <bpt id=\"p1\">*</bpt>past<ept id=\"p1\">*</ept> the last element.","pos":[16239,16296],"source":" The \"end\" of the entire array is *past* the last element."},{"pos":[16298,16349],"content":"You can retrieve the last word with the <ph id=\"ph1\">`^1`</ph> index:","source":"You can retrieve the last word with the `^1` index:"},{"content":"The following code creates a subrange with the words \"quick\", \"brown\", and \"fox\".","pos":[16434,16515]},{"content":"It includes <ph id=\"ph1\">`words[1]`</ph> through <ph id=\"ph2\">`words[3]`</ph>.","pos":[16516,16558],"source":" It includes `words[1]` through `words[3]`."},{"content":"The element <ph id=\"ph1\">`words[4]`</ph> is not in the range.","pos":[16559,16602],"source":" The element `words[4]` is not in the range."},{"content":"The following code creates a subrange with \"lazy\" and \"dog\".","pos":[16652,16712]},{"content":"It includes <ph id=\"ph1\">`words[^2]`</ph> and <ph id=\"ph2\">`words[^1]`</ph>.","pos":[16713,16753],"source":" It includes `words[^2]` and `words[^1]`."},{"content":"The end index <ph id=\"ph1\">`words[^0]`</ph> is not included:","pos":[16754,16796],"source":" The end index `words[^0]` is not included:"},{"content":"The following examples create ranges that are open ended for the start, end, or both:","pos":[16842,16927]},{"content":"You can also declare ranges as variables:","pos":[17129,17170]},{"pos":[17208,17269],"content":"The range can then be used inside the <ph id=\"ph1\">`[`</ph> and <ph id=\"ph2\">`]`</ph> characters:","source":"The range can then be used inside the `[` and `]` characters:"}]}