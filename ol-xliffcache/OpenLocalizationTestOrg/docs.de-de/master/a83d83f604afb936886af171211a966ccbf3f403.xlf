<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a83d83f604afb936886af171211a966ccbf3f403</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\markup-extensions-and-wpf-xaml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c514d35a13dda10679ff71cf09e28f2b40bf390</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c3376dcdd1ba09fe7b5f77ea5f7074f00e4bde8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Markup Extensions and WPF XAML | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Markup Extensions and WPF XAML</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic introduces the concept of markup extensions for XAML, including their syntax rules, purpose, and the class object model that underlies them.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Markup extensions are a general feature of the XAML language and of the .NET implementation of XAML services.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic specifically details markup extensions for use in WPF XAML.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Processors and Markup Extensions</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Generally speaking, a XAML parser can either interpret an attribute value as a literal string that can be converted to a primitive, or convert it to an object by some means.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>One such means is by referencing a type converter; this is documented in the topic <bpt id="p1">[</bpt>TypeConverters and XAML<ept id="p1">](../../../../docs/framework/wpf/advanced/typeconverters-and-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, there are scenarios where different behavior is required.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, a XAML processor can be instructed that a value of an attribute should not result in a new object in the object graph.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Instead, the attribute should result in an object graph that makes a reference to an already constructed object in another part of the graph, or a static object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Another scenario is that a XAML processor can be instructed to use a syntax that provides non-default arguments to the constructor of an object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These are the types of scenarios where a markup extension can provide the solution.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Basic Markup Extension Syntax</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A markup extension can be implemented to provide values for properties in an attribute usage, properties in a property element usage, or both.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When used to provide an attribute value, the syntax that distinguishes a markup extension sequence to a XAML processor is the presence of the opening and closing curly braces ({ and }).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The type of markup extension is then identified by the string token immediately following the opening curly brace.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When used in property element syntax, a markup extension is visually the same as any other element used to provide a property element value: a XAML element declaration that references the markup extension class as an element, enclosed within angle brackets (&lt;&gt;).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>XAML-Defined Markup Extensions</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Several markup extensions exist that are not specific to the WPF implementation of XAML, but are instead implementations of intrinsics or features of XAML as a language.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These markup extensions are implemented in the System.Xaml assembly as part of the general .NET Framework XAML services, and are within the XAML language XAML namespace.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In terms of common markup usage, these markup extensions are typically identifiable by the <ph id="ph1">`x:`</ph> prefix in the usage.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> base class (also defined in System.Xaml) provides the pattern that all markup extensions should use in order to be supported in XAML readers and XAML writers, including in WPF XAML.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Type`</ph> supplies the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object for the named type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This facility is used most frequently in styles and templates.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>x:Type Markup Extension<ept id="p1">](../../../../docs/framework/xaml-services/x-type-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Static`</ph> produces static values.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The values come from value-type code entities that are not directly the type of a target property's value, but can be evaluated to that type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>x:Static Markup Extension<ept id="p1">](../../../../docs/framework/xaml-services/x-static-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Null`</ph> specifies <ph id="ph2">`null`</ph> as a value for a property and can be used either for attributes or property element values.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>x:Null Markup Extension<ept id="p1">](../../../../docs/framework/xaml-services/x-null-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Array`</ph> provides support for creation of general arrays in XAML syntax, for cases where the collection support provided by WPF base elements and control models is deliberately not used.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>x:Array Markup Extension<ept id="p1">](../../../../docs/framework/xaml-services/x-array-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`x:`</ph> prefix is used for the typical XAML namespace mapping of the XAML language intrinsics, in the root element of a XAML file or production.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">[!INCLUDE[vs_current_short](../../../../includes/vs-current-short-md.md)]</ph> templates for WPF applications initiate a XAML file using this <ph id="ph2">`x:`</ph> mapping.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You could choose a different prefix token in your own XAML namespace mapping, but this documentation will assume the default <ph id="ph1">`x:`</ph> mapping as a means of identifying those entities that are a defined part of the XAML namespace for the XAML language, as opposed to the WPF default namespace or other XAML namespaces not related to a specific framework.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>WPF-Specific Markup Extensions</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The most common markup extensions used in WPF programming are those that support resource references (<ph id="ph1">`StaticResource`</ph> and <ph id="ph2">`DynamicResource`</ph>), and those that support data binding (<ph id="ph3">`Binding`</ph>).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`StaticResource`</ph> provides a value for a property by substituting the value of an already defined resource.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`StaticResource`</ph> evaluation is ultimately made at XAML load time and does not have access to the object graph at run time.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DynamicResource`</ph> provides a value for a property by deferring that value to be a run-time reference to a resource.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A dynamic resource reference forces a new lookup each time that such a resource is accessed and has access to the object graph at run time.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In order to get this access, <ph id="ph1">`DynamicResource`</ph> concept is supported by dependency properties in the WPF property system, and evaluated expressions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Therefore you can only use <ph id="ph1">`DynamicResource`</ph> for a dependency property target.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>DynamicResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Binding`</ph> provides a data bound value for a property, using the data context that applies to the parent object at run time.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This markup extension is relatively complex, because it enables a substantial inline syntax for specifying a data binding.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Binding Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/binding-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RelativeSource`</ph> provides source information for a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> that can navigate several possible relationships in the run-time object tree.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This provides specialized sourcing for bindings that are created in multi-use templates or created in code without full knowledge of the surrounding object tree.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>RelativeSource MarkupExtension<ept id="p1">](../../../../docs/framework/wpf/advanced/relativesource-markupextension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TemplateBinding`</ph> enables a control template to use values for templated properties that come from object-model-defined properties of the class that will use the template.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In other words, the property within the template definition can access a context that only exists once the template is applied.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>TemplateBinding Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/templatebinding-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information on the practical use of <ph id="ph1">`TemplateBinding`</ph>, see <bpt id="p1">[</bpt>Styling with ControlTemplates Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160041)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ColorConvertedBitmap`</ph> supports a relatively advanced imaging scenario.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>ColorConvertedBitmap Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/colorconvertedbitmap-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ComponentResourceKey`</ph> and <ph id="ph2">`ThemeDictionary`</ph> support aspects of resource lookup, particularly for resources and themes that are packaged with custom controls.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>, <bpt id="p2">[</bpt>ThemeDictionary Markup Extension<ept id="p2">](../../../../docs/framework/wpf/advanced/themedictionary-markup-extension.md)</ept>, or <bpt id="p3">[</bpt>Control Authoring Overview<ept id="p3">](../../../../docs/framework/wpf/controls/control-authoring-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>*Extension Classes</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For both the general XAML language and WPF-specific markup extensions, the behavior of each markup extension is identified to a XAML processor through a <ph id="ph1">`*Extension`</ph> class that derives from <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph>, and provides an implementation of the <ph id="ph3">&lt;xref:System.Windows.Markup.StaticExtension.ProvideValue%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This method on each extension provides the object that is returned when the markup extension is evaluated.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The returned object is typically evaluated based on the various string tokens that are passed to the markup extension.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.StaticResourceExtension&gt;</ph> class provides the surface implementation of actual resource lookup so that its <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> implementation returns the object that is requested, with the input of that particular implementation being a string that is used to look up the resource by its <ph id="ph3">`x:Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Much of this implementation detail is unimportant if you are using an existing markup extension.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Some markup extensions do not use string token arguments.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This is either because they return a static or consistent value, or because context for what value should be returned is available through one of the services passed through the <ph id="ph1">`serviceProvider`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`*Extension`</ph> naming pattern is for convenience and consistency.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It is not necessary in order for a XAML processor to identify that class as support for a markup extension.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>So long as your codebase includes System.Xaml and uses .NET Framework XAML Services implementations, all that is necessary to be recognized as a XAML markup extension is to derive from <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> and to support a construction syntax.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>WPF defines markup extension-enabling classes that do not follow the <ph id="ph1">`*Extension`</ph> naming pattern, for example <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Typically the reason for this is that the class supports scenarios beyond pure markup extension support.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In the case of <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>, that class supports run-time access to methods and properties of the object for scenarios that have nothing to do with XAML.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Extension Class Interpretation of Initialization Text</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The string tokens following the markup extension name and still within the braces are interpreted by a XAML processor in one of the following ways:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A comma always represents the separator or delimiter of individual tokens.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the individual separated tokens do not contain any equals signs, each token is treated as a constructor argument.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Each constructor parameter must be given as the type expected by that signature, and in the proper order expected by that signature.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A XAML processor must call the constructor that matches the argument count of the number of pairs.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For this reason, if you are implementing a custom markup extension, do not provide multiple parameters with the same argument count.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The behavior for how a XAML processor behaves if more than one markup extension constructor path with the same parameter count exists is not defined, but you should anticipate that a XAML processor is permitted to throw an exception on usage if this situation exists in the markup extension type definitions.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If the individual separated tokens contain equals signs, then a XAML processor first calls the default constructor for the markup extension.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Then, each name=value pair is interpreted as a property name that exists on the markup extension, and a value to assign to that property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If there is a parallel result between the constructor behavior and the property setting behavior in a markup extension, it does not matter which behavior you use.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It is more common usage to use the <bpt id="p1">*</bpt>property<ept id="p1">*</ept><ph id="ph1">`=`</ph><bpt id="p2">*</bpt>value<ept id="p2">*</ept> pairs for markup extensions that have more than one settable property, if only because it makes your markup more intentional and you are less likely to accidentally transpose constructor parameters.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>(When you specify property=value pairs, those properties may be in any order.) Also, there is no guarantee that a markup extension supplies a constructor parameter that sets every one of its settable properties.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> is a markup extension, with many properties that are settable through the extension in <bpt id="p1">*</bpt>property<ept id="p1">*</ept><ph id="ph2">`=`</ph><bpt id="p2">*</bpt>value<ept id="p2">*</ept> form, but <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> only supports two constructors: a default constructor, and one that sets an initial path.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A literal comma cannot be passed to a markup extension without escapement.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Escape Sequences and Markup Extensions</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Attribute handling in a XAML processor uses the curly braces as indicators of a markup extension sequence.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>It is also possible to produce a literal curly brace character attribute value if necessary, by entering an escape sequence using an empty curly brace pair followed by the literal curly brace.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See {} Escape Sequence - Markup Extension.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Nesting Markup Extensions in XAML Usage</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Nesting of multiple markup extensions is supported, and each markup extension will be evaluated deepest first.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, consider the following usage:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In this usage, the <ph id="ph1">`x:Static`</ph> statement is evaluated first and returns a string.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>That string is then used as the argument for <ph id="ph1">`DynamicResource`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Markup Extensions and Property Element Syntax</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When used as an object element that fills a property element value, a markup extension class is visually indistinguishable from a typical type-backed object element that can be used in XAML.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The practical difference between a typical object element and a markup extension is that the markup extension is either evaluated to a typed value or deferred as an expression.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Therefore the mechanisms for any possible type errors of property values for the markup extension will be different, similar to how a late-bound property is treated in other programming models.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>An ordinary object element will be evaluated for type match against the target property it is setting when the XAML is parsed.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Most markup extensions, when used in object element syntax to fill a property element, would not have content or any further property element syntax within.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Thus you would close the object element tag, and provide no child elements.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Whenever any object element is encountered by a XAML processor, the constructor for that class is called, which instantiates the object created from the parsed element.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A markup extension class is no different: if you want your markup extension to be usable in object element syntax, you must provide a default constructor.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Some existing markup extensions have at least one required property value that must be specified for effective initialization.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If so, that property value is typically given as a property attribute on the object element.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>XAML Namespace (x:) Language Features<ept id="p1">](../../../../docs/framework/xaml-services/xaml-namespace-x-language-features.md)</ept> and <bpt id="p2">[</bpt>WPF XAML Extensions<ept id="p2">](../../../../docs/framework/wpf/advanced/wpf-xaml-extensions.md)</ept> reference pages, markup extensions that have required properties (and the names of required properties) will be noted.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Reference pages will also note if either object element syntax or attribute syntax is disallowed for particular markup extensions.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A notable case is <bpt id="p1">[</bpt>x:Array Markup Extension<ept id="p1">](../../../../docs/framework/xaml-services/x-array-markup-extension.md)</ept>, which cannot support attribute syntax because the contents of that array must be specified within the tagging as content.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The array contents are handled as general objects, therefore no default type converter for the attribute is feasible.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Also, <bpt id="p1">[</bpt>x:Array Markup Extension<ept id="p1">](../../../../docs/framework/xaml-services/x-array-markup-extension.md)</ept> requires a <ph id="ph1">`type`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Overview (WPF)<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XAML Namespace (x:) Language Features<ept id="p1">](../../../../docs/framework/xaml-services/xaml-namespace-x-language-features.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WPF XAML Extensions<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-xaml-extensions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>StaticResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Binding Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/binding-markup-extension.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>DynamicResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>x:Type Markup Extension<ept id="p1">](../../../../docs/framework/xaml-services/x-type-markup-extension.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>