{"content":"---\ntitle: \"&amp; Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.&\"\nhelpviewer_keywords: \n  - \"And (&) operator\"\n  - \"ampersand operator (&)\"\n  - \"& operator\"\n  - \"concatenation operators [Visual Basic], syntax\"\n  - \"strings [Visual Basic], concatenating\"\nms.assetid: fefc3d00-cbf1-475c-8c5e-6fb213b3f85a\n---\n# &amp; Operator (Visual Basic)\nGenerates a string concatenation of two expressions.  \n  \n## Syntax  \n  \n```  \nresult = expression1 & expression2  \n```  \n  \n## Parts  \n `result`  \n Required. Any `String` or `Object` variable.  \n  \n `expression1`  \n Required. Any expression with a data type that widens to `String`.  \n  \n `expression2`  \n Required. Any expression with a data type that widens to `String`.  \n  \n## Remarks  \n If the data type of `expression1` or `expression2` is not `String` but widens to `String`, it is converted to `String`. If either of the data types does not widen to `String`, the compiler generates an error.  \n  \n The data type of `result` is `String`. If one or both expressions evaluate to [Nothing](../../../visual-basic/language-reference/nothing.md) or have a value of <xref:System.DBNull.Value?displayProperty=nameWithType>, they are treated as a string with a value of \"\".  \n  \n> [!NOTE]\n>  The `&` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n> [!NOTE]\n>  The ampersand (&) character can also be used to identify variables as type `Long`. For more information, see [Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md).  \n  \n## Example  \n This example uses the `&` operator to force string concatenation. The result is a string value representing the concatenation of the two string operands.  \n  \n [!code-vb[VbVbalrOperators#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#2)]  \n  \n## See also\n\n- [&= Operator](../../../visual-basic/language-reference/operators/and-assignment-operator.md)\n- [Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Concatenation Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)\n","nodes":[{"pos":[4,324],"embed":true,"restype":"x-metadata","content":"title: \"&amp; Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.&\"\nhelpviewer_keywords: \n  - \"And (&) operator\"\n  - \"ampersand operator (&)\"\n  - \"& operator\"\n  - \"concatenation operators [Visual Basic], syntax\"\n  - \"strings [Visual Basic], concatenating\"\nms.assetid: fefc3d00-cbf1-475c-8c5e-6fb213b3f85a","nodes":[{"content":"&amp; Operator (Visual Basic)","nodes":[{"pos":[0,29],"content":"&amp; Operator (Visual Basic)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph> Operator (Visual Basic)","pos":[0,29],"source":"&amp; Operator (Visual Basic)"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[331,360],"content":"&amp; Operator (Visual Basic)","linkify":"&amp; Operator (Visual Basic)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph> Operator (Visual Basic)","pos":[0,29],"source":"&amp; Operator (Visual Basic)"}]},{"content":"Generates a string concatenation of two expressions.","pos":[361,413]},{"pos":[422,428],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[489,494],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[510,519]},{"content":"Any <ph id=\"ph1\">`String`</ph> or <ph id=\"ph2\">`Object`</ph> variable.","pos":[520,554],"source":" Any `String` or `Object` variable."},{"content":"Required.","pos":[578,587]},{"content":"Any expression with a data type that widens to <ph id=\"ph1\">`String`</ph>.","pos":[588,644],"source":" Any expression with a data type that widens to `String`."},{"content":"Required.","pos":[668,677]},{"content":"Any expression with a data type that widens to <ph id=\"ph1\">`String`</ph>.","pos":[678,734],"source":" Any expression with a data type that widens to `String`."},{"pos":[743,750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the data type of <ph id=\"ph1\">`expression1`</ph> or <ph id=\"ph2\">`expression2`</ph> is not <ph id=\"ph3\">`String`</ph> but widens to <ph id=\"ph4\">`String`</ph>, it is converted to <ph id=\"ph5\">`String`</ph>.","pos":[754,873],"source":"If the data type of `expression1` or `expression2` is not `String` but widens to `String`, it is converted to `String`."},{"content":"If either of the data types does not widen to <ph id=\"ph1\">`String`</ph>, the compiler generates an error.","pos":[874,962],"source":" If either of the data types does not widen to `String`, the compiler generates an error."},{"content":"The data type of <ph id=\"ph1\">`result`</ph> is <ph id=\"ph2\">`String`</ph>.","pos":[969,1007],"source":"The data type of `result` is `String`."},{"content":"If one or both expressions evaluate to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept> or have a value of <ph id=\"ph1\">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph>, they are treated as a string with a value of \"\".","pos":[1008,1234],"source":" If one or both expressions evaluate to [Nothing](../../../visual-basic/language-reference/nothing.md) or have a value of <xref:System.DBNull.Value?displayProperty=nameWithType>, they are treated as a string with a value of \"\"."},{"pos":[1242,1662],"content":"[!NOTE]\n The `&` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":"The `&` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[9,418],"nodes":[{"content":"The <ph id=\"ph1\">`&amp;`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[0,158],"source":"The `&` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[159,267]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[268,409],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[1670,1897],"content":"[!NOTE]\n The ampersand (&) character can also be used to identify variables as type `Long`. For more information, see [Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md).","leadings":["","> "],"nodes":[{"content":"The ampersand (&) character can also be used to identify variables as type `Long`. For more information, see [Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md).","pos":[9,225],"nodes":[{"content":"The ampersand (&amp;) character can also be used to identify variables as type <ph id=\"ph1\">`Long`</ph>.","pos":[0,82],"source":"The ampersand (&) character can also be used to identify variables as type `Long`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Type Characters<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept>.","pos":[83,216],"source":" For more information, see [Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)."}]}]},{"pos":[1906,1913],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">`&amp;`</ph> operator to force string concatenation.","pos":[1917,1982],"source":"This example uses the `&` operator to force string concatenation."},{"content":"The result is a string value representing the concatenation of the two string operands.","pos":[1983,2070]},{"pos":[2201,2209],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2213,2305],"content":"<bpt id=\"p1\">[</bpt>&amp;= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/and-assignment-operator.md)</ept>","source":"[&= Operator](../../../visual-basic/language-reference/operators/and-assignment-operator.md)"},{"pos":[2308,2412],"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operators.md)</ept>","source":"[Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)"},{"pos":[2415,2527],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[2530,2654],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[2657,2810],"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept>","source":"[Concatenation Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)"}]}