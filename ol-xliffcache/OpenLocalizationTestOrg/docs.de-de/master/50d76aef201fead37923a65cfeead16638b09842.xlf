<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50d76aef201fead37923a65cfeead16638b09842</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c43dc0fa0a9c55d28438970003cfdc62f68400d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f524f810454073b8f72cfd01298d322bf86d7b3b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Asynchronous programming patterns</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Asynchronous programming patterns</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET provides three patterns for performing asynchronous operations:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p1">**</ept>, which uses a single method to represent the initiation and completion of an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TAP was introduced in the .NET Framework 4.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>It's the recommended approach to asynchronous programming in .NET.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>async<ept id="p1">](~/docs/csharp/language-reference/keywords/async.md)</ept> and <bpt id="p2">[</bpt>await<ept id="p2">](~/docs/csharp/language-reference/keywords/await.md)</ept> keywords in C# and the <bpt id="p3">[</bpt>Async<ept id="p3">](~/docs/visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id="p4">[</bpt>Await<ept id="p4">](~/docs/visual-basic/language-reference/operators/await-operator.md)</ept> operators in Visual Basic add language support for TAP.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p1">](task-based-asynchronous-pattern-tap.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">**</ept>, which is the event-based legacy model for providing asynchronous behavior.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It requires a method that has the <ph id="ph1">`Async`</ph> suffix and one or more events, event handler delegate types, and <ph id="ph2">`EventArg`</ph>-derived types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>EAP was introduced in the .NET Framework 2.0.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It's no longer recommended for new development.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](event-based-asynchronous-pattern-eap.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Asynchronous Programming Model (APM)<ept id="p1">**</ept> pattern (also called the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern), which is the legacy model that uses the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> interface to provide asynchronous behavior.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this pattern, synchronous operations require <ph id="ph1">`Begin`</ph> and <ph id="ph2">`End`</ph> methods (for example, <ph id="ph3">`BeginWrite`</ph> and <ph id="ph4">`EndWrite`</ph> to implement an asynchronous write operation).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This pattern is no longer recommended for new development.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming Model (APM)<ept id="p1">](asynchronous-programming-model-apm.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Comparison of patterns</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For a quick comparison of how the three patterns model asynchronous operations, consider a <ph id="ph1">`Read`</ph> method that reads a specified amount of data into a provided buffer starting at a specified offset:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The TAP counterpart of this method would expose the following single <ph id="ph1">`ReadAsync`</ph> method:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The EAP counterpart would expose the following set of types and members:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The APM counterpart would expose the <ph id="ph1">`BeginRead`</ph> and <ph id="ph2">`EndRead`</ph> methods:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async in depth<ept id="p1">](../async-in-depth.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous programming in C#<ept id="p1">](~/docs/csharp/async.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Programming in F#<ept id="p1">](~/docs/fsharp/tutorials/asynchronous-and-concurrent-programming/async.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](~/docs/visual-basic/programming-guide/concepts/async/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>