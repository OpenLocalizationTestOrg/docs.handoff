{"content":"---\ntitle: \"byte - C# Reference\"\nms.custom: seodec18\nms.date: 03/14/2017\nf1_keywords:\n  - \"byte\"\n  - \"byte_CSharpKeyword\"\nhelpviewer_keywords:\n  - \"byte keyword [C#]\"\nms.assetid: 111f1db9-ca32-4f0e-b497-4783517eda47\n---\n# byte (C# Reference)\n\n`byte` denotes an integral type that stores values as indicated in the following table.\n\n|Type|Range|Size|.NET type|\n|----------|-----------|----------|-------------------------|\n|`byte`|0 to 255|Unsigned 8-bit integer|<xref:System.Byte?displayProperty=nameWithType>|\n\n## Literals\n\nYou can declare and initialize a `byte` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it. If the integer literal is outside the range of `byte` (that is, if it is less than <xref:System.Byte.MinValue?displayProperty=nameWithType> or greater than <xref:System.Byte.MaxValue?displayProperty=nameWithType>), a compilation error occurs.\n\nIn the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](../../../csharp/language-reference/keywords/int.md) to `byte` values.\n\n[!code-csharp[Byte](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Byte)]\n\n> [!NOTE]\n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7.0, a couple of features have been added to enhance readability.\n- C# 7.0 allows the usage of the underscore character, `_`, as a digit separator.\n- C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix. A decimal literal isn't permitted to have a leading underscore.\n\nSome examples are shown below.\n\n[!code-csharp[Byte](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ByteS)]\n\n## Conversions\n\nThere is a predefined implicit conversion from `byte` to [short](../../../csharp/language-reference/keywords/short.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md).\n\nYou cannot implicitly convert non-literal numeric types of larger storage size to `byte`. For more information on the storage sizes of integral types, see [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md). Consider, for example, the following two `byte` variables `x` and `y`:\n\n```csharp\nbyte x = 10, y = 20;\n```\n\nThe following assignment statement will produce a compilation error, because the arithmetic expression on the right-hand side of the assignment operator evaluates to `int` by default.\n\n```csharp\n// Error: conversion from int to byte:\nbyte z = x + y;\n```\n\nTo fix this problem, use a cast:\n\n```csharp\n// OK: explicit conversion:\nbyte z = (byte)(x + y);\n```\n\nIt is possible though, to use the following statements where the destination variable has the same storage size or a larger storage size:\n\n```csharp\nint x = 10, y = 20;\nint m = x + y;\nlong n = x + y;\n```\n\nAlso, there is no implicit conversion from floating-point types to `byte`. For example, the following statement generates a compiler error unless an explicit cast is used:\n\n```csharp\n// Error: no implicit conversion from double:\nbyte x = 3.0;\n// OK: explicit conversion:\nbyte y = (byte)3.0;\n```\n\nWhen calling overloaded methods, a cast must be used. Consider, for example, the following overloaded methods that use `byte` and [int](../../../csharp/language-reference/keywords/int.md) parameters:\n\n```csharp\npublic static void SampleMethod(int i) {}\npublic static void SampleMethod(byte b) {}\n```\n\nUsing the `byte` cast guarantees that the correct type is called, for example:\n\n```csharp\n// Calling the method with the int parameter:\nSampleMethod(5);\n// Calling the method with the byte parameter:\nSampleMethod((byte)5);\n```\n\nFor information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md).\n\nFor more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).\n\n## C# Language Specification\n\nFor more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- <xref:System.Byte>\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)\n- [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)\n- [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)\n","nodes":[{"pos":[4,215],"embed":true,"restype":"x-metadata","content":"title: \"byte - C# Reference\"\nms.custom: seodec18\nms.date: 03/14/2017\nf1_keywords:\n  - \"byte\"\n  - \"byte_CSharpKeyword\"\nhelpviewer_keywords:\n  - \"byte keyword [C#]\"\nms.assetid: 111f1db9-ca32-4f0e-b497-4783517eda47","nodes":[{"content":"byte - C# Reference","nodes":[{"pos":[0,19],"content":"byte - C# Reference","nodes":[{"content":"byte - C# Reference","pos":[0,19]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[222,241],"content":"byte (C# Reference)","linkify":"byte (C# Reference)","nodes":[{"content":"byte (C# Reference)","pos":[0,19]}]},{"pos":[243,330],"content":"<ph id=\"ph1\">`byte`</ph> denotes an integral type that stores values as indicated in the following table.","source":"`byte` denotes an integral type that stores values as indicated in the following table."},{"content":"Type","pos":[333,337]},{"content":"Range","pos":[338,343]},{"content":"Size","pos":[344,348]},{"content":".NET type","pos":[349,358]},{"content":"0 to 255","pos":[430,438]},{"content":"Unsigned 8-bit integer","pos":[439,461]},{"pos":[515,523],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`byte`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.","pos":[525,678],"source":"You can declare and initialize a `byte` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`byte`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Byte.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Byte.MaxValue?displayProperty=nameWithType&gt;</ph>), a compilation error occurs.","pos":[679,921],"source":" If the integer literal is outside the range of `byte` (that is, if it is less than <xref:System.Byte.MinValue?displayProperty=nameWithType> or greater than <xref:System.Byte.MaxValue?displayProperty=nameWithType>), a compilation error occurs."},{"pos":[923,1142],"content":"In the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> to <ph id=\"ph1\">`byte`</ph> values.","source":"In the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](../../../csharp/language-reference/keywords/int.md) to `byte` values."},{"pos":[1258,1420],"content":"[!NOTE]\nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[8,160],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"content":"Starting with C# 7.0, a couple of features have been added to enhance readability.","pos":[1422,1504]},{"pos":[1507,1586],"content":"C# 7.0 allows the usage of the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator.","source":"C# 7.0 allows the usage of the underscore character, `_`, as a digit separator."},{"content":"C# 7.2 allows <ph id=\"ph1\">`_`</ph> to be used as a digit separator for a binary or hexadecimal literal, after the prefix.","pos":[1589,1693],"source":"C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix."},{"content":"A decimal literal isn't permitted to have a leading underscore.","pos":[1694,1757]},{"content":"Some examples are shown below.","pos":[1759,1789]},{"pos":[1907,1918],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"pos":[1920,2546],"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`byte`</ph> to <bpt id=\"p1\">[</bpt>short<ept id=\"p1\">](../../../csharp/language-reference/keywords/short.md)</ept>, <bpt id=\"p2\">[</bpt>ushort<ept id=\"p2\">](../../../csharp/language-reference/keywords/ushort.md)</ept>, <bpt id=\"p3\">[</bpt>int<ept id=\"p3\">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id=\"p4\">[</bpt>uint<ept id=\"p4\">](../../../csharp/language-reference/keywords/uint.md)</ept>, <bpt id=\"p5\">[</bpt>long<ept id=\"p5\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p6\">[</bpt>ulong<ept id=\"p6\">](../../../csharp/language-reference/keywords/ulong.md)</ept>, <bpt id=\"p7\">[</bpt>float<ept id=\"p7\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p8\">[</bpt>double<ept id=\"p8\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p9\">[</bpt>decimal<ept id=\"p9\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","source":"There is a predefined implicit conversion from `byte` to [short](../../../csharp/language-reference/keywords/short.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"You cannot implicitly convert non-literal numeric types of larger storage size to <ph id=\"ph1\">`byte`</ph>.","pos":[2548,2637],"source":"You cannot implicitly convert non-literal numeric types of larger storage size to `byte`."},{"content":"For more information on the storage sizes of integral types, see <bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept>.","pos":[2638,2795],"source":" For more information on the storage sizes of integral types, see [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)."},{"content":"Consider, for example, the following two <ph id=\"ph1\">`byte`</ph> variables <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph>:","pos":[2796,2866],"source":" Consider, for example, the following two `byte` variables `x` and `y`:"},{"pos":[2904,3087],"content":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right-hand side of the assignment operator evaluates to <ph id=\"ph1\">`int`</ph> by default.","source":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right-hand side of the assignment operator evaluates to `int` by default."},{"content":"To fix this problem, use a cast:","pos":[3159,3191]},{"content":"It is possible though, to use the following statements where the destination variable has the same storage size or a larger storage size:","pos":[3260,3397]},{"content":"Also, there is no implicit conversion from floating-point types to <ph id=\"ph1\">`byte`</ph>.","pos":[3465,3539],"source":"Also, there is no implicit conversion from floating-point types to `byte`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[3540,3636]},{"content":"When calling overloaded methods, a cast must be used.","pos":[3761,3814]},{"content":"Consider, for example, the following overloaded methods that use <ph id=\"ph1\">`byte`</ph> and <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> parameters:","pos":[3815,3960],"source":" Consider, for example, the following overloaded methods that use `byte` and [int](../../../csharp/language-reference/keywords/int.md) parameters:"},{"pos":[4062,4140],"content":"Using the <ph id=\"ph1\">`byte`</ph> cast guarantees that the correct type is called, for example:","source":"Using the `byte` cast guarantees that the correct type is called, for example:"},{"pos":[4290,4518],"content":"For information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>.","source":"For information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md)."},{"pos":[4520,4707],"content":"For more information on implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"pos":[4712,4737],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](~/_csharplang/spec/types.md#integral-types)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[4739,4897],"source":"For more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[4898,4974]},{"pos":[4979,4987],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5012,5071],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[5074,5140],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[5143,5210],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[5213,5304],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept>","source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)"},{"pos":[5307,5398],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept>","source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)"},{"pos":[5401,5520],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)"},{"pos":[5523,5642],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}