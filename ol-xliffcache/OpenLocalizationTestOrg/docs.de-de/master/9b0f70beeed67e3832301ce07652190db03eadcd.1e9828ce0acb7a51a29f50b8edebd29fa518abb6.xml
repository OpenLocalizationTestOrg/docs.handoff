{"content":"---\ntitle: \"General Naming Conventions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"names [.NET Framework], conflicts\"\n  - \"type names, conflicts\"\n  - \"language-specific type names\"\n  - \"names [.NET Framework], about naming guidelines\"\n  - \"names [.NET Framework], abbreviations\"\n  - \"abbreviation naming guidelines\"\n  - \"acronym naming guidelines\"\n  - \"Hungarian notation\"\n  - \"names [.NET Framework], type names\"\n  - \"names [.NET Framework], acronyms\"\nms.assetid: d3a77ea1-75d2-4969-a8c3-3e1e3e1aaedc\ncaps.latest.revision: 18\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# General Naming Conventions\nThis section describes general naming conventions that relate to word choice, guidelines on using abbreviations and acronyms, and recommendations on how to avoid using language-specific names.  \n  \n## Word Choice  \n **✓ DO** choose easily readable identifier names.  \n  \n For example, a property named `HorizontalAlignment` is more English-readable than `AlignmentHorizontal`.  \n  \n **✓ DO** favor readability over brevity.  \n  \n The property name `CanScrollHorizontally` is better than `ScrollableX` (an obscure reference to the X-axis).  \n  \n **X DO NOT** use underscores, hyphens, or any other nonalphanumeric characters.  \n  \n **X DO NOT** use Hungarian notation.  \n  \n **X AVOID** using identifiers that conflict with keywords of widely used programming languages.  \n  \n According to Rule 4 of the Common Language Specification (CLS), all compliant languages must provide a mechanism that allows access to named items that use a keyword of that language as an identifier. C#, for example, uses the @ sign as an escape mechanism in this case. However, it is still a good idea to avoid common keywords because it is much more difficult to use a method with the escape sequence than one without it.  \n  \n## Using Abbreviations and Acronyms  \n **X DO NOT** use abbreviations or contractions as part of identifier names.  \n  \n For example, use `GetWindow` rather than `GetWin`.  \n  \n **X DO NOT** use any acronyms that are not widely accepted, and even if they are, only when necessary.  \n  \n## Avoiding Language-Specific Names  \n **✓ DO** use semantically interesting names rather than language-specific keywords for type names.  \n  \n For example, `GetLength` is a better name than `GetInt`.  \n  \n **✓ DO** use a generic CLR type name, rather than a language-specific name, in the rare cases when an identifier has no semantic meaning beyond its type.  \n  \n For example, a method converting to <xref:System.Int64> should be named `ToInt64`, not `ToLong` (because <xref:System.Int64> is a CLR name for the C#-specific alias `long`). The following table presents several base data types using the CLR type names (as well as the corresponding type names for C#, Visual Basic, and C++).  \n  \n|C#|Visual Basic|C++|CLR|  \n|---------|------------------|-----------|---------|  \n|**sbyte**|**SByte**|**char**|**SByte**|  \n|**byte**|**Byte**|**unsigned char**|**Byte**|  \n|**short**|**Short**|**short**|**Int16**|  \n|**ushort**|**UInt16**|**unsigned short**|**UInt16**|  \n|**int**|**Integer**|**int**|**Int32**|  \n|**uint**|**UInt32**|**unsigned int**|**UInt32**|  \n|**long**|**Long**|**__int64**|**Int64**|  \n|**ulong**|**UInt64**|**unsigned __int64**|**UInt64**|  \n|**float**|**Single**|**float**|**Single**|  \n|**double**|**Double**|**double**|**Double**|  \n|**bool**|**Boolean**|**bool**|**Boolean**|  \n|**char**|**Char**|**wchar_t**|**Char**|  \n|**string**|**String**|**String**|**String**|  \n|**object**|**Object**|**Object**|**Object**|  \n  \n **✓ DO**  use a common name, such as `value` or `item`, rather than repeating the type name, in the rare cases when an identifier has no semantic meaning and the type of the parameter is not important.  \n  \n## Naming New Versions of Existing APIs  \n **✓ DO** use a name similar to the old API when creating new versions of an existing API.  \n  \n This helps to highlight the relationship between the APIs.  \n  \n **✓ DO** prefer adding a suffix rather than a prefix to indicate a new version of an existing API.  \n  \n This will assist discovery when browsing documentation, or using Intellisense. The old version of the API will be organized close to the new APIs, because most browsers and Intellisense show identifiers in alphabetical order.  \n  \n **✓ CONSIDER** using a brand new, but meaningful identifier, instead of adding a suffix or a prefix.  \n  \n **✓ DO** use a numeric suffix to indicate a new version of an existing API, particularly if the existing name of the API is the only name that makes sense (i.e., if it is an industry standard) and if adding any meaningful suffix (or changing the name) is not an appropriate option.  \n  \n **X DO NOT** use the \"Ex\" (or a similar) suffix for an identifier to distinguish it from an earlier version of the same API.  \n  \n **✓ DO** use the \"64\" suffix when introducing versions of APIs that operate on a 64-bit integer (a long integer) instead of a 32-bit integer. You only need to take this approach when the existing 32-bit API exists; don’t do it for brand new APIs with only a 64-bit version.  \n  \n *Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*  \n  \n *Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*  \n  \n## See Also  \n [Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)   \n [Naming Guidelines](../../../docs/standard/design-guidelines/naming-guidelines.md)","nodes":[{"pos":[12,55],"content":"General Naming Conventions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"General Naming Conventions | Microsoft Docs","pos":[0,43]}]},{"pos":[801,827],"content":"General Naming Conventions","linkify":"General Naming Conventions","nodes":[{"content":"General Naming Conventions","pos":[0,26]}]},{"content":"This section describes general naming conventions that relate to word choice, guidelines on using abbreviations and acronyms, and recommendations on how to avoid using language-specific names.","pos":[828,1020]},{"pos":[1029,1040],"content":"Word Choice","linkify":"Word Choice","nodes":[{"content":"Word Choice","pos":[0,11]}]},{"pos":[1044,1093],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> choose easily readable identifier names.","source":"**✓ DO** choose easily readable identifier names."},{"pos":[1100,1204],"content":"For example, a property named <ph id=\"ph1\">`HorizontalAlignment`</ph> is more English-readable than <ph id=\"ph2\">`AlignmentHorizontal`</ph>.","source":"For example, a property named `HorizontalAlignment` is more English-readable than `AlignmentHorizontal`."},{"pos":[1211,1251],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> favor readability over brevity.","source":"**✓ DO** favor readability over brevity."},{"pos":[1258,1366],"content":"The property name <ph id=\"ph1\">`CanScrollHorizontally`</ph> is better than <ph id=\"ph2\">`ScrollableX`</ph> (an obscure reference to the X-axis).","source":"The property name `CanScrollHorizontally` is better than `ScrollableX` (an obscure reference to the X-axis)."},{"pos":[1373,1452],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use underscores, hyphens, or any other nonalphanumeric characters.","source":"**X DO NOT** use underscores, hyphens, or any other nonalphanumeric characters."},{"pos":[1459,1495],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use Hungarian notation.","source":"**X DO NOT** use Hungarian notation."},{"pos":[1502,1597],"content":"<bpt id=\"p1\">**</bpt>X AVOID<ept id=\"p1\">**</ept> using identifiers that conflict with keywords of widely used programming languages.","source":"**X AVOID** using identifiers that conflict with keywords of widely used programming languages."},{"content":"According to Rule 4 of the Common Language Specification (CLS), all compliant languages must provide a mechanism that allows access to named items that use a keyword of that language as an identifier.","pos":[1604,1804]},{"content":"C#, for example, uses the @ sign as an escape mechanism in this case.","pos":[1805,1874]},{"content":"However, it is still a good idea to avoid common keywords because it is much more difficult to use a method with the escape sequence than one without it.","pos":[1875,2028]},{"pos":[2037,2069],"content":"Using Abbreviations and Acronyms","linkify":"Using Abbreviations and Acronyms","nodes":[{"content":"Using Abbreviations and Acronyms","pos":[0,32]}]},{"pos":[2073,2148],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use abbreviations or contractions as part of identifier names.","source":"**X DO NOT** use abbreviations or contractions as part of identifier names."},{"pos":[2155,2205],"content":"For example, use <ph id=\"ph1\">`GetWindow`</ph> rather than <ph id=\"ph2\">`GetWin`</ph>.","source":"For example, use `GetWindow` rather than `GetWin`."},{"pos":[2212,2314],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use any acronyms that are not widely accepted, and even if they are, only when necessary.","source":"**X DO NOT** use any acronyms that are not widely accepted, and even if they are, only when necessary."},{"pos":[2323,2355],"content":"Avoiding Language-Specific Names","linkify":"Avoiding Language-Specific Names","nodes":[{"content":"Avoiding Language-Specific Names","pos":[0,32]}]},{"pos":[2359,2457],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use semantically interesting names rather than language-specific keywords for type names.","source":"**✓ DO** use semantically interesting names rather than language-specific keywords for type names."},{"pos":[2464,2520],"content":"For example, <ph id=\"ph1\">`GetLength`</ph> is a better name than <ph id=\"ph2\">`GetInt`</ph>.","source":"For example, `GetLength` is a better name than `GetInt`."},{"pos":[2527,2680],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use a generic CLR type name, rather than a language-specific name, in the rare cases when an identifier has no semantic meaning beyond its type.","source":"**✓ DO** use a generic CLR type name, rather than a language-specific name, in the rare cases when an identifier has no semantic meaning beyond its type."},{"content":"For example, a method converting to <ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph> should be named <ph id=\"ph2\">`ToInt64`</ph>, not <ph id=\"ph3\">`ToLong`</ph> (because <ph id=\"ph4\">&lt;xref:System.Int64&gt;</ph> is a CLR name for the C#-specific alias <ph id=\"ph5\">`long`</ph>).","pos":[2687,2860],"source":"For example, a method converting to <xref:System.Int64> should be named `ToInt64`, not `ToLong` (because <xref:System.Int64> is a CLR name for the C#-specific alias `long`)."},{"content":"The following table presents several base data types using the CLR type names (as well as the corresponding type names for C#, Visual Basic, and C++).","pos":[2861,3011]},{"content":"C#","pos":[3018,3020]},{"content":"Visual Basic","pos":[3021,3033]},{"content":"C++","pos":[3034,3037]},{"content":"CLR","pos":[3038,3041]},{"pos":[3101,3110],"content":"<bpt id=\"p1\">**</bpt>sbyte<ept id=\"p1\">**</ept>","source":"**sbyte**"},{"pos":[3111,3120],"content":"<bpt id=\"p1\">**</bpt>SByte<ept id=\"p1\">**</ept>","source":"**SByte**"},{"pos":[3121,3129],"content":"<bpt id=\"p1\">**</bpt>char<ept id=\"p1\">**</ept>","source":"**char**"},{"pos":[3130,3139],"content":"<bpt id=\"p1\">**</bpt>SByte<ept id=\"p1\">**</ept>","source":"**SByte**"},{"pos":[3144,3152],"content":"<bpt id=\"p1\">**</bpt>byte<ept id=\"p1\">**</ept>","source":"**byte**"},{"pos":[3153,3161],"content":"<bpt id=\"p1\">**</bpt>Byte<ept id=\"p1\">**</ept>","source":"**Byte**"},{"pos":[3162,3179],"content":"<bpt id=\"p1\">**</bpt>unsigned char<ept id=\"p1\">**</ept>","source":"**unsigned char**"},{"pos":[3180,3188],"content":"<bpt id=\"p1\">**</bpt>Byte<ept id=\"p1\">**</ept>","source":"**Byte**"},{"pos":[3193,3202],"content":"<bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept>","source":"**short**"},{"pos":[3203,3212],"content":"<bpt id=\"p1\">**</bpt>Short<ept id=\"p1\">**</ept>","source":"**Short**"},{"pos":[3213,3222],"content":"<bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept>","source":"**short**"},{"pos":[3223,3232],"content":"<bpt id=\"p1\">**</bpt>Int16<ept id=\"p1\">**</ept>","source":"**Int16**"},{"pos":[3237,3247],"content":"<bpt id=\"p1\">**</bpt>ushort<ept id=\"p1\">**</ept>","source":"**ushort**"},{"pos":[3248,3258],"content":"<bpt id=\"p1\">**</bpt>UInt16<ept id=\"p1\">**</ept>","source":"**UInt16**"},{"pos":[3259,3277],"content":"<bpt id=\"p1\">**</bpt>unsigned short<ept id=\"p1\">**</ept>","source":"**unsigned short**"},{"pos":[3278,3288],"content":"<bpt id=\"p1\">**</bpt>UInt16<ept id=\"p1\">**</ept>","source":"**UInt16**"},{"pos":[3293,3300],"content":"<bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>","source":"**int**"},{"pos":[3301,3312],"content":"<bpt id=\"p1\">**</bpt>Integer<ept id=\"p1\">**</ept>","source":"**Integer**"},{"pos":[3313,3320],"content":"<bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>","source":"**int**"},{"pos":[3321,3330],"content":"<bpt id=\"p1\">**</bpt>Int32<ept id=\"p1\">**</ept>","source":"**Int32**"},{"pos":[3335,3343],"content":"<bpt id=\"p1\">**</bpt>uint<ept id=\"p1\">**</ept>","source":"**uint**"},{"pos":[3344,3354],"content":"<bpt id=\"p1\">**</bpt>UInt32<ept id=\"p1\">**</ept>","source":"**UInt32**"},{"pos":[3355,3371],"content":"<bpt id=\"p1\">**</bpt>unsigned int<ept id=\"p1\">**</ept>","source":"**unsigned int**"},{"pos":[3372,3382],"content":"<bpt id=\"p1\">**</bpt>UInt32<ept id=\"p1\">**</ept>","source":"**UInt32**"},{"pos":[3387,3395],"content":"<bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>","source":"**long**"},{"pos":[3396,3404],"content":"<bpt id=\"p1\">**</bpt>Long<ept id=\"p1\">**</ept>","source":"**Long**"},{"pos":[3405,3416],"content":"<bpt id=\"p1\">**</bpt>__int64<ept id=\"p1\">**</ept>","source":"**__int64**"},{"pos":[3417,3426],"content":"<bpt id=\"p1\">**</bpt>Int64<ept id=\"p1\">**</ept>","source":"**Int64**"},{"pos":[3431,3440],"content":"<bpt id=\"p1\">**</bpt>ulong<ept id=\"p1\">**</ept>","source":"**ulong**"},{"pos":[3441,3451],"content":"<bpt id=\"p1\">**</bpt>UInt64<ept id=\"p1\">**</ept>","source":"**UInt64**"},{"pos":[3452,3472],"content":"<bpt id=\"p1\">**</bpt>unsigned __int64<ept id=\"p1\">**</ept>","source":"**unsigned __int64**"},{"pos":[3473,3483],"content":"<bpt id=\"p1\">**</bpt>UInt64<ept id=\"p1\">**</ept>","source":"**UInt64**"},{"pos":[3488,3497],"content":"<bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>","source":"**float**"},{"pos":[3498,3508],"content":"<bpt id=\"p1\">**</bpt>Single<ept id=\"p1\">**</ept>","source":"**Single**"},{"pos":[3509,3518],"content":"<bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>","source":"**float**"},{"pos":[3519,3529],"content":"<bpt id=\"p1\">**</bpt>Single<ept id=\"p1\">**</ept>","source":"**Single**"},{"pos":[3534,3544],"content":"<bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>","source":"**double**"},{"pos":[3545,3555],"content":"<bpt id=\"p1\">**</bpt>Double<ept id=\"p1\">**</ept>","source":"**Double**"},{"pos":[3556,3566],"content":"<bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>","source":"**double**"},{"pos":[3567,3577],"content":"<bpt id=\"p1\">**</bpt>Double<ept id=\"p1\">**</ept>","source":"**Double**"},{"pos":[3582,3590],"content":"<bpt id=\"p1\">**</bpt>bool<ept id=\"p1\">**</ept>","source":"**bool**"},{"pos":[3591,3602],"content":"<bpt id=\"p1\">**</bpt>Boolean<ept id=\"p1\">**</ept>","source":"**Boolean**"},{"pos":[3603,3611],"content":"<bpt id=\"p1\">**</bpt>bool<ept id=\"p1\">**</ept>","source":"**bool**"},{"pos":[3612,3623],"content":"<bpt id=\"p1\">**</bpt>Boolean<ept id=\"p1\">**</ept>","source":"**Boolean**"},{"pos":[3628,3636],"content":"<bpt id=\"p1\">**</bpt>char<ept id=\"p1\">**</ept>","source":"**char**"},{"pos":[3637,3645],"content":"<bpt id=\"p1\">**</bpt>Char<ept id=\"p1\">**</ept>","source":"**Char**"},{"pos":[3646,3657],"content":"<bpt id=\"p1\">**</bpt>wchar_t<ept id=\"p1\">**</ept>","source":"**wchar_t**"},{"pos":[3658,3666],"content":"<bpt id=\"p1\">**</bpt>Char<ept id=\"p1\">**</ept>","source":"**Char**"},{"pos":[3671,3681],"content":"<bpt id=\"p1\">**</bpt>string<ept id=\"p1\">**</ept>","source":"**string**"},{"pos":[3682,3692],"content":"<bpt id=\"p1\">**</bpt>String<ept id=\"p1\">**</ept>","source":"**String**"},{"pos":[3693,3703],"content":"<bpt id=\"p1\">**</bpt>String<ept id=\"p1\">**</ept>","source":"**String**"},{"pos":[3704,3714],"content":"<bpt id=\"p1\">**</bpt>String<ept id=\"p1\">**</ept>","source":"**String**"},{"pos":[3719,3729],"content":"<bpt id=\"p1\">**</bpt>object<ept id=\"p1\">**</ept>","source":"**object**"},{"pos":[3730,3740],"content":"<bpt id=\"p1\">**</bpt>Object<ept id=\"p1\">**</ept>","source":"**Object**"},{"pos":[3741,3751],"content":"<bpt id=\"p1\">**</bpt>Object<ept id=\"p1\">**</ept>","source":"**Object**"},{"pos":[3752,3762],"content":"<bpt id=\"p1\">**</bpt>Object<ept id=\"p1\">**</ept>","source":"**Object**"},{"pos":[3770,3971],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept>  use a common name, such as <ph id=\"ph1\">`value`</ph> or <ph id=\"ph2\">`item`</ph>, rather than repeating the type name, in the rare cases when an identifier has no semantic meaning and the type of the parameter is not important.","source":"**✓ DO**  use a common name, such as `value` or `item`, rather than repeating the type name, in the rare cases when an identifier has no semantic meaning and the type of the parameter is not important."},{"pos":[3980,4016],"content":"Naming New Versions of Existing APIs","linkify":"Naming New Versions of Existing APIs","nodes":[{"content":"Naming New Versions of Existing APIs","pos":[0,36]}]},{"pos":[4020,4109],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use a name similar to the old API when creating new versions of an existing API.","source":"**✓ DO** use a name similar to the old API when creating new versions of an existing API."},{"content":"This helps to highlight the relationship between the APIs.","pos":[4116,4174]},{"pos":[4181,4279],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> prefer adding a suffix rather than a prefix to indicate a new version of an existing API.","source":"**✓ DO** prefer adding a suffix rather than a prefix to indicate a new version of an existing API."},{"content":"This will assist discovery when browsing documentation, or using Intellisense.","pos":[4286,4364]},{"content":"The old version of the API will be organized close to the new APIs, because most browsers and Intellisense show identifiers in alphabetical order.","pos":[4365,4511]},{"pos":[4518,4618],"content":"<bpt id=\"p1\">**</bpt>✓ CONSIDER<ept id=\"p1\">**</ept> using a brand new, but meaningful identifier, instead of adding a suffix or a prefix.","source":"**✓ CONSIDER** using a brand new, but meaningful identifier, instead of adding a suffix or a prefix."},{"pos":[4625,4906],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use a numeric suffix to indicate a new version of an existing API, particularly if the existing name of the API is the only name that makes sense (i.e., if it is an industry standard) and if adding any meaningful suffix (or changing the name) is not an appropriate option.","source":"**✓ DO** use a numeric suffix to indicate a new version of an existing API, particularly if the existing name of the API is the only name that makes sense (i.e., if it is an industry standard) and if adding any meaningful suffix (or changing the name) is not an appropriate option."},{"pos":[4913,5037],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use the \"Ex\" (or a similar) suffix for an identifier to distinguish it from an earlier version of the same API.","source":"**X DO NOT** use the \"Ex\" (or a similar) suffix for an identifier to distinguish it from an earlier version of the same API."},{"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use the \"64\" suffix when introducing versions of APIs that operate on a 64-bit integer (a long integer) instead of a 32-bit integer.","pos":[5044,5185],"source":"**✓ DO** use the \"64\" suffix when introducing versions of APIs that operate on a 64-bit integer (a long integer) instead of a 32-bit integer."},{"content":"You only need to take this approach when the existing 32-bit API exists; don’t do it for brand new APIs with only a 64-bit version.","pos":[5186,5317]},{"pos":[5324,5391],"content":"<bpt id=\"p1\">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id=\"p1\">*</ept>","source":"*Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*"},{"pos":[5398,5802],"content":"<bpt id=\"p1\">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id=\"p2\">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id=\"p2\">](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id=\"p1\">*</ept>","source":"*Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*"},{"pos":[5811,5819],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5823,5904],"source":"[Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Naming Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/naming-guidelines.md)</ept>","pos":[5907,5990],"source":" [Naming Guidelines](../../../docs/standard/design-guidelines/naming-guidelines.md)"}]}