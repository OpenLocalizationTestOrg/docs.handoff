<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="modification-sql-generation.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13ed7186981e82d47f00b6a38a4328ed75f527f4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\modification-sql-generation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc80abe4afa3e96e5b9dbfe5c69341cea701eb77</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7112faa80ed4dcca80300ab1257730a4276700af</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Modification SQL Generation</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Modification SQL Generation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This section discusses how to develop a modification SQL generation module for your (SQL:1999-compliant database) provider.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This module is responsible for translating a modification command tree into the appropriate SQL INSERT, UPDATE or DELETE statements.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about SQL generation for select statements, see <bpt id="p1">[</bpt>SQL Generation<ept id="p1">](../../../../../docs/framework/data/adonet/ef/sql-generation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overview of Modification Command Trees</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The modification SQL generation module generates database-specific modification SQL statements based on a given input DbModificationCommandTree.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A DbModificationCommandTree is an object model representation of a modification DML operation (an insert, an update, or a delete operation), inheriting from DbCommandTree.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There are three implementations of DbModificationCommandTree:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>DbInsertCommandTree</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>DbUpdateCommandTree</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DbDeleteCommandTree</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>DbModificationCommandTree and its implementations that are produced by the <ph id="ph1">[!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)]</ph> always represent a single row operation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This section describes these types with their constraints in the .NET Framework version 3.5.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/data/adonet/ef/media/558ba7b3-dd19-48d0-b91e-30a76415bf5f.gif "</bpt>558ba7b3-dd19-48d0-b91e-30a76415bf5f<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>DbModificationCommandTree has a Target property that represents the target set for the modification operation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Targetâ€™s Expression property, which defines the input set is always DbScanExpression.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A DbScanExpression can either represent a table or a view, or a set of data defined with a query if the metadata property "Defining Query" of its Target is non-null.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A DbScanExpression that represents a query could only reach a provider as a target of modification if the set was defined by using a defining query in the model but no function was provided for the corresponding modification operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Providers may not be able to support such a scenario (SqlClient, for example, does not).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>DbInsertCommandTree represents a single row insert operation expressed as a command tree.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>DbUpdateCommandTree represents a single-row update operation expressed as a command tree.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>DbDeleteCommandTree represents a single row delete operation expressed as a command tree.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Restrictions on Modification Command Tree Properties</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following information and restrictions apply to the modification command tree properties.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returning in DbInsertCommandTree and DbUpdateCommandTree</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When non-null, Returning indicates that the command returns a reader.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Otherwise, the command should return a scalar value indicating the number of rows affected (inserted or updated).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The Returning value specifies a projection of results to be returned based on the inserted or the updated row.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It can only be of type DbNewInstanceExpression representing a row, with each of its arguments being a DbPropertyExpression over a DbVariableReferenceExpression representing a reference to the Target of the corresponding DbModificationCommandTree.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The properties represented by the DbPropertyExpressions used in the property Returning are always store generated or computed values.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In DbInsertCommandTree, Returning is not null when at least one property of the table in which the row is being inserted is specified as store generated or computed (marked as StoreGeneratedPattern.Identity or StoreGeneratedPattern.Computed in the ssdl).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In DbUpdateCommandTrees, Returning is not null when at least one property of the table in which the row is being updated is specified as store computed (marked as StoreGeneratedPattern.Computed in the ssdl).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>SetClauses in DbInsertCommandTree and DbUpdateCommandTree</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>SetClauses specifies the list of insert or update set clauses that define the insert or update operation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Property specifies the property that should be updated.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It is always a DbPropertyExpression over a DbVariableReferenceExpression, which represents a reference to the Target of the corresponding DbModificationCommandTree.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Value specifies the new value with which to update the property.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is either of type DbConstantExpression or DbNullExpression.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Predicate in DbUpdateCommandTree and DbDeleteCommandTree</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Predicate specifies the predicate used to determine which members of the target collection should be updated or deleted.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It is an expression tree built of the following subset of DbExpressions:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>DbComparisonExpression of kind Equals, with the right child being a DbPropertyExpression as restricted below and the left child a DbConstantExpression.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>DbConstantExpression</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>DbIsNullExpression over a DbPropertyExpression as restricted below</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>DbPropertyExpression over a DbVariableReferenceExpression representing a reference to the Target of the corresponding DbModificationCommandTree.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>DbAndExpression</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>DbNotExpression</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>DbOrExpression</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Modification SQL Generation in the Sample Provider</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Entity Framework Sample Provider<ept id="p1">](https://code.msdn.microsoft.com/windowsdesktop/Entity-Framework-Sample-6a9801d0)</ept> demonstrates the components of ADO.NET Data Providers that support the <ph id="ph1">[!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It targets a SQL Server 2005 database and is implemented as a wrapper on top of System.Data.SqlClient ADO.NET 2.0 Data Provider.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The modification SQL generation module of the sample provider (located in the file SQL Generation\DmlSqlGenerator.cs) takes an input DbModificationCommandTree and produces a single modification SQL statement possibly followed by a select statement to return a reader if specified by the DbModificationCommandTree.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Note that the shape of the commands generated is affected by the target SQL Server database.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Helper Classes: ExpressionTranslator</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>ExpressionTranslator serves as a common lightweight translator for all modification command tree properties of type DbExpression.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It supports translation of only the expression types to which the properties of the modification command tree are constrained and is built with the particular constraints in mind.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following information discusses visiting specific expression types (nodes with trivial translations are omitted).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>DbComparisonExpression</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When the ExpressionTranslator is constructed with preserveMemberValues = true, and when the constant to the right is a DbConstantExpression (instead of DbNullExpression), it associates the left operand (a DbPropertyExpressions) with that DbConstantExpression.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>That is used if a return Select statement needs to be generated to identify the affected row.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>DbConstantExpression</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For each visited constant a parameter is created.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>DbPropertyExpression</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Given that the Instance of the DbPropertyExpression always represents the input table, unless the generation has created an alias (which only happens in update scenarios when a table variable is used), no alias needs to be specified for the input; the translation defaults to the property name.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Generating an Insert SQL Command</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For a given DbInsertCommandTree in the sample provider, the generated insert command follows one of the two insert templates below.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The first template has a command to perform the insert given the values in the list of SetClauses, and a SELECT statement to return the properties specified in the Returning property for the inserted row if the Returning property was not null.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The predicate element "<ph id="ph1">\@</ph><ph id="ph2">@ROWCOUNT</ph> &gt; 0" is true if a row was inserted.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The predicate element "keyMemberI =  keyValueI &amp;#124; scope_identity()" takes the shape  "keyMemberI =  scope_identity()" only if keyMemberI is a store-generated key, because scope_identity() returns the last identity value inserted into an identity (store-generated) column.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The second template is needed if the insert specifies inserting a row where the primary key is store-generated but is not an integer type and therefore can't be used with scope_identity()).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It is also used if there is a compound store-generated key.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following is an example that uses the model that is included with the sample provider.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It generates an insert command from a DbInsertCommandTree.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following code inserts a Category:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This code produces the following command tree, which is passed to the provider:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The store command that the sample provider produces is the following SQL statement:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Generating an Update SQL Command</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For a given DbUpdateCommandTree, the generated update command is based on the following template:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The set clause has the fake set clause ("<ph id="ph1">@i</ph> = 0") only if no set clauses are specified.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is to ensure that any store-computed columns are recomputed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Only if the Returning property is not null, a select statement is generated to return the properties specified in the Returning property.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following example uses the model that is included with the sample provider to generate an update command.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following user code updates a Category:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This user code produces the following command tree, which is passed to the provider:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The sample provider produces the following store command:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Generating a Delete SQL Command</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For a given DbDeleteCommandTree, the generated DELETE command is based on the following template:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following example uses the model that is included with the sample provider to generate a delete command.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following user code deletes a Category:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This user code produces the following command tree, which is passed to the provider.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following store command is produced by the sample provider:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing an Entity Framework Data Provider<ept id="p1">](../../../../../docs/framework/data/adonet/ef/writing-an-ef-data-provider.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>