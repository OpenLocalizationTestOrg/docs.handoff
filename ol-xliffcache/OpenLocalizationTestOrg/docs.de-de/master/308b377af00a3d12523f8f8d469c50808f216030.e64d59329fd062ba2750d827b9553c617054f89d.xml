{"content":"---\ntitle: \"Debugging Expression Trees in Visual Studio (C#)\"\nms.date: 07/20/2015\nms.assetid: 1369fa25-0fbd-4b92-98d0-8df79c49c27a\n---\n# Debugging Expression Trees in Visual Studio (C#)\nYou can analyze the structure and content of expression trees when you debug your applications. To get a quick overview of the expression tree structure, you can use the `DebugView` property, which is available only in debug mode. For more information about debugging, see [Debugging in Visual Studio](/visualstudio/debugger/debugging-in-visual-studio).  \n  \n To better represent the content of expression trees, the `DebugView` property uses Visual Studio visualizers. For more information, see [Create Custom Visualizers](/visualstudio/debugger/create-custom-visualizers-of-data).  \n  \n### To open a visualizer for an expression tree  \n  \n1.  Click the magnifying glass icon that appears next to the `DebugView` property of an expression tree in **DataTips**, a **Watch** window, the **Autos** window, or the **Locals** window.  \n  \n     A list of visualizers is displayed.  \n  \n2.  Click the visualizer you want to use.  \n  \n Each expression type is displayed in the visualizer as described in the following sections.  \n  \n## ParameterExpressions  \n <xref:System.Linq.Expressions.ParameterExpression> variable names are displayed with a \"$\" symbol at the beginning.  \n  \n If a parameter does not have a name, it is assigned an automatically generated name, such as `$var1` or `$var2`.  \n  \n### Examples  \n  \n|Expression|`DebugView` property|  \n|----------------|--------------------------|  \n|`ParameterExpression numParam =  Expression.Parameter(typeof(int), \"num\");`|`$num`|  \n|`ParameterExpression numParam =  Expression.Parameter(typeof(int));`|`$var1`|  \n  \n## ConstantExpressions  \n For <xref:System.Linq.Expressions.ConstantExpression> objects that represent integer values, strings, and `null`, the value of the constant is displayed.  \n  \n For numeric types that have standard suffixes as C# literals, the suffix is added to the value. The following table shows the suffixes associated with various numeric types.  \n  \n|Type|Suffix|  \n|----------|------------|  \n|<xref:System.UInt32>|U|  \n|<xref:System.Int64>|L|  \n|<xref:System.UInt64>|UL|  \n|<xref:System.Double>|D|  \n|<xref:System.Single>|F|  \n|<xref:System.Decimal>|M|  \n  \n### Examples  \n  \n|Expression|`DebugView` property|  \n|----------------|--------------------------|  \n|`int num = 10; ConstantExpression expr = Expression.Constant(num);`|10|  \n|`double num = 10; ConstantExpression expr = Expression.Constant(num);`|10D|  \n  \n## BlockExpression  \n If the type of a <xref:System.Linq.Expressions.BlockExpression> object differs from the type of the last expression in the block, the type is displayed in the `DebugInfo` property in angle brackets (\\< and >). Otherwise, the type of the <xref:System.Linq.Expressions.BlockExpression> object is not displayed.  \n  \n### Examples  \n  \n|Expression|`DebugView` property|  \n|----------------|--------------------------|  \n|`BlockExpression block = Expression.Block(Expression.Constant(\"test\"));`|`.Block() {`<br /><br /> `\"test\"`<br /><br /> `}`|  \n|`BlockExpression block =  Expression.Block(typeof(Object), Expression.Constant(\"test\"));`|`.Block<System.Object>() {`<br /><br /> `\"test\"`<br /><br /> `}`|  \n  \n## LambdaExpression  \n <xref:System.Linq.Expressions.LambdaExpression> objects are displayed together with their delegate types.  \n  \n If a lambda expression does not have a name, it is assigned an automatically generated name, such as `#Lambda1` or `#Lambda2`.  \n  \n### Examples  \n  \n|Expression|`DebugView` property|  \n|----------------|--------------------------|  \n|`LambdaExpression lambda =  Expression.Lambda<Func<int>>(Expression.Constant(1));`|`.Lambda #Lambda1<System.Func'1[System.Int32]>() {`<br /><br /> `1`<br /><br /> `}`|  \n|`LambdaExpression lambda =  Expression.Lambda<Func<int>>(Expression.Constant(1), \"SampleLambda\", null);`|`.Lambda SampleLambda<System.Func'1[System.Int32]>() {`<br /><br /> `1`<br /><br /> `}`|  \n  \n## LabelExpression  \n If you specify a default value for the <xref:System.Linq.Expressions.LabelExpression> object, this value is displayed before the <xref:System.Linq.Expressions.LabelTarget> object.  \n  \n The `.Label` token indicates the start of the label. The `.LabelTarget` token indicates the destination of the target to jump to.  \n  \n If a label does not have a name, it is assigned an automatically generated name, such as `#Label1` or `#Label2`.  \n  \n### Examples  \n  \n|Expression|`DebugView` property|  \n|----------------|--------------------------|  \n|`LabelTarget target = Expression.Label(typeof(int), \"SampleLabel\"); BlockExpression block = Expression.Block( Expression.Goto(target, Expression.Constant(0)), Expression.Label(target, Expression.Constant(-1)));`|`.Block() {`<br /><br /> `.Goto SampleLabel { 0 };`<br /><br /> `.Label`<br /><br /> `-1`<br /><br /> `.LabelTarget SampleLabel:`<br /><br /> `}`|  \n|`LabelTarget target = Expression.Label(); BlockExpression block = Expression.Block( Expression.Goto(target5), Expression.Label(target5));`|`.Block() {`<br /><br /> `.Goto #Label1 { };`<br /><br /> `.Label`<br /><br /> `.LabelTarget #Label1:`<br /><br /> `}`|  \n  \n## Checked Operators  \n Checked operators are displayed with the \"#\" symbol in front of the operator. For example, the checked addition operator is displayed as `#+`.  \n  \n### Examples  \n  \n|Expression|`DebugView` property|  \n|----------------|--------------------------|  \n|`Expression expr = Expression.AddChecked( Expression.Constant(1), Expression.Constant(2));`|`1 #+ 2`|  \n|`Expression expr = Expression.ConvertChecked( Expression.Constant(10.0), typeof(int));`|`#(System.Int32)10D`|  \n  \n## See also\n\n- [Expression Trees (C#)](../../../../csharp/programming-guide/concepts/expression-trees/index.md)\n- [Debugging in Visual Studio](/visualstudio/debugger/debugging-in-visual-studio)\n- [Create Custom Visualizers](/visualstudio/debugger/create-custom-visualizers-of-data)\n","nodes":[{"pos":[4,130],"embed":true,"restype":"x-metadata","content":"title: \"Debugging Expression Trees in Visual Studio (C#)\"\nms.date: 07/20/2015\nms.assetid: 1369fa25-0fbd-4b92-98d0-8df79c49c27a","nodes":[{"content":"Debugging Expression Trees in Visual Studio (C#)","nodes":[{"pos":[0,48],"content":"Debugging Expression Trees in Visual Studio (C#)","nodes":[{"content":"Debugging Expression Trees in Visual Studio (C#)","pos":[0,48]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[137,185],"content":"Debugging Expression Trees in Visual Studio (C#)","linkify":"Debugging Expression Trees in Visual Studio (C#)","nodes":[{"content":"Debugging Expression Trees in Visual Studio (C#)","pos":[0,48]}]},{"content":"You can analyze the structure and content of expression trees when you debug your applications.","pos":[186,281]},{"content":"To get a quick overview of the expression tree structure, you can use the <ph id=\"ph1\">`DebugView`</ph> property, which is available only in debug mode.","pos":[282,416],"source":" To get a quick overview of the expression tree structure, you can use the `DebugView` property, which is available only in debug mode."},{"content":"For more information about debugging, see <bpt id=\"p1\">[</bpt>Debugging in Visual Studio<ept id=\"p1\">](/visualstudio/debugger/debugging-in-visual-studio)</ept>.","pos":[417,539],"source":" For more information about debugging, see [Debugging in Visual Studio](/visualstudio/debugger/debugging-in-visual-studio)."},{"content":"To better represent the content of expression trees, the <ph id=\"ph1\">`DebugView`</ph> property uses Visual Studio visualizers.","pos":[546,655],"source":"To better represent the content of expression trees, the `DebugView` property uses Visual Studio visualizers."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Create Custom Visualizers<ept id=\"p1\">](/visualstudio/debugger/create-custom-visualizers-of-data)</ept>.","pos":[656,768],"source":" For more information, see [Create Custom Visualizers](/visualstudio/debugger/create-custom-visualizers-of-data)."},{"pos":[778,821],"content":"To open a visualizer for an expression tree","linkify":"To open a visualizer for an expression tree","nodes":[{"content":"To open a visualizer for an expression tree","pos":[0,43]}]},{"pos":[831,1015],"content":"Click the magnifying glass icon that appears next to the <ph id=\"ph1\">`DebugView`</ph> property of an expression tree in <bpt id=\"p1\">**</bpt>DataTips<ept id=\"p1\">**</ept>, a <bpt id=\"p2\">**</bpt>Watch<ept id=\"p2\">**</ept> window, the <bpt id=\"p3\">**</bpt>Autos<ept id=\"p3\">**</ept> window, or the <bpt id=\"p4\">**</bpt>Locals<ept id=\"p4\">**</ept> window.","source":"Click the magnifying glass icon that appears next to the `DebugView` property of an expression tree in **DataTips**, a **Watch** window, the **Autos** window, or the **Locals** window."},{"content":"A list of visualizers is displayed.","pos":[1026,1061]},{"content":"Click the visualizer you want to use.","pos":[1071,1108]},{"content":"Each expression type is displayed in the visualizer as described in the following sections.","pos":[1115,1206]},{"pos":[1215,1235],"content":"ParameterExpressions","linkify":"ParameterExpressions","nodes":[{"content":"ParameterExpressions","pos":[0,20]}]},{"pos":[1239,1354],"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph> variable names are displayed with a \"$\" symbol at the beginning.","source":"<xref:System.Linq.Expressions.ParameterExpression> variable names are displayed with a \"$\" symbol at the beginning."},{"pos":[1361,1473],"content":"If a parameter does not have a name, it is assigned an automatically generated name, such as <ph id=\"ph1\">`$var1`</ph> or <ph id=\"ph2\">`$var2`</ph>.","source":"If a parameter does not have a name, it is assigned an automatically generated name, such as `$var1` or `$var2`."},{"pos":[1483,1491],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Expression","pos":[1498,1508]},{"pos":[1509,1529],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[1755,1774],"content":"ConstantExpressions","linkify":"ConstantExpressions","nodes":[{"content":"ConstantExpressions","pos":[0,19]}]},{"pos":[1778,1931],"content":"For <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> objects that represent integer values, strings, and <ph id=\"ph2\">`null`</ph>, the value of the constant is displayed.","source":"For <xref:System.Linq.Expressions.ConstantExpression> objects that represent integer values, strings, and `null`, the value of the constant is displayed."},{"content":"For numeric types that have standard suffixes as C# literals, the suffix is added to the value.","pos":[1938,2033]},{"content":"The following table shows the suffixes associated with various numeric types.","pos":[2034,2111]},{"content":"Type","pos":[2118,2122]},{"content":"Suffix","pos":[2123,2129]},{"content":"U","pos":[2183,2184]},{"content":"L","pos":[2209,2210]},{"content":"UL","pos":[2236,2238]},{"content":"D","pos":[2264,2265]},{"content":"F","pos":[2291,2292]},{"content":"M","pos":[2319,2320]},{"pos":[2331,2339],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Expression","pos":[2346,2356]},{"pos":[2357,2377],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"content":"10","pos":[2498,2500]},{"content":"10D","pos":[2576,2579]},{"pos":[2589,2604],"content":"BlockExpression","linkify":"BlockExpression","nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"content":"If the type of a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BlockExpression&gt;</ph> object differs from the type of the last expression in the block, the type is displayed in the <ph id=\"ph2\">`DebugInfo`</ph> property in angle brackets (<ph id=\"ph3\">\\&lt;</ph> and &gt;).","pos":[2608,2817],"source":"If the type of a <xref:System.Linq.Expressions.BlockExpression> object differs from the type of the last expression in the block, the type is displayed in the `DebugInfo` property in angle brackets (\\< and >)."},{"content":"Otherwise, the type of the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BlockExpression&gt;</ph> object is not displayed.","pos":[2818,2916],"source":" Otherwise, the type of the <xref:System.Linq.Expressions.BlockExpression> object is not displayed."},{"pos":[2926,2934],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Expression","pos":[2941,2951]},{"pos":[2952,2972],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[3316,3332],"content":"LambdaExpression","linkify":"LambdaExpression","nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[3336,3441],"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> objects are displayed together with their delegate types.","source":"<xref:System.Linq.Expressions.LambdaExpression> objects are displayed together with their delegate types."},{"pos":[3448,3574],"content":"If a lambda expression does not have a name, it is assigned an automatically generated name, such as <ph id=\"ph1\">`#Lambda1`</ph> or <ph id=\"ph2\">`#Lambda2`</ph>.","source":"If a lambda expression does not have a name, it is assigned an automatically generated name, such as `#Lambda1` or `#Lambda2`."},{"pos":[3584,3592],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Expression","pos":[3599,3609]},{"pos":[3610,3630],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[4056,4071],"content":"LabelExpression","linkify":"LabelExpression","nodes":[{"content":"LabelExpression","pos":[0,15]}]},{"pos":[4075,4254],"content":"If you specify a default value for the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.LabelExpression&gt;</ph> object, this value is displayed before the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.LabelTarget&gt;</ph> object.","source":"If you specify a default value for the <xref:System.Linq.Expressions.LabelExpression> object, this value is displayed before the <xref:System.Linq.Expressions.LabelTarget> object."},{"content":"The <ph id=\"ph1\">`.Label`</ph> token indicates the start of the label.","pos":[4261,4313],"source":"The `.Label` token indicates the start of the label."},{"content":"The <ph id=\"ph1\">`.LabelTarget`</ph> token indicates the destination of the target to jump to.","pos":[4314,4390],"source":" The `.LabelTarget` token indicates the destination of the target to jump to."},{"pos":[4397,4509],"content":"If a label does not have a name, it is assigned an automatically generated name, such as <ph id=\"ph1\">`#Label1`</ph> or <ph id=\"ph2\">`#Label2`</ph>.","source":"If a label does not have a name, it is assigned an automatically generated name, such as `#Label1` or `#Label2`."},{"pos":[4519,4527],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Expression","pos":[4534,4544]},{"pos":[4545,4565],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[5247,5264],"content":"Checked Operators","linkify":"Checked Operators","nodes":[{"content":"Checked Operators","pos":[0,17]}]},{"content":"Checked operators are displayed with the \"#\" symbol in front of the operator.","pos":[5268,5345]},{"content":"For example, the checked addition operator is displayed as <ph id=\"ph1\">`#+`</ph>.","pos":[5346,5410],"source":" For example, the checked addition operator is displayed as `#+`."},{"pos":[5420,5428],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Expression","pos":[5435,5445]},{"pos":[5446,5466],"content":"<ph id=\"ph1\">`DebugView`</ph> property","source":"`DebugView` property"},{"pos":[5742,5750],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5754,5850],"content":"<bpt id=\"p1\">[</bpt>Expression Trees (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/expression-trees/index.md)</ept>","source":"[Expression Trees (C#)](../../../../csharp/programming-guide/concepts/expression-trees/index.md)"},{"pos":[5853,5932],"content":"<bpt id=\"p1\">[</bpt>Debugging in Visual Studio<ept id=\"p1\">](/visualstudio/debugger/debugging-in-visual-studio)</ept>","source":"[Debugging in Visual Studio](/visualstudio/debugger/debugging-in-visual-studio)"},{"pos":[5935,6020],"content":"<bpt id=\"p1\">[</bpt>Create Custom Visualizers<ept id=\"p1\">](/visualstudio/debugger/create-custom-visualizers-of-data)</ept>","source":"[Create Custom Visualizers](/visualstudio/debugger/create-custom-visualizers-of-data)"}]}