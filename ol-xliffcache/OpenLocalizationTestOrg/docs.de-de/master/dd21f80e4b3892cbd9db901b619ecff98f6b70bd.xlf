<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-call-an-event-handler.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd21f80e4b3892cbd9db901b619ecff98f6b70bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\how-to-call-an-event-handler.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f4c789bec20d3aeca8c3a61b983c67e5cd994d1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef4d4bd8ba5fb6f6249955ca0d6c7792537bab32</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Call an Event Handler in Visual Basic</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Call an Event Handler in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>event<ept id="p1">*</ept> is an action or occurrence — such as a mouse click or a credit limit exceeded — that is recognized by some program component, and for which you can write code to respond.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>event handler<ept id="p1">*</ept> is the code you write to respond to an event.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An event handler in Visual Basic is a <ph id="ph1">`Sub`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, you do not normally call it the same way as other <ph id="ph1">`Sub`</ph> procedures.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Instead, you identify the procedure as a handler for the event.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can do this either with a <bpt id="p1">[</bpt>Handles<ept id="p1">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> clause and a <bpt id="p2">[</bpt>WithEvents<ept id="p2">](../../../../visual-basic/language-reference/modifiers/withevents.md)</ept> variable, or with an <bpt id="p3">[</bpt>AddHandler Statement<ept id="p3">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using a <ph id="ph1">`Handles`</ph> clause is the default way to declare an event handler in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is the way the event handlers are written by the designers when you program in the integrated development environment (IDE).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddHandler`</ph> statement is suitable for raising events dynamically at run time.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When the event occurs, Visual Basic automatically calls the event handler procedure.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Any code that has access to the event can cause it to occur by executing a <bpt id="p1">[</bpt>RaiseEvent Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/raiseevent-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can associate more than one event handler with the same event.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In some cases you can dissociate a handler from an event.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To call an event handler using Handles and WithEvents</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Make sure the event is declared with an <bpt id="p1">[</bpt>Event Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/event-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Declare an object variable at module or class level, using the <bpt id="p1">[</bpt>WithEvents<ept id="p1">](../../../../visual-basic/language-reference/modifiers/withevents.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`As`</ph> clause for this variable must specify the class that raises the event.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the declaration of the event-handling <ph id="ph1">`Sub`</ph> procedure, add a <bpt id="p1">[</bpt>Handles<ept id="p1">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> clause that specifies the <ph id="ph2">`WithEvents`</ph> variable and the event name.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When the event occurs, Visual Basic automatically calls the <ph id="ph1">`Sub`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Your code can use a <ph id="ph1">`RaiseEvent`</ph> statement to make the event occur.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example defines an event and a <ph id="ph1">`WithEvents`</ph> variable that refers to the class that raises the event.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The event-handling <ph id="ph1">`Sub`</ph> procedure uses a <ph id="ph2">`Handles`</ph> clause to specify the class and event it handles.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To call an event handler using AddHandler</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Make sure the event is declared with an <ph id="ph1">`Event`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Execute an <bpt id="p1">[</bpt>AddHandler Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept> to dynamically connect the event-handling <ph id="ph1">`Sub`</ph> procedure with the event.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the event occurs, Visual Basic automatically calls the <ph id="ph1">`Sub`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Your code can use a <ph id="ph1">`RaiseEvent`</ph> statement to make the event occur.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Sub`</ph> procedure to handle the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event of a form.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It then uses the <bpt id="p1">[</bpt>AddHandler Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept> to associate the <ph id="ph1">`catchClose`</ph> procedure as an event handler for <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can dissociate an event handler from an event by executing the <bpt id="p1">[</bpt>RemoveHandler Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/removehandler-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AddressOf Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/addressof-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Procedure<ept id="p1">](./how-to-create-a-procedure.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Call a Procedure that Does Not Return a Value<ept id="p1">](./how-to-call-a-procedure-that-does-not-return-a-value.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>