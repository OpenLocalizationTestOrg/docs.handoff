{"content":"---\ntitle: \"++ Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"++_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"increment operator (++) [C#]\"\n  - \"++ operator [C#]\"\nms.assetid: e9dec353-070b-44fb-98ed-eb8fdf753feb\ncaps.latest.revision: 18\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# ++ Operator (C# Reference)\nThe increment operator (`++`) increments its operand by 1. The increment operator can appear before or after its operand: `++variable` and `variable++`.  \n  \n## Remarks  \n The first form is a prefix increment operation. The result of the operation is the value of the operand after it has been incremented.  \n  \n The second form is a postfix increment operation. The result of the operation is the value of the operand before it has been incremented.  \n  \n Numeric and enumeration types have predefined increment operators. User-defined types can overload the `++` operator. Operations on integral types are generally allowed on enumeration.  \n  \n## Example  \n [!code-cs[csRefOperators#3](../../../csharp/language-reference/operators/codesnippet/CSharp/increment-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[12,55],"content":"++ Operator (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"++ Operator (C# Reference) | Microsoft Docs","pos":[0,43]}]},{"pos":[621,647],"content":"++ Operator (C# Reference)","linkify":"++ Operator (C# Reference)","nodes":[{"content":"++ Operator (C# Reference)","pos":[0,26]}]},{"content":"The increment operator (<ph id=\"ph1\">`++`</ph>) increments its operand by 1.","pos":[648,706],"source":"The increment operator (`++`) increments its operand by 1."},{"content":"The increment operator can appear before or after its operand: <ph id=\"ph1\">`++variable`</ph> and <ph id=\"ph2\">`variable++`</ph>.","pos":[707,800],"source":" The increment operator can appear before or after its operand: `++variable` and `variable++`."},{"pos":[809,816],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first form is a prefix increment operation.","pos":[820,867]},{"content":"The result of the operation is the value of the operand after it has been incremented.","pos":[868,954]},{"content":"The second form is a postfix increment operation.","pos":[961,1010]},{"content":"The result of the operation is the value of the operand before it has been incremented.","pos":[1011,1098]},{"content":"Numeric and enumeration types have predefined increment operators.","pos":[1105,1171]},{"content":"User-defined types can overload the <ph id=\"ph1\">`++`</ph> operator.","pos":[1172,1222],"source":" User-defined types can overload the `++` operator."},{"content":"Operations on integral types are generally allowed on enumeration.","pos":[1223,1289]},{"pos":[1298,1305],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1309,1426],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#3<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/increment-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#3](../../../csharp/language-reference/operators/codesnippet/CSharp/increment-operator_1.cs)]"},{"pos":[1435,1443],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1447,1507],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1510,1578],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1581,1651],"source":" [C# Operators](../../../csharp/language-reference/operators/index.md)"}]}