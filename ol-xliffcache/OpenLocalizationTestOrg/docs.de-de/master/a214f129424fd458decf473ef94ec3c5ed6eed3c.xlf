<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a214f129424fd458decf473ef94ec3c5ed6eed3c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\extension-methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">566b7f1a4631dcb40b25d0f4978a06640c6d4ff4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3efa5a2dacccd8beee3ae0712c6e11c73c62644d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Extension Methods (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Extension Methods (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Extension methods enable you to "add" methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Extension methods are a special kind of static method, but they are called as if they were instance methods on the extended type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For client code written in C# and Visual Basic, there is no apparent difference between calling an extension method and the methods that are actually defined in a type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The most common extension methods are the <ph id="ph1">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph> standard query operators that add query functionality to the existing <ph id="ph2">&lt;xref:System.Collections.IEnumerable?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName&gt;</ph> types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To use the standard query operators, first bring them into scope with a <ph id="ph1">`using System.Linq`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Then any type that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> appears to have instance methods such as <ph id="ph2">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can see these additional methods in IntelliSense statement completion when you type "dot" after an instance of an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> type such as <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> or <ph id="ph3">&lt;xref:System.Array&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example shows how to call the standard query operator <ph id="ph1">`OrderBy`</ph> method on an array of integers.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The expression in parentheses is a lambda expression.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Many standard query operators take lambda expressions as parameters, but this is not a requirement for extension methods.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExtensionMethods#3<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/extension-methods_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Extension methods are defined as static methods but are called by using instance method syntax.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Their first parameter specifies which type the method operates on, and the parameter is preceded by the <bpt id="p1">[</bpt>this<ept id="p1">](../../../csharp/language-reference/keywords/this.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Extension methods are only in scope when you explicitly import the namespace into your source code with a <ph id="ph1">`using`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example shows an extension method defined for the <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note that it is defined inside a non-nested, non-generic static class:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExtensionMethods#4<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/extension-methods_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WordCount`</ph> extension method can be brought into scope with this <ph id="ph2">`using`</ph> directive:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>And it can be called from an application by using this syntax:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In your code you invoke the extension method with instance method syntax.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, the intermediate language (IL) generated by the compiler translates your code into a call on the static method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, the principle of encapsulation is not really being violated.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In fact, extension methods cannot access private variables in the type they are extending.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Implement and Call a Custom  Extension Method<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/how-to-implement-and-call-a-custom-extension-method.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In general, you will probably be calling extension methods far more often than implementing your own.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because extension methods are called by using instance method syntax, no special knowledge is required to use them from client code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To enable extension methods for a particular type, just add a <ph id="ph1">`using`</ph> directive for the namespace in which the methods are defined.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, to use the standard query operators, add this <ph id="ph1">`using`</ph> directive to your code:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>(You may also have to add a reference to System.Core.dll.) You will notice that the standard query operators now appear in IntelliSense as additional methods available for most <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> types.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Although standard query operators do not appear in IntelliSense for <ph id="ph1">&lt;xref:System.String&gt;</ph>, they are still available.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Binding Extension Methods at Compile Time</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can use extension methods to extend a class or interface, but not to override them.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An extension method with the same name and signature as an interface or class method will never be called.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>At compile time, extension methods always have lower priority than instance methods defined in the type itself.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In other words, if a type has a method named <ph id="ph1">`Process(int i)`</ph>, and you have an extension method with the same signature, the compiler will always bind to the instance method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When the compiler encounters a method invocation, it first looks for a match in the type's instance methods.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If no match is found, it will search for any extension methods that are defined for the type, and bind to the first extension method that it finds.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how the compiler determines which extension method or instance method to bind to.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the rules that the C# compiler follows in determining whether to bind a method call to an instance method on the type, or to an extension method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The static class <ph id="ph1">`Extensions`</ph> contains extension methods defined for any type that implements <ph id="ph2">`IMyInterface`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Classes <ph id="ph1">`A`</ph>, <ph id="ph2">`B`</ph>, and <ph id="ph3">`C`</ph> all implement the interface.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MethodB`</ph> extension method is never called because its name and signature exactly match methods already implemented by the classes.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When the compiler cannot find an instance method with a matching signature, it will bind to a matching extension method if one exists.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExtensionMethods#5<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/extension-methods_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>General Guidelines</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In general, we recommend that you implement extension methods sparingly and only when you have to.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Whenever possible, client code that must extend an existing type should do so by creating a new type derived from the existing type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Inheritance<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/inheritance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When using an extension method to extend a type whose source code you cannot change, you run the risk that a change in the implementation of the type will cause your extension method to break.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you do implement extension methods for a given type, remember the following points:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An extension method will never be called if it has the same signature as a method defined in the type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Extension methods are brought into scope at the namespace level.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, if you have multiple static classes that contain extension methods in a single namespace named <ph id="ph1">`Extensions`</ph>, they will all be brought into scope by the <ph id="ph2">`using Extensions;`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For a class library that you implemented, you shouldn't use extension methods to avoid incrementing the version number of an assembly.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you want to add significant functionality to a library for which you own the source code, you should follow the standard .NET Framework guidelines for assembly versioning.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Assembly Versioning<ept id="p1">](https://msdn.microsoft.com/library/51ket42z)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel Programming Samples (these include many example extension methods)<ept id="p1">](http://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Query Operators Overview<ept id="p1">](http://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conversion rules for Instance parameters and their impact<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=112385)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extension methods Interoperability between languages<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=112386)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extension methods and Curried Delegates<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=112387)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extension method Binding and Error reporting<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=112388)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>