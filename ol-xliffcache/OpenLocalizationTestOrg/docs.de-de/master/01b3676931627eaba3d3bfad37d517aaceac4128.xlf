<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-create-a-security-token-service.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01b3676931627eaba3d3bfad37d517aaceac4128</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\how-to-create-a-security-token-service.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d852a07a7fbae14eddf09700628a2e3c4fbff01</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5f897464345665cfd9623ac34bcd45c3940b7e5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Create a Security Token Service | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create a Security Token Service</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A security token service implements the protocol defined in the WS-Trust specification.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This protocol defines message formats and message exchange patterns for issuing, renewing, canceling, and validating security tokens.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A given security token service provides one or more of these capabilities.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic looks at the most common scenario: implementing token issuance.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Issuing Tokens</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>WS-Trust defines message formats, based on the <ph id="ph1">`RequestSecurityToken`</ph> XML Schema definition language (XSD) schema element, and <ph id="ph2">`RequestSecurityTokenResponse`</ph> XSD schema element for performing token issuance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In addition, it defines the associated Action Uniform Resource Identifiers (URIs).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The action URI associated with the <ph id="ph1">`RequestSecurityToken`</ph> message is <ph id="ph2">http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The action URI associated with the <ph id="ph1">`RequestSecurityTokenResponse`</ph> message is   <ph id="ph2">http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Request Message Structure</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The issue request message structure typically consists of the following items:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A request type URI with a value of    <ph id="ph1">http://schemas.xmlsoap.org/ws/2005/02/trust/Issue</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A token type URI.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For Security Assertions Markup Language (SAML) 1.1 tokens, the value of this URI is <ph id="ph1">http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A key size value that indicates the number of bits in the key to be associated with the issued token.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A key type URI.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For symmetric keys, the value of this URI is <ph id="ph1">http://schemas.xmlsoap.org/ws/2005/02/trust/SymmetricKey</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In addition, a couple of other items might be present:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Key material provided by the client.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Scope information that indicates the target service that the issued token will be used with.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The security token service uses the information in the issue request message when it constructs the Issue Response message.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Response Message Structure</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The issue response message structure typically consists of the following items;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The issued security token, for example, a SAML 1.1 assertion.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A proof token associated with the security token.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For symmetric keys, this is often an encrypted form of the key material.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>References to the issued security token.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Typically, the security token service returns a reference that can be used when the issued token appears in a subsequent message sent by the client and another that can be used when the token is not present in subsequent messages.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In addition, a couple of other items might be present:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Key material provided by the security token service.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The algorithm needed to compute the shared key.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Lifetime information for the issued token.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Processing Request Messages</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The security token service processes the issue request by examining the various pieces of the request message and ensuring that it can issue a token that satisfies the request.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The security token service must determine the following before it constructs the token to be issued:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The request really is a request for a token to be issued.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The security token service supports the requested token type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The requester is authorized to make the request.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The security token service can meet the requester's expectations with respect to key material.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Two vital parts of constructing a token are determining what key to sign the token with and what key to encrypt the shared key with.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The token needs to be signed so that when the client presents the token to the target service, that service can determine that the token was issued by a security token service that it trusts.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The key material needs to be encrypted in such a way that the target service can decrypt that key material.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Signing a SAML assertion involves creating a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SigningCredentials&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The constructor for this class takes the following:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKey&gt;</ph> for the key to use to sign the SAML assertion.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A string identifying the signature algorithm to use.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A string identifying the digest algorithm to use.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Optionally, a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifier&gt;</ph> that identifies the key to use to sign the assertion.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Encrypting the shared key involves taking the key material and encrypting it with a key that the target service can use to decrypt the shared key.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Typically, the public key of the target service is used.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In addition, a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifier&gt;</ph> for the encrypted key is needed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifier&gt;</ph> is then used to create a <ph id="ph2">`SamlSubject`</ph> as part of the <ph id="ph3">`SamlToken`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Federation Sample<ept id="p1">](../../../../docs/framework/wcf/samples/federation-sample.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Creating Response Messages</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Once the security token service processes the issue request and constructs the token to be issued along with the proof key, the response message needs to be constructed, including at least the requested token, the proof token, and the issued token references.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The issued token is typically a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SamlSecurityToken&gt;</ph> created from the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SamlAssertion&gt;</ph>, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the case where the security token service provides the shared key material, the proof token is constructed by creating a <ph id="ph1">&lt;xref:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> how to construct the proof token when the client and the security token service both provide key material for the shared key, see <bpt id="p1">[</bpt>Federation Sample<ept id="p1">](../../../../docs/framework/wcf/samples/federation-sample.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The issued token references are constructed by creating instances of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>These various values are then serialized into the response message returned to the client.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For full code for a security token service, see <bpt id="p1">[</bpt>Federation Sample<ept id="p1">](../../../../docs/framework/wcf/samples/federation-sample.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Federation Sample<ept id="p1">](../../../../docs/framework/wcf/samples/federation-sample.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>