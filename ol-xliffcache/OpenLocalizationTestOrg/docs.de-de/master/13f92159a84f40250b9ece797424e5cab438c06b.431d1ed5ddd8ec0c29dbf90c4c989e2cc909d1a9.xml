{"content":"---\ntitle: \"Not Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Not\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Boolean expressions, negating\"\n  - \"operators [Visual Basic], bitwise\"\n  - \"negation operator\"\n  - \"inverse bit values in variables\"\n  - \"bitwise operators, NOT operator\"\n  - \"bitwise comparison\"\n  - \"Not operator [Visual Basic]\"\n  - \"logical negation\"\n  - \"operators [Visual Basic], negation\"\nms.assetid: 8f2ea83c-d2ed-480a-a474-3042a1cad9b5\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Not Operator (Visual Basic)\nPerforms logical negation on a `Boolean` expression, or bitwise negation on a numeric expression.  \n  \n## Syntax  \n  \n```  \n  \nresult = Not expression  \n```  \n  \n## Parts  \n `result`  \n Required. Any `Boolean` or numeric expression.  \n  \n `expression`  \n Required. Any `Boolean` or numeric expression.  \n  \n## Remarks  \n For `Boolean` expressions, the following table illustrates how `result` is determined.  \n  \n|If `expression` is|The value of `result` is|  \n|------------------------|------------------------------|  \n|`True`|`False`|  \n|`False`|`True`|  \n  \n For numeric expressions, the `Not` operator inverts the bit values of any numeric expression and sets the corresponding bit in `result` according to the following table.  \n  \n|If bit in `expression` is|The bit in `result` is|  \n|-------------------------------|----------------------------|  \n|1|0|  \n|0|1|  \n  \n> [!NOTE]\n>  Since the logical and bitwise operators have a lower precedence than other arithmetic and relational operators, any bitwise operations should be enclosed in parentheses to ensure accurate execution.  \n  \n## Data Types  \n For a Boolean negation, the data type of the result is `Boolean`. For a bitwise negation, the result data type is the same as that of `expression`. However, if expression is `Decimal`, the result is `Long`.  \n  \n## Overloading  \n The `Not` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `Not` operator to perform logical negation on a `Boolean` expression. The result is a `Boolean` value that represents the reverse of the value of the expression.  \n  \n [!code-vb[VbVbalrOperators#33](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/not-operator_1.vb)]  \n  \n The preceding example produces results of `False` and `True`, respectively.  \n  \n## Example  \n The following example uses the `Not` operator to perform logical negation of the individual bits of a numeric expression. The bit in the result pattern is set to the reverse of the corresponding bit in the operand pattern, including the sign bit.  \n  \n [!code-vb[VbVbalrOperators#34](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/not-operator_2.vb)]  \n  \n The preceding example produces results of –11, –9, and –7, respectively.  \n  \n## See Also  \n [Logical/Bitwise Operators (Visual Basic)](../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Logical and Bitwise Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)","nodes":[{"pos":[4,857],"embed":true,"restype":"x-metadata","content":"title: \"Not Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Not\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Boolean expressions, negating\"\n  - \"operators [Visual Basic], bitwise\"\n  - \"negation operator\"\n  - \"inverse bit values in variables\"\n  - \"bitwise operators, NOT operator\"\n  - \"bitwise comparison\"\n  - \"Not operator [Visual Basic]\"\n  - \"logical negation\"\n  - \"operators [Visual Basic], negation\"\nms.assetid: 8f2ea83c-d2ed-480a-a474-3042a1cad9b5\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Not Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,44],"content":"Not Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"Not Operator (Visual Basic) | Microsoft Docs","pos":[0,44]}]}],"path":["title"]}],"yml":true},{"pos":[864,891],"content":"Not Operator (Visual Basic)","linkify":"Not Operator (Visual Basic)","nodes":[{"content":"Not Operator (Visual Basic)","pos":[0,27]}]},{"pos":[892,989],"content":"Performs logical negation on a <ph id=\"ph1\">`Boolean`</ph> expression, or bitwise negation on a numeric expression.","source":"Performs logical negation on a `Boolean` expression, or bitwise negation on a numeric expression."},{"pos":[998,1004],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1057,1062],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1078,1087]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> or numeric expression.","pos":[1088,1124],"source":" Any `Boolean` or numeric expression."},{"content":"Required.","pos":[1147,1156]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> or numeric expression.","pos":[1157,1193],"source":" Any `Boolean` or numeric expression."},{"pos":[1202,1209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1213,1299],"content":"For <ph id=\"ph1\">`Boolean`</ph> expressions, the following table illustrates how <ph id=\"ph2\">`result`</ph> is determined.","source":"For `Boolean` expressions, the following table illustrates how `result` is determined."},{"pos":[1306,1324],"content":"If <ph id=\"ph1\">`expression`</ph> is","source":"If `expression` is"},{"pos":[1325,1349],"content":"The value of <ph id=\"ph1\">`result`</ph> is","source":"The value of `result` is"},{"pos":[1455,1624],"content":"For numeric expressions, the <ph id=\"ph1\">`Not`</ph> operator inverts the bit values of any numeric expression and sets the corresponding bit in <ph id=\"ph2\">`result`</ph> according to the following table.","source":"For numeric expressions, the `Not` operator inverts the bit values of any numeric expression and sets the corresponding bit in `result` according to the following table."},{"pos":[1631,1656],"content":"If bit in <ph id=\"ph1\">`expression`</ph> is","source":"If bit in `expression` is"},{"pos":[1657,1679],"content":"The bit in <ph id=\"ph1\">`result`</ph> is","source":"The bit in `result` is"},{"content":"1","pos":[1749,1750]},{"content":"0","pos":[1751,1752]},{"content":"0","pos":[1757,1758]},{"content":"1","pos":[1759,1760]},{"pos":[1769,1978],"content":"[!NOTE]\n Since the logical and bitwise operators have a lower precedence than other arithmetic and relational operators, any bitwise operations should be enclosed in parentheses to ensure accurate execution.","leadings":["","> "],"nodes":[{"content":"Since the logical and bitwise operators have a lower precedence than other arithmetic and relational operators, any bitwise operations should be enclosed in parentheses to ensure accurate execution.","pos":[9,207]}]},{"pos":[1987,1997],"content":"Data Types","linkify":"Data Types","nodes":[{"content":"Data Types","pos":[0,10]}]},{"content":"For a Boolean negation, the data type of the result is <ph id=\"ph1\">`Boolean`</ph>.","pos":[2001,2066],"source":"For a Boolean negation, the data type of the result is `Boolean`."},{"content":"For a bitwise negation, the result data type is the same as that of <ph id=\"ph1\">`expression`</ph>.","pos":[2067,2148],"source":" For a bitwise negation, the result data type is the same as that of `expression`."},{"content":"However, if expression is <ph id=\"ph1\">`Decimal`</ph>, the result is <ph id=\"ph2\">`Long`</ph>.","pos":[2149,2207],"source":" However, if expression is `Decimal`, the result is `Long`."},{"pos":[2216,2227],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`Not`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure.","pos":[2231,2392],"source":"The `Not` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[2393,2501]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[2502,2643],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[2652,2659],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`Not`</ph> operator to perform logical negation on a <ph id=\"ph2\">`Boolean`</ph> expression.","pos":[2663,2763],"source":"The following example uses the `Not` operator to perform logical negation on a `Boolean` expression."},{"content":"The result is a <ph id=\"ph1\">`Boolean`</ph> value that represents the reverse of the value of the expression.","pos":[2764,2855],"source":" The result is a `Boolean` value that represents the reverse of the value of the expression."},{"pos":[2994,3069],"content":"The preceding example produces results of <ph id=\"ph1\">`False`</ph> and <ph id=\"ph2\">`True`</ph>, respectively.","source":"The preceding example produces results of `False` and `True`, respectively."},{"pos":[3078,3085],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`Not`</ph> operator to perform logical negation of the individual bits of a numeric expression.","pos":[3089,3210],"source":"The following example uses the `Not` operator to perform logical negation of the individual bits of a numeric expression."},{"content":"The bit in the result pattern is set to the reverse of the corresponding bit in the operand pattern, including the sign bit.","pos":[3211,3335]},{"content":"The preceding example produces results of –11, –9, and –7, respectively.","pos":[3474,3546]},{"pos":[3555,3563],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Logical/Bitwise Operators (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3567,3691],"source":"[Logical/Bitwise Operators (Visual Basic)](../../../visual-basic/language-reference/operators/logical-bitwise-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[3695,3808],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[3812,3937],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Logical and Bitwise Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept>","pos":[3941,4106],"source":"[Logical and Bitwise Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)"}]}