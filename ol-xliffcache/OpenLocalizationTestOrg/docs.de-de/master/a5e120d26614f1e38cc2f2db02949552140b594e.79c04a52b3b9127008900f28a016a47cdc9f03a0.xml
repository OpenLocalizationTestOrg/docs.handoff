{"content":"---\ntitle: \"* operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/26/2019\nf1_keywords: \n  - \"*_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"multiplication operator (*) [C#]\"\n  - \"* operator [C#]\"\nms.assetid: abd9a5f0-9b24-431e-971a-09ee1c45c50e\n---\n# * operator (C# Reference)\n\nThe `*` operator is supported in two forms: a unary pointer indirection operator or a binary multiplication operator.\n\n## Pointer indirection operator\n\nUse the unary `*` operator to obtain the variable to which an operand of a pointer type points. For more information, see [How to: obtain the value of a pointer variable](../../programming-guide/unsafe-code-pointers/how-to-obtain-the-value-of-a-pointer-variable.md).\n\nThe pointer indirection operator `*` requires [unsafe](../keywords/unsafe.md) context.\n\n## Multiplication operator\n\nFor numeric types, the `*` operator computes the product of its operands:\n\n[!code-csharp-interactive[multiplication](~/samples/snippets/csharp/language-reference/operators/MultiplicationExamples.cs#Multiply)]\n\n## Operator overloadability\n\nUser-defined types can [overload](../keywords/operator.md) a binary `*` operator. When a binary `*` operator is overloaded, the [multiplication assignment operator](multiplication-assignment-operator.md) `*=` is also implicitly overloaded.\n\n## C# language specification\n\nFor more information, see the [Pointer indirection](~/_csharplang/spec/unsafe-code.md#pointer-indirection) and [Multiplication operator](~/_csharplang/spec/expressions.md#multiplication-operator) sections of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [Pointer types](../../programming-guide/unsafe-code-pointers/pointer-types.md)","nodes":[{"pos":[4,246],"embed":true,"restype":"x-metadata","content":"title: \"* operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/26/2019\nf1_keywords: \n  - \"*_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"multiplication operator (*) [C#]\"\n  - \"* operator [C#]\"\nms.assetid: abd9a5f0-9b24-431e-971a-09ee1c45c50e","nodes":[{"content":"* operator - C# Reference","nodes":[{"pos":[2,25],"content":"operator - C# Reference","nodes":[{"content":"operator - C# Reference","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[253,278],"content":"* operator (C# Reference)","linkify":"* operator (C# Reference)","nodes":[{"content":"* operator (C# Reference)","pos":[0,25]}]},{"pos":[280,397],"content":"The <ph id=\"ph1\">`*`</ph> operator is supported in two forms: a unary pointer indirection operator or a binary multiplication operator.","source":"The `*` operator is supported in two forms: a unary pointer indirection operator or a binary multiplication operator."},{"pos":[402,430],"content":"Pointer indirection operator","linkify":"Pointer indirection operator","nodes":[{"content":"Pointer indirection operator","pos":[0,28]}]},{"content":"Use the unary <ph id=\"ph1\">`*`</ph> operator to obtain the variable to which an operand of a pointer type points.","pos":[432,527],"source":"Use the unary `*` operator to obtain the variable to which an operand of a pointer type points."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: obtain the value of a pointer variable<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/how-to-obtain-the-value-of-a-pointer-variable.md)</ept>.","pos":[528,698],"source":" For more information, see [How to: obtain the value of a pointer variable](../../programming-guide/unsafe-code-pointers/how-to-obtain-the-value-of-a-pointer-variable.md)."},{"pos":[700,786],"content":"The pointer indirection operator <ph id=\"ph1\">`*`</ph> requires <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../keywords/unsafe.md)</ept> context.","source":"The pointer indirection operator `*` requires [unsafe](../keywords/unsafe.md) context."},{"pos":[791,814],"content":"Multiplication operator","linkify":"Multiplication operator","nodes":[{"content":"Multiplication operator","pos":[0,23]}]},{"pos":[816,889],"content":"For numeric types, the <ph id=\"ph1\">`*`</ph> operator computes the product of its operands:","source":"For numeric types, the `*` operator computes the product of its operands:"},{"pos":[1029,1053],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"User-defined types can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../keywords/operator.md)</ept> a binary <ph id=\"ph1\">`*`</ph> operator.","pos":[1055,1136],"source":"User-defined types can [overload](../keywords/operator.md) a binary `*` operator."},{"content":"When a binary <ph id=\"ph1\">`*`</ph> operator is overloaded, the <bpt id=\"p1\">[</bpt>multiplication assignment operator<ept id=\"p1\">](multiplication-assignment-operator.md)</ept> <ph id=\"ph2\">`*=`</ph> is also implicitly overloaded.","pos":[1137,1294],"source":" When a binary `*` operator is overloaded, the [multiplication assignment operator](multiplication-assignment-operator.md) `*=` is also implicitly overloaded."},{"pos":[1299,1324],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1326,1602],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Pointer indirection<ept id=\"p1\">](~/_csharplang/spec/unsafe-code.md#pointer-indirection)</ept> and <bpt id=\"p2\">[</bpt>Multiplication operator<ept id=\"p2\">](~/_csharplang/spec/expressions.md#multiplication-operator)</ept> sections of the <bpt id=\"p3\">[</bpt>C# language specification<ept id=\"p3\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Pointer indirection](~/_csharplang/spec/unsafe-code.md#pointer-indirection) and [Multiplication operator](~/_csharplang/spec/expressions.md#multiplication-operator) sections of the [C# language specification](../language-specification/index.md)."},{"pos":[1607,1615],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1619,1646],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1649,1705],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1708,1732],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[1735,1813],"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/pointer-types.md)</ept>","source":"[Pointer types](../../programming-guide/unsafe-code-pointers/pointer-types.md)"}]}