<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="timers.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">644ccf5951e9d2556fc697d2fd763f026fd0ebdb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\timers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">280f1c8e30c331ba27bbea84e9fde48cbe583f8a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31b0a5f142b0a84316838857f49632312f194d1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Timers</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn what .NET timers to use in a multithreaded environment.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Timers</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET provides two timers to use in a multithreaded environment:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>, which executes a single callback method on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread at regular intervals.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>, which by default raises an event on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread at regular intervals.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Some .NET implementations may include additional timers:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph>: a Windows Forms component that fires an event at regular intervals.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The component has no user interface and is designed for use in a single-threaded environment.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph>: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherTimer?displayProperty=nameWithType&gt;</ph>: a timer that is integrated into the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> queue which is processed at a specified interval of time and at a specified priority.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The System.Threading.Timer class</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class enables you to continuously call a delegate at specified time intervals.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You also can use this class to schedule a single call to a delegate in a specified time interval.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The delegate is executed on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> object, you specify a <ph id="ph2">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate that defines the callback method, an optional state object that is passed to the callback, the amount of time to delay before the first invocation of the callback, and the time interval between callback invocations.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To cancel a pending timer, call the <ph id="ph1">&lt;xref:System.Threading.Timer.Dispose%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example creates a timer that calls the provided delegate for the first time after one second (1000 milliseconds) and then calls it every two seconds.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The state object in the example is used to count how many times the delegate is called.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The timer is stopped when the delegate has been called at least 10 times.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The System.Timers.Timer class</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another timer that can be used in a multithreaded environment is <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> that by default raises an event on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> object, you may specify the time interval in which to raise an <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to indicate if a timer should raise an <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you need an <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be raised only once after the specified interval has elapsed, set the <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The default value of the <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, which means that an <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised regularly at the interval defined by the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](threading-objects-and-features.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>