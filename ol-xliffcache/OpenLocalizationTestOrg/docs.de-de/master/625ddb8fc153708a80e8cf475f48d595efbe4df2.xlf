<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="determining-object-type.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">625ddb8fc153708a80e8cf475f48d595efbe4df2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\early-late-binding\determining-object-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03a71f8540f9581675ff9d163fb5aef6067e45bc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe55ece17447e5be51c5d828a9264d0a7fa8aa5e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Determining Object Type (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Determining Object Type (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Generic object variables (that is, variables you declare as <ph id="ph1">`Object`</ph>) can hold objects from any class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When using variables of type <ph id="ph1">`Object`</ph>, you may need to take different actions based on the class of the object; for example, some objects might not support a particular property or method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Visual Basic provides two means of determining which type of object is stored in an object variable: the <ph id="ph1">`TypeName`</ph> function and the <ph id="ph2">`TypeOf...Is`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>TypeName and TypeOfâ€¦Is</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TypeName`</ph> function returns a string and is the best choice when you need to store or display the class name of an object, as shown in the following code fragment:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TypeOf...Is`</ph> operator is the best choice for testing an object's type, because it is much faster than an equivalent string comparison using <ph id="ph2">`TypeName`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following code fragment uses <ph id="ph1">`TypeOf...Is`</ph> within an <ph id="ph2">`If...Then...Else`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A word of caution is due here.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TypeOf...Is`</ph> operator returns <ph id="ph2">`True`</ph> if an object is of a specific type, or is derived from a specific type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Almost everything you do with Visual Basic involves objects, which include some elements not normally thought of as objects, such as strings and integers.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These objects are derived from and inherit methods from <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When passed an <ph id="ph1">`Integer`</ph> and evaluated with <ph id="ph2">`Object`</ph>, the <ph id="ph3">`TypeOf...Is`</ph> operator returns <ph id="ph4">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example reports that the parameter <ph id="ph1">`InParam`</ph> is both an <ph id="ph2">`Object`</ph> and an <ph id="ph3">`Integer`</ph>:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example uses both <ph id="ph1">`TypeOf...Is`</ph> and <ph id="ph2">`TypeName`</ph> to determine the type of object passed to it in the <ph id="ph3">`Ctrl`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TestObject`</ph> procedure calls <ph id="ph2">`ShowType`</ph> with three different kinds of controls.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To run the example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a new Windows Application project and add a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control, a <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> control, and a <ph id="ph3">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> control to the form.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>From the button on your form, call the <ph id="ph1">`TestObject`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add the following code to your form:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Calling a Property or Method Using a String Name<ept id="p1">](../../../../visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>If...Then...Else Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/if-then-else-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integer Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>