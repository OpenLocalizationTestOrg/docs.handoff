<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa62d09fc9e44d3a6c5997e77e142664ec595211</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\performance\clr-etw-providers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47d4f840f9b8816e372f65362d697bf4c7c6ad46</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64265790ead6291c73bb7c93423bb95c36b3227d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CLR ETW Providers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CLR ETW Providers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The common language runtime (CLR) has two providers: the runtime provider and the rundown provider.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The runtime provider raises events, depending on which keywords (categories of events) are enabled.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, you can collect loader events by enabling the <ph id="ph1">`LoaderKeyword`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Event tracking for Windows (ETW) events are logged into a file that has an .etl extension, which can later be post-processed in comma-separated value (.csv) files as needed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For information about how to convert the .etl file to a .csv file, see <bpt id="p1">[</bpt>Controlling .NET Framework Logging<ept id="p1">](../../../docs/framework/performance/controlling-logging.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Runtime Provider</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The runtime provider is the main CLR ETW provider.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The CLR runtime provider GUID is e13c0d23-ccbc-4e12-931b-d9cc2eee27e4.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For examples of how to log and view CLR ETW events by using commonly available tools, see <bpt id="p1">[</bpt>Controlling .NET Framework Logging<ept id="p1">](../../../docs/framework/performance/controlling-logging.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In addition to using keywords such as <ph id="ph1">`LoaderKeyword`</ph>, you may have to enable keywords for logging events that may be raised too frequently.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`StartEnumerationKeyword`</ph> and the <ph id="ph2">`EndEnumerationKeyword`</ph> keywords enable these events and are summarized in <bpt id="p1">[</bpt>CLR ETW Keywords and Levels<ept id="p1">](../../../docs/framework/performance/clr-etw-keywords-and-levels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Rundown Provider</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The rundown provider must be turned on for certain special-purpose uses.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, for a majority of users, the runtime provider should suffice.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The CLR rundown provider GUID is A669021C-C450-4609-A035-5AF59AF4DF18.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Normally, ETW logging is enabled before a process launches, and the logging is turned off after the process exits.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, if ETW logging is turned on while the process is executing, additional information is needed about the process.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, for symbol resolution you have to log method events for methods that were already loaded before logging was turned on.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DCStart`</ph> and <ph id="ph2">`DCEnd`</ph> events capture the state of the process when data collection was started and stopped.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>(State refers to information at a high level, including the methods that were already just-in-time (JIT) compiled and assemblies that were loaded.) These two events can provide information about what has already happened in the process; for example, which methods were JIT- compiled, and so on.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Only the events with <ph id="ph1">`DC`</ph>, <ph id="ph2">`DCStart`</ph>, <ph id="ph3">`DCEnd`</ph>, or <ph id="ph4">`DCInit`</ph> in their names are raised under the rundown provider.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Additionally, these events are raised only under the rundown provider.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In addition to the event keyword filters, the rundown provider also supports the <ph id="ph1">`StartRundownKeyword`</ph> and <ph id="ph2">`EndRundownKeyword`</ph> keywords to provide targeted filtering.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Start Rundown</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A start rundown is triggered when logging under the rundown provider is enabled with the <ph id="ph1">`StartRundownKeyword`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This causes the <ph id="ph1">`DCStart`</ph> event to be raised, and captures the state of the system.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Before the start of the enumeration, the <ph id="ph1">`DCStartInit`</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>At the end of the enumeration, the <ph id="ph1">`DCStartComplete`</ph> event is raised to notify the controller that data collection terminated normally.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>End Rundown</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An end rundown is triggered when logging under the rundown provider is enabled with the <ph id="ph1">`EndRundownKeyword`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>End rundown stops profiling on a process that continues to execute.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DCEnd`</ph> events capture the state of the system when profiling is stopped.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Before the start of the enumeration, the <ph id="ph1">`DCEndInit`</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At the end of the enumeration, the <ph id="ph1">`DCEndComplete`</ph> event is raised to notify the consumer that data collection terminated normally.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Start rundown and end rundown are primarily used for managed symbol resolution.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Start rundown can provide address range information for methods that were already JIT-compiled before the profiling session was started.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>End rundown can provide address range information for all methods that have been JIT-compiled when profiling is about to be turned off.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>End rundown does not happen automatically when a profiling session is stopped.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Instead, a tool that is seeking to perform managed symbol resolution has to explicitly invoke a CLR rundown provider session with the <ph id="ph1">`EndRundownKeyword`</ph> keyword enabled, just before profiling is stopped.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Although either start rundown or end rundown can provide method address range information for managed symbol resolution, we recommend that you use the <ph id="ph1">`EndRundownKeyword`</ph> keyword (which supplies <ph id="ph2">`DCEnd`</ph> events) instead of the <ph id="ph3">`StartRundownKeyword`</ph> keyword (which supplies <ph id="ph4">`DCStart`</ph> events).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`StartRundownKeyword`</ph> causes the rundown to happen during the profiling session, which may disturb the profiled scenario.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ETW Data Collection Using Runtime and Rundown Providers</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the CLR rundown provider in a way that allows symbol resolution of managed processes with minimal impact, regardless of whether the processes start or end inside or outside the profiled window.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Turn on ETW logging by using the CLR runtime provider:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The log will be saved to the clr1.etl file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To stop profiling while the process continues to execute, start the rundown provider to capture the <ph id="ph1">`DCEnd`</ph> events:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This enables the collection of <ph id="ph1">`DCEnd`</ph> events to start a rundown session.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You may need to wait 30 to 60 seconds for all events to be collected.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The log will be saved to the clr1.et2 file.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Turn off all ETW profiling:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Merge the profiles to create one log file:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The merged.etl file will contain the events from the runtime and the rundown provider sessions.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A tool can execute steps 2 and 3 (starting a rundown session and then terminating profiling) instead of immediately turning off profiling when a user requests profiling to be stopped.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A tool can also execute step 4.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ETW Events in the Common Language Runtime<ept id="p1">](../../../docs/framework/performance/etw-events-in-the-common-language-runtime.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>