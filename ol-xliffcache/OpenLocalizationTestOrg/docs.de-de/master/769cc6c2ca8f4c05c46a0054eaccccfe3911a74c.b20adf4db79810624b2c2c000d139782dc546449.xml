{"content":"---\ntitle: \"How to: Generate XML from CSV Files (C#)\"\nms.date: 07/20/2015\nms.assetid: 57b9ccde-f983-4a21-ae61-70ecede30307\n---\n# How to: Generate XML from CSV Files (C#)\nThis example shows how to use [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] and [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] to generate an XML file from a comma-separated value (CSV) file.  \n  \n## Example  \n The following code performs a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query on an array of strings.  \n  \n The query uses the `let` clause to split each string into an array of fields.  \n  \n```csharp  \n// Create the text file.  \nstring csvString = @\"GREAL,Great Lakes Food Market,Howard Snyder,Marketing Manager,(503) 555-7555,2732 Baker Blvd.,Eugene,OR,97403,USA  \nHUNGC,Hungry Coyote Import Store,Yoshi Latimer,Sales Representative,(503) 555-6874,City Center Plaza 516 Main St.,Elgin,OR,97827,USA  \nLAZYK,Lazy K Kountry Store,John Steel,Marketing Manager,(509) 555-7969,12 Orchestra Terrace,Walla Walla,WA,99362,USA  \nLETSS,Let's Stop N Shop,Jaime Yorres,Owner,(415) 555-5938,87 Polk St. Suite 5,San Francisco,CA,94117,USA\";  \nFile.WriteAllText(\"cust.csv\", csvString);  \n  \n// Read into an array of strings.  \nstring[] source = File.ReadAllLines(\"cust.csv\");  \nXElement cust = new XElement(\"Root\",  \n    from str in source  \n    let fields = str.Split(',')  \n    select new XElement(\"Customer\",  \n        new XAttribute(\"CustomerID\", fields[0]),  \n        new XElement(\"CompanyName\", fields[1]),  \n        new XElement(\"ContactName\", fields[2]),  \n        new XElement(\"ContactTitle\", fields[3]),  \n        new XElement(\"Phone\", fields[4]),  \n        new XElement(\"FullAddress\",  \n            new XElement(\"Address\", fields[5]),  \n            new XElement(\"City\", fields[6]),  \n            new XElement(\"Region\", fields[7]),  \n            new XElement(\"PostalCode\", fields[8]),  \n            new XElement(\"Country\", fields[9])  \n        )  \n    )  \n);  \nConsole.WriteLine(cust);  \n```  \n  \n This code produces the following output:  \n  \n```xml  \n<Root>  \n  <Customer CustomerID=\"GREAL\">  \n    <CompanyName>Great Lakes Food Market</CompanyName>  \n    <ContactName>Howard Snyder</ContactName>  \n    <ContactTitle>Marketing Manager</ContactTitle>  \n    <Phone>(503) 555-7555</Phone>  \n    <FullAddress>  \n      <Address>2732 Baker Blvd.</Address>  \n      <City>Eugene</City>  \n      <Region>OR</Region>  \n      <PostalCode>97403</PostalCode>  \n      <Country>USA</Country>  \n    </FullAddress>  \n  </Customer>  \n  <Customer CustomerID=\"HUNGC\">  \n    <CompanyName>Hungry Coyote Import Store</CompanyName>  \n    <ContactName>Yoshi Latimer</ContactName>  \n    <ContactTitle>Sales Representative</ContactTitle>  \n    <Phone>(503) 555-6874</Phone>  \n    <FullAddress>  \n      <Address>City Center Plaza 516 Main St.</Address>  \n      <City>Elgin</City>  \n      <Region>OR</Region>  \n      <PostalCode>97827</PostalCode>  \n      <Country>USA</Country>  \n    </FullAddress>  \n  </Customer>  \n  <Customer CustomerID=\"LAZYK\">  \n    <CompanyName>Lazy K Kountry Store</CompanyName>  \n    <ContactName>John Steel</ContactName>  \n    <ContactTitle>Marketing Manager</ContactTitle>  \n    <Phone>(509) 555-7969</Phone>  \n    <FullAddress>  \n      <Address>12 Orchestra Terrace</Address>  \n      <City>Walla Walla</City>  \n      <Region>WA</Region>  \n      <PostalCode>99362</PostalCode>  \n      <Country>USA</Country>  \n    </FullAddress>  \n  </Customer>  \n  <Customer CustomerID=\"LETSS\">  \n    <CompanyName>Let's Stop N Shop</CompanyName>  \n    <ContactName>Jaime Yorres</ContactName>  \n    <ContactTitle>Owner</ContactTitle>  \n    <Phone>(415) 555-5938</Phone>  \n    <FullAddress>  \n      <Address>87 Polk St. Suite 5</Address>  \n      <City>San Francisco</City>  \n      <Region>CA</Region>  \n      <PostalCode>94117</PostalCode>  \n      <Country>USA</Country>  \n    </FullAddress>  \n  </Customer>  \n</Root>  \n```  \n  \n## See also\n\n- [Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)\n","nodes":[{"pos":[4,122],"embed":true,"restype":"x-metadata","content":"title: \"How to: Generate XML from CSV Files (C#)\"\nms.date: 07/20/2015\nms.assetid: 57b9ccde-f983-4a21-ae61-70ecede30307","nodes":[{"content":"How to: Generate XML from CSV Files (C#)","nodes":[{"pos":[0,40],"content":"How to: Generate XML from CSV Files (C#)","nodes":[{"content":"How to: Generate XML from CSV Files (C#)","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[129,169],"content":"How to: Generate XML from CSV Files (C#)","linkify":"How to: Generate XML from CSV Files (C#)","nodes":[{"content":"How to: Generate XML from CSV Files (C#)","pos":[0,40]}]},{"pos":[170,378],"content":"This example shows how to use <ph id=\"ph1\">[!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> to generate an XML file from a comma-separated value (CSV) file.","source":"This example shows how to use [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] and [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] to generate an XML file from a comma-separated value (CSV) file."},{"pos":[387,394],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[398,507],"content":"The following code performs a <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query on an array of strings.","source":"The following code performs a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query on an array of strings."},{"pos":[514,591],"content":"The query uses the <ph id=\"ph1\">`let`</ph> clause to split each string into an array of fields.","source":"The query uses the `let` clause to split each string into an array of fields."},{"content":"This code produces the following output:","pos":[2000,2040]},{"pos":[3915,3923],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3927,4078],"content":"<bpt id=\"p1\">[</bpt>Projections and Transformations (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","source":"[Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}