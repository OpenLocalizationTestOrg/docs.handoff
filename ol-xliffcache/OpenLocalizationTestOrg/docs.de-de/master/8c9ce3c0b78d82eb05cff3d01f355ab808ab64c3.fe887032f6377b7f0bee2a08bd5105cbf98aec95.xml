{"content":"---\ntitle: \"Option Strict On requires each lambda expression parameter to be declared with an &#39;As&#39; clause if its type cannot be inferred | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"bc36642\"\n  - \"vbc36642\"\nhelpviewer_keywords: \n  - \"BC36642\"\nms.assetid: 2aaa62b8-49c9-4ae8-b0f5-08e3f0b5ad10\ncaps.latest.revision: 6\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Option Strict On requires each lambda expression parameter to be declared with an &#39;As&#39; clause if its type cannot be inferred\nYou have declared a parameter in a lambda expression without using an `As` clause, with `Option Strict` on.  \n  \n```  \n' Not valid when Option Strict is on.  \n' Dim increment1 = Function (n) n + 1  \n```  \n  \n The previous declaration is valid if the type of `n` can be inferred. For example, if you are assigning the previous lambda expression to a function delegate, `Del`:  \n  \n```  \nDelegate Function Del(ByVal p As Integer) As Integer  \n```  \n  \n Now the type of `n` can be inferred from parameter `p`:  \n  \n```  \nDim increment2 as Del = Function(n) n + 1  \n```  \n  \n **Error ID:** BC36642  \n  \n## To correct this error  \n  \n-   Add an `As` clause to the parameter declaration:  \n  \n    ```  \n    Dim increment3 = Function (n As Integer) n + 1  \n    ```  \n  \n## See Also  \n [Lambda Expressions](../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)","nodes":[{"pos":[12,161],"content":"Option Strict On requires each lambda expression parameter to be declared with an &#39;As&#39; clause if its type cannot be inferred | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Option Strict On requires each lambda expression parameter to be declared with an &amp;#39;As&amp;#39; clause if its type cannot be inferred | Microsoft Docs","pos":[0,149],"source":"Option Strict On requires each lambda expression parameter to be declared with an &#39;As&#39; clause if its type cannot be inferred | Microsoft Docs"}]},{"pos":[677,809],"content":"Option Strict On requires each lambda expression parameter to be declared with an &#39;As&#39; clause if its type cannot be inferred","linkify":"Option Strict On requires each lambda expression parameter to be declared with an &#39;As&#39; clause if its type cannot be inferred","nodes":[{"content":"Option Strict On requires each lambda expression parameter to be declared with an &amp;#39;As&amp;#39; clause if its type cannot be inferred","pos":[0,132],"source":"Option Strict On requires each lambda expression parameter to be declared with an &#39;As&#39; clause if its type cannot be inferred"}]},{"pos":[810,917],"content":"You have declared a parameter in a lambda expression without using an <ph id=\"ph1\">`As`</ph> clause, with <ph id=\"ph2\">`Option Strict`</ph> on.","source":"You have declared a parameter in a lambda expression without using an `As` clause, with `Option Strict` on."},{"content":"The previous declaration is valid if the type of <ph id=\"ph1\">`n`</ph> can be inferred.","pos":[1019,1088],"source":"The previous declaration is valid if the type of `n` can be inferred."},{"content":"For example, if you are assigning the previous lambda expression to a function delegate, <ph id=\"ph1\">`Del`</ph>:","pos":[1089,1184],"source":" For example, if you are assigning the previous lambda expression to a function delegate, `Del`:"},{"pos":[1261,1316],"content":"Now the type of <ph id=\"ph1\">`n`</ph> can be inferred from parameter <ph id=\"ph2\">`p`</ph>:","source":"Now the type of `n` can be inferred from parameter `p`:"},{"pos":[1382,1403],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC36642","source":"**Error ID:** BC36642"},{"pos":[1412,1433],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[1443,1491],"content":"Add an <ph id=\"ph1\">`As`</ph> clause to the parameter declaration:","source":"Add an `As` clause to the parameter declaration:"},{"pos":[1576,1584],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1588,1697],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)"}]}