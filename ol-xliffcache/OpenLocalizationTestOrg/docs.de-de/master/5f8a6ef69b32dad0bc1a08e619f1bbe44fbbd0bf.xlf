<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="task-based-asynchronous-pattern-tap.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f8a6ef69b32dad0bc1a08e619f1bbe44fbbd0bf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\task-based-asynchronous-pattern-tap.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60cb8751108545d2a4a9c269ca3d75780c6ec3bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87055c1513d40b3f7b66125596d25e0c807ee3c2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Task-based Asynchronous Pattern (TAP) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Task-based Asynchronous Pattern (TAP)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Task-based Asynchronous Pattern (TAP) is based on the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601?displayProperty=fullName&gt;</ph> types in the <ph id="ph3">&lt;xref:System.Threading.Tasks?displayProperty=fullName&gt;</ph> namespace, which are used to represent arbitrary asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>TAP is the recommended asynchronous design pattern for new development.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Naming, Parameters, and Return Types</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>TAP uses a single method to represent the initiation and completion of an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is in contrast to the Asynchronous Programming Model (APM or <ph id="ph1">`IAsyncResult`</ph>) pattern, which requires <ph id="ph2">`Begin`</ph> and <ph id="ph3">`End`</ph> methods, and in contrast to the Event-based Asynchronous Pattern (EAP), which requires a method that has the <ph id="ph4">`Async`</ph> suffix and also requires one or more events, event handler delegate types, and <ph id="ph5">`EventArg`</ph>-derived types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Asynchronous methods in TAP include the <ph id="ph1">`Async`</ph> suffix after the operation name; for example, <ph id="ph2">`GetAsync`</ph> for a get operation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you're adding a TAP method to a class that already contains that method name with the <ph id="ph1">`Async`</ph> suffix, use the suffix <ph id="ph2">`TaskAsync`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, if the class already has a <ph id="ph1">`GetAsync`</ph> method, use the name <ph id="ph2">`GetTaskAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The TAP method returns either a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task?displayProperty=fullName&gt;</ph> or a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601?displayProperty=fullName&gt;</ph>, based on whether the corresponding synchronous method returns void or a type <ph id="ph3">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The parameters of a TAP method should match the parameters of its synchronous counterpart, and should be provided in the same order.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`out`</ph> and <ph id="ph2">`ref`</ph> parameters are exempt from this rule and should be avoided entirely.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Any data that would have been returned through an <ph id="ph1">`out`</ph> or <ph id="ph2">`ref`</ph> parameter should instead be returned as part of the <ph id="ph3">`TResult`</ph> returned by <ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, and should use a tuple or a custom data structure to accommodate multiple values.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Methods that are devoted exclusively to the creation, manipulation, or combination of tasks (where the asynchronous intent of the method is clear in the method name or in the name of the type to which the method belongs) need not follow this naming pattern; such methods are often referred to as <bpt id="p1">*</bpt>combinators<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Examples of combinators include <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph>, and are discussed in the <bpt id="p1">[</bpt>Using the Built-in Task-based Combinators<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/consuming-the-task-based-asynchronous-pattern.md#combinators)</ept> section of the article <bpt id="p2">[</bpt>Consuming the Task-based Asynchronous Pattern<ept id="p2">](../../../docs/standard/asynchronous-programming-patterns/consuming-the-task-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For examples of how the TAP syntax differs from the syntax used in legacy asynchronous programming patterns such as the Asynchronous Programming Model (APM) and the Event-based Asynchronous Pattern (EAP), see <bpt id="p1">[</bpt>Asynchronous Programming Patterns<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initiating an Asynchronous Operation</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An asynchronous method that is based on TAP can do a small amount of work synchronously, such as validating arguments and initiating the asynchronous operation, before it returns the resulting task.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Synchronous work should be kept to the minimum so the asynchronous method can return quickly.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Reasons for a quick return include the following:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Asynchronous methods may be invoked from user interface (UI) threads, and any long-running synchronous work could harm the responsiveness of the application.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Multiple asynchronous methods may be launched concurrently.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Therefore, any long-running work in the synchronous portion of an asynchronous method could delay the initiation of other asynchronous operations, thereby decreasing the benefits of concurrency.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In some cases, the amount of work required to complete the operation is less than the amount of work required to launch the operation asynchronously.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Reading from a stream where the read operation can be satisfied by data that is already buffered in memory is an example of such a scenario.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In such cases, the operation may complete synchronously, and may return a task that has already been completed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An asynchronous method should raise an exception to be thrown out of the asynchronous method call only in response to a usage error.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Usage errors should never occur in production code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, if passing a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic) as one of the method’s arguments causes an error state (usually represented by an <ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph> exception), you can modify the calling code to ensure that a null reference is never passed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For all other errors, exceptions that occur when an asynchronous method is running should be assigned to the returned task, even if the asynchronous method happens to complete synchronously before the task is returned.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Typically, a task contains at most one exception.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, if the task represents multiple operations (for example, <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph>), multiple exceptions may be associated with a single task.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Target Environment</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you implement a TAP method, you can determine where asynchronous execution occurs.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You may choose to execute the workload on the thread pool, implement it by using asynchronous I/O (without being bound to a thread for the majority of the operation’s execution), run it on a specific thread (such as the UI thread), or use any number of potential contexts.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A TAP method may even have nothing to execute, and may just return a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> that represents the occurrence of a condition elsewhere in the system (for example, a task that represents data arriving at a queued data structure).The caller of the TAP method may block waiting for the TAP method to complete by synchronously waiting on the resulting task, or may run additional (continuation) code when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The creator of the continuation code has control over where that code executes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You may create the continuation code either explicitly, through methods on the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class (for example, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.ContinueWith%2A&gt;</ph>) or implicitly, by using language support built on top of continuations (for example, <ph id="ph3">`await`</ph> in C#, <ph id="ph4">`Await`</ph> in Visual Basic, <ph id="ph5">`AwaitValue`</ph> in F#).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Task Status</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class provides a life cycle for asynchronous operations, and that cycle is represented by the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To support corner cases of types that derive from <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>,  and to support the separation of construction from scheduling, the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class exposes a <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Tasks that are created by the public <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> constructors are referred to as <bpt id="p1">*</bpt>cold tasks<ept id="p1">*</ept>, because they begin their life cycle in the non-scheduled <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state and are scheduled only when <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> is called on these instances.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>All other tasks begin their life cycle in a hot state, which means that the asynchronous operations they represent have already been initiated and their task status is an enumeration value other than <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All tasks that are returned from TAP methods must be activated.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If a TAP method internally uses a task’s constructor to instantiate the task to be returned, the TAP method must call <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object before returning it.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Consumers of a TAP method may safely assume that the returned task is active and should not try to call <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> on any <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> that is returned from a TAP method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> on an active task results in an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Cancellation (Optional)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In TAP, cancellation is optional for both asynchronous method implementers and asynchronous method consumers.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If an operation allows cancellation, it exposes an overload of the asynchronous method that accepts a cancellation token (<ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> instance).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>By convention, the parameter is named <ph id="ph1">`cancellationToken`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap/cs/examples1.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Conceptual.TAP#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap/vb/examples1.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The asynchronous operation monitors this token for cancellation requests.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If it receives a cancellation request, it may choose to honor that request and cancel the operation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the cancellation request results in work being ended prematurely, the TAP method returns a task that ends in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state; there is no available result and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state is considered to be a final (completed) state for a task, along with the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Therefore, if a task is in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state, its <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph> property returns <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When a task completes in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state, any continuations registered with the task are scheduled or executed, unless a continuation option such as <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> was specified to opt out of continuation.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Any code that is asynchronously waiting for a canceled task through use of language features continues to run but receives an <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> or an exception derived from it.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Code that is blocked synchronously waiting on the task through methods such as <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> also continue to run with an exception.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If a cancellation token has requested cancellation before the TAP method that accepts that token is called, the TAP method should return a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> task.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>However, if cancellation is requested while the asynchronous operation is running, the asynchronous operation need not accept the cancellation request.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The returned task should end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state only if the operation ends as a result of the cancellation request.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If cancellation is requested but a result or an exception is still produced, the task should end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For asynchronous methods used by a developer who wants cancellation first and foremost, you don't have to provide an overload that doesn’t accept a cancellation token.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For methods that cannot be canceled, do not provide overloads that accept a cancellation token; this helps indicate to the caller whether the target method is actually cancelable.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Consumer code that does not desire cancellation may call a method that accepts a <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> and provide <ph id="ph2">&lt;xref:System.Threading.CancellationToken.None%2A&gt;</ph> as the argument value.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.CancellationToken.None%2A&gt;</ph> is functionally equivalent to the default <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Progress Reporting (Optional)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Some asynchronous operations benefit from providing progress notifications; these are typically used to update a user interface with information about the progress of the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In TAP, progress is handled through an <ph id="ph1">&lt;xref:System.IProgress%601&gt;</ph> interface, which is passed to the asynchronous method as a parameter that is usually named <ph id="ph2">`progress`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Providing the progress interface when the asynchronous method is called helps eliminate race conditions that result from incorrect usage (that is, when event handlers that are incorrectly registered after the operation starts may miss updates).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>More importantly, the progress interface supports varying implementations of progress, as determined by the consuming code.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, the consuming code may only care about the latest progress update, or may want to buffer all updates, or may want to invoke an action for each update, or may want to control whether the invocation is marshaled to a particular thread.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>All these options may be achieved by using a different implementation of the interface, customized to the particular consumer’s needs.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>As with cancellation, TAP implementations should provide an <ph id="ph1">&lt;xref:System.IProgress%601&gt;</ph> parameter only if the API supports progress notifications.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, if the <ph id="ph1">`ReadAsync`</ph> method discussed earlier in this article is able to report intermediate progress in the form of the number of bytes read thus far, the progress callback could be an <ph id="ph2">&lt;xref:System.IProgress%601&gt;</ph> interface:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap/cs/examples1.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Conceptual.TAP#2<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap/vb/examples1.vb#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`FindFilesAsync`</ph> method returns a list of all files that meet a particular search pattern, the progress callback could provide an estimate of the percentage of work completed as well as the current set of partial results.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It could do this either with a tuple:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap/cs/examples1.cs#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Conceptual.TAP#3<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap/vb/examples1.vb#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>or with a data type that is specific to the API:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap/cs/examples1.cs#4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Conceptual.TAP#4<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap/vb/examples1.vb#4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In the latter case, the special data type is usually suffixed with <ph id="ph1">`ProgressInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If TAP implementations provide overloads that accept a <ph id="ph1">`progress`</ph> parameter, they must allow the argument to be <ph id="ph2">`null`</ph>, in which case no progress will be reported.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>TAP implementations should report the progress to the <ph id="ph1">&lt;xref:System.Progress%601&gt;</ph> object synchronously, which enables the asynchronous method to quickly provide progress, and allow the consumer of the progress to determine how and where best to handle the information.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example, the progress instance could choose to marshal callbacks and raise events on a captured synchronization context.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>IProgress<ph id="ph1">\&lt;</ph>T&gt; Implementations</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> provides a single <ph id="ph2">&lt;xref:System.IProgress%601&gt;</ph> implementation: <ph id="ph3">&lt;xref:System.Progress%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Progress%601&gt;</ph> class is declared as follows:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An instance of <ph id="ph1">&lt;xref:System.Progress%601&gt;</ph> exposes a <ph id="ph2">&lt;xref:System.Progress%601.ProgressChanged&gt;</ph> event, which is raised every time the asynchronous operation reports a progress update.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Progress%601.ProgressChanged&gt;</ph> event is raised on the <ph id="ph2">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> object that was captured when the <ph id="ph3">&lt;xref:System.Progress%601&gt;</ph> instance was instantiated.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If no synchronization context was available, a default context that targets the thread pool is used.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Handlers may be registered with this event.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A single handler may also be provided to the <ph id="ph1">&lt;xref:System.Progress%601&gt;</ph> constructor for convenience, and behaves just like an event handler for the <ph id="ph2">&lt;xref:System.Progress%601.ProgressChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Progress updates are raised asynchronously to avoid delaying the asynchronous operation while event handlers are executing.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Another <ph id="ph1">&lt;xref:System.IProgress%601&gt;</ph> implementation could choose to apply different semantics.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Choosing the Overloads to Provide</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If a TAP implementation uses both the optional <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> and optional <ph id="ph2">&lt;xref:System.IProgress%601&gt;</ph> parameters, it could potentially require up to four overloads:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>However, many TAP implementations provide neither cancellation or progress capabilities, so they require a single method:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If a TAP implementation supports either cancellation or progress but not both, it may provide two overloads:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If a TAP implementation supports both cancellation and progress, it may expose all four overloads.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>However, it may provide only the following two:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To compensate for the two missing intermediate combinations, developers may pass <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None%2A&gt;</ph> or a default <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> for the <ph id="ph3">`cancellationToken`</ph> parameter and <ph id="ph4">`null`</ph> for the <ph id="ph5">`progress`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If you expect every usage of the TAP method to support cancellation or progress, you may omit the overloads that don’t accept the relevant parameter.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If you decide to expose multiple overloads to make cancellation or progress optional, the overloads that don’t support cancellation or progress should behave as if they passed <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None%2A&gt;</ph> for cancellation or <ph id="ph2">`null`</ph> for progress to the overload that does support these.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming Patterns<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Introduces the three patterns for performing asynchronous operations: the Task-based Asynchronous Pattern (TAP), the Asynchronous Programming Model (APM), and the Event-based Asynchronous Pattern (EAP).</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing the Task-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/implementing-the-task-based-asynchronous-pattern.md)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Describes how to implement the Task-based Asynchronous Pattern (TAP) in three ways: by using the C# and Visual Basic compilers in Visual Studio, manually, or through a combination of the compiler and manual methods.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Consuming the Task-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/consuming-the-task-based-asynchronous-pattern.md)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Describes how you can use tasks and callbacks to achieve waiting without blocking.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interop with Other Asynchronous Patterns and Types<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/interop-with-other-asynchronous-patterns-and-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Describes how to use the Task-based Asynchronous Pattern (TAP) to implement the Asynchronous Programming Model (APM) and Event-based Asynchronous Pattern (EAP).</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>