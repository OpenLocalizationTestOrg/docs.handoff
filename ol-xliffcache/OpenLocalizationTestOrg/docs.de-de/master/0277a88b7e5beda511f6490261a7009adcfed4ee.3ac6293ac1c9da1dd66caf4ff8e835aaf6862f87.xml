{"content":"---\ntitle: \"Creating Custom Attributes (C#)\"\nms.date: 07/20/2015\nms.assetid: 500e1977-c6de-462d-abce-78a0eb1eda22\n---\n# Creating Custom Attributes (C#)\nYou can create your own custom attributes by defining an attribute class, a class that derives directly or indirectly from <xref:System.Attribute>, which makes identifying attribute definitions in metadata fast and easy. Suppose you want to tag types with the name of the programmer who wrote the type. You might define a custom `Author` attribute class:  \n  \n```csharp  \n[System.AttributeUsage(System.AttributeTargets.Class |  \n                       System.AttributeTargets.Struct)  \n]  \npublic class Author : System.Attribute  \n{  \n    private string name;  \n    public double version;  \n  \n    public Author(string name)  \n    {  \n        this.name = name;  \n        version = 1.0;  \n    }  \n}  \n```  \n  \n The class name is the attribute's name, `Author`. It is derived from `System.Attribute`, so it is a custom attribute class. The constructor's parameters are the custom attribute's positional parameters. In this example, `name` is a positional parameter. Any public read-write fields or properties are named parameters. In this case, `version` is the only named parameter. Note the use of the `AttributeUsage` attribute to make the `Author` attribute valid only on class and `struct` declarations.  \n  \n You could use this new attribute as follows:  \n  \n```csharp  \n[Author(\"P. Ackerman\", version = 1.1)]  \nclass SampleClass  \n{  \n    // P. Ackerman's code goes here...  \n}  \n```  \n  \n `AttributeUsage` has a named parameter, `AllowMultiple`, with which you can make a custom attribute single-use or multiuse. In the following code example, a multiuse attribute is created.  \n  \n```csharp  \n[System.AttributeUsage(System.AttributeTargets.Class |  \n                       System.AttributeTargets.Struct,  \n                       AllowMultiple = true)  // multiuse attribute  \n]  \npublic class Author : System.Attribute  \n```  \n  \n In the following code example, multiple attributes of the same type are applied to a class.  \n  \n```csharp  \n[Author(\"P. Ackerman\", version = 1.1)]  \n[Author(\"R. Koch\", version = 1.2)]  \nclass SampleClass  \n{  \n    // P. Ackerman's code goes here...  \n    // R. Koch's code goes here...  \n}  \n```  \n  \n## See also\n\n- <xref:System.Reflection>\n- [C# Programming Guide](../../../../csharp/programming-guide/index.md)\n- [Writing Custom Attributes](../../../../standard/attributes/writing-custom-attributes.md)\n- [Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md)\n- [Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/index.md)\n- [Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)\n- [AttributeUsage (C#)](../../../../csharp/programming-guide/concepts/attributes/attributeusage.md)\n","nodes":[{"pos":[4,113],"embed":true,"restype":"x-metadata","content":"title: \"Creating Custom Attributes (C#)\"\nms.date: 07/20/2015\nms.assetid: 500e1977-c6de-462d-abce-78a0eb1eda22","nodes":[{"content":"Creating Custom Attributes (C#)","nodes":[{"pos":[0,31],"content":"Creating Custom Attributes (C#)","nodes":[{"content":"Creating Custom Attributes (C#)","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[120,151],"content":"Creating Custom Attributes (C#)","linkify":"Creating Custom Attributes (C#)","nodes":[{"content":"Creating Custom Attributes (C#)","pos":[0,31]}]},{"content":"You can create your own custom attributes by defining an attribute class, a class that derives directly or indirectly from <ph id=\"ph1\">&lt;xref:System.Attribute&gt;</ph>, which makes identifying attribute definitions in metadata fast and easy.","pos":[152,372],"source":"You can create your own custom attributes by defining an attribute class, a class that derives directly or indirectly from <xref:System.Attribute>, which makes identifying attribute definitions in metadata fast and easy."},{"content":"Suppose you want to tag types with the name of the programmer who wrote the type.","pos":[373,454]},{"content":"You might define a custom <ph id=\"ph1\">`Author`</ph> attribute class:","pos":[455,506],"source":" You might define a custom `Author` attribute class:"},{"content":"The class name is the attribute's name, <ph id=\"ph1\">`Author`</ph>.","pos":[862,911],"source":"The class name is the attribute's name, `Author`."},{"content":"It is derived from <ph id=\"ph1\">`System.Attribute`</ph>, so it is a custom attribute class.","pos":[912,985],"source":" It is derived from `System.Attribute`, so it is a custom attribute class."},{"content":"The constructor's parameters are the custom attribute's positional parameters.","pos":[986,1064]},{"content":"In this example, <ph id=\"ph1\">`name`</ph> is a positional parameter.","pos":[1065,1115],"source":" In this example, `name` is a positional parameter."},{"content":"Any public read-write fields or properties are named parameters.","pos":[1116,1180]},{"content":"In this case, <ph id=\"ph1\">`version`</ph> is the only named parameter.","pos":[1181,1233],"source":" In this case, `version` is the only named parameter."},{"content":"Note the use of the <ph id=\"ph1\">`AttributeUsage`</ph> attribute to make the <ph id=\"ph2\">`Author`</ph> attribute valid only on class and <ph id=\"ph3\">`struct`</ph> declarations.","pos":[1234,1358],"source":" Note the use of the `AttributeUsage` attribute to make the `Author` attribute valid only on class and `struct` declarations."},{"content":"You could use this new attribute as follows:","pos":[1365,1409]},{"content":"<ph id=\"ph1\">`AttributeUsage`</ph> has a named parameter, <ph id=\"ph2\">`AllowMultiple`</ph>, with which you can make a custom attribute single-use or multiuse.","pos":[1547,1670],"source":"`AttributeUsage` has a named parameter, `AllowMultiple`, with which you can make a custom attribute single-use or multiuse."},{"content":"In the following code example, a multiuse attribute is created.","pos":[1671,1734]},{"content":"In the following code example, multiple attributes of the same type are applied to a class.","pos":[1991,2082]},{"pos":[2296,2304],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2335,2404],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../../csharp/programming-guide/index.md)"},{"pos":[2407,2496],"content":"<bpt id=\"p1\">[</bpt>Writing Custom Attributes<ept id=\"p1\">](../../../../standard/attributes/writing-custom-attributes.md)</ept>","source":"[Writing Custom Attributes](../../../../standard/attributes/writing-custom-attributes.md)"},{"pos":[2499,2577],"content":"<bpt id=\"p1\">[</bpt>Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/reflection.md)</ept>","source":"[Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md)"},{"pos":[2580,2664],"content":"<bpt id=\"p1\">[</bpt>Attributes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/index.md)</ept>","source":"[Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/index.md)"},{"pos":[2667,2816],"content":"<bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>","source":"[Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)"},{"pos":[2819,2916],"content":"<bpt id=\"p1\">[</bpt>AttributeUsage (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/attributeusage.md)</ept>","source":"[AttributeUsage (C#)](../../../../csharp/programming-guide/concepts/attributes/attributeusage.md)"}]}