<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37fdd96c0666bc6ecda0f46daa5ca6271a8666ab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ca5564f93e48392321245d42231150fd1233feb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">666d70f566d8b539c6dc9521dabb3dbe41e11758</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>XAML Services</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAML Services</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes the capabilities of a technology set known as .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The majority of the services and APIs described are located in the assembly System.Xaml, which is an assembly introduced with the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph> set of .NET core assemblies.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Services include readers and writers, schema classes and schema support, factories, attributing of classes, XAML language intrinsic support, and other XAML language features.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>About This Documentation</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Conceptual documentation for .NET Framework XAML Services assumes that you have previous experience with the XAML language and how it might apply to a specific framework, for example <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../includes/tlasharptla-winclient-md.md)]</ph> or Windows Workflow Foundation, or a specific technology feature area, for example the build customization features in <ph id="ph2">&lt;xref:Microsoft.Build.Framework.XamlTypes&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This documentation does not attempt to explain the basics of XAML as a markup language, XAML syntax terminology, or other introductory material.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Instead, this documentation focuses on specifically using the .NET Framework XAML Services that are enabled in the System.Xaml assembly library.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Most of these APIs are for scenarios of XAML language integration and extensibility.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This might include any of the following:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Extending the capabilities of the base XAML readers or XAML writers (processing the XAML node stream directly; deriving your own XAML reader or XAML writer).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Defining XAML-usable custom types that do not have specific framework dependencies, and attributing the types to convey their XAML type system characteristics to .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Hosting XAML readers or XAML writers as a component of an application, such as a visual designer or interactive editor for XAML markup sources.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Writing XAML value converters (markup extensions; type converters for custom types).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Defining a custom XAML schema context (using alternate assembly-loading techniques for backing type sources; using known-types lookup techniques instead of always reflecting assemblies; using loaded assembly concepts that do not use the CLR <ph id="ph1">`AppDomain`</ph> and its associated security model).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Extending the base XAML type system.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`Lookup`</ph> or <ph id="ph2">`Invoker`</ph> techniques to influence the XAML type system and how type backings are evaluated.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you are looking for introductory material on XAML as a language, you might try <bpt id="p1">[</bpt>XAML Overview (WPF)<ept id="p1">](../wpf/advanced/xaml-overview-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>That topic discusses XAML for an audience that is new both to <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../includes/tlasharptla-winclient-md.md)]</ph> and also to using XAML markup and XAML language features.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Another useful document is the introductory material in the <bpt id="p1">[</bpt>XAML language specification<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>.NET Framework XAML Services and System.Xaml in the .NET Architecture</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In previous versions of Microsoft .NET Framework, support for XAML language features was implemented by frameworks that built on Microsoft .NET Framework (<ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../includes/tlasharptla-winclient-md.md)]</ph>, Windows Workflow Foundation and Windows Communication Foundation (WCF)), and therefore varied in its behavior and the API used depending on which specific framework you were using.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This included the XAML parser and its object graph creation mechanism, XAML language intrinsics, serialization support, and so on.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, .NET Framework XAML Services and the System.Xaml assembly define much of what is needed for supporting XAML language features.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This includes base classes for XAML readers and XAML writers.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The most important feature added to .NET Framework XAML Services that was not present in any of the framework-specific XAML implementations is a type system representation for XAML.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The type system representation presents XAML in an object-oriented way that centers on XAML capabilities without taking dependencies on specific capabilities of frameworks.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The XAML type system is not limited by the markup form or run-time specifics of the XAML origin; nor is it limited by any specific backing type system.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The XAML type system includes object representations for types, members, XAML schema contexts, XML-level concepts, and other XAML language concepts or XAML intrinsics.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Using or extending the XAML type system makes it possible to derive from classes like XAML readers and XAML writers, and extend the functionality of XAML representations into specific features enabled by a framework, a technology, or an application that consumes or emits XAML.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The concept of a XAML schema context enables practical object graph write operations from the combination of a XAML object writer implementation, a technology's backing type system as communicated through assembly information in the context, and the XAML node source.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information on the XAML schema concept.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>see <bpt id="p1">[</bpt>Default XAML Schema Context and WPF XAML Schema Context<ept id="p1">](default-xaml-schema-context-and-wpf-xaml-schema-context.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>XAML Node Streams, XAML Readers, and XAML Writers</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To understand the role that .NET Framework XAML Services plays in the relationship between the XAML language and specific technologies that use XAML as a language, it is helpful to understand the concept of a XAML node stream and how that concept shapes the API and terminology.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The XAML node stream is a conceptual intermediate between a XAML language representation and the object graph that the XAML represents or defines.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A XAML reader is an entity that processes XAML in some form, and produces a XAML node stream.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the API, a XAML reader is represented by the base class <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A XAML writer is an entity that processes a XAML node stream and produces something else.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the API, a XAML writer is represented by the base class <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The two most common scenarios involving XAML are loading XAML to instantiate an object graph, and saving an object graph from an application or tool and producing a XAML representation (typically in markup form saved as text file).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Loading XAML and creating an object graph is often referred to in this documentation as the load path.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Saving or serializing an existing object graph to XAML is often referred to in this documentation as the save path.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The most common type of load path can be described as follows:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Start with a XAML representation, in UTF-encoded XML format and saved as a text file.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Load that XAML into <ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph> is a <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> subclass.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The result is a XAML node stream.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can access individual nodes of the XAML node stream using <ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">&lt;xref:System.Xaml.XamlReader&gt;</ph> API.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The most typical operation here is to advance through the XAML node stream, processing each node using a "current record" metaphor.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Pass the resulting nodes from the XAML node stream to a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> API.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> is a <ph id="ph2">&lt;xref:System.Xaml.XamlWriter&gt;</ph> subclass.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> writes an object graph, one object at a time, in accordance to progress through the source XAML node stream.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This is done with the assistance of a XAML schema context and an implementation that can access the assemblies and types of a backing type system and framework.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> at the end of the XAML node stream to obtain the root object of the object graph.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The most common type of save path can be described as follows:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Start with the object graph of an entire application run time, the UI content and state of a run time, or a smaller segment of an overall application's object representation at run time.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>From a logical start object, such as an application root or document root, load the objects into <ph id="ph1">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph> is a <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> subclass.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The result is a XAML node stream.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can access individual nodes of the XAML node stream using <ph id="ph1">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> API.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The most typical operation here is to advance through the XAML node stream, processing each node using a "current record" metaphor.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Pass the resulting nodes from the XAML node stream to a <ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph> API.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph> is a <ph id="ph2">&lt;xref:System.Xaml.XamlWriter&gt;</ph> subclass.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph> writes XAML in an XML UTF encoding.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can save this as a text file, as a stream, or in other forms.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriter.Flush%2A&gt;</ph> to obtain the final output.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information about XAML node stream concepts, see <bpt id="p1">[</bpt>Understanding XAML Node Stream Structures and Concepts<ept id="p1">](understanding-xaml-node-stream-structures-and-concepts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The XamlServices Class</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It is not always necessary to deal with a XAML node stream.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you want a basic load path or a basic save path, you can use APIs in the <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Various signatures of <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%2A&gt;</ph> implement a load path.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can either load a file or stream, or can load an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> or <ph id="ph3">&lt;xref:System.Xaml.XamlReader&gt;</ph> that wrap your XAML input by loading with that reader's APIs.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Various signatures of <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Save%2A&gt;</ph> save an object graph and produce output as a stream, file, or <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph><ph id="ph3">/</ph><ph id="ph4">&lt;xref:System.IO.TextWriter&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices.Transform%2A&gt;</ph> converts XAML by linking a load path and a save path as a single operation.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A different schema context or different backing type system could be used for <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlWriter&gt;</ph>, which is what influences how the resulting XAML is transformed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information about how to use <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph>, see <bpt id="p1">[</bpt>XAMLServices Class and Basic XAML Reading or Writing<ept id="p1">](xamlservices-class-and-basic-xaml-reading-or-writing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>XAML Type System</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The XAML type system provides the APIs that are required to work with a given individual node of a XAML node stream.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the representation for an object - what you are processing between a start object node and end object node.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> is the representation for a member of an object - what you are processing between a start member node and end member node.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>APIs such as <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> report the relationships between a <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph> and <ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The default behavior of the XAML type system as implemented by .NET Framework XAML Services is based on the common language runtime (CLR), and static analysis of CLR types in assemblies by using reflection.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Therefore, for a specific CLR type, the default implementation of the XAML type system can expose the XAML schema of that type and its members and report it in terms of the XAML type system.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In the default XAML type system, the concept of assignability of types is mapped onto CLR inheritance, and the concepts of instances, value types and so on are also mapped to the supporting behaviors and features of the CLR.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Reference for XAML Language Features</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To support XAML, .NET Framework XAML Services provides specific implementation of XAML language concepts as defined for the XAML language XAML namespace.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>These are documented as specific reference pages.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The language features are documented from the perspective of how these language features behave when they are processed by a XAML reader or XAML writer that is defined by .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Namespace (x:) Language Features<ept id="p1">](xaml-namespace-x-language-features.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>