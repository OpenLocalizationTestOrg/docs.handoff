{"content":"---\ntitle: .NET Core Runtime IDentifier (RID) catalog\ndescription: .NET Core Runtime IDentifier (RID) catalog\nkeywords: .NET, .NET Core\nauthor: blackdwarf\nms.author: mairaw\nms.date: 08/22/2016\nms.topic: article\nms.prod: .net-core\nms.devlang: dotnet\nms.assetid: b2032f5d-771f-48d9-917c-587d9509035c\n---\n\n# .NET Core Runtime IDentifier (RID) catalog\n\n## What are RIDs?\nRID is short for *Runtime IDentifier*. RIDs are used to identify target operating systems where an application or asset \n(that is, assembly) will run. They look like this: \"ubuntu.14.04-x64\", \"win7-x64\", \"osx.10.11-x64\". \nFor the packages with native dependencies, it will designate on which platforms the package can be restored. \n\nIt is important to note that RIDs are really opaque strings. This means that they have to match exactly for operations \nusing them to work. As an example, let us consider the case of [Elementary OS](https://elementary.io/), which is a straightforward clone of \nUbuntu 14.04. Although .NET Core and CLI work on top of that version of Ubuntu, if you try to use them on Elementary OS \nwithout any modifications, the restore operation for any package will fail. This is because we currently don't \nhave a RID that designates Elementary OS as a platform. \n\nRIDs that represent concrete operating systems usually follow this pattern: `[os].[version]-[arch]` where:\n- `[os]` is the operating system moniker, for example, `ubuntu`.\n- `[version]` is the operating system version in the form of a dot (`.`) separated version number, for example, `15.10`, \naccurate enough to reasonably enable assets to target operating system platform APIs represented by that version.\n  - This **shouldn't** be marketing versions, as they often represent multiple discrete versions of the operating \nsystem with varying platform API surface area.\n- `[arch]` is the processor architecture, for example, `x86`, `x64`, `arm`, `arm64`, etc.\n\nThe RID graph is defined in a package called `Microsoft.NETCore.Platforms` in a file called `runtime.json`, which you can \nsee on the [CoreFX repo](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json). If \nyou use this file, you will notice that some of the RIDs have an `\"#import\"` statement in them. These statements are \ncompatibility statements. That means that a RID that has an imported RID in it can be a target for restoring packages \nfor that RID. Slightly confusing, but let's look at an example. Let's take a look at macOS:\n\n```json\n\"osx.10.11-x64\": {\n    \"#import\": [ \"osx.10.11\", \"osx.10.10-x64\" ]\n}\n```\nThe above RID specifies that `osx.10.11-x64` imports `osx.10.10-x64`. This means that when restoring packages, NuGet will\nbe able to restore packages that specify that they need `osx.10.10-x64` on `osx.10.11-x64`.\n\nA slightly bigger example RID graph:  \n\n- `win10-arm`\n  - `win10`\n  - `win81-arm`\n    - `win81`\n    - `win8-arm`\n      - `win8`\n        - `win7`\n          - `win`\n            - `any`\n\nAll RIDs eventually map back to the root `any` RID.\n\nAlthough they look easy enough to use, there are some special things about RIDs that you have to keep in mind when \nworking with them:\n\n* They are **opaque strings** and should be treated as black boxes\n    * You should not construct RIDs programmatically\n* You need to use the RIDs that are already defined for the platform and this document shows that\n* The RIDs do need to be specific so don't assume anything from the actual RID value; please consult this document \nto determine which RID(s) you need for a given platform\n\n## Using RIDs\nIn order to use RIDs, you have to know which RIDs there are. New RIDs are added regularly to the platform. \nFor the latest version, please check the [runtime.json](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json) file on CoreFX repo.\n\n> [!NOTE]\n> We are working towards getting this information into a more interactive form. \n> When that happens, this page will be updated to point to that tool and/or its usage documentation. \n\n## Windows RIDs\n\n* Windows 7 / Windows Server 2008 R2\n    * `win7-x64`\n    * `win7-x86`\n* Windows 8 / Windows Server 2012\n    * `win8-x64`\n    * `win8-x86`\n    * `win8-arm`\n* Windows 8.1 / Windows Server 2012 R2\n    * `win81-x64`\n    * `win81-x86`\n    * `win81-arm`\n* Windows 10 / Windows Server 2016\n    * `win10-x64`\n    * `win10-x86`\n    * `win10-arm`\n    * `win10-arm64`\n\n## Linux RIDs\n\n* Red Hat Enterprise Linux\n    * `rhel.7-x64`\n* Ubuntu\n    * `ubuntu.14.04-x64`\n    * `ubuntu.14.10-x64`\n    * `ubuntu.15.04-x64`\n    * `ubuntu.15.10-x64`\n    * `ubuntu.16.04-x64`\n    * `ubuntu.16.10-x64`\n* CentOS\n    * `centos.7-x64`\n* Debian\n    * `debian.8-x64`\n* Fedora\n    * `fedora.23-x64`\n    * `fedora.24-x64`\n* OpenSUSE\n    * `opensuse.13.2-x64`\n    * `opensuse.42.1-x64`\n* Oracle Linux\n    * `ol.7-x64`\n    * `ol.7.0-x64`\n    * `ol.7.1-x64`\n    * `ol.7.2-x64`\n* Currently supported Ubuntu derivatives \n    * `linuxmint.17-x64`\n    * `linuxmint.17.1-x64`\n    * `linuxmint.17.2-x64`\n    * `linuxmint.17.3-x64`\n    * `linuxmint.18-x64`\n\n## OS X RIDs\n\n* `osx.10.10-x64`\n* `osx.10.11-x64`\n* `osx.10.12-x64`\n","nodes":[{"pos":[11,53],"content":".NET Core Runtime IDentifier (RID) catalog","needQuote":true,"needEscape":true,"nodes":[{"content":".NET Core Runtime IDentifier (RID) catalog","pos":[0,42]}]},{"pos":[67,109],"content":".NET Core Runtime IDentifier (RID) catalog","needQuote":true,"needEscape":true,"nodes":[{"content":".NET Core Runtime IDentifier (RID) catalog","pos":[0,42]}]},{"pos":[120,135],"content":".NET, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"pos":[305,347],"content":".NET Core Runtime IDentifier (RID) catalog","linkify":".NET Core Runtime IDentifier (RID) catalog","nodes":[{"content":".NET Core Runtime IDentifier (RID) catalog","pos":[0,42]}]},{"pos":[352,366],"content":"What are RIDs?","linkify":"What are RIDs?","nodes":[{"content":"What are RIDs?","pos":[0,14]}]},{"content":"RID is short for <bpt id=\"p1\">*</bpt>Runtime IDentifier<ept id=\"p1\">*</ept>.","pos":[367,405],"source":"RID is short for *Runtime IDentifier*."},{"content":"RIDs are used to identify target operating systems where an application or asset (that is, assembly) will run.","pos":[406,517],"source":" RIDs are used to identify target operating systems where an application or asset \n(that is, assembly) will run."},{"content":"They look like this: \"ubuntu.14.04-x64\", \"win7-x64\", \"osx.10.11-x64\".","pos":[518,587]},{"content":"For the packages with native dependencies, it will designate on which platforms the package can be restored.","pos":[588,697],"source":" \nFor the packages with native dependencies, it will designate on which platforms the package can be restored."},{"content":"It is important to note that RIDs are really opaque strings.","pos":[700,760]},{"content":"This means that they have to match exactly for operations using them to work.","pos":[761,839],"source":" This means that they have to match exactly for operations \nusing them to work."},{"content":"As an example, let us consider the case of <bpt id=\"p1\">[</bpt>Elementary OS<ept id=\"p1\">](https://elementary.io/)</ept>, which is a straightforward clone of Ubuntu 14.04.","pos":[840,974],"source":" As an example, let us consider the case of [Elementary OS](https://elementary.io/), which is a straightforward clone of \nUbuntu 14.04."},{"content":"Although .NET Core and CLI work on top of that version of Ubuntu, if you try to use them on Elementary OS without any modifications, the restore operation for any package will fail.","pos":[975,1157],"source":" Although .NET Core and CLI work on top of that version of Ubuntu, if you try to use them on Elementary OS \nwithout any modifications, the restore operation for any package will fail."},{"content":"This is because we currently don't have a RID that designates Elementary OS as a platform.","pos":[1158,1249],"source":" This is because we currently don't \nhave a RID that designates Elementary OS as a platform."},{"pos":[1252,1358],"content":"RIDs that represent concrete operating systems usually follow this pattern: <ph id=\"ph1\">`[os].[version]-[arch]`</ph> where:","source":"RIDs that represent concrete operating systems usually follow this pattern: `[os].[version]-[arch]` where:"},{"pos":[1361,1423],"content":"<ph id=\"ph1\">`[os]`</ph> is the operating system moniker, for example, <ph id=\"ph2\">`ubuntu`</ph>.","source":"`[os]` is the operating system moniker, for example, `ubuntu`."},{"pos":[1426,1659],"content":"<ph id=\"ph1\">`[version]`</ph> is the operating system version in the form of a dot (<ph id=\"ph2\">`.`</ph>) separated version number, for example, <ph id=\"ph3\">`15.10`</ph>, accurate enough to reasonably enable assets to target operating system platform APIs represented by that version.","source":"`[version]` is the operating system version in the form of a dot (`.`) separated version number, for example, `15.10`, \naccurate enough to reasonably enable assets to target operating system platform APIs represented by that version."},{"pos":[1664,1821],"content":"This <bpt id=\"p1\">**</bpt>shouldn't<ept id=\"p1\">**</ept> be marketing versions, as they often represent multiple discrete versions of the operating system with varying platform API surface area.","source":"This **shouldn't** be marketing versions, as they often represent multiple discrete versions of the operating \nsystem with varying platform API surface area."},{"pos":[1824,1911],"content":"<ph id=\"ph1\">`[arch]`</ph> is the processor architecture, for example, <ph id=\"ph2\">`x86`</ph>, <ph id=\"ph3\">`x64`</ph>, <ph id=\"ph4\">`arm`</ph>, <ph id=\"ph5\">`arm64`</ph>, etc.","source":"`[arch]` is the processor architecture, for example, `x86`, `x64`, `arm`, `arm64`, etc."},{"content":"The RID graph is defined in a package called <ph id=\"ph1\">`Microsoft.NETCore.Platforms`</ph> in a file called <ph id=\"ph2\">`runtime.json`</ph>, which you can see on the <bpt id=\"p1\">[</bpt>CoreFX repo<ept id=\"p1\">](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json)</ept>.","pos":[1913,2152],"source":"The RID graph is defined in a package called `Microsoft.NETCore.Platforms` in a file called `runtime.json`, which you can \nsee on the [CoreFX repo](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json)."},{"content":"If you use this file, you will notice that some of the RIDs have an <ph id=\"ph1\">`\"#import\"`</ph> statement in them.","pos":[2153,2252],"source":" If \nyou use this file, you will notice that some of the RIDs have an `\"#import\"` statement in them."},{"content":"These statements are compatibility statements.","pos":[2253,2300],"source":" These statements are \ncompatibility statements."},{"content":"That means that a RID that has an imported RID in it can be a target for restoring packages for that RID.","pos":[2301,2407],"source":" That means that a RID that has an imported RID in it can be a target for restoring packages \nfor that RID."},{"content":"Slightly confusing, but let's look at an example.","pos":[2408,2457]},{"content":"Let's take a look at macOS:","pos":[2458,2485]},{"content":"The above RID specifies that <ph id=\"ph1\">`osx.10.11-x64`</ph> imports <ph id=\"ph2\">`osx.10.10-x64`</ph>.","pos":[2568,2637],"source":"The above RID specifies that `osx.10.11-x64` imports `osx.10.10-x64`."},{"content":"This means that when restoring packages, NuGet will be able to restore packages that specify that they need <ph id=\"ph1\">`osx.10.10-x64`</ph> on <ph id=\"ph2\">`osx.10.11-x64`</ph>.","pos":[2638,2781],"source":" This means that when restoring packages, NuGet will\nbe able to restore packages that specify that they need `osx.10.10-x64` on `osx.10.11-x64`."},{"content":"A slightly bigger example RID graph:","pos":[2783,2819]},{"pos":[2967,3018],"content":"All RIDs eventually map back to the root <ph id=\"ph1\">`any`</ph> RID.","source":"All RIDs eventually map back to the root `any` RID."},{"pos":[3020,3154],"content":"Although they look easy enough to use, there are some special things about RIDs that you have to keep in mind when working with them:","source":"Although they look easy enough to use, there are some special things about RIDs that you have to keep in mind when \nworking with them:"},{"pos":[3158,3222],"content":"They are <bpt id=\"p1\">**</bpt>opaque strings<ept id=\"p1\">**</ept> and should be treated as black boxes","source":"They are **opaque strings** and should be treated as black boxes"},{"content":"You should not construct RIDs programmatically","pos":[3229,3275]},{"content":"You need to use the RIDs that are already defined for the platform and this document shows that","pos":[3278,3373]},{"pos":[3376,3545],"content":"The RIDs do need to be specific so don't assume anything from the actual RID value; please consult this document to determine which RID(s) you need for a given platform","source":"The RIDs do need to be specific so don't assume anything from the actual RID value; please consult this document \nto determine which RID(s) you need for a given platform"},{"pos":[3550,3560],"content":"Using RIDs","linkify":"Using RIDs","nodes":[{"content":"Using RIDs","pos":[0,10]}]},{"content":"In order to use RIDs, you have to know which RIDs there are.","pos":[3561,3621]},{"content":"New RIDs are added regularly to the platform.","pos":[3622,3667]},{"content":"For the latest version, please check the <bpt id=\"p1\">[</bpt>runtime.json<ept id=\"p1\">](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json)</ept> file on CoreFX repo.","pos":[3668,3836],"source":" \nFor the latest version, please check the [runtime.json](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json) file on CoreFX repo."},{"pos":[3840,4029],"content":"[!NOTE]\nWe are working towards getting this information into a more interactive form. \nWhen that happens, this page will be updated to point to that tool and/or its usage documentation.","leadings":["","> ","> "],"nodes":[{"content":"We are working towards getting this information into a more interactive form. \nWhen that happens, this page will be updated to point to that tool and/or its usage documentation.","pos":[8,185],"nodes":[{"content":"We are working towards getting this information into a more interactive form.","pos":[0,77]},{"content":"When that happens, this page will be updated to point to that tool and/or its usage documentation.","pos":[78,177],"source":" \nWhen that happens, this page will be updated to point to that tool and/or its usage documentation."}]}]},{"pos":[4035,4047],"content":"Windows RIDs","linkify":"Windows RIDs","nodes":[{"content":"Windows RIDs","pos":[0,12]}]},{"content":"Windows 7 / Windows Server 2008 R2","pos":[4051,4085]},{"content":"Windows 8 / Windows Server 2012","pos":[4122,4153]},{"content":"Windows 8.1 / Windows Server 2012 R2","pos":[4207,4243]},{"content":"Windows 10 / Windows Server 2016","pos":[4300,4332]},{"pos":[4411,4421],"content":"Linux RIDs","linkify":"Linux RIDs","nodes":[{"content":"Linux RIDs","pos":[0,10]}]},{"content":"Red Hat Enterprise Linux","pos":[4425,4449]},{"content":"Ubuntu","pos":[4471,4477]},{"content":"CentOS","pos":[4630,4636]},{"content":"Debian","pos":[4660,4666]},{"content":"Fedora","pos":[4690,4696]},{"content":"OpenSUSE","pos":[4743,4751]},{"content":"Oracle Linux","pos":[4806,4818]},{"content":"Currently supported Ubuntu derivatives","pos":[4895,4933]},{"pos":[5070,5079],"content":"OS X RIDs","linkify":"OS X RIDs","nodes":[{"content":"OS X RIDs","pos":[0,9]}]}]}