{"content":"---\ntitle: \"Variable '<variablename>' is passed by reference before it has been assigned a value\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc42030\"\n  - \"BC42030\"\nhelpviewer_keywords: \n  - \"BC42030\"\nms.assetid: 8f1aae99-f032-4fdf-b6dc-3360cc5b94de\n---\n# Variable '\\<variablename>' is passed by reference before it has been assigned a value\nVariable '\\<variablename>' is passed by reference before it has been assigned a value. A null reference exception could result at run time.  \n  \n A procedure call passes a variable as an argument to a `ByRef` parameter before any value is assigned to the variable.  \n  \n If a variable has never been assigned a value, it holds the default value for its data type. For a reference data type, that default value is [Nothing](../../visual-basic/language-reference/nothing.md). Reading a reference variable that has a value of `Nothing` can cause a <xref:System.NullReferenceException> in some circumstances.  \n  \n Passing an argument to a procedure `ByRef` exposes the variable underlying the argument to possible modification by the procedure.  \n  \n By default, this message is a warning. For more information about hiding warnings or treating warnings as errors, see [Configuring Warnings in Visual Basic](/visualstudio/ide/configuring-warnings-in-visual-basic).  \n  \n **Error ID:** BC42030  \n  \n## To correct this error  \n  \n-   If you intend the procedure to assign a value to the variable through the `ByRef` argument, and if it does not matter whether the variable already holds a value, then no action is necessary.  \n  \n-   If the logic in the procedure reads the argument before assigning any value to it, and if the variable is of a value type, then make sure that the procedure logic does not depend on whether the variable holds its default value or not.  \n  \n-   If the logic in the procedure reads the argument before assigning any value to it, and if the variable is of a reference type, then make sure that the procedure logic can handle a value of `Nothing`. For example, it could use a [Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md) to catch a <xref:System.NullReferenceException>.  \n  \n## See also\n\n- [Dim Statement](../../visual-basic/language-reference/statements/dim-statement.md)\n- [Value Types and Reference Types](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)\n- [Passing Arguments by Value and by Reference](../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)\n- [ByRef](../../visual-basic/language-reference/modifiers/byref.md)\n- [Variable Declaration](../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)\n- [Troubleshooting Variables](../../visual-basic/programming-guide/language-features/variables/troubleshooting-variables.md)\n","nodes":[{"pos":[4,245],"embed":true,"restype":"x-metadata","content":"title: \"Variable '<variablename>' is passed by reference before it has been assigned a value\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc42030\"\n  - \"BC42030\"\nhelpviewer_keywords: \n  - \"BC42030\"\nms.assetid: 8f1aae99-f032-4fdf-b6dc-3360cc5b94de","nodes":[{"content":"Variable '<variablename>' is passed by reference before it has been assigned a value","nodes":[{"pos":[0,84],"content":"Variable '<ph id=\"ph1\">&lt;variablename&gt;</ph>' is passed by reference before it has been assigned a value","source":"Variable '<variablename>' is passed by reference before it has been assigned a value"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[252,337],"content":"Variable '\\<variablename>' is passed by reference before it has been assigned a value","linkify":"Variable '\\<variablename>' is passed by reference before it has been assigned a value","nodes":[{"content":"Variable '<ph id=\"ph1\">\\&lt;</ph>variablename&gt;' is passed by reference before it has been assigned a value","pos":[0,85],"source":"Variable '\\<variablename>' is passed by reference before it has been assigned a value"}]},{"content":"Variable '<ph id=\"ph1\">\\&lt;</ph>variablename&gt;' is passed by reference before it has been assigned a value.","pos":[338,424],"source":"Variable '\\<variablename>' is passed by reference before it has been assigned a value."},{"content":"A null reference exception could result at run time.","pos":[425,477]},{"pos":[484,602],"content":"A procedure call passes a variable as an argument to a <ph id=\"ph1\">`ByRef`</ph> parameter before any value is assigned to the variable.","source":"A procedure call passes a variable as an argument to a `ByRef` parameter before any value is assigned to the variable."},{"content":"If a variable has never been assigned a value, it holds the default value for its data type.","pos":[609,701]},{"content":"For a reference data type, that default value is <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../visual-basic/language-reference/nothing.md)</ept>.","pos":[702,811],"source":" For a reference data type, that default value is [Nothing](../../visual-basic/language-reference/nothing.md)."},{"content":"Reading a reference variable that has a value of <ph id=\"ph1\">`Nothing`</ph> can cause a <ph id=\"ph2\">&lt;xref:System.NullReferenceException&gt;</ph> in some circumstances.","pos":[812,942],"source":" Reading a reference variable that has a value of `Nothing` can cause a <xref:System.NullReferenceException> in some circumstances."},{"pos":[949,1079],"content":"Passing an argument to a procedure <ph id=\"ph1\">`ByRef`</ph> exposes the variable underlying the argument to possible modification by the procedure.","source":"Passing an argument to a procedure `ByRef` exposes the variable underlying the argument to possible modification by the procedure."},{"content":"By default, this message is a warning.","pos":[1086,1124]},{"content":"For more information about hiding warnings or treating warnings as errors, see <bpt id=\"p1\">[</bpt>Configuring Warnings in Visual Basic<ept id=\"p1\">](/visualstudio/ide/configuring-warnings-in-visual-basic)</ept>.","pos":[1125,1299],"source":" For more information about hiding warnings or treating warnings as errors, see [Configuring Warnings in Visual Basic](/visualstudio/ide/configuring-warnings-in-visual-basic)."},{"pos":[1306,1327],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC42030","source":"**Error ID:** BC42030"},{"pos":[1336,1357],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[1367,1557],"content":"If you intend the procedure to assign a value to the variable through the <ph id=\"ph1\">`ByRef`</ph> argument, and if it does not matter whether the variable already holds a value, then no action is necessary.","source":"If you intend the procedure to assign a value to the variable through the `ByRef` argument, and if it does not matter whether the variable already holds a value, then no action is necessary."},{"content":"If the logic in the procedure reads the argument before assigning any value to it, and if the variable is of a value type, then make sure that the procedure logic does not depend on whether the variable holds its default value or not.","pos":[1567,1801]},{"content":"If the logic in the procedure reads the argument before assigning any value to it, and if the variable is of a reference type, then make sure that the procedure logic can handle a value of <ph id=\"ph1\">`Nothing`</ph>.","pos":[1811,2010],"source":"If the logic in the procedure reads the argument before assigning any value to it, and if the variable is of a reference type, then make sure that the procedure logic can handle a value of `Nothing`."},{"content":"For example, it could use a <bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept> to catch a <ph id=\"ph1\">&lt;xref:System.NullReferenceException&gt;</ph>.","pos":[2011,2202],"source":" For example, it could use a [Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md) to catch a <xref:System.NullReferenceException>."},{"pos":[2211,2219],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2223,2305],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[2308,2443],"content":"<bpt id=\"p1\">[</bpt>Value Types and Reference Types<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>","source":"[Value Types and Reference Types](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)"},{"pos":[2446,2605],"content":"<bpt id=\"p1\">[</bpt>Passing Arguments by Value and by Reference<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)</ept>","source":"[Passing Arguments by Value and by Reference](../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)"},{"pos":[2608,2673],"content":"<bpt id=\"p1\">[</bpt>ByRef<ept id=\"p1\">](../../visual-basic/language-reference/modifiers/byref.md)</ept>","source":"[ByRef](../../visual-basic/language-reference/modifiers/byref.md)"},{"pos":[2676,2788],"content":"<bpt id=\"p1\">[</bpt>Variable Declaration<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept>","source":"[Variable Declaration](../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)"},{"pos":[2791,2913],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Variables<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/variables/troubleshooting-variables.md)</ept>","source":"[Troubleshooting Variables](../../visual-basic/programming-guide/language-features/variables/troubleshooting-variables.md)"}]}