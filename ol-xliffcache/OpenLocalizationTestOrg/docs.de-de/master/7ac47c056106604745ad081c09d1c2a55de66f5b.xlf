<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="semaphore-and-semaphoreslim.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ac47c056106604745ad081c09d1c2a55de66f5b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\semaphore-and-semaphoreslim.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74bec61234fa36bbe7b6562309a71d3a44e72d5a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aafdab753e5002cb0591ae2ceb4097d482497bc7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Semaphore and SemaphoreSlim | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Semaphore and SemaphoreSlim</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Semaphore?displayProperty=fullName&gt;</ph> class represents a named (systemwide) or local semaphore.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is a thin wrapper around the Win32 semaphore object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Win32 semaphores are counting semaphores, which can be used to control access to a pool of resources.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class represents a lightweight, fast semaphore that can be used for waiting within a single process when wait times are expected to be very short.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> relies as much as possible on synchronization primitives provided by the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, it also provides lazily initialized, kernel-based wait handles as necessary to support waiting on multiple semaphores.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> also supports the use of cancellation tokens, but it does not support named semaphores or the use of a wait handle for synchronization.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Managing a Limited Resource</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Threads enter the semaphore by calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method, which is inherited from the <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> class, in the case of a <ph id="ph3">&lt;xref:System.Threading.Semaphore?displayProperty=fullName&gt;</ph> object, or the <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A?displayProperty=fullName&gt;</ph> or <ph id="ph5">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A?displayProperty=fullName&gt;</ph> method, in the case of a <ph id="ph6">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object..</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When the call returns, the count on the semaphore is decremented.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When a thread requests entry and the count is zero, the thread blocks.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As threads release the semaphore by calling the <ph id="ph1">&lt;xref:System.Threading.Semaphore.Release%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Release%2A?displayProperty=fullName&gt;</ph> method, blocked threads are allowed to enter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There is no guaranteed order, such as first-in, first-out (FIFO) or last-in, first-out (LIFO), for blocked threads to enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A thread can enter the semaphore multiple times by calling the <ph id="ph1">&lt;xref:System.Threading.Semaphore?displayProperty=fullName&gt;</ph> object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method or the  <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object's <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> method repeatedly.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To release the semaphore, the thread can either call the <ph id="ph1">&lt;xref:System.Threading.Semaphore.Release?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Release?displayProperty=fullName&gt;</ph> method overload the same number of times, or call the <ph id="ph3">&lt;xref:System.Threading.Semaphore.Release%28System.Int32%29?displayProperty=fullName&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29?displayProperty=fullName&gt;</ph> method overload and specify the number of entries to be released.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Semaphores and Thread Identity</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The two semaphore types do not enforce thread identity on calls to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Semaphore.Release%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, a common usage scenario for semaphores involves a producer thread and a consumer thread, with one thread always incrementing the semaphore count and the other always decrementing it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is the programmer's responsibility to ensure that a thread does not release the semaphore too many times.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, suppose a semaphore has a maximum count of two, and that thread A and thread B both enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a programming error in thread B causes it to call  <ph id="ph1">`Release`</ph> twice, both calls succeed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The count on the semaphore is full, and when thread A eventually calls <ph id="ph1">`Release`</ph>, , a <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Named Semaphores</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The Windows operating system allows semaphores to have names.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A named semaphore is system wide.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>That is, once the named semaphore is created, it is visible to all threads in all processes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Thus, named semaphore can be used to synchronize the activities of processes as well as threads.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can create a <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> object that represents a named system semaphore by using one of the constructors that specifies a name.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because named semaphores are system wide, it is possible to have multiple <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> objects that represent the same named semaphore.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each time you call a constructor or the <ph id="ph1">&lt;xref:System.Threading.Semaphore.OpenExisting%2A?displayProperty=fullName&gt;</ph> method, a new <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> object is created.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Specifying the same name repeatedly creates multiple objects that represent the same named semaphore.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Be careful when you use named semaphores.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because they are system wide, another process that uses the same name can enter your semaphore unexpectedly.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Malicious code executing on the same computer could use this as the basis of a denial-of-service attack.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Use access control security to protect a <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> object that represents a named semaphore, preferably by using a constructor that specifies a <ph id="ph2">&lt;xref:System.Security.AccessControl.SemaphoreSecurity?displayProperty=fullName&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can also apply access control security using the <ph id="ph1">&lt;xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName&gt;</ph> method, but this leaves a window of vulnerability between the time the semaphore is created and the time it is protected.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Protecting semaphores with access control security helps prevent malicious attacks, but does not solve the problem of unintentional name collisions.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](../../../docs/standard/threading/threading-objects-and-features.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>