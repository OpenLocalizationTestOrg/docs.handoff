<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c78729675721841623af9f0a0691b5b1bc768af0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\walkthrough-hosting-a-win32-control-in-wpf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b2c8c69588d8e820fc12399f3231c7563d63133</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ef55a71c8f417580fdc43ba670179e13e1acc7a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Hosting a Win32 Control in WPF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Hosting a Win32 Control in WPF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides a rich environment for creating applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, when you have a substantial investment in              <ph id="ph1">[!INCLUDE[TLA#tla_win32](../../../../includes/tlasharptla-win32-md.md)]</ph> code, it may be more effective to reuse at least some of that code in your              <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application rather than rewrite it completely.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides a straightforward mechanism for hosting a              <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window, on a              <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> page.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic walks you through an application,              <bpt id="p1">[</bpt>Hosting a Win32 ListBox Control in WPF Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159998)</ept>, that hosts a              <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> list box control.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This general procedure can be extended to hosting any              <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic assumes a basic familiarity with both                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> and                  <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> programming.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For a basic introduction to                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> programming, see                  <bpt id="p1">[</bpt>Getting Started<ept id="p1">](../../../../docs/framework/wpf/getting-started/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For an introduction to                  <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> programming, you should reference any of the numerous books on the subject, in particular                  <bpt id="p1">*</bpt>Programming Windows<ept id="p1">*</ept> by Charles Petzold.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Because the sample that accompanies this topic is implemented in                  <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](../../../../includes/tlasharptla-cshrp-md.md)]</ph>, it makes use of                  <ph id="ph2">[!INCLUDE[TLA#tla_pinvoke](../../../../includes/tlasharptla-pinvoke-md.md)]</ph> to access the                  <ph id="ph3">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph><ph id="ph4">[!INCLUDE[TLA#tla_api](../../../../includes/tlasharptla-api-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Some familiarity with                  <ph id="ph1">[!INCLUDE[TLA2#tla_pinvoke](../../../../includes/tla2sharptla-pinvoke-md.md)]</ph> is helpful but not essential.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This topic includes a number of code examples from the associated sample.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, for readability, it does not include the complete sample code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can obtain or view complete code from                      <bpt id="p1">[</bpt>Hosting a Win32 ListBox Control in WPF Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159998)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Basic Procedure</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This section outlines the basic procedure for hosting a                  <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window on a                  <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> page.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The remaining sections go through the details of each step.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The basic hosting procedure is:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Implement a                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> page to host the window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>One technique is to create a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> element to reserve a section of the page for the hosted window.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Implement a class to host the control that inherits from                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In that class, override the                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> class member                          <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost.BuildWindowCore%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Create the hosted window as a child of the window that contains the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> page.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Although conventional                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> programming does not need to explicitly make use of it, the hosting page is a window with a handle (HWND).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You receive the page HWND through the                          <ph id="ph1">`hwndParent`</ph> parameter of the                          <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost.BuildWindowCore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The hosted window should be created as a child of this HWND.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Once you have created the host window, return the HWND of the hosted window.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you want to host one or more                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> controls, you typically create a host window as a child of the HWND and make the controls children of that host window.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Wrapping the controls in a host window provides a simple way for your                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> page to receive notifications from the controls, which deals with some particular                          <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> issues with notifications across the HWND boundary.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Handle selected messages sent to the host window, such as notifications from child controls.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>There are two ways to do this.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you prefer to handle messages in your hosting class, override the                                  <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.WndProc%2A&gt;</ph> method of the                                  <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you prefer to have the                                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> handle the messages, handle the                                  <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> class                                  <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost.MessageHook&gt;</ph> event in your code-behind.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This event occurs for every message that is received by the hosted window.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you choose this option, you must still override                                  <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.WndProc%2A&gt;</ph>, but you only need a minimal implementation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Override the                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.DestroyWindowCore%2A&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost.WndProc%2A&gt;</ph> methods of                          <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You must override these methods to satisfy the                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> contract, but you may only need to provide a minimal implementation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In your code-behind file, create an instance of the control hosting class and make it a child of the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> element that is intended to host the window.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Communicate with the hosted window by sending it                          <ph id="ph1">[!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)]</ph> messages and handling messages from its child windows, such as notifications sent by controls.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Implement the Page Layout</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The layout for the                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> page that hosts the ListBox Control consists of two regions.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The left side of the page hosts several                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> controls that provide a                  <ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> that allows you to manipulate the                  <ph id="ph3">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> control.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The upper right corner of the page has a square region for the hosted ListBox Control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The                  code to implement this layout is quite simple.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The root element is a                  <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> that has two child elements.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The first is a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> element that hosts the ListBox Control.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It occupies a 200x200 square in the upper right corner of the page.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The second is a                  <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> element that contains a set of                  <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> controls that display information and allow you to manipulate the ListBox Control by setting exposed interoperation properties.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For each of the elements that are children of the                  <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>, see the reference material for the various elements used for details on what these elements are or what they do, these are listed in the example code below but will not be explained here (the basic interoperation model does not require any of them, they are provided to add some interactivity to the sample).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#WPFUI<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/Page1.xaml#wpfui)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Implement a Class to Host the Microsoft Win32 Control</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The core of this sample is the class that actually hosts the control, ControlHost.cs.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It inherits from                  <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The constructor takes two parameters, height and width, which correspond to the height and width of the                  <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> element that hosts the ListBox control.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These values are used later to ensure that the size of the control matches the                  <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#ControlHostClass<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/ControlHost.cs#controlhostclass)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#ControlHostClass<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/ControlHost.vb#controlhostclass)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>There is also a set of constants.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>These constants are largely taken from Winuser.h, and allow you to use conventional names when calling                  <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> functions.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#ControlHostConstants<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/ControlHost.cs#controlhostconstants)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#ControlHostConstants<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/ControlHost.vb#controlhostconstants)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Override BuildWindowCore to Create the Microsoft Win32 Window</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You override this method to create the                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window that will be hosted by the page, and make the connection between the window and the page.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Because this sample involves hosting a ListBox Control, two windows are created.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The first is the window that is actually hosted by the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> page.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The ListBox Control is created as a child of that window.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The reason for this approach is to simplify the process of receiving notifications from the control.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> class allows you to process messages sent to the window that it is hosting.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you host a                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> control directly, you receive the messages sent to the internal message loop of the control.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can display the control and send it messages, but you do not receive the notifications that the control sends to its parent window.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This means, among other things, that you have no way of detecting when the user interacts with the control.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Instead, create a host window and make the control a child of that window.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This allows you to process the messages for the host window including the notifications sent to it by the control.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For convenience, since the host window is little more than a simple wrapper for the control, the package will be referred to as a ListBox control.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Create the Host Window and ListBox Control</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can use                                  <ph id="ph1">[!INCLUDE[TLA2#tla_pinvoke](../../../../includes/tla2sharptla-pinvoke-md.md)]</ph> to create a host window for the control by creating and registering a window class, and so on.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, a much simpler approach is to create a window with the predefined "static" window class.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This provides you with the window procedure you need in order to receive notifications from the control, and requires minimal coding.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The HWND of the control is exposed through a read-only property, such that the host page can use it to send messages to the control.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#IntPtrProperty<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/ControlHost.cs#intptrproperty)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#IntPtrProperty<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/ControlHost.vb#intptrproperty)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The ListBox control is created as a child of the host window.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The height and width of both windows are set to the values passed to the constructor, discussed above.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This ensures that the size of the host window and control is identical to the reserved area on the page.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>After the windows are created, the sample returns a                                  <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> object that contains the HWND of the host window.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#BuildWindowCore<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/ControlHost.cs#buildwindowcore)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#BuildWindowCore<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/ControlHost.vb#buildwindowcore)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#BuildWindowCoreHelper<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/ControlHost.cs#buildwindowcorehelper)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#BuildWindowCoreHelper<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/ControlHost.vb#buildwindowcorehelper)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Implement DestroyWindow and WndProc</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In addition to                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.BuildWindowCore%2A&gt;</ph>, you must also override the                          <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost.WndProc%2A&gt;</ph> and                          <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost.DestroyWindowCore%2A&gt;</ph> methods of the                          <ph id="ph4">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In this example, the messages for the control are handled by the                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.MessageHook&gt;</ph> handler, thus the implementation of                          <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost.WndProc%2A&gt;</ph> and                          <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost.DestroyWindowCore%2A&gt;</ph> is minimal.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In the case of                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.WndProc%2A&gt;</ph>, set                          <ph id="ph2">`handled`</ph> to                          <ph id="ph3">`false`</ph> to indicate that the  message was not handled and return 0.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.DestroyWindowCore%2A&gt;</ph>, simply destroy the window.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#WndProcDestroy<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/ControlHost.cs#wndprocdestroy)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#WndProcDestroy<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/ControlHost.vb#wndprocdestroy)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#WndProcDestroyHelper<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/ControlHost.cs#wndprocdestroyhelper)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#WndProcDestroyHelper<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/ControlHost.vb#wndprocdestroyhelper)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Host the Control on the Page</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To host the control on the page, you first create a new instance of the                  <ph id="ph1">`ControlHost`</ph> class.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Pass the height and width of the border element that contains the control (                 <ph id="ph1">`ControlHostElement`</ph>) to the                  <ph id="ph2">`ControlHost`</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This ensures that the ListBox is sized correctly.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You then host the control on the page by assigning the                  <ph id="ph1">`ControlHost`</ph> object to the                  <ph id="ph2">&lt;xref:System.Windows.Controls.Decorator.Child%2A&gt;</ph> property of the host                  <ph id="ph3">&lt;xref:System.Windows.Controls.Border&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The sample attaches a handler to the                  <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.MessageHook&gt;</ph> event of the                  <ph id="ph2">`ControlHost`</ph> to receive messages from the control.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This event is raised for every message sent to the hosted window.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In this case, these are the messages sent to window that wraps the actual ListBox control, including notifications from the control.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The sample calls SendMessage to obtain information from the control and modify its contents.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The details of how the page communicates with the control are discussed in the next section.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Notice that there are two                      <ph id="ph1">[!INCLUDE[TLA2#tla_pinvoke](../../../../includes/tla2sharptla-pinvoke-md.md)]</ph> declarations for SendMessage.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This is necessary because one uses the                      <ph id="ph1">`wParam`</ph> parameter to pass a string and the other uses it to pass an integer.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You need a separate declaration for each signature to ensure that the data is marshaled correctly.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#HostWindowClass<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/Page1.xaml.cs#hostwindowclass)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#HostWindowClass<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/Page1.xaml.vb#hostwindowclass)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#ControlMsgFilterSendMessage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/Page1.xaml.cs#controlmsgfiltersendmessage)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#ControlMsgFilterSendMessage<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/Page1.xaml.vb#controlmsgfiltersendmessage)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Implement Communication Between the Control and the Page</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You manipulate the control by sending it                  <ph id="ph1">[!INCLUDE[TLA2#tla_win](../../../../includes/tla2sharptla-win-md.md)]</ph> messages.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The control notifies you when the user interacts with it by sending notifications to its host window.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The                  <bpt id="p1">[</bpt>Hosting a Win32 ListBox Control in WPF Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159998)</ept> sample includes a UI that provides several examples of how this works:</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Append an item to the list.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Delete the selected item from the list</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Display the text of the currently selected item.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Display the number of items in the list.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The user can also select an item in the list box by clicking on it, just as they would for a conventional                  <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The displayed data is updated each time the user changes the state of the list box by selecting, adding, or appending an item.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To append items, send the list box an LB_ADDSTRING message.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>To delete items, send LB_GETCURSEL to get the index of the current selection and then LB_DELETESTRING to delete the item.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The sample also sends LB_GETCOUNT, and uses the returned value to update the display that shows the number of items.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Both these instances of SendMessage use one of the                  <ph id="ph1">[!INCLUDE[TLA2#tla_pinvoke](../../../../includes/tla2sharptla-pinvoke-md.md)]</ph> declarations discussed in the previous section.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WPFHostingWin32Control#AppendDeleteText<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WPFHostingWin32Control/CSharp/Page1.xaml.cs#appenddeletetext)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WPFHostingWin32Control#AppendDeleteText<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WPFHostingWin32Control/VisualBasic/Page1.xaml.vb#appenddeletetext)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>When the user selects an item or changes their selection, the control notifies the host window by sending it a WM_COMMAND message, which raises the                  <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.MessageHook&gt;</ph> event for the page.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The handler receives the same information as the main window procedure of the host window.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>It also passes a reference to a Boolean value,                  <ph id="ph1">`handled`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>You set                  <ph id="ph1">`handled`</ph> to                  <ph id="ph2">`true`</ph> to indicate that you have handled the message and no further processing is needed.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>WM_COMMAND is sent for a variety of reasons, so you must examine the notification ID to determine whether it is an event that you wish to handle.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The ID is contained in the high word of the                  <ph id="ph1">`wParam`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Since                  <ph id="ph1">[!INCLUDE[TLA#tla_net](../../../../includes/tlasharptla-net-md.md)]</ph> does not have a HIWORD macro, the sample uses bitwise operators to extract the ID.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If the user has made or changed their selection, the ID will be LBN_SELCHANGE.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>When LBN_SELCHANGE is received, the sample gets the index of the selected item by sending the control a LB_GETCURSEL message.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To get the text, you first create a                  <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You then send the control an LB_GETTEXT message.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Pass the empty                  <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object as the                  <ph id="ph2">`wParam`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When SendMessage returns, the                  <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> will contain the text of the selected item.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This use of SendMessage requires yet another                  <ph id="ph1">[!INCLUDE[TLA2#tla_pinvoke](../../../../includes/tla2sharptla-pinvoke-md.md)]</ph> declaration.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Finally, set                  <ph id="ph1">`handled`</ph> to                  <ph id="ph2">`true`</ph> to indicate that the message has been handled.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WPF and Win32 Interoperation<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: My First WPF Desktop Application<ept id="p1">](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>