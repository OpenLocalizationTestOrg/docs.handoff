{"content":"---\ntitle: \"byte (C# Reference) | Microsoft Docs\"\nms.date: \"2017-03-14\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"byte\"\n  - \"byte_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"byte keyword [C#]\"\nms.assetid: 111f1db9-ca32-4f0e-b497-4783517eda47\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# byte (C# Reference)\n\n`byte` denotes an integral type that stores values as indicated in the following table.  \n  \n|Type|Range|Size|.NET Framework type|  \n|----------|-----------|----------|-------------------------|  \n|`byte`|0 to 255|Unsigned 8-bit integer|<xref:System.Byte?displayProperty=fullName>|  \n  \n## Literals  \n\n You can declare and initialize a `byte` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it. If the integer literal is outside the range of `byte` (that is, if it is less than <xref:System.Byte.MinValue?displayProperty=fullName> or greater than <xref:System.Byte.MaxValue?displayProperty=fullName>, a compilation error occurs.\n\nIn the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](../../../csharp/language-reference/keywords/int.md) to `byte` values.    \n  \n[!code-cs[Byte](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Byte)]  \n\n> [!NOTE] \n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-cs[Byte](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ByteS)]  \n \n## Conversions  \n There is a predefined implicit conversion from `byte` to [short](../../../csharp/language-reference/keywords/short.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md).  \n  \n You cannot implicitly convert non-literal numeric types of larger storage size to `byte`. For more information on the storage sizes of integral types, see [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md). Consider, for example, the following two `byte` variables `x` and `y`:  \n  \n```  \n  \nbyte x = 10, y = 20;  \n```  \n  \n The following assignment statement will produce a compilation error, because the arithmetic expression on the right-hand side of the assignment operator evaluates to `int` by default.  \n  \n```  \n// Error: conversion from int to byte:  \nbyte z = x + y;  \n```  \n  \n To fix this problem, use a cast:  \n  \n```  \n// OK: explicit conversion:  \nbyte z = (byte)(x + y);  \n```  \n  \n It is possible though, to use the following statements where the destination variable has the same storage size or a larger storage size:  \n  \n```  \nint x = 10, y = 20;  \nint m = x + y;  \nlong n = x + y;  \n```  \n  \n Also, there is no implicit conversion from floating-point types to `byte`. For example, the following statement generates a compiler error unless an explicit cast is used:  \n  \n```  \n// Error: no implicit conversion from double:  \nbyte x = 3.0;   \n// OK: explicit conversion:  \nbyte y = (byte)3.0;  \n```  \n  \n When calling overloaded methods, a cast must be used. Consider, for example, the following overloaded methods that use `byte` and [int](../../../csharp/language-reference/keywords/int.md) parameters:  \n  \n```  \npublic static void SampleMethod(int i) {}  \npublic static void SampleMethod(byte b) {}  \n```  \n  \n Using the `byte` cast guarantees that the correct type is called, for example:  \n  \n```  \n// Calling the method with the int parameter:  \nSampleMethod(5);  \n// Calling the method with the byte parameter:  \nSampleMethod((byte)5);  \n```  \n  \n For information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md).  \n  \n For more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.Byte>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)","nodes":[{"pos":[12,48],"content":"byte (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"byte (C# Reference) | Microsoft Docs","pos":[0,36]}]},{"pos":[567,586],"content":"byte (C# Reference)","linkify":"byte (C# Reference)","nodes":[{"content":"byte (C# Reference)","pos":[0,19]}]},{"pos":[588,675],"content":"<ph id=\"ph1\">`byte`</ph> denotes an integral type that stores values as indicated in the following table.","source":"`byte` denotes an integral type that stores values as indicated in the following table."},{"content":"Type","pos":[682,686]},{"content":"Range","pos":[687,692]},{"content":"Size","pos":[693,697]},{"content":".NET Framework type","pos":[698,717]},{"content":"0 to 255","pos":[793,801]},{"content":"Unsigned 8-bit integer","pos":[802,824]},{"pos":[878,886],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`byte`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.","pos":[891,1042],"source":"You can declare and initialize a `byte` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`byte`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Byte.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Byte.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1043,1276],"source":" If the integer literal is outside the range of `byte` (that is, if it is less than <xref:System.Byte.MinValue?displayProperty=fullName> or greater than <xref:System.Byte.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1278,1497],"content":"In the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> to <ph id=\"ph1\">`byte`</ph> values.","source":"In the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](../../../csharp/language-reference/keywords/int.md) to `byte` values."},{"pos":[1505,1611],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>Byte<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Byte)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[Byte](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Byte)]"},{"pos":[1617,1780],"content":"[!NOTE] \nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[9,161],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"pos":[1782,1926],"content":"Starting with C# 7, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"pos":[1928,2035],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>Byte<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ByteS)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[Byte](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ByteS)]"},{"pos":[2043,2054],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"pos":[2058,2684],"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`byte`</ph> to <bpt id=\"p1\">[</bpt>short<ept id=\"p1\">](../../../csharp/language-reference/keywords/short.md)</ept>, <bpt id=\"p2\">[</bpt>ushort<ept id=\"p2\">](../../../csharp/language-reference/keywords/ushort.md)</ept>, <bpt id=\"p3\">[</bpt>int<ept id=\"p3\">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id=\"p4\">[</bpt>uint<ept id=\"p4\">](../../../csharp/language-reference/keywords/uint.md)</ept>, <bpt id=\"p5\">[</bpt>long<ept id=\"p5\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p6\">[</bpt>ulong<ept id=\"p6\">](../../../csharp/language-reference/keywords/ulong.md)</ept>, <bpt id=\"p7\">[</bpt>float<ept id=\"p7\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p8\">[</bpt>double<ept id=\"p8\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p9\">[</bpt>decimal<ept id=\"p9\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","source":"There is a predefined implicit conversion from `byte` to [short](../../../csharp/language-reference/keywords/short.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"You cannot implicitly convert non-literal numeric types of larger storage size to <ph id=\"ph1\">`byte`</ph>.","pos":[2691,2780],"source":"You cannot implicitly convert non-literal numeric types of larger storage size to `byte`."},{"content":"For more information on the storage sizes of integral types, see <bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept>.","pos":[2781,2938],"source":" For more information on the storage sizes of integral types, see [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)."},{"content":"Consider, for example, the following two <ph id=\"ph1\">`byte`</ph> variables <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph>:","pos":[2939,3009],"source":" Consider, for example, the following two `byte` variables `x` and `y`:"},{"pos":[3057,3240],"content":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right-hand side of the assignment operator evaluates to <ph id=\"ph1\">`int`</ph> by default.","source":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right-hand side of the assignment operator evaluates to `int` by default."},{"content":"To fix this problem, use a cast:","pos":[3321,3353]},{"content":"It is possible though, to use the following statements where the destination variable has the same storage size or a larger storage size:","pos":[3431,3568]},{"content":"Also, there is no implicit conversion from floating-point types to <ph id=\"ph1\">`byte`</ph>.","pos":[3647,3721],"source":"Also, there is no implicit conversion from floating-point types to `byte`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[3722,3818]},{"content":"When calling overloaded methods, a cast must be used.","pos":[3957,4010]},{"content":"Consider, for example, the following overloaded methods that use <ph id=\"ph1\">`byte`</ph> and <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> parameters:","pos":[4011,4156],"source":" Consider, for example, the following overloaded methods that use `byte` and [int](../../../csharp/language-reference/keywords/int.md) parameters:"},{"pos":[4267,4345],"content":"Using the <ph id=\"ph1\">`byte`</ph> cast guarantees that the correct type is called, for example:","source":"Using the `byte` cast guarantees that the correct type is called, for example:"},{"pos":[4508,4736],"content":"For information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>.","source":"For information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md)."},{"pos":[4743,4930],"content":"For more information on implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"pos":[4939,4964],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[5078,5086],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph>","pos":[5090,5108],"source":"<xref:System.Byte> "},{"content":"<bpt id=\"p1\"> [</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5112,5173],"source":" [C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5176,5244],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5247,5316],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5319,5412],"source":" [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5415,5508],"source":" [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5511,5632],"source":" [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","pos":[5635,5755],"source":" [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}