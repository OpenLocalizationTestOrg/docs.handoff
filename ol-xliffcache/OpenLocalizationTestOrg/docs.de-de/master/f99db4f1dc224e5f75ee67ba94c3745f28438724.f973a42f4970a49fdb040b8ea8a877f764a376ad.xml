{"content":"---\ntitle: \"Select...Case Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Select\"\n  - \"vb.Case\"\nhelpviewer_keywords: \n  - \"Select statement [Visual Basic]\"\n  - \"Case statement [Visual Basic]\"\n  - \"Select...Case statements\"\n  - \"conditional statements [Visual Basic], Select Case\"\n  - \"control flow [Visual Basic], branching\"\n  - \"Else keyword [Visual Basic], in Select...Case statements\"\n  - \"execution [Visual Basic], conditional\"\n  - \"To keyword [Visual Basic], in Select...Case statements\"\n  - \"Select Case statement [Visual Basic], Select...Case\"\n  - \"Select statement [Visual Basic], Select...Case\"\n  - \"Is operator [Visual Basic], in Select...Case statements\"\n  - \"branching [Visual Basic], conditional\"\n  - \"Case Else statement [Visual Basic], Select...Case\"\n  - \"End keyword [Visual Basic], Select Case statements\"\n  - \"Case statement [Visual Basic], Select...Case\"\nms.assetid: 68877b65-5419-4bf0-a465-20cd0e4c7d44\n---\n# Select...Case Statement (Visual Basic)\nRuns one of several groups of statements, depending on the value of an expression.  \n  \n## Syntax  \n  \n```  \nSelect [ Case ] testexpression  \n    [ Case expressionlist  \n        [ statements ] ]  \n    [ Case Else  \n        [ elsestatements ] ]  \nEnd Select  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`testexpression`|Required. Expression. Must evaluate to one of the elementary data types (`Boolean`, `Byte`, `Char`, `Date`, `Double`, `Decimal`, `Integer`, `Long`, `Object`, `SByte`, `Short`, `Single`, `String`, `UInteger`, `ULong`, and `UShort`).|  \n|`expressionlist`|Required in a `Case` statement. List of expression clauses representing match values for `testexpression`. Multiple expression clauses are separated by commas. Each clause can take one of the following forms:<br /><br /> -   *expression1* `To` *expression2*<br />-   [ `Is` ] *comparisonoperator* *expression*<br />-   *expression*<br /><br /> Use the `To` keyword to specify the boundaries of a range of match values for `testexpression`. The value of `expression1` must be less than or equal to the value of `expression2`.<br /><br /> Use the `Is` keyword with a comparison operator (`=`, `<>`, `<`, `<=`, `>`, or `>=`) to specify a restriction on the match values for `testexpression`. If the `Is` keyword is not supplied, it is automatically inserted before *comparisonoperator*.<br /><br /> The form specifying only `expression` is treated as a special case of the `Is` form where *comparisonoperator* is the equal sign (`=`). This form is evaluated as `testexpression` = `expression`.<br /><br /> The expressions in `expressionlist` can be of any data type, provided they are implicitly convertible to the type of `testexpression` and the appropriate `comparisonoperator` is valid for the two types it is being used with.|  \n|`statements`|Optional. One or more statements following `Case` that run if `testexpression` matches any clause in `expressionlist`.|  \n|`elsestatements`|Optional. One or more statements following `Case Else` that run if `testexpression` does not match any clause in the `expressionlist` of any of the `Case` statements.|  \n|`End Select`|Terminates the definition of the `Select`...`Case` construction.|  \n  \n## Remarks  \n If `testexpression` matches any `Case` `expressionlist` clause, the statements following that `Case` statement run up to the next `Case`, `Case Else`, or `End Select` statement. Control then passes to the statement following `End Select`. If `testexpression` matches an `expressionlist` clause in more than one `Case` clause, only the statements following the first match run.  \n  \n The `Case Else` statement is used to introduce the `elsestatements` to run if no match is found between the `testexpression` and an `expressionlist` clause in any of the other `Case` statements. Although not required, it is a good idea to have a `Case Else` statement in your `Select Case` construction to handle unforeseen `testexpression` values. If no `Case` `expressionlist` clause matches `testexpression` and there is no `Case Else` statement, control passes to the statement following `End Select`.  \n  \n You can use multiple expressions or ranges in each `Case` clause. For example, the following line is valid.  \n  \n `Case 1 To 4, 7 To 9, 11, 13, Is > maxNumber`  \n  \n> [!NOTE]\n>  The `Is` keyword used in the `Case` and `Case Else` statements is not the same as the [Is Operator](../../../visual-basic/language-reference/operators/is-operator.md), which is used for object reference comparison.  \n  \n You can specify ranges and multiple expressions for character strings. In the following example, `Case` matches any string that is exactly equal to \"apples\", has a value between \"nuts\" and \"soup\" in alphabetical order, or contains the exact same value as the current value of `testItem`.  \n  \n `Case \"apples\", \"nuts\" To \"soup\", testItem`  \n  \n The setting of `Option Compare` can affect string comparisons. Under `Option Compare Text`, the strings \"Apples\" and \"apples\" compare as equal, but under `Option Compare Binary`, they do not.  \n  \n> [!NOTE]\n>  A `Case` statement with multiple clauses can exhibit behavior known as *short-circuiting*. Visual Basic evaluates the clauses from left to right, and if one produces a match with `testexpression`, the remaining clauses are not evaluated. Short-circuiting can improve performance, but it can produce unexpected results if you are expecting every expression in `expressionlist` to be evaluated. For more information on short-circuiting, see [Boolean Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md).  \n  \n If the code within a `Case` or `Case Else` statement block does not need to run any more of the statements in the block, it can exit the block by using the `Exit Select` statement. This transfers control immediately to the statement following `End Select`.  \n  \n `Select Case` constructions can be nested. Each nested `Select Case` construction must have a matching `End Select` statement and must be completely contained within a single `Case` or `Case Else` statement block of the outer `Select Case` construction within which it is nested.  \n  \n## Example  \n The following example uses a `Select Case` construction to write a line corresponding to the value of the variable `number`. The second `Case` statement contains the value that matches the current value of `number`, so the statement that writes \"Between 6 and 8, inclusive\" runs.  \n  \n [!code-vb[VbVbalrStatements#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#54)]  \n  \n## See also\n\n- <xref:Microsoft.VisualBasic.Interaction.Choose%2A>\n- [End Statement](../../../visual-basic/language-reference/statements/end-statement.md)\n- [If...Then...Else Statement](../../../visual-basic/language-reference/statements/if-then-else-statement.md)\n- [Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md)\n- [Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md)\n","nodes":[{"pos":[4,942],"embed":true,"restype":"x-metadata","content":"title: \"Select...Case Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Select\"\n  - \"vb.Case\"\nhelpviewer_keywords: \n  - \"Select statement [Visual Basic]\"\n  - \"Case statement [Visual Basic]\"\n  - \"Select...Case statements\"\n  - \"conditional statements [Visual Basic], Select Case\"\n  - \"control flow [Visual Basic], branching\"\n  - \"Else keyword [Visual Basic], in Select...Case statements\"\n  - \"execution [Visual Basic], conditional\"\n  - \"To keyword [Visual Basic], in Select...Case statements\"\n  - \"Select Case statement [Visual Basic], Select...Case\"\n  - \"Select statement [Visual Basic], Select...Case\"\n  - \"Is operator [Visual Basic], in Select...Case statements\"\n  - \"branching [Visual Basic], conditional\"\n  - \"Case Else statement [Visual Basic], Select...Case\"\n  - \"End keyword [Visual Basic], Select Case statements\"\n  - \"Case statement [Visual Basic], Select...Case\"\nms.assetid: 68877b65-5419-4bf0-a465-20cd0e4c7d44","nodes":[{"content":"Select...Case Statement (Visual Basic)","nodes":[{"pos":[0,38],"content":"Select...Case Statement (Visual Basic)","nodes":[{"content":"Select...Case Statement (Visual Basic)","pos":[0,38]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[949,987],"content":"Select...Case Statement (Visual Basic)","linkify":"Select...Case Statement (Visual Basic)","nodes":[{"content":"Select...Case Statement (Visual Basic)","pos":[0,38]}]},{"content":"Runs one of several groups of statements, depending on the value of an expression.","pos":[988,1070]},{"pos":[1079,1085],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1259,1264],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1271,1275]},{"content":"Definition","pos":[1276,1286]},{"content":"Required.","pos":[1320,1329]},{"content":"Expression.","pos":[1330,1341]},{"content":"Must evaluate to one of the elementary data types (<ph id=\"ph1\">`Boolean`</ph>, <ph id=\"ph2\">`Byte`</ph>, <ph id=\"ph3\">`Char`</ph>, <ph id=\"ph4\">`Date`</ph>, <ph id=\"ph5\">`Double`</ph>, <ph id=\"ph6\">`Decimal`</ph>, <ph id=\"ph7\">`Integer`</ph>, <ph id=\"ph8\">`Long`</ph>, <ph id=\"ph9\">`Object`</ph>, <ph id=\"ph10\">`SByte`</ph>, <ph id=\"ph11\">`Short`</ph>, <ph id=\"ph12\">`Single`</ph>, <ph id=\"ph13\">`String`</ph>, <ph id=\"ph14\">`UInteger`</ph>, <ph id=\"ph15\">`ULong`</ph>, and <ph id=\"ph16\">`UShort`</ph>).","pos":[1342,1551],"source":" Must evaluate to one of the elementary data types (`Boolean`, `Byte`, `Char`, `Date`, `Double`, `Decimal`, `Integer`, `Long`, `Object`, `SByte`, `Short`, `Single`, `String`, `UInteger`, `ULong`, and `UShort`)."},{"content":"Required in a <ph id=\"ph1\">`Case`</ph> statement.","pos":[1573,1604],"source":"Required in a `Case` statement."},{"content":"List of expression clauses representing match values for <ph id=\"ph1\">`testexpression`</ph>.","pos":[1605,1679],"source":" List of expression clauses representing match values for `testexpression`."},{"content":"Multiple expression clauses are separated by commas.","pos":[1680,1732]},{"content":"Each clause can take one of the following forms:","pos":[1733,1781]},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">*</bpt>expression1<ept id=\"p1\">*</ept> <ph id=\"ph2\">`To`</ph> <bpt id=\"p2\">*</bpt>expression2<ept id=\"p2\">*</ept>","pos":[1794,1830],"source":"-   *expression1* `To` *expression2*"},{"content":"-   [ <ph id=\"ph1\">`Is`</ph> ] <bpt id=\"p1\">*</bpt>comparisonoperator<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept>","pos":[1836,1882],"source":"-   [ `Is` ] *comparisonoperator* *expression*"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept>","pos":[1888,1904],"source":"-   *expression*"},{"content":"Use the <ph id=\"ph1\">`To`</ph> keyword to specify the boundaries of a range of match values for <ph id=\"ph2\">`testexpression`</ph>.","pos":[1917,2012],"source":"Use the `To` keyword to specify the boundaries of a range of match values for `testexpression`."},{"content":"The value of <ph id=\"ph1\">`expression1`</ph> must be less than or equal to the value of <ph id=\"ph2\">`expression2`</ph>.","pos":[2013,2097],"source":" The value of `expression1` must be less than or equal to the value of `expression2`."},{"content":"Use the <ph id=\"ph1\">`Is`</ph> keyword with a comparison operator (<ph id=\"ph2\">`=`</ph>, <ph id=\"ph3\">`&lt;&gt;`</ph>, <ph id=\"ph4\">`&lt;`</ph>, <ph id=\"ph5\">`&lt;=`</ph>, <ph id=\"ph6\">`&gt;`</ph>, or <ph id=\"ph7\">`&gt;=`</ph>) to specify a restriction on the match values for <ph id=\"ph8\">`testexpression`</ph>.","pos":[2110,2261],"source":"Use the `Is` keyword with a comparison operator (`=`, `<>`, `<`, `<=`, `>`, or `>=`) to specify a restriction on the match values for `testexpression`."},{"content":"If the <ph id=\"ph1\">`Is`</ph> keyword is not supplied, it is automatically inserted before <bpt id=\"p1\">*</bpt>comparisonoperator<ept id=\"p1\">*</ept>.","pos":[2262,2356],"source":" If the `Is` keyword is not supplied, it is automatically inserted before *comparisonoperator*."},{"content":"The form specifying only <ph id=\"ph1\">`expression`</ph> is treated as a special case of the <ph id=\"ph2\">`Is`</ph> form where <bpt id=\"p1\">*</bpt>comparisonoperator<ept id=\"p1\">*</ept> is the equal sign (<ph id=\"ph3\">`=`</ph>).","pos":[2369,2504],"source":"The form specifying only `expression` is treated as a special case of the `Is` form where *comparisonoperator* is the equal sign (`=`)."},{"content":"This form is evaluated as <ph id=\"ph1\">`testexpression`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`expression`</ph>.","pos":[2505,2563],"source":" This form is evaluated as `testexpression` = `expression`."},{"content":"The expressions in <ph id=\"ph1\">`expressionlist`</ph> can be of any data type, provided they are implicitly convertible to the type of <ph id=\"ph2\">`testexpression`</ph> and the appropriate <ph id=\"ph3\">`comparisonoperator`</ph> is valid for the two types it is being used with.","pos":[2576,2800],"source":"The expressions in `expressionlist` can be of any data type, provided they are implicitly convertible to the type of `testexpression` and the appropriate `comparisonoperator` is valid for the two types it is being used with."},{"content":"Optional.","pos":[2818,2827]},{"content":"One or more statements following <ph id=\"ph1\">`Case`</ph> that run if <ph id=\"ph2\">`testexpression`</ph> matches any clause in <ph id=\"ph3\">`expressionlist`</ph>.","pos":[2828,2936],"source":" One or more statements following `Case` that run if `testexpression` matches any clause in `expressionlist`."},{"content":"Optional.","pos":[2958,2967]},{"content":"One or more statements following <ph id=\"ph1\">`Case Else`</ph> that run if <ph id=\"ph2\">`testexpression`</ph> does not match any clause in the <ph id=\"ph3\">`expressionlist`</ph> of any of the <ph id=\"ph4\">`Case`</ph> statements.","pos":[2968,3124],"source":" One or more statements following `Case Else` that run if `testexpression` does not match any clause in the `expressionlist` of any of the `Case` statements."},{"pos":[3142,3206],"content":"Terminates the definition of the <ph id=\"ph1\">`Select`</ph>...<ph id=\"ph2\">`Case`</ph> construction.","source":"Terminates the definition of the `Select`...`Case` construction."},{"pos":[3216,3223],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`testexpression`</ph> matches any <ph id=\"ph2\">`Case`</ph> <ph id=\"ph3\">`expressionlist`</ph> clause, the statements following that <ph id=\"ph4\">`Case`</ph> statement run up to the next <ph id=\"ph5\">`Case`</ph>, <ph id=\"ph6\">`Case Else`</ph>, or <ph id=\"ph7\">`End Select`</ph> statement.","pos":[3227,3404],"source":"If `testexpression` matches any `Case` `expressionlist` clause, the statements following that `Case` statement run up to the next `Case`, `Case Else`, or `End Select` statement."},{"content":"Control then passes to the statement following <ph id=\"ph1\">`End Select`</ph>.","pos":[3405,3465],"source":" Control then passes to the statement following `End Select`."},{"content":"If <ph id=\"ph1\">`testexpression`</ph> matches an <ph id=\"ph2\">`expressionlist`</ph> clause in more than one <ph id=\"ph3\">`Case`</ph> clause, only the statements following the first match run.","pos":[3466,3603],"source":" If `testexpression` matches an `expressionlist` clause in more than one `Case` clause, only the statements following the first match run."},{"content":"The <ph id=\"ph1\">`Case Else`</ph> statement is used to introduce the <ph id=\"ph2\">`elsestatements`</ph> to run if no match is found between the <ph id=\"ph3\">`testexpression`</ph> and an <ph id=\"ph4\">`expressionlist`</ph> clause in any of the other <ph id=\"ph5\">`Case`</ph> statements.","pos":[3610,3804],"source":"The `Case Else` statement is used to introduce the `elsestatements` to run if no match is found between the `testexpression` and an `expressionlist` clause in any of the other `Case` statements."},{"content":"Although not required, it is a good idea to have a <ph id=\"ph1\">`Case Else`</ph> statement in your <ph id=\"ph2\">`Select Case`</ph> construction to handle unforeseen <ph id=\"ph3\">`testexpression`</ph> values.","pos":[3805,3958],"source":" Although not required, it is a good idea to have a `Case Else` statement in your `Select Case` construction to handle unforeseen `testexpression` values."},{"content":"If no <ph id=\"ph1\">`Case`</ph> <ph id=\"ph2\">`expressionlist`</ph> clause matches <ph id=\"ph3\">`testexpression`</ph> and there is no <ph id=\"ph4\">`Case Else`</ph> statement, control passes to the statement following <ph id=\"ph5\">`End Select`</ph>.","pos":[3959,4115],"source":" If no `Case` `expressionlist` clause matches `testexpression` and there is no `Case Else` statement, control passes to the statement following `End Select`."},{"content":"You can use multiple expressions or ranges in each <ph id=\"ph1\">`Case`</ph> clause.","pos":[4122,4187],"source":"You can use multiple expressions or ranges in each `Case` clause."},{"content":"For example, the following line is valid.","pos":[4188,4229]},{"pos":[4289,4514],"content":"[!NOTE]\n The `Is` keyword used in the `Case` and `Case Else` statements is not the same as the [Is Operator](../../../visual-basic/language-reference/operators/is-operator.md), which is used for object reference comparison.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">`Is`</ph> keyword used in the <ph id=\"ph2\">`Case`</ph> and <ph id=\"ph3\">`Case Else`</ph> statements is not the same as the <bpt id=\"p1\">[</bpt>Is Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/is-operator.md)</ept>, which is used for object reference comparison.","pos":[9,223],"source":"The `Is` keyword used in the `Case` and `Case Else` statements is not the same as the [Is Operator](../../../visual-basic/language-reference/operators/is-operator.md), which is used for object reference comparison."}]},{"content":"You can specify ranges and multiple expressions for character strings.","pos":[4521,4591]},{"content":"In the following example, <ph id=\"ph1\">`Case`</ph> matches any string that is exactly equal to \"apples\", has a value between \"nuts\" and \"soup\" in alphabetical order, or contains the exact same value as the current value of <ph id=\"ph2\">`testItem`</ph>.","pos":[4592,4808],"source":" In the following example, `Case` matches any string that is exactly equal to \"apples\", has a value between \"nuts\" and \"soup\" in alphabetical order, or contains the exact same value as the current value of `testItem`."},{"content":"The setting of <ph id=\"ph1\">`Option Compare`</ph> can affect string comparisons.","pos":[4865,4927],"source":"The setting of `Option Compare` can affect string comparisons."},{"content":"Under <ph id=\"ph1\">`Option Compare Text`</ph>, the strings \"Apples\" and \"apples\" compare as equal, but under <ph id=\"ph2\">`Option Compare Binary`</ph>, they do not.","pos":[4928,5056],"source":" Under `Option Compare Text`, the strings \"Apples\" and \"apples\" compare as equal, but under `Option Compare Binary`, they do not."},{"pos":[5064,5644],"content":"[!NOTE]\n A `Case` statement with multiple clauses can exhibit behavior known as *short-circuiting*. Visual Basic evaluates the clauses from left to right, and if one produces a match with `testexpression`, the remaining clauses are not evaluated. Short-circuiting can improve performance, but it can produce unexpected results if you are expecting every expression in `expressionlist` to be evaluated. For more information on short-circuiting, see [Boolean Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md).","leadings":["","> "],"nodes":[{"content":"A `Case` statement with multiple clauses can exhibit behavior known as *short-circuiting*. Visual Basic evaluates the clauses from left to right, and if one produces a match with `testexpression`, the remaining clauses are not evaluated. Short-circuiting can improve performance, but it can produce unexpected results if you are expecting every expression in `expressionlist` to be evaluated. For more information on short-circuiting, see [Boolean Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md).","pos":[9,578],"nodes":[{"content":"A <ph id=\"ph1\">`Case`</ph> statement with multiple clauses can exhibit behavior known as <bpt id=\"p1\">*</bpt>short-circuiting<ept id=\"p1\">*</ept>.","pos":[0,90],"source":"A `Case` statement with multiple clauses can exhibit behavior known as *short-circuiting*."},{"content":"Visual Basic evaluates the clauses from left to right, and if one produces a match with <ph id=\"ph1\">`testexpression`</ph>, the remaining clauses are not evaluated.","pos":[91,237],"source":" Visual Basic evaluates the clauses from left to right, and if one produces a match with `testexpression`, the remaining clauses are not evaluated."},{"content":"Short-circuiting can improve performance, but it can produce unexpected results if you are expecting every expression in <ph id=\"ph1\">`expressionlist`</ph> to be evaluated.","pos":[238,392],"source":" Short-circuiting can improve performance, but it can produce unexpected results if you are expecting every expression in `expressionlist` to be evaluated."},{"content":"For more information on short-circuiting, see <bpt id=\"p1\">[</bpt>Boolean Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)</ept>.","pos":[393,569],"source":" For more information on short-circuiting, see [Boolean Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)."}]}]},{"content":"If the code within a <ph id=\"ph1\">`Case`</ph> or <ph id=\"ph2\">`Case Else`</ph> statement block does not need to run any more of the statements in the block, it can exit the block by using the <ph id=\"ph3\">`Exit Select`</ph> statement.","pos":[5651,5831],"source":"If the code within a `Case` or `Case Else` statement block does not need to run any more of the statements in the block, it can exit the block by using the `Exit Select` statement."},{"content":"This transfers control immediately to the statement following <ph id=\"ph1\">`End Select`</ph>.","pos":[5832,5907],"source":" This transfers control immediately to the statement following `End Select`."},{"content":"<ph id=\"ph1\">`Select Case`</ph> constructions can be nested.","pos":[5914,5956],"source":"`Select Case` constructions can be nested."},{"content":"Each nested <ph id=\"ph1\">`Select Case`</ph> construction must have a matching <ph id=\"ph2\">`End Select`</ph> statement and must be completely contained within a single <ph id=\"ph3\">`Case`</ph> or <ph id=\"ph4\">`Case Else`</ph> statement block of the outer <ph id=\"ph5\">`Select Case`</ph> construction within which it is nested.","pos":[5957,6193],"source":" Each nested `Select Case` construction must have a matching `End Select` statement and must be completely contained within a single `Case` or `Case Else` statement block of the outer `Select Case` construction within which it is nested."},{"pos":[6202,6209],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses a <ph id=\"ph1\">`Select Case`</ph> construction to write a line corresponding to the value of the variable <ph id=\"ph2\">`number`</ph>.","pos":[6213,6337],"source":"The following example uses a `Select Case` construction to write a line corresponding to the value of the variable `number`."},{"content":"The second <ph id=\"ph1\">`Case`</ph> statement contains the value that matches the current value of <ph id=\"ph2\">`number`</ph>, so the statement that writes \"Between 6 and 8, inclusive\" runs.","pos":[6338,6492],"source":" The second `Case` statement contains the value that matches the current value of `number`, so the statement that writes \"Between 6 and 8, inclusive\" runs."},{"pos":[6627,6635],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6692,6777],"content":"<bpt id=\"p1\">[</bpt>End Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/end-statement.md)</ept>","source":"[End Statement](../../../visual-basic/language-reference/statements/end-statement.md)"},{"pos":[6780,6887],"content":"<bpt id=\"p1\">[</bpt>If...Then...Else Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/if-then-else-statement.md)</ept>","source":"[If...Then...Else Statement](../../../visual-basic/language-reference/statements/if-then-else-statement.md)"},{"pos":[6890,6997],"content":"<bpt id=\"p1\">[</bpt>Option Compare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept>","source":"[Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md)"},{"pos":[7000,7087],"content":"<bpt id=\"p1\">[</bpt>Exit Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept>","source":"[Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md)"}]}