{"content":"---\ntitle: \"DataContractResolver | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 6c200c02-bc14-4b8d-bbab-9da31185b805\ncaps.latest.revision: 12\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# DataContractResolver\nThis sample demonstrates how the serialization and deserialization processes can be customized by using the <xref:System.Runtime.Serialization.DataContractResolver> class. This sample shows how to use a DataContractResolver to map CLR types to and from an xsi:type representation during serialization and deserialization.  \n  \n## Sample Details  \n The sample defines the following CLR types.  \n  \n```csharp  \nusing System;  \nusing System.Runtime.Serialization;  \n  \nnamespace Types  \n{  \n    [DataContract]  \n    public class Customer  \n    {  \n        [DataMember]  \n        public string Name { get; set; }  \n    }  \n  \n    [DataContract]  \n    public class VIPCustomer : Customer  \n    {  \n        [DataMember]  \n        public string VipInfo { get; set; }  \n    }  \n  \n    [DataContract]  \n    public class RegularCustomer : Customer  \n    {  \n    }  \n  \n    [DataContract]  \n    public class PreferredVIPCustomer : VIPCustomer  \n    {  \n    }  \n}  \n  \n```  \n  \n The sample loads the assembly, extracts each of these types, and then serializes and deserializes them. The <xref:System.Runtime.Serialization.DataContractResolver> is plugged into the serialization process by passing an instance of the <xref:System.Runtime.Serialization.DataContractResolver>-derived class to the <xref:System.Runtime.Serialization.DataContractSerializer> constructor, as shown in the following example.  \n  \n```csharp  \nthis.serializer = new DataContractSerializer(typeof(Object), null, int.MaxValue, false, true, null, new MyDataContractResolver(assembly));  \n  \n```  \n  \n The sample then serializes the CLR types as shown in the following code example.  \n  \n```csharp  \nAssembly assembly = Assembly.Load(new AssemblyName(\"Types\"));  \n  \npublic void serialize(Type type)  \n{  \n    Object instance = Activator.CreateInstance(type);  \n  \n    Console.WriteLine(\"----------------------------------------\");  \n    Console.WriteLine();  \n    Console.WriteLine(\"Serializing type: {0}\", type.Name);  \n    Console.WriteLine();  \n    this.buffer = new StringBuilder();  \n    using (XmlWriter xmlWriter = XmlWriter.Create(this.buffer))  \n    {  \n        try  \n        {  \n            this.serializer.WriteObject(xmlWriter, instance);  \n        }  \n        catch (SerializationException error)  \n        {  \n            Console.WriteLine(error.ToString());  \n        }  \n    }  \n    Console.WriteLine(this.buffer.ToString());  \n}  \n  \n```  \n  \n The sample then deserializes the xsi:types as shown in the following code example.  \n  \n```csharp  \npublic void deserialize(Type type)  \n{  \n    Console.WriteLine();  \n    Console.WriteLine(\"Deserializing type: {0}\", type.Name);  \n    Console.WriteLine();  \n    using (XmlReader xmlReader = XmlReader.Create(new StringReader(this.buffer.ToString())))  \n    {  \n        Object obj = this.serializer.ReadObject(xmlReader);  \n    }  \n}  \n  \n```  \n  \n Since the custom <xref:System.Runtime.Serialization.DataContractResolver> is passed in to the <xref:System.Runtime.Serialization.DataContractSerializer> constructor, the <xref:System.Runtime.Serialization.DataContractResolver.TryResolveType%2A> is called during serialization to map a CLR type to an equivalent `xsi:type`. Similarly the <xref:System.Runtime.Serialization.DataContractResolver.ResolveName%2A> is called during deserialization to map the `xsi:type` to an equivalent CLR type. In this sample, the <xref:System.Runtime.Serialization.DataContractResolver> is defined as shown in the following example.  \n  \n The following code example is a class deriving from <xref:System.Runtime.Serialization.DataContractResolver>.  \n  \n```  \nclass MyDataContractResolver : DataContractResolver  \n{  \n    private Dictionary<string, XmlDictionaryString> dictionary = new Dictionary<string, XmlDictionaryString>();  \n    Assembly assembly;  \n  \n    public MyDataContractResolver(Assembly assembly)  \n    {  \n        this.assembly = assembly;  \n    }  \n  \n    // Used at deserialization  \n    // Allows users to map xsi:type name to any Type   \n    public override Type ResolveName(string typeName, string typeNamespace, DataContractResolver knownTypeResolver)  \n    {  \n        XmlDictionaryString tName;  \n        XmlDictionaryString tNamespace;  \n        if (dictionary.TryGetValue(typeName, out tName) && dictionary.TryGetValue(typeNamespace, out tNamespace))  \n        {  \n            return this.assembly.GetType(tNamespace.Value + \".\" + tName.Value);  \n        }  \n        else  \n        {  \n            return null;  \n        }  \n    }  \n  \n    // Used at serialization  \n    // Maps any Type to a new xsi:type representation  \n    public override void ResolveType(Type dataContractType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)  \n    {  \n        string name = dataContractType.Name;  \n        string namesp = dataContractType.Namespace;  \n        typeName = new XmlDictionaryString(XmlDictionary.Empty, name, 0);   \n        typeNamespace = new XmlDictionaryString(XmlDictionary.Empty, namesp, 0);  \n        if (!dictionary.ContainsKey(dataContractType.Name))  \n        {  \n            dictionary.Add(name, typeName);  \n        }  \n        if (!dictionary.ContainsKey(dataContractType.Namespace))  \n        {  \n            dictionary.Add(namesp, typeNamespace);  \n        }  \n    }  \n}  \n  \n```  \n  \n As part of the sample, the Types project generates the assembly with all the types that are used in this sample. Use this project to add, remove or modify the types that will be serialized.  \n  \n#### To use this sample  \n  \n1.  Using [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)], open the DCRSample.sln solution file.  \n  \n2.  To run the solution, press F5  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Contract\\Data\\DataContractResolver`  \n  \n## See Also  \n [Using a Data Contract Resolver](../../../../docs/framework/wcf/feature-details/using-a-data-contract-resolver.md)","nodes":[{"pos":[12,49],"content":"DataContractResolver | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"DataContractResolver | Microsoft Docs","pos":[0,37]}]},{"pos":[348,368],"content":"DataContractResolver","linkify":"DataContractResolver","nodes":[{"content":"DataContractResolver","pos":[0,20]}]},{"content":"This sample demonstrates how the serialization and deserialization processes can be customized by using the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph> class.","pos":[369,540],"source":"This sample demonstrates how the serialization and deserialization processes can be customized by using the <xref:System.Runtime.Serialization.DataContractResolver> class."},{"content":"This sample shows how to use a DataContractResolver to map CLR types to and from an xsi:type representation during serialization and deserialization.","pos":[541,690]},{"pos":[699,713],"content":"Sample Details","linkify":"Sample Details","nodes":[{"content":"Sample Details","pos":[0,14]}]},{"content":"The sample defines the following CLR types.","pos":[717,760]},{"content":"The sample loads the assembly, extracts each of these types, and then serializes and deserializes them.","pos":[1336,1439]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph> is plugged into the serialization process by passing an instance of the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph>-derived class to the <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> constructor, as shown in the following example.","pos":[1440,1757],"source":" The <xref:System.Runtime.Serialization.DataContractResolver> is plugged into the serialization process by passing an instance of the <xref:System.Runtime.Serialization.DataContractResolver>-derived class to the <xref:System.Runtime.Serialization.DataContractSerializer> constructor, as shown in the following example."},{"content":"The sample then serializes the CLR types as shown in the following code example.","pos":[1929,2009]},{"content":"The sample then deserializes the xsi:types as shown in the following code example.","pos":[2789,2871]},{"content":"Since the custom <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph> is passed in to the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> constructor, the <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.DataContractResolver.TryResolveType%2A&gt;</ph> is called during serialization to map a CLR type to an equivalent <ph id=\"ph4\">`xsi:type`</ph>.","pos":[3237,3559],"source":"Since the custom <xref:System.Runtime.Serialization.DataContractResolver> is passed in to the <xref:System.Runtime.Serialization.DataContractSerializer> constructor, the <xref:System.Runtime.Serialization.DataContractResolver.TryResolveType%2A> is called during serialization to map a CLR type to an equivalent `xsi:type`."},{"content":"Similarly the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractResolver.ResolveName%2A&gt;</ph> is called during deserialization to map the <ph id=\"ph2\">`xsi:type`</ph> to an equivalent CLR type.","pos":[3560,3727],"source":" Similarly the <xref:System.Runtime.Serialization.DataContractResolver.ResolveName%2A> is called during deserialization to map the `xsi:type` to an equivalent CLR type."},{"content":"In this sample, the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph> is defined as shown in the following example.","pos":[3728,3850],"source":" In this sample, the <xref:System.Runtime.Serialization.DataContractResolver> is defined as shown in the following example."},{"content":"The following code example is a class deriving from <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph>.","pos":[3857,3966],"source":"The following code example is a class deriving from <xref:System.Runtime.Serialization.DataContractResolver>."},{"content":"As part of the sample, the Types project generates the assembly with all the types that are used in this sample.","pos":[5713,5825]},{"content":"Use this project to add, remove or modify the types that will be serialized.","pos":[5826,5902]},{"pos":[5913,5931],"content":"To use this sample","linkify":"To use this sample","nodes":[{"content":"To use this sample","pos":[0,18]}]},{"pos":[5941,6057],"content":"Using <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph>, open the DCRSample.sln solution file.","source":"Using [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)], open the DCRSample.sln solution file."},{"content":"To run the solution, press F5","pos":[6067,6096]},{"pos":[6104,6236],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[6290,6616],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[6617,6667]},{"pos":[6764,6772],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6776,6890],"content":"<bpt id=\"p1\">[</bpt>Using a Data Contract Resolver<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/using-a-data-contract-resolver.md)</ept>","source":"[Using a Data Contract Resolver](../../../../docs/framework/wcf/feature-details/using-a-data-contract-resolver.md)"}]}