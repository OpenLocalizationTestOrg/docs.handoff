<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c17f427f319a842a74cf9e3a1aa662c991329208</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\ui-automation\ui-automation-providers-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ddb042fe71cfa9d1da90f2400904ad95909fc0c8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc15ac44d265caf6486c0d82cc8e4da0e93e5d07</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>UI Automation Providers Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>UI Automation Providers Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This documentation is intended for .NET Framework developers who want to use the managed <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> classes defined in the <ph id="ph2">&lt;xref:System.Windows.Automation&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For the latest information about <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>, see <bpt id="p1">[</bpt>Windows Automation API: UI Automation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=156746)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>UI Automation providers enable controls to communicate with UI Automation client applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In general, each control or other distinct element in a <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../includes/tlasharptla-ui-md.md)]</ph> is represented by a provider.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The provider exposes information about the element and optionally implements control patterns that enable the client application to interact with the control.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Client applications do not usually have to work directly with providers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Most of the standard controls in applications that use the <ph id="ph1">[!INCLUDE[TLA#tla_win32](../../../includes/tlasharptla-win32-md.md)]</ph>, <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../includes/tlasharptla-winforms-md.md)]</ph>, or <ph id="ph3">[!INCLUDE[TLA#tla_winclient](../../../includes/tlasharptla-winclient-md.md)]</ph> frameworks are automatically exposed to the <ph id="ph4">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> system.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Applications that implement custom controls may also implement <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> providers for those controls, and client applications do not have to take any special steps to gain access to them.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of how control developers implement <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> providers, particularly for controls in <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../includes/tlasharptla-winforms-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA#tla_win32](../../../includes/tlasharptla-win32-md.md)]</ph> windows.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Types of Providers</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>UI Automation providers fall into two categories: client-side providers and server-side providers.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Client-side providers</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Client-side providers are implemented by UI Automation clients to communicate with an application that does not support, or does not fully support, <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Client-side providers usually communicate with the server across the process boundary by sending and receiving <ph id="ph1">[!INCLUDE[TLA2#tla_win](../../../includes/tla2sharptla-win-md.md)]</ph> messages.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because UI Automation providers for controls in <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../includes/tla2sharptla-win32-md.md)]</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_winforms](../../../includes/tla2sharptla-winforms-md.md)]</ph>, or <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> applications are supplied as part of the operating system, client applications seldom have to implement their own providers, and this overview does not cover them further.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Server-side providers</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Server-side providers are implemented by custom controls or by applications that are based on a UI framework other than <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../includes/tla2sharptla-win32-md.md)]</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_winforms](../../../includes/tla2sharptla-winforms-md.md)]</ph>, or <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Server-side providers communicate with client applications across the process boundary by exposing interfaces to the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> core system, which in turn serves requests from clients.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>UI Automation Provider Concepts</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This section provides brief explanations of some of the key concepts you need to understand in order to implement UI Automation providers.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Elements</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> elements are pieces of <ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../includes/tlasharptla-ui-md.md)]</ph> that are visible to UI Automation clients.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Examples include application windows, panes, buttons, tooltips, list boxes, and list items.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Navigation</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> elements are exposed to clients as a <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> constructs the tree by navigating from one element to another.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Navigation is enabled by the providers for each element, each of which may point to a parent, siblings, and children.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information on the client view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree, see <bpt id="p1">[</bpt>UI Automation Tree Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-tree-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Views</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A client can see the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree in three principal views, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Raw view</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Contains all elements.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Control view</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Contains elements that are controls.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Content view</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Contains elements that have content.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information on client views of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> tree, see <bpt id="p1">[</bpt>UI Automation Tree Overview<ept id="p1">](../../../docs/framework/ui-automation/ui-automation-tree-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the provider implementation to define an element as a content element or a control element.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Control elements may or may not also be content elements, but all content elements are control elements.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A framework is a component that manages child controls, hit-testing, and rendering in an area of the screen.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">[!INCLUDE[TLA#tla_win32](../../../includes/tlasharptla-win32-md.md)]</ph> window, often referred to as an HWND, can serve as a framework that contains multiple <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> elements such as a menu bar, a status bar, and buttons.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../includes/tla2sharptla-win32-md.md)]</ph> container controls such as list boxes and tree views are considered to be frameworks, because they contain their own code for rendering child items and performing hit-testing on them.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>By contrast, a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> list box is not a framework, because the rendering and hit-testing is being handled by the containing <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> window.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../includes/tla2sharptla-ui-md.md)]</ph> in an application can be made up of different frameworks.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, an HWND application window might contain <ph id="ph1">[!INCLUDE[TLA#tla_dhtml](../../../includes/tlasharptla-dhtml-md.md)]</ph> which in turn contains a component such as a combo box in an HWND.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Fragments</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A fragment is a complete subtree of elements from a particular framework.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The element at the root node of the subtree is called a fragment root.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A fragment root does not have a parent, but is hosted within some other framework, usually a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../includes/tla2sharptla-win32-md.md)]</ph> window (HWND).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Hosts</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The root node of every fragment must be hosted in an element, usually a <ph id="ph1">[!INCLUDE[TLA#tla_win32](../../../includes/tlasharptla-win32-md.md)]</ph> window (HWND).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The exception is the desktop, which is not hosted in any other element.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The host of a custom control is the HWND of the control itself, not the application window or any other window that might contain groups of top-level controls.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The host of a fragment plays an important role in providing <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../includes/tla2sharptla-uiautomation-md.md)]</ph> services.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It enables navigation to the fragment root, and supplies some default properties so that the custom provider does not have to implement them.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Server-Side UI Automation Provider Implementation<ept id="p1">](../../../docs/framework/ui-automation/server-side-ui-automation-provider-implementation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>