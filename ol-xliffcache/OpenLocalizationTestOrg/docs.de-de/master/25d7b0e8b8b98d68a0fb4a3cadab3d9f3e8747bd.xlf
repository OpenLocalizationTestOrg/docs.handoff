<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="introducing-pluggable-protocols.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25d7b0e8b8b98d68a0fb4a3cadab3d9f3e8747bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\network-programming\introducing-pluggable-protocols.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71938262bc6b68385103074258c4dfe9d5b27fc0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">131c504b7059dd837c390588a52cdaaa030a5f3c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Introducing Pluggable Protocols</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introducing Pluggable Protocols</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Microsoft .NET Framework provides a layered, extensible, and managed implementation of Internet services that can be integrated quickly and easily into your applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Internet access classes in the <ph id="ph1">&lt;xref:System.Net&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets&gt;</ph> namespaces can be used to implement both Web-based and Internet-based applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Internet Applications</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Internet applications can be classified broadly into two kinds: client applications that request information and server applications that respond to information requests from clients.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The classic Internet client-server application is the World Wide Web, where people use browsers to access documents and other data stored on Web servers worldwide.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Applications are not limited to just one of these roles; for instance, the familiar middle-tier application server responds to requests from clients by requesting data from another server, in which case it is acting as both a server and a client.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The client application makes a request by identifying the requested Internet resource and the communication protocol to use for the request and response.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If necessary, the client also provides any additional data required to complete the request, such as proxy location or authentication information (user name, password, and so on).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Once the request is formed, the request can be sent to the server.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Identifying Resources</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The .NET Framework uses a Uniform Resource Identifier (URI) to identify the requested Internet resource and communication protocol.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The URI consists of at least three, and possibly four, fragments: the scheme identifier, which identifies the communications protocol for the request and response; the server identifier, which consists of either a Domain Name System (DNS) host name or a TCP address that uniquely identifies the server on the Internet; the path identifier, which locates the requested information on the server; and an optional query string, which passes information from the client to the server.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, the URI <ph id="ph1">`http://www.contoso.com/whatsnew.aspx?date=today`</ph> consists of the scheme identifier <ph id="ph2">`http`</ph>, the server identifier <ph id="ph3">`www.contoso.com`</ph>, the path <ph id="ph4">`/whatsnew.aspx`</ph>, and the query string <ph id="ph5">`?date=today`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>After the server has received the request and processed the response, it returns the response to the client application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The response includes supplemental information, such as the type of the content (raw text or XML data, for example).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Requests and Responses in the .NET Framework</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The .NET Framework uses specific classes to provide the three pieces of information required to access Internet resources through a request/response model: the <ph id="ph1">&lt;xref:System.Uri&gt;</ph> class, which contains the URI of the Internet resource you are seeking; the <ph id="ph2">&lt;xref:System.Net.WebRequest&gt;</ph> class, which contains a request for the resource; and the <ph id="ph3">&lt;xref:System.Net.WebResponse&gt;</ph> class, which provides a container for the incoming response.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Client applications create <ph id="ph1">`WebRequest`</ph> instances by passing the URI of the network resource to the <ph id="ph2">&lt;xref:System.Net.WebRequest.Create%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This static method creates a <ph id="ph1">`WebRequest`</ph> for a specific protocol, such as HTTP.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WebRequest`</ph> that is returned provides access to properties that control both the request to the server and access to the data stream that is sent when the request is made.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.GetResponse%2A&gt;</ph> method on the <ph id="ph2">`WebRequest`</ph> sends the request from the client application to the server identified in the URI.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In cases in which the response might be delayed, the request can be made asynchronously using the <ph id="ph1">&lt;xref:System.Net.WebRequest.BeginGetResponse%2A&gt;</ph> method on the <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept>, and the response can be returned at a later time using the <ph id="ph2">&lt;xref:System.Net.WebRequest.EndGetResponse%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GetResponse<ept id="p1">**</ept> and <bpt id="p2">**</bpt>EndGetResponse<ept id="p2">**</ept> methods return a <bpt id="p3">**</bpt>WebResponse<ept id="p3">**</ept> that provides access to the data returned by the server.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because this data is provided to the requesting application as a stream by the <ph id="ph1">&lt;xref:System.Net.WebResponse.GetResponseStream%2A&gt;</ph> method, it can be used in an application anywhere data streams are used.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WebResponse<ept id="p2">**</ept> classes are the basis of pluggable protocols â€” an implementation of network services that enables you to develop applications that use Internet resources without worrying about the specific details of the protocol that each resource uses.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Descendant classes of <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> are registered with the <bpt id="p2">**</bpt>WebRequest<ept id="p2">**</ept> class to manage the details of making the actual connections to Internet resources.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>As an example, the <ph id="ph1">&lt;xref:System.Net.HttpWebRequest&gt;</ph> class manages the details of connecting to an Internet resource using HTTP.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>By default, when the <bpt id="p1">**</bpt>WebRequest.Create<ept id="p1">**</ept> method encounters a URI that begins with "http:" or "https:" (the protocol identifiers for HTTP and secure HTTP), the <bpt id="p2">**</bpt>WebRequest<ept id="p2">**</ept> that is returned can be used as is, or it can be typecast to <bpt id="p3">**</bpt>HttpWebRequest<ept id="p3">**</ept> to access protocol-specific properties.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In most cases, the <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> provides all the necessary information for making a request.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Any protocol that can be represented as a request/response transaction can be used in a <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can derive protocol-specific classes from <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WebResponse<ept id="p2">**</ept> and then register them for use by the application with the static <ph id="ph1">&lt;xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When client authorization for Internet requests is required, the <ph id="ph1">&lt;xref:System.Net.WebRequest.Credentials%2A&gt;</ph> property of the <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> supplies the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These credentials can be a simple name/password pair for basic HTTP or digest authentication, or a name/password/domain set for NTLM or Kerberos authentication.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>One set of credentials can be stored in a <ph id="ph1">&lt;xref:System.Net.NetworkCredential&gt;</ph> instance, or multiple sets can be stored simultaneously in a <ph id="ph2">&lt;xref:System.Net.CredentialCache&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CredentialCache<ept id="p1">**</ept> uses the URI of the request and the authentication scheme that the server supports to determine which credentials to send to the server.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Simple Requests with WebClient</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For applications that need to make simple requests for Internet resources, the <ph id="ph1">&lt;xref:System.Net.WebClient&gt;</ph> class provides common methods for uploading data to or downloading data from an Internet server.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WebClient<ept id="p1">**</ept> relies on the <bpt id="p2">**</bpt>WebRequest<ept id="p2">**</ept> class to provide access to Internet resources; therefore, the <bpt id="p3">**</bpt>WebClient<ept id="p3">**</ept> class can use any registered pluggable protocol.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For applications that cannot use the request/response model, or for applications that need to listen on the network as well as send requests, the <bpt id="p1">**</bpt>System.Net.Sockets<ept id="p1">**</ept> namespace provides the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>, and <ph id="ph3">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>These classes handle the details of making connections using different transport protocols and expose the network connection to the application as a stream.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Developers familiar with the Windows Sockets interface or those who need the control provided by programming at the socket level will find that the <bpt id="p1">**</bpt>System.Net.Sockets<ept id="p1">**</ept> classes meet their needs.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>System.Net.Sockets<ept id="p1">**</ept> classes are a transition point from managed to native code within the <bpt id="p2">**</bpt>System.Net<ept id="p2">**</ept> classes.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In most cases, <bpt id="p1">**</bpt>System.Net.Sockets<ept id="p1">**</ept> classes marshal data into their Windows 32-bit counterparts, as well as handling any necessary security checks.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming Pluggable Protocols<ept id="p1">](../../../docs/framework/network-programming/programming-pluggable-protocols.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Network Programming in the .NET Framework<ept id="p1">](../../../docs/framework/network-programming/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Network Programming Samples<ept id="p1">](../../../docs/framework/network-programming/network-programming-samples.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Networking Samples for .NET on MSDN Code Gallery<ept id="p1">](https://code.msdn.microsoft.com/Wiki/View.aspx?ProjectName=nclsamples)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>