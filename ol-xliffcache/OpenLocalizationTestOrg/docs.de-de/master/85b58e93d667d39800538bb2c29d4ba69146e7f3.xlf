<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-persisting-an-object-in-visual-studio.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85b58e93d667d39800538bb2c29d4ba69146e7f3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\serialization\walkthrough-persisting-an-object-in-visual-studio.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82cbdd16322fe99c51619e3465e45ed70498445d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b472ed2f9c3425c2740df2a0296a74005f4e1c1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Persisting an Object using C#</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: persisting an object using C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use serialization to persist an object's data between instances, which enables you to store values and retrieve them the next time that the object is instantiated.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this walkthrough, you will create a basic <ph id="ph1">`Loan`</ph> object and persist its data to a file.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You will then retrieve the data from the file when you re-create the object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This example creates a new file if the file does not already exist.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If an application must create a file, that application must have <ph id="ph1">`Create`</ph> permission for the folder.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Permissions are set by using access control lists.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the file already exists, the application needs only <ph id="ph1">`Write`</ph> permission, a lesser permission.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Where possible, it's more secure to create the file during deployment and only grant <ph id="ph1">`Read`</ph> permissions to a single file (instead of Create permissions for a folder).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Also, it's more secure to write data to user folders than to the root folder or the Program Files folder.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This example stores data in a binary format file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These formats should not be used for sensitive data, such as passwords or credit-card information.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To build and run, install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Install your favorite code editor, if you haven't already.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Need to install a code editor?</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Try <bpt id="p1">[</bpt>Visual Studio<ept id="p1">](https://visualstudio.com/downloads)</ept>!</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The example requires C# 7.3.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Select the C# language version<ept id="p1">](../../../language-reference/configure-language-version.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can examine the sample code online <bpt id="p1">[</bpt>at the .NET samples GitHub repository<ept id="p1">](https://github.com/dotnet/samples/tree/master/csharp/serialization)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creating the loan object</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The first step is to create a <ph id="ph1">`Loan`</ph> class and a console application that uses the class:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create a new application.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`dotnet new console -o serialization`</ph> to create a new console application in a subdirectory named <ph id="ph2">`serialization`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Open the application in your editor, and add a new class named <ph id="ph1">`Loan.cs`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add the following code to your <ph id="ph1">`Loan`</ph> class:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You will also have to create an application that uses the <ph id="ph1">`Loan`</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Serialize the loan object</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`Program.cs`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Add the following code:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Add an event handler for the <ph id="ph1">`PropertyChanged`</ph> event, and a few lines to modify the <ph id="ph2">`Loan`</ph> object and display the changes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can see the additions in the following code:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>At this point, you can run the code, and see the current output:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Running this application repeatedly always writes the same values.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A new Loan object is created every time you run the program.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the real world, interest rates change periodically, but not necessarily every time that the application is run.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Serialization code means you preserve the most recent interest rate between instances of the application.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the next step, you will do just that by adding serialization to the Loan class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Using Serialization to Persist the Object</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In order to persist the values for the Loan class, you must first mark the class with the <ph id="ph1">`Serializable`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add the following code above the Loan class definition:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> tells the compiler that everything in the class can be persisted to a file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`PropertyChanged`</ph> event does not represent part of the object graph that should be stored, it should not be serialized.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Doing so would serialize all objects that are attached to that event.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can add the <ph id="ph1">&lt;xref:System.NonSerializedAttribute&gt;</ph> to the field declaration for the <ph id="ph2">`PropertyChanged`</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.3, you can attach attributes to the backing field of an auto-implemented property using the <ph id="ph1">`field`</ph> target value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following code adds a <ph id="ph1">`TimeLastLoaded`</ph> property and marks it as not serializable:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The next step is to add the serialization code to the LoanApp application.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In order to serialize the class and write it to a file, you use the <ph id="ph1">&lt;xref:System.IO&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.Formatters.Binary&gt;</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To avoid typing the fully qualified names, you can add references to the necessary namespaces as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The next step is to add code to deserialize the object from the file when the object is created.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add a constant to the class for the serialized data's file name as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Next, add the following code after the line that creates the <ph id="ph1">`TestLoan`</ph> object:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You first must check that the file exists.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If it exists, create a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class to read the binary file and a <ph id="ph2">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph> class to translate the file.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You also need to convert from the stream type to the Loan object type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Next you must add code to serialize the class to a file.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Add the following code after the existing code in the <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>At this point, you can again build and run the application.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The first time it runs, notice that the interest rates starts at 7.5, and then changes to 7.1.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Close the application and then run it again.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Now, the application prints the message that it has read the saved file, and the interest rate is 7.1 even before the code that changes it.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Serialization (C#)<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../..//index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>