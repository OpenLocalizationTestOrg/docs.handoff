<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="string-interpolation.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a66ba9215579a459b543a24ece338ffbbfd9aea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\string-interpolation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5d9e4030299310f59e1c314be68a6fa7f5dfa89</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad89ebd022147c1928ef364f1a115f65325edb0b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>String interpolation in C#</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to include formatted expression results in a result string in C# with string interpolation.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>String interpolation in C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial shows you how to use <bpt id="p1">[</bpt>string interpolation<ept id="p1">](../language-reference/tokens/interpolated.md)</ept> to format and include expression results in a result string.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The examples assume that you are familiar with basic C# concepts and .NET type formatting.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you are new to string interpolation or .NET type formatting, check out the <bpt id="p1">[</bpt>interactive string interpolation tutorial<ept id="p1">](exploration/interpolated-strings.yml)</ept> first.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about formatting types in .NET, see the <bpt id="p1">[</bpt>Formatting Types in .NET<ept id="p1">](../../standard/base-types/formatting-types.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Introduction</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>string interpolation<ept id="p1">](../language-reference/tokens/interpolated.md)</ept> feature is built on top of the <bpt id="p2">[</bpt>composite formatting<ept id="p2">](../../standard/base-types/composite-formatting.md)</ept> feature and provides a more readable and convenient syntax to include formatted expression results in a result string.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To identify a string literal as an interpolated string, prepend it with the <ph id="ph1">`$`</ph> symbol.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can embed any valid C# expression that returns a value in an interpolated string.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the following example, as soon as an expression is evaluated, its result is converted into a string and included in a result string:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>As the example shows, you include an expression in an interpolated string by enclosing it with braces:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>At compile time, an interpolated string is typically transformed into a <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>That makes all the capabilities of the <bpt id="p1">[</bpt>string composite formatting<ept id="p1">](../../standard/base-types/composite-formatting.md)</ept> feature available to you to use with interpolated strings as well.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The compiler may substitute a <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">&lt;xref:System.String.Concat%2A?displayProperty=nameWithType&gt;</ph> if the analyzed behavior would be equivalent to concatenation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>How to specify a format string for an interpolated expression</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You specify a format string that is supported by the type of the expression result by following the interpolated expression with a colon (":") and the format string:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example shows how to specify standard and custom format strings for expressions that produce date and time or numeric results:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Format String Component<ept id="p1">](../../standard/base-types/composite-formatting.md#format-string-component)</ept> section of the <bpt id="p2">[</bpt>Composite Formatting<ept id="p2">](../../standard/base-types/composite-formatting.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>That section provides links to the topics that describe standard and custom format strings supported by .NET base types.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>How to control the field width and alignment of the formatted interpolated expression</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You specify the minimum field width and the alignment of the formatted expression result by following the interpolated expression with a comma (",") and the constant expression:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>alignment<ept id="p1">*</ept> value is positive, the formatted expression result is right-aligned; if negative, it's left-aligned.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you need to specify both alignment and a format string, start with the alignment component:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows how to specify alignment and uses pipe characters ("|") to delimit text fields:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As the example output shows, if the length of the formatted expression result exceeds specified field width, the <bpt id="p1">*</bpt>alignment<ept id="p1">*</ept> value is ignored.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Alignment Component<ept id="p1">](../../standard/base-types/composite-formatting.md#alignment-component)</ept> section of the <bpt id="p2">[</bpt>Composite Formatting<ept id="p2">](../../standard/base-types/composite-formatting.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>How to use escape sequences in an interpolated string</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Interpolated strings support all escape sequences that can be used in ordinary string literals.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>String escape sequences<ept id="p1">](../programming-guide/strings/index.md#string-escape-sequences)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To interpret escape sequences literally, use a <bpt id="p1">[</bpt>verbatim<ept id="p1">](../language-reference/tokens/verbatim.md)</ept> string literal.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A verbatim interpolated string starts with the <ph id="ph1">`$`</ph> character followed by the <ph id="ph2">`@`</ph> character.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To include a brace, "{" or "}", in a result string, use two braces, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Escaping Braces<ept id="p1">](../../standard/base-types/composite-formatting.md#escaping-braces)</ept> section of the <bpt id="p2">[</bpt>Composite Formatting<ept id="p2">](../../standard/base-types/composite-formatting.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example shows how to include braces in a result string and construct a verbatim interpolated string:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>How to use a ternary conditional operator <ph id="ph1">`?:`</ph> in an interpolated expression</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As the colon (":") has special meaning in an item with an interpolated expression, in order to use a <bpt id="p1">[</bpt>conditional operator<ept id="p1">](../language-reference/operators/conditional-operator.md)</ept> in an expression, enclose it in parentheses, as the following example shows:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>How to create a culture-specific result string with string interpolation</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By default, an interpolated string uses the current culture defined by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType&gt;</ph> property for all formatting operations.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use implicit conversion of an interpolated string to a <ph id="ph1">&lt;xref:System.FormattableString?displayProperty=nameWithType&gt;</ph> instance and call its <ph id="ph2">&lt;xref:System.FormattableString.ToString(System.IFormatProvider)&gt;</ph> method to create a culture-specific result string.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example shows how to do that:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As the example shows, you can use one <ph id="ph1">&lt;xref:System.FormattableString&gt;</ph> instance to generate multiple result strings for various cultures.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>How to create a result string using the invariant culture</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Along with the <ph id="ph1">&lt;xref:System.FormattableString.ToString(System.IFormatProvider)?displayProperty=nameWithType&gt;</ph> method, you can use the static <ph id="ph2">&lt;xref:System.FormattableString.Invariant%2A?displayProperty=nameWithType&gt;</ph> method to resolve an interpolated string to a result string for the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo.InvariantCulture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example shows how to do that:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This tutorial describes common scenarios of string interpolation usage.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information about string interpolation, see the <bpt id="p1">[</bpt>String interpolation<ept id="p1">](../language-reference/tokens/interpolated.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information about formatting types in .NET, see the <bpt id="p1">[</bpt>Formatting Types in .NET<ept id="p1">](../../standard/base-types/formatting-types.md)</ept> and <bpt id="p2">[</bpt>Composite formatting<ept id="p2">](../../standard/base-types/composite-formatting.md)</ept> topics.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strings<ept id="p1">](../programming-guide/strings/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>