<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="testing-library-with-visual-studio.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">629af913bb5172b890161bb82f45a65e6bb6498d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\getting-started\testing-library-with-visual-studio.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38224295ee796265224b2ccdab5b85a3d15a309d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5019021c5a848f77a4e654cbb95504951b96bb8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Testing a class library with .NET Core in Visual Studio 2017</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to test a class library written in C# using Visual Studio 2017</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>.NET Core, .NET Standard class library, Visual Studio 2017, unit testing</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Testing a class library with .NET Core in Visual Studio 2017</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">[</bpt>Building a class library with C# and .NET Core in Visual Studio 2017<ept id="p1">](library-with-visual-studio.md)</ept>, you created a simple class library that adds an extension method to the <ph id="ph1">@System.String</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Now, you'll create a unit test to make sure that it works as expected.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You'll add your unit test project to the solution you created in the previous topic.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating a unit test project</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To create the unit test project, do the following:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the context menu for the <bpt id="p2">**</bpt>ClassLibraryProject<ept id="p2">**</ept> solution node and select <bpt id="p3">**</bpt>Add<ept id="p3">**</ept><ph id="ph1"> &gt; </ph><bpt id="p4">**</bpt>New Project<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog, select the <bpt id="p2">**</bpt>.NET Core<ept id="p2">**</ept> node followed by the <bpt id="p3">**</bpt>Unit Test Project (.NET Core)<ept id="p3">**</ept> project template.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> text box, enter "StringLibraryTest" as the name of the project.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to create the unit test project.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add New Project dialog</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Visual Studio creates the project and opens the <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> file in the code window.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Visual Studio code window showing the default unit test project UnitTest1 class and TestMethod1 method</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The source code created by the unit test template does the following:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It imports the <bpt id="p1">[</bpt>Microsoft.VisualStudio.TestTools.UnitTesting<ept id="p1">](https://msdn.microsoft.com/library/microsoft.visualstudio.testtools.unittesting.aspx)</ept> namespace, which contains the types used for unit testing.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It applies the <bpt id="p1">[</bpt><ph id="ph1">\[</ph>TestClass<ph id="ph2">\]</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.visualstudio.testtools.unittesting.testclassattribute.aspx)</ept> attribute to the <ph id="ph3">`UnitTest1`</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each test method in a test class tagged with the <ph id="ph1">\[</ph>TestMethod<ph id="ph2">\]</ph> attribute is executed automatically when the unit test is run.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It applies the <bpt id="p1">[</bpt><ph id="ph1">\[</ph>TestMethod<ph id="ph2">\]</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.visualstudio.testtools.unittesting.testmethodattribute.aspx)</ept> attribute to define <ph id="ph3">`TestMethod1`</ph> as a test method for automatic execution when the unit test is run.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node of the <bpt id="p3">**</bpt>StringLibraryTest<ept id="p3">**</ept> project and select <bpt id="p4">**</bpt>Add Reference<ept id="p4">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Context menu of StringLibraryTest Dependencies</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check the box next to <bpt id="p2">**</bpt>StringLibrary<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Adding a reference to the <ph id="ph1">`StringLibrary`</ph> assembly allows the compiler to find <bpt id="p1">**</bpt>StringLibrary<ept id="p1">**</ept> methods.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This adds a reference to your class library project, <ph id="ph1">`StringLibrary`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Reference manager</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Adding and running unit test methods</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When Visual Studio runs a unit test, it executes each method marked with the <bpt id="p1">[</bpt><ph id="ph1">\[</ph>TestMethod<ph id="ph2">\]</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.visualstudio.testtools.unittesting.testmethodattribute.aspx)</ept> attribute in a unit test class, the class to which the  <bpt id="p2">[</bpt><ph id="ph3">\[</ph>TestClass<ph id="ph4">\]</ph><ept id="p2">](https://msdn.microsoft.com/library/microsoft.visualstudio.testtools.unittesting.testclassattribute.aspx)</ept> attribute is applied.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A test method ends when the first failure is encountered or when all tests contained in the method have succeeded.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The most common tests call members of the <bpt id="p1">[</bpt>Assert<ept id="p1">](https://msdn.microsoft.com/library/microsoft.visualstudio.testtools.unittesting.assert.aspx)</ept> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Many assert methods include at least two parameters, one of which is the expected test result and the other of which is the actual test result.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Some of its most frequently called methods are shown in the table below.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Assert methods</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Verifies that two values or objects are equal.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The assert fails if the values or objects are not equal.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Verifies that two object variables refer to the same object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The assert fails if the variables refer to different objects.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Verifies that a condition is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The assert fails if the condition is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Verifies that an object is not <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The assert fails if the object is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\[</ph>ExpectedException<ph id="ph2">\]</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.visualstudio.testtools.unittesting.expectedexceptionattribute.aspx)</ept> attribute</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Indicates the type of exception a test method is expected to throw.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The test fails if the specified exception is not thrown.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In testing the <ph id="ph1">`StringLibrary.StartsWithUpper`</ph> method, you want to provide a number of strings that begin with an uppercase character.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You expect the method to return <ph id="ph1">`true`</ph> in these cases, so you can call the <bpt id="p1">[</bpt>Assert.IsTrue(Boolean, String)<ept id="p1">](https://msdn.microsoft.com/library/ms243754.aspx)</ept> method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Similarly, you want to provide a number of strings that begin with something other than an uppercase character.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You expect the method to return <ph id="ph1">`false`</ph> in these cases, so you can call the <bpt id="p1">[</bpt>Assert.IsFalse(Boolean, String)<ept id="p1">](https://msdn.microsoft.com/library/ms243805.aspx)</ept> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Since your library method handles strings, you also want to make sure that it successfully handles an <bpt id="p1">[</bpt>empty string (<ph id="ph1">`String.Empty`</ph>)<ept id="p1">](xref:System.String.Empty)</ept>, a valid string that has no characters and whose <ph id="ph2">@System.String.Length</ph> is 0 and a <ph id="ph3">`null`</ph> string that has not been initialized.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`StartsWithUpper`</ph> is called as an extension method on a <ph id="ph2">@System.String</ph> instance, it cannot be passed a <ph id="ph3">`null`</ph> string.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, you can also call it directly as a static method and pass a single <ph id="ph1">@System.String</ph> argument.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You'll define three methods, each of which calls its <bpt id="p1">[</bpt>Assert<ept id="p1">](https://msdn.microsoft.com/library/microsoft.visualstudio.testtools.unittesting.assert.aspx)</ept> method repeatedly for each element in a string array.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Because the test method fails as soon as it encounters the first failure, you'll call a method overload that allows you to pass a string that indicates the string value used in the method call.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To create the test methods:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> code window, replace the code with the following code:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Note that your test of uppercase characters in the <ph id="ph1">`TestStartsWithUpper`</ph> method includes the Greek capital letter alpha (U+0391) and the Cyrillic capital letter EM (U+041C), and the test of lowercase characters in the <ph id="ph2">`TestDoesNotStartWithUpper`</ph> method includes the Greek small letter alpha (U+03B1) and the Cyrillic small letter Ghe (U+0433).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>On the menu bar, select <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Save UnitTest1.cs As<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Save File As<ept id="p1">**</ept> dialog, select the arrow beside the <bpt id="p2">**</bpt>Save<ept id="p2">**</ept> button, and select <bpt id="p3">**</bpt>Save with Encoding<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Save File As dialog</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Confirm Save As<ept id="p1">**</ept> dialog, select the <bpt id="p2">**</bpt>Yes<ept id="p2">**</ept> button to save the file.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Advanced Save Options<ept id="p1">**</ept> dialog, select <bpt id="p2">**</bpt>Unicode (UTF-8 with signature) - Codepage 65001<ept id="p2">**</ept> from the <bpt id="p3">**</bpt>Encoding<ept id="p3">**</ept> drop-down list and select <bpt id="p4">**</bpt>OK<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Advanced Save Options dialog</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you fail to save your source code as a UTF8-encoded file, Visual Studio may save it as an ASCII file.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When that happens, the runtime doesn't accurately decode the UTF8 characters outside of the ASCII range, and the test results won't be accurate.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>On the menu bar, select <bpt id="p1">**</bpt>Test<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Run<ept id="p2">**</ept><ph id="ph2"> &gt; </ph><bpt id="p3">**</bpt>All Tests<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Test Explorer<ept id="p1">**</ept> window opens and shows that the tests run successfully.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The three tests are listed in the <bpt id="p1">**</bpt>Passed Tests<ept id="p1">**</ept> section, and the <bpt id="p2">**</bpt>Summary<ept id="p2">**</ept> section reports the result of the test run.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Test Explorer window</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Handling test failures</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Your test run had no failures, but change it slightly so that one of the test methods fails:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`words`</ph> array in the <ph id="ph2">`TestDoesNotStartWithUpper`</ph> method to include the string "Error".</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You don't need to save the file because Visual Studio automatically saves open files when a solution is built to run tests.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Run the test by selecting <bpt id="p1">**</bpt>Test<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Run<ept id="p2">**</ept><ph id="ph2"> &gt; </ph><bpt id="p3">**</bpt>All Tests<ept id="p3">**</ept> from the menu bar.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Test Explorer<ept id="p1">**</ept> window indicates that two tests succeeded and one failed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Test Explorer window</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Failed Tests<ept id="p1">**</ept> section, select the failed test, <ph id="ph1">`TestDoesNotStartWith`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Test Explorer<ept id="p1">**</ept> window displays the message produced by the assert: "Assert.IsFalse failed.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Expected for 'Error': false; actual: True".</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Because of the failure, all strings in the array after "Error" were not tested.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Test Explorer window showing the Is False assertion failure</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remove the code that you added (<ph id="ph1">`"Error", `</ph>) and rerun the test.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The tests will pass.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Testing the Release version of the library</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You've been running your tests against the Debug version of the library.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Now that your tests have all passed and you've adequately tested your library, you should run the tests an additional time against the Release build of the library.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A number of factors, including compiler optimizations, can sometimes produce different behavior between Debug and Release builds.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To test the Release build:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In the Visual Studio toolbar, change the build configuration from <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Release<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Visual Studio toolbar</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>StringLibrary<ept id="p2">**</ept> project and select <bpt id="p3">**</bpt>Build<ept id="p3">**</ept> from the context menu to recompile the library.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>StringLibrary context menu</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Run the unit tests by choosing <bpt id="p1">**</bpt>Test<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Run<ept id="p2">**</ept><ph id="ph2"> &gt; </ph><bpt id="p3">**</bpt>All Tests<ept id="p3">**</ept> from the menu bar.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The tests pass.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Now that you've finished testing your library, the next step is to make it available to callers.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can bundle it with one or more applications, or you can distribute it as a NuGet package.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Consuming a .NET Standard Class Library<ept id="p1">](./consuming-library-with-visual-studio.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>