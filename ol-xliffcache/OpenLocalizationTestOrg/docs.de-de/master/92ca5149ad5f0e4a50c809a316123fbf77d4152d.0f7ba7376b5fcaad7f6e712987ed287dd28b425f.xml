{"content":"---\ntitle: Get started with .NET Core using the CLI\ndescription: A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).\nauthor: cartermp\nms.date: 09/10/2018\nms.technology: dotnet-cli\nms.custom: \"seodec18\"\n---\n# Get started with .NET Core on Windows/Linux/macOS using the command line\n\nThis topic will show you how to start developing cross-platforms apps in your machine using the .NET Core CLI tools.\n\nIf you're unfamiliar with the .NET Core CLI toolset, read the [.NET Core SDK overview](../tools/index.md).\n\n## Prerequisites\n\n- [.NET Core SDK 2.1](https://www.microsoft.com/net/download/core).\n- A text editor or code editor of your choice.\n\n## Hello, Console App!\n\nYou can [view or download the sample code](https://github.com/dotnet/samples/tree/master/core/console-apps/HelloMsBuild) from the dotnet/samples GitHub repository. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\nOpen a command prompt and create a folder named *Hello*. Navigate to the folder you created and type the following:\n\n```console\ndotnet new console\ndotnet run\n```\n\nLet's do a quick walkthrough:\n\n1. `dotnet new console`\n\n   [`dotnet new`](../tools/dotnet-new.md) creates an up-to-date `Hello.csproj` project file with the dependencies necessary to build a console app.  It also creates a `Program.cs`, a basic file containing the entry point for the application.\n\n   `Hello.csproj`:\n\n   [!code[Hello.csproj](../../../samples/core/console-apps/HelloMsBuild/Hello.csproj)]\n\n   The project file specifies everything that's needed to restore dependencies and build the program.\n\n   * The `OutputType` tag specifies that we're building an executable, in other words a console application.\n   * The `TargetFramework` tag specifies what .NET implementation we're targeting. In an advanced scenario, you can specify multiple target frameworks and build to all those in a single operation. In this tutorial, we'll stick to building only for .NET Core 2.1.\n\n   `Program.cs`:\n\n   [!code-csharp[Program.cs](../../../samples/core/console-apps/HelloMsBuild/Program.cs)]\n\n   The program starts by `using System`, which means \"bring everything in the `System` namespace into scope for this file\". The `System` namespace includes basic constructs such as `string`, or numeric types.\n\n   We then define a namespace called `Hello`. You can change this to anything you want. A class named `Program` is defined within that namespace, with a `Main` method that takes an array of strings as its argument. This array contains the list of arguments passed in when the compiled program is called. As it is, this array is not used: all the program is doing is to write \"Hello World!\" to the console. Later, we'll make changes to the code that will make use of this argument.\n\n   [!INCLUDE[DotNet Restore Note](~/includes/dotnet-restore-note.md)]\n\n   `dotnet new` calls [`dotnet restore`](../tools/dotnet-restore.md) implicitly. `dotnet restore` calls into [NuGet](https://www.nuget.org/) (.NET package manager) to restore the tree of dependencies. NuGet analyzes the *Hello.csproj* file, downloads the dependencies defined in the file (or grabs them from a cache on your machine), and writes the *obj/project.assets.json* file, which is necessary to compile and run the sample.\n\n   > [!IMPORTANT]\n   > If you're using a .NET Core 1.x version of the SDK, you'll have to call `dotnet restore` yourself after calling `dotnet new`.\n\n2. `dotnet run`\n\n   [`dotnet run`](../tools/dotnet-run.md) calls [`dotnet build`](../tools/dotnet-build.md) to ensure that the build targets have been built, and then calls `dotnet <assembly.dll>` to run the target application.\n\n    ```console\n    $ dotnet run\n    Hello World!\n    ```\n\n    Alternatively, you can also execute [`dotnet build`](../tools/dotnet-build.md) to compile the code without running the build console applications. This results in a compiled application as a DLL file that can be run with `dotnet bin\\Debug\\netcoreapp2.1\\Hello.dll` on Windows (use `/` for non-Windows systems). You may also specify arguments to the application as you'll see later on the topic.\n\n    ```console\n    $ dotnet bin\\Debug\\netcoreapp2.1\\Hello.dll\n    Hello World!\n    ```\n\n    As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed. See [.NET Core Application Deployment](../deploying/index.md) for details.\n\n### Augmenting the program\n\nLet's change the program a bit. Fibonacci numbers are fun, so let's add that in addition to use the argument to greet the person running the app.\n\n1. Replace the contents of your *Program.cs*  file with the following code:\n\n   [!code-csharp[Fibonacci](../../../samples/core/console-apps/fibonacci-msbuild/Program.cs)]\n\n2. Execute [`dotnet build`](../tools/dotnet-build.md) to compile the changes.\n\n3. Run the program passing a parameter to the app:\n\n   ```console\n   $ dotnet run -- John\n   Hello John!\n   Fibonacci Numbers 1-15:\n   1: 0\n   2: 1\n   3: 1\n   4: 2\n   5: 3\n   6: 5\n   7: 8\n   8: 13\n   9: 21\n   10: 34\n   11: 55\n   12: 89\n   13: 144\n   14: 233\n   15: 377\n   ```\n\nAnd that's it!  You can augment `Program.cs` any way you like.\n\n## Working with multiple files\n\nSingle files are fine for simple one-off programs, but if you're building a more complex app, you're probably going to have multiple source files on your project.\nLet's build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive features.\n\n1. Add a new file inside the *Hello* directory named *FibonacciGenerator.cs* with the following code:\n\n   [!code-csharp[Fibonacci Generator](../../../samples/core/console-apps/FibonacciBetterMsBuild/FibonacciGenerator.cs)]\n\n2. Change the `Main` method in your *Program.cs* file to instantiate the new class and call its method as in the following example:\n\n   [!code-csharp[New Program.cs](../../../samples/core/console-apps/FibonacciBetterMsBuild/Program.cs)]\n\n3. Execute [`dotnet build`](../tools/dotnet-build.md) to compile the changes.\n\n4. Run your app by executing [`dotnet run`](../tools/dotnet-run.md). The following shows the program output:\n\n   ```console\n   $ dotnet run\n   0\n   1\n   1\n   2\n   3\n   5\n   8\n   13\n   21\n   34\n   55\n   89\n   144\n   233\n   377\n   ```\n\nAnd that's it! Now, you can start using the basic concepts learned here to create your own programs.\n\nNote that the commands and steps shown in this tutorial to run your application are used during development time only. Once you're ready to deploy your app, you'll want to take a look at the different [deployment strategies](../deploying/index.md) for .NET Core apps and the [`dotnet publish`](../tools/dotnet-publish.md) command.\n\n## See also\n\n- [Organizing and testing projects with the .NET Core CLI tools](testing-with-cli.md)\n","nodes":[{"pos":[4,293],"embed":true,"restype":"x-metadata","content":"title: Get started with .NET Core using the CLI\ndescription: A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).\nauthor: cartermp\nms.date: 09/10/2018\nms.technology: dotnet-cli\nms.custom: \"seodec18\"","nodes":[{"content":"Get started with .NET Core using the CLI","nodes":[{"pos":[0,40],"content":"Get started with .NET Core using the CLI","nodes":[{"content":"Get started with .NET Core using the CLI","pos":[0,40]}]}],"path":["title"],"nosxs":false},{"content":"A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).","nodes":[{"pos":[0,143],"content":"A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).","nodes":[{"content":"A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).","pos":[0,143]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[300,372],"content":"Get started with .NET Core on Windows/Linux/macOS using the command line","linkify":"Get started with .NET Core on Windows/Linux/macOS using the command line","nodes":[{"content":"Get started with .NET Core on Windows/Linux/macOS using the command line","pos":[0,72]}]},{"content":"This topic will show you how to start developing cross-platforms apps in your machine using the .NET Core CLI tools.","pos":[374,490]},{"pos":[492,598],"content":"If you're unfamiliar with the .NET Core CLI toolset, read the <bpt id=\"p1\">[</bpt>.NET Core SDK overview<ept id=\"p1\">](../tools/index.md)</ept>.","source":"If you're unfamiliar with the .NET Core CLI toolset, read the [.NET Core SDK overview](../tools/index.md)."},{"pos":[603,616],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[620,685],"content":"<bpt id=\"p1\">[</bpt>.NET Core SDK 2.1<ept id=\"p1\">](https://www.microsoft.com/net/download/core)</ept>.","source":"[.NET Core SDK 2.1](https://www.microsoft.com/net/download/core)."},{"content":"A text editor or code editor of your choice.","pos":[688,732]},{"pos":[737,756],"content":"Hello, Console App!","linkify":"Hello, Console App!","nodes":[{"content":"Hello, Console App!","pos":[0,19]}]},{"content":"You can <bpt id=\"p1\">[</bpt>view or download the sample code<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/core/console-apps/HelloMsBuild)</ept> from the dotnet/samples GitHub repository.","pos":[758,921],"source":"You can [view or download the sample code](https://github.com/dotnet/samples/tree/master/core/console-apps/HelloMsBuild) from the dotnet/samples GitHub repository."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[922,1047],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"content":"Open a command prompt and create a folder named <bpt id=\"p1\">*</bpt>Hello<ept id=\"p1\">*</ept>.","pos":[1049,1105],"source":"Open a command prompt and create a folder named *Hello*."},{"content":"Navigate to the folder you created and type the following:","pos":[1106,1164]},{"content":"Let's do a quick walkthrough:","pos":[1212,1241]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet new`</ph><ept id=\"p1\">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id=\"ph2\">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.","pos":[1271,1415],"source":"[`dotnet new`](../tools/dotnet-new.md) creates an up-to-date `Hello.csproj` project file with the dependencies necessary to build a console app."},{"content":"It also creates a <ph id=\"ph1\">`Program.cs`</ph>, a basic file containing the entry point for the application.","pos":[1417,1509],"source":"  It also creates a `Program.cs`, a basic file containing the entry point for the application."},{"pos":[1514,1529],"content":"<ph id=\"ph1\">`Hello.csproj`</ph>:","source":"`Hello.csproj`:"},{"content":"The project file specifies everything that's needed to restore dependencies and build the program.","pos":[1622,1720]},{"pos":[1727,1830],"content":"The <ph id=\"ph1\">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.","source":"The `OutputType` tag specifies that we're building an executable, in other words a console application."},{"content":"The <ph id=\"ph1\">`TargetFramework`</ph> tag specifies what .NET implementation we're targeting.","pos":[1836,1913],"source":"The `TargetFramework` tag specifies what .NET implementation we're targeting."},{"content":"In an advanced scenario, you can specify multiple target frameworks and build to all those in a single operation.","pos":[1914,2027]},{"content":"In this tutorial, we'll stick to building only for .NET Core 2.1.","pos":[2028,2093]},{"pos":[2098,2111],"content":"<ph id=\"ph1\">`Program.cs`</ph>:","source":"`Program.cs`:"},{"content":"The program starts by <ph id=\"ph1\">`using System`</ph>, which means \"bring everything in the <ph id=\"ph2\">`System`</ph> namespace into scope for this file\".","pos":[2207,2327],"source":"The program starts by `using System`, which means \"bring everything in the `System` namespace into scope for this file\"."},{"content":"The <ph id=\"ph1\">`System`</ph> namespace includes basic constructs such as <ph id=\"ph2\">`string`</ph>, or numeric types.","pos":[2328,2412],"source":" The `System` namespace includes basic constructs such as `string`, or numeric types."},{"content":"We then define a namespace called <ph id=\"ph1\">`Hello`</ph>.","pos":[2417,2459],"source":"We then define a namespace called `Hello`."},{"content":"You can change this to anything you want.","pos":[2460,2501]},{"content":"A class named <ph id=\"ph1\">`Program`</ph> is defined within that namespace, with a <ph id=\"ph2\">`Main`</ph> method that takes an array of strings as its argument.","pos":[2502,2628],"source":" A class named `Program` is defined within that namespace, with a `Main` method that takes an array of strings as its argument."},{"content":"This array contains the list of arguments passed in when the compiled program is called.","pos":[2629,2717]},{"content":"As it is, this array is not used: all the program is doing is to write \"Hello World!\"","pos":[2718,2803]},{"content":"to the console.","pos":[2804,2819]},{"content":"Later, we'll make changes to the code that will make use of this argument.","pos":[2820,2894]},{"content":"<ph id=\"ph1\">`dotnet new`</ph> calls <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`dotnet restore`</ph><ept id=\"p1\">](../tools/dotnet-restore.md)</ept> implicitly.","pos":[2970,3047],"source":"`dotnet new` calls [`dotnet restore`](../tools/dotnet-restore.md) implicitly."},{"content":"<ph id=\"ph1\">`dotnet restore`</ph> calls into <bpt id=\"p1\">[</bpt>NuGet<ept id=\"p1\">](https://www.nuget.org/)</ept> (.NET package manager) to restore the tree of dependencies.","pos":[3048,3167],"source":"`dotnet restore` calls into [NuGet](https://www.nuget.org/) (.NET package manager) to restore the tree of dependencies."},{"content":"NuGet analyzes the <bpt id=\"p1\">*</bpt>Hello.csproj<ept id=\"p1\">*</ept> file, downloads the dependencies defined in the file (or grabs them from a cache on your machine), and writes the <bpt id=\"p2\">*</bpt>obj/project.assets.json<ept id=\"p2\">*</ept> file, which is necessary to compile and run the sample.","pos":[3168,3397],"source":" NuGet analyzes the *Hello.csproj* file, downloads the dependencies defined in the file (or grabs them from a cache on your machine), and writes the *obj/project.assets.json* file, which is necessary to compile and run the sample."},{"pos":[3404,3547],"content":"[!IMPORTANT]\nIf you're using a .NET Core 1.x version of the SDK, you'll have to call `dotnet restore` yourself after calling `dotnet new`.","leadings":["","   > "],"nodes":[{"content":"If you're using a .NET Core 1.x version of the SDK, you'll have to call <ph id=\"ph1\">`dotnet restore`</ph> yourself after calling <ph id=\"ph2\">`dotnet new`</ph>.","pos":[13,138],"source":"If you're using a .NET Core 1.x version of the SDK, you'll have to call `dotnet restore` yourself after calling `dotnet new`."}]},{"pos":[3569,3776],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet run`</ph><ept id=\"p1\">](../tools/dotnet-run.md)</ept> calls <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`dotnet build`</ph><ept id=\"p2\">](../tools/dotnet-build.md)</ept> to ensure that the build targets have been built, and then calls <ph id=\"ph3\">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.","source":"[`dotnet run`](../tools/dotnet-run.md) calls [`dotnet build`](../tools/dotnet-build.md) to ensure that the build targets have been built, and then calls `dotnet <assembly.dll>` to run the target application."},{"content":"Alternatively, you can also execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet build`</ph><ept id=\"p1\">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.","pos":[3840,3986],"source":"Alternatively, you can also execute [`dotnet build`](../tools/dotnet-build.md) to compile the code without running the build console applications."},{"content":"This results in a compiled application as a DLL file that can be run with <ph id=\"ph1\">`dotnet bin\\Debug\\netcoreapp2.1\\Hello.dll`</ph> on Windows (use <ph id=\"ph2\">`/`</ph> for non-Windows systems).","pos":[3987,4149],"source":" This results in a compiled application as a DLL file that can be run with `dotnet bin\\Debug\\netcoreapp2.1\\Hello.dll` on Windows (use `/` for non-Windows systems)."},{"content":"You may also specify arguments to the application as you'll see later on the topic.","pos":[4150,4233]},{"content":"As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.","pos":[4327,4534]},{"content":"See <bpt id=\"p1\">[</bpt>.NET Core Application Deployment<ept id=\"p1\">](../deploying/index.md)</ept> for details.","pos":[4535,4609],"source":" See [.NET Core Application Deployment](../deploying/index.md) for details."},{"pos":[4615,4637],"content":"Augmenting the program","linkify":"Augmenting the program","nodes":[{"content":"Augmenting the program","pos":[0,22]}]},{"content":"Let's change the program a bit.","pos":[4639,4670]},{"content":"Fibonacci numbers are fun, so let's add that in addition to use the argument to greet the person running the app.","pos":[4671,4784]},{"pos":[4789,4861],"content":"Replace the contents of your <bpt id=\"p1\">*</bpt>Program.cs<ept id=\"p1\">*</ept>  file with the following code:","source":"Replace the contents of your *Program.cs*  file with the following code:"},{"pos":[4961,5035],"content":"Execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet build`</ph><ept id=\"p1\">](../tools/dotnet-build.md)</ept> to compile the changes.","source":"Execute [`dotnet build`](../tools/dotnet-build.md) to compile the changes."},{"content":"Run the program passing a parameter to the app:","pos":[5040,5087]},{"content":"And that's it!","pos":[5314,5328]},{"content":"You can augment <ph id=\"ph1\">`Program.cs`</ph> any way you like.","pos":[5330,5376],"source":"  You can augment `Program.cs` any way you like."},{"pos":[5381,5408],"content":"Working with multiple files","linkify":"Working with multiple files","nodes":[{"content":"Working with multiple files","pos":[0,27]}]},{"content":"Single files are fine for simple one-off programs, but if you're building a more complex app, you're probably going to have multiple source files on your project.","pos":[5410,5572]},{"content":"Let's build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive features.","pos":[5573,5688],"source":"\nLet's build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive features."},{"pos":[5693,5791],"content":"Add a new file inside the <bpt id=\"p1\">*</bpt>Hello<ept id=\"p1\">*</ept> directory named <bpt id=\"p2\">*</bpt>FibonacciGenerator.cs<ept id=\"p2\">*</ept> with the following code:","source":"Add a new file inside the *Hello* directory named *FibonacciGenerator.cs* with the following code:"},{"pos":[5917,6045],"content":"Change the <ph id=\"ph1\">`Main`</ph> method in your <bpt id=\"p1\">*</bpt>Program.cs<ept id=\"p1\">*</ept> file to instantiate the new class and call its method as in the following example:","source":"Change the `Main` method in your *Program.cs* file to instantiate the new class and call its method as in the following example:"},{"pos":[6155,6229],"content":"Execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet build`</ph><ept id=\"p1\">](../tools/dotnet-build.md)</ept> to compile the changes.","source":"Execute [`dotnet build`](../tools/dotnet-build.md) to compile the changes."},{"content":"Run your app by executing <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet run`</ph><ept id=\"p1\">](../tools/dotnet-run.md)</ept>.","pos":[6234,6299],"source":"Run your app by executing [`dotnet run`](../tools/dotnet-run.md)."},{"content":"The following shows the program output:","pos":[6300,6339]},{"content":"And that's it!","pos":[6465,6479]},{"content":"Now, you can start using the basic concepts learned here to create your own programs.","pos":[6480,6565]},{"content":"Note that the commands and steps shown in this tutorial to run your application are used during development time only.","pos":[6567,6685]},{"content":"Once you're ready to deploy your app, you'll want to take a look at the different <bpt id=\"p1\">[</bpt>deployment strategies<ept id=\"p1\">](../deploying/index.md)</ept> for .NET Core apps and the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet publish`</ph><ept id=\"p2\">](../tools/dotnet-publish.md)</ept> command.","pos":[6686,6897],"source":" Once you're ready to deploy your app, you'll want to take a look at the different [deployment strategies](../deploying/index.md) for .NET Core apps and the [`dotnet publish`](../tools/dotnet-publish.md) command."},{"pos":[6902,6910],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6914,6997],"content":"<bpt id=\"p1\">[</bpt>Organizing and testing projects with the .NET Core CLI tools<ept id=\"p1\">](testing-with-cli.md)</ept>","source":"[Organizing and testing projects with the .NET Core CLI tools](testing-with-cli.md)"}]}