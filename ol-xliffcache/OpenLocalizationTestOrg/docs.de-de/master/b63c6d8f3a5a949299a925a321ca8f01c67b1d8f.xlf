<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="service-operations-wcf-data-services.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b63c6d8f3a5a949299a925a321ca8f01c67b1d8f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\wcf\service-operations-wcf-data-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">787832b85373a85d10b388e8b706eca3a7de8d19</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61853a7eaabfeea3deb0081613e459ae42bfd9cd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Service Operations (WCF Data Services)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Service Operations (WCF Data Services)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ssAstoria](../../../../includes/ssastoria-md.md)]</ph> enables you to define service operations on a data service to expose methods on the server.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Like other data service resources, service operations are addressed by URIs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Service operations enable you to expose business logic in a data service, such as to implement validation logic, to apply role-based security, or to expose specialized querying capabilities.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Service operations are methods added to the data service class that derives from <ph id="ph1">&lt;xref:System.Data.Services.DataService%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Like all other data service resources, you can supply parameters to the service operation method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, the following service operation URI (based on the <bpt id="p1">[</bpt>quickstart<ept id="p1">](../../../../docs/framework/data/wcf/quickstart-wcf-data-services.md)</ept> data service) passes the value <ph id="ph1">`London`</ph> to the <ph id="ph2">`city`</ph> parameter:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The definition for this service operation is as follows:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Data.Services.DataService%601.CurrentDataSource%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Data.Services.DataService%601&gt;</ph> to directly access the data source that the data service is using.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Define a Service Operation<ept id="p1">](../../../../docs/framework/data/wcf/how-to-define-a-service-operation-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For information on how to call a service operation from a .NET Framework client application, see <bpt id="p1">[</bpt>Calling Service Operations<ept id="p1">](../../../../docs/framework/data/wcf/calling-service-operations-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Service Operation Requirements</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following requirements apply when defining service operations on the data service.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If a method does not meet these requirements, it will not be exposed as a service operation for the data service.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The operation must be a public instance method that is a member of the data service class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The operation method may only accept input parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Data sent in the message body cannot be accessed by the data service.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If parameters are defined, the type of each parameter must be a primitive type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Any data of a non-primitive type must be serialized and passed into a string parameter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The method must return one of the following:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`void`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An entity type in the data model that the data service exposes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A primitive class such as integer or string.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In order to support query options such as sorting, paging, and filtering, service operation methods should return <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Requests to service operations that include query options are rejected for operations that only return <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In order to support accessing related entities by using navigation properties, the service operation must return <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The method must be annotated with the <ph id="ph1">`[WebGet]`</ph> or <ph id="ph2">`[WebInvoke]`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[WebGet]`</ph> enables the method to be invoked by using a GET request.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[WebInvoke(Method = "POST")]`</ph> enables the method to be invoked by using a POST request.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Other <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> methods are not supported.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A service operation may be annotated with the <ph id="ph1">&lt;xref:System.Data.Services.SingleResultAttribute&gt;</ph> that specifies that the return value from the method is a single entity rather than a collection of entities.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This distinction dictates the resulting serialization of the response and the manner in which additional navigation property traversals are represented in the URI.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, when using AtomPub serialization, a single resource type instance is represented as an entry element and a set of instances as a feed element.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Addressing Service Operations</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can address service operations by placing the name of the method in the first path segment of a URI.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>As an example, the following URI accesses a <ph id="ph1">`GetOrdersByState`</ph> operation that returns an <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph> collection of <ph id="ph3">`Orders`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When calling a service operation, parameters are supplied as query options.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The previous service operation accepts both a string parameter <ph id="ph1">`state`</ph> and a Boolean parameter <ph id="ph2">`includeItems`</ph> that indicates whether to include related <ph id="ph3">`Order_Detail`</ph> objects in the response.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following are valid return types for a service operation:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Valid Return Types</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>URI Rules</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`void`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic)</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Entity types</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Primitive types</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The URI must be a single path segment that is the name of the service operation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Query options are not allowed.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The URI must be a single path segment that is the name of the service operation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Because the result type is not an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> type, query options are not allowed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Query path segments in addition to the path that is the name of the service operation are allowed.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Query options are also allowed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Additional path segments or query options may be added to the URI depending on the return type of the service operation.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, the following URI accesses a <ph id="ph1">`GetOrdersByCity`</ph> operation that returns an <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph> collection of <ph id="ph3">`Orders`</ph> objects, ordered by <ph id="ph4">`RequiredDate`</ph> in descending order, along with the related <ph id="ph5">`Order_Details`</ph> objects:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Service Operations Access Control</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Service-wide visibility of service operations is controlled by the <ph id="ph1">&lt;xref:System.Data.Services.IDataServiceConfiguration.SetServiceOperationAccessRule%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.Data.Services.IDataServiceConfiguration&gt;</ph> class in much the same way that entity set visibility is controlled by using the <ph id="ph3">&lt;xref:System.Data.Services.IDataServiceConfiguration.SetEntitySetAccessRule%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, the following line of code in the data service definition enables access to the <ph id="ph1">`CustomersByCity`</ph> service operation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If a service operation has a return type that has been hidden by restricting access on the underlying entity sets, then the service operation will not be available to client applications.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Define a Service Operation<ept id="p1">](../../../../docs/framework/data/wcf/how-to-define-a-service-operation-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Raising Exceptions</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>We recommend that you use the <ph id="ph1">&lt;xref:System.Data.Services.DataServiceException&gt;</ph> class whenever you raise an exception in the data service execution.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is because the data service runtime knows how to map properties of this exception object correctly to the HTTP response message.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When you raise a <ph id="ph1">&lt;xref:System.Data.Services.DataServiceException&gt;</ph> in a service operation, the returned exception is wrapped in a <ph id="ph2">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To return the base <ph id="ph1">&lt;xref:System.Data.Services.DataServiceException&gt;</ph> without the enclosing <ph id="ph2">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph>, you must override the <ph id="ph3">&lt;xref:System.Data.Services.DataService%601.HandleException%2A&gt;</ph> method in the <ph id="ph4">&lt;xref:System.Data.Services.DataService%601&gt;</ph>, extract the <ph id="ph5">&lt;xref:System.Data.Services.DataServiceException&gt;</ph> from the <ph id="ph6">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph>, and return it as the top-level error, as in the following example:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interceptors<ept id="p1">](../../../../docs/framework/data/wcf/interceptors-wcf-data-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>