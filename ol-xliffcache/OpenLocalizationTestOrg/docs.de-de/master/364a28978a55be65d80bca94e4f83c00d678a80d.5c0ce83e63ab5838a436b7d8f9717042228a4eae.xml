{"content":"---\ntitle: \"How to: Project an Anonymous Type (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 5cb9be13-5ac4-4373-a034-b3520a5b2dec\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Project an Anonymous Type (C#)\nIn some cases you might want to project a query to a new type, even though you know you will only use this type for a short while. It is a lot of extra work to create a new type just to use in the projection. A more efficient approach in this case is to project to an anonymous type. Anonymous types allow you to define a class, then declare and initialize an object of that class, without giving the class a name.  \n  \n Anonymous types are the C# implementation of the mathematical concept of a *tuple*. The mathematical term tuple originated from the sequence single, double, triple, quadruple, quintuple, n-tuple. It refers to a finite sequence of objects, each of a specific type. Sometimes this is called a list of name/value pairs. For example, the contents of an address in the [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md) XML document could be expressed as follows:  \n  \n```  \nName: Ellen Adams  \nStreet: 123 Maple Street  \nCity: Mill Valley  \nState: CA  \nZip: 90952  \nCountry: USA  \n```  \n  \n When you create an instance of an anonymous type, it is convenient to think of it as creating a tuple of order n. If you write a query that creates a tuple in the `select` clause, the query returns an `IEnumerable` of the tuple.  \n  \n## Example  \n In this example, the `select` clause projects an anonymous type. The example then uses `var` to create the `IEnumerable` object. Within the `foreach` loop, the iteration variable becomes an instance of the anonymous type created in the query expression.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md).  \n  \n```csharp  \nXElement custOrd = XElement.Load(\"CustomersOrders.xml\");  \nvar custList =  \n    from el in custOrd.Element(\"Customers\").Elements(\"Customer\")  \n    select new {  \n        CustomerID = (string)el.Attribute(\"CustomerID\"),  \n        CompanyName = (string)el.Element(\"CompanyName\"),  \n        ContactName = (string)el.Element(\"ContactName\")  \n    };  \nforeach (var cust in custList)  \n    Console.WriteLine(\"{0}:{1}:{2}\", cust.CustomerID, cust.CompanyName, cust.ContactName);  \n```  \n  \n This code produces the following output:  \n  \n```  \nGREAL:Great Lakes Food Market:Howard Snyder  \nHUNGC:Hungry Coyote Import Store:Yoshi Latimer  \nLAZYK:Lazy K Kountry Store:John Steel  \nLETSS:Let's Stop N Shop:Jaime Yorres  \n```  \n  \n## See Also  \n [Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)","nodes":[{"pos":[12,67],"content":"How to: Project an Anonymous Type (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Project an Anonymous Type (C#) | Microsoft Docs","pos":[0,55]}]},{"pos":[352,390],"content":"How to: Project an Anonymous Type (C#)","linkify":"How to: Project an Anonymous Type (C#)","nodes":[{"content":"How to: Project an Anonymous Type (C#)","pos":[0,38]}]},{"content":"In some cases you might want to project a query to a new type, even though you know you will only use this type for a short while.","pos":[391,521]},{"content":"It is a lot of extra work to create a new type just to use in the projection.","pos":[522,599]},{"content":"A more efficient approach in this case is to project to an anonymous type.","pos":[600,674]},{"content":"Anonymous types allow you to define a class, then declare and initialize an object of that class, without giving the class a name.","pos":[675,805]},{"content":"Anonymous types are the C# implementation of the mathematical concept of a <bpt id=\"p1\">*</bpt>tuple<ept id=\"p1\">*</ept>.","pos":[812,895],"source":"Anonymous types are the C# implementation of the mathematical concept of a *tuple*."},{"content":"The mathematical term tuple originated from the sequence single, double, triple, quadruple, quintuple, n-tuple.","pos":[896,1007]},{"content":"It refers to a finite sequence of objects, each of a specific type.","pos":[1008,1075]},{"content":"Sometimes this is called a list of name/value pairs.","pos":[1076,1128]},{"content":"For example, the contents of an address in the <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md)</ept> XML document could be expressed as follows:","pos":[1129,1383],"source":" For example, the contents of an address in the [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md) XML document could be expressed as follows:"},{"content":"When you create an instance of an anonymous type, it is convenient to think of it as creating a tuple of order n.","pos":[1512,1625]},{"content":"If you write a query that creates a tuple in the <ph id=\"ph1\">`select`</ph> clause, the query returns an <ph id=\"ph2\">`IEnumerable`</ph> of the tuple.","pos":[1626,1740],"source":" If you write a query that creates a tuple in the `select` clause, the query returns an `IEnumerable` of the tuple."},{"pos":[1749,1756],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the <ph id=\"ph1\">`select`</ph> clause projects an anonymous type.","pos":[1760,1824],"source":"In this example, the `select` clause projects an anonymous type."},{"content":"The example then uses <ph id=\"ph1\">`var`</ph> to create the <ph id=\"ph2\">`IEnumerable`</ph> object.","pos":[1825,1888],"source":" The example then uses `var` to create the `IEnumerable` object."},{"content":"Within the <ph id=\"ph1\">`foreach`</ph> loop, the iteration variable becomes an instance of the anonymous type created in the query expression.","pos":[1889,2013],"source":" Within the `foreach` loop, the iteration variable becomes an instance of the anonymous type created in the query expression."},{"pos":[2020,2226],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)."},{"content":"This code produces the following output:","pos":[2727,2767]},{"pos":[2965,2973],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2977,3128],"content":"<bpt id=\"p1\">[</bpt>Projections and Transformations (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","source":"[Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}