{"content":"---\ntitle: \"Enabling a Data Source for LINQ Querying2\"\nms.date: 07/20/2015\nms.assetid: c412f0cf-ff0e-4993-ab3d-1b49e23f00f8\n---\n# Enabling a Data Source for LINQ Querying\n\nThere are various ways to extend [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] to enable any data source to be queried in the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern. The data source might be a data structure, a Web service, a file system, or a database, to name some. The [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern makes it easy for clients to query a data source for which [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] querying is enabled, because the syntax and pattern of the query does not change. The ways in which [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] can be extended to these data sources include the following:\n\n-   Implementing the <xref:System.Collections.Generic.IEnumerable%601> interface in a type to enable [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] to Objects querying of that type.\n\n-   Creating standard query operator methods such as <xref:System.Linq.Enumerable.Where%2A> and <xref:System.Linq.Enumerable.Select%2A> that extend a type, to enable custom [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] querying of that type.\n\n-   Creating a provider for your data source that implements the <xref:System.Linq.IQueryable%601> interface. A provider that implements this interface receives [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries in the form of expression trees, which it can execute in a custom way, for example remotely.\n\n-   Creating a provider for your data source that takes advantage of an existing [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] technology. Such a provider would enable not only querying, but also insert, update, and delete operations and mapping for user-defined types.\n\nThis topic discusses these options.\n\n## How to Enable LINQ Querying of Your Data Source\n\n### In-Memory Data\n There are two ways you can enable [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] querying of in-memory data. If the data is of a type that implements <xref:System.Collections.Generic.IEnumerable%601>, you can query the data by using [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] to Objects. If it does not make sense to enable enumeration of your type by implementing the <xref:System.Collections.Generic.IEnumerable%601> interface, you can define [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] standard query operator methods in that type or create [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] standard query operator methods that extend the type. Custom implementations of the standard query operators should use deferred execution to return the results.\n\n### Remote Data\n The best option for enabling [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] querying of a remote data source is to implement the <xref:System.Linq.IQueryable%601> interface. However, this differs from extending a provider such as [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] for a data source. No provider models for extending existing [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] technologies, such as [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)], to other types of data source are available in Visual Studio 2008.\n\n## IQueryable LINQ Providers\n [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] providers that implement <xref:System.Linq.IQueryable%601> can vary widely in their complexity. This section discusses the different levels of complexity.\n\n A less complex `IQueryable` provider might interface with a single method of a Web service. This type of provider is very specific because it expects specific information in the queries that it handles. It has a closed type system, perhaps exposing a single result type. Most of the execution of the query occurs locally, for example by using the <xref:System.Linq.Enumerable> implementations of the standard query operators. A less complex provider might examine only one method call expression in the expression tree that represents the query, and let the remaining logic of the query be handled elsewhere.\n\n An `IQueryable` provider of medium complexity might target a data source that has a partially expressive query language. If it targets a Web service, it might interface with more than one method of the Web service and select the method to call based on the question that the query poses. A provider of medium complexity would have a richer type system than a simple provider, but it would still be a fixed type system. For example, the provider might expose types that have one-to-many relationships that can be traversed, but it would not provide mapping technology for user-defined types.\n\n A complex `IQueryable` provider, such as the [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] provider, might translate complete [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries to an expressive query language, such as SQL. A complex provider is more general than a less complex provider, because it can handle a wider variety of questions in the query. It also has an open type system and therefore must contain extensive infrastructure to map user-defined types. Developing a complex provider requires a significant amount of effort.\n\n## See also\n\n- <xref:System.Linq.IQueryable%601>\n- <xref:System.Collections.Generic.IEnumerable%601>\n- <xref:System.Linq.Enumerable>\n- [Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)\n- [LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)","nodes":[{"pos":[4,123],"embed":true,"restype":"x-metadata","content":"title: \"Enabling a Data Source for LINQ Querying2\"\nms.date: 07/20/2015\nms.assetid: c412f0cf-ff0e-4993-ab3d-1b49e23f00f8","nodes":[{"content":"Enabling a Data Source for LINQ Querying2","nodes":[{"pos":[0,41],"content":"Enabling a Data Source for LINQ Querying2","nodes":[{"content":"Enabling a Data Source for LINQ Querying2","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[130,170],"content":"Enabling a Data Source for LINQ Querying","linkify":"Enabling a Data Source for LINQ Querying","nodes":[{"content":"Enabling a Data Source for LINQ Querying","pos":[0,40]}]},{"content":"There are various ways to extend <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> to enable any data source to be queried in the <ph id=\"ph2\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern.","pos":[172,360],"source":"There are various ways to extend [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] to enable any data source to be queried in the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern."},{"content":"The data source might be a data structure, a Web service, a file system, or a database, to name some.","pos":[361,462]},{"content":"The <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern makes it easy for clients to query a data source for which <ph id=\"ph2\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> querying is enabled, because the syntax and pattern of the query does not change.","pos":[463,715],"source":" The [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern makes it easy for clients to query a data source for which [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] querying is enabled, because the syntax and pattern of the query does not change."},{"content":"The ways in which <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> can be extended to these data sources include the following:","pos":[716,844],"source":" The ways in which [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] can be extended to these data sources include the following:"},{"pos":[850,1030],"content":"Implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface in a type to enable <ph id=\"ph2\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> to Objects querying of that type.","source":"Implementing the <xref:System.Collections.Generic.IEnumerable%601> interface in a type to enable [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] to Objects querying of that type."},{"pos":[1036,1277],"content":"Creating standard query operator methods such as <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> that extend a type, to enable custom <ph id=\"ph3\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> querying of that type.","source":"Creating standard query operator methods such as <xref:System.Linq.Enumerable.Where%2A> and <xref:System.Linq.Enumerable.Select%2A> that extend a type, to enable custom [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] querying of that type."},{"content":"Creating a provider for your data source that implements the <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface.","pos":[1283,1388],"source":"Creating a provider for your data source that implements the <xref:System.Linq.IQueryable%601> interface."},{"content":"A provider that implements this interface receives <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> queries in the form of expression trees, which it can execute in a custom way, for example remotely.","pos":[1389,1590],"source":" A provider that implements this interface receives [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries in the form of expression trees, which it can execute in a custom way, for example remotely."},{"content":"Creating a provider for your data source that takes advantage of an existing <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> technology.","pos":[1596,1734],"source":"Creating a provider for your data source that takes advantage of an existing [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] technology."},{"content":"Such a provider would enable not only querying, but also insert, update, and delete operations and mapping for user-defined types.","pos":[1735,1865]},{"content":"This topic discusses these options.","pos":[1867,1902]},{"pos":[1907,1954],"content":"How to Enable LINQ Querying of Your Data Source","linkify":"How to Enable LINQ Querying of Your Data Source","nodes":[{"content":"How to Enable LINQ Querying of Your Data Source","pos":[0,47]}]},{"pos":[1960,1974],"content":"In-Memory Data","linkify":"In-Memory Data","nodes":[{"content":"In-Memory Data","pos":[0,14]}]},{"content":"There are two ways you can enable <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> querying of in-memory data.","pos":[1976,2087],"source":"There are two ways you can enable [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] querying of in-memory data."},{"content":"If the data is of a type that implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can query the data by using <ph id=\"ph2\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> to Objects.","pos":[2088,2273],"source":" If the data is of a type that implements <xref:System.Collections.Generic.IEnumerable%601>, you can query the data by using [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] to Objects."},{"content":"If it does not make sense to enable enumeration of your type by implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, you can define <ph id=\"ph2\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> standard query operator methods in that type or create <ph id=\"ph3\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> standard query operator methods that extend the type.","pos":[2274,2639],"source":" If it does not make sense to enable enumeration of your type by implementing the <xref:System.Collections.Generic.IEnumerable%601> interface, you can define [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] standard query operator methods in that type or create [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] standard query operator methods that extend the type."},{"content":"Custom implementations of the standard query operators should use deferred execution to return the results.","pos":[2640,2747]},{"pos":[2753,2764],"content":"Remote Data","linkify":"Remote Data","nodes":[{"content":"Remote Data","pos":[0,11]}]},{"content":"The best option for enabling <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> querying of a remote data source is to implement the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface.","pos":[2766,2942],"source":"The best option for enabling [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] querying of a remote data source is to implement the <xref:System.Linq.IQueryable%601> interface."},{"content":"However, this differs from extending a provider such as <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> for a data source.","pos":[2943,3069],"source":" However, this differs from extending a provider such as [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] for a data source."},{"content":"No provider models for extending existing <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> technologies, such as <ph id=\"ph2\">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph>, to other types of data source are available in Visual Studio 2008.","pos":[3070,3303],"source":" No provider models for extending existing [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] technologies, such as [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)], to other types of data source are available in Visual Studio 2008."},{"pos":[3308,3333],"content":"IQueryable LINQ Providers","linkify":"IQueryable LINQ Providers","nodes":[{"content":"IQueryable LINQ Providers","pos":[0,25]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> providers that implement <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> can vary widely in their complexity.","pos":[3335,3480],"source":"[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] providers that implement <xref:System.Linq.IQueryable%601> can vary widely in their complexity."},{"content":"This section discusses the different levels of complexity.","pos":[3481,3539]},{"content":"A less complex <ph id=\"ph1\">`IQueryable`</ph> provider might interface with a single method of a Web service.","pos":[3542,3633],"source":"A less complex `IQueryable` provider might interface with a single method of a Web service."},{"content":"This type of provider is very specific because it expects specific information in the queries that it handles.","pos":[3634,3744]},{"content":"It has a closed type system, perhaps exposing a single result type.","pos":[3745,3812]},{"content":"Most of the execution of the query occurs locally, for example by using the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable&gt;</ph> implementations of the standard query operators.","pos":[3813,3967],"source":" Most of the execution of the query occurs locally, for example by using the <xref:System.Linq.Enumerable> implementations of the standard query operators."},{"content":"A less complex provider might examine only one method call expression in the expression tree that represents the query, and let the remaining logic of the query be handled elsewhere.","pos":[3968,4150]},{"content":"An <ph id=\"ph1\">`IQueryable`</ph> provider of medium complexity might target a data source that has a partially expressive query language.","pos":[4153,4273],"source":"An `IQueryable` provider of medium complexity might target a data source that has a partially expressive query language."},{"content":"If it targets a Web service, it might interface with more than one method of the Web service and select the method to call based on the question that the query poses.","pos":[4274,4440]},{"content":"A provider of medium complexity would have a richer type system than a simple provider, but it would still be a fixed type system.","pos":[4441,4571]},{"content":"For example, the provider might expose types that have one-to-many relationships that can be traversed, but it would not provide mapping technology for user-defined types.","pos":[4572,4743]},{"content":"A complex <ph id=\"ph1\">`IQueryable`</ph> provider, such as the <ph id=\"ph2\">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> provider, might translate complete <ph id=\"ph3\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> queries to an expressive query language, such as SQL.","pos":[4746,4981],"source":"A complex `IQueryable` provider, such as the [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] provider, might translate complete [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries to an expressive query language, such as SQL."},{"content":"A complex provider is more general than a less complex provider, because it can handle a wider variety of questions in the query.","pos":[4982,5111]},{"content":"It also has an open type system and therefore must contain extensive infrastructure to map user-defined types.","pos":[5112,5222]},{"content":"Developing a complex provider requires a significant amount of effort.","pos":[5223,5293]},{"pos":[5298,5306],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5430,5575],"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>","source":"[Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)"},{"pos":[5578,5687],"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept>","source":"[LINQ to Objects (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)"}]}