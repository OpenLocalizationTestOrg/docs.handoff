{"content":"---\ntitle: \"How to: Create an Add-In That Is a UI\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"creating an add-in that is a UI [WPF]\"\n  - \"add-ins [WPF], UI\"\n  - \"creating UI add-ins [WPF]\"\n  - \"UI add-ins [WPF], creating\"\n  - \"implementing UI add-ins [WPF]\"\n  - \"pipeline segments [WPF], creating add-ins\"\nms.assetid: 86375525-282b-4039-8352-8680051a10ea\n---\n# How to: Create an Add-In That Is a UI\nThis example shows how to create an add-in that is a Windows Presentation Foundation (WPF) which is hosted by a WPF standalone application.  \n  \n The add-in is a UI that is a WPF user control. The content of the user control is a single button that, when clicked, displays a message box. The WPF standalone application hosts the add-in UI as the content of the main application window.  \n  \n **Prerequisites**  \n  \n This example highlights the WPF extensions to the .NET Framework add-in model that enable this scenario, and assumes the following:  \n  \n-   Knowledge of the .NET Framework add-in model, including pipeline, add-in, and host development. If you are unfamiliar with these concepts, see [Add-ins and Extensibility](/previous-versions/dotnet/netframework-4.0/bb384200(v%3dvs.100)). For a tutorial that demonstrates the implementation of a pipeline, an add-in, and a host application, see [Walkthrough: Creating an Extensible Application](/previous-versions/dotnet/netframework-4.0/bb788290(v%3dvs.100)).  \n  \n-   Knowledge of the WPF extensions to the .NET Framework add-in model. See [WPF Add-Ins Overview](wpf-add-ins-overview.md).  \n  \n## Example  \n To create an add-in that is a WPF UI requires specific code for each pipeline segment, the add-in, and the host application.  \n\n<a name=\"Contract\"></a>   \n## Implementing the Contract Pipeline Segment  \n When an add-in is a UI, the contract for the add-in must implement <xref:System.AddIn.Contract.INativeHandleContract>. In the example, `IWPFAddInContract` implements <xref:System.AddIn.Contract.INativeHandleContract>, as shown in the following code.  \n  \n [!code-csharp[SimpleAddInIsAUISample#ContractCode](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleAddInIsAUISample/CSharp/Contracts/IWPFAddInContract.cs#contractcode)]  \n  \n<a name=\"AddInViewPipeline\"></a>   \n## Implementing the Add-In View Pipeline Segment  \n Because the add-in is implemented as a subclass of the <xref:System.Windows.FrameworkElement> type, the add-in view must also subclass <xref:System.Windows.FrameworkElement>. The following code shows the add-in view of the contract, implemented as the `WPFAddInView` class.  \n  \n [!code-csharp[SimpleAddInIsAUISample#AddInViewCode](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleAddInIsAUISample/CSharp/AddInViews/WPFAddInView.cs#addinviewcode)]  \n  \n Here, the add-in view is derived from <xref:System.Windows.Controls.UserControl>. Consequently, the add-in UI should also derive from <xref:System.Windows.Controls.UserControl>.  \n  \n<a name=\"AddInSideAdapter\"></a>   \n## Implementing the Add-In-Side Adapter Pipeline Segment  \n While the contract is an <xref:System.AddIn.Contract.INativeHandleContract>, the add-in is a <xref:System.Windows.FrameworkElement> (as specified by the add-in view pipeline segment). Therefore, the <xref:System.Windows.FrameworkElement> must be converted to an <xref:System.AddIn.Contract.INativeHandleContract> before crossing the isolation boundary. This work is performed by the add-in-side adapter by calling <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A>, as shown in the following code.  \n  \n [!code-csharp[SimpleAddInIsAUISample#AddInSideAdapterCode](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleAddInIsAUISample/CSharp/AddInSideAdapters/WPFAddIn_ViewToContractAddInSideAdapter.cs#addinsideadaptercode)]  \n  \n In the add-in model where an add-in returns a UI (see [Create an Add-In That Returns a UI](how-to-create-an-add-in-that-returns-a-ui.md)), the add-in adapter converted the <xref:System.Windows.FrameworkElement> to an <xref:System.AddIn.Contract.INativeHandleContract> by calling <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A>. <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A> must also be called in this model, although you need to implement a method from which to write the code to call it. You do this by overriding <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> and implementing the code that calls <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A> if the code that is calling <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> is expecting an <xref:System.AddIn.Contract.INativeHandleContract>. In this case, the caller will be the host-side adapter, which is covered in a subsequent subsection.  \n  \n> [!NOTE]\n>  You also need to override <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> in this model to enable tabbing between host application UI and add-in UI. For more information, see \"WPF Add-In Limitations\" in [WPF Add-Ins Overview](wpf-add-ins-overview.md).  \n  \n Because the add-in-side adapter implements an interface that derives from <xref:System.AddIn.Contract.INativeHandleContract>, you also need to implement <xref:System.AddIn.Contract.INativeHandleContract.GetHandle%2A>, although this is ignored when <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> is overridden.  \n  \n<a name=\"HostViewPipeline\"></a>   \n## Implementing the Host View Pipeline Segment  \n In this model, the host application typically expects the host view to be a <xref:System.Windows.FrameworkElement> subclass. The host-side adapter must convert the <xref:System.AddIn.Contract.INativeHandleContract> to a <xref:System.Windows.FrameworkElement> after the <xref:System.AddIn.Contract.INativeHandleContract> crosses the isolation boundary. Because a method isn't being called by the host application to get the <xref:System.Windows.FrameworkElement>, the host view must \"return\" the <xref:System.Windows.FrameworkElement> by containing it. Consequently, the host view must derive from a subclass of <xref:System.Windows.FrameworkElement> that can contain other [!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)], such as <xref:System.Windows.Controls.UserControl>. The following code shows the host view of the contract, implemented as the `WPFAddInHostView` class.  \n\n<a name=\"HostSideAdapter\"></a>   \n## Implementing the Host-Side Adapter Pipeline Segment  \n While the contract is an <xref:System.AddIn.Contract.INativeHandleContract>, the host application expects a <xref:System.Windows.Controls.UserControl> (as specified by the host view). Consequently, the <xref:System.AddIn.Contract.INativeHandleContract> must be converted to a <xref:System.Windows.FrameworkElement> after crossing the isolation boundary, before being set as content of the host view (which derives from <xref:System.Windows.Controls.UserControl>).  \n  \n This work is performed by the host-side adapter, as shown in the following code.  \n\n As you can see, the host-side adapter acquires the <xref:System.AddIn.Contract.INativeHandleContract> by calling the add-in-side adapter's <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> method (this is the point where the <xref:System.AddIn.Contract.INativeHandleContract> crosses the isolation boundary).  \n  \n The host-side adapter then converts the <xref:System.AddIn.Contract.INativeHandleContract> to a <xref:System.Windows.FrameworkElement> by calling <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A>. Finally, the <xref:System.Windows.FrameworkElement> is set as the content of the host view.  \n  \n<a name=\"AddIn\"></a>   \n## Implementing the Add-In  \n With the add-in-side adapter and add-in view in place, the add-in can be implemented by deriving from the add-in view, as shown in the following code.  \n\n From this example, you can see one interesting benefit of this model: add-in developers only need to implement the add-in (since it is the UI as well), rather than both an add-in class and an add-in UI.  \n  \n<a name=\"HostApp\"></a>   \n## Implementing the Host Application  \n With the host-side adapter and host view created, the host application can use the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] add-in model to open the pipeline and acquire a host view of the add-in. These steps are shown in the following code.  \n\n The host application uses typical .NET Framework add-in model code to activate the add-in, which implicitly returns the host view to the host application. The host application subsequently displays the host view (which is a <xref:System.Windows.Controls.UserControl>) from a <xref:System.Windows.Controls.Grid>.  \n  \n The code for processing interactions with the add-in UI runs in the add-in's application domain. These interactions include the following:  \n  \n-   Handling the <xref:System.Windows.Controls.Button><xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.  \n  \n-   Showing the <xref:System.Windows.MessageBox>.  \n  \n This activity is completely isolated from the host application.  \n  \n## See also\n\n- [Add-ins and Extensibility](/previous-versions/dotnet/netframework-4.0/bb384200(v%3dvs.100))\n- [WPF Add-Ins Overview](wpf-add-ins-overview.md)\n","nodes":[{"pos":[4,360],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create an Add-In That Is a UI\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"creating an add-in that is a UI [WPF]\"\n  - \"add-ins [WPF], UI\"\n  - \"creating UI add-ins [WPF]\"\n  - \"UI add-ins [WPF], creating\"\n  - \"implementing UI add-ins [WPF]\"\n  - \"pipeline segments [WPF], creating add-ins\"\nms.assetid: 86375525-282b-4039-8352-8680051a10ea","nodes":[{"content":"How to: Create an Add-In That Is a UI","nodes":[{"pos":[0,37],"content":"How to: Create an Add-In That Is a UI","nodes":[{"content":"How to: Create an Add-In That Is a UI","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[367,404],"content":"How to: Create an Add-In That Is a UI","linkify":"How to: Create an Add-In That Is a UI","nodes":[{"content":"How to: Create an Add-In That Is a UI","pos":[0,37]}]},{"content":"This example shows how to create an add-in that is a Windows Presentation Foundation (WPF) which is hosted by a WPF standalone application.","pos":[405,544]},{"content":"The add-in is a UI that is a WPF user control.","pos":[551,597]},{"content":"The content of the user control is a single button that, when clicked, displays a message box.","pos":[598,692]},{"content":"The WPF standalone application hosts the add-in UI as the content of the main application window.","pos":[693,790]},{"pos":[797,814],"content":"<bpt id=\"p1\">**</bpt>Prerequisites<ept id=\"p1\">**</ept>","source":"**Prerequisites**"},{"content":"This example highlights the WPF extensions to the .NET Framework add-in model that enable this scenario, and assumes the following:","pos":[821,952]},{"content":"Knowledge of the .NET Framework add-in model, including pipeline, add-in, and host development.","pos":[962,1057]},{"content":"If you are unfamiliar with these concepts, see <bpt id=\"p1\">[</bpt>Add-ins and Extensibility<ept id=\"p1\">](/previous-versions/dotnet/netframework-4.0/bb384200(v%3dvs.100))</ept>.","pos":[1058,1198],"source":" If you are unfamiliar with these concepts, see [Add-ins and Extensibility](/previous-versions/dotnet/netframework-4.0/bb384200(v%3dvs.100))."},{"content":"For a tutorial that demonstrates the implementation of a pipeline, an add-in, and a host application, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating an Extensible Application<ept id=\"p1\">](/previous-versions/dotnet/netframework-4.0/bb788290(v%3dvs.100))</ept>.","pos":[1199,1420],"source":" For a tutorial that demonstrates the implementation of a pipeline, an add-in, and a host application, see [Walkthrough: Creating an Extensible Application](/previous-versions/dotnet/netframework-4.0/bb788290(v%3dvs.100))."},{"content":"Knowledge of the WPF extensions to the .NET Framework add-in model.","pos":[1430,1497]},{"content":"See <bpt id=\"p1\">[</bpt>WPF Add-Ins Overview<ept id=\"p1\">](wpf-add-ins-overview.md)</ept>.","pos":[1498,1550],"source":" See [WPF Add-Ins Overview](wpf-add-ins-overview.md)."},{"pos":[1559,1566],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"To create an add-in that is a WPF UI requires specific code for each pipeline segment, the add-in, and the host application.","pos":[1570,1694]},{"pos":[1728,1770],"content":"Implementing the Contract Pipeline Segment","linkify":"Implementing the Contract Pipeline Segment","nodes":[{"content":"Implementing the Contract Pipeline Segment","pos":[0,42]}]},{"content":"When an add-in is a UI, the contract for the add-in must implement <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>.","pos":[1774,1892],"source":"When an add-in is a UI, the contract for the add-in must implement <xref:System.AddIn.Contract.INativeHandleContract>."},{"content":"In the example, <ph id=\"ph1\">`IWPFAddInContract`</ph> implements <ph id=\"ph2\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, as shown in the following code.","pos":[1893,2023],"source":" In the example, `IWPFAddInContract` implements <xref:System.AddIn.Contract.INativeHandleContract>, as shown in the following code."},{"pos":[2243,2288],"content":"Implementing the Add-In View Pipeline Segment","linkify":"Implementing the Add-In View Pipeline Segment","nodes":[{"content":"Implementing the Add-In View Pipeline Segment","pos":[0,45]}]},{"content":"Because the add-in is implemented as a subclass of the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> type, the add-in view must also subclass <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.","pos":[2292,2466],"source":"Because the add-in is implemented as a subclass of the <xref:System.Windows.FrameworkElement> type, the add-in view must also subclass <xref:System.Windows.FrameworkElement>."},{"content":"The following code shows the add-in view of the contract, implemented as the <ph id=\"ph1\">`WPFAddInView`</ph> class.","pos":[2467,2565],"source":" The following code shows the add-in view of the contract, implemented as the `WPFAddInView` class."},{"content":"Here, the add-in view is derived from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.","pos":[2745,2826],"source":"Here, the add-in view is derived from <xref:System.Windows.Controls.UserControl>."},{"content":"Consequently, the add-in UI should also derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.","pos":[2827,2922],"source":" Consequently, the add-in UI should also derive from <xref:System.Windows.Controls.UserControl>."},{"pos":[2966,3019],"content":"Implementing the Add-In-Side Adapter Pipeline Segment","linkify":"Implementing the Add-In-Side Adapter Pipeline Segment","nodes":[{"content":"Implementing the Add-In-Side Adapter Pipeline Segment","pos":[0,53]}]},{"content":"While the contract is an <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, the add-in is a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> (as specified by the add-in view pipeline segment).","pos":[3023,3206],"source":"While the contract is an <xref:System.AddIn.Contract.INativeHandleContract>, the add-in is a <xref:System.Windows.FrameworkElement> (as specified by the add-in view pipeline segment)."},{"content":"Therefore, the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> must be converted to an <ph id=\"ph2\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> before crossing the isolation boundary.","pos":[3207,3375],"source":" Therefore, the <xref:System.Windows.FrameworkElement> must be converted to an <xref:System.AddIn.Contract.INativeHandleContract> before crossing the isolation boundary."},{"content":"This work is performed by the add-in-side adapter by calling <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph>, as shown in the following code.","pos":[3376,3548],"source":" This work is performed by the add-in-side adapter by calling <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A>, as shown in the following code."},{"content":"In the add-in model where an add-in returns a UI (see <bpt id=\"p1\">[</bpt>Create an Add-In That Returns a UI<ept id=\"p1\">](how-to-create-an-add-in-that-returns-a-ui.md)</ept>), the add-in adapter converted the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> to an <ph id=\"ph2\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> by calling <ph id=\"ph3\">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph>.","pos":[3776,4134],"source":"In the add-in model where an add-in returns a UI (see [Create an Add-In That Returns a UI](how-to-create-an-add-in-that-returns-a-ui.md)), the add-in adapter converted the <xref:System.Windows.FrameworkElement> to an <xref:System.AddIn.Contract.INativeHandleContract> by calling <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph> must also be called in this model, although you need to implement a method from which to write the code to call it.","pos":[4135,4329],"source":"<xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A> must also be called in this model, although you need to implement a method from which to write the code to call it."},{"content":"You do this by overriding <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> and implementing the code that calls <ph id=\"ph2\">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph> if the code that is calling <ph id=\"ph3\">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> is expecting an <ph id=\"ph4\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>.","pos":[4330,4685],"source":" You do this by overriding <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> and implementing the code that calls <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A> if the code that is calling <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> is expecting an <xref:System.AddIn.Contract.INativeHandleContract>."},{"content":"In this case, the caller will be the host-side adapter, which is covered in a subsequent subsection.","pos":[4686,4786]},{"pos":[4794,5067],"content":"[!NOTE]\n You also need to override <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> in this model to enable tabbing between host application UI and add-in UI. For more information, see \"WPF Add-In Limitations\" in [WPF Add-Ins Overview](wpf-add-ins-overview.md).","leadings":["","> "],"nodes":[{"content":"You also need to override <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> in this model to enable tabbing between host application UI and add-in UI. For more information, see \"WPF Add-In Limitations\" in [WPF Add-Ins Overview](wpf-add-ins-overview.md).","pos":[9,271],"nodes":[{"content":"You also need to override <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> in this model to enable tabbing between host application UI and add-in UI.","pos":[0,159],"source":"You also need to override <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> in this model to enable tabbing between host application UI and add-in UI."},{"content":"For more information, see \"WPF Add-In Limitations\" in <bpt id=\"p1\">[</bpt>WPF Add-Ins Overview<ept id=\"p1\">](wpf-add-ins-overview.md)</ept>.","pos":[160,262],"source":" For more information, see \"WPF Add-In Limitations\" in [WPF Add-Ins Overview](wpf-add-ins-overview.md)."}]}]},{"pos":[5074,5395],"content":"Because the add-in-side adapter implements an interface that derives from <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, you also need to implement <ph id=\"ph2\">&lt;xref:System.AddIn.Contract.INativeHandleContract.GetHandle%2A&gt;</ph>, although this is ignored when <ph id=\"ph3\">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> is overridden.","source":"Because the add-in-side adapter implements an interface that derives from <xref:System.AddIn.Contract.INativeHandleContract>, you also need to implement <xref:System.AddIn.Contract.INativeHandleContract.GetHandle%2A>, although this is ignored when <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> is overridden."},{"pos":[5439,5482],"content":"Implementing the Host View Pipeline Segment","linkify":"Implementing the Host View Pipeline Segment","nodes":[{"content":"Implementing the Host View Pipeline Segment","pos":[0,43]}]},{"content":"In this model, the host application typically expects the host view to be a <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> subclass.","pos":[5486,5610],"source":"In this model, the host application typically expects the host view to be a <xref:System.Windows.FrameworkElement> subclass."},{"content":"The host-side adapter must convert the <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> after the <ph id=\"ph3\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> crosses the isolation boundary.","pos":[5611,5837],"source":" The host-side adapter must convert the <xref:System.AddIn.Contract.INativeHandleContract> to a <xref:System.Windows.FrameworkElement> after the <xref:System.AddIn.Contract.INativeHandleContract> crosses the isolation boundary."},{"content":"Because a method isn't being called by the host application to get the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, the host view must \"return\" the <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> by containing it.","pos":[5838,6037],"source":" Because a method isn't being called by the host application to get the <xref:System.Windows.FrameworkElement>, the host view must \"return\" the <xref:System.Windows.FrameworkElement> by containing it."},{"content":"Consequently, the host view must derive from a subclass of <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that can contain other <ph id=\"ph2\">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph>, such as <ph id=\"ph3\">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.","pos":[6038,6297],"source":" Consequently, the host view must derive from a subclass of <xref:System.Windows.FrameworkElement> that can contain other [!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)], such as <xref:System.Windows.Controls.UserControl>."},{"content":"The following code shows the host view of the contract, implemented as the <ph id=\"ph1\">`WPFAddInHostView`</ph> class.","pos":[6298,6398],"source":" The following code shows the host view of the contract, implemented as the `WPFAddInHostView` class."},{"pos":[6439,6490],"content":"Implementing the Host-Side Adapter Pipeline Segment","linkify":"Implementing the Host-Side Adapter Pipeline Segment","nodes":[{"content":"Implementing the Host-Side Adapter Pipeline Segment","pos":[0,51]}]},{"content":"While the contract is an <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, the host application expects a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.UserControl&gt;</ph> (as specified by the host view).","pos":[6494,6677],"source":"While the contract is an <xref:System.AddIn.Contract.INativeHandleContract>, the host application expects a <xref:System.Windows.Controls.UserControl> (as specified by the host view)."},{"content":"Consequently, the <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> must be converted to a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> after crossing the isolation boundary, before being set as content of the host view (which derives from <ph id=\"ph3\">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>).","pos":[6678,6957],"source":" Consequently, the <xref:System.AddIn.Contract.INativeHandleContract> must be converted to a <xref:System.Windows.FrameworkElement> after crossing the isolation boundary, before being set as content of the host view (which derives from <xref:System.Windows.Controls.UserControl>)."},{"content":"This work is performed by the host-side adapter, as shown in the following code.","pos":[6964,7044]},{"pos":[7049,7366],"content":"As you can see, the host-side adapter acquires the <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> by calling the add-in-side adapter's <ph id=\"ph2\">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> method (this is the point where the <ph id=\"ph3\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> crosses the isolation boundary).","source":"As you can see, the host-side adapter acquires the <xref:System.AddIn.Contract.INativeHandleContract> by calling the add-in-side adapter's <xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A> method (this is the point where the <xref:System.AddIn.Contract.INativeHandleContract> crosses the isolation boundary)."},{"content":"The host-side adapter then converts the <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> by calling <ph id=\"ph3\">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph>.","pos":[7373,7598],"source":"The host-side adapter then converts the <xref:System.AddIn.Contract.INativeHandleContract> to a <xref:System.Windows.FrameworkElement> by calling <xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A>."},{"content":"Finally, the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is set as the content of the host view.","pos":[7599,7690],"source":" Finally, the <xref:System.Windows.FrameworkElement> is set as the content of the host view."},{"pos":[7723,7746],"content":"Implementing the Add-In","linkify":"Implementing the Add-In","nodes":[{"content":"Implementing the Add-In","pos":[0,23]}]},{"content":"With the add-in-side adapter and add-in view in place, the add-in can be implemented by deriving from the add-in view, as shown in the following code.","pos":[7750,7900]},{"content":"From this example, you can see one interesting benefit of this model: add-in developers only need to implement the add-in (since it is the UI as well), rather than both an add-in class and an add-in UI.","pos":[7905,8107]},{"pos":[8142,8175],"content":"Implementing the Host Application","linkify":"Implementing the Host Application","nodes":[{"content":"Implementing the Host Application","pos":[0,33]}]},{"content":"With the host-side adapter and host view created, the host application can use the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model to open the pipeline and acquire a host view of the add-in.","pos":[8179,8398],"source":"With the host-side adapter and host view created, the host application can use the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] add-in model to open the pipeline and acquire a host view of the add-in."},{"content":"These steps are shown in the following code.","pos":[8399,8443]},{"content":"The host application uses typical .NET Framework add-in model code to activate the add-in, which implicitly returns the host view to the host application.","pos":[8448,8602]},{"content":"The host application subsequently displays the host view (which is a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>) from a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.","pos":[8603,8759],"source":" The host application subsequently displays the host view (which is a <xref:System.Windows.Controls.UserControl>) from a <xref:System.Windows.Controls.Grid>."},{"content":"The code for processing interactions with the add-in UI runs in the add-in's application domain.","pos":[8766,8862]},{"content":"These interactions include the following:","pos":[8863,8904]},{"pos":[8914,9029],"content":"Handling the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph><ph id=\"ph2\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.","source":"Handling the <xref:System.Windows.Controls.Button><xref:System.Windows.Controls.Primitives.ButtonBase.Click> event."},{"pos":[9039,9084],"content":"Showing the <ph id=\"ph1\">&lt;xref:System.Windows.MessageBox&gt;</ph>.","source":"Showing the <xref:System.Windows.MessageBox>."},{"content":"This activity is completely isolated from the host application.","pos":[9091,9154]},{"pos":[9163,9171],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[9175,9267],"content":"<bpt id=\"p1\">[</bpt>Add-ins and Extensibility<ept id=\"p1\">](/previous-versions/dotnet/netframework-4.0/bb384200(v%3dvs.100))</ept>","source":"[Add-ins and Extensibility](/previous-versions/dotnet/netframework-4.0/bb384200(v%3dvs.100))"},{"pos":[9270,9317],"content":"<bpt id=\"p1\">[</bpt>WPF Add-Ins Overview<ept id=\"p1\">](wpf-add-ins-overview.md)</ept>","source":"[WPF Add-Ins Overview](wpf-add-ins-overview.md)"}]}