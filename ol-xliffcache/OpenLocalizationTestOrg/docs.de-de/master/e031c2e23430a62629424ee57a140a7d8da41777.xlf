<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e031c2e23430a62629424ee57a140a7d8da41777</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\fine-tuning-your-async-application.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca421874e602d652d765bbc61fd345c2262ac789</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">276f8da9dc029362ecb7087540c6630239c28c9b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Fine-Tuning Your Async Application (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Fine-Tuning Your Async Application (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can add precision and flexibility to your async applications by using the methods and properties that the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> type makes available.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The topics in this section show examples that use <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> and important <ph id="ph2">`Task`</ph> methods such as <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By using <ph id="ph1">`WhenAny`</ph> and <ph id="ph2">`WhenAll`</ph>, you can more easily start multiple tasks and await their completion by monitoring a single task.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WhenAny`</ph> returns a task that completes when any task in a collection is complete.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For examples that use <ph id="ph1">`WhenAny`</ph>, see  <bpt id="p1">[</bpt>Cancel Remaining Async Tasks after One Is Complete (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)</ept>and <bpt id="p2">[</bpt>Start Multiple Async Tasks and Process Them As They Complete (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WhenAll`</ph> returns a task that completes when all tasks in a collection are complete.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information and an example that uses <ph id="ph1">`WhenAll`</ph>, see <bpt id="p1">[</bpt>How to: Extend the Async Walkthrough by Using Task.WhenAll (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This section includes the following examples.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cancel an Async Task or a List of Tasks (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cancel Async Tasks after a Period of Time (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cancel Remaining Async Tasks after One Is Complete (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Start Multiple Async Tasks and Process Them As They Complete (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The projects create a UI that contains a button that starts the process and a button that cancels it, as the following image shows.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The buttons are named <ph id="ph1">`startButton`</ph> and <ph id="ph2">`cancelButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>WPF window with Cancel button<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/cancellation.png "</bpt>Cancellation<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can download the complete Windows Presentation Foundation (WPF) projects from <bpt id="p1">[</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>