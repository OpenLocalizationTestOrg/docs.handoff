{"content":"---\ntitle: Managing dependencies in .NET Core tooling | Microsoft Docs\ndescription: Explains how to manage your dependencies with the .NET Core tools.\nkeywords: CLI, extensibility, custom commands, .NET Core\nauthor: blackdwarf\nms.author: mairaw\nms.date: 03/06/2017\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-cli\nms.devlang: dotnet\nms.assetid: 74b87cdb-a244-4c13-908c-539118bfeef9\n---\n\n# Managing dependencies with .NET Core SDK 1.0\n\nWith the move of .NET Core projects from project.json to csproj and MSBuild, a significant investment also happened that resulted in unification of the project file and assets that allow tracking of dependencies. For .NET Core projects this is similar to what project.json did. There is no separate JSON or XML file that tracks NuGet dependencies. With this change, we've also introduced another type of *reference* into the csproj syntax called the `<PackageReference>`. \n\nThis document describes the new reference type. It also shows how to add a package dependency using this new reference type to your project. \n\n## The new \\<PackageReference> element\nThe `<PackageReference>` has the following basic structure:\n\n```xml\n<PackageReference Include=\"PACKAGE_ID\" Version=\"PACKAGE_VERSION\" />\n```\n\nIf you are familiar with MSBuild, it will look familiar to the other reference types that already exist. The key is the `Include` statement which specifies the package id that you wish to add to the project. The `<Version>` child element specifies the version to get. The versions are specified as per [NuGet version rules](https://docs.microsoft.com/nuget/create-packages/dependency-versions#version-ranges).\n\n> [!NOTE]\n> If you are not familiar with the overall `csproj` syntax, see the [MSBuild project reference](https://docs.microsoft.com/visualstudio/msbuild/msbuild-project-file-schema-reference) documentation for more information.  \n\nAdding a dependency that is available only in a specific target is done using conditions like in the following example:\n\n```xml\n<PackageReference Include=\"PACKAGE_ID\" Version=\"PACKAGE_VERSION\" Condition=\"'$(TargetFramework)' == 'netcoreapp1.0'\" />\n```\n\nThe above means that the dependency will only be valid if the build is happening for that given target. The `$(TargetFramework)` in the condition is a MSBuild property that is being set in the project. For most common .NET Core applications, you will not need to do this. \n\n## Adding a dependency to your project\nAdding a dependency to your project is straightforward. Here is an example of how to add Json.NET version `9.0.1` to your project. Of course, it is applicable to any other NuGet dependency. \n\nWhen you open your project file, you will see two or more `<ItemGroup>` nodes. You will notice that one of the nodes already has `<PackageReference>` elements in it. You can add your new dependency to this node, or create a new one; it is completely up to you as the result will be the same. \n\nIn this example we will use the default template that is dropped by `dotnet new console`. This is a simple console application. When we open up the project, we first find the `<ItemGroup>` with already existing `<PackageReference>` in it. We then add the following to it:\n\n```xml\n<PackageReference Include=\"Newtonsoft.Json\" Version=\"9.0.1\" />\n```\nAfter this, we save the project and run the `dotnet restore` command to install the dependency. \n\nThe full project looks like this:\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp1.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"9.0.1\" />\n  </ItemGroup>\n</Project>\n```\n\n## Removing a dependency from the project\nRemoving a dependency from the project file involves simply removing the `<PackageReference>` from the project file.\n","nodes":[{"pos":[11,70],"content":"Managing dependencies in .NET Core tooling | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"Managing dependencies in .NET Core tooling | Microsoft Docs","pos":[0,59]}]},{"pos":[84,150],"content":"Explains how to manage your dependencies with the .NET Core tools.","needQuote":true,"needEscape":true,"nodes":[{"content":"Explains how to manage your dependencies with the .NET Core tools.","pos":[0,66]}]},{"pos":[161,207],"content":"CLI, extensibility, custom commands, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":"CLI, extensibility, custom commands, .NET Core","pos":[0,46]}]},{"pos":[403,447],"content":"Managing dependencies with .NET Core SDK 1.0","linkify":"Managing dependencies with .NET Core SDK 1.0","nodes":[{"content":"Managing dependencies with .NET Core SDK 1.0","pos":[0,44]}]},{"content":"With the move of .NET Core projects from project.json to csproj and MSBuild, a significant investment also happened that resulted in unification of the project file and assets that allow tracking of dependencies.","pos":[449,661]},{"content":"For .NET Core projects this is similar to what project.json did.","pos":[662,726]},{"content":"There is no separate JSON or XML file that tracks NuGet dependencies.","pos":[727,796]},{"content":"With this change, we've also introduced another type of <bpt id=\"p1\">*</bpt>reference<ept id=\"p1\">*</ept> into the csproj syntax called the <ph id=\"ph1\">`&lt;PackageReference&gt;`</ph>.","pos":[797,920],"source":" With this change, we've also introduced another type of *reference* into the csproj syntax called the `<PackageReference>`."},{"content":"This document describes the new reference type.","pos":[923,970]},{"content":"It also shows how to add a package dependency using this new reference type to your project.","pos":[971,1063]},{"pos":[1069,1104],"content":"The new \\<PackageReference> element","linkify":"The new \\<PackageReference> element","nodes":[{"content":"The new <ph id=\"ph1\">\\&lt;</ph>PackageReference&gt; element","pos":[0,35],"source":"The new \\<PackageReference> element"}]},{"pos":[1105,1164],"content":"The <ph id=\"ph1\">`&lt;PackageReference&gt;`</ph> has the following basic structure:","source":"The `<PackageReference>` has the following basic structure:"},{"content":"If you are familiar with MSBuild, it will look familiar to the other reference types that already exist.","pos":[1246,1350]},{"content":"The key is the <ph id=\"ph1\">`Include`</ph> statement which specifies the package id that you wish to add to the project.","pos":[1351,1453],"source":" The key is the `Include` statement which specifies the package id that you wish to add to the project."},{"content":"The <ph id=\"ph1\">`&lt;Version&gt;`</ph> child element specifies the version to get.","pos":[1454,1513],"source":" The `<Version>` child element specifies the version to get."},{"content":"The versions are specified as per <bpt id=\"p1\">[</bpt>NuGet version rules<ept id=\"p1\">](https://docs.microsoft.com/nuget/create-packages/dependency-versions#version-ranges)</ept>.","pos":[1514,1655],"source":" The versions are specified as per [NuGet version rules](https://docs.microsoft.com/nuget/create-packages/dependency-versions#version-ranges)."},{"pos":[1659,1885],"content":"[!NOTE]\nIf you are not familiar with the overall `csproj` syntax, see the [MSBuild project reference](https://docs.microsoft.com/visualstudio/msbuild/msbuild-project-file-schema-reference) documentation for more information.","leadings":["","> "],"nodes":[{"content":"If you are not familiar with the overall <ph id=\"ph1\">`csproj`</ph> syntax, see the <bpt id=\"p1\">[</bpt>MSBuild project reference<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-project-file-schema-reference)</ept> documentation for more information.","pos":[8,224],"source":"If you are not familiar with the overall `csproj` syntax, see the [MSBuild project reference](https://docs.microsoft.com/visualstudio/msbuild/msbuild-project-file-schema-reference) documentation for more information."}]},{"content":"Adding a dependency that is available only in a specific target is done using conditions like in the following example:","pos":[1889,2008]},{"content":"The above means that the dependency will only be valid if the build is happening for that given target.","pos":[2142,2245]},{"content":"The <ph id=\"ph1\">`$(TargetFramework)`</ph> in the condition is a MSBuild property that is being set in the project.","pos":[2246,2343],"source":" The `$(TargetFramework)` in the condition is a MSBuild property that is being set in the project."},{"content":"For most common .NET Core applications, you will not need to do this.","pos":[2344,2413]},{"pos":[2419,2454],"content":"Adding a dependency to your project","linkify":"Adding a dependency to your project","nodes":[{"content":"Adding a dependency to your project","pos":[0,35]}]},{"content":"Adding a dependency to your project is straightforward.","pos":[2455,2510]},{"content":"Here is an example of how to add Json.NET version <ph id=\"ph1\">`9.0.1`</ph> to your project.","pos":[2511,2585],"source":" Here is an example of how to add Json.NET version `9.0.1` to your project."},{"content":"Of course, it is applicable to any other NuGet dependency.","pos":[2586,2644]},{"content":"When you open your project file, you will see two or more <ph id=\"ph1\">`&lt;ItemGroup&gt;`</ph> nodes.","pos":[2647,2725],"source":"When you open your project file, you will see two or more `<ItemGroup>` nodes."},{"content":"You will notice that one of the nodes already has <ph id=\"ph1\">`&lt;PackageReference&gt;`</ph> elements in it.","pos":[2726,2812],"source":" You will notice that one of the nodes already has `<PackageReference>` elements in it."},{"content":"You can add your new dependency to this node, or create a new one; it is completely up to you as the result will be the same.","pos":[2813,2938]},{"content":"In this example we will use the default template that is dropped by <ph id=\"ph1\">`dotnet new console`</ph>.","pos":[2941,3030],"source":"In this example we will use the default template that is dropped by `dotnet new console`."},{"content":"This is a simple console application.","pos":[3031,3068]},{"content":"When we open up the project, we first find the <ph id=\"ph1\">`&lt;ItemGroup&gt;`</ph> with already existing <ph id=\"ph2\">`&lt;PackageReference&gt;`</ph> in it.","pos":[3069,3179],"source":" When we open up the project, we first find the `<ItemGroup>` with already existing `<PackageReference>` in it."},{"content":"We then add the following to it:","pos":[3180,3212]},{"pos":[3288,3383],"content":"After this, we save the project and run the <ph id=\"ph1\">`dotnet restore`</ph> command to install the dependency.","source":"After this, we save the project and run the `dotnet restore` command to install the dependency."},{"content":"The full project looks like this:","pos":[3386,3419]},{"pos":[3701,3739],"content":"Removing a dependency from the project","linkify":"Removing a dependency from the project","nodes":[{"content":"Removing a dependency from the project","pos":[0,38]}]},{"pos":[3740,3856],"content":"Removing a dependency from the project file involves simply removing the <ph id=\"ph1\">`&lt;PackageReference&gt;`</ph> from the project file.","source":"Removing a dependency from the project file involves simply removing the `<PackageReference>` from the project file."}]}