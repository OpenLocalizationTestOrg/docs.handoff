{"content":"---\ntitle: \"Named Type Constructor (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: 549dea04-d93d-4c87-a292-f81b1598dbfd\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Named Type Constructor (Entity SQL)\nUsed to create instances of conceptual model nominal types such as Entity or Complex types.  \n  \n## Syntax  \n  \n```  \n  \n[{identifier. }] identifier( [expression [{, expression }]] )  \n```  \n  \n## Arguments  \n `identifier`  \n Value that is a simple or quoted identifier. For more information see, [Identifiers](../../../../../../docs/framework/data/adonet/ef/language-reference/identifiers-entity-sql.md)  \n  \n `expression`  \n Attributes of the type that are assumed to be in the same order as they appear in the declaration of the type.  \n  \n## Return Value  \n Instances of named complex types and entity types.  \n  \n## Remarks  \n The following examples show how to construct nominal and complex types:  \n  \n The expression below creates an instance of a `Person` type:  \n  \n `Person(\"abc\", 12)`  \n  \n The expression below creates an instance of a complex type:  \n  \n `MyModel.ZipCode(‘98118’, ‘4567’)`  \n  \n The expression below creates an instance of a nested complex type:  \n  \n `MyModel.AddressInfo('My street address', 'Seattle', 'WA', MyModel.ZipCode('98118', '4567'))`  \n  \n The expression below creates an instance of an entity with a nested complex type:  \n  \n `MyModel.Person(\"Bill\", MyModel.AddressInfo('My street address', 'Seattle', 'WA', MyModel.ZipCode('98118', '4567')))`  \n  \n The following example shows how to initialize a property of a complex type to null:`MyModel.ZipCode(‘98118’, null)`  \n  \n## Example  \n The following Entity SQL query uses the named type constructor to create an instance of a conceptual model type. The query is based on the AdventureWorks Sales Model. To compile and run this query, follow these steps:  \n  \n1.  Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md).  \n  \n2.  Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:  \n  \n [!code-csharp[DP EntityServices Concepts 2#NAMED_TYPE_CONSTRUCTOR](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts 2/cs/entitysql.cs#named_type_constructor)]  \n  \n## See Also  \n [Constructing Types](../../../../../../docs/framework/data/adonet/ef/language-reference/constructing-types-entity-sql.md)   \n [Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)","nodes":[{"pos":[4,410],"embed":true,"restype":"x-metadata","content":"title: \"Named Type Constructor (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: 549dea04-d93d-4c87-a292-f81b1598dbfd\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Named Type Constructor (Entity SQL) | Microsoft Docs","nodes":[{"pos":[0,52],"content":"Named Type Constructor (Entity SQL) | Microsoft Docs","nodes":[{"content":"Named Type Constructor (Entity SQL) | Microsoft Docs","pos":[0,52]}]}],"path":["title"]}],"yml":true},{"pos":[417,452],"content":"Named Type Constructor (Entity SQL)","linkify":"Named Type Constructor (Entity SQL)","nodes":[{"content":"Named Type Constructor (Entity SQL)","pos":[0,35]}]},{"content":"Used to create instances of conceptual model nominal types such as Entity or Complex types.","pos":[453,544]},{"pos":[553,559],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[650,659],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"Value that is a simple or quoted identifier.","pos":[679,723]},{"content":"For more information see, <bpt id=\"p1\">[</bpt>Identifiers<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/identifiers-entity-sql.md)</ept>","pos":[724,857],"source":" For more information see, [Identifiers](../../../../../../docs/framework/data/adonet/ef/language-reference/identifiers-entity-sql.md)"},{"content":"Attributes of the type that are assumed to be in the same order as they appear in the declaration of the type.","pos":[880,990]},{"pos":[999,1011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Instances of named complex types and entity types.","pos":[1015,1065]},{"pos":[1074,1081],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following examples show how to construct nominal and complex types:","pos":[1085,1156]},{"pos":[1163,1223],"content":"The expression below creates an instance of a <ph id=\"ph1\">`Person`</ph> type:","source":"The expression below creates an instance of a `Person` type:"},{"content":"The expression below creates an instance of a complex type:","pos":[1256,1315]},{"content":"The expression below creates an instance of a nested complex type:","pos":[1363,1429]},{"content":"The expression below creates an instance of an entity with a nested complex type:","pos":[1536,1617]},{"pos":[1748,1863],"content":"The following example shows how to initialize a property of a complex type to null:<ph id=\"ph1\">`MyModel.ZipCode(‘98118’, null)`</ph>","source":"The following example shows how to initialize a property of a complex type to null:`MyModel.ZipCode(‘98118’, null)`"},{"pos":[1872,1879],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following Entity SQL query uses the named type constructor to create an instance of a conceptual model type.","pos":[1883,1995]},{"content":"The query is based on the AdventureWorks Sales Model.","pos":[1996,2049]},{"content":"To compile and run this query, follow these steps:","pos":[2050,2100]},{"pos":[2110,2307],"content":"Follow the procedure in <bpt id=\"p1\">[</bpt>How to: Execute a Query that Returns StructuralType Results<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)</ept>.","source":"Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)."},{"pos":[2317,2400],"content":"Pass the following query as an argument to the <ph id=\"ph1\">`ExecuteStructuralTypeQuery`</ph> method:","source":"Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:"},{"pos":[2611,2619],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Constructing Types<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/constructing-types-entity-sql.md)</ept><ph id=\"ph1\"> </ph>","pos":[2623,2745],"source":"[Constructing Types](../../../../../../docs/framework/data/adonet/ef/language-reference/constructing-types-entity-sql.md) "},{"content":"<bpt id=\"p1\">[</bpt>Entity SQL Reference<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept>","pos":[2749,2863],"source":"[Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)"}]}