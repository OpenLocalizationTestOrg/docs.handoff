{"content":"---\ntitle: \"Compute the Sum of Values in a Numeric Sequence | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 24e335b0-984e-4825-8721-0a91b533b7c3\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Compute the Sum of Values in a Numeric Sequence\nUse the <xref:System.Linq.Enumerable.Sum%2A> operator to compute the sum of numeric values in a sequence.  \n  \n Note the following characteristics of the `Sum` operator in [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]:  \n  \n-   The Standard Query Operator aggregate operator `Sum` evaluates to zero for an empty sequence or a sequence that contains only nulls. In [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)], the semantics of SQL are left unchanged. For this reason, `Sum` evaluates to null instead of to zero for an empty sequence or for a sequence that contains only nulls.  \n  \n-   SQL limitations on intermediate results apply to aggregates in [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]. Sum of 32-bit integer quantities is not computed by using 64-bit results, and overflow can occur for the [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] translation of `Sum`. This possibility exists even if the Standard Query Operator implementation does not cause an overflow for the corresponding in-memory sequence.  \n  \n## Example  \n The following example finds the total freight of all orders in the `Order` table.  \n  \n If you run this query against the Northwind sample database, the output is: `64942.6900`.  \n  \n [!code-csharp[DLinqQueryExamples#12](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#12)]\n [!code-vb[DLinqQueryExamples#12](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#12)]  \n  \n## Example  \n The following example finds the total number of units on order for all products.  \n  \n If you run this query against the Northwind sample database, the output is: `780`.  \n  \n Note that you must cast `short` types (for example, `UnitsOnOrder`) because `Sum` has no overload for short types.  \n  \n [!code-csharp[DLinqQueryExamples#13](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#13)]\n [!code-vb[DLinqQueryExamples#13](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#13)]  \n  \n## See Also  \n [Aggregate Queries](../../../../../../docs/framework/data/adonet/sql/linq/aggregate-queries.md)   \n [Downloading Sample Databases](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)","nodes":[{"pos":[4,378],"nodes":[{"content":"Compute the Sum of Values in a Numeric Sequence | Microsoft Docs","nodes":[{"pos":[0,64],"content":"Compute the Sum of Values in a Numeric Sequence | Microsoft Docs","nodes":[{"content":"Compute the Sum of Values in a Numeric Sequence | Microsoft Docs","pos":[0,64]}]}],"pos":[6,73],"yaml":true}],"content":"title: \"Compute the Sum of Values in a Numeric Sequence | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 24e335b0-984e-4825-8721-0a91b533b7c3\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","yamlblock":true},{"pos":[385,432],"content":"Compute the Sum of Values in a Numeric Sequence","linkify":"Compute the Sum of Values in a Numeric Sequence","nodes":[{"content":"Compute the Sum of Values in a Numeric Sequence","pos":[0,47]}]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph> operator to compute the sum of numeric values in a sequence.","pos":[433,538],"source":"Use the <xref:System.Linq.Enumerable.Sum%2A> operator to compute the sum of numeric values in a sequence."},{"pos":[545,673],"content":"Note the following characteristics of the <ph id=\"ph1\">`Sum`</ph> operator in <ph id=\"ph2\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>:","source":"Note the following characteristics of the `Sum` operator in [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]:"},{"content":"The Standard Query Operator aggregate operator <ph id=\"ph1\">`Sum`</ph> evaluates to zero for an empty sequence or a sequence that contains only nulls.","pos":[683,815],"source":"The Standard Query Operator aggregate operator `Sum` evaluates to zero for an empty sequence or a sequence that contains only nulls."},{"content":"In <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>, the semantics of SQL are left unchanged.","pos":[816,928],"source":" In [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)], the semantics of SQL are left unchanged."},{"content":"For this reason, <ph id=\"ph1\">`Sum`</ph> evaluates to null instead of to zero for an empty sequence or for a sequence that contains only nulls.","pos":[929,1054],"source":" For this reason, `Sum` evaluates to null instead of to zero for an empty sequence or for a sequence that contains only nulls."},{"content":"SQL limitations on intermediate results apply to aggregates in <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.","pos":[1064,1195],"source":"SQL limitations on intermediate results apply to aggregates in [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]."},{"content":"Sum of 32-bit integer quantities is not computed by using 64-bit results, and overflow can occur for the <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> translation of <ph id=\"ph2\">`Sum`</ph>.","pos":[1196,1390],"source":" Sum of 32-bit integer quantities is not computed by using 64-bit results, and overflow can occur for the [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] translation of `Sum`."},{"content":"This possibility exists even if the Standard Query Operator implementation does not cause an overflow for the corresponding in-memory sequence.","pos":[1391,1534]},{"pos":[1543,1550],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1554,1635],"content":"The following example finds the total freight of all orders in the <ph id=\"ph1\">`Order`</ph> table.","source":"The following example finds the total freight of all orders in the `Order` table."},{"pos":[1642,1731],"content":"If you run this query against the Northwind sample database, the output is: <ph id=\"ph1\">`64942.6900`</ph>.","source":"If you run this query against the Northwind sample database, the output is: `64942.6900`."},{"pos":[1738,2007],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqQueryExamples#12<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DLinqQueryExamples#12<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#12)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DLinqQueryExamples#12](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#12)]\n [!code-vb[DLinqQueryExamples#12](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#12)]"},{"pos":[2016,2023],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example finds the total number of units on order for all products.","pos":[2027,2107]},{"pos":[2114,2196],"content":"If you run this query against the Northwind sample database, the output is: <ph id=\"ph1\">`780`</ph>.","source":"If you run this query against the Northwind sample database, the output is: `780`."},{"pos":[2203,2317],"content":"Note that you must cast <ph id=\"ph1\">`short`</ph> types (for example, <ph id=\"ph2\">`UnitsOnOrder`</ph>) because <ph id=\"ph3\">`Sum`</ph> has no overload for short types.","source":"Note that you must cast `short` types (for example, `UnitsOnOrder`) because `Sum` has no overload for short types."},{"pos":[2324,2593],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqQueryExamples#13<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DLinqQueryExamples#13<ept id=\"p4\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#13)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DLinqQueryExamples#13](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#13)]\n [!code-vb[DLinqQueryExamples#13](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#13)]"},{"pos":[2602,2610],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Aggregate Queries<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/aggregate-queries.md)</ept><ph id=\"ph1\"> </ph>","pos":[2614,2710],"source":"[Aggregate Queries](../../../../../../docs/framework/data/adonet/sql/linq/aggregate-queries.md) "},{"content":"<bpt id=\"p1\">[</bpt>Downloading Sample Databases<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)</ept>","pos":[2714,2831],"source":"[Downloading Sample Databases](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)"}]}