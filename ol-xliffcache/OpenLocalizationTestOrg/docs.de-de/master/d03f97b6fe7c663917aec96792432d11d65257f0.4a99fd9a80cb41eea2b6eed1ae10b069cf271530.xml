{"content":"---\ntitle: \"Variance in Generic Interfaces (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: cf4096d0-4bb3-45a9-9a6b-f01e29a60333\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Variance in Generic Interfaces (Visual Basic)\n.NET Framework 4 introduced variance support for several existing generic interfaces. Variance support enables implicit conversion of classes that implement these interfaces. The following interfaces are now variant:  \n  \n-   <xref:System.Collections.Generic.IEnumerable%601> (T is covariant)  \n  \n-   <xref:System.Collections.Generic.IEnumerator%601> (T is covariant)  \n  \n-   <xref:System.Linq.IQueryable%601> (T is covariant)  \n  \n-   <xref:System.Linq.IGrouping%602> (`TKey` and `TElement` are covariant)  \n  \n-   <xref:System.Collections.Generic.IComparer%601> (T is contravariant)  \n  \n-   <xref:System.Collections.Generic.IEqualityComparer%601> (T is contravariant)  \n  \n-   <xref:System.IComparable%601> (T is contravariant)  \n  \n Covariance permits a method to have a more derived return type than that defined by the generic type parameter of the interface. To illustrate the covariance feature, consider these generic interfaces: `IEnumerable(Of Object)` and `IEnumerable(Of String)`. The `IEnumerable(Of String)` interface does not inherit the `IEnumerable(Of Object)` interface. However, the `String` type does inherit the `Object` type, and in some cases you may want to assign objects of these interfaces to each other. This is shown in the following code example.  \n  \n```vb  \nDim strings As IEnumerable(Of String) = New List(Of String)  \nDim objects As IEnumerable(Of Object) = strings  \n```  \n  \n In earlier versions of the .NET Framework, this code causes a compilation error in Visual Basic with `Option Strict On`. But now you can use `strings` instead of `objects`, as shown in the previous example, because the <xref:System.Collections.Generic.IEnumerable%601> interface is covariant.  \n  \n Contravariance permits a method to have argument types that are less derived than that specified by the generic parameter of the interface. To illustrate contravariance, assume that you have created a `BaseComparer` class to compare instances of the `BaseClass` class. The `BaseComparer` class implements the `IEqualityComparer(Of BaseClass)` interface. Because the <xref:System.Collections.Generic.IEqualityComparer%601> interface is now contravariant, you can use `BaseComparer` to compare instances of classes that inherit the `BaseClass` class. This is shown in the following code example.  \n  \n```vb  \n' Simple hierarchy of classes.  \nClass BaseClass  \nEnd Class  \n  \nClass DerivedClass  \n    Inherits BaseClass  \nEnd Class  \n  \n' Comparer class.  \nClass BaseComparer  \n    Implements IEqualityComparer(Of BaseClass)  \n  \n    Public Function Equals1(ByVal x As BaseClass,  \n                            ByVal y As BaseClass) As Boolean _  \n                            Implements IEqualityComparer(Of BaseClass).Equals  \n        Return (x.Equals(y))  \n    End Function  \n  \n    Public Function GetHashCode1(ByVal obj As BaseClass) As Integer _  \n        Implements IEqualityComparer(Of BaseClass).GetHashCode  \n        Return obj.GetHashCode  \n    End Function  \nEnd Class  \nSub Test()  \n    Dim baseComparer As IEqualityComparer(Of BaseClass) = New BaseComparer  \n    ' Implicit conversion of IEqualityComparer(Of BaseClass) to   \n    ' IEqualityComparer(Of DerivedClass).  \n    Dim childComparer As IEqualityComparer(Of DerivedClass) = baseComparer  \nEnd Sub  \n```  \n  \n For more examples, see [Using Variance in Interfaces for Generic Collections (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md).  \n  \n Variance in generic interfaces is supported for reference types only. Value types do not support variance. For example, `IEnumerable(Of Integer)` cannot be implicitly converted to `IEnumerable(Of Object)`, because integers are represented by a value type.  \n  \n```vb  \nDim integers As IEnumerable(Of Integer) = New List(Of Integer)  \n' The following statement generates a compiler error  \n' with Option Strict On, because Integer is a value type.  \n' Dim objects As IEnumerable(Of Object) = integers  \n```  \n  \n It is also important to remember that classes that implement variant interfaces are still invariant. For example, although <xref:System.Collections.Generic.List%601> implements the covariant interface <xref:System.Collections.Generic.IEnumerable%601>, you cannot implicitly convert `List(Of Object)` to `List(Of String)`. This is illustrated in the following code example.  \n  \n```vb  \n' The following statement generates a compiler error  \n' because classes are invariant.  \n' Dim list As List(Of Object) = New List(Of String)  \n  \n' You can use the interface object instead.  \nDim listObjects As IEnumerable(Of Object) = New List(Of String)  \n```  \n  \n## See Also  \n [Using Variance in Interfaces for Generic Collections (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)   \n [Creating Variant Generic Interfaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/creating-variant-generic-interfaces.md)   \n [Generic Interfaces](../../../../standard/generics/interfaces.md)   \n [Variance in Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)","nodes":[{"pos":[4,448],"nodes":[{"content":"Variance in Generic Interfaces (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,62],"content":"Variance in Generic Interfaces (Visual Basic) | Microsoft Docs","nodes":[{"content":"Variance in Generic Interfaces (Visual Basic) | Microsoft Docs","pos":[0,62]}]}],"pos":[6,71],"yaml":true}],"content":"title: \"Variance in Generic Interfaces (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: cf4096d0-4bb3-45a9-9a6b-f01e29a60333\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[455,500],"content":"Variance in Generic Interfaces (Visual Basic)","linkify":"Variance in Generic Interfaces (Visual Basic)","nodes":[{"content":"Variance in Generic Interfaces (Visual Basic)","pos":[0,45]}]},{"content":".NET Framework 4 introduced variance support for several existing generic interfaces.","pos":[501,586]},{"content":"Variance support enables implicit conversion of classes that implement these interfaces.","pos":[587,675]},{"content":"The following interfaces are now variant:","pos":[676,717]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> (T is covariant)","pos":[727,793],"source":"<xref:System.Collections.Generic.IEnumerable%601> (T is covariant)"},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> (T is covariant)","pos":[803,869],"source":"<xref:System.Collections.Generic.IEnumerator%601> (T is covariant)"},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> (T is covariant)","pos":[879,929],"source":"<xref:System.Linq.IQueryable%601> (T is covariant)"},{"pos":[939,1009],"content":"<ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> (<ph id=\"ph2\">`TKey`</ph> and <ph id=\"ph3\">`TElement`</ph> are covariant)","source":"<xref:System.Linq.IGrouping%602> (`TKey` and `TElement` are covariant)"},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> (T is contravariant)","pos":[1019,1087],"source":"<xref:System.Collections.Generic.IComparer%601> (T is contravariant)"},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> (T is contravariant)","pos":[1097,1173],"source":"<xref:System.Collections.Generic.IEqualityComparer%601> (T is contravariant)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IComparable%601&gt;</ph> (T is contravariant)","pos":[1183,1233],"source":"<xref:System.IComparable%601> (T is contravariant)"},{"content":"Covariance permits a method to have a more derived return type than that defined by the generic type parameter of the interface.","pos":[1240,1368]},{"content":"To illustrate the covariance feature, consider these generic interfaces: <ph id=\"ph1\">`IEnumerable(Of Object)`</ph> and <ph id=\"ph2\">`IEnumerable(Of String)`</ph>.","pos":[1369,1496],"source":" To illustrate the covariance feature, consider these generic interfaces: `IEnumerable(Of Object)` and `IEnumerable(Of String)`."},{"content":"The <ph id=\"ph1\">`IEnumerable(Of String)`</ph> interface does not inherit the <ph id=\"ph2\">`IEnumerable(Of Object)`</ph> interface.","pos":[1497,1592],"source":" The `IEnumerable(Of String)` interface does not inherit the `IEnumerable(Of Object)` interface."},{"content":"However, the <ph id=\"ph1\">`String`</ph> type does inherit the <ph id=\"ph2\">`Object`</ph> type, and in some cases you may want to assign objects of these interfaces to each other.","pos":[1593,1735],"source":" However, the `String` type does inherit the `Object` type, and in some cases you may want to assign objects of these interfaces to each other."},{"content":"This is shown in the following code example.","pos":[1736,1780]},{"content":"In earlier versions of the .NET Framework, this code causes a compilation error in Visual Basic with <ph id=\"ph1\">`Option Strict On`</ph>.","pos":[1916,2036],"source":"In earlier versions of the .NET Framework, this code causes a compilation error in Visual Basic with `Option Strict On`."},{"content":"But now you can use <ph id=\"ph1\">`strings`</ph> instead of <ph id=\"ph2\">`objects`</ph>, as shown in the previous example, because the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface is covariant.","pos":[2037,2208],"source":" But now you can use `strings` instead of `objects`, as shown in the previous example, because the <xref:System.Collections.Generic.IEnumerable%601> interface is covariant."},{"content":"Contravariance permits a method to have argument types that are less derived than that specified by the generic parameter of the interface.","pos":[2215,2354]},{"content":"To illustrate contravariance, assume that you have created a <ph id=\"ph1\">`BaseComparer`</ph> class to compare instances of the <ph id=\"ph2\">`BaseClass`</ph> class.","pos":[2355,2483],"source":" To illustrate contravariance, assume that you have created a `BaseComparer` class to compare instances of the `BaseClass` class."},{"content":"The <ph id=\"ph1\">`BaseComparer`</ph> class implements the <ph id=\"ph2\">`IEqualityComparer(Of BaseClass)`</ph> interface.","pos":[2484,2568],"source":" The `BaseComparer` class implements the `IEqualityComparer(Of BaseClass)` interface."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface is now contravariant, you can use <ph id=\"ph2\">`BaseComparer`</ph> to compare instances of classes that inherit the <ph id=\"ph3\">`BaseClass`</ph> class.","pos":[2569,2763],"source":" Because the <xref:System.Collections.Generic.IEqualityComparer%601> interface is now contravariant, you can use `BaseComparer` to compare instances of classes that inherit the `BaseClass` class."},{"content":"This is shown in the following code example.","pos":[2764,2808]},{"pos":[3791,4019],"content":"For more examples, see <bpt id=\"p1\">[</bpt>Using Variance in Interfaces for Generic Collections (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)</ept>.","source":"For more examples, see [Using Variance in Interfaces for Generic Collections (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)."},{"content":"Variance in generic interfaces is supported for reference types only.","pos":[4026,4095]},{"content":"Value types do not support variance.","pos":[4096,4132]},{"content":"For example, <ph id=\"ph1\">`IEnumerable(Of Integer)`</ph> cannot be implicitly converted to <ph id=\"ph2\">`IEnumerable(Of Object)`</ph>, because integers are represented by a value type.","pos":[4133,4281],"source":" For example, `IEnumerable(Of Integer)` cannot be implicitly converted to `IEnumerable(Of Object)`, because integers are represented by a value type."},{"content":"It is also important to remember that classes that implement variant interfaces are still invariant.","pos":[4538,4638]},{"content":"For example, although <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> implements the covariant interface <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you cannot implicitly convert <ph id=\"ph3\">`List(Of Object)`</ph> to <ph id=\"ph4\">`List(Of String)`</ph>.","pos":[4639,4859],"source":" For example, although <xref:System.Collections.Generic.List%601> implements the covariant interface <xref:System.Collections.Generic.IEnumerable%601>, you cannot implicitly convert `List(Of Object)` to `List(Of String)`."},{"content":"This is illustrated in the following code example.","pos":[4860,4910]},{"pos":[5195,5203],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Using Variance in Interfaces for Generic Collections (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)</ept><ph id=\"ph1\"> </ph>","pos":[5207,5412],"source":"[Using Variance in Interfaces for Generic Collections (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating Variant Generic Interfaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/creating-variant-generic-interfaces.md)</ept><ph id=\"ph1\"> </ph>","pos":[5416,5587],"source":"[Creating Variant Generic Interfaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/creating-variant-generic-interfaces.md) "},{"content":"<bpt id=\"p1\">[</bpt>Generic Interfaces<ept id=\"p1\">](../../../../standard/generics/interfaces.md)</ept><ph id=\"ph1\"> </ph>","pos":[5591,5657],"source":"[Generic Interfaces](../../../../standard/generics/interfaces.md) "},{"content":"<bpt id=\"p1\">[</bpt>Variance in Delegates (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept>","pos":[5661,5803],"source":"[Variance in Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)"}]}