{"content":"---\ntitle: \"How to: safely cast by using pattern matching and the is and as operators\"\ndescription: Learn to use pattern matching techniques to safely cast variables to a different type. You can use pattern matching as well as the is and as operators to safely convert types.\nms.date: 09/05/2018\nhelpviewer_keywords: \n  - \"cast operators [C#], as and is operators\"\n  - \"as operator [C#]\"\n  - \"is operator [C#]\"\n---\n# How to: safely cast by using pattern matching is and as operators\n\nBecause objects are polymorphic, it's possible for a variable of a base class type to hold a derived [type](../programming-guide/types/index.md). To access the derived type's instance members, it's necessary to [cast](../programming-guide/types/casting-and-type-conversions.md) the value back to the derived type. However, a cast creates the risk of throwing an <xref:System.InvalidCastException>. C# provides [pattern matching](../pattern-matching.md) statements that perform a cast conditionally only when it will succeed. C# also provides the [is](../language-reference/keywords/is.md) and [as](../language-reference/keywords/as.md) operators to test if a value is of a certain type.\n\n[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]\n\nThe following code demonstrates the pattern matching `is` statement. It contains methods that test a method argument to determine if it is one of a possible set of derived types:\n\n[!code-csharp-interactive[Pattern matching is statement](../../../samples/snippets/csharp/how-to/safelycast/patternmatching/Program.cs#PatternMatchingIs)]\n\nThe preceding sample demonstrates a few features of pattern matching syntax. The `if (a is Mammal m)` and `if (o is Mammal m)` statements combine the test with an initialization assignment. The assignment occurs only when the test succeeds. The variable `m` is only in scope in the embedded `if` statement where it has been assigned. You cannot access `m` later in the same method. Try it in the interactive window.\n\nYou can also use the same syntax for testing if a [nullable type](../programming-guide/nullable-types/index.md) has a value, as shown in the following sample code:\n\n[!code-csharp-interactive[Pattern matching with nullable types](../../../samples/snippets/csharp/how-to/safelycast/nullablepatternmatching/Program.cs#PatternMatchingNullable)]\n\nThe preceding sample demonstrates other features of pattern matching to use with conversions. You can test a variable for the null pattern by checking specifically for the `null` value. When the runtime value of the variable is `null`, an `is` statement checking for a type always returns `false`. The pattern matching `is` statement doesn't allow a nullable value type, such as `int?` or `Nullable<int>`, but you can test for any other value type.\n\nThe preceding sample also shows how you use the pattern matching `is` expression in a `switch` statement where the variable may be one of many different types.\n\nIf you want to test if a variable is a given type, but not assign it to a new variable, you can use the `is` and `as` operators for reference types and nullable types. The following code shows how to use the `is` and `as` statements that were part of the C# language before pattern matching was introduced to test if a variable is of a given type:\n\n[!code-csharp-interactive[testing variable types with the is and as statements](../../../samples/snippets/csharp/how-to/safelycast/asandis/Program.cs#IsAndAs)]\n\nAs you can see by comparing this code with the pattern matching code, the pattern matching syntax provides more robust features by combining the test and the assignment in a single statement. Use the pattern matching syntax whenever possible.\n\nYou can try these samples by looking at the code in our [GitHub repository](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/safelycast). Or you can download the samples [as a zip file](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/safelycast.zip).\n","nodes":[{"pos":[4,410],"embed":true,"restype":"x-metadata","content":"title: \"How to: safely cast by using pattern matching and the is and as operators\"\ndescription: Learn to use pattern matching techniques to safely cast variables to a different type. You can use pattern matching as well as the is and as operators to safely convert types.\nms.date: 09/05/2018\nhelpviewer_keywords: \n  - \"cast operators [C#], as and is operators\"\n  - \"as operator [C#]\"\n  - \"is operator [C#]\"","nodes":[{"content":"How to: safely cast by using pattern matching and the is and as operators","nodes":[{"pos":[0,73],"content":"How to: safely cast by using pattern matching and the is and as operators","nodes":[{"content":"How to: safely cast by using pattern matching and the is and as operators","pos":[0,73]}]}],"path":["title"],"nosxs":false},{"content":"Learn to use pattern matching techniques to safely cast variables to a different type. You can use pattern matching as well as the is and as operators to safely convert types.","nodes":[{"pos":[0,175],"content":"Learn to use pattern matching techniques to safely cast variables to a different type. You can use pattern matching as well as the is and as operators to safely convert types.","nodes":[{"content":"Learn to use pattern matching techniques to safely cast variables to a different type. You can use pattern matching as well as the is and as operators to safely convert types.","pos":[0,175],"nodes":[{"content":"Learn to use pattern matching techniques to safely cast variables to a different type.","pos":[0,86]},{"content":"You can use pattern matching as well as the is and as operators to safely convert types.","pos":[87,175]}]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[417,482],"content":"How to: safely cast by using pattern matching is and as operators","linkify":"How to: safely cast by using pattern matching is and as operators","nodes":[{"content":"How to: safely cast by using pattern matching is and as operators","pos":[0,65]}]},{"content":"Because objects are polymorphic, it's possible for a variable of a base class type to hold a derived <bpt id=\"p1\">[</bpt>type<ept id=\"p1\">](../programming-guide/types/index.md)</ept>.","pos":[484,629],"source":"Because objects are polymorphic, it's possible for a variable of a base class type to hold a derived [type](../programming-guide/types/index.md)."},{"content":"To access the derived type's instance members, it's necessary to <bpt id=\"p1\">[</bpt>cast<ept id=\"p1\">](../programming-guide/types/casting-and-type-conversions.md)</ept> the value back to the derived type.","pos":[630,797],"source":" To access the derived type's instance members, it's necessary to [cast](../programming-guide/types/casting-and-type-conversions.md) the value back to the derived type."},{"content":"However, a cast creates the risk of throwing an <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph>.","pos":[798,881],"source":" However, a cast creates the risk of throwing an <xref:System.InvalidCastException>."},{"content":"C# provides <bpt id=\"p1\">[</bpt>pattern matching<ept id=\"p1\">](../pattern-matching.md)</ept> statements that perform a cast conditionally only when it will succeed.","pos":[882,1008],"source":" C# provides [pattern matching](../pattern-matching.md) statements that perform a cast conditionally only when it will succeed."},{"content":"C# also provides the <bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../language-reference/keywords/is.md)</ept> and <bpt id=\"p2\">[</bpt>as<ept id=\"p2\">](../language-reference/keywords/as.md)</ept> operators to test if a value is of a certain type.","pos":[1009,1170],"source":" C# also provides the [is](../language-reference/keywords/is.md) and [as](../language-reference/keywords/as.md) operators to test if a value is of a certain type."},{"content":"The following code demonstrates the pattern matching <ph id=\"ph1\">`is`</ph> statement.","pos":[1241,1309],"source":"The following code demonstrates the pattern matching `is` statement."},{"content":"It contains methods that test a method argument to determine if it is one of a possible set of derived types:","pos":[1310,1419]},{"content":"The preceding sample demonstrates a few features of pattern matching syntax.","pos":[1577,1653]},{"content":"The <ph id=\"ph1\">`if (a is Mammal m)`</ph> and <ph id=\"ph2\">`if (o is Mammal m)`</ph> statements combine the test with an initialization assignment.","pos":[1654,1766],"source":" The `if (a is Mammal m)` and `if (o is Mammal m)` statements combine the test with an initialization assignment."},{"content":"The assignment occurs only when the test succeeds.","pos":[1767,1817]},{"content":"The variable <ph id=\"ph1\">`m`</ph> is only in scope in the embedded <ph id=\"ph2\">`if`</ph> statement where it has been assigned.","pos":[1818,1910],"source":" The variable `m` is only in scope in the embedded `if` statement where it has been assigned."},{"content":"You cannot access <ph id=\"ph1\">`m`</ph> later in the same method.","pos":[1911,1958],"source":" You cannot access `m` later in the same method."},{"content":"Try it in the interactive window.","pos":[1959,1992]},{"pos":[1994,2157],"content":"You can also use the same syntax for testing if a <bpt id=\"p1\">[</bpt>nullable type<ept id=\"p1\">](../programming-guide/nullable-types/index.md)</ept> has a value, as shown in the following sample code:","source":"You can also use the same syntax for testing if a [nullable type](../programming-guide/nullable-types/index.md) has a value, as shown in the following sample code:"},{"content":"The preceding sample demonstrates other features of pattern matching to use with conversions.","pos":[2336,2429]},{"content":"You can test a variable for the null pattern by checking specifically for the <ph id=\"ph1\">`null`</ph> value.","pos":[2430,2521],"source":" You can test a variable for the null pattern by checking specifically for the `null` value."},{"content":"When the runtime value of the variable is <ph id=\"ph1\">`null`</ph>, an <ph id=\"ph2\">`is`</ph> statement checking for a type always returns <ph id=\"ph3\">`false`</ph>.","pos":[2522,2633],"source":" When the runtime value of the variable is `null`, an `is` statement checking for a type always returns `false`."},{"content":"The pattern matching <ph id=\"ph1\">`is`</ph> statement doesn't allow a nullable value type, such as <ph id=\"ph2\">`int?`</ph> or <ph id=\"ph3\">`Nullable&lt;int&gt;`</ph>, but you can test for any other value type.","pos":[2634,2784],"source":" The pattern matching `is` statement doesn't allow a nullable value type, such as `int?` or `Nullable<int>`, but you can test for any other value type."},{"pos":[2786,2945],"content":"The preceding sample also shows how you use the pattern matching <ph id=\"ph1\">`is`</ph> expression in a <ph id=\"ph2\">`switch`</ph> statement where the variable may be one of many different types.","source":"The preceding sample also shows how you use the pattern matching `is` expression in a `switch` statement where the variable may be one of many different types."},{"content":"If you want to test if a variable is a given type, but not assign it to a new variable, you can use the <ph id=\"ph1\">`is`</ph> and <ph id=\"ph2\">`as`</ph> operators for reference types and nullable types.","pos":[2947,3114],"source":"If you want to test if a variable is a given type, but not assign it to a new variable, you can use the `is` and `as` operators for reference types and nullable types."},{"content":"The following code shows how to use the <ph id=\"ph1\">`is`</ph> and <ph id=\"ph2\">`as`</ph> statements that were part of the C# language before pattern matching was introduced to test if a variable is of a given type:","pos":[3115,3294],"source":" The following code shows how to use the `is` and `as` statements that were part of the C# language before pattern matching was introduced to test if a variable is of a given type:"},{"content":"As you can see by comparing this code with the pattern matching code, the pattern matching syntax provides more robust features by combining the test and the assignment in a single statement.","pos":[3457,3648]},{"content":"Use the pattern matching syntax whenever possible.","pos":[3649,3699]},{"content":"You can try these samples by looking at the code in our <bpt id=\"p1\">[</bpt>GitHub repository<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/safelycast)</ept>.","pos":[3701,3858],"source":"You can try these samples by looking at the code in our [GitHub repository](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/safelycast)."},{"content":"Or you can download the samples <bpt id=\"p1\">[</bpt>as a zip file<ept id=\"p1\">](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/safelycast.zip)</ept>.","pos":[3859,3991],"source":" Or you can download the samples [as a zip file](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/safelycast.zip)."}]}