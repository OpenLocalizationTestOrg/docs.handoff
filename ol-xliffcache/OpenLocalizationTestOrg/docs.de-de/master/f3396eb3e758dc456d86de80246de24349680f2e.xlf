<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="references-and-the-imports-statement.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3396eb3e758dc456d86de80246de24349680f2e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\program-structure\references-and-the-imports-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d70b531caa7227362d4a9dfd58d6c1f8cf5e6fb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71673566e33dba2d67be953310b80b5a7d5b0014</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>References and the Imports Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>References and the Imports Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can make external objects available to your project by choosing the <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> command on the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>References in Visual Basic can point to assemblies, which are like type libraries but contain more information.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Imports Statement</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Assemblies include one or more namespaces.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you add a reference to an assembly, you can also add an <ph id="ph1">`Imports`</ph> statement to a module that controls the visibility of that assembly's namespaces within the module.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Imports`</ph> statement provides a scoping context that lets you use only the portion of the namespace necessary to supply a unique reference.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Imports`</ph> statement has the following syntax:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Aliasname`</ph> refers to a short name you can use within code to refer to an imported namespace.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Namespace`</ph> is a namespace available through either a project reference, through a definition within the project, or through a previous <ph id="ph2">`Imports`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A module may contain any number of <ph id="ph1">`Imports`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>They must appear after any <ph id="ph1">`Option`</ph> statements, if present, but before any other code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Do not confuse project references with the <ph id="ph1">`Imports`</ph> statement or the <ph id="ph2">`Declare`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Project references make external objects, such as objects in assemblies, available to Visual Basic projects.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Imports`</ph> statement is used to simplify access to project references, but does not provide access to these objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Declare`</ph> statement is used to declare a reference to an external procedure in a dynamic-link library (DLL).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Using Aliases with the Imports Statement</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Imports`</ph> statement makes it easier to access methods of classes by eliminating the need to explicitly type the fully qualified names of references.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Aliases let you assign a friendlier name to just one part of a namespace.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the carriage return/line feed sequence that causes a single piece of text to be displayed on multiple lines is part of the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.ControlChars&gt;</ph> module in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic?displayProperty=nameWithType&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To use this constant in a program without an alias, you would need to type the following code:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Imports`</ph> statements must always be the first lines immediately following any <ph id="ph2">`Option`</ph> statements in a module.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code fragment shows how to import and assign an alias to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.ControlChars?displayProperty=nameWithType&gt;</ph> module:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Future references to this namespace can be considerably shorter:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Imports`</ph> statement does not include an alias name, elements defined within the imported namespace can be used in the module without qualification.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the alias name is specified, it must be used as a qualifier for names contained within that namespace.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Namespaces in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/program-structure/namespaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assemblies in .NET<ept id="p1">](../../../standard/assembly/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create and Use Assemblies Using the Command Line<ept id="p1">](../../../visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Imports Statement (.NET Namespace and Type)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>