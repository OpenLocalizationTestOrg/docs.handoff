{"content":"---\ntitle: \"How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 11b938d7-c011-4048-900e-8b9183c41c94\n---\n# How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)\nThis topic explains how to retrieve a single attribute of an element, given the attribute name. This is useful for writing query expressions where you want to find an element that has a particular attribute.  \n  \n The <xref:System.Xml.Linq.XElement.Attribute%2A> method of the <xref:System.Xml.Linq.XElement> class returns the <xref:System.Xml.Linq.XAttribute> with the specified name.  \n  \n## Example  \n The following example uses the <xref:System.Xml.Linq.XElement.Attribute%2A> method.  \n  \n```vb  \nDim cust As XElement = <PhoneNumbers>  \n                           <Phone type=\"home\">555-555-5555</Phone>  \n                           <Phone type=\"work\">555-555-6666</Phone>  \n                       </PhoneNumbers>  \nDim elList = From el In cust...<Phone>  \nFor Each e As XElement In elList  \n    Console.WriteLine(e.@type)  \nNext  \n```  \n  \n This example finds all the descendants in the tree named `Phone`, and then finds the attribute named `type`.  \n  \n This code produces the following output:  \n  \n```  \nhome  \nwork  \n```  \n  \n## Example  \n If you want to retrieve the value of the attribute, you can cast it, just as you do for with <xref:System.Xml.Linq.XElement> objects. The following example demonstrates this.  \n  \n```vb  \nDim cust As XElement = <PhoneNumbers>  \n                           <Phone type=\"home\">555-555-5555</Phone>  \n                           <Phone type=\"work\">555-555-6666</Phone>  \n                       </PhoneNumbers>  \nDim elList As IEnumerable(Of XElement) = _  \n    From el In cust...<Phone> _  \n    Select el  \nFor Each el As XElement In elList  \n    Console.WriteLine(el.@type)  \nNext  \n```  \n  \n This code produces the following output:  \n  \n```  \nhome  \nwork  \n```  \n  \n [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides explicit cast operators for the <xref:System.Xml.Linq.XAttribute> class to `string`, `bool`, `bool?`, `int`, `int?`, `uint`, `uint?`, `long`, `long?`, `ulong`, `ulong?`, `float`, `float?`, `double`, `double?`, `decimal`, `decimal?`, `DateTime`, `DateTime?`, `TimeSpan`, `TimeSpan?`, `GUID`, and `GUID?`.  \n  \n## Example  \n The following example shows the same code for an attribute that is in a namespace. For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```vb  \nImports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim cust As XElement = _  \n            <aw:PhoneNumbers>  \n                <aw:Phone aw:type=\"home\">555-555-5555</aw:Phone>  \n                <aw:Phone aw:type=\"work\">555-555-6666</aw:Phone>  \n            </aw:PhoneNumbers>  \n        Dim elList As IEnumerable(Of XElement) = _  \n            From el In cust...<aw:Phone> _  \n            Select el  \n        For Each el As XElement In elList  \n            Console.WriteLine(el.@aw:type)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This code produces the following output:  \n  \n```  \nhome  \nwork  \n```  \n  \n## See also\n\n- [LINQ to XML Axes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)\n","nodes":[{"pos":[4,146],"embed":true,"restype":"x-metadata","content":"title: \"How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 11b938d7-c011-4048-900e-8b9183c41c94","nodes":[{"content":"How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)","nodes":[{"pos":[0,64],"content":"How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)","pos":[0,64]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[153,217],"content":"How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)","linkify":"How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)","pos":[0,64]}]},{"content":"This topic explains how to retrieve a single attribute of an element, given the attribute name.","pos":[218,313]},{"content":"This is useful for writing query expressions where you want to find an element that has a particular attribute.","pos":[314,425]},{"pos":[432,603],"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class returns the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> with the specified name.","source":"The <xref:System.Xml.Linq.XElement.Attribute%2A> method of the <xref:System.Xml.Linq.XElement> class returns the <xref:System.Xml.Linq.XAttribute> with the specified name."},{"pos":[612,619],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[623,706],"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;</ph> method.","source":"The following example uses the <xref:System.Xml.Linq.XElement.Attribute%2A> method."},{"pos":[1065,1173],"content":"This example finds all the descendants in the tree named <ph id=\"ph1\">`Phone`</ph>, and then finds the attribute named <ph id=\"ph2\">`type`</ph>.","source":"This example finds all the descendants in the tree named `Phone`, and then finds the attribute named `type`."},{"content":"This code produces the following output:","pos":[1180,1220]},{"pos":[1258,1265],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"If you want to retrieve the value of the attribute, you can cast it, just as you do for with <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects.","pos":[1269,1402],"source":"If you want to retrieve the value of the attribute, you can cast it, just as you do for with <xref:System.Xml.Linq.XElement> objects."},{"content":"The following example demonstrates this.","pos":[1403,1443]},{"content":"This code produces the following output:","pos":[1858,1898]},{"pos":[1934,2300],"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides explicit cast operators for the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> class to <ph id=\"ph3\">`string`</ph>, <ph id=\"ph4\">`bool`</ph>, <ph id=\"ph5\">`bool?`</ph>, <ph id=\"ph6\">`int`</ph>, <ph id=\"ph7\">`int?`</ph>, <ph id=\"ph8\">`uint`</ph>, <ph id=\"ph9\">`uint?`</ph>, <ph id=\"ph10\">`long`</ph>, <ph id=\"ph11\">`long?`</ph>, <ph id=\"ph12\">`ulong`</ph>, <ph id=\"ph13\">`ulong?`</ph>, <ph id=\"ph14\">`float`</ph>, <ph id=\"ph15\">`float?`</ph>, <ph id=\"ph16\">`double`</ph>, <ph id=\"ph17\">`double?`</ph>, <ph id=\"ph18\">`decimal`</ph>, <ph id=\"ph19\">`decimal?`</ph>, <ph id=\"ph20\">`DateTime`</ph>, <ph id=\"ph21\">`DateTime?`</ph>, <ph id=\"ph22\">`TimeSpan`</ph>, <ph id=\"ph23\">`TimeSpan?`</ph>, <ph id=\"ph24\">`GUID`</ph>, and <ph id=\"ph25\">`GUID?`</ph>.","source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides explicit cast operators for the <xref:System.Xml.Linq.XAttribute> class to `string`, `bool`, `bool?`, `int`, `int?`, `uint`, `uint?`, `long`, `long?`, `ulong`, `ulong?`, `float`, `float?`, `double`, `double?`, `decimal`, `decimal?`, `DateTime`, `DateTime?`, `TimeSpan`, `TimeSpan?`, `GUID`, and `GUID?`."},{"pos":[2309,2316],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same code for an attribute that is in a namespace.","pos":[2320,2402]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[2403,2563],"source":" For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This code produces the following output:","pos":[3165,3205]},{"pos":[3243,3251],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3255,3366],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML Axes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept>","source":"[LINQ to XML Axes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)"}]}