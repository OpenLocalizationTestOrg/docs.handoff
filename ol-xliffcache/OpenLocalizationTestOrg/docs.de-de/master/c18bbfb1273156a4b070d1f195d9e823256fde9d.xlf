<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="expression-classes.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c18bbfb1273156a4b070d1f195d9e823256fde9d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\expression-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c07bd91ff105e9f0e0ceeaa3961a8ad76d7cf378</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4f1fa96a049f13f554fbfbb860780bb8b016e6a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Framework Types Supporting Expression Trees</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about framework types supporting expression trees, creating expression trees, and techniques for working with expression tree APIs.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Framework Types Supporting Expression Trees</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous -- Expression Trees Explained<ept id="p1">](expression-trees-explained.md)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There is a large list of classes in the .NET Core framework that work with Expression Trees.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can see the full list at <ph id="ph1">&lt;xref:System.Linq.Expressions&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Rather than run through the full list, let's understand how the framework classes have been designed.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In language design, an expression is a body of code that evaluates and returns a value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Expressions may be very simple: the constant expression <ph id="ph1">`1`</ph> returns the constant value of 1.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They may be more complicated: The expression <ph id="ph1">`(-B + Math.Sqrt(B*B - 4 * A * C)) / (2 * A)`</ph> returns one root for a quadratic equation (in the case where the equation has a solution).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It all starts with System.Linq.Expression</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>One of the complexities of working with expression trees is that many different kinds of expressions are valid in many places in programs.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Consider an assignment expression.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The right hand side of an assignment could be a constant value, a variable, a method call expression, or others.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>That language flexibility means that you may encounter many different expression types anywhere in the nodes of a tree when you traverse an expression tree.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Therefore, when you can work with the base expression type, that's the simplest way to work.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, sometimes you need to know more.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The base Expression class contains a <ph id="ph1">`NodeType`</ph> property for this purpose.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It returns an <ph id="ph1">`ExpressionType`</ph> which is an enumeration of possible expression types.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Once you know the type of the node, you can cast it to that type, and perform specific actions knowing the type of the expression node.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can search for certain node types, and then work with the specific properties of that kind of expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, this code will print the name of a variable for a variable access expression.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>I've followed the practice of checking the node type, then casting to a variable access expression and then checking the properties of the specific expression type:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Creating Expression Trees</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System.Linq.Expression`</ph> class also contains many static methods to create expressions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These methods create an expression node using the arguments supplied for its children.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this way, you build an expression up from its leaf nodes.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, this code builds an Add expression:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can see from this simple example that many types are involved in creating and working with expression trees.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>That complexity is necessary to provide the capabilities of the rich vocabulary provided by the C# language.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Navigating the APIs</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There are Expression node types that map to almost all of the syntax elements of the C# language.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each type has specific methods for that type of language element.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It's a lot to keep in your head at one time.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Rather than try to memorize everything, here are the techniques I use to work with Expression trees:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Look at the members of the <ph id="ph1">`ExpressionType`</ph> enum to determine possible nodes you should be examining.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This really helps when you want to traverse and understand an expression tree.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Look at the static members of the <ph id="ph1">`Expression`</ph> class to build an expression.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Those methods can build any expression type from a set of its child nodes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Look at the <ph id="ph1">`ExpressionVisitor`</ph> class to build a modified expression tree.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You'll find more as you look at each of those three areas.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Invariably, you will find what you need when you start with one of those three steps.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Next -- Executing Expression Trees<ept id="p1">](expression-trees-execution.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>