<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="service-identity-and-authentication.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbb10eb7682f3bcdbecc294aef41c48086546e52</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\service-identity-and-authentication.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">96184fb83fb95373454f0854b382a09367786fb9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c5e7e554fa704fd775e8e09846e6ff0c40687c5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Service Identity and Authentication | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Service Identity and Authentication</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A service's <bpt id="p1">*</bpt>endpoint identity<ept id="p1">*</ept>is a value generated from the service Web Services Description Language (WSDL).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This value, propagated to any client, is used to authenticate the service.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>After the client initiates a communication to an endpoint and the service authenticates itself to the client, the client compares the endpoint identity value with the actual value the endpoint authentication process returned.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If they match, the client is assured it has contacted the expected service endpoint.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This functions as a protection against <bpt id="p1">*</bpt>phishing<ept id="p1">*</ept> by preventing a client from being redirected to an endpoint hosted by a malicious service.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For a sample application that demonstrates identity setting, see <bpt id="p1">[</bpt>Service Identity Sample<ept id="p1">](../../../../docs/framework/wcf/samples/service-identity-sample.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> endpoints and endpoint addresses, see <bpt id="p1">[</bpt>Addresses<ept id="p1">](../../../../docs/framework/wcf/feature-details/endpoint-addresses.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you use NT LanMan (NTLM) for authentication, the service identity is not checked because, under NTLM, the client is unable to authenticate the server.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>NTLM is used when computers are part of a Windows workgroup, or when running an older version of Windows that does not support Kerberos authentication.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When the client initiates a secure channel to send a message to a service over it, the <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> infrastructure authenticates the service, and only sends the message if the service identity matches the identity specified in the endpoint address the client uses.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Identity processing consists of the following stages:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>At design time, the client developer determines the service's identity from the endpoint's metadata (exposed through WSDL).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>At runtime, the client application checks the claims of the service's security credentials before sending any messages to the service.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Identity processing on the client is analogous to client authentication on the service.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A secure service does not execute code until the client's credentials have been authenticated.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Likewise, the client does not send messages to the service until the service's credentials have been authenticated based on what is known in advance from the service's metadata.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress.Identity%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> class represents the identity of the service called by the client.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The service publishes the <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress.Identity%2A&gt;</ph> in its metadata.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the client developer runs the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> against the service endpoint, the generated configuration contains the value of the service's <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress.Identity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> infrastructure (if configured with security) verifies that the service possesses the identity specified.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The metadata contains the expected identity of the service, so it is recommended that you expose the service metadata through secure means, for example, by creating an HTTPS endpoint for the service.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>How to: Secure Metadata Endpoints<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-secure-metadata-endpoints.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Identity Types</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A service can provide five types of identities.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each identity type corresponds to an element that can be contained inside the <ph id="ph1">`&lt;identity&gt;`</ph> element in configuration.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The type used depends on the scenario and the service's security requirements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following table describes each identity type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Identity type</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Typical scenario</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Domain Name System (DNS)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use this element with X.509 certificates or Windows accounts.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It compares the DNS name specified in the credential with the value specified in this element.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A DNS check enables you to use certificates with DNS or subject names.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If a certificate is reissued with the same DNS or subject name, then the identity check is still valid.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When a certificate is reissued, it gets a new RSA key but retains the same DNS or subject name.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This means that clients do not have to update their identity information about the service.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Certificate.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The default when <ph id="ph1">`ClientCredentialType`</ph> is set to Certificate.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This element specifies a Base64-encoded X.509 certificate value to compare with the client.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Also use this element when using a <ph id="ph1">[!INCLUDE[infocard](../../../../includes/infocard-md.md)]</ph> as a credential to authenticate the service.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This element restricts authentication to a single certificate based upon its thumbprint value.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This enables stricter authentication because thumbprint values are unique.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This comes with one caveat: If the certificate is reissued with the same Subject name, it also has a new Thumbprint.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Therefore, clients are not able to validate the service unless the new thumbprint is known.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> finding a certificate's thumbprint, see <bpt id="p1">[</bpt>How to: Retrieve the Thumbprint of a Certificate<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-retrieve-the-thumbprint-of-a-certificate.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Certificate Reference</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Identical to the Certificate option described previously.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, this element enables you to specify a certificate name and store location from which to retrieve the certificate.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Same as the Certificate scenario described previously.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The benefit is that the certificate store location can change.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>RSA</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This element specifies an RSA key value to compare with the client.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This is similar to the certificate option but rather than using the certificate's thumbprint, the certificate's RSA key is used instead.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An RSA check enables you to specifically restrict authentication to a single certificate based upon its RSA key.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This enables stricter authentication of a specific RSA key at the expense of the service, which no longer works with existing clients if the RSA key value changes.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>User principal name (UPN).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The default when the <ph id="ph1">`ClientCredentialType`</ph> is set to Windows and the service process is not running under one of the system accounts.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This element specifies the UPN that the service is running under.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See the Kerberos Protocol and Identity section of <bpt id="p1">[</bpt>Overriding the Identity of a Service for Authentication<ept id="p1">](../../../../docs/framework/wcf/extending/overriding-the-identity-of-a-service-for-authentication.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This ensures that the service is running under a specific Windows user account.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The user account can be either the current logged-on user or the service running under a particular user account.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This setting takes advantage of Windows Kerberos security if the service is running under a domain account within an Active Directory environment.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Service principal name (SPN).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The default when the <ph id="ph1">`ClientCredentialType`</ph> is set to Windows and the service process is running under one of the system accounts—LocalService, LocalSystem, or NetworkService.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This element specifies the SPN associated with the service's account.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See the Kerberos Protocol and Identity section of <bpt id="p1">[</bpt>Overriding the Identity of a Service for Authentication<ept id="p1">](../../../../docs/framework/wcf/extending/overriding-the-identity-of-a-service-for-authentication.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This ensures that the SPN and the specific Windows account associated with the SPN identify the service.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can use the Setspn.exe tool to associate a machine account for the service's user account.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This setting takes advantage of Windows Kerberos security if the service is running under one of the system accounts or under a domain account that has an associated SPN name with it and the computer is a member of a domain within an Active Directory environment.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Specifying Identity at the Service</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Typically, you do not have to set the identity on a service because the selection of a client credential type dictates the type of identity exposed in the service metadata.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> how to override or specify service identity, see <bpt id="p1">[</bpt>Overriding the Identity of a Service for Authentication<ept id="p1">](../../../../docs/framework/wcf/extending/overriding-the-identity-of-a-service-for-authentication.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">\&lt;</ph>identity&gt; Element in Configuration</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you change the client credential type in the binding previously shown to <ph id="ph1">`Certificate,`</ph> then the generated WSDL contains a Base64 serialized X.509 certificate for the identity value as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is the default for all client credential types other than Windows.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can change the value of the default service identity or change the type of the identity by using the <ph id="ph1">`&lt;identity&gt;`</ph> element in configuration or by setting the identity in code.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following configuration code sets a domain name system (DNS) identity with the value <ph id="ph1">`contoso.com`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Setting Identity Programmatically</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Your service does not have to explicitly specify an identity, because <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> automatically determines it.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> allows you to specify an identity on an endpoint, if required.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following code adds a new service endpoint with a specific DNS identity.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Specifying Identity at the Client</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>At design time, a client developer typically uses the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> to generate client configuration.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The generated configuration file (intended for use by the client) contains the server's identity.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, the following code is generated from a service that specifies a DNS identity, as shown in the preceding example.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Note that the client's endpoint identity value matches that of the service.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In this case, when the client receives the Windows (Kerberos) credentials for the service, it expects the value to be <ph id="ph1">`contoso.com`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If, instead of Windows, the service specifies a certificate as the client credential type, then the certificate's DNS property is expected to be the value <ph id="ph1">`contoso.com`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>(Or if the DNS property is <ph id="ph1">`null`</ph>, the certificate's subject name must be <ph id="ph2">`contoso.com`</ph>.)</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Using a Specific Value for Identity</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following client configuration file shows how the service's identity is expected to be a specific value.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In the following example, the client can communicate with two endpoints.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The first is identified with a certificate thumbprint and the second with a certificate RSA key.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>That is, a certificate that contains only a public key/private key pair, but is not issued by a trusted authority.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Identity Checking at Run Time</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>At design time, a client developer determines the server's identity through its metadata.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>At runtime, the identity check is performed before calling any endpoints on the service.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The identity value is tied to the type of authentication specified by metadata; in other words, the type of credentials used for the service.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the channel is configured to authenticate using message- or transport-level Secure Sockets Layer (SSL) with X.509 certificates for authentication, the following identity values are valid:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>DNS.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures that the certificate provided during the SSL handshake contains a DNS or <ph id="ph2">`CommonName`</ph> (CN) attribute equal to the value specified in the DNS identity on the client.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Note that these checks are done in addition to determining the validity of the server certificate.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> validates that the server certificate is issued by a trusted root authority.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Certificate.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>During the SSL handshake, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures that the remote endpoint provides the exact certificate value specified in the identity.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Certificate Reference.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Same as Certificate.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>RSA.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>During the SSL handshake, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures that the remote endpoint provides the exact RSA key specified in the identity.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If the service authenticates using message- or transport-level SSL with a Windows credential for authentication, and negotiates the credential, the following identity values are valid:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>DNS.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The negotiation passes the service's SPN so that the DNS name can be checked.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The SPN is in the form <ph id="ph1">`host/&lt;dns name&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>SPN.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>An explicit service SPN is returned, for example, <ph id="ph1">`host/myservice`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>UPN.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The UPN of the service account.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The UPN is in the form <ph id="ph1">`username`</ph><ph id="ph2">@</ph><ph id="ph3">`domain`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example, when the service is running in a user account, it may be <ph id="ph1">`username@contoso.com`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Specifying the identity programmatically (using the <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress.Identity%2A&gt;</ph> property) is optional.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If no identity is specified, and the client credential type is Windows, the default is SPN with the value set to the hostname part of the service endpoint address prefixed with the "host/" literal.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If no identity is specified, and the client credential type is a certificate, the default is <ph id="ph1">`Certificate`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This applies to both message- and transport-level security.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Identity and Custom Bindings</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Because the identity of a service depends on the binding type used, ensure that an appropriate identity is exposed when creating a custom binding.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For example, in the following code example, the identity exposed is not compatible with the security type, because the identity for the secure conversation bootstrap binding does not match the identity for the binding on the endpoint.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The secure conversation binding sets the DNS identity, while the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement&gt;</ph> sets the UPN or SPN identity.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> how to stack binding elements correctly for a custom binding, see <bpt id="p1">[</bpt>Creating User-Defined Bindings<ept id="p1">](../../../../docs/framework/wcf/extending/creating-user-defined-bindings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> creating a custom binding with the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement&gt;</ph>, see <bpt id="p1">[</bpt>How to: Create a SecurityBindingElement for a Specified Authentication Mode<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-securitybindingelement-for-a-specified-authentication-mode.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Custom Binding Using the SecurityBindingElement<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-custom-binding-using-the-securitybindingelement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a SecurityBindingElement for a Specified Authentication Mode<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-securitybindingelement-for-a-specified-authentication-mode.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Custom Client Identity Verifier<ept id="p1">](../../../../docs/framework/wcf/extending/how-to-create-a-custom-client-identity-verifier.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Selecting a Credential Type<ept id="p1">](../../../../docs/framework/wcf/feature-details/selecting-a-credential-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Working with Certificates<ept id="p1">](../../../../docs/framework/wcf/feature-details/working-with-certificates.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating User-Defined Bindings<ept id="p1">](../../../../docs/framework/wcf/extending/creating-user-defined-bindings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Retrieve the Thumbprint of a Certificate<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-retrieve-the-thumbprint-of-a-certificate.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>