{"content":"---\ntitle: \"Join Operations (C#)\"\nms.date: 07/20/2015\nms.assetid: 5105e0da-1267-4c00-837a-f0e9602279b8\n---\n# Join Operations (C#)\nA *join* of two data sources is the association of objects in one data source with objects that share a common attribute in another data source.  \n  \n Joining is an important operation in queries that target data sources whose relationships to each other cannot be followed directly. In object-oriented programming, this could mean a correlation between objects that is not modeled, such as the backwards direction of a one-way relationship. An example of a one-way relationship is a Customer class that has a property of type City, but the City class does not have a property that is a collection of Customer objects. If you have a list of City objects and you want to find all the customers in each city, you could use a join operation to find them.  \n  \n The join methods provided in the LINQ framework are <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>. These methods perform equijoins, or joins that match two data sources based on equality of their keys. (For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned. The <xref:System.Linq.Enumerable.GroupJoin%2A> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins. A left outer join is a join that returns each element of the first (left) data source, even if it has no correlated elements in the other data source.  \n  \n The following illustration shows a conceptual view of two sets and the elements within those sets that are included in either an inner join or a left outer join.  \n  \n ![Two overlapping circles showing inner&#47;outer.](./media/join-operations/join-method-overlapping-circles.png)  \n  \n## Methods  \n  \n|Method Name|Description|C# Query Expression Syntax|More Information|  \n|-----------------|-----------------|---------------------------------|----------------------|  \n|Join|Joins two sequences based on key selector functions and extracts pairs of values.|`join … in … on … equals …`|<xref:System.Linq.Enumerable.Join%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.Join%2A?displayProperty=nameWithType>|  \n|GroupJoin|Joins two sequences based on key selector functions and groups the resulting matches for each element.|`join … in … on … equals … into …`|<xref:System.Linq.Enumerable.GroupJoin%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.GroupJoin%2A?displayProperty=nameWithType>|  \n  \n## See also\n\n- <xref:System.Linq>\n- [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)\n- [Anonymous Types](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)\n- [Formulate Joins and Cross-Product Queries](../../../../framework/data/adonet/sql/linq/formulate-joins-and-cross-product-queries.md)\n- [join clause](../../../../csharp/language-reference/keywords/join-clause.md)\n- [How to: Join by Using Composite Keys](../../../../csharp/programming-guide/linq-query-expressions/how-to-join-by-using-composite-keys.md)\n- [How to: Join Content from Dissimilar Files (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)\n- [How to: Order the Results of a Join Clause](../../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md)\n- [How to: Perform Custom Join Operations](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-custom-join-operations.md)\n- [How to: Perform Grouped Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-grouped-joins.md)\n- [How to: Perform Inner Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-inner-joins.md)\n- [How to: Perform Left Outer Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-left-outer-joins.md)\n- [How to: Populate Object Collections from Multiple Sources (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)\n","nodes":[{"pos":[4,102],"embed":true,"restype":"x-metadata","content":"title: \"Join Operations (C#)\"\nms.date: 07/20/2015\nms.assetid: 5105e0da-1267-4c00-837a-f0e9602279b8","nodes":[{"content":"Join Operations (C#)","nodes":[{"pos":[0,20],"content":"Join Operations (C#)","nodes":[{"content":"Join Operations (C#)","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[109,129],"content":"Join Operations (C#)","linkify":"Join Operations (C#)","nodes":[{"content":"Join Operations (C#)","pos":[0,20]}]},{"pos":[130,274],"content":"A <bpt id=\"p1\">*</bpt>join<ept id=\"p1\">*</ept> of two data sources is the association of objects in one data source with objects that share a common attribute in another data source.","source":"A *join* of two data sources is the association of objects in one data source with objects that share a common attribute in another data source."},{"content":"Joining is an important operation in queries that target data sources whose relationships to each other cannot be followed directly.","pos":[281,413]},{"content":"In object-oriented programming, this could mean a correlation between objects that is not modeled, such as the backwards direction of a one-way relationship.","pos":[414,571]},{"content":"An example of a one-way relationship is a Customer class that has a property of type City, but the City class does not have a property that is a collection of Customer objects.","pos":[572,748]},{"content":"If you have a list of City objects and you want to find all the customers in each city, you could use a join operation to find them.","pos":[749,881]},{"content":"The join methods provided in the LINQ framework are <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.","pos":[888,1025],"source":"The join methods provided in the LINQ framework are <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>."},{"content":"These methods perform equijoins, or joins that match two data sources based on equality of their keys.","pos":[1026,1128]},{"content":"(For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned.","pos":[1129,1433],"source":" (For comparison, Transact-SQL supports join operators other than 'equals', for example the 'less than' operator.) In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join, a type of join in which only those objects that have a match in the other data set are returned."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins.","pos":[1434,1608],"source":" The <xref:System.Linq.Enumerable.GroupJoin%2A> method has no direct equivalent in relational database terms, but it implements a superset of inner joins and left outer joins."},{"content":"A left outer join is a join that returns each element of the first (left) data source, even if it has no correlated elements in the other data source.","pos":[1609,1759]},{"content":"The following illustration shows a conceptual view of two sets and the elements within those sets that are included in either an inner join or a left outer join.","pos":[1766,1927]},{"content":"Two overlapping circles showing inner&amp;#47;outer.","pos":[1936,1984],"source":"Two overlapping circles showing inner&#47;outer."},{"pos":[2055,2062],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method Name","pos":[2069,2080]},{"content":"Description","pos":[2081,2092]},{"content":"C# Query Expression Syntax","pos":[2093,2119]},{"content":"More Information","pos":[2120,2136]},{"content":"Join","pos":[2238,2242]},{"content":"Joins two sequences based on key selector functions and extracts pairs of values.","pos":[2243,2324]},{"content":"GroupJoin","pos":[2502,2511]},{"content":"Joins two sequences based on key selector functions and groups the resulting matches for each element.","pos":[2512,2614]},{"pos":[2814,2822],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2847,2976],"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>","source":"[Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)"},{"pos":[2979,3073],"content":"<bpt id=\"p1\">[</bpt>Anonymous Types<ept id=\"p1\">](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)</ept>","source":"[Anonymous Types](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)"},{"pos":[3076,3208],"content":"<bpt id=\"p1\">[</bpt>Formulate Joins and Cross-Product Queries<ept id=\"p1\">](../../../../framework/data/adonet/sql/linq/formulate-joins-and-cross-product-queries.md)</ept>","source":"[Formulate Joins and Cross-Product Queries](../../../../framework/data/adonet/sql/linq/formulate-joins-and-cross-product-queries.md)"},{"pos":[3211,3287],"content":"<bpt id=\"p1\">[</bpt>join clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/join-clause.md)</ept>","source":"[join clause](../../../../csharp/language-reference/keywords/join-clause.md)"},{"pos":[3290,3428],"content":"<bpt id=\"p1\">[</bpt>How to: Join by Using Composite Keys<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-join-by-using-composite-keys.md)</ept>","source":"[How to: Join by Using Composite Keys](../../../../csharp/programming-guide/linq-query-expressions/how-to-join-by-using-composite-keys.md)"},{"pos":[3431,3589],"content":"<bpt id=\"p1\">[</bpt>How to: Join Content from Dissimilar Files (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)</ept>","source":"[How to: Join Content from Dissimilar Files (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-join-content-from-dissimilar-files-linq.md)"},{"pos":[3592,3742],"content":"<bpt id=\"p1\">[</bpt>How to: Order the Results of a Join Clause<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md)</ept>","source":"[How to: Order the Results of a Join Clause](../../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md)"},{"pos":[3745,3887],"content":"<bpt id=\"p1\">[</bpt>How to: Perform Custom Join Operations<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-custom-join-operations.md)</ept>","source":"[How to: Perform Custom Join Operations](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-custom-join-operations.md)"},{"pos":[3890,4014],"content":"<bpt id=\"p1\">[</bpt>How to: Perform Grouped Joins<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-grouped-joins.md)</ept>","source":"[How to: Perform Grouped Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-grouped-joins.md)"},{"pos":[4017,4137],"content":"<bpt id=\"p1\">[</bpt>How to: Perform Inner Joins<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-inner-joins.md)</ept>","source":"[How to: Perform Inner Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-inner-joins.md)"},{"pos":[4140,4270],"content":"<bpt id=\"p1\">[</bpt>How to: Perform Left Outer Joins<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-left-outer-joins.md)</ept>","source":"[How to: Perform Left Outer Joins](../../../../csharp/programming-guide/linq-query-expressions/how-to-perform-left-outer-joins.md)"},{"pos":[4273,4461],"content":"<bpt id=\"p1\">[</bpt>How to: Populate Object Collections from Multiple Sources (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)</ept>","source":"[How to: Populate Object Collections from Multiple Sources (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)"}]}