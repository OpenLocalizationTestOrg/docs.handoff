<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90ef90319dbf2c85cf06aaee6b187a04d04a7abe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\debug-trace-profile\invalidoverlappedtopinvoke-mda.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1d3646b3277d399a410f877b523a40204dabdce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db9810aa1be59dc9c8ed6dc4b57eb74a3eaad2fe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>invalidOverlappedToPinvoke MDA | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>invalidOverlappedToPinvoke MDA</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`invalidOverlappedToPinvoke`</ph> managed debugging assistant (MDA) is activated when an overlapped pointer that was not created on the garbage collection heap is passed to specific Win32 functions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By default, this MDA is activated only if the platform invoke call is defined in your code and the debugger reports the JustMyCode status of each method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A debugger that does not understand JustMyCode (such as MDbg.exe with no extensions) will not activate this MDA.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This MDA can be enabled for those debuggers by using a configuration file and explicitly settting <ph id="ph1">`justMyCode="false"`</ph> in the .mda.config file <ph id="ph2">`(&lt;invalidOverlappedToPinvoke enable="true" justMyCode="false"/&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Symptoms</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Crashes or unexplainable heap corruptions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Cause</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An overlapped pointer that was not created on the garbage collection heap is passed to specific operating system functions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following table shows the functions that this MDA tracks.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Module</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>HttpApi.dll</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>IpHlpApi.dll</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>kernel32.dll</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>kernel32.dll</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>kernel32.dll</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>kernel32.dll</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>kernel32.dll</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>kernel32.dll</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>MSWSock.dll</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>WS2_32.dll</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>WS2_32.dll</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>WS2_32.dll</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>WS2_32.dll</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>MQRT.dll</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The potential for heap corruption is high for this condition because the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> making the call might unload.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> unloads, the application code will either free the memory for the overlapped pointer, causing corruption when the operation finishes, or the code will leak the memory, causing difficulties later.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Resolution</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use an <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> object, calling the <ph id="ph2">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;</ph> method to get a <ph id="ph3">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure that can be passed to the function.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> unloads, the CLR waits until the asynchronous operation completes before freeing the pointer.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Effect on the Runtime</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This MDA had no effect on the CLR.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following is an example of output from this MDA.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Configuration</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id="p1">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interop Marshaling<ept id="p1">](../../../docs/framework/interop/interop-marshaling.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>