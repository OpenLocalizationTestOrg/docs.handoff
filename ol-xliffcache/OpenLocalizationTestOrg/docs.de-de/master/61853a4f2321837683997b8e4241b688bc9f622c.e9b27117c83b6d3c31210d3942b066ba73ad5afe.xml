{"content":"---\ntitle: \"Sub Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Sub\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Public keyword, Sub statements\"\n  - \"procedures, creating\"\n  - \"declaring procedures, Sub statement\"\n  - \"arguments [Visual Basic], Sub procedures\"\n  - \"As keyword, Sub statements\"\n  - \"Optional keyword, Sub statements\"\n  - \"declarations, procedures\"\n  - \"Sub keyword\"\n  - \"Handles keyword, Sub statements\"\n  - \"Protected Friend keyword\"\n  - \"ParamArray keyword, Sub statements\"\n  - \"Implements keyword, Sub statements\"\n  - \"Sub statement\"\n  - \"subroutines\"\n  - \"ByRef keyword, Sub statements\"\n  - \"Sub procedures, Sub statement\"\n  - \"recursive procedures\"\n  - \"Private keyword, Sub statements\"\n  - \"Friend keyword, Sub statements\"\n  - \"Exit statement, Sub statements\"\n  - \"procedures, Sub\"\n  - \"End keyword, Sub statements\"\n  - \"ByVal keyword, Sub statements\"\n  - \"Visual Basic code, Sub procedures\"\nms.assetid: e347d700-d06c-405b-b302-e9b1edb57dfc\ncaps.latest.revision: 52\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Sub Statement (Visual Basic)\nDeclares the name, parameters, and code that define a `Sub` procedure.  \n  \n## Syntax  \n  \n```  \n[ <attributelist> ] [ Partial ] [ accessmodifier ] [ proceduremodifiers ] [ Shared ] [ Shadows ] [ Async ]  \nSub name [ (Of typeparamlist) ] [ (parameterlist) ] [ Implements implementslist | Handles eventlist ]  \n    [ statements ]  \n    [ Exit Sub ]  \n    [ statements ]  \nEnd Sub  \n```  \n  \n## Parts  \n  \n-   `attributelist`  \n  \n     Optional. See [Attribute List](attribute-list.md).  \n  \n-   `Partial`  \n  \n     Optional. Indicates definition of a partial method. See [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md).  \n  \n-   `accessmodifier`  \n  \n     Optional. Can be one of the following:  \n  \n    -   [Public](../modifiers/public.md)  \n  \n    -   [Protected](../modifiers/protected.md)  \n  \n    -   [Friend](../modifiers/friend.md)  \n  \n    -   [Private](../modifiers/private.md)  \n  \n    -   `Protected Friend`  \n  \n     See [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n-   `proceduremodifiers`  \n  \n     Optional. Can be one of the following:  \n  \n    -   [Overloads](../modifiers/overloads.md)  \n  \n    -   [Overrides](../modifiers/overrides.md)  \n  \n    -   [Overridable](../modifiers/overridable.md)  \n  \n    -   [NotOverridable](../modifiers/notoverridable.md)  \n  \n    -   [MustOverride](../modifiers/mustoverride.md)  \n  \n    -   `MustOverride Overrides`  \n  \n    -   `NotOverridable Overrides`  \n  \n-   `Shared`  \n  \n     Optional. See [Shared](../modifiers/shared.md).  \n  \n-   `Shadows`  \n  \n     Optional. See [Shadows](../modifiers/shadows.md).  \n  \n-   `Async`  \n  \n     Optional. See [Async](../modifiers/async.md).  \n  \n-   `name`  \n  \n     Required. Name of the procedure. See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md). To create a constructor procedure for a class, set the name of a `Sub` procedure to the `New` keyword. For more information, see [Object Lifetime: How Objects Are Created and Destroyed](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md).  \n  \n-   `typeparamlist`  \n  \n     Optional. List of type parameters for a generic procedure. See [Type List](type-list.md).  \n  \n-   `parameterlist`  \n  \n     Optional. List of local variable names representing the parameters of this procedure. See [Parameter List](parameter-list.md).  \n  \n-   `Implements`  \n  \n     Optional. Indicates that this procedure implements one or more `Sub` procedures, each one defined in an interface implemented by this procedure's containing class or structure. See [Implements Statement](implements-statement.md).  \n  \n-   `implementslist`  \n  \n     Required if `Implements` is supplied. List of `Sub` procedures being implemented.  \n  \n     `implementedprocedure [ , implementedprocedure ... ]`  \n  \n     Each `implementedprocedure` has the following syntax and parts:  \n  \n     `interface.definedname`  \n  \n    |Part|Description|  \n    |---|---|  \n    |`interface`|Required. Name of an interface implemented by this procedure's containing class or structure.|  \n    |`definedname`|Required. Name by which the procedure is defined in `interface`.|  \n  \n-   `Handles`  \n  \n     Optional. Indicates that this procedure can handle one or more specific events. See [Handles](handles-clause.md).  \n  \n-   `eventlist`  \n  \n     Required if `Handles` is supplied. List of events this procedure handles.  \n  \n     `eventspecifier [ , eventspecifier ... ]`  \n  \n     Each `eventspecifier` has the following syntax and parts:  \n  \n     `eventvariable.event`  \n  \n    |Part|Description|  \n    |---|---|  \n    |`eventvariable`|Required. Object variable declared with the data type of the class or structure that raises the event.|  \n    |`event`|Required. Name of the event this procedure handles.|  \n  \n-   `statements`  \n  \n     Optional. Block of statements to run within this procedure.  \n  \n-   `End Sub`  \n  \n     Terminates the definition of this procedure.  \n  \n## Remarks  \n All executable code must be inside a procedure. Use a `Sub` procedure when you don't want to return a value to the calling code. Use a `Function` procedure when you want to return a value.  \n  \n## Defining a Sub Procedure  \n You can define a `Sub` procedure only at the module level. The declaration context for a sub procedure must, therefore, be a class, a structure, a module, or an interface and can't be a source file, a namespace, a procedure, or a block. For more information, see [Declaration Contexts and Default Access Levels](declaration-contexts-and-default-access-levels.md).  \n  \n `Sub` procedures default to public access. You can adjust their access levels by using the access modifiers.  \n  \n If the procedure uses the `Implements` keyword, the containing class or structure must have an `Implements` statement that immediately follows its `Class` or `Structure` statement. The `Implements` statement must include each interface that's specified in `implementslist`. However, the name by which an interface defines the `Sub` (in `definedname`) doesn't have to match the name of this procedure (in `name`).  \n  \n## Returning from a Sub Procedure  \n When a `Sub` procedure returns to the calling code, execution continues with the statement after the statement that called it.  \n  \n The following example shows a return from a `Sub` procedure.  \n  \n```vb  \nSub mySub(ByVal q As String)  \n    Return  \nEnd Sub   \n```  \n  \n The `Exit Sub` and `Return` statements cause an immediate exit from a `Sub` procedure. Any number of `Exit Sub` and `Return` statements can appear anywhere in the procedure, and you can mix `Exit Sub` and `Return` statements.  \n  \n## Calling a Sub Procedure  \n You call a `Sub` procedure by using the procedure name in a statement and then following that name with its argument list in parentheses. You can omit the parentheses only if you don't supply any arguments. However, your code is more readable if you always include the parentheses.  \n  \n A `Sub` procedure and a `Function` procedure  can have parameters and perform a series of statements. However, a `Function` procedure returns a value, and a `Sub` procedure doesn't. Therefore, you can't use a `Sub` procedure in an expression.  \n  \n You can use the `Call` keyword when you call a `Sub` procedure, but that keyword isn't recommended for most uses. For more information, see [Call Statement](call-statement.md).  \n  \n Visual Basic sometimes rearranges arithmetic expressions to increase internal efficiency. For that reason, if your argument list includes expressions that call other procedures, you shouldn't assume that those expressions will be called in a particular order.  \n  \n## Async Sub Procedures  \n By using the Async feature, you can invoke asynchronous functions without using explicit callbacks or manually splitting your code across multiple functions or lambda expressions.  \n  \n If you mark a procedure with the [Async](../modifiers/async.md) modifier, you can use the [Await](../../../visual-basic/language-reference/operators/await-operator.md) operator in the procedure. When control reaches an `Await` expression in the `Async` procedure, control returns to the caller, and progress in the procedure is suspended until the awaited task completes. When the task is complete, execution can resume in the procedure.  \n  \n> [!NOTE]\n>  An `Async` procedure returns to the caller when either the first awaited object thatâ€™s not yet complete is encountered or the end of the `Async` procedure is reached, whichever occurs first.  \n  \n You can also mark a [Function Statement](function-statement.md) with the `Async` modifier. An `Async` function can have a return type of <xref:System.Threading.Tasks.Task%601> or <xref:System.Threading.Tasks.Task>. An example later in this topic shows an `Async` function that has a return type of <xref:System.Threading.Tasks.Task%601>.  \n  \n `Async` `Sub` procedures are primarily used for event handlers, where a value can't be returned. An `Async``Sub` procedure can't be awaited, and the caller of an `Async``Sub` procedure can't catch exceptions that the `Sub` procedure throws.  \n  \n An `Async` procedure can't declare any [ByRef](../modifiers/byref.md) parameters.  \n  \n For more information about `Async` procedures, see [Asynchronous Programming with Async and Await](../../../visual-basic/programming-guide/concepts/async/index.md), [Control Flow in Async Programs](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md), and [Async Return Types](../../../visual-basic/programming-guide/concepts/async/async-return-types.md).  \n  \n## Example  \n The following example uses the `Sub` statement to define the name, parameters, and code that form the body of a `Sub` procedure.  \n  \n [!code-vb[VbVbalrStatements#58](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/sub-statement_1.vb)]  \n  \n## Example  \n In the following example, `DelayAsync` is an an `Async``Function` that has a return type of <xref:System.Threading.Tasks.Task%601>. `DelayAsync` has a `Return` statement that returns an integer. Therefore, the function declaration of `DelayAsync` must have a return type of `Task(Of Integer)`. Because the return type is `Task(Of Integer)`, the evaluation of the `Await` expression in `DoSomethingAsync` produces an integer, as the following statement shows: `Dim result As Integer = Await delayTask`.  \n  \n The `startButton_Click` procedure is an example of an `Async Sub` procedure. Because `DoSomethingAsync` is an `Async` function, the task for the call to `DoSomethingAsync` must be awaited, as the following statement shows: `Await DoSomethingAsync()`. The `startButton_Click``Sub` procedure must be defined with the `Async` modifier because it has an `Await` expression.  \n  \n [!code-vb[csAsyncMethod#1](../../../csharp/programming-guide/classes-and-structs/codesnippet/VisualBasic/sub-statement_2.vb)]  \n  \n## See Also  \n [Implements Statement](implements-statement.md)   \n [Function Statement](function-statement.md)   \n [Parameter List](parameter-list.md)   \n [Dim Statement](dim-statement.md)   \n [Call Statement](call-statement.md)   \n [Of](of-clause.md)   \n [Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)   \n [How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)   \n [Troubleshooting Procedures](../../../visual-basic/programming-guide/language-features/procedures/troubleshooting-procedures.md)   \n [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md)\n","nodes":[{"pos":[12,57],"content":"Sub Statement (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Sub Statement (Visual Basic) | Microsoft Docs","pos":[0,45]}]},{"pos":[1372,1400],"content":"Sub Statement (Visual Basic)","linkify":"Sub Statement (Visual Basic)","nodes":[{"content":"Sub Statement (Visual Basic)","pos":[0,28]}]},{"pos":[1401,1471],"content":"Declares the name, parameters, and code that define a <ph id=\"ph1\">`Sub`</ph> procedure.","source":"Declares the name, parameters, and code that define a `Sub` procedure."},{"pos":[1480,1486],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1794,1799],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Optional.","pos":[1835,1844]},{"content":"See <bpt id=\"p1\">[</bpt>Attribute List<ept id=\"p1\">](attribute-list.md)</ept>.","pos":[1845,1885],"source":" See [Attribute List](attribute-list.md)."},{"content":"Optional.","pos":[1915,1924]},{"content":"Indicates definition of a partial method.","pos":[1925,1966]},{"content":"See <bpt id=\"p1\">[</bpt>Partial Methods<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md)</ept>.","pos":[1967,2078],"source":" See [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md)."},{"content":"Optional.","pos":[2115,2124]},{"content":"Can be one of the following:","pos":[2125,2153]},{"pos":[2167,2199],"content":"<bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../modifiers/public.md)</ept>","source":"[Public](../modifiers/public.md)"},{"pos":[2213,2251],"content":"<bpt id=\"p1\">[</bpt>Protected<ept id=\"p1\">](../modifiers/protected.md)</ept>","source":"[Protected](../modifiers/protected.md)"},{"pos":[2265,2297],"content":"<bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../modifiers/friend.md)</ept>","source":"[Friend](../modifiers/friend.md)"},{"pos":[2311,2345],"content":"<bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../modifiers/private.md)</ept>","source":"[Private](../modifiers/private.md)"},{"pos":[2388,2518],"content":"See <bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","source":"See [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"content":"Optional.","pos":[2559,2568]},{"content":"Can be one of the following:","pos":[2569,2597]},{"pos":[2611,2649],"content":"<bpt id=\"p1\">[</bpt>Overloads<ept id=\"p1\">](../modifiers/overloads.md)</ept>","source":"[Overloads](../modifiers/overloads.md)"},{"pos":[2663,2701],"content":"<bpt id=\"p1\">[</bpt>Overrides<ept id=\"p1\">](../modifiers/overrides.md)</ept>","source":"[Overrides](../modifiers/overrides.md)"},{"pos":[2715,2757],"content":"<bpt id=\"p1\">[</bpt>Overridable<ept id=\"p1\">](../modifiers/overridable.md)</ept>","source":"[Overridable](../modifiers/overridable.md)"},{"pos":[2771,2819],"content":"<bpt id=\"p1\">[</bpt>NotOverridable<ept id=\"p1\">](../modifiers/notoverridable.md)</ept>","source":"[NotOverridable](../modifiers/notoverridable.md)"},{"pos":[2833,2877],"content":"<bpt id=\"p1\">[</bpt>MustOverride<ept id=\"p1\">](../modifiers/mustoverride.md)</ept>","source":"[MustOverride](../modifiers/mustoverride.md)"},{"content":"Optional.","pos":[2984,2993]},{"content":"See <bpt id=\"p1\">[</bpt>Shared<ept id=\"p1\">](../modifiers/shared.md)</ept>.","pos":[2994,3031],"source":" See [Shared](../modifiers/shared.md)."},{"content":"Optional.","pos":[3061,3070]},{"content":"See <bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../modifiers/shadows.md)</ept>.","pos":[3071,3110],"source":" See [Shadows](../modifiers/shadows.md)."},{"content":"Optional.","pos":[3138,3147]},{"content":"See <bpt id=\"p1\">[</bpt>Async<ept id=\"p1\">](../modifiers/async.md)</ept>.","pos":[3148,3183],"source":" See [Async](../modifiers/async.md)."},{"content":"Required.","pos":[3210,3219]},{"content":"Name of the procedure.","pos":[3220,3242]},{"content":"See <bpt id=\"p1\">[</bpt>Declared Element Names<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.","pos":[3243,3375],"source":" See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)."},{"content":"To create a constructor procedure for a class, set the name of a <ph id=\"ph1\">`Sub`</ph> procedure to the <ph id=\"ph2\">`New`</ph> keyword.","pos":[3376,3478],"source":" To create a constructor procedure for a class, set the name of a `Sub` procedure to the `New` keyword."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Object Lifetime: How Objects Are Created and Destroyed<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept>.","pos":[3479,3698],"source":" For more information, see [Object Lifetime: How Objects Are Created and Destroyed](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)."},{"content":"Optional.","pos":[3734,3743]},{"content":"List of type parameters for a generic procedure.","pos":[3744,3792]},{"content":"See <bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](type-list.md)</ept>.","pos":[3793,3823],"source":" See [Type List](type-list.md)."},{"content":"Optional.","pos":[3859,3868]},{"content":"List of local variable names representing the parameters of this procedure.","pos":[3869,3944]},{"content":"See <bpt id=\"p1\">[</bpt>Parameter List<ept id=\"p1\">](parameter-list.md)</ept>.","pos":[3945,3985],"source":" See [Parameter List](parameter-list.md)."},{"content":"Optional.","pos":[4018,4027]},{"content":"Indicates that this procedure implements one or more <ph id=\"ph1\">`Sub`</ph> procedures, each one defined in an interface implemented by this procedure's containing class or structure.","pos":[4028,4194],"source":" Indicates that this procedure implements one or more `Sub` procedures, each one defined in an interface implemented by this procedure's containing class or structure."},{"content":"See <bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](implements-statement.md)</ept>.","pos":[4195,4247],"source":" See [Implements Statement](implements-statement.md)."},{"content":"Required if <ph id=\"ph1\">`Implements`</ph> is supplied.","pos":[4284,4321],"source":"Required if `Implements` is supplied."},{"content":"List of <ph id=\"ph1\">`Sub`</ph> procedures being implemented.","pos":[4322,4365],"source":" List of `Sub` procedures being implemented."},{"pos":[4440,4503],"content":"Each <ph id=\"ph1\">`implementedprocedure`</ph> has the following syntax and parts:","source":"Each `implementedprocedure` has the following syntax and parts:"},{"content":"Part","pos":[4548,4552]},{"content":"Description","pos":[4553,4564]},{"content":"Required.","pos":[4601,4610]},{"content":"Name of an interface implemented by this procedure's containing class or structure.","pos":[4611,4694]},{"content":"Required.","pos":[4717,4726]},{"content":"Name by which the procedure is defined in <ph id=\"ph1\">`interface`</ph>.","pos":[4727,4781],"source":" Name by which the procedure is defined in `interface`."},{"content":"Optional.","pos":[4812,4821]},{"content":"Indicates that this procedure can handle one or more specific events.","pos":[4822,4891]},{"content":"See <bpt id=\"p1\">[</bpt>Handles<ept id=\"p1\">](handles-clause.md)</ept>.","pos":[4892,4925],"source":" See [Handles](handles-clause.md)."},{"content":"Required if <ph id=\"ph1\">`Handles`</ph> is supplied.","pos":[4957,4991],"source":"Required if `Handles` is supplied."},{"content":"List of events this procedure handles.","pos":[4992,5030]},{"pos":[5093,5150],"content":"Each <ph id=\"ph1\">`eventspecifier`</ph> has the following syntax and parts:","source":"Each `eventspecifier` has the following syntax and parts:"},{"content":"Part","pos":[5193,5197]},{"content":"Description","pos":[5198,5209]},{"content":"Required.","pos":[5250,5259]},{"content":"Object variable declared with the data type of the class or structure that raises the event.","pos":[5260,5352]},{"content":"Required.","pos":[5369,5378]},{"content":"Name of the event this procedure handles.","pos":[5379,5420]},{"content":"Optional.","pos":[5454,5463]},{"content":"Block of statements to run within this procedure.","pos":[5464,5513]},{"content":"Terminates the definition of this procedure.","pos":[5543,5587]},{"pos":[5596,5603],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All executable code must be inside a procedure.","pos":[5607,5654]},{"content":"Use a <ph id=\"ph1\">`Sub`</ph> procedure when you don't want to return a value to the calling code.","pos":[5655,5735],"source":" Use a `Sub` procedure when you don't want to return a value to the calling code."},{"content":"Use a <ph id=\"ph1\">`Function`</ph> procedure when you want to return a value.","pos":[5736,5795],"source":" Use a `Function` procedure when you want to return a value."},{"pos":[5804,5828],"content":"Defining a Sub Procedure","linkify":"Defining a Sub Procedure","nodes":[{"content":"Defining a Sub Procedure","pos":[0,24]}]},{"content":"You can define a <ph id=\"ph1\">`Sub`</ph> procedure only at the module level.","pos":[5832,5890],"source":"You can define a `Sub` procedure only at the module level."},{"content":"The declaration context for a sub procedure must, therefore, be a class, a structure, a module, or an interface and can't be a source file, a namespace, a procedure, or a block.","pos":[5891,6068]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Declaration Contexts and Default Access Levels<ept id=\"p1\">](declaration-contexts-and-default-access-levels.md)</ept>.","pos":[6069,6195],"source":" For more information, see [Declaration Contexts and Default Access Levels](declaration-contexts-and-default-access-levels.md)."},{"content":"<ph id=\"ph1\">`Sub`</ph> procedures default to public access.","pos":[6202,6244],"source":"`Sub` procedures default to public access."},{"content":"You can adjust their access levels by using the access modifiers.","pos":[6245,6310]},{"content":"If the procedure uses the <ph id=\"ph1\">`Implements`</ph> keyword, the containing class or structure must have an <ph id=\"ph2\">`Implements`</ph> statement that immediately follows its <ph id=\"ph3\">`Class`</ph> or <ph id=\"ph4\">`Structure`</ph> statement.","pos":[6317,6497],"source":"If the procedure uses the `Implements` keyword, the containing class or structure must have an `Implements` statement that immediately follows its `Class` or `Structure` statement."},{"content":"The <ph id=\"ph1\">`Implements`</ph> statement must include each interface that's specified in <ph id=\"ph2\">`implementslist`</ph>.","pos":[6498,6590],"source":" The `Implements` statement must include each interface that's specified in `implementslist`."},{"content":"However, the name by which an interface defines the <ph id=\"ph1\">`Sub`</ph> (in <ph id=\"ph2\">`definedname`</ph>) doesn't have to match the name of this procedure (in <ph id=\"ph3\">`name`</ph>).","pos":[6591,6729],"source":" However, the name by which an interface defines the `Sub` (in `definedname`) doesn't have to match the name of this procedure (in `name`)."},{"pos":[6738,6768],"content":"Returning from a Sub Procedure","linkify":"Returning from a Sub Procedure","nodes":[{"content":"Returning from a Sub Procedure","pos":[0,30]}]},{"pos":[6772,6898],"content":"When a <ph id=\"ph1\">`Sub`</ph> procedure returns to the calling code, execution continues with the statement after the statement that called it.","source":"When a `Sub` procedure returns to the calling code, execution continues with the statement after the statement that called it."},{"pos":[6905,6965],"content":"The following example shows a return from a <ph id=\"ph1\">`Sub`</ph> procedure.","source":"The following example shows a return from a `Sub` procedure."},{"content":"The <ph id=\"ph1\">`Exit Sub`</ph> and <ph id=\"ph2\">`Return`</ph> statements cause an immediate exit from a <ph id=\"ph3\">`Sub`</ph> procedure.","pos":[7044,7130],"source":"The `Exit Sub` and `Return` statements cause an immediate exit from a `Sub` procedure."},{"content":"Any number of <ph id=\"ph1\">`Exit Sub`</ph> and <ph id=\"ph2\">`Return`</ph> statements can appear anywhere in the procedure, and you can mix <ph id=\"ph3\">`Exit Sub`</ph> and <ph id=\"ph4\">`Return`</ph> statements.","pos":[7131,7269],"source":" Any number of `Exit Sub` and `Return` statements can appear anywhere in the procedure, and you can mix `Exit Sub` and `Return` statements."},{"pos":[7278,7301],"content":"Calling a Sub Procedure","linkify":"Calling a Sub Procedure","nodes":[{"content":"Calling a Sub Procedure","pos":[0,23]}]},{"content":"You call a <ph id=\"ph1\">`Sub`</ph> procedure by using the procedure name in a statement and then following that name with its argument list in parentheses.","pos":[7305,7442],"source":"You call a `Sub` procedure by using the procedure name in a statement and then following that name with its argument list in parentheses."},{"content":"You can omit the parentheses only if you don't supply any arguments.","pos":[7443,7511]},{"content":"However, your code is more readable if you always include the parentheses.","pos":[7512,7586]},{"content":"A <ph id=\"ph1\">`Sub`</ph> procedure and a <ph id=\"ph2\">`Function`</ph> procedure  can have parameters and perform a series of statements.","pos":[7593,7694],"source":"A `Sub` procedure and a `Function` procedure  can have parameters and perform a series of statements."},{"content":"However, a <ph id=\"ph1\">`Function`</ph> procedure returns a value, and a <ph id=\"ph2\">`Sub`</ph> procedure doesn't.","pos":[7695,7774],"source":" However, a `Function` procedure returns a value, and a `Sub` procedure doesn't."},{"content":"Therefore, you can't use a <ph id=\"ph1\">`Sub`</ph> procedure in an expression.","pos":[7775,7835],"source":" Therefore, you can't use a `Sub` procedure in an expression."},{"content":"You can use the <ph id=\"ph1\">`Call`</ph> keyword when you call a <ph id=\"ph2\">`Sub`</ph> procedure, but that keyword isn't recommended for most uses.","pos":[7842,7955],"source":"You can use the `Call` keyword when you call a `Sub` procedure, but that keyword isn't recommended for most uses."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Call Statement<ept id=\"p1\">](call-statement.md)</ept>.","pos":[7956,8018],"source":" For more information, see [Call Statement](call-statement.md)."},{"content":"Visual Basic sometimes rearranges arithmetic expressions to increase internal efficiency.","pos":[8025,8114]},{"content":"For that reason, if your argument list includes expressions that call other procedures, you shouldn't assume that those expressions will be called in a particular order.","pos":[8115,8284]},{"pos":[8293,8313],"content":"Async Sub Procedures","linkify":"Async Sub Procedures","nodes":[{"content":"Async Sub Procedures","pos":[0,20]}]},{"content":"By using the Async feature, you can invoke asynchronous functions without using explicit callbacks or manually splitting your code across multiple functions or lambda expressions.","pos":[8317,8496]},{"content":"If you mark a procedure with the <bpt id=\"p1\">[</bpt>Async<ept id=\"p1\">](../modifiers/async.md)</ept> modifier, you can use the <bpt id=\"p2\">[</bpt>Await<ept id=\"p2\">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in the procedure.","pos":[8503,8697],"source":"If you mark a procedure with the [Async](../modifiers/async.md) modifier, you can use the [Await](../../../visual-basic/language-reference/operators/await-operator.md) operator in the procedure."},{"content":"When control reaches an <ph id=\"ph1\">`Await`</ph> expression in the <ph id=\"ph2\">`Async`</ph> procedure, control returns to the caller, and progress in the procedure is suspended until the awaited task completes.","pos":[8698,8874],"source":" When control reaches an `Await` expression in the `Async` procedure, control returns to the caller, and progress in the procedure is suspended until the awaited task completes."},{"content":"When the task is complete, execution can resume in the procedure.","pos":[8875,8940]},{"pos":[8948,9149],"content":"[!NOTE]\n An `Async` procedure returns to the caller when either the first awaited object thatâ€™s not yet complete is encountered or the end of the `Async` procedure is reached, whichever occurs first.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">`Async`</ph> procedure returns to the caller when either the first awaited object thatâ€™s not yet complete is encountered or the end of the <ph id=\"ph2\">`Async`</ph> procedure is reached, whichever occurs first.","pos":[9,199],"source":" An `Async` procedure returns to the caller when either the first awaited object thatâ€™s not yet complete is encountered or the end of the `Async` procedure is reached, whichever occurs first."}]},{"content":"You can also mark a <bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](function-statement.md)</ept> with the <ph id=\"ph1\">`Async`</ph> modifier.","pos":[9156,9246],"source":"You can also mark a [Function Statement](function-statement.md) with the `Async` modifier."},{"content":"An <ph id=\"ph1\">`Async`</ph> function can have a return type of <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.","pos":[9247,9370],"source":" An `Async` function can have a return type of <xref:System.Threading.Tasks.Task%601> or <xref:System.Threading.Tasks.Task>."},{"content":"An example later in this topic shows an <ph id=\"ph1\">`Async`</ph> function that has a return type of <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[9371,9493],"source":" An example later in this topic shows an `Async` function that has a return type of <xref:System.Threading.Tasks.Task%601>."},{"content":"<ph id=\"ph1\">`Async`</ph> <ph id=\"ph2\">`Sub`</ph> procedures are primarily used for event handlers, where a value can't be returned.","pos":[9500,9596],"source":"`Async` `Sub` procedures are primarily used for event handlers, where a value can't be returned."},{"content":"An <ph id=\"ph1\">`Async``Sub`</ph> procedure can't be awaited, and the caller of an <ph id=\"ph2\">`Async``Sub`</ph> procedure can't catch exceptions that the <ph id=\"ph3\">`Sub`</ph> procedure throws.","pos":[9597,9740],"source":" An `Async``Sub` procedure can't be awaited, and the caller of an `Async``Sub` procedure can't catch exceptions that the `Sub` procedure throws."},{"pos":[9747,9828],"content":"An <ph id=\"ph1\">`Async`</ph> procedure can't declare any <bpt id=\"p1\">[</bpt>ByRef<ept id=\"p1\">](../modifiers/byref.md)</ept> parameters.","source":"An `Async` procedure can't declare any [ByRef](../modifiers/byref.md) parameters."},{"pos":[9835,10227],"content":"For more information about <ph id=\"ph1\">`Async`</ph> procedures, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept>, <bpt id=\"p2\">[</bpt>Control Flow in Async Programs<ept id=\"p2\">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>, and <bpt id=\"p3\">[</bpt>Async Return Types<ept id=\"p3\">](../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.","source":"For more information about `Async` procedures, see [Asynchronous Programming with Async and Await](../../../visual-basic/programming-guide/concepts/async/index.md), [Control Flow in Async Programs](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md), and [Async Return Types](../../../visual-basic/programming-guide/concepts/async/async-return-types.md)."},{"pos":[10236,10243],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10247,10375],"content":"The following example uses the <ph id=\"ph1\">`Sub`</ph> statement to define the name, parameters, and code that form the body of a <ph id=\"ph2\">`Sub`</ph> procedure.","source":"The following example uses the `Sub` statement to define the name, parameters, and code that form the body of a `Sub` procedure."},{"pos":[10382,10514],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#58<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/sub-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#58](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/sub-statement_1.vb)]"},{"pos":[10523,10530],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, <ph id=\"ph1\">`DelayAsync`</ph> is an an <ph id=\"ph2\">`Async``Function`</ph> that has a return type of <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[10534,10665],"source":"In the following example, `DelayAsync` is an an `Async``Function` that has a return type of <xref:System.Threading.Tasks.Task%601>."},{"content":"<ph id=\"ph1\">`DelayAsync`</ph> has a <ph id=\"ph2\">`Return`</ph> statement that returns an integer.","pos":[10666,10728],"source":"`DelayAsync` has a `Return` statement that returns an integer."},{"content":"Therefore, the function declaration of <ph id=\"ph1\">`DelayAsync`</ph> must have a return type of <ph id=\"ph2\">`Task(Of Integer)`</ph>.","pos":[10729,10827],"source":" Therefore, the function declaration of `DelayAsync` must have a return type of `Task(Of Integer)`."},{"content":"Because the return type is <ph id=\"ph1\">`Task(Of Integer)`</ph>, the evaluation of the <ph id=\"ph2\">`Await`</ph> expression in <ph id=\"ph3\">`DoSomethingAsync`</ph> produces an integer, as the following statement shows: <ph id=\"ph4\">`Dim result As Integer = Await delayTask`</ph>.","pos":[10828,11035],"source":" Because the return type is `Task(Of Integer)`, the evaluation of the `Await` expression in `DoSomethingAsync` produces an integer, as the following statement shows: `Dim result As Integer = Await delayTask`."},{"content":"The <ph id=\"ph1\">`startButton_Click`</ph> procedure is an example of an <ph id=\"ph2\">`Async Sub`</ph> procedure.","pos":[11042,11118],"source":"The `startButton_Click` procedure is an example of an `Async Sub` procedure."},{"content":"Because <ph id=\"ph1\">`DoSomethingAsync`</ph> is an <ph id=\"ph2\">`Async`</ph> function, the task for the call to <ph id=\"ph3\">`DoSomethingAsync`</ph> must be awaited, as the following statement shows: <ph id=\"ph4\">`Await DoSomethingAsync()`</ph>.","pos":[11119,11292],"source":" Because `DoSomethingAsync` is an `Async` function, the task for the call to `DoSomethingAsync` must be awaited, as the following statement shows: `Await DoSomethingAsync()`."},{"content":"The <ph id=\"ph1\">`startButton_Click``Sub`</ph> procedure must be defined with the <ph id=\"ph2\">`Async`</ph> modifier because it has an <ph id=\"ph3\">`Await`</ph> expression.","pos":[11293,11411],"source":" The `startButton_Click``Sub` procedure must be defined with the `Async` modifier because it has an `Await` expression."},{"pos":[11418,11543],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>csAsyncMethod#1<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/VisualBasic/sub-statement_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[csAsyncMethod#1](../../../csharp/programming-guide/classes-and-structs/codesnippet/VisualBasic/sub-statement_2.vb)]"},{"pos":[11552,11560],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](implements-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[11564,11612],"source":"[Implements Statement](implements-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Function Statement<ept id=\"p1\">](function-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[11615,11660],"source":" [Function Statement](function-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Parameter List<ept id=\"p1\">](parameter-list.md)</ept><ph id=\"ph1\"> </ph>","pos":[11663,11700],"source":" [Parameter List](parameter-list.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Dim Statement<ept id=\"p1\">](dim-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[11703,11738],"source":" [Dim Statement](dim-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Call Statement<ept id=\"p1\">](call-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[11741,11778],"source":" [Call Statement](call-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Of<ept id=\"p1\">](of-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[11781,11801],"source":" [Of](of-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Parameter Arrays<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)</ept><ph id=\"ph1\"> </ph>","pos":[11804,11914],"source":" [Parameter Arrays](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Use a Generic Class<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[11917,12048],"source":" [How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Troubleshooting Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/troubleshooting-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[12051,12181],"source":" [Troubleshooting Procedures](../../../visual-basic/programming-guide/language-features/procedures/troubleshooting-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Partial Methods<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md)</ept>","pos":[12184,12291],"source":" [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md)"}]}