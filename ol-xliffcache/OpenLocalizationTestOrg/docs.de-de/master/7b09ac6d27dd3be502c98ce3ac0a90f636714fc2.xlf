<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="activity-definition-scoping-and-visibility.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b09ac6d27dd3be502c98ce3ac0a90f636714fc2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\activity-definition-scoping-and-visibility.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8acc93d517ba430bd917b72628ba1e03698ce4ff</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05e6e181b22465ac1c36c5f7f55b92ac6381f0bc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Activity Definition Scoping and Visibility</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Activity Definition Scoping and Visibility</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Activity definition scoping and visibility, just like scoping and visibility of an object, is the ability of other objects or activities to access members of the activity.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Activity definition is performed by the following implementations:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Determining the members (<ph id="ph1">&lt;xref:System.Activities.Argument&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.Variable&gt;</ph>, and <ph id="ph3">&lt;xref:System.Activities.ActivityDelegate&gt;</ph> objects, and child activities) an activity exposes to its users.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Implementing the execution logic of the activity</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The implementation may involve members that are not exposed to consumers of the activity, but are rather details of the implementation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Similar to type definition, the activity model allows an author to qualify the visibility of an activity member regarding the definition of the activity being defined.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This visibility governs aspects of member usage, such as data scoping.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In addition to data scoping, activity model visibility can restrict access to other aspects of the activity, such as validation, debugging, tracking, or tracing.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Execution properties use visibility and scoping for constraining execution characteristics to a particular scope of definition.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Secondary roots use visibility and scoping to constrain the state captured by a <ph id="ph1">&lt;xref:System.Activities.Statements.CompensableActivity&gt;</ph> to the scope of definition in which the compensable activities are used.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Definition and usage</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A workflow is written by authoring new activities by inheriting from base activity classes, and by using activities from the <bpt id="p1">[</bpt>Built-In Activity Library<ept id="p1">](net-framework-4-5-built-in-activity-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In order to use an activity, the activity author must configure the visibility of each component of its definition.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Activity Members</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The activity model defines the arguments, variables, delegates, and child activities that the activity makes available to consumers.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each of these members can be declared as <ph id="ph1">`public`</ph> or <ph id="ph2">`private`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Public members are configured by the consumer of the activity, whereas <ph id="ph1">`private`</ph> members use an implementation fixed by the author of the activity.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The visibility rules for data scoping are as follows:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Public members and the public members of public child activities can reference public variables.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Private members and the public members of public child activities can reference arguments and private variables.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A member that can be set by the consumer of an activity should never be made private.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Authoring Models</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Custom activities are defined by using <ph id="ph1">&lt;xref:System.Activities.NativeActivity&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>, <ph id="ph3">&lt;xref:System.Activities.CodeActivity&gt;</ph>, or <ph id="ph4">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Activities that derive from these classes can expose different member types with different visibilities.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>NativeActivity</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Activities that derive from <ph id="ph1">&lt;xref:System.Activities.NativeActivity&gt;</ph> have behavior that is written in imperative code, and can optionally be defined by using existing activities.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Deriving activities from <ph id="ph1">&lt;xref:System.Activities.NativeActivity&gt;</ph> grants access to all of the features exposed by the runtime.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Any member of such an activity can be defined by using either public or private visibility, except arguments, which can only be declared as <ph id="ph1">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Members of classes derived from <ph id="ph1">&lt;xref:System.Activities.NativeActivity&gt;</ph> are declared to the runtime using the <ph id="ph2">&lt;xref:System.Activities.NativeActivityMetadata&gt;</ph> struct passed to the <ph id="ph3">&lt;xref:System.Activities.NativeActivity.CacheMetadata%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Activity</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Activities created by using <ph id="ph1">&lt;xref:System.Activities.Activity&gt;</ph> have behavior that is designed strictly through composing other activities.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Activity&gt;</ph> class has one implementation child activity, obtained by the runtime using <ph id="ph2">&lt;xref:System.Activities.Activity.Implementation%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An activity deriving from <ph id="ph1">&lt;xref:System.Activities.Activity&gt;</ph> can define public arguments, public variables, imported ActivityDelegates, and imported Activities.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Imported ActivityDelegates and Activities are declared as public children of the activity, but cannot be directly scheduled by the activity.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This information is used during validation to avoid running parent-facing validations at locations where the activity will never execute.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Also, imported children, just like public children, can be referenced and scheduled by the activity’s implementation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This means that an activity which imports an activity called Activity1 can contain a <ph id="ph1">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> in its implementation which schedules Activity1.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CodeActivity/ AsyncCodeActivity</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This base class is used for authoring behavior in imperative code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Activities that derive from this class only have access to the arguments they expose.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This means that the only members that these activities can expose are public arguments.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>No other members or visibilities apply to these activities.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Summary of visibilities</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following table summarizes the information earlier in this section.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Member Type</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>NativeActivity</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Activity</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CodeActivity/ AsyncCodeActivity</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Public/ Private</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Public</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>not applicable</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Variables</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Public/ Private</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Public</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>not applicable</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Child Activities</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Public/ Private</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Public, one fixed private child defined in Implementation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>not applicable</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>ActivityDelegates</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Public/ Private</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Public</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>not applicable</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In general, a member that cannot be set by the consumer of an activity should not be made public.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Execution Properties</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In some scenarios, it is useful to scope a particular execution property to the public children of an activity.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.ExecutionProperties&gt;</ph> collection provides this capability with the <ph id="ph2">&lt;xref:System.Activities.ExecutionProperties.Add%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This method has a Boolean parameter indicating whether a particular property is scoped to all children, or just those that are public.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If this parameter is set to <ph id="ph1">`true`</ph>, the property will only be visible to public members and the public members of their public children.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Secondary Roots</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A secondary root is the runtime’s internal mechanism for managing state for compensation activities.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">&lt;xref:System.Activities.Statements.CompensableActivity&gt;</ph> has finished running, its state is not cleaned up immediately.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Instead, the state is maintained by the runtime in a secondary root until the compensation episode has completed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The location environments captured with the secondary root correspond to the scope of definition in which the Compensable activity is used.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>