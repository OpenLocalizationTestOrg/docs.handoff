{"content":"---\ntitle: Expression Trees Summary\ndescription: Recaps how you can use expression trees to create dynamic programs that interpret code as data and build new functionality based on that code.\nms.date: 06/20/2016\nms.assetid: eb687ebd-1149-4453-9fc1-12a084495a66\n---\n\n# Expression Trees Summary\n\n[Previous -- Translating Expressions](expression-trees-translating.md)\n\nIn this series, you've seen how you can use *expression trees* to\ncreate dynamic programs that interpret code as data and build\nnew functionality based on that code.\n\nYou can examine expression trees to understand the intent of\nan algorithm. You can not only examine that code. You can build new\nexpression trees that represent modified versions of the original code.\n\nYou can also use expression trees to look at an algorithm, and\ntranslate that algorithm into another language or environment. \n\n## Limitations\n\nThere are some newer C# language elements that don't translate\nwell into expression trees. Expression trees cannot contain\n`await` expressions, or `async` lambda expressions. Many of the\nfeatures added in the C# 6 release don't appear exactly as written\nin expression trees. Instead, newer features will be exposed\nin expressions trees in the equivalent, earlier syntax. This\nmay not be as much of a limitation as you might think. In fact,\nit means that your code that interprets expression trees will likely\nstill work the same when new language features are introduced.\n\nEven with these limitations, expression trees do enable you to\ncreate dynamic algorithms that rely on interpreting and modifying\ncode that is represented as a data structure. It's a powerful\ntool, and it's one of the features of the .NET ecosystem that\nenables rich libraries such as Entity Framework to accomplish\nwhat they do.\n","nodes":[{"pos":[4,260],"embed":true,"restype":"x-metadata","content":"title: Expression Trees Summary\ndescription: Recaps how you can use expression trees to create dynamic programs that interpret code as data and build new functionality based on that code.\nms.date: 06/20/2016\nms.assetid: eb687ebd-1149-4453-9fc1-12a084495a66","nodes":[{"content":"Expression Trees Summary","nodes":[{"pos":[0,24],"content":"Expression Trees Summary","nodes":[{"content":"Expression Trees Summary","pos":[0,24]}]}],"path":["title"],"nosxs":false},{"content":"Recaps how you can use expression trees to create dynamic programs that interpret code as data and build new functionality based on that code.","nodes":[{"pos":[0,142],"content":"Recaps how you can use expression trees to create dynamic programs that interpret code as data and build new functionality based on that code.","nodes":[{"content":"Recaps how you can use expression trees to create dynamic programs that interpret code as data and build new functionality based on that code.","pos":[0,142]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[268,292],"content":"Expression Trees Summary","linkify":"Expression Trees Summary","nodes":[{"content":"Expression Trees Summary","pos":[0,24]}]},{"pos":[294,364],"content":"<bpt id=\"p1\">[</bpt>Previous -- Translating Expressions<ept id=\"p1\">](expression-trees-translating.md)</ept>","source":"[Previous -- Translating Expressions](expression-trees-translating.md)"},{"pos":[366,531],"content":"In this series, you've seen how you can use <bpt id=\"p1\">*</bpt>expression trees<ept id=\"p1\">*</ept> to create dynamic programs that interpret code as data and build new functionality based on that code.","source":"In this series, you've seen how you can use *expression trees* to\ncreate dynamic programs that interpret code as data and build\nnew functionality based on that code."},{"content":"You can examine expression trees to understand the intent of an algorithm.","pos":[533,607],"source":"You can examine expression trees to understand the intent of\nan algorithm."},{"content":"You can not only examine that code.","pos":[608,643]},{"content":"You can build new expression trees that represent modified versions of the original code.","pos":[644,733],"source":" You can build new\nexpression trees that represent modified versions of the original code."},{"pos":[735,860],"content":"You can also use expression trees to look at an algorithm, and translate that algorithm into another language or environment.","source":"You can also use expression trees to look at an algorithm, and\ntranslate that algorithm into another language or environment."},{"pos":[866,877],"content":"Limitations","linkify":"Limitations","nodes":[{"content":"Limitations","pos":[0,11]}]},{"content":"There are some newer C# language elements that don't translate well into expression trees.","pos":[879,969],"source":"There are some newer C# language elements that don't translate\nwell into expression trees."},{"content":"Expression trees cannot contain <ph id=\"ph1\">`await`</ph> expressions, or <ph id=\"ph2\">`async`</ph> lambda expressions.","pos":[970,1053],"source":" Expression trees cannot contain\n`await` expressions, or `async` lambda expressions."},{"content":"Many of the features added in the C# 6 release don't appear exactly as written in expression trees.","pos":[1054,1153],"source":" Many of the\nfeatures added in the C# 6 release don't appear exactly as written\nin expression trees."},{"content":"Instead, newer features will be exposed in expressions trees in the equivalent, earlier syntax.","pos":[1154,1249],"source":" Instead, newer features will be exposed\nin expressions trees in the equivalent, earlier syntax."},{"content":"This may not be as much of a limitation as you might think.","pos":[1250,1309],"source":" This\nmay not be as much of a limitation as you might think."},{"content":"In fact, it means that your code that interprets expression trees will likely still work the same when new language features are introduced.","pos":[1310,1450],"source":" In fact,\nit means that your code that interprets expression trees will likely\nstill work the same when new language features are introduced."},{"content":"Even with these limitations, expression trees do enable you to create dynamic algorithms that rely on interpreting and modifying code that is represented as a data structure.","pos":[1452,1626],"source":"Even with these limitations, expression trees do enable you to\ncreate dynamic algorithms that rely on interpreting and modifying\ncode that is represented as a data structure."},{"content":"It's a powerful tool, and it's one of the features of the .NET ecosystem that enables rich libraries such as Entity Framework to accomplish what they do.","pos":[1627,1780],"source":" It's a powerful\ntool, and it's one of the features of the .NET ecosystem that\nenables rich libraries such as Entity Framework to accomplish\nwhat they do."}]}