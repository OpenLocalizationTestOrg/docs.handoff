<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="specifying-an-entry-point.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15a441ea7b0b16c83c590289d04cf0c10623fb85</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\specifying-an-entry-point.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5815999ac3146d9d0cc64c657258dc199896cb96</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f60db3db7580769740b210a832045153dba437eb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Specifying an Entry Point</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Specifying an Entry Point</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An entry point identifies the location of a function in a DLL.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Within a managed project, the original name or ordinal entry point of a target function identifies that function across the interoperation boundary.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Further, you can map the entry point to a different name, effectively renaming the function.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Following is a list of possible reasons to rename a DLL function:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To avoid using case-sensitive API function names</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To comply with existing naming standards</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To accommodate functions that take different data types (by declaring multiple versions of the same DLL function)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To simplify using APIs that contain ANSI and Unicode versions</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic demonstrates how to rename a DLL function in managed code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Renaming a Function in Visual Basic</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Visual Basic uses the <bpt id="p1">**</bpt>Function<ept id="p1">**</ept> keyword in the <bpt id="p2">**</bpt>Declare<ept id="p2">**</ept> statement to set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint?displayProperty=nameWithType&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example shows a basic declaration.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can replace the <bpt id="p1">**</bpt>MessageBox<ept id="p1">**</ept> entry point with <bpt id="p2">**</bpt>MsgBox<ept id="p2">**</ept> by including the <bpt id="p3">**</bpt>Alias<ept id="p3">**</ept> keyword in your definition, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In both examples the <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept> keyword eliminates the need to specify the character-set version of the entry point.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about selecting a character set, see <bpt id="p1">[</bpt>Specifying a Character Set<ept id="p1">](../../../docs/framework/interop/specifying-a-character-set.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Renaming a Function in C# and C++</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint?displayProperty=nameWithType&gt;</ph> field to specify a DLL function by name or ordinal.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the name of the function in your method definition is the same as the entry point in the DLL, you do not have to explicitly identify the function with the <bpt id="p1">**</bpt>EntryPoint<ept id="p1">**</ept> field.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Otherwise, use one of the following attribute forms to indicate a name or ordinal:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Notice that you must prefix an ordinal with the pound sign (#).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to replace <bpt id="p1">**</bpt>MessageBoxA<ept id="p1">**</ept> with <bpt id="p2">**</bpt>MsgBox<ept id="p2">**</ept> in your code by using the <bpt id="p3">**</bpt>EntryPoint<ept id="p3">**</ept> field.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Prototypes in Managed Code<ept id="p1">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](../../../docs/framework/interop/platform-invoke-examples.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling Data with Platform Invoke<ept id="p1">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>