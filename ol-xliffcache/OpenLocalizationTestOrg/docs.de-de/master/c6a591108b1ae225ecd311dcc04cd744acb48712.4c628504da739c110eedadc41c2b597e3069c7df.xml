{"content":"---\ntitle: \"How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"named and optional arguments [C#], Office programming\"\n  - \"optional arguments [C#], Office programming\"\n  - \"named arguments [C#], Office programming\"\nms.assetid: 65b8a222-bcd8-454c-845f-84adff5a356f\ncaps.latest.revision: 34\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide)\nNamed arguments and optional arguments, introduced in [!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)], enhance convenience, flexibility, and readability in C# programming. In addition, these features greatly facilitate access to COM interfaces such as the Microsoft Office automation APIs.  \n  \n In the following example, method [ConvertToTable](http://go.microsoft.com/fwlink/?LinkId=145378) has sixteen parameters that represent characteristics of a table, such as number of columns and rows, formatting, borders, fonts, and colors. All sixteen parameters are optional, because most of the time you do not want to specify particular values for all of them. However, without named and optional arguments, a value or a placeholder value has to be provided for each parameter. With named and optional arguments, you specify values only for the parameters that are required for your project.  \n  \n You must have Microsoft Office Word installed on your computer to complete these procedures.  \n  \n[!INCLUDE[note_settings_general](../../../csharp/language-reference/compiler-messages/includes/note_settings_general_md.md)]  \n  \n### To create a new console application  \n  \n1.  Start Visual Studio.  \n  \n2.  On the **File** menu, point to **New**, and then click **Project**.  \n  \n3.  In the **Templates Categories** pane, expand **Visual C#**, and then click **Windows**.  \n  \n4.  Look in the top of the **Templates** pane to make sure that **.NET Framework 4** appears in the **Target Framework** box.  \n  \n5.  In the **Templates** pane, click **Console Application**.  \n  \n6.  Type a name for your project in the **Name** field.  \n  \n7.  Click **OK**.  \n  \n     The new project appears in **Solution Explorer**.  \n  \n### To add a reference  \n  \n1.  In **Solution Explorer**, right-click your project's name and then click **Add Reference**. The **Add Reference** dialog box appears.  \n  \n2.  On the **.NET** page, select **Microsoft.Office.Interop.Word** in the **Component Name** list.  \n  \n3.  Click **OK**.  \n  \n### To add necessary using directives  \n  \n1.  In **Solution Explorer**, right-click the **Program.cs** file and then click **View Code**.  \n  \n2.  Add the following `using` directives to the top of the code file.  \n  \n     [!code-cs[csProgGuideNamedAndOptional#4](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_1.cs)]  \n  \n### To display text in a Word document  \n  \n1.  In the `Program` class in Program.cs, add the following method to create a Word application and a Word document. The [Add](http://go.microsoft.com/fwlink/?LinkId=145381) method has four optional parameters. This example uses their default values. Therefore, no arguments are necessary in the calling statement.  \n  \n     [!code-cs[csProgGuideNamedAndOptional#6](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_2.cs)]  \n  \n2.  Add the following code at the end of the method to define where to display text in the document, and what text to display.  \n  \n     [!code-cs[csProgGuideNamedAndOptional#7](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_3.cs)]  \n  \n### To run the application  \n  \n1.  Add the following statement to Main.  \n  \n     [!code-cs[csProgGuideNamedAndOptional#8](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_4.cs)]  \n  \n2.  Press CTRL+F5 to run the project. A Word document appears that contains the specified text.  \n  \n### To change the text to a table  \n  \n1.  Use the `ConvertToTable` method to enclose the text in a table. The method has sixteen optional parameters. IntelliSense encloses optional parameters in brackets, as shown in the following illustration.  \n  \n     ![List of parameters for ConvertToTable method.](../../../csharp/programming-guide/classes-and-structs/media/convert_tableparameters.png \"Convert_TableParameters\")  \nConvertToTable parameters  \n  \n     Named and optional arguments enable you to specify values for only the parameters that you want to change. Add the following code to the end of method `DisplayInWord` to create a simple table. The argument specifies that the commas in the text string in `range` separate the cells of the table.  \n  \n     [!code-cs[csProgGuideNamedAndOptional#9](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_5.cs)]  \n  \n     In earlier versions of C#, the call to `ConvertToTable` requires a reference argument for each parameter, as shown in the following code.  \n  \n     [!code-cs[csProgGuideNamedAndOptional#14](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_6.cs)]  \n  \n2.  Press CTRL+F5 to run the project.  \n  \n### To experiment with other parameters  \n  \n1.  To change the table so that it has one column and three rows, replace the last line in `DisplayInWord` with the following statement and then type CTRL+F5.  \n  \n     [!code-cs[csProgGuideNamedAndOptional#10](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_7.cs)]  \n  \n2.  To specify a predefined format for the table, replace the last line in `DisplayInWord` with the following statement and then type CTRL+F5. The format can be any of the [WdTableFormat](http://go.microsoft.com/fwlink/?LinkId=145382) constants.  \n  \n     [!code-cs[csProgGuideNamedAndOptional#11](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_8.cs)]  \n  \n## Example  \n The following code includes the full example.  \n  \n [!code-cs[csProgGuideNamedAndOptional#12](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_9.cs)]  \n  \n## See Also  \n [Named and Optional Arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)","nodes":[{"pos":[12,114],"content":"How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide) | Microsoft Docs","pos":[0,102]}]},{"pos":[721,806],"content":"How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide)","linkify":"How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide)","nodes":[{"content":"How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide)","pos":[0,85]}]},{"content":"Named arguments and optional arguments, introduced in <ph id=\"ph1\">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph>, enhance convenience, flexibility, and readability in C# programming.","pos":[807,1048],"source":"Named arguments and optional arguments, introduced in [!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)], enhance convenience, flexibility, and readability in C# programming."},{"content":"In addition, these features greatly facilitate access to COM interfaces such as the Microsoft Office automation APIs.","pos":[1049,1166]},{"content":"In the following example, method <bpt id=\"p1\">[</bpt>ConvertToTable<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=145378)</ept> has sixteen parameters that represent characteristics of a table, such as number of columns and rows, formatting, borders, fonts, and colors.","pos":[1173,1411],"source":"In the following example, method [ConvertToTable](http://go.microsoft.com/fwlink/?LinkId=145378) has sixteen parameters that represent characteristics of a table, such as number of columns and rows, formatting, borders, fonts, and colors."},{"content":"All sixteen parameters are optional, because most of the time you do not want to specify particular values for all of them.","pos":[1412,1535]},{"content":"However, without named and optional arguments, a value or a placeholder value has to be provided for each parameter.","pos":[1536,1652]},{"content":"With named and optional arguments, you specify values only for the parameters that are required for your project.","pos":[1653,1766]},{"content":"You must have Microsoft Office Word installed on your computer to complete these procedures.","pos":[1773,1865]},{"pos":[2005,2040],"content":"To create a new console application","linkify":"To create a new console application","nodes":[{"content":"To create a new console application","pos":[0,35]}]},{"content":"Start Visual Studio.","pos":[2050,2070]},{"pos":[2080,2147],"content":"On the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, point to <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"On the **File** menu, point to **New**, and then click **Project**."},{"pos":[2157,2244],"content":"In the <bpt id=\"p1\">**</bpt>Templates Categories<ept id=\"p1\">**</ept> pane, expand <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Windows<ept id=\"p3\">**</ept>.","source":"In the **Templates Categories** pane, expand **Visual C#**, and then click **Windows**."},{"pos":[2254,2375],"content":"Look in the top of the <bpt id=\"p1\">**</bpt>Templates<ept id=\"p1\">**</ept> pane to make sure that <bpt id=\"p2\">**</bpt>.NET Framework 4<ept id=\"p2\">**</ept> appears in the <bpt id=\"p3\">**</bpt>Target Framework<ept id=\"p3\">**</ept> box.","source":"Look in the top of the **Templates** pane to make sure that **.NET Framework 4** appears in the **Target Framework** box."},{"pos":[2385,2442],"content":"In the <bpt id=\"p1\">**</bpt>Templates<ept id=\"p1\">**</ept> pane, click <bpt id=\"p2\">**</bpt>Console Application<ept id=\"p2\">**</ept>.","source":"In the **Templates** pane, click **Console Application**."},{"pos":[2452,2503],"content":"Type a name for your project in the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> field.","source":"Type a name for your project in the **Name** field."},{"pos":[2513,2526],"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Click **OK**."},{"pos":[2537,2586],"content":"The new project appears in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>.","source":"The new project appears in **Solution Explorer**."},{"pos":[2596,2614],"content":"To add a reference","linkify":"To add a reference","nodes":[{"content":"To add a reference","pos":[0,18]}]},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click your project's name and then click <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept>.","pos":[2624,2715],"source":"In **Solution Explorer**, right-click your project's name and then click **Add Reference**."},{"content":"The <bpt id=\"p1\">**</bpt>Add Reference<ept id=\"p1\">**</ept> dialog box appears.","pos":[2716,2757],"source":" The **Add Reference** dialog box appears."},{"pos":[2767,2861],"content":"On the <bpt id=\"p1\">**</bpt>.NET<ept id=\"p1\">**</ept> page, select <bpt id=\"p2\">**</bpt>Microsoft.Office.Interop.Word<ept id=\"p2\">**</ept> in the <bpt id=\"p3\">**</bpt>Component Name<ept id=\"p3\">**</ept> list.","source":"On the **.NET** page, select **Microsoft.Office.Interop.Word** in the **Component Name** list."},{"pos":[2871,2884],"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Click **OK**."},{"pos":[2894,2927],"content":"To add necessary using directives","linkify":"To add necessary using directives","nodes":[{"content":"To add necessary using directives","pos":[0,33]}]},{"pos":[2937,3028],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the <bpt id=\"p2\">**</bpt>Program.cs<ept id=\"p2\">**</ept> file and then click <bpt id=\"p3\">**</bpt>View Code<ept id=\"p3\">**</ept>.","source":"In **Solution Explorer**, right-click the **Program.cs** file and then click **View Code**."},{"pos":[3038,3103],"content":"Add the following <ph id=\"ph1\">`using`</ph> directives to the top of the code file.","source":"Add the following `using` directives to the top of the code file."},{"pos":[3114,3296],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamedAndOptional#4<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamedAndOptional#4](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_1.cs)]"},{"pos":[3306,3340],"content":"To display text in a Word document","linkify":"To display text in a Word document","nodes":[{"content":"To display text in a Word document","pos":[0,34]}]},{"content":"In the <ph id=\"ph1\">`Program`</ph> class in Program.cs, add the following method to create a Word application and a Word document.","pos":[3350,3462],"source":"In the `Program` class in Program.cs, add the following method to create a Word application and a Word document."},{"content":"The <bpt id=\"p1\">[</bpt>Add<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=145381)</ept> method has four optional parameters.","pos":[3463,3556],"source":" The [Add](http://go.microsoft.com/fwlink/?LinkId=145381) method has four optional parameters."},{"content":"This example uses their default values.","pos":[3557,3596]},{"content":"Therefore, no arguments are necessary in the calling statement.","pos":[3597,3660]},{"pos":[3671,3853],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamedAndOptional#6<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamedAndOptional#6](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_2.cs)]"},{"content":"Add the following code at the end of the method to define where to display text in the document, and what text to display.","pos":[3863,3985]},{"pos":[3996,4178],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamedAndOptional#7<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamedAndOptional#7](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_3.cs)]"},{"pos":[4188,4210],"content":"To run the application","linkify":"To run the application","nodes":[{"content":"To run the application","pos":[0,22]}]},{"content":"Add the following statement to Main.","pos":[4220,4256]},{"pos":[4267,4449],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamedAndOptional#8<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamedAndOptional#8](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_4.cs)]"},{"content":"Press CTRL+F5 to run the project.","pos":[4459,4492]},{"content":"A Word document appears that contains the specified text.","pos":[4493,4550]},{"pos":[4560,4589],"content":"To change the text to a table","linkify":"To change the text to a table","nodes":[{"content":"To change the text to a table","pos":[0,29]}]},{"content":"Use the <ph id=\"ph1\">`ConvertToTable`</ph> method to enclose the text in a table.","pos":[4599,4662],"source":"Use the `ConvertToTable` method to enclose the text in a table."},{"content":"The method has sixteen optional parameters.","pos":[4663,4706]},{"content":"IntelliSense encloses optional parameters in brackets, as shown in the following illustration.","pos":[4707,4801]},{"content":"<bpt id=\"p1\">![</bpt>List of parameters for ConvertToTable method.<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/media/convert_tableparameters.png \"Convert_TableParameters\")</ept>","pos":[4812,4975],"source":"![List of parameters for ConvertToTable method.](../../../csharp/programming-guide/classes-and-structs/media/convert_tableparameters.png \"Convert_TableParameters\")"},{"content":"ConvertToTable parameters","pos":[4978,5003]},{"content":"Named and optional arguments enable you to specify values for only the parameters that you want to change.","pos":[5014,5120]},{"content":"Add the following code to the end of method <ph id=\"ph1\">`DisplayInWord`</ph> to create a simple table.","pos":[5121,5206],"source":" Add the following code to the end of method `DisplayInWord` to create a simple table."},{"content":"The argument specifies that the commas in the text string in <ph id=\"ph1\">`range`</ph> separate the cells of the table.","pos":[5207,5308],"source":" The argument specifies that the commas in the text string in `range` separate the cells of the table."},{"pos":[5319,5501],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamedAndOptional#9<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_5.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamedAndOptional#9](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_5.cs)]"},{"pos":[5512,5649],"content":"In earlier versions of C#, the call to <ph id=\"ph1\">`ConvertToTable`</ph> requires a reference argument for each parameter, as shown in the following code.","source":"In earlier versions of C#, the call to `ConvertToTable` requires a reference argument for each parameter, as shown in the following code."},{"pos":[5660,5843],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamedAndOptional#14<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_6.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamedAndOptional#14](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_6.cs)]"},{"content":"Press CTRL+F5 to run the project.","pos":[5853,5886]},{"pos":[5896,5931],"content":"To experiment with other parameters","linkify":"To experiment with other parameters","nodes":[{"content":"To experiment with other parameters","pos":[0,35]}]},{"pos":[5941,6095],"content":"To change the table so that it has one column and three rows, replace the last line in <ph id=\"ph1\">`DisplayInWord`</ph> with the following statement and then type CTRL+F5.","source":"To change the table so that it has one column and three rows, replace the last line in `DisplayInWord` with the following statement and then type CTRL+F5."},{"pos":[6106,6289],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamedAndOptional#10<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_7.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamedAndOptional#10](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_7.cs)]"},{"content":"To specify a predefined format for the table, replace the last line in <ph id=\"ph1\">`DisplayInWord`</ph> with the following statement and then type CTRL+F5.","pos":[6299,6437],"source":"To specify a predefined format for the table, replace the last line in `DisplayInWord` with the following statement and then type CTRL+F5."},{"content":"The format can be any of the <bpt id=\"p1\">[</bpt>WdTableFormat<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=145382)</ept> constants.","pos":[6438,6540],"source":" The format can be any of the [WdTableFormat](http://go.microsoft.com/fwlink/?LinkId=145382) constants."},{"pos":[6551,6734],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamedAndOptional#11<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_8.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamedAndOptional#11](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_8.cs)]"},{"pos":[6743,6750],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code includes the full example.","pos":[6754,6799]},{"pos":[6806,6989],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideNamedAndOptional#12<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_9.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideNamedAndOptional#12](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-named-and-optional-arguments-in-office-programming_9.cs)]"},{"pos":[6998,7006],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7010,7127],"content":"<bpt id=\"p1\">[</bpt>Named and Optional Arguments<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>","source":"[Named and Optional Arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)"}]}