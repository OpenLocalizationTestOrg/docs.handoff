<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c71b87e94ecd2058873047e2883b669b36dcaa7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\string-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a460d5e7c4fca3dbdb02d778c489b97ea42a334f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0238b18781c55041671f010d30c88b07152d324</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>String Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>String Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework Data Provider for SQL Server (SqlClient) provides <ph id="ph1">`String`</ph> functions that perform operations on an input <ph id="ph2">`String`</ph> and return a <ph id="ph3">`String`</ph> or numeric value result.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These functions are in the SqlServer namespace, which is available when you use SqlClient.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A provider's namespace property allows the Entity Framework to discover which prefix is used by this provider for specific constructs, such as types and functions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table shows the SqlClient <ph id="ph1">`String`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ASCII(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Returns the ASCII code value of the leftmost character of a string expression.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: Any valid expression of an ASCII <ph id="ph2">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CHAR(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Converts an <ph id="ph1">`Int32`</ph> code to an ASCII String.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: An <ph id="ph2">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An ASCII <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CHARINDEX(`</ph> <ph id="ph2">`expression1, expression2`</ph> [, <ph id="ph3">`start_location`</ph>]<ph id="ph4">`)`</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns the starting position of the specified expression in a character string.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression1`</ph>: An expression that contains the sequence of characters to be found.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The expression can be of a String (ASCII or Unicode) type or of a Binary type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression2`</ph>: An expression, typically a column, to be searched for the specified sequence.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The expression can be of a String (ASCII or Unicode) type or of a Binary type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`start_location`</ph>:(Optional) An Int64 (not returned in SQL Server 2000) or Int32 that represents the character position to start searching for expression1 in expression2.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If start_location is not specified, is a negative number, or is zero, the search starts at the beginning of expression2.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DIFFERENCE(`</ph> <ph id="ph2">`expression, expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Compares the <ph id="ph1">`SOUNDEX`</ph> values of two strings and evaluates the similarity between them.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An ASCII or Unicode <ph id="ph1">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph> can be a constant, a variable, or a column.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">`Int32`</ph> that represents the difference between the SOUNDEX values of two character expressions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The range is from 0 through 4.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>0 indicates a weak similarity or no similarity, and 4 indicates a strong similarity or the same values.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LEFT(`</ph> <ph id="ph2">`expression, count`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns the left part of a character string with the specified number of characters.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: A Unicode or ASCII String type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use the CAST function to explicitly convert character_expression.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`count`</ph>: An <ph id="ph2">`Int64`</ph> (not returned in SQL Server 2000) or <ph id="ph3">`Int32`</ph> type that specifies how many characters of character_expression will be returned.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A Unicode or ASCII <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LEN(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in the specified String expression, excluding trailing blanks.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: An expression of a <ph id="ph2">`String`</ph> (Unicode or ASCII) type or a <ph id="ph3">`Binary`</ph> type</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LOWER(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`String`</ph> expression after converting uppercase character data to lowercase.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: Any valid expression of the <ph id="ph2">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LTRIM(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`String`</ph> expression after removing leading spaces.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: Any valid expression of <ph id="ph2">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NCHAR(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Returns a Unicode <ph id="ph1">`String`</ph> with the specified integer code, as defined by the Unicode standard.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: An <ph id="ph2">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A Unicode <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PATINDEX(`</ph> <ph id="ph2">`'%pattern%'`</ph>, <ph id="ph3">`expression``)`</ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returns the starting position of the first occurrence of a pattern in a specified <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'%pattern%'`</ph>: An ASCII or Unicode <ph id="ph2">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Wildcard characters can be used; however, the % character must come before and after pattern (except in searches for first or last characters).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: An ASCII or Unicode <ph id="ph2">`String`</ph> to search for the specified pattern.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`QUOTENAME(`</ph> <ph id="ph2">`'char_string'`</ph> [, '<ph id="ph3">`quote_char'`</ph>]<ph id="ph4">`)`</ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns a Unicode <ph id="ph1">`String`</ph> with the delimiters added to make the input string a valid SQL Server 2005 delimited identifier.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`char_string`</ph>: A Unicode <ph id="ph2">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`quote_char`</ph>: A one-character string to use as the delimiter.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Can be a single quotation mark ( ' ), a left or right bracket ( [ ] ), or a double quotation mark ( " ).</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`quote_char`</ph> is not specified, brackets are used.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A Unicode <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`REPLACE(`</ph> <ph id="ph2">`expression1`</ph>, <ph id="ph3">`expression2, expression3``)`</ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Repeats a character expression for a specified number of times.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression1`</ph>: The string expression to be searched.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>string_expression1 can be of a Unicode or an ASCII String type.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression2`</ph>:The substring to be found.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>string_expression2 can be of a Unicode or an ASCII String type.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression3`</ph>; The replacement string.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>string_expression3 can be of a Unicode or an ASCII String type.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`REPLICATE(`</ph> <ph id="ph2">`char_expression`</ph>, int_<ph id="ph3">`expression``)`</ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Repeats a character expression for a specified number of times.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`char_expression`</ph>: A Unicode or ASCII <ph id="ph2">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`int_expression`</ph>: <ph id="ph2">`Int64`</ph> (not supported in SQL Server 2000) or <ph id="ph3">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A Unicode or ASCII <ph id="ph1">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`REVERSE(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a Unicode or ASCII String with its character positions reversed from the input string.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: A Unicode or ASCII <ph id="ph2">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A Unicode or ASCII <ph id="ph1">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RIGHT(`</ph> <ph id="ph2">`char_expression`</ph>, <ph id="ph3">`count``)`</ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Returns the right part of a character string with the specified number of characters.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`char_expression`</ph>:A Unicode or ASCII String type.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Use the CAST function to explicitly convert character_expression.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`count`</ph>: An <ph id="ph2">`Int64`</ph> (not returned in SQL Server 2000) or <ph id="ph3">`Int32`</ph> type that specifies how many characters of character_expression will be returned.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>An ASCII <ph id="ph1">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RTRIM(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Returns a Unicode or ASCII String after removing trailing spaces.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: A Unicode or ASCII <ph id="ph2">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A Unicode or ASCII <ph id="ph1">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SOUNDEX(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Returns a four-character (SOUNDEX) code to evaluate the similarity of two strings.<bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: A Unicode or ASCII String type.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>An ASCII <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A four-character (SOUNDEX) code is a string that evaluates the similarity of two strings.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Returns<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SPACE(`</ph> <ph id="ph2">`int_expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Returns an ASCII <ph id="ph1">`String`</ph> of repeated spaces.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`int_expression`</ph>: An <ph id="ph2">`Int64`</ph> (not returned in SQL Server 2000) or <ph id="ph3">`Int32`</ph> that indicates the number of spaces.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>An ASCII <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`STR(`</ph> <ph id="ph2">`float_expression`</ph> [, <ph id="ph3">`length`</ph> [, <ph id="ph4">`decimal`</ph>]]<ph id="ph5">`)`</ph></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Returns an ASCII <ph id="ph1">`String`</ph> converted from numeric data.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`float _expression`</ph>: A expression of approximate numeric (<ph id="ph2">`Double`</ph>) data type with a decimal point.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`length`</ph>: (optional) An <ph id="ph2">`Int32`</ph> that represents the total length.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This includes decimal point, sign, digits, and spaces.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The default is 10.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`decimal`</ph>:(optional) An <ph id="ph2">`Int32`</ph> that represents the number of places to the right of the decimal point.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>decimal must be less than or equal to 16.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>If decimal is more than 16, the result is truncated to sixteen places to the right of the decimal point.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>An ASCII <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`STUFF(`</ph> <ph id="ph2">`str_expression`</ph>, <ph id="ph3">`start, length`</ph>, <ph id="ph4">`str_expression_to_insert``)`</ph></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Deletes a specified length of characters and inserts another set of characters at a specified starting point in a string expression.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str_expression`</ph>: A Unicode or ASCII <ph id="ph2">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`start:`</ph> An <ph id="ph2">`Int64`</ph> (not returned in SQL Server 2000) or <ph id="ph3">`Int32`</ph> value that specifies the location to start the deletion and insertion.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`length`</ph>: An <ph id="ph2">`Int64`</ph> (not returned in SQL Server 2000) or <ph id="ph3">`Int32`</ph> value that specifies the number of characters to delete.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str_expression_to_insert`</ph>: A Unicode or ASCII <ph id="ph2">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A Unicode or ASCII <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SUBSTRING(`</ph> <ph id="ph2">`str_expression`</ph>, <ph id="ph3">`start, length``)`</ph></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Returns part of a <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str_expression`</ph>: An expression of a <ph id="ph2">`String`</ph> (ASCII or Unicode) type or a <ph id="ph3">`Binary`</ph> type.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`start`</ph>: An <ph id="ph2">`Int64`</ph> (not returned in SQL Server 2000) or <ph id="ph3">`Int32`</ph> that specifies where the substring starts.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>1 refers to the first character in the string.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`length`</ph>: An <ph id="ph2">`Int64`</ph> (not returned in SQL Server 2000) or <ph id="ph3">`Int32`</ph> that specifies how many characters of the expression will be returned.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph> (ASCII or Unicode) type or a <ph id="ph2">`Binary`</ph> type.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UNICODE(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Returns the integer value, as defined by the Unicode standard, for the first character of the input expression.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: A Unicode <ph id="ph2">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UPPER(`</ph> <ph id="ph2">`expression`</ph> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`String`</ph> expression after converting lowercase character data to uppercase.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expression`</ph>: An expression of an ASCII or a Unicode String type.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>An ASCII or a Unicode <ph id="ph1">`String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`String`</ph> functions that SqlClient supports, see the documentation for the SQL Server version that you specified in the SqlClient provider manifest:</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>SQL Server 2000</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>SQL Server 2005</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>SQL Server 2008</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Functions (Transact-SQL)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=115915)</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Functions (Transact-SQL)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=115916)</ept></source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Functions (Transact-SQL)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=115914)</ept></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SqlClient for Entity Framework Functions<ept id="p1">](../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Known Issues in SqlClient for Entity Framework<ept id="p1">](../../../../../docs/framework/data/adonet/ef/known-issues-in-sqlclient-for-entity-framework.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>