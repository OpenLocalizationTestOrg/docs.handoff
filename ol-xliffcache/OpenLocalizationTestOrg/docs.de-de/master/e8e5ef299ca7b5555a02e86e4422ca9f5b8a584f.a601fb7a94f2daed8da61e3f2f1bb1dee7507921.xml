{"content":"---\ntitle: \"How to: Iterate Through All Nodes of a Windows Forms TreeView Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"examples [Windows Forms], TreeView control\"\n  - \"TreeView control [Windows Forms], iterating through nodes\"\n  - \"tree nodes in TreeView control [Windows Forms], iterating through\"\nms.assetid: 427f8928-ebcf-4beb-887f-695b905d5134\n---\n# How to: Iterate Through All Nodes of a Windows Forms TreeView Control\nIt is sometimes useful to examine every node in a Windows Forms <xref:System.Windows.Forms.TreeView> control in order to perform some calculation on the node values. This operation can be done using a recursive procedure (recursive method in C# and C++) that iterates through each node in each collection of the tree.  \n  \n Each <xref:System.Windows.Forms.TreeNode> object in a tree view has properties that you can use to navigate the tree view: <xref:System.Windows.Forms.TreeNode.FirstNode%2A>, <xref:System.Windows.Forms.TreeNode.LastNode%2A>, <xref:System.Windows.Forms.TreeNode.NextNode%2A>, <xref:System.Windows.Forms.TreeNode.PrevNode%2A>, and <xref:System.Windows.Forms.TreeNode.Parent%2A>. The value of the <xref:System.Windows.Forms.TreeNode.Parent%2A> property is the parent node of the current node. The child nodes of the current node, if there are any, are listed in its <xref:System.Windows.Forms.TreeNode.Nodes%2A> property. The <xref:System.Windows.Forms.TreeView> control itself has the <xref:System.Windows.Forms.TreeView.TopNode%2A> property, which is the root node of the entire tree view.  \n  \n### To iterate through all nodes of the TreeView control  \n  \n1.  Create a recursive procedure (recursive method in C# and C++) that tests each node.  \n  \n2.  Call the procedure.  \n  \n     The following example shows how to print each <xref:System.Windows.Forms.TreeNode> object's <xref:System.Windows.Forms.TreeNode.Text%2A> property:  \n  \n    ```vb  \n    Private Sub PrintRecursive(ByVal n As TreeNode)  \n       System.Diagnostics.Debug.WriteLine(n.Text)  \n       MessageBox.Show(n.Text)  \n       Dim aNode As TreeNode  \n       For Each aNode In n.Nodes  \n          PrintRecursive(aNode)  \n       Next  \n    End Sub  \n  \n    ' Call the procedure using the top nodes of the treeview.  \n    Private Sub CallRecursive(ByVal aTreeView As TreeView)  \n       Dim n As TreeNode  \n       For Each n In aTreeView.Nodes  \n          PrintRecursive(n)  \n       Next  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void PrintRecursive(TreeNode treeNode)  \n    {  \n       // Print the node.  \n       System.Diagnostics.Debug.WriteLine(treeNode.Text);  \n       MessageBox.Show(treeNode.Text);  \n       // Print each node recursively.  \n       foreach (TreeNode tn in treeNode.Nodes)  \n       {  \n          PrintRecursive(tn);  \n       }  \n    }  \n  \n    // Call the procedure using the TreeView.  \n    private void CallRecursive(TreeView treeView)  \n    {  \n       // Print each node recursively.  \n       TreeNodeCollection nodes = treeView.Nodes;  \n       foreach (TreeNode n in nodes)  \n       {  \n          PrintRecursive(n);  \n       }  \n    }  \n    ```  \n  \n    ```cpp  \n    private:  \n       void PrintRecursive( TreeNode^ treeNode )  \n       {  \n          // Print the node.  \n          System::Diagnostics::Debug::WriteLine( treeNode->Text );  \n          MessageBox::Show( treeNode->Text );  \n  \n          // Print each node recursively.  \n          System::Collections::IEnumerator^ myNodes = (safe_cast<System::Collections::IEnumerable^>(treeNode->Nodes))->GetEnumerator();  \n          try  \n          {  \n             while ( myNodes->MoveNext() )  \n             {  \n                TreeNode^ tn = safe_cast<TreeNode^>(myNodes->Current);  \n                PrintRecursive( tn );  \n             }  \n          }  \n          finally  \n          {  \n             IDisposable^ disposable = dynamic_cast<System::IDisposable^>(myNodes);  \n             if ( disposable != nullptr )  \n                      disposable->Dispose();  \n          }  \n       }  \n  \n       // Call the procedure using the TreeView.  \n       void CallRecursive( TreeView^ treeView )  \n       {  \n          // Print each node recursively.  \n          TreeNodeCollection^ nodes = treeView->Nodes;  \n          System::Collections::IEnumerator^ myNodes = (safe_cast<System::Collections::IEnumerable^>(nodes))->GetEnumerator();  \n          try  \n          {  \n             while ( myNodes->MoveNext() )  \n             {  \n                TreeNode^ n = safe_cast<TreeNode^>(myNodes->Current);  \n                PrintRecursive( n );  \n             }  \n          }  \n          finally  \n          {  \n             IDisposable^ disposable = dynamic_cast<System::IDisposable^>(myNodes);  \n             if ( disposable != nullptr )  \n                      disposable->Dispose();  \n          }  \n       }  \n    ```  \n  \n## See also\n\n- [TreeView Control](treeview-control-windows-forms.md)\n- [Recursive Procedures](~/docs/visual-basic/programming-guide/language-features/procedures/recursive-procedures.md)\n","nodes":[{"pos":[4,404],"embed":true,"restype":"x-metadata","content":"title: \"How to: Iterate Through All Nodes of a Windows Forms TreeView Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"examples [Windows Forms], TreeView control\"\n  - \"TreeView control [Windows Forms], iterating through nodes\"\n  - \"tree nodes in TreeView control [Windows Forms], iterating through\"\nms.assetid: 427f8928-ebcf-4beb-887f-695b905d5134","nodes":[{"content":"How to: Iterate Through All Nodes of a Windows Forms TreeView Control","nodes":[{"pos":[0,69],"content":"How to: Iterate Through All Nodes of a Windows Forms TreeView Control","nodes":[{"content":"How to: Iterate Through All Nodes of a Windows Forms TreeView Control","pos":[0,69]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[411,480],"content":"How to: Iterate Through All Nodes of a Windows Forms TreeView Control","linkify":"How to: Iterate Through All Nodes of a Windows Forms TreeView Control","nodes":[{"content":"How to: Iterate Through All Nodes of a Windows Forms TreeView Control","pos":[0,69]}]},{"content":"It is sometimes useful to examine every node in a Windows Forms <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> control in order to perform some calculation on the node values.","pos":[481,646],"source":"It is sometimes useful to examine every node in a Windows Forms <xref:System.Windows.Forms.TreeView> control in order to perform some calculation on the node values."},{"content":"This operation can be done using a recursive procedure (recursive method in C# and C++) that iterates through each node in each collection of the tree.","pos":[647,798]},{"content":"Each <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeNode&gt;</ph> object in a tree view has properties that you can use to navigate the tree view: <ph id=\"ph2\">&lt;xref:System.Windows.Forms.TreeNode.FirstNode%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Forms.TreeNode.LastNode%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Forms.TreeNode.NextNode%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.Forms.TreeNode.PrevNode%2A&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Windows.Forms.TreeNode.Parent%2A&gt;</ph>.","pos":[805,1180],"source":"Each <xref:System.Windows.Forms.TreeNode> object in a tree view has properties that you can use to navigate the tree view: <xref:System.Windows.Forms.TreeNode.FirstNode%2A>, <xref:System.Windows.Forms.TreeNode.LastNode%2A>, <xref:System.Windows.Forms.TreeNode.NextNode%2A>, <xref:System.Windows.Forms.TreeNode.PrevNode%2A>, and <xref:System.Windows.Forms.TreeNode.Parent%2A>."},{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeNode.Parent%2A&gt;</ph> property is the parent node of the current node.","pos":[1181,1293],"source":" The value of the <xref:System.Windows.Forms.TreeNode.Parent%2A> property is the parent node of the current node."},{"content":"The child nodes of the current node, if there are any, are listed in its <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeNode.Nodes%2A&gt;</ph> property.","pos":[1294,1422],"source":" The child nodes of the current node, if there are any, are listed in its <xref:System.Windows.Forms.TreeNode.Nodes%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> control itself has the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.TreeView.TopNode%2A&gt;</ph> property, which is the root node of the entire tree view.","pos":[1423,1592],"source":" The <xref:System.Windows.Forms.TreeView> control itself has the <xref:System.Windows.Forms.TreeView.TopNode%2A> property, which is the root node of the entire tree view."},{"pos":[1602,1654],"content":"To iterate through all nodes of the TreeView control","linkify":"To iterate through all nodes of the TreeView control","nodes":[{"content":"To iterate through all nodes of the TreeView control","pos":[0,52]}]},{"content":"Create a recursive procedure (recursive method in C# and C++) that tests each node.","pos":[1664,1747]},{"content":"Call the procedure.","pos":[1757,1776]},{"pos":[1787,1933],"content":"The following example shows how to print each <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TreeNode&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Windows.Forms.TreeNode.Text%2A&gt;</ph> property:","source":"The following example shows how to print each <xref:System.Windows.Forms.TreeNode> object's <xref:System.Windows.Forms.TreeNode.Text%2A> property:"},{"pos":[4883,4891],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4895,4948],"content":"<bpt id=\"p1\">[</bpt>TreeView Control<ept id=\"p1\">](treeview-control-windows-forms.md)</ept>","source":"[TreeView Control](treeview-control-windows-forms.md)"},{"pos":[4951,5065],"content":"<bpt id=\"p1\">[</bpt>Recursive Procedures<ept id=\"p1\">](~/docs/visual-basic/programming-guide/language-features/procedures/recursive-procedures.md)</ept>","source":"[Recursive Procedures](~/docs/visual-basic/programming-guide/language-features/procedures/recursive-procedures.md)"}]}