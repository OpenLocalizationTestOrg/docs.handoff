{"content":"---\ntitle: \"How to: Create User-Defined Exceptions\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"user-defined exceptions\"\n  - \"exceptions, examples\"\n  - \"exceptions, user-defined\"\nms.assetid: 25819a5a-f915-4fc8-b924-a76915674e04\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# How to create user-defined exceptions\n\n.NET provides a hierarchy of exception classes ultimately derived from the base class <xref:System.Exception>. However, if none of the predefined exceptions meets your needs, you can create your own exception classes by deriving from the <xref:System.Exception> class.\n\nWhen creating your own exceptions, end the class name of the user-defined exception with the word \"Exception,\" and implement the three common constructors, as shown in the following example. The example defines a new exception class named `EmployeeListNotFoundException`. The class is derived from <xref:System.Exception> and includes three constructors.\n\n[!code-cpp[dg_exceptionDesign#14](../../../samples/snippets/cpp/VS_Snippets_CLR/dg_exceptionDesign/cpp/example2.cpp#14)]\n[!code-csharp[dg_exceptionDesign#14](../../../samples/snippets/csharp/VS_Snippets_CLR/dg_exceptionDesign/cs/example2.cs#14)]\n[!code-vb[dg_exceptionDesign#14](../../../samples/snippets/visualbasic/VS_Snippets_CLR/dg_exceptionDesign/vb/example2.vb#14)]  \n\n> [!NOTE]\n> In situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller). For more information, see [Best practices for exceptions](best-practices-for-exceptions.md).\n\n## See also\n\n- [Exceptions](index.md)\n","nodes":[{"pos":[4,344],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create User-Defined Exceptions\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"user-defined exceptions\"\n  - \"exceptions, examples\"\n  - \"exceptions, user-defined\"\nms.assetid: 25819a5a-f915-4fc8-b924-a76915674e04\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"How to: Create User-Defined Exceptions","nodes":[{"pos":[0,38],"content":"How to: Create User-Defined Exceptions","nodes":[{"content":"How to: Create User-Defined Exceptions","pos":[0,38]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[351,388],"content":"How to create user-defined exceptions","linkify":"How to create user-defined exceptions","nodes":[{"content":"How to create user-defined exceptions","pos":[0,37]}]},{"content":".NET provides a hierarchy of exception classes ultimately derived from the base class <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[390,500],"source":".NET provides a hierarchy of exception classes ultimately derived from the base class <xref:System.Exception>."},{"content":"However, if none of the predefined exceptions meets your needs, you can create your own exception classes by deriving from the <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class.","pos":[501,658],"source":" However, if none of the predefined exceptions meets your needs, you can create your own exception classes by deriving from the <xref:System.Exception> class."},{"content":"When creating your own exceptions, end the class name of the user-defined exception with the word \"Exception,\" and implement the three common constructors, as shown in the following example.","pos":[660,850]},{"content":"The example defines a new exception class named <ph id=\"ph1\">`EmployeeListNotFoundException`</ph>.","pos":[851,931],"source":" The example defines a new exception class named `EmployeeListNotFoundException`."},{"content":"The class is derived from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> and includes three constructors.","pos":[932,1014],"source":" The class is derived from <xref:System.Exception> and includes three constructors."},{"pos":[1393,1689],"content":"[!NOTE]\nIn situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller). For more information, see [Best practices for exceptions](best-practices-for-exceptions.md).","leadings":["","> "],"nodes":[{"content":"In situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller). For more information, see [Best practices for exceptions](best-practices-for-exceptions.md).","pos":[8,294],"nodes":[{"content":"In situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller).","pos":[0,193]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best practices for exceptions<ept id=\"p1\">](best-practices-for-exceptions.md)</ept>.","pos":[194,286],"source":" For more information, see [Best practices for exceptions](best-practices-for-exceptions.md)."}]}]},{"pos":[1694,1702],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1706,1728],"content":"<bpt id=\"p1\">[</bpt>Exceptions<ept id=\"p1\">](index.md)</ept>","source":"[Exceptions](index.md)"}]}