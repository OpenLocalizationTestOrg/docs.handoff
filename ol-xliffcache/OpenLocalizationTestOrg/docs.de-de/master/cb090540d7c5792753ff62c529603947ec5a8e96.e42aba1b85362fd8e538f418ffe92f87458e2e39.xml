{"content":"---\ntitle: \"How to: Determine What Type an Object Variable Refers To (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"TypeOf operator [Visual Basic], determining object variable type\"\n  - \"variables [Visual Basic], object\"\n  - \"object variables, determining type\"\nms.assetid: 6f6a138d-58a4-40d1-9f4e-0a3c598eaf81\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Determine What Type an Object Variable Refers To (Visual Basic)\nAn object variable contains a pointer to data that is stored elsewhere. The type of that data can change during run time. At any moment, you can use the <xref:System.Type.GetTypeCode%2A> method to determine the current run-time type, or the [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md) to find out if the current run-time type is compatible with a specified type.  \n  \n### To determine the exact type an object variable currently refers to  \n  \n1.  On the object variable, call the <xref:System.Object.GetType%2A> method to retrieve a <xref:System.Type?displayProperty=fullName> object.  \n  \n    ```  \n    Dim myObject As Object  \n    myObject.GetType()  \n    ```  \n  \n2.  On the <xref:System.Type?displayProperty=fullName> class, call the shared method <xref:System.Type.GetTypeCode%2A> to retrieve the <xref:System.TypeCode> enumeration value for the object's type.  \n  \n    ```  \n    Dim myObject As Object  \n    Dim datTyp As Integer = Type.GetTypeCode(myObject.GetType())  \n    MsgBox(\"myObject currently has type code \" & CStr(datTyp))  \n    ```  \n  \n     You can test the <xref:System.TypeCode> enumeration value against whichever enumeration members are of interest, such as `Double`.  \n  \n### To determine whether an object variable's type is compatible with a specified type  \n  \n-   Use the `TypeOf` operator in combination with the [Is Operator](../../../../visual-basic/language-reference/operators/is-operator.md) to test the object with a `TypeOf`...`Is` expression.  \n  \n    ```  \n    If TypeOf objA Is System.Windows.Forms.Control Then  \n        MsgBox(\"objA is compatible with the Control class\")  \n    End If  \n    ```  \n  \n     The `TypeOf`...`Is` expression returns `True` if the object's run-time type is compatible with the specified type.  \n  \n     The criterion for compatibility depends on whether the specified type is a class, structure, or interface. In general, the types are compatible if the object is of the same type as, inherits from, or implements the specified type. For more information, see [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md).  \n  \n## Compiling the Code  \n Note that the specified type cannot be a variable or expression. It must be the name of a defined type, such as a class, structure, or interface. This includes intrinsic types such as `Integer` and `String`.  \n  \n## See Also  \n <xref:System.Object.GetType%2A>   \n <xref:System.Type?displayProperty=fullName>   \n <xref:System.Type.GetTypeCode%2A>   \n <xref:System.TypeCode>   \n [Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)   \n [Object Variable Values](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md)   \n [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)","nodes":[{"pos":[12,100],"content":"How to: Determine What Type an Object Variable Refers To (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Determine What Type an Object Variable Refers To (Visual Basic) | Microsoft Docs","pos":[0,88]}]},{"pos":[763,834],"content":"How to: Determine What Type an Object Variable Refers To (Visual Basic)","linkify":"How to: Determine What Type an Object Variable Refers To (Visual Basic)","nodes":[{"content":"How to: Determine What Type an Object Variable Refers To (Visual Basic)","pos":[0,71]}]},{"content":"An object variable contains a pointer to data that is stored elsewhere.","pos":[835,906]},{"content":"The type of that data can change during run time.","pos":[907,956]},{"content":"At any moment, you can use the <ph id=\"ph1\">&lt;xref:System.Type.GetTypeCode%2A&gt;</ph> method to determine the current run-time type, or the <bpt id=\"p1\">[</bpt>TypeOf Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept> to find out if the current run-time type is compatible with a specified type.","pos":[957,1245],"source":" At any moment, you can use the <xref:System.Type.GetTypeCode%2A> method to determine the current run-time type, or the [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md) to find out if the current run-time type is compatible with a specified type."},{"pos":[1255,1321],"content":"To determine the exact type an object variable currently refers to","linkify":"To determine the exact type an object variable currently refers to","nodes":[{"content":"To determine the exact type an object variable currently refers to","pos":[0,66]}]},{"content":"On the object variable, call the <ph id=\"ph1\">&lt;xref:System.Object.GetType%2A&gt;</ph> method to retrieve a <ph id=\"ph2\">&lt;xref:System.Type?displayProperty=fullName&gt;</ph> object.","pos":[1331,1468],"source":"On the object variable, call the <xref:System.Object.GetType%2A> method to retrieve a <xref:System.Type?displayProperty=fullName> object."},{"content":"On the <ph id=\"ph1\">&lt;xref:System.Type?displayProperty=fullName&gt;</ph> class, call the shared method <ph id=\"ph2\">&lt;xref:System.Type.GetTypeCode%2A&gt;</ph> to retrieve the <ph id=\"ph3\">&lt;xref:System.TypeCode&gt;</ph> enumeration value for the object's type.","pos":[1555,1749],"source":"On the <xref:System.Type?displayProperty=fullName> class, call the shared method <xref:System.Type.GetTypeCode%2A> to retrieve the <xref:System.TypeCode> enumeration value for the object's type."},{"pos":[1944,2074],"content":"You can test the <ph id=\"ph1\">&lt;xref:System.TypeCode&gt;</ph> enumeration value against whichever enumeration members are of interest, such as <ph id=\"ph2\">`Double`</ph>.","source":"You can test the <xref:System.TypeCode> enumeration value against whichever enumeration members are of interest, such as `Double`."},{"pos":[2084,2166],"content":"To determine whether an object variable's type is compatible with a specified type","linkify":"To determine whether an object variable's type is compatible with a specified type","nodes":[{"content":"To determine whether an object variable's type is compatible with a specified type","pos":[0,82]}]},{"pos":[2176,2363],"content":"Use the <ph id=\"ph1\">`TypeOf`</ph> operator in combination with the <bpt id=\"p1\">[</bpt>Is Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept> to test the object with a <ph id=\"ph2\">`TypeOf`</ph>...<ph id=\"ph3\">`Is`</ph> expression.","source":"Use the `TypeOf` operator in combination with the [Is Operator](../../../../visual-basic/language-reference/operators/is-operator.md) to test the object with a `TypeOf`...`Is` expression."},{"pos":[2530,2644],"content":"The <ph id=\"ph1\">`TypeOf`</ph>...<ph id=\"ph2\">`Is`</ph> expression returns <ph id=\"ph3\">`True`</ph> if the object's run-time type is compatible with the specified type.","source":"The `TypeOf`...`Is` expression returns `True` if the object's run-time type is compatible with the specified type."},{"content":"The criterion for compatibility depends on whether the specified type is a class, structure, or interface.","pos":[2655,2761]},{"content":"In general, the types are compatible if the object is of the same type as, inherits from, or implements the specified type.","pos":[2762,2885]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>TypeOf Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept>.","pos":[2886,3004],"source":" For more information, see [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md)."},{"pos":[3013,3031],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"Note that the specified type cannot be a variable or expression.","pos":[3035,3099]},{"content":"It must be the name of a defined type, such as a class, structure, or interface.","pos":[3100,3180]},{"content":"This includes intrinsic types such as <ph id=\"ph1\">`Integer`</ph> and <ph id=\"ph2\">`String`</ph>.","pos":[3181,3242],"source":" This includes intrinsic types such as `Integer` and `String`."},{"pos":[3251,3259],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.GetType%2A&gt;</ph>","pos":[3263,3294],"source":"<xref:System.Object.GetType%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Type?displayProperty=fullName&gt;</ph>","pos":[3299,3342],"source":" <xref:System.Type?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Type.GetTypeCode%2A&gt;</ph>","pos":[3347,3380],"source":" <xref:System.Type.GetTypeCode%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.TypeCode&gt;</ph>","pos":[3385,3407],"source":" <xref:System.TypeCode> "},{"content":"<bpt id=\"p1\"> [</bpt>Object Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)</ept><ph id=\"ph1\"> </ph>","pos":[3411,3523],"source":" [Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Object Variable Values<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md)</ept><ph id=\"ph1\"> </ph>","pos":[3526,3650],"source":" [Object Variable Values](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>","pos":[3653,3748],"source":" [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)"}]}