{"content":"---\ntitle: \"Single Bulk Copy Operations\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 5e7ff0be-3f23-4996-a92c-bd54d65c3836\n---\n# Single Bulk Copy Operations\nThe simplest approach to performing a SQL Server bulk copy operation is to perform a single operation against a database. By default, a bulk copy operation is performed as an isolated operation: the copy operation occurs in a non-transacted way, with no opportunity for rolling it back.  \n  \n> [!NOTE]\n>  If you need to roll back all or part of the bulk copy when an error occurs, you can either use a <xref:System.Data.SqlClient.SqlBulkCopy>-managed transaction, or perform the bulk copy operation within an existing transaction. **SqlBulkCopy** will also work with <xref:System.Transactions> if the connection is enlisted (implicitly or explicitly) into a **System.Transactions** transaction.  \n>   \n>  For more information, see [Transaction and Bulk Copy Operations](../../../../../docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  \n  \n The general steps for performing a bulk copy operation are as follows:  \n  \n1.  Connect to the source server and obtain the data to be copied. Data can also come from other sources, if it can be retrieved from an <xref:System.Data.IDataReader> or <xref:System.Data.DataTable> object.  \n  \n2.  Connect to the destination server (unless you want **SqlBulkCopy** to establish a connection for you).  \n  \n3.  Create a <xref:System.Data.SqlClient.SqlBulkCopy> object, setting any necessary properties.  \n  \n4.  Set the **DestinationTableName** property to indicate the target table for the bulk insert operation.  \n  \n5.  Call one of the **WriteToServer** methods.  \n  \n6.  Optionally, update properties and call **WriteToServer** again as necessary.  \n  \n7.  Call <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>, or wrap the bulk copy operations within a `Using` statement.  \n  \n> [!CAUTION]\n>  We recommend that the source and target column data types match. If the data types do not match, **SqlBulkCopy** attempts to convert each source value to the target data type, using the rules employed by <xref:System.Data.SqlClient.SqlParameter.Value%2A>. Conversions can affect performance, and also can result in unexpected errors. For example, a `Double` data type can be converted to a `Decimal` data type most of the time, but not always.  \n  \n## Example  \n The following console application demonstrates how to load data using the <xref:System.Data.SqlClient.SqlBulkCopy> class. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the SQL Server **AdventureWorks** database to a similar table in the same database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](../../../../../docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are located in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT â€¦ SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks BulkCopy.Single#1](../../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]\n [!code-vb[DataWorks BulkCopy.Single#1](../../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  \n  \n## Performing a Bulk Copy Operation Using Transact-SQL and the Command Class  \n The following example illustrates how to use the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> method to execute the BULK INSERT statement.  \n  \n> [!NOTE]\n>  The file path for the data source is relative to the server. The server process must have access to that path in order for the bulk copy operation to succeed.  \n  \n```vb  \nUsing connection As SqlConnection = New SqlConnection(connectionString)  \nDim queryString As String = _  \n    \"BULK INSERT Northwind.dbo.[Order Details] FROM \" & _  \n    \"'f:\\mydata\\data.tbl' WITH (FORMATFILE='f:\\mydata\\data.fmt' )\"  \nconnection.Open()  \nSqlCommand command = New SqlCommand(queryString, connection);  \n  \ncommand.ExecuteNonQuery()  \nEnd Using  \n```  \n  \n```csharp  \nusing (SqlConnection connection = New SqlConnection(connectionString))  \n{  \nstring queryString =  \"BULK INSERT Northwind.dbo.[Order Details] \" +  \n    \"FROM 'f:\\mydata\\data.tbl' \" +  \n    \"WITH ( FORMATFILE='f:\\mydata\\data.fmt' )\";  \nconnection.Open();  \nSqlCommand command = new SqlCommand(queryString, connection);  \n  \ncommand.ExecuteNonQuery();  \n}  \n```  \n  \n## See also\n\n- [Bulk Copy Operations in SQL Server](../../../../../docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,145],"embed":true,"restype":"x-metadata","content":"title: \"Single Bulk Copy Operations\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 5e7ff0be-3f23-4996-a92c-bd54d65c3836","nodes":[{"content":"Single Bulk Copy Operations","nodes":[{"pos":[0,27],"content":"Single Bulk Copy Operations","nodes":[{"content":"Single Bulk Copy Operations","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[152,179],"content":"Single Bulk Copy Operations","linkify":"Single Bulk Copy Operations","nodes":[{"content":"Single Bulk Copy Operations","pos":[0,27]}]},{"content":"The simplest approach to performing a SQL Server bulk copy operation is to perform a single operation against a database.","pos":[180,301]},{"content":"By default, a bulk copy operation is performed as an isolated operation: the copy operation occurs in a non-transacted way, with no opportunity for rolling it back.","pos":[302,466]},{"pos":[474,874],"content":"[!NOTE]\n If you need to roll back all or part of the bulk copy when an error occurs, you can either use a <xref:System.Data.SqlClient.SqlBulkCopy>-managed transaction, or perform the bulk copy operation within an existing transaction. **SqlBulkCopy** will also work with <xref:System.Transactions> if the connection is enlisted (implicitly or explicitly) into a **System.Transactions** transaction.","leadings":["","> "],"nodes":[{"content":"If you need to roll back all or part of the bulk copy when an error occurs, you can either use a <xref:System.Data.SqlClient.SqlBulkCopy>-managed transaction, or perform the bulk copy operation within an existing transaction. **SqlBulkCopy** will also work with <xref:System.Transactions> if the connection is enlisted (implicitly or explicitly) into a **System.Transactions** transaction.","pos":[9,398],"nodes":[{"content":"If you need to roll back all or part of the bulk copy when an error occurs, you can either use a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph>-managed transaction, or perform the bulk copy operation within an existing transaction.","pos":[0,225],"source":"If you need to roll back all or part of the bulk copy when an error occurs, you can either use a <xref:System.Data.SqlClient.SqlBulkCopy>-managed transaction, or perform the bulk copy operation within an existing transaction."},{"content":"<bpt id=\"p1\">**</bpt>SqlBulkCopy<ept id=\"p1\">**</ept> will also work with <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> if the connection is enlisted (implicitly or explicitly) into a <bpt id=\"p2\">**</bpt>System.Transactions<ept id=\"p2\">**</ept> transaction.","pos":[226,389],"source":"**SqlBulkCopy** will also work with <xref:System.Transactions> if the connection is enlisted (implicitly or explicitly) into a **System.Transactions** transaction."}]}]},{"pos":[885,1037],"content":"For more information, see <bpt id=\"p1\">[</bpt>Transaction and Bulk Copy Operations<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)</ept>.","source":"For more information, see [Transaction and Bulk Copy Operations](../../../../../docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)."},{"content":"The general steps for performing a bulk copy operation are as follows:","pos":[1044,1114]},{"content":"Connect to the source server and obtain the data to be copied.","pos":[1124,1186]},{"content":"Data can also come from other sources, if it can be retrieved from an <ph id=\"ph1\">&lt;xref:System.Data.IDataReader&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> object.","pos":[1187,1327],"source":" Data can also come from other sources, if it can be retrieved from an <xref:System.Data.IDataReader> or <xref:System.Data.DataTable> object."},{"pos":[1337,1439],"content":"Connect to the destination server (unless you want <bpt id=\"p1\">**</bpt>SqlBulkCopy<ept id=\"p1\">**</ept> to establish a connection for you).","source":"Connect to the destination server (unless you want **SqlBulkCopy** to establish a connection for you)."},{"pos":[1449,1540],"content":"Create a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> object, setting any necessary properties.","source":"Create a <xref:System.Data.SqlClient.SqlBulkCopy> object, setting any necessary properties."},{"pos":[1550,1651],"content":"Set the <bpt id=\"p1\">**</bpt>DestinationTableName<ept id=\"p1\">**</ept> property to indicate the target table for the bulk insert operation.","source":"Set the **DestinationTableName** property to indicate the target table for the bulk insert operation."},{"pos":[1661,1703],"content":"Call one of the <bpt id=\"p1\">**</bpt>WriteToServer<ept id=\"p1\">**</ept> methods.","source":"Call one of the **WriteToServer** methods."},{"pos":[1713,1789],"content":"Optionally, update properties and call <bpt id=\"p1\">**</bpt>WriteToServer<ept id=\"p1\">**</ept> again as necessary.","source":"Optionally, update properties and call **WriteToServer** again as necessary."},{"pos":[1799,1915],"content":"Call <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlBulkCopy.Close%2A&gt;</ph>, or wrap the bulk copy operations within a <ph id=\"ph2\">`Using`</ph> statement.","source":"Call <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>, or wrap the bulk copy operations within a `Using` statement."},{"pos":[1923,2380],"content":"[!CAUTION]\n We recommend that the source and target column data types match. If the data types do not match, **SqlBulkCopy** attempts to convert each source value to the target data type, using the rules employed by <xref:System.Data.SqlClient.SqlParameter.Value%2A>. Conversions can affect performance, and also can result in unexpected errors. For example, a `Double` data type can be converted to a `Decimal` data type most of the time, but not always.","leadings":["","> "],"nodes":[{"content":"We recommend that the source and target column data types match. If the data types do not match, **SqlBulkCopy** attempts to convert each source value to the target data type, using the rules employed by <xref:System.Data.SqlClient.SqlParameter.Value%2A>. Conversions can affect performance, and also can result in unexpected errors. For example, a `Double` data type can be converted to a `Decimal` data type most of the time, but not always.","pos":[12,455],"nodes":[{"content":"We recommend that the source and target column data types match.","pos":[0,64]},{"content":"If the data types do not match, <bpt id=\"p1\">**</bpt>SqlBulkCopy<ept id=\"p1\">**</ept> attempts to convert each source value to the target data type, using the rules employed by <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt;</ph>.","pos":[65,255],"source":" If the data types do not match, **SqlBulkCopy** attempts to convert each source value to the target data type, using the rules employed by <xref:System.Data.SqlClient.SqlParameter.Value%2A>."},{"content":"Conversions can affect performance, and also can result in unexpected errors.","pos":[256,333]},{"content":"For example, a <ph id=\"ph1\">`Double`</ph> data type can be converted to a <ph id=\"ph2\">`Decimal`</ph> data type most of the time, but not always.","pos":[334,443],"source":" For example, a `Double` data type can be converted to a `Decimal` data type most of the time, but not always."}]}]},{"pos":[2389,2396],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following console application demonstrates how to load data using the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> class.","pos":[2400,2521],"source":"The following console application demonstrates how to load data using the <xref:System.Data.SqlClient.SqlBulkCopy> class."},{"content":"In this example, a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> is used to copy data from the <bpt id=\"p1\">**</bpt>Production.Product<ept id=\"p1\">**</ept> table in the SQL Server <bpt id=\"p2\">**</bpt>AdventureWorks<ept id=\"p2\">**</ept> database to a similar table in the same database.","pos":[2522,2729],"source":" In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the SQL Server **AdventureWorks** database to a similar table in the same database."},{"pos":[2737,3188],"content":"[!IMPORTANT]\n This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](../../../../../docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are located in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT â€¦ SELECT` statement to copy the data.","leadings":["","> "],"nodes":[{"content":"This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](../../../../../docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are located in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT â€¦ SELECT` statement to copy the data.","pos":[14,449],"nodes":[{"content":"This sample will not run unless you have created the work tables as described in <bpt id=\"p1\">[</bpt>Bulk Copy Example Setup<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/bulk-copy-example-setup.md)</ept>.","pos":[0,181],"source":"This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](../../../../../docs/framework/data/adonet/sql/bulk-copy-example-setup.md)."},{"content":"This code is provided to demonstrate the syntax for using <bpt id=\"p1\">**</bpt>SqlBulkCopy<ept id=\"p1\">**</ept> only.","pos":[182,261],"source":" This code is provided to demonstrate the syntax for using **SqlBulkCopy** only."},{"content":"If the source and destination tables are located in the same SQL Server instance, it is easier and faster to use a Transact-SQL <ph id=\"ph1\">`INSERT â€¦ SELECT`</ph> statement to copy the data.","pos":[262,435],"source":" If the source and destination tables are located in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT â€¦ SELECT` statement to copy the data."}]}]},{"pos":[3495,3568],"content":"Performing a Bulk Copy Operation Using Transact-SQL and the Command Class","linkify":"Performing a Bulk Copy Operation Using Transact-SQL and the Command Class","nodes":[{"content":"Performing a Bulk Copy Operation Using Transact-SQL and the Command Class","pos":[0,73]}]},{"pos":[3572,3724],"content":"The following example illustrates how to use the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A&gt;</ph> method to execute the BULK INSERT statement.","source":"The following example illustrates how to use the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> method to execute the BULK INSERT statement."},{"pos":[3732,3901],"content":"[!NOTE]\n The file path for the data source is relative to the server. The server process must have access to that path in order for the bulk copy operation to succeed.","leadings":["","> "],"nodes":[{"content":"The file path for the data source is relative to the server. The server process must have access to that path in order for the bulk copy operation to succeed.","pos":[9,167],"nodes":[{"content":"The file path for the data source is relative to the server.","pos":[0,60]},{"content":"The server process must have access to that path in order for the bulk copy operation to succeed.","pos":[61,158]}]}]},{"pos":[4666,4674],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4678,4799],"content":"<bpt id=\"p1\">[</bpt>Bulk Copy Operations in SQL Server<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md)</ept>","source":"[Bulk Copy Operations in SQL Server](../../../../../docs/framework/data/adonet/sql/bulk-copy-operations-in-sql-server.md)"},{"pos":[4802,4906],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}