{"content":"---\ntitle: \"Nullable types - C# Programming Guide\"\nms.custom: seodec18\ndescription: Learn about C# nullable types and how to use them\nms.date: 07/30/2018\nhelpviewer_keywords: \n  - \"nullable types [C#]\"\n  - \"C# language, nullable types\"\n  - \"types [C#], nullable\"\nms.assetid: e473cb01-28ca-42be-9cea-f717055d72c6\n---\n# Nullable types (C# Programming Guide)\n\nNullable types are instances of the <xref:System.Nullable%601?displayProperty=nameWithType> struct. Nullable types can represent all the values of an underlying type `T`, and an additional [null](../../language-reference/keywords/null.md) value. The underlying type `T` can be any non-nullable [value type](../../language-reference/keywords/value-types.md). `T` cannot be a reference type.\n\nFor example, you can assign `null` or any integer value from <xref:System.Int32.MinValue?displayProperty=nameWithType> to <xref:System.Int32.MaxValue?displayProperty=nameWithType> to a `Nullable<int>` and [true](../../language-reference/keywords/true-literal.md), [false](../../language-reference/keywords/false-literal.md), or `null` to a `Nullable<bool>`.\n\nYou use a nullable type when you need to represent the undefined value of an underlying type. A Boolean variable can have only two values: true and false. There is no \"undefined\" value. In many programming applications, most notably database interactions, a variable value can be undefined or missing. For example, a field in a database may contain the values true or false, or it may contain no value at all. You use a `Nullable<bool>` type in that case.\n\nNullable types have the following characteristics:\n  \n- Nullable types represent value-type variables that can be assigned the `null` value. You cannot create a nullable type based on a reference type. (Reference types already support the `null` value.)  \n  \n- The syntax `T?` is shorthand for `Nullable<T>`. The two forms are interchangeable.  \n  \n- Assign a value to a nullable type just as you would for an underlying value type: `int? x = 10;` or `double? d = 4.108;`. You also can assign the `null` value: `int? x = null;`.  \n  \n- Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> and <xref:System.Nullable%601.Value%2A?displayProperty=nameWithType> readonly properties to test for null and retrieve the value, as shown in the following example: `if (x.HasValue) y = x.Value;`  \n  \n  - The <xref:System.Nullable%601.HasValue%2A> property returns `true` if the variable contains a value, or `false` if it's `null`.\n  \n  - The <xref:System.Nullable%601.Value%2A> property returns a value if <xref:System.Nullable%601.HasValue%2A> returns `true`. Otherwise, an <xref:System.InvalidOperationException> is thrown.  \n  \n- You can also use the `==` and `!=` operators with a nullable type, as shown in the following example: `if (x != null) y = x.Value;`. If `a` and `b` are both null, `a == b` evaluates to `true`.  \n\n- Beginning with C# 7.0, you can use [pattern matching](../../pattern-matching.md#the-is-type-pattern-expression) to both examine and get a value of a nullable type: `if (x is int valueOfX) y = valueOfX;`.\n  \n- The default value of `T?` is an instance whose <xref:System.Nullable%601.HasValue%2A> property returns `false`.  \n\n- Use the <xref:System.Nullable%601.GetValueOrDefault> method to return either the assigned value, or the [default](../../language-reference/keywords/default-values-table.md) value of the underlying value type if the value of the nullable type is `null`.  \n\n- Use the <xref:System.Nullable%601.GetValueOrDefault(%600)> method to return either the assigned value, or the provided default value if the value of the nullable type is `null`.\n  \n- Use the [null-coalescing operator](../../language-reference/operators/null-coalescing-operator.md), `??`, to assign a value to an underlying type based on a value of the nullable type: `int? x = null; int y = x ?? -1;`. In the example, since `x` is null, the result value of `y` is `-1`.\n\n- If a user-defined conversion is defined between two data types, the same conversion can also be used with the nullable versions of these data types.\n  \n- Nested nullable types are not allowed. The following line doesn't compile: `Nullable<Nullable<int>> n;`  \n\nFor more information, see the [Using nullable types](using-nullable-types.md) and [How to: Identify a nullable type](how-to-identify-a-nullable-type.md) topics.\n  \n## See also\n\n- <xref:System.Nullable%601?displayProperty=nameWithType>\n- <xref:System.Nullable?displayProperty=nameWithType>\n- [?? Operator](../../language-reference/operators/null-coalescing-operator.md)\n- [C# Programming Guide](../index.md)\n- [C# Guide](../../index.md)\n- [C# Reference](../../language-reference/index.md)\n- [Nullable Value Types (Visual Basic)](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)\n","nodes":[{"pos":[4,311],"embed":true,"restype":"x-metadata","content":"title: \"Nullable types - C# Programming Guide\"\nms.custom: seodec18\ndescription: Learn about C# nullable types and how to use them\nms.date: 07/30/2018\nhelpviewer_keywords: \n  - \"nullable types [C#]\"\n  - \"C# language, nullable types\"\n  - \"types [C#], nullable\"\nms.assetid: e473cb01-28ca-42be-9cea-f717055d72c6","nodes":[{"content":"Nullable types - C# Programming Guide","nodes":[{"pos":[0,37],"content":"Nullable types - C# Programming Guide","nodes":[{"content":"Nullable types - C# Programming Guide","pos":[0,37]}]}],"path":["title"],"nosxs":false},{"content":"Learn about C# nullable types and how to use them","nodes":[{"pos":[0,49],"content":"Learn about C# nullable types and how to use them","nodes":[{"content":"Learn about C# nullable types and how to use them","pos":[0,49]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[318,355],"content":"Nullable types (C# Programming Guide)","linkify":"Nullable types (C# Programming Guide)","nodes":[{"content":"Nullable types (C# Programming Guide)","pos":[0,37]}]},{"content":"Nullable types are instances of the <ph id=\"ph1\">&lt;xref:System.Nullable%601?displayProperty=nameWithType&gt;</ph> struct.","pos":[357,456],"source":"Nullable types are instances of the <xref:System.Nullable%601?displayProperty=nameWithType> struct."},{"content":"Nullable types can represent all the values of an underlying type <ph id=\"ph1\">`T`</ph>, and an additional <bpt id=\"p1\">[</bpt>null<ept id=\"p1\">](../../language-reference/keywords/null.md)</ept> value.","pos":[457,602],"source":" Nullable types can represent all the values of an underlying type `T`, and an additional [null](../../language-reference/keywords/null.md) value."},{"content":"The underlying type <ph id=\"ph1\">`T`</ph> can be any non-nullable <bpt id=\"p1\">[</bpt>value type<ept id=\"p1\">](../../language-reference/keywords/value-types.md)</ept>.","pos":[603,714],"source":" The underlying type `T` can be any non-nullable [value type](../../language-reference/keywords/value-types.md)."},{"content":"<ph id=\"ph1\">`T`</ph> cannot be a reference type.","pos":[715,746],"source":"`T` cannot be a reference type."},{"pos":[748,1105],"content":"For example, you can assign <ph id=\"ph1\">`null`</ph> or any integer value from <ph id=\"ph2\">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph> to <ph id=\"ph3\">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> to a <ph id=\"ph4\">`Nullable&lt;int&gt;`</ph> and <bpt id=\"p1\">[</bpt>true<ept id=\"p1\">](../../language-reference/keywords/true-literal.md)</ept>, <bpt id=\"p2\">[</bpt>false<ept id=\"p2\">](../../language-reference/keywords/false-literal.md)</ept>, or <ph id=\"ph5\">`null`</ph> to a <ph id=\"ph6\">`Nullable&lt;bool&gt;`</ph>.","source":"For example, you can assign `null` or any integer value from <xref:System.Int32.MinValue?displayProperty=nameWithType> to <xref:System.Int32.MaxValue?displayProperty=nameWithType> to a `Nullable<int>` and [true](../../language-reference/keywords/true-literal.md), [false](../../language-reference/keywords/false-literal.md), or `null` to a `Nullable<bool>`."},{"content":"You use a nullable type when you need to represent the undefined value of an underlying type.","pos":[1107,1200]},{"content":"A Boolean variable can have only two values: true and false.","pos":[1201,1261]},{"content":"There is no \"undefined\" value.","pos":[1262,1292]},{"content":"In many programming applications, most notably database interactions, a variable value can be undefined or missing.","pos":[1293,1408]},{"content":"For example, a field in a database may contain the values true or false, or it may contain no value at all.","pos":[1409,1516]},{"content":"You use a <ph id=\"ph1\">`Nullable&lt;bool&gt;`</ph> type in that case.","pos":[1517,1562],"source":" You use a `Nullable<bool>` type in that case."},{"content":"Nullable types have the following characteristics:","pos":[1564,1614]},{"content":"Nullable types represent value-type variables that can be assigned the <ph id=\"ph1\">`null`</ph> value.","pos":[1620,1704],"source":"Nullable types represent value-type variables that can be assigned the `null` value."},{"content":"You cannot create a nullable type based on a reference type.","pos":[1705,1765]},{"content":"(Reference types already support the <ph id=\"ph1\">`null`</ph> value.)","pos":[1766,1817],"source":" (Reference types already support the `null` value.)"},{"content":"The syntax <ph id=\"ph1\">`T?`</ph> is shorthand for <ph id=\"ph2\">`Nullable&lt;T&gt;`</ph>.","pos":[1825,1872],"source":"The syntax `T?` is shorthand for `Nullable<T>`."},{"content":"The two forms are interchangeable.","pos":[1873,1907]},{"content":"Assign a value to a nullable type just as you would for an underlying value type: <ph id=\"ph1\">`int? x = 10;`</ph> or <ph id=\"ph2\">`double? d = 4.108;`</ph>.","pos":[1915,2036],"source":"Assign a value to a nullable type just as you would for an underlying value type: `int? x = 10;` or `double? d = 4.108;`."},{"content":"You also can assign the <ph id=\"ph1\">`null`</ph> value: <ph id=\"ph2\">`int? x = null;`</ph>.","pos":[2037,2092],"source":" You also can assign the `null` value: `int? x = null;`."},{"pos":[2100,2371],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Nullable%601.Value%2A?displayProperty=nameWithType&gt;</ph> readonly properties to test for null and retrieve the value, as shown in the following example: <ph id=\"ph3\">`if (x.HasValue) y = x.Value;`</ph>","source":"Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> and <xref:System.Nullable%601.Value%2A?displayProperty=nameWithType> readonly properties to test for null and retrieve the value, as shown in the following example: `if (x.HasValue) y = x.Value;`"},{"pos":[2381,2508],"content":"The <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property returns <ph id=\"ph2\">`true`</ph> if the variable contains a value, or <ph id=\"ph3\">`false`</ph> if it's <ph id=\"ph4\">`null`</ph>.","source":"The <xref:System.Nullable%601.HasValue%2A> property returns `true` if the variable contains a value, or `false` if it's `null`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property returns a value if <ph id=\"ph2\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> returns <ph id=\"ph3\">`true`</ph>.","pos":[2516,2638],"source":"The <xref:System.Nullable%601.Value%2A> property returns a value if <xref:System.Nullable%601.HasValue%2A> returns `true`."},{"content":"Otherwise, an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.","pos":[2639,2703],"source":" Otherwise, an <xref:System.InvalidOperationException> is thrown."},{"content":"You can also use the <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> operators with a nullable type, as shown in the following example: <ph id=\"ph3\">`if (x != null) y = x.Value;`</ph>.","pos":[2711,2843],"source":"You can also use the `==` and `!=` operators with a nullable type, as shown in the following example: `if (x != null) y = x.Value;`."},{"content":"If <ph id=\"ph1\">`a`</ph> and <ph id=\"ph2\">`b`</ph> are both null, <ph id=\"ph3\">`a == b`</ph> evaluates to <ph id=\"ph4\">`true`</ph>.","pos":[2844,2903],"source":" If `a` and `b` are both null, `a == b` evaluates to `true`."},{"pos":[2909,3112],"content":"Beginning with C# 7.0, you can use <bpt id=\"p1\">[</bpt>pattern matching<ept id=\"p1\">](../../pattern-matching.md#the-is-type-pattern-expression)</ept> to both examine and get a value of a nullable type: <ph id=\"ph1\">`if (x is int valueOfX) y = valueOfX;`</ph>.","source":"Beginning with C# 7.0, you can use [pattern matching](../../pattern-matching.md#the-is-type-pattern-expression) to both examine and get a value of a nullable type: `if (x is int valueOfX) y = valueOfX;`."},{"pos":[3118,3229],"content":"The default value of <ph id=\"ph1\">`T?`</ph> is an instance whose <ph id=\"ph2\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property returns <ph id=\"ph3\">`false`</ph>.","source":"The default value of `T?` is an instance whose <xref:System.Nullable%601.HasValue%2A> property returns `false`."},{"pos":[3235,3487],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Nullable%601.GetValueOrDefault&gt;</ph> method to return either the assigned value, or the <bpt id=\"p1\">[</bpt>default<ept id=\"p1\">](../../language-reference/keywords/default-values-table.md)</ept> value of the underlying value type if the value of the nullable type is <ph id=\"ph2\">`null`</ph>.","source":"Use the <xref:System.Nullable%601.GetValueOrDefault> method to return either the assigned value, or the [default](../../language-reference/keywords/default-values-table.md) value of the underlying value type if the value of the nullable type is `null`."},{"pos":[3493,3670],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Nullable%601.GetValueOrDefault(%600)&gt;</ph> method to return either the assigned value, or the provided default value if the value of the nullable type is <ph id=\"ph2\">`null`</ph>.","source":"Use the <xref:System.Nullable%601.GetValueOrDefault(%600)> method to return either the assigned value, or the provided default value if the value of the nullable type is `null`."},{"content":"Use the <bpt id=\"p1\">[</bpt>null-coalescing operator<ept id=\"p1\">](../../language-reference/operators/null-coalescing-operator.md)</ept>, <ph id=\"ph1\">`??`</ph>, to assign a value to an underlying type based on a value of the nullable type: <ph id=\"ph2\">`int? x = null; int y = x ?? -1;`</ph>.","pos":[3676,3895],"source":"Use the [null-coalescing operator](../../language-reference/operators/null-coalescing-operator.md), `??`, to assign a value to an underlying type based on a value of the nullable type: `int? x = null; int y = x ?? -1;`."},{"content":"In the example, since <ph id=\"ph1\">`x`</ph> is null, the result value of <ph id=\"ph2\">`y`</ph> is <ph id=\"ph3\">`-1`</ph>.","pos":[3896,3963],"source":" In the example, since `x` is null, the result value of `y` is `-1`."},{"content":"If a user-defined conversion is defined between two data types, the same conversion can also be used with the nullable versions of these data types.","pos":[3967,4115]},{"content":"Nested nullable types are not allowed.","pos":[4121,4159]},{"content":"The following line doesn't compile: <ph id=\"ph1\">`Nullable&lt;Nullable&lt;int&gt;&gt; n;`</ph>","pos":[4160,4224],"source":" The following line doesn't compile: `Nullable<Nullable<int>> n;`"},{"pos":[4228,4388],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Using nullable types<ept id=\"p1\">](using-nullable-types.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Identify a nullable type<ept id=\"p2\">](how-to-identify-a-nullable-type.md)</ept> topics.","source":"For more information, see the [Using nullable types](using-nullable-types.md) and [How to: Identify a nullable type](how-to-identify-a-nullable-type.md) topics."},{"pos":[4395,4403],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4519,4596],"content":"<bpt id=\"p1\">[</bpt>?? Operator<ept id=\"p1\">](../../language-reference/operators/null-coalescing-operator.md)</ept>","source":"[?? Operator](../../language-reference/operators/null-coalescing-operator.md)"},{"pos":[4599,4634],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../index.md)</ept>","source":"[C# Programming Guide](../index.md)"},{"pos":[4637,4663],"content":"<bpt id=\"p1\">[</bpt>C# Guide<ept id=\"p1\">](../../index.md)</ept>","source":"[C# Guide](../../index.md)"},{"pos":[4666,4715],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../language-reference/index.md)</ept>","source":"[C# Reference](../../language-reference/index.md)"},{"pos":[4718,4849],"content":"<bpt id=\"p1\">[</bpt>Nullable Value Types (Visual Basic)<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept>","source":"[Nullable Value Types (Visual Basic)](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)"}]}