<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="vb-library-with-visual-studio.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f14e4ffbebfe0d7e01d548a6d4f2dc8924633682</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\vb-library-with-visual-studio.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01be05aa712061e1ee3a8056ab4055390f400ab9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">beea51939a0df3788d4d5bf90a0be87da335bf51</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Build a Visual Basic .NET Standard class library in Visual Studio 2017</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to build a .NET Standard class library written in Visual Basic using Visual Studio 2017</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Build a .NET Standard library with Visual Basic and the .NET Core SDK in Visual Studio 2017</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>class library<ept id="p1">*</ept> defines types and methods that are called by an application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A class library that targets the .NET Standard 2.0 allows your library to be called by any .NET implementation that supports that version of the .NET Standard.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you finish your class library, you can decide whether you want to distribute it as a third-party component or whether you want to include it as a bundled component with one or more applications.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For a list of the .NET Standard versions and the platforms they support, see <bpt id="p1">[</bpt>.NET Standard<ept id="p1">](../../standard/net-standard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this topic, you'll create a simple utility library that contains a single string-handling method.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You'll implement it as an <bpt id="p1">[</bpt>extension method<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept> so that you can call it as if it were a member of the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating a class library solution</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Start by creating a solution for your class library project and its related projects.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A Visual Studio Solution just serves as a container for one or more projects.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To create the solution:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>On the Visual Studio menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>New<ept id="p2">**</ept><ph id="ph2"> &gt; </ph><bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Other Project Types<ept id="p2">**</ept> node, and select <bpt id="p3">**</bpt>Visual Studio Solutions<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Name the solution "ClassLibraryProjects" and select the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Visual Studio create new test project dialog</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating the class library project</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create your class library project:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click on the <bpt id="p2">**</bpt>ClassLibraryProjects<ept id="p2">**</ept> solution file and from the context menu, select <bpt id="p3">**</bpt>Add<ept id="p3">**</ept><ph id="ph1"> &gt; </ph><bpt id="p4">**</bpt>New Project<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual Basic<ept id="p2">**</ept> node, then select the <bpt id="p3">**</bpt>.NET Standard<ept id="p3">**</ept> node followed by the <bpt id="p4">**</bpt>Class Library (.NET Standard)<ept id="p4">**</ept> project template.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> text box, enter "StringLibrary" as the name of the project.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to create the class library project.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Visual Studio add new library project dialog</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The code window then opens in the Visual Studio development environment.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Visual Studio application window showing the default class library template code</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Check to make sure that the library targets the correct version of the .NET Standard.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Right-click on the library project in the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> windows, then select <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Target Framework<ept id="p1">**</ept> text box shows that we're targeting .NET Standard 2.0.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Project properties for the class library</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Also in the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> dialog, clear the text in the <bpt id="p2">**</bpt>Root namespace<ept id="p2">**</ept> text box.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For each project, Visual Basic automatically creates a namespace that corresponds to the project name, and any namespaces defined in source code files are parents of that namespace.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>We want to define a top-level namespace by using the <bpt id="p1">[</bpt><ph id="ph1">`namespace`</ph><ept id="p1">](../../visual-basic/language-reference/statements/namespace-statement.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Replace the code in the code window with the following code and save the file:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The class library, <ph id="ph1">`UtilityLibraries.StringLibrary`</ph>, contains a method named <ph id="ph2">`StartsWithUpper`</ph>, which returns a <ph id="ph3">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the current string instance begins with an uppercase character.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Unicode standard distinguishes uppercase characters from lowercase characters.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Char.IsUpper(System.Char)?displayProperty=nameWithType&gt;</ph> method returns <ph id="ph2">`true`</ph> if a character is uppercase.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>On the menu bar, select <bpt id="p1">**</bpt>Build<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The project should compile without error.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Output pane showing that the build succeeded</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Next step</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You've successfully built the library.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because you haven't called any of its methods, you don't know whether it works as expected.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The next step in developing your library is to test it by using a <bpt id="p1">[</bpt>Unit Test Project<ept id="p1">](testing-library-with-visual-studio.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>