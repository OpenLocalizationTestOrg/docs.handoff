<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="type-equivalence-and-embedded-interop-types.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9ec21a21ce3c81c2d29d2edf353a098489c9026</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\type-equivalence-and-embedded-interop-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">079823aa87441fec4d8074639455ba87bc6f1b0b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3eac0d181c781fbcf6cdeaa0c9190c12bff392a2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Type equivalence and embedded interop types</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type equivalence and embedded interop types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, the common language runtime supports embedding type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each managed assembly has a different <ph id="ph1">&lt;xref:System.Type&gt;</ph> object to represent its view of the COM type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Type equivalence and embedded interop types simplify the deployment of applications and add-ins that use COM components, because it is not necessary to deploy interop assemblies with the applications.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Developers of shared COM components still have to create primary interop assemblies (PIAs) if they want their components to be used by earlier versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Type equivalence</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Equivalence of COM types is supported for interfaces, structures, enumerations, and delegates.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>COM types qualify as equivalent if all of the following are true:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The types are both interfaces, or both structures, or both enumerations, or both delegates.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The types have the same identity, as described in the next section.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Both types are eligible for type equivalence, as described in the <bpt id="p1">[</bpt>Marking COM types for type equivalence<ept id="p1">](#marking-com-types-for-type-equivalence)</ept> section.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Type identity</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Two types are determined to have the same identity when their scopes and identities match, in other words, if they each have the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph> attribute, and the two attributes have matching <ph id="ph2">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The comparison for <ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope%2A&gt;</ph> is case-insensitive.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If a type does not have the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph> attribute, or if it has a <ph id="ph2">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph> attribute that does not specify scope and identifier, the type can still be considered for equivalence as follows:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For interfaces, the value of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GuidAttribute&gt;</ph> is used instead of the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope%2A?displayProperty=nameWithType&gt;</ph> property, and the <ph id="ph3">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> property (that is, the type name, including the namespace) is used instead of the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For structures, enumerations, and delegates, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GuidAttribute&gt;</ph> of the containing assembly is used instead of the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope%2A&gt;</ph> property, and the <ph id="ph3">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> property is used instead of the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Marking COM types for type equivalence</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can mark a type as eligible for type equivalence in two ways:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph> attribute to the type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Make the type a COM import type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An interface is a COM import type if it has the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComImportAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An interface, structure, enumeration, or delegate is a COM import type if the assembly in which it is defined has the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ImportedFromTypeLibAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using COM Types in Managed Code<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/3y76b69k(v=vs.100))</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Importing a Type Library as an Assembly<ept id="p1">](importing-a-type-library-as-an-assembly.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>