<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="high-dpi-support-in-windows-forms.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1641702c7b1c3d3b0e83c59a96529de70f699d17</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\high-dpi-support-in-windows-forms.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e9505d1f6b8cef91b38d3a3efb92b9e81b2601b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b915435ac10fb7a4f4294f8a814024405f2ca648</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>High DPI support in Windows Forms</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>High DPI support in Windows Forms</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.7, Windows Forms includes enhancements for common high DPI and dynamic DPI scenarios.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Improvements in the scaling and layout of a number of Windows Forms controls, such as the <ph id="ph1">&lt;xref:System.Windows.Forms.MonthCalendar&gt;</ph> control and the <ph id="ph2">&lt;xref:System.Windows.Forms.CheckedListBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Single-pass scaling.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.6 and earlier versions, scaling was performed through multiple passes, which caused some controls to be scaled more than was necessary.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Support for dynamic DPI scenarios in which the user changes the DPI or scale factor after a Windows Forms application has been launched.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In versions of the .NET Framework starting with the .NET Framework 4.7, enhanced high DPI support is an opt-in feature.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You must configure your application to take advantage of it.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Configuring your Windows Forms app for high DPI support</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The new Windows Forms features that support high DPI awareness are available only in applications that target the .NET Framework 4.7 and are running on Windows operating systems starting with the Windows 10 Creators Update.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In addition, to configure high DPI support in your Windows Forms application, you must do the following:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Declare compatibility with Windows 10.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To do this, add the following to your manifest file:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Enable per-monitor DPI awareness in the <bpt id="p1">*</bpt>app.config<ept id="p1">*</ept> file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Windows Forms introduces a new <bpt id="p1">[</bpt><ph id="ph1">`&lt;System.Windows.Forms.ApplicationConfigurationSection&gt;`</ph><ept id="p1">](../configure-apps/file-schema/winforms/index.md)</ept> element to support new features and customizations added starting with the .NET Framework 4.7.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To take advantage of the new features that support high DPI, add the following to your application configuration file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In previous versions of the .NET Framework, you used the manifest to add high DPI support.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This approach is no longer recommended, since it overrides settings defined on the app.config file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Call the static <ph id="ph1">&lt;xref:System.Windows.Forms.Application.EnableVisualStyles%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This should be the first method call in your application entry point.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Opting out of individual high DPI features</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">`DpiAwareness`</ph> value to <ph id="ph2">`PerMonitorV2`</ph> enables all high DPI awareness features supported by .NET Framework versions starting with the .NET Framework 4.7.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Typically, this is adequate for most Windows Forms applications.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, you may want to opt out of one or more individual features.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The most important reason for doing this is that your existing application code already handles that feature.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, if your application handles auto scaling, you might want to disable the auto-resizing feature as follows:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For a list of individual keys and their values, see <bpt id="p1">[</bpt>Windows Forms Add Configuration Element<ept id="p1">](../configure-apps/file-schema/winforms/windows-forms-add-configuration-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>New DPI change events</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.7, three new events allow you to programmatically handle dynamic DPI changes:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DpiChangedAfterParent&gt;</ph>, which is fired when the DPI setting for a control is changed programmatically after a DPI change event for it's parent control or form has occurred.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DpiChangedBeforeParent&gt;</ph>, which is fired when the DPI setting for a control is changed programmatically before a DPI change event for its parent control or form has occurred.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Form.DpiChanged&gt;</ph>, which is fired when the DPI setting changes on the display device where the form is currently displayed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>New helper methods and properties</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.7 also adds a number of new helper methods and properties that provide information about DPI scaling and allow you to perform DPI scaling.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.LogicalToDeviceUnits%2A&gt;</ph>, which converts a value from logical to device pixels.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleBitmapLogicalToDevice%2A&gt;</ph>, which scales a bitmap image to the logical DPI for a device.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DeviceDpi%2A&gt;</ph>, which returns the DPI for the current device.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Versioning considerations</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In addition to running on .NET Framework 4.7 and Windows 10 Creators Update, your application may also run in an environment in which it isn't compatible with high DPI improvements.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In this case, you'll need to develop a fallback for your application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can do this to perform <bpt id="p1">[</bpt>custom drawing<ept id="p1">](./controls/user-drawn-controls.md)</ept> to handle scaling.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To do this, you also need to determine the operating system on which your app is running.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can do that with code like the following:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note that your application won't successfully detect Windows 10 if it wasn't listed as a supported operating system in the application manifest.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also check the version of the .NET Framework that the application was built against:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Forms Add Configuration Element<ept id="p1">](../configure-apps/file-schema/winforms/windows-forms-add-configuration-element.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Adjusting the Size and Scale of Windows Forms<ept id="p1">](adjusting-the-size-and-scale-of-windows-forms.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>