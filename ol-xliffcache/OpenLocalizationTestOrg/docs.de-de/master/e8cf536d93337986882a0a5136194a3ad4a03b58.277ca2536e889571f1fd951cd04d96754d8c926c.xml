{"content":"---\ntitle: \"ASMX Client with a WCF Service\"\nms.date: \"03/30/2017\"\nms.assetid: 3ea381ee-ac7d-4d62-8c6c-12dc3650879f\n---\n# ASMX Client with a WCF Service\nThis sample demonstrates how to create a service using Windows Communication Foundation (WCF) and then access the service from a non-WCF client, such as an ASMX client.  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n This sample consists of a client console program (.exe) and a service library (.dll) hosted by Internet Information Services (IIS). The service implements a contract that defines a request-reply communication pattern. The contract is defined by the `ICalculator` interface, which exposes math operations (`Add`, `Subtract`, `Multiply`, and `Divide`). The ASMX client makes synchronous requests to a math operation and the service replies with the result.  \n  \n The service implements an `ICalculator` contract as defined in the following code.  \n  \n```csharp  \n[ServiceContract(Namespace=\"http://Microsoft.ServiceModel.Samples\"), XmlSerializerFormat]  \npublic interface ICalculator  \n{  \n    [OperationContract]  \n    double Add(double n1, double n2);  \n    [OperationContract]  \n    double Subtract(double n1, double n2);  \n    [OperationContract]  \n    double Multiply(double n1, double n2);  \n    [OperationContract]  \n    double Divide(double n1, double n2);  \n}  \n```  \n  \n The <xref:System.Runtime.Serialization.DataContractSerializer> and <xref:System.Xml.Serialization.XmlSerializer> map CLR types to an XML representation. The <xref:System.Runtime.Serialization.DataContractSerializer> interprets some XML representations differently than XmlSerializer. Non-WCF proxy generators, such as Wsdl.exe, generate a more usable interface when the XmlSerializer is being used. The <xref:System.ServiceModel.XmlSerializerFormatAttribute> is applied to the `ICalculator` interface, to ensure that the XmlSerializer is used for mapping CLR types to XML. The service implementation calculates and returns the appropriate result.  \n  \n The service exposes a single endpoint for communicating with the service, defined using a configuration file (Web.config). The endpoint consists of an address, a binding, and a contract. The service exposes the endpoint at the base address provided by the Internet Information Services (IIS) host. The `binding` attribute is set to basicHttpBinding that provides HTTP communications using SOAP 1.1, which is compliant with WS-I BasicProfile 1.1 as shown in the following sample configuration.  \n  \n```xml  \n<services>  \n  <service name=\"Microsoft.ServiceModel.Samples.CalculatorService\"  \n           behaviorConfiguration=\"CalculatorServiceBehavior\">  \n    <!-- This endpoint is exposed at the base address provided by the host: http://localhost/servicemodelsamples/service.svc.  -->  \n    <endpoint address=\"\"  \n              binding=\"basicHttpBinding\"   \n              contract=\"Microsoft.ServiceModel.Samples.ICalculator\" />  \n  </service>  \n</services>  \n```  \n  \n The ASMX client communicates with the WCF service using a typed proxy that is generated by the Web Services Description Language (WSDL) utility (Wsdl.exe). The typed proxy is contained in the file generatedClient.cs. The WSDL utility retrieves metadata for the specified service and generates a typed proxy for use by a client to communicate. By default, the framework does not expose any metadata. To expose the metadata required to generate the proxy, you must add a [\\<serviceMetadata>](../../../../docs/framework/configure-apps/file-schema/wcf/servicemetadata.md) and set its `httpGetEnabled` attribute to `True` as shown in the following configuration.  \n  \n```xml  \n<behaviors>  \n  <serviceBehaviors>  \n    <behavior name=\"CalculatorServiceBehavior\">  \n      <!-- Setting httpGetEnabled to True on the serviceMetadata  \n           behavior exposes the service's wsdl at <base address>?wsdl :  \n           http://localhost/servicemodelsamples/service.svc?wsdl -->  \n      <serviceMetadata httpGetEnabled=\"True\"/>  \n      <serviceDebug includeExceptionDetailInFaults=\"False\" />  \n    </behavior>  \n  </serviceBehaviors>  \n</behaviors>  \n```  \n  \n Run the following command from a command prompt in the client directory to generate the typed proxy.  \n  \n```console  \nwsdl /n:Microsoft.ServiceModel.Samples /o:generatedClient.cs /urlkey:CalculatorServiceAddress http://localhost/servicemodelsamples/service.svc?wsdl  \n```  \n  \n By using the generated typed proxy, the client can access a given service endpoint by configuring the appropriate address. The client uses a configuration file (App.config) to specify the endpoint to communicate with.  \n  \n```xml  \n<appSettings>  \n  <add key=\"CalculatorServiceAddress\"   \n       value=\"http://localhost/ServiceModelSamples/service.svc\"/>  \n</appSettings>  \n```  \n  \n The client implementation constructs an instance of the typed proxy to begin communicating with the service.  \n  \n```csharp\n// Create a client to the CalculatorService.  \nusing (CalculatorService client = new CalculatorService())  \n{  \n    // Call the Add service operation.  \n    double value1 = 100.00D;  \n    double value2 = 15.99D;  \n    double result = client.Add(value1, value2);  \n    Console.WriteLine(\"Add({0},{1}) = {2}\", value1, value2, result);  \n  \n    // Call the Subtract service operation.  \n    value1 = 145.00D;  \n    value2 = 76.54D;  \n    result = client.Subtract(value1, value2);  \n    Console.WriteLine(\"Subtract({0},{1}) = {2}\", value1, value2, result);  \n  \n    // Call the Multiply service operation.  \n    value1 = 9.00D;  \n    value2 = 81.25D;  \n    result = client.Multiply(value1, value2);  \n    Console.WriteLine(\"Multiply({0},{1}) = {2}\", value1, value2, result);  \n  \n    // Call the Divide service operation.  \n    value1 = 22.00D;  \n    value2 = 7.00D;  \n    result = client.Divide(value1, value2);  \n    Console.WriteLine(\"Divide({0},{1}) = {2}\", value1, value2, result);  \n  \n}  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Press <ENTER> to terminate client.\");  \nConsole.ReadLine();  \n```  \n  \n When you run the sample, the operation requests and responses are displayed in the client console window. Press ENTER in the client window to shut down the client.  \n  \n```console \nAdd(100,15.99) = 115.99  \nSubtract(145,76.54) = 68.46  \nMultiply(9,81.25) = 731.25  \nDivide(22,7) = 3.14285714285714  \n  \nPress <ENTER> to terminate client.  \n```  \n  \n### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md).  \n  \n> [!NOTE]\n>  For more information about passing and returning complex data types see: [Data Binding in a Windows Forms Client](../../../../docs/framework/wcf/samples/data-binding-in-a-windows-forms-client.md), [Data Binding in a Windows Presentation Foundation Client](../../../../docs/framework/wcf/samples/data-binding-in-a-wpf-client.md), and [Data Binding in an ASP.NET Client](../../../../docs/framework/wcf/samples/data-binding-in-an-aspnet-client.md)  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Services\\Interop\\ASMX`  \n","nodes":[{"pos":[4,114],"embed":true,"restype":"x-metadata","content":"title: \"ASMX Client with a WCF Service\"\nms.date: \"03/30/2017\"\nms.assetid: 3ea381ee-ac7d-4d62-8c6c-12dc3650879f","nodes":[{"content":"ASMX Client with a WCF Service","nodes":[{"pos":[0,30],"content":"ASMX Client with a WCF Service","nodes":[{"content":"ASMX Client with a WCF Service","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[121,151],"content":"ASMX Client with a WCF Service","linkify":"ASMX Client with a WCF Service","nodes":[{"content":"ASMX Client with a WCF Service","pos":[0,30]}]},{"content":"This sample demonstrates how to create a service using Windows Communication Foundation (WCF) and then access the service from a non-WCF client, such as an ASMX client.","pos":[152,320]},{"pos":[328,435],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"content":"This sample consists of a client console program (.exe) and a service library (.dll) hosted by Internet Information Services (IIS).","pos":[442,573]},{"content":"The service implements a contract that defines a request-reply communication pattern.","pos":[574,659]},{"content":"The contract is defined by the <ph id=\"ph1\">`ICalculator`</ph> interface, which exposes math operations (<ph id=\"ph2\">`Add`</ph>, <ph id=\"ph3\">`Subtract`</ph>, <ph id=\"ph4\">`Multiply`</ph>, and <ph id=\"ph5\">`Divide`</ph>).","pos":[660,792],"source":" The contract is defined by the `ICalculator` interface, which exposes math operations (`Add`, `Subtract`, `Multiply`, and `Divide`)."},{"content":"The ASMX client makes synchronous requests to a math operation and the service replies with the result.","pos":[793,896]},{"pos":[903,985],"content":"The service implements an <ph id=\"ph1\">`ICalculator`</ph> contract as defined in the following code.","source":"The service implements an `ICalculator` contract as defined in the following code."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> map CLR types to an XML representation.","pos":[1421,1573],"source":"The <xref:System.Runtime.Serialization.DataContractSerializer> and <xref:System.Xml.Serialization.XmlSerializer> map CLR types to an XML representation."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> interprets some XML representations differently than XmlSerializer.","pos":[1574,1704],"source":" The <xref:System.Runtime.Serialization.DataContractSerializer> interprets some XML representations differently than XmlSerializer."},{"content":"Non-WCF proxy generators, such as Wsdl.exe, generate a more usable interface when the XmlSerializer is being used.","pos":[1705,1819]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.XmlSerializerFormatAttribute&gt;</ph> is applied to the <ph id=\"ph2\">`ICalculator`</ph> interface, to ensure that the XmlSerializer is used for mapping CLR types to XML.","pos":[1820,1993],"source":" The <xref:System.ServiceModel.XmlSerializerFormatAttribute> is applied to the `ICalculator` interface, to ensure that the XmlSerializer is used for mapping CLR types to XML."},{"content":"The service implementation calculates and returns the appropriate result.","pos":[1994,2067]},{"content":"The service exposes a single endpoint for communicating with the service, defined using a configuration file (Web.config).","pos":[2074,2196]},{"content":"The endpoint consists of an address, a binding, and a contract.","pos":[2197,2260]},{"content":"The service exposes the endpoint at the base address provided by the Internet Information Services (IIS) host.","pos":[2261,2371]},{"content":"The <ph id=\"ph1\">`binding`</ph> attribute is set to basicHttpBinding that provides HTTP communications using SOAP 1.1, which is compliant with WS-I BasicProfile 1.1 as shown in the following sample configuration.","pos":[2372,2566],"source":" The `binding` attribute is set to basicHttpBinding that provides HTTP communications using SOAP 1.1, which is compliant with WS-I BasicProfile 1.1 as shown in the following sample configuration."},{"content":"The ASMX client communicates with the WCF service using a typed proxy that is generated by the Web Services Description Language (WSDL) utility (Wsdl.exe).","pos":[3043,3198]},{"content":"The typed proxy is contained in the file generatedClient.cs.","pos":[3199,3259]},{"content":"The WSDL utility retrieves metadata for the specified service and generates a typed proxy for use by a client to communicate.","pos":[3260,3385]},{"content":"By default, the framework does not expose any metadata.","pos":[3386,3441]},{"content":"To expose the metadata required to generate the proxy, you must add a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>serviceMetadata&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/servicemetadata.md)</ept> and set its <ph id=\"ph2\">`httpGetEnabled`</ph> attribute to <ph id=\"ph3\">`True`</ph> as shown in the following configuration.","pos":[3442,3700],"source":" To expose the metadata required to generate the proxy, you must add a [\\<serviceMetadata>](../../../../docs/framework/configure-apps/file-schema/wcf/servicemetadata.md) and set its `httpGetEnabled` attribute to `True` as shown in the following configuration."},{"content":"Run the following command from a command prompt in the client directory to generate the typed proxy.","pos":[4194,4294]},{"content":"By using the generated typed proxy, the client can access a given service endpoint by configuring the appropriate address.","pos":[4473,4595]},{"content":"The client uses a configuration file (App.config) to specify the endpoint to communicate with.","pos":[4596,4690]},{"content":"The client implementation constructs an instance of the typed proxy to begin communicating with the service.","pos":[4857,4965]},{"content":"When you run the sample, the operation requests and responses are displayed in the client console window.","pos":[6090,6195]},{"content":"Press ENTER in the client window to shut down the client.","pos":[6196,6253]},{"pos":[6443,6479],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[6489,6688],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[6698,6907],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[6917,7125],"content":"To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.","source":"To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md)."},{"pos":[7133,7588],"content":"[!NOTE]\n For more information about passing and returning complex data types see: [Data Binding in a Windows Forms Client](../../../../docs/framework/wcf/samples/data-binding-in-a-windows-forms-client.md), [Data Binding in a Windows Presentation Foundation Client](../../../../docs/framework/wcf/samples/data-binding-in-a-wpf-client.md), and [Data Binding in an ASP.NET Client](../../../../docs/framework/wcf/samples/data-binding-in-an-aspnet-client.md)","leadings":["","> "],"nodes":[{"content":"For more information about passing and returning complex data types see: <bpt id=\"p1\">[</bpt>Data Binding in a Windows Forms Client<ept id=\"p1\">](../../../../docs/framework/wcf/samples/data-binding-in-a-windows-forms-client.md)</ept>, <bpt id=\"p2\">[</bpt>Data Binding in a Windows Presentation Foundation Client<ept id=\"p2\">](../../../../docs/framework/wcf/samples/data-binding-in-a-wpf-client.md)</ept>, and <bpt id=\"p3\">[</bpt>Data Binding in an ASP.NET Client<ept id=\"p3\">](../../../../docs/framework/wcf/samples/data-binding-in-an-aspnet-client.md)</ept>","pos":[9,453],"source":"For more information about passing and returning complex data types see: [Data Binding in a Windows Forms Client](../../../../docs/framework/wcf/samples/data-binding-in-a-windows-forms-client.md), [Data Binding in a Windows Presentation Foundation Client](../../../../docs/framework/wcf/samples/data-binding-in-a-wpf-client.md), and [Data Binding in an ASP.NET Client](../../../../docs/framework/wcf/samples/data-binding-in-an-aspnet-client.md)"}]},{"pos":[7596,7728],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[14,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[0,53]},{"content":"Check for the following (default) directory before continuing.","pos":[54,116]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[7782,8092],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[8093,8143]}]}