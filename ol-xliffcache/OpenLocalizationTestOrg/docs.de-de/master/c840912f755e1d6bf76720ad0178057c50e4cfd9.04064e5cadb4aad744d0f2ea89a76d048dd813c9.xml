{"content":"---\ntitle: \"WPF Security Strategy - Security Engineering\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"security [WPF], testing techniques\"\n  - \"Security Development Lifecycle (SDL), security analysis [WPF]\"\n  - \"Security Development Lifecycle (SDL), threat modeling\"\n  - \"Security Development Lifecycle (SDL), testing techniques\"\n  - \"Security Development Lifecycle (SDL), source analysis tools\"\n  - \"Security Development Lifecycle (SDL), critical code management\"\n  - \"threat modeling [WPF]\"\nms.assetid: 0fc04394-4e47-49ca-b0cf-8cd1161d95b9\n---\n# WPF Security Strategy - Security Engineering\nTrustworthy Computing is a Microsoft initiative for ensuring the production of secure code. A key element of the Trustworthy Computing initiative is the [!INCLUDE[TLA#tla_sdl](../../../includes/tlasharptla-sdl-md.md)]. The [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)] is an engineering practice that is used in conjunction with standard engineering processes to facilitate the delivery of secure code. The [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)] consists of ten phases that combine best practices with formalization, measurability, and additional structure, including:  \n  \n-   Security design analysis  \n  \n-   Tool-based quality checks  \n  \n-   Penetration testing  \n  \n-   Final security review  \n  \n-   Post release product security management  \n  \n## WPF Specifics  \n The [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] engineering team both applies and extends the [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)], the combination of which includes the following key aspects:  \n  \n [Threat Modeling](#threat_modeling)  \n  \n [Security Analysis and Editing Tools](#tools)  \n  \n [Testing Techniques](#techniques)  \n  \n [Critical Code Management](#critical_code)  \n  \n<a name=\"threat_modeling\"></a>   \n### Threat Modeling  \n Threat modeling is a core component of the [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)], and is used to profile a system to determine potential security vulnerabilities. Once the vulnerabilities are identified, threat modeling also ensures that appropriate mitigations are in place.  \n  \n At a high level, threat modeling involves the following key steps by using a grocery store as an example:  \n  \n1.  **Identifying Assets**. A grocery store's assets might include employees, a safe, cash registers, and inventory.  \n  \n2.  **Enumerating Entry Points**. A grocery store's entry points might include the front and back doors, windows, the loading dock, and air conditioning units.  \n  \n3.  **Investigating Attacks against Assets using Entry Points**. One possible attack could target a grocery store's *safe* asset through the *air conditioning* entry point; the air conditioning unit could be unscrewed to allow the safe to be pulled up through it and out of the store.  \n  \n Threat modeling is applied throughout [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] and includes the following:  \n  \n-   How the [!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)] parser reads files, maps text to corresponding object model classes, and creates the actual code.  \n  \n-   How a window handle (hWnd) is created, sends messages, and is used for rendering the contents of a window.  \n  \n-   How data binding obtains resources and interacts with the system.  \n  \n These threat models are important for identifying security design requirements and threat mitigations during the development process.  \n  \n<a name=\"tools\"></a>   \n### Source Analysis and Editing Tools  \n In addition to the manual security code review elements of the [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)], the [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] team uses several tools for source analysis and associated edits to decrease security vulnerabilities. A wide range of source tools are used, and include the following:  \n  \n-   **FXCop**: Finds common security issues in managed code ranging from inheritance rules to code access security usage to how to safely interoperate with unmanaged code. See [FXCop](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/bb429476%28v=vs.80%29).  \n  \n-   **Prefix/Prefast**: Finds security vulnerabilities and common security issues in unmanaged code such as buffer overruns, format string issues, and error checking.  \n  \n-   **Banned APIs**: Searches source code to identify accidental usage of functions that are well-known for causing security issues, such as `strcpy`. Once identified, these functions are replaced with alternatives that are more security.  \n  \n<a name=\"techniques\"></a>   \n### Testing Techniques  \n [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] uses a variety of security testing techniques that include:  \n  \n-   **Whitebox Testing**: Testers view source code, and then build exploit tests  \n  \n-   **Blackbox Testing**: Testers try to find security exploits by examining the API and features, and then try to attack the product.  \n  \n-   **Regressing Security Issues from other Products**: Where relevant, security issues from related products are tested. For example, appropriate variants of approximately sixty security issues for [!INCLUDE[TLA2#tla_ie](../../../includes/tla2sharptla-ie-md.md)] have been identified and tried for their applicability to [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)].  \n  \n-   **Tools-Based Penetration Testing through File Fuzzing**: File fuzzing is the exploitation of a file reader's input range through a variety of inputs. One example in [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] where this technique is used is to check for failure in image decoding code.  \n  \n<a name=\"critical_code\"></a>   \n### Critical Code Management  \n For [!INCLUDE[TLA#tla_xbap#plural](../../../includes/tlasharptla-xbapsharpplural-md.md)], [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] builds a security sandbox by using .NET Framework support for marking and tracking security-critical code that elevates privileges (see **Security-Critical Methodology** in [WPF Security Strategy - Platform Security](wpf-security-strategy-platform-security.md)). Given the high security quality requirements on security critical code, such code receives an additional level of source management control and security audit. Approximately 5% to 10% of [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] consists of security-critical code, which is reviewed by a dedicated reviewing team. The source code and check-in process is managed by tracking security critical code and mapping each critical entity (i.e. a method that contains critical code) to its sign off state. The sign off state includes the names of one or more reviewers. Each daily build of [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] compares the critical code to that in previous builds to check for unapproved changes. If an engineer modifies critical code without approval from the reviewing team, it is identified and fixed immediately. This process enables the application and maintenance of an especially high level of scrutiny over [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] sandbox code.  \n  \n## See also\n\n- [Security](security-wpf.md)\n- [WPF Partial Trust Security](wpf-partial-trust-security.md)\n- [WPF Security Strategy - Platform Security](wpf-security-strategy-platform-security.md)\n- [Trustworthy Computing](https://www.microsoft.com/mscorp/twc/default.mspx)\n- [Security in .NET](../../standard/security/index.md)\n","nodes":[{"pos":[4,545],"embed":true,"restype":"x-metadata","content":"title: \"WPF Security Strategy - Security Engineering\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"security [WPF], testing techniques\"\n  - \"Security Development Lifecycle (SDL), security analysis [WPF]\"\n  - \"Security Development Lifecycle (SDL), threat modeling\"\n  - \"Security Development Lifecycle (SDL), testing techniques\"\n  - \"Security Development Lifecycle (SDL), source analysis tools\"\n  - \"Security Development Lifecycle (SDL), critical code management\"\n  - \"threat modeling [WPF]\"\nms.assetid: 0fc04394-4e47-49ca-b0cf-8cd1161d95b9","nodes":[{"content":"WPF Security Strategy - Security Engineering","nodes":[{"pos":[0,44],"content":"WPF Security Strategy - Security Engineering","nodes":[{"content":"WPF Security Strategy - Security Engineering","pos":[0,44]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[552,596],"content":"WPF Security Strategy - Security Engineering","linkify":"WPF Security Strategy - Security Engineering","nodes":[{"content":"WPF Security Strategy - Security Engineering","pos":[0,44]}]},{"content":"Trustworthy Computing is a Microsoft initiative for ensuring the production of secure code.","pos":[597,688]},{"content":"A key element of the Trustworthy Computing initiative is the <ph id=\"ph1\">[!INCLUDE[TLA#tla_sdl](../../../includes/tlasharptla-sdl-md.md)]</ph>.","pos":[689,815],"source":" A key element of the Trustworthy Computing initiative is the [!INCLUDE[TLA#tla_sdl](../../../includes/tlasharptla-sdl-md.md)]."},{"content":"The <ph id=\"ph1\">[!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)]</ph> is an engineering practice that is used in conjunction with standard engineering processes to facilitate the delivery of secure code.","pos":[816,1020],"source":" The [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)] is an engineering practice that is used in conjunction with standard engineering processes to facilitate the delivery of secure code."},{"content":"The <ph id=\"ph1\">[!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)]</ph> consists of ten phases that combine best practices with formalization, measurability, and additional structure, including:","pos":[1021,1214],"source":" The [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)] consists of ten phases that combine best practices with formalization, measurability, and additional structure, including:"},{"content":"Security design analysis","pos":[1224,1248]},{"content":"Tool-based quality checks","pos":[1258,1283]},{"content":"Penetration testing","pos":[1293,1312]},{"content":"Final security review","pos":[1322,1343]},{"content":"Post release product security management","pos":[1353,1393]},{"pos":[1402,1415],"content":"WPF Specifics","linkify":"WPF Specifics","nodes":[{"content":"WPF Specifics","pos":[0,13]}]},{"pos":[1419,1676],"content":"The <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> engineering team both applies and extends the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)]</ph>, the combination of which includes the following key aspects:","source":"The [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] engineering team both applies and extends the [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)], the combination of which includes the following key aspects:"},{"pos":[1683,1718],"content":"<bpt id=\"p1\">[</bpt>Threat Modeling<ept id=\"p1\">](#threat_modeling)</ept>","source":"[Threat Modeling](#threat_modeling)"},{"pos":[1725,1770],"content":"<bpt id=\"p1\">[</bpt>Security Analysis and Editing Tools<ept id=\"p1\">](#tools)</ept>","source":"[Security Analysis and Editing Tools](#tools)"},{"pos":[1777,1810],"content":"<bpt id=\"p1\">[</bpt>Testing Techniques<ept id=\"p1\">](#techniques)</ept>","source":"[Testing Techniques](#techniques)"},{"pos":[1817,1859],"content":"<bpt id=\"p1\">[</bpt>Critical Code Management<ept id=\"p1\">](#critical_code)</ept>","source":"[Critical Code Management](#critical_code)"},{"pos":[1903,1918],"content":"Threat Modeling","linkify":"Threat Modeling","nodes":[{"content":"Threat Modeling","pos":[0,15]}]},{"content":"Threat modeling is a core component of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)]</ph>, and is used to profile a system to determine potential security vulnerabilities.","pos":[1922,2113],"source":"Threat modeling is a core component of the [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)], and is used to profile a system to determine potential security vulnerabilities."},{"content":"Once the vulnerabilities are identified, threat modeling also ensures that appropriate mitigations are in place.","pos":[2114,2226]},{"content":"At a high level, threat modeling involves the following key steps by using a grocery store as an example:","pos":[2233,2338]},{"content":"<bpt id=\"p1\">**</bpt>Identifying Assets<ept id=\"p1\">**</ept>.","pos":[2348,2371],"source":"**Identifying Assets**."},{"content":"A grocery store's assets might include employees, a safe, cash registers, and inventory.","pos":[2372,2460]},{"content":"<bpt id=\"p1\">**</bpt>Enumerating Entry Points<ept id=\"p1\">**</ept>.","pos":[2470,2499],"source":"**Enumerating Entry Points**."},{"content":"A grocery store's entry points might include the front and back doors, windows, the loading dock, and air conditioning units.","pos":[2500,2625]},{"content":"<bpt id=\"p1\">**</bpt>Investigating Attacks against Assets using Entry Points<ept id=\"p1\">**</ept>.","pos":[2635,2695],"source":"**Investigating Attacks against Assets using Entry Points**."},{"content":"One possible attack could target a grocery store's <bpt id=\"p1\">*</bpt>safe<ept id=\"p1\">*</ept> asset through the <bpt id=\"p2\">*</bpt>air conditioning<ept id=\"p2\">*</ept> entry point; the air conditioning unit could be unscrewed to allow the safe to be pulled up through it and out of the store.","pos":[2696,2915],"source":" One possible attack could target a grocery store's *safe* asset through the *air conditioning* entry point; the air conditioning unit could be unscrewed to allow the safe to be pulled up through it and out of the store."},{"pos":[2922,3066],"content":"Threat modeling is applied throughout <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> and includes the following:","source":"Threat modeling is applied throughout [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] and includes the following:"},{"pos":[3076,3250],"content":"How the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> parser reads files, maps text to corresponding object model classes, and creates the actual code.","source":"How the [!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)] parser reads files, maps text to corresponding object model classes, and creates the actual code."},{"content":"How a window handle (hWnd) is created, sends messages, and is used for rendering the contents of a window.","pos":[3260,3366]},{"content":"How data binding obtains resources and interacts with the system.","pos":[3376,3441]},{"content":"These threat models are important for identifying security design requirements and threat mitigations during the development process.","pos":[3448,3581]},{"pos":[3615,3648],"content":"Source Analysis and Editing Tools","linkify":"Source Analysis and Editing Tools","nodes":[{"content":"Source Analysis and Editing Tools","pos":[0,33]}]},{"content":"In addition to the manual security code review elements of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)]</ph>, the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> team uses several tools for source analysis and associated edits to decrease security vulnerabilities.","pos":[3652,3968],"source":"In addition to the manual security code review elements of the [!INCLUDE[TLA2#tla_sdl](../../../includes/tla2sharptla-sdl-md.md)], the [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] team uses several tools for source analysis and associated edits to decrease security vulnerabilities."},{"content":"A wide range of source tools are used, and include the following:","pos":[3969,4034]},{"content":"<bpt id=\"p1\">**</bpt>FXCop<ept id=\"p1\">**</ept>: Finds common security issues in managed code ranging from inheritance rules to code access security usage to how to safely interoperate with unmanaged code.","pos":[4044,4211],"source":"**FXCop**: Finds common security issues in managed code ranging from inheritance rules to code access security usage to how to safely interoperate with unmanaged code."},{"content":"See <bpt id=\"p1\">[</bpt>FXCop<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/bb429476%28v=vs.80%29)</ept>.","pos":[4212,4316],"source":" See [FXCop](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/bb429476%28v=vs.80%29)."},{"pos":[4326,4488],"content":"<bpt id=\"p1\">**</bpt>Prefix/Prefast<ept id=\"p1\">**</ept>: Finds security vulnerabilities and common security issues in unmanaged code such as buffer overruns, format string issues, and error checking.","source":"**Prefix/Prefast**: Finds security vulnerabilities and common security issues in unmanaged code such as buffer overruns, format string issues, and error checking."},{"content":"<bpt id=\"p1\">**</bpt>Banned APIs<ept id=\"p1\">**</ept>: Searches source code to identify accidental usage of functions that are well-known for causing security issues, such as <ph id=\"ph1\">`strcpy`</ph>.","pos":[4498,4644],"source":"**Banned APIs**: Searches source code to identify accidental usage of functions that are well-known for causing security issues, such as `strcpy`."},{"content":"Once identified, these functions are replaced with alternatives that are more security.","pos":[4645,4732]},{"pos":[4771,4789],"content":"Testing Techniques","linkify":"Testing Techniques","nodes":[{"content":"Testing Techniques","pos":[0,18]}]},{"pos":[4793,4931],"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> uses a variety of security testing techniques that include:","source":"[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] uses a variety of security testing techniques that include:"},{"pos":[4941,5017],"content":"<bpt id=\"p1\">**</bpt>Whitebox Testing<ept id=\"p1\">**</ept>: Testers view source code, and then build exploit tests","source":"**Whitebox Testing**: Testers view source code, and then build exploit tests"},{"pos":[5027,5157],"content":"<bpt id=\"p1\">**</bpt>Blackbox Testing<ept id=\"p1\">**</ept>: Testers try to find security exploits by examining the API and features, and then try to attack the product.","source":"**Blackbox Testing**: Testers try to find security exploits by examining the API and features, and then try to attack the product."},{"content":"<bpt id=\"p1\">**</bpt>Regressing Security Issues from other Products<ept id=\"p1\">**</ept>: Where relevant, security issues from related products are tested.","pos":[5167,5284],"source":"**Regressing Security Issues from other Products**: Where relevant, security issues from related products are tested."},{"content":"For example, appropriate variants of approximately sixty security issues for <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ie](../../../includes/tla2sharptla-ie-md.md)]</ph> have been identified and tried for their applicability to <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph>.","pos":[5285,5564],"source":" For example, appropriate variants of approximately sixty security issues for [!INCLUDE[TLA2#tla_ie](../../../includes/tla2sharptla-ie-md.md)] have been identified and tried for their applicability to [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]."},{"content":"<bpt id=\"p1\">**</bpt>Tools-Based Penetration Testing through File Fuzzing<ept id=\"p1\">**</ept>: File fuzzing is the exploitation of a file reader's input range through a variety of inputs.","pos":[5574,5724],"source":"**Tools-Based Penetration Testing through File Fuzzing**: File fuzzing is the exploitation of a file reader's input range through a variety of inputs."},{"content":"One example in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> where this technique is used is to check for failure in image decoding code.","pos":[5725,5895],"source":" One example in [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] where this technique is used is to check for failure in image decoding code."},{"pos":[5937,5961],"content":"Critical Code Management","linkify":"Critical Code Management","nodes":[{"content":"Critical Code Management","pos":[0,24]}]},{"content":"For <ph id=\"ph1\">[!INCLUDE[TLA#tla_xbap#plural](../../../includes/tlasharptla-xbapsharpplural-md.md)]</ph>, <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> builds a security sandbox by using .NET Framework support for marking and tracking security-critical code that elevates privileges (see <bpt id=\"p1\">**</bpt>Security-Critical Methodology<ept id=\"p1\">**</ept> in <bpt id=\"p2\">[</bpt>WPF Security Strategy - Platform Security<ept id=\"p2\">](wpf-security-strategy-platform-security.md)</ept>).","pos":[5965,6396],"source":"For [!INCLUDE[TLA#tla_xbap#plural](../../../includes/tlasharptla-xbapsharpplural-md.md)], [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] builds a security sandbox by using .NET Framework support for marking and tracking security-critical code that elevates privileges (see **Security-Critical Methodology** in [WPF Security Strategy - Platform Security](wpf-security-strategy-platform-security.md))."},{"content":"Given the high security quality requirements on security critical code, such code receives an additional level of source management control and security audit.","pos":[6397,6556]},{"content":"Approximately 5% to 10% of <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> consists of security-critical code, which is reviewed by a dedicated reviewing team.","pos":[6557,6747],"source":" Approximately 5% to 10% of [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] consists of security-critical code, which is reviewed by a dedicated reviewing team."},{"content":"The source code and check-in process is managed by tracking security critical code and mapping each critical entity (i.e. a method that contains critical code) to its sign off state.","pos":[6748,6930]},{"content":"The sign off state includes the names of one or more reviewers.","pos":[6931,6994]},{"content":"Each daily build of <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> compares the critical code to that in previous builds to check for unapproved changes.","pos":[6995,7180],"source":" Each daily build of [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] compares the critical code to that in previous builds to check for unapproved changes."},{"content":"If an engineer modifies critical code without approval from the reviewing team, it is identified and fixed immediately.","pos":[7181,7300]},{"content":"This process enables the application and maintenance of an especially high level of scrutiny over <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> sandbox code.","pos":[7301,7491],"source":" This process enables the application and maintenance of an especially high level of scrutiny over [!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)] sandbox code."},{"pos":[7500,7508],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7512,7539],"content":"<bpt id=\"p1\">[</bpt>Security<ept id=\"p1\">](security-wpf.md)</ept>","source":"[Security](security-wpf.md)"},{"pos":[7542,7601],"content":"<bpt id=\"p1\">[</bpt>WPF Partial Trust Security<ept id=\"p1\">](wpf-partial-trust-security.md)</ept>","source":"[WPF Partial Trust Security](wpf-partial-trust-security.md)"},{"pos":[7604,7691],"content":"<bpt id=\"p1\">[</bpt>WPF Security Strategy - Platform Security<ept id=\"p1\">](wpf-security-strategy-platform-security.md)</ept>","source":"[WPF Security Strategy - Platform Security](wpf-security-strategy-platform-security.md)"},{"pos":[7694,7768],"content":"<bpt id=\"p1\">[</bpt>Trustworthy Computing<ept id=\"p1\">](https://www.microsoft.com/mscorp/twc/default.mspx)</ept>","source":"[Trustworthy Computing](https://www.microsoft.com/mscorp/twc/default.mspx)"},{"pos":[7771,7823],"content":"<bpt id=\"p1\">[</bpt>Security in .NET<ept id=\"p1\">](../../standard/security/index.md)</ept>","source":"[Security in .NET](../../standard/security/index.md)"}]}