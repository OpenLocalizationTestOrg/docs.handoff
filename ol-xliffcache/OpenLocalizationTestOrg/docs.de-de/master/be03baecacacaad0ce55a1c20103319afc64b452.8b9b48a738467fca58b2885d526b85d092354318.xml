{"content":"---\ntitle: \"How to: Find Descendants with a Specific Element Name (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: f684da20-bee9-47f5-9607-7e3fd7e67470\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Find Descendants with a Specific Element Name (C#)\nSometimes you want to find all descendants with a particular name. You could write code to iterate through all of the descendants, but it is easier to use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis.  \n  \n## Example  \n The following example shows how to find descendants based on the element name.  \n  \n```csharp  \nXElement root = XElement.Parse(@\"<root>  \n  <para>  \n    <r>  \n      <t>Some text </t>  \n    </r>  \n    <n>  \n      <r>  \n        <t>that is broken up into </t>  \n      </r>  \n    </n>  \n    <n>  \n      <r>  \n        <t>multiple segments.</t>  \n      </r>  \n    </n>  \n  </para>  \n</root>\");  \nIEnumerable<string> textSegs =  \n    from seg in root.Descendants(\"t\")  \n    select (string)seg;  \n  \nstring str = textSegs.Aggregate(new StringBuilder(),  \n    (sb, i) => sb.Append(i),  \n    sp => sp.ToString()  \n);  \n  \nConsole.WriteLine(str);  \n```  \n  \n This code produces the following output:  \n  \n```  \nSome text that is broken up into multiple segments.  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```csharp  \nXElement root = XElement.Parse(@\"<root xmlns='http://www.adatum.com'>  \n  <para>  \n    <r>  \n      <t>Some text </t>  \n    </r>  \n    <n>  \n      <r>  \n        <t>that is broken up into </t>  \n      </r>  \n    </n>  \n    <n>  \n      <r>  \n        <t>multiple segments.</t>  \n      </r>  \n    </n>  \n  </para>  \n</root>\");  \nXNamespace ad = \"http://www.adatum.com\";  \nIEnumerable<string> textSegs =  \n    from seg in root.Descendants(ad + \"t\")  \n    select (string)seg;  \n  \nstring str = textSegs.Aggregate(new StringBuilder(),  \n    (sb, i) => sb.Append(i),  \n    sp => sp.ToString()  \n);  \n  \nConsole.WriteLine(str);  \n```  \n  \n This code produces the following output:  \n  \n```  \nSome text that is broken up into multiple segments.  \n```  \n  \n## See Also  \n <xref:System.Xml.Linq.XContainer.Descendants%2A>   \n [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)","nodes":[{"pos":[12,87],"content":"How to: Find Descendants with a Specific Element Name (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Find Descendants with a Specific Element Name (C#) | Microsoft Docs","pos":[0,75]}]},{"pos":[372,430],"content":"How to: Find Descendants with a Specific Element Name (C#)","linkify":"How to: Find Descendants with a Specific Element Name (C#)","nodes":[{"content":"How to: Find Descendants with a Specific Element Name (C#)","pos":[0,58]}]},{"content":"Sometimes you want to find all descendants with a particular name.","pos":[431,497]},{"content":"You could write code to iterate through all of the descendants, but it is easier to use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis.","pos":[498,644],"source":" You could write code to iterate through all of the descendants, but it is easier to use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis."},{"pos":[653,660],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to find descendants based on the element name.","pos":[664,742]},{"content":"This code produces the following output:","pos":[1312,1352]},{"pos":[1430,1437],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1441,1515]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[1516,1660],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This code produces the following output:","pos":[2308,2348]},{"pos":[2426,2434],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","pos":[2490,2606],"source":" [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}