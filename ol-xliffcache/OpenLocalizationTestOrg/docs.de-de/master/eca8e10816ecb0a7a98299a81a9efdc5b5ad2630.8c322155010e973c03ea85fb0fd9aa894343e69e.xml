{"content":"---\ntitle: \"Converting Data Types (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 46e5682f-77a1-4302-8f93-a2b53c408808\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Converting Data Types (C#)\nConversion methods change the type of input objects.  \n  \n Conversion operations in LINQ queries are useful in a variety of applications. Following are some examples:  \n  \n-   The <xref:System.Linq.Enumerable.AsEnumerable%2A?displayProperty=fullName> method can be used to hide a type's custom implementation of a standard query operator.  \n  \n-   The <xref:System.Linq.Enumerable.OfType%2A?displayProperty=fullName> method can be used to enable non-parameterized collections for LINQ querying.  \n  \n-   The <xref:System.Linq.Enumerable.ToArray%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.ToDictionary%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.ToList%2A?displayProperty=fullName>, and <xref:System.Linq.Enumerable.ToLookup%2A?displayProperty=fullName> methods can be used to force immediate query execution instead of deferring it until the query is enumerated.  \n  \n## Methods  \n The following table lists the standard query operator methods that perform data-type conversions.  \n  \n The conversion methods in this table whose names start with \"As\" change the static type of the source collection but do not enumerate it. The methods whose names start with \"To\" enumerate the source collection and put the items into the corresponding collection type.  \n  \n|Method Name|Description|C# Query Expression Syntax|More Information|  \n|-----------------|-----------------|---------------------------------|----------------------|  \n|AsEnumerable|Returns the input typed as <xref:System.Collections.Generic.IEnumerable%601>.|Not applicable.|<xref:System.Linq.Enumerable.AsEnumerable%2A?displayProperty=fullName>|  \n|AsQueryable|Converts a (generic) <xref:System.Collections.IEnumerable> to a (generic) <xref:System.Linq.IQueryable>.|Not applicable.|<xref:System.Linq.Queryable.AsQueryable%2A?displayProperty=fullName>|  \n|Cast|Casts the elements of a collection to a specified type.|Use an explicitly typed range variable. For example:<br /><br /> `from string str in words`|<xref:System.Linq.Enumerable.Cast%2A?displayProperty=fullName><br /><br /> <xref:System.Linq.Queryable.Cast%2A?displayProperty=fullName>|  \n|OfType|Filters values, depending on their ability to be cast to a specified type.|Not applicable.|<xref:System.Linq.Enumerable.OfType%2A?displayProperty=fullName><br /><br /> <xref:System.Linq.Queryable.OfType%2A?displayProperty=fullName>|  \n|ToArray|Converts a collection to an array. This method forces query execution.|Not applicable.|<xref:System.Linq.Enumerable.ToArray%2A?displayProperty=fullName>|  \n|ToDictionary|Puts elements into a <xref:System.Collections.Generic.Dictionary%602> based on a key selector function. This method forces query execution.|Not applicable.|<xref:System.Linq.Enumerable.ToDictionary%2A?displayProperty=fullName>|  \n|ToList|Converts a collection to a <xref:System.Collections.Generic.List%601>. This method forces query execution.|Not applicable.|<xref:System.Linq.Enumerable.ToList%2A?displayProperty=fullName>|  \n|ToLookup|Puts elements into a <xref:System.Linq.Lookup%602> (a one-to-many dictionary) based on a key selector function. This method forces query execution.|Not applicable.|<xref:System.Linq.Enumerable.ToLookup%2A?displayProperty=fullName>|  \n  \n## Query Expression Syntax Example  \n The following code example uses an explicitly-typed range variable  to cast a type to a subtype before accessing a member that is available only on the subtype.  \n  \n```csharp  \nclass Plant  \n{  \n    public string Name { get; set; }  \n}  \n  \nclass CarnivorousPlant : Plant  \n{  \n    public string TrapType { get; set; }  \n}  \n  \nstatic void Cast()  \n{  \n    Plant[] plants = new Plant[] {  \n        new CarnivorousPlant { Name = \"Venus Fly Trap\", TrapType = \"Snap Trap\" },  \n        new CarnivorousPlant { Name = \"Pitcher Plant\", TrapType = \"Pitfall Trap\" },  \n        new CarnivorousPlant { Name = \"Sundew\", TrapType = \"Flypaper Trap\" },  \n        new CarnivorousPlant { Name = \"Waterwheel Plant\", TrapType = \"Snap Trap\" }  \n    };  \n  \n    var query = from CarnivorousPlant cPlant in plants  \n                where cPlant.TrapType == \"Snap Trap\"  \n                select cPlant;  \n  \n    foreach (Plant plant in query)  \n        Console.WriteLine(plant.Name);  \n  \n    /* This code produces the following output:  \n  \n        Venus Fly Trap  \n        Waterwheel Plant  \n    */  \n}  \n```  \n  \n## See Also  \n <xref:System.Linq>   \n [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)   \n [from clause](../../../../csharp/language-reference/keywords/from-clause.md)   \n [LINQ Query Expressions](../../../../csharp/programming-guide/linq-query-expressions/index.md)   \n [How to: Query an ArrayList with LINQ (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq.md)","nodes":[{"pos":[4,407],"nodes":[{"content":"Converting Data Types (C#) | Microsoft Docs","nodes":[{"pos":[0,43],"content":"Converting Data Types (C#) | Microsoft Docs","nodes":[{"content":"Converting Data Types (C#) | Microsoft Docs","pos":[0,43]}]}],"pos":[6,52],"yaml":true}],"content":"title: \"Converting Data Types (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 46e5682f-77a1-4302-8f93-a2b53c408808\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[414,440],"content":"Converting Data Types (C#)","linkify":"Converting Data Types (C#)","nodes":[{"content":"Converting Data Types (C#)","pos":[0,26]}]},{"content":"Conversion methods change the type of input objects.","pos":[441,493]},{"content":"Conversion operations in LINQ queries are useful in a variety of applications.","pos":[500,578]},{"content":"Following are some examples:","pos":[579,607]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A?displayProperty=fullName&gt;</ph> method can be used to hide a type's custom implementation of a standard query operator.","pos":[617,779],"source":"The <xref:System.Linq.Enumerable.AsEnumerable%2A?displayProperty=fullName> method can be used to hide a type's custom implementation of a standard query operator."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OfType%2A?displayProperty=fullName&gt;</ph> method can be used to enable non-parameterized collections for LINQ querying.","pos":[789,935],"source":"The <xref:System.Linq.Enumerable.OfType%2A?displayProperty=fullName> method can be used to enable non-parameterized collections for LINQ querying."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToArray%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ToDictionary%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.ToList%2A?displayProperty=fullName&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.ToLookup%2A?displayProperty=fullName&gt;</ph> methods can be used to force immediate query execution instead of deferring it until the query is enumerated.","pos":[945,1334],"source":"The <xref:System.Linq.Enumerable.ToArray%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.ToDictionary%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.ToList%2A?displayProperty=fullName>, and <xref:System.Linq.Enumerable.ToLookup%2A?displayProperty=fullName> methods can be used to force immediate query execution instead of deferring it until the query is enumerated."},{"pos":[1343,1350],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"The following table lists the standard query operator methods that perform data-type conversions.","pos":[1354,1451]},{"content":"The conversion methods in this table whose names start with \"As\" change the static type of the source collection but do not enumerate it.","pos":[1458,1595]},{"content":"The methods whose names start with \"To\" enumerate the source collection and put the items into the corresponding collection type.","pos":[1596,1725]},{"content":"Method Name","pos":[1732,1743]},{"content":"Description","pos":[1744,1755]},{"content":"C# Query Expression Syntax","pos":[1756,1782]},{"content":"More Information","pos":[1783,1799]},{"content":"AsEnumerable","pos":[1901,1913]},{"content":"Returns the input typed as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[1914,1991],"source":"Returns the input typed as <xref:System.Collections.Generic.IEnumerable%601>."},{"content":"Not applicable.","pos":[1992,2007]},{"content":"AsQueryable","pos":[2083,2094]},{"content":"Converts a (generic) <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> to a (generic) <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable&gt;</ph>.","pos":[2095,2199],"source":"Converts a (generic) <xref:System.Collections.IEnumerable> to a (generic) <xref:System.Linq.IQueryable>."},{"content":"Not applicable.","pos":[2200,2215]},{"content":"Cast","pos":[2289,2293]},{"content":"Casts the elements of a collection to a specified type.","pos":[2294,2349]},{"content":"Use an explicitly typed range variable.","pos":[2350,2389]},{"content":"For example:","pos":[2390,2402]},{"content":"OfType","pos":[2583,2589]},{"content":"Filters values, depending on their ability to be cast to a specified type.","pos":[2590,2664]},{"content":"Not applicable.","pos":[2665,2680]},{"content":"ToArray","pos":[2826,2833]},{"content":"Converts a collection to an array.","pos":[2834,2868]},{"content":"This method forces query execution.","pos":[2869,2904]},{"content":"Not applicable.","pos":[2905,2920]},{"content":"ToDictionary","pos":[2991,3003]},{"content":"Puts elements into a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> based on a key selector function.","pos":[3004,3107],"source":"Puts elements into a <xref:System.Collections.Generic.Dictionary%602> based on a key selector function."},{"content":"This method forces query execution.","pos":[3108,3143]},{"content":"Not applicable.","pos":[3144,3159]},{"content":"ToList","pos":[3235,3241]},{"content":"Converts a collection to a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[3242,3312],"source":"Converts a collection to a <xref:System.Collections.Generic.List%601>."},{"content":"This method forces query execution.","pos":[3313,3348]},{"content":"Not applicable.","pos":[3349,3364]},{"content":"ToLookup","pos":[3434,3442]},{"content":"Puts elements into a <ph id=\"ph1\">&lt;xref:System.Linq.Lookup%602&gt;</ph> (a one-to-many dictionary) based on a key selector function.","pos":[3443,3554],"source":"Puts elements into a <xref:System.Linq.Lookup%602> (a one-to-many dictionary) based on a key selector function."},{"content":"This method forces query execution.","pos":[3555,3590]},{"content":"Not applicable.","pos":[3591,3606]},{"pos":[3683,3714],"content":"Query Expression Syntax Example","linkify":"Query Expression Syntax Example","nodes":[{"content":"Query Expression Syntax Example","pos":[0,31]}]},{"content":"The following code example uses an explicitly-typed range variable  to cast a type to a subtype before accessing a member that is available only on the subtype.","pos":[3718,3878]},{"pos":[4815,4823],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq&gt;</ph>","pos":[4827,4845],"source":"<xref:System.Linq> "},{"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[4850,4980],"source":"[Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>from clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/from-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[4984,5061],"source":"[from clause](../../../../csharp/language-reference/keywords/from-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ Query Expressions<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5065,5160],"source":"[LINQ Query Expressions](../../../../csharp/programming-guide/linq-query-expressions/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Query an ArrayList with LINQ (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq.md)</ept>","pos":[5164,5298],"source":"[How to: Query an ArrayList with LINQ (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq.md)"}]}