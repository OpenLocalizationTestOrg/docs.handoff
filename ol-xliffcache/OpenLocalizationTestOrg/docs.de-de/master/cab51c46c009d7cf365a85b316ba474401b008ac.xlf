<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cab51c46c009d7cf365a85b316ba474401b008ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\advanced-filters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ad23928042a3b59e19b7ccfd51af73219f1cecc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59341bb2192781c7ee292f10ae6f752affb5f8fb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Advanced Filters | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Advanced Filters</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates a <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> routing service.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The routing service is a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> component that makes it easy to include a content-based router in your application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This sample adapts the standard <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Calculator sample to communicate using the routing service.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This sample shows how to define content-based routing logic through the use of message filters and message filter tables.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your computer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Sample Details</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table shows the message filters that are added to the message filter table of the routing service.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Filter</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Rule</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Priority</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If (has header)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Rounding</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If (showed up on Ep2)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Regular</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If (showed up with Address2)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Rounding</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If (RoundRobin1)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Regular</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If (RoundRobin2)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Rounding</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The message filters and message filter tables can be created and configured either through code or in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For this sample, you can find the message filters and message filter tables defined through code in the RoutingService\routing.cs file, or defined in the application configuration file in the RoutingService\App.config file.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following paragraphs describe how the message filters and message filter tables are created for this sample through code.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>First, an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.XPathMessageFilter&gt;</ph> looks for the custom header.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> results in an envelope version using SOAP 1.2, so the XPath statement is defined to use the SOAP 1.2 namespace.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The default namespace manager for <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.XPathMessageFilter&gt;</ph>s already defines a prefix for the SOAP 1.2 namespace, /s12, which can be used.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, the default namespace manager does not have the custom namespace that the client uses to define the actual header value, so that prefix must be defined.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Any message that shows up with this header matches this filter.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The second filter is an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.EndpointNameMessageFilter&gt;</ph>, which matches any message that was received on the <ph id="ph2">`calculatorEndpoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The endpoint name is defined when a service endpoint object is created.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The third filter is a <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This matches any message that showed up on an endpoint with an address that matches the address prefix (or the front portion) provided.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this example the address prefix is defined as "http://localhost/routingservice/router/rounding/".</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This means that any incoming messages that are addressed to "http://localhost/routingservice/router/rounding/*" are matched by this filter.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In this case, it is messages that show up on the Rounding Calculator endpoint, which has the address of "http://localhost/routingservice/router/rounding/calculator".</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The last two message filters are custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MessageFilter&gt;</ph>s.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this example, a "RoundRobin" message filter is used.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This message filter is created in the provided RoutingService\RoundRobinMessageFilter.cs file.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These filters, when set to the same group, alternate between reporting that they match the message and that they do not, such that only one of them responds <ph id="ph1">`true`</ph> at a time.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Next, all of those messages are added to a <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MessageFilterTable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In doing so, priorities are specified to influence the order in which the message filter table executes the filters.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The higher the priority, the sooner the filter is executed; the lower the priority, the later a filter is executed.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Thus a filter at priority 2 runs before a filter at priority 1.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The default priority level if none is specified is 0.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A message filter table executes all of the filters at a given priority level before moving to the next lowest priority level.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a match is found at a particular priority, then the message filter table does not continue trying to find matches at the next lower priority.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>While this example shows how to use message filter priorities, in general it is more performant and better design to design and configure your filters such that they do not require prioritization to function correctly.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The first filter to be added is the XPath filter and its priority is set to 2.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is the first message filter that executes.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If it finds the custom header, regardless of what the results of the other filters would be, the message is routed to the Rounding Calculator endpoint.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>At priority 1, two filters are added.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Again, these only run if the XPath filter at priority 2 does not match the message.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These two filters show two different ways to determine where the message was addressed when it showed up.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Because the two filters effectively check to see whether the message arrived at one of the two endpoints, they can be run at the same priority level because they do not both return <ph id="ph1">`true`</ph> at the same time.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Finally, at Priority 0 (the lowest priority) run the RoundRobin message filters.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Because the filters are configured with the same group name, only one of them matches at a time.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because all messages with the custom header have been routed and all those addressed to the specific virtualized endpoints, messages handled by the RoundRobin message filters are only messages that were addressed to the default router endpoint without the custom header.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because these messages switch on a message for each call, half of the operations go to the Regular Calculator endpoint and the other half go to the Rounding Calculator endpoint.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To use this sample</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph>, open AdvancedFilters.sln.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To open <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept> from the <bpt id="p3">**</bpt>View<ept id="p3">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Press F5 or CTRL+SHIFT+B in <ph id="ph1">[!INCLUDE[vs_current_short](../../../../includes/vs-current-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you would like to auto-launch the necessary projects when you press F5, right-click the solution and select <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Startup Project<ept id="p1">**</ept> node under <bpt id="p2">**</bpt>Common Properties<ept id="p2">**</ept> in the left pane.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Multiple Startup Projects<ept id="p1">**</ept>  radio button and set all of the projects to have the <bpt id="p2">**</bpt>Start<ept id="p2">**</ept> action.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you build the project with CTRL+SHIFT+B, you must start the following applications:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Calculator Client (./CalculatorClient/bin/client.exe)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Calculator Service (./CalculatorService/bin/service.exe)</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Routing Calculator Service (./RoundingCalcService/bin/service.exe)</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>RoutingService (./RoutingService/bin/RoutingService.exe)</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the console window of the Calculator client, press ENTER to start the client.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The client returns a list of destination endpoints to choose from.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Choose a destination endpoint by typing its corresponding letter and press ENTER.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Next, the client asks you if you want to add a custom header.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Press Y for Yes or N for No, then press ENTER.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Depending on the selections you made, you should see different outputs.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following is the output returned if you added a custom header to the messages.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following is the output returned if you chose the Rounding Calculator endpoint without a custom header.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following is the output returned if you chose the Regular Calculator endpoint without a custom header.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following is the output returned if you chose the Default Router endpoint without a custom header.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The Calculator Service and the Rounding Calculator Service also prints out a log of the operations invoked to their respective console windows.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In the client console window, type <ph id="ph1">`quit`</ph> and press ENTER to exit.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Press ENTER in the services console windows to terminate the services.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Configurable Via Code or App.config</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The sample ships configured to use an App.config file to define the router’s behavior.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can also change the name of the RoutingService\App.config file to something else so that it is not recognized and uncomment the method call to <ph id="ph1">`ConfigureRouterViaCode()`</ph> in RoutingService\routing.cs.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Either method results in the same behavior from the router.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Scenario</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This sample demonstrates the router acting as a content-based router allowing multiple types or implementation of services to be exposed through one endpoint.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Real World Scenario</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Contoso wants to virtualize all of their services to expose only one endpoint publicly through which they offer access to multiple different types of services.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In this case they utilize the routing service’s content-based routing capabilities to determine where the incoming requests should be sent.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AppFabric Hosting and Persistence Samples<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=193961)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>