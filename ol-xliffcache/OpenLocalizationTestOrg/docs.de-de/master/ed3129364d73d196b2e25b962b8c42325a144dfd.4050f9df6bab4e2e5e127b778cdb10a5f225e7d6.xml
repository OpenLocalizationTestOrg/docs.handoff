{"content":"---\ntitle: \"How to: Cancel a Task and Its Children\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tasks, how to cancel\"\nms.assetid: 08574301-8331-4719-ad50-9cf7f6ff3048\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Cancel a Task and Its Children\nThese examples show how to perform the following tasks:  \n  \n1.  Create and start a cancelable task.  \n  \n2.  Pass a cancellation token to your user delegate and optionally to the task instance.  \n  \n3.  Notice and respond to the cancellation request in your user delegate.  \n  \n4.  Optionally notice on the calling thread that the task was canceled.  \n  \n The calling thread does not forcibly end the task; it only signals that cancellation is requested. If the task is already running, it is up to the user delegate to notice the request and respond appropriately. If cancellation is requested before the task runs, then the user delegate is never executed and the task object transitions into the Canceled state.  \n  \n## Example  \n This example shows how to terminate a <xref:System.Threading.Tasks.Task> and its children in response to a cancellation request. It also shows that when a user delegate terminates by throwing a <xref:System.Threading.Tasks.TaskCanceledException>, the calling thread can optionally use the <xref:System.Threading.Tasks.Task.Wait%2A> method or <xref:System.Threading.Tasks.Task.WaitAll%2A> method to wait for the tasks to finish. In this case, you must use a `try/catch` block to handle the exceptions on the calling thread.  \n  \n [!code-csharp[TPL_Cancellation#04](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_cancellation/cs/cancel1.cs#04)]\n [!code-vb[TPL_Cancellation#04](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_cancellation/vb/cancel1.vb#04)]  \n  \n The <xref:System.Threading.Tasks.Task?displayProperty=nameWithType> class is fully integrated with the cancellation model that is based on the <xref:System.Threading.CancellationTokenSource?displayProperty=nameWithType> and <xref:System.Threading.CancellationToken?displayProperty=nameWithType> types. For more information, see [Cancellation in Managed Threads](../../../docs/standard/threading/cancellation-in-managed-threads.md) and [Task Cancellation](../../../docs/standard/parallel-programming/task-cancellation.md).  \n  \n## See also\n\n- <xref:System.Threading.CancellationTokenSource?displayProperty=nameWithType>\n- <xref:System.Threading.CancellationToken?displayProperty=nameWithType>\n- <xref:System.Threading.Tasks.Task?displayProperty=nameWithType>\n- <xref:System.Threading.Tasks.Task%601?displayProperty=nameWithType>\n- [Task-based Asynchronous Programming](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)\n- [Attached and Detached Child Tasks](../../../docs/standard/parallel-programming/attached-and-detached-child-tasks.md)\n- [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)\n","nodes":[{"pos":[4,276],"embed":true,"restype":"x-metadata","content":"title: \"How to: Cancel a Task and Its Children\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tasks, how to cancel\"\nms.assetid: 08574301-8331-4719-ad50-9cf7f6ff3048\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Cancel a Task and Its Children","nodes":[{"pos":[0,38],"content":"How to: Cancel a Task and Its Children","nodes":[{"content":"How to: Cancel a Task and Its Children","pos":[0,38]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[283,321],"content":"How to: Cancel a Task and Its Children","linkify":"How to: Cancel a Task and Its Children","nodes":[{"content":"How to: Cancel a Task and Its Children","pos":[0,38]}]},{"content":"These examples show how to perform the following tasks:","pos":[322,377]},{"content":"Create and start a cancelable task.","pos":[387,422]},{"content":"Pass a cancellation token to your user delegate and optionally to the task instance.","pos":[432,516]},{"content":"Notice and respond to the cancellation request in your user delegate.","pos":[526,595]},{"content":"Optionally notice on the calling thread that the task was canceled.","pos":[605,672]},{"content":"The calling thread does not forcibly end the task; it only signals that cancellation is requested.","pos":[679,777]},{"content":"If the task is already running, it is up to the user delegate to notice the request and respond appropriately.","pos":[778,888]},{"content":"If cancellation is requested before the task runs, then the user delegate is never executed and the task object transitions into the Canceled state.","pos":[889,1037]},{"pos":[1046,1053],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows how to terminate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and its children in response to a cancellation request.","pos":[1057,1185],"source":"This example shows how to terminate a <xref:System.Threading.Tasks.Task> and its children in response to a cancellation request."},{"content":"It also shows that when a user delegate terminates by throwing a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph>, the calling thread can optionally use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> method to wait for the tasks to finish.","pos":[1186,1484],"source":" It also shows that when a user delegate terminates by throwing a <xref:System.Threading.Tasks.TaskCanceledException>, the calling thread can optionally use the <xref:System.Threading.Tasks.Task.Wait%2A> method or <xref:System.Threading.Tasks.Task.WaitAll%2A> method to wait for the tasks to finish."},{"content":"In this case, you must use a <ph id=\"ph1\">`try/catch`</ph> block to handle the exceptions on the calling thread.","pos":[1485,1579],"source":" In this case, you must use a `try/catch` block to handle the exceptions on the calling thread."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task?displayProperty=nameWithType&gt;</ph> class is fully integrated with the cancellation model that is based on the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Threading.CancellationToken?displayProperty=nameWithType&gt;</ph> types.","pos":[1836,2137],"source":"The <xref:System.Threading.Tasks.Task?displayProperty=nameWithType> class is fully integrated with the cancellation model that is based on the <xref:System.Threading.CancellationTokenSource?displayProperty=nameWithType> and <xref:System.Threading.CancellationToken?displayProperty=nameWithType> types."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cancellation in Managed Threads<ept id=\"p1\">](../../../docs/standard/threading/cancellation-in-managed-threads.md)</ept> and <bpt id=\"p2\">[</bpt>Task Cancellation<ept id=\"p2\">](../../../docs/standard/parallel-programming/task-cancellation.md)</ept>.","pos":[2138,2357],"source":" For more information, see [Cancellation in Managed Threads](../../../docs/standard/threading/cancellation-in-managed-threads.md) and [Task Cancellation](../../../docs/standard/parallel-programming/task-cancellation.md)."},{"pos":[2366,2374],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2666,2787],"content":"<bpt id=\"p1\">[</bpt>Task-based Asynchronous Programming<ept id=\"p1\">](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>","source":"[Task-based Asynchronous Programming](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)"},{"pos":[2790,2907],"content":"<bpt id=\"p1\">[</bpt>Attached and Detached Child Tasks<ept id=\"p1\">](../../../docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>","source":"[Attached and Detached Child Tasks](../../../docs/standard/parallel-programming/attached-and-detached-child-tasks.md)"},{"pos":[2910,3031],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions in PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>","source":"[Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)"}]}