{"content":"---\ntitle: \"Async Return Types (C#)\"\nms.date: 05/29/2017\nms.assetid: ddb2539c-c898-48c1-ad92-245e4a996df8\n---\n# Async Return Types (C#)\nAsync methods can have the following return types:\n\n- <xref:System.Threading.Tasks.Task%601>, for an async method that returns a value. \n \n-  <xref:System.Threading.Tasks.Task>, for an async method that performs an operation but returns no value.\n\n- `void`, for an event handler. \n\n- Starting with C# 7.0, any type that has an accessible `GetAwaiter` method. The object returned by the `GetAwaiter` method must implement the <xref:System.Runtime.CompilerServices.ICriticalNotifyCompletion?displayProperty=nameWithType> interface.\n  \nFor more information about async methods, see [Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md).  \n  \nEach return type is examined in one of the following sections, and you can find a full example that uses all three types at the end of the topic.  \n  \n## <a name=\"BKMK_TaskTReturnType\"></a> Task\\<TResult\\> Return Type  \nThe <xref:System.Threading.Tasks.Task%601> return type is used for an async method that contains a [return](../../../../csharp/language-reference/keywords/return.md) (C#) statement in which the operand has type `TResult`.  \n  \nIn the following example, the `GetLeisureHours` async method contains a `return` statement that returns an integer. Therefore, the method declaration must specify a return type of `Task<int>`.  The <xref:System.Threading.Tasks.Task.FromResult%2A> async method is a placeholder for an operation that returns a string.\n  \n[!code-csharp[return-value](../../../../../samples/snippets/csharp/programming-guide/async/async-returns1.cs)]\n\nWhen `GetLeisureHours` is called from within an await expression in the `ShowTodaysInfo` method, the await expression retrieves the integer value (the value of `leisureHours`) that's stored in the task returned by the `GetLeisureHours` method. For more information about await expressions, see [await](../../../../csharp/language-reference/keywords/await.md).  \n  \nYou can better understand how this happens by separating the call to `GetLeisureHours` from the application of `await`, as the following code shows. A call to method `GetLeisureHours` that isn't immediately awaited returns a `Task<int>`, as you would expect from the declaration of the method. The task is assigned to the `integerTask` variable in the example. Because `integerTask` is a <xref:System.Threading.Tasks.Task%601>, it contains a <xref:System.Threading.Tasks.Task%601.Result> property of type `TResult`. In this case, `TResult` represents an integer type. When `await` is applied to `integerTask`, the await expression evaluates to the contents of the <xref:System.Threading.Tasks.Task%601.Result%2A> property of `integerTask`. The value is assigned to the `ret` variable.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Threading.Tasks.Task%601.Result%2A> property is a blocking property. If you try to access it before its task is finished, the thread that's currently active is blocked until the task completes and the value is available. In most cases, you should access the value by using `await` instead of accessing the property directly. <br/> The previous example retrieved the value of the <xref:System.Threading.Tasks.Task%601.Result%2A> property to block the main thread so that the `ShowTodaysInfo` method could finish execution before the application ended.  \n\n[!code-csharp[return-value](../../../../../samples/snippets/csharp/programming-guide/async/async-returns1a.cs#1)]\n  \n## <a name=\"BKMK_TaskReturnType\"></a> Task Return Type  \nAsync methods that don't contain a `return` statement or that contain a `return` statement that doesn't return an operand usually have a return type of <xref:System.Threading.Tasks.Task>. Such methods return `void` if they run synchronously. If you use a <xref:System.Threading.Tasks.Task> return type for an async method, a calling method can use an `await` operator to suspend the caller's completion until the called async method has finished.  \n  \nIn the following example, the `WaitAndApologize` async method doesn't contain a `return` statement, so the method returns a <xref:System.Threading.Tasks.Task> object. This enables `WaitAndApologize` to be awaited. Note that the <xref:System.Threading.Tasks.Task> type doesn't include a `Result` property because it has no return value.  \n\n[!code-csharp[return-value](../../../../../samples/snippets/csharp/programming-guide/async/async-returns2.cs)]  \n  \n`WaitAndApologize` is awaited by using an await statement instead of an await expression, similar to the calling statement for a synchronous void-returning method. The application of an await operator in this case doesn't produce a value.  \n  \nAs in the previous <xref:System.Threading.Tasks.Task%601> example, you can separate the call to `WaitAndApologize` from the application of an await operator, as the following code shows. However, remember that a `Task` doesn't have a `Result` property, and that no value is produced when an await operator is applied to a `Task`.  \n  \nThe following code separates calling the `WaitAndApologize` method from awaiting the task that the method returns.  \n \n[!code-csharp[return-value](../../../../../samples/snippets/csharp/programming-guide/async/async-returns2a.cs#1)]  \n \n## <a name=\"BKMK_VoidReturnType\"></a> Void return type\n\nYou use the `void` return type in asynchronous event handlers, which require a `void` return type. For methods other than event handlers that don't return a value, you should return a <xref:System.Threading.Tasks.Task> instead, because an async method that returns `void` can't be awaited. Any caller of such a method must be able to continue to completion without waiting for the called async method to finish, and the caller must be independent of any values or exceptions that the async method generates.  \n  \nThe caller of a void-returning async method can't catch exceptions that are thrown from the method, and such unhandled exceptions are likely to cause your application to fail. If an exception occurs in an async method that returns a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>, the exception is stored in the returned task and is rethrown when the task is awaited. Therefore, make sure that any async method that can produce an exception has a return type of <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> and that calls to the method are awaited.  \n  \nFor more information about how to catch exceptions in async methods, see the [Exceptions in Async Methods](../../../language-reference/keywords/try-catch.md#exceptions-in-async-methods) section of the [try-catch](../../../language-reference/keywords/try-catch.md) topic.  \n  \nThe following example shows the behavior of an async event handler. Note that in the example code, an async event handler must let the main thread know when it finishes. Then the main thread can wait for an async event handler to complete before exiting the program.\n \n[!code-csharp[return-value](../../../../../samples/snippets/csharp/programming-guide/async/async-returns3.cs)]  \n \n## Generalized async return types and ValueTask\\<TResult\\>\n\nStarting with C# 7.0, an async method can return any type that has an accessible `GetAwaiter` method.\n \nBecause <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> are reference types, memory allocation in performance-critical paths, particularly when allocations occur in tight loops, can adversely affect performance. Support for generalized return types means that you can return a lightweight value type instead of a reference type to avoid additional memory allocations. \n\n.NET provides the <xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType> structure as a light-weight implementation of a generalized task-returning value. To use the <xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType> type, you must add the `System.Threading.Tasks.Extensions` NuGet package to your project. The following example uses the <xref:System.Threading.Tasks.ValueTask%601> structure to retrieve the value of two dice rolls. \n  \n[!code-csharp[return-value](../../../../../samples/snippets/csharp/programming-guide/async/async-valuetask.cs)]\n\n## See also\n\n- <xref:System.Threading.Tasks.Task.FromResult%2A>\n- [Walkthrough: Accessing the Web by Using async and await (C#)](../../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)\n- [Control Flow in Async Programs (C#)](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)\n- [async](../../../../csharp/language-reference/keywords/async.md)\n- [await](../../../../csharp/language-reference/keywords/await.md)\n","nodes":[{"pos":[4,105],"embed":true,"restype":"x-metadata","content":"title: \"Async Return Types (C#)\"\nms.date: 05/29/2017\nms.assetid: ddb2539c-c898-48c1-ad92-245e4a996df8","nodes":[{"content":"Async Return Types (C#)","nodes":[{"pos":[0,23],"content":"Async Return Types (C#)","nodes":[{"content":"Async Return Types (C#)","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[112,135],"content":"Async Return Types (C#)","linkify":"Async Return Types (C#)","nodes":[{"content":"Async Return Types (C#)","pos":[0,23]}]},{"content":"Async methods can have the following return types:","pos":[136,186]},{"pos":[190,271],"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, for an async method that returns a value.","source":"<xref:System.Threading.Tasks.Task%601>, for an async method that returns a value."},{"pos":[278,382],"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, for an async method that performs an operation but returns no value.","source":"<xref:System.Threading.Tasks.Task>, for an async method that performs an operation but returns no value."},{"pos":[386,415],"content":"<ph id=\"ph1\">`void`</ph>, for an event handler.","source":"`void`, for an event handler."},{"content":"Starting with C# 7.0, any type that has an accessible <ph id=\"ph1\">`GetAwaiter`</ph> method.","pos":[420,494],"source":"Starting with C# 7.0, any type that has an accessible `GetAwaiter` method."},{"content":"The object returned by the <ph id=\"ph1\">`GetAwaiter`</ph> method must implement the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.ICriticalNotifyCompletion?displayProperty=nameWithType&gt;</ph> interface.","pos":[495,665],"source":" The object returned by the `GetAwaiter` method must implement the <xref:System.Runtime.CompilerServices.ICriticalNotifyCompletion?displayProperty=nameWithType> interface."},{"pos":[669,830],"content":"For more information about async methods, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/index.md)</ept>.","source":"For more information about async methods, see [Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md)."},{"content":"Each return type is examined in one of the following sections, and you can find a full example that uses all three types at the end of the topic.","pos":[836,981]},{"pos":[990,1053],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_TaskTReturnType\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Task<ph id=\"ph1\">\\&lt;</ph>TResult<ph id=\"ph2\">\\&gt;</ph> Return Type","linkify":"<a name=\"BKMK_TaskTReturnType\"></a> Task\\<TResult\\> Return Type","source":"<a name=\"BKMK_TaskTReturnType\"></a> Task\\<TResult\\> Return Type"},{"pos":[1056,1277],"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> return type is used for an async method that contains a <bpt id=\"p1\">[</bpt>return<ept id=\"p1\">](../../../../csharp/language-reference/keywords/return.md)</ept> (C#) statement in which the operand has type <ph id=\"ph2\">`TResult`</ph>.","source":"The <xref:System.Threading.Tasks.Task%601> return type is used for an async method that contains a [return](../../../../csharp/language-reference/keywords/return.md) (C#) statement in which the operand has type `TResult`."},{"content":"In the following example, the <ph id=\"ph1\">`GetLeisureHours`</ph> async method contains a <ph id=\"ph2\">`return`</ph> statement that returns an integer.","pos":[1283,1398],"source":"In the following example, the `GetLeisureHours` async method contains a `return` statement that returns an integer."},{"content":"Therefore, the method declaration must specify a return type of <ph id=\"ph1\">`Task&lt;int&gt;`</ph>.","pos":[1399,1475],"source":" Therefore, the method declaration must specify a return type of `Task<int>`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> async method is a placeholder for an operation that returns a string.","pos":[1477,1599],"source":"  The <xref:System.Threading.Tasks.Task.FromResult%2A> async method is a placeholder for an operation that returns a string."},{"content":"When <ph id=\"ph1\">`GetLeisureHours`</ph> is called from within an await expression in the <ph id=\"ph2\">`ShowTodaysInfo`</ph> method, the await expression retrieves the integer value (the value of <ph id=\"ph3\">`leisureHours`</ph>) that's stored in the task returned by the <ph id=\"ph4\">`GetLeisureHours`</ph> method.","pos":[1715,1958],"source":"When `GetLeisureHours` is called from within an await expression in the `ShowTodaysInfo` method, the await expression retrieves the integer value (the value of `leisureHours`) that's stored in the task returned by the `GetLeisureHours` method."},{"content":"For more information about await expressions, see <bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](../../../../csharp/language-reference/keywords/await.md)</ept>.","pos":[1959,2074],"source":" For more information about await expressions, see [await](../../../../csharp/language-reference/keywords/await.md)."},{"content":"You can better understand how this happens by separating the call to <ph id=\"ph1\">`GetLeisureHours`</ph> from the application of <ph id=\"ph2\">`await`</ph>, as the following code shows.","pos":[2080,2228],"source":"You can better understand how this happens by separating the call to `GetLeisureHours` from the application of `await`, as the following code shows."},{"content":"A call to method <ph id=\"ph1\">`GetLeisureHours`</ph> that isn't immediately awaited returns a <ph id=\"ph2\">`Task&lt;int&gt;`</ph>, as you would expect from the declaration of the method.","pos":[2229,2373],"source":" A call to method `GetLeisureHours` that isn't immediately awaited returns a `Task<int>`, as you would expect from the declaration of the method."},{"content":"The task is assigned to the <ph id=\"ph1\">`integerTask`</ph> variable in the example.","pos":[2374,2440],"source":" The task is assigned to the `integerTask` variable in the example."},{"content":"Because <ph id=\"ph1\">`integerTask`</ph> is a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, it contains a <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601.Result&gt;</ph> property of type <ph id=\"ph4\">`TResult`</ph>.","pos":[2441,2595],"source":" Because `integerTask` is a <xref:System.Threading.Tasks.Task%601>, it contains a <xref:System.Threading.Tasks.Task%601.Result> property of type `TResult`."},{"content":"In this case, <ph id=\"ph1\">`TResult`</ph> represents an integer type.","pos":[2596,2647],"source":" In this case, `TResult` represents an integer type."},{"content":"When <ph id=\"ph1\">`await`</ph> is applied to <ph id=\"ph2\">`integerTask`</ph>, the await expression evaluates to the contents of the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property of <ph id=\"ph4\">`integerTask`</ph>.","pos":[2648,2819],"source":" When `await` is applied to `integerTask`, the await expression evaluates to the contents of the <xref:System.Threading.Tasks.Task%601.Result%2A> property of `integerTask`."},{"content":"The value is assigned to the <ph id=\"ph1\">`ret`</ph> variable.","pos":[2820,2864],"source":" The value is assigned to the `ret` variable."},{"pos":[2872,3455],"content":"[!IMPORTANT]\n The <xref:System.Threading.Tasks.Task%601.Result%2A> property is a blocking property. If you try to access it before its task is finished, the thread that's currently active is blocked until the task completes and the value is available. In most cases, you should access the value by using `await` instead of accessing the property directly. <br/> The previous example retrieved the value of the <xref:System.Threading.Tasks.Task%601.Result%2A> property to block the main thread so that the `ShowTodaysInfo` method could finish execution before the application ended.","leadings":["","> "],"nodes":[{"content":"The <xref:System.Threading.Tasks.Task%601.Result%2A> property is a blocking property. If you try to access it before its task is finished, the thread that's currently active is blocked until the task completes and the value is available. In most cases, you should access the value by using `await` instead of accessing the property directly. ","pos":[14,356],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property is a blocking property.","pos":[0,85],"source":"The <xref:System.Threading.Tasks.Task%601.Result%2A> property is a blocking property."},{"content":"If you try to access it before its task is finished, the thread that's currently active is blocked until the task completes and the value is available.","pos":[86,237]},{"content":"In most cases, you should access the value by using <ph id=\"ph1\">`await`</ph> instead of accessing the property directly.","pos":[238,341],"source":" In most cases, you should access the value by using `await` instead of accessing the property directly."}]},{"content":"The previous example retrieved the value of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property to block the main thread so that the <ph id=\"ph2\">`ShowTodaysInfo`</ph> method could finish execution before the application ended.","pos":[362,581],"source":"The previous example retrieved the value of the <xref:System.Threading.Tasks.Task%601.Result%2A> property to block the main thread so that the `ShowTodaysInfo` method could finish execution before the application ended."}]},{"pos":[3579,3630],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_TaskReturnType\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Task Return Type","linkify":"<a name=\"BKMK_TaskReturnType\"></a> Task Return Type","source":"<a name=\"BKMK_TaskReturnType\"></a> Task Return Type"},{"content":"Async methods that don't contain a <ph id=\"ph1\">`return`</ph> statement or that contain a <ph id=\"ph2\">`return`</ph> statement that doesn't return an operand usually have a return type of <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.","pos":[3633,3820],"source":"Async methods that don't contain a `return` statement or that contain a `return` statement that doesn't return an operand usually have a return type of <xref:System.Threading.Tasks.Task>."},{"content":"Such methods return <ph id=\"ph1\">`void`</ph> if they run synchronously.","pos":[3821,3874],"source":" Such methods return `void` if they run synchronously."},{"content":"If you use a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> return type for an async method, a calling method can use an <ph id=\"ph2\">`await`</ph> operator to suspend the caller's completion until the called async method has finished.","pos":[3875,4079],"source":" If you use a <xref:System.Threading.Tasks.Task> return type for an async method, a calling method can use an `await` operator to suspend the caller's completion until the called async method has finished."},{"content":"In the following example, the <ph id=\"ph1\">`WaitAndApologize`</ph> async method doesn't contain a <ph id=\"ph2\">`return`</ph> statement, so the method returns a <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object.","pos":[4085,4251],"source":"In the following example, the `WaitAndApologize` async method doesn't contain a `return` statement, so the method returns a <xref:System.Threading.Tasks.Task> object."},{"content":"This enables <ph id=\"ph1\">`WaitAndApologize`</ph> to be awaited.","pos":[4252,4298],"source":" This enables `WaitAndApologize` to be awaited."},{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> type doesn't include a <ph id=\"ph2\">`Result`</ph> property because it has no return value.","pos":[4299,4420],"source":" Note that the <xref:System.Threading.Tasks.Task> type doesn't include a `Result` property because it has no return value."},{"content":"<ph id=\"ph1\">`WaitAndApologize`</ph> is awaited by using an await statement instead of an await expression, similar to the calling statement for a synchronous void-returning method.","pos":[4540,4703],"source":"`WaitAndApologize` is awaited by using an await statement instead of an await expression, similar to the calling statement for a synchronous void-returning method."},{"content":"The application of an await operator in this case doesn't produce a value.","pos":[4704,4778]},{"content":"As in the previous <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> example, you can separate the call to <ph id=\"ph2\">`WaitAndApologize`</ph> from the application of an await operator, as the following code shows.","pos":[4784,4970],"source":"As in the previous <xref:System.Threading.Tasks.Task%601> example, you can separate the call to `WaitAndApologize` from the application of an await operator, as the following code shows."},{"content":"However, remember that a <ph id=\"ph1\">`Task`</ph> doesn't have a <ph id=\"ph2\">`Result`</ph> property, and that no value is produced when an await operator is applied to a <ph id=\"ph3\">`Task`</ph>.","pos":[4971,5113],"source":" However, remember that a `Task` doesn't have a `Result` property, and that no value is produced when an await operator is applied to a `Task`."},{"pos":[5119,5233],"content":"The following code separates calling the <ph id=\"ph1\">`WaitAndApologize`</ph> method from awaiting the task that the method returns.","source":"The following code separates calling the `WaitAndApologize` method from awaiting the task that the method returns."},{"pos":[5359,5410],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_VoidReturnType\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Void return type","linkify":"<a name=\"BKMK_VoidReturnType\"></a> Void return type","source":"<a name=\"BKMK_VoidReturnType\"></a> Void return type"},{"content":"You use the <ph id=\"ph1\">`void`</ph> return type in asynchronous event handlers, which require a <ph id=\"ph2\">`void`</ph> return type.","pos":[5412,5510],"source":"You use the `void` return type in asynchronous event handlers, which require a `void` return type."},{"content":"For methods other than event handlers that don't return a value, you should return a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instead, because an async method that returns <ph id=\"ph2\">`void`</ph> can't be awaited.","pos":[5511,5701],"source":" For methods other than event handlers that don't return a value, you should return a <xref:System.Threading.Tasks.Task> instead, because an async method that returns `void` can't be awaited."},{"content":"Any caller of such a method must be able to continue to completion without waiting for the called async method to finish, and the caller must be independent of any values or exceptions that the async method generates.","pos":[5702,5919]},{"content":"The caller of a void-returning async method can't catch exceptions that are thrown from the method, and such unhandled exceptions are likely to cause your application to fail.","pos":[5925,6100]},{"content":"If an exception occurs in an async method that returns a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, the exception is stored in the returned task and is rethrown when the task is awaited.","pos":[6101,6322],"source":" If an exception occurs in an async method that returns a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>, the exception is stored in the returned task and is rethrown when the task is awaited."},{"content":"Therefore, make sure that any async method that can produce an exception has a return type of <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> and that calls to the method are awaited.","pos":[6323,6535],"source":" Therefore, make sure that any async method that can produce an exception has a return type of <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> and that calls to the method are awaited."},{"pos":[6541,6811],"content":"For more information about how to catch exceptions in async methods, see the <bpt id=\"p1\">[</bpt>Exceptions in Async Methods<ept id=\"p1\">](../../../language-reference/keywords/try-catch.md#exceptions-in-async-methods)</ept> section of the <bpt id=\"p2\">[</bpt>try-catch<ept id=\"p2\">](../../../language-reference/keywords/try-catch.md)</ept> topic.","source":"For more information about how to catch exceptions in async methods, see the [Exceptions in Async Methods](../../../language-reference/keywords/try-catch.md#exceptions-in-async-methods) section of the [try-catch](../../../language-reference/keywords/try-catch.md) topic."},{"content":"The following example shows the behavior of an async event handler.","pos":[6817,6884]},{"content":"Note that in the example code, an async event handler must let the main thread know when it finishes.","pos":[6885,6986]},{"content":"Then the main thread can wait for an async event handler to complete before exiting the program.","pos":[6987,7083]},{"pos":[7204,7259],"content":"Generalized async return types and ValueTask\\<TResult\\>","linkify":"Generalized async return types and ValueTask\\<TResult\\>","nodes":[{"content":"Generalized async return types and ValueTask<ph id=\"ph1\">\\&lt;</ph>TResult<ph id=\"ph2\">\\&gt;</ph>","pos":[0,55],"source":"Generalized async return types and ValueTask\\<TResult\\>"}]},{"pos":[7261,7362],"content":"Starting with C# 7.0, an async method can return any type that has an accessible <ph id=\"ph1\">`GetAwaiter`</ph> method.","source":"Starting with C# 7.0, an async method can return any type that has an accessible `GetAwaiter` method."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> are reference types, memory allocation in performance-critical paths, particularly when allocations occur in tight loops, can adversely affect performance.","pos":[7365,7606],"source":"Because <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> are reference types, memory allocation in performance-critical paths, particularly when allocations occur in tight loops, can adversely affect performance."},{"content":"Support for generalized return types means that you can return a lightweight value type instead of a reference type to avoid additional memory allocations.","pos":[7607,7762]},{"content":".NET provides the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType&gt;</ph> structure as a light-weight implementation of a generalized task-returning value.","pos":[7765,7937],"source":".NET provides the <xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType> structure as a light-weight implementation of a generalized task-returning value."},{"content":"To use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType&gt;</ph> type, you must add the <ph id=\"ph2\">`System.Threading.Tasks.Extensions`</ph> NuGet package to your project.","pos":[7938,8111],"source":" To use the <xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType> type, you must add the `System.Threading.Tasks.Extensions` NuGet package to your project."},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> structure to retrieve the value of two dice rolls.","pos":[8112,8237],"source":" The following example uses the <xref:System.Threading.Tasks.ValueTask%601> structure to retrieve the value of two dice rolls."},{"pos":[8358,8366],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8421,8594],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Accessing the Web by Using async and await (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>","source":"[Walkthrough: Accessing the Web by Using async and await (C#)](../../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)"},{"pos":[8597,8721],"content":"<bpt id=\"p1\">[</bpt>Control Flow in Async Programs (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>","source":"[Control Flow in Async Programs (C#)](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)"},{"pos":[8724,8788],"content":"<bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](../../../../csharp/language-reference/keywords/async.md)</ept>","source":"[async](../../../../csharp/language-reference/keywords/async.md)"},{"pos":[8791,8855],"content":"<bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](../../../../csharp/language-reference/keywords/await.md)</ept>","source":"[await](../../../../csharp/language-reference/keywords/await.md)"}]}