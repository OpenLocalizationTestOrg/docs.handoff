{"content":"---\ntitle: \"Casting and type conversions - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"type conversion [C#]\"\n  - \"data type conversion [C#]\"\n  - \"numeric conversions [C#]\"\n  - \"conversions [C#], type\"\n  - \"casting [C#]\"\n  - \"converting types [C#]\"\nms.assetid: 568df58a-d292-4b55-93ba-601578722878\n---\n# Casting and type conversions (C# Programming Guide)\n\nBecause C# is statically-typed at compile time, after a variable is declared, it cannot be declared again or assigned a value of another type unless that type is implicitly convertible to the variable's type. For example, the `string` cannot be implicitly converted to `int`. Therefore, after you declare `i` as an `int`, you cannot assign the string \"Hello\" to it, as the following code shows:\n  \n```csharp  \nint i;  \ni = \"Hello\"; // error CS0029: Cannot implicitly convert type 'string' to 'int'\n```  \n  \n However, you might sometimes need to copy a value into a variable or method parameter of another type. For example, you might have an integer variable that you need to pass to a method whose parameter is typed as `double`. Or you might need to assign a class variable to a variable of an interface type. These kinds of operations are called *type conversions*. In C#, you can perform the following kinds of conversions:  \n  \n-   **Implicit conversions**: No special syntax is required because the conversion is type safe and no data will be lost. Examples include conversions from smaller to larger integral types, and conversions from derived classes to base classes.  \n  \n-   **Explicit conversions (casts)**: Explicit conversions require a cast operator. Casting is required when information might be lost in the conversion, or when the conversion might not succeed for other reasons.  Typical examples include numeric conversion to a type that has less precision or a smaller range, and conversion of a base-class instance to a derived class.  \n  \n-   **User-defined conversions**: User-defined conversions are performed by special methods that you can define to enable explicit and implicit conversions between custom types that do not have a base classâ€“derived class relationship. For more information, see [Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md).  \n  \n-   **Conversions with helper classes**: To convert between non-compatible types, such as integers and <xref:System.DateTime?displayProperty=nameWithType> objects, or hexadecimal strings and byte arrays, you can use the <xref:System.BitConverter?displayProperty=nameWithType> class, the <xref:System.Convert?displayProperty=nameWithType> class, and the `Parse` methods of the built-in numeric types, such as <xref:System.Int32.Parse%2A?displayProperty=nameWithType>. For more information, see [How to: Convert a byte Array to an int](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md), [How to: Convert a String to a Number](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md), and [How to: Convert Between Hexadecimal Strings and Numeric Types](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md).  \n  \n## Implicit conversions\n\n For built-in numeric types, an implicit conversion can be made when the value to be stored can fit into the variable without being truncated or rounded off. For example, a variable of type [long](../../../csharp/language-reference/keywords/long.md) (64-bit integer) can store any value that an [int](../../../csharp/language-reference/keywords/int.md) (32-bit integer) can store. In the following example, the compiler implicitly converts the value of `num` on the right to a type `long` before assigning it to `bigNum`.  \n  \n [!code-csharp[csProgGuideTypes#34](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#34)]  \n  \n For a complete list of all implicit numeric conversions, see [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).  \n  \n For reference types, an implicit conversion always exists from a class to any one of its direct or indirect base classes or interfaces. No special syntax is necessary because a derived class always contains all the members of a base class.  \n  \n```  \nDerived d = new Derived();  \nBase b = d; // Always OK.  \n```  \n  \n## Explicit conversions\n\n However, if a conversion cannot be made without a risk of losing information, the compiler requires that you perform an explicit conversion, which is called a *cast*. A cast is a way of explicitly informing the compiler that you intend to make the conversion and that you are aware that data loss might occur. To perform a cast, specify the type that you are casting to in parentheses in front of the value or variable to be converted. The following program casts a [double](../../../csharp/language-reference/keywords/double.md) to an [int](../../../csharp/language-reference/keywords/int.md). The program will not compile without the cast.  \n  \n [!code-csharp[csProgGuideTypes#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#2)]  \n  \n For a list of the explicit numeric conversions that are allowed, see [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md).  \n  \n For reference types, an explicit cast is required if you need to convert from a base type to a derived type:  \n  \n```csharp  \n// Create a new derived type.  \nGiraffe g = new Giraffe();  \n  \n// Implicit conversion to base type is safe.  \nAnimal a = g;  \n  \n// Explicit conversion is required to cast back  \n// to derived type. Note: This will compile but will  \n// throw an exception at run time if the right-side  \n// object is not in fact a Giraffe.  \nGiraffe g2 = (Giraffe) a;  \n```  \n  \n A cast operation between reference types does not change the run-time type of the underlying object; it only changes the type of the value that is being used as a reference to that object. For more information, see [Polymorphism](../../../csharp/programming-guide/classes-and-structs/polymorphism.md).  \n  \n## Type conversion exceptions at run time\n\n In some reference type conversions, the compiler cannot determine whether a cast will be valid. It is possible for a cast operation that compiles correctly to fail at run time. As shown in the following example, a type cast that fails at run time will cause an <xref:System.InvalidCastException> to be thrown.  \n  \n [!code-csharp[csProgGuideTypes#41](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#41)]  \n  \n C# provides the [is](../../../csharp/language-reference/keywords/is.md) and [as](../../../csharp/language-reference/keywords/as.md) operators to enable you to test for compatibility before actually performing a cast. For more information, see [How to: Safely cast using pattern matching, as and is Operators](../../how-to/safely-cast-using-pattern-matching-is-and-as-operators.md).  \n  \n## C# language specification\n\n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n\n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Types](../../../csharp/programming-guide/types/index.md)\n- [() Operator](../../../csharp/language-reference/operators/invocation-operator.md)\n- [explicit](../../../csharp/language-reference/keywords/explicit.md)\n- [implicit](../../../csharp/language-reference/keywords/implicit.md)\n- [Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)\n- [Generalized Type Conversion](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/yy580hbd(v=vs.120))\n- [How to: Convert a String to a Number](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)\n","nodes":[{"pos":[4,341],"embed":true,"restype":"x-metadata","content":"title: \"Casting and type conversions - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"type conversion [C#]\"\n  - \"data type conversion [C#]\"\n  - \"numeric conversions [C#]\"\n  - \"conversions [C#], type\"\n  - \"casting [C#]\"\n  - \"converting types [C#]\"\nms.assetid: 568df58a-d292-4b55-93ba-601578722878","nodes":[{"content":"Casting and type conversions - C# Programming Guide","nodes":[{"pos":[0,51],"content":"Casting and type conversions - C# Programming Guide","nodes":[{"content":"Casting and type conversions - C# Programming Guide","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[348,399],"content":"Casting and type conversions (C# Programming Guide)","linkify":"Casting and type conversions (C# Programming Guide)","nodes":[{"content":"Casting and type conversions (C# Programming Guide)","pos":[0,51]}]},{"content":"Because C# is statically-typed at compile time, after a variable is declared, it cannot be declared again or assigned a value of another type unless that type is implicitly convertible to the variable's type.","pos":[401,609]},{"content":"For example, the <ph id=\"ph1\">`string`</ph> cannot be implicitly converted to <ph id=\"ph2\">`int`</ph>.","pos":[610,676],"source":" For example, the `string` cannot be implicitly converted to `int`."},{"content":"Therefore, after you declare <ph id=\"ph1\">`i`</ph> as an <ph id=\"ph2\">`int`</ph>, you cannot assign the string \"Hello\" to it, as the following code shows:","pos":[677,795],"source":" Therefore, after you declare `i` as an `int`, you cannot assign the string \"Hello\" to it, as the following code shows:"},{"content":"However, you might sometimes need to copy a value into a variable or method parameter of another type.","pos":[909,1011]},{"content":"For example, you might have an integer variable that you need to pass to a method whose parameter is typed as <ph id=\"ph1\">`double`</ph>.","pos":[1012,1131],"source":" For example, you might have an integer variable that you need to pass to a method whose parameter is typed as `double`."},{"content":"Or you might need to assign a class variable to a variable of an interface type.","pos":[1132,1212]},{"content":"These kinds of operations are called <bpt id=\"p1\">*</bpt>type conversions<ept id=\"p1\">*</ept>.","pos":[1213,1269],"source":" These kinds of operations are called *type conversions*."},{"content":"In C#, you can perform the following kinds of conversions:","pos":[1270,1328]},{"content":"<bpt id=\"p1\">**</bpt>Implicit conversions<ept id=\"p1\">**</ept>: No special syntax is required because the conversion is type safe and no data will be lost.","pos":[1338,1455],"source":"**Implicit conversions**: No special syntax is required because the conversion is type safe and no data will be lost."},{"content":"Examples include conversions from smaller to larger integral types, and conversions from derived classes to base classes.","pos":[1456,1577]},{"content":"<bpt id=\"p1\">**</bpt>Explicit conversions (casts)<ept id=\"p1\">**</ept>: Explicit conversions require a cast operator.","pos":[1587,1666],"source":"**Explicit conversions (casts)**: Explicit conversions require a cast operator."},{"content":"Casting is required when information might be lost in the conversion, or when the conversion might not succeed for other reasons.","pos":[1667,1796]},{"content":"Typical examples include numeric conversion to a type that has less precision or a smaller range, and conversion of a base-class instance to a derived class.","pos":[1798,1955]},{"content":"<bpt id=\"p1\">**</bpt>User-defined conversions<ept id=\"p1\">**</ept>: User-defined conversions are performed by special methods that you can define to enable explicit and implicit conversions between custom types that do not have a base classâ€“derived class relationship.","pos":[1965,2195],"source":"**User-defined conversions**: User-defined conversions are performed by special methods that you can define to enable explicit and implicit conversions between custom types that do not have a base classâ€“derived class relationship."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Conversion Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)</ept>.","pos":[2196,2337],"source":" For more information, see [Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)."},{"content":"<bpt id=\"p1\">**</bpt>Conversions with helper classes<ept id=\"p1\">**</ept>: To convert between non-compatible types, such as integers and <ph id=\"ph1\">&lt;xref:System.DateTime?displayProperty=nameWithType&gt;</ph> objects, or hexadecimal strings and byte arrays, you can use the <ph id=\"ph2\">&lt;xref:System.BitConverter?displayProperty=nameWithType&gt;</ph> class, the <ph id=\"ph3\">&lt;xref:System.Convert?displayProperty=nameWithType&gt;</ph> class, and the <ph id=\"ph4\">`Parse`</ph> methods of the built-in numeric types, such as <ph id=\"ph5\">&lt;xref:System.Int32.Parse%2A?displayProperty=nameWithType&gt;</ph>.","pos":[2347,2809],"source":"**Conversions with helper classes**: To convert between non-compatible types, such as integers and <xref:System.DateTime?displayProperty=nameWithType> objects, or hexadecimal strings and byte arrays, you can use the <xref:System.BitConverter?displayProperty=nameWithType> class, the <xref:System.Convert?displayProperty=nameWithType> class, and the `Parse` methods of the built-in numeric types, such as <xref:System.Int32.Parse%2A?displayProperty=nameWithType>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Convert a byte Array to an int<ept id=\"p1\">](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md)</ept>, <bpt id=\"p2\">[</bpt>How to: Convert a String to a Number<ept id=\"p2\">](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)</ept>, and <bpt id=\"p3\">[</bpt>How to: Convert Between Hexadecimal Strings and Numeric Types<ept id=\"p3\">](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)</ept>.","pos":[2810,3253],"source":" For more information, see [How to: Convert a byte Array to an int](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md), [How to: Convert a String to a Number](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md), and [How to: Convert Between Hexadecimal Strings and Numeric Types](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)."},{"pos":[3262,3282],"content":"Implicit conversions","linkify":"Implicit conversions","nodes":[{"content":"Implicit conversions","pos":[0,20]}]},{"content":"For built-in numeric types, an implicit conversion can be made when the value to be stored can fit into the variable without being truncated or rounded off.","pos":[3285,3441]},{"content":"For example, a variable of type <bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept> (64-bit integer) can store any value that an <bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../../../csharp/language-reference/keywords/int.md)</ept> (32-bit integer) can store.","pos":[3442,3664],"source":" For example, a variable of type [long](../../../csharp/language-reference/keywords/long.md) (64-bit integer) can store any value that an [int](../../../csharp/language-reference/keywords/int.md) (32-bit integer) can store."},{"content":"In the following example, the compiler implicitly converts the value of <ph id=\"ph1\">`num`</ph> on the right to a type <ph id=\"ph2\">`long`</ph> before assigning it to <ph id=\"ph3\">`bigNum`</ph>.","pos":[3665,3805],"source":" In the following example, the compiler implicitly converts the value of `num` on the right to a type `long` before assigning it to `bigNum`."},{"pos":[3935,4116],"content":"For a complete list of all implicit numeric conversions, see <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For a complete list of all implicit numeric conversions, see [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"content":"For reference types, an implicit conversion always exists from a class to any one of its direct or indirect base classes or interfaces.","pos":[4123,4258]},{"content":"No special syntax is necessary because a derived class always contains all the members of a base class.","pos":[4259,4362]},{"pos":[4443,4463],"content":"Explicit conversions","linkify":"Explicit conversions","nodes":[{"content":"Explicit conversions","pos":[0,20]}]},{"content":"However, if a conversion cannot be made without a risk of losing information, the compiler requires that you perform an explicit conversion, which is called a <bpt id=\"p1\">*</bpt>cast<ept id=\"p1\">*</ept>.","pos":[4466,4632],"source":"However, if a conversion cannot be made without a risk of losing information, the compiler requires that you perform an explicit conversion, which is called a *cast*."},{"content":"A cast is a way of explicitly informing the compiler that you intend to make the conversion and that you are aware that data loss might occur.","pos":[4633,4775]},{"content":"To perform a cast, specify the type that you are casting to in parentheses in front of the value or variable to be converted.","pos":[4776,4901]},{"content":"The following program casts a <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](../../../csharp/language-reference/keywords/double.md)</ept> to an <bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../../../csharp/language-reference/keywords/int.md)</ept>. The program will not compile without the cast.","pos":[4902,5107],"source":" The following program casts a [double](../../../csharp/language-reference/keywords/double.md) to an [int](../../../csharp/language-reference/keywords/int.md). The program will not compile without the cast."},{"pos":[5235,5424],"content":"For a list of the explicit numeric conversions that are allowed, see <bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>.","source":"For a list of the explicit numeric conversions that are allowed, see [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)."},{"content":"For reference types, an explicit cast is required if you need to convert from a base type to a derived type:","pos":[5431,5539]},{"content":"A cast operation between reference types does not change the run-time type of the underlying object; it only changes the type of the value that is being used as a reference to that object.","pos":[5922,6110]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Polymorphism<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/polymorphism.md)</ept>.","pos":[6111,6223],"source":" For more information, see [Polymorphism](../../../csharp/programming-guide/classes-and-structs/polymorphism.md)."},{"pos":[6232,6270],"content":"Type conversion exceptions at run time","linkify":"Type conversion exceptions at run time","nodes":[{"content":"Type conversion exceptions at run time","pos":[0,38]}]},{"content":"In some reference type conversions, the compiler cannot determine whether a cast will be valid.","pos":[6273,6368]},{"content":"It is possible for a cast operation that compiles correctly to fail at run time.","pos":[6369,6449]},{"content":"As shown in the following example, a type cast that fails at run time will cause an <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph> to be thrown.","pos":[6450,6582],"source":" As shown in the following example, a type cast that fails at run time will cause an <xref:System.InvalidCastException> to be thrown."},{"content":"C# provides the <bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../../../csharp/language-reference/keywords/is.md)</ept> and <bpt id=\"p2\">[</bpt>as<ept id=\"p2\">](../../../csharp/language-reference/keywords/as.md)</ept> operators to enable you to test for compatibility before actually performing a cast.","pos":[6712,6928],"source":"C# provides the [is](../../../csharp/language-reference/keywords/is.md) and [as](../../../csharp/language-reference/keywords/as.md) operators to enable you to test for compatibility before actually performing a cast."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Safely cast using pattern matching, as and is Operators<ept id=\"p1\">](../../how-to/safely-cast-using-pattern-matching-is-and-as-operators.md)</ept>.","pos":[6929,7093],"source":" For more information, see [How to: Safely cast using pattern matching, as and is Operators](../../how-to/safely-cast-using-pattern-matching-is-and-as-operators.md)."},{"pos":[7102,7127],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[7196,7204],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7208,7274],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[7277,7334],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/programming-guide/types/index.md)</ept>","source":"[Types](../../../csharp/programming-guide/types/index.md)"},{"pos":[7337,7419],"content":"<bpt id=\"p1\">[</bpt>() Operator<ept id=\"p1\">](../../../csharp/language-reference/operators/invocation-operator.md)</ept>","source":"[() Operator](../../../csharp/language-reference/operators/invocation-operator.md)"},{"pos":[7422,7489],"content":"<bpt id=\"p1\">[</bpt>explicit<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit.md)</ept>","source":"[explicit](../../../csharp/language-reference/keywords/explicit.md)"},{"pos":[7492,7559],"content":"<bpt id=\"p1\">[</bpt>implicit<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit.md)</ept>","source":"[implicit](../../../csharp/language-reference/keywords/implicit.md)"},{"pos":[7562,7676],"content":"<bpt id=\"p1\">[</bpt>Conversion Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)</ept>","source":"[Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)"},{"pos":[7679,7805],"content":"<bpt id=\"p1\">[</bpt>Generalized Type Conversion<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/yy580hbd(v=vs.120))</ept>","source":"[Generalized Type Conversion](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/yy580hbd(v=vs.120))"},{"pos":[7808,7926],"content":"<bpt id=\"p1\">[</bpt>How to: Convert a String to a Number<ept id=\"p1\">](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)</ept>","source":"[How to: Convert a String to a Number](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)"}]}