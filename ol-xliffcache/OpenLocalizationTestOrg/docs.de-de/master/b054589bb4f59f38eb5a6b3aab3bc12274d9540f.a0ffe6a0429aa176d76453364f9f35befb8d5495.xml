{"content":"---\ntitle: \"Default Marshaling for Strings | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"strings, interop marshaling\"\n  - \"interop marshaling, strings\"\nms.assetid: 9baea3ce-27b3-4b4f-af98-9ad0f9467e6f\ncaps.latest.revision: 18\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Default Marshaling for Strings\nBoth the <xref:System.String?displayProperty=fullName> and <xref:System.Text.StringBuilder?displayProperty=fullName> classes have similar marshaling behavior.  \n  \n Strings are marshaled as a COM-style `BSTR` type or as a null-terminated string (a character array that ends with a null character). The characters within the string can be marshaled as Unicode (the default on Windows systems) or ANSI.  \n  \n This topic provides the following information on marshaling string types:  \n  \n-   [Strings Used in Interfaces](#cpcondefaultmarshalingforstringsanchor1)  \n  \n-   [Strings Used in Platform Invoke](#cpcondefaultmarshalingforstringsanchor5)  \n  \n-   [Strings Used in Structures](#cpcondefaultmarshalingforstringsanchor2)  \n  \n-   [Fixed-Length String Buffers](#cpcondefaultmarshalingforstringsanchor3)  \n  \n<a name=\"cpcondefaultmarshalingforstringsanchor1\"></a>   \n## Strings Used in Interfaces  \n The following table shows the marshaling options for the string data type when marshaled as a method argument to unmanaged code. The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute provides several <xref:System.Runtime.InteropServices.UnmanagedType> enumeration values to marshal strings to COM interfaces.  \n  \n|Enumeration type|Description of unmanaged format|  \n|----------------------|-------------------------------------|  \n|`UnmanagedType.BStr` (default)|A COM-style `BSTR` with a prefixed length and Unicode characters.|  \n|`UnmanagedType.LPStr`|A pointer to a null-terminated array of ANSI characters.|  \n|`UnmanagedType.LPWStr`|A pointer to a null-terminated array of Unicode characters.|  \n  \n This table applies to strings. However, for <xref:System.Text.StringBuilder>, the only options allowed are `UnmanagedType.LPStr` and `UnmanagedType.LPWStr`.  \n  \n The following example shows strings declared in the `IStringWorker` interface.  \n  \n```cpp  \npublic interface IStringWorker {  \nvoid PassString1(String s);  \nvoid PassString2([MarshalAs(UnmanagedType.BStr)]String s);  \nvoid PassString3([MarshalAs(UnmanagedType.LPStr)]String s);  \nvoid PassString4([MarshalAs(UnmanagedType.LPWStr)]String s);  \nvoid PassStringRef1(ref String s);  \nvoid PassStringRef2([MarshalAs(UnmanagedType.BStr)]ref String s);  \nvoid PassStringRef3([MarshalAs(UnmanagedType.LPStr)]ref String s);  \nvoid PassStringRef4([MarshalAs(UnmanagedType.LPWStr)]ref String s);  \n);  \n```  \n  \n The following example shows the corresponding interface described in a type library.  \n  \n```  \n[â€¦]  \ninterface IStringWorker : IDispatch {  \nHRESULT PassString1([in] BSTR s);  \nHRESULT PassString2([in] BSTR s);  \nHRESULT PassString3([in] LPStr s);  \nHRESULT PassString4([in] LPWStr s);  \nHRESULT PassStringRef1([in, out] BSTR *s);  \nHRESULT PassStringRef2([in, out] BSTR *s);  \nHRESULT PassStringRef3([in, out] LPStr *s);  \nHRESULT PassStringRef4([in, out] LPWStr *s);  \n);  \n```  \n  \n<a name=\"cpcondefaultmarshalingforstringsanchor5\"></a>   \n## Strings Used in Platform Invoke  \n Platform invoke copies string arguments, converting from the .NET Framework format (Unicode) to the platform unmanaged format. Strings are immutable and are not copied back from unmanaged memory to managed memory when the call returns.  \n  \n The following table lists the marshaling options for strings when marshaled as a method argument of a platform invoke call. The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute provides several <xref:System.Runtime.InteropServices.UnmanagedType> enumeration values to marshal strings.  \n  \n|Enumeration type|Description of unmanaged format|  \n|----------------------|-------------------------------------|  \n|`UnmanagedType.AnsiBStr`|A COM-style `BSTR` with a prefixed length and ANSI characters.|  \n|`UnmanagedType.BStr`|A COM-style `BSTR` with a prefixed length and Unicode characters.|  \n|`UnmanagedType.LPStr`|A pointer to a null-terminated array of ANSI characters.|  \n|`UnmanagedType.LPTStr`|A pointer to a null-terminated array of platform-dependent characters.|  \n|`UnmanagedType.LPWStr`|A pointer to a null-terminated array of Unicode characters.|  \n|`UnmanagedType.TBStr`|A COM-style `BSTR` with a prefixed length and platform-dependent characters.|  \n|`VBByRefStr`|A value that enables Visual Basic .NET to change a string in unmanaged code, and have the results reflected in managed code. This value is supported only for platform invoke. This is default value in Visual Basic for `ByVal` strings.|  \n  \n This table applies to strings. However, for <xref:System.Text.StringBuilder>, the only options allowed are `LPStr`, `LPTStr`, and `LPWStr`.  \n  \n The following type definition shows the correct use of `MarshalAsAttribute` for platform invoke calls.  \n  \n```vb  \nClass StringLibAPI      \nPublic Declare Auto Sub PassLPStr Lib \"StringLib.Dll\" _  \n(<MarshalAs(UnmanagedType.LPStr)> s As String)      \nPublic Declare Auto Sub PassLPWStr Lib \"StringLib.Dll\" _  \n(<MarshalAs(UnmanagedType.LPWStr)> s As String)      \nPublic Declare Auto Sub PassLPTStr Lib \"StringLib.Dll\" _  \n(<MarshalAs(UnmanagedType.LPTStr)> s As String)      \nPublic Declare Auto Sub PassBStr Lib \"StringLib.Dll\" _  \n(<MarshalAs(UnmanagedType.BStr)> s As String)      \nPublic Declare Auto Sub PassAnsiBStr Lib \"StringLib.Dll\" _  \n(<MarshalAs(UnmanagedType.AnsiBStr)> s As String)      \nPublic Declare Auto Sub PassTBStr Lib \"StringLib.Dll\" _  \n(<MarshalAs(UnmanagedType.TBStr)> s As String)  \nEnd Class  \n  \n```  \n  \n```csharp  \nclass StringLibAPI {  \n[DllImport(\"StringLib.Dll\")]  \npublic static extern void PassLPStr([MarshalAs(UnmanagedType.LPStr)]  \nString s);  \n[DllImport(\"StringLib.Dll\")]  \npublic static extern void   \nPassLPWStr([MarshalAs(UnmanagedType.LPWStr)]String s);  \n[DllImport(\"StringLib.Dll\")]  \npublic static extern void   \nPassLPTStr([MarshalAs(UnmanagedType.LPTStr)]String s);  \n[DllImport(\"StringLib.Dll\")]  \npublic static extern void PassBStr([MarshalAs(UnmanagedType.BStr)]  \nString s);  \n[DllImport(\"StringLib.Dll\")]  \npublic static extern void   \nPassAnsiBStr([MarshalAs(UnmanagedType.AnsiBStr)]String s);  \n[DllImport(\"StringLib.Dll\")]  \npublic static extern void PassTBStr([MarshalAs(UnmanagedType.TBStr)]  \nString s);  \n}  \n```  \n  \n<a name=\"cpcondefaultmarshalingforstringsanchor2\"></a>   \n## Strings Used in Structures  \n Strings are valid members of structures; however, <xref:System.Text.StringBuilder> buffers are invalid in structures. The following table shows the marshaling options for the string data type when the type is marshaled as a field. The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute provides several <xref:System.Runtime.InteropServices.UnmanagedType> enumeration values to marshal strings to a field.  \n  \n|Enumeration type|Description of unmanaged format|  \n|----------------------|-------------------------------------|  \n|`UnmanagedType.BStr`|A COM-style `BSTR` with a prefixed length and Unicode characters.|  \n|`UnmanagedType.LPStr`|A pointer to a null-terminated array of ANSI characters.|  \n|`UnmanagedType.LPTStr`|A pointer to a null-terminated array of platform-dependent characters.|  \n|`UnmanagedType.LPWStr`|A pointer to a null-terminated array of Unicode characters.|  \n|`UnmanagedType.ByValTStr`|A fixed-length array of characters; the array's type is determined by the character set of the containing structure.|  \n  \n The `ByValTStr` type is used for inline, fixed-length character arrays that appear within a structure. Other types apply to string references contained within structures that contain pointers to strings.  \n  \n The `CharSet` argument of the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute that is applied to the containing structure determines the character format of strings in structures. The following example structures contain string references and inline strings, as well as ANSI, Unicode, and platform-dependent characters.  \n  \n### Type Library Representation  \n  \n```  \nstruct StringInfoA {  \n   char *    f1;  \n   char      f2[256];  \n};  \nstruct StringInfoW {  \n   WCHAR *   f1;  \n   WCHAR     f2[256];  \n   BSTR      f3;  \n};  \nstruct StringInfoT {  \n   TCHAR *   f1;  \n   TCHAR     f2[256];  \n};  \n```  \n  \n The following code example shows how to use the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute to define the same structure in different formats.  \n  \n```vb  \n<StructLayout(LayoutKind.Sequential, CharSet := CharSet.Ansi)> _  \nStructure StringInfoA  \n<MarshalAs(UnmanagedType.LPStr)> Public f1 As String  \n<MarshalAs(UnmanagedType.ByValTStr, SizeConst := 256)> _  \nPublic f2 As String  \nEnd Structure  \n<StructLayout(LayoutKind.Sequential, CharSet := CharSet.Unicode)> _  \nStructure StringInfoW  \n<MarshalAs(UnmanagedType.LPWStr)> Public f1 As String  \n<MarshalAs(UnmanagedType.ByValTStr, SizeConst := 256)> _  \nPublic f2 As String  \n<MarshalAs(UnmanagedType.BStr)> Public f3 As String  \nEnd Structure  \n<StructLayout(LayoutKind.Sequential, CharSet := CharSet.Auto)> _  \nStructure StringInfoT  \n<MarshalAs(UnmanagedType.LPTStr)> Public f1 As String  \n<MarshalAs(UnmanagedType.ByValTStr, SizeConst := 256)> _  \nPublic f2 As String  \nEnd Structure  \n  \n```  \n  \n```csharp  \n[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Ansi)]  \nstruct StringInfoA {  \n   [MarshalAs(UnmanagedType.LPStr)] public String f1;  \n   [MarshalAs(UnmanagedType.ByValTStr, SizeConst=256)] public String f2;  \n}  \n[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]  \nstruct StringInfoW {  \n   [MarshalAs(UnmanagedType.LPWStr)] public String f1;  \n   [MarshalAs(UnmanagedType.ByValTStr, SizeConst=256)] public String f2;  \n   [MarshalAs(UnmanagedType.BStr)] public String f3;  \n}  \n[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]  \nstruct StringInfoT {  \n   [MarshalAs(UnmanagedType.LPTStr)] public String f1;  \n   [MarshalAs(UnmanagedType.ByValTStr, SizeConst=256)] public String f2;  \n}  \n```  \n  \n<a name=\"cpcondefaultmarshalingforstringsanchor3\"></a>   \n## Fixed-Length String Buffers  \n In some circumstances, a fixed-length character buffer must be passed into unmanaged code to be manipulated. Simply passing a string does not work in this case because the callee cannot modify the contents of the passed buffer. Even if the string is passed by reference, there is no way to initialize the buffer to a given size.  \n  \n The solution is to pass a <xref:System.Text.StringBuilder> buffer as the argument instead of a string. A `StringBuilder` can be dereferenced and modified by the callee, provided it does not exceed the capacity of the `StringBuilder`. It can also be initialized to a fixed length. For example, if you initialize a `StringBuilder` buffer to a capacity of `N`, the marshaler provides a buffer of size (`N`+1) characters. The +1 accounts for the fact that the unmanaged string has a null terminator while `StringBuilder` does not.  \n  \n For example, the Microsoft Win32 API `GetWindowText` function (defined in Windows.h) is a fixed-length character buffer that must be passed into unmanaged code to be manipulated. `LpString` points to a caller-allocated buffer of size `nMaxCount`. The caller is expected to allocate the buffer and set the `nMaxCount` argument to the size of the allocated buffer. The following code shows the `GetWindowText` function declaration as defined in Windows.h.  \n  \n```  \nint GetWindowText(  \nHWND hWnd,        // Handle to window or control.  \nLPTStr lpString,  // Text buffer.  \nint nMaxCount     // Maximum number of characters to copy.  \n);  \n```  \n  \n A `StringBuilder` can be dereferenced and modified by the callee, provided it does not exceed the capacity of the `StringBuilder`. The following code example demonstrates how `StringBuilder` can be initialized to a fixed length.  \n  \n```vb  \nPublic Class Win32API  \nPublic Declare Auto Sub GetWindowText Lib \"User32.Dll\" _  \n(h As Integer, s As StringBuilder, nMaxCount As Integer)  \nEnd Class  \nPublic Class Window  \n   Friend h As Integer ' Friend handle to Window.  \n   Public Function GetText() As String  \n      Dim sb As New StringBuilder(256)  \n      Win32API.GetWindowText(h, sb, sb.Capacity + 1)  \n   Return sb.ToString()  \n   End Function  \nEnd Class  \n  \n```  \n  \n```csharp  \npublic class Win32API {  \n[DllImport(\"User32.Dll\")]  \npublic static extern void GetWindowText(int h, StringBuilder s,   \nint nMaxCount);  \n}  \npublic class Window {  \n   internal int h;        // Internal handle to Window.  \n   public String GetText() {  \n      StringBuilder sb = new StringBuilder(256);  \n      Win32API.GetWindowText(h, sb, sb.Capacity + 1);  \n   return sb.ToString();  \n   }  \n}  \n```  \n  \n## See Also  \n [Default Marshaling Behavior](../../../docs/framework/interop/default-marshaling-behavior.md)   \n [Blittable and Non-Blittable Types](../../../docs/framework/interop/blittable-and-non-blittable-types.md)   \n [Directional Attributes](http://msdn.microsoft.com/en-us/241ac5b5-928e-4969-8f58-1dbc048f9ea2)   \n [Copying and Pinning](../../../docs/framework/interop/copying-and-pinning.md)","nodes":[{"pos":[4,503],"nodes":[{"content":"Default Marshaling for Strings | Microsoft Docs","nodes":[{"pos":[0,47],"content":"Default Marshaling for Strings | Microsoft Docs","nodes":[{"content":"Default Marshaling for Strings | Microsoft Docs","pos":[0,47]}]}],"pos":[6,56],"yaml":true}],"content":"title: \"Default Marshaling for Strings | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"strings, interop marshaling\"\n  - \"interop marshaling, strings\"\nms.assetid: 9baea3ce-27b3-4b4f-af98-9ad0f9467e6f\ncaps.latest.revision: 18\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[510,540],"content":"Default Marshaling for Strings","linkify":"Default Marshaling for Strings","nodes":[{"content":"Default Marshaling for Strings","pos":[0,30]}]},{"content":"Both the <ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder?displayProperty=fullName&gt;</ph> classes have similar marshaling behavior.","pos":[541,699],"source":"Both the <xref:System.String?displayProperty=fullName> and <xref:System.Text.StringBuilder?displayProperty=fullName> classes have similar marshaling behavior."},{"content":"Strings are marshaled as a COM-style <ph id=\"ph1\">`BSTR`</ph> type or as a null-terminated string (a character array that ends with a null character).","pos":[706,838],"source":"Strings are marshaled as a COM-style `BSTR` type or as a null-terminated string (a character array that ends with a null character)."},{"content":"The characters within the string can be marshaled as Unicode (the default on Windows systems) or ANSI.","pos":[839,941]},{"content":"This topic provides the following information on marshaling string types:","pos":[948,1021]},{"pos":[1031,1101],"content":"<bpt id=\"p1\">[</bpt>Strings Used in Interfaces<ept id=\"p1\">](#cpcondefaultmarshalingforstringsanchor1)</ept>","source":"[Strings Used in Interfaces](#cpcondefaultmarshalingforstringsanchor1)"},{"pos":[1111,1186],"content":"<bpt id=\"p1\">[</bpt>Strings Used in Platform Invoke<ept id=\"p1\">](#cpcondefaultmarshalingforstringsanchor5)</ept>","source":"[Strings Used in Platform Invoke](#cpcondefaultmarshalingforstringsanchor5)"},{"pos":[1196,1266],"content":"<bpt id=\"p1\">[</bpt>Strings Used in Structures<ept id=\"p1\">](#cpcondefaultmarshalingforstringsanchor2)</ept>","source":"[Strings Used in Structures](#cpcondefaultmarshalingforstringsanchor2)"},{"pos":[1276,1347],"content":"<bpt id=\"p1\">[</bpt>Fixed-Length String Buffers<ept id=\"p1\">](#cpcondefaultmarshalingforstringsanchor3)</ept>","source":"[Fixed-Length String Buffers](#cpcondefaultmarshalingforstringsanchor3)"},{"pos":[1414,1440],"content":"Strings Used in Interfaces","linkify":"Strings Used in Interfaces","nodes":[{"content":"Strings Used in Interfaces","pos":[0,26]}]},{"content":"The following table shows the marshaling options for the string data type when marshaled as a method argument to unmanaged code.","pos":[1444,1572]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute provides several <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration values to marshal strings to COM interfaces.","pos":[1573,1769],"source":" The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute provides several <xref:System.Runtime.InteropServices.UnmanagedType> enumeration values to marshal strings to COM interfaces."},{"content":"Enumeration type","pos":[1776,1792]},{"content":"Description of unmanaged format","pos":[1793,1824]},{"pos":[1894,1924],"content":"<ph id=\"ph1\">`UnmanagedType.BStr`</ph> (default)","source":"`UnmanagedType.BStr` (default)"},{"pos":[1925,1990],"content":"A COM-style <ph id=\"ph1\">`BSTR`</ph> with a prefixed length and Unicode characters.","source":"A COM-style `BSTR` with a prefixed length and Unicode characters."},{"content":"A pointer to a null-terminated array of ANSI characters.","pos":[2017,2073]},{"content":"A pointer to a null-terminated array of Unicode characters.","pos":[2101,2160]},{"content":"This table applies to strings.","pos":[2168,2198]},{"content":"However, for <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph>, the only options allowed are <ph id=\"ph2\">`UnmanagedType.LPStr`</ph> and <ph id=\"ph3\">`UnmanagedType.LPWStr`</ph>.","pos":[2199,2324],"source":" However, for <xref:System.Text.StringBuilder>, the only options allowed are `UnmanagedType.LPStr` and `UnmanagedType.LPWStr`."},{"pos":[2331,2409],"content":"The following example shows strings declared in the <ph id=\"ph1\">`IStringWorker`</ph> interface.","source":"The following example shows strings declared in the `IStringWorker` interface."},{"content":"The following example shows the corresponding interface described in a type library.","pos":[2934,3018]},{"pos":[3481,3512],"content":"Strings Used in Platform Invoke","linkify":"Strings Used in Platform Invoke","nodes":[{"content":"Strings Used in Platform Invoke","pos":[0,31]}]},{"content":"Platform invoke copies string arguments, converting from the .NET Framework format (Unicode) to the platform unmanaged format.","pos":[3516,3642]},{"content":"Strings are immutable and are not copied back from unmanaged memory to managed memory when the call returns.","pos":[3643,3751]},{"content":"The following table lists the marshaling options for strings when marshaled as a method argument of a platform invoke call.","pos":[3758,3881]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute provides several <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration values to marshal strings.","pos":[3882,4060],"source":" The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute provides several <xref:System.Runtime.InteropServices.UnmanagedType> enumeration values to marshal strings."},{"content":"Enumeration type","pos":[4067,4083]},{"content":"Description of unmanaged format","pos":[4084,4115]},{"pos":[4210,4272],"content":"A COM-style <ph id=\"ph1\">`BSTR`</ph> with a prefixed length and ANSI characters.","source":"A COM-style `BSTR` with a prefixed length and ANSI characters."},{"pos":[4298,4363],"content":"A COM-style <ph id=\"ph1\">`BSTR`</ph> with a prefixed length and Unicode characters.","source":"A COM-style `BSTR` with a prefixed length and Unicode characters."},{"content":"A pointer to a null-terminated array of ANSI characters.","pos":[4390,4446]},{"content":"A pointer to a null-terminated array of platform-dependent characters.","pos":[4474,4544]},{"content":"A pointer to a null-terminated array of Unicode characters.","pos":[4572,4631]},{"pos":[4658,4734],"content":"A COM-style <ph id=\"ph1\">`BSTR`</ph> with a prefixed length and platform-dependent characters.","source":"A COM-style `BSTR` with a prefixed length and platform-dependent characters."},{"content":"A value that enables Visual Basic .NET to change a string in unmanaged code, and have the results reflected in managed code.","pos":[4752,4876]},{"content":"This value is supported only for platform invoke.","pos":[4877,4926]},{"content":"This is default value in Visual Basic for <ph id=\"ph1\">`ByVal`</ph> strings.","pos":[4927,4985],"source":" This is default value in Visual Basic for `ByVal` strings."},{"content":"This table applies to strings.","pos":[4993,5023]},{"content":"However, for <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph>, the only options allowed are <ph id=\"ph2\">`LPStr`</ph>, <ph id=\"ph3\">`LPTStr`</ph>, and <ph id=\"ph4\">`LPWStr`</ph>.","pos":[5024,5132],"source":" However, for <xref:System.Text.StringBuilder>, the only options allowed are `LPStr`, `LPTStr`, and `LPWStr`."},{"pos":[5139,5241],"content":"The following type definition shows the correct use of <ph id=\"ph1\">`MarshalAsAttribute`</ph> for platform invoke calls.","source":"The following type definition shows the correct use of `MarshalAsAttribute` for platform invoke calls."},{"pos":[6781,6807],"content":"Strings Used in Structures","linkify":"Strings Used in Structures","nodes":[{"content":"Strings Used in Structures","pos":[0,26]}]},{"content":"Strings are valid members of structures; however, <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> buffers are invalid in structures.","pos":[6811,6928],"source":"Strings are valid members of structures; however, <xref:System.Text.StringBuilder> buffers are invalid in structures."},{"content":"The following table shows the marshaling options for the string data type when the type is marshaled as a field.","pos":[6929,7041]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute provides several <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration values to marshal strings to a field.","pos":[7042,7231],"source":" The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute provides several <xref:System.Runtime.InteropServices.UnmanagedType> enumeration values to marshal strings to a field."},{"content":"Enumeration type","pos":[7238,7254]},{"content":"Description of unmanaged format","pos":[7255,7286]},{"pos":[7377,7442],"content":"A COM-style <ph id=\"ph1\">`BSTR`</ph> with a prefixed length and Unicode characters.","source":"A COM-style `BSTR` with a prefixed length and Unicode characters."},{"content":"A pointer to a null-terminated array of ANSI characters.","pos":[7469,7525]},{"content":"A pointer to a null-terminated array of platform-dependent characters.","pos":[7553,7623]},{"content":"A pointer to a null-terminated array of Unicode characters.","pos":[7651,7710]},{"content":"A fixed-length array of characters; the array's type is determined by the character set of the containing structure.","pos":[7741,7857]},{"content":"The <ph id=\"ph1\">`ByValTStr`</ph> type is used for inline, fixed-length character arrays that appear within a structure.","pos":[7865,7967],"source":"The `ByValTStr` type is used for inline, fixed-length character arrays that appear within a structure."},{"content":"Other types apply to string references contained within structures that contain pointers to strings.","pos":[7968,8068]},{"content":"The <ph id=\"ph1\">`CharSet`</ph> argument of the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute that is applied to the containing structure determines the character format of strings in structures.","pos":[8075,8276],"source":"The `CharSet` argument of the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute that is applied to the containing structure determines the character format of strings in structures."},{"content":"The following example structures contain string references and inline strings, as well as ANSI, Unicode, and platform-dependent characters.","pos":[8277,8416]},{"pos":[8426,8453],"content":"Type Library Representation","linkify":"Type Library Representation","nodes":[{"content":"Type Library Representation","pos":[0,27]}]},{"content":"The following code example shows how to use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute to define the same structure in different formats.","pos":[8707,8872],"source":"The following code example shows how to use the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute to define the same structure in different formats."},{"pos":[10488,10515],"content":"Fixed-Length String Buffers","linkify":"Fixed-Length String Buffers","nodes":[{"content":"Fixed-Length String Buffers","pos":[0,27]}]},{"content":"In some circumstances, a fixed-length character buffer must be passed into unmanaged code to be manipulated.","pos":[10519,10627]},{"content":"Simply passing a string does not work in this case because the callee cannot modify the contents of the passed buffer.","pos":[10628,10746]},{"content":"Even if the string is passed by reference, there is no way to initialize the buffer to a given size.","pos":[10747,10847]},{"content":"The solution is to pass a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> buffer as the argument instead of a string.","pos":[10854,10956],"source":"The solution is to pass a <xref:System.Text.StringBuilder> buffer as the argument instead of a string."},{"content":"A <ph id=\"ph1\">`StringBuilder`</ph> can be dereferenced and modified by the callee, provided it does not exceed the capacity of the <ph id=\"ph2\">`StringBuilder`</ph>.","pos":[10957,11087],"source":" A `StringBuilder` can be dereferenced and modified by the callee, provided it does not exceed the capacity of the `StringBuilder`."},{"content":"It can also be initialized to a fixed length.","pos":[11088,11133]},{"content":"For example, if you initialize a <ph id=\"ph1\">`StringBuilder`</ph> buffer to a capacity of <ph id=\"ph2\">`N`</ph>, the marshaler provides a buffer of size (<ph id=\"ph3\">`N`</ph>+1) characters.","pos":[11134,11271],"source":" For example, if you initialize a `StringBuilder` buffer to a capacity of `N`, the marshaler provides a buffer of size (`N`+1) characters."},{"content":"The +1 accounts for the fact that the unmanaged string has a null terminator while <ph id=\"ph1\">`StringBuilder`</ph> does not.","pos":[11272,11380],"source":" The +1 accounts for the fact that the unmanaged string has a null terminator while `StringBuilder` does not."},{"content":"For example, the Microsoft Win32 API <ph id=\"ph1\">`GetWindowText`</ph> function (defined in Windows.h) is a fixed-length character buffer that must be passed into unmanaged code to be manipulated.","pos":[11387,11565],"source":"For example, the Microsoft Win32 API `GetWindowText` function (defined in Windows.h) is a fixed-length character buffer that must be passed into unmanaged code to be manipulated."},{"content":"<ph id=\"ph1\">`LpString`</ph> points to a caller-allocated buffer of size <ph id=\"ph2\">`nMaxCount`</ph>.","pos":[11566,11633],"source":"`LpString` points to a caller-allocated buffer of size `nMaxCount`."},{"content":"The caller is expected to allocate the buffer and set the <ph id=\"ph1\">`nMaxCount`</ph> argument to the size of the allocated buffer.","pos":[11634,11749],"source":" The caller is expected to allocate the buffer and set the `nMaxCount` argument to the size of the allocated buffer."},{"content":"The following code shows the <ph id=\"ph1\">`GetWindowText`</ph> function declaration as defined in Windows.h.","pos":[11750,11840],"source":" The following code shows the `GetWindowText` function declaration as defined in Windows.h."},{"content":"A <ph id=\"ph1\">`StringBuilder`</ph> can be dereferenced and modified by the callee, provided it does not exceed the capacity of the <ph id=\"ph2\">`StringBuilder`</ph>.","pos":[12037,12167],"source":"A `StringBuilder` can be dereferenced and modified by the callee, provided it does not exceed the capacity of the `StringBuilder`."},{"content":"The following code example demonstrates how <ph id=\"ph1\">`StringBuilder`</ph> can be initialized to a fixed length.","pos":[12168,12265],"source":" The following code example demonstrates how `StringBuilder` can be initialized to a fixed length."},{"pos":[13137,13145],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Default Marshaling Behavior<ept id=\"p1\">](../../../docs/framework/interop/default-marshaling-behavior.md)</ept><ph id=\"ph1\"> </ph>","pos":[13149,13243],"source":"[Default Marshaling Behavior](../../../docs/framework/interop/default-marshaling-behavior.md) "},{"content":"<bpt id=\"p1\">[</bpt>Blittable and Non-Blittable Types<ept id=\"p1\">](../../../docs/framework/interop/blittable-and-non-blittable-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[13247,13353],"source":"[Blittable and Non-Blittable Types](../../../docs/framework/interop/blittable-and-non-blittable-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Directional Attributes<ept id=\"p1\">](http://msdn.microsoft.com/en-us/241ac5b5-928e-4969-8f58-1dbc048f9ea2)</ept><ph id=\"ph1\"> </ph>","pos":[13357,13452],"source":"[Directional Attributes](http://msdn.microsoft.com/en-us/241ac5b5-928e-4969-8f58-1dbc048f9ea2) "},{"content":"<bpt id=\"p1\">[</bpt>Copying and Pinning<ept id=\"p1\">](../../../docs/framework/interop/copying-and-pinning.md)</ept>","pos":[13456,13533],"source":"[Copying and Pinning](../../../docs/framework/interop/copying-and-pinning.md)"}]}