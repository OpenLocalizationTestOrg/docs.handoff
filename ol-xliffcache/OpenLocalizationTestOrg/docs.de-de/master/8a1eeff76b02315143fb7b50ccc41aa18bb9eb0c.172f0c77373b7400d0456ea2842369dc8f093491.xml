{"content":"---\ntitle: \"Configuring WCF Services in Code\"\nms.date: \"03/30/2017\"\nms.assetid: 193c725d-134f-4d31-a8f8-4e575233bff6\n---\n# Configuring WCF Services in Code\nWindows Communication Foundation (WCF) allows developers to configure services using configuration files or code.  Configuration files are useful when a service needs to be configured after being deployed. When using configuration files, an IT professional only needs to update the configuration file, no recompilation is required. Configuration files, however, can be complex and difficult to maintain. There is no support for debugging configuration files and configuration elements are referenced by names which makes authoring configuration files error-prone and difficult. WCF also allows you to configure services in code. In earlier versions of WCF (4.0 and earlier) configuring services in code was easy in self-hosted scenarios, the <xref:System.ServiceModel.ServiceHost> class allowed you to configure endpoints and behaviors prior to calling ServiceHost.Open. In web hosted scenarios, however, you don’t have direct access to the <xref:System.ServiceModel.ServiceHost> class. To configure a web hosted service you were required to create a `System.ServiceModel.ServiceHostFactory` that created the <xref:System.ServiceModel.Activation.ServiceHostFactory> and performed any needed configuration. Starting with .NET 4.5, WCF provides an easier way to configure both self-hosted and web hosted services in code.  \n  \n## The Configure method  \n Simply define a public static method called `Configure` with the following signature in your service implementation class:  \n  \n```csharp  \npublic static void Configure(ServiceConfiguration config)  \n```  \n  \n The Configure method takes a <xref:System.ServiceModel.ServiceConfiguration> instance that enables the developer to add endpoints and behaviors. This method is called by WCF before the service host is opened. When defined, any service configuration settings specified in an app.config or web.config file will be ignored.  \n  \n The following code snippet illustrates how to define the `Configure` method and add a service endpoint, an endpoint behavior and service behaviors:  \n  \n```csharp  \npublic class Service1 : IService1  \n    {  \n        public static void Configure(ServiceConfiguration config)  \n        {  \n            ServiceEndpoint se = new ServiceEndpoint(new ContractDescription(\"IService1\"), new BasicHttpBinding(), new EndpointAddress(\"basic\"));  \n            se.Behaviors.Add(new MyEndpointBehavior());  \n            config.AddServiceEndpoint(se);  \n  \n            config.Description.Behaviors.Add(new ServiceMetadataBehavior { HttpGetEnabled = true });  \n            config.Description.Behaviors.Add(new ServiceDebugBehavior { IncludeExceptionDetailInFaults = true });  \n        }  \n  \n        public string GetData(int value)  \n        {  \n            return $\"You entered: {value}\";\n        }  \n  \n        public CompositeType GetDataUsingDataContract(CompositeType composite)  \n        {  \n            if (composite == null)  \n            {  \n                throw new ArgumentNullException(\"composite\");  \n            }  \n            if (composite.BoolValue)  \n            {  \n                composite.StringValue += \"Suffix\";  \n            }  \n            return composite;  \n        }  \n    }  \n```  \n  \n To enable a protocol such as https for a service, you can either explicitly add an endpoint that uses the protocol or you can automatically add endpoints by calling ServiceConfiguration.EnableProtocol(Binding) which adds an endpoint for each base address compatible with the protocol and each service contract defined. The following code illustrates how to use the ServiceConfiguration.EnableProtocol method:  \n  \n```csharp  \npublic class Service1 : IService1   \n{   \n    public string GetData(int value);   \n    public static void Configure(ServiceConfiguration config)   \n    {   \n        // Enable \"Add Service Reference\" support   \n       config.Description.Behaviors.Add( new ServiceMetadataBehavior { HttpGetEnabled = true });   \n       // set up support for http, https, net.tcp, net.pipe   \n       config.EnableProtocol(new BasicHttpBinding());   \n       config.EnableProtocol(new BasicHttpBinding());   \n       config.EnableProtocol(new NetTcpBinding());   \n       config.EnableProtocol(new NetNamedPipeBinding());   \n       // add an extra BasicHttpBinding endpoint at http:///basic   \n       config.AddServiceEndpoint(typeof(IService1), new BasicHttpBinding(),\"basic\");   \n    }   \n}   \n```  \n  \n The settings in the <`protocolMappings`> section are only used if no application endpoints are added to the <xref:System.ServiceModel.ServiceConfiguration> programmatically.You can optionally load the service configuration from the default application configuration file by calling <xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration%2A> and then change the settings. The <xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration> class also allows you to load configuration from a centralized configuration. The following code illustrates how to implement this:  \n  \n```  \npublic class Service1 : IService1   \n{   \n    public void DoWork();   \n    public static void Configure(ServiceConfiguration config)   \n    {   \n          config.LoadFromConfiguration(ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap { ExeConfigFilename = @\"c:\\sharedConfig\\MyConfig.config\" }, ConfigurationUserLevel.None));   \n    }   \n}  \n```  \n  \n> [!IMPORTANT]\n>  Note that <xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration%2A> ignores <`host`> settings within the <`service`> tag of <`system.serviceModel`>. Conceptually, <`host`> is about host configuration, not service configuration, and it gets loaded before the Configure method executes.  \n  \n## See also\n\n- [Configuring Services Using Configuration Files](../../../docs/framework/wcf/configuring-services-using-configuration-files.md)\n- [Configuring Client Behaviors](../../../docs/framework/wcf/configuring-client-behaviors.md)\n- [Simplified Configuration](../../../docs/framework/wcf/simplified-configuration.md)\n- [Configuration](../../../docs/framework/wcf/samples/configuration-sample.md)\n- [Configuration-Based Activation in IIS and WAS](../../../docs/framework/wcf/feature-details/configuration-based-activation-in-iis-and-was.md)\n- [Configuration and Metadata Support](../../../docs/framework/wcf/extending/configuration-and-metadata-support.md)\n- [Configuration](../../../docs/framework/wcf/diagnostics/exceptions-reference/configuration.md)\n- [How to: Specify a Service Binding in Configuration](../../../docs/framework/wcf/how-to-specify-a-service-binding-in-configuration.md)\n- [How to: Create a Service Endpoint in Configuration](../../../docs/framework/wcf/feature-details/how-to-create-a-service-endpoint-in-configuration.md)\n- [How to: Publish Metadata for a Service Using a Configuration File](../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-a-configuration-file.md)\n- [How to: Specify a Client Binding in Configuration](../../../docs/framework/wcf/how-to-specify-a-client-binding-in-configuration.md)\n","nodes":[{"pos":[4,116],"embed":true,"restype":"x-metadata","content":"title: \"Configuring WCF Services in Code\"\nms.date: \"03/30/2017\"\nms.assetid: 193c725d-134f-4d31-a8f8-4e575233bff6","nodes":[{"content":"Configuring WCF Services in Code","nodes":[{"pos":[0,32],"content":"Configuring WCF Services in Code","nodes":[{"content":"Configuring WCF Services in Code","pos":[0,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[123,155],"content":"Configuring WCF Services in Code","linkify":"Configuring WCF Services in Code","nodes":[{"content":"Configuring WCF Services in Code","pos":[0,32]}]},{"content":"Windows Communication Foundation (WCF) allows developers to configure services using configuration files or code.","pos":[156,269]},{"content":"Configuration files are useful when a service needs to be configured after being deployed.","pos":[271,361]},{"content":"When using configuration files, an IT professional only needs to update the configuration file, no recompilation is required.","pos":[362,487]},{"content":"Configuration files, however, can be complex and difficult to maintain.","pos":[488,559]},{"content":"There is no support for debugging configuration files and configuration elements are referenced by names which makes authoring configuration files error-prone and difficult.","pos":[560,733]},{"content":"WCF also allows you to configure services in code.","pos":[734,784]},{"content":"In earlier versions of WCF (4.0 and earlier) configuring services in code was easy in self-hosted scenarios, the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class allowed you to configure endpoints and behaviors prior to calling ServiceHost.Open.","pos":[785,1026],"source":" In earlier versions of WCF (4.0 and earlier) configuring services in code was easy in self-hosted scenarios, the <xref:System.ServiceModel.ServiceHost> class allowed you to configure endpoints and behaviors prior to calling ServiceHost.Open."},{"content":"In web hosted scenarios, however, you don’t have direct access to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class.","pos":[1027,1142],"source":" In web hosted scenarios, however, you don’t have direct access to the <xref:System.ServiceModel.ServiceHost> class."},{"content":"To configure a web hosted service you were required to create a <ph id=\"ph1\">`System.ServiceModel.ServiceHostFactory`</ph> that created the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activation.ServiceHostFactory&gt;</ph> and performed any needed configuration.","pos":[1143,1361],"source":" To configure a web hosted service you were required to create a `System.ServiceModel.ServiceHostFactory` that created the <xref:System.ServiceModel.Activation.ServiceHostFactory> and performed any needed configuration."},{"content":"Starting with .NET 4.5, WCF provides an easier way to configure both self-hosted and web hosted services in code.","pos":[1362,1475]},{"pos":[1484,1504],"content":"The Configure method","linkify":"The Configure method","nodes":[{"content":"The Configure method","pos":[0,20]}]},{"pos":[1508,1630],"content":"Simply define a public static method called <ph id=\"ph1\">`Configure`</ph> with the following signature in your service implementation class:","source":"Simply define a public static method called `Configure` with the following signature in your service implementation class:"},{"content":"The Configure method takes a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceConfiguration&gt;</ph> instance that enables the developer to add endpoints and behaviors.","pos":[1718,1862],"source":"The Configure method takes a <xref:System.ServiceModel.ServiceConfiguration> instance that enables the developer to add endpoints and behaviors."},{"content":"This method is called by WCF before the service host is opened.","pos":[1863,1926]},{"content":"When defined, any service configuration settings specified in an app.config or web.config file will be ignored.","pos":[1927,2038]},{"pos":[2045,2192],"content":"The following code snippet illustrates how to define the <ph id=\"ph1\">`Configure`</ph> method and add a service endpoint, an endpoint behavior and service behaviors:","source":"The following code snippet illustrates how to define the `Configure` method and add a service endpoint, an endpoint behavior and service behaviors:"},{"content":"To enable a protocol such as https for a service, you can either explicitly add an endpoint that uses the protocol or you can automatically add endpoints by calling ServiceConfiguration.EnableProtocol(Binding) which adds an endpoint for each base address compatible with the protocol and each service contract defined.","pos":[3348,3666]},{"content":"The following code illustrates how to use the ServiceConfiguration.EnableProtocol method:","pos":[3667,3756]},{"content":"The settings in the &lt;<ph id=\"ph1\">`protocolMappings`</ph>&gt; section are only used if no application endpoints are added to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceConfiguration&gt;</ph> programmatically.You can optionally load the service configuration from the default application configuration file by calling <ph id=\"ph3\">&lt;xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration%2A&gt;</ph> and then change the settings.","pos":[4556,4940],"source":"The settings in the <`protocolMappings`> section are only used if no application endpoints are added to the <xref:System.ServiceModel.ServiceConfiguration> programmatically.You can optionally load the service configuration from the default application configuration file by calling <xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration%2A> and then change the settings."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration&gt;</ph> class also allows you to load configuration from a centralized configuration.","pos":[4941,5092],"source":" The <xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration> class also allows you to load configuration from a centralized configuration."},{"content":"The following code illustrates how to implement this:","pos":[5093,5146]},{"pos":[5536,5851],"content":"[!IMPORTANT]\n Note that <xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration%2A> ignores <`host`> settings within the <`service`> tag of <`system.serviceModel`>. Conceptually, <`host`> is about host configuration, not service configuration, and it gets loaded before the Configure method executes.","leadings":["","> "],"nodes":[{"content":"Note that <xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration%2A> ignores <`host`> settings within the <`service`> tag of <`system.serviceModel`>. Conceptually, <`host`> is about host configuration, not service configuration, and it gets loaded before the Configure method executes.","pos":[14,313],"nodes":[{"content":"Note that <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration%2A&gt;</ph> ignores &lt;<ph id=\"ph2\">`host`</ph>&gt; settings within the &lt;<ph id=\"ph3\">`service`</ph>&gt; tag of &lt;<ph id=\"ph4\">`system.serviceModel`</ph>&gt;.","pos":[0,163],"source":"Note that <xref:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration%2A> ignores <`host`> settings within the <`service`> tag of <`system.serviceModel`>."},{"content":"Conceptually, &lt;<ph id=\"ph1\">`host`</ph>&gt; is about host configuration, not service configuration, and it gets loaded before the Configure method executes.","pos":[164,299],"source":" Conceptually, <`host`> is about host configuration, not service configuration, and it gets loaded before the Configure method executes."}]}]},{"pos":[5860,5868],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5872,5999],"content":"<bpt id=\"p1\">[</bpt>Configuring Services Using Configuration Files<ept id=\"p1\">](../../../docs/framework/wcf/configuring-services-using-configuration-files.md)</ept>","source":"[Configuring Services Using Configuration Files](../../../docs/framework/wcf/configuring-services-using-configuration-files.md)"},{"pos":[6002,6093],"content":"<bpt id=\"p1\">[</bpt>Configuring Client Behaviors<ept id=\"p1\">](../../../docs/framework/wcf/configuring-client-behaviors.md)</ept>","source":"[Configuring Client Behaviors](../../../docs/framework/wcf/configuring-client-behaviors.md)"},{"pos":[6096,6179],"content":"<bpt id=\"p1\">[</bpt>Simplified Configuration<ept id=\"p1\">](../../../docs/framework/wcf/simplified-configuration.md)</ept>","source":"[Simplified Configuration](../../../docs/framework/wcf/simplified-configuration.md)"},{"pos":[6182,6258],"content":"<bpt id=\"p1\">[</bpt>Configuration<ept id=\"p1\">](../../../docs/framework/wcf/samples/configuration-sample.md)</ept>","source":"[Configuration](../../../docs/framework/wcf/samples/configuration-sample.md)"},{"pos":[6261,6402],"content":"<bpt id=\"p1\">[</bpt>Configuration-Based Activation in IIS and WAS<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/configuration-based-activation-in-iis-and-was.md)</ept>","source":"[Configuration-Based Activation in IIS and WAS](../../../docs/framework/wcf/feature-details/configuration-based-activation-in-iis-and-was.md)"},{"pos":[6405,6518],"content":"<bpt id=\"p1\">[</bpt>Configuration and Metadata Support<ept id=\"p1\">](../../../docs/framework/wcf/extending/configuration-and-metadata-support.md)</ept>","source":"[Configuration and Metadata Support](../../../docs/framework/wcf/extending/configuration-and-metadata-support.md)"},{"pos":[6521,6615],"content":"<bpt id=\"p1\">[</bpt>Configuration<ept id=\"p1\">](../../../docs/framework/wcf/diagnostics/exceptions-reference/configuration.md)</ept>","source":"[Configuration](../../../docs/framework/wcf/diagnostics/exceptions-reference/configuration.md)"},{"pos":[6618,6752],"content":"<bpt id=\"p1\">[</bpt>How to: Specify a Service Binding in Configuration<ept id=\"p1\">](../../../docs/framework/wcf/how-to-specify-a-service-binding-in-configuration.md)</ept>","source":"[How to: Specify a Service Binding in Configuration](../../../docs/framework/wcf/how-to-specify-a-service-binding-in-configuration.md)"},{"pos":[6755,6905],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Service Endpoint in Configuration<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/how-to-create-a-service-endpoint-in-configuration.md)</ept>","source":"[How to: Create a Service Endpoint in Configuration](../../../docs/framework/wcf/feature-details/how-to-create-a-service-endpoint-in-configuration.md)"},{"pos":[6908,7088],"content":"<bpt id=\"p1\">[</bpt>How to: Publish Metadata for a Service Using a Configuration File<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-a-configuration-file.md)</ept>","source":"[How to: Publish Metadata for a Service Using a Configuration File](../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-a-configuration-file.md)"},{"pos":[7091,7223],"content":"<bpt id=\"p1\">[</bpt>How to: Specify a Client Binding in Configuration<ept id=\"p1\">](../../../docs/framework/wcf/how-to-specify-a-client-binding-in-configuration.md)</ept>","source":"[How to: Specify a Client Binding in Configuration](../../../docs/framework/wcf/how-to-specify-a-client-binding-in-configuration.md)"}]}