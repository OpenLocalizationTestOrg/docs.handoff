{"content":"---\ntitle: \"Integer Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2017-04-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Integer\"\n  - \"Integer\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"numbers, whole\"\n  - \"enumerated values\"\n  - \"whole numbers\"\n  - \"integral data types\"\n  - \"integer numbers\"\n  - \"numbers, integer\"\n  - \"integers, data types\"\n  - \"literal type characters, I\"\n  - \"integers, types\"\n  - \"data types [Visual Basic], integral\"\n  - \"% identifier type character\"\n  - \"data types [Visual Basic], assigning\"\n  - \"identifier type characters, %\"\n  - \"I literal type character\"\n  - \"Integer data type\"\nms.assetid: a8f233b4-4be3-455c-861b-05af2fbb6c60\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Integer data type (Visual Basic)\nHolds signed 32-bit (4-byte) integers that range in value from -2,147,483,648 through 2,147,483,647.  \n  \n## Remarks\n The `Integer` data type provides optimal performance on a 32-bit processor. The other integral types are slower to load and store from and to memory.  \n  \n The default value of `Integer` is 0.  \n\n## Literal assignments\n\nYou can declare and initialize an `Integer` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal. If the integer literal is outside the range of `Integer` (that is, if it is less than <xref:System.Int32.MinValue?displayProperty=fullName> or greater than <xref:System.Int32.MaxValue?displayProperty=fullName>, a compilation error occurs.\n\nIn the following example, integers equal to 16,342 that are represented as decimal, hexadecimal, and binary literals are assigned to `Integer` values.\n\n[!code-vb[integer](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#Int)]  \n\n> [!NOTE]\n> You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.\n\nStarting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-vb[integer](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#IntS)]  \n\nNumeric literals can also include the `I` [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to denote the `Integer` data type, as the following example shows.\n\n```vb\nDim number = &H035826I\n```\n\n## Programming tips\n\n-   **Interop Considerations.** If you are interfacing with components not written for the .NET Framework, such as Automation or COM objects, remember that `Integer` has a different data width (16 bits) in other environments. If you are passing a 16-bit argument to such a component, declare it as `Short` instead of `Integer` in your new Visual Basic code.  \n  \n-   **Widening.** The `Integer` data type widens to `Long`, `Decimal`, `Single`, or `Double`. This means you can convert `Integer` to any one of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error.  \n  \n-   **Type Characters.** Appending the literal type character `I` to a literal forces it to the `Integer` data type. Appending the identifier type character `%` to any identifier forces it to `Integer`.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Int32?displayProperty=fullName> structure.  \n  \n## Range\n\nIf you try to set a variable of an integral type to a number outside the range for that type, an error occurs. If you try to set it to a fraction, the number is rounded up or down to the nearest integer value. If the number is equally close to two integer values, the value is rounded to the nearest even integer. This behavior minimizes rounding errors that result from consistently rounding a midpoint value in a single direction. The following code shows examples of rounding.  \n\n```vb  \n' The valid range of an Integer variable is -2147483648 through +2147483647.  \nDim k As Integer  \n' The following statement causes an error because the value is too large.  \nk = 2147483648  \n' The following statement sets k to 6.  \nk = 5.9  \n' The following statement sets k to 4  \nk = 4.5  \n' The following statement sets k to 6  \n' Note, Visual Basic uses bankerâ€™s rounding (toward nearest even number)  \nk = 5.5  \n```\n\n## See also\n\n<xref:System.Int32?displayProperty=fullName>   \n [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md)   \n [Short Data Type](../../../visual-basic/language-reference/data-types/short-data-type.md)   \n [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)   \n [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)","nodes":[{"pos":[4,965],"nodes":[{"content":"Integer Data Type (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,49],"content":"Integer Data Type (Visual Basic) | Microsoft Docs","nodes":[{"content":"Integer Data Type (Visual Basic) | Microsoft Docs","pos":[0,49]}]}],"pos":[6,58],"yaml":true}],"content":"title: \"Integer Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2017-04-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Integer\"\n  - \"Integer\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"numbers, whole\"\n  - \"enumerated values\"\n  - \"whole numbers\"\n  - \"integral data types\"\n  - \"integer numbers\"\n  - \"numbers, integer\"\n  - \"integers, data types\"\n  - \"literal type characters, I\"\n  - \"integers, types\"\n  - \"data types [Visual Basic], integral\"\n  - \"% identifier type character\"\n  - \"data types [Visual Basic], assigning\"\n  - \"identifier type characters, %\"\n  - \"I literal type character\"\n  - \"Integer data type\"\nms.assetid: a8f233b4-4be3-455c-861b-05af2fbb6c60\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[972,1004],"content":"Integer data type (Visual Basic)","linkify":"Integer data type (Visual Basic)","nodes":[{"content":"Integer data type (Visual Basic)","pos":[0,32]}]},{"content":"Holds signed 32-bit (4-byte) integers that range in value from -2,147,483,648 through 2,147,483,647.","pos":[1005,1105]},{"pos":[1114,1121],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Integer`</ph> data type provides optimal performance on a 32-bit processor.","pos":[1123,1198],"source":"The `Integer` data type provides optimal performance on a 32-bit processor."},{"content":"The other integral types are slower to load and store from and to memory.","pos":[1199,1272]},{"pos":[1279,1315],"content":"The default value of <ph id=\"ph1\">`Integer`</ph> is 0.","source":"The default value of `Integer` is 0."},{"pos":[1322,1341],"content":"Literal assignments","linkify":"Literal assignments","nodes":[{"content":"Literal assignments","pos":[0,19]}]},{"content":"You can declare and initialize an <ph id=\"ph1\">`Integer`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.","pos":[1343,1526],"source":"You can declare and initialize an `Integer` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`Integer`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Int32.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1527,1765],"source":" If the integer literal is outside the range of `Integer` (that is, if it is less than <xref:System.Int32.MinValue?displayProperty=fullName> or greater than <xref:System.Int32.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1767,1917],"content":"In the following example, integers equal to 16,342 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`Integer`</ph> values.","source":"In the following example, integers equal to 16,342 that are represented as decimal, hexadecimal, and binary literals are assigned to `Integer` values."},{"pos":[1919,2034],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>integer<ept id=\"p2\">](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#Int)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[integer](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#Int)]"},{"pos":[2040,2255],"content":"[!NOTE]\nYou use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","pos":[8,213],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`&amp;h`</ph> or <ph id=\"ph2\">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id=\"ph3\">`&amp;b`</ph> or <ph id=\"ph4\">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id=\"ph5\">`&amp;o`</ph> or <ph id=\"ph6\">`&amp;O`</ph> to denote an octal literal.","pos":[0,172],"source":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal."},{"content":"Decimal literals have no prefix.","pos":[173,205]}]}]},{"pos":[2257,2414],"content":"Starting with Visual Basic 2017, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"pos":[2416,2532],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>integer<ept id=\"p2\">](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#IntS)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[integer](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#IntS)]"},{"pos":[2536,2734],"content":"Numeric literals can also include the <ph id=\"ph1\">`I`</ph> <bpt id=\"p1\">[</bpt>type character<ept id=\"p1\">](../../programming-guide\\language-features\\data-types/type-characters.md)</ept> to denote the <ph id=\"ph2\">`Integer`</ph> data type, as the following example shows.","source":"Numeric literals can also include the `I` [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to denote the `Integer` data type, as the following example shows."},{"pos":[2773,2789],"content":"Programming tips","linkify":"Programming tips","nodes":[{"content":"Programming tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Interop Considerations.<ept id=\"p1\">**</ept>","pos":[2795,2822],"source":"**Interop Considerations.**"},{"content":"If you are interfacing with components not written for the .NET Framework, such as Automation or COM objects, remember that <ph id=\"ph1\">`Integer`</ph> has a different data width (16 bits) in other environments.","pos":[2823,3016],"source":" If you are interfacing with components not written for the .NET Framework, such as Automation or COM objects, remember that `Integer` has a different data width (16 bits) in other environments."},{"content":"If you are passing a 16-bit argument to such a component, declare it as <ph id=\"ph1\">`Short`</ph> instead of <ph id=\"ph2\">`Integer`</ph> in your new Visual Basic code.","pos":[3017,3148],"source":" If you are passing a 16-bit argument to such a component, declare it as `Short` instead of `Integer` in your new Visual Basic code."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[3158,3171],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`Integer`</ph> data type widens to <ph id=\"ph2\">`Long`</ph>, <ph id=\"ph3\">`Decimal`</ph>, <ph id=\"ph4\">`Single`</ph>, or <ph id=\"ph5\">`Double`</ph>.","pos":[3172,3247],"source":" The `Integer` data type widens to `Long`, `Decimal`, `Single`, or `Double`."},{"content":"This means you can convert <ph id=\"ph1\">`Integer`</ph> to any one of these types without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=fullName&gt;</ph> error.","pos":[3248,3397],"source":" This means you can convert `Integer` to any one of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[3407,3427],"source":"**Type Characters.**"},{"content":"Appending the literal type character <ph id=\"ph1\">`I`</ph> to a literal forces it to the <ph id=\"ph2\">`Integer`</ph> data type.","pos":[3428,3519],"source":" Appending the literal type character `I` to a literal forces it to the `Integer` data type."},{"content":"Appending the identifier type character <ph id=\"ph1\">`%`</ph> to any identifier forces it to <ph id=\"ph2\">`Integer`</ph>.","pos":[3520,3605],"source":" Appending the identifier type character `%` to any identifier forces it to `Integer`."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[3615,3634],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph> structure.","pos":[3635,3742],"source":" The corresponding type in the .NET Framework is the <xref:System.Int32?displayProperty=fullName> structure."},{"pos":[3751,3756],"content":"Range","linkify":"Range","nodes":[{"content":"Range","pos":[0,5]}]},{"content":"If you try to set a variable of an integral type to a number outside the range for that type, an error occurs.","pos":[3758,3868]},{"content":"If you try to set it to a fraction, the number is rounded up or down to the nearest integer value.","pos":[3869,3967]},{"content":"If the number is equally close to two integer values, the value is rounded to the nearest even integer.","pos":[3968,4071]},{"content":"This behavior minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.","pos":[4072,4190]},{"content":"The following code shows examples of rounding.","pos":[4191,4237]},{"pos":[4674,4682],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>","pos":[4684,4728],"source":"<xref:System.Int32?displayProperty=fullName> "},{"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[4733,4820],"source":"[Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>Long Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[4824,4912],"source":"[Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Short Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[4916,5006],"source":"[Short Data Type](../../../visual-basic/language-reference/data-types/short-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[5010,5119],"source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[5123,5217],"source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","pos":[5221,5351],"source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}