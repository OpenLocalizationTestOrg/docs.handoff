<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd49f3bbbb31415ddd5e5ce32482c4e3b6020c18</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\configurationcodegenerator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e05e47de443b3f9f8d279129af8ba76ea5fe6cd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">017d427576292b7280d637aaa86f66f9dbb393a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ConfigurationCodeGenerator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConfigurationCodeGenerator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The ConfigurationCodeGenerator is a tool that you can use to expose your custom channel implementations to the configuration system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This allows users of your custom channel to configure your channel by using a .config file just as they would configure a system-provided binding such as <ph id="ph1">`NetTcpBinding`</ph> or a custom binding using the <ph id="ph2">`TcpTransportBindingElement`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you write a custom channel and expose it to the programming model by using a new <ph id="ph1">`BindingElement`</ph> or <ph id="ph2">`Binding`</ph>, you must create a set of classes to make the <ph id="ph3">`BindingElement`</ph> or <ph id="ph4">`Binding`</ph> configurable using a .config file.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use the ConfigurationCodeGenerator tool to generate these classes and enhance your customer's experience.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To build the tool</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To build the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Building the solution generates one file: ConfigurationCodeGenerator.exe.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The file SampleRun.cmd has a sample command line that shows how to use this tool to generate the classes for the <bpt id="p1">[</bpt>Transport: UDP<ept id="p1">](../../../../docs/framework/wcf/samples/transport-udp.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To run the tool</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At the command prompt type the following if you have both a custom <ph id="ph1">`BindingElement`</ph> type and a custom <ph id="ph2">`Binding`</ph> type:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Or type the following if you have only a custom <ph id="ph1">`BindingElement`</ph> type:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Or type the following if you have only a custom <ph id="ph1">`Binding`</ph> type:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The command generates three .cs files for the <ph id="ph1">`BindingElement`</ph> (if you specified the /be: option), five .cs files for the standard <ph id="ph2">`Binding`</ph> (if you specified the /sb: option), and a .xml file.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you used the /be option, one of the .cs files implements the <ph id="ph1">`BindingElementExtensionSection`</ph> for your binding element.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This code exposes your <ph id="ph1">`BindingElement`</ph> to the configuration system, so that other custom bindings can use your binding element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The other files have classes that represent defaults and constants.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The files have <ph id="ph1">`//TODO`</ph> comments to remind you to update the default values.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you specified the /sb option, two of the .cs files implement a <ph id="ph1">`StandardBindingElement`</ph> and a <ph id="ph2">`StandardBindingCollectionElement`</ph> respectively, which exposes your standard binding to the configuration system.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The other files have classes that represent defaults and constants.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The files have <ph id="ph1">`//TODO`</ph> comments to remind you to update the default values.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you specified the /sb: option the CodeToAddTo<ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>YourStdBinding<ept id="p1">*</ept>&gt;.cs has code that you must manually add into the class that implements your standard binding.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The SampleConfig.xml file contains the configuration code that you must add to the configuration file that registers the handlers defined in the previous step 1 or 2.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>