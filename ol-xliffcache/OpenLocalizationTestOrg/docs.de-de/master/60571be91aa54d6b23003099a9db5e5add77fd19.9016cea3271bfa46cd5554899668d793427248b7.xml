{"content":"---\ntitle: \"How to: Write Queries with Complex Filtering (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 4065d901-cf89-4e47-8bf9-abb65acfb003\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Write Queries with Complex Filtering (C#)\nSometimes you want to write LINQ to XML queries with complex filters. For example, you might have to find all elements that have a child element with a particular name and value. This topic gives an example of writing a query with complex filtering.  \n  \n## Example  \n This example shows how to find all `PurchaseOrder` elements that have a child `Address` element that has a `Type` attribute equal to \"Shipping\" and a child `State` element equal to \"NY\". It uses a nested query in the `Where` clause, and the `Any` operator returns `true` if the collection has any elements in it. For information about using method-based query syntax, see [Query Syntax and Method Syntax in LINQ](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md).  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md).  \n  \n For more information about the `Any` operator, see [Quantifier Operations (C#)](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md).  \n  \n```csharp  \nXElement root = XElement.Load(\"PurchaseOrders.xml\");  \nIEnumerable<XElement> purchaseOrders =  \n    from el in root.Elements(\"PurchaseOrder\")  \n    where   \n        (from add in el.Elements(\"Address\")  \n        where  \n            (string)add.Attribute(\"Type\") == \"Shipping\" &&  \n            (string)add.Element(\"State\") == \"NY\"  \n        select add)  \n        .Any()  \n    select el;  \nforeach (XElement el in purchaseOrders)  \n    Console.WriteLine((string)el.Attribute(\"PurchaseOrderNumber\"));  \n```  \n  \n This code produces the following output:  \n  \n```  \n99505  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md).  \n  \n```csharp  \nXElement root = XElement.Load(\"PurchaseOrdersInNamespace.xml\");  \nXNamespace aw = \"http://www.adventure-works.com\";  \nIEnumerable<XElement> purchaseOrders =  \n    from el in root.Elements(aw + \"PurchaseOrder\")  \n    where  \n        (from add in el.Elements(aw + \"Address\")  \n         where  \n             (string)add.Attribute(aw + \"Type\") == \"Shipping\" &&  \n             (string)add.Element(aw + \"State\") == \"NY\"  \n         select add)  \n        .Any()  \n    select el;  \nforeach (XElement el in purchaseOrders)  \n    Console.WriteLine((string)el.Attribute(aw + \"PurchaseOrderNumber\"));  \n```  \n  \n This code produces the following output:  \n  \n```  \n99505  \n```  \n  \n## See Also  \n <xref:System.Xml.Linq.XElement.Attribute%2A>   \n <xref:System.Xml.Linq.XContainer.Elements%2A>   \n [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)   \n [Projection Operations (C#)](../../../../csharp/programming-guide/concepts/linq/projection-operations.md)   \n [Quantifier Operations (C#)](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)","nodes":[{"pos":[12,78],"content":"How to: Write Queries with Complex Filtering (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Write Queries with Complex Filtering (C#) | Microsoft Docs","pos":[0,66]}]},{"pos":[363,412],"content":"How to: Write Queries with Complex Filtering (C#)","linkify":"How to: Write Queries with Complex Filtering (C#)","nodes":[{"content":"How to: Write Queries with Complex Filtering (C#)","pos":[0,49]}]},{"content":"Sometimes you want to write LINQ to XML queries with complex filters.","pos":[413,482]},{"content":"For example, you might have to find all elements that have a child element with a particular name and value.","pos":[483,591]},{"content":"This topic gives an example of writing a query with complex filtering.","pos":[592,662]},{"pos":[671,678],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows how to find all <ph id=\"ph1\">`PurchaseOrder`</ph> elements that have a child <ph id=\"ph2\">`Address`</ph> element that has a <ph id=\"ph3\">`Type`</ph> attribute equal to \"Shipping\" and a child <ph id=\"ph4\">`State`</ph> element equal to \"NY\".","pos":[682,868],"source":"This example shows how to find all `PurchaseOrder` elements that have a child `Address` element that has a `Type` attribute equal to \"Shipping\" and a child `State` element equal to \"NY\"."},{"content":"It uses a nested query in the <ph id=\"ph1\">`Where`</ph> clause, and the <ph id=\"ph2\">`Any`</ph> operator returns <ph id=\"ph3\">`true`</ph> if the collection has any elements in it.","pos":[869,994],"source":" It uses a nested query in the `Where` clause, and the `Any` operator returns `true` if the collection has any elements in it."},{"content":"For information about using method-based query syntax, see <bpt id=\"p1\">[</bpt>Query Syntax and Method Syntax in LINQ<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)</ept>.","pos":[995,1189],"source":" For information about using method-based query syntax, see [Query Syntax and Method Syntax in LINQ](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)."},{"pos":[1196,1408],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)."},{"pos":[1415,1572],"content":"For more information about the <ph id=\"ph1\">`Any`</ph> operator, see <bpt id=\"p1\">[</bpt>Quantifier Operations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)</ept>.","source":"For more information about the `Any` operator, see [Quantifier Operations (C#)](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)."},{"content":"This code produces the following output:","pos":[2099,2139]},{"pos":[2171,2178],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[2182,2256]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[2257,2401],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[2408,2624],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders in a Namespace<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md)."},{"content":"This code produces the following output:","pos":[3242,3282]},{"pos":[3314,3322],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept><ph id=\"ph1\"> </ph>","pos":[3424,3541],"source":" [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Projection Operations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/projection-operations.md)</ept><ph id=\"ph1\"> </ph>","pos":[3544,3651],"source":" [Projection Operations (C#)](../../../../csharp/programming-guide/concepts/linq/projection-operations.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Quantifier Operations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)</ept>","pos":[3654,3760],"source":" [Quantifier Operations (C#)](../../../../csharp/programming-guide/concepts/linq/quantifier-operations.md)"}]}