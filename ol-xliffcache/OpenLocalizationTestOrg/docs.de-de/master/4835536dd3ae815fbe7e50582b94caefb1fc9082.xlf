<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="result-tree-fragment-in-transformations.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4835536dd3ae815fbe7e50582b94caefb1fc9082</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\result-tree-fragment-in-transformations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a734aa4783b7ed3a46b58554b4c6a2135b58934</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d572eebce3873bd4b25115ff3124bc3935a1ce2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Result Tree Fragment in Transformations</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Result Tree Fragment in Transformations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](../../../../includes/dnprdnext-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can perform Extensible Stylesheet Language for Transformations (XSLT) transformations using the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Using the XslCompiledTransform Class<ept id="p1">](using-the-xslcompiledtransform-class.md)</ept> and <bpt id="p2">[</bpt>Migrating From the XslTransform Class<ept id="p2">](migrating-from-the-xsltransform-class.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Result tree fragments, also known as result tree fragments, are nothing more than a special type of node set.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can perform any function on them that can be performed on a node set.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Or, you can also convert a result tree fragment to a node set using the <ph id="ph1">`node-set()`</ph> function and subsequently use it any place that a node set can be used.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A result tree fragment is created as a result of using an <ph id="ph1">`&lt;xsl:variable&gt;`</ph> or <ph id="ph2">`&lt;xsl:param&gt;`</ph> element in a specific manner in a style sheet.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The syntax for the <ph id="ph1">`variable`</ph> and <ph id="ph2">`parameter`</ph> elements is as follows:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`parameter`</ph> element, the value is assigned to the qualified name (<ph id="ph2">`Qname`</ph>) in several ways.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can assign a default value to the parameter by returning content from the XML Path Language (XPath) expression in the <ph id="ph1">`select`</ph> attribute, or by assigning it the contents of the template body.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`variable`</ph> element, the value is also assigned in several ways.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can assign it by returning content from the XPath expression in the <ph id="ph1">`select`</ph> attribute, or by assigning it the contents of the template body.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For both the <ph id="ph1">`parameter`</ph> and <ph id="ph2">`variable`</ph> elements, if a value is assigned by the XPath expression, then one of the four basic XPath types will be returned: Boolean, string, number, or node set.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the value is given by using a non-empty template body, then a non-XPath data type is returned, and that will be a result tree fragment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When a variable is bound to a result tree fragment instead of one of the four basic XPath data types, this is the only time that an XPath query returns a type that is not one of the four XPath object types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Result tree fragments and their behavior are discussed in the <bpt id="p1">[</bpt>World Wide Web Consortium (W3C) specification<ept id="p1">](https://www.w3.org/TR/xslt-10/)</ept>, <bpt id="p2">[</bpt>section 11.1 Result Tree Fragments<ept id="p2">](https://www.w3.org/TR/xslt-10/#section-Result-Tree-Fragments)</ept> through <bpt id="p3">[</bpt>section 11.6 Passing Parameters to Templates<ept id="p3">](https://www.w3.org/TR/xslt-10/#section-Passing-Parameters-to-Templates)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Also, <bpt id="p1">[</bpt>section 1 Introduction<ept id="p1">](https://www.w3.org/TR/xslt-10/#section-Introduction)</ept> discusses how templates can contain elements from the XSLT namespace that return or create result tree fragments.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A result tree fragment, in concept, behaves like a node set with nothing more than a single root node.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, the rest of the nodes returned are child nodes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To programmatically see the child nodes, copy the result tree fragment to the result tree using the <ph id="ph1">`&lt;xsl:copy-of&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When the copy-of is performed, all the child nodes are also copied to the result tree in sequence.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Until a <ph id="ph1">`copy`</ph> or <ph id="ph2">`copy-of`</ph> is used, a result tree fragment is not part of the result tree or the output from the transformation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To iterate over the returned nodes of a result tree fragment, an <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> is used.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code sample shows how to create a result tree fragment within a style sheet by calling the function with a parameter <ph id="ph1">`fragment`</ph>, which contains XML.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Here is another sample showing a variable, which is in Rich Text Format (RTF), and hence, a type of result tree fragment, that is not converted to a node set.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Instead, it is passed to a script function, and the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> is used to navigate over the nodes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The result of transforming any XML with this style sheet is shown in the following output.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>As stated above, the <ph id="ph1">`node-set`</ph> function enables you to convert a result tree fragment into a node set.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The resulting node always contains a single node that is the root node of the tree.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you convert a result tree fragment to a node set, then you can use it anywhere a regular node set is used, such as in a for-each statement or in the value of a <ph id="ph1">`select`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following lines of code show the fragment being converted to a node set and used as a node set:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When a fragment is converted to a node set, you no longer use the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> to navigate over it.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For a node set, you use the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNodeIterator&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`$var`</ph> is a variable that is a node tree in the style sheet.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The for-each statement, combined with the <ph id="ph1">`node-set`</ph> function, allows the user to iterate over this tree as a node set.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Here is another example of a variable that is in RTF, and hence of type result tree fragment, that is converted to a node set before being passed to a script function as XPathNodeIterator.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following is the result of transforming XML with this style sheet:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XSLT Transformations with the XslTransform Class<ept id="p1">](xslt-transformations-with-the-xsltransform-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XslTransform Class Implements the XSLT Processor<ept id="p1">](xsltransform-class-implements-the-xslt-processor.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>