<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="csharp-8.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34db8df43f962272f21fc8bf3fa31be06b8fdaf3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\whats-new\csharp-8.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">654f71e2ea1391f5166705e2ce01b0d140064531</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bdf1028d6ae2d4e6da069319348b4d21ddc91409</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>What's New in C# 8.0 - C# Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Get an overview of the new features available in C# 8.0.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This article is up-to-date with preview 2.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What's new in C# 8.0</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are many enhancements to the C# language that you can try out already with preview 2.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The new features added in preview 2 are:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pattern matching enhancements<ept id="p1">](#more-patterns-in-more-places)</ept>:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Switch expressions<ept id="p1">](#switch-expressions)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Property patterns<ept id="p1">](#property-patterns)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tuple patterns<ept id="p1">](#tuple-patterns)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Positional patterns<ept id="p1">](#positional-patterns)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using declarations<ept id="p1">](#using-declarations)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Static local functions<ept id="p1">](#static-local-functions)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Disposable ref structs<ept id="p1">](#disposable-ref-structs)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following language features first appeared in C# 8.0 preview 1:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable reference types<ept id="p1">](#nullable-reference-types)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous streams<ept id="p1">](#asynchronous-streams)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Indices and ranges<ept id="p1">](#indices-and-ranges)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This article was last updated for C# 8.0 preview 2.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The remainder of this article briefly describes these features.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Where in-depth articles are available, links to those tutorials and overviews are provided.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>More patterns in more places</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Pattern matching<ept id="p1">**</ept> gives tools to provide shape-dependent functionality across related but different kinds of data.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>C# 7.0 introduced syntax for type patterns and constant patterns by using the <bpt id="p1">[</bpt><ph id="ph1">`is`</ph><ept id="p1">](../language-reference/keywords/is.md)</ept> expression and the <bpt id="p2">[</bpt><ph id="ph2">`switch`</ph><ept id="p2">](../language-reference/keywords/switch.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These features represented the first tentative steps toward supporting programming paradigms where data and functionality live apart.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As the industry moves toward more microservices and other cloud-based architectures, other language tools are needed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>C# 8.0 expands this vocabulary so you can use more pattern expressions in more places in your code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Consider these features when your data and functionality are separate.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Consider pattern matching when your algorithms depend on a fact other than the runtime type of an object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These techniques provide another way to express designs.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In addition to new patterns in new places, C# 8.0 adds <bpt id="p1">**</bpt>recursive patterns<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The result of any pattern expression is an expression.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A recursive pattern is simply a pattern expression applied to the output of another pattern expression.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>switch expressions</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Often, a <bpt id="p1">[</bpt><ph id="ph1">`switch`</ph><ept id="p1">](../language-reference/keywords/switch.md)</ept> statement produces a value in each of its <ph id="ph2">`case`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Switch expressions<ept id="p1">**</ept> enable you to use more concise expression syntax.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There are fewer repetitive <ph id="ph1">`case`</ph> and <ph id="ph2">`break`</ph> keywords, and fewer curly braces.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As an example, consider the following enum that lists the colors of the rainbow:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You could convert a <ph id="ph1">`Rainbow`</ph> value to its RGB values using the following method containing a switch expression:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>There are several syntax improvements here:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The variable comes before the <ph id="ph1">`switch`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The different order makes it visually easy to distinguish the switch expression from the switch statement.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`case`</ph> and <ph id="ph2">`:`</ph> elements are replaced with <ph id="ph3">`=&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>It's more concise and intuitive.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`default`</ph> case is replaced with a <ph id="ph2">`_`</ph> discard.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The bodies are expressions, not statements.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Contrast that with the equivalent code using the classic <ph id="ph1">`switch`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Property patterns</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>property pattern<ept id="p1">**</ept> enables you to match on properties of the object examined.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Consider an eCommerce site that must compute sales tax based on the buyer's address.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>That computation is not a core responsibility of an <ph id="ph1">`Address`</ph> class.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It will change over time, likely more often than address format changes.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The amount of sales tax depends on the <ph id="ph1">`State`</ph> property of the address.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following method uses the property pattern to compute the sales tax from the address and the price:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Pattern matching creates a concise syntax for expressing this algorithm.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Tuple patterns</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Some algorithms depend on multiple inputs.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tuple patterns<ept id="p1">**</ept> allow you to switch based on multiple values expressed as a <bpt id="p2">[</bpt>tuple<ept id="p2">](../tuples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following code shows a switch expression for the game <bpt id="p1">*</bpt>rock, paper, scissors<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The messages indicate the winner.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The discard case represents the three combinations for ties, or other text inputs.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Positional patterns</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Some types include a <ph id="ph1">`Deconstruct`</ph> method that deconstructs its properties into discrete variables.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Deconstruct`</ph> method is accessible, you can use <bpt id="p1">**</bpt>positional patterns<ept id="p1">**</ept> to inspect properties of the object and use those properties for a pattern.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Consider the following <ph id="ph1">`Point`</ph> class that includes a <ph id="ph2">`Deconstruct`</ph> method to create discrete variables for <ph id="ph3">`X`</ph> and <ph id="ph4">`Y`</ph>:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Additionally, consider the following enum that represents various positions of a quadrant:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following method uses the <bpt id="p1">**</bpt>positional pattern<ept id="p1">**</ept> to extract the values of <ph id="ph1">`x`</ph> and <ph id="ph2">`y`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Then, it uses a <ph id="ph1">`when`</ph> clause to determine the <ph id="ph2">`Quadrant`</ph> of the point:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The discard pattern in the preceding switch matches when either <ph id="ph1">`x`</ph> or <ph id="ph2">`y`</ph> is 0, but not both.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A switch expression must either produce a value or throw an exception.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If none of the cases match, the switch expression throws an exception.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The compiler generates a warning for you if you do not cover all possible cases in your switch expression.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can explore pattern matching techniques in this <bpt id="p1">[</bpt>advanced tutorial on pattern matching<ept id="p1">](../tutorials/pattern-matching.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>using declarations</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>using declaration<ept id="p1">**</ept> is a variable declaration preceded by the <ph id="ph1">`using`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>It tells the compiler that the variable being declared should be disposed at the end of the enclosing scope.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, consider the following code that writes a text file:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In the preceding example, the file is disposed when the closing brace for the method is reached.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>That's the end of the scope in which <ph id="ph1">`file`</ph> is declared.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The preceding code is equivalent to the following code using the classic <bpt id="p1">[</bpt>using statements<ept id="p1">](../language-reference/keywords/using-statement.md)</ept> statement:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the preceding example, the file is disposed when the closing brace associated with the <ph id="ph1">`using`</ph> statement is reached.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In both cases, the compiler generates the call to <ph id="ph1">`Dispose()`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The compiler generates an error if the expression in the using statement is not disposable.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Static local functions</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can now add the <ph id="ph1">`static`</ph> modifier to local functions to ensure that local function doesn't capture (reference) any variables from the enclosing scope.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Doing so generates <ph id="ph1">`CS8421`</ph>, "A static local function can't contain a reference to <ph id="ph2">\&lt;</ph>variable&gt;."</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Consider the following code.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The local function <ph id="ph1">`LocalFunction`</ph> accesses the variable <ph id="ph2">`y`</ph>, declared in the enclosing scope (the method <ph id="ph3">`M`</ph>).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`LocalFunction`</ph> can't be declared with the <ph id="ph2">`static`</ph> modifier:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following code contains a static local function.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>It can be static because it doesn't access any variables in the enclosing scope:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Disposable ref structs</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`struct`</ph> declared with the <ph id="ph2">`ref`</ph> modifier may not implement any interfaces and so cannot implement <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Therefore, to enable a <ph id="ph1">`ref struct`</ph> to be disposed, it must have an accessible <ph id="ph2">`void Dispose()`</ph> method.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This also applies to <ph id="ph1">`readonly ref struct`</ph> declarations.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Nullable reference types</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Inside a nullable annotation context, any variable of a reference type is considered to be a <bpt id="p1">**</bpt>nonnullable reference type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you want to indicate that a variable may be null, you must append the type name with the <ph id="ph1">`?`</ph> to declare the variable as a <bpt id="p1">**</bpt>nullable reference type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For nonnullable reference types, the compiler uses flow analysis to ensure that local variables are initialized to a non-null value when declared.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Fields must be initialized during construction.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The compiler generates a warning if the variable is not set by a call to any of the available constructors or by an initializer.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Furthermore, nonnullable reference types can't be assigned a value that could be null.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Nullable reference types aren't checked to ensure they aren't assigned or initialized to null.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>However, the compiler uses flow analysis to ensure that any variable of a nullable reference type is checked against null before it's accessed or assigned to a nonnullable reference type.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can learn more about the feature in the overview of <bpt id="p1">[</bpt>nullable reference types<ept id="p1">](../nullable-references.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Try it yourself in a new application in this <bpt id="p1">[</bpt>nullable reference types tutorial<ept id="p1">](../tutorials/nullable-reference-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Learn about the steps to migrate an existing codebase to make use of nullable reference types in the <bpt id="p1">[</bpt>migrating an application to use nullable reference types tutorial<ept id="p1">](../tutorials/upgrade-to-nullable-references.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Asynchronous streams</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Starting with C# 8.0, you can create and consume streams asynchronously.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A method that returns an asynchronous stream has three properties:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It's declared with the <ph id="ph1">`async`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It returns an <ph id="ph1">&lt;xref:System.Collections.Generic.IAsyncEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The method contains <ph id="ph1">`yield return`</ph> statements to return successive elements in the asynchronous stream.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Consuming an asynchronous stream requires you to add the <ph id="ph1">`await`</ph> keyword before the <ph id="ph2">`foreach`</ph> keyword when you enumerate the elements of the stream.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`await`</ph> keyword requires the method that enumerates the asynchronous stream to be declared with the <ph id="ph2">`async`</ph> modifier and to return a type allowed for an <ph id="ph3">`async`</ph> method.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Typically that means returning a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>It can also be a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A method can both consume and produce an asynchronous stream, which means it would return an <ph id="ph1">&lt;xref:System.Collections.Generic.IAsyncEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following code generates a sequence from 0 to 19, waiting 100 ms between generating each number:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You would enumerate the sequence using the <ph id="ph1">`await foreach`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You can try asynchronous streams yourself in our tutorial on <bpt id="p1">[</bpt>creating and consuming async streams<ept id="p1">](../tutorials/generate-consume-asynchronous-stream.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Indices and ranges</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Ranges and indices provide a succinct syntax for specifying subranges in an array, <ph id="ph1">&lt;xref:System.Span%601&gt;</ph>, or <ph id="ph2">&lt;xref:System.ReadOnlySpan%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You can specify an index <bpt id="p1">**</bpt>from the end<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You specify <bpt id="p1">**</bpt>from the end<ept id="p1">**</ept> using the <ph id="ph1">`^`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You are familiar with <ph id="ph1">`array[2]`</ph> meaning the element "2 from the start".</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Now, <ph id="ph1">`array[^2]`</ph> means the element "2 from the end".</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The index <ph id="ph1">`^0`</ph> means "the end", or the index that follows the last element.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You can specify a <bpt id="p1">**</bpt>range<ept id="p1">**</ept> with the <bpt id="p2">**</bpt>range operator<ept id="p2">**</ept>: <ph id="ph1">`..`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`0..^0`</ph> specifies the entire range of the array: 0 from the start up to, but not including 0 from the end.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Either operand may use "from the start" or "from the end".</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Furthermore, either operand may be omitted.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The defaults are <ph id="ph1">`0`</ph> for the start index, and <ph id="ph2">`^0`</ph> for the end index.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Let's look at a few examples.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Consider the following array, annotated with its index from the start and from the end:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The index of each element reinforces the concept of "from the start", and "from the end", and that ranges are exclusive of the end of the range.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The "start" of the entire array is the first element.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The "end" of the entire array is <bpt id="p1">*</bpt>past<ept id="p1">*</ept> the last element.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You can retrieve the last word with the <ph id="ph1">`^1`</ph> index:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following code creates a subrange with the words "quick", "brown", and "fox".</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>It includes <ph id="ph1">`words[1]`</ph> through <ph id="ph2">`words[3]`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The element <ph id="ph1">`words[4]`</ph> is not in the range.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The following code creates a subrange with "lazy" and "dog".</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>It includes <ph id="ph1">`words[^2]`</ph> and <ph id="ph2">`words[^1]`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The end index <ph id="ph1">`words[^0]`</ph> is not included:</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The following examples create ranges that are open ended for the start, end, or both:</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You can also declare ranges as variables:</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The range can then be used inside the <ph id="ph1">`[`</ph> and <ph id="ph2">`]`</ph> characters:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>