<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="formatting-types.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0185d79d8663d552378248f0e021a7fee8f0522</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\formatting-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">afcdc5fdb6120c485c58b7ae10c2e8e2faeaa85d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">840a3370e2401a5552f2da7ab13a1d26d0f4ded9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Formatting Types in .NET</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Formatting Types in .NET</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Formatting is the process of converting an instance of a class, structure, or enumeration value to its string representation, often so that the resulting string can be displayed to users or deserialized to restore the original data type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This conversion can pose a number of challenges:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The way that values are stored internally does not necessarily reflect the way that users want to view them.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, a telephone number might be stored in the form 8009999999, which is not user-friendly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It should instead be displayed as 800-999-9999.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Custom Format Strings<ept id="p1">](#customStrings)</ept> section for an example that formats a number in this way.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Sometimes the conversion of an object to its string representation is not intuitive.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, it is not clear how the string representation of a Temperature object or a Person object should appear.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For an example that formats a Temperature object in a variety of ways, see the <bpt id="p1">[</bpt>Standard Format Strings<ept id="p1">](#standardStrings)</ept> section.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Values often require culture-sensitive formatting.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, in an application that uses numbers to reflect monetary values, numeric strings should include the current cultureâ€™s currency symbol, group separator (which, in most cultures, is the thousands separator), and decimal symbol.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>Culture-Sensitive Formatting with Format Providers and the IFormatProvider Interface<ept id="p1">](#FormatProviders)</ept> section.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An application may have to display the same value in different ways.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, an application may represent an enumeration member by displaying a string representation of its name or by displaying its underlying value.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For an example that formats a member of the <ph id="ph1">&lt;xref:System.DayOfWeek&gt;</ph> enumeration in different ways, see the <bpt id="p1">[</bpt>Standard Format Strings<ept id="p1">](#standardStrings)</ept> section.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Formatting converts the value of a type into a string representation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Parsing is the inverse of formatting.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A parsing operation creates an instance of a data type from its string representation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For information about converting strings to other data types, see <bpt id="p1">[</bpt>Parsing Strings<ept id="p1">](../../../docs/standard/base-types/parsing-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>.NET provides rich formatting support that enables developers to address these requirements.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This overview contains the following sections:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting in .NET<ept id="p1">](#NetFormatting)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Default Formatting Using the ToString Method<ept id="p1">](#DefaultToString)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overriding the ToString Method<ept id="p1">](#OverrideToString)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The ToString Method and Format Strings<ept id="p1">](#FormatStrings)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Format Strings<ept id="p1">](#standardStrings)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Format Strings<ept id="p1">](#customStrings)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Format Strings and .NET Class Library Types<ept id="p1">](#stringRef)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Culture-Sensitive Formatting with Format Providers and the IFormatProvider Interface<ept id="p1">](#FormatProviders)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Culture-Sensitive Formatting of Numeric Values<ept id="p1">](#numericCulture)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Culture-Sensitive Formatting of Date and Time Values<ept id="p1">](#dateCulture)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The IFormattable Interface<ept id="p1">](#IFormattable)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](#CompositeFormatting)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Formatting with ICustomFormatter<ept id="p1">](#Custom)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Related Topics<ept id="p1">](#RelatedTopics)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reference<ept id="p1">](#Reference)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Formatting in .NET</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The basic mechanism for formatting is the default implementation of the <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method, which is discussed in the <bpt id="p1">[</bpt>Default Formatting Using the ToString Method<ept id="p1">](#DefaultToString)</ept> section later in this topic.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, .NET provides several ways to modify and extend its default formatting support.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>These include the following:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Overriding the <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method to define a custom string representation of an objectâ€™s value.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Overriding the ToString Method<ept id="p1">](#OverrideToString)</ept> section later in this topic.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Defining format specifiers that enable the string representation of an objectâ€™s value to take multiple forms.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, the "X" format specifier in the following statement converts an integer to the string representation of a hexadecimal value.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about format specifiers, see the <bpt id="p1">[</bpt>ToString Method and Format Strings<ept id="p1">](#FormatStrings)</ept> section.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Using format providers to take advantage of the formatting conventions of a specific culture.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, the following statement displays a currency value by using the formatting conventions of the en-US culture.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information about formatting with format providers, see the <bpt id="p1">[</bpt>Format Providers and the IFormatProvider Interface<ept id="p1">](#FormatProviders)</ept> section.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Implementing the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface to support both string conversion with the <ph id="ph2">&lt;xref:System.Convert&gt;</ph> class and composite formatting.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>IFormattable Interface<ept id="p1">](#IFormattable)</ept> section.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Using composite formatting to embed the string representation of a value in a larger string.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](#CompositeFormatting)</ept> section.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Implementing <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to provide a complete custom formatting solution.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Custom Formatting with ICustomFormatter<ept id="p1">](#Custom)</ept> section.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following sections examine these methods for converting an object to its string representation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Default Formatting Using the ToString Method</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Every type that is derived from <ph id="ph1">&lt;xref:System.Object?displayProperty=nameWithType&gt;</ph> automatically inherits a parameterless <ph id="ph2">`ToString`</ph> method, which returns the name of the type by default.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following example illustrates the default <ph id="ph1">`ToString`</ph> method.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It defines a class named <ph id="ph1">`Automobile`</ph> that has no implementation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When the class is instantiated and its <ph id="ph1">`ToString`</ph> method is called, it displays its type name.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`ToString`</ph> method is not explicitly called in the example.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.Object%29?displayProperty=nameWithType&gt;</ph> method implicitly calls the <ph id="ph2">`ToString`</ph> method of the object passed to it as an argument.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[win81](../../../includes/win81-md.md)]</ph>, the <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> includes an <ph id="ph3">&lt;xref:Windows.Foundation.IStringable&gt;</ph> interface with a single method, <bpt id="p1">[</bpt>IStringable.ToString<ept id="p1">](xref:Windows.Foundation.IStringable.ToString%2A)</ept>, which provides default formatting support.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, we recommend that managed types do not implement the <ph id="ph1">`IStringable`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see "The <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> and the <ph id="ph2">`IStringable`</ph> Interface" section on the <ph id="ph3">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Because all types other than interfaces are derived from <ph id="ph1">&lt;xref:System.Object&gt;</ph>, this functionality is automatically provided to your custom classes or structures.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, the functionality offered by the default <ph id="ph1">`ToString`</ph> method, is limited: Although it identifies the type, it fails to provide any information about an instance of the type.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To provide a string representation of an object that provides information about that object, you must override the <ph id="ph1">`ToString`</ph> method.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Structures inherit from <ph id="ph1">&lt;xref:System.ValueType&gt;</ph>, which in turn is derived from <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> overrides <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>, its implementation is identical.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Overriding the ToString Method</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Displaying the name of a type is often of limited use and does not allow consumers of your types to differentiate one instance from another.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, you can override the <ph id="ph1">`ToString`</ph> method to provide a more useful representation of an objectâ€™s value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> object and overrides its <ph id="ph2">`ToString`</ph> method to display the temperature in degrees Celsius.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In .NET, the <ph id="ph1">`ToString`</ph> method of each primitive value type has been overridden to display the objectâ€™s value instead of its name.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following table shows the override for each primitive type.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Note that most of the overridden methods call another overload of the <ph id="ph1">`ToString`</ph> method and pass it the "G" format specifier, which defines the general format for its type, and an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> object that represents the current culture.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>ToString override</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns either <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Byte.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.Byte&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns the character as a string.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`DateTime.ToString("G", DatetimeFormatInfo.CurrentInfo)`</ph> to format the date and time value for the current culture.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Decimal.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Double.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.Double&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.Int16&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int32.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int64.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`SByte.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.SByte&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Single.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.Single&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`UInt16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.UInt16&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`UInt32.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`UInt64.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> value for the current culture.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The ToString Method and Format Strings</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Relying on the default <ph id="ph1">`ToString`</ph> method or overriding <ph id="ph2">`ToString`</ph> is appropriate when an object has a single string representation.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>However, the value of an object often has multiple representations.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, a temperature can be expressed in degrees Fahrenheit, degrees Celsius, or kelvins.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Similarly, the integer value 10 can be represented in numerous ways, including 10, 10.0, 1.0e01, or $10.00.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To enable a single value to have multiple string representations, .NET uses format strings.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A format string is a string that contains one or more predefined format specifiers, which are single characters or groups of characters that define how the <ph id="ph1">`ToString`</ph> method should format its output.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The format string is then passed as a parameter to the object's <ph id="ph1">`ToString`</ph> method and determines how the string representation of that object's value should appear.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>All numeric types, date and time types, and enumeration types in .NET support a predefined set of format specifiers.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can also use format strings to define multiple string representations of your application-defined data types.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Standard Format Strings</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A standard format string contains a single format specifier, which is an alphabetic character that defines the string representation of the object to which it is applied, along with an optional precision specifier that affects how many digits are displayed in the result string.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If the precision specifier is omitted or is not supported, a standard format specifier is equivalent to a standard format string.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>.NET defines a set of standard format specifiers for all numeric types, all date and time types, and all enumeration types.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example, each of these categories supports a "G" standard format specifier, which defines a general string representation of a value of that type.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Standard format strings for enumeration types directly control the string representation of a value.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The format strings passed to an enumeration valueâ€™s <ph id="ph1">`ToString`</ph> method determine whether the value is displayed using its string name (the "G" and "F" format specifiers), its underlying integral value (the "D" format specifier), or its hexadecimal value (the "X" format specifier).</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of standard format strings to format a <ph id="ph1">&lt;xref:System.DayOfWeek&gt;</ph> enumeration value.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For information about enumeration format strings, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](../../../docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Standard format strings for numeric types usually define a result string whose precise appearance is controlled by one or more property values.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For example, the "C" format specifier formats a number as a currency value.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">`ToString`</ph> method with the "C" format specifier as the only parameter, the following property values from the current cultureâ€™s <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object are used to define the string representation of the numeric value:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A&gt;</ph> property, which specifies the current cultureâ€™s currency symbol.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A&gt;</ph> property, which returns an integer that determines the following:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The placement of the currency symbol.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Whether negative values are indicated by a leading negative sign, a trailing negative sign, or parentheses.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Whether a space appears between the numeric value and the currency symbol.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A&gt;</ph> property, which defines the number of fractional digits in the result string.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph> property, which defines the decimal separator symbol in the result string.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph> property, which defines the group separator symbol.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A&gt;</ph> property, which defines the number of digits in each group to the left of the decimal.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.NegativeSign%2A&gt;</ph> property, which determines the negative sign used in the result string if parentheses are not used to indicate negative values.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In addition, numeric format strings may include a precision specifier.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The meaning of this specifier depends on the format string with which it is used, but it typically indicates either the total number of digits or the number of fractional digits that should appear in the result string.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For example, the following example uses the "X4" standard numeric string and a precision specifier to create a string value that has four hexadecimal digits.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For more information about standard numeric formatting strings, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Standard format strings for date and time values are aliases for custom format strings stored by a particular <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For example, calling the <ph id="ph1">`ToString`</ph> method of a date and time value with the "D" format specifier displays the date and time by using the custom format string stored in the current cultureâ€™s <ph id="ph2">&lt;xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>(For more information about custom format strings, see the <bpt id="p1">[</bpt>next section<ept id="p1">](#customStrings)</ept>.) The following example illustrates this relationship.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For more information about standard date and time format strings, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You can also use standard format strings to define the string representation of an application-defined object that is produced by the objectâ€™s <ph id="ph1">`ToString(String)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You can define the specific standard format specifiers that your object supports, and you can determine whether they are case-sensitive or case-insensitive.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Your implementation of the <ph id="ph1">`ToString(String)`</ph> method should support the following:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A "G" format specifier that represents a customary or common format of the object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The parameterless overload of your object's <ph id="ph1">`ToString`</ph> method should call its <ph id="ph2">`ToString(String)`</ph> overload and pass it the "G" standard format string.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Support for a format specifier that is equal to a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A format specifier that is equal to a null reference should be considered equivalent to the "G" format specifier.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`Temperature`</ph> class can internally store the temperature in degrees Celsius and use format specifiers to represent the value of the <ph id="ph2">`Temperature`</ph> object in degrees Celsius, degrees Fahrenheit, and kelvins.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The following example provides an illustration.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Custom Format Strings</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>In addition to the standard format strings, .NET defines custom format strings for both numeric values and date and time values.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A custom format string consists of one or more custom format specifiers that define the string representation of a value.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For example, the custom date and time format string "yyyy/mm/dd hh:mm:ss.ffff t zzz" converts a date to its string representation in the form "2008/11/15 07:45:00.0000 P -08:00" for the en-US culture.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Similarly, the custom format string "0000" converts the integer value 12 to "0012".</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For a complete list of custom format strings, see <bpt id="p1">[</bpt>Custom Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](../../../docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If a format string consists of a single custom format specifier, the format specifier should be preceded by the percent (%) symbol to avoid confusion with a standard format specifier.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The following example uses the "M" custom format specifier to display a one-digit or two-digit number of the month of a particular date.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Many standard format strings for date and time values are aliases for custom format strings that are defined by properties of the <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Custom format strings also offer considerable flexibility in providing application-defined formatting for numeric values or date and time values.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>You can define your own custom result strings for both numeric values and date and time values by combining multiple custom format specifiers into a single custom format string.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The following example defines a custom format string that displays the day of the week in parentheses after the month name, day, and year.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The following example defines a custom format string that displays an <ph id="ph1">&lt;xref:System.Int64&gt;</ph> value as a standard, seven-digit U.S. telephone number along with its area code.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Although standard format strings can generally handle most of the formatting needs for your application-defined types, you may also define custom format specifiers to format your types.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Format Strings and .NET Types</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>All numeric types (that is, the <ph id="ph1">&lt;xref:System.Byte&gt;</ph>, <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph3">&lt;xref:System.Double&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.Int32&gt;</ph>, <ph id="ph6">&lt;xref:System.Int64&gt;</ph>, <ph id="ph7">&lt;xref:System.SByte&gt;</ph>, <ph id="ph8">&lt;xref:System.Single&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph10">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt64&gt;</ph>, and <ph id="ph12">&lt;xref:System.Numerics.BigInteger&gt;</ph> types), as well as the <ph id="ph13">&lt;xref:System.DateTime&gt;</ph>, <ph id="ph14">&lt;xref:System.DateTimeOffset&gt;</ph>, <ph id="ph15">&lt;xref:System.TimeSpan&gt;</ph>, <ph id="ph16">&lt;xref:System.Guid&gt;</ph>, and all enumeration types, support formatting with format strings.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For information on the specific format strings supported by each type, see the following topics:</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-numeric-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of numeric values.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Numeric Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-numeric-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for numeric values.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-date-and-time-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-date-and-time-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard TimeSpan Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-timespan-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of time intervals.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom TimeSpan Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-timespan-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for time intervals.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](../../../docs/standard/base-types/enumeration-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that are used to create string representations of enumeration values.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Describes standard format strings for <ph id="ph1">&lt;xref:System.Guid&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Culture-Sensitive Formatting with Format Providers and the IFormatProvider Interface</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Although format specifiers let you customize the formatting of objects, producing a meaningful string representation of objects often requires additional formatting information.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>For example, formatting a number as a currency value by using either the "C" standard format string or a custom format string such as "$ #,#.00" requires, at a minimum, information about the correct currency symbol, group separator, and decimal separator to be available to include in the formatted string.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>In .NET, this additional formatting information is made available through the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface, which is provided as a parameter to one or more overloads of the <ph id="ph2">`ToString`</ph> method of numeric types and date and time types.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementations are used in .NET to support culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The following example illustrates how the string representation of an object changes when it is formatted with three <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objects that represent different cultures.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface includes one method, <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%28System.Type%29&gt;</ph>, which has a single parameter that specifies the type of object that provides formatting information.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If the method can provide an object of that type, it returns it.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> is a callback method.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When you call a <ph id="ph1">`ToString`</ph> method overload that includes an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parameter, it calls the <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method of that <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method is responsible for returning an object that provides the necessary formatting information, as specified by its <ph id="ph2">`formatType`</ph> parameter, to the <ph id="ph3">`ToString`</ph> method.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A number of formatting or string conversion methods include a parameter of type <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>, but in many cases the value of the parameter is ignored when the method is called.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The following table lists some of the formatting methods that use the parameter and the type of the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that they pass to the <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Type of <ph id="ph1">`formatType`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ToString`</ph> method of numeric types</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ToString`</ph> method of date and time types</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ToString`</ph> methods of the numeric types and date and time types are overloaded, and only some of the overloads include an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>If a method does not have a parameter of type <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>, the object that is returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> property is passed instead.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For example, a call to the default <ph id="ph1">&lt;xref:System.Int32.ToString?displayProperty=nameWithType&gt;</ph> method ultimately results in a method call such as the following: <ph id="ph2">`Int32.ToString("G", System.Globalization.CultureInfo.CurrentCulture)`</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>.NET provides three classes that implement <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph>, a class that provides formatting information for date and time values for a specific culture.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Its <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> implementation returns an instance of itself.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>, a class that provides numeric formatting information for a specific culture.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Its <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> implementation returns an instance of itself.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Its <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> implementation can return either a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object to provide numeric formatting information or a <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object to provide formatting information for date and time values.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>You can also implement your own format provider to replace any one of these classes.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>However, your implementationâ€™s <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method must return an object of the type listed in the previous table if it has to provide formatting information to the <ph id="ph2">`ToString`</ph> method.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Culture-Sensitive Formatting of Numeric Values</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>By default, the formatting of numeric values is culture-sensitive.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If you do not specify a culture when you call a formatting method, the formatting conventions of the current thread culture are used.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, which changes the current thread culture four times and then calls the <ph id="ph1">&lt;xref:System.Decimal.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>In each case, the result string reflects the formatting conventions of the current culture.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This is because the <ph id="ph1">`ToString`</ph> and <ph id="ph2">`ToString(String)`</ph> methods wrap calls to each numeric type's <ph id="ph3">`ToString(String, IFormatProvider)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>You can also format a numeric value for a specific culture by calling a <ph id="ph1">`ToString`</ph> overload that has a <ph id="ph2">`provider`</ph> parameter and passing it either of the following:</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture whose formatting conventions are to be used.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Its <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType&gt;</ph> method returns the value of the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType&gt;</ph> property, which is the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information for numeric values.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that defines the culture-specific formatting conventions to be used.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Its <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.GetFormat%2A&gt;</ph> method returns an instance of itself.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objects that represent the English (United States) and English (Great Britain) cultures and the French and Russian neutral cultures to format a floating-point number.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Culture-Sensitive Formatting of Date and Time Values</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>By default, the formatting of date and time values is culture-sensitive.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>If you do not specify a culture when you call a formatting method, the formatting conventions of the current thread culture are used.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, which changes the current thread culture four times and then calls the <ph id="ph1">&lt;xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>In each case, the result string reflects the formatting conventions of the current culture.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This is because the <ph id="ph1">&lt;xref:System.DateTime.ToString?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.DateTimeOffset.ToString?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph> methods wrap calls to the <ph id="ph5">&lt;xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph6">&lt;xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>You can also format a date and time value for a specific culture by calling a <ph id="ph1">&lt;xref:System.DateTime.ToString%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType&gt;</ph> overload that has a <ph id="ph3">`provider`</ph> parameter and passing it either of the following:</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture whose formatting conventions are to be used.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Its <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType&gt;</ph> method returns the value of the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType&gt;</ph> property, which is the <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that provides culture-specific formatting information for date and time values.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that defines the culture-specific formatting conventions to be used.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Its <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A&gt;</ph> method returns an instance of itself.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objects that represent the English (United States) and English (Great Britain) cultures and the French and Russian neutral cultures to format a date.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The IFormattable Interface</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Typically, types that overload the <ph id="ph1">`ToString`</ph> method with a format string and an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parameter also implement the <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>This interface has a single member, <ph id="ph1">&lt;xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>, that includes both a format string and a format provider as parameters.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Implementing the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface for your application-defined class offers two advantages:</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Support for string conversion by the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> methods call your <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> implementation automatically.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Support for composite formatting.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>If a format item that includes a format string is used to format your custom type, the common language runtime automatically calls your <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> implementation and passes it the format string.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>For more information about composite formatting with methods such as <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>, see the <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](#CompositeFormatting)</ept> section.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>It supports the "C" or "G" format specifiers to display the temperature in Celsius, the "F" format specifier to display the temperature in Fahrenheit, and the "K" format specifier to display the temperature in Kelvin.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The following example instantiates a <ph id="ph1">`Temperature`</ph> object.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%2A&gt;</ph> method and uses several composite format strings to obtain different string representations of a <ph id="ph2">`Temperature`</ph> object.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Each of these method calls, in turn, calls the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> implementation of the <ph id="ph2">`Temperature`</ph> class.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Composite Formatting</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Some methods, such as <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType&gt;</ph>, support composite formatting.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>A composite format string is a kind of template that returns a single string that incorporates the string representation of zero, one, or more objects.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Each object is represented in the composite format string by an indexed format item.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The index of the format item corresponds to the position of the object that it represents in the method's parameter list.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Indexes are zero-based.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>For example, in the following call to the <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> method, the first format item, <ph id="ph2">`{0:D}`</ph>, is replaced by the string representation of <ph id="ph3">`thatDate`</ph>; the second format item, <ph id="ph4">`{1}`</ph>, is replaced by the string representation of <ph id="ph5">`item1`</ph>; and the third format item, <ph id="ph6">`{2:C2}`</ph>, is replaced by the string representation of <ph id="ph7">`item1.Value`</ph>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>In addition to replacing a format item with the string representation of its corresponding object, format items also let you control the following:</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The specific way in which an object is represented as a string, if the object implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface and supports format strings.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>You do this by following the format item's index with a <ph id="ph1">`:`</ph> (colon) followed by a valid format string.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The previous example did this by formatting a date value with the "d" (short date pattern) format string (e.g., <ph id="ph1">`{0:d}`</ph>) and   by formatting a numeric value with the "C2" format string (e.g., <ph id="ph2">`{2:C2}`</ph> to represent the number as a currency value with two fractional decimal digits.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The width of the field that contains the object's string representation, and the alignment of the string representation in that field.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>You do this by following the format item's index with a <ph id="ph1">`,`</ph> (comma) followed the field width.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The string is right-aligned in the field if the field width is a positive value, and it is left-aligned if the field width is a negative value.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The following example left-aligns date values in a 20-character field, and it right-aligns decimal values with one fractional digit in an 11-character field.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Note that, if both the alignment string component and the format string component are present, the former precedes the latter (for example, <ph id="ph1">`{0,-20:g}`</ph>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For more information about composite formatting, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](../../../docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Custom Formatting with ICustomFormatter</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Two composite formatting methods, <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>, include a format provider parameter that supports custom formatting.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>When either of these formatting methods is called, it passes a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents an <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> interface to the format providerâ€™s <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method is then responsible for returning the <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> implementation that provides custom formatting.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface has a single method, <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29&gt;</ph>, that is called automatically by a composite formatting method, once for each format item in a composite format string.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29&gt;</ph> method has three parameters: a format string, which represents the <ph id="ph2">`formatString`</ph> argument in a format item, an object to format, and an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> object that provides formatting services.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Typically, the class that implements <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> also implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>, so this last parameter is a reference to the custom formatting class itself.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The method returns a custom formatted string representation of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>If the method cannot format the object, it should return a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The following example provides an <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementation named <ph id="ph2">`ByteByByteFormatter`</ph> that displays integer values as a sequence of two-digit hexadecimal values followed by a space.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`ByteByByteFormatter`</ph> class to format integer values.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> method is called more than once in the second <ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method call, and that the default <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider is used in the third method call because the .<ph id="ph4">`ByteByByteFormatter.Format`</ph></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>method does not recognize the "N0" format string and returns a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-numeric-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of numeric values.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Numeric Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-numeric-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for numeric values.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-date-and-time-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-date-and-time-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard TimeSpan Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-timespan-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of time intervals.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom TimeSpan Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-timespan-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for time intervals.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](../../../docs/standard/base-types/enumeration-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that are used to create string representations of enumeration values.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](../../../docs/standard/base-types/composite-formatting.md)</ept></source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Describes how to embed one or more formatted values in a string.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The string can subsequently be displayed on the console or written to a stream.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performing Formatting Operations<ept id="p1">](../../../docs/standard/base-types/performing-formatting-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Lists topics that provide step-by-step instructions for performing specific formatting operations.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing Strings<ept id="p1">](../../../docs/standard/base-types/parsing-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Describes how to initialize objects to the values described by string representations of those objects.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Parsing is the inverse operation of formatting.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#Introduction)</ept></source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>