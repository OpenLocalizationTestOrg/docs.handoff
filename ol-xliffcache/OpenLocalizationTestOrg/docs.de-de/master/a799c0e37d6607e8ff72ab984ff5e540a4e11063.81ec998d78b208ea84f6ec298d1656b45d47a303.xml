{"content":"---\ntitle: \"&amp; Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 10/29/2018\nf1_keywords: \n  - \"&_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"bitwise AND operator [C#]\"\n  - \"ampersand operator (&) [C#]\"\n  - \"& operator [C#]\"\n  - \"AND operator (&) [C#]\"\nms.assetid: afa346d5-90ec-4b1f-a2c8-3881f018741d\n---\n# &amp; Operator (C# Reference)\n\nThe `&` operator is supported in two forms: a unary address-of operator or a binary logical operator.\n\n## Unary address-of operator\n\nThe unary `&` operator returns the address of its operand. For more information, see [How to: obtain the address of a variable](../../programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md).\n\nThe address-of operator `&` requires [unsafe](../keywords/unsafe.md) context.\n\n## Integer logical bitwise AND operator\n\nFor integer types, the `&` operator computes the logical bitwise AND of its operands:\n\n[!code-csharp-interactive[integer logical bitwise AND](~/samples/snippets/csharp/language-reference/operators/AndOperatorExamples.cs#IntegerOperands)]\n\n> [!NOTE]\n> The preceding example uses the binary literals [introduced in C# 7.0](../../whats-new/csharp-7.md#numeric-literal-syntax-improvements) and [enhanced in C# 7.2](../../whats-new/csharp-7-2.md#leading-underscores-in-numeric-literals).\n\nBecause operations on integer types are generally allowed on enumeration types, the `&` operator also supports [enum](../keywords/enum.md) operands.\n\n## Boolean logical AND operator\n\nFor [bool](../keywords/bool.md) operands, the `&` operator computes the logical AND of its operands. The result of `x & y` is `true` if both `x` and `y` are `true`. Otherwise, the result is `false`.\n\nThe `&` operator evaluates both operands even if the first operand evaluates to `false`, so that the result must be `false` regardless of the value of the second operand. The following example demonstrates that behavior:\n\n[!code-csharp-interactive[bool logical AND](~/samples/snippets/csharp/language-reference/operators/AndOperatorExamples.cs#BooleanOperands)]\n\nThe [conditional AND operator](conditional-and-operator.md) `&&` also computes the logical AND of its operands, but evaluates the second operand only if the first operand evaluates to `true`.\n\nFor nullable bool operands, the behavior of the `&` operator is consistent with SQL's three-valued logic. For more information, see the [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article.\n\n## Operator overloadability\n\nUser-defined types can [overload](../keywords/operator.md) the binary `&` operator. When a binary `&` operator is overloaded, the [AND assignment operator](and-assignment-operator.md) `&=` is also implicitly overloaded.\n\n## C# language specification\n\nFor more information, see [The address-of operator](~/_csharplang/spec/unsafe-code.md#the-address-of-operator) and [Logical operators](~/_csharplang/spec/expressions.md#logical-operators) sections of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [Pointer types](../../programming-guide/unsafe-code-pointers/pointer-types.md)\n- [| operator](or-operator.md)\n- [^ operator](xor-operator.md)\n- [~ operator](bitwise-complement-operator.md)\n- [&& operator](conditional-and-operator.md)\n","nodes":[{"pos":[4,306],"embed":true,"restype":"x-metadata","content":"title: \"&amp; Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 10/29/2018\nf1_keywords: \n  - \"&_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"bitwise AND operator [C#]\"\n  - \"ampersand operator (&) [C#]\"\n  - \"& operator [C#]\"\n  - \"AND operator (&) [C#]\"\nms.assetid: afa346d5-90ec-4b1f-a2c8-3881f018741d","nodes":[{"content":"&amp; Operator - C# Reference","nodes":[{"pos":[0,29],"content":"&amp; Operator - C# Reference","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph> Operator - C# Reference","pos":[0,29],"source":"&amp; Operator - C# Reference"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[313,342],"content":"&amp; Operator (C# Reference)","linkify":"&amp; Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph> Operator (C# Reference)","pos":[0,29],"source":"&amp; Operator (C# Reference)"}]},{"pos":[344,445],"content":"The <ph id=\"ph1\">`&amp;`</ph> operator is supported in two forms: a unary address-of operator or a binary logical operator.","source":"The `&` operator is supported in two forms: a unary address-of operator or a binary logical operator."},{"pos":[450,475],"content":"Unary address-of operator","linkify":"Unary address-of operator","nodes":[{"content":"Unary address-of operator","pos":[0,25]}]},{"content":"The unary <ph id=\"ph1\">`&amp;`</ph> operator returns the address of its operand.","pos":[477,535],"source":"The unary `&` operator returns the address of its operand."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: obtain the address of a variable<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md)</ept>.","pos":[536,694],"source":" For more information, see [How to: obtain the address of a variable](../../programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md)."},{"pos":[696,773],"content":"The address-of operator <ph id=\"ph1\">`&amp;`</ph> requires <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../keywords/unsafe.md)</ept> context.","source":"The address-of operator `&` requires [unsafe](../keywords/unsafe.md) context."},{"pos":[778,814],"content":"Integer logical bitwise AND operator","linkify":"Integer logical bitwise AND operator","nodes":[{"content":"Integer logical bitwise AND operator","pos":[0,36]}]},{"pos":[816,901],"content":"For integer types, the <ph id=\"ph1\">`&amp;`</ph> operator computes the logical bitwise AND of its operands:","source":"For integer types, the `&` operator computes the logical bitwise AND of its operands:"},{"pos":[1057,1298],"content":"[!NOTE]\nThe preceding example uses the binary literals [introduced in C# 7.0](../../whats-new/csharp-7.md#numeric-literal-syntax-improvements) and [enhanced in C# 7.2](../../whats-new/csharp-7-2.md#leading-underscores-in-numeric-literals).","leadings":["","> "],"nodes":[{"content":"The preceding example uses the binary literals <bpt id=\"p1\">[</bpt>introduced in C# 7.0<ept id=\"p1\">](../../whats-new/csharp-7.md#numeric-literal-syntax-improvements)</ept> and <bpt id=\"p2\">[</bpt>enhanced in C# 7.2<ept id=\"p2\">](../../whats-new/csharp-7-2.md#leading-underscores-in-numeric-literals)</ept>.","pos":[8,239],"source":"The preceding example uses the binary literals [introduced in C# 7.0](../../whats-new/csharp-7.md#numeric-literal-syntax-improvements) and [enhanced in C# 7.2](../../whats-new/csharp-7-2.md#leading-underscores-in-numeric-literals)."}]},{"pos":[1300,1448],"content":"Because operations on integer types are generally allowed on enumeration types, the <ph id=\"ph1\">`&amp;`</ph> operator also supports <bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](../keywords/enum.md)</ept> operands.","source":"Because operations on integer types are generally allowed on enumeration types, the `&` operator also supports [enum](../keywords/enum.md) operands."},{"pos":[1453,1481],"content":"Boolean logical AND operator","linkify":"Boolean logical AND operator","nodes":[{"content":"Boolean logical AND operator","pos":[0,28]}]},{"content":"For <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../keywords/bool.md)</ept> operands, the <ph id=\"ph1\">`&amp;`</ph> operator computes the logical AND of its operands.","pos":[1483,1583],"source":"For [bool](../keywords/bool.md) operands, the `&` operator computes the logical AND of its operands."},{"content":"The result of <ph id=\"ph1\">`x &amp; y`</ph> is <ph id=\"ph2\">`true`</ph> if both <ph id=\"ph3\">`x`</ph> and <ph id=\"ph4\">`y`</ph> are <ph id=\"ph5\">`true`</ph>.","pos":[1584,1647],"source":" The result of `x & y` is `true` if both `x` and `y` are `true`."},{"content":"Otherwise, the result is <ph id=\"ph1\">`false`</ph>.","pos":[1648,1681],"source":" Otherwise, the result is `false`."},{"content":"The <ph id=\"ph1\">`&amp;`</ph> operator evaluates both operands even if the first operand evaluates to <ph id=\"ph2\">`false`</ph>, so that the result must be <ph id=\"ph3\">`false`</ph> regardless of the value of the second operand.","pos":[1683,1853],"source":"The `&` operator evaluates both operands even if the first operand evaluates to `false`, so that the result must be `false` regardless of the value of the second operand."},{"content":"The following example demonstrates that behavior:","pos":[1854,1903]},{"pos":[2046,2237],"content":"The <bpt id=\"p1\">[</bpt>conditional AND operator<ept id=\"p1\">](conditional-and-operator.md)</ept> <ph id=\"ph1\">`&amp;&amp;`</ph> also computes the logical AND of its operands, but evaluates the second operand only if the first operand evaluates to <ph id=\"ph2\">`true`</ph>.","source":"The [conditional AND operator](conditional-and-operator.md) `&&` also computes the logical AND of its operands, but evaluates the second operand only if the first operand evaluates to `true`."},{"content":"For nullable bool operands, the behavior of the <ph id=\"ph1\">`&amp;`</ph> operator is consistent with SQL's three-valued logic.","pos":[2239,2344],"source":"For nullable bool operands, the behavior of the `&` operator is consistent with SQL's three-valued logic."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>The bool? type<ept id=\"p1\">](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type)</ept> section of the <bpt id=\"p2\">[</bpt>Using nullable types<ept id=\"p2\">](../../programming-guide/nullable-types/using-nullable-types.md)</ept> article.","pos":[2345,2580],"source":" For more information, see the [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article."},{"pos":[2585,2609],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"User-defined types can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../keywords/operator.md)</ept> the binary <ph id=\"ph1\">`&amp;`</ph> operator.","pos":[2611,2694],"source":"User-defined types can [overload](../keywords/operator.md) the binary `&` operator."},{"content":"When a binary <ph id=\"ph1\">`&amp;`</ph> operator is overloaded, the <bpt id=\"p1\">[</bpt>AND assignment operator<ept id=\"p1\">](and-assignment-operator.md)</ept> <ph id=\"ph2\">`&amp;=`</ph> is also implicitly overloaded.","pos":[2695,2830],"source":" When a binary `&` operator is overloaded, the [AND assignment operator](and-assignment-operator.md) `&=` is also implicitly overloaded."},{"pos":[2835,2860],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2862,3130],"content":"For more information, see <bpt id=\"p1\">[</bpt>The address-of operator<ept id=\"p1\">](~/_csharplang/spec/unsafe-code.md#the-address-of-operator)</ept> and <bpt id=\"p2\">[</bpt>Logical operators<ept id=\"p2\">](~/_csharplang/spec/expressions.md#logical-operators)</ept> sections of the <bpt id=\"p3\">[</bpt>C# language specification<ept id=\"p3\">](../language-specification/index.md)</ept>.","source":"For more information, see [The address-of operator](~/_csharplang/spec/unsafe-code.md#the-address-of-operator) and [Logical operators](~/_csharplang/spec/expressions.md#logical-operators) sections of the [C# language specification](../language-specification/index.md)."},{"pos":[3135,3143],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3147,3174],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[3177,3233],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[3236,3260],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[3263,3341],"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/pointer-types.md)</ept>","source":"[Pointer types](../../programming-guide/unsafe-code-pointers/pointer-types.md)"},{"pos":[3344,3372],"content":"<bpt id=\"p1\">[</bpt>| operator<ept id=\"p1\">](or-operator.md)</ept>","source":"[| operator](or-operator.md)"},{"pos":[3375,3404],"content":"<bpt id=\"p1\">[</bpt>^ operator<ept id=\"p1\">](xor-operator.md)</ept>","source":"[^ operator](xor-operator.md)"},{"pos":[3407,3451],"content":"<bpt id=\"p1\">[</bpt>~ operator<ept id=\"p1\">](bitwise-complement-operator.md)</ept>","source":"[~ operator](bitwise-complement-operator.md)"},{"pos":[3454,3496],"content":"<bpt id=\"p1\">[</bpt>&amp;&amp; operator<ept id=\"p1\">](conditional-and-operator.md)</ept>","source":"[&& operator](conditional-and-operator.md)"}]}