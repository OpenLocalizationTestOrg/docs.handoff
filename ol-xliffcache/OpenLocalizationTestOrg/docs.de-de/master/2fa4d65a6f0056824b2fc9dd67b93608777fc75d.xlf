<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="tracking-profiles.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2fa4d65a6f0056824b2fc9dd67b93608777fc75d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\tracking-profiles.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc745bacf6975fa905622ffa186844d77c9fdb13</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30bc257afe6113b0ea8256e49b13468b39033929</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Tracking Profiles</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tracking Profiles</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Tracking profiles contain tracking queries that permit a tracking participant to subscribe to workflow events that are emitted when the state of a workflow instance changes at runtime.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Tracking Profiles</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Tracking profiles are used to specify which tracking information is emitted for a workflow instance.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If no profile is specified, then all tracking events are emitted.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a profile is specified, then the tracking events specified in the profile will be emitted.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Depending on your monitoring requirements, you may write a profile that is very general, which subscribes to a small set of high-level state changes on a workflow.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Conversely, you may create a very detailed profile whose resulting events are rich enough to reconstruct a detailed execution flow later.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Tracking profiles manifest themselves as XML elements within a standard <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> configuration file or specified in code.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example is of a <ph id="ph1">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph> tracking profile in a configuration file that allows a tracking participant to subscribe to the <ph id="ph2">`Started`</ph> and <ph id="ph3">`Completed`</ph> workflow events.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example shows the equivalent tracking profile created using code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Tracking records are filtered through the visibility mode within a tracking profile by using the <ph id="ph1">&lt;xref:System.Activities.Tracking.ImplementationVisibility&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A composite activity is a top-level activity that contains other activities that form its implementation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The visibility mode specifies the tracking records emitted from composite activities within a workflow activity, to specify if activities that form the implementation are being tracked.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The visibility mode applies at the tracking profile level.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The filtering of tracking records for individual activities within a workflow is controlled by the queries within the tracking profile.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>Tracking Profile Query Types<ept id="p1">**</ept> section in this document.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The two visibility modes specified by the <ph id="ph1">`implementationVisibility`</ph> attribute in the tracking profile are <ph id="ph2">`RootScope`</ph> and <ph id="ph3">`All`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`RootScope`</ph> mode suppresses the tracking records for activities that form the implementation of an activity in the case where a composite activity is not the root of a workflow.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This implies that, when an activity that is implemented using other activities is added to a workflow, and the <ph id="ph1">`implementationVisibility`</ph> set to RootScope, only the top-level activity within that composite activity is tracked.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If an activity is the root of the workflow, then the implementation of the activity is the workflow itself and tracking records are emitted for activities that form the implementation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Using the All mode permits all tracking records to be emitted for the root activity and all its composite activities.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, suppose <bpt id="p1">*</bpt>MyActivity<ept id="p1">*</ept> is a composite activity whose implementation contains two activities, <bpt id="p2">*</bpt>Activity1<ept id="p2">*</ept> and <bpt id="p3">*</bpt>Activity2<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When this activity is added to a workflow and tracking is enabled with a tracking profile with <ph id="ph1">`implementationVisibility`</ph> set to <ph id="ph2">`RootScope`</ph>, tracking records are emitted only for <bpt id="p1">*</bpt>MyActivity<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, no records are emitted for activities <bpt id="p1">*</bpt>Activity1<ept id="p1">*</ept> and <bpt id="p2">*</bpt>Activity2<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, if the <ph id="ph1">`implementationVisibility`</ph> attribute for the tracking profile is  set to <ph id="ph2">`All`</ph>, then tracking records are emitted not only for <bpt id="p1">*</bpt>MyActivity<ept id="p1">*</ept>, but also for activities <bpt id="p2">*</bpt>Activity1<ept id="p2">*</ept> and <bpt id="p3">*</bpt>Activity2<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`implementationVisibility`</ph> flag applies to following tracking record types:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>ActivityStateRecord</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>FaultPropagationRecord</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CancelRequestedRecord</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>ActivityScheduledRecord</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CustomTrackingRecords emitted from activity implementation are not filtered out by the implementationVisibility setting.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`implementationVisibility`</ph> functionality is specified as <ph id="ph2">&lt;xref:System.Activities.Tracking.ImplementationVisibility.RootScope&gt;</ph> on the tracking profile in code as follows:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`implementationVisibility`</ph> functionality is specified as <ph id="ph2">&lt;xref:System.Activities.Tracking.ImplementationVisibility.All&gt;</ph> on the tracking profile in a configuration file as follows:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ImplementationVisibility`</ph> setting on the tracking profile is optional.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>By default, its value is set to <ph id="ph1">`RootScope`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The values for this attribute are also case-sensitive.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Tracking Profile Query Types</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Tracking profiles are structured as declarative subscriptions for tracking records that allow you to query the workflow runtime for specific tracking records.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There are several query types that allow you subscribe to different classes of <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Tracking profiles can be specified in configuration or through code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Here are the most common query types:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Tracking.WorkflowInstanceQuery&gt;</ph> - Use this to track workflow instance life cycle changes like the previously-demonstrated <ph id="ph2">`Started`</ph> and <ph id="ph3">`Completed`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Tracking.WorkflowInstanceQuery&gt;</ph> is used to subscribe to the following <ph id="ph2">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> objects:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The states that can be subscribed to are specified in the <ph id="ph1">&lt;xref:System.Activities.Tracking.WorkflowInstanceStates&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The configuration or code used to subscribe to workflow instance-level tracking records for the <ph id="ph1">`Started`</ph> instance state using the <ph id="ph2">&lt;xref:System.Activities.Tracking.WorkflowInstanceQuery&gt;</ph> is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Tracking.ActivityStateQuery&gt;</ph> - Use this to track life cycle changes of the activities that make up a workflow instance.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, you may want to keep track of every time the "Send E-Mail" activity completes within a workflow instance.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This query is necessary for a <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> to subscribe to <ph id="ph2">&lt;xref:System.Activities.Tracking.ActivityStateRecord&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The available states to subscribe to are specified in <ph id="ph1">&lt;xref:System.Activities.Tracking.ActivityStates&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The configuration and code used to subscribe activity state tracking records that use the <ph id="ph1">&lt;xref:System.Activities.Tracking.ActivityStateQuery&gt;</ph> for the <ph id="ph2">`SendEmailActivity`</ph> activity is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If multiple activityStateQuery elements have the same name, only the states in the last element are used in the tracking profile.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Tracking.ActivityScheduledQuery&gt;</ph> - This query allows you to track an activity scheduled for execution by a parent activity.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The query is necessary for a <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> to subscribe to <ph id="ph2">&lt;xref:System.Activities.Tracking.ActivityScheduledRecord&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The configuration and code used to subscribe to records related to the <ph id="ph1">`SendEmailActivity`</ph> child activity being scheduled using the <ph id="ph2">&lt;xref:System.Activities.Tracking.ActivityScheduledQuery&gt;</ph> is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Tracking.FaultPropagationQuery&gt;</ph> - Use this to track the handling of faults that occur within an activity.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The query is necessary for a <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> to subscribe to <ph id="ph2">&lt;xref:System.Activities.Tracking.FaultPropagationRecord&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The configuration and code used to subscribe to records related to fault propagation using <ph id="ph1">&lt;xref:System.Activities.Tracking.FaultPropagationQuery&gt;</ph> is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Tracking.CancelRequestedQuery&gt;</ph> - Use this to track requests to cancel a child activity by the parent activity.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The query is necessary for a <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> to subscribe to <ph id="ph2">&lt;xref:System.Activities.Tracking.CancelRequestedRecord&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The configuration and code used to subscribe to records related to activity cancellation using <ph id="ph1">&lt;xref:System.Activities.Tracking.CancelRequestedQuery&gt;</ph> is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Tracking.CustomTrackingQuery&gt;</ph> - Use this to track events that you define in your code activities.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The query is necessary for a <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> to subscribe to <ph id="ph2">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The configuration and code used to subscribe to records related to custom tracking records using <ph id="ph1">&lt;xref:System.Activities.Tracking.CustomTrackingQuery&gt;</ph> is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Tracking.BookmarkResumptionQuery&gt;</ph> - Use this to track resumption of a bookmark within a workflow instance.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This query is necessary for a <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> to subscribe to <ph id="ph2">&lt;xref:System.Activities.Tracking.BookmarkResumptionRecord&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The configuration and code used to subscribe to records related to bookmark resumption using <ph id="ph1">&lt;xref:System.Activities.Tracking.BookmarkResumptionQuery&gt;</ph> is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Annotations</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Annotations allow you to arbitrarily tag tracking records with a value that can be configured after build time.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, you might want several tracking records across several workflows to be tagged with "Mail Server" == "Mail Server1".</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This makes it easy to find all records with this tag when querying tracking records later.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To accomplish this, an annotation is added to a tracking query as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>How to Create a Tracking Profile</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Tracking query elements are used to create a tracking profile using either an XML configuration file or <ph id="ph1">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph>code.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Here is an example of a tracking profile created using a configuration file.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For a WF using the Workflow service host, the tracking profile is typically created using a configuration file.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It is also possible to create a tracking profile with code using the tracking profile and tracking query API.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A profile configured as an XML configuration file is applied to a tracking participant using a behavior extension.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This is added to a WorkflowServiceHost as described in the later section <bpt id="p1">[</bpt>Configuring Tracking for a Workflow<ept id="p1">](configuring-tracking-for-a-workflow.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The verbosity of the tracking records emitted by the host is determined by configuration settings within the tracking profile.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A tracking participant subscribes to tracking records by adding queries to a tracking profile.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To subscribe to all tracking records, the tracking profile needs to specify all tracking queries using "<ph id="ph1">\*</ph>" in the name fields in each of the queries.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Here are some of the common examples of tracking profiles.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A tracking profile to obtain workflow instance records and faults.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A tracking profile to obtain all custom tracking records.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL Tracking<ept id="p1">](./samples/sql-tracking.md)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Server App Fabric Monitoring<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=201273)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Monitoring Applications with App Fabric<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=201275)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>