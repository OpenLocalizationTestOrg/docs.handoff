<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="introduction-to-generics.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3092eb1e5435bbced565b02d989a57abf2d52e0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\generics\introduction-to-generics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">246f7710ec42e4bc7914282532878a8cc0e1d96e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d05cdade90638d1c61460058cb5afba423e5c0f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Introduction to Generics (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introduction to Generics (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Generic classes and methods combine reusability, type safety and efficiency in a way that their non-generic counterparts cannot.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Generics are most frequently used with collections and the methods that operate on them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Version 2.0 of the .NET Framework class library provides a new namespace, <ph id="ph1">&lt;xref:System.Collections.Generic&gt;</ph>, which contains several new generic-based collection classes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is recommended that all applications that target the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> 2.0 and later use the new generic collection classes instead of the older non-generic counterparts such as <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](../../../csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Of course, you can also create custom generic types and methods to provide your own generalized solutions and design patterns that are type-safe and efficient.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following code example shows a simple generic linked-list class for demonstration purposes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(In most cases, you should use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class provided by the .NET Framework class library instead of creating your own.) The type parameter <ph id="ph2">`T`</ph> is used in several locations where a concrete type would ordinarily be used to indicate the type of the item stored in the list.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It is used in the following ways:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As the type of a method parameter in the <ph id="ph1">`AddHead`</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>As the return type of the public method <ph id="ph1">`GetNext`</ph> and the <ph id="ph2">`Data`</ph> property in the nested <ph id="ph3">`Node`</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As the type of the private member data in the nested class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that T is available to the nested <ph id="ph1">`Node`</ph> class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`GenericList&lt;T&gt;`</ph> is instantiated with a concrete type, for example as a <ph id="ph2">`GenericList&lt;int&gt;`</ph>, each occurrence of <ph id="ph3">`T`</ph> will be replaced with <ph id="ph4">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code example shows how client code uses the generic <ph id="ph1">`GenericList&lt;T&gt;`</ph> class to create a list of integers.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Simply by changing the type argument, the following code could easily be modified to create lists of strings or any other custom type:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic&gt;</ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](../../../csharp/programming-guide/generics/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>