{"content":"---\ntitle: \"Return Or Skip Elements in a Sequence | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 81a31acd-e0f1-4bca-9a12-fa1ad5752374\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Return Or Skip Elements in a Sequence\nUse the <xref:System.Linq.Queryable.Take%2A> operator to return a given number of elements in a sequence and then skip over the remainder.  \n  \n Use the <xref:System.Linq.Queryable.Skip%2A> operator to skip over a given number of elements in a sequence and then return the remainder.  \n  \n> [!NOTE]\n>  <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> have certain limitations when they are used in queries against SQL Server 2000. For more information, see the \"Skip and Take Exceptions in SQL Server 2000\" entry in [Troubleshooting](../../../../../../docs/framework/data/adonet/sql/linq/troubleshooting.md).  \n  \n [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] translates <xref:System.Linq.Queryable.Skip%2A> by using a subquery with the SQL `NOT EXISTS` clause. This translation has the following limitations:  \n  \n-   The argument must be a set. Multisets are not supported, even if ordered.  \n  \n-   The generated query can be much more complex than the query generated for the base query on which <xref:System.Linq.Queryable.Skip%2A> is applied. This complexity can cause decrease in performance or even a time-out.  \n  \n## Example  \n The following example uses `Take` to select the first five `Employees` hired. Note that the collection is first sorted by `HireDate`.  \n  \n [!code-csharp[DLinqQueryExamples#16](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#16)]\n [!code-vb[DLinqQueryExamples#16](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#16)]  \n  \n## Example  \n The following example uses <xref:System.Linq.Queryable.Skip%2A> to select all except the 10 most expensive `Products`.  \n  \n [!code-csharp[DLinqQueryExamples#17](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#17)]\n [!code-vb[DLinqQueryExamples#17](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#17)]  \n  \n## Example  \n The following example combines the <xref:System.Linq.Queryable.Skip%2A> and <xref:System.Linq.Queryable.Take%2A> methods to skip the first 50 records and then return the next 10.  \n  \n [!code-csharp[DLinqQueryExamples#18](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#18)]\n [!code-vb[DLinqQueryExamples#18](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#18)]  \n  \n <xref:System.Linq.Queryable.Take%2A> and <xref:System.Linq.Queryable.Skip%2A> operations are well defined only against ordered sets. The semantics for unordered sets or multisets is undefined.  \n  \n Because of the limitations on ordering in SQL, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] tries to move the ordering of the argument of the <xref:System.Linq.Queryable.Take%2A> or <xref:System.Linq.Queryable.Skip%2A> operator to the result of the operator.  \n  \n> [!NOTE]\n>  Translation is different for [!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)] and [!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)]. If you plan to use <xref:System.Linq.Queryable.Skip%2A> with a query of any complexity, use [!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)].  \n  \n Consider the following [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] query for [!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]:  \n  \n [!code-csharp[DLinqQueryExamples#19](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#19)]\n [!code-vb[DLinqQueryExamples#19](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#19)]  \n  \n [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] moves the ordering to the end in the SQL code, as follows:  \n  \n```  \nSELECT TOP 1 [t0].[CustomerID], [t0].[CompanyName],  \nFROM [Customers] AS [t0]  \nWHERE (NOT (EXISTS(  \n    SELECT NULL AS [EMPTY]  \n    FROM (  \n        SELECT TOP 1 [t1].[CustomerID]  \n        FROM [Customers] AS [t1]  \n        WHERE [t1].[City] = @p0  \n        ORDER BY [t1].[CustomerID]  \n        ) AS [t2]  \n    WHERE [t0].[CustomerID] = [t2].[CustomerID]  \n    ))) AND ([t0].[City] = @p1)  \nORDER BY [t0].[CustomerID]  \n```  \n  \n When <xref:System.Linq.Queryable.Take%2A> and <xref:System.Linq.Queryable.Skip%2A> are chained together, all the specified ordering must be consistent. Otherwise, the results are undefined.  \n  \n For non-negative, constant integral arguments based on the SQL specification, both <xref:System.Linq.Queryable.Take%2A> and <xref:System.Linq.Queryable.Skip%2A> are well-defined.  \n  \n## See Also  \n [Query Examples](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)   \n [Standard Query Operator Translation](../../../../../../docs/framework/data/adonet/sql/linq/standard-query-operator-translation.md)","nodes":[{"pos":[4,368],"embed":true,"restype":"x-metadata","content":"title: \"Return Or Skip Elements in a Sequence | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 81a31acd-e0f1-4bca-9a12-fa1ad5752374\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Return Or Skip Elements in a Sequence | Microsoft Docs","nodes":[{"pos":[0,54],"content":"Return Or Skip Elements in a Sequence | Microsoft Docs","nodes":[{"content":"Return Or Skip Elements in a Sequence | Microsoft Docs","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[375,412],"content":"Return Or Skip Elements in a Sequence","linkify":"Return Or Skip Elements in a Sequence","nodes":[{"content":"Return Or Skip Elements in a Sequence","pos":[0,37]}]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> operator to return a given number of elements in a sequence and then skip over the remainder.","pos":[413,551],"source":"Use the <xref:System.Linq.Queryable.Take%2A> operator to return a given number of elements in a sequence and then skip over the remainder."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> operator to skip over a given number of elements in a sequence and then return the remainder.","pos":[558,696],"source":"Use the <xref:System.Linq.Queryable.Skip%2A> operator to skip over a given number of elements in a sequence and then return the remainder."},{"pos":[704,1052],"content":"[!NOTE]\n <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> have certain limitations when they are used in queries against SQL Server 2000. For more information, see the \"Skip and Take Exceptions in SQL Server 2000\" entry in [Troubleshooting](../../../../../../docs/framework/data/adonet/sql/linq/troubleshooting.md).","leadings":["","> "],"nodes":[{"content":"<xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> have certain limitations when they are used in queries against SQL Server 2000. For more information, see the \"Skip and Take Exceptions in SQL Server 2000\" entry in [Troubleshooting](../../../../../../docs/framework/data/adonet/sql/linq/troubleshooting.md).","pos":[9,346],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> have certain limitations when they are used in queries against SQL Server 2000.","pos":[0,159],"source":"<xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> have certain limitations when they are used in queries against SQL Server 2000."},{"content":"For more information, see the \"Skip and Take Exceptions in SQL Server 2000\" entry in <bpt id=\"p1\">[</bpt>Troubleshooting<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/troubleshooting.md)</ept>.","pos":[160,337],"source":" For more information, see the \"Skip and Take Exceptions in SQL Server 2000\" entry in [Troubleshooting](../../../../../../docs/framework/data/adonet/sql/linq/troubleshooting.md)."}]}]},{"content":"translates <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> by using a subquery with the SQL <ph id=\"ph2\">`NOT EXISTS`</ph> clause.","pos":[1127,1228],"source":" translates <xref:System.Linq.Queryable.Skip%2A> by using a subquery with the SQL `NOT EXISTS` clause."},{"content":"This translation has the following limitations:","pos":[1229,1276]},{"content":"The argument must be a set.","pos":[1286,1313]},{"content":"Multisets are not supported, even if ordered.","pos":[1314,1359]},{"content":"The generated query can be much more complex than the query generated for the base query on which <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> is applied.","pos":[1369,1515],"source":"The generated query can be much more complex than the query generated for the base query on which <xref:System.Linq.Queryable.Skip%2A> is applied."},{"content":"This complexity can cause decrease in performance or even a time-out.","pos":[1516,1585]},{"pos":[1594,1601],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses <ph id=\"ph1\">`Take`</ph> to select the first five <ph id=\"ph2\">`Employees`</ph> hired.","pos":[1605,1682],"source":"The following example uses `Take` to select the first five `Employees` hired."},{"content":"Note that the collection is first sorted by <ph id=\"ph1\">`HireDate`</ph>.","pos":[1683,1738],"source":" Note that the collection is first sorted by `HireDate`."},{"pos":[2023,2030],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2034,2152],"content":"The following example uses <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> to select all except the 10 most expensive <ph id=\"ph2\">`Products`</ph>.","source":"The following example uses <xref:System.Linq.Queryable.Skip%2A> to select all except the 10 most expensive `Products`."},{"pos":[2437,2444],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example combines the <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> methods to skip the first 50 records and then return the next 10.","pos":[2448,2626],"source":"The following example combines the <xref:System.Linq.Queryable.Skip%2A> and <xref:System.Linq.Queryable.Take%2A> methods to skip the first 50 records and then return the next 10."},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> operations are well defined only against ordered sets.","pos":[2909,3041],"source":"<xref:System.Linq.Queryable.Take%2A> and <xref:System.Linq.Queryable.Skip%2A> operations are well defined only against ordered sets."},{"content":"The semantics for unordered sets or multisets is undefined.","pos":[3042,3101]},{"pos":[3108,3389],"content":"Because of the limitations on ordering in SQL, <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> tries to move the ordering of the argument of the <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> operator to the result of the operator.","source":"Because of the limitations on ordering in SQL, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] tries to move the ordering of the argument of the <xref:System.Linq.Queryable.Take%2A> or <xref:System.Linq.Queryable.Skip%2A> operator to the result of the operator."},{"pos":[3397,3726],"content":"[!NOTE]\n Translation is different for [!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)] and [!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)]. If you plan to use <xref:System.Linq.Queryable.Skip%2A> with a query of any complexity, use [!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)].","leadings":["","> "],"nodes":[{"content":"Translation is different for [!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)] and [!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)]. If you plan to use <xref:System.Linq.Queryable.Skip%2A> with a query of any complexity, use [!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)].","pos":[9,327],"nodes":[{"content":"Translation is different for <ph id=\"ph1\">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)]</ph>.","pos":[0,157],"source":"Translation is different for [!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)] and [!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)]."},{"content":"If you plan to use <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> with a query of any complexity, use <ph id=\"ph2\">[!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)]</ph>.","pos":[158,318],"source":" If you plan to use <xref:System.Linq.Queryable.Skip%2A> with a query of any complexity, use [!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)]."}]}]},{"pos":[3733,3890],"content":"Consider the following <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> query for <ph id=\"ph2\">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph>:","source":"Consider the following [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] query for [!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]:"},{"pos":[4241,4299],"content":"moves the ordering to the end in the SQL code, as follows:"},{"content":"When <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> are chained together, all the specified ordering must be consistent.","pos":[4746,4897],"source":"When <xref:System.Linq.Queryable.Take%2A> and <xref:System.Linq.Queryable.Skip%2A> are chained together, all the specified ordering must be consistent."},{"content":"Otherwise, the results are undefined.","pos":[4898,4935]},{"content":"For non-negative, constant integral arguments based on the SQL specification, both <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> are well-defined.","pos":[4942,5120],"source":"For non-negative, constant integral arguments based on the SQL specification, both <xref:System.Linq.Queryable.Take%2A> and <xref:System.Linq.Queryable.Skip%2A> are well-defined."},{"pos":[5129,5137],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Query Examples<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)</ept><ph id=\"ph1\"> </ph>","pos":[5141,5231],"source":"[Query Examples](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md) "},{"content":"<bpt id=\"p1\">[</bpt>Standard Query Operator Translation<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/standard-query-operator-translation.md)</ept>","pos":[5235,5366],"source":"[Standard Query Operator Translation](../../../../../../docs/framework/data/adonet/sql/linq/standard-query-operator-translation.md)"}]}