<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="bc32050.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21f276ef9cc5f74f3dfb2b9ee487aa2a06f706b0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\misc\bc32050.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3ba1a04330c27adb6a38c47b47b8f3f0d0b9f97</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdbc4bc231823f4503f347ff379250d592979a35</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Type parameter '<ph id="ph1">&lt;typeparametername&gt;</ph>' for '<ph id="ph2">&lt;genericprocedurename&gt;</ph>' cannot be inferred</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type parameter '<ph id="ph1">\&lt;</ph>typeparametername&gt;' for '<ph id="ph2">\&lt;</ph>genericprocedurename&gt;' cannot be inferred</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A generic procedure is called without supplying a type argument list, and type inference fails for one of the type arguments.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you call a generic procedure, you normally supply a type argument for each type parameter defined by the procedure.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, you have the alternative of omitting the type argument list entirely.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you do this, the compiler attempts to infer the type of each type argument from the context of your call.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see "Type Inference" in <bpt id="p1">[</bpt>Generic Procedures in Visual Basic<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>One possible cause of type inference failure is a mismatch of rank between a type parameter and the calling type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following code illustrates this.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the preceding code, the two calls to <ph id="ph1">`findLargest`</ph> both produce this error, because the type parameter <ph id="ph2">`t`</ph> calls for a one-dimensional array, whereas the type arguments the compiler infers from the calls are a scalar (<ph id="ph3">`testValue`</ph>) and a two-dimensional array (<ph id="ph4">`testMatrix`</ph>).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error ID:<ept id="p1">**</ept> BC32050</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To correct this error</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Make sure the types of the normal arguments are such that type inference is consistent with the type parameters declared for the generic procedure.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Call the generic procedure with a complete type argument list, so that type inference is not necessary.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Types in Visual Basic<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type List<ept id="p1">](../../visual-basic/language-reference/statements/type-list.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Procedures in Visual Basic<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>