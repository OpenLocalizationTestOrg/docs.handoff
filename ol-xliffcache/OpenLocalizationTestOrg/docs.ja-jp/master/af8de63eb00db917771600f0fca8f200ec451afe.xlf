<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af8de63eb00db917771600f0fca8f200ec451afe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\variables\local-type-inference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56b50948cde3dcc34273044e2b3281722e07cca4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e3a4ef8b590b7def7ca3599593b278ec3585b3f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Local Type Inference (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Local Type Inference (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Visual Basic compiler uses <bpt id="p1">*</bpt>type inference<ept id="p1">*</ept> to determine the data types of local variables declared without an <ph id="ph1">`As`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The compiler infers the type of the variable from the type of the initialization expression.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This enables you to declare variables without explicitly stating a type, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>As a result of the declarations, both <ph id="ph1">`num1`</ph> and <ph id="ph2">`num2`</ph> are strongly typed as integers.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrTypeInference#1<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/local-type-inference_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you do not want <ph id="ph1">`num2`</ph> in the previous example to be typed as an <ph id="ph2">`Integer`</ph>, you can specify another type by using a declaration like <ph id="ph3">`Dim num3 As Object = 3`</ph> or <ph id="ph4">`Dim num4 As Double = 3`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Local type inference applies at procedure level.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It cannot be used to declare variables at module level (within a class, structure, module, or interface but not within a procedure or block).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`num2`</ph> in the previous example were a field of a class instead of a local variable in a procedure, the declaration would cause an error with <ph id="ph2">`Option Strict`</ph> on, and would classify <ph id="ph3">`num2`</ph> as an <ph id="ph4">`Object`</ph> with <ph id="ph5">`Option Strict`</ph> off.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Similarly, local type inference does not apply to procedure level variables declared as <ph id="ph1">`Static`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Type Inference vs. Late Binding</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Code that uses type inference resembles code that relies on late binding.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, type inference strongly types the variable instead of leaving it as <ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The compiler uses a variable's initializer to determine the variable's type at compile time to produce early-bound code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the previous example, <ph id="ph1">`num2`</ph>, like <ph id="ph2">`num1`</ph>, is typed as an <ph id="ph3">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The behavior of early-bound variables differs from that of late-bound variables, for which the type is known only at run time.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Knowing the type early enables the compiler to identify problems before execution, allocate memory precisely, and perform other optimizations.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Early binding also enables the Visual Basic integrated development environment (IDE) to provide IntelliSense Help about the members of an object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Early binding is also preferred for performance.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is because all data stored in a late-bound variable must be wrapped as type <ph id="ph1">`Object`</ph>, and accessing members of the type at run time makes the program slower.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Type inference occurs when a local variable is declared without an <ph id="ph1">`As`</ph> clause and initialized.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The compiler uses the type of the assigned initial value as the type of the variable.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, each of the following lines of code declares a variable of type <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrTypeInference#2<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/local-type-inference_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following code demonstrates two equivalent ways to create an array of integers.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrTypeInference#3<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/local-type-inference_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is convenient to use type inference to determine the type of a loop control variable.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the following code, the compiler infers that <ph id="ph1">`number`</ph> is an <ph id="ph2">`Integer`</ph> because <ph id="ph3">`someNumbers2`</ph> from the previous example is an array of integers.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrTypeInference#4<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/local-type-inference_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Local type inference can be used in <ph id="ph1">`Using`</ph> statements to establish the type of the resource name, as the following example demonstrates.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrTypeInference#7<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/local-type-inference_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The type of a variable can also be inferred from the return values of functions, as the following example demonstrates.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`pList1`</ph> and <ph id="ph2">`pList2`</ph> are arrays of processes because <ph id="ph3">`Process.GetProcesses`</ph> returns an array of processes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrTypeInference#5<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/local-type-inference_6.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Option Infer</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Option Infer`</ph> enables you specify whether local type inference is allowed in a particular file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To enable or to block the option, type one of the following statements at the start of the file.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you do not specify a value for <ph id="ph1">`Option Infer`</ph> in your code, the compiler default is <ph id="ph2">`Option Infer On`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For projects upgraded from <ph id="ph1">[!INCLUDE[vb_orcas_long](../../../../visual-basic/misc/includes/vb_orcas_long_md.md)]</ph> or earlier, the compiler default is <ph id="ph2">`Option Infer Off`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the value set for <ph id="ph1">`Option Infer`</ph> in a file conflicts with the value set in the IDE or on the command line, the value in the file has precedence.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> and <bpt id="p2">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id="p2">](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Restrictions</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Type inference can be used only for non-static local variables; it cannot be used to determine the type of class fields, properties, or functions.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](../../../../visual-basic/programming-guide/language-features/early-late-binding/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/optioninfer<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/optioninfer.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>