<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-unlink-dataflow-blocks.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93705653169b5efce3e3a062b7490abc4ea39c30</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\how-to-unlink-dataflow-blocks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">625940ce054f1c5ee29815eaaaafafb64357cb2f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2ab2c5cfbefa1025f4128d4cc22400decd51962</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Unlink Dataflow Blocks</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Unlink Dataflow Blocks</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document describes how to unlink a target dataflow block from its source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example creates three <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> objects, each of which calls the <ph id="ph2">`TrySolution`</ph> method to compute a value.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This example requires only the result from the first call to <ph id="ph1">`TrySolution`</ph> to finish.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To receive the value from the first <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> object that finishes, this example defines the <ph id="ph2">`ReceiveFromAny(T)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ReceiveFromAny(T)`</ph> method accepts an array of <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> objects and links each of these objects to a <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.LinkTo%2A&gt;</ph> method to link a source dataflow block to a target block, the source propagates messages to the target as data becomes available.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601&gt;</ph> class accepts only the first message that it is offered, the <ph id="ph2">`ReceiveFromAny(T)`</ph> method produces its result by calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Receive%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This produces the first message that is offered to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.LinkTo%2A&gt;</ph> method has an overloaded version that takes an <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.DataflowLinkOptions&gt;</ph> object with a <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages&gt;</ph> property that, when it is set to <ph id="ph4">`1`</ph>, instructs the source block to unlink from the target after the target receives one message from the source.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is important for the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601&gt;</ph> object to unlink from its sources because the relationship between the array of sources and the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601&gt;</ph> object is no longer required after the <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601&gt;</ph> object receives a message.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To enable the remaining calls to <ph id="ph1">`TrySolution`</ph> to end after one of them computes a value, the <ph id="ph2">`TrySolution`</ph> method takes a <ph id="ph3">&lt;xref:System.Threading.CancellationToken&gt;</ph> object that is canceled after the call to <ph id="ph4">`ReceiveFromAny(T)`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SpinWait.SpinUntil%2A&gt;</ph> method returns when this <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> object is canceled.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`DataflowReceiveAny.cs`</ph> (<ph id="ph2">`DataflowReceiveAny.vb`</ph> for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Visual C#</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowReceiveAny.cs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Visual Basic</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowReceiveAny.vb<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>