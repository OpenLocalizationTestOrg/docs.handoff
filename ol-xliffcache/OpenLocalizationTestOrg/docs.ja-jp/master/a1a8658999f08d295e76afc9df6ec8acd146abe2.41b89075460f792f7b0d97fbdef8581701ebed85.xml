{"content":"---\ntitle: \"How to: Explicitly Throw Exceptions\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"exceptions, try/catch blocks\"\n  - \"FileNotFoundException class\"\n  - \"try/catch blocks\"\n  - \"exceptions, throwing\"\n  - \"implicitly throwing exceptions\"\nms.assetid: 72bdd157-caa9-4478-9ee3-cb4500b84528\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# How to explicitly throw exceptions\n\nYou can explicitly throw an exception using the `throw` statement. You can also throw a caught exception again using the `throw` statement. It is good coding practice to add information to an exception that is re-thrown to provide more information when debugging.\n\nThe following code example uses a `try`/`catch` block to catch a possible <xref:System.IO.FileNotFoundException>. Following the `try` block is a `catch` block that catches the <xref:System.IO.FileNotFoundException> and writes a message to the console if the data file is not found. The next statement is the `throw` statement that throws a new <xref:System.IO.FileNotFoundException> and adds text information to the exception.\n\n[!code-csharp[Exception.Throwing#1](../../../samples/snippets/csharp/VS_Snippets_CLR/Exception.Throwing/CS/throw.cs#1)]\n[!code-vb[Exception.Throwing#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Exception.Throwing/VB/throw.vb#1)]  \n\n## See also\n\n- [Exceptions](index.md)\n","nodes":[{"pos":[4,399],"embed":true,"restype":"x-metadata","content":"title: \"How to: Explicitly Throw Exceptions\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"exceptions, try/catch blocks\"\n  - \"FileNotFoundException class\"\n  - \"try/catch blocks\"\n  - \"exceptions, throwing\"\n  - \"implicitly throwing exceptions\"\nms.assetid: 72bdd157-caa9-4478-9ee3-cb4500b84528\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"How to: Explicitly Throw Exceptions","nodes":[{"pos":[0,35],"content":"How to: Explicitly Throw Exceptions","nodes":[{"content":"How to: Explicitly Throw Exceptions","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[406,440],"content":"How to explicitly throw exceptions","linkify":"How to explicitly throw exceptions","nodes":[{"content":"How to explicitly throw exceptions","pos":[0,34]}]},{"content":"You can explicitly throw an exception using the <ph id=\"ph1\">`throw`</ph> statement.","pos":[442,508],"source":"You can explicitly throw an exception using the `throw` statement."},{"content":"You can also throw a caught exception again using the <ph id=\"ph1\">`throw`</ph> statement.","pos":[509,581],"source":" You can also throw a caught exception again using the `throw` statement."},{"content":"It is good coding practice to add information to an exception that is re-thrown to provide more information when debugging.","pos":[582,705]},{"content":"The following code example uses a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block to catch a possible <ph id=\"ph4\">&lt;xref:System.IO.FileNotFoundException&gt;</ph>.","pos":[707,820],"source":"The following code example uses a `try`/`catch` block to catch a possible <xref:System.IO.FileNotFoundException>."},{"content":"Following the <ph id=\"ph1\">`try`</ph> block is a <ph id=\"ph2\">`catch`</ph> block that catches the <ph id=\"ph3\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> and writes a message to the console if the data file is not found.","pos":[821,988],"source":" Following the `try` block is a `catch` block that catches the <xref:System.IO.FileNotFoundException> and writes a message to the console if the data file is not found."},{"content":"The next statement is the <ph id=\"ph1\">`throw`</ph> statement that throws a new <ph id=\"ph2\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> and adds text information to the exception.","pos":[989,1133],"source":" The next statement is the `throw` statement that throws a new <xref:System.IO.FileNotFoundException> and adds text information to the exception."},{"pos":[1382,1390],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1394,1416],"content":"<bpt id=\"p1\">[</bpt>Exceptions<ept id=\"p1\">](index.md)</ept>","source":"[Exceptions](index.md)"}]}