{"content":"---\ntitle: \"throw (C# Reference) | Microsoft Docs\"\nms.date: \"2015-03-02\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"throw\"\n  - \"throw_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"throw statement [C#]\"\n  - \"throw expression [C#]\"\n  - \"throw keyword [C#]\"\nms.assetid: 5ac4feef-4b1a-4c61-aeb4-61d549e5dd42\ncaps.latest.revision: 22\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# throw (C# Reference)\nSignals the occurrence of an exception during program execution.  \n  \n## Remarks\n\nThe syntax of `throw` is:\n\n```csharp\nthrow [e]\n```\nwhere `e` is an instance of a class derived from <xref:System.Exception?displayProperty=fullName>. The following example uses the `throw` statement to throw an @System.IndexOutOfRangeException if the argument passed to a method named `GetNumber` does not correspond to a valid index of an internal array.\n\n[!code-cs[csrefKeyword#1](../../../../samples/snippets/csharp/language-reference/keywords/throw/throw-1.cs#1)]  \n\nMethod callers then use a `try-catch` or `try-catch-finally` block to handle the thrown exception. The following example handles the exception thrown by the `GetNumber` method.\n\n[!code-cs[csrefKeyword#2](../../../../samples/snippets/csharp/language-reference/keywords/throw/throw-1.cs#2)]  \n\n## Re-throwing an exception\n\n`throw` can also be used in a `catch` block to re-throw an exception handled in a `catch` block.  In this case, `throw` does not take an exception operand. It is most useful when a method passes on an argument from a caller to some other library method, and the library method throws an exception that must be passed on to the caller. For example, the following example re-throws an @System.NullReferenceException that is thrown when attempting to retrieve the first character of an uninitialized string. \n\n[!code-cs[csrefKeyword#3](../../../../samples/snippets/csharp/language-reference/keywords/throw/throw-3.cs#3)]  \n\n> [!IMPORTANT]\n> You can also use the `throw e` syntax in a `catch` block to instantiate a new exception that you pass on to the caller. In this case, the stack trace of the original exception, which is available from the @System.Exception.Stacktrace property, is not preserved.\n \n## The `throw` expression\n\nStarting with C# 7, `throw` can be used as an expression as well as a statement. This allows an exception to be thrown in contexts that were previously unsupported. These include:\n\n- [the conditional operator](../operators/conditional-operator.md). The following example uses a `throw` expression to throw an @System.ArgumentException if a method is passed an empty string array. Before C# 7, this logic would need to appear in an `if`/`else` statement.\n\n   [!code-cs[csrefKeyword#4](../../../../samples/snippets/csharp/language-reference/keywords/throw/conditional.cs#1)]  \n  \n- [the null-coalescing operator](../operators/null-conditional-operator.md). In the following example, a `throw` expression is used with a null-coalescing operator to throw an exception if the string assigned to a `Name` property is `null`.\n \n   [!code-cs[csrefKeyword#5](../../../../samples/snippets/csharp/language-reference/keywords/throw/coalescing.cs#1)]  \n \n- an expression-bodied [lambda](../../lambda-expressions.md) or method. The following example illustrates an expression-bodied method that throws an @System.InvalidCastException because a conversion to a @System.DateTime value is not supported.\n \n   [!code-cs[csrefKeyword#6](../../../../samples/snippets/csharp/language-reference/keywords/throw/exp-bodied.cs#1)]  \n \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [try-catch](../../../csharp/language-reference/keywords/try-catch.md)   \n [The try, catch, and throw Statements in C++](../../../csharp/language-reference/keywords/try-catch.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Exception Handling Statements](../../../csharp/language-reference/keywords/exception-handling-statements.md)   \n [How to: Explicitly Throw Exceptions](https://msdn.microsoft.com/library/xhcbs8fz)","nodes":[{"pos":[12,49],"content":"throw (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"throw (C# Reference) | Microsoft Docs","pos":[0,37]}]},{"pos":[625,645],"content":"throw (C# Reference)","linkify":"throw (C# Reference)","nodes":[{"content":"throw (C# Reference)","pos":[0,20]}]},{"content":"Signals the occurrence of an exception during program execution.","pos":[646,710]},{"pos":[719,726],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[728,753],"content":"The syntax of <ph id=\"ph1\">`throw`</ph> is:","source":"The syntax of `throw` is:"},{"content":"where <ph id=\"ph1\">`e`</ph> is an instance of a class derived from <ph id=\"ph2\">&lt;xref:System.Exception?displayProperty=fullName&gt;</ph>.","pos":[779,877],"source":"where `e` is an instance of a class derived from <xref:System.Exception?displayProperty=fullName>."},{"content":"The following example uses the <ph id=\"ph1\">`throw`</ph> statement to throw an <ph id=\"ph2\">@System.IndexOutOfRangeException</ph> if the argument passed to a method named <ph id=\"ph3\">`GetNumber`</ph> does not correspond to a valid index of an internal array.","pos":[878,1083],"source":" The following example uses the `throw` statement to throw an @System.IndexOutOfRangeException if the argument passed to a method named `GetNumber` does not correspond to a valid index of an internal array."},{"pos":[1085,1195],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeyword#1<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/throw/throw-1.cs#1)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeyword#1](../../../../samples/snippets/csharp/language-reference/keywords/throw/throw-1.cs#1)]"},{"content":"Method callers then use a <ph id=\"ph1\">`try-catch`</ph> or <ph id=\"ph2\">`try-catch-finally`</ph> block to handle the thrown exception.","pos":[1199,1297],"source":"Method callers then use a `try-catch` or `try-catch-finally` block to handle the thrown exception."},{"content":"The following example handles the exception thrown by the <ph id=\"ph1\">`GetNumber`</ph> method.","pos":[1298,1375],"source":" The following example handles the exception thrown by the `GetNumber` method."},{"pos":[1377,1487],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeyword#2<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/throw/throw-1.cs#2)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeyword#2](../../../../samples/snippets/csharp/language-reference/keywords/throw/throw-1.cs#2)]"},{"pos":[1494,1518],"content":"Re-throwing an exception","linkify":"Re-throwing an exception","nodes":[{"content":"Re-throwing an exception","pos":[0,24]}]},{"content":"<ph id=\"ph1\">`throw`</ph> can also be used in a <ph id=\"ph2\">`catch`</ph> block to re-throw an exception handled in a <ph id=\"ph3\">`catch`</ph> block.","pos":[1520,1616],"source":"`throw` can also be used in a `catch` block to re-throw an exception handled in a `catch` block."},{"content":"In this case, <ph id=\"ph1\">`throw`</ph> does not take an exception operand.","pos":[1618,1675],"source":"  In this case, `throw` does not take an exception operand."},{"content":"It is most useful when a method passes on an argument from a caller to some other library method, and the library method throws an exception that must be passed on to the caller.","pos":[1676,1854]},{"content":"For example, the following example re-throws an <ph id=\"ph1\">@System.NullReferenceException</ph> that is thrown when attempting to retrieve the first character of an uninitialized string.","pos":[1855,2024],"source":" For example, the following example re-throws an @System.NullReferenceException that is thrown when attempting to retrieve the first character of an uninitialized string."},{"pos":[2027,2137],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeyword#3<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/throw/throw-3.cs#3)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeyword#3](../../../../samples/snippets/csharp/language-reference/keywords/throw/throw-3.cs#3)]"},{"pos":[2143,2419],"content":"[!IMPORTANT]\nYou can also use the `throw e` syntax in a `catch` block to instantiate a new exception that you pass on to the caller. In this case, the stack trace of the original exception, which is available from the @System.Exception.Stacktrace property, is not preserved.","leadings":["","> "],"nodes":[{"content":"You can also use the `throw e` syntax in a `catch` block to instantiate a new exception that you pass on to the caller. In this case, the stack trace of the original exception, which is available from the @System.Exception.Stacktrace property, is not preserved.","pos":[13,274],"nodes":[{"content":"You can also use the <ph id=\"ph1\">`throw e`</ph> syntax in a <ph id=\"ph2\">`catch`</ph> block to instantiate a new exception that you pass on to the caller.","pos":[0,119],"source":"You can also use the `throw e` syntax in a `catch` block to instantiate a new exception that you pass on to the caller."},{"content":"In this case, the stack trace of the original exception, which is available from the <ph id=\"ph1\">@System.Exception.Stacktrace</ph> property, is not preserved.","pos":[120,261],"source":" In this case, the stack trace of the original exception, which is available from the @System.Exception.Stacktrace property, is not preserved."}]}]},{"pos":[2425,2447],"content":"The <ph id=\"ph1\">`throw`</ph> expression","linkify":"The `throw` expression","source":"The `throw` expression"},{"content":"Starting with C# 7, <ph id=\"ph1\">`throw`</ph> can be used as an expression as well as a statement.","pos":[2449,2529],"source":"Starting with C# 7, `throw` can be used as an expression as well as a statement."},{"content":"This allows an exception to be thrown in contexts that were previously unsupported.","pos":[2530,2613]},{"content":"These include:","pos":[2614,2628]},{"content":"<bpt id=\"p1\">[</bpt>the conditional operator<ept id=\"p1\">](../operators/conditional-operator.md)</ept>.","pos":[2632,2697],"source":"[the conditional operator](../operators/conditional-operator.md)."},{"content":"The following example uses a <ph id=\"ph1\">`throw`</ph> expression to throw an <ph id=\"ph2\">@System.ArgumentException</ph> if a method is passed an empty string array.","pos":[2698,2828],"source":" The following example uses a `throw` expression to throw an @System.ArgumentException if a method is passed an empty string array."},{"content":"Before C# 7, this logic would need to appear in an <ph id=\"ph1\">`if`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`else`</ph> statement.","pos":[2829,2902],"source":" Before C# 7, this logic would need to appear in an `if`/`else` statement."},{"pos":[2907,3021],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeyword#4<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/throw/conditional.cs#1)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeyword#4](../../../../samples/snippets/csharp/language-reference/keywords/throw/conditional.cs#1)]"},{"content":"<bpt id=\"p1\">[</bpt>the null-coalescing operator<ept id=\"p1\">](../operators/null-conditional-operator.md)</ept>.","pos":[3029,3103],"source":"[the null-coalescing operator](../operators/null-conditional-operator.md)."},{"content":"In the following example, a <ph id=\"ph1\">`throw`</ph> expression is used with a null-coalescing operator to throw an exception if the string assigned to a <ph id=\"ph2\">`Name`</ph> property is <ph id=\"ph3\">`null`</ph>.","pos":[3104,3267],"source":" In the following example, a `throw` expression is used with a null-coalescing operator to throw an exception if the string assigned to a `Name` property is `null`."},{"pos":[3273,3386],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeyword#5<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/throw/coalescing.cs#1)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeyword#5](../../../../samples/snippets/csharp/language-reference/keywords/throw/coalescing.cs#1)]"},{"content":"an expression-bodied <bpt id=\"p1\">[</bpt>lambda<ept id=\"p1\">](../../lambda-expressions.md)</ept> or method.","pos":[3393,3462],"source":"an expression-bodied [lambda](../../lambda-expressions.md) or method."},{"content":"The following example illustrates an expression-bodied method that throws an <ph id=\"ph1\">@System.InvalidCastException</ph> because a conversion to a <ph id=\"ph2\">@System.DateTime</ph> value is not supported.","pos":[3463,3635],"source":" The following example illustrates an expression-bodied method that throws an @System.InvalidCastException because a conversion to a @System.DateTime value is not supported."},{"pos":[3641,3754],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeyword#6<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/throw/exp-bodied.cs#1)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeyword#6](../../../../samples/snippets/csharp/language-reference/keywords/throw/exp-bodied.cs#1)]"},{"pos":[3765,3790],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3904,3912],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3916,3976],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3979,4047],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>try-catch<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id=\"ph1\"> </ph>","pos":[4050,4121],"source":" [try-catch](../../../csharp/language-reference/keywords/try-catch.md) "},{"content":"<bpt id=\"p1\"> [</bpt>The try, catch, and throw Statements in C++<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id=\"ph1\"> </ph>","pos":[4124,4229],"source":" [The try, catch, and throw Statements in C++](../../../csharp/language-reference/keywords/try-catch.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4232,4301],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Exception Handling Statements<ept id=\"p1\">](../../../csharp/language-reference/keywords/exception-handling-statements.md)</ept><ph id=\"ph1\"> </ph>","pos":[4304,4415],"source":" [Exception Handling Statements](../../../csharp/language-reference/keywords/exception-handling-statements.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Explicitly Throw Exceptions<ept id=\"p1\">](https://msdn.microsoft.com/library/xhcbs8fz)</ept>","pos":[4418,4501],"source":" [How to: Explicitly Throw Exceptions](https://msdn.microsoft.com/library/xhcbs8fz)"}]}