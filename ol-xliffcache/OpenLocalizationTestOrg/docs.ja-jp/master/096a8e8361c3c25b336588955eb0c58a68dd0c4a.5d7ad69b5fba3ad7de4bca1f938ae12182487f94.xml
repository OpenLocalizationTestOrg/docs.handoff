{"content":"---\ntitle: \"How to: Declare a Property with Mixed Access Levels (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"access levels, properties\"\n  - \"procedures, defining\"\n  - \"Visual Basic code, procedures\"\n  - \"mixed access levels\"\n  - \"Visual Basic code, properties\"\n  - \"properties [Visual Basic], access levels\"\n  - \"Property statement, declaring mixed access levels\"\nms.assetid: fdbb2d97-279a-4956-b26c-cbdfbc34915a\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Declare a Property with Mixed Access Levels (Visual Basic)\nIf you want the `Get` and `Set` procedures on a property to have different access levels, you can use the more permissive level in the `Property` statement and the more restrictive level in either the `Get` or `Set` statement. You use mixed access levels on a property when you want certain parts of the code to be able to get the property's value, and certain other parts of the code to be able to change the value.  \n  \n For more information on access levels, see [Access Levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n### To declare a property with mixed access levels  \n  \n1.  Declare the property in the normal way, and specify the less restrictive access level (such as `Public`) in the `Property` statement.  \n  \n2.  Declare either the `Get` or the `Set` procedure specifying the more restrictive access level (such as `Friend`).  \n  \n3.  Do not specify an access level on the other property procedure. It assumes the access level declared in the `Property` statement. You can restrict access on only one of the property procedures.  \n  \n     [!code-vb[VbVbcnProcedures#10](./codesnippet/VisualBasic/how-to-declare-a-property-with-mixed-access-levels_1.vb)]  \n  \n     In the preceding example, the `Get` procedure has the same `Protected` access as the property itself, while the `Set` procedure has `Private` access. A class derived from `employee` can read the `salary` value, but only the `employee` class can set it.  \n  \n## See Also  \n [Procedures](./index.md)   \n [Property Procedures](./property-procedures.md)   \n [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)   \n [Property Statement](../../../../visual-basic/language-reference/statements/property-statement.md)   \n [Differences Between Properties and Variables in Visual Basic](./differences-between-properties-and-variables.md)   \n [How to: Create a Property](./how-to-create-a-property.md)   \n [How to: Call a Property Procedure](./how-to-call-a-property-procedure.md)   \n [How to: Declare and Call a Default Property in Visual Basic](./how-to-declare-and-call-a-default-property.md)   \n [How to: Put a Value in a Property](./how-to-put-a-value-in-a-property.md)   \n [How to: Get a Value from a Property](./how-to-get-a-value-from-a-property.md)","nodes":[{"pos":[4,843],"nodes":[{"content":"How to: Declare a Property with Mixed Access Levels (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,83],"content":"How to: Declare a Property with Mixed Access Levels (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Declare a Property with Mixed Access Levels (Visual Basic) | Microsoft Docs","pos":[0,83]}]}],"pos":[6,92],"yaml":true}],"content":"title: \"How to: Declare a Property with Mixed Access Levels (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"access levels, properties\"\n  - \"procedures, defining\"\n  - \"Visual Basic code, procedures\"\n  - \"mixed access levels\"\n  - \"Visual Basic code, properties\"\n  - \"properties [Visual Basic], access levels\"\n  - \"Property statement, declaring mixed access levels\"\nms.assetid: fdbb2d97-279a-4956-b26c-cbdfbc34915a\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[850,916],"content":"How to: Declare a Property with Mixed Access Levels (Visual Basic)","linkify":"How to: Declare a Property with Mixed Access Levels (Visual Basic)","nodes":[{"content":"How to: Declare a Property with Mixed Access Levels (Visual Basic)","pos":[0,66]}]},{"content":"If you want the <ph id=\"ph1\">`Get`</ph> and <ph id=\"ph2\">`Set`</ph> procedures on a property to have different access levels, you can use the more permissive level in the <ph id=\"ph3\">`Property`</ph> statement and the more restrictive level in either the <ph id=\"ph4\">`Get`</ph> or <ph id=\"ph5\">`Set`</ph> statement.","pos":[917,1143],"source":"If you want the `Get` and `Set` procedures on a property to have different access levels, you can use the more permissive level in the `Property` statement and the more restrictive level in either the `Get` or `Set` statement."},{"content":"You use mixed access levels on a property when you want certain parts of the code to be able to get the property's value, and certain other parts of the code to be able to change the value.","pos":[1144,1333]},{"pos":[1340,1512],"content":"For more information on access levels, see <bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","source":"For more information on access levels, see [Access Levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[1522,1568],"content":"To declare a property with mixed access levels","linkify":"To declare a property with mixed access levels","nodes":[{"content":"To declare a property with mixed access levels","pos":[0,46]}]},{"pos":[1578,1711],"content":"Declare the property in the normal way, and specify the less restrictive access level (such as <ph id=\"ph1\">`Public`</ph>) in the <ph id=\"ph2\">`Property`</ph> statement.","source":"Declare the property in the normal way, and specify the less restrictive access level (such as `Public`) in the `Property` statement."},{"pos":[1721,1833],"content":"Declare either the <ph id=\"ph1\">`Get`</ph> or the <ph id=\"ph2\">`Set`</ph> procedure specifying the more restrictive access level (such as <ph id=\"ph3\">`Friend`</ph>).","source":"Declare either the `Get` or the `Set` procedure specifying the more restrictive access level (such as `Friend`)."},{"content":"Do not specify an access level on the other property procedure.","pos":[1843,1906]},{"content":"It assumes the access level declared in the <ph id=\"ph1\">`Property`</ph> statement.","pos":[1907,1972],"source":" It assumes the access level declared in the `Property` statement."},{"content":"You can restrict access on only one of the property procedures.","pos":[1973,2036]},{"pos":[2047,2161],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbcnProcedures#10<ept id=\"p2\">](./codesnippet/VisualBasic/how-to-declare-a-property-with-mixed-access-levels_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbcnProcedures#10](./codesnippet/VisualBasic/how-to-declare-a-property-with-mixed-access-levels_1.vb)]"},{"content":"In the preceding example, the <ph id=\"ph1\">`Get`</ph> procedure has the same <ph id=\"ph2\">`Protected`</ph> access as the property itself, while the <ph id=\"ph3\">`Set`</ph> procedure has <ph id=\"ph4\">`Private`</ph> access.","pos":[2172,2321],"source":"In the preceding example, the `Get` procedure has the same `Protected` access as the property itself, while the `Set` procedure has `Private` access."},{"content":"A class derived from <ph id=\"ph1\">`employee`</ph> can read the <ph id=\"ph2\">`salary`</ph> value, but only the <ph id=\"ph3\">`employee`</ph> class can set it.","pos":[2322,2424],"source":" A class derived from `employee` can read the `salary` value, but only the `employee` class can set it."},{"pos":[2433,2441],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](./index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2445,2470],"source":"[Procedures](./index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Property Procedures<ept id=\"p1\">](./property-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[2474,2522],"source":"[Property Procedures](./property-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](./procedure-parameters-and-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[2526,2604],"source":"[Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md) "},{"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/property-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2608,2707],"source":"[Property Statement](../../../../visual-basic/language-reference/statements/property-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Differences Between Properties and Variables in Visual Basic<ept id=\"p1\">](./differences-between-properties-and-variables.md)</ept><ph id=\"ph1\"> </ph>","pos":[2711,2825],"source":"[Differences Between Properties and Variables in Visual Basic](./differences-between-properties-and-variables.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Create a Property<ept id=\"p1\">](./how-to-create-a-property.md)</ept><ph id=\"ph1\"> </ph>","pos":[2829,2888],"source":"[How to: Create a Property](./how-to-create-a-property.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Call a Property Procedure<ept id=\"p1\">](./how-to-call-a-property-procedure.md)</ept><ph id=\"ph1\"> </ph>","pos":[2892,2967],"source":"[How to: Call a Property Procedure](./how-to-call-a-property-procedure.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Declare and Call a Default Property in Visual Basic<ept id=\"p1\">](./how-to-declare-and-call-a-default-property.md)</ept><ph id=\"ph1\"> </ph>","pos":[2971,3082],"source":"[How to: Declare and Call a Default Property in Visual Basic](./how-to-declare-and-call-a-default-property.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Put a Value in a Property<ept id=\"p1\">](./how-to-put-a-value-in-a-property.md)</ept><ph id=\"ph1\"> </ph>","pos":[3086,3161],"source":"[How to: Put a Value in a Property](./how-to-put-a-value-in-a-property.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Get a Value from a Property<ept id=\"p1\">](./how-to-get-a-value-from-a-property.md)</ept>","pos":[3165,3243],"source":"[How to: Get a Value from a Property](./how-to-get-a-value-from-a-property.md)"}]}