{"content":"---\ntitle: \"out (C# Reference) | Microsoft Docs\"\nms.date: \"2017-03-01\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"out_CSharpKeyword\"\n  - \"out\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"out [C#]\"\n  - \"out keyword [C#]\"\nms.assetid: 7e911a0c-3f98-4536-87be-d539b7536ca8\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# out (C# Reference)\nYou can use the `out` contextual keyword in two contexts:\n\n- As a [parameter modifier](../../../csharp/language-reference/keywords/out-parameter-modifier.md), which lets pass an argument to a method by reference rather than by value.\n\n- In [generic type parameter declarations](../../../csharp/language-reference/keywords/out-generic-modifier.md) for interfaces and delegates, which specifies that a type parameter is covariant.\n   \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)","nodes":[{"pos":[12,47],"content":"out (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"out (C# Reference) | Microsoft Docs","pos":[0,35]}]},{"pos":[578,596],"content":"out (C# Reference)","linkify":"out (C# Reference)","nodes":[{"content":"out (C# Reference)","pos":[0,18]}]},{"pos":[597,654],"content":"You can use the <ph id=\"ph1\">`out`</ph> contextual keyword in two contexts:","source":"You can use the `out` contextual keyword in two contexts:"},{"pos":[658,830],"content":"As a <bpt id=\"p1\">[</bpt>parameter modifier<ept id=\"p1\">](../../../csharp/language-reference/keywords/out-parameter-modifier.md)</ept>, which lets pass an argument to a method by reference rather than by value.","source":"As a [parameter modifier](../../../csharp/language-reference/keywords/out-parameter-modifier.md), which lets pass an argument to a method by reference rather than by value."},{"pos":[834,1025],"content":"In <bpt id=\"p1\">[</bpt>generic type parameter declarations<ept id=\"p1\">](../../../csharp/language-reference/keywords/out-generic-modifier.md)</ept> for interfaces and delegates, which specifies that a type parameter is covariant.","source":"In [generic type parameter declarations](../../../csharp/language-reference/keywords/out-generic-modifier.md) for interfaces and delegates, which specifies that a type parameter is covariant."},{"pos":[1033,1041],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1045,1104],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"}]}