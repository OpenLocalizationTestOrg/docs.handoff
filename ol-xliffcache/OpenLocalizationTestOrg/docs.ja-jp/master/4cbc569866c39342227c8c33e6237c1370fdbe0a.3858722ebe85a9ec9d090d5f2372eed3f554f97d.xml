{"content":"---\ntitle: \"Like Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"Like\"\n  - \"vb.Like\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"similar to\"\n  - \"pattern matching\"\n  - \"Like operator [Visual Basic]\"\n  - \"? symbol, wildcard character\"\n  - \"string comparison [Visual Basic], Like operator\"\n  - \"strings [Visual Basic], comparing\"\n  - \"comparison operators\"\n  - \"symbols, wildcard\"\n  - \"wildcards, Like operator\"\n  - \"strings [Visual Basic], matching\"\n  - \"string comparison [Visual Basic], sorting data\"\n  - \"data [Visual Basic], sorting\"\n  - \"text [Visual Basic], comparing\"\n  - \"operators [Visual Basic], pattern-matching\"\n  - \"data [Visual Basic], string comparisons\"\n  - \"string comparison [Visual Basic], Like operators\"\nms.assetid: 966283ec-80e2-4294-baa8-c75baff804f9\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Like Operator (Visual Basic)\nCompares a string against a pattern.  \n  \n## Syntax  \n  \n```  \n  \nresult = string Like pattern  \n```  \n  \n## Parts  \n `result`  \n Required. Any `Boolean` variable. The result is a `Boolean` value indicating whether or not the `string` satisfies the `pattern`.  \n  \n `string`  \n Required. Any `String` expression.  \n  \n `pattern`  \n Required. Any `String` expression conforming to the pattern-matching conventions described in \"Remarks.\"  \n  \n## Remarks  \n If the value in `string` satisfies the pattern contained in `pattern`, `result` is `True`. If the string does not satisfy the pattern, `result` is `False`. If both `string` and `pattern` are empty strings, the result is `True`.  \n  \n## Comparison Method  \n The behavior of the `Like` operator depends on the [Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md). The default string comparison method for each source file is `Option Compare Binary`.  \n  \n## Pattern Options  \n Built-in pattern matching provides a versatile tool for string comparisons. The pattern-matching features allow you to match each character in `string` against a specific character, a wildcard character, a character list, or a character range. The following table shows the characters allowed in `pattern` and what they match.  \n  \n|Characters in `pattern`|Matches in `string`|  \n|-----------------------------|-------------------------|  \n|`?`|Any single character|  \n|`*`|Zero or more characters|  \n|`#`|Any single digit (0–9)|  \n|`[` `charlist` `]`|Any single character in `charlist`|  \n|`[!` `charlist` `]`|Any single character not in `charlist`|  \n  \n## Character Lists  \n A group of one or more characters (`charlist`) enclosed in brackets (`[ ]`) can be used to match any single character in `string` and can include almost any character code, including digits.  \n  \n An exclamation point (`!`) at the beginning of `charlist` means that a match is made if any character except the characters in `charlist` is found in `string`. When used outside brackets, the exclamation point matches itself.  \n  \n## Special Characters  \n To match the special characters left bracket (`[`), question mark (`?`), number sign (`#`), and asterisk (`*`), enclose them in brackets. The right bracket (`]`) cannot be used within a group to match itself, but it can be used outside a group as an individual character.  \n  \n The character sequence `[]` is considered a zero-length string (`\"\"`). However, it cannot be part of a character list enclosed in brackets. If you want to check whether a position in `string` contains one of a group of characters or no character at all, you can use `Like` twice. For an example, see [How to: Match a String against a Pattern](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern.md).  \n  \n## Character Ranges  \n By using a hyphen (`–`) to separate the lower and upper bounds of the range, `charlist` can specify a range of characters. For example, `[A–Z]` results in a match if the corresponding character position in `string` contains any character within the range `A`–`Z`, and `[!H–L]` results in a match if the corresponding character position contains any character outside the range `H`–`L`.  \n  \n When you specify a range of characters, they must appear in ascending sort order, that is, from lowest to highest. Thus, `[A–Z]` is a valid pattern, but `[Z–A]` is not.  \n  \n### Multiple Character Ranges  \n To specify multiple ranges for the same character position, put them within the same brackets without delimiters. For example, `[A–CX–Z]` results in a match if the corresponding character position in `string` contains any character within either the range `A`–`C` or the range `X`–`Z`.  \n  \n### Usage of the Hyphen  \n A hyphen (`–`) can appear either at the beginning (after an exclamation point, if any) or at the end of `charlist` to match itself. In any other location, the hyphen identifies a range of characters delimited by the characters on either side of the hyphen.  \n  \n## Collating Sequence  \n The meaning of a specified range depends on the character ordering at run time, as determined by `Option``Compare` and the locale setting of the system the code is running on. With `Option``Compare``Binary`, the range `[A–E]` matches `A`, `B`, `C`, `D`, and `E`. With `Option``Compare``Text`, `[A–E]` matches `A`, `a`, `À`, `à`, `B`, `b`, `C`, `c`, `D`, `d`, `E`, and `e`. The range does not match `Ê` or `ê` because accented characters collate after unaccented characters in the sort order.  \n  \n## Digraph Characters  \n In some languages, there are alphabetic characters that represent two separate characters. For example, several languages use the character `æ` to represent the characters `a` and `e` when they appear together. The `Like` operator recognizes that the single digraph character and the two individual characters are equivalent.  \n  \n When a language that uses a digraph character is specified in the system locale settings, an occurrence of the single digraph character in either `pattern` or `string` matches the equivalent two-character sequence in the other string. Similarly, a digraph character in `pattern` enclosed in brackets (by itself, in a list, or in a range) matches the equivalent two-character sequence in `string`.  \n  \n## Overloading  \n The `Like` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n This example uses the `Like` operator to compare strings to various patterns. The results go into a `Boolean` variable indicating whether each string satisfies the pattern.  \n  \n [!code-vb[VbVbalrOperators#30](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/like-operator_1.vb)]  \n  \n## See Also  \n <xref:Microsoft.VisualBasic.Strings.InStr%2A>   \n <xref:Microsoft.VisualBasic.Strings.StrComp%2A>   \n [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md)   \n [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)   \n [How to: Match a String against a Pattern](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern.md)","nodes":[{"pos":[12,57],"content":"Like Operator (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Like Operator (Visual Basic) | Microsoft Docs","pos":[0,45]}]},{"pos":[1178,1206],"content":"Like Operator (Visual Basic)","linkify":"Like Operator (Visual Basic)","nodes":[{"content":"Like Operator (Visual Basic)","pos":[0,28]}]},{"content":"Compares a string against a pattern.","pos":[1207,1243]},{"pos":[1252,1258],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1316,1321],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1337,1346]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> variable.","pos":[1347,1370],"source":" Any `Boolean` variable."},{"content":"The result is a <ph id=\"ph1\">`Boolean`</ph> value indicating whether or not the <ph id=\"ph2\">`string`</ph> satisfies the <ph id=\"ph3\">`pattern`</ph>.","pos":[1371,1466],"source":" The result is a `Boolean` value indicating whether or not the `string` satisfies the `pattern`."},{"content":"Required.","pos":[1485,1494]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression.","pos":[1495,1519],"source":" Any `String` expression."},{"content":"Required.","pos":[1539,1548]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression conforming to the pattern-matching conventions described in \"Remarks.\"","pos":[1549,1643],"source":" Any `String` expression conforming to the pattern-matching conventions described in \"Remarks.\""},{"pos":[1652,1659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the value in <ph id=\"ph1\">`string`</ph> satisfies the pattern contained in <ph id=\"ph2\">`pattern`</ph>, <ph id=\"ph3\">`result`</ph> is <ph id=\"ph4\">`True`</ph>.","pos":[1663,1753],"source":"If the value in `string` satisfies the pattern contained in `pattern`, `result` is `True`."},{"content":"If the string does not satisfy the pattern, <ph id=\"ph1\">`result`</ph> is <ph id=\"ph2\">`False`</ph>.","pos":[1754,1818],"source":" If the string does not satisfy the pattern, `result` is `False`."},{"content":"If both <ph id=\"ph1\">`string`</ph> and <ph id=\"ph2\">`pattern`</ph> are empty strings, the result is <ph id=\"ph3\">`True`</ph>.","pos":[1819,1890],"source":" If both `string` and `pattern` are empty strings, the result is `True`."},{"pos":[1899,1916],"content":"Comparison Method","linkify":"Comparison Method","nodes":[{"content":"Comparison Method","pos":[0,17]}]},{"content":"The behavior of the <ph id=\"ph1\">`Like`</ph> operator depends on the <bpt id=\"p1\">[</bpt>Option Compare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept>.","pos":[1920,2079],"source":"The behavior of the `Like` operator depends on the [Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md)."},{"content":"The default string comparison method for each source file is <ph id=\"ph1\">`Option Compare Binary`</ph>.","pos":[2080,2165],"source":" The default string comparison method for each source file is `Option Compare Binary`."},{"pos":[2174,2189],"content":"Pattern Options","linkify":"Pattern Options","nodes":[{"content":"Pattern Options","pos":[0,15]}]},{"content":"Built-in pattern matching provides a versatile tool for string comparisons.","pos":[2193,2268]},{"content":"The pattern-matching features allow you to match each character in <ph id=\"ph1\">`string`</ph> against a specific character, a wildcard character, a character list, or a character range.","pos":[2269,2436],"source":" The pattern-matching features allow you to match each character in `string` against a specific character, a wildcard character, a character list, or a character range."},{"content":"The following table shows the characters allowed in <ph id=\"ph1\">`pattern`</ph> and what they match.","pos":[2437,2519],"source":" The following table shows the characters allowed in `pattern` and what they match."},{"pos":[2526,2549],"content":"Characters in <ph id=\"ph1\">`pattern`</ph>","source":"Characters in `pattern`"},{"pos":[2550,2569],"content":"Matches in <ph id=\"ph1\">`string`</ph>","source":"Matches in `string`"},{"content":"Any single character","pos":[2638,2658]},{"content":"Zero or more characters","pos":[2667,2690]},{"content":"Any single digit (0–9)","pos":[2699,2721]},{"pos":[2726,2744],"content":"<ph id=\"ph1\">`[`</ph> <ph id=\"ph2\">`charlist`</ph> <ph id=\"ph3\">`]`</ph>","source":"`[` `charlist` `]`"},{"pos":[2745,2779],"content":"Any single character in <ph id=\"ph1\">`charlist`</ph>","source":"Any single character in `charlist`"},{"pos":[2784,2803],"content":"<ph id=\"ph1\">`[!`</ph> <ph id=\"ph2\">`charlist`</ph> <ph id=\"ph3\">`]`</ph>","source":"`[!` `charlist` `]`"},{"pos":[2804,2842],"content":"Any single character not in <ph id=\"ph1\">`charlist`</ph>","source":"Any single character not in `charlist`"},{"pos":[2852,2867],"content":"Character Lists","linkify":"Character Lists","nodes":[{"content":"Character Lists","pos":[0,15]}]},{"pos":[2871,3061],"content":"A group of one or more characters (<ph id=\"ph1\">`charlist`</ph>) enclosed in brackets (<ph id=\"ph2\">`[ ]`</ph>) can be used to match any single character in <ph id=\"ph3\">`string`</ph> and can include almost any character code, including digits.","source":"A group of one or more characters (`charlist`) enclosed in brackets (`[ ]`) can be used to match any single character in `string` and can include almost any character code, including digits."},{"content":"An exclamation point (<ph id=\"ph1\">`!`</ph>) at the beginning of <ph id=\"ph2\">`charlist`</ph> means that a match is made if any character except the characters in <ph id=\"ph3\">`charlist`</ph> is found in <ph id=\"ph4\">`string`</ph>.","pos":[3068,3227],"source":"An exclamation point (`!`) at the beginning of `charlist` means that a match is made if any character except the characters in `charlist` is found in `string`."},{"content":"When used outside brackets, the exclamation point matches itself.","pos":[3228,3293]},{"pos":[3302,3320],"content":"Special Characters","linkify":"Special Characters","nodes":[{"content":"Special Characters","pos":[0,18]}]},{"content":"To match the special characters left bracket (<ph id=\"ph1\">`[`</ph>), question mark (<ph id=\"ph2\">`?`</ph>), number sign (<ph id=\"ph3\">`#`</ph>), and asterisk (<ph id=\"ph4\">`*`</ph>), enclose them in brackets.","pos":[3324,3461],"source":"To match the special characters left bracket (`[`), question mark (`?`), number sign (`#`), and asterisk (`*`), enclose them in brackets."},{"content":"The right bracket (<ph id=\"ph1\">`]`</ph>) cannot be used within a group to match itself, but it can be used outside a group as an individual character.","pos":[3462,3595],"source":" The right bracket (`]`) cannot be used within a group to match itself, but it can be used outside a group as an individual character."},{"content":"The character sequence <ph id=\"ph1\">`[]`</ph> is considered a zero-length string (<ph id=\"ph2\">`\"\"`</ph>).","pos":[3602,3672],"source":"The character sequence `[]` is considered a zero-length string (`\"\"`)."},{"content":"However, it cannot be part of a character list enclosed in brackets.","pos":[3673,3741]},{"content":"If you want to check whether a position in <ph id=\"ph1\">`string`</ph> contains one of a group of characters or no character at all, you can use <ph id=\"ph2\">`Like`</ph> twice.","pos":[3742,3881],"source":" If you want to check whether a position in `string` contains one of a group of characters or no character at all, you can use `Like` twice."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>How to: Match a String against a Pattern<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern.md)</ept>.","pos":[3882,4073],"source":" For an example, see [How to: Match a String against a Pattern](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern.md)."},{"pos":[4082,4098],"content":"Character Ranges","linkify":"Character Ranges","nodes":[{"content":"Character Ranges","pos":[0,16]}]},{"content":"By using a hyphen (<ph id=\"ph1\">`–`</ph>) to separate the lower and upper bounds of the range, <ph id=\"ph2\">`charlist`</ph> can specify a range of characters.","pos":[4102,4224],"source":"By using a hyphen (`–`) to separate the lower and upper bounds of the range, `charlist` can specify a range of characters."},{"content":"For example, <ph id=\"ph1\">`[A–Z]`</ph> results in a match if the corresponding character position in <ph id=\"ph2\">`string`</ph> contains any character within the range <ph id=\"ph3\">`A`</ph>–<ph id=\"ph4\">`Z`</ph>, and <ph id=\"ph5\">`[!H–L]`</ph> results in a match if the corresponding character position contains any character outside the range <ph id=\"ph6\">`H`</ph>–<ph id=\"ph7\">`L`</ph>.","pos":[4225,4487],"source":" For example, `[A–Z]` results in a match if the corresponding character position in `string` contains any character within the range `A`–`Z`, and `[!H–L]` results in a match if the corresponding character position contains any character outside the range `H`–`L`."},{"content":"When you specify a range of characters, they must appear in ascending sort order, that is, from lowest to highest.","pos":[4494,4608]},{"content":"Thus, <ph id=\"ph1\">`[A–Z]`</ph> is a valid pattern, but <ph id=\"ph2\">`[Z–A]`</ph> is not.","pos":[4609,4662],"source":" Thus, `[A–Z]` is a valid pattern, but `[Z–A]` is not."},{"pos":[4672,4697],"content":"Multiple Character Ranges","linkify":"Multiple Character Ranges","nodes":[{"content":"Multiple Character Ranges","pos":[0,25]}]},{"content":"To specify multiple ranges for the same character position, put them within the same brackets without delimiters.","pos":[4701,4814]},{"content":"For example, <ph id=\"ph1\">`[A–CX–Z]`</ph> results in a match if the corresponding character position in <ph id=\"ph2\">`string`</ph> contains any character within either the range <ph id=\"ph3\">`A`</ph>–<ph id=\"ph4\">`C`</ph> or the range <ph id=\"ph5\">`X`</ph>–<ph id=\"ph6\">`Z`</ph>.","pos":[4815,4986],"source":" For example, `[A–CX–Z]` results in a match if the corresponding character position in `string` contains any character within either the range `A`–`C` or the range `X`–`Z`."},{"pos":[4996,5015],"content":"Usage of the Hyphen","linkify":"Usage of the Hyphen","nodes":[{"content":"Usage of the Hyphen","pos":[0,19]}]},{"content":"A hyphen (<ph id=\"ph1\">`–`</ph>) can appear either at the beginning (after an exclamation point, if any) or at the end of <ph id=\"ph2\">`charlist`</ph> to match itself.","pos":[5019,5150],"source":"A hyphen (`–`) can appear either at the beginning (after an exclamation point, if any) or at the end of `charlist` to match itself."},{"content":"In any other location, the hyphen identifies a range of characters delimited by the characters on either side of the hyphen.","pos":[5151,5275]},{"pos":[5284,5302],"content":"Collating Sequence","linkify":"Collating Sequence","nodes":[{"content":"Collating Sequence","pos":[0,18]}]},{"content":"The meaning of a specified range depends on the character ordering at run time, as determined by <ph id=\"ph1\">`Option``Compare`</ph> and the locale setting of the system the code is running on.","pos":[5306,5481],"source":"The meaning of a specified range depends on the character ordering at run time, as determined by `Option``Compare` and the locale setting of the system the code is running on."},{"content":"With <ph id=\"ph1\">`Option``Compare``Binary`</ph>, the range <ph id=\"ph2\">`[A–E]`</ph> matches <ph id=\"ph3\">`A`</ph>, <ph id=\"ph4\">`B`</ph>, <ph id=\"ph5\">`C`</ph>, <ph id=\"ph6\">`D`</ph>, and <ph id=\"ph7\">`E`</ph>.","pos":[5482,5568],"source":" With `Option``Compare``Binary`, the range `[A–E]` matches `A`, `B`, `C`, `D`, and `E`."},{"content":"With <ph id=\"ph1\">`Option``Compare``Text`</ph>, <ph id=\"ph2\">`[A–E]`</ph> matches <ph id=\"ph3\">`A`</ph>, <ph id=\"ph4\">`a`</ph>, <ph id=\"ph5\">`À`</ph>, <ph id=\"ph6\">`à`</ph>, <ph id=\"ph7\">`B`</ph>, <ph id=\"ph8\">`b`</ph>, <ph id=\"ph9\">`C`</ph>, <ph id=\"ph10\">`c`</ph>, <ph id=\"ph11\">`D`</ph>, <ph id=\"ph12\">`d`</ph>, <ph id=\"ph13\">`E`</ph>, and <ph id=\"ph14\">`e`</ph>.","pos":[5569,5678],"source":" With `Option``Compare``Text`, `[A–E]` matches `A`, `a`, `À`, `à`, `B`, `b`, `C`, `c`, `D`, `d`, `E`, and `e`."},{"content":"The range does not match <ph id=\"ph1\">`Ê`</ph> or <ph id=\"ph2\">`ê`</ph> because accented characters collate after unaccented characters in the sort order.","pos":[5679,5797],"source":" The range does not match `Ê` or `ê` because accented characters collate after unaccented characters in the sort order."},{"pos":[5806,5824],"content":"Digraph Characters","linkify":"Digraph Characters","nodes":[{"content":"Digraph Characters","pos":[0,18]}]},{"content":"In some languages, there are alphabetic characters that represent two separate characters.","pos":[5828,5918]},{"content":"For example, several languages use the character <ph id=\"ph1\">`æ`</ph> to represent the characters <ph id=\"ph2\">`a`</ph> and <ph id=\"ph3\">`e`</ph> when they appear together.","pos":[5919,6038],"source":" For example, several languages use the character `æ` to represent the characters `a` and `e` when they appear together."},{"content":"The <ph id=\"ph1\">`Like`</ph> operator recognizes that the single digraph character and the two individual characters are equivalent.","pos":[6039,6153],"source":" The `Like` operator recognizes that the single digraph character and the two individual characters are equivalent."},{"content":"When a language that uses a digraph character is specified in the system locale settings, an occurrence of the single digraph character in either <ph id=\"ph1\">`pattern`</ph> or <ph id=\"ph2\">`string`</ph> matches the equivalent two-character sequence in the other string.","pos":[6160,6394],"source":"When a language that uses a digraph character is specified in the system locale settings, an occurrence of the single digraph character in either `pattern` or `string` matches the equivalent two-character sequence in the other string."},{"content":"Similarly, a digraph character in <ph id=\"ph1\">`pattern`</ph> enclosed in brackets (by itself, in a list, or in a range) matches the equivalent two-character sequence in <ph id=\"ph2\">`string`</ph>.","pos":[6395,6556],"source":" Similarly, a digraph character in `pattern` enclosed in brackets (by itself, in a list, or in a range) matches the equivalent two-character sequence in `string`."},{"pos":[6565,6576],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`Like`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[6580,6741],"source":"The `Like` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[6742,6850]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[6851,6992],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[7001,7008],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">`Like`</ph> operator to compare strings to various patterns.","pos":[7012,7089],"source":"This example uses the `Like` operator to compare strings to various patterns."},{"content":"The results go into a <ph id=\"ph1\">`Boolean`</ph> variable indicating whether each string satisfies the pattern.","pos":[7090,7184],"source":" The results go into a `Boolean` variable indicating whether each string satisfies the pattern."},{"pos":[7191,7317],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#30<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/like-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#30](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/like-operator_1.vb)]"},{"pos":[7326,7334],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.InStr%2A&gt;</ph>","pos":[7338,7383],"source":"<xref:Microsoft.VisualBasic.Strings.InStr%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.StrComp%2A&gt;</ph>","pos":[7388,7435],"source":" <xref:Microsoft.VisualBasic.Strings.StrComp%2A> "},{"content":"<bpt id=\"p1\"> [</bpt>Comparison Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[7439,7539],"source":" [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[7542,7656],"source":" [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[7659,7785],"source":" [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Option Compare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[7788,7897],"source":" [Option Compare Statement](../../../visual-basic/language-reference/statements/option-compare-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[7900,8023],"source":" [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Match a String against a Pattern<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern.md)</ept>","pos":[8026,8197],"source":" [How to: Match a String against a Pattern](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern.md)"}]}