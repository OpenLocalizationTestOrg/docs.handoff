<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-access-a-member-with-a-pointer.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9762b9e2487c30b81b7ef6ae22827b64e3cb02e2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\unsafe-code-pointers\how-to-access-a-member-with-a-pointer.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1507521a8386622c12ee7e665d6b84af12ffdd63</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">903aa8d1b7b9e9e7ffd92b6695ffe7f11bc0209b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: access a member with a pointer - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: access a member with a pointer (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To access a member of a struct that is declared in an unsafe context, you can use the member access operator as shown in the following example in which <ph id="ph1">`p`</ph> is a pointer to a <bpt id="p1">[</bpt>struct<ept id="p1">](../../../csharp/language-reference/keywords/struct.md)</ept> that contains a member <ph id="ph2">`x`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this example, a <bpt id="p1">[</bpt>struct<ept id="p1">](../../../csharp/language-reference/keywords/struct.md)</ept>, <ph id="ph1">`CoOrds`</ph>, that contains the two coordinates <ph id="ph2">`x`</ph> and <ph id="ph3">`y`</ph> is declared and instantiated.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By using the member access operator <ph id="ph1">`-&gt;`</ph> and a pointer to the instance <ph id="ph2">`home`</ph>, <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph> are assigned values.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Notice that the expression <ph id="ph1">`p-&gt;x`</ph> is equivalent to the expression <ph id="ph2">`(*p).x`</ph>, and you can obtain the same result by using either of the two expressions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pointer Expressions<ept id="p1">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pointer types<ept id="p1">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types<ept id="p1">](../../../csharp/language-reference/keywords/types.md)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unsafe<ept id="p1">](../../../csharp/language-reference/keywords/unsafe.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fixed Statement<ept id="p1">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>stackalloc<ept id="p1">](../../../csharp/language-reference/keywords/stackalloc.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>