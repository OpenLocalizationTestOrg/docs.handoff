<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="pattern-matching.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bd5144d2ecb65c762dfa81e205982b99d901022</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\pattern-matching.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9ae20336c18dbea9a957e1839ab12e46df183e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e570e4b256d93a2d312b8b922f070d73d1a5a61</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Pattern Matching - C# Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about pattern matching expressions in C#</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Pattern Matching</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Patterns test that a value has a certain <bpt id="p1">*</bpt>shape<ept id="p1">*</ept>, and can <bpt id="p2">*</bpt>extract<ept id="p2">*</ept> information from the value when it has the matching shape.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Pattern matching provides more concise syntax for algorithms you already use today.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You already create pattern matching algorithms using existing syntax.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You write <ph id="ph1">`if`</ph> or <ph id="ph2">`switch`</ph> statements that test values.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Then, when those statements match, you extract and use information from that value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The new syntax elements are extensions to statements you are already familiar with: <ph id="ph1">`is`</ph> and <ph id="ph2">`switch`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These new extensions combine testing a value and extracting that information.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In this topic, we'll look at the new syntax to show you how it enables readable, concise code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Pattern matching enables idioms where data and the code are separated, unlike object oriented designs where data and the methods that manipulate them are tightly coupled.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To illustrate these new idioms, let's work with structures that represent geometric shapes using pattern matching statements.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You are probably familiar with building class hierarchies and creating <bpt id="p1">[</bpt>virtual methods and overridden methods<ept id="p1">](methods.md#inherited)</ept> to customize object behavior based on the runtime type of the object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Those techniques aren't possible for data that isn't structured in a class hierarchy.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When data and methods are separate, you need other tools.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The new <bpt id="p1">*</bpt>pattern matching<ept id="p1">*</ept> constructs enable cleaner syntax to examine data and manipulate control flow based on any condition of that data.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You already write <ph id="ph1">`if`</ph> statements and <ph id="ph2">`switch`</ph> that test a variable's value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You write <ph id="ph1">`is`</ph> statements that test a variable's type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Pattern matching<ept id="p1">*</ept> adds new capabilities to those statements.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this topic, you'll build a method  that computes the area of different geometric shapes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>But, you'll do it without resorting to object oriented techniques and building a class hierarchy for the different shapes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You'll use <bpt id="p1">*</bpt>pattern matching<ept id="p1">*</ept> instead.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As you go through this sample, contrast this code with how it would be structured as an object hierarchy.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When the data you must query and manipulate is not a class hierarchy, pattern matching enables very elegant designs.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Rather than starting with an abstract shape definition and adding different specific shape classes, let's start instead with simple data only definitions for each of the geometric shapes:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>From these structures, let's write a method that computes the area of some shape.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`is`</ph> type pattern expression</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Before C# 7.0, you'd need to test each type in a series of <ph id="ph1">`if`</ph> and <ph id="ph2">`is`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>That code above is a classic expression of the <bpt id="p1">*</bpt>type pattern<ept id="p1">*</ept>: You're testing a variable to determine its type and taking a different action based on that type.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This code becomes simpler using extensions to the <ph id="ph1">`is`</ph> expression to assign a variable if the test succeeds:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this updated version, the <ph id="ph1">`is`</ph> expression both tests the variable and assigns it to a new variable of the proper type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Also, notice that this version includes the <ph id="ph1">`Rectangle`</ph> type, which is a <ph id="ph2">`struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">`is`</ph> expression works with value types as well as reference types.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Language rules for pattern matching expressions help you avoid misusing the results of a match expression.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the example above, the variables <ph id="ph1">`s`</ph>, <ph id="ph2">`c`</ph>, and <ph id="ph3">`r`</ph> are only in scope and definitely assigned when the respective pattern match expressions have <ph id="ph4">`true`</ph> results.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you try to use either variable in another location, your code generates compiler errors.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Let's examine both of those rules in detail, beginning with scope.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`c`</ph> is in scope only in the <ph id="ph2">`else`</ph> branch of the first <ph id="ph3">`if`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`s`</ph> is in scope in the method <ph id="ph2">`ComputeAreaModernIs`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>That's because each branch of an <ph id="ph1">`if`</ph> statement establishes a separate scope for variables.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`if`</ph> statement itself does not.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>That means variables declared in the <ph id="ph1">`if`</ph> statement are in the same scope as the <ph id="ph2">`if`</ph> statement (the method in this case.) This behavior is not specific to pattern matching, but is the defined behavior for variable scopes and <ph id="ph3">`if`</ph> and <ph id="ph4">`else`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The variables <ph id="ph1">`c`</ph> and <ph id="ph2">`s`</ph> are assigned when the respective <ph id="ph3">`if`</ph> statements are true because of the definitely assigned when true mechanism.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The samples in this topic use the recommended construct where a pattern match <ph id="ph1">`is`</ph> expression definitely assigns the match variable in the <ph id="ph2">`true`</ph> branch of the <ph id="ph3">`if`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You could reverse the logic by saying <ph id="ph1">`if (!(shape is Square s))`</ph> and the variable <ph id="ph2">`s`</ph> would be definitely assigned only in the <ph id="ph3">`false`</ph> branch.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>While this is valid C#, it is not recommended because it is more confusing to follow the logic.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>These rules mean that you are unlikely to accidentally access the result of a pattern match expression when that pattern was not met.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Using pattern matching <ph id="ph1">`switch`</ph> statements</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As time goes on, you may need to support other shape types.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>As the number of conditions you are testing grows, you'll find that using the <ph id="ph1">`is`</ph> pattern matching expressions can become cumbersome.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In addition to requiring <ph id="ph1">`if`</ph> statements on each type you want to check, the <ph id="ph2">`is`</ph> expressions are limited to testing if the input matches a single type.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In this case, you'll find that the <ph id="ph1">`switch`</ph> pattern matching expressions becomes a better choice.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The traditional <ph id="ph1">`switch`</ph> statement was a pattern expression: it supported the constant pattern.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You could compare a variable to any constant used in a <ph id="ph1">`case`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The only pattern supported by the <ph id="ph1">`switch`</ph> statement was the constant pattern.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It was further limited to numeric types and the <ph id="ph1">`string`</ph> type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Those restrictions have been removed, and you can now write a <ph id="ph1">`switch`</ph> statement using the type pattern:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The pattern matching <ph id="ph1">`switch`</ph> statement uses familiar syntax to developers who have used the traditional C-style <ph id="ph2">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`case`</ph> is evaluated and the code beneath the condition that matches the input variable is executed.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Code execution cannot "fall through" from one case expression to the next; the syntax of the <ph id="ph1">`case`</ph> statement requires that each <ph id="ph2">`case`</ph> end with a <ph id="ph3">`break`</ph>, <ph id="ph4">`return`</ph>, or <ph id="ph5">`goto`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`goto`</ph> statements to jump to another label are valid only for the constant pattern (the classic switch statement).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>There are important new rules governing the <ph id="ph1">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The restrictions on the type of the variable in the <ph id="ph1">`switch`</ph> expression have been removed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Any type, such as <ph id="ph1">`object`</ph> in this example, may be used.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The case expressions are no longer limited to constant values.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Removing that limitation means that reordering <ph id="ph1">`switch`</ph> sections may change a program's behavior.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When limited to constant values, no more than one <ph id="ph1">`case`</ph> label could match the value of the <ph id="ph2">`switch`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Combine that with the rule that every <ph id="ph1">`switch`</ph> section must not fall through to the next section, and it followed that the <ph id="ph2">`switch`</ph> sections could be rearranged in any order without affecting behavior.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Now, with more generalized <ph id="ph1">`switch`</ph> expressions, the order of each section matters.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`switch`</ph> expressions are evaluated in textual order.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Execution transfers to the first <ph id="ph1">`switch`</ph> label that matches the <ph id="ph2">`switch`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`default`</ph> case will only be executed if no other case labels match.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`default`</ph> case is evaluated last, regardless of its textual order.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If there is no <ph id="ph1">`default`</ph> case, and none of the other <ph id="ph2">`case`</ph> statements match, execution continues at the statement following the <ph id="ph3">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>None of the <ph id="ph1">`case`</ph> labels code is executed.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`when`</ph> clauses in <ph id="ph2">`case`</ph> expressions</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can make special cases for those shapes that have 0 area by using a <ph id="ph1">`when`</ph> clause on the <ph id="ph2">`case`</ph> label.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A square with a side length of 0, or a circle with a radius of 0 has a 0 area.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You specify that condition using a <ph id="ph1">`when`</ph> clause on the <ph id="ph2">`case`</ph> label:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This change demonstrates a few important points about the new syntax.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>First, multiple <ph id="ph1">`case`</ph> labels can be applied to one <ph id="ph2">`switch`</ph> section.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The statement block is executed when any of those labels is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this instance, if the <ph id="ph1">`switch`</ph> expression is either a circle or a square with 0 area, the method returns the constant 0.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This example introduces two different variables in the two <ph id="ph1">`case`</ph> labels for the first <ph id="ph2">`switch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Notice that the statements in this <ph id="ph1">`switch`</ph> block do not use either the variables <ph id="ph2">`c`</ph> (for the circle) or <ph id="ph3">`s`</ph> (for the square).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Neither of those variables is definitely assigned in this <ph id="ph1">`switch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If either of these cases match, clearly one of the variables has been assigned.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>However, it is impossible to tell <bpt id="p1">*</bpt>which<ept id="p1">*</ept> has been assigned at compile-time, because either case could match at runtime.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For that reason, most times when you use multiple <ph id="ph1">`case`</ph> labels for the same block, you won't introduce a new variable in the <ph id="ph2">`case`</ph> statement, or you will only use the variable in the <ph id="ph3">`when`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Having added those shapes with 0 area, let's add a couple more shape types: a rectangle and a triangle:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This set of changes adds <ph id="ph1">`case`</ph> labels for the degenerate case, and labels and blocks for each of the new shapes.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Finally, you can add a <ph id="ph1">`null`</ph> case to ensure the argument is not <ph id="ph2">`null`</ph>:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The special behavior for the <ph id="ph1">`null`</ph> pattern is interesting because the constant <ph id="ph2">`null`</ph> in the pattern does not have a type but can be converted to any reference type or nullable type.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Rather than convert a <ph id="ph1">`null`</ph> to any type, the language defines that a <ph id="ph2">`null`</ph> value will not match any type pattern, regardless of the compile-time type of the variable.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This behavior makes the new <ph id="ph1">`switch`</ph> based type pattern consistent with the <ph id="ph2">`is`</ph> statement: <ph id="ph3">`is`</ph> statements always return <ph id="ph4">`false`</ph> when the value being checked is <ph id="ph5">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It's also simpler: once you have checked the type, you don't need an additional null check.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can see that from the fact that there are no null checks in any of the case blocks of the samples above: they are not necessary, since matching the type pattern guarantees a non-null value.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`var`</ph> declarations in <ph id="ph2">`case`</ph> expressions</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The introduction of <ph id="ph1">`var`</ph> as one of the match expressions introduces new rules to the pattern match.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The first rule is that the <ph id="ph1">`var`</ph> declaration follows the normal type inference rules: The type is inferred to be the static type of the switch expression.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>From that rule, the type always matches.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The second rule is that a <ph id="ph1">`var`</ph> declaration does not have the null check that other type pattern expressions include.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>That means the variable may be null, and a null check is necessary in that case.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Those two rules mean that in many instances, a <ph id="ph1">`var`</ph> declaration in a <ph id="ph2">`case`</ph> expression matches the same conditions as a <ph id="ph3">`default`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Because any non-default case is preferred to the <ph id="ph1">`default`</ph> case, the <ph id="ph2">`default`</ph> case will never execute.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The compiler does not emit a warning in those cases where a <ph id="ph1">`default`</ph> case has been written but will never execute.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This is consistent with current <ph id="ph1">`switch`</ph> statement behavior where all possible cases have been listed.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The third rule introduces uses where a <ph id="ph1">`var`</ph> case may be useful.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Imagine that you are doing a pattern match where the input is a string and you are searching for known command values.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You might write something like:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`var`</ph> case matches <ph id="ph2">`null`</ph>, the empty string, or any string that contains only white space.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Notice that the preceding code uses the <ph id="ph1">`?.`</ph> operator to ensure that it does not accidentally throw a <ph id="ph2">&lt;xref:System.NullReferenceException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`default`</ph> case handles any other string values that are not understood by this command parser.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This is one example where you may want to consider a <ph id="ph1">`var`</ph> case expression that is distinct from a <ph id="ph2">`default`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Conclusions</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Pattern Matching constructs<ept id="p1">*</ept> enable you to easily manage control flow among different variables and types that are not related by an inheritance hierarchy.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You can also control logic to use any condition you test on the variable.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>It enables patterns and idioms that you'll need more often as you build more distributed applications, where data and the methods that manipulate that data are separate.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You'll notice that the shape structs used in this sample do not contain any methods, just read-only properties.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Pattern Matching works with any data type.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You write expressions that examine the object, and make control flow decisions based on those conditions.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Compare the code from this sample with the design that would follow from creating a class hierarchy for an abstract <ph id="ph1">`Shape`</ph> and specific derived shapes each with their own implementation of a virtual method to calculate the area.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You'll often find that pattern matching expressions can be a very useful tool when you are working with data and want to separate the data storage concerns from the behavior concerns.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>