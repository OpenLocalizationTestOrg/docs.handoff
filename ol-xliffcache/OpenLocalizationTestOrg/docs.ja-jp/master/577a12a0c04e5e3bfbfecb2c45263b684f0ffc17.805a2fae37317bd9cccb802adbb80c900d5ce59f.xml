{"content":"---\ntitle: \"TextBox Overview\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"controls [WPF], TextBox\"\n  - \"TextBox control [WPF], about TextBox control\"\nms.assetid: 1ba6dc5b-11a7-4247-9213-36c6729ee35f\n---\n# TextBox Overview\nThe <xref:System.Windows.Controls.TextBox> class enables you to display or edit unformatted text. A common use of a <xref:System.Windows.Controls.TextBox> is editing unformatted text in a form. For example, a form asking for the user's name, phone number, etc would use <xref:System.Windows.Controls.TextBox> controls for text input. This topic introduces the <xref:System.Windows.Controls.TextBox> class and provides examples of how to use it in both [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] and C#.  \n\n<a name=\"textbox_or_richtextbox\"></a>   \n## TextBox or RichTextBox?  \n Both <xref:System.Windows.Controls.TextBox> and <xref:System.Windows.Controls.RichTextBox> allow users to input text but the two controls are used for different scenarios. A <xref:System.Windows.Controls.TextBox> requires less system resources then a <xref:System.Windows.Controls.RichTextBox> so it is ideal when only plain text needs to be edited (i.e., usage in a form). A <xref:System.Windows.Controls.RichTextBox> is a better choice when it is necessary for the user to edit formatted text, images, tables, or other supported content. For example, editing a document, article, or blog that requires formatting, images, etc is best accomplished using a <xref:System.Windows.Controls.RichTextBox>. The table below summarizes the primary features of <xref:System.Windows.Controls.TextBox> and <xref:System.Windows.Controls.TextBox>.  \n  \n|Control|Real-time Spellchecking|Context Menu|Formatting commands like <xref:System.Windows.Documents.EditingCommands.ToggleBold%2A> (Ctr+B)|<xref:System.Windows.Documents.FlowDocument> content like images, paragraphs, tables, etc.|  \n|-------------|------------------------------|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|  \n|<xref:System.Windows.Controls.TextBox>|Yes|Yes|No|No.|  \n|<xref:System.Windows.Controls.RichTextBox>|Yes|Yes|Yes (see [RichTextBox Overview](richtextbox-overview.md))|Yes (see [RichTextBox Overview](richtextbox-overview.md))|  \n  \n> [!NOTE]\n>  Although <xref:System.Windows.Controls.TextBox> does not support formatting related editing commands like <xref:System.Windows.Documents.EditingCommands.ToggleBold%2A> (Ctr+B), many basic commands are supported by both controls such as <xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>. See <xref:System.Windows.Documents.EditingCommands> for more information.  \n  \n Features supported by <xref:System.Windows.Controls.TextBox> are covered in the sections below. For more information about <xref:System.Windows.Controls.RichTextBox>, see [RichTextBox Overview](richtextbox-overview.md).  \n  \n### Real-time Spellchecking  \n You can enable real-time spellchecking in a <xref:System.Windows.Controls.TextBox> or <xref:System.Windows.Controls.RichTextBox>. When spellchecking is turned on, a red line appears underneath any misspelled words (see picture below).  \n  \n ![Textbox with spell&#45;checking](./media/editing-textbox-with-spellchecking.png \"Editing_TextBox_with_Spellchecking\")  \n  \n See [Enable Spell Checking in a Text Editing Control](how-to-enable-spell-checking-in-a-text-editing-control.md) to learn how to enable spellchecking.  \n  \n### Context Menu  \n By default, both <xref:System.Windows.Controls.TextBox> and <xref:System.Windows.Controls.RichTextBox> have a context menu that appears when a user right-clicks inside the control. The context menu allows the user to cut, copy, or paste (see picture below).  \n  \n ![TextBox with context menu](./media/editing-textbox-with-context-menu.png \"Editing_TextBox_with_Context_Menu\")  \n  \n You can create your own custom context menu to override the default behavior. See [Use a Custom Context Menu with a TextBox](how-to-use-a-custom-context-menu-with-a-textbox.md) for more information.  \n  \n<a name=\"creating_textboxes\"></a>   \n## Creating TextBoxes  \n A <xref:System.Windows.Controls.TextBox> can be a single line in height or comprise multiple lines. A single line <xref:System.Windows.Controls.TextBox> is best for inputting small amounts of plain text (i.e. \"Name\", \"Phone Number\", etc. in a form). The following example shows how to create a single line <xref:System.Windows.Controls.TextBox>.  \n  \n [!code-xaml[TextBoxMiscSnippets_snip#BasicTextBoxExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBoxMiscSnippets_snip/csharp/basictextboxexample.xaml#basictextboxexamplewholepage)]  \n  \n You can also create a <xref:System.Windows.Controls.TextBox> that allows the user to enter multiple lines of text. For example, if your form asked for a biographical sketch of the user, you would want to use a <xref:System.Windows.Controls.TextBox> that supports multiple lines of text. The following example shows how to use [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] to define a <xref:System.Windows.Controls.TextBox> control that automatically expands to accommodate multiple lines of text.  \n  \n [!code-xaml[TextBox_MiscCode#_MultilineTextBoxXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_MiscCode/CSharp/Window1.xaml#_multilinetextboxxaml)]  \n  \n Setting the <xref:System.Windows.Controls.TextBox.TextWrapping%2A> attribute to `Wrap` causes text to wrap to a new line when the edge of the <xref:System.Windows.Controls.TextBox> control is reached, automatically expanding the <xref:System.Windows.Controls.TextBox> control to include room for a new line, if necessary.  \n  \n Setting the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> attribute to `true` causes a new line to be inserted when the RETURN key is pressed, once again automatically expanding the <xref:System.Windows.Controls.TextBox> to include room for a new line, if necessary.  \n  \n The <xref:System.Windows.Controls.Primitives.TextBoxBase.VerticalScrollBarVisibility%2A> attribute adds a scroll bar to the <xref:System.Windows.Controls.TextBox>, so that the contents of the <xref:System.Windows.Controls.TextBox> can be scrolled through if the <xref:System.Windows.Controls.TextBox> expands beyond the size of the frame or window that encloses it.  \n  \n For more information on different tasks associated with using a <xref:System.Windows.Controls.TextBox>, see [How-to Topics](textbox-how-to-topics.md).  \n  \n<a name=\"editing_commands\"></a>   \n## Detect When Content Changes  \n Usually the <xref:System.Windows.Controls.Primitives.TextBoxBase.TextChanged> event should be used to detect whenever the text in a <xref:System.Windows.Controls.TextBox> or <xref:System.Windows.Controls.RichTextBox> changes, rather then <xref:System.Windows.UIElement.KeyDown> as you might expect. See [Detect When Text in a TextBox Has Changed](how-to-detect-when-text-in-a-textbox-has-changed.md) for an example.  \n  \n## See also\n\n- [How-to Topics](textbox-how-to-topics.md)\n- [RichTextBox Overview](richtextbox-overview.md)\n","nodes":[{"pos":[4,203],"embed":true,"restype":"x-metadata","content":"title: \"TextBox Overview\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"controls [WPF], TextBox\"\n  - \"TextBox control [WPF], about TextBox control\"\nms.assetid: 1ba6dc5b-11a7-4247-9213-36c6729ee35f","nodes":[{"content":"TextBox Overview","nodes":[{"pos":[0,16],"content":"TextBox Overview","nodes":[{"content":"TextBox Overview","pos":[0,16]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[210,226],"content":"TextBox Overview","linkify":"TextBox Overview","nodes":[{"content":"TextBox Overview","pos":[0,16]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> class enables you to display or edit unformatted text.","pos":[227,324],"source":"The <xref:System.Windows.Controls.TextBox> class enables you to display or edit unformatted text."},{"content":"A common use of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is editing unformatted text in a form.","pos":[325,420],"source":" A common use of a <xref:System.Windows.Controls.TextBox> is editing unformatted text in a form."},{"content":"For example, a form asking for the user's name, phone number, etc would use <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls for text input.","pos":[421,560],"source":" For example, a form asking for the user's name, phone number, etc would use <xref:System.Windows.Controls.TextBox> controls for text input."},{"content":"This topic introduces the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> class and provides examples of how to use it in both <ph id=\"ph2\">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> and C#.","pos":[561,756],"source":" This topic introduces the <xref:System.Windows.Controls.TextBox> class and provides examples of how to use it in both [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] and C#."},{"pos":[804,827],"content":"TextBox or RichTextBox?","linkify":"TextBox or RichTextBox?","nodes":[{"content":"TextBox or RichTextBox?","pos":[0,23]}]},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> allow users to input text but the two controls are used for different scenarios.","pos":[831,1002],"source":"Both <xref:System.Windows.Controls.TextBox> and <xref:System.Windows.Controls.RichTextBox> allow users to input text but the two controls are used for different scenarios."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> requires less system resources then a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> so it is ideal when only plain text needs to be edited (i.e., usage in a form).","pos":[1003,1204],"source":" A <xref:System.Windows.Controls.TextBox> requires less system resources then a <xref:System.Windows.Controls.RichTextBox> so it is ideal when only plain text needs to be edited (i.e., usage in a form)."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> is a better choice when it is necessary for the user to edit formatted text, images, tables, or other supported content.","pos":[1205,1370],"source":" A <xref:System.Windows.Controls.RichTextBox> is a better choice when it is necessary for the user to edit formatted text, images, tables, or other supported content."},{"content":"For example, editing a document, article, or blog that requires formatting, images, etc is best accomplished using a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>.","pos":[1371,1531],"source":" For example, editing a document, article, or blog that requires formatting, images, etc is best accomplished using a <xref:System.Windows.Controls.RichTextBox>."},{"content":"The table below summarizes the primary features of <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.","pos":[1532,1665],"source":" The table below summarizes the primary features of <xref:System.Windows.Controls.TextBox> and <xref:System.Windows.Controls.TextBox>."},{"content":"Control","pos":[1672,1679]},{"content":"Real-time Spellchecking","pos":[1680,1703]},{"content":"Context Menu","pos":[1704,1716]},{"pos":[1717,1811],"content":"Formatting commands like <ph id=\"ph1\">&lt;xref:System.Windows.Documents.EditingCommands.ToggleBold%2A&gt;</ph> (Ctr+B)","source":"Formatting commands like <xref:System.Windows.Documents.EditingCommands.ToggleBold%2A> (Ctr+B)"},{"pos":[1812,1902],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> content like images, paragraphs, tables, etc.","source":"<xref:System.Windows.Documents.FlowDocument> content like images, paragraphs, tables, etc."},{"content":"Yes","pos":[2408,2411]},{"content":"Yes","pos":[2412,2415]},{"content":"No","pos":[2416,2418]},{"content":"No.","pos":[2419,2422]},{"content":"Yes","pos":[2470,2473]},{"content":"Yes","pos":[2474,2477]},{"pos":[2478,2535],"content":"Yes (see <bpt id=\"p1\">[</bpt>RichTextBox Overview<ept id=\"p1\">](richtextbox-overview.md)</ept>)","source":"Yes (see [RichTextBox Overview](richtextbox-overview.md))"},{"pos":[2536,2593],"content":"Yes (see <bpt id=\"p1\">[</bpt>RichTextBox Overview<ept id=\"p1\">](richtextbox-overview.md)</ept>)","source":"Yes (see [RichTextBox Overview](richtextbox-overview.md))"},{"pos":[2602,2988],"content":"[!NOTE]\n Although <xref:System.Windows.Controls.TextBox> does not support formatting related editing commands like <xref:System.Windows.Documents.EditingCommands.ToggleBold%2A> (Ctr+B), many basic commands are supported by both controls such as <xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>. See <xref:System.Windows.Documents.EditingCommands> for more information.","leadings":["","> "],"nodes":[{"content":"Although <xref:System.Windows.Controls.TextBox> does not support formatting related editing commands like <xref:System.Windows.Documents.EditingCommands.ToggleBold%2A> (Ctr+B), many basic commands are supported by both controls such as <xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>. See <xref:System.Windows.Documents.EditingCommands> for more information.","pos":[9,384],"nodes":[{"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> does not support formatting related editing commands like <ph id=\"ph2\">&lt;xref:System.Windows.Documents.EditingCommands.ToggleBold%2A&gt;</ph> (Ctr+B), many basic commands are supported by both controls such as <ph id=\"ph3\">&lt;xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A&gt;</ph>.","pos":[0,301],"source":"Although <xref:System.Windows.Controls.TextBox> does not support formatting related editing commands like <xref:System.Windows.Documents.EditingCommands.ToggleBold%2A> (Ctr+B), many basic commands are supported by both controls such as <xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>."},{"content":"See <ph id=\"ph1\">&lt;xref:System.Windows.Documents.EditingCommands&gt;</ph> for more information.","pos":[302,375],"source":" See <xref:System.Windows.Documents.EditingCommands> for more information."}]}]},{"content":"Features supported by <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> are covered in the sections below.","pos":[2995,3090],"source":"Features supported by <xref:System.Windows.Controls.TextBox> are covered in the sections below."},{"content":"For more information about <ph id=\"ph1\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, see <bpt id=\"p1\">[</bpt>RichTextBox Overview<ept id=\"p1\">](richtextbox-overview.md)</ept>.","pos":[3091,3214],"source":" For more information about <xref:System.Windows.Controls.RichTextBox>, see [RichTextBox Overview](richtextbox-overview.md)."},{"pos":[3224,3247],"content":"Real-time Spellchecking","linkify":"Real-time Spellchecking","nodes":[{"content":"Real-time Spellchecking","pos":[0,23]}]},{"content":"You can enable real-time spellchecking in a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>.","pos":[3251,3380],"source":"You can enable real-time spellchecking in a <xref:System.Windows.Controls.TextBox> or <xref:System.Windows.Controls.RichTextBox>."},{"content":"When spellchecking is turned on, a red line appears underneath any misspelled words (see picture below).","pos":[3381,3485]},{"pos":[3492,3611],"content":"<bpt id=\"p1\">![</bpt>Textbox with spell&amp;#45;checking<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/editing-textbox-with-spellchecking.png \"</bpt>Editing_TextBox_with_Spellchecking<ept id=\"p2\">\")</ept>","source":"![Textbox with spell&#45;checking](./media/editing-textbox-with-spellchecking.png \"Editing_TextBox_with_Spellchecking\")"},{"pos":[3618,3768],"content":"See <bpt id=\"p1\">[</bpt>Enable Spell Checking in a Text Editing Control<ept id=\"p1\">](how-to-enable-spell-checking-in-a-text-editing-control.md)</ept> to learn how to enable spellchecking.","source":"See [Enable Spell Checking in a Text Editing Control](how-to-enable-spell-checking-in-a-text-editing-control.md) to learn how to enable spellchecking."},{"pos":[3778,3790],"content":"Context Menu","linkify":"Context Menu","nodes":[{"content":"Context Menu","pos":[0,12]}]},{"content":"By default, both <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> have a context menu that appears when a user right-clicks inside the control.","pos":[3794,3974],"source":"By default, both <xref:System.Windows.Controls.TextBox> and <xref:System.Windows.Controls.RichTextBox> have a context menu that appears when a user right-clicks inside the control."},{"content":"The context menu allows the user to cut, copy, or paste (see picture below).","pos":[3975,4051]},{"pos":[4058,4169],"content":"<bpt id=\"p1\">![</bpt>TextBox with context menu<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/editing-textbox-with-context-menu.png \"</bpt>Editing_TextBox_with_Context_Menu<ept id=\"p2\">\")</ept>","source":"![TextBox with context menu](./media/editing-textbox-with-context-menu.png \"Editing_TextBox_with_Context_Menu\")"},{"content":"You can create your own custom context menu to override the default behavior.","pos":[4176,4253]},{"content":"See <bpt id=\"p1\">[</bpt>Use a Custom Context Menu with a TextBox<ept id=\"p1\">](how-to-use-a-custom-context-menu-with-a-textbox.md)</ept> for more information.","pos":[4254,4374],"source":" See [Use a Custom Context Menu with a TextBox](how-to-use-a-custom-context-menu-with-a-textbox.md) for more information."},{"pos":[4420,4438],"content":"Creating TextBoxes","linkify":"Creating TextBoxes","nodes":[{"content":"Creating TextBoxes","pos":[0,18]}]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> can be a single line in height or comprise multiple lines.","pos":[4442,4541],"source":"A <xref:System.Windows.Controls.TextBox> can be a single line in height or comprise multiple lines."},{"content":"A single line <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is best for inputting small amounts of plain text (i.e. \"Name\", \"Phone Number\", etc. in a form).","pos":[4542,4691],"source":" A single line <xref:System.Windows.Controls.TextBox> is best for inputting small amounts of plain text (i.e. \"Name\", \"Phone Number\", etc. in a form)."},{"content":"The following example shows how to create a single line <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.","pos":[4692,4787],"source":" The following example shows how to create a single line <xref:System.Windows.Controls.TextBox>."},{"content":"You can also create a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> that allows the user to enter multiple lines of text.","pos":[4997,5111],"source":"You can also create a <xref:System.Windows.Controls.TextBox> that allows the user to enter multiple lines of text."},{"content":"For example, if your form asked for a biographical sketch of the user, you would want to use a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> that supports multiple lines of text.","pos":[5112,5283],"source":" For example, if your form asked for a biographical sketch of the user, you would want to use a <xref:System.Windows.Controls.TextBox> that supports multiple lines of text."},{"content":"The following example shows how to use <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> to define a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control that automatically expands to accommodate multiple lines of text.","pos":[5284,5517],"source":" The following example shows how to use [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] to define a <xref:System.Windows.Controls.TextBox> control that automatically expands to accommodate multiple lines of text."},{"pos":[5685,6006],"content":"Setting the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox.TextWrapping%2A&gt;</ph> attribute to <ph id=\"ph2\">`Wrap`</ph> causes text to wrap to a new line when the edge of the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control is reached, automatically expanding the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control to include room for a new line, if necessary.","source":"Setting the <xref:System.Windows.Controls.TextBox.TextWrapping%2A> attribute to `Wrap` causes text to wrap to a new line when the edge of the <xref:System.Windows.Controls.TextBox> control is reached, automatically expanding the <xref:System.Windows.Controls.TextBox> control to include room for a new line, if necessary."},{"pos":[6013,6304],"content":"Setting the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A&gt;</ph> attribute to <ph id=\"ph2\">`true`</ph> causes a new line to be inserted when the RETURN key is pressed, once again automatically expanding the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> to include room for a new line, if necessary.","source":"Setting the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> attribute to `true` causes a new line to be inserted when the RETURN key is pressed, once again automatically expanding the <xref:System.Windows.Controls.TextBox> to include room for a new line, if necessary."},{"pos":[6311,6676],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.VerticalScrollBarVisibility%2A&gt;</ph> attribute adds a scroll bar to the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, so that the contents of the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> can be scrolled through if the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> expands beyond the size of the frame or window that encloses it.","source":"The <xref:System.Windows.Controls.Primitives.TextBoxBase.VerticalScrollBarVisibility%2A> attribute adds a scroll bar to the <xref:System.Windows.Controls.TextBox>, so that the contents of the <xref:System.Windows.Controls.TextBox> can be scrolled through if the <xref:System.Windows.Controls.TextBox> expands beyond the size of the frame or window that encloses it."},{"pos":[6683,6833],"content":"For more information on different tasks associated with using a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, see <bpt id=\"p1\">[</bpt>How-to Topics<ept id=\"p1\">](textbox-how-to-topics.md)</ept>.","source":"For more information on different tasks associated with using a <xref:System.Windows.Controls.TextBox>, see [How-to Topics](textbox-how-to-topics.md)."},{"pos":[6877,6904],"content":"Detect When Content Changes","linkify":"Detect When Content Changes","nodes":[{"content":"Detect When Content Changes","pos":[0,27]}]},{"content":"Usually the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.TextChanged&gt;</ph> event should be used to detect whenever the text in a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> changes, rather then <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> as you might expect.","pos":[6908,7206],"source":"Usually the <xref:System.Windows.Controls.Primitives.TextBoxBase.TextChanged> event should be used to detect whenever the text in a <xref:System.Windows.Controls.TextBox> or <xref:System.Windows.Controls.RichTextBox> changes, rather then <xref:System.Windows.UIElement.KeyDown> as you might expect."},{"content":"See <bpt id=\"p1\">[</bpt>Detect When Text in a TextBox Has Changed<ept id=\"p1\">](how-to-detect-when-text-in-a-textbox-has-changed.md)</ept> for an example.","pos":[7207,7323],"source":" See [Detect When Text in a TextBox Has Changed](how-to-detect-when-text-in-a-textbox-has-changed.md) for an example."},{"pos":[7332,7340],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7344,7385],"content":"<bpt id=\"p1\">[</bpt>How-to Topics<ept id=\"p1\">](textbox-how-to-topics.md)</ept>","source":"[How-to Topics](textbox-how-to-topics.md)"},{"pos":[7388,7435],"content":"<bpt id=\"p1\">[</bpt>RichTextBox Overview<ept id=\"p1\">](richtextbox-overview.md)</ept>","source":"[RichTextBox Overview](richtextbox-overview.md)"}]}