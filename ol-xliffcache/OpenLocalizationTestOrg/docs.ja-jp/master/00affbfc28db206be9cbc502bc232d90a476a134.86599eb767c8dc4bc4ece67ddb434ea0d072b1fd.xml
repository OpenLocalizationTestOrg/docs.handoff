{"content":"---\ntitle: \"Attributes1 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"attributes [.NET Framework], about\"\n  - \"class library design guidelines [.NET Framework], attributes\"\nms.assetid: ee0038ef-b247-4747-a650-3c5c5cd58d8b\ncaps.latest.revision: 16\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Attributes\n<xref:System.Attribute?displayProperty=fullName> is a base class used to define custom attributes.  \n  \n Attributes are annotations that can be added to programming elements such as assemblies, types, members, and parameters. They are stored in the metadata of the assembly and can be accessed at runtime using the reflection APIs. For example, the Framework defines the <xref:System.ObsoleteAttribute>, which can be applied to a type or a member to indicate that the type or member has been deprecated.  \n  \n Attributes can have one or more properties that carry additional data related to the attribute. For example, `ObsoleteAttribute` could carry additional information about the release in which a type or a member got deprecated and the description of the new APIs replacing the obsolete API.  \n  \n Some properties of an attribute must be specified when the attribute is applied. These are referred to as the required properties or required arguments, because they are represented as positional constructor parameters. For example, the <xref:System.Diagnostics.ConditionalAttribute.ConditionString%2A> property of the <xref:System.Diagnostics.ConditionalAttribute> is a required property.  \n  \n Properties that do not necessarily have to be specified when the attribute is applied are called optional properties (or optional arguments). They are represented by settable properties. Compilers provide special syntax to set these properties when an attribute is applied. For example, the <xref:System.AttributeUsageAttribute.Inherited%2A?displayProperty=fullName> property represents an optional argument.  \n  \n **✓ DO** name custom attribute classes with the suffix \"Attribute.\"  \n  \n **✓ DO** apply the <xref:System.AttributeUsageAttribute> to custom attributes.  \n  \n **✓ DO** provide settable properties for optional arguments.  \n  \n **✓ DO** provide get-only properties for required arguments.  \n  \n **✓ DO** provide constructor parameters to initialize properties corresponding to required arguments. Each parameter should have the same name (although with different casing) as the corresponding property.  \n  \n **X AVOID** providing constructor parameters to initialize properties corresponding to the optional arguments.  \n  \n In other words, do not have properties that can be set with both a constructor and a setter. This guideline makes very explicit which arguments are optional and which are required, and avoids having two ways of doing the same thing.  \n  \n **X AVOID** overloading custom attribute constructors.  \n  \n Having only one constructor clearly communicates to the user which arguments are required and which are optional.  \n  \n **✓ DO** seal custom attribute classes, if possible. This makes the look-up for the attribute faster.  \n  \n *Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*  \n  \n *Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*  \n  \n## See Also  \n [Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)   \n [Usage Guidelines](../../../docs/standard/design-guidelines/usage-guidelines.md)","nodes":[{"pos":[12,40],"content":"Attributes1 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Attributes1 | Microsoft Docs","pos":[0,28]}]},{"pos":[519,529],"content":"Attributes","linkify":"Attributes","nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Attribute?displayProperty=fullName&gt;</ph> is a base class used to define custom attributes.","pos":[530,628],"source":"<xref:System.Attribute?displayProperty=fullName> is a base class used to define custom attributes."},{"content":"Attributes are annotations that can be added to programming elements such as assemblies, types, members, and parameters.","pos":[635,755]},{"content":"They are stored in the metadata of the assembly and can be accessed at runtime using the reflection APIs.","pos":[756,861]},{"content":"For example, the Framework defines the <ph id=\"ph1\">&lt;xref:System.ObsoleteAttribute&gt;</ph>, which can be applied to a type or a member to indicate that the type or member has been deprecated.","pos":[862,1033],"source":" For example, the Framework defines the <xref:System.ObsoleteAttribute>, which can be applied to a type or a member to indicate that the type or member has been deprecated."},{"content":"Attributes can have one or more properties that carry additional data related to the attribute.","pos":[1040,1135]},{"content":"For example, <ph id=\"ph1\">`ObsoleteAttribute`</ph> could carry additional information about the release in which a type or a member got deprecated and the description of the new APIs replacing the obsolete API.","pos":[1136,1328],"source":" For example, `ObsoleteAttribute` could carry additional information about the release in which a type or a member got deprecated and the description of the new APIs replacing the obsolete API."},{"content":"Some properties of an attribute must be specified when the attribute is applied.","pos":[1335,1415]},{"content":"These are referred to as the required properties or required arguments, because they are represented as positional constructor parameters.","pos":[1416,1554]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConditionalAttribute.ConditionString%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Diagnostics.ConditionalAttribute&gt;</ph> is a required property.","pos":[1555,1724],"source":" For example, the <xref:System.Diagnostics.ConditionalAttribute.ConditionString%2A> property of the <xref:System.Diagnostics.ConditionalAttribute> is a required property."},{"content":"Properties that do not necessarily have to be specified when the attribute is applied are called optional properties (or optional arguments).","pos":[1731,1872]},{"content":"They are represented by settable properties.","pos":[1873,1917]},{"content":"Compilers provide special syntax to set these properties when an attribute is applied.","pos":[1918,2004]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.AttributeUsageAttribute.Inherited%2A?displayProperty=fullName&gt;</ph> property represents an optional argument.","pos":[2005,2139],"source":" For example, the <xref:System.AttributeUsageAttribute.Inherited%2A?displayProperty=fullName> property represents an optional argument."},{"pos":[2146,2213],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name custom attribute classes with the suffix \"Attribute.\"","source":"**✓ DO** name custom attribute classes with the suffix \"Attribute.\""},{"pos":[2220,2298],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> apply the <ph id=\"ph1\">&lt;xref:System.AttributeUsageAttribute&gt;</ph> to custom attributes.","source":"**✓ DO** apply the <xref:System.AttributeUsageAttribute> to custom attributes."},{"pos":[2305,2365],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> provide settable properties for optional arguments.","source":"**✓ DO** provide settable properties for optional arguments."},{"pos":[2372,2432],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> provide get-only properties for required arguments.","source":"**✓ DO** provide get-only properties for required arguments."},{"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> provide constructor parameters to initialize properties corresponding to required arguments.","pos":[2439,2540],"source":"**✓ DO** provide constructor parameters to initialize properties corresponding to required arguments."},{"content":"Each parameter should have the same name (although with different casing) as the corresponding property.","pos":[2541,2645]},{"pos":[2652,2762],"content":"<bpt id=\"p1\">**</bpt>X AVOID<ept id=\"p1\">**</ept> providing constructor parameters to initialize properties corresponding to the optional arguments.","source":"**X AVOID** providing constructor parameters to initialize properties corresponding to the optional arguments."},{"content":"In other words, do not have properties that can be set with both a constructor and a setter.","pos":[2769,2861]},{"content":"This guideline makes very explicit which arguments are optional and which are required, and avoids having two ways of doing the same thing.","pos":[2862,3001]},{"pos":[3008,3062],"content":"<bpt id=\"p1\">**</bpt>X AVOID<ept id=\"p1\">**</ept> overloading custom attribute constructors.","source":"**X AVOID** overloading custom attribute constructors."},{"content":"Having only one constructor clearly communicates to the user which arguments are required and which are optional.","pos":[3069,3182]},{"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> seal custom attribute classes, if possible.","pos":[3189,3241],"source":"**✓ DO** seal custom attribute classes, if possible."},{"content":"This makes the look-up for the attribute faster.","pos":[3242,3290]},{"pos":[3297,3364],"content":"<bpt id=\"p1\">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id=\"p1\">*</ept>","source":"*Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*"},{"pos":[3371,3775],"content":"<bpt id=\"p1\">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id=\"p2\">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id=\"p2\">](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id=\"p1\">*</ept>","source":"*Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*"},{"pos":[3784,3792],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3796,3877],"source":"[Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Usage Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/usage-guidelines.md)</ept>","pos":[3880,3961],"source":" [Usage Guidelines](../../../docs/standard/design-guidelines/usage-guidelines.md)"}]}