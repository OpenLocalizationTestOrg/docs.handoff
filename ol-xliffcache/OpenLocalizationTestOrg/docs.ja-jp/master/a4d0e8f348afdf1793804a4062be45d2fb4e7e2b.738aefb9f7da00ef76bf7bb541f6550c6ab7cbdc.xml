{"content":"---\ntitle: \"Object and Collection Initializers (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"object initializers [C#]\"\n  - \"collection initializers [C#]\"\nms.assetid: c58f3db5-d7d4-4651-bd2d-5a3a97357f61\ncaps.latest.revision: 27\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Object and Collection Initializers (C# Programming Guide)\nObject initializers let you assign values to any accessible fields or properties of an object at creation time without having to invoke a constructor followed by lines of assignment statements. The object initializer syntax enables you to specify arguments for a constructor or omit the arguments (and parentheses syntax).  The following example shows how to use an object initializer with a named type, `Cat` and how to invoke the default constructor. Note the use of auto-implemented properties in the `Cat` class. For more information, see [Auto-Implemented Properties](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md).  \n  \n [!code-cs[csProgGuideLINQ#39](../../../csharp/programming-guide/arrays/codesnippet/CSharp/object-and-collection-initializers_1.cs)]  \n  \n [!code-cs[csProgGuideLINQ#45](../../../csharp/programming-guide/arrays/codesnippet/CSharp/object-and-collection-initializers_2.cs)]  \n  \n## Object Initializers with anonymous types  \n Although object initializers can be used in any context, they are especially useful in [!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)] query expressions. Query expressions make frequent use of [anonymous types](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md), which can only be initialized by using an object initializer, as shown in the following declaration.  \n  \n```csharp\nvar pet = new { Age = 10, Name = \"Fluffy\" };  \n```  \n  \n Anonymous types enable the `select` clause in a [!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)] query expression to transform objects of the original sequence into objects whose value and shape may differ from the original. This is useful if you want to store only a part of the information from each object in a sequence. In the following example, assume that a product object (`p`) contains many fields and methods, and that you are only interested in creating a sequence of objects that contain the product name and the unit price.  \n  \n [!code-cs[csProgGuideLINQ#40](../../../csharp/programming-guide/arrays/codesnippet/CSharp/object-and-collection-initializers_3.cs)]  \n  \n When this query is executed, the `productInfos` variable will contain a sequence of objects that can be accessed in a `foreach` statement as shown in this example:  \n  \n```csharp\nforeach(var p in productInfos){...}  \n```  \n  \n Each object in the new anonymous type has two public properties which receive the same names as the properties or fields in the original object. You can also rename a field when you are creating an anonymous type; the following example renames the `UnitPrice` field to `Price`.  \n  \n```csharp\nselect new {p.ProductName, Price = p.UnitPrice};  \n```  \n  \n## Object initializers with nullable types  \n It is a compile-time error to use an object initializer with a nullable struct.  \n  \n## Collection initializers  \n Collection initializers let you specify one or more element initializers when you initialize a collection type that implements <xref:System.Collections.IEnumerable> and has `Add` with the appropriate signature as an instance method or an extension method. The element initializers can be a simple value, an expression or an object initializer. By using a collection initializer you do not have to specify multiple calls to the `Add` method of the class in your source code; the compiler adds the calls.  \n  \n The following examples shows two simple collection initializers:  \n  \n```csharp\nList<int> digits = new List<int> { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };  \nList<int> digits2 = new List<int> { 0 + 1, 12 % 3, MakeInt() };  \n```  \n  \n The following collection initializer uses object initializers to initialize objects of the `Cat` class defined in a previous example. Note that the individual object initializers are enclosed in braces and separated by commas.  \n  \n [!code-cs[csProgGuideLINQ#41](../../../csharp/programming-guide/arrays/codesnippet/CSharp/object-and-collection-initializers_4.cs)]  \n  \n You can specify [null](../../../csharp/language-reference/keywords/null.md) as an element in a collection initializer if the collection's `Add` method allows it.  \n  \n [!code-cs[csProgGuideLINQ#42](../../../csharp/programming-guide/arrays/codesnippet/CSharp/object-and-collection-initializers_5.cs)]  \n  \n You can specify indexed elements if the collection supports indexing.  \n  \n```csharp\nvar numbers = new Dictionary<int, string> {   \n    [7] = \"seven\",   \n    [9] = \"nine\",   \n    [13] = \"thirteen\"   \n};  \n```  \n  \n## Example  \n [!code-cs[csProgGuideLINQ#46](../../../csharp/programming-guide/arrays/codesnippet/CSharp/object-and-collection-initializers_6.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [LINQ Query Expressions](../../../csharp/programming-guide/linq-query-expressions/index.md)   \n [Anonymous Types](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)\n","nodes":[{"pos":[4,595],"embed":true,"restype":"x-metadata","content":"title: \"Object and Collection Initializers (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"object initializers [C#]\"\n  - \"collection initializers [C#]\"\nms.assetid: c58f3db5-d7d4-4651-bd2d-5a3a97357f61\ncaps.latest.revision: 27\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Object and Collection Initializers (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,74],"content":"Object and Collection Initializers (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Object and Collection Initializers (C# Programming Guide) | Microsoft Docs","pos":[0,74]}]}],"path":["title"]}],"yml":true},{"pos":[602,659],"content":"Object and Collection Initializers (C# Programming Guide)","linkify":"Object and Collection Initializers (C# Programming Guide)","nodes":[{"content":"Object and Collection Initializers (C# Programming Guide)","pos":[0,57]}]},{"content":"Object initializers let you assign values to any accessible fields or properties of an object at creation time without having to invoke a constructor followed by lines of assignment statements.","pos":[660,853]},{"content":"The object initializer syntax enables you to specify arguments for a constructor or omit the arguments (and parentheses syntax).","pos":[854,982]},{"content":"The following example shows how to use an object initializer with a named type, <ph id=\"ph1\">`Cat`</ph> and how to invoke the default constructor.","pos":[984,1112],"source":"  The following example shows how to use an object initializer with a named type, `Cat` and how to invoke the default constructor."},{"content":"Note the use of auto-implemented properties in the <ph id=\"ph1\">`Cat`</ph> class.","pos":[1113,1176],"source":" Note the use of auto-implemented properties in the `Cat` class."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Auto-Implemented Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)</ept>.","pos":[1177,1319],"source":" For more information, see [Auto-Implemented Properties](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)."},{"pos":[1604,1644],"content":"Object Initializers with anonymous types","linkify":"Object Initializers with anonymous types","nodes":[{"content":"Object Initializers with anonymous types","pos":[0,40]}]},{"content":"Although object initializers can be used in any context, they are especially useful in <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph> query expressions.","pos":[1648,1817],"source":"Although object initializers can be used in any context, they are especially useful in [!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)] query expressions."},{"content":"Query expressions make frequent use of <bpt id=\"p1\">[</bpt>anonymous types<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)</ept>, which can only be initialized by using an object initializer, as shown in the following declaration.","pos":[1818,2050],"source":" Query expressions make frequent use of [anonymous types](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md), which can only be initialized by using an object initializer, as shown in the following declaration."},{"content":"Anonymous types enable the <ph id=\"ph1\">`select`</ph> clause in a <ph id=\"ph2\">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph> query expression to transform objects of the original sequence into objects whose value and shape may differ from the original.","pos":[2123,2362],"source":"Anonymous types enable the `select` clause in a [!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)] query expression to transform objects of the original sequence into objects whose value and shape may differ from the original."},{"content":"This is useful if you want to store only a part of the information from each object in a sequence.","pos":[2363,2461]},{"content":"In the following example, assume that a product object (<ph id=\"ph1\">`p`</ph>) contains many fields and methods, and that you are only interested in creating a sequence of objects that contain the product name and the unit price.","pos":[2462,2673],"source":" In the following example, assume that a product object (`p`) contains many fields and methods, and that you are only interested in creating a sequence of objects that contain the product name and the unit price."},{"pos":[2818,2981],"content":"When this query is executed, the <ph id=\"ph1\">`productInfos`</ph> variable will contain a sequence of objects that can be accessed in a <ph id=\"ph2\">`foreach`</ph> statement as shown in this example:","source":"When this query is executed, the `productInfos` variable will contain a sequence of objects that can be accessed in a `foreach` statement as shown in this example:"},{"content":"Each object in the new anonymous type has two public properties which receive the same names as the properties or fields in the original object.","pos":[3045,3189]},{"content":"You can also rename a field when you are creating an anonymous type; the following example renames the <ph id=\"ph1\">`UnitPrice`</ph> field to <ph id=\"ph2\">`Price`</ph>.","pos":[3190,3322],"source":" You can also rename a field when you are creating an anonymous type; the following example renames the `UnitPrice` field to `Price`."},{"pos":[3401,3440],"content":"Object initializers with nullable types","linkify":"Object initializers with nullable types","nodes":[{"content":"Object initializers with nullable types","pos":[0,39]}]},{"content":"It is a compile-time error to use an object initializer with a nullable struct.","pos":[3444,3523]},{"pos":[3532,3555],"content":"Collection initializers","linkify":"Collection initializers","nodes":[{"content":"Collection initializers","pos":[0,23]}]},{"content":"Collection initializers let you specify one or more element initializers when you initialize a collection type that implements <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> and has <ph id=\"ph2\">`Add`</ph> with the appropriate signature as an instance method or an extension method.","pos":[3559,3814],"source":"Collection initializers let you specify one or more element initializers when you initialize a collection type that implements <xref:System.Collections.IEnumerable> and has `Add` with the appropriate signature as an instance method or an extension method."},{"content":"The element initializers can be a simple value, an expression or an object initializer.","pos":[3815,3902]},{"content":"By using a collection initializer you do not have to specify multiple calls to the <ph id=\"ph1\">`Add`</ph> method of the class in your source code; the compiler adds the calls.","pos":[3903,4061],"source":" By using a collection initializer you do not have to specify multiple calls to the `Add` method of the class in your source code; the compiler adds the calls."},{"content":"The following examples shows two simple collection initializers:","pos":[4068,4132]},{"content":"The following collection initializer uses object initializers to initialize objects of the <ph id=\"ph1\">`Cat`</ph> class defined in a previous example.","pos":[4293,4426],"source":"The following collection initializer uses object initializers to initialize objects of the `Cat` class defined in a previous example."},{"content":"Note that the individual object initializers are enclosed in braces and separated by commas.","pos":[4427,4519]},{"pos":[4664,4825],"content":"You can specify <bpt id=\"p1\">[</bpt>null<ept id=\"p1\">](../../../csharp/language-reference/keywords/null.md)</ept> as an element in a collection initializer if the collection's <ph id=\"ph1\">`Add`</ph> method allows it.","source":"You can specify [null](../../../csharp/language-reference/keywords/null.md) as an element in a collection initializer if the collection's `Add` method allows it."},{"content":"You can specify indexed elements if the collection supports indexing.","pos":[4970,5039]},{"pos":[5187,5194],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5338,5346],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5350,5417],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ Query Expressions<ept id=\"p1\">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5421,5513],"source":"[LINQ Query Expressions](../../../csharp/programming-guide/linq-query-expressions/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Anonymous Types<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)</ept>","pos":[5517,5608],"source":"[Anonymous Types](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)"}]}