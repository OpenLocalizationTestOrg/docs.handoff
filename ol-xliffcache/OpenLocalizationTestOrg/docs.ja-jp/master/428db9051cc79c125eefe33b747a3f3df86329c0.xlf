<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-calling-windows-apis.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">428db9051cc79c125eefe33b747a3f3df86329c0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\com-interop\walkthrough-calling-windows-apis.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6816b3c7d7ecb6274a9176be9e0d8564f87ba349</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff0ccc1eb2dc3c5f234f49c8e68a953bece8facf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Calling Windows APIs (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Calling Windows APIs (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows APIs are dynamic-link libraries (DLLs) that are part of the Windows operating system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You use them to perform tasks when it is difficult to write equivalent procedures of your own.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, Windows provides a function named <ph id="ph1">`FlashWindowEx`</ph> that lets you make the title bar for an application alternate between light and dark shades.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The advantage of using Windows APIs in your code is that they can save development time because they contain dozens of useful functions that are already written and waiting to be used.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The disadvantage is that Windows APIs can be difficult to work with and unforgiving when things go wrong.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Windows APIs represent a special category of interoperability.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows APIs do not use managed code, do not have built-in type libraries, and use data types that are different than those used with Visual Studio.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because of these differences, and because Windows APIs are not COM objects, interoperability with Windows APIs and the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> is performed using platform invoke, or PInvoke.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Platform invoke is a service that enables managed code to call unmanaged functions implemented in DLLs.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](../../../framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use PInvoke in <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> by using either the <ph id="ph2">`Declare`</ph> statement or applying the <ph id="ph3">`DllImport`</ph> attribute to an empty procedure.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Windows API calls were an important part of <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> programming in the past, but are seldom necessary with <ph id="ph2">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Whenever possible, you should use managed code from the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> to perform tasks, instead of Windows API calls.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This walkthrough provides information for those situations in which using Windows APIs is necessary.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>API Calls Using Declare</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The most common way to call Windows APIs is by using the <ph id="ph1">`Declare`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To declare a DLL procedure</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Determine the name of the function you want to call, plus its arguments, argument types, and return value, as well as the name and location of the DLL that contains it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For complete information about the Windows APIs, see the Win32 SDK documentation in the Platform SDK Windows API.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information about the constants that Windows APIs use, examine the header files such as Windows.h included with the Platform SDK.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Open a new Windows Application project by clicking <bpt id="p1">**</bpt>New<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu, and then clicking <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Windows Application<ept id="p1">**</ept> from the list of <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> project templates.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The new project is displayed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`Declare`</ph> function either to the class or module in which you want to use the DLL:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Parts of the Declare Statement</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Declare`</ph> statement includes the following elements.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Auto modifier</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Auto`</ph> modifier instructs the runtime to convert the string based on the method name according to common language runtime rules (or alias name if specified).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Lib and Alias keywords</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The name following the <ph id="ph1">`Function`</ph> keyword is the name your program uses to access the imported function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It can be the same as the real name of the function you are calling, or you can use any valid procedure name and then employ the <ph id="ph1">`Alias`</ph> keyword to specify the real name of the function you are calling.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specify the <ph id="ph1">`Lib`</ph> keyword, followed by the name and location of the DLL that contains the function you are calling.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You do not need to specify the path for files located in the Windows system directories.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Alias`</ph> keyword if the name of the function you are calling is not a valid <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> procedure name, or conflicts with the name of other items in your application.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Alias`</ph> indicates the true name of the function being called.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Argument and Data Type Declarations</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Declare the arguments and their data types.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This part can be challenging because the data types that Windows uses do not correspond to Visual Studio data types.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> does a lot of the work for you by converting arguments to compatible data types, a process called <bpt id="p1">*</bpt>marshaling<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can explicitly control how arguments are marshaled by using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute defined in the <ph id="ph2">&lt;xref:System.Runtime.InteropServices&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Previous versions of <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> allowed you to declare parameters <ph id="ph2">`As Any`</ph>, meaning that data of any data type could be used.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> requires that you use a specific data type for all <ph id="ph2">`Declare`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Windows API Constants</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Some arguments are combinations of constants.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`MessageBox`</ph> API shown in this walkthrough accepts an integer argument called <ph id="ph2">`Typ`</ph> that controls how the message box is displayed.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can determine the numeric value of these constants by examining the <ph id="ph1">`#define`</ph> statements in the file WinUser.h.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The numeric values are generally shown in hexadecimal, so you may want to use a calculator to add them and convert to decimal.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, if you want to combine the constants for the exclamation style <ph id="ph1">`MB_ICONEXCLAMATION`</ph> 0x00000030 and the Yes/No style <ph id="ph2">`MB_YESNO`</ph> 0x00000004, you can add the numbers and get a result of 0x00000034, or 52 decimal.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Although you can use the decimal result directly, it is better to declare these values as constants in your application and combine them using the <ph id="ph1">`Or`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To declare constants for Windows API calls</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Consult the documentation for the Windows function you are calling.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Determine the name of the constants it uses and the name of the .h file that contains the numeric values for these constants.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use a text editor, such as Notepad, to view the contents of the header (.h) file, and find the values associated with the constants you are using.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`MessageBox`</ph> API uses the constant <ph id="ph2">`MB_ICONQUESTION`</ph> to show a question mark in the message box.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The definition for <ph id="ph1">`MB_ICONQUESTION`</ph> is in WinUser.h and appears as follows:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Add equivalent <ph id="ph1">`Const`</ph> statements to your class or module to make these constants available to your application.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To call the DLL procedure</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Add a button named <ph id="ph1">`Button1`</ph> to the startup form for your project, and then double-click it to view its code.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The event handler for the button is displayed.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Add code to the <ph id="ph1">`Click`</ph> event handler for the button you added, to call the procedure and provide the appropriate arguments:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Run the project by pressing F5.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The message box is displayed with both <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept> and <bpt id="p2">**</bpt>No<ept id="p2">**</ept> response buttons.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Click either one.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Data Marshaling</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>automatically converts the data types of parameters and return values for Windows API calls, but you can use the <ph id="ph1">`MarshalAs`</ph> attribute to explicitly specify unmanaged data types that an API expects.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information about interop marshaling, see <bpt id="p1">[</bpt>Interop Marshaling<ept id="p1">](../../../framework/interop/interop-marshaling.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To use Declare and MarshalAs in an API call</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Determine the name of the function you want to call, plus its arguments, data types, and return value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To simplify access to the <ph id="ph1">`MarshalAs`</ph> attribute, add an <ph id="ph2">`Imports`</ph> statement to the top of the code for the class or module, as in the following example:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Add a function prototype for the imported function to the class or module you are using, and apply the <ph id="ph1">`MarshalAs`</ph> attribute to the parameters or return value.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the following example, an API call that expects the type <ph id="ph1">`void*`</ph> is marshaled as <ph id="ph2">`AsAny`</ph>:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>API Calls Using DllImport</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DllImport`</ph> attribute provides a second way to call functions in DLLs without type libraries.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DllImport`</ph> is roughly equivalent to using a <ph id="ph2">`Declare`</ph> statement but provides more control over how functions are called.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`DllImport`</ph> with most Windows API calls as long as the call refers to a shared (sometimes called <bpt id="p1">*</bpt>static<ept id="p1">*</ept>) method.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You cannot use methods that require an instance of a class.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">`Declare`</ph> statements, <ph id="ph2">`DllImport`</ph> calls cannot use the <ph id="ph3">`MarshalAs`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To call a Windows API using the DllImport attribute</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Open a new Windows Application project by clicking <bpt id="p1">**</bpt>New<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu, and then clicking <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Windows Application<ept id="p1">**</ept> from the list of <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> project templates.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The new project is displayed.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Add a button named <ph id="ph1">`Button2`</ph> to the startup form.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Double-click <ph id="ph1">`Button2`</ph> to open the code view for the form.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To simplify access to <ph id="ph1">`DllImport`</ph>, add an <ph id="ph2">`Imports`</ph> statement to the top of the code for the startup form class:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Declare an empty function preceding the <ph id="ph1">`End Class`</ph> statement for the form, and name the function <ph id="ph2">`MoveFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">`Public`</ph> and <ph id="ph2">`Shared`</ph> modifiers to the function declaration and set parameters for <ph id="ph3">`MoveFile`</ph> based on the arguments the Windows API function uses:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Your function can have any valid procedure name; the <ph id="ph1">`DllImport`</ph> attribute specifies the name in the DLL.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It also handles interoperability marshaling for the parameters and return values, so you can choose Visual Studio data types that are similar to the data types the API uses.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">`DllImport`</ph> attribute to the empty function.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The first parameter is the name and location of the DLL containing the function you are calling.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You do not need to specify the path for files located in the Windows system directories.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The second parameter is a named argument that specifies the name of the function in the Windows API.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`DllImport`</ph> attribute forces calls to <ph id="ph2">`MoveFile`</ph> to be forwarded to <ph id="ph3">`MoveFileW`</ph> in KERNEL32.DLL.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MoveFileW`</ph> method copies a file from the path <ph id="ph2">`src`</ph> to the path <ph id="ph3">`dst`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Add code to the <ph id="ph1">`Button2_Click`</ph> event handler to call the function:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Create a file named Test.txt and place it in the C:\Tmp directory on your hard drive.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Create the Tmp directory if necessary.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Press F5 to start the application.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The main form appears.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Button2<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The message "The file was moved successfully" is displayed if the file can be moved.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declare Statement<ept id="p1">](../../../visual-basic/language-reference/statements/declare-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Auto<ept id="p1">](../../../visual-basic/language-reference/modifiers/auto.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Alias<ept id="p1">](../../../visual-basic/language-reference/statements/alias-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COM Interop<ept id="p1">](../../../visual-basic/programming-guide/com-interop/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Prototypes in Managed Code<ept id="p1">](../../../framework/interop/creating-prototypes-in-managed-code.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling a Delegate as a Callback Method<ept id="p1">](../../../framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>