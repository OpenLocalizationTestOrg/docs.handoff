<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed18a1214b568cda4a5ba58b9adb9df9becfdca3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\elevation-of-privilege.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb25fbb48d6579e3b464170670a2e1bf4a13254c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cdc44faf9edcf3e30a7bdb33e9edca1673a6dee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Elevation of Privilege | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Elevation of Privilege</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Elevation of privilege<ept id="p1">*</ept> results from giving an attacker authorization permissions beyond those initially granted.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, an attacker with a privilege set of "read only" permissions somehow elevates the set to include "read and write."</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Trusted STS Should Sign SAML Token Claims</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A Security Assertions Markup Language (SAML) token is a generic XML token that is the default type for issued tokens.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A SAML token can be constructed by a Security Token Service (STS) that the end Web service trusts in a typical exchange.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>SAML tokens contain claims in statements.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An attacker may copy the claims from a valid token, create a new SAML token, and sign it with a different issuer.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The intent is to determine whether the server is validating issuers and, if not, utilize the weakness to construct SAML tokens that allow privileges beyond those intended by a trusted STS.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SamlAssertion&gt;</ph> class verifies the digital signature contained within a SAML token, and the default <ph id="ph2">&lt;xref:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator&gt;</ph> requires that SAML tokens be signed by an X.509 certificate that is valid when the <ph id="ph3">&lt;xref:System.ServiceModel.Security.IssuedTokenServiceCredential.CertificateValidationMode%2A&gt;</ph> of the <ph id="ph4">&lt;xref:System.ServiceModel.Security.IssuedTokenServiceCredential&gt;</ph> class is set to <ph id="ph5">&lt;xref:System.ServiceModel.Security.X509CertificateValidationMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ChainTrust`</ph> mode alone is insufficient to determine whether the issuer of the SAML token is trusted.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Services that require a more granular trust model can either use authorization and enforcement policies to check the issuer of the claim sets produced by issued token authentication or use the X.509 validation settings on <ph id="ph1">&lt;xref:System.ServiceModel.Security.IssuedTokenServiceCredential&gt;</ph> to restrict the set of allowed signing certificates.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Managing Claims and Authorization with the Identity Model<ept id="p1">](../../../../docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)</ept> and <bpt id="p2">[</bpt>Federation and Issued Tokens<ept id="p2">](../../../../docs/framework/wcf/feature-details/federation-and-issued-tokens.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Switching Identity Without a Security Context</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following applies only to <ph id="ph1">[!INCLUDE[vstecwinfx](../../../../includes/vstecwinfx-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When a connection is established between a client and server, the identity of the client does not change, except in one situation: after the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client is opened, if all of the following conditions are true:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The procedures to establish a security context (using a transport security session or message security session) is switched off (<ph id="ph1">&lt;xref:System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph> in case of message security or transport not capable of establishing security sessions is used in transport security case.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>HTTPS is one example of such transport).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You are using Windows authentication.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You do not explicitly set the credential.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You are calling the service under the impersonated security context.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If these conditions are true, the identity used to authenticate the client to the service might change (it might not be the impersonated identity but the process identity instead) after the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client is opened.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This occurs because the Windows credential used to authenticate the client to the service is transmitted with every message, and the credential used for authentication is obtained from the current thread's Windows identity.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the Windows identity of the current thread changes (for example, by impersonating a different caller), the credential that is attached to the message and used to authenticate the client to the service might also change.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you want to have deterministic behavior when using Windows authentication together with impersonation you need to explicitly set the Windows credential or you need to establish a security context with the service.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To do this, use a message security session or a transport security session.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, the net.tcp transport can provide a transport security session.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Additionally, you must use only a synchronous version of client operations when calling the service.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you establish a message security context, you should not keep the connection to the service open longer than the configured session renewal period, because the identity can also change during the session renewal process.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Credentials Capture</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following applies to <ph id="ph1">[!INCLUDE[netfx35_long](../../../../includes/netfx35-long-md.md)]</ph>, and subsequent versions.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Credentials used by the client or the service are based on the current context thread.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The credentials are obtained when the <ph id="ph1">`Open`</ph> method (or <ph id="ph2">`BeginOpen`</ph>, for asynchronous calls) of the client or service is called.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For both the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> classes, the <ph id="ph3">`Open`</ph> and <ph id="ph4">`BeginOpen`</ph> methods inherit from the <ph id="ph5">&lt;xref:System.ServiceModel.Channels.CommunicationObject.Open%2A&gt;</ph> and <ph id="ph6">&lt;xref:System.ServiceModel.Channels.CommunicationObject.BeginOpen%2A&gt;</ph> methods of the <ph id="ph7">&lt;xref:System.ServiceModel.Channels.CommunicationObject&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">`BeginOpen`</ph> method, the credentials captured cannot be guaranteed to be the credentials of the process that calls the method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Token Caches Allow Replay Using Obsolete Data</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the local security authority (LSA) <ph id="ph2">`LogonUser`</ph> function to authenticate users by user name and password.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Because the logon function is a costly operation, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> allows you to cache tokens that represent authenticated users to increase performance.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The caching mechanism saves the results from <ph id="ph1">`LogonUser`</ph> for subsequent uses.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This mechanism is disabled by default; to enable it, set the <ph id="ph1">&lt;xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CacheLogonTokens%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, or use the <ph id="ph3">`cacheLogonTokens`</ph> attribute of the <bpt id="p1">[</bpt><ph id="ph4">\&lt;</ph>userNameAuthentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/usernameauthentication.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can set a Time to Live (TTL) for the cached tokens by setting the <ph id="ph1">&lt;xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CachedLogonTokenLifetime%2A&gt;</ph> property to a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>, or use the <ph id="ph3">`cachedLogonTokenLifetime`</ph> attribute of the <ph id="ph4">`userNameAuthentication`</ph> element; the default is 15 minutes.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Note that while a token is cached, any client that presents the same user name and password can use the token, even if the user account is deleted from Windows or if its password has been changed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Until the TTL expires and the token is removed from the cache, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> allows the (possibly malicious) user to authenticate.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To mitigate this: Decrease the attack window by setting the <ph id="ph1">`cachedLogonTokenLifetime`</ph> value to the shortest time span your users need.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Issued Token Authorization: Expiration Reset to Large Value</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Under certain conditions, the <ph id="ph1">&lt;xref:System.IdentityModel.Policy.AuthorizationContext.ExpirationTime%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IdentityModel.Policy.AuthorizationContext&gt;</ph> may be set to an unexpectedly larger value (the <ph id="ph3">&lt;xref:System.DateTime.MaxValue&gt;</ph> field value minus one day, or December 20, 9999).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This occurs when using the <ph id="ph1">&lt;xref:System.ServiceModel.WSFederationHttpBinding&gt;</ph> and any of the system-provided bindings that have an issued token as the client credential type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This also occurs when you create custom bindings by using one of the following methods:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To mitigate this, the authorization policy must check the action and the expiration time of each authorization policy.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The Service Uses a Different Certificate Than the Client Intended</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Under certain conditions, a client can digitally sign a message with an X.509 certificate and have the service retrieve a different certificate than the intended one.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This can occur under the following circumstances:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The client digitally signs a message using an X.509 certificate and does not attach the X.509 certificate to the message, but rather just references the certificate using its subject key identifier.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The service's computer contains two or more certificates with the same public key, but they contain different information.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The service retrieves a certificate that matches the subject key identifier, but it is not the one the client intended to use.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> receives the message and verifies the signature, <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> maps the information in the unintended X.509 certificate to a set of claims that are different and potentially elevated from what the client expected.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To mitigate this, reference the X.509 certificate another way, such as using <ph id="ph1">&lt;xref:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Considerations<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-in-wcf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Information Disclosure<ept id="p1">](../../../../docs/framework/wcf/feature-details/information-disclosure.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Denial of Service<ept id="p1">](../../../../docs/framework/wcf/feature-details/denial-of-service.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Replay Attacks<ept id="p1">](../../../../docs/framework/wcf/feature-details/replay-attacks.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tampering<ept id="p1">](../../../../docs/framework/wcf/feature-details/tampering.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Unsupported Scenarios<ept id="p1">](../../../../docs/framework/wcf/feature-details/unsupported-scenarios.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>