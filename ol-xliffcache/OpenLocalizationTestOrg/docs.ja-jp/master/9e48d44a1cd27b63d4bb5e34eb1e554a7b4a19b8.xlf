<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-query-for-sentences-that-contain-a-specified-set-of-words.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e48d44a1cd27b63d4bb5e34eb1e554a7b4a19b8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-query-for-sentences-that-contain-a-specified-set-of-words.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9760cf1adf6b4b30f26c4f6594e1106588177dd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6ed81e1e515cd0249b0e198b26c7d0debecb45c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows how to find sentences in a text file that contain matches for each of a specified set of words.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Although the array of search terms is hard-coded in this example, it could also be populated dynamically at runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this example, the query returns the sentences that contain the words "Historically," "data," and "integrated."</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The query works by first splitting the text into sentences, and then splitting the sentences into an array of strings that hold each word.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For each of these arrays, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method removes all duplicate words, and then the query performs an <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> operation on the word array and the <ph id="ph3">`wordsToMatch`</ph> array.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the count of the intersection is the same as the count of the <ph id="ph1">`wordsToMatch`</ph> array, all words were found in the words and the original sentence is returned.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the call to <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph>, the punctuation marks are used as separators in order to remove them from the string.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you did not do this, for example you could have a string "Historically," that would not match "Historically" in the <ph id="ph1">`wordsToMatch`</ph> array.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You may have to use additional separators, depending on the types of punctuation found in the source text.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <ph id="ph1">`Imports`</ph> statement for the System.Linq namespace.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ and Strings (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>