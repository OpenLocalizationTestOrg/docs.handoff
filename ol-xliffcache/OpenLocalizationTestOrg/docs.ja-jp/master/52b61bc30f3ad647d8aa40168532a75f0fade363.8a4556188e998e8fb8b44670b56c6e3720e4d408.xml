{"content":"---\ntitle: \"LINQ to Objects Activity | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 403c82e8-7f2b-42f6-93cd-95c35bc76ead\ncaps.latest.revision: 11\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# LINQ to Objects Activity\nThis sample demonstrates how to create an activity to use LINQ to Objects to query elements in a collection.  \n  \n## Activity Details for FindInCollection  \n This activity allows users to query elements from collections in memory using LINQ to Objects. You must provide a LINQ predicate in the form of a lambda expression to filter the results. This activity can be used in conjunction with <xref:System.Activities.Statements.AddToCollection%601> activities.  \n  \n The following table details the property and return values for the activity.  \n  \n|Property or Return Value|Description|  \n|------------------------------|-----------------|  \n|`Collection` property|A required property that specifies the source collection.|  \n|`Predicate` property|A required property that specifies the filter for the collection in the form of a lambda expression.|  \n|Return Value|The filtered collection.|  \n  \n## Code Sample that uses the Custom Activity  \n The following code example uses the `FindInCollection` custom activity to find all rows in a collection of employees that have a `Role` property set to `Manager` and the `Location` property set to `Redmond`.  \n  \n```csharp  \n// Find all program managers in Redmond in the employees collection.  \n  \nActivity wf = new FindInCollection<Employee>  \n{  \n    Collections = new LambdaValue<IEnumerable<Employee>>(c => employees),                \n    Predicate = new LambdaValue<Func<Employee, bool>>(c => new Func<Employee, bool>(e => e.Role.Equals(\"Manager\") && e.Location.Equals(\"Redmond\")))  \n};  \n  \n```  \n  \n The following code shows how to create a workflow program that uses the custom FindInCollection activity, <xref:System.Activities.Statements.AddToCollection%601>, and <xref:System.Activities.Statements.ForEach%601> activities to populate a collection with employees, find all the employees that have developer roles and are located in Redmond, and then iterate through the resulting list.  \n  \n```csharp  \n// Create the Linq predicate for the find expression  \n  \nFunc<Employee, bool> predicate = e => e.Role == \"DEV\" && e.Location.Equals(\"Redmond\");  \n  \n// Create workflow program  \nActivity sampleWorkflow = new Sequence  \n{  \n    Variables = { employees, devsFromRedmond },  \n    Activities =  \n    {  \n        new Assign<IList<Employee>>  \n        {  \n            To = employees,  \n            Value = new LambdaValue<IList<Employee>>(c => new List<Employee>())  \n        },  \n        new AddToCollection<Employee>  \n        {  \n            Collection = new InArgument<ICollection<Employee>>(employees),  \n            Item =  new LambdaValue<Employee>(c => new Employee(1, \"Employee 1\", \"DEV\", \"Redmond\"))  \n        },  \n        new AddToCollection<Employee>  \n        {  \n            Collection = new InArgument<ICollection<Employee>>(employees),  \n            Item =  new LambdaValue<Employee>(c => new Employee(2, \"Employee 2\", \"DEV\", \"Redmond\"))  \n        },  \n        new AddToCollection<Employee>  \n        {  \n            Collection = new InArgument<ICollection<Employee>>(employees),  \n            Item =  new LambdaValue<Employee>(c => new Employee(3, \"Employee 3\", \"PM\", \"Redmond\"))  \n        },  \n        new AddToCollection<Employee>  \n        {  \n            Collection = new InArgument<ICollection<Employee>>(employees),  \n            Item =  new LambdaValue<Employee>(c => new Employee(4, \"Employee 4\", \"PM\", \"China\"))  \n        },  \n        new FindInCollection<Employee>  \n        {  \n            Collections = new InArgument<IEnumerable<Employee>>(employees),  \n            Predicate = new LambdaValue<Func<Employee, bool>>(c => predicate),  \n            Result = new OutArgument<IList<Employee>>(devsFromRedmond)  \n        },  \n        new ForEach<Employee>  \n        {  \n            Values = new InArgument<IEnumerable<Employee>>(devsFromRedmond),  \n            Body = new ActivityAction<Employee>  \n            {  \n                Argument = iterationVariable,  \n                Handler = new WriteLine  \n                {  \n                    Text = new InArgument<string>(env => iterationVariable.Get(env).ToString())  \n                }  \n            }  \n        }  \n    }  \n};  \n```  \n  \n#### To use this sample  \n  \n1.  Using [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)], open the LinqToObjects.sln solution file.  \n  \n2.  To build the solution, press CTRL+SHIFT+B.  \n  \n3.  To run the solution, press F5.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Scenario\\ActivityLibrary\\Linq\\LinqToObjects`  \n  \n## See Also  \n [Lambda Expressions (C# Programming Guide)](http://go.microsoft.com/fwlink/?LinkId=150381)   \n [LINQ to Objects](http://go.microsoft.com/fwlink/?LinkID=150380)","nodes":[{"pos":[4,312],"nodes":[{"content":"LINQ to Objects Activity | Microsoft Docs","nodes":[{"pos":[0,41],"content":"LINQ to Objects Activity | Microsoft Docs","nodes":[{"content":"LINQ to Objects Activity | Microsoft Docs","pos":[0,41]}]}],"pos":[6,50],"yaml":true}],"content":"title: \"LINQ to Objects Activity | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 403c82e8-7f2b-42f6-93cd-95c35bc76ead\ncaps.latest.revision: 11\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[319,343],"content":"LINQ to Objects Activity","linkify":"LINQ to Objects Activity","nodes":[{"content":"LINQ to Objects Activity","pos":[0,24]}]},{"content":"This sample demonstrates how to create an activity to use LINQ to Objects to query elements in a collection.","pos":[344,452]},{"pos":[461,498],"content":"Activity Details for FindInCollection","linkify":"Activity Details for FindInCollection","nodes":[{"content":"Activity Details for FindInCollection","pos":[0,37]}]},{"content":"This activity allows users to query elements from collections in memory using LINQ to Objects.","pos":[502,596]},{"content":"You must provide a LINQ predicate in the form of a lambda expression to filter the results.","pos":[597,688]},{"content":"This activity can be used in conjunction with <ph id=\"ph1\">&lt;xref:System.Activities.Statements.AddToCollection%601&gt;</ph> activities.","pos":[689,802],"source":" This activity can be used in conjunction with <xref:System.Activities.Statements.AddToCollection%601> activities."},{"content":"The following table details the property and return values for the activity.","pos":[809,885]},{"content":"Property or Return Value","pos":[892,916]},{"content":"Description","pos":[917,928]},{"pos":[986,1007],"content":"<ph id=\"ph1\">`Collection`</ph> property","source":"`Collection` property"},{"content":"A required property that specifies the source collection.","pos":[1008,1065]},{"pos":[1070,1090],"content":"<ph id=\"ph1\">`Predicate`</ph> property","source":"`Predicate` property"},{"content":"A required property that specifies the filter for the collection in the form of a lambda expression.","pos":[1091,1191]},{"content":"Return Value","pos":[1196,1208]},{"content":"The filtered collection.","pos":[1209,1233]},{"pos":[1243,1284],"content":"Code Sample that uses the Custom Activity","linkify":"Code Sample that uses the Custom Activity","nodes":[{"content":"Code Sample that uses the Custom Activity","pos":[0,41]}]},{"pos":[1288,1495],"content":"The following code example uses the <ph id=\"ph1\">`FindInCollection`</ph> custom activity to find all rows in a collection of employees that have a <ph id=\"ph2\">`Role`</ph> property set to <ph id=\"ph3\">`Manager`</ph> and the <ph id=\"ph4\">`Location`</ph> property set to <ph id=\"ph5\">`Redmond`</ph>.","source":"The following code example uses the `FindInCollection` custom activity to find all rows in a collection of employees that have a `Role` property set to `Manager` and the `Location` property set to `Redmond`."},{"content":"The following code shows how to create a workflow program that uses the custom FindInCollection activity, <ph id=\"ph1\">&lt;xref:System.Activities.Statements.AddToCollection%601&gt;</ph>, and <ph id=\"ph2\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activities to populate a collection with employees, find all the employees that have developer roles and are located in Redmond, and then iterate through the resulting list.","pos":[1896,2284],"source":"The following code shows how to create a workflow program that uses the custom FindInCollection activity, <xref:System.Activities.Statements.AddToCollection%601>, and <xref:System.Activities.Statements.ForEach%601> activities to populate a collection with employees, find all the employees that have developer roles and are located in Redmond, and then iterate through the resulting list."},{"pos":[4520,4538],"content":"To use this sample","linkify":"To use this sample","nodes":[{"content":"To use this sample","pos":[0,18]}]},{"pos":[4548,4650],"content":"Using <ph id=\"ph1\">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>, open the LinqToObjects.sln solution file.","source":"Using [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)], open the LinqToObjects.sln solution file."},{"content":"To build the solution, press CTRL+SHIFT+B.","pos":[4660,4702]},{"content":"To run the solution, press F5.","pos":[4712,4742]},{"pos":[4750,4882],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[14,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[0,53]},{"content":"Check for the following (default) directory before continuing.","pos":[54,116]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[4936,5262],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[5263,5313]},{"pos":[5412,5420],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions (C# Programming Guide)<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150381)</ept><ph id=\"ph1\"> </ph>","pos":[5424,5515],"source":"[Lambda Expressions (C# Programming Guide)](http://go.microsoft.com/fwlink/?LinkId=150381) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=150380)</ept>","pos":[5519,5583],"source":"[LINQ to Objects](http://go.microsoft.com/fwlink/?LinkID=150380)"}]}