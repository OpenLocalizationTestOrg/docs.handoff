{"content":"---\ntitle: \"Fundamental Windows Workflow Concepts | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0e930e80-5060-45d2-8a7a-95c0690105d4\ncaps.latest.revision: 27\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Fundamental Windows Workflow Concepts\nWorkflow development in the [!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)] uses concepts that may be new to some developers. This topic describes some of the concepts and how they are implemented.  \n  \n## Workflows and Activities  \n A workflow is a structured collection of actions that models a process. Each action in the workflow is modeled as an activity. A host interacts with a workflow by using <xref:System.Activities.WorkflowInvoker> for invoking a workflow as if it were a method,  <xref:System.Activities.WorkflowApplication> for explicit control over the execution of a single workflow instance, and <xref:System.ServiceModel.WorkflowServiceHost> for message-based interactions in multi-instance scenarios. Because steps of the workflow are defined as a hierarchy of activities, the topmost activity in the hierarchy can be said to define the workflow itself. This hierarchy model takes the place of the explicit `SequentialWorkflow` and `StateMachineWorkflow` classes from previous versions. Activities themselves are developed as collections of other activities (using the <xref:System.Activities.Activity> class as a base, usually defined by using XAML) or are custom created by using the <xref:System.Activities.CodeActivity> class, which can use the runtime for data access, or by using the <xref:System.Activities.NativeActivity> class, which exposes the breadth of the workflow runtime to the activity author. Activities developed by using <xref:System.Activities.CodeActivity> and <xref:System.Activities.NativeActivity> are created by using CLR-compliant languages such as C#.  \n  \n## Activity Data Model  \n Activities store and share data by using the types shown in the following table.  \n  \n|||  \n|-|-|  \n|Variable|Stores data in an activity.|  \n|Argument|Moves data into and out of an activity.|  \n|Expression|An activity with an elevated return value used in argument bindings.|  \n  \n## Workflow Runtime  \n The workflow runtime is the environment in which workflows execute. <xref:System.Activities.WorkflowInvoker> is the simplest way to execute a workflow. The host uses <xref:System.Activities.WorkflowInvoker> for the following:  \n  \n-   To synchronously invoke a workflow.  \n  \n-   To provide input to, or retrieve output from a workflow.  \n  \n-   To add extensions to be used by activities.  \n  \n <xref:System.Activities.ActivityInstance> is the thread-safe proxy that hosts can use to interact with the runtime. The host uses <xref:System.Activities.ActivityInstance> for the following:  \n  \n-   To acquire an instance by creating it or loading it from an instance store.  \n  \n-   To be notified of instance life-cycle events.  \n  \n-   To control workflow execution.  \n  \n-   To provide input to, or retrieve output from a workflow.  \n  \n-   To signal a workflow continuation and pass values into the workflow.  \n  \n-   To persist workflow data.  \n  \n-   To add extensions to be used by activities.  \n  \n Activities gain access to the workflow runtime environment by using the appropriate <xref:System.Activities.ActivityContext> derived class, such as <xref:System.Activities.NativeActivityContext> or <xref:System.Activities.CodeActivityContext>. They use this for resolving arguments and variables, for scheduling child activities, and for many other purposes.  \n  \n## Services  \n Workflows provide a natural way to implement and access loosely-coupled services, using messaging activities. Messaging activities are built on [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] and are the primary mechanism used to get data into and out of a workflow. You can compose messaging activities together to model any kind of message exchange pattern you wish. [!INCLUDE[crdefault](../../../includes/crdefault-md.md)] see [Messaging Activities](../../../docs/framework/wcf/feature-details/messaging-activities.md). Workflow services are hosted using the <xref:System.ServiceModel.Activities.WorkflowServiceHost> class. [!INCLUDE[crdefault](../../../includes/crdefault-md.md)][Hosting Workflow Services Overview](../../../docs/framework/wcf/feature-details/hosting-workflow-services-overview.md). [!INCLUDE[crabout](../../../includes/crabout-md.md)] workflow services see [Workflow Services](../../../docs/framework/wcf/feature-details/workflow-services.md)  \n  \n## Persistence, Unloading, and Long-Running Workflows  \n Windows Workflow simplifies the authoring of long-running reactive programs by providing:  \n  \n-   Activities that access external input.  \n  \n-   The ability to create <xref:System.Activities.Bookmark> objects that can be resumed by a host listener.  \n  \n-   The ability to persist a workflowâ€™s data and unload the workflow, and then reload and reactivate the workflow in response to the resumption of <xref:System.Activities.Bookmark> objects in a particular workflow.  \n  \n A workflow continuously executes activities until there are no more activities to execute or until all currently executing activities are waiting for input. In this latter state, the workflow is idle. It is common for a host to unload workflows that have gone idle and to reload them to continue execution when a message arrives. <xref:System.ServiceModel.Activities.WorkflowServiceHost> provides functionality for this feature and provides an extensible unload policy. For blocks of execution that use volatile state data or other data that cannot be persisted, an activity can indicate to a host that it should not be persisted by using the <xref:System.Activities.NoPersistHandle>. A workflow can also explicitly persist its data to a durable storage medium by using the <xref:System.Activities.Statements.Persist> activity.","nodes":[{"pos":[12,66],"content":"Fundamental Windows Workflow Concepts | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Fundamental Windows Workflow Concepts | Microsoft Docs","pos":[0,54]}]},{"pos":[332,369],"content":"Fundamental Windows Workflow Concepts","linkify":"Fundamental Windows Workflow Concepts","nodes":[{"content":"Fundamental Windows Workflow Concepts","pos":[0,37]}]},{"content":"Workflow development in the <ph id=\"ph1\">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph> uses concepts that may be new to some developers.","pos":[370,522],"source":"Workflow development in the [!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)] uses concepts that may be new to some developers."},{"content":"This topic describes some of the concepts and how they are implemented.","pos":[523,594]},{"pos":[603,627],"content":"Workflows and Activities","linkify":"Workflows and Activities","nodes":[{"content":"Workflows and Activities","pos":[0,24]}]},{"content":"A workflow is a structured collection of actions that models a process.","pos":[631,702]},{"content":"Each action in the workflow is modeled as an activity.","pos":[703,757]},{"content":"A host interacts with a workflow by using <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> for invoking a workflow as if it were a method,  <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> for explicit control over the execution of a single workflow instance, and <ph id=\"ph3\">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> for message-based interactions in multi-instance scenarios.","pos":[758,1116],"source":" A host interacts with a workflow by using <xref:System.Activities.WorkflowInvoker> for invoking a workflow as if it were a method,  <xref:System.Activities.WorkflowApplication> for explicit control over the execution of a single workflow instance, and <xref:System.ServiceModel.WorkflowServiceHost> for message-based interactions in multi-instance scenarios."},{"content":"Because steps of the workflow are defined as a hierarchy of activities, the topmost activity in the hierarchy can be said to define the workflow itself.","pos":[1117,1269]},{"content":"This hierarchy model takes the place of the explicit <ph id=\"ph1\">`SequentialWorkflow`</ph> and <ph id=\"ph2\">`StateMachineWorkflow`</ph> classes from previous versions.","pos":[1270,1402],"source":" This hierarchy model takes the place of the explicit `SequentialWorkflow` and `StateMachineWorkflow` classes from previous versions."},{"content":"Activities themselves are developed as collections of other activities (using the <ph id=\"ph1\">&lt;xref:System.Activities.Activity&gt;</ph> class as a base, usually defined by using XAML) or are custom created by using the <ph id=\"ph2\">&lt;xref:System.Activities.CodeActivity&gt;</ph> class, which can use the runtime for data access, or by using the <ph id=\"ph3\">&lt;xref:System.Activities.NativeActivity&gt;</ph> class, which exposes the breadth of the workflow runtime to the activity author.","pos":[1403,1826],"source":" Activities themselves are developed as collections of other activities (using the <xref:System.Activities.Activity> class as a base, usually defined by using XAML) or are custom created by using the <xref:System.Activities.CodeActivity> class, which can use the runtime for data access, or by using the <xref:System.Activities.NativeActivity> class, which exposes the breadth of the workflow runtime to the activity author."},{"content":"Activities developed by using <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivity&gt;</ph> are created by using CLR-compliant languages such as C#.","pos":[1827,1995],"source":" Activities developed by using <xref:System.Activities.CodeActivity> and <xref:System.Activities.NativeActivity> are created by using CLR-compliant languages such as C#."},{"pos":[2004,2023],"content":"Activity Data Model","linkify":"Activity Data Model","nodes":[{"content":"Activity Data Model","pos":[0,19]}]},{"content":"Activities store and share data by using the types shown in the following table.","pos":[2027,2107]},{"content":"Variable","pos":[2128,2136]},{"content":"Stores data in an activity.","pos":[2137,2164]},{"content":"Argument","pos":[2169,2177]},{"content":"Moves data into and out of an activity.","pos":[2178,2217]},{"content":"Expression","pos":[2222,2232]},{"content":"An activity with an elevated return value used in argument bindings.","pos":[2233,2301]},{"pos":[2311,2327],"content":"Workflow Runtime","linkify":"Workflow Runtime","nodes":[{"content":"Workflow Runtime","pos":[0,16]}]},{"content":"The workflow runtime is the environment in which workflows execute.","pos":[2331,2398]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> is the simplest way to execute a workflow.","pos":[2399,2482],"source":"<xref:System.Activities.WorkflowInvoker> is the simplest way to execute a workflow."},{"content":"The host uses <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> for the following:","pos":[2483,2556],"source":" The host uses <xref:System.Activities.WorkflowInvoker> for the following:"},{"content":"To synchronously invoke a workflow.","pos":[2566,2601]},{"content":"To provide input to, or retrieve output from a workflow.","pos":[2611,2667]},{"content":"To add extensions to be used by activities.","pos":[2677,2720]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.ActivityInstance&gt;</ph> is the thread-safe proxy that hosts can use to interact with the runtime.","pos":[2727,2842],"source":"<xref:System.Activities.ActivityInstance> is the thread-safe proxy that hosts can use to interact with the runtime."},{"content":"The host uses <ph id=\"ph1\">&lt;xref:System.Activities.ActivityInstance&gt;</ph> for the following:","pos":[2843,2917],"source":" The host uses <xref:System.Activities.ActivityInstance> for the following:"},{"content":"To acquire an instance by creating it or loading it from an instance store.","pos":[2927,3002]},{"content":"To be notified of instance life-cycle events.","pos":[3012,3057]},{"content":"To control workflow execution.","pos":[3067,3097]},{"content":"To provide input to, or retrieve output from a workflow.","pos":[3107,3163]},{"content":"To signal a workflow continuation and pass values into the workflow.","pos":[3173,3241]},{"content":"To persist workflow data.","pos":[3251,3276]},{"content":"To add extensions to be used by activities.","pos":[3286,3329]},{"content":"Activities gain access to the workflow runtime environment by using the appropriate <ph id=\"ph1\">&lt;xref:System.Activities.ActivityContext&gt;</ph> derived class, such as <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Activities.CodeActivityContext&gt;</ph>.","pos":[3336,3579],"source":"Activities gain access to the workflow runtime environment by using the appropriate <xref:System.Activities.ActivityContext> derived class, such as <xref:System.Activities.NativeActivityContext> or <xref:System.Activities.CodeActivityContext>."},{"content":"They use this for resolving arguments and variables, for scheduling child activities, and for many other purposes.","pos":[3580,3694]},{"pos":[3703,3711],"content":"Services","linkify":"Services","nodes":[{"content":"Services","pos":[0,8]}]},{"content":"Workflows provide a natural way to implement and access loosely-coupled services, using messaging activities.","pos":[3715,3824]},{"content":"Messaging activities are built on <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> and are the primary mechanism used to get data into and out of a workflow.","pos":[3825,3986],"source":" Messaging activities are built on [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] and are the primary mechanism used to get data into and out of a workflow."},{"content":"You can compose messaging activities together to model any kind of message exchange pattern you wish.","pos":[3987,4088]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph> see <bpt id=\"p1\">[</bpt>Messaging Activities<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/messaging-activities.md)</ept>.","pos":[4089,4242],"source":"[!INCLUDE[crdefault](../../../includes/crdefault-md.md)] see [Messaging Activities](../../../docs/framework/wcf/feature-details/messaging-activities.md)."},{"content":"Workflow services are hosted using the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph> class.","pos":[4243,4346],"source":" Workflow services are hosted using the <xref:System.ServiceModel.Activities.WorkflowServiceHost> class."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Hosting Workflow Services Overview<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/hosting-workflow-services-overview.md)</ept>.","pos":[4347,4523],"source":"[!INCLUDE[crdefault](../../../includes/crdefault-md.md)][Hosting Workflow Services Overview](../../../docs/framework/wcf/feature-details/hosting-workflow-services-overview.md)."},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> workflow services see <bpt id=\"p1\">[</bpt>Workflow Services<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/workflow-services.md)</ept>","pos":[4524,4684],"source":"[!INCLUDE[crabout](../../../includes/crabout-md.md)] workflow services see [Workflow Services](../../../docs/framework/wcf/feature-details/workflow-services.md)"},{"pos":[4693,4743],"content":"Persistence, Unloading, and Long-Running Workflows","linkify":"Persistence, Unloading, and Long-Running Workflows","nodes":[{"content":"Persistence, Unloading, and Long-Running Workflows","pos":[0,50]}]},{"content":"Windows Workflow simplifies the authoring of long-running reactive programs by providing:","pos":[4747,4836]},{"content":"Activities that access external input.","pos":[4846,4884]},{"content":"The ability to create <ph id=\"ph1\">&lt;xref:System.Activities.Bookmark&gt;</ph> objects that can be resumed by a host listener.","pos":[4894,4997],"source":"The ability to create <xref:System.Activities.Bookmark> objects that can be resumed by a host listener."},{"content":"The ability to persist a workflowâ€™s data and unload the workflow, and then reload and reactivate the workflow in response to the resumption of <ph id=\"ph1\">&lt;xref:System.Activities.Bookmark&gt;</ph> objects in a particular workflow.","pos":[5007,5217],"source":"The ability to persist a workflowâ€™s data and unload the workflow, and then reload and reactivate the workflow in response to the resumption of <xref:System.Activities.Bookmark> objects in a particular workflow."},{"content":"A workflow continuously executes activities until there are no more activities to execute or until all currently executing activities are waiting for input.","pos":[5224,5380]},{"content":"In this latter state, the workflow is idle.","pos":[5381,5424]},{"content":"It is common for a host to unload workflows that have gone idle and to reload them to continue execution when a message arrives.","pos":[5425,5553]},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph> provides functionality for this feature and provides an extensible unload policy.","pos":[5554,5693],"source":"<xref:System.ServiceModel.Activities.WorkflowServiceHost> provides functionality for this feature and provides an extensible unload policy."},{"content":"For blocks of execution that use volatile state data or other data that cannot be persisted, an activity can indicate to a host that it should not be persisted by using the <ph id=\"ph1\">&lt;xref:System.Activities.NoPersistHandle&gt;</ph>.","pos":[5694,5908],"source":" For blocks of execution that use volatile state data or other data that cannot be persisted, an activity can indicate to a host that it should not be persisted by using the <xref:System.Activities.NoPersistHandle>."},{"content":"A workflow can also explicitly persist its data to a durable storage medium by using the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Persist&gt;</ph> activity.","pos":[5909,6051],"source":" A workflow can also explicitly persist its data to a durable storage medium by using the <xref:System.Activities.Statements.Persist> activity."}]}