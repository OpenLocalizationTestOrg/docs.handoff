<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44c3f258b6c07a67380822213acb0106b69f18a8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\diagnostics\tracing\asynchronous-scenarios-using-http-tcp-or-named-pipe.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e07220db264ca93667f9fda47a26579cbf3c87a8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e17fb73077033b65c04866f93f00b49b99f27c6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Asynchronous Scenarios using HTTP, TCP, or Named-Pipe | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Asynchronous Scenarios using HTTP, TCP, or Named-Pipe</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes the activities and transfers for different asynchronous request/reply scenarios, with multithreaded requests using HTTP, TCP, or named pipe.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Asynchronous Request/Reply without Errors</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This section describes the activities and transfers for an asynchronous request/reply scenario, with multithreaded clients.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The caller activity terminates when <ph id="ph1">`beginCall`</ph> returns, and <ph id="ph2">`endCall`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a callback is called, the callback returns.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The called activity terminates when <ph id="ph1">`beginCall`</ph> returns, <ph id="ph2">`endCall`</ph> returns, or when the callback returns if it was called from that activity.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Asynchronous Client without Callback</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Propagation is Enabled on Both Sides, using HTTP</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Asynchronous scenarios<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/wcf/diagnostics/tracing/media/asyn1.gif "</bpt>Asyn1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Figure 1.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Asynchronous client, no callback, <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`true`</ph> on both sides, HTTP</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`true`</ph>, ProcessMessage indicates which ProcessAction activity to transfer to.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For HTTP-based scenarios, ReceiveBytes is invoked on the first message to send, and exists for the lifetime of the request.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Propagation is Disabled on Either Sides, using HTTP</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`false`</ph> on either side, ProcessMessage does not indicate which ProcessAction activity to transfer to.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, a new temporary ProcessAction activity with a new ID is invoked.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the asynchronous response is matched to the request in ServiceModel code, the Activity ID can be retrieved from the local context.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The actual ProcessAction activity can be transferred to with that ID.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Asynchronous scenarios using HTTP&amp;#47;TCP&amp;#47;Named Pipe<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/wcf/diagnostics/tracing/media/async2.gif "</bpt>Async2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Figure 2.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Asynchronous client, no callback, <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`false`</ph> on either side, HTTP</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For HTTP-based scenarios, ReceiveBytes is invoked on the first message to send, and exists for the lifetime of the request.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A Process Action activity is created on an asynchronous client when <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`false`</ph> at the caller or callee, and when the response message does not include an Action header.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Propagation is Enabled on Both Sides, using TCP or Named Pipe</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Asynchronous scenarios using HTTP&amp;#47;TCP&amp;#47;Named Pipe<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/wcf/diagnostics/tracing/media/async3.gif "</bpt>Async3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Figure 3.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Asynchronous client, no callback, <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`true`</ph> on both sides, Named-Pipe/TCP</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For a Named-Pipe or TCP-based scenario, ReceiveBytes is invoked when the client is opened, and exists for the lifetime of the connection.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Similar to Figure 1, if <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`true`</ph>, ProcessMessage indicates which ProcessAction activity to transfer to.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Propagation is Disabled on Either Sides, using TCP or Named Pipe</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For a Named-Pipe or TCP-based scenario, ReceiveBytes is invoked when the client is opened, and exists for the lifetime of the connection.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Similar to Fig.2, If <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`false`</ph> on either side, ProcessMessage does not indicate which ProcessAction activity to transfer to.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Therefore, a new temporary ProcessAction activity with a new ID is invoked.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When the asynchronous response is matched to the request in ServiceModel code, the Activity ID can be retrieved from the local context.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The actual ProcessAction activity can be transferred to with that ID.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Asynchronous scenarios using HTTP&amp;#47;TCP&amp;#47; Named Pipes<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/wcf/diagnostics/tracing/media/async4.gif "</bpt>Async4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Figure 4.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Asynchronous client, no callback, <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`false`</ph> on either side, Named-Pipe/TCP</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Asynchronous client with Callback</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This scenario adds activities G and A’, for the callback and <ph id="ph1">`endCall`</ph>, and their transfers in/out.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This section only demonstrates using HTTP with <ph id="ph1">`propragateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, the additional activities and transfers also apply to the other cases (that is, <ph id="ph1">`propagateActivity`</ph><ph id="ph2">=</ph><ph id="ph3">`false`</ph>, using TCP or Named-Pipe).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The callback creates a new activity (G) when the client calls user code to notify that results are ready.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>User code then calls <ph id="ph1">`endCall`</ph> within the callback (as shown in Figure 5) or outside the callback (Figure 6).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because it is not known which user activity <ph id="ph1">`endCall`</ph> is being called from, this activity is labeled <ph id="ph2">`A’`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It is possible that A’ can be identical to or different from A.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Asynchronous scenarios<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/wcf/diagnostics/tracing/media/asynccallback1.gif "</bpt>AsyncCallback1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Figure 5.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Asynchronous client with callback, <ph id="ph1">`endCall`</ph> in Callback</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Asynchronous Scenarios<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/wcf/diagnostics/tracing/media/asynccallback2.gif "</bpt>AsyncCallback2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Figure 6.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Asynchronous client with callback, <ph id="ph1">`endCall`</ph> outside of Callback</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Asynchronous Server with Callback</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Asynchronous scenarios using HTTP&amp;#47;TCP&amp;#47; Named&amp;#45;Pipe<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/wcf/diagnostics/tracing/media/aynchserver.gif "</bpt>AynchServer<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Figure 7.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Asynchronous server, with callback</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The channel stack calls back the client on Message Receive: traces for this processing are emitted in the ProcessRequest activity itself.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Asynchronous Request/Reply with Errors</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Fault message errors are received during <ph id="ph1">`endCall`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Otherwise, activities and transfers are similar to previous scenarios.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Asynchronous One-Way with or without Errors</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>No response or fault is returned to the client.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>