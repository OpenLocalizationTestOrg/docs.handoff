{"content":"---\ntitle: \"=&gt; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"=>_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"lambda operator [C#]\"\n  - \"=> operator [C#]\"\n  - \"lambda expressions [C#], => operator\"\nms.assetid: 8c899251-dafa-4594-bec7-243b39072880\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# =&gt; Operator (C# Reference)\nThe `=>` token is called the lambda operator. It is used in *lambda expressions* to separate the input variables on the left side from the lambda body on the right side. Lambda expressions are inline expressions similar to anonymous methods but more flexible; they are used extensively in LINQ queries that are expressed in method syntax. For more information, see [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).  \n  \n The following example shows two ways to find and display the length of the shortest string in an array of strings. The first part of the example applies a lambda expression (`w => w.Length`) to each element of the `words` array and then uses the <xref:System.Linq.Enumerable.Min%2A> method to find the smallest length. For comparison, the second part of the example shows a longer solution that uses query syntax to do the same thing.  \n  \n```csharp  \nstring[] words = { \"cherry\", \"apple\", \"blueberry\" };  \n  \n// Use method syntax to apply a lambda expression to each element  \n// of the words array.   \nint shortestWordLength = words.Min(w => w.Length);  \nConsole.WriteLine(shortestWordLength);  \n  \n// Compare the following code that uses query syntax.  \n// Get the lengths of each word in the words array.  \nvar query = from w in words  \n            select w.Length;  \n// Apply the Min method to execute the query and get the shortest length.  \nint shortestWordLength2 = query.Min();  \nConsole.WriteLine(shortestWordLength2);  \n  \n// Output:   \n// 5  \n// 5  \n```  \n  \n## Remarks  \n The `=>` operator has the same precedence as the assignment operator (`=`) and is right-associative.  \n  \n You can specify the type of the input variable explicitly or let the compiler infer it; in either case, the variable is strongly typed at compile time. When you specify a type, you must enclose the type name and the variable name in parentheses, as the following example shows.  \n  \n```csharp  \nint shortestWordLength = words.Min((string w) => w.Length);  \n```  \n  \n## Example  \n The following example shows how to write a lambda expression for the overload of the standard query operator <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> that takes two arguments. Because the lambda expression has more than one parameter, the parameters must be enclosed in parentheses. The second parameter, `index`, represents the index of the current element in the collection. The `Where` expression returns all the strings whose lengths are less than their index positions in the array.  \n  \n```csharp  \nstatic void Main(string[] args)  \n{  \n    string[] digits = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\",   \n            \"six\", \"seven\", \"eight\", \"nine\" };  \n  \n    Console.WriteLine(\"Example that uses a lambda expression:\");  \n    var shortDigits = digits.Where((digit, index) => digit.Length < index);  \n    foreach (var sD in shortDigits)  \n    {  \n        Console.WriteLine(sD);  \n    }  \n  \n    // Output:  \n    // Example that uses a lambda expression:  \n    // five  \n    // six  \n    // seven  \n    // eight  \n    // nine  \n}  \n```  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)","nodes":[{"pos":[12,58],"content":"=&gt; Operator (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">=</ph><ph id=\"ph2\">&amp;gt;</ph> Operator (C# Reference) | Microsoft Docs","pos":[0,46],"source":"=&gt; Operator (C# Reference) | Microsoft Docs"}]},{"pos":[659,688],"content":"=&gt; Operator (C# Reference)","linkify":"=&gt; Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">=</ph><ph id=\"ph2\">&amp;gt;</ph> Operator (C# Reference)","pos":[0,29],"source":"=&gt; Operator (C# Reference)"}]},{"content":"The <ph id=\"ph1\">`=&gt;`</ph> token is called the lambda operator.","pos":[689,734],"source":"The `=>` token is called the lambda operator."},{"content":"It is used in <bpt id=\"p1\">*</bpt>lambda expressions<ept id=\"p1\">*</ept> to separate the input variables on the left side from the lambda body on the right side.","pos":[735,858],"source":" It is used in *lambda expressions* to separate the input variables on the left side from the lambda body on the right side."},{"content":"Lambda expressions are inline expressions similar to anonymous methods but more flexible; they are used extensively in LINQ queries that are expressed in method syntax.","pos":[859,1027]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.","pos":[1028,1165],"source":" For more information, see [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)."},{"content":"The following example shows two ways to find and display the length of the shortest string in an array of strings.","pos":[1172,1286]},{"content":"The first part of the example applies a lambda expression (<ph id=\"ph1\">`w =&gt; w.Length`</ph>) to each element of the <ph id=\"ph2\">`words`</ph> array and then uses the <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph> method to find the smallest length.","pos":[1287,1490],"source":" The first part of the example applies a lambda expression (`w => w.Length`) to each element of the `words` array and then uses the <xref:System.Linq.Enumerable.Min%2A> method to find the smallest length."},{"content":"For comparison, the second part of the example shows a longer solution that uses query syntax to do the same thing.","pos":[1491,1606]},{"pos":[2246,2253],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2257,2357],"content":"The <ph id=\"ph1\">`=&gt;`</ph> operator has the same precedence as the assignment operator (<ph id=\"ph2\">`=`</ph>) and is right-associative.","source":"The `=>` operator has the same precedence as the assignment operator (`=`) and is right-associative."},{"content":"You can specify the type of the input variable explicitly or let the compiler infer it; in either case, the variable is strongly typed at compile time.","pos":[2364,2515]},{"content":"When you specify a type, you must enclose the type name and the variable name in parentheses, as the following example shows.","pos":[2516,2641]},{"pos":[2733,2740],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to write a lambda expression for the overload of the standard query operator <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt;</ph> that takes two arguments.","pos":[2744,2942],"source":"The following example shows how to write a lambda expression for the overload of the standard query operator <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> that takes two arguments."},{"content":"Because the lambda expression has more than one parameter, the parameters must be enclosed in parentheses.","pos":[2943,3049]},{"content":"The second parameter, <ph id=\"ph1\">`index`</ph>, represents the index of the current element in the collection.","pos":[3050,3143],"source":" The second parameter, `index`, represents the index of the current element in the collection."},{"content":"The <ph id=\"ph1\">`Where`</ph> expression returns all the strings whose lengths are less than their index positions in the array.","pos":[3144,3254],"source":" The `Where` expression returns all the strings whose lengths are less than their index positions in the array."},{"pos":[3823,3831],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3835,3895],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3898,3966],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Lambda Expressions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>","pos":[3969,4080],"source":" [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)"}]}