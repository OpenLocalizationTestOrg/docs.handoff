{"content":"---\ntitle: \"Resume Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Resume\"\n  - \"vb.ResumeNext\"\nhelpviewer_keywords: \n  - \"Next statement [Visual Basic], Resume\"\n  - \"Resume Next statement [Visual Basic]\"\n  - \"execution [Visual Basic], resuming\"\n  - \"run-time errors [Visual Basic], resuming after\"\n  - \"Resume statement [Visual Basic], syntax\"\n  - \"errors [Visual Basic], resuming after\"\n  - \"Error statement [Visual Basic], and Resume statement\"\n  - \"execution\"\n  - \"Resume statement [Visual Basic]\"\nms.assetid: e24d058b-1a5c-4274-acb9-7d295d3ea537\n---\n# Resume Statement\nResumes execution after an error-handling routine is finished.  \n  \n We suggest that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements. For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md).  \n  \n## Syntax  \n  \n```  \nResume [ Next | line ]  \n```  \n  \n## Parts  \n `Resume`  \n Required. If the error occurred in the same procedure as the error handler, execution resumes with the statement that caused the error. If the error occurred in a called procedure, execution resumes at the statement that last called out of the procedure containing the error-handling routine.  \n  \n `Next`  \n Optional. If the error occurred in the same procedure as the error handler, execution resumes with the statement immediately following the statement that caused the error. If the error occurred in a called procedure, execution resumes with the statement immediately following the statement that last called out of the procedure containing the error-handling routine (or `On Error Resume Next` statement).  \n  \n `line`  \n Optional. Execution resumes at the line specified in the required `line` argument. The `line` argument is a line label or line number and must be in the same procedure as the error handler.  \n  \n## Remarks  \n  \n> [!NOTE]\n>  We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements. For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md).  \n  \n If you use a `Resume` statement anywhere other than in an error-handling routine, an error occurs.  \n  \n The `Resume` statement cannot be used in any procedure that contains a `Try...Catch...Finally` statement.  \n  \n## Example  \n This example uses the `Resume` statement to end error handling in a procedure and then resume execution with the statement that caused the error. Error number 55 is generated to illustrate use of the `Resume` statement.  \n  \n [!code-vb[VbVbalrErrorHandling#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#16)]  \n  \n## Requirements  \n **Namespace:** [Microsoft.VisualBasic](../../../visual-basic/language-reference/runtime-library-members.md)  \n  \n **Assembly:** Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)  \n  \n## See also\n\n- [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)\n- [Error Statement](../../../visual-basic/language-reference/statements/error-statement.md)\n- [On Error Statement](../../../visual-basic/language-reference/statements/on-error-statement.md)\n","nodes":[{"pos":[4,569],"embed":true,"restype":"x-metadata","content":"title: \"Resume Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Resume\"\n  - \"vb.ResumeNext\"\nhelpviewer_keywords: \n  - \"Next statement [Visual Basic], Resume\"\n  - \"Resume Next statement [Visual Basic]\"\n  - \"execution [Visual Basic], resuming\"\n  - \"run-time errors [Visual Basic], resuming after\"\n  - \"Resume statement [Visual Basic], syntax\"\n  - \"errors [Visual Basic], resuming after\"\n  - \"Error statement [Visual Basic], and Resume statement\"\n  - \"execution\"\n  - \"Resume statement [Visual Basic]\"\nms.assetid: e24d058b-1a5c-4274-acb9-7d295d3ea537","nodes":[{"content":"Resume Statement (Visual Basic)","nodes":[{"pos":[0,31],"content":"Resume Statement (Visual Basic)","nodes":[{"content":"Resume Statement (Visual Basic)","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[576,592],"content":"Resume Statement","linkify":"Resume Statement","nodes":[{"content":"Resume Statement","pos":[0,16]}]},{"content":"Resumes execution after an error-handling routine is finished.","pos":[593,655]},{"content":"We suggest that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the <ph id=\"ph1\">`On Error`</ph> and <ph id=\"ph2\">`Resume`</ph> statements.","pos":[662,841],"source":"We suggest that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.","pos":[842,986],"source":" For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)."},{"pos":[995,1001],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1050,1055],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1071,1080]},{"content":"If the error occurred in the same procedure as the error handler, execution resumes with the statement that caused the error.","pos":[1081,1206]},{"content":"If the error occurred in a called procedure, execution resumes at the statement that last called out of the procedure containing the error-handling routine.","pos":[1207,1363]},{"content":"Optional.","pos":[1380,1389]},{"content":"If the error occurred in the same procedure as the error handler, execution resumes with the statement immediately following the statement that caused the error.","pos":[1390,1551]},{"content":"If the error occurred in a called procedure, execution resumes with the statement immediately following the statement that last called out of the procedure containing the error-handling routine (or <ph id=\"ph1\">`On Error Resume Next`</ph> statement).","pos":[1552,1784],"source":" If the error occurred in a called procedure, execution resumes with the statement immediately following the statement that last called out of the procedure containing the error-handling routine (or `On Error Resume Next` statement)."},{"content":"Optional.","pos":[1801,1810]},{"content":"Execution resumes at the line specified in the required <ph id=\"ph1\">`line`</ph> argument.","pos":[1811,1883],"source":" Execution resumes at the line specified in the required `line` argument."},{"content":"The <ph id=\"ph1\">`line`</ph> argument is a line label or line number and must be in the same procedure as the error handler.","pos":[1884,1990],"source":" The `line` argument is a line label or line number and must be in the same procedure as the error handler."},{"pos":[1999,2006],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2014,2351],"content":"[!NOTE]\n We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements. For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md).","leadings":["","> "],"nodes":[{"content":"We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements. For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md).","pos":[9,335],"nodes":[{"content":"We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the <ph id=\"ph1\">`On Error`</ph> and <ph id=\"ph2\">`Resume`</ph> statements.","pos":[0,181],"source":"We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.","pos":[182,326],"source":" For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)."}]}]},{"pos":[2358,2456],"content":"If you use a <ph id=\"ph1\">`Resume`</ph> statement anywhere other than in an error-handling routine, an error occurs.","source":"If you use a `Resume` statement anywhere other than in an error-handling routine, an error occurs."},{"pos":[2463,2568],"content":"The <ph id=\"ph1\">`Resume`</ph> statement cannot be used in any procedure that contains a <ph id=\"ph2\">`Try...Catch...Finally`</ph> statement.","source":"The `Resume` statement cannot be used in any procedure that contains a `Try...Catch...Finally` statement."},{"pos":[2577,2584],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">`Resume`</ph> statement to end error handling in a procedure and then resume execution with the statement that caused the error.","pos":[2588,2733],"source":"This example uses the `Resume` statement to end error handling in a procedure and then resume execution with the statement that caused the error."},{"content":"Error number 55 is generated to illustrate use of the <ph id=\"ph1\">`Resume`</ph> statement.","pos":[2734,2807],"source":" Error number 55 is generated to illustrate use of the `Resume` statement."},{"pos":[2948,2960],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2964,3071],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt>Microsoft.VisualBasic<ept id=\"p2\">](../../../visual-basic/language-reference/runtime-library-members.md)</ept>","source":"**Namespace:** [Microsoft.VisualBasic](../../../visual-basic/language-reference/runtime-library-members.md)"},{"pos":[3078,3151],"content":"<bpt id=\"p1\">**</bpt>Assembly:<ept id=\"p1\">**</ept> Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)","source":"**Assembly:** Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)"},{"pos":[3160,3168],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3172,3289],"content":"<bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>","source":"[Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)"},{"pos":[3292,3381],"content":"<bpt id=\"p1\">[</bpt>Error Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/error-statement.md)</ept>","source":"[Error Statement](../../../visual-basic/language-reference/statements/error-statement.md)"},{"pos":[3384,3479],"content":"<bpt id=\"p1\">[</bpt>On Error Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept>","source":"[On Error Statement](../../../visual-basic/language-reference/statements/on-error-statement.md)"}]}