{"content":"---\ntitle: \"ADO.NET code examples\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: c119657a-9ce6-4940-91e4-ac1d5f0d9584\n---\n# ADO.NET code examples\nThe code listings in this topic demonstrate how to retrieve data from a database by using the following ADO.NET technologies:\n\n- ADO.NET data providers:\n\n  - [SqlClient](#sqlclient) (`System.Data.SqlClient`)\n\n  - [OleDb](#oledb) (`System.Data.OleDb`)\n\n  - [Odbc](#odbc) (`System.Data.Odbc`)\n\n  - [OracleClient](#oracleclient) (`System.Data.OracleClient`)\n\n- ADO.NET Entity Framework:\n\n  - [LINQ to Entities](#linq-to-entities)\n\n  - [Typed ObjectQuery](#typed-objectquery)\n\n  - [EntityClient](#entityclient) (`System.Data.EntityClient`)\n\n- [LINQ to SQL](#linq-to-sql)\n\n## ADO.NET data provider examples\nThe following code listings demonstrate how to retrieve data from a database using ADO.NET data providers. The data is returned in a `DataReader`. For more information, see [Retrieving Data Using a DataReader](../../../../docs/framework/data/adonet/retrieving-data-using-a-datareader.md).\n\n### SqlClient\nThe code in this example assumes that you can connect to the `Northwind` sample database on Microsoft SQL Server. The code creates a <xref:System.Data.SqlClient.SqlCommand> to select rows from the Products table, adding a <xref:System.Data.SqlClient.SqlParameter> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5. The <xref:System.Data.SqlClient.SqlConnection> is opened inside a `using` block, which ensures that resources are closed and disposed when the code exits. The code executes the command by using a <xref:System.Data.SqlClient.SqlDataReader>, and displays the results in the console window.\n\n [!code-csharp[DataWorks SampleApp.SqlClient#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SampleApp.SqlClient/CS/source.cs#1)]\n [!code-vb[DataWorks SampleApp.SqlClient#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SampleApp.SqlClient/VB/source.vb#1)]\n\n### OleDb\nThe code in this example assumes that you can connect to the Microsoft Access Northwind sample database. The code creates a <xref:System.Data.OleDb.OleDbCommand> to select rows from the Products table, adding a <xref:System.Data.OleDb.OleDbParameter> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5. The <xref:System.Data.OleDb.OleDbConnection> is opened inside of a `using` block, which ensures that resources are closed and disposed when the code exits. The code executes the command by using a <xref:System.Data.OleDb.OleDbDataReader>, and displays the results in the console window.\n\n [!code-csharp[DataWorks SampleApp.OleDb#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SampleApp.OleDb/CS/source.cs#1)]\n [!code-vb[DataWorks SampleApp.OleDb#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SampleApp.OleDb/VB/source.vb#1)]\n\n### Odbc\nThe code in this example assumes that you can connect to the Microsoft Access Northwind sample database. The code creates a <xref:System.Data.Odbc.OdbcCommand> to select rows from the Products table, adding a <xref:System.Data.Odbc.OdbcParameter> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5. The <xref:System.Data.Odbc.OdbcConnection> is opened inside a `using` block, which ensures that resources are closed and disposed when the code exits. The code executes the command by using a <xref:System.Data.Odbc.OdbcDataReader>, and displays the results in the console window.\n\n[!code-csharp[DataWorks SampleApp.Odbc#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SampleApp.Odbc/CS/source.cs#1)] \n[!code-vb[DataWorks SampleApp.Odbc#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SampleApp.Odbc/VB/source.vb#1)] \n\n### OracleClient\nThe code in this example assumes a connection to DEMO.CUSTOMER on an Oracle server. You must also add a reference to the System.Data.OracleClient.dll. The code returns the data in an <xref:System.Data.OracleClient.OracleDataReader>.\n\n [!code-csharp[DataWorks SampleApp.Oracle#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SampleApp.Oracle/CS/source.cs#1)]\n [!code-vb[DataWorks SampleApp.Oracle#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SampleApp.Oracle/VB/source.vb#1)]\n\n## Entity Framework examples\nThe following code listings demonstrate how to retrieve data from a data source by querying entities in an Entity Data Model (EDM). These examples use a model based on the Northwind sample database. For more information about Entity Framework, see [Entity Framework Overview](../../../../docs/framework/data/adonet/ef/overview.md).\n\n### LINQ to Entities\nThe code in this example uses a LINQ query to return data as Categories objects, which are projected as an anonymous type that contains only the CategoryID and CategoryName properties. For more information, see [LINQ to Entities Overview](../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md).\n\n```csharp\nusing System;\nusing System.Linq;\nusing System.Data.Objects;\nusing NorthwindModel;\n\nclass LinqSample\n{\n    public static void ExecuteQuery()\n    {\n        using (NorthwindEntities context = new NorthwindEntities())\n        {\n            try\n            {\n                var query = from category in context.Categories\n                            select new\n                            {\n                                categoryID = category.CategoryID,\n                                categoryName = category.CategoryName\n                            };\n\n                foreach (var categoryInfo in query)\n                {\n                    Console.WriteLine(\"\\t{0}\\t{1}\",\n                        categoryInfo.categoryID, categoryInfo.categoryName);\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n        }\n    }\n}\n```\n\n```vb\nOption Explicit On\nOption Strict On\n\nImports System\nImports System.Linq\nImports System.Data.Objects\nImports NorthwindModel\n\nClass LinqSample\n    Public Shared Sub ExecuteQuery()\n        Using context As NorthwindEntities = New NorthwindEntities()\n            Try\n                Dim query = From category In context.Categories _\n                            Select New With _\n                            { _\n                                .categoryID = category.CategoryID, _\n                                .categoryName = category.CategoryName _\n                            }\n\n                For Each categoryInfo In query\n                    Console.WriteLine(vbTab & \"{0}\" & vbTab & \"{1}\", _\n                        categoryInfo.categoryID, categoryInfo.categoryName)\n                Next\n            Catch ex As Exception\n                Console.WriteLine(ex.Message)\n            End Try\n        End Using\n    End Sub\nEnd Class\n```\n\n### Typed ObjectQuery\nThe code in this example uses an <xref:System.Data.Objects.ObjectQuery%601> to return data as Categories objects. For more information, see [Object Queries](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100)).\n\n```csharp\nusing System;\nusing System.Data.Objects;\nusing NorthwindModel;\n\nclass ObjectQuerySample\n{\n    public static void ExecuteQuery()\n    {\n        using (NorthwindEntities context = new NorthwindEntities())\n        {\n            ObjectQuery<Categories> categoryQuery = context.Categories;\n\n            foreach (Categories category in \n                categoryQuery.Execute(MergeOption.AppendOnly))\n            {\n                Console.WriteLine(\"\\t{0}\\t{1}\",\n                    category.CategoryID, category.CategoryName);\n            }\n        }\n    }\n}\n```\n\n```vb\nOption Explicit On\nOption Strict On\n\nImports System\nImports System.Data.Objects\nImports NorthwindModel\n\nClass ObjectQuerySample\n    Public Shared Sub ExecuteQuery()\n        Using context As NorthwindEntities = New NorthwindEntities()\n            Dim categoryQuery As ObjectQuery(Of Categories) = context.Categories\n\n            For Each category As Categories In _\n                categoryQuery.Execute(MergeOption.AppendOnly)\n                Console.WriteLine(vbTab & \"{0}\" & vbTab & \"{1}\", _\n                    category.CategoryID, category.CategoryName)\n            Next\n        End Using\n    End Sub\nEnd Class\n```\n\n### EntityClient\nThe code in this example uses an <xref:System.Data.EntityClient.EntityCommand> to execute an Entity SQL query. This query returns a list of records that represent instances of the Categories entity type. An <xref:System.Data.EntityClient.EntityDataReader> is used to access data records in the result set. For more information, see [EntityClient Provider for the Entity Framework](../../../../docs/framework/data/adonet/ef/entityclient-provider-for-the-entity-framework.md).\n\n```csharp\nusing System;\nusing System.Data;\nusing System.Data.Common;\nusing System.Data.EntityClient;\nusing NorthwindModel;\n\nclass EntityClientSample\n{\n    public static void ExecuteQuery()\n    {\n        string queryString =\n            @\"SELECT c.CategoryID, c.CategoryName \n                FROM NorthwindEntities.Categories AS c\";\n\n        using (EntityConnection conn =\n            new EntityConnection(\"name=NorthwindEntities\"))\n        {\n            try\n            {\n                conn.Open();\n                using (EntityCommand query = new EntityCommand(queryString, conn))\n                {\n                    using (DbDataReader rdr = \n                        query.ExecuteReader(CommandBehavior.SequentialAccess))\n                    {\n                        while (rdr.Read())\n                        {\n                            Console.WriteLine(\"\\t{0}\\t{1}\", rdr[0], rdr[1]);\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n        }\n    }\n}\n```\n\n```vb\nOption Explicit On\nOption Strict On\n\nImports System\nImports System.Data\nImports System.Data.Common\nImports System.Data.EntityClient\nImports NorthwindModel\n\nClass EntityClientSample\n    Public Shared Sub ExecuteQuery()\n        Dim queryString As String = _\n            \"SELECT c.CategoryID, c.CategoryName \" & _\n                \"FROM NorthwindEntities.Categories AS c\"\n\n        Using conn As EntityConnection = _\n            New EntityConnection(\"name=NorthwindEntities\")\n\n            Try\n                conn.Open()\n                Using query As EntityCommand = _\n                New EntityCommand(queryString, conn)\n                    Using rdr As DbDataReader = _\n                        query.ExecuteReader(CommandBehavior.SequentialAccess)\n                        While rdr.Read()\n                            Console.WriteLine(vbTab & \"{0}\" & vbTab & \"{1}\", _\n                                              rdr(0), rdr(1))\n                        End While\n                    End Using\n                End Using\n            Catch ex As Exception\n                Console.WriteLine(ex.Message)\n            End Try\n        End Using \n    End Sub\nEnd Class\n```\n\n## LINQ to SQL\nThe code in this example uses a LINQ query to return data as Categories objects, which are projected as an anonymous type that contains only the CategoryID and CategoryName properties. This example is based on the Northwind data context. For more information, see [Getting Started](../../../../docs/framework/data/adonet/sql/linq/getting-started.md).\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Northwind;\n\n    class LinqSqlSample\n    {\n        public static void ExecuteQuery()\n        {\n            using (NorthwindDataContext db = new NorthwindDataContext())\n            {\n                try\n                {\n                    var query = from category in db.Categories\n                                select new\n                                {\n                                    categoryID = category.CategoryID,\n                                    categoryName = category.CategoryName\n                                };\n\n                    foreach (var categoryInfo in query)\n                    {\n                        Console.WriteLine(\"vbTab {0} vbTab {1}\",\n                            categoryInfo.categoryID, categoryInfo.categoryName);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n            }\n        }\n    }\n```\n\n```vb\nOption Explicit On\nOption Strict On\n\nImports System\nImports System.Collections.Generic\nImports System.Linq\nImports System.Text\nImports Northwind\n\nClass LinqSqlSample\n    Public Shared Sub ExecuteQuery()\n        Using db As NorthwindDataContext = New NorthwindDataContext()\n            Try\n                Dim query = From category In db.Categories _\n                                Select New With _\n                                { _\n                                    .categoryID = category.CategoryID, _\n                                    .categoryName = category.CategoryName _\n                                }\n\n                For Each categoryInfo In query\n                    Console.WriteLine(vbTab & \"{0}\" & vbTab & \"{1}\", _\n                            categoryInfo.categoryID, categoryInfo.categoryName)\n                Next\n            Catch ex As Exception\n                Console.WriteLine(ex.Message)\n            End Try\n            End Using \n    End Sub\nEnd Class\n```\n\n## See also\n\n- [ADO.NET Overview](../../../../docs/framework/data/adonet/ado-net-overview.md)\n- [Retrieving and Modifying Data in ADO.NET](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)\n- [Creating Data Applications](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/h0y4a0f6(v=vs.120))\n- [Querying an Entity Data Model (Entity Framework Tasks)](https://docs.microsoft.com/previous-versions/bb738455(v=vs.90))\n- [How to: Execute a Query that Returns Anonymous Type Objects](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738512(v=vs.100))\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,139],"embed":true,"restype":"x-metadata","content":"title: \"ADO.NET code examples\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: c119657a-9ce6-4940-91e4-ac1d5f0d9584","nodes":[{"content":"ADO.NET code examples","nodes":[{"pos":[0,21],"content":"ADO.NET code examples","nodes":[{"content":"ADO.NET code examples","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[146,167],"content":"ADO.NET code examples","linkify":"ADO.NET code examples","nodes":[{"content":"ADO.NET code examples","pos":[0,21]}]},{"content":"The code listings in this topic demonstrate how to retrieve data from a database by using the following ADO.NET technologies:","pos":[168,293]},{"content":"ADO.NET data providers:","pos":[297,320]},{"pos":[326,375],"content":"<bpt id=\"p1\">[</bpt>SqlClient<ept id=\"p1\">](#sqlclient)</ept> (<ph id=\"ph1\">`System.Data.SqlClient`</ph>)","source":"[SqlClient](#sqlclient) (`System.Data.SqlClient`)"},{"pos":[381,418],"content":"<bpt id=\"p1\">[</bpt>OleDb<ept id=\"p1\">](#oledb)</ept> (<ph id=\"ph1\">`System.Data.OleDb`</ph>)","source":"[OleDb](#oledb) (`System.Data.OleDb`)"},{"pos":[424,458],"content":"<bpt id=\"p1\">[</bpt>Odbc<ept id=\"p1\">](#odbc)</ept> (<ph id=\"ph1\">`System.Data.Odbc`</ph>)","source":"[Odbc](#odbc) (`System.Data.Odbc`)"},{"pos":[464,522],"content":"<bpt id=\"p1\">[</bpt>OracleClient<ept id=\"p1\">](#oracleclient)</ept> (<ph id=\"ph1\">`System.Data.OracleClient`</ph>)","source":"[OracleClient](#oracleclient) (`System.Data.OracleClient`)"},{"content":"ADO.NET Entity Framework:","pos":[526,551]},{"pos":[557,594],"content":"<bpt id=\"p1\">[</bpt>LINQ to Entities<ept id=\"p1\">](#linq-to-entities)</ept>","source":"[LINQ to Entities](#linq-to-entities)"},{"pos":[600,639],"content":"<bpt id=\"p1\">[</bpt>Typed ObjectQuery<ept id=\"p1\">](#typed-objectquery)</ept>","source":"[Typed ObjectQuery](#typed-objectquery)"},{"pos":[645,703],"content":"<bpt id=\"p1\">[</bpt>EntityClient<ept id=\"p1\">](#entityclient)</ept> (<ph id=\"ph1\">`System.Data.EntityClient`</ph>)","source":"[EntityClient](#entityclient) (`System.Data.EntityClient`)"},{"pos":[707,734],"content":"<bpt id=\"p1\">[</bpt>LINQ to SQL<ept id=\"p1\">](#linq-to-sql)</ept>","source":"[LINQ to SQL](#linq-to-sql)"},{"pos":[739,769],"content":"ADO.NET data provider examples","linkify":"ADO.NET data provider examples","nodes":[{"content":"ADO.NET data provider examples","pos":[0,30]}]},{"content":"The following code listings demonstrate how to retrieve data from a database using ADO.NET data providers.","pos":[770,876]},{"content":"The data is returned in a <ph id=\"ph1\">`DataReader`</ph>.","pos":[877,916],"source":" The data is returned in a `DataReader`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Retrieving Data Using a DataReader<ept id=\"p1\">](../../../../docs/framework/data/adonet/retrieving-data-using-a-datareader.md)</ept>.","pos":[917,1058],"source":" For more information, see [Retrieving Data Using a DataReader](../../../../docs/framework/data/adonet/retrieving-data-using-a-datareader.md)."},{"pos":[1064,1073],"content":"SqlClient","linkify":"SqlClient","nodes":[{"content":"SqlClient","pos":[0,9]}]},{"content":"The code in this example assumes that you can connect to the <ph id=\"ph1\">`Northwind`</ph> sample database on Microsoft SQL Server.","pos":[1074,1187],"source":"The code in this example assumes that you can connect to the `Northwind` sample database on Microsoft SQL Server."},{"content":"The code creates a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> to select rows from the Products table, adding a <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5.","pos":[1188,1446],"source":" The code creates a <xref:System.Data.SqlClient.SqlCommand> to select rows from the Products table, adding a <xref:System.Data.SqlClient.SqlParameter> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> is opened inside a <ph id=\"ph2\">`using`</ph> block, which ensures that resources are closed and disposed when the code exits.","pos":[1447,1601],"source":" The <xref:System.Data.SqlClient.SqlConnection> is opened inside a `using` block, which ensures that resources are closed and disposed when the code exits."},{"content":"The code executes the command by using a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph>, and displays the results in the console window.","pos":[1602,1734],"source":" The code executes the command by using a <xref:System.Data.SqlClient.SqlDataReader>, and displays the results in the console window."},{"pos":[2044,2049],"content":"OleDb","linkify":"OleDb","nodes":[{"content":"OleDb","pos":[0,5]}]},{"content":"The code in this example assumes that you can connect to the Microsoft Access Northwind sample database.","pos":[2050,2154]},{"content":"The code creates a <ph id=\"ph1\">&lt;xref:System.Data.OleDb.OleDbCommand&gt;</ph> to select rows from the Products table, adding a <ph id=\"ph2\">&lt;xref:System.Data.OleDb.OleDbParameter&gt;</ph> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5.","pos":[2155,2409],"source":" The code creates a <xref:System.Data.OleDb.OleDbCommand> to select rows from the Products table, adding a <xref:System.Data.OleDb.OleDbParameter> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.OleDb.OleDbConnection&gt;</ph> is opened inside of a <ph id=\"ph2\">`using`</ph> block, which ensures that resources are closed and disposed when the code exits.","pos":[2410,2565],"source":" The <xref:System.Data.OleDb.OleDbConnection> is opened inside of a `using` block, which ensures that resources are closed and disposed when the code exits."},{"content":"The code executes the command by using a <ph id=\"ph1\">&lt;xref:System.Data.OleDb.OleDbDataReader&gt;</ph>, and displays the results in the console window.","pos":[2566,2696],"source":" The code executes the command by using a <xref:System.Data.OleDb.OleDbDataReader>, and displays the results in the console window."},{"pos":[2990,2994],"content":"Odbc","linkify":"Odbc","nodes":[{"content":"Odbc","pos":[0,4]}]},{"content":"The code in this example assumes that you can connect to the Microsoft Access Northwind sample database.","pos":[2995,3099]},{"content":"The code creates a <ph id=\"ph1\">&lt;xref:System.Data.Odbc.OdbcCommand&gt;</ph> to select rows from the Products table, adding a <ph id=\"ph2\">&lt;xref:System.Data.Odbc.OdbcParameter&gt;</ph> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5.","pos":[3100,3350],"source":" The code creates a <xref:System.Data.Odbc.OdbcCommand> to select rows from the Products table, adding a <xref:System.Data.Odbc.OdbcParameter> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.Odbc.OdbcConnection&gt;</ph> is opened inside a <ph id=\"ph2\">`using`</ph> block, which ensures that resources are closed and disposed when the code exits.","pos":[3351,3501],"source":" The <xref:System.Data.Odbc.OdbcConnection> is opened inside a `using` block, which ensures that resources are closed and disposed when the code exits."},{"content":"The code executes the command by using a <ph id=\"ph1\">&lt;xref:System.Data.Odbc.OdbcDataReader&gt;</ph>, and displays the results in the console window.","pos":[3502,3630],"source":" The code executes the command by using a <xref:System.Data.Odbc.OdbcDataReader>, and displays the results in the console window."},{"pos":[3920,3932],"content":"OracleClient","linkify":"OracleClient","nodes":[{"content":"OracleClient","pos":[0,12]}]},{"content":"The code in this example assumes a connection to DEMO.CUSTOMER on an Oracle server.","pos":[3933,4016]},{"content":"You must also add a reference to the System.Data.OracleClient.dll.","pos":[4017,4083]},{"content":"The code returns the data in an <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph>.","pos":[4084,4165],"source":" The code returns the data in an <xref:System.Data.OracleClient.OracleDataReader>."},{"pos":[4462,4487],"content":"Entity Framework examples","linkify":"Entity Framework examples","nodes":[{"content":"Entity Framework examples","pos":[0,25]}]},{"content":"The following code listings demonstrate how to retrieve data from a data source by querying entities in an Entity Data Model (EDM).","pos":[4488,4619]},{"content":"These examples use a model based on the Northwind sample database.","pos":[4620,4686]},{"content":"For more information about Entity Framework, see <bpt id=\"p1\">[</bpt>Entity Framework Overview<ept id=\"p1\">](../../../../docs/framework/data/adonet/ef/overview.md)</ept>.","pos":[4687,4819],"source":" For more information about Entity Framework, see [Entity Framework Overview](../../../../docs/framework/data/adonet/ef/overview.md)."},{"pos":[4825,4841],"content":"LINQ to Entities","linkify":"LINQ to Entities","nodes":[{"content":"LINQ to Entities","pos":[0,16]}]},{"content":"The code in this example uses a LINQ query to return data as Categories objects, which are projected as an anonymous type that contains only the CategoryID and CategoryName properties.","pos":[4842,5026]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>LINQ to Entities Overview<ept id=\"p1\">](../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)</ept>.","pos":[5027,5163],"source":" For more information, see [LINQ to Entities Overview](../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)."},{"pos":[7040,7057],"content":"Typed ObjectQuery","linkify":"Typed ObjectQuery","nodes":[{"content":"Typed ObjectQuery","pos":[0,17]}]},{"content":"The code in this example uses an <ph id=\"ph1\">&lt;xref:System.Data.Objects.ObjectQuery%601&gt;</ph> to return data as Categories objects.","pos":[7058,7171],"source":"The code in this example uses an <xref:System.Data.Objects.ObjectQuery%601> to return data as Categories objects."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Object Queries<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))</ept>.","pos":[7172,7304],"source":" For more information, see [Object Queries](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))."},{"pos":[8503,8515],"content":"EntityClient","linkify":"EntityClient","nodes":[{"content":"EntityClient","pos":[0,12]}]},{"content":"The code in this example uses an <ph id=\"ph1\">&lt;xref:System.Data.EntityClient.EntityCommand&gt;</ph> to execute an Entity SQL query.","pos":[8516,8626],"source":"The code in this example uses an <xref:System.Data.EntityClient.EntityCommand> to execute an Entity SQL query."},{"content":"This query returns a list of records that represent instances of the Categories entity type.","pos":[8627,8719]},{"content":"An <ph id=\"ph1\">&lt;xref:System.Data.EntityClient.EntityDataReader&gt;</ph> is used to access data records in the result set.","pos":[8720,8821],"source":" An <xref:System.Data.EntityClient.EntityDataReader> is used to access data records in the result set."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>EntityClient Provider for the Entity Framework<ept id=\"p1\">](../../../../docs/framework/data/adonet/ef/entityclient-provider-for-the-entity-framework.md)</ept>.","pos":[8822,8990],"source":" For more information, see [EntityClient Provider for the Entity Framework](../../../../docs/framework/data/adonet/ef/entityclient-provider-for-the-entity-framework.md)."},{"pos":[11272,11283],"content":"LINQ to SQL","linkify":"LINQ to SQL","nodes":[{"content":"LINQ to SQL","pos":[0,11]}]},{"content":"The code in this example uses a LINQ query to return data as Categories objects, which are projected as an anonymous type that contains only the CategoryID and CategoryName properties.","pos":[11284,11468]},{"content":"This example is based on the Northwind data context.","pos":[11469,11521]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](../../../../docs/framework/data/adonet/sql/linq/getting-started.md)</ept>.","pos":[11522,11634],"source":" For more information, see [Getting Started](../../../../docs/framework/data/adonet/sql/linq/getting-started.md)."},{"pos":[13697,13705],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[13709,13787],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Overview<ept id=\"p1\">](../../../../docs/framework/data/adonet/ado-net-overview.md)</ept>","source":"[ADO.NET Overview](../../../../docs/framework/data/adonet/ado-net-overview.md)"},{"pos":[13790,13905],"content":"<bpt id=\"p1\">[</bpt>Retrieving and Modifying Data in ADO.NET<ept id=\"p1\">](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)</ept>","source":"[Retrieving and Modifying Data in ADO.NET](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)"},{"pos":[13908,14033],"content":"<bpt id=\"p1\">[</bpt>Creating Data Applications<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/h0y4a0f6(v=vs.120))</ept>","source":"[Creating Data Applications](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/h0y4a0f6(v=vs.120))"},{"pos":[14036,14156],"content":"<bpt id=\"p1\">[</bpt>Querying an Entity Data Model (Entity Framework Tasks)<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/bb738455(v=vs.90))</ept>","source":"[Querying an Entity Data Model (Entity Framework Tasks)](https://docs.microsoft.com/previous-versions/bb738455(v=vs.90))"},{"pos":[14159,14309],"content":"<bpt id=\"p1\">[</bpt>How to: Execute a Query that Returns Anonymous Type Objects<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738512(v=vs.100))</ept>","source":"[How to: Execute a Query that Returns Anonymous Type Objects](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738512(v=vs.100))"},{"pos":[14312,14416],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}