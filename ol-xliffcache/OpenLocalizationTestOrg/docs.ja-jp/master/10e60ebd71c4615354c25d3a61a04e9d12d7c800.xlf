<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ado-net-and-linq-to-sql.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10e60ebd71c4615354c25d3a61a04e9d12d7c800</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\ado-net-and-linq-to-sql.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5d468008cc2999f0204422409b11ab5b5f82482</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fa994e917d759d9c2d3d2ffbef6a07a1b81122a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>ADO.NET and LINQ to SQL</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ADO.NET and LINQ to SQL</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> is part of the <ph id="ph2">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> family of technologies.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is based on services provided by the <ph id="ph1">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> provider model.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can therefore mix <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> code with existing <ph id="ph2">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> applications and migrate current <ph id="ph3">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> solutions to <ph id="ph4">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following illustration provides a high-level view of the relationship.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>LINQ to SQL and ADO.NET<ept id="p1">]</ept><bpt id="p2">(../../../../../../docs/framework/data/adonet/sql/linq/media/dlinq-3.png "</bpt>DLinq_3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Connections</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can supply an existing <ph id="ph1">[!INCLUDE[vstecado](../../../../../../includes/vstecado-md.md)]</ph> connection when you create a <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> <ph id="ph3">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>All operations against the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> (including queries) use this provided connection.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the connection is already open, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> leaves it as is when you are finished with it.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can always access the connection and close it yourself by using the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.Connection%2A&gt;</ph> property, as in the following code:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Transactions</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can supply your <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> with your own database transaction when your application has already initiated the transaction and you want your <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> to be involved.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The preferred method of doing transactions with the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)]</ph> is to use the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By using this approach, you can make distributed transactions that work across databases and other memory-resident resource managers.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Transaction scopes require few resources to start.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>They promote themselves to distributed transactions only when there are multiple connections within the scope of the transaction.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You cannot use this approach for all databases.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the SqlClient connection cannot promote system transactions when it works against a <ph id="ph1">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph> server.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Instead, it automatically enlists to a full, distributed transaction whenever it sees a transaction scope being used.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Direct SQL Commands</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>At times you can encounter situations where the ability of the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> to query or submit changes is insufficient for the specialized task you want to perform.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In these circumstances you can use the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteQuery%2A&gt;</ph> method to issue SQL commands to the database and convert the query results to objects.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, assume that the data for the <ph id="ph1">`Customer`</ph> class is spread over two tables (customer1 and customer2).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following query returns a sequence of <ph id="ph1">`Customer`</ph> objects:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As long as the column names in the tabular results match column properties of your entity class, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> creates your objects out of any SQL query.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteQuery%2A&gt;</ph> method accepts parameters.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code executes a parameterized query:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Parameters are expressed in the query text by using the same curly notation used by <ph id="ph1">`Console.WriteLine()`</ph> and <ph id="ph2">`String.Format()`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String.Format()`</ph> takes the query string you provide and substitutes the curly-braced parameters with generated parameter names such as <ph id="ph2">`@p0`</ph>, <ph id="ph3">`@p1`</ph> â€¦, <ph id="ph4">`@p(n)`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Background Information<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Reuse a Connection Between an ADO.NET Command and a DataContext<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/how-to-reuse-a-connection-between-an-ado-net-command-and-a-datacontext.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>