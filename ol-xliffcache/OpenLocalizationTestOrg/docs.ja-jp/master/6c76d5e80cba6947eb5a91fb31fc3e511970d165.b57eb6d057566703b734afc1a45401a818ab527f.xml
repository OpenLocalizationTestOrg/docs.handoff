{"content":"---\ntitle: About .NET Core\ndescription: Learn about .NET Core.\nauthor: richlander\nms.date: 08/01/2018\n---\n# About .NET Core\n\n.NET Core has the following characteristics:\n\n- **Cross-platform:** Runs on Windows, macOS and Linux [operating systems](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\n- **Consistent across architectures:** Runs your code with the same behavior on multiple architectures, including x64, x86, and ARM.\n- **Command-line tools:**  Includes easy-to-use command-line tools that can be used for local development and in continuous-integration scenarios.\n- **Flexible deployment:** Can be included in your app or installed side-by-side user- or machine-wide. Can be used with [Docker containers](docker/index.md).\n- **Compatible:** .NET Core is compatible with .NET Framework, Xamarin and Mono, via [.NET Standard](../standard/net-standard.md).\n- **Open source:** The .NET Core platform is open source, using MIT and Apache 2 licenses. .NET Core is a [.NET Foundation](https://dotnetfoundation.org/) project.\n- **Supported by Microsoft:** .NET Core is supported by Microsoft, per [.NET Core Support](https://www.microsoft.com/net/core/support/).\n\n## Languages\n\nC#, Visual Basic, and F# languages can be used to write applications and libraries for .NET Core. These languages are or can be integrated into your favorite text editors and IDEs, including [Visual Studio](https://visualstudio.microsoft.com/vs/), [Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp), Sublime Text and Vim. This integration is provided, in part, by the good folks from the [OmniSharp](https://www.omnisharp.net/) and [Ionide](http://ionide.io) projects.\n\n## APIs\n\n.NET Core exposes APIs for many scenarios, a few of which follow:\n\n- Primitive types, such as [bool](../csharp/language-reference/keywords/bool.md) and [int](../csharp/language-reference/keywords/int.md).\n- Collections, such as <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> and <xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWithType>.\n- Utility types, such as <xref:System.Net.Http.HttpClient?displayProperty=nameWithType>, and <xref:System.IO.FileStream?displayProperty=nameWithType>.\n- Data types, such as <xref:System.Data.DataSet?displayProperty=nameWithType>, and [DbSet](https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/).\n- High performance types, such as <xref:System.Numerics.Vector?displayProperty=nameWithType> and [Pipelines](https://devblogs.microsoft.com/dotnet/system-io-pipelines-high-performance-io-in-net/).\n\n.NET Core provides compatibility with .NET Framework and Mono APIs by implementing the [.NET Standard](../standard/net-standard.md) specification.\n\n## Frameworks\n\nMultiple frameworks have been built on top of .NET Core:\n\n- [ASP.NET Core](/aspnet/core/)\n- [Windows 10 Universal Windows Platform (UWP)](https://developer.microsoft.com/windows)\n- [Tizen](https://developer.tizen.org/development/training/.net-application)\n\n## Composition\n\n.NET Core is composed of the following parts:\n\n- The [.NET Core runtime](https://github.com/dotnet/coreclr), which provides a type system, assembly loading, a garbage collector, native interop and other basic services. [.NET Core framework libraries](https://github.com/dotnet/corefx) provide primitive data types, app composition types and fundamental utilities.\n- The [ASP.NET runtime](https://github.com/aspnet/home), which provides a framework for building modern cloud based internet connected applications, such as web apps, IoT apps and mobile backends.\n- The [.NET Core CLI tools](https://github.com/dotnet/cli) and language compilers ([Roslyn](https://github.com/dotnet/roslyn) and [F#](https://github.com/microsoft/visualfsharp)) that enable the .NET Core developer experience.\n- The [dotnet tool](https://github.com/dotnet/core-setup), which is used to launch .NET Core apps and CLI tools. It selects the runtime and hosts the runtime, provides an assembly loading policy and launches apps and tools.\n\nThese components are distributed in the following ways:\n\n- [.NET Core Runtime](https://www.microsoft.com/net/download/dotnet-core/2.1) -- includes the .NET Core runtime and framework libraries.\n- [ASP.NET Core Runtime](https://www.microsoft.com/net/download/dotnet-core/2.1) -- includes ASP.NET Core and .NET Core runtime and framework libraries.\n- [.NET Core SDK](https://www.microsoft.com/net/download/dotnet-core/2.1) -- includes the .NET CLI Tools, ASP.NET Core runtime, and .NET Core runtime and framework.\n\n### Open Source\n\n[.NET Core](https://github.com/dotnet/core) is open source ([MIT license](https://github.com/dotnet/core/blob/master/LICENSE.TXT)) and was contributed to the [.NET Foundation](https://dotnetfoundation.org) by Microsoft in 2014. It is now one of the most active .NET Foundation projects. It can be freely adopted by individuals and companies, including for personal, academic or commercial purposes. Multiple companies use .NET Core as part of apps, tools, new platforms and hosting services. Some of these companies make significant contributions to .NET Core on GitHub and provide guidance on the product direction as part of the [.NET Foundation Technical Steering Group](https://dotnetfoundation.org/blog/tsg-welcome).\n\n### Designed for Adaptability\n\n.NET Core has been built as a very similar but unique product relative to other .NET products. It has been designed to enable broad adaptability to new platforms and workloads. It has several OS and CPU ports available and may be ported to many more.\n\nThe product is broken into several pieces, enabling the various parts to be adapted to new platforms at different times. The runtime and platform-specific foundational libraries must be ported as a unit. Platform-agnostic libraries should work as-is on all platforms, by construction. There is a project bias to reducing platform-specific implementations to increase developer efficiency, preferring platform-neutral C# code whenever an algorithm or API can be implemented in-full or in-part that way.\n\nPeople commonly ask how .NET Core is implemented in order to support multiple operating systems. They typically ask if there are separate implementations or if [conditional compilation](https://en.wikipedia.org/wiki/Conditional_compilation) is used. It's both, with a strong bias towards conditional compilation.\n\nYou can see in the chart below that the vast majority of [CoreFX](https://github.com/dotnet/corefx) is platform-neutral code that is shared across all platforms. Platform-neutral code can be implemented as a single portable assembly that is used on all platforms.\n\n![CoreFX: Lines of Code per Platform](../images/corefx-platforms-loc.png)\n\nWindows and Unix implementations are similar in size. Windows has a larger implementation since CoreFX implements some Windows-only features, such as [Microsoft.Win32.Registry](https://github.com/dotnet/corefx/tree/master/src/Microsoft.Win32.Registry) but does not yet implement many Unix-only concepts. You will also see that the majority of the Linux and macOS implementations are shared across a Unix implementation, while the Linux- and macOS-specific implementations are roughly similar in size.\n\nThere are a mix of platform-specific and platform-neutral libraries in .NET Core. You can see the pattern in a few examples:\n\n- [CoreCLR](https://github.com/dotnet/coreclr) is platform-specific. It builds on top of OS subsystems, like the memory manager and thread scheduler.\n- [System.IO](https://github.com/dotnet/corefx/tree/master/src/System.IO) and [System.Security.Cryptography.Algorithms](https://github.com/dotnet/corefx/tree/master/src/System.Security.Cryptography.Algorithms) are platform-specific, given that storage and cryptography APIs are different on each OS.\n- [System.Collections](https://github.com/dotnet/corefx/tree/master/src/System.Collections) and [System.Linq](https://github.com/dotnet/corefx/tree/master/src/System.Linq) are platform-neutral, given that they create and operate over data structures.\n\n## Comparisons to other .NET implementations\n\nIt is perhaps easiest to understand the size and shape of .NET Core by comparing it to existing .NET implementations.\n\n### Comparison with .NET Framework\n\n.NET was first announced by Microsoft in 2000 and then evolved from there. The .NET Framework has been the primary .NET implementation produced by Microsoft during that nearly two decade period.\n\nThe major differences between .NET Core and the .NET Framework:\n\n- **App-models** -- .NET Core does not support all the .NET Framework app-models. In particular, it doesn't support ASP.NET Web Forms and ASP.NET MVC, but it supports ASP.NET Core MVC. It was announced that [.NET Core 3 will support WPF and Windows Forms](https://devblogs.microsoft.com/dotnet/net-core-3-and-support-for-windows-desktop-applications/).\n- **APIs** -- .NET Core contains a large subset of .NET Framework Base Class Library, with a different factoring (assembly names are different; members exposed on types differ in key cases). These differences require changes to port source to .NET Core in some cases (see [microsoft/dotnet-apiport](https://github.com/microsoft/dotnet-apiport)). .NET Core implements the [.NET Standard](../standard/net-standard.md) API specification.\n- **Subsystems** -- .NET Core implements a subset of the subsystems in the .NET Framework, with the goal of a simpler implementation and programming model. For example, Code Access Security (CAS) is not supported, while reflection is supported.\n- **Platforms** -- The .NET Framework supports Windows and Windows Server while .NET Core also supports macOS and Linux.\n- **Open Source** -- .NET Core is open source, while a [read-only subset of the .NET Framework](https://github.com/microsoft/referencesource) is open source.\n\nWhile .NET Core is unique and has significant differences to the .NET Framework and other .NET implementations, it is straightforward to share code between these implementations, using either source or binary sharing techniques.\n\n### Comparison with Mono\n\n[Mono](https://www.mono-project.com/) is the original cross-platform and [open source](https://github.com/mono/mono) .NET implementation, first shipping in 2004. It can be thought of as a community clone of the .NET Framework. The Mono project team relied on the open [.NET standards](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md) (notably ECMA 335) published by Microsoft in order to provide a compatible implementation.\n\nThe major differences between .NET Core and Mono:\n\n- **App-models** -- Mono supports a subset of the .NET Framework app-models (for example, Windows Forms) and some additional ones (for example, [Xamarin.iOS](https://www.xamarin.com/platform)) through the Xamarin product. .NET Core doesn't support these.\n- **APIs** -- Mono supports a [large subset](http://docs.go-mono.com/?link=root%3a%2fclasslib) of the .NET Framework APIs, using the same assembly names and factoring.\n- **Platforms** -- Mono supports many platforms and CPUs.\n- **Open Source** -- Mono and .NET Core both use the MIT license and are .NET Foundation projects.\n- **Focus** -- The primary focus of Mono in recent years is mobile platforms, while .NET Core is focused on cloud and desktop workloads.\n","nodes":[{"pos":[4,101],"embed":true,"restype":"x-metadata","content":"title: About .NET Core\ndescription: Learn about .NET Core.\nauthor: richlander\nms.date: 08/01/2018","nodes":[{"content":"About .NET Core","nodes":[{"pos":[0,15],"content":"About .NET Core","nodes":[{"content":"About .NET Core","pos":[0,15]}]}],"path":["title"],"nosxs":false},{"content":"Learn about .NET Core.","nodes":[{"pos":[0,22],"content":"Learn about .NET Core.","nodes":[{"content":"Learn about .NET Core.","pos":[0,22]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[108,123],"content":"About .NET Core","linkify":"About .NET Core","nodes":[{"content":"About .NET Core","pos":[0,15]}]},{"content":".NET Core has the following characteristics:","pos":[125,169]},{"pos":[173,313],"content":"<bpt id=\"p1\">**</bpt>Cross-platform:<ept id=\"p1\">**</ept> Runs on Windows, macOS and Linux <bpt id=\"p2\">[</bpt>operating systems<ept id=\"p2\">](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)</ept>.","source":"**Cross-platform:** Runs on Windows, macOS and Linux [operating systems](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)."},{"pos":[316,446],"content":"<bpt id=\"p1\">**</bpt>Consistent across architectures:<ept id=\"p1\">**</ept> Runs your code with the same behavior on multiple architectures, including x64, x86, and ARM.","source":"**Consistent across architectures:** Runs your code with the same behavior on multiple architectures, including x64, x86, and ARM."},{"pos":[449,593],"content":"<bpt id=\"p1\">**</bpt>Command-line tools:<ept id=\"p1\">**</ept>  Includes easy-to-use command-line tools that can be used for local development and in continuous-integration scenarios.","source":"**Command-line tools:**  Includes easy-to-use command-line tools that can be used for local development and in continuous-integration scenarios."},{"content":"<bpt id=\"p1\">**</bpt>Flexible deployment:<ept id=\"p1\">**</ept> Can be included in your app or installed side-by-side user- or machine-wide.","pos":[596,697],"source":"**Flexible deployment:** Can be included in your app or installed side-by-side user- or machine-wide."},{"content":"Can be used with <bpt id=\"p1\">[</bpt>Docker containers<ept id=\"p1\">](docker/index.md)</ept>.","pos":[698,752],"source":" Can be used with [Docker containers](docker/index.md)."},{"pos":[755,883],"content":"<bpt id=\"p1\">**</bpt>Compatible:<ept id=\"p1\">**</ept> .NET Core is compatible with .NET Framework, Xamarin and Mono, via <bpt id=\"p2\">[</bpt>.NET Standard<ept id=\"p2\">](../standard/net-standard.md)</ept>.","source":"**Compatible:** .NET Core is compatible with .NET Framework, Xamarin and Mono, via [.NET Standard](../standard/net-standard.md)."},{"content":"<bpt id=\"p1\">**</bpt>Open source:<ept id=\"p1\">**</ept> The .NET Core platform is open source, using MIT and Apache 2 licenses.","pos":[886,974],"source":"**Open source:** The .NET Core platform is open source, using MIT and Apache 2 licenses."},{"content":".NET Core is a <bpt id=\"p1\">[</bpt>.NET Foundation<ept id=\"p1\">](https://dotnetfoundation.org/)</ept> project.","pos":[975,1047],"source":" .NET Core is a [.NET Foundation](https://dotnetfoundation.org/) project."},{"pos":[1050,1184],"content":"<bpt id=\"p1\">**</bpt>Supported by Microsoft:<ept id=\"p1\">**</ept> .NET Core is supported by Microsoft, per <bpt id=\"p2\">[</bpt>.NET Core Support<ept id=\"p2\">](https://www.microsoft.com/net/core/support/)</ept>.","source":"**Supported by Microsoft:** .NET Core is supported by Microsoft, per [.NET Core Support](https://www.microsoft.com/net/core/support/)."},{"pos":[1189,1198],"content":"Languages","linkify":"Languages","nodes":[{"content":"Languages","pos":[0,9]}]},{"content":"C#, Visual Basic, and F# languages can be used to write applications and libraries for .NET Core.","pos":[1200,1297]},{"content":"These languages are or can be integrated into your favorite text editors and IDEs, including <bpt id=\"p1\">[</bpt>Visual Studio<ept id=\"p1\">](https://visualstudio.microsoft.com/vs/)</ept>, <bpt id=\"p2\">[</bpt>Visual Studio Code<ept id=\"p2\">](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp)</ept>, Sublime Text and Vim.","pos":[1298,1561],"source":" These languages are or can be integrated into your favorite text editors and IDEs, including [Visual Studio](https://visualstudio.microsoft.com/vs/), [Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp), Sublime Text and Vim."},{"content":"This integration is provided, in part, by the good folks from the <bpt id=\"p1\">[</bpt>OmniSharp<ept id=\"p1\">](https://www.omnisharp.net/)</ept> and <bpt id=\"p2\">[</bpt>Ionide<ept id=\"p2\">](http://ionide.io)</ept> projects.","pos":[1562,1708],"source":" This integration is provided, in part, by the good folks from the [OmniSharp](https://www.omnisharp.net/) and [Ionide](http://ionide.io) projects."},{"pos":[1713,1717],"content":"APIs","linkify":"APIs","nodes":[{"content":"APIs","pos":[0,4]}]},{"content":".NET Core exposes APIs for many scenarios, a few of which follow:","pos":[1719,1784]},{"pos":[1788,1923],"content":"Primitive types, such as <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../csharp/language-reference/keywords/bool.md)</ept> and <bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../csharp/language-reference/keywords/int.md)</ept>.","source":"Primitive types, such as [bool](../csharp/language-reference/keywords/bool.md) and [int](../csharp/language-reference/keywords/int.md)."},{"pos":[1926,2101],"content":"Collections, such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWithType&gt;</ph>.","source":"Collections, such as <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> and <xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWithType>."},{"pos":[2104,2252],"content":"Utility types, such as <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph2\">&lt;xref:System.IO.FileStream?displayProperty=nameWithType&gt;</ph>.","source":"Utility types, such as <xref:System.Net.Http.HttpClient?displayProperty=nameWithType>, and <xref:System.IO.FileStream?displayProperty=nameWithType>."},{"pos":[2255,2407],"content":"Data types, such as <ph id=\"ph1\">&lt;xref:System.Data.DataSet?displayProperty=nameWithType&gt;</ph>, and <bpt id=\"p1\">[</bpt>DbSet<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/)</ept>.","source":"Data types, such as <xref:System.Data.DataSet?displayProperty=nameWithType>, and [DbSet](https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/)."},{"pos":[2410,2604],"content":"High performance types, such as <ph id=\"ph1\">&lt;xref:System.Numerics.Vector?displayProperty=nameWithType&gt;</ph> and <bpt id=\"p1\">[</bpt>Pipelines<ept id=\"p1\">](https://devblogs.microsoft.com/dotnet/system-io-pipelines-high-performance-io-in-net/)</ept>.","source":"High performance types, such as <xref:System.Numerics.Vector?displayProperty=nameWithType> and [Pipelines](https://devblogs.microsoft.com/dotnet/system-io-pipelines-high-performance-io-in-net/)."},{"pos":[2606,2752],"content":".NET Core provides compatibility with .NET Framework and Mono APIs by implementing the <bpt id=\"p1\">[</bpt>.NET Standard<ept id=\"p1\">](../standard/net-standard.md)</ept> specification.","source":".NET Core provides compatibility with .NET Framework and Mono APIs by implementing the [.NET Standard](../standard/net-standard.md) specification."},{"pos":[2757,2767],"content":"Frameworks","linkify":"Frameworks","nodes":[{"content":"Frameworks","pos":[0,10]}]},{"content":"Multiple frameworks have been built on top of .NET Core:","pos":[2769,2825]},{"pos":[2829,2858],"content":"<bpt id=\"p1\">[</bpt>ASP.NET Core<ept id=\"p1\">](/aspnet/core/)</ept>","source":"[ASP.NET Core](/aspnet/core/)"},{"pos":[2861,2947],"content":"<bpt id=\"p1\">[</bpt>Windows 10 Universal Windows Platform (UWP)<ept id=\"p1\">](https://developer.microsoft.com/windows)</ept>","source":"[Windows 10 Universal Windows Platform (UWP)](https://developer.microsoft.com/windows)"},{"pos":[2950,3024],"content":"<bpt id=\"p1\">[</bpt>Tizen<ept id=\"p1\">](https://developer.tizen.org/development/training/.net-application)</ept>","source":"[Tizen](https://developer.tizen.org/development/training/.net-application)"},{"pos":[3029,3040],"content":"Composition","linkify":"Composition","nodes":[{"content":"Composition","pos":[0,11]}]},{"content":".NET Core is composed of the following parts:","pos":[3042,3087]},{"content":"The <bpt id=\"p1\">[</bpt>.NET Core runtime<ept id=\"p1\">](https://github.com/dotnet/coreclr)</ept>, which provides a type system, assembly loading, a garbage collector, native interop and other basic services.","pos":[3091,3260],"source":"The [.NET Core runtime](https://github.com/dotnet/coreclr), which provides a type system, assembly loading, a garbage collector, native interop and other basic services."},{"content":"<bpt id=\"p1\">[</bpt>.NET Core framework libraries<ept id=\"p1\">](https://github.com/dotnet/corefx)</ept> provide primitive data types, app composition types and fundamental utilities.","pos":[3261,3405],"source":"[.NET Core framework libraries](https://github.com/dotnet/corefx) provide primitive data types, app composition types and fundamental utilities."},{"pos":[3408,3602],"content":"The <bpt id=\"p1\">[</bpt>ASP.NET runtime<ept id=\"p1\">](https://github.com/aspnet/home)</ept>, which provides a framework for building modern cloud based internet connected applications, such as web apps, IoT apps and mobile backends.","source":"The [ASP.NET runtime](https://github.com/aspnet/home), which provides a framework for building modern cloud based internet connected applications, such as web apps, IoT apps and mobile backends."},{"pos":[3605,3829],"content":"The <bpt id=\"p1\">[</bpt>.NET Core CLI tools<ept id=\"p1\">](https://github.com/dotnet/cli)</ept> and language compilers (<bpt id=\"p2\">[</bpt>Roslyn<ept id=\"p2\">](https://github.com/dotnet/roslyn)</ept> and <bpt id=\"p3\">[</bpt>F#<ept id=\"p3\">](https://github.com/microsoft/visualfsharp)</ept>) that enable the .NET Core developer experience.","source":"The [.NET Core CLI tools](https://github.com/dotnet/cli) and language compilers ([Roslyn](https://github.com/dotnet/roslyn) and [F#](https://github.com/microsoft/visualfsharp)) that enable the .NET Core developer experience."},{"content":"The <bpt id=\"p1\">[</bpt>dotnet tool<ept id=\"p1\">](https://github.com/dotnet/core-setup)</ept>, which is used to launch .NET Core apps and CLI tools.","pos":[3832,3942],"source":"The [dotnet tool](https://github.com/dotnet/core-setup), which is used to launch .NET Core apps and CLI tools."},{"content":"It selects the runtime and hosts the runtime, provides an assembly loading policy and launches apps and tools.","pos":[3943,4053]},{"content":"These components are distributed in the following ways:","pos":[4055,4110]},{"pos":[4114,4248],"content":"<bpt id=\"p1\">[</bpt>.NET Core Runtime<ept id=\"p1\">](https://www.microsoft.com/net/download/dotnet-core/2.1)</ept> -- includes the .NET Core runtime and framework libraries.","source":"[.NET Core Runtime](https://www.microsoft.com/net/download/dotnet-core/2.1) -- includes the .NET Core runtime and framework libraries."},{"pos":[4251,4401],"content":"<bpt id=\"p1\">[</bpt>ASP.NET Core Runtime<ept id=\"p1\">](https://www.microsoft.com/net/download/dotnet-core/2.1)</ept> -- includes ASP.NET Core and .NET Core runtime and framework libraries.","source":"[ASP.NET Core Runtime](https://www.microsoft.com/net/download/dotnet-core/2.1) -- includes ASP.NET Core and .NET Core runtime and framework libraries."},{"pos":[4404,4566],"content":"<bpt id=\"p1\">[</bpt>.NET Core SDK<ept id=\"p1\">](https://www.microsoft.com/net/download/dotnet-core/2.1)</ept> -- includes the .NET CLI Tools, ASP.NET Core runtime, and .NET Core runtime and framework.","source":"[.NET Core SDK](https://www.microsoft.com/net/download/dotnet-core/2.1) -- includes the .NET CLI Tools, ASP.NET Core runtime, and .NET Core runtime and framework."},{"pos":[4572,4583],"content":"Open Source","linkify":"Open Source","nodes":[{"content":"Open Source","pos":[0,11]}]},{"content":"<bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](https://github.com/dotnet/core)</ept> is open source (<bpt id=\"p2\">[</bpt>MIT license<ept id=\"p2\">](https://github.com/dotnet/core/blob/master/LICENSE.TXT)</ept>) and was contributed to the <bpt id=\"p3\">[</bpt>.NET Foundation<ept id=\"p3\">](https://dotnetfoundation.org)</ept> by Microsoft in 2014.","pos":[4585,4812],"source":"[.NET Core](https://github.com/dotnet/core) is open source ([MIT license](https://github.com/dotnet/core/blob/master/LICENSE.TXT)) and was contributed to the [.NET Foundation](https://dotnetfoundation.org) by Microsoft in 2014."},{"content":"It is now one of the most active .NET Foundation projects.","pos":[4813,4871]},{"content":"It can be freely adopted by individuals and companies, including for personal, academic or commercial purposes.","pos":[4872,4983]},{"content":"Multiple companies use .NET Core as part of apps, tools, new platforms and hosting services.","pos":[4984,5076]},{"content":"Some of these companies make significant contributions to .NET Core on GitHub and provide guidance on the product direction as part of the <bpt id=\"p1\">[</bpt>.NET Foundation Technical Steering Group<ept id=\"p1\">](https://dotnetfoundation.org/blog/tsg-welcome)</ept>.","pos":[5077,5306],"source":" Some of these companies make significant contributions to .NET Core on GitHub and provide guidance on the product direction as part of the [.NET Foundation Technical Steering Group](https://dotnetfoundation.org/blog/tsg-welcome)."},{"pos":[5312,5337],"content":"Designed for Adaptability","linkify":"Designed for Adaptability","nodes":[{"content":"Designed for Adaptability","pos":[0,25]}]},{"content":".NET Core has been built as a very similar but unique product relative to other .NET products.","pos":[5339,5433]},{"content":"It has been designed to enable broad adaptability to new platforms and workloads.","pos":[5434,5515]},{"content":"It has several OS and CPU ports available and may be ported to many more.","pos":[5516,5589]},{"content":"The product is broken into several pieces, enabling the various parts to be adapted to new platforms at different times.","pos":[5591,5711]},{"content":"The runtime and platform-specific foundational libraries must be ported as a unit.","pos":[5712,5794]},{"content":"Platform-agnostic libraries should work as-is on all platforms, by construction.","pos":[5795,5875]},{"content":"There is a project bias to reducing platform-specific implementations to increase developer efficiency, preferring platform-neutral C# code whenever an algorithm or API can be implemented in-full or in-part that way.","pos":[5876,6092]},{"content":"People commonly ask how .NET Core is implemented in order to support multiple operating systems.","pos":[6094,6190]},{"content":"They typically ask if there are separate implementations or if <bpt id=\"p1\">[</bpt>conditional compilation<ept id=\"p1\">](https://en.wikipedia.org/wiki/Conditional_compilation)</ept> is used.","pos":[6191,6343],"source":" They typically ask if there are separate implementations or if [conditional compilation](https://en.wikipedia.org/wiki/Conditional_compilation) is used."},{"content":"It's both, with a strong bias towards conditional compilation.","pos":[6344,6406]},{"content":"You can see in the chart below that the vast majority of <bpt id=\"p1\">[</bpt>CoreFX<ept id=\"p1\">](https://github.com/dotnet/corefx)</ept> is platform-neutral code that is shared across all platforms.","pos":[6408,6569],"source":"You can see in the chart below that the vast majority of [CoreFX](https://github.com/dotnet/corefx) is platform-neutral code that is shared across all platforms."},{"content":"Platform-neutral code can be implemented as a single portable assembly that is used on all platforms.","pos":[6570,6671]},{"content":"CoreFX: Lines of Code per Platform","pos":[6675,6709]},{"content":"Windows and Unix implementations are similar in size.","pos":[6748,6801]},{"content":"Windows has a larger implementation since CoreFX implements some Windows-only features, such as <bpt id=\"p1\">[</bpt>Microsoft.Win32.Registry<ept id=\"p1\">](https://github.com/dotnet/corefx/tree/master/src/Microsoft.Win32.Registry)</ept> but does not yet implement many Unix-only concepts.","pos":[6802,7051],"source":" Windows has a larger implementation since CoreFX implements some Windows-only features, such as [Microsoft.Win32.Registry](https://github.com/dotnet/corefx/tree/master/src/Microsoft.Win32.Registry) but does not yet implement many Unix-only concepts."},{"content":"You will also see that the majority of the Linux and macOS implementations are shared across a Unix implementation, while the Linux- and macOS-specific implementations are roughly similar in size.","pos":[7052,7248]},{"content":"There are a mix of platform-specific and platform-neutral libraries in .NET Core.","pos":[7250,7331]},{"content":"You can see the pattern in a few examples:","pos":[7332,7374]},{"content":"<bpt id=\"p1\">[</bpt>CoreCLR<ept id=\"p1\">](https://github.com/dotnet/coreclr)</ept> is platform-specific.","pos":[7378,7444],"source":"[CoreCLR](https://github.com/dotnet/coreclr) is platform-specific."},{"content":"It builds on top of OS subsystems, like the memory manager and thread scheduler.","pos":[7445,7525]},{"pos":[7528,7825],"content":"<bpt id=\"p1\">[</bpt>System.IO<ept id=\"p1\">](https://github.com/dotnet/corefx/tree/master/src/System.IO)</ept> and <bpt id=\"p2\">[</bpt>System.Security.Cryptography.Algorithms<ept id=\"p2\">](https://github.com/dotnet/corefx/tree/master/src/System.Security.Cryptography.Algorithms)</ept> are platform-specific, given that storage and cryptography APIs are different on each OS.","source":"[System.IO](https://github.com/dotnet/corefx/tree/master/src/System.IO) and [System.Security.Cryptography.Algorithms](https://github.com/dotnet/corefx/tree/master/src/System.Security.Cryptography.Algorithms) are platform-specific, given that storage and cryptography APIs are different on each OS."},{"pos":[7828,8076],"content":"<bpt id=\"p1\">[</bpt>System.Collections<ept id=\"p1\">](https://github.com/dotnet/corefx/tree/master/src/System.Collections)</ept> and <bpt id=\"p2\">[</bpt>System.Linq<ept id=\"p2\">](https://github.com/dotnet/corefx/tree/master/src/System.Linq)</ept> are platform-neutral, given that they create and operate over data structures.","source":"[System.Collections](https://github.com/dotnet/corefx/tree/master/src/System.Collections) and [System.Linq](https://github.com/dotnet/corefx/tree/master/src/System.Linq) are platform-neutral, given that they create and operate over data structures."},{"pos":[8081,8122],"content":"Comparisons to other .NET implementations","linkify":"Comparisons to other .NET implementations","nodes":[{"content":"Comparisons to other .NET implementations","pos":[0,41]}]},{"content":"It is perhaps easiest to understand the size and shape of .NET Core by comparing it to existing .NET implementations.","pos":[8124,8241]},{"pos":[8247,8277],"content":"Comparison with .NET Framework","linkify":"Comparison with .NET Framework","nodes":[{"content":"Comparison with .NET Framework","pos":[0,30]}]},{"content":".NET was first announced by Microsoft in 2000 and then evolved from there.","pos":[8279,8353]},{"content":"The .NET Framework has been the primary .NET implementation produced by Microsoft during that nearly two decade period.","pos":[8354,8473]},{"content":"The major differences between .NET Core and the .NET Framework:","pos":[8475,8538]},{"content":"<bpt id=\"p1\">**</bpt>App-models<ept id=\"p1\">**</ept> -- .NET Core does not support all the .NET Framework app-models.","pos":[8542,8621],"source":"**App-models** -- .NET Core does not support all the .NET Framework app-models."},{"content":"In particular, it doesn't support ASP.NET Web Forms and ASP.NET MVC, but it supports ASP.NET Core MVC.","pos":[8622,8724]},{"content":"It was announced that <bpt id=\"p1\">[</bpt>.NET Core 3 will support WPF and Windows Forms<ept id=\"p1\">](https://devblogs.microsoft.com/dotnet/net-core-3-and-support-for-windows-desktop-applications/)</ept>.","pos":[8725,8892],"source":" It was announced that [.NET Core 3 will support WPF and Windows Forms](https://devblogs.microsoft.com/dotnet/net-core-3-and-support-for-windows-desktop-applications/)."},{"content":"<bpt id=\"p1\">**</bpt>APIs<ept id=\"p1\">**</ept> -- .NET Core contains a large subset of .NET Framework Base Class Library, with a different factoring (assembly names are different; members exposed on types differ in key cases).","pos":[8895,9083],"source":"**APIs** -- .NET Core contains a large subset of .NET Framework Base Class Library, with a different factoring (assembly names are different; members exposed on types differ in key cases)."},{"content":"These differences require changes to port source to .NET Core in some cases (see <bpt id=\"p1\">[</bpt>microsoft/dotnet-apiport<ept id=\"p1\">](https://github.com/microsoft/dotnet-apiport)</ept>).","pos":[9084,9238],"source":" These differences require changes to port source to .NET Core in some cases (see [microsoft/dotnet-apiport](https://github.com/microsoft/dotnet-apiport))."},{"content":".NET Core implements the <bpt id=\"p1\">[</bpt>.NET Standard<ept id=\"p1\">](../standard/net-standard.md)</ept> API specification.","pos":[9239,9327],"source":" .NET Core implements the [.NET Standard](../standard/net-standard.md) API specification."},{"content":"<bpt id=\"p1\">**</bpt>Subsystems<ept id=\"p1\">**</ept> -- .NET Core implements a subset of the subsystems in the .NET Framework, with the goal of a simpler implementation and programming model.","pos":[9330,9483],"source":"**Subsystems** -- .NET Core implements a subset of the subsystems in the .NET Framework, with the goal of a simpler implementation and programming model."},{"content":"For example, Code Access Security (CAS) is not supported, while reflection is supported.","pos":[9484,9572]},{"pos":[9575,9693],"content":"<bpt id=\"p1\">**</bpt>Platforms<ept id=\"p1\">**</ept> -- The .NET Framework supports Windows and Windows Server while .NET Core also supports macOS and Linux.","source":"**Platforms** -- The .NET Framework supports Windows and Windows Server while .NET Core also supports macOS and Linux."},{"pos":[9696,9851],"content":"<bpt id=\"p1\">**</bpt>Open Source<ept id=\"p1\">**</ept> -- .NET Core is open source, while a <bpt id=\"p2\">[</bpt>read-only subset of the .NET Framework<ept id=\"p2\">](https://github.com/microsoft/referencesource)</ept> is open source.","source":"**Open Source** -- .NET Core is open source, while a [read-only subset of the .NET Framework](https://github.com/microsoft/referencesource) is open source."},{"content":"While .NET Core is unique and has significant differences to the .NET Framework and other .NET implementations, it is straightforward to share code between these implementations, using either source or binary sharing techniques.","pos":[9853,10081]},{"pos":[10087,10107],"content":"Comparison with Mono","linkify":"Comparison with Mono","nodes":[{"content":"Comparison with Mono","pos":[0,20]}]},{"content":"<bpt id=\"p1\">[</bpt>Mono<ept id=\"p1\">](https://www.mono-project.com/)</ept> is the original cross-platform and <bpt id=\"p2\">[</bpt>open source<ept id=\"p2\">](https://github.com/mono/mono)</ept> .NET implementation, first shipping in 2004.","pos":[10109,10270],"source":"[Mono](https://www.mono-project.com/) is the original cross-platform and [open source](https://github.com/mono/mono) .NET implementation, first shipping in 2004."},{"content":"It can be thought of as a community clone of the .NET Framework.","pos":[10271,10335]},{"content":"The Mono project team relied on the open <bpt id=\"p1\">[</bpt>.NET standards<ept id=\"p1\">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept> (notably ECMA 335) published by Microsoft in order to provide a compatible implementation.","pos":[10336,10578],"source":" The Mono project team relied on the open [.NET standards](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md) (notably ECMA 335) published by Microsoft in order to provide a compatible implementation."},{"content":"The major differences between .NET Core and Mono:","pos":[10580,10629]},{"content":"<bpt id=\"p1\">**</bpt>App-models<ept id=\"p1\">**</ept> -- Mono supports a subset of the .NET Framework app-models (for example, Windows Forms) and some additional ones (for example, <bpt id=\"p2\">[</bpt>Xamarin.iOS<ept id=\"p2\">](https://www.xamarin.com/platform)</ept>) through the Xamarin product.","pos":[10633,10852],"source":"**App-models** -- Mono supports a subset of the .NET Framework app-models (for example, Windows Forms) and some additional ones (for example, [Xamarin.iOS](https://www.xamarin.com/platform)) through the Xamarin product."},{"content":".NET Core doesn't support these.","pos":[10853,10885]},{"pos":[10888,11053],"content":"<bpt id=\"p1\">**</bpt>APIs<ept id=\"p1\">**</ept> -- Mono supports a <bpt id=\"p2\">[</bpt>large subset<ept id=\"p2\">](http://docs.go-mono.com/?link=root%3a%2fclasslib)</ept> of the .NET Framework APIs, using the same assembly names and factoring.","source":"**APIs** -- Mono supports a [large subset](http://docs.go-mono.com/?link=root%3a%2fclasslib) of the .NET Framework APIs, using the same assembly names and factoring."},{"pos":[11056,11111],"content":"<bpt id=\"p1\">**</bpt>Platforms<ept id=\"p1\">**</ept> -- Mono supports many platforms and CPUs.","source":"**Platforms** -- Mono supports many platforms and CPUs."},{"pos":[11114,11210],"content":"<bpt id=\"p1\">**</bpt>Open Source<ept id=\"p1\">**</ept> -- Mono and .NET Core both use the MIT license and are .NET Foundation projects.","source":"**Open Source** -- Mono and .NET Core both use the MIT license and are .NET Foundation projects."},{"pos":[11213,11347],"content":"<bpt id=\"p1\">**</bpt>Focus<ept id=\"p1\">**</ept> -- The primary focus of Mono in recent years is mobile platforms, while .NET Core is focused on cloud and desktop workloads.","source":"**Focus** -- The primary focus of Mono in recent years is mobile platforms, while .NET Core is focused on cloud and desktop workloads."}]}