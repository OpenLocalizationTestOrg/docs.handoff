{"content":"---\ntitle: \"Extending Metadata Using Attributes\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"metadata, extending\"\n  - \"attributes [.NET Framework], metadata\"\n  - \"elements [.NET Framework], attributes\"\n  - \"common language runtime, attributes\"\n  - \"annotating programming elements\"\n  - \"keyword-like descriptive declarations\"\n  - \"runtime, attributes\"\n  - \"extending metadata\"\nms.assetid: 30386922-1e00-4602-9ebf-526b271a8b87\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Extending Metadata Using Attributes\nThe common language runtime allows you to add keyword-like descriptive declarations, called attributes, to annotate programming elements such as types, fields, methods, and properties. When you compile your code for the runtime, it is converted into Microsoft intermediate language (MSIL) and placed inside a portable executable (PE) file along with metadata generated by the compiler. Attributes allow you to place extra descriptive information into metadata that can be extracted using runtime reflection services. The compiler creates attributes when you declare instances of special classes that derive from <xref:System.Attribute?displayProperty=nameWithType>.  \n  \n The .NET Framework uses attributes for a variety of reasons and to address a number of issues. Attributes describe how to serialize data, specify characteristics that are used to enforce security, and limit optimizations by the just-in-time (JIT) compiler so the code remains easy to debug. Attributes can also record the name of a file or the author of code, or control the visibility of controls and members during forms development.  \n  \n## Related Topics  \n  \n|Title|Description|  \n|-----------|-----------------|  \n|[Applying Attributes](../../../docs/standard/attributes/applying-attributes.md)|Describes how to apply an attribute to an element of your code.|  \n|[Writing Custom Attributes](../../../docs/standard/attributes/writing-custom-attributes.md)|Describes how to design custom attribute classes.|  \n|[Retrieving Information Stored in Attributes](../../../docs/standard/attributes/retrieving-information-stored-in-attributes.md)|Describes how to retrieve custom attributes for code that is loaded into the execution context.|  \n|[Metadata and Self-Describing Components](../../../docs/standard/metadata-and-self-describing-components.md)|Provides an overview of metadata and describes how it is implemented in a .NET Framework portable executable (PE) file.|  \n|[How to: Load Assemblies into the Reflection-Only Context](../../../docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)|Explains how to retrieve custom attribute information in the reflection-only context.|  \n  \n## Reference  \n <xref:System.Attribute?displayProperty=nameWithType>\n","nodes":[{"pos":[4,501],"embed":true,"restype":"x-metadata","content":"title: \"Extending Metadata Using Attributes\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"metadata, extending\"\n  - \"attributes [.NET Framework], metadata\"\n  - \"elements [.NET Framework], attributes\"\n  - \"common language runtime, attributes\"\n  - \"annotating programming elements\"\n  - \"keyword-like descriptive declarations\"\n  - \"runtime, attributes\"\n  - \"extending metadata\"\nms.assetid: 30386922-1e00-4602-9ebf-526b271a8b87\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Extending Metadata Using Attributes","nodes":[{"pos":[0,35],"content":"Extending Metadata Using Attributes","nodes":[{"content":"Extending Metadata Using Attributes","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[508,543],"content":"Extending Metadata Using Attributes","linkify":"Extending Metadata Using Attributes","nodes":[{"content":"Extending Metadata Using Attributes","pos":[0,35]}]},{"content":"The common language runtime allows you to add keyword-like descriptive declarations, called attributes, to annotate programming elements such as types, fields, methods, and properties.","pos":[544,728]},{"content":"When you compile your code for the runtime, it is converted into Microsoft intermediate language (MSIL) and placed inside a portable executable (PE) file along with metadata generated by the compiler.","pos":[729,929]},{"content":"Attributes allow you to place extra descriptive information into metadata that can be extracted using runtime reflection services.","pos":[930,1060]},{"content":"The compiler creates attributes when you declare instances of special classes that derive from <ph id=\"ph1\">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph>.","pos":[1061,1209],"source":" The compiler creates attributes when you declare instances of special classes that derive from <xref:System.Attribute?displayProperty=nameWithType>."},{"content":"The .NET Framework uses attributes for a variety of reasons and to address a number of issues.","pos":[1216,1310]},{"content":"Attributes describe how to serialize data, specify characteristics that are used to enforce security, and limit optimizations by the just-in-time (JIT) compiler so the code remains easy to debug.","pos":[1311,1506]},{"content":"Attributes can also record the name of a file or the author of code, or control the visibility of controls and members during forms development.","pos":[1507,1651]},{"pos":[1660,1674],"content":"Related Topics","linkify":"Related Topics","nodes":[{"content":"Related Topics","pos":[0,14]}]},{"content":"Title","pos":[1681,1686]},{"content":"Description","pos":[1687,1698]},{"pos":[1737,1816],"content":"<bpt id=\"p1\">[</bpt>Applying Attributes<ept id=\"p1\">](../../../docs/standard/attributes/applying-attributes.md)</ept>","source":"[Applying Attributes](../../../docs/standard/attributes/applying-attributes.md)"},{"content":"Describes how to apply an attribute to an element of your code.","pos":[1817,1880]},{"pos":[1885,1976],"content":"<bpt id=\"p1\">[</bpt>Writing Custom Attributes<ept id=\"p1\">](../../../docs/standard/attributes/writing-custom-attributes.md)</ept>","source":"[Writing Custom Attributes](../../../docs/standard/attributes/writing-custom-attributes.md)"},{"content":"Describes how to design custom attribute classes.","pos":[1977,2026]},{"pos":[2031,2158],"content":"<bpt id=\"p1\">[</bpt>Retrieving Information Stored in Attributes<ept id=\"p1\">](../../../docs/standard/attributes/retrieving-information-stored-in-attributes.md)</ept>","source":"[Retrieving Information Stored in Attributes](../../../docs/standard/attributes/retrieving-information-stored-in-attributes.md)"},{"content":"Describes how to retrieve custom attributes for code that is loaded into the execution context.","pos":[2159,2254]},{"pos":[2259,2367],"content":"<bpt id=\"p1\">[</bpt>Metadata and Self-Describing Components<ept id=\"p1\">](../../../docs/standard/metadata-and-self-describing-components.md)</ept>","source":"[Metadata and Self-Describing Components](../../../docs/standard/metadata-and-self-describing-components.md)"},{"content":"Provides an overview of metadata and describes how it is implemented in a .NET Framework portable executable (PE) file.","pos":[2368,2487]},{"pos":[2492,2657],"content":"<bpt id=\"p1\">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id=\"p1\">](../../../docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>","source":"[How to: Load Assemblies into the Reflection-Only Context](../../../docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)"},{"content":"Explains how to retrieve custom attribute information in the reflection-only context.","pos":[2658,2743]},{"pos":[2753,2762],"content":"Reference","linkify":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]}]}