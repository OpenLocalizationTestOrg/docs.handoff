{"content":"---\ntitle: \"Creating XML Trees in C# (LINQ to XML)\"\nms.date: 08/31/2018\nms.assetid: cc74234a-0bac-4327-9c8c-5a2ead15b595\n---\n# Creating XML trees in C# (LINQ to XML)\nThis section provides information about creating XML trees in C#.  \n  \n For information about using the results of LINQ queries as the content for an <xref:System.Xml.Linq.XElement>, see [Functional Construction (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md).  \n  \n## Constructing elements\n The signatures of the <xref:System.Xml.Linq.XElement> and <xref:System.Xml.Linq.XAttribute> constructors let you pass the contents of the element or attribute as arguments to the constructor. Because one of the constructors takes a variable number of arguments, you can pass any number of child elements. Of course, each of those child elements can contain their own child elements. For any element, you can add any number of attributes.  \n  \n When adding <xref:System.Xml.Linq.XNode> (including <xref:System.Xml.Linq.XElement>) or <xref:System.Xml.Linq.XAttribute> objects, if the new content has no parent, the objects are simply attached to the XML tree. If the new content already is parented, and is part of another XML tree, the new content is cloned, and the newly cloned content is attached to the XML tree. The last example in this topic demonstrates this.  \n  \n To create a `contacts`<xref:System.Xml.Linq.XElement>, you could use the following code:  \n  \n```csharp  \nXElement contacts =  \n    new XElement(\"Contacts\",  \n        new XElement(\"Contact\",  \n            new XElement(\"Name\", \"Patrick Hines\"),   \n            new XElement(\"Phone\", \"206-555-0144\"),  \n            new XElement(\"Address\",  \n                new XElement(\"Street1\", \"123 Main St\"),  \n                new XElement(\"City\", \"Mercer Island\"),  \n                new XElement(\"State\", \"WA\"),  \n                new XElement(\"Postal\", \"68042\")  \n            )  \n        )  \n    );  \n```  \n  \n If indented properly, the code to construct <xref:System.Xml.Linq.XElement> objects closely resembles the structure of the underlying XML.  \n  \n## XElement constructors  \n The <xref:System.Xml.Linq.XElement> class uses the following constructors for functional construction. Note that there are some other constructors for <xref:System.Xml.Linq.XElement>, but because they are not used for functional construction they are not listed here.  \n  \n|Constructor|Description|  \n|-----------------|-----------------|  \n|`XElement(XName name, object content)`|Creates an <xref:System.Xml.Linq.XElement>. The `name` parameter specifies the name of the element; `content` specifies the content of the element.|  \n|`XElement(XName name)`|Creates an <xref:System.Xml.Linq.XElement> with its <xref:System.Xml.Linq.XName> initialized to the specified name.|  \n|`XElement(XName name, params object[] content)`|Creates an <xref:System.Xml.Linq.XElement> with its <xref:System.Xml.Linq.XName> initialized to the specified name. The attributes and/or child elements are created from the contents of the parameter list.|  \n  \n The `content` parameter is extremely flexible. It supports any type of object that is a valid child of an <xref:System.Xml.Linq.XElement>. The following rules apply to different types of objects passed in this parameter:  \n  \n-   A string is added as text content.  \n  \n-   An <xref:System.Xml.Linq.XElement> is added as a child element.  \n  \n-   An <xref:System.Xml.Linq.XAttribute> is added as an attribute.  \n  \n-   An <xref:System.Xml.Linq.XProcessingInstruction>, <xref:System.Xml.Linq.XComment>, or <xref:System.Xml.Linq.XText> is added as child content.  \n  \n-   An <xref:System.Collections.IEnumerable> is enumerated, and these rules are applied recursively to the results.  \n  \n-   For any other type, its `ToString` method is called and the result is added as text content.  \n  \n### Creating an XElement with content  \n You can create an <xref:System.Xml.Linq.XElement> that contains simple content with a single method call. To do this, specify the content as the second parameter, as follows:  \n  \n```csharp  \nXElement n = new XElement(\"Customer\", \"Adventure Works\");  \nConsole.WriteLine(n);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Customer>Adventure Works</Customer>  \n```  \n  \n You can pass any type of object as the content. For example, the following code creates an element that contains a floating point number as content:  \n  \n```csharp  \nXElement n = new XElement(\"Cost\", 324.50);  \nConsole.WriteLine(n);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Cost>324.5</Cost>  \n```  \n  \n The floating point number is boxed and passed in to the constructor. The boxed number is converted to a string and used as the content of the element.  \n  \n### Creating an XElement with a child element  \n If you pass an instance of the <xref:System.Xml.Linq.XElement> class for the content argument, the constructor creates an element with a child element:  \n  \n```csharp  \nXElement shippingUnit = new XElement(\"ShippingUnit\",  \n    new XElement(\"Cost\", 324.50)  \n);  \nConsole.WriteLine(shippingUnit);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<ShippingUnit>  \n  <Cost>324.5</Cost>  \n</ShippingUnit>  \n```  \n  \n### Creating an XElement with multiple child elements  \n You can pass in a number of <xref:System.Xml.Linq.XElement> objects for the content. Each of the <xref:System.Xml.Linq.XElement> objects is included as a child element.  \n  \n```csharp  \nXElement address = new XElement(\"Address\",  \n    new XElement(\"Street1\", \"123 Main St\"),  \n    new XElement(\"City\", \"Mercer Island\"),  \n    new XElement(\"State\", \"WA\"),  \n    new XElement(\"Postal\", \"68042\")  \n);  \nConsole.WriteLine(address);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Address>  \n  <Street1>123 Main St</Street1>  \n  <City>Mercer Island</City>  \n  <State>WA</State>  \n  <Postal>68042</Postal>  \n</Address>  \n```  \n  \n By extending the above example, you can create an entire XML tree, as follows:  \n  \n```csharp  \nXElement contacts =  \n    new XElement(\"Contacts\",  \n        new XElement(\"Contact\",  \n            new XElement(\"Name\", \"Patrick Hines\"),                                                   \n            new XElement(\"Phone\", \"206-555-0144\"),  \n            new XElement(\"Address\",  \n                new XElement(\"Street1\", \"123 Main St\"),  \n                new XElement(\"City\", \"Mercer Island\"),  \n                new XElement(\"State\", \"WA\"),  \n                new XElement(\"Postal\", \"68042\")  \n            )  \n        )  \n    );  \nConsole.WriteLine(contacts);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Contacts>  \n  <Contact>  \n    <Name>Patrick Hines</Name>  \n    <Phone>206-555-0144</Phone>  \n    <Address>  \n      <Street1>123 Main St</Street1>  \n      <City>Mercer Island</City>  \n      <State>WA</State>  \n      <Postal>68042</Postal>  \n    </Address>  \n  </Contact>  \n</Contacts>  \n```  \n\n### Creating an XElement with an XAttribute\n If you pass an instance of the <xref:System.Xml.Linq.XAttribute> class for the content argument, the constructor creates an element with an attribute:\n\n```csharp  \nXElement phone = new XElement(\"Phone\",  \n    new XAttribute(\"Type\", \"Home\"),  \n    \"555-555-5555\");  \nConsole.WriteLine(phone);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Phone Type=\"Home\">555-555-5555</Phone>\n```   \n\n### Creating an empty element  \n To create an empty <xref:System.Xml.Linq.XElement>, you do not pass any content to the constructor. The following example creates an empty element:  \n  \n```csharp  \nXElement n = new XElement(\"Customer\");  \nConsole.WriteLine(n);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Customer />  \n```  \n  \n### Attaching vs. cloning  \n As mentioned previously, when adding <xref:System.Xml.Linq.XNode> (including <xref:System.Xml.Linq.XElement>) or <xref:System.Xml.Linq.XAttribute> objects, if the new content has no parent, the objects are simply attached to the XML tree. If the new content already is parented and is part of another XML tree, the new content is cloned, and the newly cloned content is attached to the XML tree.  \n\nThe following example demonstrates the behavior when you add a parented element to a tree, and when you add an element with no parent to a tree.\n\n```csharp  \n// Create a tree with a child element.  \nXElement xmlTree1 = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1)  \n);  \n  \n// Create an element that is not parented.  \nXElement child2 = new XElement(\"Child2\", 2);  \n  \n// Create a tree and add Child1 and Child2 to it.  \nXElement xmlTree2 = new XElement(\"Root\",  \n    xmlTree1.Element(\"Child1\"),  \n    child2  \n);  \n  \n// Compare Child1 identity.  \nConsole.WriteLine(\"Child1 was {0}\",  \n    xmlTree1.Element(\"Child1\") == xmlTree2.Element(\"Child1\") ?  \n    \"attached\" : \"cloned\");  \n  \n// Compare Child2 identity.  \nConsole.WriteLine(\"Child2 was {0}\",  \n    child2 == xmlTree2.Element(\"Child2\") ?  \n    \"attached\" : \"cloned\");  \n\n// The example displays the following output:  \n//    Child1 was cloned  \n//    Child2 was attached  \n```\n\n## See also\n\n- [Creating XML Trees (C#)](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)\n","nodes":[{"pos":[4,120],"embed":true,"restype":"x-metadata","content":"title: \"Creating XML Trees in C# (LINQ to XML)\"\nms.date: 08/31/2018\nms.assetid: cc74234a-0bac-4327-9c8c-5a2ead15b595","nodes":[{"content":"Creating XML Trees in C# (LINQ to XML)","nodes":[{"pos":[0,38],"content":"Creating XML Trees in C# (LINQ to XML)","nodes":[{"content":"Creating XML Trees in C# (LINQ to XML)","pos":[0,38]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[127,165],"content":"Creating XML trees in C# (LINQ to XML)","linkify":"Creating XML trees in C# (LINQ to XML)","nodes":[{"content":"Creating XML trees in C# (LINQ to XML)","pos":[0,38]}]},{"content":"This section provides information about creating XML trees in C#.","pos":[166,231]},{"pos":[238,489],"content":"For information about using the results of LINQ queries as the content for an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, see <bpt id=\"p1\">[</bpt>Functional Construction (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>.","source":"For information about using the results of LINQ queries as the content for an <xref:System.Xml.Linq.XElement>, see [Functional Construction (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)."},{"pos":[498,519],"content":"Constructing elements","linkify":"Constructing elements","nodes":[{"content":"Constructing elements","pos":[0,21]}]},{"content":"The signatures of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> constructors let you pass the contents of the element or attribute as arguments to the constructor.","pos":[521,712],"source":"The signatures of the <xref:System.Xml.Linq.XElement> and <xref:System.Xml.Linq.XAttribute> constructors let you pass the contents of the element or attribute as arguments to the constructor."},{"content":"Because one of the constructors takes a variable number of arguments, you can pass any number of child elements.","pos":[713,825]},{"content":"Of course, each of those child elements can contain their own child elements.","pos":[826,903]},{"content":"For any element, you can add any number of attributes.","pos":[904,958]},{"content":"When adding <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> (including <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>) or <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects, if the new content has no parent, the objects are simply attached to the XML tree.","pos":[965,1178],"source":"When adding <xref:System.Xml.Linq.XNode> (including <xref:System.Xml.Linq.XElement>) or <xref:System.Xml.Linq.XAttribute> objects, if the new content has no parent, the objects are simply attached to the XML tree."},{"content":"If the new content already is parented, and is part of another XML tree, the new content is cloned, and the newly cloned content is attached to the XML tree.","pos":[1179,1336]},{"content":"The last example in this topic demonstrates this.","pos":[1337,1386]},{"pos":[1393,1481],"content":"To create a <ph id=\"ph1\">`contacts`</ph><ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, you could use the following code:","source":"To create a `contacts`<xref:System.Xml.Linq.XElement>, you could use the following code:"},{"pos":[1990,2128],"content":"If indented properly, the code to construct <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects closely resembles the structure of the underlying XML.","source":"If indented properly, the code to construct <xref:System.Xml.Linq.XElement> objects closely resembles the structure of the underlying XML."},{"pos":[2137,2158],"content":"XElement constructors","linkify":"XElement constructors","nodes":[{"content":"XElement constructors","pos":[0,21]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class uses the following constructors for functional construction.","pos":[2162,2264],"source":"The <xref:System.Xml.Linq.XElement> class uses the following constructors for functional construction."},{"content":"Note that there are some other constructors for <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, but because they are not used for functional construction they are not listed here.","pos":[2265,2429],"source":" Note that there are some other constructors for <xref:System.Xml.Linq.XElement>, but because they are not used for functional construction they are not listed here."},{"content":"Constructor","pos":[2436,2447]},{"content":"Description","pos":[2448,2459]},{"content":"Creates an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[2543,2586],"source":"Creates an <xref:System.Xml.Linq.XElement>."},{"content":"The <ph id=\"ph1\">`name`</ph> parameter specifies the name of the element; <ph id=\"ph2\">`content`</ph> specifies the content of the element.","pos":[2587,2690],"source":" The `name` parameter specifies the name of the element; `content` specifies the content of the element."},{"pos":[2718,2833],"content":"Creates an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> with its <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> initialized to the specified name.","source":"Creates an <xref:System.Xml.Linq.XElement> with its <xref:System.Xml.Linq.XName> initialized to the specified name."},{"content":"Creates an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> with its <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> initialized to the specified name.","pos":[2886,3001],"source":"Creates an <xref:System.Xml.Linq.XElement> with its <xref:System.Xml.Linq.XName> initialized to the specified name."},{"content":"The attributes and/or child elements are created from the contents of the parameter list.","pos":[3002,3091]},{"content":"The <ph id=\"ph1\">`content`</ph> parameter is extremely flexible.","pos":[3099,3145],"source":"The `content` parameter is extremely flexible."},{"content":"It supports any type of object that is a valid child of an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[3146,3237],"source":" It supports any type of object that is a valid child of an <xref:System.Xml.Linq.XElement>."},{"content":"The following rules apply to different types of objects passed in this parameter:","pos":[3238,3319]},{"content":"A string is added as text content.","pos":[3329,3363]},{"pos":[3373,3436],"content":"An <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> is added as a child element.","source":"An <xref:System.Xml.Linq.XElement> is added as a child element."},{"pos":[3446,3508],"content":"An <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> is added as an attribute.","source":"An <xref:System.Xml.Linq.XAttribute> is added as an attribute."},{"pos":[3518,3659],"content":"An <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XProcessingInstruction&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XComment&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XText&gt;</ph> is added as child content.","source":"An <xref:System.Xml.Linq.XProcessingInstruction>, <xref:System.Xml.Linq.XComment>, or <xref:System.Xml.Linq.XText> is added as child content."},{"pos":[3669,3780],"content":"An <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> is enumerated, and these rules are applied recursively to the results.","source":"An <xref:System.Collections.IEnumerable> is enumerated, and these rules are applied recursively to the results."},{"pos":[3790,3882],"content":"For any other type, its <ph id=\"ph1\">`ToString`</ph> method is called and the result is added as text content.","source":"For any other type, its `ToString` method is called and the result is added as text content."},{"pos":[3892,3925],"content":"Creating an XElement with content","linkify":"Creating an XElement with content","nodes":[{"content":"Creating an XElement with content","pos":[0,33]}]},{"content":"You can create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> that contains simple content with a single method call.","pos":[3929,4034],"source":"You can create an <xref:System.Xml.Linq.XElement> that contains simple content with a single method call."},{"content":"To do this, specify the content as the second parameter, as follows:","pos":[4035,4103]},{"content":"This example produces the following output:","pos":[4215,4258]},{"content":"You can pass any type of object as the content.","pos":[4322,4369]},{"content":"For example, the following code creates an element that contains a floating point number as content:","pos":[4370,4470]},{"content":"This example produces the following output:","pos":[4567,4610]},{"content":"The floating point number is boxed and passed in to the constructor.","pos":[4656,4724]},{"content":"The boxed number is converted to a string and used as the content of the element.","pos":[4725,4806]},{"pos":[4816,4857],"content":"Creating an XElement with a child element","linkify":"Creating an XElement with a child element","nodes":[{"content":"Creating an XElement with a child element","pos":[0,41]}]},{"pos":[4861,5012],"content":"If you pass an instance of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class for the content argument, the constructor creates an element with a child element:","source":"If you pass an instance of the <xref:System.Xml.Linq.XElement> class for the content argument, the constructor creates an element with a child element:"},{"content":"This example produces the following output:","pos":[5170,5213]},{"pos":[5299,5348],"content":"Creating an XElement with multiple child elements","linkify":"Creating an XElement with multiple child elements","nodes":[{"content":"Creating an XElement with multiple child elements","pos":[0,49]}]},{"content":"You can pass in a number of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects for the content.","pos":[5352,5436],"source":"You can pass in a number of <xref:System.Xml.Linq.XElement> objects for the content."},{"content":"Each of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects is included as a child element.","pos":[5437,5520],"source":" Each of the <xref:System.Xml.Linq.XElement> objects is included as a child element."},{"content":"This example produces the following output:","pos":[5792,5835]},{"content":"By extending the above example, you can create an entire XML tree, as follows:","pos":[6000,6078]},{"content":"This example produces the following output:","pos":[6666,6709]},{"pos":[7022,7061],"content":"Creating an XElement with an XAttribute","linkify":"Creating an XElement with an XAttribute","nodes":[{"content":"Creating an XElement with an XAttribute","pos":[0,39]}]},{"pos":[7063,7213],"content":"If you pass an instance of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> class for the content argument, the constructor creates an element with an attribute:","source":"If you pass an instance of the <xref:System.Xml.Linq.XAttribute> class for the content argument, the constructor creates an element with an attribute:"},{"content":"This example produces the following output:","pos":[7367,7410]},{"pos":[7477,7502],"content":"Creating an empty element","linkify":"Creating an empty element","nodes":[{"content":"Creating an empty element","pos":[0,25]}]},{"content":"To create an empty <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, you do not pass any content to the constructor.","pos":[7506,7605],"source":"To create an empty <xref:System.Xml.Linq.XElement>, you do not pass any content to the constructor."},{"content":"The following example creates an empty element:","pos":[7606,7653]},{"content":"This example produces the following output:","pos":[7746,7789]},{"pos":[7832,7853],"content":"Attaching vs. cloning","linkify":"Attaching vs. cloning","nodes":[{"content":"Attaching vs. cloning","pos":[0,21]}]},{"content":"As mentioned previously, when adding <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> (including <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>) or <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects, if the new content has no parent, the objects are simply attached to the XML tree.","pos":[7857,8095],"source":"As mentioned previously, when adding <xref:System.Xml.Linq.XNode> (including <xref:System.Xml.Linq.XElement>) or <xref:System.Xml.Linq.XAttribute> objects, if the new content has no parent, the objects are simply attached to the XML tree."},{"content":"If the new content already is parented and is part of another XML tree, the new content is cloned, and the newly cloned content is attached to the XML tree.","pos":[8096,8252]},{"content":"The following example demonstrates the behavior when you add a parented element to a tree, and when you add an element with no parent to a tree.","pos":[8256,8400]},{"pos":[9203,9211],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[9215,9314],"content":"<bpt id=\"p1\">[</bpt>Creating XML Trees (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)</ept>","source":"[Creating XML Trees (C#)](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)"}]}