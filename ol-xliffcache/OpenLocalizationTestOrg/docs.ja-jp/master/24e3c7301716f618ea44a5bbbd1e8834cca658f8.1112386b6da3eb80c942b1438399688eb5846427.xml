{"content":"---\ntitle: \"How to: Create a WCF Service that Communicates over WebSockets | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: bafbbd89-eab8-4e9a-b4c3-b7b0178e12d8\ncaps.latest.revision: 2\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Create a WCF Service that Communicates over WebSockets\nWCF services and clients can use the <xref:System.ServiceModel.NetHttpBinding> binding to communicate over WebSockets.  WebSockets will be used when the <xref:System.ServiceModel.NetHttpBinding> determines the service contract defines a callback contract. This topic describes how to implement a WCF service and client that uses the <xref:System.ServiceModel.NetHttpBinding> to communicate over WebSockets.  \n  \n### Define the Service  \n  \n1.  Define a callback contract  \n  \n    ```csharp  \n    [ServiceContract]  \n        public interface IStockQuoteCallback  \n        {  \n            [OperationContract(IsOneWay = true)]  \n            Task SendQuote(string code, double value);  \n        }  \n    ```  \n  \n     This contract will be implemented by the client application to allow the service to send messages back to the client.  \n  \n2.  Define the service contract and specify the `IStockQuoteCallback` interface as the callback contract.  \n  \n    ```csharp  \n    [ServiceContract(CallbackContract = typeof(IStockQuoteCallback))]  \n        public interface IStockQuoteService  \n        {  \n            [OperationContract(IsOneWay = true)]  \n            Task StartSendingQuotes();  \n        }  \n    ```  \n  \n3.  Implement the service contract.  \n  \n    ```  \n    public class StockQuoteService : IStockQuoteService  \n        {  \n            public async Task StartSendingQuotes()  \n            {  \n                var callback = OperationContext.Current.GetCallbackChannel<IStockQuoteCallback>();  \n                var random = new Random();  \n                double price = 29.00;  \n  \n                while (((IChannel)callback).State == CommunicationState.Opened)  \n                {  \n                    await callback.SendQuote(\"MSFT\", price);  \n                    price += random.NextDouble();  \n                    await Task.Delay(1000);  \n                }  \n            }  \n        }  \n    ```  \n  \n     The service operation `StartSendingQuotes` is implemented as an asynchronous call. We retrieve the callback channel using the `OperationContext` and if the channel is open, we make an async call on the callback channel.  \n  \n4.  Configure the service  \n  \n    ```xml  \n    <configuration>  \n        <appSettings>  \n          <add key=\"aspnet:UseTaskFriendlySynchronizationContext\" value=\"true\" />        \n        </appSettings>  \n        <system.web>  \n          <compilation debug=\"true\" targetFramework=\"4.5\" />        \n        </system.web>  \n        <system.serviceModel>  \n            <protocolMapping>  \n              <add scheme=\"http\" binding=\"netHttpBinding\"/>  \n              <add scheme=\"https\" binding=\"netHttpsBinding\"/>  \n            </protocolMapping>  \n            <behaviors>  \n                <serviceBehaviors>  \n                    <behavior name=\"\">  \n                        <serviceMetadata httpGetEnabled=\"true\" httpsGetEnabled=\"true\" />  \n                        <serviceDebug includeExceptionDetailInFaults=\"false\" />  \n                    </behavior>  \n                </serviceBehaviors>  \n            </behaviors>  \n            <serviceHostingEnvironment aspNetCompatibilityEnabled=\"true\"  \n                multipleSiteBindingsEnabled=\"true\" />  \n        </system.serviceModel>  \n    </configuration>  \n    ```  \n  \n     The service’s configuration file relies on WCF’s default endpoints. The `<protocolMapping>` section is used to specify that the `NetHttpBinding` should be used for the default endpoints created.  \n  \n### Define the Client  \n  \n1.  Implement the callback contract.  \n  \n    ```csharp  \n    private class CallbackHandler : StockQuoteServiceReference.IStockQuoteServiceCallback  \n            {  \n                public async Task SendQuoteAsync(string code, double value)  \n                {  \n                    Console.WriteLine(\"{0}: {1:f2}\", code, value);  \n                }  \n            }  \n    ```  \n  \n     The callback contract operation is implemented as an asynchronous method.  \n  \n    1.  Implement the client code.  \n  \n        ```csharp  \n        class Program  \n        {  \n            static void Main(string[] args)  \n            {  \n                var context = new InstanceContext(new CallbackHandler());  \n                var client = new StockQuoteServiceReference.StockQuoteServiceClient(context);  \n                client.StartSendingQuotes();              \n                Console.ReadLine();  \n            }  \n  \n            private class CallbackHandler : StockQuoteServiceReference.IStockQuoteServiceCallback  \n            {  \n                public async Task SendQuoteAsync(string code, double value)  \n                {  \n                    Console.WriteLine(\"{0}: {1:f2}\", code, value);  \n                }  \n            }  \n        }  \n        ```  \n  \n         The CallbackHandler is repeated here for clarity. The client application creates a new InstanceContext and specifies the implementation of the callback interface. Next it creates an instance of the proxy class sending a reference to the newly created InstanceContext. When the client calls the service, the service will call the client using the callback contract specified.  \n  \n    2.  Configure the client  \n  \n        ```xml  \n        <?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n        <configuration>  \n            <startup>   \n                <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n            </startup>  \n            <system.serviceModel>  \n                <bindings>  \n                    <netHttpBinding>  \n                        <binding name=\"NetHttpBinding_IStockQuoteService\">  \n                            <webSocketSettings transportUsage=\"Always\" />  \n                        </binding>  \n                    </netHttpBinding>  \n                </bindings>  \n                <client>  \n                    <endpoint address=\"ws://localhost/NetHttpSampleServer/StockQuoteService.svc\"  \n                        binding=\"netHttpBinding\" bindingConfiguration=\"NetHttpBinding_IStockQuoteService\"  \n                        contract=\"StockQuoteServiceReference.IStockQuoteService\" name=\"NetHttpBinding_IStockQuoteService\" />  \n                </client>  \n            </system.serviceModel>  \n        </configuration>  \n        ```  \n  \n         There is nothing special you need to do in the client configuration, just specify the client side endpoint using the `NetHttpBinding`.  \n  \n## Example  \n The following is the complete code used in this topic.  \n  \n```csharp  \n// IStockQuoteService.cs  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.Runtime.Serialization;  \nusing System.ServiceModel;  \nusing System.Text;  \nusing System.Threading.Tasks;  \n  \nnamespace Server  \n{  \n    [ServiceContract(CallbackContract = typeof(IStockQuoteCallback))]  \n    public interface IStockQuoteService  \n    {  \n        [OperationContract(IsOneWay = true)]  \n        Task StartSendingQuotes();  \n    }  \n  \n    [ServiceContract]  \n    public interface IStockQuoteCallback  \n    {  \n        [OperationContract(IsOneWay = true)]  \n        Task SendQuote(string code, double value);  \n    }  \n}  \n  \n```  \n  \n```  \n// StockQuoteService.svc.cs  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.Runtime.Serialization;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Channels;  \nusing System.Text;  \nusing System.Threading.Tasks;  \n  \nnamespace Server  \n{  \n    public class StockQuoteService : IStockQuoteService  \n    {  \n        public async Task StartSendingQuotes()  \n        {  \n            var callback = OperationContext.Current.GetCallbackChannel<IStockQuoteCallback>();  \n            var random = new Random();  \n            double price = 29.00;  \n  \n            while (((IChannel)callback).State == CommunicationState.Opened)  \n            {  \n                await callback.SendQuote(\"MSFT\", price);  \n                price += random.NextDouble();  \n                await Task.Delay(1000);  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```xml  \n<?xml version=\"1.0\"?>  \n  \n<!--  \n  For more information on how to configure your ASP.NET application, please visit  \n  http://go.microsoft.com/fwlink/?LinkId=169433  \n  -->  \n  \n<configuration>  \n    <appSettings>  \n      <add key=\"aspnet:UseTaskFriendlySynchronizationContext\" value=\"true\" />        \n    </appSettings>  \n    <system.web>  \n      <compilation debug=\"true\" targetFramework=\"4.5\" />        \n    </system.web>  \n    <system.serviceModel>  \n        <protocolMapping>  \n          <add scheme=\"http\" binding=\"netHttpBinding\"/>  \n          <add scheme=\"https\" binding=\"netHttpsBinding\"/>  \n        </protocolMapping>  \n        <behaviors>  \n            <serviceBehaviors>  \n                <behavior name=\"\">  \n                    <serviceMetadata httpGetEnabled=\"true\" httpsGetEnabled=\"true\" />  \n                    <serviceDebug includeExceptionDetailInFaults=\"false\" />  \n                </behavior>  \n            </serviceBehaviors>  \n        </behaviors>  \n        <serviceHostingEnvironment aspNetCompatibilityEnabled=\"true\"  \n            multipleSiteBindingsEnabled=\"true\" />  \n    </system.serviceModel>  \n</configuration>  \n```  \n  \n```  \n<!-- StockQuoteService.svc -->  \n<%@ ServiceHost Language=\"C#\" Debug=\"true\" Service=\"Server.StockQuoteService\" CodeBehind=\"StockQuoteService.svc.cs\" %>  \n```  \n  \n```csharp  \n// Client.cs  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.ServiceModel;  \nusing System.Text;  \nusing System.Threading.Tasks;  \n  \nnamespace Client  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            var context = new InstanceContext(new CallbackHandler());  \n            var client = new StockQuoteServiceReference.StockQuoteServiceClient(context);  \n            client.StartSendingQuotes();              \n            Console.ReadLine();  \n        }  \n  \n        private class CallbackHandler : StockQuoteServiceReference.IStockQuoteServiceCallback  \n        {  \n            public async Task SendQuoteAsync(string code, double value)  \n            {  \n                Console.WriteLine(\"{0}: {1:f2}\", code, value);  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```xml  \n<!—App.config -->  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <system.serviceModel>  \n        <bindings>  \n            <netHttpBinding>  \n                <binding name=\"NetHttpBinding_IStockQuoteService\">  \n                    <webSocketSettings transportUsage=\"Always\" />  \n                </binding>  \n            </netHttpBinding>  \n        </bindings>  \n        <client>  \n            <endpoint address=\"ws://localhost/NetHttpSampleServer/StockQuoteService.svc\"  \n                binding=\"netHttpBinding\" bindingConfiguration=\"NetHttpBinding_IStockQuoteService\"  \n                contract=\"StockQuoteServiceReference.IStockQuoteService\" name=\"NetHttpBinding_IStockQuoteService\" />  \n        </client>  \n    </system.serviceModel>  \n</configuration>  \n```  \n  \n## See Also  \n [Synchronous and Asynchronous Operations](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)   \n [Using the NetHttpBinding](../../../../docs/framework/wcf/feature-details/using-the-nethttpbinding.md)","nodes":[{"pos":[4,382],"nodes":[{"content":"How to: Create a WCF Service that Communicates over WebSockets | Microsoft Docs","nodes":[{"pos":[0,79],"content":"How to: Create a WCF Service that Communicates over WebSockets | Microsoft Docs","nodes":[{"content":"How to: Create a WCF Service that Communicates over WebSockets | Microsoft Docs","pos":[0,79]}]}],"pos":[6,88],"yaml":true}],"content":"title: \"How to: Create a WCF Service that Communicates over WebSockets | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: bafbbd89-eab8-4e9a-b4c3-b7b0178e12d8\ncaps.latest.revision: 2\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[389,451],"content":"How to: Create a WCF Service that Communicates over WebSockets","linkify":"How to: Create a WCF Service that Communicates over WebSockets","nodes":[{"content":"How to: Create a WCF Service that Communicates over WebSockets","pos":[0,62]}]},{"content":"WCF services and clients can use the <ph id=\"ph1\">&lt;xref:System.ServiceModel.NetHttpBinding&gt;</ph> binding to communicate over WebSockets.","pos":[452,570],"source":"WCF services and clients can use the <xref:System.ServiceModel.NetHttpBinding> binding to communicate over WebSockets."},{"content":"WebSockets will be used when the <ph id=\"ph1\">&lt;xref:System.ServiceModel.NetHttpBinding&gt;</ph> determines the service contract defines a callback contract.","pos":[572,707],"source":"  WebSockets will be used when the <xref:System.ServiceModel.NetHttpBinding> determines the service contract defines a callback contract."},{"content":"This topic describes how to implement a WCF service and client that uses the <ph id=\"ph1\">&lt;xref:System.ServiceModel.NetHttpBinding&gt;</ph> to communicate over WebSockets.","pos":[708,858],"source":" This topic describes how to implement a WCF service and client that uses the <xref:System.ServiceModel.NetHttpBinding> to communicate over WebSockets."},{"pos":[868,886],"content":"Define the Service","linkify":"Define the Service","nodes":[{"content":"Define the Service","pos":[0,18]}]},{"content":"Define a callback contract","pos":[896,922]},{"content":"This contract will be implemented by the client application to allow the service to send messages back to the client.","pos":[1165,1282]},{"pos":[1292,1393],"content":"Define the service contract and specify the <ph id=\"ph1\">`IStockQuoteCallback`</ph> interface as the callback contract.","source":"Define the service contract and specify the `IStockQuoteCallback` interface as the callback contract."},{"content":"Implement the service contract.","pos":[1666,1697]},{"content":"The service operation <ph id=\"ph1\">`StartSendingQuotes`</ph> is implemented as an asynchronous call.","pos":[2370,2452],"source":"The service operation `StartSendingQuotes` is implemented as an asynchronous call."},{"content":"We retrieve the callback channel using the <ph id=\"ph1\">`OperationContext`</ph> and if the channel is open, we make an async call on the callback channel.","pos":[2453,2589],"source":" We retrieve the callback channel using the `OperationContext` and if the channel is open, we make an async call on the callback channel."},{"content":"Configure the service","pos":[2599,2620]},{"content":"The service’s configuration file relies on WCF’s default endpoints.","pos":[3720,3787]},{"content":"The <ph id=\"ph1\">`&lt;protocolMapping&gt;`</ph> section is used to specify that the <ph id=\"ph2\">`NetHttpBinding`</ph> should be used for the default endpoints created.","pos":[3788,3914],"source":" The `<protocolMapping>` section is used to specify that the `NetHttpBinding` should be used for the default endpoints created."},{"pos":[3924,3941],"content":"Define the Client","linkify":"Define the Client","nodes":[{"content":"Define the Client","pos":[0,17]}]},{"content":"Implement the callback contract.","pos":[3951,3983]},{"content":"The callback contract operation is implemented as an asynchronous method.","pos":[4334,4407]},{"content":"Implement the client code.","pos":[4421,4447]},{"content":"The CallbackHandler is repeated here for clarity.","pos":[5216,5265]},{"content":"The client application creates a new InstanceContext and specifies the implementation of the callback interface.","pos":[5266,5378]},{"content":"Next it creates an instance of the proxy class sending a reference to the newly created InstanceContext.","pos":[5379,5483]},{"content":"When the client calls the service, the service will call the client using the callback contract specified.","pos":[5484,5590]},{"content":"Configure the client","pos":[5604,5624]},{"pos":[6703,6837],"content":"There is nothing special you need to do in the client configuration, just specify the client side endpoint using the <ph id=\"ph1\">`NetHttpBinding`</ph>.","source":"There is nothing special you need to do in the client configuration, just specify the client side endpoint using the `NetHttpBinding`."},{"pos":[6846,6853],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following is the complete code used in this topic.","pos":[6857,6911]},{"pos":[11594,11602],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Synchronous and Asynchronous Operations<ept id=\"p1\">](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)</ept><ph id=\"ph1\"> </ph>","pos":[11606,11723],"source":"[Synchronous and Asynchronous Operations](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md) "},{"content":"<bpt id=\"p1\">[</bpt>Using the NetHttpBinding<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/using-the-nethttpbinding.md)</ept>","pos":[11727,11829],"source":"[Using the NetHttpBinding](../../../../docs/framework/wcf/feature-details/using-the-nethttpbinding.md)"}]}