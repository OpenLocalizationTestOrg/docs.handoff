<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="and-operator.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a799c0e37d6607e8ff72ab984ff5e540a4e11063</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\and-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">81ec998d78b208ea84f6ec298d1656b45d47a303</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">436a4bd8d7a52d2ebe45d7db96819b6825da4d18</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source><ph id="ph1">&amp;amp;</ph> Operator - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;amp;</ph> Operator (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&amp;`</ph> operator is supported in two forms: a unary address-of operator or a binary logical operator.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unary address-of operator</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The unary <ph id="ph1">`&amp;`</ph> operator returns the address of its operand.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: obtain the address of a variable<ept id="p1">](../../programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The address-of operator <ph id="ph1">`&amp;`</ph> requires <bpt id="p1">[</bpt>unsafe<ept id="p1">](../keywords/unsafe.md)</ept> context.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Integer logical bitwise AND operator</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For integer types, the <ph id="ph1">`&amp;`</ph> operator computes the logical bitwise AND of its operands:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The preceding example uses the binary literals <bpt id="p1">[</bpt>introduced in C# 7.0<ept id="p1">](../../whats-new/csharp-7.md#numeric-literal-syntax-improvements)</ept> and <bpt id="p2">[</bpt>enhanced in C# 7.2<ept id="p2">](../../whats-new/csharp-7-2.md#leading-underscores-in-numeric-literals)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because operations on integer types are generally allowed on enumeration types, the <ph id="ph1">`&amp;`</ph> operator also supports <bpt id="p1">[</bpt>enum<ept id="p1">](../keywords/enum.md)</ept> operands.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Boolean logical AND operator</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">[</bpt>bool<ept id="p1">](../keywords/bool.md)</ept> operands, the <ph id="ph1">`&amp;`</ph> operator computes the logical AND of its operands.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The result of <ph id="ph1">`x &amp; y`</ph> is <ph id="ph2">`true`</ph> if both <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph> are <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Otherwise, the result is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&amp;`</ph> operator evaluates both operands even if the first operand evaluates to <ph id="ph2">`false`</ph>, so that the result must be <ph id="ph3">`false`</ph> regardless of the value of the second operand.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example demonstrates that behavior:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>conditional AND operator<ept id="p1">](conditional-and-operator.md)</ept> <ph id="ph1">`&amp;&amp;`</ph> also computes the logical AND of its operands, but evaluates the second operand only if the first operand evaluates to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For nullable bool operands, the behavior of the <ph id="ph1">`&amp;`</ph> operator is consistent with SQL's three-valued logic.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The bool? type<ept id="p1">](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type)</ept> section of the <bpt id="p2">[</bpt>Using nullable types<ept id="p2">](../../programming-guide/nullable-types/using-nullable-types.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Operator overloadability</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>User-defined types can <bpt id="p1">[</bpt>overload<ept id="p1">](../keywords/operator.md)</ept> the binary <ph id="ph1">`&amp;`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When a binary <ph id="ph1">`&amp;`</ph> operator is overloaded, the <bpt id="p1">[</bpt>AND assignment operator<ept id="p1">](and-assignment-operator.md)</ept> <ph id="ph2">`&amp;=`</ph> is also implicitly overloaded.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>The address-of operator<ept id="p1">](~/_csharplang/spec/unsafe-code.md#the-address-of-operator)</ept> and <bpt id="p2">[</bpt>Logical operators<ept id="p2">](~/_csharplang/spec/expressions.md#logical-operators)</ept> sections of the <bpt id="p3">[</bpt>C# language specification<ept id="p3">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pointer types<ept id="p1">](../../programming-guide/unsafe-code-pointers/pointer-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>| operator<ept id="p1">](or-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>^ operator<ept id="p1">](xor-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>~ operator<ept id="p1">](bitwise-complement-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;&amp; operator<ept id="p1">](conditional-and-operator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>