{"content":"---\ntitle: \"Handle exceptions in query expressions\"\ndescription: How to handle exceptions in query expressions.\nkeywords: .NET, .NET Core, C#\nauthor: BillWagner\nmanager: wpickett\nms.author: wiwagn\nms.date: 12/1/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 2bf0c397-13fb-4f68-bc2b-531c6c88a167\n---\n# Handle exceptions in query expressions\n\nIt is possible to call any method in the context of a query expression. However, we recommend that you avoid calling any method in a query expression that can create a side effect such as modifying the contents of the data source or throwing an exception. This example shows how to avoid raising exceptions when you call methods in a query expression without violating the general .NET Framework guidelines on exception handling. Those guidelines state that it is acceptable to catch a specific exception when you understand why it will be thrown in a given context. For more information, see [Best Practices for Exceptions](../../standard/exceptions/best-practices-for-exceptions.md).  \n  \n The final example shows how to handle those cases when you must throw an exception during execution of a query.  \n  \n## Example  \n\n The following example shows how to move exception handling code outside a query expression. This is only possible when the method does not depend on any variables local to the query.  \n  \n [!code-cs[csProgGuideLINQ#10](../../../samples/snippets/csharp/concepts/linq/how-to-handle-exceptions-in-query-expressions_1.cs)]  \n  \n## Example \n\n In some cases, the best response to an exception that is thrown from within a query might be to stop the query execution immediately. The following example shows how to handle exceptions that might be thrown from inside a query body. Assume that `SomeMethodThatMightThrow` can potentially cause an exception that requires the query execution to stop.  \n  \n Note that the `try` block encloses the `foreach` loop, and not the query itself. This is because the `foreach` loop is the point at which the query is actually executed. For more information, see [Introduction to LINQ queries](../programming-guide/concepts/linq/introduction-to-linq-queries.md).  \n  \n [!code-cs[csProgGuideLINQ#12](../../../samples/snippets/csharp/concepts/linq/how-to-handle-exceptions-in-query-expressions_2.cs)]  \n  \n\n## See Also  \n [LINQ query expressions](index.md)","nodes":[{"pos":[4,358],"embed":true,"restype":"x-metadata","content":"title: \"Handle exceptions in query expressions\"\ndescription: How to handle exceptions in query expressions.\nkeywords: .NET, .NET Core, C#\nauthor: BillWagner\nmanager: wpickett\nms.author: wiwagn\nms.date: 12/1/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 2bf0c397-13fb-4f68-bc2b-531c6c88a167","nodes":[{"content":"Handle exceptions in query expressions","nodes":[{"pos":[0,38],"content":"Handle exceptions in query expressions","nodes":[{"content":"Handle exceptions in query expressions","pos":[0,38]}]}],"path":["title"]},{"content":"How to handle exceptions in query expressions.","nodes":[{"pos":[0,46],"content":"How to handle exceptions in query expressions.","nodes":[{"content":"How to handle exceptions in query expressions.","pos":[0,46]}]}],"path":["description"]},{"content":".NET, .NET Core, C#","nodes":[{"pos":[0,19],"content":".NET, .NET Core, C#","nodes":[{"content":".NET, .NET Core, C#","pos":[0,19]}]}],"path":["keywords"]}],"yml":true},{"pos":[365,403],"content":"Handle exceptions in query expressions","linkify":"Handle exceptions in query expressions","nodes":[{"content":"Handle exceptions in query expressions","pos":[0,38]}]},{"content":"It is possible to call any method in the context of a query expression.","pos":[405,476]},{"content":"However, we recommend that you avoid calling any method in a query expression that can create a side effect such as modifying the contents of the data source or throwing an exception.","pos":[477,660]},{"content":"This example shows how to avoid raising exceptions when you call methods in a query expression without violating the general .NET Framework guidelines on exception handling.","pos":[661,834]},{"content":"Those guidelines state that it is acceptable to catch a specific exception when you understand why it will be thrown in a given context.","pos":[835,971]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Exceptions<ept id=\"p1\">](../../standard/exceptions/best-practices-for-exceptions.md)</ept>.","pos":[972,1090],"source":" For more information, see [Best Practices for Exceptions](../../standard/exceptions/best-practices-for-exceptions.md)."},{"content":"The final example shows how to handle those cases when you must throw an exception during execution of a query.","pos":[1097,1208]},{"pos":[1217,1224],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to move exception handling code outside a query expression.","pos":[1229,1320]},{"content":"This is only possible when the method does not depend on any variables local to the query.","pos":[1321,1411]},{"pos":[1556,1563],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In some cases, the best response to an exception that is thrown from within a query might be to stop the query execution immediately.","pos":[1567,1700]},{"content":"The following example shows how to handle exceptions that might be thrown from inside a query body.","pos":[1701,1800]},{"content":"Assume that <ph id=\"ph1\">`SomeMethodThatMightThrow`</ph> can potentially cause an exception that requires the query execution to stop.","pos":[1801,1917],"source":" Assume that `SomeMethodThatMightThrow` can potentially cause an exception that requires the query execution to stop."},{"content":"Note that the <ph id=\"ph1\">`try`</ph> block encloses the <ph id=\"ph2\">`foreach`</ph> loop, and not the query itself.","pos":[1924,2004],"source":"Note that the `try` block encloses the `foreach` loop, and not the query itself."},{"content":"This is because the <ph id=\"ph1\">`foreach`</ph> loop is the point at which the query is actually executed.","pos":[2005,2093],"source":" This is because the `foreach` loop is the point at which the query is actually executed."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Introduction to LINQ queries<ept id=\"p1\">](../programming-guide/concepts/linq/introduction-to-linq-queries.md)</ept>.","pos":[2094,2219],"source":" For more information, see [Introduction to LINQ queries](../programming-guide/concepts/linq/introduction-to-linq-queries.md)."},{"pos":[2365,2373],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2377,2411],"content":"<bpt id=\"p1\">[</bpt>LINQ query expressions<ept id=\"p1\">](index.md)</ept>","source":"[LINQ query expressions](index.md)"}]}