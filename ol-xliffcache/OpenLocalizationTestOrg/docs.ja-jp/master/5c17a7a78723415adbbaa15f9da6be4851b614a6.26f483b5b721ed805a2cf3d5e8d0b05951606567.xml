{"content":"---\ntitle: \"TypeOf Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"TypeOf\"\n  - \"vb.TypeOf\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"types [Visual Basic], compatible\"\n  - \"comparison operators\"\n  - \"TypeOf...Is expression\"\n  - \"data types [Visual Basic], compatible\"\n  - \"TypeOf operator [Visual Basic]\"\n  - \"compatible data types\"\nms.assetid: 33f65296-659a-4b9a-9a29-c2a91cff68b2\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# TypeOf Operator (Visual Basic)\nCompares an object reference variable to a data type.  \n  \n## Syntax  \n  \n```  \n  \nresult = TypeOf objectexpression Is typename  \n```  \n  \n```  \n  \nresult = TypeOf objectexpression IsNot typename  \n```  \n  \n## Parts  \n `result`  \n Returned. A `Boolean` value.  \n  \n `objectexpression`  \n Required. Any expression that evaluates to a reference type.  \n  \n `typename`  \n Required. Any data type name.  \n  \n## Remarks  \n The `TypeOf` operator determines whether the run-time type of `objectexpression` is compatible with `typename`. The compatibility depends on the type category of `typename`. The following table shows how compatibility is determined.  \n  \n|Type category of `typename`|Compatibility criterion|  \n|---------------------------------|-----------------------------|  \n|Class|`objectexpression` is of type `typename` or inherits from `typename`|  \n|Structure|`objectexpression` is of type `typename`|  \n|Interface|`objectexpression` implements `typename` or inherits from a class that implements `typename`|  \n  \n If the run-time type of `objectexpression` satisfies the compatibility criterion, `result` is `True`. Otherwise, `result` is `False`.  If `objectexpression` is null, then `TypeOf`...`Is` returns `False`, and ...`IsNot` returns `True`.  \n  \n `TypeOf` is always used with the `Is` keyword to construct a `TypeOf`...`Is` expression, or with the `IsNot` keyword to construct a `TypeOf`...`IsNot` expression.  \n  \n## Example  \n The following example uses `TypeOf`...`Is` expressions to test the type compatibility of two object reference variables with various data types.  \n  \n [!code-vb[VbVbalrOperators#39](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/typeof-operator_1.vb)]  \n  \n The variable `refInteger` has a run-time type of `Integer`. It is compatible with `Integer` but not with `Double`. The variable `refForm` has a run-time type of <xref:System.Windows.Forms.Form>. It is compatible with <xref:System.Windows.Forms.Form> because that is its type, with <xref:System.Windows.Forms.Control> because <xref:System.Windows.Forms.Form> inherits from <xref:System.Windows.Forms.Control>, and with <xref:System.ComponentModel.IComponent> because <xref:System.Windows.Forms.Form> inherits from <xref:System.ComponentModel.Component>, which implements <xref:System.ComponentModel.IComponent>. However, `refForm` is not compatible with <xref:System.Windows.Forms.Label>.  \n  \n## See Also  \n [Is Operator](../../../visual-basic/language-reference/operators/is-operator.md)   \n [IsNot Operator](../../../visual-basic/language-reference/operators/isnot-operator.md)   \n [Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)","nodes":[{"pos":[4,781],"nodes":[{"content":"TypeOf Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,47],"content":"TypeOf Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"TypeOf Operator (Visual Basic) | Microsoft Docs","pos":[0,47]}]}],"pos":[6,56],"yaml":true}],"content":"title: \"TypeOf Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"TypeOf\"\n  - \"vb.TypeOf\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"types [Visual Basic], compatible\"\n  - \"comparison operators\"\n  - \"TypeOf...Is expression\"\n  - \"data types [Visual Basic], compatible\"\n  - \"TypeOf operator [Visual Basic]\"\n  - \"compatible data types\"\nms.assetid: 33f65296-659a-4b9a-9a29-c2a91cff68b2\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[788,818],"content":"TypeOf Operator (Visual Basic)","linkify":"TypeOf Operator (Visual Basic)","nodes":[{"content":"TypeOf Operator (Visual Basic)","pos":[0,30]}]},{"content":"Compares an object reference variable to a data type.","pos":[819,872]},{"pos":[881,887],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1029,1034],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Returned.","pos":[1050,1059]},{"content":"A <ph id=\"ph1\">`Boolean`</ph> value.","pos":[1060,1078],"source":" A `Boolean` value."},{"content":"Required.","pos":[1107,1116]},{"content":"Any expression that evaluates to a reference type.","pos":[1117,1167]},{"content":"Required.","pos":[1188,1197]},{"content":"Any data type name.","pos":[1198,1217]},{"pos":[1226,1233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`TypeOf`</ph> operator determines whether the run-time type of <ph id=\"ph2\">`objectexpression`</ph> is compatible with <ph id=\"ph3\">`typename`</ph>.","pos":[1237,1348],"source":"The `TypeOf` operator determines whether the run-time type of `objectexpression` is compatible with `typename`."},{"content":"The compatibility depends on the type category of <ph id=\"ph1\">`typename`</ph>.","pos":[1349,1410],"source":" The compatibility depends on the type category of `typename`."},{"content":"The following table shows how compatibility is determined.","pos":[1411,1469]},{"pos":[1476,1503],"content":"Type category of <ph id=\"ph1\">`typename`</ph>","source":"Type category of `typename`"},{"content":"Compatibility criterion","pos":[1504,1527]},{"content":"Class","pos":[1600,1605]},{"pos":[1606,1674],"content":"<ph id=\"ph1\">`objectexpression`</ph> is of type <ph id=\"ph2\">`typename`</ph> or inherits from <ph id=\"ph3\">`typename`</ph>","source":"`objectexpression` is of type `typename` or inherits from `typename`"},{"content":"Structure","pos":[1679,1688]},{"pos":[1689,1729],"content":"<ph id=\"ph1\">`objectexpression`</ph> is of type <ph id=\"ph2\">`typename`</ph>","source":"`objectexpression` is of type `typename`"},{"content":"Interface","pos":[1734,1743]},{"pos":[1744,1836],"content":"<ph id=\"ph1\">`objectexpression`</ph> implements <ph id=\"ph2\">`typename`</ph> or inherits from a class that implements <ph id=\"ph3\">`typename`</ph>","source":"`objectexpression` implements `typename` or inherits from a class that implements `typename`"},{"content":"If the run-time type of <ph id=\"ph1\">`objectexpression`</ph> satisfies the compatibility criterion, <ph id=\"ph2\">`result`</ph> is <ph id=\"ph3\">`True`</ph>.","pos":[1844,1945],"source":"If the run-time type of `objectexpression` satisfies the compatibility criterion, `result` is `True`."},{"content":"Otherwise, <ph id=\"ph1\">`result`</ph> is <ph id=\"ph2\">`False`</ph>.","pos":[1946,1977],"source":" Otherwise, `result` is `False`."},{"content":"If <ph id=\"ph1\">`objectexpression`</ph> is null, then <ph id=\"ph2\">`TypeOf`</ph>...<ph id=\"ph3\">`Is`</ph> returns <ph id=\"ph4\">`False`</ph>, and ...<ph id=\"ph5\">`IsNot`</ph> returns <ph id=\"ph6\">`True`</ph>.","pos":[1979,2078],"source":"  If `objectexpression` is null, then `TypeOf`...`Is` returns `False`, and ...`IsNot` returns `True`."},{"pos":[2085,2247],"content":"<ph id=\"ph1\">`TypeOf`</ph> is always used with the <ph id=\"ph2\">`Is`</ph> keyword to construct a <ph id=\"ph3\">`TypeOf`</ph>...<ph id=\"ph4\">`Is`</ph> expression, or with the <ph id=\"ph5\">`IsNot`</ph> keyword to construct a <ph id=\"ph6\">`TypeOf`</ph>...<ph id=\"ph7\">`IsNot`</ph> expression.","source":"`TypeOf` is always used with the `Is` keyword to construct a `TypeOf`...`Is` expression, or with the `IsNot` keyword to construct a `TypeOf`...`IsNot` expression."},{"pos":[2256,2263],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2267,2411],"content":"The following example uses <ph id=\"ph1\">`TypeOf`</ph>...<ph id=\"ph2\">`Is`</ph> expressions to test the type compatibility of two object reference variables with various data types.","source":"The following example uses `TypeOf`...`Is` expressions to test the type compatibility of two object reference variables with various data types."},{"pos":[2418,2546],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#39<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/typeof-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#39](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/typeof-operator_1.vb)]"},{"content":"The variable <ph id=\"ph1\">`refInteger`</ph> has a run-time type of <ph id=\"ph2\">`Integer`</ph>.","pos":[2553,2612],"source":"The variable `refInteger` has a run-time type of `Integer`."},{"content":"It is compatible with <ph id=\"ph1\">`Integer`</ph> but not with <ph id=\"ph2\">`Double`</ph>.","pos":[2613,2667],"source":" It is compatible with `Integer` but not with `Double`."},{"content":"The variable <ph id=\"ph1\">`refForm`</ph> has a run-time type of <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form&gt;</ph>.","pos":[2668,2747],"source":" The variable `refForm` has a run-time type of <xref:System.Windows.Forms.Form>."},{"content":"It is compatible with <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form&gt;</ph> because that is its type, with <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control&gt;</ph> because <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Form&gt;</ph> inherits from <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Control&gt;</ph>, and with <ph id=\"ph5\">&lt;xref:System.ComponentModel.IComponent&gt;</ph> because <ph id=\"ph6\">&lt;xref:System.Windows.Forms.Form&gt;</ph> inherits from <ph id=\"ph7\">&lt;xref:System.ComponentModel.Component&gt;</ph>, which implements <ph id=\"ph8\">&lt;xref:System.ComponentModel.IComponent&gt;</ph>.","pos":[2748,3163],"source":" It is compatible with <xref:System.Windows.Forms.Form> because that is its type, with <xref:System.Windows.Forms.Control> because <xref:System.Windows.Forms.Form> inherits from <xref:System.Windows.Forms.Control>, and with <xref:System.ComponentModel.IComponent> because <xref:System.Windows.Forms.Form> inherits from <xref:System.ComponentModel.Component>, which implements <xref:System.ComponentModel.IComponent>."},{"content":"However, <ph id=\"ph1\">`refForm`</ph> is not compatible with <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Label&gt;</ph>.","pos":[3164,3240],"source":" However, `refForm` is not compatible with <xref:System.Windows.Forms.Label>."},{"pos":[3249,3257],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Is Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/is-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[3261,3342],"source":"[Is Operator](../../../visual-basic/language-reference/operators/is-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>IsNot Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/isnot-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[3346,3433],"source":"[IsNot Operator](../../../visual-basic/language-reference/operators/isnot-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3437,3585],"source":"[Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[3589,3702],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[3706,3831],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept>","pos":[3835,3956],"source":"[Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)"}]}