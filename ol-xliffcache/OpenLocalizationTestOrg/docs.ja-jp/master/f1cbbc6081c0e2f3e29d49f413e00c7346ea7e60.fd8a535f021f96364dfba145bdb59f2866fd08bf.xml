{"content":"---\ntitle: \"Main() and command-line arguments - C# Programming Guide\"\nms.custom: seodec18\nms.date: 08/02/2017\nf1_keywords: \n  - \"CS5001\"\n  - \"main_CSharpKeyword\"\n  - \"Main\"\nhelpviewer_keywords: \n  - \"Main method [C#]\"\n  - \"C# language, command-line arguments\"\n  - \"arguments [C#], command-line\"\n  - \"command line [C#], arguments\"\n  - \"command-line arguments [C#], Main method\"\nms.assetid: 73a17231-cf96-44ea-aa8a-54807c6fb1f4\n---\n# Main() and command-line arguments (C# Programming Guide)\n\nThe `Main` method is the entry point of a C# application. (Libraries and services do not require a `Main` method as an entry point.) When the application is started, the `Main` method is the first method that is invoked.\n\n There can only be one entry point in a C# program. If you have more than one class that has a `Main` method, you must compile your program with the **/main** compiler option to specify which `Main` method to use as the entry point. For more information, see [/main (C# Compiler Options)](../../../csharp/language-reference/compiler-options/main-compiler-option.md).\n\n [!code-csharp[csProgGuideMain#17](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideMain/CS/Class1.cs#17)]\n\n## Overview\n\n- The `Main` method is the entry point of an executable program; it is where the program control starts and ends.\n- `Main` is declared inside a class or struct. `Main` must be [static](../../../csharp/language-reference/keywords/static.md) and it need not be [public](../../../csharp/language-reference/keywords/public.md). (In the earlier example, it receives the default access of [private](../../../csharp/language-reference/keywords/private.md).) The enclosing class or struct is not required to be static.\n- `Main` can either have a `void`, `int`, or, starting with C# 7.1, `Task`, or `Task<int>` return type.\n- If and only if `Main` returns a `Task` or `Task<int>`, the declaration of `Main` may include the [`async`](../../language-reference/keywords/async.md) modifier. Note that this specifically excludes an `async void Main` method.\n- The `Main` method can be declared with or without a `string[]` parameter that contains command-line arguments. When using Visual Studio to create Windows applications, you can add the parameter manually or else use the <xref:System.Environment> class to obtain the command-line arguments. Parameters are read as zero-indexed command-line arguments. Unlike C and C++, the name of the program is not treated as the first command-line argument.\n\nThe addition of `async` and `Task`, `Task<int>` return types simplifies program code when console applications need to start and `await` asynchronous operations in `Main`.\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)\n- [Inside a C# Program](../../../csharp/programming-guide/inside-a-program/index.md)\n","nodes":[{"pos":[4,425],"embed":true,"restype":"x-metadata","content":"title: \"Main() and command-line arguments - C# Programming Guide\"\nms.custom: seodec18\nms.date: 08/02/2017\nf1_keywords: \n  - \"CS5001\"\n  - \"main_CSharpKeyword\"\n  - \"Main\"\nhelpviewer_keywords: \n  - \"Main method [C#]\"\n  - \"C# language, command-line arguments\"\n  - \"arguments [C#], command-line\"\n  - \"command line [C#], arguments\"\n  - \"command-line arguments [C#], Main method\"\nms.assetid: 73a17231-cf96-44ea-aa8a-54807c6fb1f4","nodes":[{"content":"Main() and command-line arguments - C# Programming Guide","nodes":[{"pos":[0,56],"content":"Main() and command-line arguments - C# Programming Guide","nodes":[{"content":"Main() and command-line arguments - C# Programming Guide","pos":[0,56]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[432,488],"content":"Main() and command-line arguments (C# Programming Guide)","linkify":"Main() and command-line arguments (C# Programming Guide)","nodes":[{"content":"Main() and command-line arguments (C# Programming Guide)","pos":[0,56]}]},{"content":"The <ph id=\"ph1\">`Main`</ph> method is the entry point of a C# application.","pos":[490,547],"source":"The `Main` method is the entry point of a C# application."},{"content":"(Libraries and services do not require a <ph id=\"ph1\">`Main`</ph> method as an entry point.) When the application is started, the <ph id=\"ph2\">`Main`</ph> method is the first method that is invoked.","pos":[548,710],"source":" (Libraries and services do not require a `Main` method as an entry point.) When the application is started, the `Main` method is the first method that is invoked."},{"content":"There can only be one entry point in a C# program.","pos":[713,763]},{"content":"If you have more than one class that has a <ph id=\"ph1\">`Main`</ph> method, you must compile your program with the <bpt id=\"p1\">**</bpt>/main<ept id=\"p1\">**</ept> compiler option to specify which <ph id=\"ph2\">`Main`</ph> method to use as the entry point.","pos":[764,944],"source":" If you have more than one class that has a `Main` method, you must compile your program with the **/main** compiler option to specify which `Main` method to use as the entry point."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/main (C# Compiler Options)<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/main-compiler-option.md)</ept>.","pos":[945,1078],"source":" For more information, see [/main (C# Compiler Options)](../../../csharp/language-reference/compiler-options/main-compiler-option.md)."},{"pos":[1200,1208],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"pos":[1212,1323],"content":"The <ph id=\"ph1\">`Main`</ph> method is the entry point of an executable program; it is where the program control starts and ends.","source":"The `Main` method is the entry point of an executable program; it is where the program control starts and ends."},{"content":"<ph id=\"ph1\">`Main`</ph> is declared inside a class or struct.","pos":[1326,1370],"source":"`Main` is declared inside a class or struct."},{"content":"<ph id=\"ph1\">`Main`</ph> must be <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> and it need not be <bpt id=\"p2\">[</bpt>public<ept id=\"p2\">](../../../csharp/language-reference/keywords/public.md)</ept>.","pos":[1371,1533],"source":"`Main` must be [static](../../../csharp/language-reference/keywords/static.md) and it need not be [public](../../../csharp/language-reference/keywords/public.md)."},{"content":"(In the earlier example, it receives the default access of <bpt id=\"p1\">[</bpt>private<ept id=\"p1\">](../../../csharp/language-reference/keywords/private.md)</ept>.) The enclosing class or struct is not required to be static.","pos":[1534,1720],"source":" (In the earlier example, it receives the default access of [private](../../../csharp/language-reference/keywords/private.md).) The enclosing class or struct is not required to be static."},{"pos":[1723,1824],"content":"<ph id=\"ph1\">`Main`</ph> can either have a <ph id=\"ph2\">`void`</ph>, <ph id=\"ph3\">`int`</ph>, or, starting with C# 7.1, <ph id=\"ph4\">`Task`</ph>, or <ph id=\"ph5\">`Task&lt;int&gt;`</ph> return type.","source":"`Main` can either have a `void`, `int`, or, starting with C# 7.1, `Task`, or `Task<int>` return type."},{"content":"If and only if <ph id=\"ph1\">`Main`</ph> returns a <ph id=\"ph2\">`Task`</ph> or <ph id=\"ph3\">`Task&lt;int&gt;`</ph>, the declaration of <ph id=\"ph4\">`Main`</ph> may include the <bpt id=\"p1\">[</bpt><ph id=\"ph5\">`async`</ph><ept id=\"p1\">](../../language-reference/keywords/async.md)</ept> modifier.","pos":[1827,1987],"source":"If and only if `Main` returns a `Task` or `Task<int>`, the declaration of `Main` may include the [`async`](../../language-reference/keywords/async.md) modifier."},{"content":"Note that this specifically excludes an <ph id=\"ph1\">`async void Main`</ph> method.","pos":[1988,2053],"source":" Note that this specifically excludes an `async void Main` method."},{"content":"The <ph id=\"ph1\">`Main`</ph> method can be declared with or without a <ph id=\"ph2\">`string[]`</ph> parameter that contains command-line arguments.","pos":[2056,2166],"source":"The `Main` method can be declared with or without a `string[]` parameter that contains command-line arguments."},{"content":"When using Visual Studio to create Windows applications, you can add the parameter manually or else use the <ph id=\"ph1\">&lt;xref:System.Environment&gt;</ph> class to obtain the command-line arguments.","pos":[2167,2344],"source":" When using Visual Studio to create Windows applications, you can add the parameter manually or else use the <xref:System.Environment> class to obtain the command-line arguments."},{"content":"Parameters are read as zero-indexed command-line arguments.","pos":[2345,2404]},{"content":"Unlike C and C++, the name of the program is not treated as the first command-line argument.","pos":[2405,2497]},{"pos":[2499,2670],"content":"The addition of <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`Task`</ph>, <ph id=\"ph3\">`Task&lt;int&gt;`</ph> return types simplifies program code when console applications need to start and <ph id=\"ph4\">`await`</ph> asynchronous operations in <ph id=\"ph5\">`Main`</ph>.","source":"The addition of `async` and `Task`, `Task<int>` return types simplifies program code when console applications need to start and `await` asynchronous operations in `Main`."},{"pos":[2675,2700],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2766,2774],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2778,2905],"content":"<bpt id=\"p1\">[</bpt>Command-line Building With csc.exe<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>","source":"[Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)"},{"pos":[2908,2974],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2977,3052],"content":"<bpt id=\"p1\">[</bpt>Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept>","source":"[Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)"},{"pos":[3055,3137],"content":"<bpt id=\"p1\">[</bpt>Inside a C# Program<ept id=\"p1\">](../../../csharp/programming-guide/inside-a-program/index.md)</ept>","source":"[Inside a C# Program](../../../csharp/programming-guide/inside-a-program/index.md)"}]}