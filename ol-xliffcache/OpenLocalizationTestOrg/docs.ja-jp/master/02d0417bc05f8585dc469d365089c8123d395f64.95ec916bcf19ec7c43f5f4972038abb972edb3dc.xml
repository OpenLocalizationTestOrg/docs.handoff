{"content":"---\ntitle: \"Remote vs. Local Execution\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: ee50e943-9349-4c84-ab1c-c35d3ada1a9c\n---\n# Remote vs. Local Execution\nYou can decide to execute your queries either remotely (that is, the database engine executes the query against the database) or locally ([!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] executes the query against a local cache).  \n  \n## Remote Execution  \n Consider the following query:  \n  \n [!code-csharp[DLinqQueryConcepts#7](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryConcepts/cs/Program.cs#7)]\n [!code-vb[DLinqQueryConcepts#7](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryConcepts/vb/Module1.vb#7)]  \n  \n If your database has thousands of rows of orders, you do not want to retrieve them all to process a small subset. In [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)], the <xref:System.Data.Linq.EntitySet%601> class implements the <xref:System.Linq.IQueryable> interface. This approach makes sure that such queries can be executed remotely. Two major benefits flow from this technique:  \n  \n-   Unnecessary data is not retrieved.  \n  \n-   A query executed by the database engine is often more efficient because of the database indexes.  \n  \n## Local Execution  \n In other situations, you might want to have the complete set of related entities in the local cache. For this purpose, <xref:System.Data.Linq.EntitySet%601> provides the <xref:System.Data.Linq.EntitySet%601.Load%2A> method to explicitly load all the members of the <xref:System.Data.Linq.EntitySet%601>.  \n  \n If an <xref:System.Data.Linq.EntitySet%601> is already loaded, subsequent queries are executed locally. This approach helps in two ways:  \n  \n-   If the complete set must be used locally or multiple times, you can avoid remote queries and associated latencies.  \n  \n-   The entity can be serialized as a complete entity.  \n  \n The following code fragment illustrates how local execution can be obtained:  \n  \n [!code-csharp[DLinqQueryConcepts#8](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryConcepts/cs/Program.cs#8)]\n [!code-vb[DLinqQueryConcepts#8](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryConcepts/vb/Module1.vb#8)]  \n  \n## Comparison  \n These two capabilities provide a powerful combination of options: remote execution for large collections and local execution for small collections or where the complete collection is needed. You implement remote execution through <xref:System.Linq.IQueryable>, and local execution against an in-memory <xref:System.Collections.Generic.IEnumerable%601> collection. To force local execution (that is, <xref:System.Collections.Generic.IEnumerable%601>), see [Convert a Type to a Generic IEnumerable](../../../../../../docs/framework/data/adonet/sql/linq/convert-a-type-to-a-generic-ienumerable.md).  \n  \n### Queries Against Unordered Sets  \n Note the important difference between a local collection that implements <xref:System.Collections.Generic.List%601> and a collection that provides remote queries executed against *unordered sets* in a relational database. <xref:System.Collections.Generic.List%601> methods such as those that use index values require list semantics, which typically cannot be obtained through a remote query against an unordered set. For this reason, such methods implicitly load the <xref:System.Data.Linq.EntitySet%601> to allow local execution.  \n  \n## See also\n\n- [Query Concepts](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)\n","nodes":[{"pos":[4,144],"embed":true,"restype":"x-metadata","content":"title: \"Remote vs. Local Execution\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: ee50e943-9349-4c84-ab1c-c35d3ada1a9c","nodes":[{"content":"Remote vs. Local Execution","nodes":[{"pos":[0,26],"content":"Remote vs. Local Execution","nodes":[{"content":"Remote vs. Local Execution","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[151,177],"content":"Remote vs. Local Execution","linkify":"Remote vs. Local Execution","nodes":[{"content":"Remote vs. Local Execution","pos":[0,26]}]},{"pos":[178,426],"content":"You can decide to execute your queries either remotely (that is, the database engine executes the query against the database) or locally (<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> executes the query against a local cache).","source":"You can decide to execute your queries either remotely (that is, the database engine executes the query against the database) or locally ([!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] executes the query against a local cache)."},{"pos":[435,451],"content":"Remote Execution","linkify":"Remote Execution","nodes":[{"content":"Remote Execution","pos":[0,16]}]},{"content":"Consider the following query:","pos":[455,484]},{"content":"If your database has thousands of rows of orders, you do not want to retrieve them all to process a small subset.","pos":[763,876]},{"content":"In <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> class implements the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryable&gt;</ph> interface.","pos":[877,1052],"source":" In [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)], the <xref:System.Data.Linq.EntitySet%601> class implements the <xref:System.Linq.IQueryable> interface."},{"content":"This approach makes sure that such queries can be executed remotely.","pos":[1053,1121]},{"content":"Two major benefits flow from this technique:","pos":[1122,1166]},{"content":"Unnecessary data is not retrieved.","pos":[1176,1210]},{"content":"A query executed by the database engine is often more efficient because of the database indexes.","pos":[1220,1316]},{"pos":[1325,1340],"content":"Local Execution","linkify":"Local Execution","nodes":[{"content":"Local Execution","pos":[0,15]}]},{"content":"In other situations, you might want to have the complete set of related entities in the local cache.","pos":[1344,1444]},{"content":"For this purpose, <ph id=\"ph1\">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> provides the <ph id=\"ph2\">&lt;xref:System.Data.Linq.EntitySet%601.Load%2A&gt;</ph> method to explicitly load all the members of the <ph id=\"ph3\">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph>.","pos":[1445,1647],"source":" For this purpose, <xref:System.Data.Linq.EntitySet%601> provides the <xref:System.Data.Linq.EntitySet%601.Load%2A> method to explicitly load all the members of the <xref:System.Data.Linq.EntitySet%601>."},{"content":"If an <ph id=\"ph1\">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> is already loaded, subsequent queries are executed locally.","pos":[1654,1757],"source":"If an <xref:System.Data.Linq.EntitySet%601> is already loaded, subsequent queries are executed locally."},{"content":"This approach helps in two ways:","pos":[1758,1790]},{"content":"If the complete set must be used locally or multiple times, you can avoid remote queries and associated latencies.","pos":[1800,1914]},{"content":"The entity can be serialized as a complete entity.","pos":[1924,1974]},{"content":"The following code fragment illustrates how local execution can be obtained:","pos":[1981,2057]},{"pos":[2064,2329],"content":"[!code-csharp[DLinqQueryConcepts#8](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryConcepts/cs/Program.cs#8)]\n[!code-vb[DLinqQueryConcepts#8](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryConcepts/vb/Module1.vb#8)]","leadings":[""," "],"nodes":[]},{"pos":[2338,2348],"content":"Comparison","linkify":"Comparison","nodes":[{"content":"Comparison","pos":[0,10]}]},{"content":"These two capabilities provide a powerful combination of options: remote execution for large collections and local execution for small collections or where the complete collection is needed.","pos":[2352,2542]},{"content":"You implement remote execution through <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable&gt;</ph>, and local execution against an in-memory <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection.","pos":[2543,2715],"source":" You implement remote execution through <xref:System.Linq.IQueryable>, and local execution against an in-memory <xref:System.Collections.Generic.IEnumerable%601> collection."},{"content":"To force local execution (that is, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>), see <bpt id=\"p1\">[</bpt>Convert a Type to a Generic IEnumerable<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/convert-a-type-to-a-generic-ienumerable.md)</ept>.","pos":[2716,2947],"source":" To force local execution (that is, <xref:System.Collections.Generic.IEnumerable%601>), see [Convert a Type to a Generic IEnumerable](../../../../../../docs/framework/data/adonet/sql/linq/convert-a-type-to-a-generic-ienumerable.md)."},{"pos":[2957,2987],"content":"Queries Against Unordered Sets","linkify":"Queries Against Unordered Sets","nodes":[{"content":"Queries Against Unordered Sets","pos":[0,30]}]},{"content":"Note the important difference between a local collection that implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> and a collection that provides remote queries executed against <bpt id=\"p1\">*</bpt>unordered sets<ept id=\"p1\">*</ept> in a relational database.","pos":[2991,3212],"source":"Note the important difference between a local collection that implements <xref:System.Collections.Generic.List%601> and a collection that provides remote queries executed against *unordered sets* in a relational database."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> methods such as those that use index values require list semantics, which typically cannot be obtained through a remote query against an unordered set.","pos":[3213,3407],"source":"<xref:System.Collections.Generic.List%601> methods such as those that use index values require list semantics, which typically cannot be obtained through a remote query against an unordered set."},{"content":"For this reason, such methods implicitly load the <ph id=\"ph1\">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> to allow local execution.","pos":[3408,3521],"source":" For this reason, such methods implicitly load the <xref:System.Data.Linq.EntitySet%601> to allow local execution."},{"pos":[3530,3538],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3542,3631],"content":"<bpt id=\"p1\">[</bpt>Query Concepts<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)</ept>","source":"[Query Concepts](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)"}]}