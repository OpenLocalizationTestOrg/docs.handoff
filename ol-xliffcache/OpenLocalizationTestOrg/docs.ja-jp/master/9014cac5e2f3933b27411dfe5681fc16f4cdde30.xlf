<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="comparison-operators.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9014cac5e2f3933b27411dfe5681fc16f4cdde30</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\comparison-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fc16d1d3d4873c5d3c1944af3bdceff6be0cab3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce1362656704d0342462053968876c176cc2e589</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Comparison Operators (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Comparison Operators (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following are the comparison operators defined in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;`</ph> operator</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;=`</ph> operator</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;`</ph> operator</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;=`</ph> operator</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`=`</ph> operator</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;&gt;`</ph> operator</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Is Operator<ept id="p1">](../../../visual-basic/language-reference/operators/is-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IsNot Operator<ept id="p1">](../../../visual-basic/language-reference/operators/isnot-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Like Operator<ept id="p1">](../../../visual-basic/language-reference/operators/like-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These operators compare two expressions to determine whether or not they are equal, and if not, how they differ.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Is`</ph>, <ph id="ph2">`IsNot`</ph>, and <ph id="ph3">`Like`</ph> are discussed in detail on separate Help pages.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The relational comparison operators are discussed in detail on this page.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Boolean`</ph> value representing the result of the comparison.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Any expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Any relational comparison operator.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`object1`</ph>, <ph id="ph2">`object2`</ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Any reference object names.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`String`</ph> expression or range of characters.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following table contains a list of the relational comparison operators and the conditions that determine whether <ph id="ph1">`result`</ph> is <ph id="ph2">`True`</ph> or <ph id="ph3">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`True`</ph> if</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`False`</ph> if</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;`</ph> (Less than)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;=`</ph> (Less than or equal to)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;`</ph> (Greater than)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;=`</ph> (Greater than or equal to)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`=`</ph> (Equal to)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;&gt;`</ph> (Not equal to)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>= Operator<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operator.md)</ept> is also used as an assignment operator.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Is`</ph> operator, the <ph id="ph2">`IsNot`</ph> operator, and the <ph id="ph3">`Like`</ph> operator have specific comparison functionalities that differ from the operators in the preceding table.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Comparing Numbers</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When you compare an expression of type <ph id="ph1">`Single`</ph> to one of type <ph id="ph2">`Double`</ph>, the <ph id="ph3">`Single`</ph> expression is converted to <ph id="ph4">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This behavior is opposite to the behavior found in Visual Basic 6.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Similarly, when you compare an expression of type <ph id="ph1">`Decimal`</ph> to an expression of type <ph id="ph2">`Single`</ph> or <ph id="ph3">`Double`</ph>, the <ph id="ph4">`Decimal`</ph> expression is converted to <ph id="ph5">`Single`</ph> or <ph id="ph6">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`Decimal`</ph> expressions, any fractional value less than 1E-28 might be lost.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Such fractional value loss may cause two values to compare as equal when they are not.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For this reason, you should take care when using equality (<ph id="ph1">`=`</ph>) to compare two floating-point variables.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is safer to test whether the absolute value of the difference between the two numbers is less than a small acceptable tolerance.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Floating-point Imprecision</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When you work with floating-point numbers, keep in mind that they do not always have a precise representation in memory.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This could lead to unexpected results from certain operations, such as value comparison and the <bpt id="p1">[</bpt>Mod Operator<ept id="p1">](../../../visual-basic/language-reference/operators/mod-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Troubleshooting Data Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Comparing Strings</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you compare strings, the string expressions are evaluated based on their alphabetical sort order, which depends on the <ph id="ph1">`Option Compare`</ph> setting.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Option Compare Binary`</ph> bases string comparisons on a sort order derived from the internal binary representations of the characters.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The sort order is determined by the code page.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example shows a typical binary sort order.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Option Compare Text`</ph> bases string comparisons on a case-insensitive, textual sort order determined by your application's locale.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When you set <ph id="ph1">`Option Compare Text`</ph> and sort the characters in the preceding example, the following text sort order applies:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Locale Dependence</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When you set <ph id="ph1">`Option Compare Text`</ph>, the result of a string comparison can depend on the locale in which the application is running.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Two characters might compare as equal in one locale but not in another.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you are using a string comparison to make important decisions, such as whether to accept an attempt to log on, you should be alert to locale sensitivity.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Consider either setting <ph id="ph1">`Option Compare Binary`</ph> or calling the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Strings.StrComp%2A&gt;</ph>, which takes the locale into account.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Typeless Programming with Relational Comparison Operators</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The use of relational comparison operators with <ph id="ph1">`Object`</ph> expressions is not allowed under <ph id="ph2">`Option Strict On`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`Off`</ph>, and either <ph id="ph3">`expression1`</ph> or <ph id="ph4">`expression2`</ph> is an <ph id="ph5">`Object`</ph> expression, the run-time types determine how they are compared.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following table shows how the expressions are compared and the result from the comparison, depending on the runtime type of the operands.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If operands are</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Comparison is</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`String`</ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Sort comparison based on string sorting characteristics.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Both numeric</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Objects converted to <ph id="ph1">`Double`</ph>, numeric comparison.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>One numeric and one <ph id="ph1">`String`</ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String`</ph> is converted to a <ph id="ph2">`Double`</ph> and numeric comparison is performed.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`String`</ph> cannot be converted to <ph id="ph2">`Double`</ph>, an <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Either or both are reference types other than <ph id="ph1">`String`</ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Numeric comparisons treat <ph id="ph1">`Nothing`</ph> as 0.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>String comparisons treat <ph id="ph1">`Nothing`</ph> as <ph id="ph2">`""`</ph> (an empty string).</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Overloading</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The relational comparison operators (<ph id="ph1">`&lt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;=`</ph>, <ph id="ph2">`&gt;`</ph>, <ph id="ph3">`&gt;=`</ph>, <ph id="ph4">`=`</ph>, <ph id="ph5">`&lt;&gt;`</ph>) can be <bpt id="p1">*</bpt>overloaded<ept id="p1">*</ept>, which means that a class or structure can redefine their behavior when an operand has the type of that class or structure.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If your code uses any of these operators on such a class or structure, be sure you understand the redefined behavior.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Notice that the <bpt id="p1">[</bpt>= Operator<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operator.md)</ept> can be overloaded only as a relational comparison operator, not as an assignment operator.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example shows various uses of relational comparison operators, which you use to compare expressions.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Relational comparison operators return a <ph id="ph1">`Boolean`</ph> result that represents whether or not the stated expression evaluates to <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When you apply the <ph id="ph1">`&gt;`</ph> and <ph id="ph2">`&lt;`</ph> operators to strings, the comparison is made using the normal alphabetical sorting order of the strings.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This order can be dependent on your locale setting.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Whether the sort is case-sensitive or not depends on the <bpt id="p1">[</bpt>Option Compare<ept id="p1">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept> setting.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In the preceding example, the first comparison returns <ph id="ph1">`False`</ph> and the remaining comparisons return <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>= Operator<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Data Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparison Operators in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>