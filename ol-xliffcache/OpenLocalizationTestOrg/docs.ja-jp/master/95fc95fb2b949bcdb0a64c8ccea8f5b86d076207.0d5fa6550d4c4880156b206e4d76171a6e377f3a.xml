{"content":"---\ntitle: \"How to: Programmatically Add Discoverability to a WCF Service and Client | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 4f7ae7ab-6fc8-4769-9730-c14d43f7b9b1\ncaps.latest.revision: 13\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Programmatically Add Discoverability to a WCF Service and Client\nThis topic explains how to make a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service discoverable. It is based on the [Self-Host](http://go.microsoft.com/fwlink/?LinkId=145523) sample.  \n  \n### To configure the existing Self-Host service sample for Discovery  \n  \n1.  Open the Self-Host solution in [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]. The sample is located in the TechnologySamples\\Basic\\Service\\Hosting\\SelfHost directory.  \n  \n2.  Add a reference to `System.ServiceModel.Discovery.dll` to the service project. You may see an error message saying \"System. ServiceModel.Discovery.dll or one of its dependencies requires a later version of the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] than the one specified in the project â€¦\" If you see this message, right-click the project in the Solution Explorer and choose **Properties**. In the **Project Properties** window, make sure that the **Target Framework** is [!INCLUDE[netfx_current_long](../../../../includes/netfx-current-long-md.md)].  \n  \n3.  Open the Service.cs file and add the following `using` statement.  \n  \n    ```csharp  \n    using System.ServiceModel.Discovery;  \n    ```  \n  \n4.  In the `Main()` method, inside the `using` statement, add a <xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior> instance to the service host.  \n  \n    ```csharp  \n    public static void Main()  \n    {  \n        // Create a ServiceHost for the CalculatorService type.  \n        using (ServiceHost serviceHost = new ServiceHost(typeof(CalculatorService)))  \n        {  \n            // Add a ServiceDiscoveryBehavior  \n            serviceHost.Description.Behaviors.Add(new ServiceDiscoveryBehavior());                  \n  \n            // ...  \n        }  \n    }  \n    ```  \n  \n     The <xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior> specifies that the service it is applied to is discoverable.  \n  \n5.  Add a <xref:System.ServiceModel.Discovery.UdpDiscoveryEndpoint> to the service host right after the code that adds the <xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior>.  \n  \n    ```csharp  \n    // Add ServiceDiscoveryBehavior  \n    serviceHost.Description.Behaviors.Add(new ServiceDiscoveryBehavior());  \n  \n    // Add a UdpDiscoveryEndpoint  \n    serviceHost.AddServiceEndpoint(new UdpDiscoveryEndpoint());  \n    ```  \n  \n     This code specifies that discovery messages should be sent to the standard UDP discovery endpoint.  \n  \n### To create a client application that uses discovery to call the service  \n  \n1.  Add a new console application to the solution called `DiscoveryClientApp`.  \n  \n2.  Add a reference to `System.ServiceModel.dll` and `System.ServiceModel.Discovery.dll`  \n  \n3.  Copy the GeneratedClient.cs and App.config files from the existing client project to the new DiscoveryClientApp project. To do this, right-click the files in the **Solution Explorer**, select **Copy**, and then select the **DiscoveryClientApp** project, right-click and select **Paste**.  \n  \n4.  Open Program.cs.  \n  \n5.  Add the following `using` statements.  \n  \n    ```csharp  \n    using System.ServiceModel;  \n    using System.ServiceModel.Discovery;  \n    using Microsoft.ServiceModel.Samples;  \n    ```  \n  \n6.  Add a static method called `FindCalculatorServiceAddress()` to the `Program` class.  \n  \n    ```csharp  \n    static EndpointAddress FindCalculatorServiceAddress()  \n    {  \n    }  \n    ```  \n  \n     This method uses discovery to search for the `CalculatorService` service.  \n  \n7.  Inside the `FindCalculatorServiceAddress` method, create a new <xref:System.ServiceModel.Discovery.DiscoveryClient> instance, passing in a <xref:System.ServiceModel.Discovery.UdpDiscoveryEndpoint> to the constructor.  \n  \n    ```csharp  \n    static EndpointAddress FindCalculatorServiceAddress()  \n    {  \n        // Create DiscoveryClient  \n        DiscoveryClient discoveryClient = new DiscoveryClient(new UdpDiscoveryEndpoint());  \n    }  \n    ```  \n  \n     This tells [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] that the <xref:System.ServiceModel.Discovery.DiscoveryClient> class should use the standard UDP discovery endpoint to send and receive discovery messages.  \n  \n8.  On the next line, call the <xref:System.ServiceModel.Discovery.DiscoveryClient.Find%2A> method and specify a <xref:System.ServiceModel.Discovery.FindCriteria> instance that contains the service contract you want to search for. In this case, specify `ICalculator`.  \n  \n    ```csharp  \n    // Find ICalculatorService endpoints              \n    FindResponse findResponse = discoveryClient.Find(new FindCriteria(typeof(ICalculator)));  \n    ```  \n  \n9. After the call to <xref:System.ServiceModel.Discovery.DiscoveryClient.Find%2A>, check to see if there is at least one matching service and return the <xref:System.ServiceModel.EndpointAddress> of the first matching service. Otherwise return `null`.  \n  \n    ```csharp  \n    if (findResponse.Endpoints.Count > 0)  \n    {  \n        return findResponse.Endpoints[0].Address;  \n    }  \n    else  \n    {  \n        return null;  \n    }  \n    ```  \n  \n10. Add a static method named `InvokeCalculatorService` to the `Program` class.  \n  \n    ```csharp  \n    static void InvokeCalculatorService(EndpointAddress endpointAddress)  \n    {  \n    }  \n    ```  \n  \n     This method uses the endpoint address returned from `FindCalculatorServiceAddress` to call the calculator service.  \n  \n11. Inside the `InvokeCalculatorService` method, create an instance of the `CalculatorServiceClient` class. This class is defined by the [Self-Host](http://go.microsoft.com/fwlink/?LinkId=145523) sample. It was generated using Svcutil.exe.  \n  \n    ```csharp  \n    // Create a client  \n    CalculatorClient client = new CalculatorClient();  \n    ```  \n  \n12. On the next line, set the endpoint address of the client to the endpoint address returned from `FindCalculatorServiceAddress()`.  \n  \n    ```csharp  \n    // Connect to the discovered service endpoint  \n    client.Endpoint.Address = endpointAddress;  \n    ```  \n  \n13. Immediately after the code for the previous step, call the methods exposed by the calculator service.  \n  \n    ```csharp  \n    Console.WriteLine(\"Invoking CalculatorService at {0}\", endpointAddress);  \n  \n    double value1 = 100.00D;  \n    double value2 = 15.99D;  \n  \n    // Call the Add service operation.  \n    double result = client.Add(value1, value2);  \n    Console.WriteLine(\"Add({0},{1}) = {2}\", value1, value2, result);  \n  \n    // Call the Subtract service operation.  \n    result = client.Subtract(value1, value2);  \n    Console.WriteLine(\"Subtract({0},{1}) = {2}\", value1, value2, result);  \n  \n    // Call the Multiply service operation.  \n    result = client.Multiply(value1, value2);  \n    Console.WriteLine(\"Multiply({0},{1}) = {2}\", value1, value2, result);  \n  \n    // Call the Divide service operation.  \n    result = client.Divide(value1, value2);  \n    Console.WriteLine(\"Divide({0},{1}) = {2}\", value1, value2, result);  \n    Console.WriteLine();  \n  \n    //Closing the client gracefully closes the connection and cleans up resources  \n    client.Close();  \n    ```  \n  \n14. Add code to the `Main()` method in the `Program` class to call `FindCalculatorServiceAddress`.  \n  \n    ```csharp  \n    public static void Main()  \n    {  \n        EndpointAddress endpointAddress = FindCalculatorServiceAddress();  \n    }  \n    ```  \n  \n15. On the next line, call the `InvokeCalculatorService()` and pass in the endpoint address returned from `FindCalculatorServiceAddress()`.  \n  \n    ```csharp  \n    if (endpointAddress != null)  \n    {  \n        InvokeCalculatorService(endpointAddress);  \n    }  \n  \n    Console.WriteLine(\"Press <ENTER> to exit.\");  \n    Console.ReadLine();  \n    ```  \n  \n### To test the application  \n  \n1.  Open an elevated command prompt and run Service.exe.  \n  \n2.  Open a command prompt and run Discoveryclientapp.exe.  \n  \n3.  The output from service.exe should look like the following output.  \n  \n    ```Output  \n    Received Add(100,15.99)  \n    Return: 115.99  \n    Received Subtract(100,15.99)  \n    Return: 84.01  \n    Received Multiply(100,15.99)  \n    Return: 1599  \n    Received Divide(100,15.99)  \n    Return: 6.25390869293308  \n    ```  \n  \n4.  The output from Discoveryclientapp.exe should look like the following output.  \n  \n    ```Output  \n    Invoking CalculatorService at http://localhost:8000/ServiceModelSamples/service  \n    Add(100,15.99) = 115.99  \n    Subtract(100,15.99) = 84.01  \n    Multiply(100,15.99) = 1599  \n    Divide(100,15.99) = 6.25390869293308  \n  \n    Press <ENTER> to exit.  \n    ```  \n  \n## Example  \n The following is a listing of the code for this sample. Because this code is based on the [Self-Host](http://go.microsoft.com/fwlink/?LinkId=145523) sample, only those files that are changed are listed. [!INCLUDE[crabout](../../../../includes/crabout-md.md)] the Self-Host sample, see [Setup Instructions](http://go.microsoft.com/fwlink/?LinkId=145522).  \n  \n```csharp  \n// Service.cs  \nusing System;  \nusing System.Configuration;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Discovery;  \n  \nnamespace Microsoft.ServiceModel.Samples  \n{  \n    // See SelfHost sample for service contract and implementation  \n    // ...  \n  \n        // Host the service within this EXE console application.  \n        public static void Main()  \n        {  \n            // Create a ServiceHost for the CalculatorService type.  \n            using (ServiceHost serviceHost = new ServiceHost(typeof(CalculatorService)))  \n            {  \n                // Add the ServiceDiscoveryBehavior to make the service discoverable  \n                serviceHost.Description.Behaviors.Add(new ServiceDiscoveryBehavior());  \n                serviceHost.AddServiceEndpoint(new UdpDiscoveryEndpoint());  \n  \n                // Open the ServiceHost to create listeners and start listening for messages.  \n                serviceHost.Open();  \n  \n                // The service can now be accessed.  \n                Console.WriteLine(\"The service is ready.\");  \n                Console.WriteLine(\"Press <ENTER> to terminate service.\");  \n                Console.WriteLine();  \n                Console.ReadLine();  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```csharp  \n// Program.cs  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Discovery;  \nusing Microsoft.ServiceModel.Samples;  \nusing System.Text;  \n  \nnamespace DiscoveryClientApp  \n{  \n    class Program  \n    {  \n        static EndpointAddress FindCalculatorServiceAddress()  \n        {  \n            // Create DiscoveryClient  \n            DiscoveryClient discoveryClient = new DiscoveryClient(new UdpDiscoveryEndpoint());  \n  \n            // Find ICalculatorService endpoints              \n            FindResponse findResponse = discoveryClient.Find(new FindCriteria(typeof(ICalculator)));  \n  \n            if (findResponse.Endpoints.Count > 0)  \n            {  \n                return findResponse.Endpoints[0].Address;  \n            }  \n            else  \n            {  \n                return null;  \n            }  \n        }  \n  \n        static void InvokeCalculatorService(EndpointAddress endpointAddress)  \n        {  \n            // Create a client  \n            CalculatorClient client = new CalculatorClient();  \n  \n            // Connect to the discovered service endpoint  \n            client.Endpoint.Address = endpointAddress;  \n  \n            Console.WriteLine(\"Invoking CalculatorService at {0}\", endpointAddress);  \n  \n            double value1 = 100.00D;  \n            double value2 = 15.99D;  \n  \n            // Call the Add service operation.  \n            double result = client.Add(value1, value2);  \n            Console.WriteLine(\"Add({0},{1}) = {2}\", value1, value2, result);  \n  \n            // Call the Subtract service operation.  \n            result = client.Subtract(value1, value2);  \n            Console.WriteLine(\"Subtract({0},{1}) = {2}\", value1, value2, result);  \n  \n            // Call the Multiply service operation.  \n            result = client.Multiply(value1, value2);  \n            Console.WriteLine(\"Multiply({0},{1}) = {2}\", value1, value2, result);  \n  \n            // Call the Divide service operation.  \n            result = client.Divide(value1, value2);  \n            Console.WriteLine(\"Divide({0},{1}) = {2}\", value1, value2, result);  \n            Console.WriteLine();  \n  \n            //Closing the client gracefully closes the connection and cleans up resources  \n            client.Close();  \n        }  \n        static void Main(string[] args)  \n        {  \n            EndpointAddress endpointAddress = FindCalculatorServiceAddress();  \n  \n            if (endpointAddress != null)  \n            {  \n                InvokeCalculatorService(endpointAddress);  \n            }  \n  \n            Console.WriteLine(\"Press <ENTER> to exit.\");  \n            Console.ReadLine();  \n  \n        }  \n    }  \n}  \n```  \n\n## See Also  \n [WCF Discovery Overview](../../../../docs/framework/wcf/feature-details/wcf-discovery-overview.md)   \n [WCF Discovery Object Model](../../../../docs/framework/wcf/feature-details/wcf-discovery-object-model.md)","nodes":[{"pos":[12,101],"content":"How to: Programmatically Add Discoverability to a WCF Service and Client | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Programmatically Add Discoverability to a WCF Service and Client | Microsoft Docs","pos":[0,89]}]},{"pos":[400,472],"content":"How to: Programmatically Add Discoverability to a WCF Service and Client","linkify":"How to: Programmatically Add Discoverability to a WCF Service and Client","nodes":[{"content":"How to: Programmatically Add Discoverability to a WCF Service and Client","pos":[0,72]}]},{"content":"This topic explains how to make a <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> service discoverable.","pos":[473,584],"source":"This topic explains how to make a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service discoverable."},{"content":"It is based on the <bpt id=\"p1\">[</bpt>Self-Host<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=145523)</ept> sample.","pos":[585,670],"source":" It is based on the [Self-Host](http://go.microsoft.com/fwlink/?LinkId=145523) sample."},{"pos":[680,744],"content":"To configure the existing Self-Host service sample for Discovery","linkify":"To configure the existing Self-Host service sample for Discovery","nodes":[{"content":"To configure the existing Self-Host service sample for Discovery","pos":[0,64]}]},{"content":"Open the Self-Host solution in <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph>.","pos":[754,857],"source":"Open the Self-Host solution in [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]."},{"content":"The sample is located in the TechnologySamples\\Basic\\Service\\Hosting\\SelfHost directory.","pos":[858,946]},{"content":"Add a reference to <ph id=\"ph1\">`System.ServiceModel.Discovery.dll`</ph> to the service project.","pos":[956,1034],"source":"Add a reference to `System.ServiceModel.Discovery.dll` to the service project."},{"content":"You may see an error message saying \"System.","pos":[1035,1079]},{"content":"ServiceModel.Discovery.dll or one of its dependencies requires a later version of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> than the one specified in the project â€¦\"","pos":[1080,1270],"source":" ServiceModel.Discovery.dll or one of its dependencies requires a later version of the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] than the one specified in the project â€¦\""},{"content":"If you see this message, right-click the project in the Solution Explorer and choose <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>.","pos":[1271,1371],"source":" If you see this message, right-click the project in the Solution Explorer and choose **Properties**."},{"content":"In the <bpt id=\"p1\">**</bpt>Project Properties<ept id=\"p1\">**</ept> window, make sure that the <bpt id=\"p2\">**</bpt>Target Framework<ept id=\"p2\">**</ept> is <ph id=\"ph1\">[!INCLUDE[netfx_current_long](../../../../includes/netfx-current-long-md.md)]</ph>.","pos":[1372,1531],"source":" In the **Project Properties** window, make sure that the **Target Framework** is [!INCLUDE[netfx_current_long](../../../../includes/netfx-current-long-md.md)]."},{"pos":[1541,1606],"content":"Open the Service.cs file and add the following <ph id=\"ph1\">`using`</ph> statement.","source":"Open the Service.cs file and add the following `using` statement."},{"pos":[1688,1839],"content":"In the <ph id=\"ph1\">`Main()`</ph> method, inside the <ph id=\"ph2\">`using`</ph> statement, add a <ph id=\"ph3\">&lt;xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior&gt;</ph> instance to the service host.","source":"In the `Main()` method, inside the `using` statement, add a <xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior> instance to the service host."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior&gt;</ph> specifies that the service it is applied to is discoverable.","pos":[2277,2403],"source":"The <xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior> specifies that the service it is applied to is discoverable."},{"content":"Add a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Discovery.UdpDiscoveryEndpoint&gt;</ph> to the service host right after the code that adds the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior&gt;</ph>.","pos":[2413,2594],"source":"Add a <xref:System.ServiceModel.Discovery.UdpDiscoveryEndpoint> to the service host right after the code that adds the <xref:System.ServiceModel.Discovery.ServiceDiscoveryBehavior>."},{"content":"This code specifies that discovery messages should be sent to the standard UDP discovery endpoint.","pos":[2854,2952]},{"pos":[2962,3032],"content":"To create a client application that uses discovery to call the service","linkify":"To create a client application that uses discovery to call the service","nodes":[{"content":"To create a client application that uses discovery to call the service","pos":[0,70]}]},{"pos":[3042,3116],"content":"Add a new console application to the solution called <ph id=\"ph1\">`DiscoveryClientApp`</ph>.","source":"Add a new console application to the solution called `DiscoveryClientApp`."},{"pos":[3126,3210],"content":"Add a reference to <ph id=\"ph1\">`System.ServiceModel.dll`</ph> and <ph id=\"ph2\">`System.ServiceModel.Discovery.dll`</ph>","source":"Add a reference to `System.ServiceModel.dll` and `System.ServiceModel.Discovery.dll`"},{"content":"Copy the GeneratedClient.cs and App.config files from the existing client project to the new DiscoveryClientApp project.","pos":[3220,3340]},{"content":"To do this, right-click the files in the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Copy<ept id=\"p2\">**</ept>, and then select the <bpt id=\"p3\">**</bpt>DiscoveryClientApp<ept id=\"p3\">**</ept> project, right-click and select <bpt id=\"p4\">**</bpt>Paste<ept id=\"p4\">**</ept>.","pos":[3341,3507],"source":" To do this, right-click the files in the **Solution Explorer**, select **Copy**, and then select the **DiscoveryClientApp** project, right-click and select **Paste**."},{"content":"Open Program.cs.","pos":[3517,3533]},{"pos":[3543,3580],"content":"Add the following <ph id=\"ph1\">`using`</ph> statements.","source":"Add the following `using` statements."},{"pos":[3739,3822],"content":"Add a static method called <ph id=\"ph1\">`FindCalculatorServiceAddress()`</ph> to the <ph id=\"ph2\">`Program`</ph> class.","source":"Add a static method called `FindCalculatorServiceAddress()` to the `Program` class."},{"pos":[3938,4011],"content":"This method uses discovery to search for the <ph id=\"ph1\">`CalculatorService`</ph> service.","source":"This method uses discovery to search for the `CalculatorService` service."},{"pos":[4021,4237],"content":"Inside the <ph id=\"ph1\">`FindCalculatorServiceAddress`</ph> method, create a new <ph id=\"ph2\">&lt;xref:System.ServiceModel.Discovery.DiscoveryClient&gt;</ph> instance, passing in a <ph id=\"ph3\">&lt;xref:System.ServiceModel.Discovery.UdpDiscoveryEndpoint&gt;</ph> to the constructor.","source":"Inside the `FindCalculatorServiceAddress` method, create a new <xref:System.ServiceModel.Discovery.DiscoveryClient> instance, passing in a <xref:System.ServiceModel.Discovery.UdpDiscoveryEndpoint> to the constructor."},{"pos":[4482,4703],"content":"This tells <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> that the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Discovery.DiscoveryClient&gt;</ph> class should use the standard UDP discovery endpoint to send and receive discovery messages.","source":"This tells [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] that the <xref:System.ServiceModel.Discovery.DiscoveryClient> class should use the standard UDP discovery endpoint to send and receive discovery messages."},{"content":"On the next line, call the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Discovery.DiscoveryClient.Find%2A&gt;</ph> method and specify a <ph id=\"ph2\">&lt;xref:System.ServiceModel.Discovery.FindCriteria&gt;</ph> instance that contains the service contract you want to search for.","pos":[4713,4939],"source":"On the next line, call the <xref:System.ServiceModel.Discovery.DiscoveryClient.Find%2A> method and specify a <xref:System.ServiceModel.Discovery.FindCriteria> instance that contains the service contract you want to search for."},{"content":"In this case, specify <ph id=\"ph1\">`ICalculator`</ph>.","pos":[4940,4976],"source":" In this case, specify `ICalculator`."},{"content":"After the call to <ph id=\"ph1\">&lt;xref:System.ServiceModel.Discovery.DiscoveryClient.Find%2A&gt;</ph>, check to see if there is at least one matching service and return the <ph id=\"ph2\">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> of the first matching service.","pos":[5164,5387],"source":"After the call to <xref:System.ServiceModel.Discovery.DiscoveryClient.Find%2A>, check to see if there is at least one matching service and return the <xref:System.ServiceModel.EndpointAddress> of the first matching service."},{"content":"Otherwise return <ph id=\"ph1\">`null`</ph>.","pos":[5388,5412],"source":" Otherwise return `null`."},{"pos":[5613,5688],"content":"Add a static method named <ph id=\"ph1\">`InvokeCalculatorService`</ph> to the <ph id=\"ph2\">`Program`</ph> class.","source":"Add a static method named `InvokeCalculatorService` to the `Program` class."},{"pos":[5819,5933],"content":"This method uses the endpoint address returned from <ph id=\"ph1\">`FindCalculatorServiceAddress`</ph> to call the calculator service.","source":"This method uses the endpoint address returned from `FindCalculatorServiceAddress` to call the calculator service."},{"content":"Inside the <ph id=\"ph1\">`InvokeCalculatorService`</ph> method, create an instance of the <ph id=\"ph2\">`CalculatorServiceClient`</ph> class.","pos":[5943,6046],"source":"Inside the `InvokeCalculatorService` method, create an instance of the `CalculatorServiceClient` class."},{"content":"This class is defined by the <bpt id=\"p1\">[</bpt>Self-Host<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=145523)</ept> sample.","pos":[6047,6142],"source":" This class is defined by the [Self-Host](http://go.microsoft.com/fwlink/?LinkId=145523) sample."},{"content":"It was generated using Svcutil.exe.","pos":[6143,6178]},{"pos":[6298,6426],"content":"On the next line, set the endpoint address of the client to the endpoint address returned from <ph id=\"ph1\">`FindCalculatorServiceAddress()`</ph>.","source":"On the next line, set the endpoint address of the client to the endpoint address returned from `FindCalculatorServiceAddress()`."},{"content":"Immediately after the code for the previous step, call the methods exposed by the calculator service.","pos":[6566,6667]},{"pos":[7663,7757],"content":"Add code to the <ph id=\"ph1\">`Main()`</ph> method in the <ph id=\"ph2\">`Program`</ph> class to call <ph id=\"ph3\">`FindCalculatorServiceAddress`</ph>.","source":"Add code to the `Main()` method in the `Program` class to call `FindCalculatorServiceAddress`."},{"pos":[7920,8055],"content":"On the next line, call the <ph id=\"ph1\">`InvokeCalculatorService()`</ph> and pass in the endpoint address returned from <ph id=\"ph2\">`FindCalculatorServiceAddress()`</ph>.","source":"On the next line, call the `InvokeCalculatorService()` and pass in the endpoint address returned from `FindCalculatorServiceAddress()`."},{"pos":[8277,8300],"content":"To test the application","linkify":"To test the application","nodes":[{"content":"To test the application","pos":[0,23]}]},{"content":"Open an elevated command prompt and run Service.exe.","pos":[8310,8362]},{"content":"Open a command prompt and run Discoveryclientapp.exe.","pos":[8372,8425]},{"content":"The output from service.exe should look like the following output.","pos":[8435,8501]},{"content":"The output from Discoveryclientapp.exe should look like the following output.","pos":[8764,8841]},{"pos":[9137,9144],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following is a listing of the code for this sample.","pos":[9148,9203]},{"content":"Because this code is based on the <bpt id=\"p1\">[</bpt>Self-Host<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=145523)</ept> sample, only those files that are changed are listed.","pos":[9204,9350],"source":" Because this code is based on the [Self-Host](http://go.microsoft.com/fwlink/?LinkId=145523) sample, only those files that are changed are listed."},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> the Self-Host sample, see <bpt id=\"p1\">[</bpt>Setup Instructions<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=145522)</ept>.","pos":[9351,9501],"source":"[!INCLUDE[crabout](../../../../includes/crabout-md.md)] the Self-Host sample, see [Setup Instructions](http://go.microsoft.com/fwlink/?LinkId=145522)."},{"pos":[13539,13547],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>WCF Discovery Overview<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/wcf-discovery-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[13551,13650],"source":"[WCF Discovery Overview](../../../../docs/framework/wcf/feature-details/wcf-discovery-overview.md) "},{"content":"<bpt id=\"p1\"> [</bpt>WCF Discovery Object Model<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/wcf-discovery-object-model.md)</ept>","pos":[13653,13760],"source":" [WCF Discovery Object Model](../../../../docs/framework/wcf/feature-details/wcf-discovery-object-model.md)"}]}