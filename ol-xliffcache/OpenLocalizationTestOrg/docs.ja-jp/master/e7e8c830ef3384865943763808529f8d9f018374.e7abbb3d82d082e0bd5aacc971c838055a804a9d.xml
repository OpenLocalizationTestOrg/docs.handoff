{"content":"---\ntitle: \"OperationContextScope | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 11c11108-8eb4-4d49-95a0-83285a812262\ncaps.latest.revision: 14\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# OperationContextScope\nThe OperationContextScope sample demonstrates how to send extra information on a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] call using headers. In this sample, both the server and client are console applications.  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n The sample demonstrates how a client can send additional information as a <xref:System.ServiceModel.Channels.MessageHeader> using <xref:System.ServiceModel.OperationContextScope>. An <xref:System.ServiceModel.OperationContextScope> object is created by scoping it to a channel. Headers that must be translated to the remote service can be added to the <xref:System.ServiceModel.OperationContext.OutgoingMessageHeaders%2A> collection. Headers added to this collection can be retrieved on the service by accessing <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>. Its calls are made on multiple channels and then the headers added to the client only apply to the channel that was used to create the <xref:System.ServiceModel.OperationContextScope>.  \n  \n## MessageHeaderReader  \n This is the sample service that receives a message from the client and tries to look up the header in the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> collection. The client passes the GUID that it sent in the header and the service retrieves the custom header and, if present, compares it with the GUID passed as the argument by the client.  \n  \n```  \npublic bool RetrieveHeader(string guid)  \n{  \n     MessageHeaders messageHeaderCollection =   \n             OperationContext.Current.IncomingMessageHeaders;  \n     String guidHeader = null;  \n  \n     Console.WriteLine(\"Trying to check if IncomingMessageHeader \" +  \n               \" collection contains header with value {0}\", guid);  \n     if (messageHeaderCollection.FindHeader(  \n                       CustomHeader.HeaderName,   \n                       CustomHeader.HeaderNamespace) != -1)  \n     {  \n          guidHeader = messageHeaderCollection.GetHeader<String>(  \n           CustomHeader.HeaderName, CustomHeader.HeaderNamespace);  \n     }  \n     else  \n     {  \n          Console.WriteLine(\"No header was found\");  \n     }  \n     if (guidHeader != null)  \n     {  \n          Console.WriteLine(\"Found header with value {0}. \"+   \n         \"Does it match with GUID sent as parameter: {1}\",   \n          guidHeader, guidHeader.Equals(guid));  \n      }  \n  \n      Console.WriteLine();  \n      //Return true if header is present and equals the guid sent by  \n      // client as argument  \n      return (guidHeader != null && guidHeader.Equals(guid));  \n}  \n```  \n  \n## MessageHeaderClient  \n This is the client implementation that uses the proxy generated by [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) to communicate with the remote service. It first creates two proxy objects of `MessageHeaderReaderClient`.  \n  \n```  \n//Create two clients to the remote service.  \nMessageHeaderReaderClient client1 = new MessageHeaderReaderClient();  \nMessageHeaderReaderClient client2 = new MessageHeaderReaderClient();  \n```  \n  \n Client then creates an OperationContextScope and scopes it to `client1`. It adds a <xref:System.ServiceModel.Channels.MessageHeader> to <xref:System.ServiceModel.OperationContext.OutgoingMessageHeaders%2A> and invokes one call on both clients. It ensures that the header is sent only on `client1` and not on `client2` by checking the return value from the `RetrieveHeader` call.  \n  \n```  \nusing (new OperationContextScope(client1.InnerChannel))  \n{  \n    //Create a new GUID that is sent as the header.  \n    String guid = Guid.NewGuid().ToString();  \n  \n    //Create a MessageHeader for the GUID we just created.  \n    MessageHeader customHeader = MessageHeader.CreateHeader(CustomHeader.HeaderName, CustomHeader.HeaderNamespace, guid);  \n  \n    //Add the header to the OutgoingMessageHeader collection.  \n    OperationContext.Current.OutgoingMessageHeaders.Add(customHeader);  \n  \n    //Now call RetreieveHeader on both the proxies. Since the OperationContextScope is tied to   \n    //client1's InnerChannel, the header should only be added to calls made on that client.  \n    //Calls made on client2 should not be sending the header across even though the call  \n    //is made in the same OperationContextScope.  \n    Console.WriteLine(\"Using client1 to send message\");  \n    Console.WriteLine(\"Did server retrieve the header? : Actual: {0}, Expected: True\", client1.RetrieveHeader(guid));  \n  \n    Console.WriteLine();  \n    Console.WriteLine(\"Using client2 to send message\");  \n    Console.WriteLine(\"Did server retrieve the header? : Actual: {0}, Expected: False\", client2.RetrieveHeader(guid));  \n}  \n```  \n  \n This sample is self-hosted. The following sample output from running the sample is provided:  \n  \n```  \nPrompt> Service.exe  \nThe service is ready.  \nPress <ENTER> to terminate service.  \n  \nTrying to check if IncomingMessageHeader collection contains header with value 2239da67-546f-42d4-89dc-8eb3c06215d8  \nFound header with value 2239da67-546f-42d4-89dc-8eb3c06215d8. Does it match with GUID sent as parameter: True  \n  \nTrying to check if IncomingMessageHeader collection contains header with value 2239da67-546f-42d4-89dc-8eb3c06215d8  \nNo header was found  \n  \nPrompt>Client.exe  \nUsing client1 to send message  \nDid server retrieve the header? : Actual: True, Expected: True  \n  \nUsing client2 to send message  \nDid server retrieve the header? : Actual: False, Expected: False  \n  \nPress <ENTER> to terminate client.  \n  \n```  \n  \n#### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md).  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Services\\OperationContextScope`  \n  \n## See Also","nodes":[{"pos":[12,50],"content":"OperationContextScope | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"OperationContextScope | Microsoft Docs","pos":[0,38]}]},{"pos":[349,370],"content":"OperationContextScope","linkify":"OperationContextScope","nodes":[{"content":"OperationContextScope","pos":[0,21]}]},{"content":"The OperationContextScope sample demonstrates how to send extra information on a <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> call using headers.","pos":[371,527],"source":"The OperationContextScope sample demonstrates how to send extra information on a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] call using headers."},{"content":"In this sample, both the server and client are console applications.","pos":[528,596]},{"pos":[604,711],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"content":"The sample demonstrates how a client can send additional information as a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.MessageHeader&gt;</ph> using <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph>.","pos":[718,897],"source":"The sample demonstrates how a client can send additional information as a <xref:System.ServiceModel.Channels.MessageHeader> using <xref:System.ServiceModel.OperationContextScope>."},{"content":"An <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> object is created by scoping it to a channel.","pos":[898,995],"source":" An <xref:System.ServiceModel.OperationContextScope> object is created by scoping it to a channel."},{"content":"Headers that must be translated to the remote service can be added to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext.OutgoingMessageHeaders%2A&gt;</ph> collection.","pos":[996,1151],"source":" Headers that must be translated to the remote service can be added to the <xref:System.ServiceModel.OperationContext.OutgoingMessageHeaders%2A> collection."},{"content":"Headers added to this collection can be retrieved on the service by accessing <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A&gt;</ph>.","pos":[1152,1300],"source":" Headers added to this collection can be retrieved on the service by accessing <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>."},{"content":"Its calls are made on multiple channels and then the headers added to the client only apply to the channel that was used to create the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph>.","pos":[1301,1485],"source":" Its calls are made on multiple channels and then the headers added to the client only apply to the channel that was used to create the <xref:System.ServiceModel.OperationContextScope>."},{"pos":[1494,1513],"content":"MessageHeaderReader","linkify":"MessageHeaderReader","nodes":[{"content":"MessageHeaderReader","pos":[0,19]}]},{"content":"This is the sample service that receives a message from the client and tries to look up the header in the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A&gt;</ph> collection.","pos":[1517,1704],"source":"This is the sample service that receives a message from the client and tries to look up the header in the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> collection."},{"content":"The client passes the GUID that it sent in the header and the service retrieves the custom header and, if present, compares it with the GUID passed as the argument by the client.","pos":[1705,1883]},{"pos":[3069,3088],"content":"MessageHeaderClient","linkify":"MessageHeaderClient","nodes":[{"content":"MessageHeaderClient","pos":[0,19]}]},{"content":"This is the client implementation that uses the proxy generated by <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> to communicate with the remote service.","pos":[3092,3331],"source":"This is the client implementation that uses the proxy generated by [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) to communicate with the remote service."},{"content":"It first creates two proxy objects of <ph id=\"ph1\">`MessageHeaderReaderClient`</ph>.","pos":[3332,3398],"source":" It first creates two proxy objects of `MessageHeaderReaderClient`."},{"content":"Client then creates an OperationContextScope and scopes it to <ph id=\"ph1\">`client1`</ph>.","pos":[3608,3680],"source":"Client then creates an OperationContextScope and scopes it to `client1`."},{"content":"It adds a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.MessageHeader&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContext.OutgoingMessageHeaders%2A&gt;</ph> and invokes one call on both clients.","pos":[3681,3851],"source":" It adds a <xref:System.ServiceModel.Channels.MessageHeader> to <xref:System.ServiceModel.OperationContext.OutgoingMessageHeaders%2A> and invokes one call on both clients."},{"content":"It ensures that the header is sent only on <ph id=\"ph1\">`client1`</ph> and not on <ph id=\"ph2\">`client2`</ph> by checking the return value from the <ph id=\"ph3\">`RetrieveHeader`</ph> call.","pos":[3852,3986],"source":" It ensures that the header is sent only on `client1` and not on `client2` by checking the return value from the `RetrieveHeader` call."},{"content":"This sample is self-hosted.","pos":[5227,5254]},{"content":"The following sample output from running the sample is provided:","pos":[5255,5319]},{"pos":[6070,6106],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[6116,6315],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[6325,6534],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[6544,6752],"content":"To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.","source":"To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md)."},{"pos":[6760,6892],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[6946,7272],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[7273,7323]},{"pos":[7416,7424],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}