<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="64-bit-apps.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc90bedeee2d04c28a3860713ca5952a4564d3bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\64-bit-apps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65f96ce701e4f7343f6871d3430dc6e08a066e95</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1875be3e481bd22483c90c021e305a51e357db7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>64-bit Applications</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>64-bit Applications</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you compile an application, you can specify that it should run on a Windows 64-bit operating system either as a native application or under WOW64 (Windows 32-bit on Windows 64-bit).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>WOW64 is a compatibility environment that enables a 32-bit application to run on a 64-bit system.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>WOW64 is included in all 64-bit versions of the Windows operating system.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Running 32-bit vs. 64-bit Applications on Windows</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>All applications that are built on the .NET Framework 1.0 or 1.1 are treated as 32-bit applications on a 64-bit operating system and are always executed under WOW64 and the 32-bit common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>32-bit applications that are built on the <ph id="ph1">[!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)]</ph> or later versions also run under WOW64 on 64-bit systems.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Visual Studio installs the 32-bit version of the CLR on an x86 computer, and both the 32-bit version and the appropriate 64-bit version of the CLR on a 64-bit Windows computer.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(Because Visual Studio is a 32-bit application, when it is installed on a 64-bit system, it runs under WOW64.)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because of the design of x86 emulation and the WOW64 subsystem for the Itanium processor family, applications are restricted to execution on one processor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These factors reduce the performance and scalability of 32-bit .NET Framework applications that run on Itanium-based systems.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>We recommend that you use the <ph id="ph1">[!INCLUDE[net_v40_long](../../includes/net-v40-long-md.md)]</ph>, which includes native 64-bit support for Itanium-based systems, for increased performance and scalability.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>By default, when you run a 64-bit managed application on a 64-bit Windows operating system, you can create an object of no more than 2 gigabytes (GB).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, in the <ph id="ph1">[!INCLUDE[net_v45](../../includes/net-v45-md.md)]</ph>, you can increase this limit.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>gcAllowVeryLargeObjects&gt; element<ept id="p1">](../../docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Many assemblies run identically on both the 32-bit CLR and the 64-bit CLR.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, some programs may behave differently, depending on the CLR, if they contain one or more of the following:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Structures that contain members that change size depending on the platform (for example, any pointer type).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Pointer arithmetic that includes constant sizes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Incorrect platform invoke or COM declarations that use <ph id="ph1">`Int32`</ph> for handles instead of <ph id="ph2">`IntPtr`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Code that casts <ph id="ph1">`IntPtr`</ph> to <ph id="ph2">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information about how to port a 32-bit application to run on the 64-bit CLR, see <bpt id="p1">[</bpt>Migrating 32-bit Managed Code to 64-bit<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/articles/ms973190(v=msdn.10))</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>General 64-Bit Programming Information</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For general information about 64-bit programming, see the following documents:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about the 64-bit version of the CLR on a 64-bit Windows computer, see the <bpt id="p1">[</bpt>.NET Framework Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=37079)</ept> on the MSDN website.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[winsdkshort](../../includes/winsdkshort-md.md)]</ph> documentation, see <bpt id="p1">[</bpt>Programming Guide for 64-bit Windows<ept id="p1">](https://go.microsoft.com/fwlink/p/?LinkId=253512)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For information about how to download a 64-bit version of the CLR, see <bpt id="p1">[</bpt>.NET Framework Developer Center Downloads<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=50953)</ept> on the MSDN website.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For information about Visual Studio support for creating 64-bit applications, see <bpt id="p1">[</bpt>Visual Studio IDE 64-Bit Support<ept id="p1">](/visualstudio/ide/visual-studio-ide-64-bit-support)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compiler Support for Creating 64-Bit Applications</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>By default, when you use the .NET Framework to build an application on either a 32-bit or a 64-bit computer, the application will run on a 64-bit computer as a native application (that is, not under WOW64).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following table lists documents that explain how to use Visual Studio compilers to create 64-bit applications that will run as native, under WOW64, or both.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Compiler</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Compiler option</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Visual Basic</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/platform (Visual Basic)<ept id="p1">](~/docs/visual-basic/reference/command-line-compiler/platform.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Visual C#</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/platform (C# Compiler Options)<ept id="p1">](~/docs/csharp/language-reference/compiler-options/platform-compiler-option.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Visual C++</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can create platform-agnostic, Microsoft intermediate language (MSIL) applications by using <bpt id="p1">**</bpt>/clr:safe<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p1">](/cpp/build/reference/clr-common-language-runtime-compilation)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Visual C++ includes a separate compiler for each 64-bit operating system.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information about how to use Visual C++ to create native applications that run on a 64-bit Windows operating system, see <bpt id="p1">[</bpt>64-bit Programming<ept id="p1">](/cpp/build/configuring-programs-for-64-bit-visual-cpp)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Determining the Status of an .exe File or .dll File</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To determine whether an .exe file or .dll file is meant to run only on a specific platform or under WOW64, use <bpt id="p1">[</bpt>CorFlags.exe (CorFlags Conversion Tool)<ept id="p1">](../../docs/framework/tools/corflags-exe-corflags-conversion-tool.md)</ept> with no options.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can also use CorFlags.exe to change the platform status of an .exe file or .dll file.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The CLR header of a Visual Studio assembly has the major runtime version number set to 2 and the minor runtime version number set to 5.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Applications that have the minor runtime version set to 0 are treated as legacy applications and are always executed under WOW64.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To programmatically query an .exe or .dll to see whether it is meant to run only on a specific platform or under WOW64, use the <ph id="ph1">&lt;xref:System.Reflection.Module.GetPEKind%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>