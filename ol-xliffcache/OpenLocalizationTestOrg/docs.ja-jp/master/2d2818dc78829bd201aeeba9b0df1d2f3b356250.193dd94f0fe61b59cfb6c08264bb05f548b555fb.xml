{"content":"---\ntitle: \"Known Types\"\nms.date: \"03/30/2017\"\nms.assetid: 88d83720-ca38-4b2c-86a6-f149ed1d89ec\n---\n# Known Types\nThis sample demonstrates how to specify information about derived types in a data contract. Data contracts allow you to pass structured data to and from services. In object-oriented programming, a type that inherits from another type can be used in place of the original type. In service-oriented programming, schemas rather than types are communicated and therefore, the relationship between types is not preserved. The <xref:System.Runtime.Serialization.KnownTypeAttribute> attribute allows information about derived types to be included in the data contract. If this mechanism is not used, a derived type cannot be sent or received where a base type is expected.  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n The service contract for the service uses complex numbers, as shown in the following sample code.  \n  \n```csharp\n// Define a service contract.  \n[ServiceContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")]  \npublic interface ICalculator  \n{  \n    [OperationContract]  \n    ComplexNumber Add(ComplexNumber n1, ComplexNumber n2);  \n    [OperationContract]  \n    ComplexNumber Subtract(ComplexNumber n1, ComplexNumber n2);  \n    [OperationContract]  \n    ComplexNumber Multiply(ComplexNumber n1, ComplexNumber n2);  \n    [OperationContract]  \n    ComplexNumber Divide(ComplexNumber n1, ComplexNumber n2);  \n}  \n```  \n  \n The <xref:System.Runtime.Serialization.DataContractAttribute> and <xref:System.Runtime.Serialization.DataMemberAttribute> is applied to the `ComplexNumber` class to indicate which fields of the class can be passed between the client and the service. The derived `ComplexNumberWithMagnitude` class can be used in place of `ComplexNumber`. The <xref:System.Runtime.Serialization.KnownTypeAttribute> attribute on the `ComplexNumber` type indicates this.  \n  \n```csharp\n[DataContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")]  \n[KnownType(typeof(ComplexNumberWithMagnitude))]  \npublic class ComplexNumber  \n{  \n    [DataMember]  \n    public double Real = 0.0D;  \n    [DataMember]  \n    public double Imaginary = 0.0D;  \n  \n    public ComplexNumber(double real, double imaginary)  \n    {  \n        this.Real = real;  \n        this.Imaginary = imaginary;  \n    }  \n}  \n```  \n  \n The `ComplexNumberWithMagnitude` type derives from `ComplexNumber` but adds an additional data member, `Magnitude`.  \n  \n```csharp\n[DataContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")]  \npublic class ComplexNumberWithMagnitude : ComplexNumber  \n{  \n    public ComplexNumberWithMagnitude(double real, double imaginary) :  \n        base(real, imaginary) { }  \n  \n    [DataMember]  \n    public double Magnitude  \n    {  \n        get { return Math.Sqrt(Imaginary*Imaginary  + Real*Real); }  \n        set { throw new NotImplementedException(); }  \n    }  \n}  \n```  \n  \n To demonstrate the known types feature, the service is implemented in such a way that it returns a `ComplexNumberWithMagnitude` only for addition and subtraction. (Even though the contract specifies `ComplexNumber`, this is allowed because of the `KnownTypeAttribute` attribute). Multiplication and division still return the base `ComplexNumber` type.  \n  \n```csharp\npublic class DataContractCalculatorService : IDataContractCalculator  \n{  \n    public ComplexNumber Add(ComplexNumber n1, ComplexNumber n2)  \n    {  \n        //Return the derived type.  \n        return new ComplexNumberWithMagnitude(n1.Real + n2.Real,  \n                                      n1.Imaginary + n2.Imaginary);  \n    }  \n  \n    public ComplexNumber Subtract(ComplexNumber n1, ComplexNumber n2)  \n    {  \n        //Return the derived type.  \n        return new ComplexNumberWithMagnitude(n1.Real - n2.Real,   \n                                 n1.Imaginary - n2.Imaginary);  \n    }  \n  \n    public ComplexNumber Multiply(ComplexNumber n1, ComplexNumber n2)  \n    {  \n        double real1 = n1.Real * n2.Real;  \n        double imaginary1 = n1.Real * n2.Imaginary;  \n        double imaginary2 = n2.Real * n1.Imaginary;  \n        double real2 = n1.Imaginary * n2.Imaginary * -1;  \n        //Return the base type.  \n        return new ComplexNumber(real1 + real2, imaginary1 +   \n                                                  imaginary2);  \n    }  \n  \n    public ComplexNumber Divide(ComplexNumber n1, ComplexNumber n2)  \n    {  \n        ComplexNumber conjugate = new ComplexNumber(n2.Real,   \n                                     -1*n2.Imaginary);  \n        ComplexNumber numerator = Multiply(n1, conjugate);  \n        ComplexNumber denominator = Multiply(n2, conjugate);  \n        //Return the base type.  \n        return new ComplexNumber(numerator.Real / denominator.Real,  \n                                             numerator.Imaginary);  \n    }  \n}  \n```  \n  \n On the client, both the service contract and the data contract are defined in the source file generatedClient.cs, which is generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) from service metadata. Because the <xref:System.Runtime.Serialization.KnownTypeAttribute> attribute is specified in the service's data contract, the client is able to receive both the `ComplexNumber` and `ComplexNumberWithMagnitude` classes when using the service. The client detects whether it got a `ComplexNumberWithMagnitude` and generate the appropriate output:  \n  \n```csharp\n// Create a client  \nDataContractCalculatorClient client =   \n    new DataContractCalculatorClient();  \n  \n// Call the Add service operation.  \nComplexNumber value1 = new ComplexNumber() { real = 1, imaginary = 2 };  \nComplexNumber value2 = new ComplexNumber() { real = 3, imaginary = 4 };  \nComplexNumber result = client.Add(value1, value2);  \nConsole.WriteLine(\"Add({0} + {1}i, {2} + {3}i) = {4} + {5}i\",  \n    value1.real, value1.imaginary, value2.real, value2.imaginary,  \n    result.real, result.imaginary);  \nif (result is ComplexNumberWithMagnitude)  \n{  \n    Console.WriteLine(\"Magnitude: {0}\",   \n        ((ComplexNumberWithMagnitude)result).Magnitude);  \n}  \nelse  \n{  \n    Console.WriteLine(\"No magnitude was sent from the service\");  \n}  \n```  \n  \n When you run the sample, the requests and responses of the operation are displayed in the client console window. Note that a magnitude is printed for addition and subtraction but not for multiplication and division because of the way the service was implemented. Press ENTER in the client window to shut down the client.  \n  \n```console  \nAdd(1 + 2i, 3 + 4i) = 4 + 6i  \nMagnitude: 7.21110255092798  \nSubtract(1 + 2i, 3 + 4i) = -2 + -2i  \nMagnitude: 2.82842712474619  \nMultiply(2 + 3i, 4 + 7i) = -13 + 26i  \nNo magnitude was sent from the service  \nDivide(3 + 7i, 5 + -2i) = 0.0344827586206897 + 41i  \nNo magnitude was sent from the service  \n  \n    Press <ENTER> to terminate client.  \n```  \n  \n### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md).  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Contract\\Data\\KnownTypes`  \n","nodes":[{"pos":[4,95],"embed":true,"restype":"x-metadata","content":"title: \"Known Types\"\nms.date: \"03/30/2017\"\nms.assetid: 88d83720-ca38-4b2c-86a6-f149ed1d89ec","nodes":[{"content":"Known Types","nodes":[{"pos":[0,11],"content":"Known Types","nodes":[{"content":"Known Types","pos":[0,11]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[102,113],"content":"Known Types","linkify":"Known Types","nodes":[{"content":"Known Types","pos":[0,11]}]},{"content":"This sample demonstrates how to specify information about derived types in a data contract.","pos":[114,205]},{"content":"Data contracts allow you to pass structured data to and from services.","pos":[206,276]},{"content":"In object-oriented programming, a type that inherits from another type can be used in place of the original type.","pos":[277,390]},{"content":"In service-oriented programming, schemas rather than types are communicated and therefore, the relationship between types is not preserved.","pos":[391,530]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> attribute allows information about derived types to be included in the data contract.","pos":[531,675],"source":" The <xref:System.Runtime.Serialization.KnownTypeAttribute> attribute allows information about derived types to be included in the data contract."},{"content":"If this mechanism is not used, a derived type cannot be sent or received where a base type is expected.","pos":[676,779]},{"pos":[787,894],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"content":"The service contract for the service uses complex numbers, as shown in the following sample code.","pos":[901,998]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> is applied to the <ph id=\"ph3\">`ComplexNumber`</ph> class to indicate which fields of the class can be passed between the client and the service.","pos":[1527,1776],"source":"The <xref:System.Runtime.Serialization.DataContractAttribute> and <xref:System.Runtime.Serialization.DataMemberAttribute> is applied to the `ComplexNumber` class to indicate which fields of the class can be passed between the client and the service."},{"content":"The derived <ph id=\"ph1\">`ComplexNumberWithMagnitude`</ph> class can be used in place of <ph id=\"ph2\">`ComplexNumber`</ph>.","pos":[1777,1864],"source":" The derived `ComplexNumberWithMagnitude` class can be used in place of `ComplexNumber`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> attribute on the <ph id=\"ph2\">`ComplexNumber`</ph> type indicates this.","pos":[1865,1977],"source":" The <xref:System.Runtime.Serialization.KnownTypeAttribute> attribute on the `ComplexNumber` type indicates this."},{"pos":[2410,2525],"content":"The <ph id=\"ph1\">`ComplexNumberWithMagnitude`</ph> type derives from <ph id=\"ph2\">`ComplexNumber`</ph> but adds an additional data member, <ph id=\"ph3\">`Magnitude`</ph>.","source":"The `ComplexNumberWithMagnitude` type derives from `ComplexNumber` but adds an additional data member, `Magnitude`."},{"content":"To demonstrate the known types feature, the service is implemented in such a way that it returns a <ph id=\"ph1\">`ComplexNumberWithMagnitude`</ph> only for addition and subtraction.","pos":[2987,3149],"source":"To demonstrate the known types feature, the service is implemented in such a way that it returns a `ComplexNumberWithMagnitude` only for addition and subtraction."},{"content":"(Even though the contract specifies <ph id=\"ph1\">`ComplexNumber`</ph>, this is allowed because of the <ph id=\"ph2\">`KnownTypeAttribute`</ph> attribute).","pos":[3150,3266],"source":" (Even though the contract specifies `ComplexNumber`, this is allowed because of the `KnownTypeAttribute` attribute)."},{"content":"Multiplication and division still return the base <ph id=\"ph1\">`ComplexNumber`</ph> type.","pos":[3267,3338],"source":" Multiplication and division still return the base `ComplexNumber` type."},{"content":"On the client, both the service contract and the data contract are defined in the source file generatedClient.cs, which is generated by the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> from service metadata.","pos":[4933,5228],"source":"On the client, both the service contract and the data contract are defined in the source file generatedClient.cs, which is generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) from service metadata."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> attribute is specified in the service's data contract, the client is able to receive both the <ph id=\"ph2\">`ComplexNumber`</ph> and <ph id=\"ph3\">`ComplexNumberWithMagnitude`</ph> classes when using the service.","pos":[5229,5470],"source":" Because the <xref:System.Runtime.Serialization.KnownTypeAttribute> attribute is specified in the service's data contract, the client is able to receive both the `ComplexNumber` and `ComplexNumberWithMagnitude` classes when using the service."},{"content":"The client detects whether it got a <ph id=\"ph1\">`ComplexNumberWithMagnitude`</ph> and generate the appropriate output:","pos":[5471,5572],"source":" The client detects whether it got a `ComplexNumberWithMagnitude` and generate the appropriate output:"},{"content":"When you run the sample, the requests and responses of the operation are displayed in the client console window.","pos":[6349,6461]},{"content":"Note that a magnitude is printed for addition and subtraction but not for multiplication and division because of the way the service was implemented.","pos":[6462,6611]},{"content":"Press ENTER in the client window to shut down the client.","pos":[6612,6669]},{"pos":[7048,7084],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[7094,7293],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[7303,7512],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[7522,7730],"content":"To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.","source":"To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md)."},{"pos":[7738,7870],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[14,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[0,53]},{"content":"Check for the following (default) directory before continuing.","pos":[54,116]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[7924,8234],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[8235,8285]}]}