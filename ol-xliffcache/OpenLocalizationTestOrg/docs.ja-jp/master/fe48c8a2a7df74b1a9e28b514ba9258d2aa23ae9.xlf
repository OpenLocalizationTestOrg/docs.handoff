<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="handling-null-values.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe48c8a2a7df74b1a9e28b514ba9258d2aa23ae9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\handling-null-values.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">576d023ccd8441343dbd18f89e56f1119d2188f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ee25d2e7b6d866e820692a310033f064022be39</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Handling Null Values</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Handling Null Values</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A null value in a relational database is used when the value in a column is unknown or missing.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A null is neither an empty string (for character or datetime data types) nor a zero value (for numeric data types).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The ANSI SQL-92 specification states that a null must be the same for all data types, so that all nulls are handled consistently.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlTypes&gt;</ph> namespace provides null semantics by implementing the <ph id="ph2">&lt;xref:System.Data.SqlTypes.INullable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each of the data types in <ph id="ph1">&lt;xref:System.Data.SqlTypes&gt;</ph> has its own <ph id="ph2">`IsNull`</ph> property and a <ph id="ph3">`Null`</ph> value that can be assigned to an instance of that data type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The .NET Framework version 2.0 introduced support for nullable types, which allow programmers to extend a value type to represent all values of the underlying type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These CLR nullable types represent an instance of the <ph id="ph1">&lt;xref:System.Nullable&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This capability is especially useful when value types are boxed and unboxed, providing enhanced compatibility with object types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>CLR nullable types are not intended for storage of database nulls because an ANSI SQL null does not behave the same way as a <ph id="ph1">`null`</ph> reference (or <ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For working with database ANSI SQL null values, use <ph id="ph1">&lt;xref:System.Data.SqlTypes&gt;</ph> nulls rather than <ph id="ph2">&lt;xref:System.Nullable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information on working with CLR nullable types in Visual Basic see <bpt id="p1">[</bpt>Nullable Value Types<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept>, and for C# see <bpt id="p2">[</bpt>Using Nullable Types<ept id="p2">](~/docs/csharp/programming-guide/nullable-types/using-nullable-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Nulls and Three-Valued Logic</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Allowing null values in column definitions introduces three-valued logic into your application.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A comparison can evaluate to one of three conditions:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>True</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>False</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Unknown</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because null is considered to be unknown, two null values compared to each other are not considered to be equal.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In expressions using arithmetic operators, if any of the operands is null, the result is null as well.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Nulls and SqlBoolean</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Comparison between any <ph id="ph1">&lt;xref:System.Data.SqlTypes&gt;</ph> will return a <ph id="ph2">&lt;xref:System.Data.SqlTypes.SqlBoolean&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsNull`</ph> function for each <ph id="ph2">`SqlType`</ph> returns a <ph id="ph3">&lt;xref:System.Data.SqlTypes.SqlBoolean&gt;</ph> and can be used to check for null values.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following truth tables show how the AND, OR, and NOT operators function in the presence of a null value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>(T=true, F=false, and U=unknown, or null.)</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Truth Table<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/data/adonet/sql/media/truthtable-bpuedev11.gif "</bpt>TruthTable_bpuedev11<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Understanding the ANSI_NULLS Option</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Data.SqlTypes&gt;</ph> provides the same semantics as when the ANSI_NULLS option is set on in SQL Server.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>All arithmetic operators (+, -, *, /, %), bitwise operators (~, &amp;, &amp;#124;), and most functions return null if any of the operands or arguments is null, except for the property <ph id="ph1">`IsNull`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The ANSI SQL-92 standard does not support <bpt id="p1">*</bpt>columnName<ept id="p1">*</ept> = NULL in a WHERE clause.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In SQL Server, the ANSI_NULLS option controls both default nullability in the database and evaluation of comparisons against null values.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If ANSI_NULLS is turned on (the default), the IS NULL operator must be used in expressions when testing for null values.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the following comparison always yields unknown when ANSI_NULLS is on:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Comparison to a variable containing a null value also yields unknown:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use the IS NULL or IS NOT NULL predicate to test for a null value.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This can add complexity to the WHERE clause.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the TerritoryID column in the AdventureWorks Customer table allows null values.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If a SELECT statement is to test for null values in addition to others, it must include an IS NULL predicate:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you set ANSI_NULLS off in SQL Server, you can create expressions that use the equality operator to compare to null.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, you can't prevent different connections from setting null options for that connection.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Using IS NULL to test for null values always works, regardless of the ANSI_NULLS settings for a connection.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Setting ANSI_NULLS off is not supported in a <ph id="ph1">`DataSet`</ph>, which always follows the ANSI SQL-92 standard for handling null values in <ph id="ph2">&lt;xref:System.Data.SqlTypes&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Assigning Null Values</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Null values are special, and their storage and assignment semantics differ across different type systems and storage systems.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Dataset`</ph> is designed to be used with different type and storage systems.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This section describes the null semantics for assigning null values to a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> in a <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> across the different type systems.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This assignment is valid for a <ph id="ph1">`DataColumn`</ph> of any type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the type implements <ph id="ph1">`INullable`</ph>, <ph id="ph2">`DBNull.Value`</ph> is coerced into the appropriate strongly typed Null value.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">&lt;xref:System.Data.SqlTypes&gt;</ph> data types implement <ph id="ph2">`INullable`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the strongly typed null value can be converted into the column's data type using implicit cast operators, the assignment should go through.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Otherwise an invalid cast exception is thrown.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If 'null' is a legal value for the given <ph id="ph1">`DataColumn`</ph> data type, it is coerced into the appropriate <ph id="ph2">`DbNull.Value`</ph> or <ph id="ph3">`Null`</ph> associated with the <ph id="ph4">`INullable`</ph> type (<ph id="ph5">`SqlType.Null`</ph>)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For UDT columns, nulls are always stored based on the type associated with the <ph id="ph1">`DataColumn`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Consider the case of a UDT associated with a <ph id="ph1">`DataColumn`</ph> that does not implement <ph id="ph2">`INullable`</ph> while its sub-class does.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In this case, if a strongly typed null value associated with the derived class is assigned, it is stored as an untyped <ph id="ph1">`DbNull.Value`</ph>, because null storage is always consistent with the DataColumn's data type.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Nullable&lt;T&gt;`</ph> or <ph id="ph2">&lt;xref:System.Nullable&gt;</ph> structure is not currently supported in the <ph id="ph3">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Multiple Column (Row) Assignment</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataTable.Add`</ph>, <ph id="ph2">`DataTable.LoadDataRow`</ph>, or other APIs that accept an <ph id="ph3">&lt;xref:System.Data.DataRow.ItemArray%2A&gt;</ph> that gets mapped to a row, map 'null' to the DataColumn's default value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If an object in the array contains <ph id="ph1">`DbNull.Value`</ph> or its strongly typed counterpart, the same rules as described above are applied.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In addition, the following rules apply for an instance of <ph id="ph1">`DataRow.["columnName"]`</ph> null assignments:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The default <bpt id="p1">*</bpt>default<ept id="p1">*</ept> value is <ph id="ph1">`DbNull.Value`</ph> for all except the strongly typed null columns where it is the appropriate strongly typed null value.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Null values are never written out during serialization to XML files (as in "xsi:nil").</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>All non-null values, including defaults, are always written out while serializing to XML.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is unlike XSD/XML semantics where a null value (xsi:nil) is explicit and the default value is implicit (if not present in XML, a validating parser can get it from an associated XSD schema).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The opposite is true for a <ph id="ph1">`DataTable`</ph>: a null value is implicit and the default value is explicit.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>All missing column values for rows read from XML input are assigned NULL.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Rows created using <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> or similar methods are assigned the DataColumn's default value.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataRow.IsNull%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> for both <ph id="ph3">`DbNull.Value`</ph> and <ph id="ph4">`INullable.Null`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Assigning Null Values</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default value for any <ph id="ph1">&lt;xref:System.Data.SqlTypes&gt;</ph> instance is null.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Nulls in <ph id="ph1">&lt;xref:System.Data.SqlTypes&gt;</ph> are type-specific and cannot be represented by a single value, such as <ph id="ph2">`DbNull`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`IsNull`</ph> property to check for nulls.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Null values can be assigned to a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can directly assign null values to <ph id="ph1">`SqlTypes`</ph> variables without triggering an exception.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with two columns defined as <ph id="ph2">&lt;xref:System.Data.SqlTypes.SqlInt32&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.SqlTypes.SqlString&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The code adds one row of known values, one row of null values and then iterates through the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, assigning the values to variables and displaying the output in the console window.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This example displays the following results:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Comparing Null Values with SqlTypes and CLR Types</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When comparing null values, it is important to understand the difference between the way the <ph id="ph1">`Equals`</ph> method evaluates null values in <ph id="ph2">&lt;xref:System.Data.SqlTypes&gt;</ph> as compared with the way it works with CLR types.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>All of the <ph id="ph1">&lt;xref:System.Data.SqlTypes&gt;</ph><ph id="ph2">`Equals`</ph> methods use database semantics for evaluating null values: if either or both of the values is null, the comparison yields null.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>On the other hand, using the CLR <ph id="ph1">`Equals`</ph> method on two <ph id="ph2">&lt;xref:System.Data.SqlTypes&gt;</ph> will yield true if both are null.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This reflects the difference between using an instance method such as the CLR <ph id="ph1">`String.Equals`</ph> method, and using the static/shared method, <ph id="ph2">`SqlString.Equals`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the difference in results between the <ph id="ph1">`SqlString.Equals`</ph> method and the <ph id="ph2">`String.Equals`</ph> method when each is passed a pair of null values and then a pair of empty strings.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The code produces the following output:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL Server Data Types and ADO.NET<ept id="p1">](../../../../../docs/framework/data/adonet/sql/sql-server-data-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>