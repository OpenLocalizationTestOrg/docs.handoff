{"content":"---\ntitle: \"How to: Find Child Elements Based on Position (XPath-LINQ to XML) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: e35bb269-ec86-4c96-8321-12491a0eb2c3\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Find Child Elements Based on Position (XPath-LINQ to XML) (C#)\nSometimes you want to find elements based on their position. You might want to find the second element, or you might want to find the third through the fifth element.  \n  \n The XPath expression is:  \n  \n `Test[position() >= 2 and position() <= 4]`  \n  \n There are two approaches to writing this [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] query in a lazy way. You can use the <xref:System.Linq.Enumerable.Skip%2A> and <xref:System.Linq.Enumerable.Take%2A> operators, or you can use the <xref:System.Linq.Enumerable.Where%2A> overload that takes an index. When you use the <xref:System.Linq.Enumerable.Where%2A> overload, you use a lambda expression that takes two arguments. The following example shows both methods of selecting based on position.  \n  \n## Example  \n This example finds the second through the fourth `Test` element. The result is a collection of elements.  \n  \n This example uses the following XML document: [Sample XML File: Test Configuration (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-test-configuration-linq-to-xml.md).  \n  \n```csharp  \nXElement testCfg = XElement.Load(\"TestConfig.xml\");  \n  \n// LINQ to XML query  \nIEnumerable<XElement> list1 =  \n    testCfg  \n    .Elements(\"Test\")  \n    .Skip(1)  \n    .Take(3);  \n  \n// LINQ to XML query  \nIEnumerable<XElement> list2 =  \n    testCfg  \n    .Elements(\"Test\")  \n    .Where((el, idx) => idx >= 1 && idx <= 3);  \n  \n// XPath expression  \nIEnumerable<XElement> list3 =  \n  testCfg.XPathSelectElements(\"Test[position() >= 2 and position() <= 4]\");  \n  \nif (list1.Count() == list2.Count() &&  \n    list1.Count() == list3.Count() &&  \n    list1.Intersect(list2).Count() == list1.Count() &&  \n    list1.Intersect(list3).Count() == list1.Count())  \n    Console.WriteLine(\"Results are identical\");  \nelse  \n    Console.WriteLine(\"Results differ\");  \nforeach (XElement el in list1)  \n    Console.WriteLine(el);  \n```  \n  \n This example produces the following output:  \n  \n```  \nResults are identical  \n<Test TestId=\"0002\" TestType=\"CMD\">  \n  <Name>Find succeeding characters</Name>  \n  <CommandLine>Examp2.EXE</CommandLine>  \n  <Input>abc</Input>  \n  <Output>def</Output>  \n</Test>  \n<Test TestId=\"0003\" TestType=\"GUI\">  \n  <Name>Convert multiple numbers to strings</Name>  \n  <CommandLine>Examp2.EXE /Verbose</CommandLine>  \n  <Input>123</Input>  \n  <Output>One Two Three</Output>  \n</Test>  \n<Test TestId=\"0004\" TestType=\"GUI\">  \n  <Name>Find correlated key</Name>  \n  <CommandLine>Examp3.EXE</CommandLine>  \n  <Input>a1</Input>  \n  <Output>b1</Output>  \n</Test>  \n```  \n  \n## See Also  \n [LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)","nodes":[{"pos":[12,99],"content":"How to: Find Child Elements Based on Position (XPath-LINQ to XML) (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Find Child Elements Based on Position (XPath-LINQ to XML) (C#) | Microsoft Docs","pos":[0,87]}]},{"pos":[384,454],"content":"How to: Find Child Elements Based on Position (XPath-LINQ to XML) (C#)","linkify":"How to: Find Child Elements Based on Position (XPath-LINQ to XML) (C#)","nodes":[{"content":"How to: Find Child Elements Based on Position (XPath-LINQ to XML) (C#)","pos":[0,70]}]},{"content":"Sometimes you want to find elements based on their position.","pos":[455,515]},{"content":"You might want to find the second element, or you might want to find the third through the fifth element.","pos":[516,621]},{"content":"The XPath expression is:","pos":[628,652]},{"content":"There are two approaches to writing this <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> query in a lazy way.","pos":[709,873],"source":"There are two approaches to writing this [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] query in a lazy way."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> operators, or you can use the <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> overload that takes an index.","pos":[874,1068],"source":" You can use the <xref:System.Linq.Enumerable.Skip%2A> and <xref:System.Linq.Enumerable.Take%2A> operators, or you can use the <xref:System.Linq.Enumerable.Where%2A> overload that takes an index."},{"content":"When you use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> overload, you use a lambda expression that takes two arguments.","pos":[1069,1188],"source":" When you use the <xref:System.Linq.Enumerable.Where%2A> overload, you use a lambda expression that takes two arguments."},{"content":"The following example shows both methods of selecting based on position.","pos":[1189,1261]},{"pos":[1270,1277],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example finds the second through the fourth <ph id=\"ph1\">`Test`</ph> element.","pos":[1281,1345],"source":"This example finds the second through the fourth `Test` element."},{"content":"The result is a collection of elements.","pos":[1346,1385]},{"pos":[1392,1592],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Test Configuration (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-test-configuration-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Test Configuration (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-test-configuration-linq-to-xml.md)."},{"content":"This example produces the following output:","pos":[2438,2481]},{"pos":[3094,3102],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3106,3223],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML for XPath Users (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)</ept>","source":"[LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)"}]}