{"content":"---\ntitle: Unit testing in .NET Core and .NET Standard\ndescription: This article gives a brief overview of unit testing for .NET Core and .NET Standard projects.\nauthor: ardalis\nms.author: wiwagn\nms.date: 08/30/2017\nms.custom: \"seodec18\"\n---\n\n# Unit testing in .NET Core and .NET Standard\n\n.NET Core makes it easy to create unit tests. This article introduces unit tests and illustrates how they differ from other kinds of tests. The linked resources near the bottom of the page show you how to add a test project to your solution. After you set up your test project, you will be able to run your unit tests using the command line or Visual Studio.\n\n.NET Core 2.0 and later supports [.NET Standard 2.0](../../standard/net-standard.md), and we will use its libraries to demonstrate unit tests.\n\nYou are able to use built-in .NET Core 2.0 and later unit test project templates for C#, F# and Visual Basic as a starting point for your personal project.\n\n## What are unit tests?\n\nHaving automated tests is a great way to ensure a software application does what its authors intend it to do. There are multiple types of tests for software applications. These include integration tests, web tests, load tests, and others. **Unit tests** test individual software components and methods. Unit tests should only test code within the developer’s control. They should not test infrastructure concerns. Infrastructure concerns include databases, file systems, and network resources. \n\nAlso, keep in mind there are best practices for writing tests. For example, [Test Driven Development (TDD)](https://deviq.com/test-driven-development/) is when a unit test is written before the code it is meant to check. TDD is like creating an outline for a book before we write it. It is meant to help developers write simpler, more readable, and efficient code. \n\n> [!NOTE]\n> The ASP.NET team follows [these conventions](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests) to help developers come up with good names for test classes and methods.\n\nTry not to introduce dependencies on infrastructure when writing unit tests. These make the tests slow and brittle, and should be reserved for integration tests. You can avoid these dependencies in your application by following the [Explicit Dependencies Principle](https://deviq.com/explicit-dependencies-principle/) and using [Dependency Injection](/aspnet/core/fundamentals/dependency-injection). You can also keep your unit tests in a separate project from your integration tests. This ensures your unit test project doesn’t have references to or dependencies on infrastructure packages.\n\n## Next steps\n\nMore information on unit testing in .NET Core projects:\n\n.NET Core unit test projects are supported for:\n* [C#](../../csharp/index.md)\n* [F#](../../fsharp/index.md)\n* [Visual Basic](../../visual-basic/index.md) \n\nYou can also choose between:\n* [xUnit](https://xunit.github.io) \n* [NUnit](https://nunit.org)\n* [MSTest](https://github.com/Microsoft/testfx-docs)\n\nYou can learn more in the following walkthroughs:\n\n* Create unit tests using [*xUnit* and *C#* with the .NET Core CLI](unit-testing-with-dotnet-test.md).\n* Create unit tests using [*NUnit* and *C#* with the .NET Core CLI](unit-testing-with-nunit.md).\n* Create unit tests using [*MSTest* and *C#* with the .NET Core CLI](unit-testing-with-mstest.md).\n* Create unit tests using [*xUnit* and *F#* with the .NET Core CLI](unit-testing-fsharp-with-dotnet-test.md).\n* Create unit tests using [*NUnit* and *F#* with the .NET Core CLI](unit-testing-fsharp-with-nunit.md).\n* Create unit tests using [*MSTest* and *F#* with the .NET Core CLI](unit-testing-fsharp-with-mstest.md).\n* Create unit tests using [*xUnit* and *Visual Basic* with the .NET Core CLI](unit-testing-visual-basic-with-dotnet-test.md).\n* Create unit tests using [*NUnit* and *Visual Basic* with the .NET Core CLI](unit-testing-visual-basic-with-nunit.md).\n* Create unit tests using [*MSTest* and *Visual Basic* with the .NET Core CLI](unit-testing-visual-basic-with-mstest.md).\n\nYou can learn more in the following articles:\n\n* Visual Studio Enterprise offers great testing tools for .NET Core. Check out [Live Unit Testing](/visualstudio/test/live-unit-testing) or [code coverage](https://github.com/Microsoft/vstest-docs/blob/master/docs/analyze.md#working-with-code-coverage) to learn more.\n* For more information on how to run selective unit tests, see [Running selective unit tests](selective-unit-tests.md), or [including and excluding tests with Visual Studio](/visualstudio/test/live-unit-testing#include-and-exclude-test-projects-and-test-methods).\n* [How to use xUnit with .NET Core and Visual Studio](https://xunit.github.io/docs/getting-started-dotnet-core.html).\n","nodes":[{"pos":[4,237],"embed":true,"restype":"x-metadata","content":"title: Unit testing in .NET Core and .NET Standard\ndescription: This article gives a brief overview of unit testing for .NET Core and .NET Standard projects.\nauthor: ardalis\nms.author: wiwagn\nms.date: 08/30/2017\nms.custom: \"seodec18\"","nodes":[{"content":"Unit testing in .NET Core and .NET Standard","nodes":[{"pos":[0,43],"content":"Unit testing in .NET Core and .NET Standard","nodes":[{"content":"Unit testing in .NET Core and .NET Standard","pos":[0,43]}]}],"path":["title"],"nosxs":false},{"content":"This article gives a brief overview of unit testing for .NET Core and .NET Standard projects.","nodes":[{"pos":[0,93],"content":"This article gives a brief overview of unit testing for .NET Core and .NET Standard projects.","nodes":[{"content":"This article gives a brief overview of unit testing for .NET Core and .NET Standard projects.","pos":[0,93]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[245,288],"content":"Unit testing in .NET Core and .NET Standard","linkify":"Unit testing in .NET Core and .NET Standard","nodes":[{"content":"Unit testing in .NET Core and .NET Standard","pos":[0,43]}]},{"content":".NET Core makes it easy to create unit tests.","pos":[290,335]},{"content":"This article introduces unit tests and illustrates how they differ from other kinds of tests.","pos":[336,429]},{"content":"The linked resources near the bottom of the page show you how to add a test project to your solution.","pos":[430,531]},{"content":"After you set up your test project, you will be able to run your unit tests using the command line or Visual Studio.","pos":[532,648]},{"pos":[650,792],"content":".NET Core 2.0 and later supports <bpt id=\"p1\">[</bpt>.NET Standard 2.0<ept id=\"p1\">](../../standard/net-standard.md)</ept>, and we will use its libraries to demonstrate unit tests.","source":".NET Core 2.0 and later supports [.NET Standard 2.0](../../standard/net-standard.md), and we will use its libraries to demonstrate unit tests."},{"content":"You are able to use built-in .NET Core 2.0 and later unit test project templates for C#, F# and Visual Basic as a starting point for your personal project.","pos":[794,949]},{"pos":[954,974],"content":"What are unit tests?","linkify":"What are unit tests?","nodes":[{"content":"What are unit tests?","pos":[0,20]}]},{"content":"Having automated tests is a great way to ensure a software application does what its authors intend it to do.","pos":[976,1085]},{"content":"There are multiple types of tests for software applications.","pos":[1086,1146]},{"content":"These include integration tests, web tests, load tests, and others.","pos":[1147,1214]},{"content":"<bpt id=\"p1\">**</bpt>Unit tests<ept id=\"p1\">**</ept> test individual software components and methods.","pos":[1215,1278],"source":"**Unit tests** test individual software components and methods."},{"content":"Unit tests should only test code within the developer’s control.","pos":[1279,1343]},{"content":"They should not test infrastructure concerns.","pos":[1344,1389]},{"content":"Infrastructure concerns include databases, file systems, and network resources.","pos":[1390,1469]},{"content":"Also, keep in mind there are best practices for writing tests.","pos":[1472,1534]},{"content":"For example, <bpt id=\"p1\">[</bpt>Test Driven Development (TDD)<ept id=\"p1\">](https://deviq.com/test-driven-development/)</ept> is when a unit test is written before the code it is meant to check.","pos":[1535,1692],"source":" For example, [Test Driven Development (TDD)](https://deviq.com/test-driven-development/) is when a unit test is written before the code it is meant to check."},{"content":"TDD is like creating an outline for a book before we write it.","pos":[1693,1755]},{"content":"It is meant to help developers write simpler, more readable, and efficient code.","pos":[1756,1836]},{"pos":[1841,2060],"content":"[!NOTE]\nThe ASP.NET team follows [these conventions](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests) to help developers come up with good names for test classes and methods.","leadings":["","> "],"nodes":[{"content":"The ASP.NET team follows <bpt id=\"p1\">[</bpt>these conventions<ept id=\"p1\">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept> to help developers come up with good names for test classes and methods.","pos":[8,217],"source":"The ASP.NET team follows [these conventions](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests) to help developers come up with good names for test classes and methods."}]},{"content":"Try not to introduce dependencies on infrastructure when writing unit tests.","pos":[2062,2138]},{"content":"These make the tests slow and brittle, and should be reserved for integration tests.","pos":[2139,2223]},{"content":"You can avoid these dependencies in your application by following the <bpt id=\"p1\">[</bpt>Explicit Dependencies Principle<ept id=\"p1\">](https://deviq.com/explicit-dependencies-principle/)</ept> and using <bpt id=\"p2\">[</bpt>Dependency Injection<ept id=\"p2\">](/aspnet/core/fundamentals/dependency-injection)</ept>.","pos":[2224,2461],"source":" You can avoid these dependencies in your application by following the [Explicit Dependencies Principle](https://deviq.com/explicit-dependencies-principle/) and using [Dependency Injection](/aspnet/core/fundamentals/dependency-injection)."},{"content":"You can also keep your unit tests in a separate project from your integration tests.","pos":[2462,2546]},{"content":"This ensures your unit test project doesn’t have references to or dependencies on infrastructure packages.","pos":[2547,2653]},{"pos":[2658,2668],"content":"Next steps","linkify":"Next steps","nodes":[{"content":"Next steps","pos":[0,10]}]},{"content":"More information on unit testing in .NET Core projects:","pos":[2670,2725]},{"content":".NET Core unit test projects are supported for:","pos":[2727,2774]},{"pos":[2777,2804],"content":"<bpt id=\"p1\">[</bpt>C#<ept id=\"p1\">](../../csharp/index.md)</ept>","source":"[C#](../../csharp/index.md)"},{"pos":[2807,2834],"content":"<bpt id=\"p1\">[</bpt>F#<ept id=\"p1\">](../../fsharp/index.md)</ept>","source":"[F#](../../fsharp/index.md)"},{"pos":[2837,2880],"content":"<bpt id=\"p1\">[</bpt>Visual Basic<ept id=\"p1\">](../../visual-basic/index.md)</ept>","source":"[Visual Basic](../../visual-basic/index.md)"},{"content":"You can also choose between:","pos":[2883,2911]},{"pos":[2914,2946],"content":"<bpt id=\"p1\">[</bpt>xUnit<ept id=\"p1\">](https://xunit.github.io)</ept>","source":"[xUnit](https://xunit.github.io)"},{"pos":[2950,2976],"content":"<bpt id=\"p1\">[</bpt>NUnit<ept id=\"p1\">](https://nunit.org)</ept>","source":"[NUnit](https://nunit.org)"},{"pos":[2979,3029],"content":"<bpt id=\"p1\">[</bpt>MSTest<ept id=\"p1\">](https://github.com/Microsoft/testfx-docs)</ept>","source":"[MSTest](https://github.com/Microsoft/testfx-docs)"},{"content":"You can learn more in the following walkthroughs:","pos":[3031,3080]},{"pos":[3084,3184],"content":"Create unit tests using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>xUnit<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>C#<ept id=\"p3\">*</ept> with the .NET Core CLI<ept id=\"p1\">](unit-testing-with-dotnet-test.md)</ept>.","source":"Create unit tests using [*xUnit* and *C#* with the .NET Core CLI](unit-testing-with-dotnet-test.md)."},{"pos":[3187,3281],"content":"Create unit tests using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>NUnit<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>C#<ept id=\"p3\">*</ept> with the .NET Core CLI<ept id=\"p1\">](unit-testing-with-nunit.md)</ept>.","source":"Create unit tests using [*NUnit* and *C#* with the .NET Core CLI](unit-testing-with-nunit.md)."},{"pos":[3284,3380],"content":"Create unit tests using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>MSTest<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>C#<ept id=\"p3\">*</ept> with the .NET Core CLI<ept id=\"p1\">](unit-testing-with-mstest.md)</ept>.","source":"Create unit tests using [*MSTest* and *C#* with the .NET Core CLI](unit-testing-with-mstest.md)."},{"pos":[3383,3490],"content":"Create unit tests using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>xUnit<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>F#<ept id=\"p3\">*</ept> with the .NET Core CLI<ept id=\"p1\">](unit-testing-fsharp-with-dotnet-test.md)</ept>.","source":"Create unit tests using [*xUnit* and *F#* with the .NET Core CLI](unit-testing-fsharp-with-dotnet-test.md)."},{"pos":[3493,3594],"content":"Create unit tests using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>NUnit<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>F#<ept id=\"p3\">*</ept> with the .NET Core CLI<ept id=\"p1\">](unit-testing-fsharp-with-nunit.md)</ept>.","source":"Create unit tests using [*NUnit* and *F#* with the .NET Core CLI](unit-testing-fsharp-with-nunit.md)."},{"pos":[3597,3700],"content":"Create unit tests using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>MSTest<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>F#<ept id=\"p3\">*</ept> with the .NET Core CLI<ept id=\"p1\">](unit-testing-fsharp-with-mstest.md)</ept>.","source":"Create unit tests using [*MSTest* and *F#* with the .NET Core CLI](unit-testing-fsharp-with-mstest.md)."},{"pos":[3703,3826],"content":"Create unit tests using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>xUnit<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>Visual Basic<ept id=\"p3\">*</ept> with the .NET Core CLI<ept id=\"p1\">](unit-testing-visual-basic-with-dotnet-test.md)</ept>.","source":"Create unit tests using [*xUnit* and *Visual Basic* with the .NET Core CLI](unit-testing-visual-basic-with-dotnet-test.md)."},{"pos":[3829,3946],"content":"Create unit tests using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>NUnit<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>Visual Basic<ept id=\"p3\">*</ept> with the .NET Core CLI<ept id=\"p1\">](unit-testing-visual-basic-with-nunit.md)</ept>.","source":"Create unit tests using [*NUnit* and *Visual Basic* with the .NET Core CLI](unit-testing-visual-basic-with-nunit.md)."},{"pos":[3949,4068],"content":"Create unit tests using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>MSTest<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>Visual Basic<ept id=\"p3\">*</ept> with the .NET Core CLI<ept id=\"p1\">](unit-testing-visual-basic-with-mstest.md)</ept>.","source":"Create unit tests using [*MSTest* and *Visual Basic* with the .NET Core CLI](unit-testing-visual-basic-with-mstest.md)."},{"content":"You can learn more in the following articles:","pos":[4070,4115]},{"content":"Visual Studio Enterprise offers great testing tools for .NET Core.","pos":[4119,4185]},{"content":"Check out <bpt id=\"p1\">[</bpt>Live Unit Testing<ept id=\"p1\">](/visualstudio/test/live-unit-testing)</ept> or <bpt id=\"p2\">[</bpt>code coverage<ept id=\"p2\">](https://github.com/Microsoft/vstest-docs/blob/master/docs/analyze.md#working-with-code-coverage)</ept> to learn more.","pos":[4186,4384],"source":" Check out [Live Unit Testing](/visualstudio/test/live-unit-testing) or [code coverage](https://github.com/Microsoft/vstest-docs/blob/master/docs/analyze.md#working-with-code-coverage) to learn more."},{"pos":[4387,4648],"content":"For more information on how to run selective unit tests, see <bpt id=\"p1\">[</bpt>Running selective unit tests<ept id=\"p1\">](selective-unit-tests.md)</ept>, or <bpt id=\"p2\">[</bpt>including and excluding tests with Visual Studio<ept id=\"p2\">](/visualstudio/test/live-unit-testing#include-and-exclude-test-projects-and-test-methods)</ept>.","source":"For more information on how to run selective unit tests, see [Running selective unit tests](selective-unit-tests.md), or [including and excluding tests with Visual Studio](/visualstudio/test/live-unit-testing#include-and-exclude-test-projects-and-test-methods)."},{"pos":[4651,4766],"content":"<bpt id=\"p1\">[</bpt>How to use xUnit with .NET Core and Visual Studio<ept id=\"p1\">](https://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>.","source":"[How to use xUnit with .NET Core and Visual Studio](https://xunit.github.io/docs/getting-started-dotnet-core.html)."}]}