<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-creating-a-dataflow-pipeline.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b74e60daced88050413855070c880cd6c1cebfb1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\walkthrough-creating-a-dataflow-pipeline.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25806712dfeed2343413bbf2dcdf69041f4d9fe8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60c0330dc228e9ab5ed56a53411740ebc5cd32ac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Creating a Dataflow Pipeline</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Dataflow Pipeline</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Although you can use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Receive%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive%2A?displayProperty=nameWithType&gt;</ph> methods to receive messages from source blocks, you can also connect message blocks to form a <bpt id="p1">*</bpt>dataflow pipeline<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A dataflow pipeline is a series of components, or <bpt id="p1">*</bpt>dataflow blocks<ept id="p1">*</ept>, each of which performs a specific task that contributes to a larger goal.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Every dataflow block in a dataflow pipeline performs work when it receives a message from another dataflow block.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An analogy to this is an assembly line for automobile manufacturing.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As each vehicle passes through the assembly line, one station assembles the frame, the next one installs the engine, and so on.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because an assembly line enables multiple vehicles to be assembled at the same time, it provides better throughput than assembling complete vehicles one at a time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This document demonstrates a dataflow pipeline that downloads the book <bpt id="p1">*</bpt>The Iliad of Homer<ept id="p1">*</ept> from a website and searches the text to match individual words with words that reverse the first word's characters.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The formation of the dataflow pipeline in this document consists of the following steps:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create the dataflow blocks that participate in the pipeline.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Connect each dataflow block to the next block in the pipeline.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each block receives as input the output of the previous block in the pipeline.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For each dataflow block, create a continuation task that sets the next block to the completed state after the previous block finishes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Post data to the head of the pipeline.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Mark the head of the pipeline as completed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Wait for the pipeline to complete all work.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept> before you start this walkthrough.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creating a Console Application</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In Visual Studio, create a Visual C# or Visual Basic Console Application project.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Install the System.Threading.Tasks.Dataflow NuGet package.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add the following code to your project to create the basic application.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Creating the Dataflow Blocks</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`Main`</ph> method to create the dataflow blocks that participate in the pipeline.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The table that follows summarizes the role of each member of the pipeline.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Downloads the book text from the Web.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Separates the book text into an array of words.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Removes short words and duplicates from the word array.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Finds all words in the filtered word array collection whose reverse also occurs in the word array.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Displays words and the corresponding reverse words to the console.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Although you could combine multiple steps in the dataflow pipeline in this example into one step, the example illustrates the concept of composing multiple independent dataflow tasks to perform a larger task.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The example uses <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> to enable each member of the pipeline to perform an operation on its input data and send the results to the next step in the pipeline.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`findReversedWords`</ph> member of the pipeline is a <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602&gt;</ph> object because it produces multiple independent outputs for each input.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The tail of the pipeline, <ph id="ph1">`printReversedWords`</ph>, is an <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object because it performs an action on its input, and does not produce a result.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Forming the Pipeline</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add the following code to connect each block to the next block in the pipeline.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo%2A&gt;</ph> method to connect a source dataflow block to a target dataflow block, the source dataflow block propagates data to the target block as data becomes available.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you also provide <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowLinkOptions&gt;</ph> with <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion&gt;</ph> set to true, successful or unsuccessful completion of one block in the pipeline will cause completion of the next block in the pipeline.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Posting Data to the Pipeline</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add the following code to post the URL of the book <bpt id="p1">*</bpt>The Iliad of Homer<ept id="p1">*</ept> to the head of the dataflow pipeline.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This example uses <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A?displayProperty=nameWithType&gt;</ph> to synchronously send data to the head of the pipeline.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A?displayProperty=nameWithType&gt;</ph> method when you must asynchronously send data to a dataflow node.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Completing Pipeline Activity</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Add the following code to mark the head of the pipeline as completed.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The head of the pipeline propagates its completion after it processes all buffered messages.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This example sends one URL through the dataflow pipeline to be processed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you send more than one input through a pipeline, call the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A?displayProperty=nameWithType&gt;</ph> method after you submit all the input.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can omit this step if your application has no well-defined point at which data is no longer available or the application does not have to wait for the pipeline to finish.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Waiting for the Pipeline to Finish</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Add the following code to wait for the pipeline to finish.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The overall operation is finished when the tail of the pipeline finishes.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can wait for dataflow completion from any thread or from multiple threads at the same time.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The Complete Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example shows the complete code for this walkthrough.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This example sends one URL to process through the dataflow pipeline.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you send more than one input value through a pipeline, you can introduce a form of parallelism into your application that resembles how parts might move through an automobile factory.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When the first member of the pipeline sends its result to the second member, it can process another item in parallel as the second member processes the first result.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The parallelism that is achieved by using dataflow pipelines is known as <bpt id="p1">*</bpt>coarse-grained parallelism<ept id="p1">*</ept> because it typically consists of fewer, larger tasks.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can also use a more <bpt id="p1">*</bpt>fine-grained parallelism<ept id="p1">*</ept> of smaller, short-running tasks in a dataflow pipeline.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`findReversedWords`</ph> member of the pipeline uses <bpt id="p1">[</bpt>PLINQ<ept id="p1">](parallel-linq-plinq.md)</ept> to process multiple items in the work list in parallel.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The use of fine-grained parallelism in a coarse-grained pipeline can improve overall throughput.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can also connect a source dataflow block to multiple target blocks to create a <bpt id="p1">*</bpt>dataflow network<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The overloaded version of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo%2A&gt;</ph> method takes a <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> object that defines whether the target block accepts each message based on its value.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Most dataflow block types that act as sources offer messages to all connected target blocks, in the order in which they were connected, until one of the blocks accepts that message.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>By using this filtering mechanism, you can create systems of connected dataflow blocks that direct certain data through one path and other data through another path.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For an example that uses filtering to create a dataflow network, see <bpt id="p1">[</bpt>Walkthrough: Using Dataflow in a Windows Forms Application<ept id="p1">](../../../docs/standard/parallel-programming/walkthrough-using-dataflow-in-a-windows-forms-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>