<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73667843452bbcab52a8cd4aa7906beecc095677</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ce86b9c319d887e52ea6e781e5214fffe3d64d7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0f877e7f297aa198399ee78fa0cd8338dfe56c9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Unit testing in .NET Core and .NET Standard</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This article gives a brief overview of unit testing for .NET Core and .NET Standard projects.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Unit testing in .NET Core and .NET Standard</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core makes it easy to create unit tests.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article introduces unit tests and illustrates how they differ from other kinds of tests.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The linked resources near the bottom of the page show you how to add a test project to your solution.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>After you set up your test project, you will be able to run your unit tests using the command line or Visual Studio.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>.NET Core 2.0 and later supports <bpt id="p1">[</bpt>.NET Standard 2.0<ept id="p1">](../../standard/net-standard.md)</ept>, and we will use its libraries to demonstrate unit tests.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You are able to use built-in .NET Core 2.0 and later unit test project templates for C#, F# and Visual Basic as a starting point for your personal project.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>What are unit tests?</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Having automated tests is a great way to ensure a software application does what its authors intend it to do.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There are multiple types of tests for software applications.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These include integration tests, web tests, load tests, and others.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Unit tests<ept id="p1">**</ept> test individual software components and methods.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Unit tests should only test code within the developer’s control.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>They should not test infrastructure concerns.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Infrastructure concerns include databases, file systems, and network resources.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Also, keep in mind there are best practices for writing tests.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>Test Driven Development (TDD)<ept id="p1">](https://deviq.com/test-driven-development/)</ept> is when a unit test is written before the code it is meant to check.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>TDD is like creating an outline for a book before we write it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is meant to help developers write simpler, more readable, and efficient code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The ASP.NET team follows <bpt id="p1">[</bpt>these conventions<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept> to help developers come up with good names for test classes and methods.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Try not to introduce dependencies on infrastructure when writing unit tests.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These make the tests slow and brittle, and should be reserved for integration tests.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can avoid these dependencies in your application by following the <bpt id="p1">[</bpt>Explicit Dependencies Principle<ept id="p1">](https://deviq.com/explicit-dependencies-principle/)</ept> and using <bpt id="p2">[</bpt>Dependency Injection<ept id="p2">](/aspnet/core/fundamentals/dependency-injection)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can also keep your unit tests in a separate project from your integration tests.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This ensures your unit test project doesn’t have references to or dependencies on infrastructure packages.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Next steps</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>More information on unit testing in .NET Core projects:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>.NET Core unit test projects are supported for:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C#<ept id="p1">](../../csharp/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>F#<ept id="p1">](../../fsharp/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic<ept id="p1">](../../visual-basic/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can also choose between:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>xUnit<ept id="p1">](https://xunit.github.io)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NUnit<ept id="p1">](https://nunit.org)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MSTest<ept id="p1">](https://github.com/Microsoft/testfx-docs)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can learn more in the following walkthroughs:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Create unit tests using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>xUnit<ept id="p2">*</ept> and <bpt id="p3">*</bpt>C#<ept id="p3">*</ept> with the .NET Core CLI<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Create unit tests using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>NUnit<ept id="p2">*</ept> and <bpt id="p3">*</bpt>C#<ept id="p3">*</ept> with the .NET Core CLI<ept id="p1">](unit-testing-with-nunit.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Create unit tests using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>MSTest<ept id="p2">*</ept> and <bpt id="p3">*</bpt>C#<ept id="p3">*</ept> with the .NET Core CLI<ept id="p1">](unit-testing-with-mstest.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Create unit tests using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>xUnit<ept id="p2">*</ept> and <bpt id="p3">*</bpt>F#<ept id="p3">*</ept> with the .NET Core CLI<ept id="p1">](unit-testing-fsharp-with-dotnet-test.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Create unit tests using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>NUnit<ept id="p2">*</ept> and <bpt id="p3">*</bpt>F#<ept id="p3">*</ept> with the .NET Core CLI<ept id="p1">](unit-testing-fsharp-with-nunit.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Create unit tests using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>MSTest<ept id="p2">*</ept> and <bpt id="p3">*</bpt>F#<ept id="p3">*</ept> with the .NET Core CLI<ept id="p1">](unit-testing-fsharp-with-mstest.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Create unit tests using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>xUnit<ept id="p2">*</ept> and <bpt id="p3">*</bpt>Visual Basic<ept id="p3">*</ept> with the .NET Core CLI<ept id="p1">](unit-testing-visual-basic-with-dotnet-test.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Create unit tests using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>NUnit<ept id="p2">*</ept> and <bpt id="p3">*</bpt>Visual Basic<ept id="p3">*</ept> with the .NET Core CLI<ept id="p1">](unit-testing-visual-basic-with-nunit.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Create unit tests using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>MSTest<ept id="p2">*</ept> and <bpt id="p3">*</bpt>Visual Basic<ept id="p3">*</ept> with the .NET Core CLI<ept id="p1">](unit-testing-visual-basic-with-mstest.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can learn more in the following articles:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Visual Studio Enterprise offers great testing tools for .NET Core.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Check out <bpt id="p1">[</bpt>Live Unit Testing<ept id="p1">](/visualstudio/test/live-unit-testing)</ept> or <bpt id="p2">[</bpt>code coverage<ept id="p2">](https://github.com/Microsoft/vstest-docs/blob/master/docs/analyze.md#working-with-code-coverage)</ept> to learn more.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information on how to run selective unit tests, see <bpt id="p1">[</bpt>Running selective unit tests<ept id="p1">](selective-unit-tests.md)</ept>, or <bpt id="p2">[</bpt>including and excluding tests with Visual Studio<ept id="p2">](/visualstudio/test/live-unit-testing#include-and-exclude-test-projects-and-test-methods)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to use xUnit with .NET Core and Visual Studio<ept id="p1">](https://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>