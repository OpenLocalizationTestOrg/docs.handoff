{"content":"---\ntitle: \"Using the StringBuilder Class in .NET\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"Remove method\"\n  - \"strings [.NET Framework], capacities\"\n  - \"StringBuilder object\"\n  - \"Replace method\"\n  - \"AppendFormat method\"\n  - \"Append method\"\n  - \"Insert method\"\n  - \"strings [.NET Framework], StringBuilder object\"\nms.assetid: 5c14867c-9a99-45bc-ae7f-2686700d377a\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Using the StringBuilder Class in .NET\nThe <xref:System.String> object is immutable. Every time you use one of the methods in the <xref:System.String?displayProperty=nameWithType> class, you create a new string object in memory, which requires a new allocation of space for that new object. In situations where you need to perform repeated modifications to a string, the overhead associated with creating a new <xref:System.String> object can be costly. The <xref:System.Text.StringBuilder?displayProperty=nameWithType> class can be used when you want to modify a string without creating a new object. For example, using the <xref:System.Text.StringBuilder> class can boost performance when concatenating many strings together in a loop.  \n  \n## Importing the System.Text Namespace  \n The <xref:System.Text.StringBuilder> class is found in the <xref:System.Text> namespace.  To avoid having to provide a fully qualified type name in your code,  you can import the <xref:System.Text> namespace:  \n  \n [!code-cpp[Conceptual.StringBuilder#11](../../../samples/snippets/cpp/VS_Snippets_CLR/Conceptual.StringBuilder/cpp/example.cpp#11)]\n [!code-csharp[Conceptual.StringBuilder#11](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/Example.cs#11)]\n [!code-vb[Conceptual.StringBuilder#11](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/Example.vb#11)]  \n  \n## Instantiating a StringBuilder Object  \n You can create a new instance of the <xref:System.Text.StringBuilder> class by initializing your variable with one of the overloaded constructor methods, as illustrated in the following example.  \n  \n [!code-cpp[Conceptual.StringBuilder#1](../../../samples/snippets/cpp/VS_Snippets_CLR/Conceptual.StringBuilder/cpp/example.cpp#1)]\n [!code-csharp[Conceptual.StringBuilder#1](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/Example.cs#1)]\n [!code-vb[Conceptual.StringBuilder#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/Example.vb#1)]  \n  \n## Setting the Capacity and Length  \n Although the <xref:System.Text.StringBuilder> is a dynamic object that allows you to expand the number of characters in the string that it encapsulates, you can specify a value for the maximum number of characters that it can hold. This value is called the capacity of the object and should not be confused with the length of the string that the current <xref:System.Text.StringBuilder> holds. For example, you might create a new instance of the <xref:System.Text.StringBuilder> class with the string \"Hello\", which has a length of 5, and you might specify that the object has a maximum capacity of 25. When you modify the <xref:System.Text.StringBuilder>, it does not reallocate size for itself until the capacity is reached. When this occurs, the new space is allocated automatically and the capacity is doubled. You can specify the capacity of the <xref:System.Text.StringBuilder> class using one of the overloaded constructors. The following example specifies that the `myStringBuilder` object can be expanded to a maximum of 25 spaces.  \n  \n [!code-cpp[Conceptual.StringBuilder#2](../../../samples/snippets/cpp/VS_Snippets_CLR/Conceptual.StringBuilder/cpp/example.cpp#2)]\n [!code-csharp[Conceptual.StringBuilder#2](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/Example.cs#2)]\n [!code-vb[Conceptual.StringBuilder#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/Example.vb#2)]  \n  \n Additionally, you can use the read/write <xref:System.Text.StringBuilder.Capacity%2A> property to set the maximum length of your object. The following example uses the **Capacity** property to define the maximum object length.  \n  \n [!code-cpp[Conceptual.StringBuilder#3](../../../samples/snippets/cpp/VS_Snippets_CLR/Conceptual.StringBuilder/cpp/example.cpp#3)]\n [!code-csharp[Conceptual.StringBuilder#3](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/Example.cs#3)]\n [!code-vb[Conceptual.StringBuilder#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/Example.vb#3)]  \n  \n The <xref:System.Text.StringBuilder.EnsureCapacity%2A> method can be used to check the capacity of the current **StringBuilder**. If the capacity is greater than the passed value, no change is made; however, if the capacity is smaller than the passed value, the current capacity is changed to match the passed value.  \n  \n The <xref:System.Text.StringBuilder.Length%2A> property can also be viewed or set. If you set the **Length** property to a value that is greater than the **Capacity** property, the **Capacity** property is automatically changed to the same value as the **Length** property. Setting the **Length** property to a value that is less than the length of the string within the current **StringBuilder** shortens the string.  \n  \n## Modifying the StringBuilder String  \n The following table lists the methods you can use to modify the contents of a **StringBuilder**.  \n  \n|Method name|Use|  \n|-----------------|---------|  \n|<xref:System.Text.StringBuilder.Append%2A?displayProperty=nameWithType>|Appends information to the end of the current **StringBuilder**.|  \n|<xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>|Replaces a format specifier passed in a string with formatted text.|  \n|<xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType>|Inserts a string or object into the specified index of the current **StringBuilder**.|  \n|<xref:System.Text.StringBuilder.Remove%2A?displayProperty=nameWithType>|Removes a specified number of characters from the current **StringBuilder**.|  \n|<xref:System.Text.StringBuilder.Replace%2A?displayProperty=nameWithType>|Replaces a specified character at a specified index.|  \n  \n### Append  \n The **Append** method can be used to add text or a string representation of an object to the end of a string represented by the current **StringBuilder**. The following example initializes a **StringBuilder** to \"Hello World\" and then appends some text to the end of the object. Space is allocated automatically as needed.  \n  \n [!code-cpp[Conceptual.StringBuilder#4](../../../samples/snippets/cpp/VS_Snippets_CLR/Conceptual.StringBuilder/cpp/example.cpp#4)]\n [!code-csharp[Conceptual.StringBuilder#4](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/Example.cs#4)]\n [!code-vb[Conceptual.StringBuilder#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/Example.vb#4)]  \n  \n### AppendFormat  \n The <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType> method adds text to the end of the <xref:System.Text.StringBuilder> object. It supports the composite formatting feature (for more information, see [Composite Formatting](../../../docs/standard/base-types/composite-formatting.md)) by calling the <xref:System.IFormattable> implementation of the object or objects to be formatted. Therefore, it accepts the standard format strings for numeric, date and time, and enumeration values, the custom format strings for numeric and date and time values, and the format strings defined for custom types. (For information about formatting, see [Formatting Types](../../../docs/standard/base-types/formatting-types.md).) You can use this method to customize the format of variables and append those values to a <xref:System.Text.StringBuilder>. The following example uses the <xref:System.Text.StringBuilder.AppendFormat%2A> method to place an integer value formatted as a currency value at the end of a <xref:System.Text.StringBuilder> object.  \n  \n [!code-cpp[Conceptual.StringBuilder#5](../../../samples/snippets/cpp/VS_Snippets_CLR/Conceptual.StringBuilder/cpp/example.cpp#5)]\n [!code-csharp[Conceptual.StringBuilder#5](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/Example.cs#5)]\n [!code-vb[Conceptual.StringBuilder#5](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/Example.vb#5)]  \n  \n### Insert  \n The <xref:System.Text.StringBuilder.Insert%2A> method adds a string or object to a specified position in the current <xref:System.Text.StringBuilder> object. The following example uses this method to insert a word into the sixth position of a <xref:System.Text.StringBuilder> object.  \n  \n [!code-cpp[Conceptual.StringBuilder#6](../../../samples/snippets/cpp/VS_Snippets_CLR/Conceptual.StringBuilder/cpp/example.cpp#6)]\n [!code-csharp[Conceptual.StringBuilder#6](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/Example.cs#6)]\n [!code-vb[Conceptual.StringBuilder#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/Example.vb#6)]  \n  \n### Remove  \n You can use the **Remove** method to remove a specified number of characters from the current <xref:System.Text.StringBuilder> object, beginning at a specified zero-based index. The following example uses the **Remove** method to shorten a <xref:System.Text.StringBuilder> object.  \n  \n [!code-cpp[Conceptual.StringBuilder#7](../../../samples/snippets/cpp/VS_Snippets_CLR/Conceptual.StringBuilder/cpp/example.cpp#7)]\n [!code-csharp[Conceptual.StringBuilder#7](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/Example.cs#7)]\n [!code-vb[Conceptual.StringBuilder#7](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/Example.vb#7)]  \n  \n### Replace  \n The **Replace** method can be used to replace characters within the <xref:System.Text.StringBuilder> object with another specified character. The following example uses the **Replace** method to search a <xref:System.Text.StringBuilder> object for all instances of the exclamation point character (!) and replace them with the question mark character (?).  \n  \n [!code-cpp[Conceptual.StringBuilder#8](../../../samples/snippets/cpp/VS_Snippets_CLR/Conceptual.StringBuilder/cpp/example.cpp#8)]\n [!code-csharp[Conceptual.StringBuilder#8](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/Example.cs#8)]\n [!code-vb[Conceptual.StringBuilder#8](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/Example.vb#8)]  \n  \n## Converting a StringBuilder Object to a String  \n You must convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface. You do this conversion by calling the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method. The following example calls a number of <xref:System.Text.StringBuilder> methods and then calls the <xref:System.Text.StringBuilder.ToString?displayProperty=nameWithType> method to display the string.  \n  \n [!code-csharp[Conceptual.StringBuilder#10](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.StringBuilder/cs/tostringexample1.cs#10)]\n [!code-vb[Conceptual.StringBuilder#10](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.StringBuilder/vb/tostringexample1.vb#10)]  \n  \n## See also\n\n- <xref:System.Text.StringBuilder?displayProperty=nameWithType>\n- [Basic String Operations](../../../docs/standard/base-types/basic-string-operations.md)\n- [Formatting Types](../../../docs/standard/base-types/formatting-types.md)\n","nodes":[{"pos":[4,488],"embed":true,"restype":"x-metadata","content":"title: \"Using the StringBuilder Class in .NET\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"Remove method\"\n  - \"strings [.NET Framework], capacities\"\n  - \"StringBuilder object\"\n  - \"Replace method\"\n  - \"AppendFormat method\"\n  - \"Append method\"\n  - \"Insert method\"\n  - \"strings [.NET Framework], StringBuilder object\"\nms.assetid: 5c14867c-9a99-45bc-ae7f-2686700d377a\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Using the StringBuilder Class in .NET","nodes":[{"pos":[0,37],"content":"Using the StringBuilder Class in .NET","nodes":[{"content":"Using the StringBuilder Class in .NET","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[495,532],"content":"Using the StringBuilder Class in .NET","linkify":"Using the StringBuilder Class in .NET","nodes":[{"content":"Using the StringBuilder Class in .NET","pos":[0,37]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object is immutable.","pos":[533,578],"source":"The <xref:System.String> object is immutable."},{"content":"Every time you use one of the methods in the <ph id=\"ph1\">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> class, you create a new string object in memory, which requires a new allocation of space for that new object.","pos":[579,784],"source":" Every time you use one of the methods in the <xref:System.String?displayProperty=nameWithType> class, you create a new string object in memory, which requires a new allocation of space for that new object."},{"content":"In situations where you need to perform repeated modifications to a string, the overhead associated with creating a new <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object can be costly.","pos":[785,947],"source":" In situations where you need to perform repeated modifications to a string, the overhead associated with creating a new <xref:System.String> object can be costly."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph> class can be used when you want to modify a string without creating a new object.","pos":[948,1095],"source":" The <xref:System.Text.StringBuilder?displayProperty=nameWithType> class can be used when you want to modify a string without creating a new object."},{"content":"For example, using the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class can boost performance when concatenating many strings together in a loop.","pos":[1096,1231],"source":" For example, using the <xref:System.Text.StringBuilder> class can boost performance when concatenating many strings together in a loop."},{"pos":[1240,1275],"content":"Importing the System.Text Namespace","linkify":"Importing the System.Text Namespace","nodes":[{"content":"Importing the System.Text Namespace","pos":[0,35]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class is found in the <ph id=\"ph2\">&lt;xref:System.Text&gt;</ph> namespace.","pos":[1279,1367],"source":"The <xref:System.Text.StringBuilder> class is found in the <xref:System.Text> namespace."},{"content":"To avoid having to provide a fully qualified type name in your code,  you can import the <ph id=\"ph1\">&lt;xref:System.Text&gt;</ph> namespace:","pos":[1369,1487],"source":"  To avoid having to provide a fully qualified type name in your code,  you can import the <xref:System.Text> namespace:"},{"pos":[1909,1945],"content":"Instantiating a StringBuilder Object","linkify":"Instantiating a StringBuilder Object","nodes":[{"content":"Instantiating a StringBuilder Object","pos":[0,36]}]},{"pos":[1949,2143],"content":"You can create a new instance of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class by initializing your variable with one of the overloaded constructor methods, as illustrated in the following example.","source":"You can create a new instance of the <xref:System.Text.StringBuilder> class by initializing your variable with one of the overloaded constructor methods, as illustrated in the following example."},{"pos":[2559,2590],"content":"Setting the Capacity and Length","linkify":"Setting the Capacity and Length","nodes":[{"content":"Setting the Capacity and Length","pos":[0,31]}]},{"content":"Although the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> is a dynamic object that allows you to expand the number of characters in the string that it encapsulates, you can specify a value for the maximum number of characters that it can hold.","pos":[2594,2825],"source":"Although the <xref:System.Text.StringBuilder> is a dynamic object that allows you to expand the number of characters in the string that it encapsulates, you can specify a value for the maximum number of characters that it can hold."},{"content":"This value is called the capacity of the object and should not be confused with the length of the string that the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> holds.","pos":[2826,2987],"source":" This value is called the capacity of the object and should not be confused with the length of the string that the current <xref:System.Text.StringBuilder> holds."},{"content":"For example, you might create a new instance of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class with the string \"Hello\", which has a length of 5, and you might specify that the object has a maximum capacity of 25.","pos":[2988,3196],"source":" For example, you might create a new instance of the <xref:System.Text.StringBuilder> class with the string \"Hello\", which has a length of 5, and you might specify that the object has a maximum capacity of 25."},{"content":"When you modify the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph>, it does not reallocate size for itself until the capacity is reached.","pos":[3197,3320],"source":" When you modify the <xref:System.Text.StringBuilder>, it does not reallocate size for itself until the capacity is reached."},{"content":"When this occurs, the new space is allocated automatically and the capacity is doubled.","pos":[3321,3408]},{"content":"You can specify the capacity of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class using one of the overloaded constructors.","pos":[3409,3525],"source":" You can specify the capacity of the <xref:System.Text.StringBuilder> class using one of the overloaded constructors."},{"content":"The following example specifies that the <ph id=\"ph1\">`myStringBuilder`</ph> object can be expanded to a maximum of 25 spaces.","pos":[3526,3634],"source":" The following example specifies that the `myStringBuilder` object can be expanded to a maximum of 25 spaces."},{"content":"Additionally, you can use the read/write <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property to set the maximum length of your object.","pos":[4048,4184],"source":"Additionally, you can use the read/write <xref:System.Text.StringBuilder.Capacity%2A> property to set the maximum length of your object."},{"content":"The following example uses the <bpt id=\"p1\">**</bpt>Capacity<ept id=\"p1\">**</ept> property to define the maximum object length.","pos":[4185,4274],"source":" The following example uses the **Capacity** property to define the maximum object length."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.EnsureCapacity%2A&gt;</ph> method can be used to check the capacity of the current <bpt id=\"p1\">**</bpt>StringBuilder<ept id=\"p1\">**</ept>.","pos":[4688,4817],"source":"The <xref:System.Text.StringBuilder.EnsureCapacity%2A> method can be used to check the capacity of the current **StringBuilder**."},{"content":"If the capacity is greater than the passed value, no change is made; however, if the capacity is smaller than the passed value, the current capacity is changed to match the passed value.","pos":[4818,5004]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property can also be viewed or set.","pos":[5011,5093],"source":"The <xref:System.Text.StringBuilder.Length%2A> property can also be viewed or set."},{"content":"If you set the <bpt id=\"p1\">**</bpt>Length<ept id=\"p1\">**</ept> property to a value that is greater than the <bpt id=\"p2\">**</bpt>Capacity<ept id=\"p2\">**</ept> property, the <bpt id=\"p3\">**</bpt>Capacity<ept id=\"p3\">**</ept> property is automatically changed to the same value as the <bpt id=\"p4\">**</bpt>Length<ept id=\"p4\">**</ept> property.","pos":[5094,5284],"source":" If you set the **Length** property to a value that is greater than the **Capacity** property, the **Capacity** property is automatically changed to the same value as the **Length** property."},{"content":"Setting the <bpt id=\"p1\">**</bpt>Length<ept id=\"p1\">**</ept> property to a value that is less than the length of the string within the current <bpt id=\"p2\">**</bpt>StringBuilder<ept id=\"p2\">**</ept> shortens the string.","pos":[5285,5428],"source":" Setting the **Length** property to a value that is less than the length of the string within the current **StringBuilder** shortens the string."},{"pos":[5437,5471],"content":"Modifying the StringBuilder String","linkify":"Modifying the StringBuilder String","nodes":[{"content":"Modifying the StringBuilder String","pos":[0,34]}]},{"pos":[5475,5571],"content":"The following table lists the methods you can use to modify the contents of a <bpt id=\"p1\">**</bpt>StringBuilder<ept id=\"p1\">**</ept>.","source":"The following table lists the methods you can use to modify the contents of a **StringBuilder**."},{"content":"Method name","pos":[5578,5589]},{"content":"Use","pos":[5590,5593]},{"pos":[5702,5766],"content":"Appends information to the end of the current <bpt id=\"p1\">**</bpt>StringBuilder<ept id=\"p1\">**</ept>.","source":"Appends information to the end of the current **StringBuilder**."},{"content":"Replaces a format specifier passed in a string with formatted text.","pos":[5849,5916]},{"pos":[5993,6078],"content":"Inserts a string or object into the specified index of the current <bpt id=\"p1\">**</bpt>StringBuilder<ept id=\"p1\">**</ept>.","source":"Inserts a string or object into the specified index of the current **StringBuilder**."},{"pos":[6155,6231],"content":"Removes a specified number of characters from the current <bpt id=\"p1\">**</bpt>StringBuilder<ept id=\"p1\">**</ept>.","source":"Removes a specified number of characters from the current **StringBuilder**."},{"content":"Replaces a specified character at a specified index.","pos":[6309,6361]},{"pos":[6372,6378],"content":"Append","linkify":"Append","nodes":[{"content":"Append","pos":[0,6]}]},{"content":"The <bpt id=\"p1\">**</bpt>Append<ept id=\"p1\">**</ept> method can be used to add text or a string representation of an object to the end of a string represented by the current <bpt id=\"p2\">**</bpt>StringBuilder<ept id=\"p2\">**</ept>.","pos":[6382,6536],"source":"The **Append** method can be used to add text or a string representation of an object to the end of a string represented by the current **StringBuilder**."},{"content":"The following example initializes a <bpt id=\"p1\">**</bpt>StringBuilder<ept id=\"p1\">**</ept> to \"Hello World\" and then appends some text to the end of the object.","pos":[6537,6660],"source":" The following example initializes a **StringBuilder** to \"Hello World\" and then appends some text to the end of the object."},{"content":"Space is allocated automatically as needed.","pos":[6661,6704]},{"pos":[7121,7133],"content":"AppendFormat","linkify":"AppendFormat","nodes":[{"content":"AppendFormat","pos":[0,12]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType&gt;</ph> method adds text to the end of the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[7137,7294],"source":"The <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType> method adds text to the end of the <xref:System.Text.StringBuilder> object."},{"content":"It supports the composite formatting feature (for more information, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](../../../docs/standard/base-types/composite-formatting.md)</ept>) by calling the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> implementation of the object or objects to be formatted.","pos":[7295,7548],"source":" It supports the composite formatting feature (for more information, see [Composite Formatting](../../../docs/standard/base-types/composite-formatting.md)) by calling the <xref:System.IFormattable> implementation of the object or objects to be formatted."},{"content":"Therefore, it accepts the standard format strings for numeric, date and time, and enumeration values, the custom format strings for numeric and date and time values, and the format strings defined for custom types.","pos":[7549,7763]},{"content":"(For information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](../../../docs/standard/base-types/formatting-types.md)</ept>.) You can use this method to customize the format of variables and append those values to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph>.","pos":[7764,8002],"source":" (For information about formatting, see [Formatting Types](../../../docs/standard/base-types/formatting-types.md).) You can use this method to customize the format of variables and append those values to a <xref:System.Text.StringBuilder>."},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method to place an integer value formatted as a currency value at the end of a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[8003,8202],"source":" The following example uses the <xref:System.Text.StringBuilder.AppendFormat%2A> method to place an integer value formatted as a currency value at the end of a <xref:System.Text.StringBuilder> object."},{"pos":[8619,8625],"content":"Insert","linkify":"Insert","nodes":[{"content":"Insert","pos":[0,6]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Insert%2A&gt;</ph> method adds a string or object to a specified position in the current <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[8629,8786],"source":"The <xref:System.Text.StringBuilder.Insert%2A> method adds a string or object to a specified position in the current <xref:System.Text.StringBuilder> object."},{"content":"The following example uses this method to insert a word into the sixth position of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[8787,8912],"source":" The following example uses this method to insert a word into the sixth position of a <xref:System.Text.StringBuilder> object."},{"pos":[9329,9335],"content":"Remove","linkify":"Remove","nodes":[{"content":"Remove","pos":[0,6]}]},{"content":"You can use the <bpt id=\"p1\">**</bpt>Remove<ept id=\"p1\">**</ept> method to remove a specified number of characters from the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, beginning at a specified zero-based index.","pos":[9339,9516],"source":"You can use the **Remove** method to remove a specified number of characters from the current <xref:System.Text.StringBuilder> object, beginning at a specified zero-based index."},{"content":"The following example uses the <bpt id=\"p1\">**</bpt>Remove<ept id=\"p1\">**</ept> method to shorten a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[9517,9619],"source":" The following example uses the **Remove** method to shorten a <xref:System.Text.StringBuilder> object."},{"pos":[10036,10043],"content":"Replace","linkify":"Replace","nodes":[{"content":"Replace","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">**</bpt>Replace<ept id=\"p1\">**</ept> method can be used to replace characters within the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object with another specified character.","pos":[10047,10188],"source":"The **Replace** method can be used to replace characters within the <xref:System.Text.StringBuilder> object with another specified character."},{"content":"The following example uses the <bpt id=\"p1\">**</bpt>Replace<ept id=\"p1\">**</ept> method to search a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object for all instances of the exclamation point character (!) and replace them with the question mark character (?).","pos":[10189,10402],"source":" The following example uses the **Replace** method to search a <xref:System.Text.StringBuilder> object for all instances of the exclamation point character (!) and replace them with the question mark character (?)."},{"pos":[10818,10863],"content":"Converting a StringBuilder Object to a String","linkify":"Converting a StringBuilder Object to a String","nodes":[{"content":"Converting a StringBuilder Object to a String","pos":[0,45]}]},{"content":"You must convert the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object before you can pass the string represented by the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a method that has a <ph id=\"ph4\">&lt;xref:System.String&gt;</ph> parameter or display it in the user interface.","pos":[10867,11141],"source":"You must convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface."},{"content":"You do this conversion by calling the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[11142,11261],"source":" You do this conversion by calling the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method."},{"content":"The following example calls a number of <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> methods and then calls the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.ToString?displayProperty=nameWithType&gt;</ph> method to display the string.","pos":[11262,11462],"source":" The following example calls a number of <xref:System.Text.StringBuilder> methods and then calls the <xref:System.Text.StringBuilder.ToString?displayProperty=nameWithType> method to display the string."},{"pos":[11769,11777],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[11845,11932],"content":"<bpt id=\"p1\">[</bpt>Basic String Operations<ept id=\"p1\">](../../../docs/standard/base-types/basic-string-operations.md)</ept>","source":"[Basic String Operations](../../../docs/standard/base-types/basic-string-operations.md)"},{"pos":[11935,12008],"content":"<bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](../../../docs/standard/base-types/formatting-types.md)</ept>","source":"[Formatting Types](../../../docs/standard/base-types/formatting-types.md)"}]}