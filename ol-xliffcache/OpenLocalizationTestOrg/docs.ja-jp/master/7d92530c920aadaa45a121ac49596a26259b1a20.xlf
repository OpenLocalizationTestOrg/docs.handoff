<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d92530c920aadaa45a121ac49596a26259b1a20</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\io\asynchronous-file-i-o.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7479c74f804709e71cafcabe3be55d3be4d7300e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c87f913ab8ea146679c5f5d6067589ed22855229</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Asynchronous File I-O | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Asynchronous File I/O</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Asynchronous operations enable you to perform resource-intensive I/O operations without blocking the main thread.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](../../../includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, the I/O types include async methods to simplify asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An async method contains <ph id="ph1">`Async`</ph> in its name, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.IO.TextReader.ReadToEndAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These async methods are implemented on stream classes, such as <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>, and on classes that are used for reading from or writing to streams, such <ph id="ph4">&lt;xref:System.IO.TextReader&gt;</ph> and <ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> to support legacy code; however, the async methods help you implement asynchronous I/O operations more easily.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)]</ph>, Visual Studio provides two keywords for asynchronous programming:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Async`</ph> (Visual Basic) or <ph id="ph2">`async`</ph> (C#) modifier, which is used to mark a method that contains an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Await`</ph> (Visual Basic) or <ph id="ph2">`await`</ph> (C#) operator, which is applied to the result of an async method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To implement asynchronous I/O operations, use these keywords in conjunction with the async methods, as shown in the following examples.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await<ept id="p1">](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to copy files asynchronously from one directory to another.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Asynchronous_File_IO_async#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Asynchronous_File_IO_async#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The next example is similar to the previous one but uses <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> objects to read and write the contents of a text file asynchronously.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Asynchronous_File_IO_async#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example2.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Asynchronous_File_IO_async#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example2.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The next example shows the code-behind file and the XAML file that are used to open a file as a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> in a <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app, and read its contents by using an instance of the <ph id="ph3">&lt;xref:System.IO.StreamReader&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It uses asynchronous methods to open the file as a stream and to read its contents.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.IO.WindowsRuntimeStorageExtensions#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.IO.WindowsRuntimeStorageExtensions#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage.xaml.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>System.IO.WindowsRuntimeStorageExtensions#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>File and Stream I-O<ept id="p1">](../../../docs/standard/io/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await<ept id="p1">](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>