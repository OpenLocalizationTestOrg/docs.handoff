{"content":"---\ntitle: \"Loop Structures (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"control flow, loops\"\n  - \"For keyword [Visual Basic], loop structures\"\n  - \"loops\"\n  - \"loop structures\"\n  - \"statements [Visual Basic], loop\"\n  - \"Do statement, Do loops\"\n  - \"conditional statements, loop structures\"\nms.assetid: ecacb09b-a4c9-42be-98b2-a15d368b5db8\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Loop Structures (Visual Basic)\n[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] loop structures allow you to run one or more lines of code repetitively. You can repeat the statements in a loop structure until a condition is `True`, until a condition is `False`, a specified number of times, or once for each element in a collection.  \n  \n The following illustration shows a loop structure that runs a set of statements until a condition becomes true.  \n  \n ![Flow chart of a Do...Until loop](../../../../visual-basic/programming-guide/language-features/control-flow/media/dountilloop.gif \"DoUntilLoop\")  \nRunning a set of statements until a condition becomes true  \n  \n## While Loops  \n The `While`...`End While` construction runs a set of statements as long as the condition specified in the `While` statement is `True`. For more information, see [While...End While Statement](../../../../visual-basic/language-reference/statements/while-end-while-statement.md).  \n  \n## Do Loops  \n The `Do`...`Loop` construction allows you to test a condition at either the beginning or the end of a loop structure. You can also specify whether to repeat the loop while the condition remains `True` or until it becomes `True`. For more information, see [Do...Loop Statement](../../../../visual-basic/language-reference/statements/do-loop-statement.md).  \n  \n## For Loops  \n The `For`...`Next` construction performs the loop a set number of times. It uses a loop control variable, also called a *counter*, to keep track of the repetitions. You specify the starting and ending values for this counter, and you can optionally specify the amount by which it increases from one repetition to the next. For more information, see [For...Next Statement](../../../../visual-basic/language-reference/statements/for-next-statement.md).  \n  \n## For Each Loops  \n The `For Each`...`Next` construction runs a set of statements once for each element in a collection. You specify the loop control variable, but you do not have to determine starting or ending values for it. For more information, see [For Each...Next Statement](../../../../visual-basic/language-reference/statements/for-each-next-statement.md).  \n  \n## See Also  \n [Control Flow](../../../../visual-basic/programming-guide/language-features/control-flow/index.md)   \n [Decision Structures](../../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)   \n [Other Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/other-control-structures.md)   \n [Nested Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)","nodes":[{"pos":[4,770],"nodes":[{"content":"Loop Structures (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,47],"content":"Loop Structures (Visual Basic) | Microsoft Docs","nodes":[{"content":"Loop Structures (Visual Basic) | Microsoft Docs","pos":[0,47]}]}],"pos":[6,56],"yaml":true}],"content":"title: \"Loop Structures (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"control flow, loops\"\n  - \"For keyword [Visual Basic], loop structures\"\n  - \"loops\"\n  - \"loop structures\"\n  - \"statements [Visual Basic], loop\"\n  - \"Do statement, Do loops\"\n  - \"conditional statements, loop structures\"\nms.assetid: ecacb09b-a4c9-42be-98b2-a15d368b5db8\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[777,807],"content":"Loop Structures (Visual Basic)","linkify":"Loop Structures (Visual Basic)","nodes":[{"content":"Loop Structures (Visual Basic)","pos":[0,30]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> loop structures allow you to run one or more lines of code repetitively.","pos":[808,973],"source":"[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] loop structures allow you to run one or more lines of code repetitively."},{"content":"You can repeat the statements in a loop structure until a condition is <ph id=\"ph1\">`True`</ph>, until a condition is <ph id=\"ph2\">`False`</ph>, a specified number of times, or once for each element in a collection.","pos":[974,1153],"source":" You can repeat the statements in a loop structure until a condition is `True`, until a condition is `False`, a specified number of times, or once for each element in a collection."},{"content":"The following illustration shows a loop structure that runs a set of statements until a condition becomes true.","pos":[1160,1271]},{"content":"<bpt id=\"p1\">![</bpt>Flow chart of a Do...Until loop<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/media/dountilloop.gif \"DoUntilLoop\")</ept>","pos":[1278,1423],"source":"![Flow chart of a Do...Until loop](../../../../visual-basic/programming-guide/language-features/control-flow/media/dountilloop.gif \"DoUntilLoop\")"},{"content":"Running a set of statements until a condition becomes true","pos":[1426,1484]},{"pos":[1493,1504],"content":"While Loops","linkify":"While Loops","nodes":[{"content":"While Loops","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`While`</ph>...<ph id=\"ph2\">`End While`</ph> construction runs a set of statements as long as the condition specified in the <ph id=\"ph3\">`While`</ph> statement is <ph id=\"ph4\">`True`</ph>.","pos":[1508,1642],"source":"The `While`...`End While` construction runs a set of statements as long as the condition specified in the `While` statement is `True`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>While...End While Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept>.","pos":[1643,1784],"source":" For more information, see [While...End While Statement](../../../../visual-basic/language-reference/statements/while-end-while-statement.md)."},{"pos":[1793,1801],"content":"Do Loops","linkify":"Do Loops","nodes":[{"content":"Do Loops","pos":[0,8]}]},{"content":"The <ph id=\"ph1\">`Do`</ph>...<ph id=\"ph2\">`Loop`</ph> construction allows you to test a condition at either the beginning or the end of a loop structure.","pos":[1805,1922],"source":"The `Do`...`Loop` construction allows you to test a condition at either the beginning or the end of a loop structure."},{"content":"You can also specify whether to repeat the loop while the condition remains <ph id=\"ph1\">`True`</ph> or until it becomes <ph id=\"ph2\">`True`</ph>.","pos":[1923,2033],"source":" You can also specify whether to repeat the loop while the condition remains `True` or until it becomes `True`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>.","pos":[2034,2159],"source":" For more information, see [Do...Loop Statement](../../../../visual-basic/language-reference/statements/do-loop-statement.md)."},{"pos":[2168,2177],"content":"For Loops","linkify":"For Loops","nodes":[{"content":"For Loops","pos":[0,9]}]},{"content":"The <ph id=\"ph1\">`For`</ph>...<ph id=\"ph2\">`Next`</ph> construction performs the loop a set number of times.","pos":[2181,2253],"source":"The `For`...`Next` construction performs the loop a set number of times."},{"content":"It uses a loop control variable, also called a <bpt id=\"p1\">*</bpt>counter<ept id=\"p1\">*</ept>, to keep track of the repetitions.","pos":[2254,2345],"source":" It uses a loop control variable, also called a *counter*, to keep track of the repetitions."},{"content":"You specify the starting and ending values for this counter, and you can optionally specify the amount by which it increases from one repetition to the next.","pos":[2346,2503]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/for-next-statement.md)</ept>.","pos":[2504,2631],"source":" For more information, see [For...Next Statement](../../../../visual-basic/language-reference/statements/for-next-statement.md)."},{"pos":[2640,2654],"content":"For Each Loops","linkify":"For Each Loops","nodes":[{"content":"For Each Loops","pos":[0,14]}]},{"content":"The <ph id=\"ph1\">`For Each`</ph>...<ph id=\"ph2\">`Next`</ph> construction runs a set of statements once for each element in a collection.","pos":[2658,2758],"source":"The `For Each`...`Next` construction runs a set of statements once for each element in a collection."},{"content":"You specify the loop control variable, but you do not have to determine starting or ending values for it.","pos":[2759,2864]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.","pos":[2865,3002],"source":" For more information, see [For Each...Next Statement](../../../../visual-basic/language-reference/statements/for-each-next-statement.md)."},{"pos":[3011,3019],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Control Flow<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3023,3122],"source":"[Control Flow](../../../../visual-basic/programming-guide/language-features/control-flow/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Decision Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3126,3246],"source":"[Decision Structures](../../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Other Control Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/other-control-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3250,3380],"source":"[Other Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/other-control-structures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>","pos":[3384,3515],"source":"[Nested Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)"}]}