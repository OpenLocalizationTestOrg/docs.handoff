{"content":"---\ntitle: \"Using Variance in Delegates (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 7b5c20f1-6416-46a3-94b6-f109c31c842c\n---\n\n# Using Variance in Delegates (Visual Basic)\n\nWhen you assign a method to a delegate, *covariance* and *contravariance* provide flexibility for matching a delegate type with a method signature. Covariance permits a method to have return type that is more derived than that defined in the delegate. Contravariance permits a method that has parameter types that are less derived than those in the delegate type.\n\n## Example 1: Covariance\n\n### Description\n\nThis example demonstrates how delegates can be used with methods that have return types that are derived from the return type in the delegate signature. The data type returned by `DogsHandler` is of type `Dogs`, which derives from the `Mammals` type that is defined in the delegate.\n\n### Code\n\n```vb\nClass Mammals\nEnd Class\n\nClass Dogs\n    Inherits Mammals\nEnd Class\nClass Test\n    Public Delegate Function HandlerMethod() As Mammals\n    Public Shared Function MammalsHandler() As Mammals\n        Return Nothing\n    End Function\n    Public Shared Function DogsHandler() As Dogs\n        Return Nothing\n    End Function\n    Sub Test()\n        Dim handlerMammals As HandlerMethod = AddressOf MammalsHandler\n        ' Covariance enables this assignment.\n        Dim handlerDogs As HandlerMethod = AddressOf DogsHandler\n    End Sub\nEnd Class\n```\n\n## Example 2: Contravariance\n\n### Description\n\nThis example demonstrates how delegates can be used with methods that have parameters of a type that are base types of the delegate signature parameter type. With contravariance, you can use one event handler instead of separate handlers. For example, you can create an event handler that accepts an `EventArgs` input parameter and use it with a `Button.MouseClick` event that sends a `MouseEventArgs` type as a parameter, and also with a `TextBox.KeyDown` event that sends a `KeyEventArgs` parameter.\n\n### Code\n\n```vb\n' Event handler that accepts a parameter of the EventArgs type.\nPrivate Sub MultiHandler(ByVal sender As Object,\n                         ByVal e As System.EventArgs)\n    Label1.Text = DateTime.Now\nEnd Sub\n\nPrivate Sub Form1_Load(ByVal sender As System.Object,\n    ByVal e As System.EventArgs) Handles MyBase.Load\n\n    ' You can use a method that has an EventArgs parameter,\n    ' although the event expects the KeyEventArgs parameter.\n    AddHandler Button1.KeyDown, AddressOf MultiHandler\n\n    ' You can use the same method\n    ' for the event that expects the MouseEventArgs parameter.\n    AddHandler Button1.MouseClick, AddressOf MultiHandler\nEnd Sub\n```\n\n## See also\n\n- [Variance in Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)\n- [Using Variance for Func and Action Generic Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)\n","nodes":[{"pos":[4,124],"embed":true,"restype":"x-metadata","content":"title: \"Using Variance in Delegates (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 7b5c20f1-6416-46a3-94b6-f109c31c842c","nodes":[{"content":"Using Variance in Delegates (Visual Basic)","nodes":[{"pos":[0,42],"content":"Using Variance in Delegates (Visual Basic)","nodes":[{"content":"Using Variance in Delegates (Visual Basic)","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[132,174],"content":"Using Variance in Delegates (Visual Basic)","linkify":"Using Variance in Delegates (Visual Basic)","nodes":[{"content":"Using Variance in Delegates (Visual Basic)","pos":[0,42]}]},{"content":"When you assign a method to a delegate, <bpt id=\"p1\">*</bpt>covariance<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>contravariance<ept id=\"p2\">*</ept> provide flexibility for matching a delegate type with a method signature.","pos":[176,323],"source":"When you assign a method to a delegate, *covariance* and *contravariance* provide flexibility for matching a delegate type with a method signature."},{"content":"Covariance permits a method to have return type that is more derived than that defined in the delegate.","pos":[324,427]},{"content":"Contravariance permits a method that has parameter types that are less derived than those in the delegate type.","pos":[428,539]},{"pos":[544,565],"content":"Example 1: Covariance","linkify":"Example 1: Covariance","nodes":[{"content":"Example 1: Covariance","pos":[0,21]}]},{"pos":[571,582],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"This example demonstrates how delegates can be used with methods that have return types that are derived from the return type in the delegate signature.","pos":[584,736]},{"content":"The data type returned by <ph id=\"ph1\">`DogsHandler`</ph> is of type <ph id=\"ph2\">`Dogs`</ph>, which derives from the <ph id=\"ph3\">`Mammals`</ph> type that is defined in the delegate.","pos":[737,866],"source":" The data type returned by `DogsHandler` is of type `Dogs`, which derives from the `Mammals` type that is defined in the delegate."},{"pos":[872,876],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[1429,1454],"content":"Example 2: Contravariance","linkify":"Example 2: Contravariance","nodes":[{"content":"Example 2: Contravariance","pos":[0,25]}]},{"pos":[1460,1471],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"This example demonstrates how delegates can be used with methods that have parameters of a type that are base types of the delegate signature parameter type.","pos":[1473,1630]},{"content":"With contravariance, you can use one event handler instead of separate handlers.","pos":[1631,1711]},{"content":"For example, you can create an event handler that accepts an <ph id=\"ph1\">`EventArgs`</ph> input parameter and use it with a <ph id=\"ph2\">`Button.MouseClick`</ph> event that sends a <ph id=\"ph3\">`MouseEventArgs`</ph> type as a parameter, and also with a <ph id=\"ph4\">`TextBox.KeyDown`</ph> event that sends a <ph id=\"ph5\">`KeyEventArgs`</ph> parameter.","pos":[1712,1974],"source":" For example, you can create an event handler that accepts an `EventArgs` input parameter and use it with a `Button.MouseClick` event that sends a `MouseEventArgs` type as a parameter, and also with a `TextBox.KeyDown` event that sends a `KeyEventArgs` parameter."},{"pos":[1980,1984],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[2655,2663],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2667,2809],"content":"<bpt id=\"p1\">[</bpt>Variance in Delegates (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept>","source":"[Variance in Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)"},{"pos":[2812,3016],"content":"<bpt id=\"p1\">[</bpt>Using Variance for Func and Action Generic Delegates (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>","source":"[Using Variance for Func and Action Generic Delegates (Visual Basic)](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)"}]}