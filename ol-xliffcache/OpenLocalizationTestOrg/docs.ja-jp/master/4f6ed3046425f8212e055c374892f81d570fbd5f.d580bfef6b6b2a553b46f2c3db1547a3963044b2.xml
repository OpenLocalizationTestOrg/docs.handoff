{"content":"---\ntitle: \"= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Assign\"\n  - \"vb.=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"= operator [Visual Basic]\"\n  - \"= assignment statements [Visual Basic]\"\nms.assetid: 2dac2e49-86c8-42f8-80c1-458452fb5e29\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# = Operator (Visual Basic)\nAssigns a value to a variable or property.  \n  \n## Syntax  \n  \n```  \n  \nvariableorproperty = value  \n```  \n  \n## Parts  \n `variableorproperty`  \n Any writable variable or any property.  \n  \n `value`  \n Any literal, constant, or expression.  \n  \n## Remarks  \n The element on the left side of the equal sign (`=`) can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md). The `=` operator assigns the value on its right to the variable or property on its left.  \n  \n> [!NOTE]\n>  The `=` operator is also used as a comparison operator. For details, see [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md).  \n  \n## Overloading  \n The `=` operator can be overloaded only as a relational comparison operator, not as an assignment operator. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example demonstrates the assignment operator. The value on the right is assigned to the variable on the left.  \n  \n [!code-vb[VbVbalrOperators#9](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/assignment-operator_1.vb)]  \n  \n## See Also  \n [&= Operator](../../../visual-basic/language-reference/operators/and-assignment-operator.md)   \n [*= Operator](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)   \n [+= Operator](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)   \n [-= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-assignment-operator.md)   \n [/= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)   \n [\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)   \n [^= Operator](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)   \n [Statements](../../../visual-basic/programming-guide/language-features/statements.md)   \n [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md)   \n [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)   \n [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)\n","nodes":[{"pos":[12,54],"content":"= Operator (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"= Operator (Visual Basic) | Microsoft Docs","pos":[0,42]}]},{"pos":[654,679],"content":"= Operator (Visual Basic)","linkify":"= Operator (Visual Basic)","nodes":[{"content":"= Operator (Visual Basic)","pos":[0,25]}]},{"content":"Assigns a value to a variable or property.","pos":[680,722]},{"pos":[731,737],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[793,798],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Any writable variable or any property.","pos":[826,864]},{"content":"Any literal, constant, or expression.","pos":[882,919]},{"pos":[928,935],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the equal sign (<ph id=\"ph1\">`=`</ph>) can be a simple scalar variable, a property, or an element of an array.","pos":[939,1063],"source":"The element on the left side of the equal sign (`=`) can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[1064,1174],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`=`</ph> operator assigns the value on its right to the variable or property on its left.","pos":[1175,1263],"source":" The `=` operator assigns the value on its right to the variable or property on its left."},{"pos":[1271,1454],"content":"[!NOTE]\n The `=` operator is also used as a comparison operator. For details, see [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md).","leadings":["","> "],"nodes":[{"content":" The `=` operator is also used as a comparison operator. For details, see [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md).","pos":[8,181],"nodes":[{"content":"The <ph id=\"ph1\">`=`</ph> operator is also used as a comparison operator.","pos":[1,56],"source":" The `=` operator is also used as a comparison operator."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Comparison Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/comparison-operators.md)</ept>.","pos":[57,173],"source":" For details, see [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md)."}]}]},{"pos":[1463,1474],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`=`</ph> operator can be overloaded only as a relational comparison operator, not as an assignment operator.","pos":[1478,1585],"source":"The `=` operator can be overloaded only as a relational comparison operator, not as an assignment operator."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[1586,1727],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[1736,1743],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the assignment operator.","pos":[1747,1806]},{"content":"The value on the right is assigned to the variable on the left.","pos":[1807,1870]},{"pos":[1877,2008],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#9<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/assignment-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#9](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/assignment-operator_1.vb)]"},{"pos":[2017,2025],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&amp;= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/and-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2029,2122],"source":"[&= Operator](../../../visual-basic/language-reference/operators/and-assignment-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>*= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2125,2230],"source":" [*= Operator](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>+= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2233,2332],"source":" [+= Operator](../../../visual-basic/language-reference/operators/addition-assignment-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>-= Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/subtraction-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2335,2452],"source":" [-= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-assignment-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>/= Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2455,2584],"source":" [/= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt><ph id=\"ph1\">\\\\</ph>= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)</ept><ph id=\"ph2\"> </ph>","pos":[2587,2695],"source":" [\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>^= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2698,2803],"source":" [^= Operator](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept><ph id=\"ph1\"> </ph>","pos":[2806,2893],"source":" [Statements](../../../visual-basic/programming-guide/language-features/statements.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Comparison Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2896,2996],"source":" [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept><ph id=\"ph1\"> </ph>","pos":[2999,3075],"source":" [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>","pos":[3078,3194],"source":" [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)"}]}