{"content":"---\ntitle: \"Recursive Procedures (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Visual Basic code, procedures\"\n  - \"procedures, that call themselves\"\n  - \"procedures, recursive\"\n  - \"procedures, calling\"\n  - \"recursive procedures\"\n  - \"functions [Visual Basic], calling recursively\"\n  - \"recursion\"\nms.assetid: ba1d3962-b4c3-48d3-875e-96fdb4198327\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Recursive Procedures (Visual Basic)\nA *recursive* procedure is one that calls itself. In general, this is not the most effective way to write [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] code.  \n  \n The following procedure uses recursion to calculate the factorial of its original argument.  \n  \n [!code-vb[VbVbcnProcedures#51](./codesnippet/VisualBasic/recursive-procedures_1.vb)]  \n  \n## Considerations with Recursive Procedures  \n **Limiting Conditions**. You must design a recursive procedure to test for at least one condition that can terminate the recursion, and you must also handle the case where no such condition is satisfied within a reasonable number of recursive calls. Without at least one condition that can be met without fail, your procedure runs a high risk of executing in an infinite loop.  \n  \n **Memory Usage**. Your application has a limited amount of space for local variables. Each time a procedure calls itself, it uses more of that space for additional copies of its local variables. If this process continues indefinitely, it eventually causes a <xref:System.StackOverflowException> error.  \n  \n **Efficiency**. You can almost always substitute a loop for recursion. A loop does not have the overhead of passing arguments, initializing additional storage, and returning values. Your performance can be much better without recursive calls.  \n  \n **Mutual Recursion**. You might observe very poor performance, or even an infinite loop, if two procedures call each other. Such a design presents the same problems as a single recursive procedure, but can be harder to detect and debug.  \n  \n **Calling with Parentheses**. When a `Function` procedure calls itself recursively, you must follow the procedure name with parentheses, even if there is no argument list. Otherwise, the function name is taken as representing the return value of the function.  \n  \n **Testing**. If you write a recursive procedure, you should test it very carefully to make sure it always meets some limiting condition. You should also ensure that you cannot run out of memory due to having too many recursive calls.  \n  \n## See Also  \n <xref:System.StackOverflowException>   \n [Procedures](./index.md)   \n [Sub Procedures](./sub-procedures.md)   \n [Function Procedures](./function-procedures.md)   \n [Property Procedures](./property-procedures.md)   \n [Operator Procedures](./operator-procedures.md)   \n [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)   \n [Procedure Overloading](./procedure-overloading.md)   \n [Troubleshooting Procedures](./troubleshooting-procedures.md)   \n [Loop Structures](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)   \n [Troubleshooting Exceptions: System.StackOverflowException](http://msdn.microsoft.com/library/51b71217-c507-4f5b-bc35-0236180d7968)","nodes":[{"pos":[12,64],"content":"Recursive Procedures (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Recursive Procedures (Visual Basic) | Microsoft Docs","pos":[0,52]}]},{"pos":[783,818],"content":"Recursive Procedures (Visual Basic)","linkify":"Recursive Procedures (Visual Basic)","nodes":[{"content":"Recursive Procedures (Visual Basic)","pos":[0,35]}]},{"content":"A <bpt id=\"p1\">*</bpt>recursive<ept id=\"p1\">*</ept> procedure is one that calls itself.","pos":[819,868],"source":"A *recursive* procedure is one that calls itself."},{"content":"In general, this is not the most effective way to write <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> code.","pos":[869,1023],"source":" In general, this is not the most effective way to write [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] code."},{"content":"The following procedure uses recursion to calculate the factorial of its original argument.","pos":[1030,1121]},{"pos":[1128,1212],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbcnProcedures#51<ept id=\"p2\">](./codesnippet/VisualBasic/recursive-procedures_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbcnProcedures#51](./codesnippet/VisualBasic/recursive-procedures_1.vb)]"},{"pos":[1221,1261],"content":"Considerations with Recursive Procedures","linkify":"Considerations with Recursive Procedures","nodes":[{"content":"Considerations with Recursive Procedures","pos":[0,40]}]},{"content":"<bpt id=\"p1\">**</bpt>Limiting Conditions<ept id=\"p1\">**</ept>.","pos":[1265,1289],"source":"**Limiting Conditions**."},{"content":"You must design a recursive procedure to test for at least one condition that can terminate the recursion, and you must also handle the case where no such condition is satisfied within a reasonable number of recursive calls.","pos":[1290,1514]},{"content":"Without at least one condition that can be met without fail, your procedure runs a high risk of executing in an infinite loop.","pos":[1515,1641]},{"content":"<bpt id=\"p1\">**</bpt>Memory Usage<ept id=\"p1\">**</ept>.","pos":[1648,1665],"source":"**Memory Usage**."},{"content":"Your application has a limited amount of space for local variables.","pos":[1666,1733]},{"content":"Each time a procedure calls itself, it uses more of that space for additional copies of its local variables.","pos":[1734,1842]},{"content":"If this process continues indefinitely, it eventually causes a <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph> error.","pos":[1843,1949],"source":" If this process continues indefinitely, it eventually causes a <xref:System.StackOverflowException> error."},{"content":"<bpt id=\"p1\">**</bpt>Efficiency<ept id=\"p1\">**</ept>.","pos":[1956,1971],"source":"**Efficiency**."},{"content":"You can almost always substitute a loop for recursion.","pos":[1972,2026]},{"content":"A loop does not have the overhead of passing arguments, initializing additional storage, and returning values.","pos":[2027,2137]},{"content":"Your performance can be much better without recursive calls.","pos":[2138,2198]},{"content":"<bpt id=\"p1\">**</bpt>Mutual Recursion<ept id=\"p1\">**</ept>.","pos":[2205,2226],"source":"**Mutual Recursion**."},{"content":"You might observe very poor performance, or even an infinite loop, if two procedures call each other.","pos":[2227,2328]},{"content":"Such a design presents the same problems as a single recursive procedure, but can be harder to detect and debug.","pos":[2329,2441]},{"content":"<bpt id=\"p1\">**</bpt>Calling with Parentheses<ept id=\"p1\">**</ept>.","pos":[2448,2477],"source":"**Calling with Parentheses**."},{"content":"When a <ph id=\"ph1\">`Function`</ph> procedure calls itself recursively, you must follow the procedure name with parentheses, even if there is no argument list.","pos":[2478,2619],"source":" When a `Function` procedure calls itself recursively, you must follow the procedure name with parentheses, even if there is no argument list."},{"content":"Otherwise, the function name is taken as representing the return value of the function.","pos":[2620,2707]},{"content":"<bpt id=\"p1\">**</bpt>Testing<ept id=\"p1\">**</ept>.","pos":[2714,2726],"source":"**Testing**."},{"content":"If you write a recursive procedure, you should test it very carefully to make sure it always meets some limiting condition.","pos":[2727,2850]},{"content":"You should also ensure that you cannot run out of memory due to having too many recursive calls.","pos":[2851,2947]},{"pos":[2956,2964],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Procedures<ept id=\"p1\">](./index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3008,3034],"source":" [Procedures](./index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Sub Procedures<ept id=\"p1\">](./sub-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3037,3076],"source":" [Sub Procedures](./sub-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Function Procedures<ept id=\"p1\">](./function-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3079,3128],"source":" [Function Procedures](./function-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Property Procedures<ept id=\"p1\">](./property-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3131,3180],"source":" [Property Procedures](./property-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Procedures<ept id=\"p1\">](./operator-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3183,3232],"source":" [Operator Procedures](./operator-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](./procedure-parameters-and-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[3235,3314],"source":" [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedure Overloading<ept id=\"p1\">](./procedure-overloading.md)</ept><ph id=\"ph1\"> </ph>","pos":[3317,3370],"source":" [Procedure Overloading](./procedure-overloading.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Troubleshooting Procedures<ept id=\"p1\">](./troubleshooting-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3373,3436],"source":" [Troubleshooting Procedures](./troubleshooting-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Loop Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3439,3552],"source":" [Loop Structures](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Troubleshooting Exceptions: System.StackOverflowException<ept id=\"p1\">](http://msdn.microsoft.com/library/51b71217-c507-4f5b-bc35-0236180d7968)</ept>","pos":[3555,3687],"source":" [Troubleshooting Exceptions: System.StackOverflowException](http://msdn.microsoft.com/library/51b71217-c507-4f5b-bc35-0236180d7968)"}]}