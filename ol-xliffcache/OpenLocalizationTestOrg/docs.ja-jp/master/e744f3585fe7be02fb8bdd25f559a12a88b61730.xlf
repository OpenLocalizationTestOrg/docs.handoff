<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="attributes.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e744f3585fe7be02fb8bdd25f559a12a88b61730</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\attributes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">819a79668c50a8ef843c5ab32ac55182882a374b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f98fe3482ac0ec38b77ab3539254651f44c596ce</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Attributes - C#</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how attributes work in C#.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using Attributes in C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Attributes provide a way of associating information with code in a declarative way.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They can also provide a reusable element that can be applied to a variety of targets.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Consider the <ph id="ph1">`[Obsolete]`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It can be applied to classes, structs, methods, constructors, and more.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It <bpt id="p1">_</bpt>declares<ept id="p1">_</ept> that the element is obsolete.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It's then up to the C# compiler to look for this attribute, and do some action in response.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this tutorial, you'll be introduced to how to add attributes to your code, how to create and use your own attributes, and how to use some attributes that are built into .NET Core.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You’ll need to setup your machine to run .NET core.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can find the installation instructions on the <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://www.microsoft.com/net/core)</ept> page.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can run this application on Windows, Ubuntu Linux, macOS or in a Docker container.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You’ll need to install your favorite code editor.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The descriptions below use <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://code.visualstudio.com/)</ept> which is an open source, cross platform editor.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, you can use whatever tools you are comfortable with.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Create the Application</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Now that you've installed all the tools, create a new .NET Core application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To use the command line generator, execute the following command in your favorite shell:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This command will create barebones .NET core project files.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You will need to execute <ph id="ph1">`dotnet restore`</ph> to restore the dependencies needed to compile this project.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To execute the program, use <ph id="ph1">`dotnet run`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You should see "Hello, World" output to the console.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>How to add attributes to code</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In C#, attributes are classes that inherit from the <ph id="ph1">`Attribute`</ph> base class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any class that inherits from <ph id="ph1">`Attribute`</ph> can be used as a sort of "tag" on other pieces of code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For instance, there is an attribute called <ph id="ph1">`ObsoleteAttribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is used to signal that code is obsolete and shouldn't be used anymore.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can place this attribute on a class, for instance, by using square brackets.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that while the class is called <ph id="ph1">`ObsoleteAttribute`</ph>, it's only necessary to use <ph id="ph2">`[Obsolete]`</ph> in the code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This is a convention that C# follows.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can use the full name <ph id="ph1">`[ObsoleteAttribute]`</ph> if you choose.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When marking a class obsolete, it's a good idea to provide some information as to <bpt id="p1">*</bpt>why<ept id="p1">*</ept> it's obsolete, and/or <bpt id="p2">*</bpt>what<ept id="p2">*</ept> to use instead.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Do this by passing a string parameter to the Obsolete attribute.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The string is being passed as an argument to an <ph id="ph1">`ObsoleteAttribute`</ph> constructor, just as if you were writing <ph id="ph2">`var attr = new ObsoleteAttribute("some string")`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Parameters to an attribute constructor are limited to simple types/literals: <ph id="ph1">`bool, int, double, string, Type, enums, etc`</ph> and arrays of those types.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can not use an expression or a variable.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You are free to use positional or named parameters.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>How to create your own attribute</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Creating an attribute is as simple as inheriting from the <ph id="ph1">`Attribute`</ph> base class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>With the above, I can now use <ph id="ph1">`[MySpecial]`</ph> (or <ph id="ph2">`[MySpecialAttribute]`</ph>) as an attribute elsewhere in the code base.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Attributes in the .NET base class library like <ph id="ph1">`ObsoleteAttribute`</ph> trigger certain behaviors within the compiler.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, any attribute you create acts only as metadata, and doesn't result in any code within the attribute class being executed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It's up to you to act on that metadata elsewhere in your code (more on that later in the tutorial).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>There is a 'gotcha' here to watch out for.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>As mentioned above, only certain types are allowed to be passed as arguments when using attributes.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, when creating an attribute type, the C# compiler won't stop you from creating those parameters.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the below example, I've created an attribute with a constructor that compiles just fine.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>However, you will be unable to use this constructor with attribute syntax.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The above will cause a compiler error like <ph id="ph1">`Attribute constructor parameter 'myClass' has type 'Foo', which is not a valid attribute parameter type`</ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>How to restrict attribute usage</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Attributes can be used on a number of "targets".</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The above examples show them on classes, but they can also be used on:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Assembly</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Constructor</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Enum</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Event</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Field</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>GenericParameter</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Interface</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Module</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>ReturnValue</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Struct</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When you create an attribute class, by default, C# will allow you to use that attribute on any of the possible attribute targets.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you want to restrict your attribute to certain targets, you can do so by using the <ph id="ph1">`AttributeUsageAttribute`</ph> on your attribute class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>That's right, an attribute on an attribute!</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you attempt to put the above attribute on something that's not a class or a struct, you will get a compiler error like <ph id="ph1">`Attribute 'MyAttributeForClassAndStructOnly' is not valid on this declaration type. It is only valid on 'class, struct' declarations`</ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>How to use attributes attached to a code element</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Attributes act as metadata.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Without some outward force, they won't actually do anything.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To find and act on attributes, <bpt id="p1">[</bpt>Reflection<ept id="p1">](../programming-guide/concepts/reflection.md)</ept> is generally needed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>I won't cover Reflection in-depth in this tutorial, but the basic idea is that Reflection allows you to write code in C# that examines other code.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For instance, you can use Reflection to get information about a class(add <ph id="ph1">`using System.Reflection;`</ph> at the head of your code):</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>That will print out something like: <ph id="ph1">`The assembly qualified name of MyClass is ConsoleApplication.MyClass, attributes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`</ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Once you have a <ph id="ph1">`TypeInfo`</ph> object (or a <ph id="ph2">`MemberInfo`</ph>, <ph id="ph3">`FieldInfo`</ph>, etc), you can use the <ph id="ph4">`GetCustomAttributes`</ph> method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This will return a collection of <ph id="ph1">`Attribute`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">`GetCustomAttribute`</ph> and specify an Attribute type.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Here's an example of using <ph id="ph1">`GetCustomAttributes`</ph> on a <ph id="ph2">`MemberInfo`</ph> instance for <ph id="ph3">`MyClass`</ph> (which we saw earlier has an <ph id="ph4">`[Obsolete]`</ph> attribute on it).</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>That will print to console: <ph id="ph1">`Attribute on MyClass: ObsoleteAttribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Try adding other attributes to <ph id="ph1">`MyClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>It's important to note that these <ph id="ph1">`Attribute`</ph> objects are instantiated lazily.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>That is, they won't be instantiated until you use <ph id="ph1">`GetCustomAttribute`</ph> or <ph id="ph2">`GetCustomAttributes`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>They are also instantiated each time.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`GetCustomAttributes`</ph> twice in a row will return two different instances of <ph id="ph2">`ObsoleteAttribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Common attributes in the base class library (BCL)</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Attributes are used by many tools and frameworks.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>NUnit uses attributes like <ph id="ph1">`[Test]`</ph> and <ph id="ph2">`[TestFixture]`</ph> that are used by the NUnit test runner.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ASP.NET MVC uses attributes like <ph id="ph1">`[Authorize]`</ph> and provides an action filter framework to perform cross-cutting concerns on MVC actions.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>PostSharp<ept id="p1">](https://www.postsharp.net)</ept> uses the attribute syntax to allow aspect-oriented programming in C#.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Here are a few notable attributes built into the .NET Core base class libraries:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[Obsolete]`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This one was used in the above examples, and it lives in the <ph id="ph1">`System`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>It is useful to provide declarative documentation about a changing code base.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A message can be provided in the form of a string, and another boolean parameter can be used to escalate from a compiler warning to a compiler error.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[Conditional]`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This attribute is in the <ph id="ph1">`System.Diagnostics`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This attribute can be applied to methods (or attribute classes).</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You must pass a string to the constructor.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If that string doesn't match a <ph id="ph1">`#define`</ph> directive, then any calls to that method (but not the method itself) will be removed by the C# compiler.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Typically this is used for debugging (diagnostics) purposes.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[CallerMemberName]`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This attribute can be used on parameters, and lives in the <ph id="ph1">`System.Runtime.CompilerServices`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This is an attribute that is used to inject the name of the method that is calling another method.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This is typically used as a way to eliminate 'magic strings' when implementing INotifyPropertyChanged in various UI frameworks.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>As an example:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the above code, you don't have to have a literal <ph id="ph1">`"Name"`</ph> string.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This can help prevent typo-related bugs and also makes for smoother refactoring/renaming.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Attributes bring declarative power to C#.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>But they are a form of code as meta-data, and don't act by themselves.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>