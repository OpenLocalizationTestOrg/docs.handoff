{"content":"---\ntitle: \"How to: Validate and Merge PrintTickets\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"merging PrintTickets [WPF]\"\n  - \"PrintTicket [WPF], merging\"\n  - \"validation of PrintTickets [WPF]\"\n  - \"PrintTicket [WPF], validation\"\nms.assetid: 4fe2d501-d0b0-4fef-86af-6ffe6c162532\n---\n# How to: Validate and Merge PrintTickets\nThe [!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)] [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) includes the flexible and extensible <xref:System.Printing.PrintCapabilities> and <xref:System.Printing.PrintTicket> elements. The former itemizes the capabilities of a print device and the latter specifies how the device should use those capabilities with respect to a particular sequence of documents, individual document, or individual page.  \n  \n A typical sequence of tasks for an application that supports printing would be as follows.  \n  \n1.  Determine a printer's capabilities.  \n  \n2.  Configure a <xref:System.Printing.PrintTicket> to use those capabilities.  \n  \n3.  Validate the <xref:System.Printing.PrintTicket>.  \n  \n This article shows how to do this.  \n  \n## Example  \n In the simple example below, we are interested only in whether a printer can support duplexing — two-sided printing. The major steps are as follows.  \n  \n1.  Get a <xref:System.Printing.PrintCapabilities> object with the <xref:System.Printing.PrintQueue.GetPrintCapabilities%2A> method.  \n  \n2.  Test for the presence of the capability you want. In the example below, we test the <xref:System.Printing.PrintCapabilities.DuplexingCapability%2A> property of the <xref:System.Printing.PrintCapabilities> object for the presence of the capability of printing on both sides of a sheet of paper with the \"page turning\" along the long side of the sheet. Since <xref:System.Printing.PrintCapabilities.DuplexingCapability%2A> is a collection, we use the `Contains` method of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n    > [!NOTE]\n    >  This step is not strictly necessary. The <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> method used below will check each request in the <xref:System.Printing.PrintTicket> against the capabilities of the printer. If the requested capability is not supported by printer, the printer driver will substitute an alternative request in the <xref:System.Printing.PrintTicket> returned by the method.  \n  \n3.  If the printer supports duplexing, the sample code creates a <xref:System.Printing.PrintTicket> that asks for duplexing. But the application does not specify every possible printer setting available in the <xref:System.Printing.PrintTicket> element. That would be wasteful of both programmer and program time. Instead, the code sets only the duplexing request and then merges this <xref:System.Printing.PrintTicket> with an existing, fully configured and validated, <xref:System.Printing.PrintTicket>, in this case, the user's default <xref:System.Printing.PrintTicket>.  \n  \n4.  Accordingly, the sample calls the <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> method to merge the new, minimal, <xref:System.Printing.PrintTicket> with the user's default <xref:System.Printing.PrintTicket>. This returns a <xref:System.Printing.ValidationResult> that includes the new <xref:System.Printing.PrintTicket> as one of its properties.  \n  \n5.  The sample then tests that the new <xref:System.Printing.PrintTicket> requests duplexing. If it does, then the sample makes it the new default print ticket for the user. If step 2 above had been left out and the printer did not support duplexing along the long side, then the test would have resulted in `false`. (See the note above.)  \n  \n6.  The last significant step is to commit the change to the <xref:System.Printing.PrintQueue.UserPrintTicket%2A> property of the <xref:System.Printing.PrintQueue> with the <xref:System.Printing.PrintQueue.Commit%2A> method.  \n  \n [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]\n [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  \n  \n So that you can quickly test this example, the remainder of it is presented below. Create a project and a namespace and then paste both the code snippets in this article into the namespace block.  \n  \n [!code-csharp[PrintTicketManagment#UIForMergeAndValidatePTUtility](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#uiformergeandvalidateptutility)]\n [!code-vb[PrintTicketManagment#UIForMergeAndValidatePTUtility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#uiformergeandvalidateptutility)]  \n  \n## See also\n\n- <xref:System.Printing.PrintCapabilities>\n- <xref:System.Printing.PrintTicket>\n- <xref:System.Printing.PrintServer.GetPrintQueues%2A>\n- <xref:System.Printing.PrintServer>\n- <xref:System.Printing.EnumeratedPrintQueueTypes>\n- <xref:System.Printing.PrintQueue>\n- <xref:System.Printing.PrintQueue.GetPrintCapabilities%2A>\n- [Documents in WPF](documents-in-wpf.md)\n- [Printing Overview](printing-overview.md)\n- [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397)\n","nodes":[{"pos":[4,320],"embed":true,"restype":"x-metadata","content":"title: \"How to: Validate and Merge PrintTickets\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"merging PrintTickets [WPF]\"\n  - \"PrintTicket [WPF], merging\"\n  - \"validation of PrintTickets [WPF]\"\n  - \"PrintTicket [WPF], validation\"\nms.assetid: 4fe2d501-d0b0-4fef-86af-6ffe6c162532","nodes":[{"content":"How to: Validate and Merge PrintTickets","nodes":[{"pos":[0,39],"content":"How to: Validate and Merge PrintTickets","nodes":[{"content":"How to: Validate and Merge PrintTickets","pos":[0,39]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[327,366],"content":"How to: Validate and Merge PrintTickets","linkify":"How to: Validate and Merge PrintTickets","nodes":[{"content":"How to: Validate and Merge PrintTickets","pos":[0,39]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)]</ph> <bpt id=\"p1\">[</bpt>Print Schema<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=186397)</ept> includes the flexible and extensible <ph id=\"ph2\">&lt;xref:System.Printing.PrintCapabilities&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Printing.PrintTicket&gt;</ph> elements.","pos":[367,628],"source":"The [!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)] [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) includes the flexible and extensible <xref:System.Printing.PrintCapabilities> and <xref:System.Printing.PrintTicket> elements."},{"content":"The former itemizes the capabilities of a print device and the latter specifies how the device should use those capabilities with respect to a particular sequence of documents, individual document, or individual page.","pos":[629,846]},{"content":"A typical sequence of tasks for an application that supports printing would be as follows.","pos":[853,943]},{"content":"Determine a printer's capabilities.","pos":[953,988]},{"pos":[998,1071],"content":"Configure a <ph id=\"ph1\">&lt;xref:System.Printing.PrintTicket&gt;</ph> to use those capabilities.","source":"Configure a <xref:System.Printing.PrintTicket> to use those capabilities."},{"pos":[1081,1129],"content":"Validate the <ph id=\"ph1\">&lt;xref:System.Printing.PrintTicket&gt;</ph>.","source":"Validate the <xref:System.Printing.PrintTicket>."},{"content":"This article shows how to do this.","pos":[1136,1170]},{"pos":[1179,1186],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the simple example below, we are interested only in whether a printer can support duplexing — two-sided printing.","pos":[1190,1306]},{"content":"The major steps are as follows.","pos":[1307,1338]},{"pos":[1348,1476],"content":"Get a <ph id=\"ph1\">&lt;xref:System.Printing.PrintCapabilities&gt;</ph> object with the <ph id=\"ph2\">&lt;xref:System.Printing.PrintQueue.GetPrintCapabilities%2A&gt;</ph> method.","source":"Get a <xref:System.Printing.PrintCapabilities> object with the <xref:System.Printing.PrintQueue.GetPrintCapabilities%2A> method."},{"content":"Test for the presence of the capability you want.","pos":[1486,1535]},{"content":"In the example below, we test the <ph id=\"ph1\">&lt;xref:System.Printing.PrintCapabilities.DuplexingCapability%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Printing.PrintCapabilities&gt;</ph> object for the presence of the capability of printing on both sides of a sheet of paper with the \"page turning\" along the long side of the sheet.","pos":[1536,1836],"source":" In the example below, we test the <xref:System.Printing.PrintCapabilities.DuplexingCapability%2A> property of the <xref:System.Printing.PrintCapabilities> object for the presence of the capability of printing on both sides of a sheet of paper with the \"page turning\" along the long side of the sheet."},{"content":"Since <ph id=\"ph1\">&lt;xref:System.Printing.PrintCapabilities.DuplexingCapability%2A&gt;</ph> is a collection, we use the <ph id=\"ph2\">`Contains`</ph> method of <ph id=\"ph3\">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph>.","pos":[1837,2017],"source":" Since <xref:System.Printing.PrintCapabilities.DuplexingCapability%2A> is a collection, we use the `Contains` method of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>."},{"pos":[2029,2455],"content":"[!NOTE]\nThis step is not strictly necessary. The <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> method used below will check each request in the <xref:System.Printing.PrintTicket> against the capabilities of the printer. If the requested capability is not supported by printer, the printer driver will substitute an alternative request in the <xref:System.Printing.PrintTicket> returned by the method.","leadings":["","    >  "],"nodes":[{"content":"This step is not strictly necessary. The <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> method used below will check each request in the <xref:System.Printing.PrintTicket> against the capabilities of the printer. If the requested capability is not supported by printer, the printer driver will substitute an alternative request in the <xref:System.Printing.PrintTicket> returned by the method.","pos":[8,419],"nodes":[{"content":"This step is not strictly necessary.","pos":[0,36]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A&gt;</ph> method used below will check each request in the <ph id=\"ph2\">&lt;xref:System.Printing.PrintTicket&gt;</ph> against the capabilities of the printer.","pos":[37,230],"source":" The <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> method used below will check each request in the <xref:System.Printing.PrintTicket> against the capabilities of the printer."},{"content":"If the requested capability is not supported by printer, the printer driver will substitute an alternative request in the <ph id=\"ph1\">&lt;xref:System.Printing.PrintTicket&gt;</ph> returned by the method.","pos":[231,411],"source":" If the requested capability is not supported by printer, the printer driver will substitute an alternative request in the <xref:System.Printing.PrintTicket> returned by the method."}]}]},{"content":"If the printer supports duplexing, the sample code creates a <ph id=\"ph1\">&lt;xref:System.Printing.PrintTicket&gt;</ph> that asks for duplexing.","pos":[2465,2585],"source":"If the printer supports duplexing, the sample code creates a <xref:System.Printing.PrintTicket> that asks for duplexing."},{"content":"But the application does not specify every possible printer setting available in the <ph id=\"ph1\">&lt;xref:System.Printing.PrintTicket&gt;</ph> element.","pos":[2586,2714],"source":" But the application does not specify every possible printer setting available in the <xref:System.Printing.PrintTicket> element."},{"content":"That would be wasteful of both programmer and program time.","pos":[2715,2774]},{"content":"Instead, the code sets only the duplexing request and then merges this <ph id=\"ph1\">&lt;xref:System.Printing.PrintTicket&gt;</ph> with an existing, fully configured and validated, <ph id=\"ph2\">&lt;xref:System.Printing.PrintTicket&gt;</ph>, in this case, the user's default <ph id=\"ph3\">&lt;xref:System.Printing.PrintTicket&gt;</ph>.","pos":[2775,3035],"source":" Instead, the code sets only the duplexing request and then merges this <xref:System.Printing.PrintTicket> with an existing, fully configured and validated, <xref:System.Printing.PrintTicket>, in this case, the user's default <xref:System.Printing.PrintTicket>."},{"content":"Accordingly, the sample calls the <ph id=\"ph1\">&lt;xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A&gt;</ph> method to merge the new, minimal, <ph id=\"ph2\">&lt;xref:System.Printing.PrintTicket&gt;</ph> with the user's default <ph id=\"ph3\">&lt;xref:System.Printing.PrintTicket&gt;</ph>.","pos":[3045,3272],"source":"Accordingly, the sample calls the <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> method to merge the new, minimal, <xref:System.Printing.PrintTicket> with the user's default <xref:System.Printing.PrintTicket>."},{"content":"This returns a <ph id=\"ph1\">&lt;xref:System.Printing.ValidationResult&gt;</ph> that includes the new <ph id=\"ph2\">&lt;xref:System.Printing.PrintTicket&gt;</ph> as one of its properties.","pos":[3273,3410],"source":" This returns a <xref:System.Printing.ValidationResult> that includes the new <xref:System.Printing.PrintTicket> as one of its properties."},{"content":"The sample then tests that the new <ph id=\"ph1\">&lt;xref:System.Printing.PrintTicket&gt;</ph> requests duplexing.","pos":[3420,3509],"source":"The sample then tests that the new <xref:System.Printing.PrintTicket> requests duplexing."},{"content":"If it does, then the sample makes it the new default print ticket for the user.","pos":[3510,3589]},{"content":"If step 2 above had been left out and the printer did not support duplexing along the long side, then the test would have resulted in <ph id=\"ph1\">`false`</ph>.","pos":[3590,3732],"source":" If step 2 above had been left out and the printer did not support duplexing along the long side, then the test would have resulted in `false`."},{"content":"(See the note above.)","pos":[3733,3754]},{"pos":[3764,3984],"content":"The last significant step is to commit the change to the <ph id=\"ph1\">&lt;xref:System.Printing.PrintQueue.UserPrintTicket%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Printing.PrintQueue&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Printing.PrintQueue.Commit%2A&gt;</ph> method.","source":"The last significant step is to commit the change to the <xref:System.Printing.PrintQueue.UserPrintTicket%2A> property of the <xref:System.Printing.PrintQueue> with the <xref:System.Printing.PrintQueue.Commit%2A> method."},{"pos":[3991,4331],"content":"[!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]\n[!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]","leadings":[""," "],"nodes":[]},{"content":"So that you can quickly test this example, the remainder of it is presented below.","pos":[4338,4420]},{"content":"Create a project and a namespace and then paste both the code snippets in this article into the namespace block.","pos":[4421,4533]},{"pos":[4540,4916],"content":"[!code-csharp[PrintTicketManagment#UIForMergeAndValidatePTUtility](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#uiformergeandvalidateptutility)]\n[!code-vb[PrintTicketManagment#UIForMergeAndValidatePTUtility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#uiformergeandvalidateptutility)]","leadings":[""," "],"nodes":[]},{"pos":[4925,4933],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5256,5295],"content":"<bpt id=\"p1\">[</bpt>Documents in WPF<ept id=\"p1\">](documents-in-wpf.md)</ept>","source":"[Documents in WPF](documents-in-wpf.md)"},{"pos":[5298,5339],"content":"<bpt id=\"p1\">[</bpt>Printing Overview<ept id=\"p1\">](printing-overview.md)</ept>","source":"[Printing Overview](printing-overview.md)"},{"pos":[5342,5404],"content":"<bpt id=\"p1\">[</bpt>Print Schema<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=186397)</ept>","source":"[Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397)"}]}