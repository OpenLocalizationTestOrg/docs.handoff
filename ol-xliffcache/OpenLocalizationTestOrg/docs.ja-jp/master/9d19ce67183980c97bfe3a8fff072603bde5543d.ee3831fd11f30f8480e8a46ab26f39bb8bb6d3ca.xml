{"content":"---\ntitle: \"How to: Create and Use Assemblies Using the Command Line (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 229ff9fb-1bd1-403b-946b-526104864c60\ncaps.latest.revision: 6\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Create and Use Assemblies Using the Command Line (Visual Basic)\nAn assembly, or a dynamic linking library (DLL), is linked to your program at run time. To demonstrate building and using a DLL, consider the following scenario:  \n  \n-   `MathLibrary.DLL`: The library file that contains the methods to be called at run time. In this example, the DLL contains two methods, `Add` and `Multiply`.  \n  \n-   `Add`: The source file that contains the method `Add`. It returns the sum of its parameters. The class `AddClass` that contains the method `Add` is a member of the namespace `UtilityMethods`.  \n  \n-   `Mult`: The source code that contains the method `Multiply`. It returns the product of its parameters. The class `MultiplyClass` that contains the method `Multiply` is also a member of the namespace `UtilityMethods`.  \n  \n-   `TestCode`: The file that contains the `Main` method. It uses the methods in the DLL file to calculate the sum and the product of the run-time arguments.  \n  \n## Example  \n  \n```vb  \n' File: Add.vb   \nNamespace UtilityMethods  \n    Public Class AddClass  \n        Public Shared Function Add(ByVal i As Long, ByVal j As Long) As Long  \n            Return i + j  \n        End Function  \n    End Class  \nEnd Namespace  \n```  \n  \n```vb  \n' File: Mult.vb  \nNamespace UtilityMethods  \n    Public Class MultiplyClass  \n        Public Shared Function Multiply(ByVal x As Long, ByVal y As Long) As Long  \n            Return x * y  \n        End Function  \n    End Class  \nEnd Namespace  \n```  \n  \n```vb  \n' File: TestCode.vb  \n  \nImports UtilityMethods  \n  \nModule Test  \n  \n    Sub Main(ByVal args As String())  \n  \n        System.Console.WriteLine(\"Calling methods from MathLibrary.DLL:\")  \n  \n        If args.Length <> 2 Then  \n            System.Console.WriteLine(\"Usage: TestCode <num1> <num2>\")  \n            Return  \n        End If  \n  \n        Dim num1 As Long = Long.Parse(args(0))  \n        Dim num2 As Long = Long.Parse(args(1))  \n  \n        Dim sum As Long = AddClass.Add(num1, num2)  \n        Dim product As Long = MultiplyClass.Multiply(num1, num2)  \n  \n        System.Console.WriteLine(\"{0} + {1} = {2}\", num1, num2, sum)  \n        System.Console.WriteLine(\"{0} * {1} = {2}\", num1, num2, product)  \n  \n    End Sub  \n  \nEnd Module  \n  \n' Output (assuming 1234 and 5678 are entered as command-line arguments):  \n' Calling methods from MathLibrary.DLL:  \n' 1234 + 5678 = 6912  \n' 1234 * 5678 = 7006652  \n```  \n  \n This file contains the algorithm that uses the DLL methods, `Add` and `Multiply`. It starts with parsing the arguments entered from the command line, `num1` and `num2`. Then it calculates the sum by using the `Add` method on the `AddClass` class, and the product by using the `Multiply` method on the `MultiplyClass` class.  \n  \n Notice that the  `Imports` statement at the beginning of the file enables you to use the unqualified class names to reference the DLL methods at compile time, as follows:  \n  \n```vb  \nMultiplyClass.Multiply(num1, num2)  \n```  \n  \n Otherwise, you have to use the fully qualified names, as follows:  \n  \n```vb  \nUtilityMethods.MultiplyClass.Multiply(num1, num2)  \n```  \n  \n## Execution  \n To run the program, enter the name of the EXE file, followed by two numbers, as follows:  \n  \n `TestCode 1234 5678`  \n  \n## Compiling the Code  \n To build the file `MathLibrary.DLL`, compile the two files `Add` and `Mult` by using the following command line.  \n  \n```vb  \nvbc /target:library /out:MathLibrary.DLL Add.vb Mult.vb  \n```  \n  \n The [/target (Visual Basic)](../../../../visual-basic/reference/command-line-compiler/target.md) compiler option tells the compiler to output a DLL instead of an EXE file. The [/out (Visual Basic)](../../../../visual-basic/reference/command-line-compiler/out.md) compiler option followed by a file name is used to specify the DLL file name. Otherwise, the compiler uses the first file (`Add.vb`) as the name of the DLL.  \n  \n To build the executable file, `TestCode.exe`, use the following command line:  \n  \n```vb  \nvbc /out:TestCode.exe /reference:MathLibrary.DLL TestCode.vb  \n```  \n  \n The **/out** compiler option tells the compiler to output an EXE file and specifies the name of the output file (`TestCode.exe`). This compiler option is optional. The [/reference (Visual Basic)](../../../../visual-basic/reference/command-line-compiler/reference.md) compiler option specifies the DLL file or files that this program uses.  \n  \n For more information about building from the command line, see  and [Building from the Command Line](../../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md).  \n  \n## See Also  \n [Programming Concepts](../../../../visual-basic/programming-guide/concepts/index.md)   \n [Assemblies and the Global Assembly Cache (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)   \n [Creating a Class to Hold DLL Functions](../../../../framework/interop/creating-a-class-to-hold-dll-functions.md)","nodes":[{"pos":[12,100],"content":"How to: Create and Use Assemblies Using the Command Line (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Create and Use Assemblies Using the Command Line (Visual Basic) | Microsoft Docs","pos":[0,88]}]},{"pos":[481,552],"content":"How to: Create and Use Assemblies Using the Command Line (Visual Basic)","linkify":"How to: Create and Use Assemblies Using the Command Line (Visual Basic)","nodes":[{"content":"How to: Create and Use Assemblies Using the Command Line (Visual Basic)","pos":[0,71]}]},{"content":"An assembly, or a dynamic linking library (DLL), is linked to your program at run time.","pos":[553,640]},{"content":"To demonstrate building and using a DLL, consider the following scenario:","pos":[641,714]},{"content":"<ph id=\"ph1\">`MathLibrary.DLL`</ph>: The library file that contains the methods to be called at run time.","pos":[724,811],"source":"`MathLibrary.DLL`: The library file that contains the methods to be called at run time."},{"content":"In this example, the DLL contains two methods, <ph id=\"ph1\">`Add`</ph> and <ph id=\"ph2\">`Multiply`</ph>.","pos":[812,880],"source":" In this example, the DLL contains two methods, `Add` and `Multiply`."},{"content":"<ph id=\"ph1\">`Add`</ph>: The source file that contains the method <ph id=\"ph2\">`Add`</ph>.","pos":[890,944],"source":"`Add`: The source file that contains the method `Add`."},{"content":"It returns the sum of its parameters.","pos":[945,982]},{"content":"The class <ph id=\"ph1\">`AddClass`</ph> that contains the method <ph id=\"ph2\">`Add`</ph> is a member of the namespace <ph id=\"ph3\">`UtilityMethods`</ph>.","pos":[983,1081],"source":" The class `AddClass` that contains the method `Add` is a member of the namespace `UtilityMethods`."},{"content":"<ph id=\"ph1\">`Mult`</ph>: The source code that contains the method <ph id=\"ph2\">`Multiply`</ph>.","pos":[1091,1151],"source":"`Mult`: The source code that contains the method `Multiply`."},{"content":"It returns the product of its parameters.","pos":[1152,1193]},{"content":"The class <ph id=\"ph1\">`MultiplyClass`</ph> that contains the method <ph id=\"ph2\">`Multiply`</ph> is also a member of the namespace <ph id=\"ph3\">`UtilityMethods`</ph>.","pos":[1194,1307],"source":" The class `MultiplyClass` that contains the method `Multiply` is also a member of the namespace `UtilityMethods`."},{"content":"<ph id=\"ph1\">`TestCode`</ph>: The file that contains the <ph id=\"ph2\">`Main`</ph> method.","pos":[1317,1370],"source":"`TestCode`: The file that contains the `Main` method."},{"content":"It uses the methods in the DLL file to calculate the sum and the product of the run-time arguments.","pos":[1371,1470]},{"pos":[1479,1486],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This file contains the algorithm that uses the DLL methods, <ph id=\"ph1\">`Add`</ph> and <ph id=\"ph2\">`Multiply`</ph>.","pos":[2933,3014],"source":"This file contains the algorithm that uses the DLL methods, `Add` and `Multiply`."},{"content":"It starts with parsing the arguments entered from the command line, <ph id=\"ph1\">`num1`</ph> and <ph id=\"ph2\">`num2`</ph>.","pos":[3015,3101],"source":" It starts with parsing the arguments entered from the command line, `num1` and `num2`."},{"content":"Then it calculates the sum by using the <ph id=\"ph1\">`Add`</ph> method on the <ph id=\"ph2\">`AddClass`</ph> class, and the product by using the <ph id=\"ph3\">`Multiply`</ph> method on the <ph id=\"ph4\">`MultiplyClass`</ph> class.","pos":[3102,3256],"source":" Then it calculates the sum by using the `Add` method on the `AddClass` class, and the product by using the `Multiply` method on the `MultiplyClass` class."},{"pos":[3263,3433],"content":"Notice that the  <ph id=\"ph1\">`Imports`</ph> statement at the beginning of the file enables you to use the unqualified class names to reference the DLL methods at compile time, as follows:","source":"Notice that the  `Imports` statement at the beginning of the file enables you to use the unqualified class names to reference the DLL methods at compile time, as follows:"},{"content":"Otherwise, you have to use the fully qualified names, as follows:","pos":[3494,3559]},{"pos":[3637,3646],"content":"Execution","linkify":"Execution","nodes":[{"content":"Execution","pos":[0,9]}]},{"content":"To run the program, enter the name of the EXE file, followed by two numbers, as follows:","pos":[3650,3738]},{"pos":[3774,3792],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[3796,3908],"content":"To build the file <ph id=\"ph1\">`MathLibrary.DLL`</ph>, compile the two files <ph id=\"ph2\">`Add`</ph> and <ph id=\"ph3\">`Mult`</ph> by using the following command line.","source":"To build the file `MathLibrary.DLL`, compile the two files `Add` and `Mult` by using the following command line."},{"content":"The <bpt id=\"p1\">[</bpt>/target (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/reference/command-line-compiler/target.md)</ept> compiler option tells the compiler to output a DLL instead of an EXE file.","pos":[3990,4161],"source":"The [/target (Visual Basic)](../../../../visual-basic/reference/command-line-compiler/target.md) compiler option tells the compiler to output a DLL instead of an EXE file."},{"content":"The <bpt id=\"p1\">[</bpt>/out (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/reference/command-line-compiler/out.md)</ept> compiler option followed by a file name is used to specify the DLL file name.","pos":[4162,4330],"source":" The [/out (Visual Basic)](../../../../visual-basic/reference/command-line-compiler/out.md) compiler option followed by a file name is used to specify the DLL file name."},{"content":"Otherwise, the compiler uses the first file (<ph id=\"ph1\">`Add.vb`</ph>) as the name of the DLL.","pos":[4331,4409],"source":" Otherwise, the compiler uses the first file (`Add.vb`) as the name of the DLL."},{"pos":[4416,4493],"content":"To build the executable file, <ph id=\"ph1\">`TestCode.exe`</ph>, use the following command line:","source":"To build the executable file, `TestCode.exe`, use the following command line:"},{"content":"The <bpt id=\"p1\">**</bpt>/out<ept id=\"p1\">**</ept> compiler option tells the compiler to output an EXE file and specifies the name of the output file (<ph id=\"ph1\">`TestCode.exe`</ph>).","pos":[4580,4709],"source":"The **/out** compiler option tells the compiler to output an EXE file and specifies the name of the output file (`TestCode.exe`)."},{"content":"This compiler option is optional.","pos":[4710,4743]},{"content":"The <bpt id=\"p1\">[</bpt>/reference (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/reference/command-line-compiler/reference.md)</ept> compiler option specifies the DLL file or files that this program uses.","pos":[4744,4918],"source":" The [/reference (Visual Basic)](../../../../visual-basic/reference/command-line-compiler/reference.md) compiler option specifies the DLL file or files that this program uses."},{"pos":[4925,5118],"content":"For more information about building from the command line, see  and <bpt id=\"p1\">[</bpt>Building from the Command Line<ept id=\"p1\">](../../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept>.","source":"For more information about building from the command line, see  and [Building from the Command Line](../../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)."},{"pos":[5127,5135],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Programming Concepts<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5139,5224],"source":"[Programming Concepts](../../../../visual-basic/programming-guide/concepts/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Assemblies and the Global Assembly Cache (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5227,5363],"source":" [Assemblies and the Global Assembly Cache (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Creating a Class to Hold DLL Functions<ept id=\"p1\">](../../../../framework/interop/creating-a-class-to-hold-dll-functions.md)</ept>","pos":[5366,5480],"source":" [Creating a Class to Hold DLL Functions](../../../../framework/interop/creating-a-class-to-hold-dll-functions.md)"}]}