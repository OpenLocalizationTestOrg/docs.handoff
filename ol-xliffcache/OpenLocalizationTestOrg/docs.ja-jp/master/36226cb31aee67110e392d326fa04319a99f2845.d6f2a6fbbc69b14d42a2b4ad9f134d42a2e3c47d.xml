{"content":"---\ntitle: \"ICorProfilerCallback::RootReferences Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerCallback.RootReferences\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback::RootReferences\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"RootReferences method [.NET Framework profiling]\"\n  - \"ICorProfilerCallback::RootReferences method [.NET Framework profiling]\"\nms.assetid: dbdf853b-d1a4-4828-8ef7-53d121d8e6ae\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 14\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ICorProfilerCallback::RootReferences Method\nNotifies the profiler with information about root references after garbage collection.  \n  \n## Syntax  \n  \n```  \nHRESULT RootReferences(  \n    [in] ULONG    cRootRefs,  \n    [in, size_is(cRootRefs)] ObjectID rootRefIds[] );  \n```  \n  \n#### Parameters  \n `cRootRefs`  \n [in] The number of references in the `rootRefIds` array.  \n  \n `rootRefIds`  \n [in] An array of object IDs that reference either a static object or an object on the stack.  \n  \n## Remarks  \n Both `RootReferences` and [ICorProfilerCallback2::RootReferences2](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-rootreferences2-method.md) are called to notify the profiler. Profilers will normally implement one or the other, but not both, because the information passed in `RootReferences2` is a superset of that passed in `RootReferences`.  \n  \n It is possible for the `rootRefIds` array to contain a null object. For example, all object references declared on the stack are treated as roots by the garbage collector and will always be reported.  \n  \n The object IDs returned by `RootReferences` are not valid during the callback itself, because the garbage collection might be in the middle of moving objects from old addresses to new addresses. Therefore, profilers must not attempt to inspect objects during a `RootReferences` call. When [ICorProfilerCallback2::GarbageCollectionFinished](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md) is called, all objects have been moved to their new locations and can be safely inspected.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)","nodes":[{"pos":[4,735],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerCallback::RootReferences Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerCallback.RootReferences\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback::RootReferences\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"RootReferences method [.NET Framework profiling]\"\n  - \"ICorProfilerCallback::RootReferences method [.NET Framework profiling]\"\nms.assetid: dbdf853b-d1a4-4828-8ef7-53d121d8e6ae\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 14\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","nodes":[{"content":"ICorProfilerCallback::RootReferences Method | Microsoft Docs","nodes":[{"pos":[0,60],"content":"ICorProfilerCallback::RootReferences Method | Microsoft Docs","nodes":[{"content":"ICorProfilerCallback::RootReferences Method | Microsoft Docs","pos":[0,60]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[742,785],"content":"ICorProfilerCallback::RootReferences Method","linkify":"ICorProfilerCallback::RootReferences Method","nodes":[{"content":"ICorProfilerCallback::RootReferences Method","pos":[0,43]}]},{"content":"Notifies the profiler with information about root references after garbage collection.","pos":[786,872]},{"pos":[881,887],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1026,1036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The number of references in the <ph id=\"ph1\">`rootRefIds`</ph> array.","pos":[1055,1111],"source":"[in] The number of references in the `rootRefIds` array."},{"content":"[in] An array of object IDs that reference either a static object or an object on the stack.","pos":[1134,1226]},{"pos":[1235,1242],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Both <ph id=\"ph1\">`RootReferences`</ph> and <bpt id=\"p1\">[</bpt>ICorProfilerCallback2::RootReferences2<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-rootreferences2-method.md)</ept> are called to notify the profiler.","pos":[1246,1447],"source":"Both `RootReferences` and [ICorProfilerCallback2::RootReferences2](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-rootreferences2-method.md) are called to notify the profiler."},{"content":"Profilers will normally implement one or the other, but not both, because the information passed in <ph id=\"ph1\">`RootReferences2`</ph> is a superset of that passed in <ph id=\"ph2\">`RootReferences`</ph>.","pos":[1448,1615],"source":" Profilers will normally implement one or the other, but not both, because the information passed in `RootReferences2` is a superset of that passed in `RootReferences`."},{"content":"It is possible for the <ph id=\"ph1\">`rootRefIds`</ph> array to contain a null object.","pos":[1622,1689],"source":"It is possible for the `rootRefIds` array to contain a null object."},{"content":"For example, all object references declared on the stack are treated as roots by the garbage collector and will always be reported.","pos":[1690,1821]},{"content":"The object IDs returned by <ph id=\"ph1\">`RootReferences`</ph> are not valid during the callback itself, because the garbage collection might be in the middle of moving objects from old addresses to new addresses.","pos":[1828,2022],"source":"The object IDs returned by `RootReferences` are not valid during the callback itself, because the garbage collection might be in the middle of moving objects from old addresses to new addresses."},{"content":"Therefore, profilers must not attempt to inspect objects during a <ph id=\"ph1\">`RootReferences`</ph> call.","pos":[2023,2111],"source":" Therefore, profilers must not attempt to inspect objects during a `RootReferences` call."},{"content":"When <bpt id=\"p1\">[</bpt>ICorProfilerCallback2::GarbageCollectionFinished<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md)</ept> is called, all objects have been moved to their new locations and can be safely inspected.","pos":[2112,2368],"source":" When [ICorProfilerCallback2::GarbageCollectionFinished](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md) is called, all objects have been moved to their new locations and can be safely inspected."},{"pos":[2377,2389],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2393,2497],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2504,2538],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[2545,2570],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[2577,2605],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept>","source":"**.NET Framework Versions:**"},{"pos":[2694,2702],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2706,2824],"content":"<bpt id=\"p1\">[</bpt>ICorProfilerCallback Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept>","source":"[ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)"}]}