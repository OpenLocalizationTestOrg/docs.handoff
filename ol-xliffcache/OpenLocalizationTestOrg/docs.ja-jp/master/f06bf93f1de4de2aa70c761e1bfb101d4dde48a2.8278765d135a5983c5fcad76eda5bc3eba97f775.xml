{"content":"---\ntitle: \"Walkthrough: Accessing the Web by Using async and await (C#)\"\nms.date: 07/20/2015\nms.assetid: c95d8d71-5a98-4bf0-aaf4-45fed2ebbacd\n---\n# Walkthrough: Accessing the Web by Using async and await (C#)\n\nYou can write asynchronous programs more easily and intuitively by using async/await features. You can write asynchronous code that looks like synchronous code and let the compiler handle the difficult callback functions and continuations that asynchronous code usually entails.\n\nFor more information about the Async feature, see [Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md).\n\nThis walkthrough starts with a synchronous Windows Presentation Foundation (WPF) application that sums the number of bytes in a list of websites. The walkthrough then converts the application to an asynchronous solution by using the new features.\n\nIf you don't want to build the applications yourself, you can download [Async Sample: Accessing the Web Walkthrough (C# and Visual Basic)](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f).\n\n> [!NOTE]\n> To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.\n\n## Create a WPF application\n\n1.  Start Visual Studio.\n\n2.  On the menu bar, choose **File** > **New** > **Project**.\n\n     The **New Project** dialog box opens.\n\n3.  In the **Installed Templates** pane, choose Visual C#, and then choose **WPF Application** from the list of project types.\n\n4.  In the **Name** text box, enter `AsyncExampleWPF`, and then choose the **OK** button.\n\n     The new project appears in **Solution Explorer**.\n\n## Design a simple WPF MainWindow\n\n1.  In the Visual Studio Code Editor, choose the **MainWindow.xaml** tab.\n\n2.  If the **Toolbox** window isn’t visible, open the **View** menu, and then choose **Toolbox**.\n\n3.  Add a **Button** control and a **TextBox** control to the **MainWindow** window.\n\n4.  Highlight the **TextBox** control and, in the **Properties** window, set the following values:\n\n    -   Set the **Name** property to `resultsTextBox`.\n\n    -   Set the **Height** property to 250.\n\n    -   Set the **Width** property to 500.\n\n    -   On the **Text** tab, specify a monospaced font, such as Lucida Console or Global Monospace.\n\n5.  Highlight the **Button** control and, in the **Properties** window, set the following values:\n\n    -   Set the **Name** property to `startButton`.\n\n    -   Change the value of the **Content** property from **Button** to **Start**.\n\n6.  Position the text box and the button so that both appear in the **MainWindow** window.\n\n     For more information about the WPF XAML Designer, see [Creating a UI by using XAML Designer](/visualstudio/designers/creating-a-ui-by-using-xaml-designer-in-visual-studio).\n\n## Add a reference\n\n1.  In **Solution Explorer**, highlight your project's name.\n\n2.  On the menu bar, choose **Project** > **Add Reference**.\n\n     The **Reference Manager** dialog box appears.\n\n3.  At the top of the dialog box, verify that your project is targeting the .NET Framework 4.5 or higher.\n\n4.  In the **Assemblies** category, choose **Framework** if it isn’t already chosen.\n\n5.  In the list of names, select the **System.Net.Http** check box.\n\n6.  Choose the **OK** button to close the dialog box.\n\n## Add necessary using directives\n\n1.  In **Solution Explorer**, open the shortcut menu for MainWindow.xaml.cs, and then choose **View Code**.\n\n2.  Add the following `using` directives at the top of the code file if they’re not already present.\n\n    ```csharp\n    using System.Net.Http;\n    using System.Net;\n    using System.IO;\n    ```\n\n## Create a synchronous app\n\n1.  In the design window, MainWindow.xaml, double-click the **Start** button to create the `startButton_Click` event handler in MainWindow.xaml.cs.\n\n2.  In MainWindow.xaml.cs, copy the following code into the body of `startButton_Click`:\n\n    ```csharp\n    resultsTextBox.Clear();\n    SumPageSizes();\n    resultsTextBox.Text += \"\\r\\nControl returned to startButton_Click.\";\n    ```\n\n    The code calls the method that drives the application, `SumPageSizes`, and displays a message when control returns to `startButton_Click`.\n\n3.  The code for the synchronous solution contains the following four methods:\n\n    -   `SumPageSizes`, which gets a list of webpage URLs from `SetUpURLList` and then calls `GetURLContents` and `DisplayResults` to process each URL.\n\n    -   `SetUpURLList`, which makes and returns a list of web addresses.\n\n    -   `GetURLContents`, which downloads the contents of each website and returns the contents as a byte array.\n\n    -   `DisplayResults`, which displays  the number of bytes in the byte array for each URL.\n\n    Copy the following four methods, and then paste them under the `startButton_Click` event handler in MainWindow.xaml.cs:\n\n    ```csharp\n    private void SumPageSizes()\n    {\n        // Make a list of web addresses.\n        List<string> urlList = SetUpURLList();\n\n        var total = 0;\n        foreach (var url in urlList)\n        {\n            // GetURLContents returns the contents of url as a byte array.\n            byte[] urlContents = GetURLContents(url);\n\n            DisplayResults(url, urlContents);\n\n            // Update the total.\n            total += urlContents.Length;\n        }\n\n        // Display the total count for all of the web addresses.\n        resultsTextBox.Text += $\"\\r\\n\\r\\nTotal bytes returned:  {total}\\r\\n\";\n    }\n\n    private List<string> SetUpURLList()\n    {\n        var urls = new List<string>\n        {\n            \"https://msdn.microsoft.com/library/windows/apps/br211380.aspx\",\n            \"https://msdn.microsoft.com\",\n            \"https://msdn.microsoft.com/library/hh290136.aspx\",\n            \"https://msdn.microsoft.com/library/ee256749.aspx\",\n            \"https://msdn.microsoft.com/library/hh290138.aspx\",\n            \"https://msdn.microsoft.com/library/hh290140.aspx\",\n            \"https://msdn.microsoft.com/library/dd470362.aspx\",\n            \"https://msdn.microsoft.com/library/aa578028.aspx\",\n            \"https://msdn.microsoft.com/library/ms404677.aspx\",\n            \"https://msdn.microsoft.com/library/ff730837.aspx\"\n        };\n        return urls;\n    }\n\n    private byte[] GetURLContents(string url)\n    {\n        // The downloaded resource ends up in the variable named content.\n        var content = new MemoryStream();\n\n        // Initialize an HttpWebRequest for the current URL.\n        var webReq = (HttpWebRequest)WebRequest.Create(url);\n\n        // Send the request to the Internet resource and wait for\n        // the response.\n        // Note: you can't use HttpWebRequest.GetResponse in a Windows Store app.\n        using (WebResponse response = webReq.GetResponse())\n        {\n            // Get the data stream that is associated with the specified URL.\n            using (Stream responseStream = response.GetResponseStream())\n            {\n                // Read the bytes in responseStream and copy them to content.\n                responseStream.CopyTo(content);\n            }\n        }\n\n        // Return the result as a byte array.\n        return content.ToArray();\n    }\n\n    private void DisplayResults(string url, byte[] content)\n    {\n        // Display the length of each website. The string format\n        // is designed to be used with a monospaced font, such as\n        // Lucida Console or Global Monospace.\n        var bytes = content.Length;\n        // Strip off the \"https://\".\n        var displayURL = url.Replace(\"https://\", \"\");\n        resultsTextBox.Text += $\"\\n{displayURL,-58} {bytes,8}\";\n    }\n    ```\n\n## Test the synchronous solution\n\nChoose the **F5** key to run the program, and then choose the **Start** button.\n\nOutput that resembles the following list should appear:\n\n```text\nmsdn.microsoft.com/library/windows/apps/br211380.aspx        383832\nmsdn.microsoft.com                                            33964\nmsdn.microsoft.com/library/hh290136.aspx               225793\nmsdn.microsoft.com/library/ee256749.aspx               143577\nmsdn.microsoft.com/library/hh290138.aspx               237372\nmsdn.microsoft.com/library/hh290140.aspx               128279\nmsdn.microsoft.com/library/dd470362.aspx               157649\nmsdn.microsoft.com/library/aa578028.aspx               204457\nmsdn.microsoft.com/library/ms404677.aspx               176405\nmsdn.microsoft.com/library/ff730837.aspx               143474\n\nTotal bytes returned:  1834802\n\nControl returned to startButton_Click.\n```\n\nNotice that it takes a few seconds to display the counts. During that time, the UI thread is blocked while it waits for requested resources to download. As a result, you can't move, maximize, minimize, or even close the display window after you choose the  **Start** button. These efforts fail until the byte counts start to appear. If a website isn’t responding, you have no indication of which site failed. It is difficult even to stop waiting and close the program.\n\n## Convert GetURLContents to an asynchronous method\n\n1.  To convert the synchronous solution to an asynchronous solution, the best place to start is in `GetURLContents` because the calls to the <xref:System.Net.HttpWebRequest> method <xref:System.Net.HttpWebRequest.GetResponse%2A> and to the <xref:System.IO.Stream> method <xref:System.IO.Stream.CopyTo%2A> are where the application accesses the web. The .NET Framework makes the conversion easy by supplying asynchronous versions of both methods.\n\n     For more information about the methods that are used in `GetURLContents`, see <xref:System.Net.WebRequest>.\n\n    > [!NOTE]\n    > As you follow the steps in this walkthrough, several compiler errors appear. You can ignore them and continue with the walkthrough.\n\n     Change the method that's called in the third line of `GetURLContents` from `GetResponse` to the asynchronous, task-based <xref:System.Net.WebRequest.GetResponseAsync%2A> method.\n\n    ```csharp\n    using (WebResponse response = webReq.GetResponseAsync())\n    ```\n\n2.  `GetResponseAsync` returns a <xref:System.Threading.Tasks.Task%601>. In this case, the *task return variable*, `TResult`, has type <xref:System.Net.WebResponse>. The task is a promise to produce an actual `WebResponse` object after the requested data has been downloaded and the task has run to completion.\n\n     To retrieve the `WebResponse` value from the task, apply an [await](../../../../csharp/language-reference/keywords/await.md) operator to the call to `GetResponseAsync`, as the following code shows.\n\n    ```csharp\n    using (WebResponse response = await webReq.GetResponseAsync())\n    ```\n\n     The `await` operator suspends the execution of the current method, `GetURLContents`, until the awaited task is complete. In the meantime, control returns to the caller of the current method. In this example, the current method is `GetURLContents`, and the caller is `SumPageSizes`. When the task is finished, the promised `WebResponse` object is produced as the value of the awaited task and assigned to the variable `response`.\n\n     The previous statement can be separated into the following two statements to clarify what happens.\n\n    ```csharp\n    //Task<WebResponse> responseTask = webReq.GetResponseAsync();\n    //using (WebResponse response = await responseTask)\n    ```\n\n     The call to `webReq.GetResponseAsync` returns a `Task(Of WebResponse)` or `Task<WebResponse>`. Then an await operator is applied to the task to retrieve the `WebResponse` value.\n\n     If your async method has work to do that doesn’t depend on the completion of the task, the method can continue with that work between these two statements, after the call to the async method and before the `await` operator is applied. For examples, see [How to: Make Multiple Web Requests in Parallel by Using async and await (C#)](../../../../csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md) and [How to: Extend the async Walkthrough by Using Task.WhenAll (C#)](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md).\n\n3.  Because you added the `await` operator in the previous step, a compiler error occurs. The operator can be used only in methods that are marked with the [async](../../../../csharp/language-reference/keywords/async.md) modifier. Ignore the error while you repeat the conversion steps to replace the call to `CopyTo` with a call to `CopyToAsync`.\n\n    -   Change the name of the method that’s called to <xref:System.IO.Stream.CopyToAsync%2A>.\n\n    -   The `CopyTo` or `CopyToAsync` method copies bytes to its argument, `content`, and doesn’t return a meaningful value. In the synchronous version, the call to `CopyTo` is a simple statement that doesn't return a value. The asynchronous version, `CopyToAsync`, returns a <xref:System.Threading.Tasks.Task>. The task functions like \"Task(void)\" and enables the method to be awaited. Apply `Await` or `await` to the call to `CopyToAsync`, as the following code shows.\n\n        ```csharp\n        await responseStream.CopyToAsync(content);\n        ```\n\n         The previous statement abbreviates the following two lines of code.\n\n        ```csharp\n        // CopyToAsync returns a Task, not a Task<T>.\n        //Task copyTask = responseStream.CopyToAsync(content);\n\n        // When copyTask is completed, content contains a copy of\n        // responseStream.\n        //await copyTask;\n        ```\n\n4.  All that remains to be done in `GetURLContents` is to adjust the method signature. You can use the `await` operator only in methods that are marked with the [async](../../../../csharp/language-reference/keywords/async.md) modifier. Add the modifier to mark the method as an *async method*, as the following code shows.\n\n    ```csharp\n    private async byte[] GetURLContents(string url)\n    ```\n\n5.  The return type of an async method can only be <xref:System.Threading.Tasks.Task>, <xref:System.Threading.Tasks.Task%601>, or `void` in C#. Typically, a return type of `void` is used only in an async event handler, where `void` is required. In other cases, you use `Task(T)` if the completed method has a [return](../../../../csharp/language-reference/keywords/return.md) statement that returns a value of type T, and you use `Task` if the completed method doesn’t return a meaningful value. You can think of the `Task` return type as meaning \"Task(void).\"\n\n     For more information, see [Async Return Types (C#)](../../../../csharp/programming-guide/concepts/async/async-return-types.md).\n\n     Method `GetURLContents` has a return statement, and the statement returns a byte array. Therefore, the return type of the async version is Task(T), where T is a byte array. Make the following changes in the method signature:\n\n    -   Change the return type to `Task<byte[]>`.\n\n    -   By convention, asynchronous methods have names that end in \"Async,\" so rename the method `GetURLContentsAsync`.\n\n     The following code shows these changes.\n\n    ```csharp\n    private async Task<byte[]> GetURLContentsAsync(string url)\n    ```\n\n     With those few changes, the conversion of `GetURLContents` to an asynchronous method is complete.\n\n## Convert SumPageSizes to an asynchronous method\n\n1.  Repeat the steps from the previous procedure for `SumPageSizes`. First, change the call to `GetURLContents` to an asynchronous call.\n\n    -   Change the name of the method that’s called from `GetURLContents` to `GetURLContentsAsync`, if you haven't already done so.\n\n    -   Apply `await` to the task that `GetURLContentsAsync` returns to obtain the byte array value.\n\n     The following code shows these changes.\n\n    ```csharp\n    byte[] urlContents = await GetURLContentsAsync(url);\n    ```\n\n     The previous assignment abbreviates the following two lines of code.\n\n    ```csharp\n    // GetURLContentsAsync returns a Task<T>. At completion, the task\n    // produces a byte array.\n    //Task<byte[]> getContentsTask = GetURLContentsAsync(url);\n    //byte[] urlContents = await getContentsTask;\n    ```\n\n2.  Make the following changes in the method's signature:\n\n    -   Mark the method with the `async` modifier.\n\n    -   Add \"Async\" to the method name.\n\n    -   There is no task return variable, T, this time because `SumPageSizesAsync` doesn’t return a value for T. (The method has no `return` statement.) However, the method must return a `Task` to be awaitable. Therefore, change the return type of the method from `void` to `Task`.\n\n    The following code shows these changes.\n\n    ```csharp\n    private async Task SumPageSizesAsync()\n    ```\n\n     The conversion of `SumPageSizes` to `SumPageSizesAsync` is complete.\n\n## Convert startButton_Click to an asynchronous method\n\n1.  In the event handler, change the name of the called method from `SumPageSizes` to `SumPageSizesAsync`, if you haven’t already done so.\n\n2.  Because `SumPageSizesAsync` is an async method, change the code in the event handler to await the result.\n\n     The call to `SumPageSizesAsync` mirrors the call to `CopyToAsync` in `GetURLContentsAsync`. The call returns a `Task`, not a `Task(T)`.\n\n     As in previous procedures, you can convert the call by using one statement or two statements. The following code shows these changes.\n\n    ```csharp\n    // One-step async call.\n    await SumPageSizesAsync();\n\n    // Two-step async call.\n    //Task sumTask = SumPageSizesAsync();\n    //await sumTask;\n    ```\n\n3.  To prevent accidentally reentering the operation, add the following statement at the top of `startButton_Click` to disable the **Start** button.\n\n    ```csharp\n    // Disable the button until the operation is complete.\n    startButton.IsEnabled = false;\n    ```\n\n     You can reenable the button at the end of the event handler.\n\n    ```csharp\n    // Reenable the button in case you want to run the operation again.\n    startButton.IsEnabled = true;\n    ```\n\n     For more information about reentrancy, see [Handling Reentrancy in Async Apps (C#)](../../../../csharp/programming-guide/concepts/async/handling-reentrancy-in-async-apps.md).\n\n4.  Finally, add the `async` modifier to the declaration so that the event handler can await `SumPagSizesAsync`.\n\n    ```csharp\n    private async void startButton_Click(object sender, RoutedEventArgs e)\n    ```\n\n     Typically, the names of event handlers aren’t changed. The return type isn’t changed to `Task` because event handlers must return `void`.\n\n     The conversion of the project from synchronous to asynchronous processing is complete.\n\n## Test the asynchronous solution\n\n1.  Choose the **F5** key to run the program, and then choose the **Start** button.\n\n2.  Output that resembles the output of the synchronous solution should appear. However, notice the following differences.\n\n    -   The results don’t all occur at the same time, after the processing is complete. For example, both programs contain a line in `startButton_Click` that clears the text box. The intent is to clear the text box between runs if you choose the **Start** button for a second time, after one set of results has appeared. In the synchronous version, the text box is cleared just before the counts appear for the second time, when the downloads are completed and the UI thread is free to do other work. In the asynchronous version, the text box clears immediately after you choose the **Start** button.\n\n    -   Most importantly, the UI thread isn’t blocked during the downloads. You can move or resize the window while the web resources are being downloaded, counted, and displayed. If one of the websites is slow or not responding, you can cancel the operation by choosing the **Close** button (the x in the red field in the upper-right corner).\n\n## Replace method GetURLContentsAsync with a .NET Framework method\n\n1.  The .NET Framework 4.5 provides many async methods that you can use. One of them, the <xref:System.Net.Http.HttpClient> method <xref:System.Net.Http.HttpClient.GetByteArrayAsync%28System.String%29>, does just what you need for this walkthrough. You can use it instead of the `GetURLContentsAsync` method that you created in an earlier procedure.\n\n     The first step is to create an `HttpClient` object in method `SumPageSizesAsync`. Add the following declaration at the start of the method.\n\n    ```csharp\n    // Declare an HttpClient object and increase the buffer size. The\n    // default buffer size is 65,536.\n    HttpClient client =\n        new HttpClient() { MaxResponseContentBufferSize = 1000000 };\n    ```\n\n2.  In `SumPageSizesAsync,` replace the call to your `GetURLContentsAsync` method with a call to the `HttpClient` method.\n\n    ```csharp\n    byte[] urlContents = await client.GetByteArrayAsync(url);\n    ```\n\n3.  Remove or comment out the `GetURLContentsAsync` method that you wrote.\n\n4.  Choose the **F5** key to run the program, and then choose the **Start** button.\n\n     The behavior of this version of the project should match the behavior that the \"To test the asynchronous solution\" procedure describes but with even less effort from you.\n\n## Example code\n\nThe following code contains the full example of the conversion from a synchronous to an asynchronous solution by using the asynchronous `GetURLContentsAsync` method that you wrote. Notice that it strongly resembles the original, synchronous solution.\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\n\n// Add the following using directives, and add a reference for System.Net.Http.\nusing System.Net.Http;\nusing System.IO;\nusing System.Net;\n\nnamespace AsyncExampleWPF\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private async void startButton_Click(object sender, RoutedEventArgs e)\n        {\n            // Disable the button until the operation is complete.\n            startButton.IsEnabled = false;\n\n            resultsTextBox.Clear();\n\n            // One-step async call.\n            await SumPageSizesAsync();\n\n            // Two-step async call.\n            //Task sumTask = SumPageSizesAsync();\n            //await sumTask;\n\n            resultsTextBox.Text += \"\\r\\nControl returned to startButton_Click.\\r\\n\";\n\n            // Reenable the button in case you want to run the operation again.\n            startButton.IsEnabled = true;\n        }\n\n        private async Task SumPageSizesAsync()\n        {\n            // Make a list of web addresses.\n            List<string> urlList = SetUpURLList();\n\n            var total = 0;\n\n            foreach (var url in urlList)\n            {\n                byte[] urlContents = await GetURLContentsAsync(url);\n\n                // The previous line abbreviates the following two assignment statements.\n\n                // GetURLContentsAsync returns a Task<T>. At completion, the task\n                // produces a byte array.\n                //Task<byte[]> getContentsTask = GetURLContentsAsync(url);\n                //byte[] urlContents = await getContentsTask;\n\n                DisplayResults(url, urlContents);\n\n                // Update the total.\n                total += urlContents.Length;\n            }\n            // Display the total count for all of the websites.\n            resultsTextBox.Text +=\n                $\"\\r\\n\\r\\nTotal bytes returned:  {total}\\r\\n\";\n        }\n\n        private List<string> SetUpURLList()\n        {\n            List<string> urls = new List<string>\n            {\n                \"https://msdn.microsoft.com/library/windows/apps/br211380.aspx\",\n                \"https://msdn.microsoft.com\",\n                \"https://msdn.microsoft.com/library/hh290136.aspx\",\n                \"https://msdn.microsoft.com/library/ee256749.aspx\",\n                \"https://msdn.microsoft.com/library/hh290138.aspx\",\n                \"https://msdn.microsoft.com/library/hh290140.aspx\",\n                \"https://msdn.microsoft.com/library/dd470362.aspx\",\n                \"https://msdn.microsoft.com/library/aa578028.aspx\",\n                \"https://msdn.microsoft.com/library/ms404677.aspx\",\n                \"https://msdn.microsoft.com/library/ff730837.aspx\"\n            };\n            return urls;\n        }\n\n        private async Task<byte[]> GetURLContentsAsync(string url)\n        {\n            // The downloaded resource ends up in the variable named content.\n            var content = new MemoryStream();\n\n            // Initialize an HttpWebRequest for the current URL.\n            var webReq = (HttpWebRequest)WebRequest.Create(url);\n\n            // Send the request to the Internet resource and wait for\n            // the response.\n            using (WebResponse response = await webReq.GetResponseAsync())\n\n            // The previous statement abbreviates the following two statements.\n\n            //Task<WebResponse> responseTask = webReq.GetResponseAsync();\n            //using (WebResponse response = await responseTask)\n            {\n                // Get the data stream that is associated with the specified url.\n                using (Stream responseStream = response.GetResponseStream())\n                {\n                    // Read the bytes in responseStream and copy them to content.\n                    await responseStream.CopyToAsync(content);\n\n                    // The previous statement abbreviates the following two statements.\n\n                    // CopyToAsync returns a Task, not a Task<T>.\n                    //Task copyTask = responseStream.CopyToAsync(content);\n\n                    // When copyTask is completed, content contains a copy of\n                    // responseStream.\n                    //await copyTask;\n                }\n            }\n            // Return the result as a byte array.\n            return content.ToArray();\n        }\n\n        private void DisplayResults(string url, byte[] content)\n        {\n            // Display the length of each website. The string format\n            // is designed to be used with a monospaced font, such as\n            // Lucida Console or Global Monospace.\n            var bytes = content.Length;\n            // Strip off the \"https://\".\n            var displayURL = url.Replace(\"https://\", \"\");\n            resultsTextBox.Text += $\"\\n{displayURL,-58} {bytes,8}\";\n        }\n    }\n}\n```\n\nThe following code contains the full example of the solution that uses the `HttpClient` method, `GetByteArrayAsync`.\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\n\n// Add the following using directives, and add a reference for System.Net.Http.\nusing System.Net.Http;\nusing System.IO;\nusing System.Net;\n\nnamespace AsyncExampleWPF\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private async void startButton_Click(object sender, RoutedEventArgs e)\n        {\n            resultsTextBox.Clear();\n\n            // Disable the button until the operation is complete.\n            startButton.IsEnabled = false;\n\n            // One-step async call.\n            await SumPageSizesAsync();\n\n            //// Two-step async call.\n            //Task sumTask = SumPageSizesAsync();\n            //await sumTask;\n\n            resultsTextBox.Text += \"\\r\\nControl returned to startButton_Click.\\r\\n\";\n\n            // Reenable the button in case you want to run the operation again.\n            startButton.IsEnabled = true;\n        }\n\n        private async Task SumPageSizesAsync()\n        {\n            // Declare an HttpClient object and increase the buffer size. The\n            // default buffer size is 65,536.\n            HttpClient client =\n                new HttpClient() { MaxResponseContentBufferSize = 1000000 };\n\n            // Make a list of web addresses.\n            List<string> urlList = SetUpURLList();\n\n            var total = 0;\n\n            foreach (var url in urlList)\n            {\n                // GetByteArrayAsync returns a task. At completion, the task\n                // produces a byte array.\n                byte[] urlContents = await client.GetByteArrayAsync(url);\n\n                // The following two lines can replace the previous assignment statement.\n                //Task<byte[]> getContentsTask = client.GetByteArrayAsync(url);\n                //byte[] urlContents = await getContentsTask;\n\n                DisplayResults(url, urlContents);\n\n                // Update the total.\n                total += urlContents.Length;\n            }\n\n            // Display the total count for all of the websites.\n            resultsTextBox.Text +=\n                $\"\\r\\n\\r\\nTotal bytes returned:  {total}\\r\\n\";\n        }\n\n        private List<string> SetUpURLList()\n        {\n            List<string> urls = new List<string>\n            {\n                \"https://msdn.microsoft.com/library/windows/apps/br211380.aspx\",\n                \"https://msdn.microsoft.com\",\n                \"https://msdn.microsoft.com/library/hh290136.aspx\",\n                \"https://msdn.microsoft.com/library/ee256749.aspx\",\n                \"https://msdn.microsoft.com/library/hh290138.aspx\",\n                \"https://msdn.microsoft.com/library/hh290140.aspx\",\n                \"https://msdn.microsoft.com/library/dd470362.aspx\",\n                \"https://msdn.microsoft.com/library/aa578028.aspx\",\n                \"https://msdn.microsoft.com/library/ms404677.aspx\",\n                \"https://msdn.microsoft.com/library/ff730837.aspx\"\n            };\n            return urls;\n        }\n\n        private void DisplayResults(string url, byte[] content)\n        {\n            // Display the length of each website. The string format\n            // is designed to be used with a monospaced font, such as\n            // Lucida Console or Global Monospace.\n            var bytes = content.Length;\n            // Strip off the \"https://\".\n            var displayURL = url.Replace(\"https://\", \"\");\n            resultsTextBox.Text += $\"\\n{displayURL,-58} {bytes,8}\";\n        }\n    }\n}\n```\n\n## See also\n\n- [Async Sample: Accessing the Web Walkthrough (C# and Visual Basic)](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)\n- [async](../../../../csharp/language-reference/keywords/async.md)\n- [await](../../../../csharp/language-reference/keywords/await.md)\n- [Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md)\n- [Async Return Types (C#)](../../../../csharp/programming-guide/concepts/async/async-return-types.md)\n- [Task-based Asynchronous Programming (TAP)](https://www.microsoft.com/en-us/download/details.aspx?id=19957)\n- [How to: Extend the async Walkthrough by Using Task.WhenAll (C#)](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)\n- [How to: Make Multiple Web Requests in Parallel by Using async and await (C#)](../../../../csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md)\n","nodes":[{"pos":[4,142],"embed":true,"restype":"x-metadata","content":"title: \"Walkthrough: Accessing the Web by Using async and await (C#)\"\nms.date: 07/20/2015\nms.assetid: c95d8d71-5a98-4bf0-aaf4-45fed2ebbacd","nodes":[{"content":"Walkthrough: Accessing the Web by Using async and await (C#)","nodes":[{"pos":[0,60],"content":"Walkthrough: Accessing the Web by Using async and await (C#)","nodes":[{"content":"Walkthrough: Accessing the Web by Using async and await (C#)","pos":[0,60]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[149,209],"content":"Walkthrough: Accessing the Web by Using async and await (C#)","linkify":"Walkthrough: Accessing the Web by Using async and await (C#)","nodes":[{"content":"Walkthrough: Accessing the Web by Using async and await (C#)","pos":[0,60]}]},{"content":"You can write asynchronous programs more easily and intuitively by using async/await features.","pos":[211,305]},{"content":"You can write asynchronous code that looks like synchronous code and let the compiler handle the difficult callback functions and continuations that asynchronous code usually entails.","pos":[306,489]},{"pos":[491,656],"content":"For more information about the Async feature, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/index.md)</ept>.","source":"For more information about the Async feature, see [Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md)."},{"content":"This walkthrough starts with a synchronous Windows Presentation Foundation (WPF) application that sums the number of bytes in a list of websites.","pos":[658,803]},{"content":"The walkthrough then converts the application to an asynchronous solution by using the new features.","pos":[804,904]},{"pos":[906,1114],"content":"If you don't want to build the applications yourself, you can download <bpt id=\"p1\">[</bpt>Async Sample: Accessing the Web Walkthrough (C# and Visual Basic)<ept id=\"p1\">](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)</ept>.","source":"If you don't want to build the applications yourself, you can download [Async Sample: Accessing the Web Walkthrough (C# and Visual Basic)](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)."},{"pos":[1118,1254],"content":"[!NOTE]\nTo run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.","leadings":["","> "],"nodes":[{"content":"To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.","pos":[8,134]}]},{"pos":[1259,1283],"content":"Create a WPF application","linkify":"Create a WPF application","nodes":[{"content":"Create a WPF application","pos":[0,24]}]},{"content":"Start Visual Studio.","pos":[1289,1309]},{"pos":[1315,1372],"content":"On the menu bar, choose <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"On the menu bar, choose **File** > **New** > **Project**."},{"pos":[1379,1416],"content":"The <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog box opens.","source":"The **New Project** dialog box opens."},{"pos":[1422,1544],"content":"In the <bpt id=\"p1\">**</bpt>Installed Templates<ept id=\"p1\">**</ept> pane, choose Visual C#, and then choose <bpt id=\"p2\">**</bpt>WPF Application<ept id=\"p2\">**</ept> from the list of project types.","source":"In the **Installed Templates** pane, choose Visual C#, and then choose **WPF Application** from the list of project types."},{"pos":[1550,1635],"content":"In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> text box, enter <ph id=\"ph1\">`AsyncExampleWPF`</ph>, and then choose the <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept> button.","source":"In the **Name** text box, enter `AsyncExampleWPF`, and then choose the **OK** button."},{"pos":[1642,1691],"content":"The new project appears in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>.","source":"The new project appears in **Solution Explorer**."},{"pos":[1696,1726],"content":"Design a simple WPF MainWindow","linkify":"Design a simple WPF MainWindow","nodes":[{"content":"Design a simple WPF MainWindow","pos":[0,30]}]},{"pos":[1732,1801],"content":"In the Visual Studio Code Editor, choose the <bpt id=\"p1\">**</bpt>MainWindow.xaml<ept id=\"p1\">**</ept> tab.","source":"In the Visual Studio Code Editor, choose the **MainWindow.xaml** tab."},{"pos":[1807,1900],"content":"If the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept> window isn’t visible, open the <bpt id=\"p2\">**</bpt>View<ept id=\"p2\">**</ept> menu, and then choose <bpt id=\"p3\">**</bpt>Toolbox<ept id=\"p3\">**</ept>.","source":"If the **Toolbox** window isn’t visible, open the **View** menu, and then choose **Toolbox**."},{"pos":[1906,1986],"content":"Add a <bpt id=\"p1\">**</bpt>Button<ept id=\"p1\">**</ept> control and a <bpt id=\"p2\">**</bpt>TextBox<ept id=\"p2\">**</ept> control to the <bpt id=\"p3\">**</bpt>MainWindow<ept id=\"p3\">**</ept> window.","source":"Add a **Button** control and a **TextBox** control to the **MainWindow** window."},{"pos":[1992,2086],"content":"Highlight the <bpt id=\"p1\">**</bpt>TextBox<ept id=\"p1\">**</ept> control and, in the <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> window, set the following values:","source":"Highlight the **TextBox** control and, in the **Properties** window, set the following values:"},{"pos":[2096,2142],"content":"Set the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> property to <ph id=\"ph1\">`resultsTextBox`</ph>.","source":"Set the **Name** property to `resultsTextBox`."},{"pos":[2152,2187],"content":"Set the <bpt id=\"p1\">**</bpt>Height<ept id=\"p1\">**</ept> property to 250.","source":"Set the **Height** property to 250."},{"pos":[2197,2231],"content":"Set the <bpt id=\"p1\">**</bpt>Width<ept id=\"p1\">**</ept> property to 500.","source":"Set the **Width** property to 500."},{"pos":[2241,2332],"content":"On the <bpt id=\"p1\">**</bpt>Text<ept id=\"p1\">**</ept> tab, specify a monospaced font, such as Lucida Console or Global Monospace.","source":"On the **Text** tab, specify a monospaced font, such as Lucida Console or Global Monospace."},{"pos":[2338,2431],"content":"Highlight the <bpt id=\"p1\">**</bpt>Button<ept id=\"p1\">**</ept> control and, in the <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> window, set the following values:","source":"Highlight the **Button** control and, in the **Properties** window, set the following values:"},{"pos":[2441,2484],"content":"Set the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> property to <ph id=\"ph1\">`startButton`</ph>.","source":"Set the **Name** property to `startButton`."},{"pos":[2494,2568],"content":"Change the value of the <bpt id=\"p1\">**</bpt>Content<ept id=\"p1\">**</ept> property from <bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>Start<ept id=\"p3\">**</ept>.","source":"Change the value of the **Content** property from **Button** to **Start**."},{"pos":[2574,2660],"content":"Position the text box and the button so that both appear in the <bpt id=\"p1\">**</bpt>MainWindow<ept id=\"p1\">**</ept> window.","source":"Position the text box and the button so that both appear in the **MainWindow** window."},{"pos":[2667,2839],"content":"For more information about the WPF XAML Designer, see <bpt id=\"p1\">[</bpt>Creating a UI by using XAML Designer<ept id=\"p1\">](/visualstudio/designers/creating-a-ui-by-using-xaml-designer-in-visual-studio)</ept>.","source":"For more information about the WPF XAML Designer, see [Creating a UI by using XAML Designer](/visualstudio/designers/creating-a-ui-by-using-xaml-designer-in-visual-studio)."},{"pos":[2844,2859],"content":"Add a reference","linkify":"Add a reference","nodes":[{"content":"Add a reference","pos":[0,15]}]},{"pos":[2865,2921],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, highlight your project's name.","source":"In **Solution Explorer**, highlight your project's name."},{"pos":[2927,2983],"content":"On the menu bar, choose <bpt id=\"p1\">**</bpt>Project<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept>.","source":"On the menu bar, choose **Project** > **Add Reference**."},{"pos":[2990,3035],"content":"The <bpt id=\"p1\">**</bpt>Reference Manager<ept id=\"p1\">**</ept> dialog box appears.","source":"The **Reference Manager** dialog box appears."},{"content":"At the top of the dialog box, verify that your project is targeting the .NET Framework 4.5 or higher.","pos":[3041,3142]},{"pos":[3148,3228],"content":"In the <bpt id=\"p1\">**</bpt>Assemblies<ept id=\"p1\">**</ept> category, choose <bpt id=\"p2\">**</bpt>Framework<ept id=\"p2\">**</ept> if it isn’t already chosen.","source":"In the **Assemblies** category, choose **Framework** if it isn’t already chosen."},{"pos":[3234,3297],"content":"In the list of names, select the <bpt id=\"p1\">**</bpt>System.Net.Http<ept id=\"p1\">**</ept> check box.","source":"In the list of names, select the **System.Net.Http** check box."},{"pos":[3303,3352],"content":"Choose the <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> button to close the dialog box.","source":"Choose the **OK** button to close the dialog box."},{"pos":[3357,3387],"content":"Add necessary using directives","linkify":"Add necessary using directives","nodes":[{"content":"Add necessary using directives","pos":[0,30]}]},{"pos":[3393,3496],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, open the shortcut menu for MainWindow.xaml.cs, and then choose <bpt id=\"p2\">**</bpt>View Code<ept id=\"p2\">**</ept>.","source":"In **Solution Explorer**, open the shortcut menu for MainWindow.xaml.cs, and then choose **View Code**."},{"pos":[3502,3598],"content":"Add the following <ph id=\"ph1\">`using`</ph> directives at the top of the code file if they’re not already present.","source":"Add the following `using` directives at the top of the code file if they’re not already present."},{"pos":[3696,3720],"content":"Create a synchronous app","linkify":"Create a synchronous app","nodes":[{"content":"Create a synchronous app","pos":[0,24]}]},{"pos":[3726,3869],"content":"In the design window, MainWindow.xaml, double-click the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> button to create the <ph id=\"ph1\">`startButton_Click`</ph> event handler in MainWindow.xaml.cs.","source":"In the design window, MainWindow.xaml, double-click the **Start** button to create the `startButton_Click` event handler in MainWindow.xaml.cs."},{"pos":[3875,3959],"content":"In MainWindow.xaml.cs, copy the following code into the body of <ph id=\"ph1\">`startButton_Click`</ph>:","source":"In MainWindow.xaml.cs, copy the following code into the body of `startButton_Click`:"},{"pos":[4109,4247],"content":"The code calls the method that drives the application, <ph id=\"ph1\">`SumPageSizes`</ph>, and displays a message when control returns to <ph id=\"ph2\">`startButton_Click`</ph>.","source":"The code calls the method that drives the application, `SumPageSizes`, and displays a message when control returns to `startButton_Click`."},{"content":"The code for the synchronous solution contains the following four methods:","pos":[4253,4327]},{"pos":[4337,4480],"content":"<ph id=\"ph1\">`SumPageSizes`</ph>, which gets a list of webpage URLs from <ph id=\"ph2\">`SetUpURLList`</ph> and then calls <ph id=\"ph3\">`GetURLContents`</ph> and <ph id=\"ph4\">`DisplayResults`</ph> to process each URL.","source":"`SumPageSizes`, which gets a list of webpage URLs from `SetUpURLList` and then calls `GetURLContents` and `DisplayResults` to process each URL."},{"pos":[4490,4554],"content":"<ph id=\"ph1\">`SetUpURLList`</ph>, which makes and returns a list of web addresses.","source":"`SetUpURLList`, which makes and returns a list of web addresses."},{"pos":[4564,4668],"content":"<ph id=\"ph1\">`GetURLContents`</ph>, which downloads the contents of each website and returns the contents as a byte array.","source":"`GetURLContents`, which downloads the contents of each website and returns the contents as a byte array."},{"pos":[4678,4763],"content":"<ph id=\"ph1\">`DisplayResults`</ph>, which displays  the number of bytes in the byte array for each URL.","source":"`DisplayResults`, which displays  the number of bytes in the byte array for each URL."},{"pos":[4769,4888],"content":"Copy the following four methods, and then paste them under the <ph id=\"ph1\">`startButton_Click`</ph> event handler in MainWindow.xaml.cs:","source":"Copy the following four methods, and then paste them under the `startButton_Click` event handler in MainWindow.xaml.cs:"},{"pos":[7665,7694],"content":"Test the synchronous solution","linkify":"Test the synchronous solution","nodes":[{"content":"Test the synchronous solution","pos":[0,29]}]},{"pos":[7696,7775],"content":"Choose the <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> key to run the program, and then choose the <bpt id=\"p2\">**</bpt>Start<ept id=\"p2\">**</ept> button.","source":"Choose the **F5** key to run the program, and then choose the **Start** button."},{"content":"Output that resembles the following list should appear:","pos":[7777,7832]},{"content":"Notice that it takes a few seconds to display the counts.","pos":[8551,8608]},{"content":"During that time, the UI thread is blocked while it waits for requested resources to download.","pos":[8609,8703]},{"content":"As a result, you can't move, maximize, minimize, or even close the display window after you choose the  <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> button.","pos":[8704,8825],"source":" As a result, you can't move, maximize, minimize, or even close the display window after you choose the  **Start** button."},{"content":"These efforts fail until the byte counts start to appear.","pos":[8826,8883]},{"content":"If a website isn’t responding, you have no indication of which site failed.","pos":[8884,8959]},{"content":"It is difficult even to stop waiting and close the program.","pos":[8960,9019]},{"pos":[9024,9072],"content":"Convert GetURLContents to an asynchronous method","linkify":"Convert GetURLContents to an asynchronous method","nodes":[{"content":"Convert GetURLContents to an asynchronous method","pos":[0,48]}]},{"content":"To convert the synchronous solution to an asynchronous solution, the best place to start is in <ph id=\"ph1\">`GetURLContents`</ph> because the calls to the <ph id=\"ph2\">&lt;xref:System.Net.HttpWebRequest&gt;</ph> method <ph id=\"ph3\">&lt;xref:System.Net.HttpWebRequest.GetResponse%2A&gt;</ph> and to the <ph id=\"ph4\">&lt;xref:System.IO.Stream&gt;</ph> method <ph id=\"ph5\">&lt;xref:System.IO.Stream.CopyTo%2A&gt;</ph> are where the application accesses the web.","pos":[9078,9422],"source":"To convert the synchronous solution to an asynchronous solution, the best place to start is in `GetURLContents` because the calls to the <xref:System.Net.HttpWebRequest> method <xref:System.Net.HttpWebRequest.GetResponse%2A> and to the <xref:System.IO.Stream> method <xref:System.IO.Stream.CopyTo%2A> are where the application accesses the web."},{"content":"The .NET Framework makes the conversion easy by supplying asynchronous versions of both methods.","pos":[9423,9519]},{"pos":[9526,9633],"content":"For more information about the methods that are used in <ph id=\"ph1\">`GetURLContents`</ph>, see <ph id=\"ph2\">&lt;xref:System.Net.WebRequest&gt;</ph>.","source":"For more information about the methods that are used in `GetURLContents`, see <xref:System.Net.WebRequest>."},{"pos":[9641,9786],"content":"[!NOTE]\nAs you follow the steps in this walkthrough, several compiler errors appear. You can ignore them and continue with the walkthrough.","leadings":["","    > "],"nodes":[{"content":"As you follow the steps in this walkthrough, several compiler errors appear. You can ignore them and continue with the walkthrough.","pos":[8,139],"nodes":[{"content":"As you follow the steps in this walkthrough, several compiler errors appear.","pos":[0,76]},{"content":"You can ignore them and continue with the walkthrough.","pos":[77,131]}]}]},{"pos":[9793,9970],"content":"Change the method that's called in the third line of <ph id=\"ph1\">`GetURLContents`</ph> from <ph id=\"ph2\">`GetResponse`</ph> to the asynchronous, task-based <ph id=\"ph3\">&lt;xref:System.Net.WebRequest.GetResponseAsync%2A&gt;</ph> method.","source":"Change the method that's called in the third line of `GetURLContents` from `GetResponse` to the asynchronous, task-based <xref:System.Net.WebRequest.GetResponseAsync%2A> method."},{"content":"<ph id=\"ph1\">`GetResponseAsync`</ph> returns a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[10060,10128],"source":"`GetResponseAsync` returns a <xref:System.Threading.Tasks.Task%601>."},{"content":"In this case, the <bpt id=\"p1\">*</bpt>task return variable<ept id=\"p1\">*</ept>, <ph id=\"ph1\">`TResult`</ph>, has type <ph id=\"ph2\">&lt;xref:System.Net.WebResponse&gt;</ph>.","pos":[10129,10221],"source":" In this case, the *task return variable*, `TResult`, has type <xref:System.Net.WebResponse>."},{"content":"The task is a promise to produce an actual <ph id=\"ph1\">`WebResponse`</ph> object after the requested data has been downloaded and the task has run to completion.","pos":[10222,10366],"source":" The task is a promise to produce an actual `WebResponse` object after the requested data has been downloaded and the task has run to completion."},{"pos":[10373,10570],"content":"To retrieve the <ph id=\"ph1\">`WebResponse`</ph> value from the task, apply an <bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](../../../../csharp/language-reference/keywords/await.md)</ept> operator to the call to <ph id=\"ph2\">`GetResponseAsync`</ph>, as the following code shows.","source":"To retrieve the `WebResponse` value from the task, apply an [await](../../../../csharp/language-reference/keywords/await.md) operator to the call to `GetResponseAsync`, as the following code shows."},{"content":"The <ph id=\"ph1\">`await`</ph> operator suspends the execution of the current method, <ph id=\"ph2\">`GetURLContents`</ph>, until the awaited task is complete.","pos":[10667,10787],"source":"The `await` operator suspends the execution of the current method, `GetURLContents`, until the awaited task is complete."},{"content":"In the meantime, control returns to the caller of the current method.","pos":[10788,10857]},{"content":"In this example, the current method is <ph id=\"ph1\">`GetURLContents`</ph>, and the caller is <ph id=\"ph2\">`SumPageSizes`</ph>.","pos":[10858,10948],"source":" In this example, the current method is `GetURLContents`, and the caller is `SumPageSizes`."},{"content":"When the task is finished, the promised <ph id=\"ph1\">`WebResponse`</ph> object is produced as the value of the awaited task and assigned to the variable <ph id=\"ph2\">`response`</ph>.","pos":[10949,11095],"source":" When the task is finished, the promised `WebResponse` object is produced as the value of the awaited task and assigned to the variable `response`."},{"content":"The previous statement can be separated into the following two statements to clarify what happens.","pos":[11102,11200]},{"content":"The call to <ph id=\"ph1\">`webReq.GetResponseAsync`</ph> returns a <ph id=\"ph2\">`Task(Of WebResponse)`</ph> or <ph id=\"ph3\">`Task&lt;WebResponse&gt;`</ph>.","pos":[11352,11446],"source":"The call to `webReq.GetResponseAsync` returns a `Task(Of WebResponse)` or `Task<WebResponse>`."},{"content":"Then an await operator is applied to the task to retrieve the <ph id=\"ph1\">`WebResponse`</ph> value.","pos":[11447,11529],"source":" Then an await operator is applied to the task to retrieve the `WebResponse` value."},{"content":"If your async method has work to do that doesn’t depend on the completion of the task, the method can continue with that work between these two statements, after the call to the async method and before the <ph id=\"ph1\">`await`</ph> operator is applied.","pos":[11536,11770],"source":"If your async method has work to do that doesn’t depend on the completion of the task, the method can continue with that work between these two statements, after the call to the async method and before the `await` operator is applied."},{"content":"For examples, see <bpt id=\"p1\">[</bpt>How to: Make Multiple Web Requests in Parallel by Using async and await (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Extend the async Walkthrough by Using Task.WhenAll (C#)<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept>.","pos":[11771,12179],"source":" For examples, see [How to: Make Multiple Web Requests in Parallel by Using async and await (C#)](../../../../csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md) and [How to: Extend the async Walkthrough by Using Task.WhenAll (C#)](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)."},{"content":"Because you added the <ph id=\"ph1\">`await`</ph> operator in the previous step, a compiler error occurs.","pos":[12185,12270],"source":"Because you added the `await` operator in the previous step, a compiler error occurs."},{"content":"The operator can be used only in methods that are marked with the <bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](../../../../csharp/language-reference/keywords/async.md)</ept> modifier.","pos":[12271,12411],"source":" The operator can be used only in methods that are marked with the [async](../../../../csharp/language-reference/keywords/async.md) modifier."},{"content":"Ignore the error while you repeat the conversion steps to replace the call to <ph id=\"ph1\">`CopyTo`</ph> with a call to <ph id=\"ph2\">`CopyToAsync`</ph>.","pos":[12412,12528],"source":" Ignore the error while you repeat the conversion steps to replace the call to `CopyTo` with a call to `CopyToAsync`."},{"pos":[12538,12624],"content":"Change the name of the method that’s called to <ph id=\"ph1\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>.","source":"Change the name of the method that’s called to <xref:System.IO.Stream.CopyToAsync%2A>."},{"content":"The <ph id=\"ph1\">`CopyTo`</ph> or <ph id=\"ph2\">`CopyToAsync`</ph> method copies bytes to its argument, <ph id=\"ph3\">`content`</ph>, and doesn’t return a meaningful value.","pos":[12634,12750],"source":"The `CopyTo` or `CopyToAsync` method copies bytes to its argument, `content`, and doesn’t return a meaningful value."},{"content":"In the synchronous version, the call to <ph id=\"ph1\">`CopyTo`</ph> is a simple statement that doesn't return a value.","pos":[12751,12850],"source":" In the synchronous version, the call to `CopyTo` is a simple statement that doesn't return a value."},{"content":"The asynchronous version, <ph id=\"ph1\">`CopyToAsync`</ph>, returns a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.","pos":[12851,12937],"source":" The asynchronous version, `CopyToAsync`, returns a <xref:System.Threading.Tasks.Task>."},{"content":"The task functions like \"Task(void)\" and enables the method to be awaited.","pos":[12938,13012]},{"content":"Apply <ph id=\"ph1\">`Await`</ph> or <ph id=\"ph2\">`await`</ph> to the call to <ph id=\"ph3\">`CopyToAsync`</ph>, as the following code shows.","pos":[13013,13096],"source":" Apply `Await` or `await` to the call to `CopyToAsync`, as the following code shows."},{"content":"The previous statement abbreviates the following two lines of code.","pos":[13189,13256]},{"content":"All that remains to be done in <ph id=\"ph1\">`GetURLContents`</ph> is to adjust the method signature.","pos":[13530,13612],"source":"All that remains to be done in `GetURLContents` is to adjust the method signature."},{"content":"You can use the <ph id=\"ph1\">`await`</ph> operator only in methods that are marked with the <bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](../../../../csharp/language-reference/keywords/async.md)</ept> modifier.","pos":[13613,13761],"source":" You can use the `await` operator only in methods that are marked with the [async](../../../../csharp/language-reference/keywords/async.md) modifier."},{"content":"Add the modifier to mark the method as an <bpt id=\"p1\">*</bpt>async method<ept id=\"p1\">*</ept>, as the following code shows.","pos":[13762,13848],"source":" Add the modifier to mark the method as an *async method*, as the following code shows."},{"content":"The return type of an async method can only be <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, or <ph id=\"ph3\">`void`</ph> in C#.","pos":[13929,14068],"source":"The return type of an async method can only be <xref:System.Threading.Tasks.Task>, <xref:System.Threading.Tasks.Task%601>, or `void` in C#."},{"content":"Typically, a return type of <ph id=\"ph1\">`void`</ph> is used only in an async event handler, where <ph id=\"ph2\">`void`</ph> is required.","pos":[14069,14169],"source":" Typically, a return type of `void` is used only in an async event handler, where `void` is required."},{"content":"In other cases, you use <ph id=\"ph1\">`Task(T)`</ph> if the completed method has a <bpt id=\"p1\">[</bpt>return<ept id=\"p1\">](../../../../csharp/language-reference/keywords/return.md)</ept> statement that returns a value of type T, and you use <ph id=\"ph2\">`Task`</ph> if the completed method doesn’t return a meaningful value.","pos":[14170,14420],"source":" In other cases, you use `Task(T)` if the completed method has a [return](../../../../csharp/language-reference/keywords/return.md) statement that returns a value of type T, and you use `Task` if the completed method doesn’t return a meaningful value."},{"content":"You can think of the <ph id=\"ph1\">`Task`</ph> return type as meaning \"Task(void).\"","pos":[14421,14485],"source":" You can think of the `Task` return type as meaning \"Task(void).\""},{"pos":[14492,14619],"content":"For more information, see <bpt id=\"p1\">[</bpt>Async Return Types (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept>.","source":"For more information, see [Async Return Types (C#)](../../../../csharp/programming-guide/concepts/async/async-return-types.md)."},{"content":"Method <ph id=\"ph1\">`GetURLContents`</ph> has a return statement, and the statement returns a byte array.","pos":[14626,14713],"source":"Method `GetURLContents` has a return statement, and the statement returns a byte array."},{"content":"Therefore, the return type of the async version is Task(T), where T is a byte array.","pos":[14714,14798]},{"content":"Make the following changes in the method signature:","pos":[14799,14850]},{"pos":[14860,14901],"content":"Change the return type to <ph id=\"ph1\">`Task&lt;byte[]&gt;`</ph>.","source":"Change the return type to `Task<byte[]>`."},{"pos":[14911,15022],"content":"By convention, asynchronous methods have names that end in \"Async,\" so rename the method <ph id=\"ph1\">`GetURLContentsAsync`</ph>.","source":"By convention, asynchronous methods have names that end in \"Async,\" so rename the method `GetURLContentsAsync`."},{"content":"The following code shows these changes.","pos":[15029,15068]},{"pos":[15161,15258],"content":"With those few changes, the conversion of <ph id=\"ph1\">`GetURLContents`</ph> to an asynchronous method is complete.","source":"With those few changes, the conversion of `GetURLContents` to an asynchronous method is complete."},{"pos":[15263,15309],"content":"Convert SumPageSizes to an asynchronous method","linkify":"Convert SumPageSizes to an asynchronous method","nodes":[{"content":"Convert SumPageSizes to an asynchronous method","pos":[0,46]}]},{"content":"Repeat the steps from the previous procedure for <ph id=\"ph1\">`SumPageSizes`</ph>.","pos":[15315,15379],"source":"Repeat the steps from the previous procedure for `SumPageSizes`."},{"content":"First, change the call to <ph id=\"ph1\">`GetURLContents`</ph> to an asynchronous call.","pos":[15380,15447],"source":" First, change the call to `GetURLContents` to an asynchronous call."},{"pos":[15457,15580],"content":"Change the name of the method that’s called from <ph id=\"ph1\">`GetURLContents`</ph> to <ph id=\"ph2\">`GetURLContentsAsync`</ph>, if you haven't already done so.","source":"Change the name of the method that’s called from `GetURLContents` to `GetURLContentsAsync`, if you haven't already done so."},{"pos":[15590,15682],"content":"Apply <ph id=\"ph1\">`await`</ph> to the task that <ph id=\"ph2\">`GetURLContentsAsync`</ph> returns to obtain the byte array value.","source":"Apply `await` to the task that `GetURLContentsAsync` returns to obtain the byte array value."},{"content":"The following code shows these changes.","pos":[15689,15728]},{"content":"The previous assignment abbreviates the following two lines of code.","pos":[15815,15883]},{"content":"Make the following changes in the method's signature:","pos":[16125,16178]},{"pos":[16188,16230],"content":"Mark the method with the <ph id=\"ph1\">`async`</ph> modifier.","source":"Mark the method with the `async` modifier."},{"content":"Add \"Async\" to the method name.","pos":[16240,16271]},{"content":"There is no task return variable, T, this time because <ph id=\"ph1\">`SumPageSizesAsync`</ph> doesn’t return a value for T. (The method has no <ph id=\"ph2\">`return`</ph> statement.) However, the method must return a <ph id=\"ph3\">`Task`</ph> to be awaitable.","pos":[16281,16483],"source":"There is no task return variable, T, this time because `SumPageSizesAsync` doesn’t return a value for T. (The method has no `return` statement.) However, the method must return a `Task` to be awaitable."},{"content":"Therefore, change the return type of the method from <ph id=\"ph1\">`void`</ph> to <ph id=\"ph2\">`Task`</ph>.","pos":[16484,16554],"source":" Therefore, change the return type of the method from `void` to `Task`."},{"content":"The following code shows these changes.","pos":[16560,16599]},{"pos":[16672,16740],"content":"The conversion of <ph id=\"ph1\">`SumPageSizes`</ph> to <ph id=\"ph2\">`SumPageSizesAsync`</ph> is complete.","source":"The conversion of `SumPageSizes` to `SumPageSizesAsync` is complete."},{"pos":[16745,16796],"content":"Convert startButton_Click to an asynchronous method","linkify":"Convert startButton_Click to an asynchronous method","nodes":[{"content":"Convert startButton_Click to an asynchronous method","pos":[0,51]}]},{"pos":[16802,16936],"content":"In the event handler, change the name of the called method from <ph id=\"ph1\">`SumPageSizes`</ph> to <ph id=\"ph2\">`SumPageSizesAsync`</ph>, if you haven’t already done so.","source":"In the event handler, change the name of the called method from `SumPageSizes` to `SumPageSizesAsync`, if you haven’t already done so."},{"pos":[16942,17047],"content":"Because <ph id=\"ph1\">`SumPageSizesAsync`</ph> is an async method, change the code in the event handler to await the result.","source":"Because `SumPageSizesAsync` is an async method, change the code in the event handler to await the result."},{"content":"The call to <ph id=\"ph1\">`SumPageSizesAsync`</ph> mirrors the call to <ph id=\"ph2\">`CopyToAsync`</ph> in <ph id=\"ph3\">`GetURLContentsAsync`</ph>.","pos":[17054,17145],"source":"The call to `SumPageSizesAsync` mirrors the call to `CopyToAsync` in `GetURLContentsAsync`."},{"content":"The call returns a <ph id=\"ph1\">`Task`</ph>, not a <ph id=\"ph2\">`Task(T)`</ph>.","pos":[17146,17189],"source":" The call returns a `Task`, not a `Task(T)`."},{"content":"As in previous procedures, you can convert the call by using one statement or two statements.","pos":[17196,17289]},{"content":"The following code shows these changes.","pos":[17290,17329]},{"pos":[17509,17653],"content":"To prevent accidentally reentering the operation, add the following statement at the top of <ph id=\"ph1\">`startButton_Click`</ph> to disable the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> button.","source":"To prevent accidentally reentering the operation, add the following statement at the top of `startButton_Click` to disable the **Start** button."},{"content":"You can reenable the button at the end of the event handler.","pos":[17777,17837]},{"pos":[17973,18147],"content":"For more information about reentrancy, see <bpt id=\"p1\">[</bpt>Handling Reentrancy in Async Apps (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/handling-reentrancy-in-async-apps.md)</ept>.","source":"For more information about reentrancy, see [Handling Reentrancy in Async Apps (C#)](../../../../csharp/programming-guide/concepts/async/handling-reentrancy-in-async-apps.md)."},{"pos":[18153,18261],"content":"Finally, add the <ph id=\"ph1\">`async`</ph> modifier to the declaration so that the event handler can await <ph id=\"ph2\">`SumPagSizesAsync`</ph>.","source":"Finally, add the `async` modifier to the declaration so that the event handler can await `SumPagSizesAsync`."},{"content":"Typically, the names of event handlers aren’t changed.","pos":[18366,18420]},{"content":"The return type isn’t changed to <ph id=\"ph1\">`Task`</ph> because event handlers must return <ph id=\"ph2\">`void`</ph>.","pos":[18421,18503],"source":" The return type isn’t changed to `Task` because event handlers must return `void`."},{"content":"The conversion of the project from synchronous to asynchronous processing is complete.","pos":[18510,18596]},{"pos":[18601,18631],"content":"Test the asynchronous solution","linkify":"Test the asynchronous solution","nodes":[{"content":"Test the asynchronous solution","pos":[0,30]}]},{"pos":[18637,18716],"content":"Choose the <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> key to run the program, and then choose the <bpt id=\"p2\">**</bpt>Start<ept id=\"p2\">**</ept> button.","source":"Choose the **F5** key to run the program, and then choose the **Start** button."},{"content":"Output that resembles the output of the synchronous solution should appear.","pos":[18722,18797]},{"content":"However, notice the following differences.","pos":[18798,18840]},{"content":"The results don’t all occur at the same time, after the processing is complete.","pos":[18850,18929]},{"content":"For example, both programs contain a line in <ph id=\"ph1\">`startButton_Click`</ph> that clears the text box.","pos":[18930,19020],"source":" For example, both programs contain a line in `startButton_Click` that clears the text box."},{"content":"The intent is to clear the text box between runs if you choose the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> button for a second time, after one set of results has appeared.","pos":[19021,19162],"source":" The intent is to clear the text box between runs if you choose the **Start** button for a second time, after one set of results has appeared."},{"content":"In the synchronous version, the text box is cleared just before the counts appear for the second time, when the downloads are completed and the UI thread is free to do other work.","pos":[19163,19342]},{"content":"In the asynchronous version, the text box clears immediately after you choose the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> button.","pos":[19343,19442],"source":" In the asynchronous version, the text box clears immediately after you choose the **Start** button."},{"content":"Most importantly, the UI thread isn’t blocked during the downloads.","pos":[19452,19519]},{"content":"You can move or resize the window while the web resources are being downloaded, counted, and displayed.","pos":[19520,19623]},{"content":"If one of the websites is slow or not responding, you can cancel the operation by choosing the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button (the x in the red field in the upper-right corner).","pos":[19624,19787],"source":" If one of the websites is slow or not responding, you can cancel the operation by choosing the **Close** button (the x in the red field in the upper-right corner)."},{"pos":[19792,19855],"content":"Replace method GetURLContentsAsync with a .NET Framework method","linkify":"Replace method GetURLContentsAsync with a .NET Framework method","nodes":[{"content":"Replace method GetURLContentsAsync with a .NET Framework method","pos":[0,63]}]},{"content":"The .NET Framework 4.5 provides many async methods that you can use.","pos":[19861,19929]},{"content":"One of them, the <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> method <ph id=\"ph2\">&lt;xref:System.Net.Http.HttpClient.GetByteArrayAsync%28System.String%29&gt;</ph>, does just what you need for this walkthrough.","pos":[19930,20105],"source":" One of them, the <xref:System.Net.Http.HttpClient> method <xref:System.Net.Http.HttpClient.GetByteArrayAsync%28System.String%29>, does just what you need for this walkthrough."},{"content":"You can use it instead of the <ph id=\"ph1\">`GetURLContentsAsync`</ph> method that you created in an earlier procedure.","pos":[20106,20206],"source":" You can use it instead of the `GetURLContentsAsync` method that you created in an earlier procedure."},{"content":"The first step is to create an <ph id=\"ph1\">`HttpClient`</ph> object in method <ph id=\"ph2\">`SumPageSizesAsync`</ph>.","pos":[20213,20294],"source":"The first step is to create an `HttpClient` object in method `SumPageSizesAsync`."},{"content":"Add the following declaration at the start of the method.","pos":[20295,20352]},{"pos":[20582,20699],"content":"In <ph id=\"ph1\">`SumPageSizesAsync,`</ph> replace the call to your <ph id=\"ph2\">`GetURLContentsAsync`</ph> method with a call to the <ph id=\"ph3\">`HttpClient`</ph> method.","source":"In `SumPageSizesAsync,` replace the call to your `GetURLContentsAsync` method with a call to the `HttpClient` method."},{"pos":[20790,20860],"content":"Remove or comment out the <ph id=\"ph1\">`GetURLContentsAsync`</ph> method that you wrote.","source":"Remove or comment out the `GetURLContentsAsync` method that you wrote."},{"pos":[20866,20945],"content":"Choose the <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> key to run the program, and then choose the <bpt id=\"p2\">**</bpt>Start<ept id=\"p2\">**</ept> button.","source":"Choose the **F5** key to run the program, and then choose the **Start** button."},{"content":"The behavior of this version of the project should match the behavior that the \"To test the asynchronous solution\" procedure describes but with even less effort from you.","pos":[20952,21122]},{"pos":[21127,21139],"content":"Example code","linkify":"Example code","nodes":[{"content":"Example code","pos":[0,12]}]},{"content":"The following code contains the full example of the conversion from a synchronous to an asynchronous solution by using the asynchronous <ph id=\"ph1\">`GetURLContentsAsync`</ph> method that you wrote.","pos":[21141,21321],"source":"The following code contains the full example of the conversion from a synchronous to an asynchronous solution by using the asynchronous `GetURLContentsAsync` method that you wrote."},{"content":"Notice that it strongly resembles the original, synchronous solution.","pos":[21322,21391]},{"pos":[26629,26745],"content":"The following code contains the full example of the solution that uses the <ph id=\"ph1\">`HttpClient`</ph> method, <ph id=\"ph2\">`GetByteArrayAsync`</ph>.","source":"The following code contains the full example of the solution that uses the `HttpClient` method, `GetByteArrayAsync`."},{"pos":[30646,30654],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[30658,30794],"content":"<bpt id=\"p1\">[</bpt>Async Sample: Accessing the Web Walkthrough (C# and Visual Basic)<ept id=\"p1\">](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)</ept>","source":"[Async Sample: Accessing the Web Walkthrough (C# and Visual Basic)](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)"},{"pos":[30797,30861],"content":"<bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](../../../../csharp/language-reference/keywords/async.md)</ept>","source":"[async](../../../../csharp/language-reference/keywords/async.md)"},{"pos":[30864,30928],"content":"<bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](../../../../csharp/language-reference/keywords/await.md)</ept>","source":"[await](../../../../csharp/language-reference/keywords/await.md)"},{"pos":[30931,31045],"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/index.md)</ept>","source":"[Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md)"},{"pos":[31048,31148],"content":"<bpt id=\"p1\">[</bpt>Async Return Types (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept>","source":"[Async Return Types (C#)](../../../../csharp/programming-guide/concepts/async/async-return-types.md)"},{"pos":[31151,31258],"content":"<bpt id=\"p1\">[</bpt>Task-based Asynchronous Programming (TAP)<ept id=\"p1\">](https://www.microsoft.com/en-us/download/details.aspx?id=19957)</ept>","source":"[Task-based Asynchronous Programming (TAP)](https://www.microsoft.com/en-us/download/details.aspx?id=19957)"},{"pos":[31261,31440],"content":"<bpt id=\"p1\">[</bpt>How to: Extend the async Walkthrough by Using Task.WhenAll (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept>","source":"[How to: Extend the async Walkthrough by Using Task.WhenAll (C#)](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)"},{"pos":[31443,31648],"content":"<bpt id=\"p1\">[</bpt>How to: Make Multiple Web Requests in Parallel by Using async and await (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md)</ept>","source":"[How to: Make Multiple Web Requests in Parallel by Using async and await (C#)](../../../../csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md)"}]}