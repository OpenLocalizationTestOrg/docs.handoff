<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="link-compiler-option.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9dcb79a3310c4c814879501e2723560a84c9b48c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\compiler-options\link-compiler-option.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34c9124f7c93d6c692ce9e13c6120d7365f76e6e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">77083e89c8751a7a6ebf0c070ee0a61440582aa2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>-link (C# Compiler Options)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>-link (C# Compiler Options)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Causes the compiler to make COM type information in the specified assemblies available to the project that you are currently compiling.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Comma-delimited list of assembly file names.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the file name contains a space, enclose the name in quotation marks.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-link`</ph> option enables you to deploy an application that has embedded type information.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The application can then use types in a runtime assembly that implement the embedded type information without requiring a reference to the runtime assembly.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If various versions of the runtime assembly are published, the application that contains the embedded type information can work with the various versions without having to be recompiled.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Walkthrough: Embedding Types from Managed Assemblies<ept id="p1">](../../programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`-link`</ph> option is especially useful when you are working with COM interop.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can embed COM types so that your application no longer requires a primary interop assembly (PIA) on the target computer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-link`</ph> option instructs the compiler to embed the COM type information from the referenced interop assembly into the resulting compiled code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The COM type is identified by the CLSID (GUID) value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As a result, your application can run on a target computer that has installed the same COM types with the same CLSID values.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Applications that automate Microsoft Office are a good example.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because applications like Office usually keep the same CLSID value across different versions, your application can use the referenced COM types as long as .NET Framework 4 or later is installed on the target computer and your application uses methods, properties, or events that are included in the referenced COM types.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-link`</ph> option embeds only interfaces, structures, and delegates.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Embedding COM classes is not supported.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you create an instance of an embedded COM type in your code, you must create the instance by using the appropriate interface.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Attempting to create an instance of an embedded COM type by using the CoClass causes an error.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To set the <ph id="ph1">`-link`</ph> option in Visual Studio, add an assembly reference and set the <ph id="ph2">`Embed Interop Types`</ph> property to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default for the <ph id="ph1">`Embed Interop Types`</ph> property is <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you link to a COM assembly (Assembly A) which itself references another COM assembly (Assembly B), you also have to link to Assembly B if either of the following is true:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A type from Assembly A inherits from a type or implements an interface from Assembly B.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A field, property, event, or method that has a return type or parameter type from Assembly B is invoked.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Like the <bpt id="p1">[</bpt>-reference<ept id="p1">](../../../csharp/language-reference/compiler-options/reference-compiler-option.md)</ept> compiler option, the <ph id="ph1">`-link`</ph> compiler option uses the Csc.rsp response file, which references frequently used <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> assemblies.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>-noconfig<ept id="p1">](../../../csharp/language-reference/compiler-options/noconfig-compiler-option.md)</ept> compiler option if you do not want the compiler to use the Csc.rsp file.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The short form of <ph id="ph1">`-link`</ph> is <ph id="ph2">`-l`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Generics and Embedded Types</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following sections describe the limitations on using generic types in applications that embed interop types.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Generic Interfaces</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Generic interfaces that are embedded from an interop assembly cannot be used.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Types That Have Generic Parameters</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Types that have a generic parameter whose type is embedded from an interop assembly cannot be used if that type is from an external assembly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This restriction does not apply to interfaces.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, consider the <ph id="ph1">&lt;xref:Microsoft.Office.Interop.Excel.Range&gt;</ph> interface that is defined in the <ph id="ph2">&lt;xref:Microsoft.Office.Interop.Excel&gt;</ph> assembly.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a library embeds interop types from the <ph id="ph1">&lt;xref:Microsoft.Office.Interop.Excel&gt;</ph> assembly and exposes a method that returns a generic type that has a parameter whose type is the <ph id="ph2">&lt;xref:Microsoft.Office.Interop.Excel.Range&gt;</ph> interface, that method must return a generic interface, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the following example, client code can call the method that returns the <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> generic interface without error.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following code compiles source file <ph id="ph1">`OfficeApp.cs`</ph> and reference assemblies from <ph id="ph2">`COMData1.dll`</ph> and <ph id="ph3">`COMData2.dll`</ph> to produce <ph id="ph4">`OfficeApp.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Compiler Options<ept id="p1">](../../../csharp/language-reference/compiler-options/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Embedding Types from Managed Assemblies<ept id="p1">](../../programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>-reference (C# Compiler Options)<ept id="p1">](../../../csharp/language-reference/compiler-options/reference-compiler-option.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>-noconfig (C# Compiler Options)<ept id="p1">](../../../csharp/language-reference/compiler-options/noconfig-compiler-option.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command-line Building With csc.exe<ept id="p1">](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interoperability Overview<ept id="p1">](../../../csharp/programming-guide/interop/interoperability-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>