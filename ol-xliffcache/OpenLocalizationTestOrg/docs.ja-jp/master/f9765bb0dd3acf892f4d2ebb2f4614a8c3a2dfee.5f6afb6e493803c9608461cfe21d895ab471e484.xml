{"content":"---\ntitle: \"How to: Handle Composite Keys in Queries | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: ce2f14fd-1038-458a-91e3-a078c61f0d10\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# How to: Handle Composite Keys in Queries\nSome operators can take only one argument. If your argument must include more than one column from the database, you must create an anonymous type to represent the combination.  \n  \n## Example  \n The following example shows a query that invokes the `GroupBy` operator, which can take only one `key` argument.  \n  \n [!code-csharp[DLinqCompositeKeys#1](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqCompositeKeys/cs/Program.cs#1)]\n [!code-vb[DLinqCompositeKeys#1](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqCompositeKeys/vb/Module1.vb#1)]  \n  \n## Example  \n The same situation pertains to joins, as in the following example:  \n  \n [!code-csharp[DLinqCompositeKeys#2](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqCompositeKeys/cs/Program.cs#2)]\n [!code-vb[DLinqCompositeKeys#2](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqCompositeKeys/vb/Module1.vb#2)]  \n  \n## See Also  \n [Query Concepts](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)","nodes":[{"pos":[4,371],"embed":true,"restype":"x-metadata","content":"title: \"How to: Handle Composite Keys in Queries | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: ce2f14fd-1038-458a-91e3-a078c61f0d10\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"How to: Handle Composite Keys in Queries | Microsoft Docs","nodes":[{"pos":[0,57],"content":"How to: Handle Composite Keys in Queries | Microsoft Docs","nodes":[{"content":"How to: Handle Composite Keys in Queries | Microsoft Docs","pos":[0,57]}]}],"path":["title"]}],"yml":true},{"pos":[378,418],"content":"How to: Handle Composite Keys in Queries","linkify":"How to: Handle Composite Keys in Queries","nodes":[{"content":"How to: Handle Composite Keys in Queries","pos":[0,40]}]},{"content":"Some operators can take only one argument.","pos":[419,461]},{"content":"If your argument must include more than one column from the database, you must create an anonymous type to represent the combination.","pos":[462,595]},{"pos":[604,611],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[615,727],"content":"The following example shows a query that invokes the <ph id=\"ph1\">`GroupBy`</ph> operator, which can take only one <ph id=\"ph2\">`key`</ph> argument.","source":"The following example shows a query that invokes the `GroupBy` operator, which can take only one `key` argument."},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqCompositeKeys#1<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqCompositeKeys/cs/Program.cs#1)</ept><ept id=\"p1\">]</ept>","pos":[734,865],"source":"[!code-csharp[DLinqCompositeKeys#1](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqCompositeKeys/cs/Program.cs#1)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>DLinqCompositeKeys#1<ept id=\"p2\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqCompositeKeys/vb/Module1.vb#1)</ept><ept id=\"p1\">]</ept>","pos":[867,999],"source":"[!code-vb[DLinqCompositeKeys#1](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqCompositeKeys/vb/Module1.vb#1)]"},{"pos":[1008,1015],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The same situation pertains to joins, as in the following example:","pos":[1019,1085]},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DLinqCompositeKeys#2<ept id=\"p2\">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqCompositeKeys/cs/Program.cs#2)</ept><ept id=\"p1\">]</ept>","pos":[1092,1223],"source":"[!code-csharp[DLinqCompositeKeys#2](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqCompositeKeys/cs/Program.cs#2)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>DLinqCompositeKeys#2<ept id=\"p2\">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqCompositeKeys/vb/Module1.vb#2)</ept><ept id=\"p1\">]</ept>","pos":[1225,1357],"source":"[!code-vb[DLinqCompositeKeys#2](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqCompositeKeys/vb/Module1.vb#2)]"},{"pos":[1366,1374],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1378,1467],"content":"<bpt id=\"p1\">[</bpt>Query Concepts<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)</ept>","source":"[Query Concepts](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)"}]}