{"content":"---\ntitle: \"- Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"-_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"- operator [C#]\"\n  - \"subtraction operator (-) [C#]\"\nms.assetid: 4de7a4fa-c69d-48e6-aff1-3130af970b2d\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# - Operator (C# Reference)\nThe `-` operator can function as either a unary or a binary operator.  \n  \n## Remarks  \n Unary `-` operators are predefined for all numeric types. The result of a unary `-` operation on a numeric type is the numeric negation of the operand.  \n  \n Binary `-` operators are predefined for all numeric and enumeration types to subtract the second operand from the first.  \n  \n Delegate types also provide a binary `-` operator, which performs delegate removal.  \n  \n User-defined types can overload the unary `-` and binary `-` operators. For more information, see [operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md).  \n  \n## Example  \n [!code-cs[csRefOperators#40](../../../csharp/language-reference/operators/codesnippet/CSharp/subtraction-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,586],"nodes":[{"content":"- Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[2,42],"content":"Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"Operator (C# Reference) | Microsoft Docs","pos":[0,40]}]}],"pos":[6,51],"yaml":true}],"content":"title: \"- Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"-_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"- operator [C#]\"\n  - \"subtraction operator (-) [C#]\"\nms.assetid: 4de7a4fa-c69d-48e6-aff1-3130af970b2d\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[593,618],"content":"- Operator (C# Reference)","linkify":"- Operator (C# Reference)","nodes":[{"content":"- Operator (C# Reference)","pos":[0,25]}]},{"pos":[619,688],"content":"The <ph id=\"ph1\">`-`</ph> operator can function as either a unary or a binary operator.","source":"The `-` operator can function as either a unary or a binary operator."},{"pos":[697,704],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Unary <ph id=\"ph1\">`-`</ph> operators are predefined for all numeric types.","pos":[708,765],"source":"Unary `-` operators are predefined for all numeric types."},{"content":"The result of a unary <ph id=\"ph1\">`-`</ph> operation on a numeric type is the numeric negation of the operand.","pos":[766,859],"source":" The result of a unary `-` operation on a numeric type is the numeric negation of the operand."},{"pos":[866,986],"content":"Binary <ph id=\"ph1\">`-`</ph> operators are predefined for all numeric and enumeration types to subtract the second operand from the first.","source":"Binary `-` operators are predefined for all numeric and enumeration types to subtract the second operand from the first."},{"pos":[993,1076],"content":"Delegate types also provide a binary <ph id=\"ph1\">`-`</ph> operator, which performs delegate removal.","source":"Delegate types also provide a binary `-` operator, which performs delegate removal."},{"content":"User-defined types can overload the unary <ph id=\"ph1\">`-`</ph> and binary <ph id=\"ph2\">`-`</ph> operators.","pos":[1083,1154],"source":"User-defined types can overload the unary `-` and binary `-` operators."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>operator (C# Reference)<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>.","pos":[1155,1264],"source":" For more information, see [operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md)."},{"pos":[1273,1280],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1284,1404],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#40<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/subtraction-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#40](../../../csharp/language-reference/operators/codesnippet/CSharp/subtraction-operator_1.cs)]"},{"pos":[1413,1421],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1425,1485],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1489,1556],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1560,1629],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}