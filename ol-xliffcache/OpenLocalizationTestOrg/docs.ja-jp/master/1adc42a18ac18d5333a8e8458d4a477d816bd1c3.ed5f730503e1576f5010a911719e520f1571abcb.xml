{"content":"---\ntitle: \"How to: Combine and Compare String Collections (LINQ) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 25926e5b-fde2-4dc1-86a0-16ead7aa13d2\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Combine and Compare String Collections (LINQ) (C#)\nThis example shows how to merge files that contain lines of text and then sort the results. Specifically, it shows how to perform a simple concatenation, a union, and an intersection on the two sets of text lines.  \n  \n### To set up the project and the text files  \n  \n1.  Copy these names into a text file that is named names1.txt and save it in your project folder:  \n  \n    ```  \n    Bankov, Peter  \n    Holm, Michael  \n    Garcia, Hugo  \n    Potra, Cristina  \n    Noriega, Fabricio  \n    Aw, Kam Foo  \n    Beebe, Ann  \n    Toyoshima, Tim  \n    Guy, Wey Yuan  \n    Garcia, Debra  \n    ```  \n  \n2.  Copy these names into a text file that is named names2.txt and save it in your project folder. Note that the two files have some names in common.  \n  \n    ```  \n    Liu, Jinghao  \n    Bankov, Peter  \n    Holm, Michael  \n    Garcia, Hugo  \n    Beebe, Ann  \n    Gilchrist, Beth  \n    Myrcha, Jacek  \n    Giakoumakis, Leo  \n    McLin, Nkenge  \n    El Yassir, Mehdi  \n    ```  \n  \n## Example  \n  \n```csharp  \nclass MergeStrings  \n    {  \n        static void Main(string[] args)  \n        {  \n            //Put text files in your solution folder  \n            string[] fileA = System.IO.File.ReadAllLines(@\"../../../names1.txt\");  \n            string[] fileB = System.IO.File.ReadAllLines(@\"../../../names2.txt\");  \n  \n            //Simple concatenation and sort. Duplicates are preserved.  \n            IEnumerable<string> concatQuery =  \n                fileA.Concat(fileB).OrderBy(s => s);  \n  \n            // Pass the query variable to another function for execution.  \n            OutputQueryResults(concatQuery, \"Simple concatenate and sort. Duplicates are preserved:\");  \n  \n            // Concatenate and remove duplicate names based on  \n            // default string comparer.  \n            IEnumerable<string> uniqueNamesQuery =  \n                fileA.Union(fileB).OrderBy(s => s);  \n            OutputQueryResults(uniqueNamesQuery, \"Union removes duplicate names:\");  \n  \n            // Find the names that occur in both files (based on  \n            // default string comparer).  \n            IEnumerable<string> commonNamesQuery =  \n                fileA.Intersect(fileB);  \n            OutputQueryResults(commonNamesQuery, \"Merge based on intersect:\");  \n  \n            // Find the matching fields in each list. Merge the two   \n            // results by using Concat, and then  \n            // sort using the default string comparer.  \n            string nameMatch = \"Garcia\";  \n  \n            IEnumerable<String> tempQuery1 =  \n                from name in fileA  \n                let n = name.Split(',')  \n                where n[0] == nameMatch  \n                select name;  \n  \n            IEnumerable<string> tempQuery2 =  \n                from name2 in fileB  \n                let n2 = name2.Split(',')  \n                where n2[0] == nameMatch  \n                select name2;  \n  \n            IEnumerable<string> nameMatchQuery =  \n                tempQuery1.Concat(tempQuery2).OrderBy(s => s);  \n            OutputQueryResults(nameMatchQuery, String.Format(\"Concat based on partial name match \\\"{0}\\\":\", nameMatch));  \n  \n            // Keep the console window open in debug mode.  \n            Console.WriteLine(\"Press any key to exit\");  \n            Console.ReadKey();  \n        }  \n  \n        static void OutputQueryResults(IEnumerable<string> query, string message)  \n        {  \n            Console.WriteLine(System.Environment.NewLine + message);  \n            foreach (string item in query)  \n            {  \n                Console.WriteLine(item);  \n            }  \n            Console.WriteLine(\"{0} total names in list\", query.Count());  \n        }  \n    }  \n    /* Output:  \n        Simple concatenate and sort. Duplicates are preserved:  \n        Aw, Kam Foo  \n        Bankov, Peter  \n        Bankov, Peter  \n        Beebe, Ann  \n        Beebe, Ann  \n        El Yassir, Mehdi  \n        Garcia, Debra  \n        Garcia, Hugo  \n        Garcia, Hugo  \n        Giakoumakis, Leo  \n        Gilchrist, Beth  \n        Guy, Wey Yuan  \n        Holm, Michael  \n        Holm, Michael  \n        Liu, Jinghao  \n        McLin, Nkenge  \n        Myrcha, Jacek  \n        Noriega, Fabricio  \n        Potra, Cristina  \n        Toyoshima, Tim  \n        20 total names in list  \n  \n        Union removes duplicate names:  \n        Aw, Kam Foo  \n        Bankov, Peter  \n        Beebe, Ann  \n        El Yassir, Mehdi  \n        Garcia, Debra  \n        Garcia, Hugo  \n        Giakoumakis, Leo  \n        Gilchrist, Beth  \n        Guy, Wey Yuan  \n        Holm, Michael  \n        Liu, Jinghao  \n        McLin, Nkenge  \n        Myrcha, Jacek  \n        Noriega, Fabricio  \n        Potra, Cristina  \n        Toyoshima, Tim  \n        16 total names in list  \n  \n        Merge based on intersect:  \n        Bankov, Peter  \n        Holm, Michael  \n        Garcia, Hugo  \n        Beebe, Ann  \n        4 total names in list  \n  \n        Concat based on partial name match \"Garcia\":  \n        Garcia, Debra  \n        Garcia, Hugo  \n        Garcia, Hugo  \n        3 total names in list  \n*/  \n```  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces.  \n  \n## See Also  \n [LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)   \n [LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)","nodes":[{"pos":[4,439],"nodes":[{"content":"How to: Combine and Compare String Collections (LINQ) (C#) | Microsoft Docs","nodes":[{"pos":[0,75],"content":"How to: Combine and Compare String Collections (LINQ) (C#) | Microsoft Docs","nodes":[{"content":"How to: Combine and Compare String Collections (LINQ) (C#) | Microsoft Docs","pos":[0,75]}]}],"pos":[6,84],"yaml":true}],"content":"title: \"How to: Combine and Compare String Collections (LINQ) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 25926e5b-fde2-4dc1-86a0-16ead7aa13d2\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[446,504],"content":"How to: Combine and Compare String Collections (LINQ) (C#)","linkify":"How to: Combine and Compare String Collections (LINQ) (C#)","nodes":[{"content":"How to: Combine and Compare String Collections (LINQ) (C#)","pos":[0,58]}]},{"content":"This example shows how to merge files that contain lines of text and then sort the results.","pos":[505,596]},{"content":"Specifically, it shows how to perform a simple concatenation, a union, and an intersection on the two sets of text lines.","pos":[597,718]},{"pos":[728,768],"content":"To set up the project and the text files","linkify":"To set up the project and the text files","nodes":[{"content":"To set up the project and the text files","pos":[0,40]}]},{"content":"Copy these names into a text file that is named names1.txt and save it in your project folder:","pos":[778,872]},{"content":"Copy these names into a text file that is named names2.txt and save it in your project folder.","pos":[1106,1200]},{"content":"Note that the two files have some names in common.","pos":[1201,1251]},{"pos":[1486,1493],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5608,5626],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[5630,5807],"content":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id=\"ph1\">`using`</ph> directives for the System.Linq and System.IO namespaces.","source":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces."},{"pos":[5816,5824],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)</ept><ph id=\"ph1\"> </ph>","pos":[5828,5924],"source":"[LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ and File Directories (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)</ept>","pos":[5928,6041],"source":"[LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)"}]}