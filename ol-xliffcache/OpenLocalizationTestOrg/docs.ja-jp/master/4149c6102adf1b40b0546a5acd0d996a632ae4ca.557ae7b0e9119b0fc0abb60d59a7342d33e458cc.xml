{"content":"---\ntitle: \"Type of '<variablename>' cannot be inferred from an expression containing '<variablename>'\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc30980\"\n  - \"bc30980\"\nhelpviewer_keywords: \n  - \"BC30980\"\nms.assetid: 43a5d008-5362-481b-845b-b9bb00a61a83\n---\n# Type of '\\<variablename>' cannot be inferred from an expression containing '\\<variablename>'\nThe compiler cannot infer the data type of a variable if the variable is used in establishing its initial value in the declaration.  \n  \n For example, with `Option Infer` set to `On`, the following examples do not compile:  \n  \n-   Declarations  \n  \n    ```  \n    ' Does not compile with Option Infer on.  \n    Dim m = m  \n    Dim d = someFunction(d)  \n    ```  \n  \n-   `For` loop  \n  \n    ```  \n    ' Does not compile with Option Infer on.  \n    For j = 1 To j  \n    Next  \n    ```  \n  \n-   `For Each` loop  \n  \n    ```  \n    ' Does not compile with Option Infer on.  \n    For Each customer In customer.Orders  \n    Next  \n    ```  \n  \n **Error ID:** BC30980  \n  \n## To correct this error  \n  \n-   If the two variables were intended to refer to different values, change the name of the variable that you are declaring.  \n  \n-   Use a literal value instead of the variable name in the initial value, on the right side of the assignment.  \n  \n-   Use an `As` clause to specify the type of the variable you are declaring.  \n  \n## See also\n\n- [Dim Statement](../../visual-basic/language-reference/statements/dim-statement.md)\n- [For Each...Next Statement](../../visual-basic/language-reference/statements/for-each-next-statement.md)\n- [For...Next Statement](../../visual-basic/language-reference/statements/for-next-statement.md)\n- [Local Type Inference](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)\n- [Option Infer Statement](../../visual-basic/language-reference/statements/option-infer-statement.md)\n","nodes":[{"pos":[4,251],"embed":true,"restype":"x-metadata","content":"title: \"Type of '<variablename>' cannot be inferred from an expression containing '<variablename>'\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc30980\"\n  - \"bc30980\"\nhelpviewer_keywords: \n  - \"BC30980\"\nms.assetid: 43a5d008-5362-481b-845b-b9bb00a61a83","nodes":[{"content":"Type of '<variablename>' cannot be inferred from an expression containing '<variablename>'","nodes":[{"pos":[0,90],"content":"Type of '<ph id=\"ph1\">&lt;variablename&gt;</ph>' cannot be inferred from an expression containing '<ph id=\"ph2\">&lt;variablename&gt;</ph>'","source":"Type of '<variablename>' cannot be inferred from an expression containing '<variablename>'"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[258,350],"content":"Type of '\\<variablename>' cannot be inferred from an expression containing '\\<variablename>'","linkify":"Type of '\\<variablename>' cannot be inferred from an expression containing '\\<variablename>'","nodes":[{"content":"Type of '<ph id=\"ph1\">\\&lt;</ph>variablename&gt;' cannot be inferred from an expression containing '<ph id=\"ph2\">\\&lt;</ph>variablename&gt;'","pos":[0,92],"source":"Type of '\\<variablename>' cannot be inferred from an expression containing '\\<variablename>'"}]},{"content":"The compiler cannot infer the data type of a variable if the variable is used in establishing its initial value in the declaration.","pos":[351,482]},{"pos":[489,573],"content":"For example, with <ph id=\"ph1\">`Option Infer`</ph> set to <ph id=\"ph2\">`On`</ph>, the following examples do not compile:","source":"For example, with `Option Infer` set to `On`, the following examples do not compile:"},{"content":"Declarations","pos":[583,595]},{"pos":[721,731],"content":"<ph id=\"ph1\">`For`</ph> loop","source":"`For` loop"},{"pos":[843,858],"content":"<ph id=\"ph1\">`For Each`</ph> loop","source":"`For Each` loop"},{"pos":[989,1010],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC30980","source":"**Error ID:** BC30980"},{"pos":[1019,1040],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"If the two variables were intended to refer to different values, change the name of the variable that you are declaring.","pos":[1050,1170]},{"content":"Use a literal value instead of the variable name in the initial value, on the right side of the assignment.","pos":[1180,1287]},{"pos":[1297,1370],"content":"Use an <ph id=\"ph1\">`As`</ph> clause to specify the type of the variable you are declaring.","source":"Use an `As` clause to specify the type of the variable you are declaring."},{"pos":[1379,1387],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1391,1473],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[1476,1580],"content":"<bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>","source":"[For Each...Next Statement](../../visual-basic/language-reference/statements/for-each-next-statement.md)"},{"pos":[1583,1677],"content":"<bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/for-next-statement.md)</ept>","source":"[For...Next Statement](../../visual-basic/language-reference/statements/for-next-statement.md)"},{"pos":[1680,1792],"content":"<bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>","source":"[Local Type Inference](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)"},{"pos":[1795,1895],"content":"<bpt id=\"p1\">[</bpt>Option Infer Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>","source":"[Option Infer Statement](../../visual-basic/language-reference/statements/option-infer-statement.md)"}]}