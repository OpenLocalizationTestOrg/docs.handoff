<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ulong.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97db22612e900658746f40cd117ff941135027a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\ulong.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7a52961ce07e8f42f3213a481e61838621e5c45</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b01bacabc8c0e7781fa942ce93f2212761de1f0c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>ulong keyword - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ulong (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ulong`</ph> keyword denotes an integral type that stores values according to the size and range shown in the following table.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Range</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Size</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET type</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>0 to 18,446,744,073,709,551,615</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Unsigned 64-bit integer</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Literals</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can declare and initialize a <ph id="ph1">`ulong`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the integer literal is outside the range of <ph id="ph1">`ulong`</ph> (that is, if it is less than <ph id="ph2">&lt;xref:System.UInt64.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id="ph3">&lt;xref:System.UInt64.MaxValue?displayProperty=nameWithType&gt;</ph>), a compilation error occurs.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the following example, integers equal to 7,934,076,125 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id="ph1">`ulong`</ph> values.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You use the prefix <ph id="ph1">`0x`</ph> or <ph id="ph2">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id="ph3">`0b`</ph> or <ph id="ph4">`0B`</ph> to denote a binary literal.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Decimal literals have no prefix.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, a couple of features have been added to enhance readability:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>C# 7.0 allows the usage of the underscore character, <ph id="ph1">`_`</ph>, as a digit separator.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>C# 7.2 allows <ph id="ph1">`_`</ph> to be used as a digit separator for a binary or hexadecimal literal, after the prefix.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A decimal literal isn't permitted to have a leading underscore.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Some examples are shown below.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Integer literals can also include a suffix that denotes the type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The suffix <ph id="ph1">`UL`</ph> or <ph id="ph2">`ul`</ph> unambiguously identifies a numeric literal as a <ph id="ph3">`ulong`</ph> value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`L`</ph> suffix denotes a <ph id="ph2">`ulong`</ph> if the literal value exceeds <ph id="ph3">&lt;xref:System.Int64.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>And the <ph id="ph1">`U`</ph> or <ph id="ph2">`u`</ph> suffix denotes a <ph id="ph3">`ulong`</ph> if the literal value exceeds <ph id="ph4">&lt;xref:System.UInt32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`ul`</ph> suffix to denote a long integer:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If an integer literal has no suffix, its type is the first of the following types in which its value can be represented:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>int<ept id="p1">](int.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>uint<ept id="p1">](uint.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>long<ept id="p1">](long.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compiler overload resolution</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A common use of the suffix is with calling overloaded methods.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Consider, for example, the following overloaded methods that use <ph id="ph1">`ulong`</ph> and <bpt id="p1">[</bpt>int<ept id="p1">](int.md)</ept> parameters:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using a suffix with the <ph id="ph1">`ulong`</ph> parameter guarantees that the correct type is called, for example:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Conversions</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>There is a predefined implicit conversion from <ph id="ph1">`ulong`</ph> to <bpt id="p1">[</bpt>float<ept id="p1">](float.md)</ept>, <bpt id="p2">[</bpt>double<ept id="p2">](double.md)</ept>, or <bpt id="p3">[</bpt>decimal<ept id="p3">](decimal.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>There is no implicit conversion from <ph id="ph1">`ulong`</ph> to any integral type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, the following statement will produce a compilation error without an explicit cast:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There is a predefined implicit conversion from <bpt id="p1">[</bpt>byte<ept id="p1">](byte.md)</ept>, <bpt id="p2">[</bpt>ushort<ept id="p2">](ushort.md)</ept>, <bpt id="p3">[</bpt>uint<ept id="p3">](uint.md)</ept>, or <bpt id="p4">[</bpt>char<ept id="p4">](char.md)</ept> to <ph id="ph1">`ulong`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Also, there is no implicit conversion from floating-point types to <ph id="ph1">`ulong`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, the following statement generates a compiler error unless an explicit cast is used:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id="p1">[</bpt>float<ept id="p1">](float.md)</ept> and <bpt id="p2">[</bpt>double<ept id="p2">](double.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information on implicit numeric conversion rules, see the <bpt id="p1">[</bpt>Implicit Numeric Conversions Table<ept id="p1">](implicit-numeric-conversions-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Integral types<ept id="p1">](~/_csharplang/spec/types.md#integral-types)</ept> in the <bpt id="p2">[</bpt>C# Language Specification<ept id="p2">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The language specification is the definitive source for C# syntax and usage.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integral Types Table<ept id="p1">](integral-types-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Built-In Types Table<ept id="p1">](built-in-types-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicit Numeric Conversions Table<ept id="p1">](implicit-numeric-conversions-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Explicit Numeric Conversions Table<ept id="p1">](explicit-numeric-conversions-table.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>