<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="consuming-odata-feeds-from-a-workflow.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1fb838ee233267fca762a7c6312941da90d730db</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\consuming-odata-feeds-from-a-workflow.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8691c2d2d2fbbe64fcfe69f6ddfa34b6c8c15a7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce650df551d3c5d42075fc93b349f39604113367</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Consuming OData Feeds from a Workflow | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Consuming OData Feeds from a Workflow</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>WCF Data Services is a component of the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> that enables you to create services that use the Open Data Protocol (OData) to expose and consume data over the Web or intranet by using the semantics of representational state transfer (REST).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>OData exposes data as resources that are addressable by URIs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Any application can interact with an OData-based data service if it can send an HTTP request and process the OData feed that a data service returns.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In addition, WCF Data Services includes client libraries that provide a richer programming experience when you consume OData feeds from <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of consuming an OData feed in a workflow with and without using the client libraries.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using the Sample Northwind OData Service</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The examples in this topic use the sample Northwind data service located at <bpt id="p1">[</bpt>http://services.odata.org/Northwind/Northwind.svc/<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=187426)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This service is provided as part of the <bpt id="p1">[</bpt>OData SDK<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=185248)</ept> and provides read-only access to the sample Northwind database.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If write access is desired, or if a local WCF Data Service is desired, you can follow the steps of the <bpt id="p1">[</bpt>WCF Data Services Quickstart<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=131076)</ept> to create a local OData service that provides access to the Northwind database.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you follow the quickstart, substitute the local URI for the one provided in the example code in this topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Consuming an OData Feed Using the Client Libraries</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>WCF Data Services includes client libraries that enable you to more easily consume an OData feed from <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> and client applications.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These libraries simplify sending and receiving HTTP messages.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>They also translate the message payload into CLR objects that represent entity data.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The client libraries feature the two core classes <ph id="ph1">&lt;xref:System.Data.Services.Client.DataServiceContext&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Services.Client.DataServiceQuery%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These classes enable you to query a data service and then work with the returned entity data as CLR objects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This section covers two approaches to creating activities that use the client libraries.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Adding a Service Reference to the WCF Data Service</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To generate the Northwind client libraries, you can use the <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept> dialog box in <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph> to add a reference to the Northwind OData service.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Add Service Reference<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/addservicereferencetonorthwindodataservice.gif "</bpt>AddServiceReferencetoNorthwindODataService<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that there are no service operations exposed by the service, and in the <bpt id="p1">**</bpt>Services<ept id="p1">**</ept> list there are items representing the entities exposed by the Northwind data service.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the service reference is added, classes will be generated for these entities and they can be used in the client code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The examples in this topic use these classes and the <ph id="ph1">`NorthwindEntities`</ph> class to perform the queries.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Generating the Data Service Client Library (WCF Data Services)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=191611)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Using Asynchronous Methods</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To address possible latency issues that may occur when accessing resources over the Web, we recommend accessing WCF Data Services asynchronously.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The WCF Data Services client libraries include asynchronous methods for invoking queries, and <ph id="ph1">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph> provides the <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> class for authoring asynchronous activities.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> derived activities can be written to take advantage of <ph id="ph2">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> classes that have asynchronous methods, or the code to be executed asynchronously can be put into a method and invoked by using a delegate.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This section provides two examples of an <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> derived activity; one that uses the asynchronous methods of the WCF Data Services client libraries and one that uses a delegate.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Operations (WCF Data Services)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=193396)</ept> and <bpt id="p2">[</bpt>Creating Asynchronous Activities<ept id="p2">](../../../docs/framework/windows-workflow-foundation/creating-asynchronous-activities-in-wf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using Client Library Asynchronous Methods</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Services.Client.DataServiceQuery%601&gt;</ph> class provides <ph id="ph2">&lt;xref:System.Data.Services.Client.DataServiceQuery%601.BeginExecute%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.Services.Client.DataServiceQuery%601.EndExecute%2A&gt;</ph> methods for querying an OData service asynchronously.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These methods can be called from the <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity.EndExecute%2A&gt;</ph> overrides of an <ph id="ph3">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> derived class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph> override returns, the workflow can go idle (but not persist), and when the asynchronous work is completed, <ph id="ph3">&lt;xref:System.Activities.AsyncCodeActivity.EndExecute%2A&gt;</ph> is invoked by the runtime.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the following example, an <ph id="ph1">`OrdersByCustomer`</ph> activity is defined that has two input arguments.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CustomerId`</ph> argument represents the customer who identifies which orders to return, and the <ph id="ph2">`ServiceUri`</ph> argument represents the URI of the OData service to be queried.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Because the activity derives from <ph id="ph1">`AsyncCodeActivity&lt;IEnumerable&lt;Order&gt;&gt;`</ph> there is also a <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument that is used to return the results of the query.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph> override creates a LINQ query that selects all orders of the specified customer.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This query is specified as the <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivityContext.UserState%2A&gt;</ph> of the passed <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivityContext&gt;</ph>, and then the query's <ph id="ph3">&lt;xref:System.Data.Services.Client.DataServiceQuery%601.BeginExecute%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Note that the callback and state that are passed into the query's <ph id="ph1">&lt;xref:System.Data.Services.Client.DataServiceQuery%601.BeginExecute%2A&gt;</ph> are the ones that are passed in to the activity's <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When the query has finished executing, the activity's <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity.EndExecute%2A&gt;</ph> method is invoked.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The query is retrieved from the <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivityContext.UserState%2A&gt;</ph>, and then the query's <ph id="ph2">&lt;xref:System.Data.Services.Client.DataServiceQuery%601.EndExecute%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This method returns an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of the specified entity type; in this case <ph id="ph2">`Order`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">`IEnumerable&lt;Order&gt;`</ph> is the generic type of the <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity%601&gt;</ph>, this <ph id="ph3">`IEnumerable`</ph> is set as the <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> <ph id="ph5">&lt;xref:System.Activities.OutArgument%601&gt;</ph> of the activity.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`OrdersByCustomer`</ph> activity retrieves a list of orders for the specified customer, and then a <ph id="ph2">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity enumerates the returned orders and writes the date of each order to the console.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When this workflow is invoked, the following data is written to the console:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Calling WCF Data Service...<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>8/25/1997<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>10/3/1997<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>10/13/1997<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>1/15/1998<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>3/16/1998<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>4/9/1998<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a connection to the OData server cannot be established, you will get an exception similar to the following exception:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Unhandled Exception: System.InvalidOperationException: An error occurred while processing this request.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>---&gt; System.Net.WebException: Unable to connect to the remote server ---&gt; System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If any additional processing of the data returned by the query is required, it can be done in the activity's <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity%601.EndExecute%2A&gt;</ph> override.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity%601.BeginExecute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity%601.EndExecute%2A&gt;</ph> are invoked by using the workflow thread, and any code in these overrides does not run asynchronously.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the additional processing is extensive or long-running, or the query results are paged, you should consider the approach discussed in the next section, which uses a delegate to execute the query and perform additional processing asynchronously.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Using a Delegate</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In addition to invoking the asynchronous method of a <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> class, an <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>-based activity can also define the asynchronous logic in one of its methods.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This method is specified by using a delegate in the activity's <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph> override.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When the method returns, the runtime invokes the activity's <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity.EndExecute%2A&gt;</ph> override.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When calling an OData service from a workflow, this method can be used to query the service and provide any additional processing.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">`ListCustomers`</ph> activity is defined.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This activity queries the sample Northwind data service and returns a <ph id="ph1">`List&lt;Customer&gt;`</ph> that contains all of the customers in the Northwind database.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The asynchronous work is performed by the <ph id="ph1">`GetCustomers`</ph> method.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This method queries the service for all customers, and then copies them into a <ph id="ph1">`List&lt;Customer&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It then checks to see if the results are paged.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If so, it queries the service for the next page of results, adds them to the list, and continues until all of the customer data has been retrieved.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph>paging in WCF Data Services, see .</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Load Paged Results (WCF Data Services)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=193452)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Once all customers are added, the list is returned.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetCustomers`</ph> method is specified in the activity's <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph> override.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Since the method has a return value, a <ph id="ph1">`Func&lt;string, List&lt;Customer&gt;&gt;`</ph> is created to specify the method.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the method that performs the asynchronous work does not have a return value, an <ph id="ph1">&lt;xref:System.Action&gt;</ph> is used instead of a <ph id="ph2">&lt;!--zz &lt;xref:System.Func&gt; --&gt;</ph> <ph id="ph3">`System.Func`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For examples of creating an asynchronous example using both approaches, see <bpt id="p1">[</bpt>Creating Asynchronous Activities<ept id="p1">](../../../docs/framework/windows-workflow-foundation/creating-asynchronous-activities-in-wf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;!--zz &lt;xref:System.Func&gt; --&gt;</ph> <ph id="ph2">`System.Func`</ph> is assigned to the <ph id="ph3">&lt;xref:System.Activities.AsyncCodeActivityContext.UserState%2A&gt;</ph>, and then <ph id="ph4">`BeginInvoke`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Since the method to be invoked does not have access to the activity's environment of arguments, the value of the <ph id="ph1">`ServiceUri`</ph> argument is passed as the first parameter, together with the callback and state that were passed into <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`GetCustomers`</ph> returns, the runtime invokes <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity.EndExecute%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The code in <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity.EndExecute%2A&gt;</ph> retrieves the delegate from the <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivityContext.UserState%2A&gt;</ph>, calls <ph id="ph3">`EndInvoke`</ph>, and returns the result, which is the list of customers returned from the <ph id="ph4">`GetCustomers`</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`ListCustomers`</ph> activity retrieves a list of customers, and then a <ph id="ph2">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity enumerates them and writes the company name and contact name of each customer to the console.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>When this workflow is invoked, the following data is written to the console.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Since this query returns many customers, only part of the output is displayed here.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Calling WCF Data Service...<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Alfreds Futterkiste, Contact: Maria Anders<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ana Trujillo Emparedados y helados, Contact: Ana Trujillo<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Antonio Moreno Taquería, Contact: Antonio Moreno<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Around the Horn, Contact: Thomas Hardy<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Berglunds snabbköp, Contact: Christina Berglund<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>...<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Consuming an OData Feed Without Using the Client Libraries</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>OData exposes data as resources that are addressable by URIs.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you use the client libraries these URIs are created for you, but you do not have to use the client libraries.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If desired, OData services can be accessed directly without using the client libraries.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When not using the client libraries the location of the service and the desired data are specified by the URI and the results are returned in the response to the HTTP request.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This raw data can then be processed or manipulated in the desired manner.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>One way to retrieve the results of an OData query is by using the <ph id="ph1">&lt;xref:System.Net.WebClient&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In this example, the contact name for the customer represented by the key ALFKI is retrieved.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When this code is run, the following output is displayed to the console:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Raw data returned:<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>ContactName xmlns="http://schemas.microsoft.com/ado/2007/08/dataservices"&gt;Maria Anders<ph id="ph2">\&lt;</ph>/ContactName&gt;<ept id="p1">**</ept>  In a workflow, the code from this example could be incorporated into the <ph id="ph3">&lt;xref:System.Activities.CodeActivity.Execute%2A&gt;</ph> override of a <ph id="ph4">&lt;xref:System.Activities.CodeActivity&gt;</ph>-based custom activity, but the same functionality can also be accomplished by using the <ph id="ph5">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> activity enables workflow authors to invoke static and instance methods of a class, and also has an option to invoke the specified method asynchronously.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In the following example, an <ph id="ph1">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> activity is configured to call the <ph id="ph2">&lt;xref:System.Net.WebClient.DownloadString%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Net.WebClient&gt;</ph> class and return a list of customers.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> can call both static and instance methods of a class.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">&lt;xref:System.Net.WebClient.DownloadString%2A&gt;</ph> is an instance method of the <ph id="ph2">&lt;xref:System.Net.WebClient&gt;</ph> class, a new instance of the <ph id="ph3">&lt;xref:System.Net.WebClient&gt;</ph> class is specified for the <ph id="ph4">&lt;xref:System.Activities.Expressions.InvokeMethod%601.TargetObject%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DownloadString`</ph> is specified as the <ph id="ph2">&lt;xref:System.Activities.Expressions.InvokeMethod%601.MethodName%2A&gt;</ph>, the URI that contains the query is specified in the <ph id="ph3">&lt;xref:System.Activities.Expressions.InvokeMethod%601.Parameters%2A&gt;</ph> collection, and the return value is assigned to the <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Expressions.InvokeMethod%601.RunAsynchronously%2A&gt;</ph> value is set to <ph id="ph2">`true`</ph>, which means that the method invocation will run asynchronously with regard to the workflow.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the following example, a workflow is constructed that uses the <ph id="ph1">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> activity to query the sample Northwind data service for a list of orders for a specific customer, and then the returned data is written to the console.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When this workflow is invoked, the following output is displayed to the console.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Since this query returns several orders, only part of the output is displayed here.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Calling WCF Data Service...<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Raw data returned:<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>feed<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xml:base="http://services.odata.org/Northwind/Northwind.svc/"<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices"<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xmlns="http://www.w3.org/2005/Atom"&gt;<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>title type="text"&gt;Orders<ph id="ph2">\&lt;</ph>/title&gt;<ept id="p1">**</ept><ph id="ph3"> </ph></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>id&gt;http://services.odata.org/Northwind/Northwind.svc/Customers('ALFKI')/Orders<ph id="ph2">\&lt;</ph>/id&gt;<ept id="p1">**</ept><ph id="ph3"> </ph></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>updated&gt;2010-05-19T19:37:07Z<ph id="ph2">\&lt;</ph>/updated&gt;<ept id="p1">**</ept><ph id="ph3"> </ph></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>link rel="self" title="Orders" href="Orders" /&gt;<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>entry&gt;<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>id&gt;http://services.odata.org/Northwind/Northwind.svc/Orders(10643)<ph id="ph2">\&lt;</ph>/id&gt;<ept id="p1">**</ept><ph id="ph3"> </ph></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>title type="text"&gt;<ph id="ph2">\&lt;</ph>/title&gt;<ept id="p1">**</ept><ph id="ph3"> </ph></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>updated&gt;2010-05-19T19:37:07Z<ph id="ph2">\&lt;</ph>/updated&gt;<ept id="p1">**</ept><ph id="ph3"> </ph></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>author&gt;<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>name /&gt;<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>/author&gt;<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>link rel="edit" title="Order" href="Orders(10643)" /&gt;<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>link rel="http://schemas.microsoft.com/ado/2007/08/dataservices/related/Customer"<ept id="p1">**</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>type="application/atom+xml;type=entry" title="Customer" href="Orders(10643)/Customer" /&gt;<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>...<ept id="p1">**</ept>  This example provides one method that workflow application authors can use to consume the raw data returned from an OData service.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> accessing WCF Data Services using URIs, see <bpt id="p1">[</bpt>Accessing Data Service Resources (WCF Data Services)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=193397)</ept> and <bpt id="p2">[</bpt>OData: URI Conventions<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=185564)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>