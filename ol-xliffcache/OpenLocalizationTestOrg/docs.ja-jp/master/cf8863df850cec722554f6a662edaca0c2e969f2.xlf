<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="timing-events-overview.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf8863df850cec722554f6a662edaca0c2e969f2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\timing-events-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffacc364c6a38a874ca61acf4e46a37fe26f11f3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b78fe35af6d5cc51a8f3177dd36b98edc8e1b7f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Timing Events Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Timing Events Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to use the five timing events available on              <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> and              <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To understand this topic, you should understand how to create and use animations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To get started with animation, see the                  <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are multiple ways to animate properties in                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Using storyboard objects<ept id="p1">**</ept> (markup and code): You can use                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects to arrange and distribute animations to one or more objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For an example, see                          <bpt id="p1">[</bpt>Animate a Property by Using a Storyboard<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-animate-a-property-by-using-a-storyboard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Using local animations<ept id="p1">**</ept> (code only): You can apply                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph> objects directly to the properties they animate.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For an example, see                          <bpt id="p1">[</bpt>Animate a Property Without Using a Storyboard<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-animate-a-property-without-using-a-storyboard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Using clocks<ept id="p1">**</ept> (code only): You can explicitly manage clock creation and distribute the animation clocks yourself.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For an example, see                          <bpt id="p1">[</bpt>Animate a Property by Using an AnimationClock<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-animate-a-property-by-using-an-animationclock.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because you can use them in markup and code, the examples in this overview use                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, the concepts described can be applied to the other methods of animating properties.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>What is a clock?</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A timeline, by itself, doesn't actually do anything other than describe a segment of time.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It's the timeline's                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> object that does the real work: it maintains timing-related run-time state for the timeline.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In most cases, such as when using storyboards, a clock is created automatically for your timeline.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also create a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> explicitly by using the                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.CreateClock%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information about                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects, see the                          <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Why Use Events?</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With the exception of one (seek aligned to last tick), all interactive timing operations are asynchronous.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>There is no way for you to know exactly when they will execute.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That can be a problem when you have other code that's dependent upon your timing operation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Suppose that you wanted to stop a timeline that animated a rectangle.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After the timeline stops, you change the color of the rectangle.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>events_procedural#NeedForEventsFragment<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/events_procedural/CSharp/EventExample.cs#needforeventsfragment)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>events_procedural#NeedForEventsFragment<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/events_procedural/VisualBasic/EventExample.vb#needforeventsfragment)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the previous example, the second line of code might execute before the storyboard stops.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>That's because stopping is an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Telling a timeline or clock to stop creates a "stop request" of sorts that isn't processed until the timing engine's next tick.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To execute commands after a timeline completes, use timing events.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the following example, an event handler is used to change the color of a rectangle after the storyboard stops playing.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>events_procedural#RegisterForStoryboardCurrentStateInvalidatedEvent<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/events_procedural/CSharp/EventExample.cs#registerforstoryboardcurrentstateinvalidatedevent)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>events_procedural#RegisterForStoryboardCurrentStateInvalidatedEvent<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/events_procedural/VisualBasic/EventExample.vb#registerforstoryboardcurrentstateinvalidatedevent)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>events_procedural#StoryboardCurrentStateInvalidatedEvent2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/events_procedural/CSharp/EventExample.cs#storyboardcurrentstateinvalidatedevent2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>events_procedural#StoryboardCurrentStateInvalidatedEvent2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/events_procedural/VisualBasic/EventExample.vb#storyboardcurrentstateinvalidatedevent2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For a more complete example, see                  <bpt id="p1">[</bpt>Receive Notification When a Clock's State Changes<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-receive-notification-when-clock-state-changes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Public Events</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> classes both provide five timing events.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following table lists these events and the conditions that trigger them.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Event</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Triggering interactive operation</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Other triggers</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Completed<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Skip to fill</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The clock completes.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CurrentGlobalSpeedInvalidated<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Pause, resume, seek, set speed ratio, skip to fill, stop</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The clock reverses, accelerates, starts, or stops.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CurrentStateInvalidated<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Begin, skip to fill, stop</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The clock starts, stops, or fills.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CurrentTimeInvalidated<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Begin, seek, skip to fill, stop</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The clock progresses.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RemoveRequested<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Remove</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Ticking and Event Consolidation</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When you animate objects in                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, it’s the timing engine that manages your animations.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The timing engine tracks the progression of time and computes the state of each animation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It makes many such evaluation passes in a second.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These evaluation passes are known as "ticks."</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>While ticks occur frequently, it's possible for a lot of things to happen between ticks.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, a timeline might be stopped, started, and stopped again, in which case its current state will have changed three times.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In theory, the event could be raised multiple times in a single tick; however, the timing engine consolidates events, so that each event can be raised at most once per tick.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Registering for Events</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>There are two ways to register for timing events: you can register with the timeline or with the clock created from the timeline.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Registering for an event directly with a clock is fairly straightforward, although it can only be done from code.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can register for events with a timeline from markup or code.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The next section describes how to register for clock events with a timeline.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Registering for Clock Events with a Timeline</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Although a timeline's                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Completed&gt;</ph>,                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated&gt;</ph>,                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated&gt;</ph>,                  <ph id="ph4">&lt;xref:System.Windows.Media.Animation.Timeline.CurrentTimeInvalidated&gt;</ph>, and                  <ph id="ph5">&lt;xref:System.Windows.Media.Animation.Timeline.RemoveRequested&gt;</ph> events appear to be associated with the timeline, registering for these events actually associates an event handler with the                  <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> created for the timeline.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When you register for the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Completed&gt;</ph> event on a timeline, for example, you're actually telling the system to register for the                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event of each clock that is created for the timeline.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In code, you must register for this event before the                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> is created for this timeline; otherwise, you won't receive notification.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This happens automatically in                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>; the parser automatically registers for the event before the                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> is created.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Timing Behaviors Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/timing-behaviors-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>