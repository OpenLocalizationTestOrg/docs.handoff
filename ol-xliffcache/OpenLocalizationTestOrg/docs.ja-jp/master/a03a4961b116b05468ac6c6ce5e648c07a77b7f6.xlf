<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="packages.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a03a4961b116b05468ac6c6ce5e648c07a77b7f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\packages.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d407ad30894050d6b1e6da56d12c730dcf23716b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">961972cc59833d2a340fe965816323c0d1b5a38a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Packages, metapackages and frameworks - .NET Core</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn terminology for packages, metapackages, and frameworks.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Packages, metapackages and frameworks</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core is a platform made of NuGet packages.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Some product experiences benefit from fine-grained definition of packages while others from coarse-grained.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To accommodate this duality, the product is distributed as a fine-grained set of packages and in coarser chunks with a package type informally called a <bpt id="p1">[</bpt>metapackage<ept id="p1">](#metapackages)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each of the .NET Core packages support being run on multiple .NET implementations, represented as frameworks.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Some of those frameworks are traditional frameworks, like <ph id="ph1">`net46`</ph>, representing the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Another set is new frameworks that can be thought of as "package-based frameworks", which establish a new model for defining frameworks.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These package-based frameworks are entirely formed and defined as packages, forming a strong relationship between packages and frameworks.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Packages</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>.NET Core is split into a set of packages, which provide primitives, higher-level data types, app composition types and common utilities.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each of these packages represent a single assembly of the same name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> contains System.Runtime.dll.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are advantages to defining packages in a fine-grained manner:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can ship on their own schedule with relatively limited testing of other packages.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can provide differing OS and CPU support.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can have dependencies specific to only one library.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Apps are smaller because unreferenced packages don't become part of the app distribution.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Some of these benefits are only used in certain circumstances.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, NET Core packages will typically ship on the same schedule with the same platform support.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the case of servicing, fixes can be distributed and installed as small single package updates.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Due to the narrow scope of change, the validation and time to make a fix available is limited to what is needed for a single library.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following is a list of the key NuGet packages for .NET Core:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> - The most fundamental .NET Core package, including <ph id="ph1">&lt;xref:System.Object&gt;</ph>, <ph id="ph2">&lt;xref:System.String&gt;</ph>, <ph id="ph3">&lt;xref:System.Array&gt;</ph>, <ph id="ph4">&lt;xref:System.Action&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://www.nuget.org/packages/System.Collections)</ept> - A set of (primarily) generic collections, including <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http)</ept> - A set of types for HTTP network communication, including <ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Http.HttpResponseMessage&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> - A set of types for reading and writing to local or networked disk-based storage, including <ph id="ph1">&lt;xref:System.IO.File&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Directory&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Linq<ept id="p1">](https://www.nuget.org/packages/System.Linq)</ept> - A set of types for querying objects, including <ph id="ph1">`Enumerable`</ph> and <ph id="ph2">&lt;xref:System.Linq.ILookup%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://www.nuget.org/packages/System.Reflection)</ept> - A set of types for loading, inspecting, and activating types, including <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.TypeInfo&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Typically, rather than including each package, it's easier and more robust to include a <bpt id="p1">[</bpt>metapackage<ept id="p1">](#metapackages)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, when you need a single package, you can include it as in the following example, which references the <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime/)</ept> package.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Metapackages</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Metapackages are a NuGet package convention for describing a set of packages that are meaningful together.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>They represent this set of packages by making them dependencies.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>They can optionally establish a framework for this set of packages by specifying a framework.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Previous versions of the .NET Core tools (both project.json and csproj-based tools) by default specified both a framework and a metapackage.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Currently, however, the metapackage is implicitly referenced by the target framework, so that each metapackage is tied to a target framework.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`netstandard1.6`</ph> framework references the NetStandard.Library version 1.6.0 metapackage.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Similarly, the <ph id="ph1">`netcoreapp2.1`</ph> framework references the Microsoft.NETCore.App Version 2.1.0 metapackage.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implicit metapackage package reference in the .NET Core SDK<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/1.0/sdk/1.0-rc3-implicit-package-refs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Targeting a framework and implicitly referencing a metapackage means that you in effect are adding a reference to each of its dependent packages as a single gesture.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>That makes all of the libraries in those packages available for IntelliSense (or similar experience) and for publishing your app.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>There are advantages to using metapackages:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Provides a convenient user experience to reference a large set of fine-grained packages.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Defines a set of packages (including specific versions) that are tested and work well together.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The .NET Standard metapackage is:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> - Describes the libraries that are part of the ".NET Standard".</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Applies to all .NET implementations (for example, .NET Framework, .NET Core and Mono) that support .NET Standard.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Establishes the 'netstandard' framework.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The key .NET Core metapackages are:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.NETCore.App<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> - Describes the libraries that are part of the .NET Core distribution.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Establishes the <bpt id="p1">[</bpt><ph id="ph1">`.NETCoreApp`</ph> framework<ept id="p1">](https://github.com/dotnet/core-setup/blob/release/1.1.0/pkg/projects/Microsoft.NETCore.App/Microsoft.NETCore.App.pkgproj)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Depends on the smaller <ph id="ph1">`NETStandard.Library`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.AspNetCore.App<ept id="p1">](https://www.nuget.org/packages/Microsoft.AspNetCore.App)</ept> - Includes all the supported packages from ASP.NET Core and Entity Framework Core except those that contain third-party dependencies.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Microsoft.AspNetCore.App metapackage for ASP.NET Core<ept id="p1">](/aspnet/core/fundamentals/metapackage)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.AspNetCore.All<ept id="p1">](https://www.nuget.org/packages/Microsoft.AspNetCore.All)</ept> - Includes all the supported packages from ASP.NET Core, Entity Framework Core, and internal and third-party dependencies used by ASP.NET Core and Entity Framework Core.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Microsoft.AspNetCore.All metapackage for ASP.NET Core 2.x<ept id="p1">](/aspnet/core/fundamentals/metapackage)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.NETCore.Portable.Compatibility<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> - A set of compatibility facades that enable mscorlib-based Portable Class Libraries (PCLs) to run on .NET Core.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>.NET Core packages each support a set of runtime frameworks.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Frameworks describe an available API set (and potentially other characteristics) that you can rely on when you target a given framework.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>They are versioned as new APIs are added.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> supports the following frameworks:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>.NETFramework,Version=4.6</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>.NETStandard,Version=1.3</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>6 Xamarin platforms (for example, xamarinios10)</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It is useful to contrast the first two of these frameworks, since they are examples of the two different ways that frameworks are defined.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.NETFramework,Version=4.6`</ph> framework represents the available APIs in the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can produce libraries  compiled with the .NET Framework 4.6 reference assemblies and then distribute those libraries in NuGet packages in a net46 lib folder.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It will be used for apps that target the .NET Framework 4.6 or that are compatible with it.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This is how all frameworks have traditionally worked.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.NETStandard,Version=1.3`</ph> framework is a package-based framework.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It relies on packages that target the framework to define and expose APIs in terms of the framework.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Package-based frameworks</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>There is a two-way relationship between frameworks and packages.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The first part is defining the APIs available for a given framework, for example <ph id="ph1">`netstandard1.3`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Packages that target <ph id="ph1">`netstandard1.3`</ph> (or compatible frameworks, like <ph id="ph2">`netstandard1.0`</ph>) define the APIs available for <ph id="ph3">`netstandard1.3`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>That may sound like a circular definition, but it isn't.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>By virtue of being "package-based", the API definition for the framework comes from packages.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The framework itself doesn't define any APIs.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The second part of the relationship is asset selection.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Packages can contain assets for multiple frameworks.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Given a reference to a set of packages and/or metapackages, the framework is needed to determine which asset should be selected, for example <ph id="ph1">`net46`</ph> or <ph id="ph2">`netstandard1.3`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>It is important to select the correct asset.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`net46`</ph> asset is not likely to be compatible with .NET Framework 4.0 or .NET Core 1.0.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can see this relationship in the following image.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>API<ept id="p1">*</ept> targets and defines the <bpt id="p2">*</bpt>framework<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>framework<ept id="p1">*</ept> is used for <bpt id="p2">*</bpt>asset selection<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>asset<ept id="p1">*</ept> gives you the API.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Package-based Framework Composition</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The two primary package-based frameworks used with .NET Core are:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>.NET Standard</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The .NET Standard (<bpt id="p1">[</bpt>Target Framework Moniker<ept id="p1">](../standard/frameworks.md)</ept>: <ph id="ph1">`netstandard`</ph>) framework represents the APIs defined by and built on top of the <bpt id="p2">[</bpt>.NET Standard<ept id="p2">](../standard/net-standard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Libraries that are intended to run on multiple runtimes should target this framework.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>They will be supported on any .NET Standard compliant runtime, such as .NET Core, .NET Framework and Mono/Xamarin.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Each of these runtimes supports a set of .NET Standard versions, depending on which APIs they implement.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`netstandard`</ph> framework implicitly references the <bpt id="p1">[</bpt><ph id="ph2">`NETStandard.Library`</ph><ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> metapackage.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For example, the following MSBuild project file indicates that the project targets <ph id="ph1">`netstandard1.6`</ph>, which references the <bpt id="p1">[</bpt><ph id="ph2">`NETStandard.Library`</ph> version 1.6<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library/1.6.0)</ept> metapackage.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>However, the framework and metapackage references in the project file do not need to match, and you can use the <ph id="ph1">`&lt;NetStandardImplicitPackageVersion&gt;`</ph> element in your project file to specify a framework version that is lower than the metapackage version.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For example, the following project file is valid.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>It may seem strange to target <ph id="ph1">`netstandard1.3`</ph> but use the 1.6.0 version of <ph id="ph2">`NETStandard.Library`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>It is a valid use-case, since the metapackage maintains support for older <ph id="ph1">`netstandard`</ph> versions.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It could be the case you've standardized on the 1.6.0 version of the metapackage and use it for all your libraries, which target a variety of <ph id="ph1">`netstandard`</ph> versions.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>With this approach, you only need to restore <ph id="ph1">`NETStandard.Library`</ph> 1.6.0 and not earlier versions.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The reverse would not be valid: targeting <ph id="ph1">`netstandard1.6`</ph> with the 1.3.0 version of <ph id="ph2">`NETStandard.Library`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You cannot target a higher framework with a lower metapackage, since the lower version metapackage will not expose any assets for that higher framework.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The versioning scheme for metapackages asserts that metapackages match the highest version of the framework they describe.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>By virtue of the versioning scheme, the first version of <ph id="ph1">`NETStandard.Library`</ph> is v1.6.0 given that it contains <ph id="ph2">`netstandard1.6`</ph> assets.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>v1.3.0 is used in the example above, for symmetry with the example above, but does not actually exist.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>.NET Core application</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The .NET Core (<bpt id="p1">[</bpt>Target Framework Moniker<ept id="p1">](../standard/frameworks.md)</ept>: <ph id="ph1">`netcoreapp`</ph>) framework represents the packages and associated APIs that come with the .NET Core distribution and the console application model that it provides.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>.NET Core apps must use this framework, due to targeting the console application model, as should libraries that intended to run only on .NET Core.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Using this framework restricts apps and libraries to running only on .NET Core.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage targets the <ph id="ph2">`netcoreapp`</ph> framework.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>It provides access to ~60 libraries, ~40 provided by the <ph id="ph1">`NETStandard.Library`</ph> package and ~20 more in addition.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can reference additional libraries that target <ph id="ph1">`netcoreapp`</ph> or compatible frameworks, such as <ph id="ph2">`netstandard`</ph>, to get access to additional APIs.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Most of the additional libraries provided by <ph id="ph1">`Microsoft.NETCore.App`</ph> also target <ph id="ph2">`netstandard`</ph> given that their dependencies are satisfied by other <ph id="ph3">`netstandard`</ph> libraries.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>That means that <ph id="ph1">`netstandard`</ph> libraries can also reference those packages as dependencies.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>