{"content":"---\ntitle: \"How to: Initialize Objects by Using an Object Initializer - C# Programming Guide\"\nms.custom: seodec18\nms.date: 12/20/2018\nhelpviewer_keywords: \n  - \"object initializers [C#], how to use\"\n  - \"objects [C#], initializing\"\nms.assetid: 4b75ebb2-2e29-43de-929c-d736a8f27ce6\n---\n# How to: Initialize Objects by Using an Object Initializer (C# Programming Guide)\n\nYou can use object initializers to initialize type objects in a declarative manner without explicitly invoking a constructor for the type.  \n  \nThe following examples show how to use object initializers with named objects. The compiler processes object initializers by first accessing the default instance constructor and then processing the member initializations. Therefore, if the default constructor is declared as `private` in the class, object initializers that require public access will fail.\n  \nYou must use an object initializer if you're defining an anonymous type. For more information, see [How to: Return Subsets of Element Properties in a Query](how-to-return-subsets-of-element-properties-in-a-query.md).  \n  \n## Example  \n\nThe following example shows how to initialize a new `StudentName` type by using object initializers. This example sets properties in the `StudentName` type:\n  \n[!code-csharp-interactive[InitializerObjectExample](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/object-collection-initializers/HowToObjectInitializers.cs#HowToObjectInitializers)]  \n\nObject initializers can be used to set indexers in an object. The following example defines a `BaseballTeam` class that uses an indexer to get and set players at different positions. The initializer can assign players, based on the abbreviation for the position, or the number used for each position baseball scorecards:\n\n[!code-csharp-interactive[InitializerIndexerExample](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/object-collection-initializers/HowToIndexInitializer.cs#HowToIndexInitializer)]  \n\n## See also\n\n- [C# Programming Guide](../index.md)\n- [Object and Collection Initializers](object-and-collection-initializers.md)\n","nodes":[{"pos":[4,280],"embed":true,"restype":"x-metadata","content":"title: \"How to: Initialize Objects by Using an Object Initializer - C# Programming Guide\"\nms.custom: seodec18\nms.date: 12/20/2018\nhelpviewer_keywords: \n  - \"object initializers [C#], how to use\"\n  - \"objects [C#], initializing\"\nms.assetid: 4b75ebb2-2e29-43de-929c-d736a8f27ce6","nodes":[{"content":"How to: Initialize Objects by Using an Object Initializer - C# Programming Guide","nodes":[{"pos":[0,80],"content":"How to: Initialize Objects by Using an Object Initializer - C# Programming Guide","nodes":[{"content":"How to: Initialize Objects by Using an Object Initializer - C# Programming Guide","pos":[0,80]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[287,367],"content":"How to: Initialize Objects by Using an Object Initializer (C# Programming Guide)","linkify":"How to: Initialize Objects by Using an Object Initializer (C# Programming Guide)","nodes":[{"content":"How to: Initialize Objects by Using an Object Initializer (C# Programming Guide)","pos":[0,80]}]},{"content":"You can use object initializers to initialize type objects in a declarative manner without explicitly invoking a constructor for the type.","pos":[369,507]},{"content":"The following examples show how to use object initializers with named objects.","pos":[513,591]},{"content":"The compiler processes object initializers by first accessing the default instance constructor and then processing the member initializations.","pos":[592,734]},{"content":"Therefore, if the default constructor is declared as <ph id=\"ph1\">`private`</ph> in the class, object initializers that require public access will fail.","pos":[735,869],"source":" Therefore, if the default constructor is declared as `private` in the class, object initializers that require public access will fail."},{"content":"You must use an object initializer if you're defining an anonymous type.","pos":[873,945]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Return Subsets of Element Properties in a Query<ept id=\"p1\">](how-to-return-subsets-of-element-properties-in-a-query.md)</ept>.","pos":[946,1089],"source":" For more information, see [How to: Return Subsets of Element Properties in a Query](how-to-return-subsets-of-element-properties-in-a-query.md)."},{"pos":[1098,1105],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to initialize a new <ph id=\"ph1\">`StudentName`</ph> type by using object initializers.","pos":[1109,1209],"source":"The following example shows how to initialize a new `StudentName` type by using object initializers."},{"content":"This example sets properties in the <ph id=\"ph1\">`StudentName`</ph> type:","pos":[1210,1265],"source":" This example sets properties in the `StudentName` type:"},{"content":"Object initializers can be used to set indexers in an object.","pos":[1482,1543]},{"content":"The following example defines a <ph id=\"ph1\">`BaseballTeam`</ph> class that uses an indexer to get and set players at different positions.","pos":[1544,1664],"source":" The following example defines a `BaseballTeam` class that uses an indexer to get and set players at different positions."},{"content":"The initializer can assign players, based on the abbreviation for the position, or the number used for each position baseball scorecards:","pos":[1665,1802]},{"pos":[2017,2025],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2029,2064],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../index.md)</ept>","source":"[C# Programming Guide](../index.md)"},{"pos":[2067,2142],"content":"<bpt id=\"p1\">[</bpt>Object and Collection Initializers<ept id=\"p1\">](object-and-collection-initializers.md)</ept>","source":"[Object and Collection Initializers](object-and-collection-initializers.md)"}]}