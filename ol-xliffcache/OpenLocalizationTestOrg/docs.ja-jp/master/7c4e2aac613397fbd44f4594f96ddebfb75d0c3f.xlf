<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-type-dynamic.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c4e2aac613397fbd44f4594f96ddebfb75d0c3f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\types\using-type-dynamic.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7028476491bfeec59031cb5a3c872ceb19adbf2a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55d03f53c6336ce2b7b935262e7712c3b2bfac20</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using type dynamic - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using type dynamic (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[csharp_dev10_long](~/includes/csharp-dev10-long-md.md)]</ph> introduces a new type, <ph id="ph2">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The type is a static type, but an object of type <ph id="ph1">`dynamic`</ph> bypasses static type checking.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In most cases, it functions like it has type <ph id="ph1">`object`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>At compile time, an element that is typed as <ph id="ph1">`dynamic`</ph> is assumed to support any operation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Therefore, you do not have to be concerned about whether the object gets its value from a COM API, from a dynamic language such as IronPython, from the HTML Document Object Model (DOM), from reflection, or from somewhere else in the program.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, if the code is not valid, errors are caught at run time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, if instance method <ph id="ph1">`exampleMethod1`</ph> in the following code has only one parameter, the compiler recognizes that the first call to the method, <ph id="ph2">`ec.exampleMethod1(10, 4)`</ph>, is not valid because it contains two arguments.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The call causes a compiler error.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The second call to the method, <ph id="ph1">`dynamic_ec.exampleMethod1(10, 4)`</ph>, is not checked by the compiler because the type of <ph id="ph2">`dynamic_ec`</ph> is <ph id="ph3">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Therefore, no compiler error is reported.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, the error does not escape notice indefinitely.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is caught at run time and causes a run-time exception.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The role of the compiler in these examples is to package together information about what each statement is proposing to do to the object or expression that is typed as <ph id="ph1">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>At run time, the stored information is examined, and any statement that is not valid causes a run-time exception.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The result of most dynamic operations is itself <ph id="ph1">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, if you rest the mouse pointer over the use of <ph id="ph1">`testSum`</ph> in the following example, IntelliSense displays the type <bpt id="p1">**</bpt>(local variable) dynamic testSum<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Operations in which the result is not <ph id="ph1">`dynamic`</ph> include:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Conversions from <ph id="ph1">`dynamic`</ph> to another type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Constructor calls that include arguments of type <ph id="ph1">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, the type of <ph id="ph1">`testInstance`</ph> in the following declaration is <ph id="ph2">`ExampleClass`</ph>, not <ph id="ph3">`dynamic`</ph>:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Conversion examples are shown in the following section, "Conversions."</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Conversions</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Conversions between dynamic objects and other types are easy.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This enables the developer to switch between dynamic and non-dynamic behavior.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any object can be converted to dynamic type implicitly, as shown in the following examples.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Conversely, an implicit conversion can be dynamically applied to any expression of type <ph id="ph1">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Overload resolution with arguments of type dynamic</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Overload resolution occurs at run time instead of at compile time if one or more of the arguments in a method call have the type <ph id="ph1">`dynamic`</ph>, or if the receiver of the method call is of type <ph id="ph2">`dynamic`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the following example, if the only accessible <ph id="ph1">`exampleMethod2`</ph> method is defined to take a string argument, sending <ph id="ph2">`d1`</ph> as the argument does not cause a compiler error, but it does cause a run-time exception.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Overload resolution fails at run time because the run-time type of <ph id="ph1">`d1`</ph> is <ph id="ph2">`int`</ph>, and <ph id="ph3">`exampleMethod2`</ph> requires a string.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Dynamic language runtime</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The dynamic language runtime (DLR) is a new API in <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It provides the infrastructure that supports the <ph id="ph1">`dynamic`</ph> type in C#, and also the implementation of dynamic programming languages such as IronPython and IronRuby.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information about the DLR, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](../../../framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>COM interop</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[csharp_dev10_long](~/includes/csharp-dev10-long-md.md)]</ph> includes several features that improve the experience of interoperating with COM APIs such as the Office Automation APIs.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Among the improvements are the use of the <ph id="ph1">`dynamic`</ph> type, and of <bpt id="p1">[</bpt>named and optional arguments<ept id="p1">](../classes-and-structs/named-and-optional-arguments.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Many COM methods allow for variation in argument types and return type by designating the types as <ph id="ph1">`object`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This has necessitated explicit casting of the values to coordinate with strongly typed variables in C#.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you compile by using the <bpt id="p1">[</bpt>/link (C# Compiler Options)<ept id="p1">](../../../csharp/language-reference/compiler-options/link-compiler-option.md)</ept> option, the introduction of the <ph id="ph1">`dynamic`</ph> type enables you to treat the occurrences of <ph id="ph2">`object`</ph> in COM signatures as if they were of type <ph id="ph3">`dynamic`</ph>, and thereby to avoid much of the casting.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, the following statements contrast how you access a cell in a Microsoft Office Excel spreadsheet with the <ph id="ph1">`dynamic`</ph> type and without the <ph id="ph2">`dynamic`</ph> type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Related topics</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dynamic<ept id="p1">](../../language-reference/keywords/dynamic.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Describes the usage of the <ph id="ph1">`dynamic`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](../../../framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Provides an overview of the DLR, which is a runtime environment that adds a set of services for dynamic languages to the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Creating and Using Dynamic Objects<ept id="p1">](walkthrough-creating-and-using-dynamic-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Provides step-by-step instructions for creating a custom dynamic object and for creating a project that accesses an <ph id="ph1">`IronPython`</ph> library.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Access Office Interop Objects by Using Visual C# Features<ept id="p1">](../interop/how-to-access-office-onterop-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Demonstrates how to create a project that uses named and optional arguments, the <ph id="ph1">`dynamic`</ph> type, and other enhancements that simplify access to Office API objects.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>