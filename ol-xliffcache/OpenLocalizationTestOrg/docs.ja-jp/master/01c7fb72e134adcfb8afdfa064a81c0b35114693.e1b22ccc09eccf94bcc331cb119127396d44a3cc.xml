{"content":"---\ntitle: \"How to: Find an Element with a Specific Attribute (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: b92591aa-3cfb-490e-99f6-da8de335e362\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Find an Element with a Specific Attribute (C#)\nThis topic shows how to find an element that has an attribute that has a specific value.  \n  \n## Example  \n The example shows how to find the `Address` element that has a `Type` attribute with a value of \"Billing\".  \n  \n This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md).  \n  \n```csharp  \nXElement root = XElement.Load(\"PurchaseOrder.xml\");  \nIEnumerable<XElement> address =  \n    from el in root.Elements(\"Address\")  \n    where (string)el.Attribute(\"Type\") == \"Billing\"  \n    select el;  \nforeach (XElement el in address)  \n    Console.WriteLine(el);  \n```  \n  \n This code produces the following output:  \n  \n```xml  \n<Address Type=\"Billing\">  \n  <Name>Tai Yee</Name>  \n  <Street>8 Oak Avenue</Street>  \n  <City>Old Town</City>  \n  <State>PA</State>  \n  <Zip>95819</Zip>  \n  <Country>USA</Country>  \n</Address>  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Typical Purchase Order in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-in-a-namespace.md).  \n  \n```csharp  \nXElement root = XElement.Load(\"PurchaseOrderInNamespace.xml\");  \nXNamespace aw = \"http://www.adventure-works.com\";  \nIEnumerable<XElement> address =  \n    from el in root.Elements(aw + \"Address\")  \n    where (string)el.Attribute(aw + \"Type\") == \"Billing\"  \n    select el;  \nforeach (XElement el in address)  \n    Console.WriteLine(el);  \n```  \n  \n This code produces the following output:  \n  \n```xml  \n<aw:Address aw:Type=\"Billing\" xmlns:aw=\"http://www.adventure-works.com\">  \n  <aw:Name>Tai Yee</aw:Name>  \n  <aw:Street>8 Oak Avenue</aw:Street>  \n  <aw:City>Old Town</aw:City>  \n  <aw:State>PA</aw:State>  \n  <aw:Zip>95819</aw:Zip>  \n  <aw:Country>USA</aw:Country>  \n</aw:Address>  \n```  \n  \n## See Also  \n <xref:System.Xml.Linq.XElement.Attribute%2A>   \n <xref:System.Xml.Linq.XContainer.Elements%2A>   \n [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)   \n [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)   \n [Projection Operations (C#)](../../../../csharp/programming-guide/concepts/linq/projection-operations.md)","nodes":[{"pos":[12,83],"content":"How to: Find an Element with a Specific Attribute (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Find an Element with a Specific Attribute (C#) | Microsoft Docs","pos":[0,71]}]},{"pos":[368,422],"content":"How to: Find an Element with a Specific Attribute (C#)","linkify":"How to: Find an Element with a Specific Attribute (C#)","nodes":[{"content":"How to: Find an Element with a Specific Attribute (C#)","pos":[0,54]}]},{"content":"This topic shows how to find an element that has an attribute that has a specific value.","pos":[423,511]},{"pos":[520,527],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[531,637],"content":"The example shows how to find the <ph id=\"ph1\">`Address`</ph> element that has a <ph id=\"ph2\">`Type`</ph> attribute with a value of \"Billing\".","source":"The example shows how to find the `Address` element that has a `Type` attribute with a value of \"Billing\"."},{"pos":[644,854],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md)."},{"content":"This code produces the following output:","pos":[1147,1187]},{"pos":[1409,1416],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1420,1494]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[1495,1639],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[1646,1858],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order in a Namespace<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Typical Purchase Order in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-in-a-namespace.md)."},{"content":"This code produces the following output:","pos":[2224,2264]},{"pos":[2573,2581],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept><ph id=\"ph1\"> </ph>","pos":[2683,2800],"source":" [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[2803,2934],"source":" [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Projection Operations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/projection-operations.md)</ept>","pos":[2937,3043],"source":" [Projection Operations (C#)](../../../../csharp/programming-guide/concepts/linq/projection-operations.md)"}]}