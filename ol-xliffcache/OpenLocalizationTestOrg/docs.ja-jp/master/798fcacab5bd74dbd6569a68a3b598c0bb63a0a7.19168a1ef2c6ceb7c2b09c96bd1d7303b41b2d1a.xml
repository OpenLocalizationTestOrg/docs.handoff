{"content":"---\ntitle: \"Specifying a Character Set\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"platform invoke, attribute fields\"\n  - \"attribute fields in platform invoke, CharSet\"\n  - \"CharSet field\"\nms.assetid: a8347eb1-295f-46b9-8a78-63331f9ecc50\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Specifying a Character Set\nThe <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field controls string marshaling and determines how platform invoke finds function names in a DLL. This topic describes both behaviors.  \n  \n Some APIs export two versions of functions that take string arguments: narrow (ANSI) and wide (Unicode). The Windows API, for instance, includes the following entry-point names for the **MessageBox** function:  \n  \n-   **MessageBoxA**  \n  \n     Provides 1-byte character ANSI formatting, distinguished by an \"A\" appended to the entry-point name. Calls to **MessageBoxA** always marshal strings in ANSI format.  \n  \n-   **MessageBoxW**  \n  \n     Provides 2-byte character Unicode formatting, distinguished by a \"W\" appended to the entry-point name. Calls to **MessageBoxW** always marshal strings in Unicode format.  \n  \n## String Marshaling and Name Matching  \n The `CharSet` field accepts the following values:  \n  \n <xref:System.Runtime.InteropServices.CharSet.Ansi> (default value)  \n  \n-   String marshaling  \n  \n     Platform invoke marshals strings from their managed format (Unicode) to ANSI format.  \n  \n-   Name matching  \n  \n     When the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=nameWithType> field is `true`, as it is by default in [!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)], platform invoke searches only for the name you specify. For example, if you specify **MessageBox**, platform invoke searches for **MessageBox** and fails when it cannot locate the exact spelling.  \n  \n     When the `ExactSpelling` field is `false`, as it is by default in C++ and C#, platform invoke searches for the unmangled alias first (**MessageBox**), then the mangled name (**MessageBoxA**) if the unmangled alias is not found. Notice that ANSI name-matching behavior differs from Unicode name-matching behavior.  \n  \n <xref:System.Runtime.InteropServices.CharSet.Unicode>  \n  \n-   String marshaling  \n  \n     Platform invoke copies strings from their managed format (Unicode) to Unicode format.  \n  \n-   Name matching  \n  \n     When the `ExactSpelling` field is `true`, as it is by default in [!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)], platform invoke searches only for the name you specify. For example, if you specify **MessageBox**, platform invoke searches for **MessageBox** and fails if it cannot locate the exact spelling.  \n  \n     When the `ExactSpelling` field is `false`, as it is by default in C++ and C#, platform invoke searches for the mangled name first (**MessageBoxW**), then the unmangled alias (**MessageBox**) if the mangled name is not found. Notice that Unicode name-matching behavior differs from ANSI name-matching behavior.  \n  \n <xref:System.Runtime.InteropServices.CharSet.Auto>  \n  \n-   Platform invoke chooses between ANSI and Unicode formats at run time, based on the target platform.  \n  \n## Specifying a Character Set in Visual Basic  \n The following example declares the **MessageBox** function three times, each time with different character-set behavior. You can specify character-set behavior in Visual Basic by adding the **Ansi**, **Unicode**, or **Auto** keyword to the declaration statement.  \n  \n If you omit the character-set keyword, as is done in the first declaration statement, the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field defaults to the ANSI character set. The second and third statements in the example explicitly specify a character set with a keyword.  \n  \n```vb\nImports System\n\nFriend Class WindowsAPI\n    Friend Shared Declare Function MessageBoxA Lib \"user32.dll\" (\n        ByVal hWnd As IntPtr,\n        ByVal lpText As String,\n        ByVal lpCaption As String,\n        ByVal uType As UInteger) As Integer\n\n    Friend Shared Declare Unicode Function MessageBoxW Lib \"user32.dll\" (\n        ByVal hWnd As IntPtr,\n        ByVal lpText As String,\n        ByVal lpCaption As String,\n        ByVal uType As UInteger) As Integer\n\n    Friend Shared Declare Auto Function MessageBox Lib \"user32.dll\" (\n        ByVal hWnd As IntPtr,\n        ByVal lpText As String,\n        ByVal lpCaption As String,\n        ByVal uType As UInteger) As Integer\nEnd Class\n```\n  \n## Specifying a Character Set in C# and C++  \n The <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field identifies the underlying character set as ANSI or Unicode. The character set controls how string arguments to a method should be marshaled. Use one of the following forms to indicate the character set:  \n  \n```csharp\n[DllImport(\"DllName\", CharSet = CharSet.Ansi)]\n[DllImport(\"DllName\", CharSet = CharSet.Unicode)]\n[DllImport(\"DllName\", CharSet = CharSet.Auto)]\n```\n  \n```cpp\n[DllImport(\"DllName\", CharSet = CharSet::Ansi)]\n[DllImport(\"DllName\", CharSet = CharSet::Unicode)]\n[DllImport(\"DllName\", CharSet = CharSet::Auto)]\n```\n  \n The following example shows three managed definitions of the **MessageBox** function attributed to specify a character set. In the first definition, by its omission, the `CharSet` field defaults to the ANSI character set.  \n  \n```csharp  \nusing System;\nusing System.Runtime.InteropServices;\n\ninternal static class WindowsAPI\n{\n    [DllImport(\"user32.dll\")]\n    internal static extern int MessageBoxA(\n        IntPtr hWnd, string lpText, string lpCaption, uint uType);\n\n    [DllImport(\"user32.dll\", CharSet = CharSet.Unicode)]\n    internal static extern int MessageBoxW(\n        IntPtr hWnd, string lpText, string lpCaption, uint uType);\n\n    [DllImport(\"user32.dll\", CharSet = CharSet.Auto)]\n    internal static extern int MessageBox(\n        IntPtr hWnd, string lpText, string lpCaption, uint uType);\n}\n```  \n  \n```cpp\ntypedef void* HWND;\n\n// Can use MessageBox or MessageBoxA.\n[DllImport(\"user32\")]\nextern \"C\" int MessageBox(\n    HWND hWnd, String* lpText, String* lpCaption, unsigned int uType);\n\n// Can use MessageBox or MessageBoxW.\n[DllImport(\"user32\", CharSet = CharSet::Unicode)]\nextern \"C\" int MessageBoxW(\n    HWND hWnd, String* lpText, String* lpCaption, unsigned int uType);\n\n// Must use MessageBox.\n[DllImport(\"user32\", CharSet = CharSet::Auto)]\nextern \"C\" int MessageBox(\n    HWND hWnd, String* lpText, String* lpCaption, unsigned int uType);\n```\n  \n## See also\n\n- <xref:System.Runtime.InteropServices.DllImportAttribute>\n- [Creating Prototypes in Managed Code](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)\n- [Platform Invoke Examples](../../../docs/framework/interop/platform-invoke-examples.md)\n- [Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)\n","nodes":[{"pos":[4,327],"embed":true,"restype":"x-metadata","content":"title: \"Specifying a Character Set\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"platform invoke, attribute fields\"\n  - \"attribute fields in platform invoke, CharSet\"\n  - \"CharSet field\"\nms.assetid: a8347eb1-295f-46b9-8a78-63331f9ecc50\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Specifying a Character Set","nodes":[{"pos":[0,26],"content":"Specifying a Character Set","nodes":[{"content":"Specifying a Character Set","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[334,360],"content":"Specifying a Character Set","linkify":"Specifying a Character Set","nodes":[{"content":"Specifying a Character Set","pos":[0,26]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field controls string marshaling and determines how platform invoke finds function names in a DLL.","pos":[361,557],"source":"The <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field controls string marshaling and determines how platform invoke finds function names in a DLL."},{"content":"This topic describes both behaviors.","pos":[558,594]},{"content":"Some APIs export two versions of functions that take string arguments: narrow (ANSI) and wide (Unicode).","pos":[601,705]},{"content":"The Windows API, for instance, includes the following entry-point names for the <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept> function:","pos":[706,810],"source":" The Windows API, for instance, includes the following entry-point names for the **MessageBox** function:"},{"pos":[820,835],"content":"<bpt id=\"p1\">**</bpt>MessageBoxA<ept id=\"p1\">**</ept>","source":"**MessageBoxA**"},{"content":"Provides 1-byte character ANSI formatting, distinguished by an \"A\" appended to the entry-point name.","pos":[846,946]},{"content":"Calls to <bpt id=\"p1\">**</bpt>MessageBoxA<ept id=\"p1\">**</ept> always marshal strings in ANSI format.","pos":[947,1010],"source":" Calls to **MessageBoxA** always marshal strings in ANSI format."},{"pos":[1020,1035],"content":"<bpt id=\"p1\">**</bpt>MessageBoxW<ept id=\"p1\">**</ept>","source":"**MessageBoxW**"},{"content":"Provides 2-byte character Unicode formatting, distinguished by a \"W\" appended to the entry-point name.","pos":[1046,1148]},{"content":"Calls to <bpt id=\"p1\">**</bpt>MessageBoxW<ept id=\"p1\">**</ept> always marshal strings in Unicode format.","pos":[1149,1215],"source":" Calls to **MessageBoxW** always marshal strings in Unicode format."},{"pos":[1224,1259],"content":"String Marshaling and Name Matching","linkify":"String Marshaling and Name Matching","nodes":[{"content":"String Marshaling and Name Matching","pos":[0,35]}]},{"pos":[1263,1312],"content":"The <ph id=\"ph1\">`CharSet`</ph> field accepts the following values:","source":"The `CharSet` field accepts the following values:"},{"pos":[1319,1385],"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CharSet.Ansi&gt;</ph> (default value)","source":"<xref:System.Runtime.InteropServices.CharSet.Ansi> (default value)"},{"content":"String marshaling","pos":[1395,1412]},{"content":"Platform invoke marshals strings from their managed format (Unicode) to ANSI format.","pos":[1423,1507]},{"content":"Name matching","pos":[1517,1530]},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=nameWithType&gt;</ph> field is <ph id=\"ph2\">`true`</ph>, as it is by default in <ph id=\"ph3\">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph>, platform invoke searches only for the name you specify.","pos":[1541,1805],"source":"When the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=nameWithType> field is `true`, as it is by default in [!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)], platform invoke searches only for the name you specify."},{"content":"For example, if you specify <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept>, platform invoke searches for <bpt id=\"p2\">**</bpt>MessageBox<ept id=\"p2\">**</ept> and fails when it cannot locate the exact spelling.","pos":[1806,1945],"source":" For example, if you specify **MessageBox**, platform invoke searches for **MessageBox** and fails when it cannot locate the exact spelling."},{"content":"When the <ph id=\"ph1\">`ExactSpelling`</ph> field is <ph id=\"ph2\">`false`</ph>, as it is by default in C++ and C#, platform invoke searches for the unmangled alias first (<bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept>), then the mangled name (<bpt id=\"p2\">**</bpt>MessageBoxA<ept id=\"p2\">**</ept>) if the unmangled alias is not found.","pos":[1956,2183],"source":"When the `ExactSpelling` field is `false`, as it is by default in C++ and C#, platform invoke searches for the unmangled alias first (**MessageBox**), then the mangled name (**MessageBoxA**) if the unmangled alias is not found."},{"content":"Notice that ANSI name-matching behavior differs from Unicode name-matching behavior.","pos":[2184,2268]},{"content":"String marshaling","pos":[2338,2355]},{"content":"Platform invoke copies strings from their managed format (Unicode) to Unicode format.","pos":[2366,2451]},{"content":"Name matching","pos":[2461,2474]},{"content":"When the <ph id=\"ph1\">`ExactSpelling`</ph> field is <ph id=\"ph2\">`true`</ph>, as it is by default in <ph id=\"ph3\">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph>, platform invoke searches only for the name you specify.","pos":[2485,2665],"source":"When the `ExactSpelling` field is `true`, as it is by default in [!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)], platform invoke searches only for the name you specify."},{"content":"For example, if you specify <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept>, platform invoke searches for <bpt id=\"p2\">**</bpt>MessageBox<ept id=\"p2\">**</ept> and fails if it cannot locate the exact spelling.","pos":[2666,2803],"source":" For example, if you specify **MessageBox**, platform invoke searches for **MessageBox** and fails if it cannot locate the exact spelling."},{"content":"When the <ph id=\"ph1\">`ExactSpelling`</ph> field is <ph id=\"ph2\">`false`</ph>, as it is by default in C++ and C#, platform invoke searches for the mangled name first (<bpt id=\"p1\">**</bpt>MessageBoxW<ept id=\"p1\">**</ept>), then the unmangled alias (<bpt id=\"p2\">**</bpt>MessageBox<ept id=\"p2\">**</ept>) if the mangled name is not found.","pos":[2814,3038],"source":"When the `ExactSpelling` field is `false`, as it is by default in C++ and C#, platform invoke searches for the mangled name first (**MessageBoxW**), then the unmangled alias (**MessageBox**) if the mangled name is not found."},{"content":"Notice that Unicode name-matching behavior differs from ANSI name-matching behavior.","pos":[3039,3123]},{"content":"Platform invoke chooses between ANSI and Unicode formats at run time, based on the target platform.","pos":[3190,3289]},{"pos":[3298,3340],"content":"Specifying a Character Set in Visual Basic","linkify":"Specifying a Character Set in Visual Basic","nodes":[{"content":"Specifying a Character Set in Visual Basic","pos":[0,42]}]},{"content":"The following example declares the <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept> function three times, each time with different character-set behavior.","pos":[3344,3464],"source":"The following example declares the **MessageBox** function three times, each time with different character-set behavior."},{"content":"You can specify character-set behavior in Visual Basic by adding the <bpt id=\"p1\">**</bpt>Ansi<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Unicode<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>Auto<ept id=\"p3\">**</ept> keyword to the declaration statement.","pos":[3465,3606],"source":" You can specify character-set behavior in Visual Basic by adding the **Ansi**, **Unicode**, or **Auto** keyword to the declaration statement."},{"content":"If you omit the character-set keyword, as is done in the first declaration statement, the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field defaults to the ANSI character set.","pos":[3613,3838],"source":"If you omit the character-set keyword, as is done in the first declaration statement, the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field defaults to the ANSI character set."},{"content":"The second and third statements in the example explicitly specify a character set with a keyword.","pos":[3839,3936]},{"pos":[4643,4683],"content":"Specifying a Character Set in C# and C++","linkify":"Specifying a Character Set in C# and C++","nodes":[{"content":"Specifying a Character Set in C# and C++","pos":[0,40]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field identifies the underlying character set as ANSI or Unicode.","pos":[4687,4850],"source":"The <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field identifies the underlying character set as ANSI or Unicode."},{"content":"The character set controls how string arguments to a method should be marshaled.","pos":[4851,4931]},{"content":"Use one of the following forms to indicate the character set:","pos":[4932,4993]},{"content":"The following example shows three managed definitions of the <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept> function attributed to specify a character set.","pos":[5322,5445],"source":"The following example shows three managed definitions of the **MessageBox** function attributed to specify a character set."},{"content":"In the first definition, by its omission, the <ph id=\"ph1\">`CharSet`</ph> field defaults to the ANSI character set.","pos":[5446,5543],"source":" In the first definition, by its omission, the `CharSet` field defaults to the ANSI character set."},{"pos":[6689,6697],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6760,6869],"content":"<bpt id=\"p1\">[</bpt>Creating Prototypes in Managed Code<ept id=\"p1\">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept>","source":"[Creating Prototypes in Managed Code](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)"},{"pos":[6872,6959],"content":"<bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](../../../docs/framework/interop/platform-invoke-examples.md)</ept>","source":"[Platform Invoke Examples](../../../docs/framework/interop/platform-invoke-examples.md)"},{"pos":[6962,7073],"content":"<bpt id=\"p1\">[</bpt>Marshaling Data with Platform Invoke<ept id=\"p1\">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept>","source":"[Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)"}]}