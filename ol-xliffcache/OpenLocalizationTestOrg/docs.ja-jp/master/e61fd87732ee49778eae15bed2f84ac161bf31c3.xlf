<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-401ea83" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e61fd87732ee49778eae15bed2f84ac161bf31c3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\property-change-events.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e49d71bb6d7c8facf9bacc2f8f5def4a9a4b7757</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5e1c97634855492f849a57530b587a1d361ce06</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Property Change Events | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Property Change Events</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> defines several events that are raised in response to a change in the value of a property.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Often the property is a dependency property.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The event itself is sometimes a routed event and is sometimes a standard <ph id="ph1">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> event.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The definition of the event varies depending on the scenario, because some property changes are more appropriately routed through an element tree, whereas other property changes are generally only of concern to the object where the property changed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Identifying a Property Change Event</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Not all events that report a property change are explicitly identified as a property changed event, either by virtue of a signature pattern or a naming pattern.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Generally, the description of the event in the <ph id="ph1">[!INCLUDE[TLA#tla_sdk](../../../../includes/tlasharptla-sdk-md.md)]</ph> documentation indicates whether the event is directly tied to a property value change and provides cross-references between the property and event.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>RoutedPropertyChanged Events</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Certain events use an event data type and delegate that are explicitly used for property change events.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The event data type is <ph id="ph1">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>, and the delegate is <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventHandler%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The event data and delegate both have a generic type parameter that is used to specify the actual type of the changing property when you define the handler.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The event data contains two properties, <ph id="ph1">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601.OldValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601.NewValue%2A&gt;</ph>, which are both then passed as the type argument in the event data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The "Routed" part of the name indicates that the property changed event is registered as a routed event.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The advantage of routing a property changed event is that the top level of a control can receive property changed events if properties on the child elements (the control's composite parts) change values.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For instance, you might create a control that incorporates a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.RangeBase&gt;</ph> control such as a <ph id="ph2">&lt;xref:System.Windows.Controls.Slider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> property changes on the slider part, you might want to handle that change on the parent control rather than on the part.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because you have an old value and a new value, it might be tempting to use this event handler as a validator for the property value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, that is not the design intention of most property changed events.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Generally, the values are provided so that you can act on those values in other logic areas of your code, but actually changing the values from within the event handler is not advisable, and may cause unintentional recursion depending on how your handler is implemented.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If your property is a custom dependency property, or if you are working with a derived class where you have defined the instantiation code, there is a much better mechanism for tracking property changes that is built in to the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system: the property system callbacks <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more details about how you can use the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system for validation and coercion, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)</ept> and <bpt id="p2">[</bpt>Custom Dependency Properties<ept id="p2">](../../../../docs/framework/wpf/advanced/custom-dependency-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>DependencyPropertyChanged Events</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Another pair of types that are part of a property changed event scenario is <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventHandler&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Events for these property changes are not routed; they are standard <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> events.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> is an unusual event data reporting type because it does not derive from <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph>; <ph id="ph3">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> is a structure, not a class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Events that use <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventHandler&gt;</ph> are slightly more common than <ph id="ph3">`RoutedPropertyChanged`</ph> events.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An example of an event that uses these types is <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Like <ph id="ph1">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> also reports an old and new value for the property.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Also, the same considerations about what you can do with the values apply; it is generally not recommended that you attempt to change the values again on the sender in response to the event.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Property Triggers</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A closely related concept to a property changed event is a property trigger.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A property trigger is created within a style or template and enables you to create a conditional behavior based on the value of the property where the property trigger is assigned.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The property for a property trigger must be a dependency property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It can be (and frequently is) a read-only dependency property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A good indicator for when a dependency property exposed by a control is at least partially designed to be a property trigger is if the property name begins with "Is".</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Properties that have this naming are often a read-only Boolean dependency property where the primary scenario for the property is reporting control state that might have consequences to the real-time UI and is thus a property trigger candidate.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Some of these properties also have a dedicated property changed event.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For instance, the property <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> has a property changed event <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The property itself is read-only, with its value adjusted by the input system, and the input system raises <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> on each real-time change.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Compared to a true property changed event, using a property trigger to act on a property change has some limitations.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Property triggers work through an exact match logic.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You specify a property and a value that indicates the specific value for which the trigger will act. For instance: <ph id="ph1">`&lt;Setter Property="IsMouseCaptured" Value="true"&gt; ... &lt;/Setter&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Because of this limitation, the majority of property trigger usages will be for Boolean properties, or properties that take a dedicated enumeration value, where the possible value range is manageable enough to define a trigger for each case.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Or property triggers might exist only for special values, such as when an items count reaches zero, and there would be no trigger that accounts for the cases when the property value changes away from zero again (instead of triggers for all cases, you might need a code event handler here, or a default behavior that toggles back from the trigger state again when the value is nonzero).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The property trigger syntax is analogous to an "if" statement in programming.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the trigger condition is true, then the "body" of the property trigger is "executed".</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The "body" of a property trigger is not code, it is markup.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>That markup is limited to using one or more <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> elements to set other properties of the object where the style or template is being applied.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To offset the "if" condition of a property trigger that has a wide variety of possible values, it is generally advisable to set that same property value to a default by using a <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This way, the <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> contained setter will have precedence when the trigger condition is true, and the <ph id="ph2">&lt;xref:System.Windows.Setter&gt;</ph> that is not within a <ph id="ph3">&lt;xref:System.Windows.Trigger&gt;</ph> will have precedence whenever the trigger condition is false.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Property triggers are generally appropriate for scenarios where one or more appearance properties should change, based on the state of another property on the same element.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To learn more about property triggers, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../../../../docs/framework/wpf/controls/styling-and-templating.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/routed-events-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>