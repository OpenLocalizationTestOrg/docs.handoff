{"content":"---\ntitle: Documenting your code with XML comments\ndescription: Documenting your code\nkeywords: .NET, .NET Core\nauthor: tsolarin\nms.author: wiwagn\nms.date: 02/14/2017\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: 8e75e317-4a55-45f2-a866-e76124171838\n---\n\n# Documenting your code with XML comments\n\nXML documentation comments are a special kind of comment, added above the definition of any user-defined type or member. \nThey are special because they can be processed by the compiler to generate an XML documentation file at compile time.\nThe compiler generated XML file can be distributed alongside your .NET assembly so that Visual Studio and other IDEs can use IntelliSense to show quick information about types or members. Additionally, the XML file can be run through tools like [DocFX](https://dotnet.github.io/docfx/) and [Sandcastle](https://github.com/EWSoftware/SHFB) to generate API reference websites.\n\nXML documentation comments, like all other comments, are ignored by the compiler.\n\nYou can generate the XML file at compile time by doing one of the following:\n\n- If you are developing an application with .NET Core from the command line, you can add a [DocumentationFile element](http://docs.microsoft.com/visualstudio/msbuild/common-msbuild-project-properties) to the `<PropertyGroup>` section of your .csproj project file. The following example generates an XML file in the project directory with the same root filename as the project:\n\n   ```xml\n   <DocumentationFile>$(MSBuildProjectName).xml</DocumentationFile>\n   ```\n\n   You can also specify the exact absolute or relative path and name of the XML file. The following example generates the XML file in the same directory as the debug version of an application:\n\n    ```xml\n   <DocumentationFile>bin\\Debug\\netcoreapp1.0\\App.xml</DocumentationFile>\n   ```\n\n- If you are developing an application using Visual Studio, right-click on the project and select **Properties**. In the properties dialog, select the **Build** tab, and check **XML documentation file**. You can also change the location to which the compiler writes the file. \n\n- If you are compiling a .NET Framework application from the command line, add the [/doc compiler option](language-reference/compiler-options/doc-compiler-option.md) when compiling.  \n\nXML documentation comments use triple forward slashes (`///`) and an XML formatted comment body. For example:\n\n[!code-csharp[XML Documentation Comment](../../samples/snippets/csharp/concepts/codedoc/xml-comment.cs)]\n\n## Walkthrough\n\nLet's walk through documenting a very basic math library to make it easy for new developers to understand/contribute and for third party developers to use.\n\nHere's code for the simple math library:\n\n[!code-csharp[Sample Library](../../samples/snippets/csharp/concepts/codedoc/sample-library.cs)]\n\nThe sample library supports four major arithmetic operations `add`, `subtract`, `multiply` and `divide` on `int` and `double` data types.\n\nNow you want to be able to create an API reference document from your code for third party developers who use your library but don't have access to the source code.\nAs mentioned earlier XML documentation tags can be used to achieve this, You will now be introduced to the standard XML tags the C# compiler supports.\n\n### &lt;summary&gt;\n\nThe `<summary>` tag adds brief information about a type or member.\nI'll demonstrate its use by adding it to the `Math` class definition and the first `Add` method. Feel free to apply it to the rest of your code.\n\n[!code-csharp[Summary Tag](../../samples/snippets/csharp/concepts/codedoc/summary-tag.cs)]\n\nThe `<summary>` tag is very important, and we recommend that you include it because its content is the primary source of type or member information in IntelliSense or an API reference document.\n\n### &lt;remarks&gt;\n\nThe `<remarks>` tag supplements the information about types or members that the `<summary>` tag provides. In this example, you'll just add it to the class.\n\n[!code-csharp[Remarks Tag](../../samples/snippets/csharp/concepts/codedoc/remarks-tag.cs)]\n\n### &lt;returns&gt;\n\nThe `<returns>` tag describes the return value of a method declaration.\nAs before, the following example illustrates the `<returns>` tag on the first `Add` method. You can do the same on other methods.\n\n[!code-csharp[Returns Tag](../../samples/snippets/csharp/concepts/codedoc/returns-tag.cs)]\n\n### &lt;value&gt;\n\nThe `<value>` tag is similar to the `<returns>` tag, except that you use it for properties.\nAssuming your `Math` library had a static property called `PI`, here's how you'd use this tag:\n\n[!code-csharp[Value Tag](../../samples/snippets/csharp/concepts/codedoc/value-tag.cs)]\n\n### &lt;example&gt;\n\nYou use the `<example>` tag to include an example in your XML documentation.\nThis involves using the child `<code>` tag.\n\n[!code-csharp[Example Tag](../../samples/snippets/csharp/concepts/codedoc/example-tag.cs)]\n\nThe `code` tag preserves line breaks and indentation for longer examples.\n\n### &lt;para&gt;\n\nYou use the `<para>` tag to format the content within its parent tag. `<para>` is usually used inside a tag, such as `<remarks>` or `<returns>`, to divide text into paragraphs.\nYou can format the contents of the `<remarks>` tag for your class definition.\n\n[!code-csharp[Para Tag](../../samples/snippets/csharp/concepts/codedoc/para-tag.cs)]\n\n### &lt;c&gt;\n\nStill on the topic of formatting, you use the `<c>` tag for marking part of text as code.\nIt's like the `<code>` tag but inline. It's useful when you want to show a quick code example as part of a tag's content.\nLet's update the documentation for the `Math` class.\n\n[!code-csharp[C Tag](../../samples/snippets/csharp/concepts/codedoc/c-tag.cs)]\n\n### &lt;exception&gt;\n\nBy using the `<exception>` tag, you let your developers know that a method can throw specific exceptions.\nLooking at your `Math` library, you can see that both `Add` methods throw an exception if a certain condition is met. Not so obvious, though,\nis that integer `Divide` method throws as well if the `b` parameter is zero. Now add exception documentation to this method.\n\n[!code-csharp[Exception Tag](../../samples/snippets/csharp/concepts/codedoc/exception-tag.cs)]\n\nThe `cref` attribute represents a reference to an exception that is available from the current compilation environment.\nThis can be any type defined in the project or a referenced assembly. The compiler will issue a warning if its value cannot be resolved.\n\n### &lt;see&gt;\n\nThe `<see>` tag lets you create a clickable link to a documentation page for another code element. In our next example, we'll create a clickable link between the two `Add` methods.\n\n[!code-csharp[See Tag](../../samples/snippets/csharp/concepts/codedoc/see-tag.cs)]\n\nThe `cref` is a **required** attribute that represents a reference to a type or its member that is available from the current compilation environment. \nThis can be any type defined in the project or a referenced assembly.\n\n### &lt;seealso&gt;\n\nYou use the `<seealso>` tag in the same way you do the `<see>` tag. The only difference is that its content is typically placed in a \"See Also\" section. Here we'll add a `seealso` tag on the integer `Add` method to reference other methods in the class that accept integer parameters:\n\n[!code-csharp[Seealso Tag](../../samples/snippets/csharp/concepts/codedoc/seealso-tag.cs)]\n\nThe `cref` attribute represents a reference to a type or its member that is available from the current compilation environment.\nThis can be any type defined in the project or a referenced assembly.\n\n### &lt;param&gt;\n\nYou use the `<param>` tag to describe a method's parameters. Here's an example on the double `Add` method:\nThe parameter the tag describes is specified in the **required** `name` attribute.\n\n[!code-csharp[Param Tag](../../samples/snippets/csharp/concepts/codedoc/param-tag.cs)]\n\n### &lt;typeparam&gt;\n\nYou use `<typeparam>` tag just like the `<param>` tag but for generic type or method declarations to describe a generic parameter.\nAdd a quick generic method to your `Math` class to check if one quantity is greater than another.\n\n[!code-csharp[Typeparam Tag](../../samples/snippets/csharp/concepts/codedoc/typeparam-tag.cs)]\n\n### &lt;paramref&gt;\n\nSometimes you might be in the middle of describing what a method does in what could be a `<summary>` tag, and you might want to make a reference\nto a parameter. The `<paramref>` tag is great for just this. Let's update the summary of our double based `Add` method. Like the `<param>` tag\nthe parameter name is specified in the **required** `name` attribute.\n\n[!code-csharp[Paramref Tag](../../samples/snippets/csharp/concepts/codedoc/paramref-tag.cs)]\n\n### &lt;typeparamref&gt;\n\nYou use `<typeparamref>` tag just like the `<paramref>` tag but for generic type or method declarations to describe a generic parameter.\nYou can use the same generic method you previously created.\n\n[!code-csharp[Typeparamref Tag](../../samples/snippets/csharp/concepts/codedoc/typeparamref-tag.cs)]\n\n### &lt;list&gt;\n\nYou use the `<list>` tag to format documentation information as an ordered list, unordered list or table.\nMake an unordered list of every math operation your `Math` library supports.\n\n[!code-csharp[List Tag](../../samples/snippets/csharp/concepts/codedoc/list-tag.cs)]\n\nYou can make an ordered list or table by changing the `type` attribute to `number` or `table`, respectively.\n\n### Putting it all together\n\nIf you've followed this tutorial and applied the tags to your code where necessary, your code should now look similar to the following:\n\n[!code-csharp[Tagged Library](../../samples/snippets/csharp/concepts/codedoc/tagged-library.cs)]\n\nFrom your code, you can generate a detailed documentation website complete with clickable cross-references. But you're faced with another problem: your code has become hard to read.\nThere's so much information to sift through that this is going to be a nightmare for any developer who wants to contribute to this code. \nThankfully there's an XML tag that can help you deal with this:\n\n### &lt;include&gt;\n\nThe `<include>` tag lets you refer to comments in a separate XML file that describe the types and members in your source code, as opposed to placing documentation comments directly in your source code file.\n\nNow you're going to move all your XML tags into a separate XML file named `docs.xml`. Feel free to name the file whatever you want.\n\n[!code-xml[Sample XML](../../samples/snippets/csharp/concepts/codedoc/include.xml)]\n\nIn the above XML, each member's documentation comments appear directly inside a tag named after what they do. You can choose your own strategy. \nNow that you have your XML comments in a separate file, let's see how your code can be made more readable by using the `<include>` tag:\n\n[!code-csharp[Include Tag](../../samples/snippets/csharp/concepts/codedoc/include-tag.cs)]\n\nAnd there you have it: our code is back to being readable, and no documentation information has been lost. \n\nThe `filename` attribute represents the name of the XML file containing the documentation.\n\nThe `path` attribute represents an [XPath](https://msdn.microsoft.com/library/ms256115.aspx) query to the `tag name` present in the specified `filename`.\n\nThe `name` attribute represents the name specifier in the tag that precedes the comments.\n\nThe `id` attribute which can be used in place of `name` represents the ID for the tag that precedes the comments.\n\n### User Defined Tags\n\nAll the tags outlined above represent those that are recognized by the C# compiler. However, a user is free to define their own tags.\nTools like Sandcastle bring support for extra tags like [`<event>`](http://ewsoftware.github.io/XMLCommentsGuide/html/81bf7ad3-45dc-452f-90d5-87ce2494a182.htm), [`<note>`](http://ewsoftware.github.io/XMLCommentsGuide/html/4302a60f-e4f4-4b8d-a451-5f453c4ebd46.htm)\nand even support [documenting namespaces](http://ewsoftware.github.io/XMLCommentsGuide/html/BD91FAD4-188D-4697-A654-7C07FD47EF31.htm).\nCustom or in-house documentation generation tools can also be used with the standard tags and multiple output formats from HTML to PDF can be supported.\n\n## Recommendations\n\nDocumenting code is recommended for many reasons. What follows are some best practices, general use case scenarios, and things that you should know when using XML documentation tags in your C# code.\n\n* For the sake of consistency, all publicly visible types and their members should be documented. If you must do it, do it all.\n* Private members can also be documented using XML comments. However, this exposes the inner (potentially confidential) workings of your library.\n* At a bare minimum, types and their members should have a `<summary>` tag because its content is needed for IntelliSense.\n* Documentation text should be written using complete sentences ending with full stops.\n* Partial classes are fully supported, and documentation information will be concatenated into a single entry for that type.\n* The compiler verifies the syntax of the `<exception>`, `<include>`, `<param>`, `<see>`, `<seealso>` and `<typeparam>` tags.\n- The compiler validates the parameters that contain file paths and references to other parts of the code.\n\n## See also\n[XML Documentation Comments (C# Programming Guide)](programming-guide/xmldoc/xml-documentation-comments.md)\n\n[Recommended Tags for Documentation Comments (C# Programming Guide)](programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)\n","nodes":[{"pos":[11,50],"content":"Documenting your code with XML comments","needQuote":true,"needEscape":true,"nodes":[{"content":"Documenting your code with XML comments","pos":[0,39]}]},{"pos":[64,85],"content":"Documenting your code","needQuote":true,"needEscape":true,"nodes":[{"content":"Documenting your code","pos":[0,21]}]},{"pos":[96,111],"content":".NET, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"pos":[304,343],"content":"Documenting your code with XML comments","linkify":"Documenting your code with XML comments","nodes":[{"content":"Documenting your code with XML comments","pos":[0,39]}]},{"content":"XML documentation comments are a special kind of comment, added above the definition of any user-defined type or member.","pos":[345,465]},{"content":"They are special because they can be processed by the compiler to generate an XML documentation file at compile time.","pos":[466,584],"source":" \nThey are special because they can be processed by the compiler to generate an XML documentation file at compile time."},{"content":"The compiler generated XML file can be distributed alongside your .NET assembly so that Visual Studio and other IDEs can use IntelliSense to show quick information about types or members.","pos":[585,772],"source":"\nThe compiler generated XML file can be distributed alongside your .NET assembly so that Visual Studio and other IDEs can use IntelliSense to show quick information about types or members."},{"content":"Additionally, the XML file can be run through tools like <bpt id=\"p1\">[</bpt>DocFX<ept id=\"p1\">](https://dotnet.github.io/docfx/)</ept> and <bpt id=\"p2\">[</bpt>Sandcastle<ept id=\"p2\">](https://github.com/EWSoftware/SHFB)</ept> to generate API reference websites.","pos":[773,959],"source":" Additionally, the XML file can be run through tools like [DocFX](https://dotnet.github.io/docfx/) and [Sandcastle](https://github.com/EWSoftware/SHFB) to generate API reference websites."},{"content":"XML documentation comments, like all other comments, are ignored by the compiler.","pos":[961,1042]},{"content":"You can generate the XML file at compile time by doing one of the following:","pos":[1044,1120]},{"content":"If you are developing an application with .NET Core from the command line, you can add a <bpt id=\"p1\">[</bpt>DocumentationFile element<ept id=\"p1\">](http://docs.microsoft.com/visualstudio/msbuild/common-msbuild-project-properties)</ept> to the <ph id=\"ph1\">`&lt;PropertyGroup&gt;`</ph> section of your .csproj project file.","pos":[1124,1385],"source":"If you are developing an application with .NET Core from the command line, you can add a [DocumentationFile element](http://docs.microsoft.com/visualstudio/msbuild/common-msbuild-project-properties) to the `<PropertyGroup>` section of your .csproj project file."},{"content":"The following example generates an XML file in the project directory with the same root filename as the project:","pos":[1386,1498]},{"content":"You can also specify the exact absolute or relative path and name of the XML file.","pos":[1589,1671]},{"content":"The following example generates the XML file in the same directory as the debug version of an application:","pos":[1672,1778]},{"content":"If you are developing an application using Visual Studio, right-click on the project and select <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>.","pos":[1875,1986],"source":"If you are developing an application using Visual Studio, right-click on the project and select **Properties**."},{"content":"In the properties dialog, select the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> tab, and check <bpt id=\"p2\">**</bpt>XML documentation file<ept id=\"p2\">**</ept>.","pos":[1987,2076],"source":" In the properties dialog, select the **Build** tab, and check **XML documentation file**."},{"content":"You can also change the location to which the compiler writes the file.","pos":[2077,2148]},{"pos":[2153,2332],"content":"If you are compiling a .NET Framework application from the command line, add the <bpt id=\"p1\">[</bpt>/doc compiler option<ept id=\"p1\">](language-reference/compiler-options/doc-compiler-option.md)</ept> when compiling.","source":"If you are compiling a .NET Framework application from the command line, add the [/doc compiler option](language-reference/compiler-options/doc-compiler-option.md) when compiling."},{"content":"XML documentation comments use triple forward slashes (<ph id=\"ph1\">`///`</ph>) and an XML formatted comment body.","pos":[2336,2432],"source":"XML documentation comments use triple forward slashes (`///`) and an XML formatted comment body."},{"content":"For example:","pos":[2433,2445]},{"pos":[2447,2551],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>XML Documentation Comment<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/xml-comment.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[XML Documentation Comment](../../samples/snippets/csharp/concepts/codedoc/xml-comment.cs)]"},{"pos":[2556,2567],"content":"Walkthrough","linkify":"Walkthrough","nodes":[{"content":"Walkthrough","pos":[0,11]}]},{"content":"Let's walk through documenting a very basic math library to make it easy for new developers to understand/contribute and for third party developers to use.","pos":[2569,2724]},{"content":"Here's code for the simple math library:","pos":[2726,2766]},{"pos":[2768,2864],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Sample Library<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/sample-library.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Sample Library](../../samples/snippets/csharp/concepts/codedoc/sample-library.cs)]"},{"pos":[2866,3003],"content":"The sample library supports four major arithmetic operations <ph id=\"ph1\">`add`</ph>, <ph id=\"ph2\">`subtract`</ph>, <ph id=\"ph3\">`multiply`</ph> and <ph id=\"ph4\">`divide`</ph> on <ph id=\"ph5\">`int`</ph> and <ph id=\"ph6\">`double`</ph> data types.","source":"The sample library supports four major arithmetic operations `add`, `subtract`, `multiply` and `divide` on `int` and `double` data types."},{"content":"Now you want to be able to create an API reference document from your code for third party developers who use your library but don't have access to the source code.","pos":[3005,3169]},{"content":"As mentioned earlier XML documentation tags can be used to achieve this, You will now be introduced to the standard XML tags the C# compiler supports.","pos":[3170,3320],"source":"\nAs mentioned earlier XML documentation tags can be used to achieve this, You will now be introduced to the standard XML tags the C# compiler supports."},{"pos":[3326,3341],"content":"&lt;summary&gt;","linkify":"&lt;summary&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>summary<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,15],"source":"&lt;summary&gt;"}]},{"content":"The <ph id=\"ph1\">`&lt;summary&gt;`</ph> tag adds brief information about a type or member.","pos":[3343,3409],"source":"The `<summary>` tag adds brief information about a type or member."},{"content":"I'll demonstrate its use by adding it to the <ph id=\"ph1\">`Math`</ph> class definition and the first <ph id=\"ph2\">`Add`</ph> method.","pos":[3410,3506],"source":"\nI'll demonstrate its use by adding it to the `Math` class definition and the first `Add` method."},{"content":"Feel free to apply it to the rest of your code.","pos":[3507,3554]},{"pos":[3556,3646],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Summary Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/summary-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Summary Tag](../../samples/snippets/csharp/concepts/codedoc/summary-tag.cs)]"},{"pos":[3648,3841],"content":"The <ph id=\"ph1\">`&lt;summary&gt;`</ph> tag is very important, and we recommend that you include it because its content is the primary source of type or member information in IntelliSense or an API reference document.","source":"The `<summary>` tag is very important, and we recommend that you include it because its content is the primary source of type or member information in IntelliSense or an API reference document."},{"pos":[3847,3862],"content":"&lt;remarks&gt;","linkify":"&lt;remarks&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>remarks<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,15],"source":"&lt;remarks&gt;"}]},{"content":"The <ph id=\"ph1\">`&lt;remarks&gt;`</ph> tag supplements the information about types or members that the <ph id=\"ph2\">`&lt;summary&gt;`</ph> tag provides.","pos":[3864,3969],"source":"The `<remarks>` tag supplements the information about types or members that the `<summary>` tag provides."},{"content":"In this example, you'll just add it to the class.","pos":[3970,4019]},{"pos":[4021,4111],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Remarks Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/remarks-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Remarks Tag](../../samples/snippets/csharp/concepts/codedoc/remarks-tag.cs)]"},{"pos":[4117,4132],"content":"&lt;returns&gt;","linkify":"&lt;returns&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>returns<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,15],"source":"&lt;returns&gt;"}]},{"content":"The <ph id=\"ph1\">`&lt;returns&gt;`</ph> tag describes the return value of a method declaration.","pos":[4134,4205],"source":"The `<returns>` tag describes the return value of a method declaration."},{"content":"As before, the following example illustrates the <ph id=\"ph1\">`&lt;returns&gt;`</ph> tag on the first <ph id=\"ph2\">`Add`</ph> method.","pos":[4206,4297],"source":"\nAs before, the following example illustrates the `<returns>` tag on the first `Add` method."},{"content":"You can do the same on other methods.","pos":[4298,4335]},{"pos":[4337,4427],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Returns Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/returns-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Returns Tag](../../samples/snippets/csharp/concepts/codedoc/returns-tag.cs)]"},{"pos":[4433,4446],"content":"&lt;value&gt;","linkify":"&lt;value&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>value<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,13],"source":"&lt;value&gt;"}]},{"content":"The <ph id=\"ph1\">`&lt;value&gt;`</ph> tag is similar to the <ph id=\"ph2\">`&lt;returns&gt;`</ph> tag, except that you use it for properties.","pos":[4448,4539],"source":"The `<value>` tag is similar to the `<returns>` tag, except that you use it for properties."},{"content":"Assuming your <ph id=\"ph1\">`Math`</ph> library had a static property called <ph id=\"ph2\">`PI`</ph>, here's how you'd use this tag:","pos":[4540,4634],"source":"\nAssuming your `Math` library had a static property called `PI`, here's how you'd use this tag:"},{"pos":[4636,4722],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Value Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/value-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Value Tag](../../samples/snippets/csharp/concepts/codedoc/value-tag.cs)]"},{"pos":[4728,4743],"content":"&lt;example&gt;","linkify":"&lt;example&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>example<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,15],"source":"&lt;example&gt;"}]},{"content":"You use the <ph id=\"ph1\">`&lt;example&gt;`</ph> tag to include an example in your XML documentation.","pos":[4745,4821],"source":"You use the `<example>` tag to include an example in your XML documentation."},{"content":"This involves using the child <ph id=\"ph1\">`&lt;code&gt;`</ph> tag.","pos":[4822,4865],"source":"\nThis involves using the child `<code>` tag."},{"pos":[4867,4957],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Example Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/example-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Example Tag](../../samples/snippets/csharp/concepts/codedoc/example-tag.cs)]"},{"pos":[4959,5032],"content":"The <ph id=\"ph1\">`code`</ph> tag preserves line breaks and indentation for longer examples.","source":"The `code` tag preserves line breaks and indentation for longer examples."},{"pos":[5038,5050],"content":"&lt;para&gt;","linkify":"&lt;para&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>para<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,12],"source":"&lt;para&gt;"}]},{"content":"You use the <ph id=\"ph1\">`&lt;para&gt;`</ph> tag to format the content within its parent tag.","pos":[5052,5121],"source":"You use the `<para>` tag to format the content within its parent tag."},{"content":"<ph id=\"ph1\">`&lt;para&gt;`</ph> is usually used inside a tag, such as <ph id=\"ph2\">`&lt;remarks&gt;`</ph> or <ph id=\"ph3\">`&lt;returns&gt;`</ph>, to divide text into paragraphs.","pos":[5122,5228],"source":"`<para>` is usually used inside a tag, such as `<remarks>` or `<returns>`, to divide text into paragraphs."},{"content":"You can format the contents of the <ph id=\"ph1\">`&lt;remarks&gt;`</ph> tag for your class definition.","pos":[5229,5306],"source":"\nYou can format the contents of the `<remarks>` tag for your class definition."},{"pos":[5308,5392],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Para Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/para-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Para Tag](../../samples/snippets/csharp/concepts/codedoc/para-tag.cs)]"},{"pos":[5398,5407],"content":"&lt;c&gt;","linkify":"&lt;c&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>c<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,9],"source":"&lt;c&gt;"}]},{"content":"Still on the topic of formatting, you use the <ph id=\"ph1\">`&lt;c&gt;`</ph> tag for marking part of text as code.","pos":[5409,5498],"source":"Still on the topic of formatting, you use the `<c>` tag for marking part of text as code."},{"content":"It's like the <ph id=\"ph1\">`&lt;code&gt;`</ph> tag but inline.","pos":[5499,5537],"source":"\nIt's like the `<code>` tag but inline."},{"content":"It's useful when you want to show a quick code example as part of a tag's content.","pos":[5538,5620]},{"content":"Let's update the documentation for the <ph id=\"ph1\">`Math`</ph> class.","pos":[5621,5673],"source":"\nLet's update the documentation for the `Math` class."},{"pos":[5675,5753],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>C Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/c-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[C Tag](../../samples/snippets/csharp/concepts/codedoc/c-tag.cs)]"},{"pos":[5759,5776],"content":"&lt;exception&gt;","linkify":"&lt;exception&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>exception<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,17],"source":"&lt;exception&gt;"}]},{"content":"By using the <ph id=\"ph1\">`&lt;exception&gt;`</ph> tag, you let your developers know that a method can throw specific exceptions.","pos":[5778,5883],"source":"By using the `<exception>` tag, you let your developers know that a method can throw specific exceptions."},{"content":"Looking at your <ph id=\"ph1\">`Math`</ph> library, you can see that both <ph id=\"ph2\">`Add`</ph> methods throw an exception if a certain condition is met.","pos":[5884,6001],"source":"\nLooking at your `Math` library, you can see that both `Add` methods throw an exception if a certain condition is met."},{"content":"Not so obvious, though, is that integer <ph id=\"ph1\">`Divide`</ph> method throws as well if the <ph id=\"ph2\">`b`</ph> parameter is zero.","pos":[6002,6102],"source":" Not so obvious, though,\nis that integer `Divide` method throws as well if the `b` parameter is zero."},{"content":"Now add exception documentation to this method.","pos":[6103,6150]},{"pos":[6152,6246],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Exception Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/exception-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Exception Tag](../../samples/snippets/csharp/concepts/codedoc/exception-tag.cs)]"},{"content":"The <ph id=\"ph1\">`cref`</ph> attribute represents a reference to an exception that is available from the current compilation environment.","pos":[6248,6367],"source":"The `cref` attribute represents a reference to an exception that is available from the current compilation environment."},{"content":"This can be any type defined in the project or a referenced assembly.","pos":[6368,6437],"source":"\nThis can be any type defined in the project or a referenced assembly."},{"content":"The compiler will issue a warning if its value cannot be resolved.","pos":[6438,6504]},{"pos":[6510,6521],"content":"&lt;see&gt;","linkify":"&lt;see&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>see<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,11],"source":"&lt;see&gt;"}]},{"content":"The <ph id=\"ph1\">`&lt;see&gt;`</ph> tag lets you create a clickable link to a documentation page for another code element.","pos":[6523,6621],"source":"The `<see>` tag lets you create a clickable link to a documentation page for another code element."},{"content":"In our next example, we'll create a clickable link between the two <ph id=\"ph1\">`Add`</ph> methods.","pos":[6622,6703],"source":" In our next example, we'll create a clickable link between the two `Add` methods."},{"pos":[6705,6787],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>See Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/see-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[See Tag](../../samples/snippets/csharp/concepts/codedoc/see-tag.cs)]"},{"content":"The <ph id=\"ph1\">`cref`</ph> is a <bpt id=\"p1\">**</bpt>required<ept id=\"p1\">**</ept> attribute that represents a reference to a type or its member that is available from the current compilation environment.","pos":[6789,6939],"source":"The `cref` is a **required** attribute that represents a reference to a type or its member that is available from the current compilation environment."},{"content":"This can be any type defined in the project or a referenced assembly.","pos":[6940,7010],"source":" \nThis can be any type defined in the project or a referenced assembly."},{"pos":[7016,7031],"content":"&lt;seealso&gt;","linkify":"&lt;seealso&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>seealso<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,15],"source":"&lt;seealso&gt;"}]},{"content":"You use the <ph id=\"ph1\">`&lt;seealso&gt;`</ph> tag in the same way you do the <ph id=\"ph2\">`&lt;see&gt;`</ph> tag.","pos":[7033,7100],"source":"You use the `<seealso>` tag in the same way you do the `<see>` tag."},{"content":"The only difference is that its content is typically placed in a \"See Also\" section.","pos":[7101,7185]},{"content":"Here we'll add a <ph id=\"ph1\">`seealso`</ph> tag on the integer <ph id=\"ph2\">`Add`</ph> method to reference other methods in the class that accept integer parameters:","pos":[7186,7316],"source":" Here we'll add a `seealso` tag on the integer `Add` method to reference other methods in the class that accept integer parameters:"},{"pos":[7318,7408],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Seealso Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/seealso-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Seealso Tag](../../samples/snippets/csharp/concepts/codedoc/seealso-tag.cs)]"},{"content":"The <ph id=\"ph1\">`cref`</ph> attribute represents a reference to a type or its member that is available from the current compilation environment.","pos":[7410,7537],"source":"The `cref` attribute represents a reference to a type or its member that is available from the current compilation environment."},{"content":"This can be any type defined in the project or a referenced assembly.","pos":[7538,7607],"source":"\nThis can be any type defined in the project or a referenced assembly."},{"pos":[7613,7626],"content":"&lt;param&gt;","linkify":"&lt;param&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>param<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,13],"source":"&lt;param&gt;"}]},{"content":"You use the <ph id=\"ph1\">`&lt;param&gt;`</ph> tag to describe a method's parameters.","pos":[7628,7688],"source":"You use the `<param>` tag to describe a method's parameters."},{"content":"Here's an example on the double <ph id=\"ph1\">`Add`</ph> method: The parameter the tag describes is specified in the <bpt id=\"p1\">**</bpt>required<ept id=\"p1\">**</ept> <ph id=\"ph2\">`name`</ph> attribute.","pos":[7689,7817],"source":" Here's an example on the double `Add` method:\nThe parameter the tag describes is specified in the **required** `name` attribute."},{"pos":[7819,7905],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Param Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/param-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Param Tag](../../samples/snippets/csharp/concepts/codedoc/param-tag.cs)]"},{"pos":[7911,7928],"content":"&lt;typeparam&gt;","linkify":"&lt;typeparam&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>typeparam<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,17],"source":"&lt;typeparam&gt;"}]},{"content":"You use <ph id=\"ph1\">`&lt;typeparam&gt;`</ph> tag just like the <ph id=\"ph2\">`&lt;param&gt;`</ph> tag but for generic type or method declarations to describe a generic parameter.","pos":[7930,8060],"source":"You use `<typeparam>` tag just like the `<param>` tag but for generic type or method declarations to describe a generic parameter."},{"content":"Add a quick generic method to your <ph id=\"ph1\">`Math`</ph> class to check if one quantity is greater than another.","pos":[8061,8158],"source":"\nAdd a quick generic method to your `Math` class to check if one quantity is greater than another."},{"pos":[8160,8254],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Typeparam Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/typeparam-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Typeparam Tag](../../samples/snippets/csharp/concepts/codedoc/typeparam-tag.cs)]"},{"pos":[8260,8276],"content":"&lt;paramref&gt;","linkify":"&lt;paramref&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>paramref<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,16],"source":"&lt;paramref&gt;"}]},{"content":"Sometimes you might be in the middle of describing what a method does in what could be a <ph id=\"ph1\">`&lt;summary&gt;`</ph> tag, and you might want to make a reference to a parameter.","pos":[8278,8438],"source":"Sometimes you might be in the middle of describing what a method does in what could be a `<summary>` tag, and you might want to make a reference\nto a parameter."},{"content":"The <ph id=\"ph1\">`&lt;paramref&gt;`</ph> tag is great for just this.","pos":[8439,8483],"source":" The `<paramref>` tag is great for just this."},{"content":"Let's update the summary of our double based <ph id=\"ph1\">`Add`</ph> method.","pos":[8484,8542],"source":" Let's update the summary of our double based `Add` method."},{"content":"Like the <ph id=\"ph1\">`&lt;param&gt;`</ph> tag the parameter name is specified in the <bpt id=\"p1\">**</bpt>required<ept id=\"p1\">**</ept> <ph id=\"ph2\">`name`</ph> attribute.","pos":[8543,8635],"source":" Like the `<param>` tag\nthe parameter name is specified in the **required** `name` attribute."},{"pos":[8637,8729],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Paramref Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/paramref-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Paramref Tag](../../samples/snippets/csharp/concepts/codedoc/paramref-tag.cs)]"},{"pos":[8735,8755],"content":"&lt;typeparamref&gt;","linkify":"&lt;typeparamref&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>typeparamref<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,20],"source":"&lt;typeparamref&gt;"}]},{"content":"You use <ph id=\"ph1\">`&lt;typeparamref&gt;`</ph> tag just like the <ph id=\"ph2\">`&lt;paramref&gt;`</ph> tag but for generic type or method declarations to describe a generic parameter.","pos":[8757,8893],"source":"You use `<typeparamref>` tag just like the `<paramref>` tag but for generic type or method declarations to describe a generic parameter."},{"content":"You can use the same generic method you previously created.","pos":[8894,8953],"source":"\nYou can use the same generic method you previously created."},{"pos":[8955,9055],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Typeparamref Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/typeparamref-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Typeparamref Tag](../../samples/snippets/csharp/concepts/codedoc/typeparamref-tag.cs)]"},{"pos":[9061,9073],"content":"&lt;list&gt;","linkify":"&lt;list&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>list<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,12],"source":"&lt;list&gt;"}]},{"content":"You use the <ph id=\"ph1\">`&lt;list&gt;`</ph> tag to format documentation information as an ordered list, unordered list or table.","pos":[9075,9180],"source":"You use the `<list>` tag to format documentation information as an ordered list, unordered list or table."},{"content":"Make an unordered list of every math operation your <ph id=\"ph1\">`Math`</ph> library supports.","pos":[9181,9257],"source":"\nMake an unordered list of every math operation your `Math` library supports."},{"pos":[9259,9343],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>List Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/list-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[List Tag](../../samples/snippets/csharp/concepts/codedoc/list-tag.cs)]"},{"pos":[9345,9453],"content":"You can make an ordered list or table by changing the <ph id=\"ph1\">`type`</ph> attribute to <ph id=\"ph2\">`number`</ph> or <ph id=\"ph3\">`table`</ph>, respectively.","source":"You can make an ordered list or table by changing the `type` attribute to `number` or `table`, respectively."},{"pos":[9459,9482],"content":"Putting it all together","linkify":"Putting it all together","nodes":[{"content":"Putting it all together","pos":[0,23]}]},{"content":"If you've followed this tutorial and applied the tags to your code where necessary, your code should now look similar to the following:","pos":[9484,9619]},{"pos":[9621,9717],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Tagged Library<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/tagged-library.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Tagged Library](../../samples/snippets/csharp/concepts/codedoc/tagged-library.cs)]"},{"content":"From your code, you can generate a detailed documentation website complete with clickable cross-references.","pos":[9719,9826]},{"content":"But you're faced with another problem: your code has become hard to read.","pos":[9827,9900]},{"content":"There's so much information to sift through that this is going to be a nightmare for any developer who wants to contribute to this code.","pos":[9901,10037],"source":"\nThere's so much information to sift through that this is going to be a nightmare for any developer who wants to contribute to this code."},{"content":"Thankfully there's an XML tag that can help you deal with this:","pos":[10038,10102],"source":" \nThankfully there's an XML tag that can help you deal with this:"},{"pos":[10108,10123],"content":"&lt;include&gt;","linkify":"&lt;include&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>include<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,15],"source":"&lt;include&gt;"}]},{"pos":[10125,10331],"content":"The <ph id=\"ph1\">`&lt;include&gt;`</ph> tag lets you refer to comments in a separate XML file that describe the types and members in your source code, as opposed to placing documentation comments directly in your source code file.","source":"The `<include>` tag lets you refer to comments in a separate XML file that describe the types and members in your source code, as opposed to placing documentation comments directly in your source code file."},{"content":"Now you're going to move all your XML tags into a separate XML file named <ph id=\"ph1\">`docs.xml`</ph>.","pos":[10333,10418],"source":"Now you're going to move all your XML tags into a separate XML file named `docs.xml`."},{"content":"Feel free to name the file whatever you want.","pos":[10419,10464]},{"pos":[10466,10549],"content":"<bpt id=\"p1\">[!code-xml</bpt><bpt id=\"p2\">[</bpt>Sample XML<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/include.xml)</ept><ept id=\"p1\">]</ept>","source":"[!code-xml[Sample XML](../../samples/snippets/csharp/concepts/codedoc/include.xml)]"},{"content":"In the above XML, each member's documentation comments appear directly inside a tag named after what they do.","pos":[10551,10660]},{"content":"You can choose your own strategy.","pos":[10661,10694]},{"content":"Now that you have your XML comments in a separate file, let's see how your code can be made more readable by using the <ph id=\"ph1\">`&lt;include&gt;`</ph> tag:","pos":[10695,10831],"source":" \nNow that you have your XML comments in a separate file, let's see how your code can be made more readable by using the `<include>` tag:"},{"pos":[10833,10923],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Include Tag<ept id=\"p2\">](../../samples/snippets/csharp/concepts/codedoc/include-tag.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Include Tag](../../samples/snippets/csharp/concepts/codedoc/include-tag.cs)]"},{"content":"And there you have it: our code is back to being readable, and no documentation information has been lost.","pos":[10925,11031]},{"pos":[11034,11124],"content":"The <ph id=\"ph1\">`filename`</ph> attribute represents the name of the XML file containing the documentation.","source":"The `filename` attribute represents the name of the XML file containing the documentation."},{"pos":[11126,11279],"content":"The <ph id=\"ph1\">`path`</ph> attribute represents an <bpt id=\"p1\">[</bpt>XPath<ept id=\"p1\">](https://msdn.microsoft.com/library/ms256115.aspx)</ept> query to the <ph id=\"ph2\">`tag name`</ph> present in the specified <ph id=\"ph3\">`filename`</ph>.","source":"The `path` attribute represents an [XPath](https://msdn.microsoft.com/library/ms256115.aspx) query to the `tag name` present in the specified `filename`."},{"pos":[11281,11370],"content":"The <ph id=\"ph1\">`name`</ph> attribute represents the name specifier in the tag that precedes the comments.","source":"The `name` attribute represents the name specifier in the tag that precedes the comments."},{"pos":[11372,11485],"content":"The <ph id=\"ph1\">`id`</ph> attribute which can be used in place of <ph id=\"ph2\">`name`</ph> represents the ID for the tag that precedes the comments.","source":"The `id` attribute which can be used in place of `name` represents the ID for the tag that precedes the comments."},{"pos":[11491,11508],"content":"User Defined Tags","linkify":"User Defined Tags","nodes":[{"content":"User Defined Tags","pos":[0,17]}]},{"content":"All the tags outlined above represent those that are recognized by the C# compiler.","pos":[11510,11593]},{"content":"However, a user is free to define their own tags.","pos":[11594,11643]},{"content":"Tools like Sandcastle bring support for extra tags like <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`&lt;event&gt;`</ph><ept id=\"p1\">](http://ewsoftware.github.io/XMLCommentsGuide/html/81bf7ad3-45dc-452f-90d5-87ce2494a182.htm)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`&lt;note&gt;`</ph><ept id=\"p2\">](http://ewsoftware.github.io/XMLCommentsGuide/html/4302a60f-e4f4-4b8d-a451-5f453c4ebd46.htm)</ept> and even support <bpt id=\"p3\">[</bpt>documenting namespaces<ept id=\"p3\">](http://ewsoftware.github.io/XMLCommentsGuide/html/BD91FAD4-188D-4697-A654-7C07FD47EF31.htm)</ept>.","pos":[11644,12042],"source":"\nTools like Sandcastle bring support for extra tags like [`<event>`](http://ewsoftware.github.io/XMLCommentsGuide/html/81bf7ad3-45dc-452f-90d5-87ce2494a182.htm), [`<note>`](http://ewsoftware.github.io/XMLCommentsGuide/html/4302a60f-e4f4-4b8d-a451-5f453c4ebd46.htm)\nand even support [documenting namespaces](http://ewsoftware.github.io/XMLCommentsGuide/html/BD91FAD4-188D-4697-A654-7C07FD47EF31.htm)."},{"content":"Custom or in-house documentation generation tools can also be used with the standard tags and multiple output formats from HTML to PDF can be supported.","pos":[12043,12195],"source":"\nCustom or in-house documentation generation tools can also be used with the standard tags and multiple output formats from HTML to PDF can be supported."},{"pos":[12200,12215],"content":"Recommendations","linkify":"Recommendations","nodes":[{"content":"Recommendations","pos":[0,15]}]},{"content":"Documenting code is recommended for many reasons.","pos":[12217,12266]},{"content":"What follows are some best practices, general use case scenarios, and things that you should know when using XML documentation tags in your C# code.","pos":[12267,12415]},{"content":"For the sake of consistency, all publicly visible types and their members should be documented.","pos":[12419,12514]},{"content":"If you must do it, do it all.","pos":[12515,12544]},{"content":"Private members can also be documented using XML comments.","pos":[12547,12605]},{"content":"However, this exposes the inner (potentially confidential) workings of your library.","pos":[12606,12690]},{"pos":[12693,12813],"content":"At a bare minimum, types and their members should have a <ph id=\"ph1\">`&lt;summary&gt;`</ph> tag because its content is needed for IntelliSense.","source":"At a bare minimum, types and their members should have a `<summary>` tag because its content is needed for IntelliSense."},{"content":"Documentation text should be written using complete sentences ending with full stops.","pos":[12816,12901]},{"content":"Partial classes are fully supported, and documentation information will be concatenated into a single entry for that type.","pos":[12904,13026]},{"pos":[13029,13152],"content":"The compiler verifies the syntax of the <ph id=\"ph1\">`&lt;exception&gt;`</ph>, <ph id=\"ph2\">`&lt;include&gt;`</ph>, <ph id=\"ph3\">`&lt;param&gt;`</ph>, <ph id=\"ph4\">`&lt;see&gt;`</ph>, <ph id=\"ph5\">`&lt;seealso&gt;`</ph> and <ph id=\"ph6\">`&lt;typeparam&gt;`</ph> tags.","source":"The compiler verifies the syntax of the `<exception>`, `<include>`, `<param>`, `<see>`, `<seealso>` and `<typeparam>` tags."},{"content":"The compiler validates the parameters that contain file paths and references to other parts of the code.","pos":[13155,13259]},{"pos":[13264,13272],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[13273,13380],"content":"<bpt id=\"p1\">[</bpt>XML Documentation Comments (C# Programming Guide)<ept id=\"p1\">](programming-guide/xmldoc/xml-documentation-comments.md)</ept>","source":"[XML Documentation Comments (C# Programming Guide)](programming-guide/xmldoc/xml-documentation-comments.md)"},{"pos":[13382,13523],"content":"<bpt id=\"p1\">[</bpt>Recommended Tags for Documentation Comments (C# Programming Guide)<ept id=\"p1\">](programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)</ept>","source":"[Recommended Tags for Documentation Comments (C# Programming Guide)](programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)"}]}