{"content":"---\ntitle: \"How to: Project an Object Graph (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 9451eb47-6a31-49d7-84df-73368c618422\n---\n# How to: Project an Object Graph (Visual Basic)\nThis topic illustrates how to project, or populate, an object graph from XML.  \n  \n## Example  \n The following code populates an object graph with the `Address`, `PurchaseOrder`, and `PurchaseOrderItem` classes from the [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md) XML document.  \n  \n```vb  \nClass Address  \n    Public Enum AddressUse  \n        Shipping  \n        Billing  \n    End Enum  \n  \n    Private addressTypeVal As AddressUse  \n    Private nameVal As String  \n    Private streetVal As String  \n    Private cityVal As String  \n    Private stateVal As String  \n    Private zipVal As String  \n    Private countryVal As String  \n  \n    Public Property AddressType() As AddressUse  \n        Get  \n            Return addressTypeVal  \n        End Get  \n        Set(ByVal value As AddressUse)  \n            addressTypeVal = value  \n        End Set  \n    End Property  \n  \n    Public Property Name() As String  \n        Get  \n            Return nameVal  \n        End Get  \n        Set(ByVal value As String)  \n            nameVal = value  \n        End Set  \n    End Property  \n  \n    Public Property Street() As String  \n        Get  \n            Return streetVal  \n        End Get  \n        Set(ByVal value As String)  \n            streetVal = value  \n        End Set  \n    End Property  \n  \n    Public Property City() As String  \n        Get  \n            Return cityVal  \n        End Get  \n        Set(ByVal value As String)  \n            cityVal = value  \n        End Set  \n    End Property  \n  \n    Public Property State() As String  \n        Get  \n            Return stateVal  \n        End Get  \n        Set(ByVal value As String)  \n            stateVal = value  \n        End Set  \n    End Property  \n  \n    Public Property Zip() As String  \n        Get  \n            Return zipVal  \n        End Get  \n        Set(ByVal value As String)  \n            zipVal = value  \n        End Set  \n    End Property  \n  \n    Public Property Country() As String  \n        Get  \n            Return countryVal  \n        End Get  \n        Set(ByVal value As String)  \n            countryVal = value  \n        End Set  \n    End Property  \n  \n    Public Overrides Function ToString() As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        sb.Append(String.Format(\"Type: {0}\" + vbNewLine, _  \n            IIf(AddressType = AddressUse.Shipping, \"Shipping\", \"Billing\")))  \n        sb.Append(String.Format(\"Name: {0}\" + vbNewLine, Name))  \n        sb.Append(String.Format(\"Street: {0}\" + vbNewLine, Street))  \n        sb.Append(String.Format(\"City: {0}\" + vbNewLine, City))  \n        sb.Append(String.Format(\"State: {0}\" + vbNewLine, State))  \n        sb.Append(String.Format(\"Zip: {0}\" + vbNewLine, Zip))  \n        sb.Append(String.Format(\"Country: {0}\" + vbNewLine, Country))  \n        Return sb.ToString()  \n    End Function  \nEnd Class  \n  \nClass PurchaseOrderItem  \n    Private partNumberVal As String  \n    Private productNameVal As String  \n    Private quantityVal As Integer  \n    Private usPriceVal As Decimal  \n    Private commentVal As String  \n    Private shipDateVal As DateTime  \n  \n    Public Property PartNumber() As String  \n        Get  \n            Return partNumberVal  \n        End Get  \n        Set(ByVal value As String)  \n            partNumberVal = value  \n        End Set  \n    End Property  \n  \n    Public Property ProductName() As String  \n        Get  \n            Return productNameVal  \n        End Get  \n        Set(ByVal value As String)  \n            productNameVal = value  \n        End Set  \n    End Property  \n  \n    Public Property Quantity() As Integer  \n        Get  \n            Return quantityVal  \n        End Get  \n        Set(ByVal value As Integer)  \n            quantityVal = value  \n        End Set  \n    End Property  \n  \n    Public Property USPrice() As Decimal  \n        Get  \n            Return usPriceVal  \n        End Get  \n        Set(ByVal value As Decimal)  \n            usPriceVal = value  \n        End Set  \n    End Property  \n  \n    Public Property Comment() As String  \n        Get  \n            Return commentVal  \n        End Get  \n        Set(ByVal value As String)  \n            commentVal = value  \n        End Set  \n    End Property  \n  \n    Public Property ShipDate() As DateTime  \n        Get  \n            Return shipDateVal  \n        End Get  \n        Set(ByVal value As DateTime)  \n            shipDateVal = value  \n        End Set  \n    End Property  \n  \n    Public Overrides Function ToString() As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        sb.Append(String.Format(\"PartNumber: {0}\" + vbNewLine, PartNumber))  \n        sb.Append(String.Format(\"ProductName: {0}\" + vbNewLine, ProductName))  \n        sb.Append(String.Format(\"Quantity: {0}\" + vbNewLine, Quantity))  \n        sb.Append(String.Format(\"USPrice: {0}\" + vbNewLine, USPrice))  \n        If (Comment <> Nothing) Then  \n            sb.Append(String.Format(\"Comment: {0}\" + vbNewLine, Comment))  \n        End If  \n        If (ShipDate <> DateTime.MinValue) Then  \n            sb.Append(String.Format(\"ShipDate: {0:d}\" + vbNewLine, ShipDate))  \n        End If  \n        Return sb.ToString()  \n    End Function  \nEnd Class  \n  \nClass PurchaseOrder  \n    Private purchaseOrderNumberVal As String  \n    Private orderDateVal As DateTime  \n    Private commentVal As String  \n    Private addressesVal As List(Of Address)  \n    Private itemsVal As List(Of PurchaseOrderItem)  \n  \n    Public Property PurchaseOrderNumber() As String  \n        Get  \n            Return purchaseOrderNumberVal  \n        End Get  \n        Set(ByVal value As String)  \n            purchaseOrderNumberVal = value  \n        End Set  \n    End Property  \n  \n    Public Property OrderDate() As DateTime  \n        Get  \n            Return orderDateVal  \n        End Get  \n        Set(ByVal value As DateTime)  \n            orderDateVal = value  \n        End Set  \n    End Property  \n  \n    Public Property Comment() As String  \n        Get  \n            Return commentVal  \n        End Get  \n        Set(ByVal value As String)  \n            commentVal = value  \n        End Set  \n    End Property  \n  \n    Public Property Addresses() As List(Of Address)  \n        Get  \n            Return addressesVal  \n        End Get  \n        Set(ByVal value As List(Of Address))  \n            addressesVal = value  \n        End Set  \n    End Property  \n  \n    Public Property Items() As List(Of PurchaseOrderItem)  \n        Get  \n            Return itemsVal  \n        End Get  \n        Set(ByVal value As List(Of PurchaseOrderItem))  \n            itemsVal = value  \n        End Set  \n    End Property  \n  \n    Public Overrides Function ToString() As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        sb.Append(String.Format(\"PurchaseOrderNumber: {0}\" _  \n                    + vbNewLine, PurchaseOrderNumber))  \n        sb.Append(String.Format(\"OrderDate: {0:d}\" + vbNewLine, OrderDate))  \n        sb.Append(vbNewLine)  \n        sb.Append(\"Addresses\" + vbNewLine)  \n        sb.Append(\"=====\" + vbNewLine)  \n        For Each address As Address In Addresses  \n            sb.Append(address)  \n            sb.Append(vbNewLine)  \n        Next  \n        sb.Append(\"Items\" + vbNewLine)  \n        sb.Append(\"=====\" + vbNewLine)  \n        For Each item As PurchaseOrderItem In Items  \n            sb.Append(item)  \n            sb.Append(vbNewLine)  \n        Next  \n        Return sb.ToString()  \n    End Function  \nEnd Class  \n  \nSub Main()  \n    Dim po As XElement = XElement.Load(\"PurchaseOrder.xml\")  \n    Dim purchOrder = New PurchaseOrder With { _  \n        .PurchaseOrderNumber = po.@<PurchaseOrderNumber>, _  \n        .OrderDate = Convert.ToDateTime(po.@<OrderDate>), _  \n        .Addresses = ( _  \n            From a In po.<Address> _  \n            Select New Address With { _  \n                .AddressType = IIf(a.@<Type> = \"Shipping\", _  \n                                   Address.AddressUse.Shipping, _  \n                                   Address.AddressUse.Billing), _  \n                .Name = a.<Name>.Value, _  \n                .Street = a.<Street>.Value, _  \n                .City = a.<City>.Value, _  \n                .State = a.<State>.Value, _  \n                .Zip = a.<Zip>.Value, _  \n                .Country = a.<Country>.Value _  \n                } _  \n            ).ToList(), _  \n        .Items = ( _  \n            From i In po.<Items>.<Item> _  \n            Select New PurchaseOrderItem With { _  \n                .PartNumber = i.@<PartNumber>, _  \n                .ProductName = i.<ProductName>.Value, _  \n                .Quantity = i.<Quantity>.Value, _  \n                .USPrice = i.<USPrice>.Value, _  \n                .Comment = i.<Comment>.Value, _  \n                .ShipDate = IIf(i.<ShipDate>.Value <> Nothing, _  \n                            Convert.ToDateTime(i.<ShipDate>.Value), _  \n                            DateTime.MinValue) _  \n                } _  \n            ).ToList() _  \n    }  \n    Console.WriteLine(purchOrder)  \nEnd Sub  \n```  \n  \n In this example, the result of the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query is returned as an <xref:System.Collections.Generic.IEnumerable%601> of `PurchaseOrderItem`. The items in the `PurchaseOrder` class are of type <xref:System.Collections.Generic.IEnumerable%601> of `PurchaseOrderItem`. The code uses the <xref:System.Linq.Enumerable.ToList%2A> extension method to create a <xref:System.Collections.Generic.List%601> collection from the results of the query.  \n  \n The example produces the following output:  \n  \n```  \nPurchaseOrderNumber: 99503  \nOrderDate: 10/20/1999  \n  \nAddresses  \n=====  \nType: Shipping  \nName: Ellen Adams  \nStreet: 123 Maple Street  \nCity: Mill Valley  \nState: CA  \nZip: 10999  \nCountry: USA  \n  \nType: Billing  \nName: Tai Yee  \nStreet: 8 Oak Avenue  \nCity: Old Town  \nState: PA  \nZip: 95819  \nCountry: USA  \n  \nItems  \n=====  \nPartNumber: 872-AA  \nProductName: Lawnmower  \nQuantity: 1  \nUSPrice: 148.95  \nComment: Confirm this is electric  \n  \nPartNumber: 926-AA  \nProductName: Baby Monitor  \nQuantity: 2  \nUSPrice: 39.98  \nShipDate: 5/21/1999  \n```  \n  \n## See also\n\n- <xref:System.Linq.Enumerable.Select%2A>\n- <xref:System.Linq.Enumerable.ToList%2A>\n- [Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)\n","nodes":[{"pos":[4,128],"embed":true,"restype":"x-metadata","content":"title: \"How to: Project an Object Graph (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 9451eb47-6a31-49d7-84df-73368c618422","nodes":[{"content":"How to: Project an Object Graph (Visual Basic)","nodes":[{"pos":[0,46],"content":"How to: Project an Object Graph (Visual Basic)","nodes":[{"content":"How to: Project an Object Graph (Visual Basic)","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[135,181],"content":"How to: Project an Object Graph (Visual Basic)","linkify":"How to: Project an Object Graph (Visual Basic)","nodes":[{"content":"How to: Project an Object Graph (Visual Basic)","pos":[0,46]}]},{"content":"This topic illustrates how to project, or populate, an object graph from XML.","pos":[182,259]},{"pos":[268,275],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[279,583],"content":"The following code populates an object graph with the <ph id=\"ph1\">`Address`</ph>, <ph id=\"ph2\">`PurchaseOrder`</ph>, and <ph id=\"ph3\">`PurchaseOrderItem`</ph> classes from the <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept> XML document.","source":"The following code populates an object graph with the `Address`, `PurchaseOrder`, and `PurchaseOrderItem` classes from the [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md) XML document."},{"content":"In this example, the result of the <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query is returned as an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph3\">`PurchaseOrderItem`</ph>.","pos":[9325,9507],"source":"In this example, the result of the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query is returned as an <xref:System.Collections.Generic.IEnumerable%601> of `PurchaseOrderItem`."},{"content":"The items in the <ph id=\"ph1\">`PurchaseOrder`</ph> class are of type <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph3\">`PurchaseOrderItem`</ph>.","pos":[9508,9632],"source":" The items in the `PurchaseOrder` class are of type <xref:System.Collections.Generic.IEnumerable%601> of `PurchaseOrderItem`."},{"content":"The code uses the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> extension method to create a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> collection from the results of the query.","pos":[9633,9804],"source":" The code uses the <xref:System.Linq.Enumerable.ToList%2A> extension method to create a <xref:System.Collections.Generic.List%601> collection from the results of the query."},{"content":"The example produces the following output:","pos":[9811,9853]},{"pos":[10430,10438],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[10526,10693],"content":"<bpt id=\"p1\">[</bpt>Projections and Transformations (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","source":"[Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}