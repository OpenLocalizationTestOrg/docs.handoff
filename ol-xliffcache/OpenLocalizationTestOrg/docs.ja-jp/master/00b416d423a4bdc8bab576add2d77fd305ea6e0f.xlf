<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-render-on-a-per-frame-interval-using-compositiontarget.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00b416d423a4bdc8bab576add2d77fd305ea6e0f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\how-to-render-on-a-per-frame-interval-using-compositiontarget.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65b681785cefb18852c17eb46c7947b9f159eafe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d3bd6ae80c7afaa3b5422189f6d282938e2cfdb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Render on a Per Frame Interval Using CompositionTarget</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Render on a Per Frame Interval Using CompositionTarget</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation engine provides many features for creating frame-based animation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, there are application scenarios in which you need finer-grained control over rendering on a per frame basis.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.CompositionTarget&gt;</ph> object provides the ability to create custom animations based on a per-frame callback.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.CompositionTarget&gt;</ph> is a static class which represents the display surface on which your application is being drawn.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.CompositionTarget.Rendering&gt;</ph> event is raised each time the application's scene is drawn.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The rendering frame rate is the number of times the scene is drawn per second.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For a complete code sample using <ph id="ph1">&lt;xref:System.Windows.Media.CompositionTarget&gt;</ph>, see <bpt id="p1">[</bpt>Using the CompositionTarget Sample<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=160045)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.CompositionTarget.Rendering&gt;</ph> event fires during the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> rendering process.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example shows how you register an <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> delegate to the static <ph id="ph2">&lt;xref:System.Windows.Media.CompositionTarget.Rendering&gt;</ph> method on <ph id="ph3">&lt;xref:System.Windows.Media.CompositionTarget&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use your rendering event handler method to create custom drawing content.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This event handler method gets called once per frame.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each time that <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> marshals the persisted rendering data in the visual tree across to the composition scene graph, your event handler method is called.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In addition, if changes to the visual tree force updates to the composition scene graph, your event handler method is also called.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that your event handler method is called after layout has been computed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, you can modify layout in your event handler method, which means that layout will be computed once more before rendering.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example shows how you can provide custom drawing in a <ph id="ph1">&lt;xref:System.Windows.Media.CompositionTarget&gt;</ph> event handler method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this case, the background color of the <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> is drawn with a color value based on the coordinate position of the mouse.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you move the mouse inside the <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, its background color changes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In addition, the average frame rate is calculated, based on the current elapsed time and the total number of rendered frames.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You may discover that your custom drawing runs at different speeds on different computers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is because your custom drawing is not frame-rate independent.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Depending on the system you are running and the workload of that system, the <ph id="ph1">&lt;xref:System.Windows.Media.CompositionTarget.Rendering&gt;</ph> event may be called a different number of times per second.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For information on determining the graphics hardware capability and performance for a device that runs a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application, see <bpt id="p1">[</bpt>Graphics Rendering Tiers<ept id="p1">](../advanced/graphics-rendering-tiers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Adding or removing a rendering <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> delegate while the event is firing will be delayed until after the event is finished firing.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is consistent with how <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph>-based events are handled in the Common Language Runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Also note that rendering events are not guaranteed to be called in any particular order.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you have multiple <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> delegates that rely on a particular order, you should register a single <ph id="ph2">&lt;xref:System.Windows.Media.CompositionTarget.Rendering&gt;</ph> event and multiplex the delegates in the correct order yourself.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Graphics Rendering Overview<ept id="p1">](wpf-graphics-rendering-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>