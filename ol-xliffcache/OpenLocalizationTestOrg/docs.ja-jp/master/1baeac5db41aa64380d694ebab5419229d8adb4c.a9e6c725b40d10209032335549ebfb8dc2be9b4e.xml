{"content":"---\ntitle: \"ICLRTask Interface\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICLRTask\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRTask\"\nhelpviewer_keywords: \n  - \"ICLRTask interface [.NET Framework hosting]\"\nms.assetid: b3a44df3-578a-4451-b55e-70c8e7695f5e\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# ICLRTask Interface\nProvides methods that allow the host to make requests of the common language runtime (CLR), or to provide notification to the CLR about the associated task.  \n  \n## Methods  \n  \n|Method|Description|  \n|------------|-----------------|  \n|[Abort Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-abort-method.md)|Requests that the CLR abort the task that the current `ICLRTask` instance represents.|  \n|[ExitTask Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-exittask-method.md)|Notifies the CLR that the task associated with the current `ICLRTask` instance is ending, and attempts to shut the task down gracefully.|  \n|[GetMemStats Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-getmemstats-method.md)|Gets statistical information on the use of memory resources by the task represented by the current `ICLRTask` instance.|  \n|[LocksHeld Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-locksheld-method.md)|Gets the number of locks currently held on the task.|  \n|[NeedsPriorityScheduling Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-needspriorityscheduling-method.md)|Gets a value indicating whether the host should assign a high priority to rescheduling the task represented by the current `ICLRTask` instance.|  \n|[Reset Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-reset-method.md)|Informs the CLR that the host has completed a task, and enables the CLR to reuse the current `ICLRTask` instance to represent another task.|  \n|[RudeAbort Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-rudeabort-method.md)|Causes the CLR to abort the task represented by the current `ICLRTask` instance immediately, without a guarantee that finalizers will be executed.|  \n|[SetTaskIdentifier Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-settaskidentifier-method.md)|Sets a unique identifier for the task represented by the current `ICLRTask` instance, for use in debugging.|  \n|[SwitchIn Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-switchin-method.md)|Notifies the CLR that the task represented by the current `ICLRTask` instance is in an operable state.|  \n|[SwitchOut Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-switchout-method.md)|Notifies the CLR that the task represented by the current `ICLRTask` instance is no longer in an operable state.|  \n|[YieldTask Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-yieldtask-method.md)|Requests that the CLR make processor time available to other tasks. The CLR makes no guarantee that the task will be put in a state where it can yield processing time.|  \n  \n## Remarks  \n An `ICLRTask` is the representation of a task for the CLR. At any point during code execution, a task can be described either as running or waiting to run. The host calls the `ICLRTask::SwitchIn` method to notify the CLR that the task that the current `ICLRTask` instance represents is now in an operable state. After a call to `ICLRTask::SwitchIn`, the host can schedule the task on any operating system thread, except in cases where the runtime requires thread-affinity, as specified by calls to the [IHostTaskManager::BeginThreadAffinity](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-beginthreadaffinity-method.md) and [IHostTaskManager::EndThreadAffinity](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-endthreadaffinity-method.md) methods. Some time later, the operating system might decide to remove the task from the thread and place it in a non-running state. For example, this might happen whenever the task blocks on synchronization primitives, or waits for I/O operations to complete. The host calls [SwitchOut](../../../../docs/framework/unmanaged-api/hosting/iclrtask-switchout-method.md) to notify the CLR that the task represented by the current `ICLRTask` instance is no longer in an operable state.  \n  \n A task typically terminates at the end of code execution. At that time, the host calls `ICLRTask::ExitTask` to destroy the associated `ICLRTask`. However, tasks can also be recycled by using a call to `ICLRTask::Reset`, which allows the `ICLRTask` instance to be used again. This approach prevents the overhead of repeatedly creating and destroying instances.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** MSCorEE.h  \n  \n **Library:** Included as a resource in MSCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See also\n\n- [ICLRTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtaskmanager-interface.md)\n- [IHostTask Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)\n- [IHostTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-interface.md)\n- [Hosting Interfaces](../../../../docs/framework/unmanaged-api/hosting/hosting-interfaces.md)\n- [ICLRTask2 Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtask2-interface.md)\n","nodes":[{"pos":[4,349],"embed":true,"restype":"x-metadata","content":"title: \"ICLRTask Interface\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICLRTask\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRTask\"\nhelpviewer_keywords: \n  - \"ICLRTask interface [.NET Framework hosting]\"\nms.assetid: b3a44df3-578a-4451-b55e-70c8e7695f5e\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"ICLRTask Interface","nodes":[{"pos":[0,18],"content":"ICLRTask Interface","nodes":[{"content":"ICLRTask Interface","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[356,374],"content":"ICLRTask Interface","linkify":"ICLRTask Interface","nodes":[{"content":"ICLRTask Interface","pos":[0,18]}]},{"content":"Provides methods that allow the host to make requests of the common language runtime (CLR), or to provide notification to the CLR about the associated task.","pos":[375,531]},{"pos":[540,547],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[554,560]},{"content":"Description","pos":[561,572]},{"pos":[612,701],"content":"<bpt id=\"p1\">[</bpt>Abort Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-abort-method.md)</ept>","source":"[Abort Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-abort-method.md)"},{"pos":[702,787],"content":"Requests that the CLR abort the task that the current <ph id=\"ph1\">`ICLRTask`</ph> instance represents.","source":"Requests that the CLR abort the task that the current `ICLRTask` instance represents."},{"pos":[792,887],"content":"<bpt id=\"p1\">[</bpt>ExitTask Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-exittask-method.md)</ept>","source":"[ExitTask Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-exittask-method.md)"},{"pos":[888,1024],"content":"Notifies the CLR that the task associated with the current <ph id=\"ph1\">`ICLRTask`</ph> instance is ending, and attempts to shut the task down gracefully.","source":"Notifies the CLR that the task associated with the current `ICLRTask` instance is ending, and attempts to shut the task down gracefully."},{"pos":[1029,1130],"content":"<bpt id=\"p1\">[</bpt>GetMemStats Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-getmemstats-method.md)</ept>","source":"[GetMemStats Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-getmemstats-method.md)"},{"pos":[1131,1250],"content":"Gets statistical information on the use of memory resources by the task represented by the current <ph id=\"ph1\">`ICLRTask`</ph> instance.","source":"Gets statistical information on the use of memory resources by the task represented by the current `ICLRTask` instance."},{"pos":[1255,1352],"content":"<bpt id=\"p1\">[</bpt>LocksHeld Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-locksheld-method.md)</ept>","source":"[LocksHeld Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-locksheld-method.md)"},{"content":"Gets the number of locks currently held on the task.","pos":[1353,1405]},{"pos":[1410,1535],"content":"<bpt id=\"p1\">[</bpt>NeedsPriorityScheduling Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-needspriorityscheduling-method.md)</ept>","source":"[NeedsPriorityScheduling Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-needspriorityscheduling-method.md)"},{"pos":[1536,1679],"content":"Gets a value indicating whether the host should assign a high priority to rescheduling the task represented by the current <ph id=\"ph1\">`ICLRTask`</ph> instance.","source":"Gets a value indicating whether the host should assign a high priority to rescheduling the task represented by the current `ICLRTask` instance."},{"pos":[1684,1773],"content":"<bpt id=\"p1\">[</bpt>Reset Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-reset-method.md)</ept>","source":"[Reset Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-reset-method.md)"},{"pos":[1774,1913],"content":"Informs the CLR that the host has completed a task, and enables the CLR to reuse the current <ph id=\"ph1\">`ICLRTask`</ph> instance to represent another task.","source":"Informs the CLR that the host has completed a task, and enables the CLR to reuse the current `ICLRTask` instance to represent another task."},{"pos":[1918,2015],"content":"<bpt id=\"p1\">[</bpt>RudeAbort Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-rudeabort-method.md)</ept>","source":"[RudeAbort Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-rudeabort-method.md)"},{"pos":[2016,2162],"content":"Causes the CLR to abort the task represented by the current <ph id=\"ph1\">`ICLRTask`</ph> instance immediately, without a guarantee that finalizers will be executed.","source":"Causes the CLR to abort the task represented by the current `ICLRTask` instance immediately, without a guarantee that finalizers will be executed."},{"pos":[2167,2280],"content":"<bpt id=\"p1\">[</bpt>SetTaskIdentifier Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-settaskidentifier-method.md)</ept>","source":"[SetTaskIdentifier Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-settaskidentifier-method.md)"},{"pos":[2281,2388],"content":"Sets a unique identifier for the task represented by the current <ph id=\"ph1\">`ICLRTask`</ph> instance, for use in debugging.","source":"Sets a unique identifier for the task represented by the current `ICLRTask` instance, for use in debugging."},{"pos":[2393,2488],"content":"<bpt id=\"p1\">[</bpt>SwitchIn Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-switchin-method.md)</ept>","source":"[SwitchIn Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-switchin-method.md)"},{"pos":[2489,2591],"content":"Notifies the CLR that the task represented by the current <ph id=\"ph1\">`ICLRTask`</ph> instance is in an operable state.","source":"Notifies the CLR that the task represented by the current `ICLRTask` instance is in an operable state."},{"pos":[2596,2693],"content":"<bpt id=\"p1\">[</bpt>SwitchOut Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-switchout-method.md)</ept>","source":"[SwitchOut Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-switchout-method.md)"},{"pos":[2694,2806],"content":"Notifies the CLR that the task represented by the current <ph id=\"ph1\">`ICLRTask`</ph> instance is no longer in an operable state.","source":"Notifies the CLR that the task represented by the current `ICLRTask` instance is no longer in an operable state."},{"pos":[2811,2908],"content":"<bpt id=\"p1\">[</bpt>YieldTask Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-yieldtask-method.md)</ept>","source":"[YieldTask Method](../../../../docs/framework/unmanaged-api/hosting/iclrtask-yieldtask-method.md)"},{"content":"Requests that the CLR make processor time available to other tasks.","pos":[2909,2976]},{"content":"The CLR makes no guarantee that the task will be put in a state where it can yield processing time.","pos":[2977,3076]},{"pos":[3086,3093],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An <ph id=\"ph1\">`ICLRTask`</ph> is the representation of a task for the CLR.","pos":[3097,3155],"source":"An `ICLRTask` is the representation of a task for the CLR."},{"content":"At any point during code execution, a task can be described either as running or waiting to run.","pos":[3156,3252]},{"content":"The host calls the <ph id=\"ph1\">`ICLRTask::SwitchIn`</ph> method to notify the CLR that the task that the current <ph id=\"ph2\">`ICLRTask`</ph> instance represents is now in an operable state.","pos":[3253,3408],"source":" The host calls the `ICLRTask::SwitchIn` method to notify the CLR that the task that the current `ICLRTask` instance represents is now in an operable state."},{"content":"After a call to <ph id=\"ph1\">`ICLRTask::SwitchIn`</ph>, the host can schedule the task on any operating system thread, except in cases where the runtime requires thread-affinity, as specified by calls to the <bpt id=\"p1\">[</bpt>IHostTaskManager::BeginThreadAffinity<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-beginthreadaffinity-method.md)</ept> and <bpt id=\"p2\">[</bpt>IHostTaskManager::EndThreadAffinity<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-endthreadaffinity-method.md)</ept> methods.","pos":[3409,3881],"source":" After a call to `ICLRTask::SwitchIn`, the host can schedule the task on any operating system thread, except in cases where the runtime requires thread-affinity, as specified by calls to the [IHostTaskManager::BeginThreadAffinity](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-beginthreadaffinity-method.md) and [IHostTaskManager::EndThreadAffinity](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-endthreadaffinity-method.md) methods."},{"content":"Some time later, the operating system might decide to remove the task from the thread and place it in a non-running state.","pos":[3882,4004]},{"content":"For example, this might happen whenever the task blocks on synchronization primitives, or waits for I/O operations to complete.","pos":[4005,4132]},{"content":"The host calls <bpt id=\"p1\">[</bpt>SwitchOut<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-switchout-method.md)</ept> to notify the CLR that the task represented by the current <ph id=\"ph1\">`ICLRTask`</ph> instance is no longer in an operable state.","pos":[4133,4352],"source":" The host calls [SwitchOut](../../../../docs/framework/unmanaged-api/hosting/iclrtask-switchout-method.md) to notify the CLR that the task represented by the current `ICLRTask` instance is no longer in an operable state."},{"content":"A task typically terminates at the end of code execution.","pos":[4359,4416]},{"content":"At that time, the host calls <ph id=\"ph1\">`ICLRTask::ExitTask`</ph> to destroy the associated <ph id=\"ph2\">`ICLRTask`</ph>.","pos":[4417,4504],"source":" At that time, the host calls `ICLRTask::ExitTask` to destroy the associated `ICLRTask`."},{"content":"However, tasks can also be recycled by using a call to <ph id=\"ph1\">`ICLRTask::Reset`</ph>, which allows the <ph id=\"ph2\">`ICLRTask`</ph> instance to be used again.","pos":[4505,4633],"source":" However, tasks can also be recycled by using a call to `ICLRTask::Reset`, which allows the `ICLRTask` instance to be used again."},{"content":"This approach prevents the overhead of repeatedly creating and destroying instances.","pos":[4634,4718]},{"pos":[4727,4739],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4743,4847],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[4854,4875],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> MSCorEE.h","source":"**Header:** MSCorEE.h"},{"pos":[4882,4932],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Included as a resource in MSCorEE.dll","source":"**Library:** Included as a resource in MSCorEE.dll"},{"pos":[4939,5047],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[5056,5064],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5068,5174],"content":"<bpt id=\"p1\">[</bpt>ICLRTaskManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtaskmanager-interface.md)</ept>","source":"[ICLRTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtaskmanager-interface.md)"},{"pos":[5177,5271],"content":"<bpt id=\"p1\">[</bpt>IHostTask Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)</ept>","source":"[IHostTask Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)"},{"pos":[5274,5382],"content":"<bpt id=\"p1\">[</bpt>IHostTaskManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-interface.md)</ept>","source":"[IHostTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-interface.md)"},{"pos":[5385,5477],"content":"<bpt id=\"p1\">[</bpt>Hosting Interfaces<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/hosting-interfaces.md)</ept>","source":"[Hosting Interfaces](../../../../docs/framework/unmanaged-api/hosting/hosting-interfaces.md)"},{"pos":[5480,5574],"content":"<bpt id=\"p1\">[</bpt>ICLRTask2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask2-interface.md)</ept>","source":"[ICLRTask2 Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtask2-interface.md)"}]}