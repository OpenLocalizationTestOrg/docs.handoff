{"content":"---\ntitle: \"Using Activity Extensions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 500eb96a-c009-4247-b6b5-b36faffdf715\ncaps.latest.revision: 5\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Using Activity Extensions\nActivities can interact with workflow application extensions that allow the host to provide additional functionality that is not explicitly modeled in the workflow.  This topic describes how to create and use an extension to count the number of times the activity executes.  \n  \n### To use an activity extension to count executions  \n  \n1.  Open [!INCLUDE[vs2010](../../../includes/vs2010-md.md)]. Select **New**, **Project**. Under the **Visual C#** node, select **Workflow**.  Select **Workflow Console Application** from the list of templates. Name the project `Extensions`. Click **OK** to create the project.  \n  \n2.  Add a `using` statement in the Program.cs file for the **System.Collections.Generic** namespace.  \n  \n    ```  \n    using System.Collections.Generic;  \n  \n    ```  \n  \n3.  In the Program.cs file, create a new class named **ExecutionCountExtension**. The following code creates a workflow extension that tracks instance IDs when its **Register** method is called.  \n  \n    ```  \n    // This extension collects a list of workflow Ids  \n    public class ExecutionCountExtension  \n    {  \n        IList<Guid> instances = new List<Guid>();  \n  \n        public int ExecutionCount  \n        {  \n            get  \n            {  \n                return this.instances.Count;  \n            }  \n        }  \n  \n        public IEnumerable<Guid> InstanceIds  \n        {  \n            get  \n            {  \n                return this.instances;  \n            }  \n        }  \n  \n        public void Register(Guid activityInstanceId)  \n        {  \n            if (!this.instances.Contains<Guid>(activityInstanceId))  \n            {  \n                instances.Add(activityInstanceId);  \n            }  \n        }  \n    }  \n  \n    ```  \n  \n4.  Create an activity that consumes the **ExecutionCountExtension**. The following code defines an activity that retrieves the **ExecutionCountExtension** object from the runtime and calls its **Register** method when the activity executes.  \n  \n    ```  \n    // Activity that consumes an extension provided by the host. If the extension is available  \n    // in the context, it will invoke (in this case, registers the Id of the executing workflow)  \n    public class MyActivity: CodeActivity  \n    {  \n        protected override void Execute(CodeActivityContext context)  \n        {  \n            ExecutionCountExtension ext = context.GetExtension<ExecutionCountExtension>();  \n            if (ext != null)  \n            {  \n                ext.Register(context.WorkflowInstanceId);                         \n            }  \n  \n        }  \n    }  \n  \n    ```  \n  \n5.  Implement the activity in the **Main** method of the program.cs file. The following code contains methods to generate two different workflows, execute each workflow several times, and display the resulting data that is contained in the extension.  \n  \n    ```  \n    class Program  \n    {  \n        // Creates a workflow that uses the activity that consumes the extension  \n        static Activity CreateWorkflow1()  \n        {  \n            return new Sequence  \n            {  \n                Activities =  \n                {  \n                    new MyActivity()  \n                }  \n            };  \n        }  \n  \n        // Creates a workflow that uses two instances of the activity that consumes the extension  \n        static Activity CreateWorkflow2()  \n        {  \n            return new Sequence  \n            {  \n                Activities =  \n                {  \n                    new MyActivity(),  \n                    new MyActivity()  \n                }  \n            };  \n        }  \n  \n        static void Main(string[] args)  \n        {  \n            // create the extension   \n            ExecutionCountExtension executionCountExt = new ExecutionCountExtension();  \n  \n            // configure the first invoker and execute 3 times  \n            WorkflowInvoker invoker = new WorkflowInvoker(CreateWorkflow1());  \n            invoker.Extensions.Add(executionCountExt);                          \n            invoker.Invoke();  \n            invoker.Invoke();  \n            invoker.Invoke();  \n  \n            // configure the second invoker and execute 2 times  \n            WorkflowInvoker invoker2 = new WorkflowInvoker(CreateWorkflow2());  \n            invoker2.Extensions.Add(executionCountExt);  \n            invoker2.Invoke();  \n            invoker2.Invoke();  \n  \n            // show the data in the extension  \n            Console.WriteLine(\"Executed {0} times\", executionCountExt.ExecutionCount);  \n            executionCountExt.InstanceIds.ToList().ForEach(i => Console.WriteLine(\"...{0}\", i));  \n        }  \n    }  \n    ```","nodes":[{"pos":[12,54],"content":"Using Activity Extensions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Activity Extensions | Microsoft Docs","pos":[0,42]}]},{"pos":[319,344],"content":"Using Activity Extensions","linkify":"Using Activity Extensions","nodes":[{"content":"Using Activity Extensions","pos":[0,25]}]},{"content":"Activities can interact with workflow application extensions that allow the host to provide additional functionality that is not explicitly modeled in the workflow.","pos":[345,509]},{"content":"This topic describes how to create and use an extension to count the number of times the activity executes.","pos":[511,618]},{"pos":[628,676],"content":"To use an activity extension to count executions","linkify":"To use an activity extension to count executions","nodes":[{"content":"To use an activity extension to count executions","pos":[0,48]}]},{"content":"Open <ph id=\"ph1\">[!INCLUDE[vs2010](../../../includes/vs2010-md.md)]</ph>.","pos":[686,742],"source":"Open [!INCLUDE[vs2010](../../../includes/vs2010-md.md)]."},{"content":"Select <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Project<ept id=\"p2\">**</ept>.","pos":[743,771],"source":" Select **New**, **Project**."},{"content":"Under the <bpt id=\"p1\">**</bpt>Visual C#<ept id=\"p1\">**</ept> node, select <bpt id=\"p2\">**</bpt>Workflow<ept id=\"p2\">**</ept>.","pos":[772,822],"source":" Under the **Visual C#** node, select **Workflow**."},{"content":"Select <bpt id=\"p1\">**</bpt>Workflow Console Application<ept id=\"p1\">**</ept> from the list of templates.","pos":[824,891],"source":"  Select **Workflow Console Application** from the list of templates."},{"content":"Name the project <ph id=\"ph1\">`Extensions`</ph>.","pos":[892,922],"source":" Name the project `Extensions`."},{"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> to create the project.","pos":[923,958],"source":" Click **OK** to create the project."},{"pos":[968,1064],"content":"Add a <ph id=\"ph1\">`using`</ph> statement in the Program.cs file for the <bpt id=\"p1\">**</bpt>System.Collections.Generic<ept id=\"p1\">**</ept> namespace.","source":"Add a `using` statement in the Program.cs file for the **System.Collections.Generic** namespace."},{"content":"In the Program.cs file, create a new class named <bpt id=\"p1\">**</bpt>ExecutionCountExtension<ept id=\"p1\">**</ept>.","pos":[1140,1217],"source":"In the Program.cs file, create a new class named **ExecutionCountExtension**."},{"content":"The following code creates a workflow extension that tracks instance IDs when its <bpt id=\"p1\">**</bpt>Register<ept id=\"p1\">**</ept> method is called.","pos":[1218,1330],"source":" The following code creates a workflow extension that tracks instance IDs when its **Register** method is called."},{"content":"Create an activity that consumes the <bpt id=\"p1\">**</bpt>ExecutionCountExtension<ept id=\"p1\">**</ept>.","pos":[2096,2161],"source":"Create an activity that consumes the **ExecutionCountExtension**."},{"content":"The following code defines an activity that retrieves the <bpt id=\"p1\">**</bpt>ExecutionCountExtension<ept id=\"p1\">**</ept> object from the runtime and calls its <bpt id=\"p2\">**</bpt>Register<ept id=\"p2\">**</ept> method when the activity executes.","pos":[2162,2333],"source":" The following code defines an activity that retrieves the **ExecutionCountExtension** object from the runtime and calls its **Register** method when the activity executes."},{"content":"Implement the activity in the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> method of the program.cs file.","pos":[2962,3031],"source":"Implement the activity in the **Main** method of the program.cs file."},{"content":"The following code contains methods to generate two different workflows, execute each workflow several times, and display the resulting data that is contained in the extension.","pos":[3032,3208]}]}