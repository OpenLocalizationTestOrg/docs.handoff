{"content":"---\ntitle: \"Resume Statement | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Resume\"\n  - \"vb.ResumeNext\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Next statement, Resume\"\n  - \"Resume Next statement\"\n  - \"execution, resuming\"\n  - \"run-time errors, resuming after\"\n  - \"Resume statement, syntax\"\n  - \"errors [Visual Basic], resuming after\"\n  - \"Error statement, and Resume statement\"\n  - \"execution\"\n  - \"Resume statement\"\nms.assetid: e24d058b-1a5c-4274-acb9-7d295d3ea537\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Resume Statement\nResumes execution after an error-handling routine is finished.  \n  \n We suggest that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements. For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md).  \n  \n## Syntax  \n  \n```  \nResume [ Next | line ]  \n```  \n  \n## Parts  \n `Resume`  \n Required. If the error occurred in the same procedure as the error handler, execution resumes with the statement that caused the error. If the error occurred in a called procedure, execution resumes at the statement that last called out of the procedure containing the error-handling routine.  \n  \n `Next`  \n Optional. If the error occurred in the same procedure as the error handler, execution resumes with the statement immediately following the statement that caused the error. If the error occurred in a called procedure, execution resumes with the statement immediately following the statement that last called out of the procedure containing the error-handling routine (or `On Error Resume Next` statement).  \n  \n `line`  \n Optional. Execution resumes at the line specified in the required `line` argument. The `line` argument is a line label or line number and must be in the same procedure as the error handler.  \n  \n## Remarks  \n  \n> [!NOTE]\n>  We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements. For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md).  \n  \n If you use a `Resume` statement anywhere other than in an error-handling routine, an error occurs.  \n  \n The `Resume` statement cannot be used in any procedure that contains a `Try...Catch...Finally` statement.  \n  \n## Example  \n This example uses the `Resume` statement to end error handling in a procedure and then resume execution with the statement that caused the error. Error number 55 is generated to illustrate use of the `Resume` statement.  \n  \n [!code-vb[VbVbalrErrorHandling#16](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/resume-statement_1.vb)]  \n  \n## Requirements  \n **Namespace:** [Microsoft.VisualBasic](../../../visual-basic/language-reference/runtime-library-members.md)  \n  \n **Assembly:** Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)  \n  \n## See Also  \n [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)   \n [Error Statement](../../../visual-basic/language-reference/statements/error-statement.md)   \n [On Error Statement](../../../visual-basic/language-reference/statements/on-error-statement.md)","nodes":[{"pos":[4,849],"nodes":[{"content":"Resume Statement | Microsoft Docs","nodes":[{"pos":[0,33],"content":"Resume Statement | Microsoft Docs","nodes":[{"content":"Resume Statement | Microsoft Docs","pos":[0,33]}]}],"pos":[6,42],"yaml":true}],"content":"title: \"Resume Statement | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Resume\"\n  - \"vb.ResumeNext\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Next statement, Resume\"\n  - \"Resume Next statement\"\n  - \"execution, resuming\"\n  - \"run-time errors, resuming after\"\n  - \"Resume statement, syntax\"\n  - \"errors [Visual Basic], resuming after\"\n  - \"Error statement, and Resume statement\"\n  - \"execution\"\n  - \"Resume statement\"\nms.assetid: e24d058b-1a5c-4274-acb9-7d295d3ea537\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[856,872],"content":"Resume Statement","linkify":"Resume Statement","nodes":[{"content":"Resume Statement","pos":[0,16]}]},{"content":"Resumes execution after an error-handling routine is finished.","pos":[873,935]},{"content":"We suggest that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the <ph id=\"ph1\">`On Error`</ph> and <ph id=\"ph2\">`Resume`</ph> statements.","pos":[942,1121],"source":"We suggest that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.","pos":[1122,1266],"source":" For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)."},{"pos":[1275,1281],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1330,1335],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1351,1360]},{"content":"If the error occurred in the same procedure as the error handler, execution resumes with the statement that caused the error.","pos":[1361,1486]},{"content":"If the error occurred in a called procedure, execution resumes at the statement that last called out of the procedure containing the error-handling routine.","pos":[1487,1643]},{"content":"Optional.","pos":[1660,1669]},{"content":"If the error occurred in the same procedure as the error handler, execution resumes with the statement immediately following the statement that caused the error.","pos":[1670,1831]},{"content":"If the error occurred in a called procedure, execution resumes with the statement immediately following the statement that last called out of the procedure containing the error-handling routine (or <ph id=\"ph1\">`On Error Resume Next`</ph> statement).","pos":[1832,2064],"source":" If the error occurred in a called procedure, execution resumes with the statement immediately following the statement that last called out of the procedure containing the error-handling routine (or `On Error Resume Next` statement)."},{"content":"Optional.","pos":[2081,2090]},{"content":"Execution resumes at the line specified in the required <ph id=\"ph1\">`line`</ph> argument.","pos":[2091,2163],"source":" Execution resumes at the line specified in the required `line` argument."},{"content":"The <ph id=\"ph1\">`line`</ph> argument is a line label or line number and must be in the same procedure as the error handler.","pos":[2164,2270],"source":" The `line` argument is a line label or line number and must be in the same procedure as the error handler."},{"pos":[2279,2286],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2294,2631],"content":"[!NOTE]\n We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements. For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md).","leadings":["","> "],"nodes":[{"content":"We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements. For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md).","pos":[9,335],"nodes":[{"content":"We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the <ph id=\"ph1\">`On Error`</ph> and <ph id=\"ph2\">`Resume`</ph> statements.","pos":[0,181],"source":"We recommend that you use structured exception handling in your code whenever possible, rather than using unstructured exception handling and the `On Error` and `Resume` statements."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.","pos":[182,326],"source":" For more information, see [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)."}]}]},{"pos":[2638,2736],"content":"If you use a <ph id=\"ph1\">`Resume`</ph> statement anywhere other than in an error-handling routine, an error occurs.","source":"If you use a `Resume` statement anywhere other than in an error-handling routine, an error occurs."},{"pos":[2743,2848],"content":"The <ph id=\"ph1\">`Resume`</ph> statement cannot be used in any procedure that contains a <ph id=\"ph2\">`Try...Catch...Finally`</ph> statement.","source":"The `Resume` statement cannot be used in any procedure that contains a `Try...Catch...Finally` statement."},{"pos":[2857,2864],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">`Resume`</ph> statement to end error handling in a procedure and then resume execution with the statement that caused the error.","pos":[2868,3013],"source":"This example uses the `Resume` statement to end error handling in a procedure and then resume execution with the statement that caused the error."},{"content":"Error number 55 is generated to illustrate use of the <ph id=\"ph1\">`Resume`</ph> statement.","pos":[3014,3087],"source":" Error number 55 is generated to illustrate use of the `Resume` statement."},{"pos":[3094,3228],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrErrorHandling#16<ept id=\"p2\">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/resume-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrErrorHandling#16](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/resume-statement_1.vb)]"},{"pos":[3237,3249],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3253,3360],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt>Microsoft.VisualBasic<ept id=\"p2\">](../../../visual-basic/language-reference/runtime-library-members.md)</ept>","source":"**Namespace:** [Microsoft.VisualBasic](../../../visual-basic/language-reference/runtime-library-members.md)"},{"pos":[3367,3440],"content":"<bpt id=\"p1\">**</bpt>Assembly:<ept id=\"p1\">**</ept> Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)","source":"**Assembly:** Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)"},{"pos":[3449,3457],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3461,3579],"source":"[Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Error Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/error-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3583,3673],"source":"[Error Statement](../../../visual-basic/language-reference/statements/error-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>On Error Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept>","pos":[3677,3772],"source":"[On Error Statement](../../../visual-basic/language-reference/statements/on-error-statement.md)"}]}