{"content":"---\ntitle: \"Rendering a Windows Forms Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"custom controls [Windows Forms], rendering\"\n  - \"OnPaintBackground method [Windows Forms], invoking in Windows Forms custom controls\"\n  - \"custom controls [Windows Forms], graphics resources\"\n  - \"custom controls [Windows Forms], invalidation and painting\"\nms.assetid: aae8e1e6-4786-432b-a15e-f4c44760d302\n---\n# Rendering a Windows Forms Control\nRendering refers to the process of creating a visual representation on a user's screen. Windows Forms uses [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] (the new Windows graphics library) for rendering. The managed classes that provide access to [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] are in the <xref:System.Drawing?displayProperty=nameWithType> namespace and its subnamespaces.  \n  \n The following elements are involved in control rendering:  \n  \n-   The drawing functionality provided by the base class <xref:System.Windows.Forms.Control?displayProperty=nameWithType>.  \n  \n-   The essential elements of the [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] graphics library.  \n  \n-   The geometry of the drawing region.  \n  \n-   The procedure for freeing graphics resources.  \n  \n## Drawing Functionality Provided by Control  \n The base class <xref:System.Windows.Forms.Control> provides drawing functionality through its <xref:System.Windows.Forms.Control.Paint> event. A control raises the <xref:System.Windows.Forms.Control.Paint> event whenever it needs to update its display. For more information about events in the .NET Framework, see [Handling and Raising Events](../../../standard/events/index.md).  \n  \n The event data class for the <xref:System.Windows.Forms.Control.Paint> event, <xref:System.Windows.Forms.PaintEventArgs>, holds the data needed for drawing a control — a handle to a graphics object and a rectangle object that represents the region to draw in. These objects are shown in bold in the following code fragment.  \n  \n```vb  \nPublic Class PaintEventArgs  \n   Inherits EventArgs  \n   Implements IDisposable  \n  \n   Public ReadOnly Property ClipRectangle() As System.Drawing.Rectangle  \n      ...  \n   End Property  \n  \n   Public ReadOnly Property Graphics() As System.Drawing.Graphics  \n      ...  \n   End Property  \n   ' Other properties and methods.  \n   ...  \nEnd Class  \n```  \n  \n```csharp  \npublic class PaintEventArgs : EventArgs, IDisposable {  \npublic System.Drawing.Rectangle ClipRectangle {get;}  \npublic System.Drawing.Graphics Graphics {get;}  \n// Other properties and methods.  \n...  \n}  \n```  \n  \n <xref:System.Drawing.Graphics> is a managed class that encapsulates drawing functionality, as described in the discussion of [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] later in this topic. The <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> is an instance of the <xref:System.Drawing.Rectangle> structure and defines the available area in which a control can draw. A control developer can compute the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> using the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> property of a control, as described in the discussion of geometry later in this topic.  \n  \n A control must provide rendering logic by overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> method that it inherits from <xref:System.Windows.Forms.Control>. <xref:System.Windows.Forms.Control.OnPaint%2A> gets access to a graphics object and a rectangle to draw in through the <xref:System.Drawing.Design.PaintValueEventArgs.Graphics%2A> and the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> properties of the <xref:System.Windows.Forms.PaintEventArgs> instance passed to it.  \n  \n```vb  \nProtected Overridable Sub OnPaint(pe As PaintEventArgs)  \n```  \n  \n```csharp  \nprotected virtual void OnPaint(PaintEventArgs pe);  \n```  \n  \n The <xref:System.Windows.Forms.Control.OnPaint%2A> method of the base <xref:System.Windows.Forms.Control> class does not implement any drawing functionality but merely invokes the event delegates that are registered with the <xref:System.Windows.Forms.Control.Paint> event. When you override <xref:System.Windows.Forms.Control.OnPaint%2A>, you should typically invoke the <xref:System.Windows.Forms.Control.OnPaint%2A> method of the base class so that registered delegates receive the <xref:System.Windows.Forms.Control.Paint> event. However, controls that paint their entire surface should not invoke the base class's <xref:System.Windows.Forms.Control.OnPaint%2A>, as this introduces flicker. For an example of overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> event, see the [How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md).  \n  \n> [!NOTE]\n>  Do not invoke <xref:System.Windows.Forms.Control.OnPaint%2A> directly from your control; instead, invoke the <xref:System.Windows.Forms.Control.Invalidate%2A> method (inherited from <xref:System.Windows.Forms.Control>) or some other method that invokes <xref:System.Windows.Forms.Control.Invalidate%2A>. The <xref:System.Windows.Forms.Control.Invalidate%2A> method in turn invokes <xref:System.Windows.Forms.Control.OnPaint%2A>. The <xref:System.Windows.Forms.Control.Invalidate%2A> method is overloaded, and, depending on the arguments supplied to <xref:System.Windows.Forms.Control.Invalidate%2A> `e`, a control redraws either some or all of its screen area.  \n  \n The base <xref:System.Windows.Forms.Control> class defines another method that is useful for drawing — the <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method.  \n  \n```vb  \nProtected Overridable Sub OnPaintBackground(pevent As PaintEventArgs)  \n```  \n  \n```csharp  \nprotected virtual void OnPaintBackground(PaintEventArgs pevent);  \n```  \n  \n <xref:System.Windows.Forms.Control.OnPaintBackground%2A> paints the background (and thereby the shape) of the window and is guaranteed to be fast, while <xref:System.Windows.Forms.Control.OnPaint%2A> paints the details and might be slower because individual paint requests are combined into one <xref:System.Windows.Forms.Control.Paint> event that covers all areas that have to be redrawn. You might want to invoke the <xref:System.Windows.Forms.Control.OnPaintBackground%2A> if, for instance, you want to draw a gradient-colored background for your control.  \n  \n While <xref:System.Windows.Forms.Control.OnPaintBackground%2A> has an event-like nomenclature and takes the same argument as the `OnPaint` method, <xref:System.Windows.Forms.Control.OnPaintBackground%2A> is not a true event method. There is no `PaintBackground` event and <xref:System.Windows.Forms.Control.OnPaintBackground%2A> does not invoke event delegates. When overriding the <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method, a derived class is not required to invoke the <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method of its base class.  \n  \n## GDI+ Basics  \n The <xref:System.Drawing.Graphics> class provides methods for drawing various shapes such as circles, triangles, arcs, and ellipses, as well as methods for displaying text. The <xref:System.Drawing?displayProperty=nameWithType> namespace and its subnamespaces contain classes that encapsulate graphics elements such as shapes (circles, rectangles, arcs, and others), colors, fonts, brushes, and so on. For more information about [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)], see [Using Managed Graphics Classes](../advanced/using-managed-graphics-classes.md). The essentials of [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] are also described in the [How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md).  \n  \n## Geometry of the Drawing Region  \n The <xref:System.Windows.Forms.Control.ClientRectangle%2A> property of a control specifies the rectangular region available to the control on the user's screen, while the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> property of <xref:System.Windows.Forms.PaintEventArgs> specifies the area that is actually painted. (Remember that painting is done in the <xref:System.Windows.Forms.Control.Paint> event method that takes a <xref:System.Windows.Forms.PaintEventArgs> instance as its argument). A control might need to paint only a portion of its available area, as is the case when a small section of the control's display changes. In those situations, a control developer must compute the actual rectangle to draw in and pass that to <xref:System.Windows.Forms.Control.Invalidate%2A>. The overloaded versions of <xref:System.Windows.Forms.Control.Invalidate%2A> that take a <xref:System.Drawing.Rectangle> or <xref:System.Drawing.Region> as an argument use that argument to generate the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> property of <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n The following code fragment shows how the `FlashTrackBar` custom control computes the rectangular area to draw in. The `client` variable denotes the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> property. For a complete sample, see [How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md).  \n  \n [!code-csharp[System.Windows.Forms.FlashTrackBar#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FlashTrackBar/CS/FlashTrackBar.cs#6)]\n [!code-vb[System.Windows.Forms.FlashTrackBar#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FlashTrackBar/VB/FlashTrackBar.vb#6)]  \n  \n## Freeing Graphics Resources  \n Graphics objects are expensive because they use system resources. Such objects include instances of the <xref:System.Drawing.Graphics?displayProperty=nameWithType> class as well as instances of <xref:System.Drawing.Brush?displayProperty=nameWithType>, <xref:System.Drawing.Pen?displayProperty=nameWithType>, and other graphics classes. It is important that you create a graphics resource only when you need it and release it soon as you are finished using it. If you create a type that implements the <xref:System.IDisposable> interface, call its <xref:System.IDisposable.Dispose%2A> method when you are finished with it in order to free resources.  \n  \n The following code fragment shows how the `FlashTrackBar` custom control creates and releases a <xref:System.Drawing.Brush> resource. For the complete source code, see [How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md).  \n  \n [!code-csharp[System.Windows.Forms.FlashTrackBar#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FlashTrackBar/CS/FlashTrackBar.cs#5)]\n [!code-vb[System.Windows.Forms.FlashTrackBar#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FlashTrackBar/VB/FlashTrackBar.vb#5)]  \n  \n [!code-csharp[System.Windows.Forms.FlashTrackBar#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FlashTrackBar/CS/FlashTrackBar.cs#4)]\n [!code-vb[System.Windows.Forms.FlashTrackBar#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FlashTrackBar/VB/FlashTrackBar.vb#4)]  \n  \n [!code-csharp[System.Windows.Forms.FlashTrackBar#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FlashTrackBar/CS/FlashTrackBar.cs#3)]\n [!code-vb[System.Windows.Forms.FlashTrackBar#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FlashTrackBar/VB/FlashTrackBar.vb#3)]  \n  \n## See also\n\n- [How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md)\n","nodes":[{"pos":[4,435],"embed":true,"restype":"x-metadata","content":"title: \"Rendering a Windows Forms Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"custom controls [Windows Forms], rendering\"\n  - \"OnPaintBackground method [Windows Forms], invoking in Windows Forms custom controls\"\n  - \"custom controls [Windows Forms], graphics resources\"\n  - \"custom controls [Windows Forms], invalidation and painting\"\nms.assetid: aae8e1e6-4786-432b-a15e-f4c44760d302","nodes":[{"content":"Rendering a Windows Forms Control","nodes":[{"pos":[0,33],"content":"Rendering a Windows Forms Control","nodes":[{"content":"Rendering a Windows Forms Control","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[442,475],"content":"Rendering a Windows Forms Control","linkify":"Rendering a Windows Forms Control","nodes":[{"content":"Rendering a Windows Forms Control","pos":[0,33]}]},{"content":"Rendering refers to the process of creating a visual representation on a user's screen.","pos":[476,563]},{"content":"Windows Forms uses <ph id=\"ph1\">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> (the new Windows graphics library) for rendering.","pos":[564,692],"source":" Windows Forms uses [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] (the new Windows graphics library) for rendering."},{"content":"The managed classes that provide access to <ph id=\"ph1\">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> are in the <ph id=\"ph2\">&lt;xref:System.Drawing?displayProperty=nameWithType&gt;</ph> namespace and its subnamespaces.","pos":[693,890],"source":" The managed classes that provide access to [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] are in the <xref:System.Drawing?displayProperty=nameWithType> namespace and its subnamespaces."},{"content":"The following elements are involved in control rendering:","pos":[897,954]},{"pos":[964,1082],"content":"The drawing functionality provided by the base class <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control?displayProperty=nameWithType&gt;</ph>.","source":"The drawing functionality provided by the base class <xref:System.Windows.Forms.Control?displayProperty=nameWithType>."},{"pos":[1092,1199],"content":"The essential elements of the <ph id=\"ph1\">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> graphics library.","source":"The essential elements of the [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] graphics library."},{"content":"The geometry of the drawing region.","pos":[1209,1244]},{"content":"The procedure for freeing graphics resources.","pos":[1254,1299]},{"pos":[1308,1349],"content":"Drawing Functionality Provided by Control","linkify":"Drawing Functionality Provided by Control","nodes":[{"content":"Drawing Functionality Provided by Control","pos":[0,41]}]},{"content":"The base class <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control&gt;</ph> provides drawing functionality through its <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.","pos":[1353,1495],"source":"The base class <xref:System.Windows.Forms.Control> provides drawing functionality through its <xref:System.Windows.Forms.Control.Paint> event."},{"content":"A control raises the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event whenever it needs to update its display.","pos":[1496,1605],"source":" A control raises the <xref:System.Windows.Forms.Control.Paint> event whenever it needs to update its display."},{"content":"For more information about events in the .NET Framework, see <bpt id=\"p1\">[</bpt>Handling and Raising Events<ept id=\"p1\">](../../../standard/events/index.md)</ept>.","pos":[1606,1732],"source":" For more information about events in the .NET Framework, see [Handling and Raising Events](../../../standard/events/index.md)."},{"content":"The event data class for the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event, <ph id=\"ph2\">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>, holds the data needed for drawing a control — a handle to a graphics object and a rectangle object that represents the region to draw in.","pos":[1739,1998],"source":"The event data class for the <xref:System.Windows.Forms.Control.Paint> event, <xref:System.Windows.Forms.PaintEventArgs>, holds the data needed for drawing a control — a handle to a graphics object and a rectangle object that represents the region to draw in."},{"content":"These objects are shown in bold in the following code fragment.","pos":[1999,2062]},{"content":"<ph id=\"ph1\">&lt;xref:System.Drawing.Graphics&gt;</ph> is a managed class that encapsulates drawing functionality, as described in the discussion of <ph id=\"ph2\">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> later in this topic.","pos":[2661,2866],"source":"<xref:System.Drawing.Graphics> is a managed class that encapsulates drawing functionality, as described in the discussion of [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] later in this topic."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> is an instance of the <ph id=\"ph2\">&lt;xref:System.Drawing.Rectangle&gt;</ph> structure and defines the available area in which a control can draw.","pos":[2867,3054],"source":" The <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> is an instance of the <xref:System.Drawing.Rectangle> structure and defines the available area in which a control can draw."},{"content":"A control developer can compute the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> using the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> property of a control, as described in the discussion of geometry later in this topic.","pos":[3055,3307],"source":" A control developer can compute the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> using the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> property of a control, as described in the discussion of geometry later in this topic."},{"content":"A control must provide rendering logic by overriding the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method that it inherits from <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control&gt;</ph>.","pos":[3314,3483],"source":"A control must provide rendering logic by overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> method that it inherits from <xref:System.Windows.Forms.Control>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> gets access to a graphics object and a rectangle to draw in through the <ph id=\"ph2\">&lt;xref:System.Drawing.Design.PaintValueEventArgs.Graphics%2A&gt;</ph> and the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> properties of the <ph id=\"ph4\">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> instance passed to it.","pos":[3484,3815],"source":"<xref:System.Windows.Forms.Control.OnPaint%2A> gets access to a graphics object and a rectangle to draw in through the <xref:System.Drawing.Design.PaintValueEventArgs.Graphics%2A> and the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> properties of the <xref:System.Windows.Forms.PaintEventArgs> instance passed to it."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method of the base <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control&gt;</ph> class does not implement any drawing functionality but merely invokes the event delegates that are registered with the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.","pos":[3971,4244],"source":"The <xref:System.Windows.Forms.Control.OnPaint%2A> method of the base <xref:System.Windows.Forms.Control> class does not implement any drawing functionality but merely invokes the event delegates that are registered with the <xref:System.Windows.Forms.Control.Paint> event."},{"content":"When you override <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph>, you should typically invoke the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method of the base class so that registered delegates receive the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.","pos":[4245,4504],"source":" When you override <xref:System.Windows.Forms.Control.OnPaint%2A>, you should typically invoke the <xref:System.Windows.Forms.Control.OnPaint%2A> method of the base class so that registered delegates receive the <xref:System.Windows.Forms.Control.Paint> event."},{"content":"However, controls that paint their entire surface should not invoke the base class's <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph>, as this introduces flicker.","pos":[4505,4665],"source":" However, controls that paint their entire surface should not invoke the base class's <xref:System.Windows.Forms.Control.OnPaint%2A>, as this introduces flicker."},{"content":"For an example of overriding the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> event, see the <bpt id=\"p1\">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id=\"p1\">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>.","pos":[4666,4884],"source":" For an example of overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> event, see the [How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md)."},{"pos":[4892,5563],"content":"[!NOTE]\n Do not invoke <xref:System.Windows.Forms.Control.OnPaint%2A> directly from your control; instead, invoke the <xref:System.Windows.Forms.Control.Invalidate%2A> method (inherited from <xref:System.Windows.Forms.Control>) or some other method that invokes <xref:System.Windows.Forms.Control.Invalidate%2A>. The <xref:System.Windows.Forms.Control.Invalidate%2A> method in turn invokes <xref:System.Windows.Forms.Control.OnPaint%2A>. The <xref:System.Windows.Forms.Control.Invalidate%2A> method is overloaded, and, depending on the arguments supplied to <xref:System.Windows.Forms.Control.Invalidate%2A> `e`, a control redraws either some or all of its screen area.","leadings":["","> "],"nodes":[{"content":"Do not invoke <xref:System.Windows.Forms.Control.OnPaint%2A> directly from your control; instead, invoke the <xref:System.Windows.Forms.Control.Invalidate%2A> method (inherited from <xref:System.Windows.Forms.Control>) or some other method that invokes <xref:System.Windows.Forms.Control.Invalidate%2A>. The <xref:System.Windows.Forms.Control.Invalidate%2A> method in turn invokes <xref:System.Windows.Forms.Control.OnPaint%2A>. The <xref:System.Windows.Forms.Control.Invalidate%2A> method is overloaded, and, depending on the arguments supplied to <xref:System.Windows.Forms.Control.Invalidate%2A> `e`, a control redraws either some or all of its screen area.","pos":[9,669],"nodes":[{"content":"Do not invoke <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> directly from your control; instead, invoke the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method (inherited from <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control&gt;</ph>) or some other method that invokes <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph>.","pos":[0,303],"source":"Do not invoke <xref:System.Windows.Forms.Control.OnPaint%2A> directly from your control; instead, invoke the <xref:System.Windows.Forms.Control.Invalidate%2A> method (inherited from <xref:System.Windows.Forms.Control>) or some other method that invokes <xref:System.Windows.Forms.Control.Invalidate%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method in turn invokes <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph>.","pos":[304,428],"source":" The <xref:System.Windows.Forms.Control.Invalidate%2A> method in turn invokes <xref:System.Windows.Forms.Control.OnPaint%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method is overloaded, and, depending on the arguments supplied to <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> <ph id=\"ph3\">`e`</ph>, a control redraws either some or all of its screen area.","pos":[429,660],"source":" The <xref:System.Windows.Forms.Control.Invalidate%2A> method is overloaded, and, depending on the arguments supplied to <xref:System.Windows.Forms.Control.Invalidate%2A> `e`, a control redraws either some or all of its screen area."}]}]},{"pos":[5570,5741],"content":"The base <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control&gt;</ph> class defines another method that is useful for drawing — the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> method.","source":"The base <xref:System.Windows.Forms.Control> class defines another method that is useful for drawing — the <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> paints the background (and thereby the shape) of the window and is guaranteed to be fast, while <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> paints the details and might be slower because individual paint requests are combined into one <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event that covers all areas that have to be redrawn.","pos":[5925,6314],"source":"<xref:System.Windows.Forms.Control.OnPaintBackground%2A> paints the background (and thereby the shape) of the window and is guaranteed to be fast, while <xref:System.Windows.Forms.Control.OnPaint%2A> paints the details and might be slower because individual paint requests are combined into one <xref:System.Windows.Forms.Control.Paint> event that covers all areas that have to be redrawn."},{"content":"You might want to invoke the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> if, for instance, you want to draw a gradient-colored background for your control.","pos":[6315,6483],"source":" You might want to invoke the <xref:System.Windows.Forms.Control.OnPaintBackground%2A> if, for instance, you want to draw a gradient-colored background for your control."},{"content":"While <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> has an event-like nomenclature and takes the same argument as the <ph id=\"ph2\">`OnPaint`</ph> method, <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> is not a true event method.","pos":[6490,6721],"source":"While <xref:System.Windows.Forms.Control.OnPaintBackground%2A> has an event-like nomenclature and takes the same argument as the `OnPaint` method, <xref:System.Windows.Forms.Control.OnPaintBackground%2A> is not a true event method."},{"content":"There is no <ph id=\"ph1\">`PaintBackground`</ph> event and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> does not invoke event delegates.","pos":[6722,6851],"source":" There is no `PaintBackground` event and <xref:System.Windows.Forms.Control.OnPaintBackground%2A> does not invoke event delegates."},{"content":"When overriding the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> method, a derived class is not required to invoke the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> method of its base class.","pos":[6852,7065],"source":" When overriding the <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method, a derived class is not required to invoke the <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method of its base class."},{"pos":[7074,7085],"content":"GDI+ Basics","linkify":"GDI+ Basics","nodes":[{"content":"GDI+ Basics","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Drawing.Graphics&gt;</ph> class provides methods for drawing various shapes such as circles, triangles, arcs, and ellipses, as well as methods for displaying text.","pos":[7089,7261],"source":"The <xref:System.Drawing.Graphics> class provides methods for drawing various shapes such as circles, triangles, arcs, and ellipses, as well as methods for displaying text."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Drawing?displayProperty=nameWithType&gt;</ph> namespace and its subnamespaces contain classes that encapsulate graphics elements such as shapes (circles, rectangles, arcs, and others), colors, fonts, brushes, and so on.","pos":[7262,7490],"source":" The <xref:System.Drawing?displayProperty=nameWithType> namespace and its subnamespaces contain classes that encapsulate graphics elements such as shapes (circles, rectangles, arcs, and others), colors, fonts, brushes, and so on."},{"content":"For more information about <ph id=\"ph1\">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Using Managed Graphics Classes<ept id=\"p1\">](../advanced/using-managed-graphics-classes.md)</ept>.","pos":[7491,7663],"source":" For more information about [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)], see [Using Managed Graphics Classes](../advanced/using-managed-graphics-classes.md)."},{"content":"The essentials of <ph id=\"ph1\">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> are also described in the <bpt id=\"p1\">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id=\"p1\">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>.","pos":[7664,7891],"source":" The essentials of [!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)] are also described in the [How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md)."},{"pos":[7900,7930],"content":"Geometry of the Drawing Region","linkify":"Geometry of the Drawing Region","nodes":[{"content":"Geometry of the Drawing Region","pos":[0,30]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.ClientRectangle%2A&gt;</ph> property of a control specifies the rectangular region available to the control on the user's screen, while the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> property of <ph id=\"ph3\">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> specifies the area that is actually painted.","pos":[7934,8264],"source":"The <xref:System.Windows.Forms.Control.ClientRectangle%2A> property of a control specifies the rectangular region available to the control on the user's screen, while the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> property of <xref:System.Windows.Forms.PaintEventArgs> specifies the area that is actually painted."},{"content":"(Remember that painting is done in the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event method that takes a <ph id=\"ph2\">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> instance as its argument).","pos":[8265,8441],"source":" (Remember that painting is done in the <xref:System.Windows.Forms.Control.Paint> event method that takes a <xref:System.Windows.Forms.PaintEventArgs> instance as its argument)."},{"content":"A control might need to paint only a portion of its available area, as is the case when a small section of the control's display changes.","pos":[8442,8579]},{"content":"In those situations, a control developer must compute the actual rectangle to draw in and pass that to <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph>.","pos":[8580,8733],"source":" In those situations, a control developer must compute the actual rectangle to draw in and pass that to <xref:System.Windows.Forms.Control.Invalidate%2A>."},{"content":"The overloaded versions of <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> that take a <ph id=\"ph2\">&lt;xref:System.Drawing.Rectangle&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Drawing.Region&gt;</ph> as an argument use that argument to generate the <ph id=\"ph4\">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> property of <ph id=\"ph5\">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>.","pos":[8734,9051],"source":" The overloaded versions of <xref:System.Windows.Forms.Control.Invalidate%2A> that take a <xref:System.Drawing.Rectangle> or <xref:System.Drawing.Region> as an argument use that argument to generate the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> property of <xref:System.Windows.Forms.PaintEventArgs>."},{"content":"The following code fragment shows how the <ph id=\"ph1\">`FlashTrackBar`</ph> custom control computes the rectangular area to draw in.","pos":[9058,9172],"source":"The following code fragment shows how the `FlashTrackBar` custom control computes the rectangular area to draw in."},{"content":"The <ph id=\"ph1\">`client`</ph> variable denotes the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> property.","pos":[9173,9276],"source":" The `client` variable denotes the <xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A> property."},{"content":"For a complete sample, see <bpt id=\"p1\">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id=\"p1\">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>.","pos":[9277,9427],"source":" For a complete sample, see [How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md)."},{"pos":[9760,9786],"content":"Freeing Graphics Resources","linkify":"Freeing Graphics Resources","nodes":[{"content":"Freeing Graphics Resources","pos":[0,26]}]},{"content":"Graphics objects are expensive because they use system resources.","pos":[9790,9855]},{"content":"Such objects include instances of the <ph id=\"ph1\">&lt;xref:System.Drawing.Graphics?displayProperty=nameWithType&gt;</ph> class as well as instances of <ph id=\"ph2\">&lt;xref:System.Drawing.Brush?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Drawing.Pen?displayProperty=nameWithType&gt;</ph>, and other graphics classes.","pos":[9856,10125],"source":" Such objects include instances of the <xref:System.Drawing.Graphics?displayProperty=nameWithType> class as well as instances of <xref:System.Drawing.Brush?displayProperty=nameWithType>, <xref:System.Drawing.Pen?displayProperty=nameWithType>, and other graphics classes."},{"content":"It is important that you create a graphics resource only when you need it and release it soon as you are finished using it.","pos":[10126,10249]},{"content":"If you create a type that implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface, call its <ph id=\"ph2\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method when you are finished with it in order to free resources.","pos":[10250,10438],"source":" If you create a type that implements the <xref:System.IDisposable> interface, call its <xref:System.IDisposable.Dispose%2A> method when you are finished with it in order to free resources."},{"content":"The following code fragment shows how the <ph id=\"ph1\">`FlashTrackBar`</ph> custom control creates and releases a <ph id=\"ph2\">&lt;xref:System.Drawing.Brush&gt;</ph> resource.","pos":[10445,10578],"source":"The following code fragment shows how the `FlashTrackBar` custom control creates and releases a <xref:System.Drawing.Brush> resource."},{"content":"For the complete source code, see <bpt id=\"p1\">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id=\"p1\">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>.","pos":[10579,10736],"source":" For the complete source code, see [How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md)."},{"pos":[11717,11725],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[11729,11851],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id=\"p1\">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>","source":"[How to: Create a Windows Forms Control That Shows Progress](how-to-create-a-windows-forms-control-that-shows-progress.md)"}]}