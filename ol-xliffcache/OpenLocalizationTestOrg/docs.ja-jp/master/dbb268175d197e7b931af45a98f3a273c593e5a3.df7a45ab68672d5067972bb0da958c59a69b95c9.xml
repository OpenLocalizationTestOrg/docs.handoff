{"content":"---\ntitle: \"How to: Test Whether Two Objects Are the Same (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"variables [Visual Basic], reference\"\n  - \"Is operator [Visual Basic], comparing objects\"\n  - \"reference variables [Visual Basic]\"\n  - \"variables [Visual Basic], referring to same object\"\n  - \"objects [Visual Basic], variables referring to same\"\n  - \"Visual Basic code, operators\"\nms.assetid: f760e828-8704-4256-bc2d-c22a4c93b524\n---\n# How to: Test Whether Two Objects Are the Same (Visual Basic)\nIf you have two variables that refer to objects, you can use either the `Is` or `IsNot` operator, or both, to determine whether they refer to the same instance.  \n  \n### To test whether two objects are the same  \n  \n-   Use the [Is Operator](../../../../visual-basic/language-reference/operators/is-operator.md) or the [IsNot Operator](../../../../visual-basic/language-reference/operators/isnot-operator.md) with the two variables as operands.  \n  \n     [!code-vb[VbVbalrOperators#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#69)]  \n  \n You might want to take a certain action depending on whether two objects refer to the same instance. The preceding example compares control `c` against the active control on form `f`. If there is no active control, or if there is one but it is not the same control instance as `c`, then the `If` statement fails and the procedure returns without further processing.  \n  \n Whether you use `Is` or `IsNot` is a matter of personal convenience to you. One might be easier to read than the other in a given expression.  \n  \n## See also\n\n- [Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)\n","nodes":[{"pos":[4,449],"embed":true,"restype":"x-metadata","content":"title: \"How to: Test Whether Two Objects Are the Same (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"variables [Visual Basic], reference\"\n  - \"Is operator [Visual Basic], comparing objects\"\n  - \"reference variables [Visual Basic]\"\n  - \"variables [Visual Basic], referring to same object\"\n  - \"objects [Visual Basic], variables referring to same\"\n  - \"Visual Basic code, operators\"\nms.assetid: f760e828-8704-4256-bc2d-c22a4c93b524","nodes":[{"content":"How to: Test Whether Two Objects Are the Same (Visual Basic)","nodes":[{"pos":[0,60],"content":"How to: Test Whether Two Objects Are the Same (Visual Basic)","nodes":[{"content":"How to: Test Whether Two Objects Are the Same (Visual Basic)","pos":[0,60]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[456,516],"content":"How to: Test Whether Two Objects Are the Same (Visual Basic)","linkify":"How to: Test Whether Two Objects Are the Same (Visual Basic)","nodes":[{"content":"How to: Test Whether Two Objects Are the Same (Visual Basic)","pos":[0,60]}]},{"pos":[517,677],"content":"If you have two variables that refer to objects, you can use either the <ph id=\"ph1\">`Is`</ph> or <ph id=\"ph2\">`IsNot`</ph> operator, or both, to determine whether they refer to the same instance.","source":"If you have two variables that refer to objects, you can use either the `Is` or `IsNot` operator, or both, to determine whether they refer to the same instance."},{"pos":[687,727],"content":"To test whether two objects are the same","linkify":"To test whether two objects are the same","nodes":[{"content":"To test whether two objects are the same","pos":[0,40]}]},{"pos":[737,961],"content":"Use the <bpt id=\"p1\">[</bpt>Is Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept> or the <bpt id=\"p2\">[</bpt>IsNot Operator<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/isnot-operator.md)</ept> with the two variables as operands.","source":"Use the [Is Operator](../../../../visual-basic/language-reference/operators/is-operator.md) or the [IsNot Operator](../../../../visual-basic/language-reference/operators/isnot-operator.md) with the two variables as operands."},{"content":"You might want to take a certain action depending on whether two objects refer to the same instance.","pos":[1096,1196]},{"content":"The preceding example compares control <ph id=\"ph1\">`c`</ph> against the active control on form <ph id=\"ph2\">`f`</ph>.","pos":[1197,1279],"source":" The preceding example compares control `c` against the active control on form `f`."},{"content":"If there is no active control, or if there is one but it is not the same control instance as <ph id=\"ph1\">`c`</ph>, then the <ph id=\"ph2\">`If`</ph> statement fails and the procedure returns without further processing.","pos":[1280,1461],"source":" If there is no active control, or if there is one but it is not the same control instance as `c`, then the `If` statement fails and the procedure returns without further processing."},{"content":"Whether you use <ph id=\"ph1\">`Is`</ph> or <ph id=\"ph2\">`IsNot`</ph> is a matter of personal convenience to you.","pos":[1468,1543],"source":"Whether you use `Is` or `IsNot` is a matter of personal convenience to you."},{"content":"One might be easier to read than the other in a given expression.","pos":[1544,1609]},{"pos":[1618,1626],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1630,1780],"content":"<bpt id=\"p1\">[</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept>","source":"[Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)"}]}