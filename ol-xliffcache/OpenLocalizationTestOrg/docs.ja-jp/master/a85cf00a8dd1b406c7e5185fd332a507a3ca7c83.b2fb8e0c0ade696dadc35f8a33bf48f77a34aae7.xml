{"content":"---\ntitle: \"abstract - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"abstract\"\n  - \"abstract_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"abstract keyword [C#]\"\nms.assetid: b0797770-c1f3-4b4d-9441-b9122602a6bb\n---\n# abstract (C# Reference)\nThe `abstract` modifier indicates that the thing being modified has a missing or incomplete implementation. The abstract modifier can be used with classes, methods, properties, indexers, and events. Use the `abstract` modifier in a class declaration to indicate that a class is intended only to be a base class of other classes. Members marked as abstract, or included in an abstract class, must be implemented by classes that derive from the abstract class.  \n  \n## Example  \n In this example, the class `Square` must provide an implementation of `Area` because it derives from `ShapesClass`:  \n  \n [!code-csharp[csrefKeywordsModifiers#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsModifiers/CS/csrefKeywordsModifiers.cs#1)]\n  \n Abstract classes have the following features:  \n  \n-   An abstract class cannot be instantiated.  \n  \n-   An abstract class may contain abstract methods and accessors.  \n  \n-   It is not possible to modify an abstract class with the [sealed](../../../csharp/language-reference/keywords/sealed.md) modifier because the two modifiers have opposite meanings. The `sealed` modifier prevents a class from being inherited and the `abstract` modifier requires a class to be inherited.  \n  \n-   A non-abstract class derived from an abstract class must include actual implementations of all inherited abstract methods and accessors.  \n  \n Use the `abstract` modifier in a method or property declaration to indicate that the method or property does not contain implementation.  \n  \n Abstract methods have the following features:  \n  \n-   An abstract method is implicitly a virtual method.  \n  \n-   Abstract method declarations are only permitted in abstract classes.  \n  \n-   Because an abstract method declaration provides no actual implementation, there is no method body; the method declaration simply ends with a semicolon and there are no curly braces ({ }) following the signature. For example:  \n  \n    ```csharp  \n    public abstract void MyMethod();  \n    ```  \n  \n     The implementation is provided by a method [override](../../../csharp/language-reference/keywords/override.md), which is a member of a non-abstract class.  \n  \n-   It is an error to use the [static](../../../csharp/language-reference/keywords/static.md) or [virtual](../../../csharp/language-reference/keywords/virtual.md) modifiers in an abstract method declaration.  \n  \n Abstract properties behave like abstract methods, except for the differences in declaration and invocation syntax.  \n  \n-   It is an error to use the `abstract` modifier on a static property.  \n  \n-   An abstract inherited property can be overridden in a derived class by including a property declaration that uses the [override](../../../csharp/language-reference/keywords/override.md) modifier.  \n  \n For more information about abstract classes, see [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md).  \n  \n An abstract class must provide implementation for all interface members.  \n  \n An abstract class that implements an interface might map the interface methods onto abstract methods. For example:  \n  \n[!code-csharp[csrefKeywordsModifiers#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsModifiers/CS/csrefKeywordsModifiers.cs#2)]\n  \n## Example  \n In this example, the class `DerivedClass` is derived from an abstract class `BaseClass`. The abstract class contains an abstract method, `AbstractMethod`, and two abstract properties, `X` and `Y`.  \n  \n[!code-csharp[csrefKeywordsModifiers#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsModifiers/CS/csrefKeywordsModifiers.cs#3)]\n  \n In the preceding example, if you attempt to instantiate the abstract class by using a statement like this:  \n  \n```csharp\nBaseClass bc = new BaseClass();   // Error  \n```  \n  \nYou will get an error saying that the compiler cannot create an instance of the abstract class 'BaseClass'.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n  \n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Modifiers](../../../csharp/language-reference/keywords/modifiers.md)\n- [virtual](../../../csharp/language-reference/keywords/virtual.md)\n- [override](../../../csharp/language-reference/keywords/override.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n","nodes":[{"pos":[4,234],"embed":true,"restype":"x-metadata","content":"title: \"abstract - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"abstract\"\n  - \"abstract_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"abstract keyword [C#]\"\nms.assetid: b0797770-c1f3-4b4d-9441-b9122602a6bb","nodes":[{"content":"abstract - C# Reference","nodes":[{"pos":[0,23],"content":"abstract - C# Reference","nodes":[{"content":"abstract - C# Reference","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[241,264],"content":"abstract (C# Reference)","linkify":"abstract (C# Reference)","nodes":[{"content":"abstract (C# Reference)","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">`abstract`</ph> modifier indicates that the thing being modified has a missing or incomplete implementation.","pos":[265,372],"source":"The `abstract` modifier indicates that the thing being modified has a missing or incomplete implementation."},{"content":"The abstract modifier can be used with classes, methods, properties, indexers, and events.","pos":[373,463]},{"content":"Use the <ph id=\"ph1\">`abstract`</ph> modifier in a class declaration to indicate that a class is intended only to be a base class of other classes.","pos":[464,593],"source":" Use the `abstract` modifier in a class declaration to indicate that a class is intended only to be a base class of other classes."},{"content":"Members marked as abstract, or included in an abstract class, must be implemented by classes that derive from the abstract class.","pos":[594,723]},{"pos":[732,739],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[743,858],"content":"In this example, the class <ph id=\"ph1\">`Square`</ph> must provide an implementation of <ph id=\"ph2\">`Area`</ph> because it derives from <ph id=\"ph3\">`ShapesClass`</ph>:","source":"In this example, the class `Square` must provide an implementation of `Area` because it derives from `ShapesClass`:"},{"content":"Abstract classes have the following features:","pos":[1012,1057]},{"content":"An abstract class cannot be instantiated.","pos":[1067,1108]},{"content":"An abstract class may contain abstract methods and accessors.","pos":[1118,1179]},{"content":"It is not possible to modify an abstract class with the <bpt id=\"p1\">[</bpt>sealed<ept id=\"p1\">](../../../csharp/language-reference/keywords/sealed.md)</ept> modifier because the two modifiers have opposite meanings.","pos":[1189,1367],"source":"It is not possible to modify an abstract class with the [sealed](../../../csharp/language-reference/keywords/sealed.md) modifier because the two modifiers have opposite meanings."},{"content":"The <ph id=\"ph1\">`sealed`</ph> modifier prevents a class from being inherited and the <ph id=\"ph2\">`abstract`</ph> modifier requires a class to be inherited.","pos":[1368,1489],"source":" The `sealed` modifier prevents a class from being inherited and the `abstract` modifier requires a class to be inherited."},{"content":"A non-abstract class derived from an abstract class must include actual implementations of all inherited abstract methods and accessors.","pos":[1499,1635]},{"pos":[1642,1778],"content":"Use the <ph id=\"ph1\">`abstract`</ph> modifier in a method or property declaration to indicate that the method or property does not contain implementation.","source":"Use the `abstract` modifier in a method or property declaration to indicate that the method or property does not contain implementation."},{"content":"Abstract methods have the following features:","pos":[1785,1830]},{"content":"An abstract method is implicitly a virtual method.","pos":[1840,1890]},{"content":"Abstract method declarations are only permitted in abstract classes.","pos":[1900,1968]},{"content":"Because an abstract method declaration provides no actual implementation, there is no method body; the method declaration simply ends with a semicolon and there are no curly braces ({ }) following the signature.","pos":[1978,2189]},{"content":"For example:","pos":[2190,2202]},{"pos":[2281,2435],"content":"The implementation is provided by a method <bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](../../../csharp/language-reference/keywords/override.md)</ept>, which is a member of a non-abstract class.","source":"The implementation is provided by a method [override](../../../csharp/language-reference/keywords/override.md), which is a member of a non-abstract class."},{"pos":[2445,2648],"content":"It is an error to use the <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> or <bpt id=\"p2\">[</bpt>virtual<ept id=\"p2\">](../../../csharp/language-reference/keywords/virtual.md)</ept> modifiers in an abstract method declaration.","source":"It is an error to use the [static](../../../csharp/language-reference/keywords/static.md) or [virtual](../../../csharp/language-reference/keywords/virtual.md) modifiers in an abstract method declaration."},{"content":"Abstract properties behave like abstract methods, except for the differences in declaration and invocation syntax.","pos":[2655,2769]},{"pos":[2779,2846],"content":"It is an error to use the <ph id=\"ph1\">`abstract`</ph> modifier on a static property.","source":"It is an error to use the `abstract` modifier on a static property."},{"pos":[2856,3051],"content":"An abstract inherited property can be overridden in a derived class by including a property declaration that uses the <bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](../../../csharp/language-reference/keywords/override.md)</ept> modifier.","source":"An abstract inherited property can be overridden in a derived class by including a property declaration that uses the [override](../../../csharp/language-reference/keywords/override.md) modifier."},{"pos":[3058,3259],"content":"For more information about abstract classes, see <bpt id=\"p1\">[</bpt>Abstract and Sealed Classes and Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept>.","source":"For more information about abstract classes, see [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)."},{"content":"An abstract class must provide implementation for all interface members.","pos":[3266,3338]},{"content":"An abstract class that implements an interface might map the interface methods onto abstract methods.","pos":[3345,3446]},{"content":"For example:","pos":[3447,3459]},{"pos":[3614,3621],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the class <ph id=\"ph1\">`DerivedClass`</ph> is derived from an abstract class <ph id=\"ph2\">`BaseClass`</ph>.","pos":[3625,3713],"source":"In this example, the class `DerivedClass` is derived from an abstract class `BaseClass`."},{"content":"The abstract class contains an abstract method, <ph id=\"ph1\">`AbstractMethod`</ph>, and two abstract properties, <ph id=\"ph2\">`X`</ph> and <ph id=\"ph3\">`Y`</ph>.","pos":[3714,3821],"source":" The abstract class contains an abstract method, `AbstractMethod`, and two abstract properties, `X` and `Y`."},{"content":"In the preceding example, if you attempt to instantiate the abstract class by using a statement like this:","pos":[3974,4080]},{"content":"You will get an error saying that the compiler cannot create an instance of the abstract class 'BaseClass'.","pos":[4150,4257]},{"pos":[4266,4291],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[4363,4371],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4375,4434],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[4437,4503],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[4506,4575],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/modifiers.md)</ept>","source":"[Modifiers](../../../csharp/language-reference/keywords/modifiers.md)"},{"pos":[4578,4643],"content":"<bpt id=\"p1\">[</bpt>virtual<ept id=\"p1\">](../../../csharp/language-reference/keywords/virtual.md)</ept>","source":"[virtual](../../../csharp/language-reference/keywords/virtual.md)"},{"pos":[4646,4713],"content":"<bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](../../../csharp/language-reference/keywords/override.md)</ept>","source":"[override](../../../csharp/language-reference/keywords/override.md)"},{"pos":[4716,4783],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"}]}