{"content":"---\ntitle: \"Custom Composite Designers - Workflow Items Presenter\"\nms.date: \"03/30/2017\"\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nms.assetid: 70055c4b-1173-47a3-be80-b5bce6f59e9a\n---\n# Custom Composite Designers - Workflow Items Presenter\nThe <xref:System.Activities.Presentation.WorkflowItemsPresenter?displayProperty=nameWithType> is a key type in the WF designer programming model that allows for the editing of a collection of contained elements. This sample shows how to build an activity designer that surfaces such an editable collection.\n\n This sample demonstrates:\n\n-   Creating a custom activity designer with a <xref:System.Activities.Presentation.WorkflowItemsPresenter?displayProperty=nameWithType>.\n\n-   Creating an activity designer with a \"collapsed\" and \"expanded\" view.\n\n-   Overriding a default designer in a rehosted application.\n\n### To set up, build, and run the sample\n\n1.  Open the **UsingWorkflowItemsPresenter.sln** sample solution for C# or for VB in Visual Studio 2010.\n\n2.  Build and run the solution. A rehosted workflow designer application should open, and you can drag activities onto the canvas.\n\n## Sample Highlights\n The code for this sample shows the following:\n\n-   The activity a designer is built for:  `Parallel`\n\n-   The creation of a custom activity designer with a <xref:System.Activities.Presentation.WorkflowItemsPresenter?displayProperty=nameWithType>. A few things to point out:\n\n    -   Note the use of WPF data binding to bind to `ModelItem.Branches`. `ModelItem` is the property on `WorkflowElementDesigner` that refers to the underlying object the designer is being used for, in this case, our `Parallel`.\n\n    -   The <xref:System.Activities.Presentation.WorkflowItemsPresenter.SpacerTemplate?displayProperty=nameWithType> can be used to put a visual to display between the individual items in the collection.\n\n    -   <xref:System.Activities.Presentation.WorkflowItemsPresenter.ItemsPanel?displayProperty=nameWithType> is a template that can be provided to determine the layout of the items in the collection. In this case, a horizontal stack panel is used.\n\n This following example code shows this.\n\n```xaml\n<sad:WorkflowItemsPresenter HintText=\"Drop Activities Here\"\n                              Items=\"{Binding Path=ModelItem.Branches}\">\n    <sad:WorkflowItemsPresenter.SpacerTemplate>\n      <DataTemplate>\n        <Ellipse Width=\"10\" Height=\"10\" Fill=\"Black\"/>\n      </DataTemplate>\n    </sad:WorkflowItemsPresenter.SpacerTemplate>\n    <sad:WorkflowItemsPresenter.ItemsPanel>\n      <ItemsPanelTemplate>\n        <StackPanel Orientation=\"Horizontal\"/>\n      </ItemsPanelTemplate>\n    </sad:WorkflowItemsPresenter.ItemsPanel>\n  </sad:WorkflowItemsPresenter>\n```\n\n-   Perform an association of the `DesignerAttribute` to the `Parallel` type and then output the attributes reported.\n\n    -   First, register all of the default designers.\n\n The following is the code example.\n\n```csharp\n// register metadata\n(new DesignerMetadata()).Register();\nRegisterCustomMetadata();\n```\n\n```vb\n' register metadata\nDim metadata = New DesignerMetadata()\nmetadata.Register()\n' register custom metadata\nRegisterCustomMetadata()\n```\n\n    -   Then, override the parallel in `RegisterCustomMetadata` method.\n\n The following code shows this in C# and Visual Basic.\n\n```csharp\nvoid RegisterCustomMetadata()\n{\n      AttributeTableBuilder builder = new AttributeTableBuilder();\n      builder.AddCustomAttributes(typeof(Parallel), new DesignerAttribute(typeof(CustomParallelDesigner)));\n      MetadataStore.AddAttributeTable(builder.CreateTable());\n}\n```\n\n```vb\nSub RegisterCustomMetadata()\n   Dim builder As New AttributeTableBuilder()\n   builder.AddCustomAttributes(GetType(Parallel), New DesignerAttribute(GetType(CustomParallelDesigner)))\n   MetadataStore.AddAttributeTable(builder.CreateTable())\nEnd Sub\n```\n\n-   Finally, note the use of differing data templates and triggers to select the appropriate template based on the `IsRootDesigner` property.\n\n The following is the code example.\n\n```xaml\n<sad:ActivityDesigner x:Class=\"Microsoft.Samples.CustomParallelDesigner\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:sad=\"clr-namespace:System.Activities.Design;assembly=System.Activities.Design\"\n    xmlns:sadv=\"clr-namespace:System.Activities.Design.View;assembly=System.Activities.Design\">\n  <sad:ActivityDesigner.Resources>\n    <DataTemplate x:Key=\"Expanded\">\n      <StackPanel>\n        <TextBlock>This is the Expanded View</TextBlock>\n        <sad:WorkflowItemsPresenter HintText=\"Drop Activities Here\"\n                                    Items=\"{Binding Path=ModelItem.Branches}\">\n          <sad:WorkflowItemsPresenter.SpacerTemplate>\n            <DataTemplate>\n              <Ellipse Width=\"10\" Height=\"10\" Fill=\"Black\"/>\n            </DataTemplate>\n          </sad:WorkflowItemsPresenter.SpacerTemplate>\n          <sad:WorkflowItemsPresenter.ItemsPanel>\n            <ItemsPanelTemplate>\n              <StackPanel Orientation=\"Horizontal\"/>\n            </ItemsPanelTemplate>\n          </sad:WorkflowItemsPresenter.ItemsPanel>\n        </sad:WorkflowItemsPresenter>\n      </StackPanel>\n    </DataTemplate>\n    <DataTemplate x:Key=\"Collapsed\">\n      <TextBlock>This is the Collapsed View</TextBlock>\n    </DataTemplate>\n    <Style x:Key=\"ExpandOrCollapsedStyle\" TargetType=\"{x:Type ContentPresenter}\">\n      <Setter Property=\"ContentTemplate\" Value=\"{DynamicResource Collapsed}\"/>\n      <Style.Triggers>\n        <DataTrigger Binding=\"{Binding Path=IsRootDesigner}\" Value=\"true\">\n          <Setter Property=\"ContentTemplate\" Value=\"{DynamicResource Expanded}\"/>\n        </DataTrigger>\n      </Style.Triggers>\n    </Style>\n  </sad: ActivityDesigner.Resources>\n  <Grid>\n    <ContentPresenter Style=\"{DynamicResource ExpandOrCollapsedStyle}\" Content=\"{Binding}\"/>\n  </Grid>\n</sad: ActivityDesigner>\n```\n\n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Basic\\CustomActivities\\CustomActivityDesigners\\WorkflowItemsPresenter`  \n  \n## See also\n\n- <xref:System.Activities.Presentation.WorkflowItemsPresenter>\n- [Developing Applications with the Workflow Designer](/visualstudio/workflow-designer/developing-applications-with-the-workflow-designer)\n","nodes":[{"pos":[4,170],"embed":true,"restype":"x-metadata","content":"title: \"Custom Composite Designers - Workflow Items Presenter\"\nms.date: \"03/30/2017\"\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nms.assetid: 70055c4b-1173-47a3-be80-b5bce6f59e9a","nodes":[{"content":"Custom Composite Designers - Workflow Items Presenter","nodes":[{"pos":[0,53],"content":"Custom Composite Designers - Workflow Items Presenter","nodes":[{"content":"Custom Composite Designers - Workflow Items Presenter","pos":[0,53]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[177,230],"content":"Custom Composite Designers - Workflow Items Presenter","linkify":"Custom Composite Designers - Workflow Items Presenter","nodes":[{"content":"Custom Composite Designers - Workflow Items Presenter","pos":[0,53]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter?displayProperty=nameWithType&gt;</ph> is a key type in the WF designer programming model that allows for the editing of a collection of contained elements.","pos":[231,442],"source":"The <xref:System.Activities.Presentation.WorkflowItemsPresenter?displayProperty=nameWithType> is a key type in the WF designer programming model that allows for the editing of a collection of contained elements."},{"content":"This sample shows how to build an activity designer that surfaces such an editable collection.","pos":[443,537]},{"content":"This sample demonstrates:","pos":[540,565]},{"pos":[571,704],"content":"Creating a custom activity designer with a <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter?displayProperty=nameWithType&gt;</ph>.","source":"Creating a custom activity designer with a <xref:System.Activities.Presentation.WorkflowItemsPresenter?displayProperty=nameWithType>."},{"content":"Creating an activity designer with a \"collapsed\" and \"expanded\" view.","pos":[710,779]},{"content":"Overriding a default designer in a rehosted application.","pos":[785,841]},{"pos":[847,883],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[889,989],"content":"Open the <bpt id=\"p1\">**</bpt>UsingWorkflowItemsPresenter.sln<ept id=\"p1\">**</ept> sample solution for C# or for VB in Visual Studio 2010.","source":"Open the **UsingWorkflowItemsPresenter.sln** sample solution for C# or for VB in Visual Studio 2010."},{"content":"Build and run the solution.","pos":[995,1022]},{"content":"A rehosted workflow designer application should open, and you can drag activities onto the canvas.","pos":[1023,1121]},{"pos":[1126,1143],"content":"Sample Highlights","linkify":"Sample Highlights","nodes":[{"content":"Sample Highlights","pos":[0,17]}]},{"content":"The code for this sample shows the following:","pos":[1145,1190]},{"pos":[1196,1245],"content":"The activity a designer is built for:  <ph id=\"ph1\">`Parallel`</ph>","source":"The activity a designer is built for:  `Parallel`"},{"content":"The creation of a custom activity designer with a <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter?displayProperty=nameWithType&gt;</ph>.","pos":[1251,1391],"source":"The creation of a custom activity designer with a <xref:System.Activities.Presentation.WorkflowItemsPresenter?displayProperty=nameWithType>."},{"content":"A few things to point out:","pos":[1392,1418]},{"content":"Note the use of WPF data binding to bind to <ph id=\"ph1\">`ModelItem.Branches`</ph>.","pos":[1428,1493],"source":"Note the use of WPF data binding to bind to `ModelItem.Branches`."},{"content":"<ph id=\"ph1\">`ModelItem`</ph> is the property on <ph id=\"ph2\">`WorkflowElementDesigner`</ph> that refers to the underlying object the designer is being used for, in this case, our <ph id=\"ph3\">`Parallel`</ph>.","pos":[1494,1649],"source":"`ModelItem` is the property on `WorkflowElementDesigner` that refers to the underlying object the designer is being used for, in this case, our `Parallel`."},{"pos":[1659,1854],"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter.SpacerTemplate?displayProperty=nameWithType&gt;</ph> can be used to put a visual to display between the individual items in the collection.","source":"The <xref:System.Activities.Presentation.WorkflowItemsPresenter.SpacerTemplate?displayProperty=nameWithType> can be used to put a visual to display between the individual items in the collection."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter.ItemsPanel?displayProperty=nameWithType&gt;</ph> is a template that can be provided to determine the layout of the items in the collection.","pos":[1864,2055],"source":"<xref:System.Activities.Presentation.WorkflowItemsPresenter.ItemsPanel?displayProperty=nameWithType> is a template that can be provided to determine the layout of the items in the collection."},{"content":"In this case, a horizontal stack panel is used.","pos":[2056,2103]},{"content":"This following example code shows this.","pos":[2106,2145]},{"pos":[2715,2828],"content":"Perform an association of the <ph id=\"ph1\">`DesignerAttribute`</ph> to the <ph id=\"ph2\">`Parallel`</ph> type and then output the attributes reported.","source":"Perform an association of the `DesignerAttribute` to the `Parallel` type and then output the attributes reported."},{"content":"First, register all of the default designers.","pos":[2838,2883]},{"content":"The following is the code example.","pos":[2886,2920]},{"pos":[3170,3233],"content":"Then, override the parallel in <ph id=\"ph1\">`RegisterCustomMetadata`</ph> method.","source":"Then, override the parallel in `RegisterCustomMetadata` method."},{"content":"The following code shows this in C# and Visual Basic.","pos":[3236,3289]},{"pos":[3839,3976],"content":"Finally, note the use of differing data templates and triggers to select the appropriate template based on the <ph id=\"ph1\">`IsRootDesigner`</ph> property.","source":"Finally, note the use of differing data templates and triggers to select the appropriate template based on the `IsRootDesigner` property."},{"content":"The following is the code example.","pos":[3979,4013]},{"pos":[5923,6055],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[14,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[0,53]},{"content":"Check for the following (default) directory before continuing.","pos":[54,116]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[6109,6419],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[6420,6470]},{"pos":[6595,6603],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6670,6806],"content":"<bpt id=\"p1\">[</bpt>Developing Applications with the Workflow Designer<ept id=\"p1\">](/visualstudio/workflow-designer/developing-applications-with-the-workflow-designer)</ept>","source":"[Developing Applications with the Workflow Designer](/visualstudio/workflow-designer/developing-applications-with-the-workflow-designer)"}]}