{"content":"---\ntitle: \"protected internal - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/15/2017\nauthor: \"sputier\"\n---\n# protected internal (C# Reference)\n\nThe `protected internal` keyword combination is a member access modifier. A protected internal member is accessible from the current assembly or from types that are derived from the containing class. For a comparison of `protected internal` with the other access modifiers, see [Accessibility Levels](accessibility-levels.md).\n\n## Example\n\nA protected internal member of a base class is accessible from any type within its containing assembly. It is also accessible in a derived class located in another assembly only if the access occurs through a variable of the derived class type. For example, consider the following code segment:\n\n```csharp\n// Assembly1.cs\n// Compile with: /target:library\npublic class BaseClass\n{\n   protected internal int myValue = 0;\n}\n\nclass TestAccess\n{\n    void Access()\n    {\n        BaseClass baseObject = new BaseClass();\n        baseObject.myValue = 5;\n    }\n}\n```\n\n```csharp\n// Assembly2.cs\n// Compile with: /reference:Assembly1.dll\nclass DerivedClass : BaseClass\n{\n    static void Main()\n    {\n        BaseClass baseObject = new BaseClass();\n        DerivedClass derivedObject = new DerivedClass();\n\n        // Error CS1540, because myValue can only be accessed by\n        // classes derived from BaseClass.\n        // baseObject.myValue = 10;\n\n        // OK, because this class derives from BaseClass.\n        derivedObject.myValue = 10;\n    }\n}\n```\nThis example contains two files, `Assembly1.cs` and `Assembly2.cs`.\nThe first file contains a public base class, `BaseClass`, and another class, `TestAccess`. `BaseClass` owns a protected internal member, `myValue`, which is accessed by the `TestAccess` type.\nIn the second file, an attempt to access `myValue` through an instance of `BaseClass` will produce an error, while an access to this member through an instance of a derived class, `DerivedClass` will succeed.\n\nStruct members cannot be `protected internal` because the struct cannot be inherited.\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Access Modifiers](access-modifiers.md)\n- [Accessibility Levels](accessibility-levels.md)\n- [Modifiers](modifiers.md)\n- [public](public.md)\n- [private](private.md)\n- [internal](internal.md)\n- [Security concerns for internal virtual keywords](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/heyd8kky(v=vs.100))","nodes":[{"pos":[4,105],"embed":true,"restype":"x-metadata","content":"title: \"protected internal - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/15/2017\nauthor: \"sputier\"","nodes":[{"content":"protected internal - C# Reference","nodes":[{"pos":[0,33],"content":"protected internal - C# Reference","nodes":[{"content":"protected internal - C# Reference","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[112,145],"content":"protected internal (C# Reference)","linkify":"protected internal (C# Reference)","nodes":[{"content":"protected internal (C# Reference)","pos":[0,33]}]},{"content":"The <ph id=\"ph1\">`protected internal`</ph> keyword combination is a member access modifier.","pos":[147,220],"source":"The `protected internal` keyword combination is a member access modifier."},{"content":"A protected internal member is accessible from the current assembly or from types that are derived from the containing class.","pos":[221,346]},{"content":"For a comparison of <ph id=\"ph1\">`protected internal`</ph> with the other access modifiers, see <bpt id=\"p1\">[</bpt>Accessibility Levels<ept id=\"p1\">](accessibility-levels.md)</ept>.","pos":[347,473],"source":" For a comparison of `protected internal` with the other access modifiers, see [Accessibility Levels](accessibility-levels.md)."},{"pos":[478,485],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"A protected internal member of a base class is accessible from any type within its containing assembly.","pos":[487,590]},{"content":"It is also accessible in a derived class located in another assembly only if the access occurs through a variable of the derived class type.","pos":[591,731]},{"content":"For example, consider the following code segment:","pos":[732,781]},{"content":"This example contains two files, <ph id=\"ph1\">`Assembly1.cs`</ph> and <ph id=\"ph2\">`Assembly2.cs`</ph>.","pos":[1532,1599],"source":"This example contains two files, `Assembly1.cs` and `Assembly2.cs`."},{"content":"The first file contains a public base class, <ph id=\"ph1\">`BaseClass`</ph>, and another class, <ph id=\"ph2\">`TestAccess`</ph>.","pos":[1600,1690],"source":"\nThe first file contains a public base class, `BaseClass`, and another class, `TestAccess`."},{"content":"<ph id=\"ph1\">`BaseClass`</ph> owns a protected internal member, <ph id=\"ph2\">`myValue`</ph>, which is accessed by the <ph id=\"ph3\">`TestAccess`</ph> type.","pos":[1691,1791],"source":"`BaseClass` owns a protected internal member, `myValue`, which is accessed by the `TestAccess` type."},{"content":"In the second file, an attempt to access <ph id=\"ph1\">`myValue`</ph> through an instance of <ph id=\"ph2\">`BaseClass`</ph> will produce an error, while an access to this member through an instance of a derived class, <ph id=\"ph3\">`DerivedClass`</ph> will succeed.","pos":[1792,2000],"source":"\nIn the second file, an attempt to access `myValue` through an instance of `BaseClass` will produce an error, while an access to this member through an instance of a derived class, `DerivedClass` will succeed."},{"pos":[2002,2087],"content":"Struct members cannot be <ph id=\"ph1\">`protected internal`</ph> because the struct cannot be inherited.","source":"Struct members cannot be `protected internal` because the struct cannot be inherited."},{"pos":[2092,2117],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2183,2191],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2195,2222],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2225,2281],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2284,2307],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[2310,2349],"content":"<bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](access-modifiers.md)</ept>","source":"[Access Modifiers](access-modifiers.md)"},{"pos":[2352,2399],"content":"<bpt id=\"p1\">[</bpt>Accessibility Levels<ept id=\"p1\">](accessibility-levels.md)</ept>","source":"[Accessibility Levels](accessibility-levels.md)"},{"pos":[2402,2427],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](modifiers.md)</ept>","source":"[Modifiers](modifiers.md)"},{"pos":[2430,2449],"content":"<bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](public.md)</ept>","source":"[public](public.md)"},{"pos":[2452,2473],"content":"<bpt id=\"p1\">[</bpt>private<ept id=\"p1\">](private.md)</ept>","source":"[private](private.md)"},{"pos":[2476,2499],"content":"<bpt id=\"p1\">[</bpt>internal<ept id=\"p1\">](internal.md)</ept>","source":"[internal](internal.md)"},{"pos":[2502,2640],"content":"<bpt id=\"p1\">[</bpt>Security concerns for internal virtual keywords<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/heyd8kky(v=vs.100))</ept>","source":"[Security concerns for internal virtual keywords](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/heyd8kky(v=vs.100))"}]}