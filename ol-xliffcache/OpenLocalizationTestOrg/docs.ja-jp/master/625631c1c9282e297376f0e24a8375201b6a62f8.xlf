<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="packaging-and-deploying-resources-in-desktop-apps.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">625631c1c9282e297376f0e24a8375201b6a62f8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\resources\packaging-and-deploying-resources-in-desktop-apps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1892d41024b17a9d0e693a38c7edb523ea8d8cdf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49ad68367cf19345a604af41839e244f3e7e9616</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Packaging and Deploying Resources in Desktop Apps | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Packaging and Deploying Resources in Desktop Apps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applications rely on the .NET Framework Resource Manager, represented by the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class, to retrieve localized resources.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Resource Manager assumes that a hub and spoke model is used to package and deploy resources.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The hub is the main assembly that contains the nonlocalizable executable code and the resources for a single culture, called the neutral or default culture.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The default culture is the fallback culture for the application; it is the culture whose resources are used if localized resources cannot be found.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each spoke connects to a satellite assembly that contains the resources for a single culture, but does not contain any code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are several advantages to this model:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can incrementally add resources for new cultures after you have deployed an application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because subsequent development of culture-specific resources can require a significant amount of time, this allows you to release your main application first, and deliver culture-specific resources at a later date.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can update and change an application's satellite assemblies without recompiling the application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An application needs to load only those satellite assemblies that contain the resources needed for a particular culture.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This can significantly reduce the use of system resources.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, there are also disadvantages to this model:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You must manage multiple sets of resources.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The initial cost of testing an application increases, because you must test several configurations.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that in the long term it will be easier and less expensive to test one core application with several satellites, than to test and maintain several parallel international versions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Resource Naming Conventions</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When you package your application's resources, you must name them using the resource naming conventions that the common language runtime expects.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The runtime identifies a resource by its culture name.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each culture is given a unique name, which is usually a combination of a two-letter, lowercase culture name associated with a language and, if required, a two-letter, uppercase subculture name associated with a country or region.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The subculture name follows the culture name, separated by a dash (-).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Examples include ja-JP for Japanese as spoken in Japan, en-US for English as spoken in the United States, de-DE for German as spoken in Germany, or de-AT for German as spoken in Austria.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>National Language Support (NLS) API Reference<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=200048)</ept> at the Go Global Developer Center for a complete list of culture names.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For information about creating resource files, see <bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept> and <bpt id="p2">[</bpt>Creating Satellite Assemblies<ept id="p2">](../../../docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept> in the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The Resource Fallback Process</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The hub and spoke model for packaging and deploying resources uses a fallback process to locate appropriate resources.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If an application requests a localized resource  that is unavailable, the common language runtime searches the hierarchy of cultures for an appropriate fallback resource that most closely matches the user's application's request, and throws an exception only as a last resort.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>At each level of the hierarchy, if an appropriate resource is found, the runtime uses it.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the resource is not found, the search continues at the next level.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To improve lookup performance, apply the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute to your main assembly, and pass it the name of the neutral language that will work with your main assembly.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You may be able to use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>relativeBindForResources&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/relativebindforresources-element.md)</ept> configuration element to optimize the resource fallback process and the process by which the runtime probes for resource assemblies.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Optimizing the Resource Fallback Process<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md#Optimizing)</ept> section.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The resource fallback process is involves the following steps:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The runtime first checks the <bpt id="p1">[</bpt>global assembly cache<ept id="p1">](../../../docs/framework/app-domains/gac.md)</ept> for an assembly that matches the requested culture for your application.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The global assembly cache can store resource assemblies that are shared by many applications.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This frees you from having to include specific sets of resources in the directory structure of every application you create.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the runtime finds a reference to the assembly, it searches the assembly for the requested resource.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If it finds the entry in the assembly, it uses the requested resource.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If it doesn't find the entry, it continues the search.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The runtime next checks the directory of the currently executing assembly for a directory that matches the requested culture.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If it finds the directory, it searches that directory for a valid satellite assembly for the requested culture.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The runtime then searches the satellite assembly for the requested resource.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If it finds the resource in the assembly, it uses it.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If it doesn't find the resource, it continues the search.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The runtime next queries the Windows Installer to determine whether the satellite assembly is to be installed on demand.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If so, it handles the installation, loads the assembly, and searches it or the requested resource.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If it finds the resource in the assembly, it uses it.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If it doesn't find the resource, it continues the search.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The runtime raises the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=fullName&gt;</ph> event to indicate that it is unable to find the satellite assembly.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you choose to handle the event, your event handler can return a reference to the satellite assembly whose resources will be used for the lookup.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Otherwise, the event handler returns <ph id="ph1">`null`</ph> and the search continues.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The runtime next searches the global assembly cache again, this time for the parent assembly of the requested culture.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the parent assembly exists in the global assembly cache, the runtime searches the assembly for the requested resource.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The parent culture is defined as the appropriate fallback culture.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Consider parents as fallback candidates, because providing any resource is preferable to throwing an exception.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This process also allows you to reuse resources.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You should include a particular resource at the parent level only if the child culture doesn't need to localize the requested resource.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, if you supply satellite assemblies for en (neutral English), en-GB (English as spoken in the United Kingdom), and en-US (English as spoken in the United States), the en satellite would contain the common terminology, and the en-GB and en-US satellites could provide overrides for only those terms that differ.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The runtime next checks the directory of the currently executing assembly to see if it contains a parent directory.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If a parent directory exists, the runtime searches the directory for a valid satellite assembly for the parent culture.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If it finds the assembly, the runtime searches the assembly for the requested resource.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If it finds the resource, it uses it.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If it doesn't find the resource, it continues the search.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The runtime next queries the Windows Installer to determine whether the parent satellite assembly is to be installed on demand.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If so, it handles the installation, loads the assembly, and searches it or the requested resource.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If it finds the resource in the assembly, it uses it.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If it doesn't find the resource, it continues the search.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The runtime raises the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=fullName&gt;</ph> event to indicate that it is unable to find an appropriate fallback resource.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you choose to handle the event, your event handler can return a reference to the satellite assembly whose resources will be used for the lookup.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Otherwise, the event handler returns <ph id="ph1">`null`</ph> and the search continues.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The runtime next searches parent assemblies, as in the previous three steps, through many potential levels.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Each culture has only one parent, which is defined by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Parent%2A?displayProperty=fullName&gt;</ph> property, but a parent might have its own parent.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The search for parent cultures stops when a culture's <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Parent%2A&gt;</ph> property returns <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph>; for resource fallback, the invariant culture is not considered a parent culture or a culture that can have resources.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If the culture that was originally specified and all parents have been searched and the resource is still not found, the resource for the default (fallback) culture is used.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Typically, the resources for the default culture are included in the main application assembly.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, you can specify a value of <ph id="ph1">&lt;xref:System.Resources.UltimateResourceFallbackLocation&gt;</ph> for the <ph id="ph2">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute.Location%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute to indicate that the ultimate fallback location for resources is a satellite assembly, rather than the main assembly.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The default resource is the only resource that can be compiled with the main assembly.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Unless you specify a satellite assembly by using the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute, it is the ultimate fallback (final parent).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that you always include a default set of resources in your main assembly.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This helps prevent exceptions from being thrown.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>By including a default resource file you provide a fallback for all resources, and ensure that at least one resource is always present for the user, even if it is not culturally specific.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Finally, if the runtime doesn't find a resource for a default (fallback) culture, a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> or <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception is thrown to indicate that the resource could not be found.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, suppose the application requests a resource localized for Spanish (Mexico) (the es-MX culture).</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The runtime first searches the global assembly cache for the assembly that matches es-MX, but doesn't find it.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The runtime then searches the directory of the currently executing assembly for an es-MX directory.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Failing that, the runtime searches the global assembly cache again for a parent assembly that reflects the appropriate fallback culture — in this case, es (Spanish).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If the parent assembly is not found, the runtime searches all potential levels of parent assemblies for the es-MX culture until it finds a corresponding resource.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If a resource isn't found, the runtime uses the resource for the default culture.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Optimizing the Resource Fallback Process</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Under the following conditions, you can optimize the process by which the runtime searches for resources in satellite assemblies</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Satellite assemblies are deployed in the same location as the code assembly.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If the code assembly is installed in the <bpt id="p1">[</bpt>Global Assembly Cache<ept id="p1">](../../../docs/framework/app-domains/gac.md)</ept>, satellite assemblies are also installed in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If the code assembly is installed in a directory, satellite assemblies are installed in culture-specific folders of that directory.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Satellite assemblies are not installed on demand.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Application code does not handle the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You optimize the probe for satellite assemblies by including the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>relativeBindForResources&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/relativebindforresources-element.md)</ept> element and setting its <ph id="ph2">`enabled`</ph> attribute to <ph id="ph3">`true`</ph> in the application configuration file, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The optimized probe for satellite assemblies is an opt-in feature.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>That is, the runtime follows the steps documented in the <bpt id="p1">[</bpt>The Resource Fallback Process<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md#cpconpackagingdeployingresourcesanchor1)</ept> unless the <bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>relativeBindForResources&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/runtime/relativebindforresources-element.md)</ept> element is present in the application's configuration file and its <ph id="ph2">`enabled`</ph> attribute is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If this is the case, the process of probing for a satellite assembly is modified as follows:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The runtime uses the location of the parent code assembly to probe for the satellite assembly.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the parent assembly is installed in the global assembly cache, the runtime probes in the cache but not in the application's directory.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If the parent assembly is installed in an application directory, the runtime probes in the application directory but not in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The runtime doesn't query the Windows Installer for on-demand installation of satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If the probe for a particular resource assembly fails, the runtime does not raise the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Ultimate Fallback to Satellite Assembly</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can optionally remove resources from the main assembly and specify that the runtime should load the ultimate fallback resources from a satellite assembly that corresponds to a specific culture.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To control the fallback process, you use the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute.%23ctor%28System.String%2CSystem.Resources.UltimateResourceFallbackLocation%29?displayProperty=fullName&gt;</ph> constructor and supply a value for the <ph id="ph2">&lt;xref:System.Resources.UltimateResourceFallbackLocation&gt;</ph> parameter that specifies whether Resource Manager should extract the fallback resources from the main assembly or from a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute to store an application's fallback resources in a satellite assembly for the French (fr) language.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The example has two text-based resource files that define a single string resource named <ph id="ph1">`Greeting`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The first, resources.fr.txt, contains a French language resource.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The second, resources,ru.txt, contains a Russian language resource.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>These two files are compiled to .resources files by running the <bpt id="p1">[</bpt>resource file generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> from the command line.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For the French language resource, the command is:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>resgen.exe resources.fr.txt<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For the Russian language resource, the command is:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>resgen.exe resources.ru.txt<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The .resources files are embedded into dynamic link libraries by running <bpt id="p1">[</bpt>assembly linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> from the command line for the French language resource as follows:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>al /t:lib /embed:resources.fr.resources /culture:fr /out:fr\Example1.resources.dll<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>and for the Russian language resource as follows:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>al /t:lib /embed:resources.ru.resources /culture:ru /out:ru\Example1.resources.dll<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The application source code resides in a file named Example1.cs or Example1.vb.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It includes the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute to indicate that the default application resource is in the fr subdirectory.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>It instantiates the Resource Manager, retrieves the value of the <ph id="ph1">`Greeting`</ph> resource, and displays it to the console.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can then compile C# source code from the command line as follows:</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>csc Example1.cs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The command for the Visual Basic compiler is very similar:</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>vbc Example1.vb<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Because there are no resources embedded in the main assembly, you do not have to compile by using the <ph id="ph1">`/resource`</ph> switch.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When you run the example from a system whose language is anything other than Russian, it displays the following output:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Suggested Packaging Alternative</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Time or budget constraints might prevent you from creating a set of resources for every subculture that your application supports.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Instead, you can create a single satellite assembly for a parent culture that all related subcultures can use.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For example, you can provide a single English satellite assembly (en) that is retrieved by users who request region-specific English resources, and a single German satellite assembly (de) for users who request region-specific German resources.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For example, requests for German as spoken in Germany (de-DE), Austria (de-AT), and Switzerland (de-CH) would fall back to the German satellite assembly (de).</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The default resources are the final fallback and therefore should be the resources that will be requested by the majority of your application's users, so choose these resources carefully.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This approach deploys resources that are less culturally specific, but can significantly reduce your application's localization costs.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resources in Desktop Apps<ept id="p1">](../../../docs/framework/resources/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Global Assembly Cache<ept id="p1">](../../../docs/framework/app-domains/gac.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Satellite Assemblies<ept id="p1">](../../../docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>