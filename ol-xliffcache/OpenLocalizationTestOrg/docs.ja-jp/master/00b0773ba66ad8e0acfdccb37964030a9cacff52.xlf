<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="single-table-queries-linq-to-dataset.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00b0773ba66ad8e0acfdccb37964030a9cacff52</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\single-table-queries-linq-to-dataset.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0579cacf3dfe78ae0127da0a0ff26430a18b300d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db229767dc1c7e7e9e718f9f24b24201403cf279</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Single-Table Queries (LINQ to DataSet)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Single-Table Queries (LINQ to DataSet)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinqext](../../../../includes/vbteclinqext-md.md)]</ph> queries work on data sources that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface or the <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> class does not implement either interface, so you must call the <ph id="ph2">&lt;xref:System.Data.DataTableExtensions.AsEnumerable%2A&gt;</ph> method if you want to use the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph> as a source in the <ph id="ph4">`From`</ph> clause of a <ph id="ph5">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph> query.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example gets all the online orders from the SalesOrderHeader table and outputs the order ID, order date, and order number to the console.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The local variable query is initialized with a query expression, which operates on one or more information sources by applying one or more query operators from either the standard query operators or, in the case of <ph id="ph1">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph>, operators specific to the <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The query expression in the previous example uses two of the standard query operators: <ph id="ph1">`Where`</ph> and <ph id="ph2">`Select`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Where`</ph> clause filters the sequence based on a condition, in this case that the <ph id="ph2">`OnlineOrderFlag`</ph> is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> operator allocates and returns an enumerable object that captures the arguments passed to the operator.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this above example, an anonymous type is created with three properties: <ph id="ph1">`SalesOrderID`</ph>, <ph id="ph2">`OrderDate`</ph>, and <ph id="ph3">`SalesOrderNumber`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The values of these three properties are set to the values of the <ph id="ph1">`SalesOrderID`</ph>, <ph id="ph2">`OrderDate`</ph>, and <ph id="ph3">`SalesOrderNumber`</ph> columns from the <ph id="ph4">`SalesOrderHeader`</ph> table.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`foreach`</ph> loop then enumerates the enumerable object returned by <ph id="ph2">`Select`</ph> and yields the query results.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because query is an <ph id="ph1">&lt;xref:System.Linq.Enumerable&gt;</ph> type, which implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, the evaluation of the query is deferred until the query variable is iterated over using the <ph id="ph3">`foreach`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Deferred query evaluation allows queries to be kept as values that can be evaluated multiple times, each time yielding potentially different results.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataRowExtensions.Field%2A&gt;</ph> method provides access to the column values of a <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> and the <ph id="ph3">&lt;xref:System.Data.DataRowExtensions.SetField%2A&gt;</ph> (not shown in the previous example) sets column values in a <ph id="ph4">&lt;xref:System.Data.DataRow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">&lt;xref:System.Data.DataRowExtensions.Field%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Data.DataRowExtensions.SetField%2A&gt;</ph> method handle nullable types, so you do not have to explicitly check for null values.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Both methods are generic methods, also, which means you do not have to cast the return type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You could use the pre-existing column accessor in <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> (for example, <ph id="ph2">`o["OrderDate"]`</ph>), but doing so would require you to cast the return object to the appropriate type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the column is nullable you have to check if the value is null by using the <ph id="ph1">&lt;xref:System.Data.DataRow.IsNull%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generic Field and SetField Methods<ept id="p1">](../../../../docs/framework/data/adonet/generic-field-and-setfield-methods-linq-to-dataset.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Note that the data type specified in the generic parameter <ph id="ph1">`T`</ph> of the <ph id="ph2">&lt;xref:System.Data.DataRowExtensions.Field%2A&gt;</ph> method and <ph id="ph3">&lt;xref:System.Data.DataRowExtensions.SetField%2A&gt;</ph> method must match the type of the underlying value or an <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph> will be thrown.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The specified column name must also match the name of a column in the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> or an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> will be thrown.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In both cases, the exception is thrown at run time data enumeration when the query is executed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cross-Table Queries<ept id="p1">](../../../../docs/framework/data/adonet/cross-table-queries-linq-to-dataset.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Querying Typed DataSets<ept id="p1">](../../../../docs/framework/data/adonet/querying-typed-datasets.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Field and SetField Methods<ept id="p1">](../../../../docs/framework/data/adonet/generic-field-and-setfield-methods-linq-to-dataset.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>