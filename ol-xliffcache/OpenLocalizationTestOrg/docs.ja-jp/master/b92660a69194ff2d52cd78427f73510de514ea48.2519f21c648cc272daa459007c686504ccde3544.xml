{"content":"---\ntitle: \"#if preprocessor directive - C# Reference\"\nms.custom: seodec18\n\nms.date: 06/30/2018\nf1_keywords: \n  - \"#if\"\nhelpviewer_keywords: \n  - \"#if directive [C#]\"\nms.assetid: 48cabbff-ca82-491f-a56a-eeccd528c7c2\n---\n# #if (C# Reference)\n\nWhen the C# compiler encounters an `#if` directive, followed eventually by an [#endif](preprocessor-endif.md) directive, it compiles the code between the directives only if the specified symbol is defined. Unlike C and C++, you cannot assign a numeric value to a symbol. The #if statement in C# is Boolean and only tests whether the symbol has been defined or not. For example:\n\n```csharp\n#if DEBUG\n    Console.WriteLine(\"Debug version\");\n#endif\n```\n\nYou can use the operators [==](../operators/equality-operators.md#equality-operator-) (equality) and [!=](../operators/equality-operators.md#inequality-operator-) (inequality) only to test for [true](../keywords/true.md) or [false](../keywords/false.md). True means the symbol is defined. The statement `#if DEBUG` has the same meaning as `#if (DEBUG == true)`. You can use the operators [&&](../operators/conditional-and-operator.md) (and), [&#124;&#124;](../operators/conditional-or-operator.md) (or), and [!](../operators/logical-negation-operator.md) (not) to evaluate whether multiple symbols have been defined. You can also group symbols and operators with parentheses.\n\n## Remarks\n\n`#if`, along with the [#else](preprocessor-else.md), [#elif](preprocessor-elif.md), [#endif](preprocessor-endif.md), [#define](preprocessor-define.md), and [#undef](preprocessor-undef.md) directives, lets you include or exclude code based on the existence of one or more symbols. This can be useful when compiling code for a debug build or when compiling for a specific configuration.\n\nA conditional directive beginning with a `#if` directive must explicitly be terminated with a `#endif` directive.\n\n`#define` lets you define a symbol. By then using the symbol as the expression passed to the `#if` directive, the expression evaluates to `true`.\n\nYou can also define a symbol with the [-define](../compiler-options/define-compiler-option.md) compiler option. You can undefine a symbol with [#undef](preprocessor-undef.md).\n\nA symbol that you define with `-define` or with `#define` doesn't conflict with a variable of the same name. That is, a variable name should not be passed to a preprocessor directive, and a symbol can only be evaluated by a preprocessor directive.\n\nThe scope of a symbol created with `#define` is the file in which it was defined.\n\nThe build system is also aware of predefined preprocessor symbols representing different [target frameworks](../../../standard/frameworks.md). They're useful when creating applications that can target more than one .NET implementation or version.\n\n[!INCLUDE [Preprocessor symbols](~/includes/preprocessor-symbols.md)]\n\nOther predefined symbols include the DEBUG and TRACE constants. You can override the values set for the project using `#define`. The DEBUG symbol, for example, is automatically set depending on your build configuration properties (\"Debug\" or \"Release\" mode).\n\n## Examples\n\nThe following example shows you how to define a MYTEST symbol on a file and then test the values of the MYTEST and DEBUG symbols. The output of this example depends on whether you built the project on Debug or Release configuration mode.\n\n```csharp\n#define MYTEST\nusing System;\npublic class MyClass\n{\n    static void Main()\n    {\n#if (DEBUG && !MYTEST)\n        Console.WriteLine(\"DEBUG is defined\");\n#elif (!DEBUG && MYTEST)\n        Console.WriteLine(\"MYTEST is defined\");\n#elif (DEBUG && MYTEST)\n        Console.WriteLine(\"DEBUG and MYTEST are defined\");  \n#else\n        Console.WriteLine(\"DEBUG and MYTEST are not defined\");\n#endif\n    }\n}\n```\n\nThe following example shows you how to test for different target frameworks so you can use newer APIs when possible:\n\n```csharp\npublic class MyClass\n{\n    static void Main()\n    {\n#if NET40\n        WebClient _client = new WebClient();\n#else\n        HttpClient _client = new HttpClient();\n#endif\n    }\n    //...\n}\n```\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Preprocessor Directives](index.md)\n- [How to: Compile Conditionally with Trace and Debug](../../../framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)\n","nodes":[{"pos":[4,215],"embed":true,"restype":"x-metadata","content":"title: \"#if preprocessor directive - C# Reference\"\nms.custom: seodec18\n\nms.date: 06/30/2018\nf1_keywords: \n  - \"#if\"\nhelpviewer_keywords: \n  - \"#if directive [C#]\"\nms.assetid: 48cabbff-ca82-491f-a56a-eeccd528c7c2","nodes":[{"content":"#if preprocessor directive - C# Reference","nodes":[{"pos":[1,41],"content":"if preprocessor directive - C# Reference","linkify":"if preprocessor directive - C# Reference","nodes":[{"content":"if preprocessor directive - C# Reference","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[222,240],"content":"#if (C# Reference)","linkify":"#if (C# Reference)","nodes":[{"content":"#if (C# Reference)","pos":[0,18]}]},{"content":"When the C# compiler encounters an <ph id=\"ph1\">`#if`</ph> directive, followed eventually by an <bpt id=\"p1\">[</bpt>#endif<ept id=\"p1\">](preprocessor-endif.md)</ept> directive, it compiles the code between the directives only if the specified symbol is defined.","pos":[242,447],"source":"When the C# compiler encounters an `#if` directive, followed eventually by an [#endif](preprocessor-endif.md) directive, it compiles the code between the directives only if the specified symbol is defined."},{"content":"Unlike C and C++, you cannot assign a numeric value to a symbol.","pos":[448,512]},{"content":"The #if statement in C# is Boolean and only tests whether the symbol has been defined or not.","pos":[513,606]},{"content":"For example:","pos":[607,619]},{"content":"You can use the operators <bpt id=\"p1\">[</bpt><ph id=\"ph1\">==</ph><ept id=\"p1\">](../operators/equality-operators.md#equality-operator-)</ept> (equality) and <bpt id=\"p2\">[</bpt>!=<ept id=\"p2\">](../operators/equality-operators.md#inequality-operator-)</ept> (inequality) only to test for <bpt id=\"p3\">[</bpt>true<ept id=\"p3\">](../keywords/true.md)</ept> or <bpt id=\"p4\">[</bpt>false<ept id=\"p4\">](../keywords/false.md)</ept>.","pos":[693,947],"source":"You can use the operators [==](../operators/equality-operators.md#equality-operator-) (equality) and [!=](../operators/equality-operators.md#inequality-operator-) (inequality) only to test for [true](../keywords/true.md) or [false](../keywords/false.md)."},{"content":"True means the symbol is defined.","pos":[948,981]},{"content":"The statement <ph id=\"ph1\">`#if DEBUG`</ph> has the same meaning as <ph id=\"ph2\">`#if (DEBUG == true)`</ph>.","pos":[982,1054],"source":" The statement `#if DEBUG` has the same meaning as `#if (DEBUG == true)`."},{"content":"You can use the operators <bpt id=\"p1\">[</bpt><ph id=\"ph1\">&amp;&amp;</ph><ept id=\"p1\">](../operators/conditional-and-operator.md)</ept> (and), <bpt id=\"p2\">[</bpt>&amp;#124;&amp;#124;<ept id=\"p2\">](../operators/conditional-or-operator.md)</ept> (or), and <bpt id=\"p3\">[</bpt>!<ept id=\"p3\">](../operators/logical-negation-operator.md)</ept>","pos":[1055,1247],"source":" You can use the operators [&&](../operators/conditional-and-operator.md) (and), [&#124;&#124;](../operators/conditional-or-operator.md) (or), and [!](../operators/logical-negation-operator.md)"},{"content":"(not) to evaluate whether multiple symbols have been defined.","pos":[1248,1309]},{"content":"You can also group symbols and operators with parentheses.","pos":[1310,1368]},{"pos":[1373,1380],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`#if`</ph>, along with the <bpt id=\"p1\">[</bpt>#else<ept id=\"p1\">](preprocessor-else.md)</ept>, <bpt id=\"p2\">[</bpt>#elif<ept id=\"p2\">](preprocessor-elif.md)</ept>, <bpt id=\"p3\">[</bpt>#endif<ept id=\"p3\">](preprocessor-endif.md)</ept>, <bpt id=\"p4\">[</bpt>#define<ept id=\"p4\">](preprocessor-define.md)</ept>, and <bpt id=\"p5\">[</bpt>#undef<ept id=\"p5\">](preprocessor-undef.md)</ept> directives, lets you include or exclude code based on the existence of one or more symbols.","pos":[1382,1661],"source":"`#if`, along with the [#else](preprocessor-else.md), [#elif](preprocessor-elif.md), [#endif](preprocessor-endif.md), [#define](preprocessor-define.md), and [#undef](preprocessor-undef.md) directives, lets you include or exclude code based on the existence of one or more symbols."},{"content":"This can be useful when compiling code for a debug build or when compiling for a specific configuration.","pos":[1662,1766]},{"pos":[1768,1881],"content":"A conditional directive beginning with a <ph id=\"ph1\">`#if`</ph> directive must explicitly be terminated with a <ph id=\"ph2\">`#endif`</ph> directive.","source":"A conditional directive beginning with a `#if` directive must explicitly be terminated with a `#endif` directive."},{"content":"<ph id=\"ph1\">`#define`</ph> lets you define a symbol.","pos":[1883,1918],"source":"`#define` lets you define a symbol."},{"content":"By then using the symbol as the expression passed to the <ph id=\"ph1\">`#if`</ph> directive, the expression evaluates to <ph id=\"ph2\">`true`</ph>.","pos":[1919,2028],"source":" By then using the symbol as the expression passed to the `#if` directive, the expression evaluates to `true`."},{"content":"You can also define a symbol with the <bpt id=\"p1\">[</bpt>-define<ept id=\"p1\">](../compiler-options/define-compiler-option.md)</ept> compiler option.","pos":[2030,2141],"source":"You can also define a symbol with the [-define](../compiler-options/define-compiler-option.md) compiler option."},{"content":"You can undefine a symbol with <bpt id=\"p1\">[</bpt>#undef<ept id=\"p1\">](preprocessor-undef.md)</ept>.","pos":[2142,2205],"source":" You can undefine a symbol with [#undef](preprocessor-undef.md)."},{"content":"A symbol that you define with <ph id=\"ph1\">`-define`</ph> or with <ph id=\"ph2\">`#define`</ph> doesn't conflict with a variable of the same name.","pos":[2207,2315],"source":"A symbol that you define with `-define` or with `#define` doesn't conflict with a variable of the same name."},{"content":"That is, a variable name should not be passed to a preprocessor directive, and a symbol can only be evaluated by a preprocessor directive.","pos":[2316,2454]},{"pos":[2456,2537],"content":"The scope of a symbol created with <ph id=\"ph1\">`#define`</ph> is the file in which it was defined.","source":"The scope of a symbol created with `#define` is the file in which it was defined."},{"content":"The build system is also aware of predefined preprocessor symbols representing different <bpt id=\"p1\">[</bpt>target frameworks<ept id=\"p1\">](../../../standard/frameworks.md)</ept>.","pos":[2539,2681],"source":"The build system is also aware of predefined preprocessor symbols representing different [target frameworks](../../../standard/frameworks.md)."},{"content":"They're useful when creating applications that can target more than one .NET implementation or version.","pos":[2682,2785]},{"content":"Other predefined symbols include the DEBUG and TRACE constants.","pos":[2858,2921]},{"content":"You can override the values set for the project using <ph id=\"ph1\">`#define`</ph>.","pos":[2922,2986],"source":" You can override the values set for the project using `#define`."},{"content":"The DEBUG symbol, for example, is automatically set depending on your build configuration properties (\"Debug\" or \"Release\" mode).","pos":[2987,3116]},{"pos":[3121,3129],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows you how to define a MYTEST symbol on a file and then test the values of the MYTEST and DEBUG symbols.","pos":[3131,3260]},{"content":"The output of this example depends on whether you built the project on Debug or Release configuration mode.","pos":[3261,3368]},{"content":"The following example shows you how to test for different target frameworks so you can use newer APIs when possible:","pos":[3778,3894]},{"pos":[4099,4107],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4111,4170],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[4173,4239],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[4242,4280],"content":"<bpt id=\"p1\">[</bpt>C# Preprocessor Directives<ept id=\"p1\">](index.md)</ept>","source":"[C# Preprocessor Directives](index.md)"},{"pos":[4283,4428],"content":"<bpt id=\"p1\">[</bpt>How to: Compile Conditionally with Trace and Debug<ept id=\"p1\">](../../../framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)</ept>","source":"[How to: Compile Conditionally with Trace and Debug](../../../framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)"}]}