{"content":"---\ntitle: \"const keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"const_CSharpKeyword\"\n  - \"const\"\nhelpviewer_keywords: \n  - \"const keyword [C#]\"\nms.assetid: 79eb447c-117b-4418-933f-97c50aa472db\n---\n# const (C# Reference)\n\nYou use the `const` keyword to declare a constant field or a constant local. Constant fields and locals aren't variables and may not be modified. Constants can be numbers, Boolean values, strings, or a null reference. Don’t create a constant to represent information that you expect to change at any time. For example, don’t use a constant field to store the price of a service, a product version number, or the brand name of a company. These values can change over time, and because compilers propagate constants, other code compiled with your libraries will have to be recompiled to see the changes. See also the [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword. For example:\n\n```csharp\nconst int X = 0;\npublic const double GravitationalConstant = 6.673e-11;\nprivate const string ProductName = \"Visual C#\";\n```\n\n## Remarks\n\nThe type of a constant declaration specifies the type of the members that the declaration introduces. The initializer of a constant local or a constant field must be a constant expression that can be implicitly converted to the target type.\n\nA constant expression is an expression that can be fully evaluated at compile time. Therefore, the only possible values for constants of reference types are `string` and a null reference.\n\nThe constant declaration can declare multiple constants, such as:\n\n```csharp\npublic const double X = 1.0, Y = 2.0, Z = 3.0;\n```\n\nThe `static` modifier is not allowed in a constant declaration.\n\nA constant can participate in a constant expression, as follows:\n\n```csharp\npublic const int C1 = 5;\npublic const int C2 = C1 + 100;\n```\n\n> [!NOTE]\n> The [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword differs from the `const` keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be initialized either at the declaration or in a constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, although a `const` field is a compile-time constant, the `readonly` field can be used for run-time constants, as in this line: `public static readonly uint l1 = (uint)DateTime.Now.Ticks;`\n\n## Example\n\n[!code-csharp[csrefKeywordsModifiers#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsModifiers/CS/csrefKeywordsModifiers.cs#5)]\n\n## Example\n\nThis example demonstrates how to use constants as local variables.\n\n[!code-csharp[csrefKeywordsModifiers#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsModifiers/CS/csrefKeywordsModifiers.cs#6)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Modifiers](../../../csharp/language-reference/keywords/modifiers.md)\n- [readonly](../../../csharp/language-reference/keywords/readonly.md)\n","nodes":[{"pos":[4,230],"embed":true,"restype":"x-metadata","content":"title: \"const keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"const_CSharpKeyword\"\n  - \"const\"\nhelpviewer_keywords: \n  - \"const keyword [C#]\"\nms.assetid: 79eb447c-117b-4418-933f-97c50aa472db","nodes":[{"content":"const keyword - C# Reference","nodes":[{"pos":[0,28],"content":"const keyword - C# Reference","nodes":[{"content":"const keyword - C# Reference","pos":[0,28]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[237,257],"content":"const (C# Reference)","linkify":"const (C# Reference)","nodes":[{"content":"const (C# Reference)","pos":[0,20]}]},{"content":"You use the <ph id=\"ph1\">`const`</ph> keyword to declare a constant field or a constant local.","pos":[259,335],"source":"You use the `const` keyword to declare a constant field or a constant local."},{"content":"Constant fields and locals aren't variables and may not be modified.","pos":[336,404]},{"content":"Constants can be numbers, Boolean values, strings, or a null reference.","pos":[405,476]},{"content":"Don’t create a constant to represent information that you expect to change at any time.","pos":[477,564]},{"content":"For example, don’t use a constant field to store the price of a service, a product version number, or the brand name of a company.","pos":[565,695]},{"content":"These values can change over time, and because compilers propagate constants, other code compiled with your libraries will have to be recompiled to see the changes.","pos":[696,860]},{"content":"See also the <bpt id=\"p1\">[</bpt>readonly<ept id=\"p1\">](../../../csharp/language-reference/keywords/readonly.md)</ept> keyword.","pos":[861,950],"source":" See also the [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword."},{"content":"For example:","pos":[951,963]},{"pos":[1103,1110],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of a constant declaration specifies the type of the members that the declaration introduces.","pos":[1112,1213]},{"content":"The initializer of a constant local or a constant field must be a constant expression that can be implicitly converted to the target type.","pos":[1214,1352]},{"content":"A constant expression is an expression that can be fully evaluated at compile time.","pos":[1354,1437]},{"content":"Therefore, the only possible values for constants of reference types are <ph id=\"ph1\">`string`</ph> and a null reference.","pos":[1438,1541],"source":" Therefore, the only possible values for constants of reference types are `string` and a null reference."},{"content":"The constant declaration can declare multiple constants, such as:","pos":[1543,1608]},{"pos":[1672,1735],"content":"The <ph id=\"ph1\">`static`</ph> modifier is not allowed in a constant declaration.","source":"The `static` modifier is not allowed in a constant declaration."},{"content":"A constant can participate in a constant expression, as follows:","pos":[1737,1801]},{"pos":[1877,2442],"content":"[!NOTE]\nThe [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword differs from the `const` keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be initialized either at the declaration or in a constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, although a `const` field is a compile-time constant, the `readonly` field can be used for run-time constants, as in this line: `public static readonly uint l1 = (uint)DateTime.Now.Ticks;`","leadings":["","> "],"nodes":[{"content":"The [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword differs from the `const` keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be initialized either at the declaration or in a constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, although a `const` field is a compile-time constant, the `readonly` field can be used for run-time constants, as in this line: `public static readonly uint l1 = (uint)DateTime.Now.Ticks;`","pos":[8,563],"nodes":[{"content":"The <bpt id=\"p1\">[</bpt>readonly<ept id=\"p1\">](../../../csharp/language-reference/keywords/readonly.md)</ept> keyword differs from the <ph id=\"ph1\">`const`</ph> keyword.","pos":[0,113],"source":"The [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword differs from the `const` keyword."},{"content":"A <ph id=\"ph1\">`const`</ph> field can only be initialized at the declaration of the field.","pos":[114,186],"source":" A `const` field can only be initialized at the declaration of the field."},{"content":"A <ph id=\"ph1\">`readonly`</ph> field can be initialized either at the declaration or in a constructor.","pos":[187,271],"source":" A `readonly` field can be initialized either at the declaration or in a constructor."},{"content":"Therefore, <ph id=\"ph1\">`readonly`</ph> fields can have different values depending on the constructor used.","pos":[272,361],"source":" Therefore, `readonly` fields can have different values depending on the constructor used."},{"content":"Also, although a <ph id=\"ph1\">`const`</ph> field is a compile-time constant, the <ph id=\"ph2\">`readonly`</ph> field can be used for run-time constants, as in this line: <ph id=\"ph3\">`public static readonly uint l1 = (uint)DateTime.Now.Ticks;`</ph>","pos":[362,555],"source":" Also, although a `const` field is a compile-time constant, the `readonly` field can be used for run-time constants, as in this line: `public static readonly uint l1 = (uint)DateTime.Now.Ticks;`"}]}]},{"pos":[2447,2454],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2603,2610],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example demonstrates how to use constants as local variables.","pos":[2612,2678]},{"pos":[2827,2852],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2918,2926],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2930,2989],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[2992,3058],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[3061,3128],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[3131,3200],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/modifiers.md)</ept>","source":"[Modifiers](../../../csharp/language-reference/keywords/modifiers.md)"},{"pos":[3203,3270],"content":"<bpt id=\"p1\">[</bpt>readonly<ept id=\"p1\">](../../../csharp/language-reference/keywords/readonly.md)</ept>","source":"[readonly](../../../csharp/language-reference/keywords/readonly.md)"}]}