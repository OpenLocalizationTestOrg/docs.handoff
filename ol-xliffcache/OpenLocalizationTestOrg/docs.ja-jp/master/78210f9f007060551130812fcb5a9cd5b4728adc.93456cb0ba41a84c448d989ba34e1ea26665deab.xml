{"content":"---\ntitle: \"How to: Verify that Strings Are in Valid Email Format\"\nms.date: \"12/10/2018\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"regular expressions, examples\"\n  - \"user input, examples\"\n  - \"Regex.IsMatch method\"\n  - \"regular expressions [.NET Framework], examples\"\n  - \"examples [Visual Basic], strings\"\n  - \"IsValidEmail\"\n  - \"validation, email strings\"\n  - \"input, checking\"\n  - \"strings [.NET Framework], examples [Visual Basic]\"\n  - \"email [.NET Framework], validating\"\n  - \"IsMatch method\"\nms.assetid: 7536af08-4e86-4953-98a1-a8298623df92\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Verify that Strings Are in Valid Email Format\nThe following example uses a regular expression to verify that a string is in valid email format.  \n\n## Example  \n The example defines an `IsValidEmail` method, which returns `true` if the string contains a valid email address and `false` if it does not, but takes no other action.  \n  \n To verify that the email address is valid, the `IsValidEmail` method calls the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> method with the `(@)(.+)$` regular expression pattern to separate the domain name from the email address. The third parameter is a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate that represents the method that processes and replaces the matched text. The regular expression pattern is interpreted as follows.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`(@)`|Match the @ character. This is the first capturing group.|  \n|`(.+)`|Match one or more occurrences of any character. This is the second capturing group.|  \n|`$`|End the match at the end of the string.|  \n  \n The domain name along with the @ character is passed to the `DomainMapper` method, which uses the <xref:System.Globalization.IdnMapping> class to translate Unicode characters that are outside the US-ASCII character range to Punycode. The method also sets the `invalid` flag to `True` if the <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> method detects any invalid characters in the domain name. The method returns the Punycode domain name preceded by the @ symbol to the `IsValidEmail` method.  \n  \n The `IsValidEmail` method then calls the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29?displayProperty=nameWithType> method to verify that the address conforms to a regular expression pattern.  \n  \n Note that the `IsValidEmail` method does not perform authentication to validate the email address. It merely determines whether its format is valid for an email address. In addition, the `IsValidEmail` method does not verify that the top-level domain name is a valid domain name listed at the [IANA Root Zone Database](https://www.iana.org/domains/root/db), which would require a look-up operation. Instead, the regular expression merely verifies that the top-level domain name consists of between two and twenty-four ASCII characters, with alphanumeric first and last characters and the remaining characters being either alphanumeric or a hyphen (-).  \n  \n [!code-csharp[RegularExpressions.Examples.Email#7](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Email/cs/example4.cs#7)]\n [!code-vb[RegularExpressions.Examples.Email#7](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Email/vb/example4.vb#7)]  \n  \n In this example, the regular expression pattern ``^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`{}|~\\w])*)(?<=[0-9a-z])@))(?([)([(\\d{1,3}.){3}\\d{1,3}])|(([0-9a-z][-0-9a-z]*[0-9a-z]*.)+[a-z0-9][-a-z0-9]{0,22}[a-z0-9]))$`` is interpreted as shown in the following table. Note that the regular expression is compiled using the <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> flag.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`^`|Begin the match at the start of the string.|  \n|`(?(\")`|Determine whether the first character is a quotation mark. `(?(\")` is the beginning of an alternation construct.|  \n|`(?(\"\")(\"\".+?(?<!\\\\)\"\"@)`|If the first character is a quotation mark, match a beginning quotation mark followed by at least one occurrence of any character, followed by an ending quotation mark. The ending quotation mark must not be preceded by a backslash character (\\\\). `(?<!` is the beginning of a zero-width negative lookbehind assertion. The string should conclude with an at sign (@).|  \n|<code>&#124;(([0-9a-z]</code>|If the first character is not a quotation mark, match any alphabetic character from a to z or A to Z (the comparison is case insensitive), or any numeric character from 0 to 9.|  \n|`(\\.(?!\\.))`|If the next character is a period, match it. If it is not a period, look ahead to the next character and continue the match. `(?!\\.)` is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address.|  \n|<code>&#124;[-!#\\$%&'\\*\\+/=\\?\\^\\`{}&#124;~\\w]</code>|If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^\\`{}&#124;~.|  \n|<code>((\\.(?!\\.))&#124;[-!#\\$%'\\*\\+/=\\?\\^\\`{}&#124;~\\w])*</code>|Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times.|  \n|`@`|Match the @ character.|  \n|`(?<=[0-9a-z])`|Continue the match if the character that precedes the @ character is A through Z, a through z, or 0 through 9. The `(?<=[0-9a-z])` construct defines a zero-width positive lookbehind assertion.|  \n|`(?(\\[)`|Check whether the character that follows @ is an opening bracket.|  \n|`(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])`|If it is an opening bracket, match the opening bracket followed by an IP address (four sets of one to three digits, with each set separated by a period) and a closing bracket.|  \n|<code>&#124;(([0-9a-z][-0-9a-z]*[0-9a-z]*\\.)+</code>|If the character that follows @ is not an opening bracket, match one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by zero or more occurrences of a hyphen, followed by zero or one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by a period. This pattern can be repeated one or more times, and must be followed by the top-level domain name.|  \n|`[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))`|The top-level domain name must begin and end with an alphanumeric character (a-z, A-Z, and 0-9). It can also include from zero to 22 ASCII characters that are either alphanumeric or hyphens.|  \n|`$`|End the match at the end of the string.|  \n  \n## Compiling the Code  \n The `IsValidEmail` and `DomainMapper` methods can be included in a library of regular expression utility methods, or they can be included as private static or instance methods in the application class.  \n  \n To include them in a regular expression library, either copy and paste the code into a Visual Studio Class Library project, or copy and paste it into a text file and compile it from the command line with a command like the following (assuming that the name of the source code file is RegexUtilities.cs or RegexUtilities.vb:  \n  \n```csharp  \ncsc /t:library RegexUtilities.cs  \n```  \n  \n```vb  \nvbc /t:library RegexUtilities.vb  \n```  \n  \n You can also use the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> method to include this regular expression in a regular expression library.  \n  \n If they are used in a regular expression library, you can call them by using code such as the following:  \n  \n [!code-csharp[RegularExpressions.Examples.Email#8](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Email/cs/example4.cs#8)]\n [!code-vb[RegularExpressions.Examples.Email#8](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Email/vb/example4.vb#8)]  \n  \n Assuming you've created a class library named RegexUtilities.dll that includes your email validation regular expression, you can compile this example in either of the following ways:  \n  \n-   In Visual Studio, by creating a Console Application and adding a reference to RegexUtilities.dll to your project.  \n  \n-   From the command line, by copying and pasting the source code into a text file and compiling it with a command like the following (assuming that the name of the source code file is Example.cs or Example.vb:  \n  \n    ```csharp  \n    csc Example.cs /r:RegexUtilities.dll  \n    ```  \n  \n    ```vb  \n    vbc Example.vb /r:RegexUtilities.dll  \n    ```  \n  \n## See also\n\n- [.NET Framework Regular Expressions](../../../docs/standard/base-types/regular-expressions.md)\n","nodes":[{"pos":[4,637],"embed":true,"restype":"x-metadata","content":"title: \"How to: Verify that Strings Are in Valid Email Format\"\nms.date: \"12/10/2018\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"regular expressions, examples\"\n  - \"user input, examples\"\n  - \"Regex.IsMatch method\"\n  - \"regular expressions [.NET Framework], examples\"\n  - \"examples [Visual Basic], strings\"\n  - \"IsValidEmail\"\n  - \"validation, email strings\"\n  - \"input, checking\"\n  - \"strings [.NET Framework], examples [Visual Basic]\"\n  - \"email [.NET Framework], validating\"\n  - \"IsMatch method\"\nms.assetid: 7536af08-4e86-4953-98a1-a8298623df92\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Verify that Strings Are in Valid Email Format","nodes":[{"pos":[0,53],"content":"How to: Verify that Strings Are in Valid Email Format","nodes":[{"content":"How to: Verify that Strings Are in Valid Email Format","pos":[0,53]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[644,697],"content":"How to: Verify that Strings Are in Valid Email Format","linkify":"How to: Verify that Strings Are in Valid Email Format","nodes":[{"content":"How to: Verify that Strings Are in Valid Email Format","pos":[0,53]}]},{"content":"The following example uses a regular expression to verify that a string is in valid email format.","pos":[698,795]},{"pos":[802,809],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[813,979],"content":"The example defines an <ph id=\"ph1\">`IsValidEmail`</ph> method, which returns <ph id=\"ph2\">`true`</ph> if the string contains a valid email address and <ph id=\"ph3\">`false`</ph> if it does not, but takes no other action.","source":"The example defines an `IsValidEmail` method, which returns `true` if the string contains a valid email address and `false` if it does not, but takes no other action."},{"content":"To verify that the email address is valid, the <ph id=\"ph1\">`IsValidEmail`</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType&gt;</ph> method with the <ph id=\"ph3\">`(@)(.+)$`</ph> regular expression pattern to separate the domain name from the email address.","pos":[986,1334],"source":"To verify that the email address is valid, the `IsValidEmail` method calls the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> method with the `(@)(.+)$` regular expression pattern to separate the domain name from the email address."},{"content":"The third parameter is a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchEvaluator&gt;</ph> delegate that represents the method that processes and replaces the matched text.","pos":[1335,1494],"source":" The third parameter is a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate that represents the method that processes and replaces the matched text."},{"content":"The regular expression pattern is interpreted as follows.","pos":[1495,1552]},{"content":"Pattern","pos":[1559,1566]},{"content":"Description","pos":[1567,1578]},{"content":"Match the @ character.","pos":[1625,1647]},{"content":"This is the first capturing group.","pos":[1648,1682]},{"content":"Match one or more occurrences of any character.","pos":[1694,1741]},{"content":"This is the second capturing group.","pos":[1742,1777]},{"content":"End the match at the end of the string.","pos":[1786,1825]},{"content":"The domain name along with the @ character is passed to the <ph id=\"ph1\">`DomainMapper`</ph> method, which uses the <ph id=\"ph2\">&lt;xref:System.Globalization.IdnMapping&gt;</ph> class to translate Unicode characters that are outside the US-ASCII character range to Punycode.","pos":[1833,2066],"source":"The domain name along with the @ character is passed to the `DomainMapper` method, which uses the <xref:System.Globalization.IdnMapping> class to translate Unicode characters that are outside the US-ASCII character range to Punycode."},{"content":"The method also sets the <ph id=\"ph1\">`invalid`</ph> flag to <ph id=\"ph2\">`True`</ph> if the <ph id=\"ph3\">&lt;xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType&gt;</ph> method detects any invalid characters in the domain name.","pos":[2067,2261],"source":" The method also sets the `invalid` flag to `True` if the <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> method detects any invalid characters in the domain name."},{"content":"The method returns the Punycode domain name preceded by the @ symbol to the <ph id=\"ph1\">`IsValidEmail`</ph> method.","pos":[2262,2360],"source":" The method returns the Punycode domain name preceded by the @ symbol to the `IsValidEmail` method."},{"pos":[2367,2599],"content":"The <ph id=\"ph1\">`IsValidEmail`</ph> method then calls the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method to verify that the address conforms to a regular expression pattern.","source":"The `IsValidEmail` method then calls the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29?displayProperty=nameWithType> method to verify that the address conforms to a regular expression pattern."},{"content":"Note that the <ph id=\"ph1\">`IsValidEmail`</ph> method does not perform authentication to validate the email address.","pos":[2606,2704],"source":"Note that the `IsValidEmail` method does not perform authentication to validate the email address."},{"content":"It merely determines whether its format is valid for an email address.","pos":[2705,2775]},{"content":"In addition, the <ph id=\"ph1\">`IsValidEmail`</ph> method does not verify that the top-level domain name is a valid domain name listed at the <bpt id=\"p1\">[</bpt>IANA Root Zone Database<ept id=\"p1\">](https://www.iana.org/domains/root/db)</ept>, which would require a look-up operation.","pos":[2776,3004],"source":" In addition, the `IsValidEmail` method does not verify that the top-level domain name is a valid domain name listed at the [IANA Root Zone Database](https://www.iana.org/domains/root/db), which would require a look-up operation."},{"content":"Instead, the regular expression merely verifies that the top-level domain name consists of between two and twenty-four ASCII characters, with alphanumeric first and last characters and the remaining characters being either alphanumeric or a hyphen (-).","pos":[3005,3257]},{"content":"In this example, the regular expression pattern <ph id=\"ph1\">``^(?(\")(\".+?(?&lt;!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&amp;'\\*\\+/=\\?\\^`{}|~\\w])*)(?&lt;=[0-9a-z])@))(?([)([(\\d{1,3}.){3}\\d{1,3}])|(([0-9a-z][-0-9a-z]*[0-9a-z]*.)+[a-z0-9][-a-z0-9]{0,22}[a-z0-9]))$``</ph> is interpreted as shown in the following table.","pos":[3578,3864],"source":"In this example, the regular expression pattern ``^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`{}|~\\w])*)(?<=[0-9a-z])@))(?([)([(\\d{1,3}.){3}\\d{1,3}])|(([0-9a-z][-0-9a-z]*[0-9a-z]*.)+[a-z0-9][-a-z0-9]{0,22}[a-z0-9]))$`` is interpreted as shown in the following table."},{"content":"Note that the regular expression is compiled using the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType&gt;</ph> flag.","pos":[3865,4016],"source":" Note that the regular expression is compiled using the <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> flag."},{"content":"Pattern","pos":[4023,4030]},{"content":"Description","pos":[4031,4042]},{"content":"Begin the match at the start of the string.","pos":[4087,4130]},{"content":"Determine whether the first character is a quotation mark.","pos":[4143,4201]},{"content":"<ph id=\"ph1\">`(?(\")`</ph> is the beginning of an alternation construct.","pos":[4202,4255],"source":"`(?(\")` is the beginning of an alternation construct."},{"content":"If the first character is a quotation mark, match a beginning quotation mark followed by at least one occurrence of any character, followed by an ending quotation mark.","pos":[4286,4454]},{"content":"The ending quotation mark must not be preceded by a backslash character (<ph id=\"ph1\">\\\\</ph>).","pos":[4455,4532],"source":" The ending quotation mark must not be preceded by a backslash character (\\\\)."},{"content":"<ph id=\"ph1\">`(?&lt;!`</ph> is the beginning of a zero-width negative lookbehind assertion.","pos":[4533,4603],"source":"`(?<!` is the beginning of a zero-width negative lookbehind assertion."},{"content":"The string should conclude with an at sign (@).","pos":[4604,4651]},{"content":"If the first character is not a quotation mark, match any alphabetic character from a to z or A to Z (the comparison is case insensitive), or any numeric character from 0 to 9.","pos":[4686,4862]},{"content":"If the next character is a period, match it.","pos":[4880,4924]},{"content":"If it is not a period, look ahead to the next character and continue the match.","pos":[4925,5004]},{"content":"<ph id=\"ph1\">`(?!\\.)`</ph> is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address.","pos":[5005,5150],"source":"`(?!\\.)` is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address."},{"pos":[5155,5331],"content":"<ph id=\"ph1\">&lt;code&gt;&amp;#124;[-!#\\$%&amp;'\\*\\+/=\\?\\^\\`{}&amp;#124;~\\w]&lt;/code&gt;</ph>|If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^<ph id=\"ph2\">\\`</ph><ph id=\"ph3\">{}</ph>&amp;#124;~.","source":"<code>&#124;[-!#\\$%&'\\*\\+/=\\?\\^\\`{}&#124;~\\w]</code>|If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^\\`{}&#124;~."},{"pos":[5336,5520],"content":"<ph id=\"ph1\">&lt;code&gt;((\\.(?!\\.))&amp;#124;[-!#\\$%'\\*\\+/=\\?\\^\\`{}&amp;#124;~\\w])*&lt;/code&gt;</ph>|Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times.","source":"<code>((\\.(?!\\.))&#124;[-!#\\$%'\\*\\+/=\\?\\^\\`{}&#124;~\\w])*</code>|Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times."},{"content":"Match the @ character.","pos":[5529,5551]},{"content":"Continue the match if the character that precedes the @ character is A through Z, a through z, or 0 through 9.","pos":[5572,5682]},{"content":"The <ph id=\"ph1\">`(?&lt;=[0-9a-z])`</ph> construct defines a zero-width positive lookbehind assertion.","pos":[5683,5764],"source":" The `(?<=[0-9a-z])` construct defines a zero-width positive lookbehind assertion."},{"content":"Check whether the character that follows @ is an opening bracket.","pos":[5778,5843]},{"content":"If it is an opening bracket, match the opening bracket followed by an IP address (four sets of one to three digits, with each set separated by a period) and a closing bracket.","pos":[5878,6053]},{"content":"If the character that follows @ is not an opening bracket, match one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by zero or more occurrences of a hyphen, followed by zero or one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by a period.","pos":[6111,6389]},{"content":"This pattern can be repeated one or more times, and must be followed by the top-level domain name.","pos":[6390,6488]},{"content":"The top-level domain name must begin and end with an alphanumeric character (a-z, A-Z, and 0-9).","pos":[6530,6626]},{"content":"It can also include from zero to 22 ASCII characters that are either alphanumeric or hyphens.","pos":[6627,6720]},{"content":"End the match at the end of the string.","pos":[6729,6768]},{"pos":[6778,6796],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[6800,7001],"content":"The <ph id=\"ph1\">`IsValidEmail`</ph> and <ph id=\"ph2\">`DomainMapper`</ph> methods can be included in a library of regular expression utility methods, or they can be included as private static or instance methods in the application class.","source":"The `IsValidEmail` and `DomainMapper` methods can be included in a library of regular expression utility methods, or they can be included as private static or instance methods in the application class."},{"content":"To include them in a regular expression library, either copy and paste the code into a Visual Studio Class Library project, or copy and paste it into a text file and compile it from the command line with a command like the following (assuming that the name of the source code file is RegexUtilities.cs or RegexUtilities.vb:","pos":[7008,7331]},{"pos":[7446,7635],"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType&gt;</ph> method to include this regular expression in a regular expression library.","source":"You can also use the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> method to include this regular expression in a regular expression library."},{"content":"If they are used in a regular expression library, you can call them by using code such as the following:","pos":[7642,7746]},{"content":"Assuming you've created a class library named RegexUtilities.dll that includes your email validation regular expression, you can compile this example in either of the following ways:","pos":[8067,8249]},{"content":"In Visual Studio, by creating a Console Application and adding a reference to RegexUtilities.dll to your project.","pos":[8259,8372]},{"content":"From the command line, by copying and pasting the source code into a text file and compiling it with a command like the following (assuming that the name of the source code file is Example.cs or Example.vb:","pos":[8382,8588]},{"pos":[8737,8745],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8749,8843],"content":"<bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](../../../docs/standard/base-types/regular-expressions.md)</ept>","source":"[.NET Framework Regular Expressions](../../../docs/standard/base-types/regular-expressions.md)"}]}