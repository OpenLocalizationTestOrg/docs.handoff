{"content":"---\ntitle: \"String Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: 338f0c26-8aee-43eb-bd1a-ec0849a376b9\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# String Functions\nThe .NET Framework Data Provider for SQL Server (SqlClient) provides `String` functions that perform operations on an input `String` and return a `String` or numeric value result. These functions are in the SqlServer namespace, which is available when you use SqlClient. A provider's namespace property allows the Entity Framework to discover which prefix is used by this provider for specific constructs, such as types and functions.  \n  \n The following table shows the SqlClient `String` functions.  \n  \n|Function|Description|  \n|--------------|-----------------|  \n|`ASCII(` `expression` `)`|Returns the ASCII code value of the leftmost character of a string expression.<br /><br /> **Arguments**<br /><br /> `expression`: Any valid expression of an ASCII `String` type.<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> `SqlServer.ASCII('A')`|  \n|`CHAR(` `expression` `)`|Converts an `Int32` code to an ASCII String.<br /><br /> **Arguments**<br /><br /> `expression`: An `Int32`.<br /><br /> **Return Value**<br /><br /> An ASCII `String`.<br /><br /> **Example**<br /><br /> `SqlServer.char(97)`|  \n|`CHARINDEX(` `expression1, expression2` [, `start_location`]`)`|Returns the starting position of the specified expression in a character string.<br /><br /> **Arguments**<br /><br /> `expression1`: An expression that contains the sequence of characters to be found. The expression can be of a String (ASCII or Unicode) type or of a Binary type.<br /><br /> `expression2`: An expression, typically a column, to be searched for the specified sequence. The expression can be of a String (ASCII or Unicode) type or of a Binary type.<br /><br /> `start_location`:(Optional) An Int64 (not returned in SQL Server 2000) or Int32 that represents the character position to start searching for expression1 in expression2. If start_location is not specified, is a negative number, or is zero, the search starts at the beginning of expression2.<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> `SqlServer.CHARINDEX('h', 'habcdefgh', 2)`|  \n|`DIFFERENCE(` `expression, expression` `)`|Compares the `SOUNDEX` values of two strings and evaluates the similarity between them.<br /><br /> **Arguments**<br /><br /> An ASCII or Unicode `String` type. `expression` can be a constant, a variable, or a column.<br /><br /> **Return Value**<br /><br /> Returns an `Int32` that represents the difference between the SOUNDEX values of two character expressions. The range is from 0 through 4. 0 indicates a weak similarity or no similarity, and 4 indicates a strong similarity or the same values.<br /><br /> **Example**<br /><br /> `// The following example returns a DIFFERENCE value of 4,`<br /><br /> `//the least possible difference or the best match.`<br /><br /> `SqlServer.DIFFERENCE('Green','Greene');`|  \n|`LEFT(` `expression, count` `)`|Returns the left part of a character string with the specified number of characters.<br /><br /> **Arguments**<br /><br /> `expression`: A Unicode or ASCII String type. Use the CAST function to explicitly convert character_expression.<br /><br /> `count`: An `Int64` (not returned in SQL Server 2000) or `Int32` type that specifies how many characters of character_expression will be returned.<br /><br /> **Return Value**<br /><br /> A Unicode or ASCII `String`.<br /><br /> **Example**<br /><br /> `SqlServer.LEFT('SQL Server', 4)`|  \n|`LEN(` `expression` `)`|Returns the number of characters in the specified String expression, excluding trailing blanks.<br /><br /> **Arguments**<br /><br /> `expression`: An expression of a `String` (Unicode or ASCII) type or a `Binary` type<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> `SqlServer.LEN('abcd')`|  \n|`LOWER(` `expression` `)`|Returns a `String` expression after converting uppercase character data to lowercase.<br /><br /> **Arguments**<br /><br /> `expression`: Any valid expression of the `String` type.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `SqlServer.LOWER('AbB')`|  \n|`LTRIM(` `expression` `)`|Returns a `String` expression after removing leading spaces.<br /><br /> **Arguments**<br /><br /> `expression`: Any valid expression of `String` type.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `SqlServer.LTRIM('   d')`|  \n|`NCHAR(` `expression` `)`|Returns a Unicode `String` with the specified integer code, as defined by the Unicode standard.<br /><br /> **Arguments**<br /><br /> `expression`: An `Int32`.<br /><br /> **Return Value**<br /><br /> A Unicode `String`.<br /><br /> **Example**<br /><br /> `SqlServer.NCHAR(65)`|  \n|`PATINDEX(` `'%pattern%'`, `expression``)`|Returns the starting position of the first occurrence of a pattern in a specified `String` expression.<br /><br /> **Arguments**<br /><br /> `'%pattern%'`: An ASCII or Unicode `String` type. Wildcard characters can be used; however, the % character must come before and after pattern (except in searches for first or last characters).<br /><br /> `expression`: An ASCII or Unicode `String` to search for the specified pattern.<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> `SqlServer.PATINDEX('abc', 'ab')`|  \n|`QUOTENAME(` `'char_string'` [, '`quote_char'`]`)`|Returns a Unicode `String` with the delimiters added to make the input string a valid SQL Server 2005 delimited identifier.<br /><br /> **Arguments**<br /><br /> `char_string`: A Unicode `String`.<br /><br /> `quote_char`: A one-character string to use as the delimiter. Can be a single quotation mark ( ' ), a left or right bracket ( [ ] ), or a double quotation mark ( \" ). If `quote_char` is not specified, brackets are used.<br /><br /> **Return Value**<br /><br /> A Unicode `String`.<br /><br /> **Example**<br /><br /> `SqlServer.QUOTENAME('abc[]def')`|  \n|`REPLACE(` `expression1`, `expression2, expression3``)`|Repeats a character expression for a specified number of times.<br /><br /> **Arguments**<br /><br /> `expression1`: The string expression to be searched. string_expression1 can be of a Unicode or an ASCII String type.<br /><br /> `expression2`:The substring to be found. string_expression2 can be of a Unicode or an ASCII String type.<br /><br /> `expression3`; The replacement string. string_expression3 can be of a Unicode or an ASCII String type.<br /><br /> **Example**<br /><br /> `SqlServer.REPLACE('aabbcc', 'bc', 'zz')`|  \n|`REPLICATE(` `char_expression`, int_`expression``)`|Repeats a character expression for a specified number of times.<br /><br /> **Arguments**<br /><br /> `char_expression`: A Unicode or ASCII `String` type.<br /><br /> `int_expression`: `Int64` (not supported in SQL Server 2000) or `Int32`.<br /><br /> **Return Value**<br /><br /> A Unicode or ASCII `String` type.<br /><br /> **Example**<br /><br /> `SqlServer.REPLICATE('aa',2)`|  \n|`REVERSE(` `expression` `)`|Returns a Unicode or ASCII String with its character positions reversed from the input string.<br /><br /> **Arguments**<br /><br /> `expression`: A Unicode or ASCII `String` type.<br /><br /> **Return Value**<br /><br /> A Unicode or ASCII `String` type.<br /><br /> **Example**<br /><br /> `SqlServer.REVERSE('abcd')`|  \n|`RIGHT(` `char_expression`, `count``)`|Returns the right part of a character string with the specified number of characters.<br /><br /> **Arguments**<br /><br /> `char_expression`:A Unicode or ASCII String type. Use the CAST function to explicitly convert character_expression.<br /><br /> `count`: An `Int64` (not returned in SQL Server 2000) or `Int32` type that specifies how many characters of character_expression will be returned.<br /><br /> **Return Value**<br /><br /> An ASCII `String` type.<br /><br /> **Example**<br /><br /> `SqlServer.RIGHT('SQL Server', 6)`|  \n|`RTRIM(` `expression` `)`|Returns a Unicode or ASCII String after removing trailing spaces.<br /><br /> **Arguments**<br /><br /> `expression`: A Unicode or ASCII `String` type.<br /><br /> **Return Value**<br /><br /> A Unicode or ASCII `String` type.<br /><br /> **Example**<br /><br /> `SqlServer.RTRIM('   d   e      ')`|  \n|`SOUNDEX(` `expression` `)`|Returns a four-character (SOUNDEX) code to evaluate the similarity of two strings.**Arguments**<br /><br /> `expression`: A Unicode or ASCII String type.<br /><br /> **Return Value**<br /><br /> An ASCII `String`. A four-character (SOUNDEX) code is a string that evaluates the similarity of two strings.<br /><br /> **Example**<br /><br /> `Select SqlServer.SOUNDEX('Smith'), SqlServer.SOUNDEX('Smythe') FROM {1}`<br /><br /> **Returns**<br /><br /> `----- -----  S530  S530`|  \n|`SPACE(` `int_expression` `)`|Returns an ASCII `String` of repeated spaces.<br /><br /> **Arguments**<br /><br /> `int_expression`: An `Int64` (not returned in SQL Server 2000) or `Int32` that indicates the number of spaces.<br /><br /> **Return Value**<br /><br /> An ASCII `String`.<br /><br /> **Example**<br /><br /> `SqlServer.SPACE(2)`|  \n|`STR(` `float_expression` [, `length` [, `decimal`]]`)`|Returns an ASCII `String` converted from numeric data.<br /><br /> **Arguments**<br /><br /> `float _expression`: A expression of approximate numeric (`Double`) data type with a decimal point.<br /><br /> `length`: (optional) An `Int32` that represents the total length. This includes decimal point, sign, digits, and spaces. The default is 10.<br /><br /> `decimal`:(optional) An `Int32` that represents the number of places to the right of the decimal point. decimal must be less than or equal to 16. If decimal is more than 16, the result is truncated to sixteen places to the right of the decimal point.<br /><br /> **Return Value**<br /><br /> An ASCII `String`.<br /><br /> **Example**<br /><br /> `SqlServer.STR(212.0)`|  \n|`STUFF(` `str_expression`, `start, length`, `str_expression_to_insert``)`|Deletes a specified length of characters and inserts another set of characters at a specified starting point in a string expression.<br /><br /> **Arguments**<br /><br /> `str_expression`: A Unicode or ASCII `String`.<br /><br /> `start:` An `Int64` (not returned in SQL Server 2000) or `Int32` value that specifies the location to start the deletion and insertion.<br /><br /> `length`: An `Int64` (not returned in SQL Server 2000) or `Int32` value that specifies the number of characters to delete.<br /><br /> `str_expression_to_insert`: A Unicode or ASCII `String`.<br /><br /> **Return Value**<br /><br /> A Unicode or ASCII `String`.<br /><br /> **Example**<br /><br /> `SqlServer.STUFF('abcd', 2, 2, 'zz')`|  \n|`SUBSTRING(` `str_expression`, `start, length``)`|Returns part of a `String` expression.<br /><br /> **Arguments**<br /><br /> `str_expression`: An expression of a `String` (ASCII or Unicode) type or a `Binary` type.<br /><br /> `start`: An `Int64` (not returned in SQL Server 2000) or `Int32` that specifies where the substring starts. 1 refers to the first character in the string.<br /><br /> `length`: An `Int64` (not returned in SQL Server 2000) or `Int32` that specifies how many characters of the expression will be returned.<br /><br /> **Return Value**<br /><br /> A `String` (ASCII or Unicode) type or a `Binary` type.<br /><br /> **Example**<br /><br /> `SqlServer.SUBSTRING('abcd', 2, 2)`|  \n|`UNICODE(` `expression` `)`|Returns the integer value, as defined by the Unicode standard, for the first character of the input expression.<br /><br /> **Arguments**<br /><br /> `expression`: A Unicode `String`.<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> `SqlServer.UNICODE('a')`|  \n|`UPPER(` `expression` `)`|Returns a `String` expression after converting lowercase character data to uppercase.<br /><br /> **Arguments**<br /><br /> `expression`: An expression of an ASCII or a Unicode String type.<br /><br /> **Return Value**<br /><br /> An ASCII or a Unicode `String` type.<br /><br /> **Example**<br /><br /> `SqlServer.UPPER('AbB')`|  \n  \n For more information about the `String` functions that SqlClient supports, see the documentation for the SQL Server version that you specified in the SqlClient provider manifest:  \n  \n|SQL Server 2000|SQL Server 2005|SQL Server 2008|  \n|---------------------|---------------------|---------------------|  \n|[String Functions (Transact-SQL)](http://go.microsoft.com/fwlink/?LinkId=115915)|[String Functions (Transact-SQL)](http://go.microsoft.com/fwlink/?LinkId=115916)|[String Functions (Transact-SQL)](http://go.microsoft.com/fwlink/?LinkId=115914)|  \n  \n## See Also  \n [SqlClient for Entity Framework Functions](../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md)   \n [Known Issues in SqlClient for Entity Framework](../../../../../docs/framework/data/adonet/ef/known-issues-in-sqlclient-for-entity-framework.md)","nodes":[{"pos":[12,45],"content":"String Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"String Functions | Microsoft Docs","pos":[0,33]}]},{"pos":[398,414],"content":"String Functions","linkify":"String Functions","nodes":[{"content":"String Functions","pos":[0,16]}]},{"content":"The .NET Framework Data Provider for SQL Server (SqlClient) provides <ph id=\"ph1\">`String`</ph> functions that perform operations on an input <ph id=\"ph2\">`String`</ph> and return a <ph id=\"ph3\">`String`</ph> or numeric value result.","pos":[415,594],"source":"The .NET Framework Data Provider for SQL Server (SqlClient) provides `String` functions that perform operations on an input `String` and return a `String` or numeric value result."},{"content":"These functions are in the SqlServer namespace, which is available when you use SqlClient.","pos":[595,685]},{"content":"A provider's namespace property allows the Entity Framework to discover which prefix is used by this provider for specific constructs, such as types and functions.","pos":[686,849]},{"pos":[856,915],"content":"The following table shows the SqlClient <ph id=\"ph1\">`String`</ph> functions.","source":"The following table shows the SqlClient `String` functions."},{"content":"Function","pos":[922,930]},{"content":"Description","pos":[931,942]},{"pos":[984,1009],"content":"<ph id=\"ph1\">`ASCII(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`ASCII(` `expression` `)`"},{"content":"Returns the ASCII code value of the leftmost character of a string expression.","pos":[1010,1088]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1101,1114],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: Any valid expression of an ASCII <ph id=\"ph2\">`String`</ph> type.","pos":[1127,1188],"source":"`expression`: Any valid expression of an ASCII `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[1201,1217],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[1230,1241],"source":" An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1254,1265],"source":"**Example**"},{"pos":[1305,1329],"content":"<ph id=\"ph1\">`CHAR(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`CHAR(` `expression` `)`"},{"content":"Converts an <ph id=\"ph1\">`Int32`</ph> code to an ASCII String.","pos":[1330,1374],"source":"Converts an `Int32` code to an ASCII String."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1387,1400],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: An <ph id=\"ph2\">`Int32`</ph>.","pos":[1413,1438],"source":"`expression`: An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[1451,1467],"source":"**Return Value**"},{"content":"An ASCII <ph id=\"ph1\">`String`</ph>.","pos":[1480,1498],"source":" An ASCII `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1511,1522],"source":"**Example**"},{"pos":[1560,1623],"content":"<ph id=\"ph1\">`CHARINDEX(`</ph> <ph id=\"ph2\">`expression1, expression2`</ph> [, <ph id=\"ph3\">`start_location`</ph>]<ph id=\"ph4\">`)`</ph>","source":"`CHARINDEX(` `expression1, expression2` [, `start_location`]`)`"},{"content":"Returns the starting position of the specified expression in a character string.","pos":[1624,1704]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1717,1730],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression1`</ph>: An expression that contains the sequence of characters to be found.","pos":[1743,1825],"source":"`expression1`: An expression that contains the sequence of characters to be found."},{"content":"The expression can be of a String (ASCII or Unicode) type or of a Binary type.","pos":[1826,1904]},{"content":"<ph id=\"ph1\">`expression2`</ph>: An expression, typically a column, to be searched for the specified sequence.","pos":[1917,2009],"source":"`expression2`: An expression, typically a column, to be searched for the specified sequence."},{"content":"The expression can be of a String (ASCII or Unicode) type or of a Binary type.","pos":[2010,2088]},{"content":"<ph id=\"ph1\">`start_location`</ph>:(Optional) An Int64 (not returned in SQL Server 2000) or Int32 that represents the character position to start searching for expression1 in expression2.","pos":[2101,2270],"source":"`start_location`:(Optional) An Int64 (not returned in SQL Server 2000) or Int32 that represents the character position to start searching for expression1 in expression2."},{"content":"If start_location is not specified, is a negative number, or is zero, the search starts at the beginning of expression2.","pos":[2271,2391]},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[2404,2420],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[2433,2444],"source":" An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[2457,2468],"source":"**Example**"},{"pos":[2528,2570],"content":"<ph id=\"ph1\">`DIFFERENCE(`</ph> <ph id=\"ph2\">`expression, expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`DIFFERENCE(` `expression, expression` `)`"},{"content":"Compares the <ph id=\"ph1\">`SOUNDEX`</ph> values of two strings and evaluates the similarity between them.","pos":[2571,2658],"source":"Compares the `SOUNDEX` values of two strings and evaluates the similarity between them."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[2671,2684],"source":"**Arguments**"},{"content":"An ASCII or Unicode <ph id=\"ph1\">`String`</ph> type.","pos":[2697,2731],"source":" An ASCII or Unicode `String` type."},{"content":"<ph id=\"ph1\">`expression`</ph> can be a constant, a variable, or a column.","pos":[2732,2788],"source":"`expression` can be a constant, a variable, or a column."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[2801,2817],"source":"**Return Value**"},{"content":"Returns an <ph id=\"ph1\">`Int32`</ph> that represents the difference between the SOUNDEX values of two character expressions.","pos":[2830,2936],"source":" Returns an `Int32` that represents the difference between the SOUNDEX values of two character expressions."},{"content":"The range is from 0 through 4.","pos":[2937,2967]},{"content":"0 indicates a weak similarity or no similarity, and 4 indicates a strong similarity or the same values.","pos":[2968,3071]},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[3084,3095],"source":"**Example**"},{"pos":[3291,3322],"content":"<ph id=\"ph1\">`LEFT(`</ph> <ph id=\"ph2\">`expression, count`</ph> <ph id=\"ph3\">`)`</ph>","source":"`LEFT(` `expression, count` `)`"},{"content":"Returns the left part of a character string with the specified number of characters.","pos":[3323,3407]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[3420,3433],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: A Unicode or ASCII String type.","pos":[3446,3491],"source":"`expression`: A Unicode or ASCII String type."},{"content":"Use the CAST function to explicitly convert character_expression.","pos":[3492,3557]},{"content":"<ph id=\"ph1\">`count`</ph>: An <ph id=\"ph2\">`Int64`</ph> (not returned in SQL Server 2000) or <ph id=\"ph3\">`Int32`</ph> type that specifies how many characters of character_expression will be returned.","pos":[3570,3716],"source":"`count`: An `Int64` (not returned in SQL Server 2000) or `Int32` type that specifies how many characters of character_expression will be returned."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[3729,3745],"source":"**Return Value**"},{"content":"A Unicode or ASCII <ph id=\"ph1\">`String`</ph>.","pos":[3758,3786],"source":" A Unicode or ASCII `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[3799,3810],"source":"**Example**"},{"pos":[3861,3884],"content":"<ph id=\"ph1\">`LEN(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`LEN(` `expression` `)`"},{"content":"Returns the number of characters in the specified String expression, excluding trailing blanks.","pos":[3885,3980]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[3993,4006],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: An expression of a <ph id=\"ph2\">`String`</ph> (Unicode or ASCII) type or a <ph id=\"ph3\">`Binary`</ph> type","pos":[4019,4103],"source":"`expression`: An expression of a `String` (Unicode or ASCII) type or a `Binary` type"},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4116,4132],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[4145,4156],"source":" An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4169,4180],"source":"**Example**"},{"pos":[4221,4246],"content":"<ph id=\"ph1\">`LOWER(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`LOWER(` `expression` `)`"},{"content":"Returns a <ph id=\"ph1\">`String`</ph> expression after converting uppercase character data to lowercase.","pos":[4247,4332],"source":"Returns a `String` expression after converting uppercase character data to lowercase."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4345,4358],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: Any valid expression of the <ph id=\"ph2\">`String`</ph> type.","pos":[4371,4427],"source":"`expression`: Any valid expression of the `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4440,4456],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4469,4480],"source":" A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4493,4504],"source":"**Example**"},{"pos":[4546,4571],"content":"<ph id=\"ph1\">`LTRIM(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`LTRIM(` `expression` `)`"},{"content":"Returns a <ph id=\"ph1\">`String`</ph> expression after removing leading spaces.","pos":[4572,4632],"source":"Returns a `String` expression after removing leading spaces."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4645,4658],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: Any valid expression of <ph id=\"ph2\">`String`</ph> type.","pos":[4671,4723],"source":"`expression`: Any valid expression of `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4736,4752],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4765,4776],"source":" A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4789,4800],"source":"**Example**"},{"pos":[4843,4868],"content":"<ph id=\"ph1\">`NCHAR(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`NCHAR(` `expression` `)`"},{"content":"Returns a Unicode <ph id=\"ph1\">`String`</ph> with the specified integer code, as defined by the Unicode standard.","pos":[4869,4964],"source":"Returns a Unicode `String` with the specified integer code, as defined by the Unicode standard."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4977,4990],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: An <ph id=\"ph2\">`Int32`</ph>.","pos":[5003,5028],"source":"`expression`: An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[5041,5057],"source":"**Return Value**"},{"content":"A Unicode <ph id=\"ph1\">`String`</ph>.","pos":[5070,5089],"source":" A Unicode `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[5102,5113],"source":"**Example**"},{"pos":[5152,5194],"content":"<ph id=\"ph1\">`PATINDEX(`</ph> <ph id=\"ph2\">`'%pattern%'`</ph>, <ph id=\"ph3\">`expression``)`</ph>","source":"`PATINDEX(` `'%pattern%'`, `expression``)`"},{"content":"Returns the starting position of the first occurrence of a pattern in a specified <ph id=\"ph1\">`String`</ph> expression.","pos":[5195,5297],"source":"Returns the starting position of the first occurrence of a pattern in a specified `String` expression."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[5310,5323],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`'%pattern%'`</ph>: An ASCII or Unicode <ph id=\"ph2\">`String`</ph> type.","pos":[5336,5385],"source":"`'%pattern%'`: An ASCII or Unicode `String` type."},{"content":"Wildcard characters can be used; however, the % character must come before and after pattern (except in searches for first or last characters).","pos":[5386,5529]},{"content":"<ph id=\"ph1\">`expression`</ph>: An ASCII or Unicode <ph id=\"ph2\">`String`</ph> to search for the specified pattern.","pos":[5542,5621],"source":"`expression`: An ASCII or Unicode `String` to search for the specified pattern."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[5634,5650],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[5663,5674],"source":" An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[5687,5698],"source":"**Example**"},{"pos":[5749,5799],"content":"<ph id=\"ph1\">`QUOTENAME(`</ph> <ph id=\"ph2\">`'char_string'`</ph> [, '<ph id=\"ph3\">`quote_char'`</ph>]<ph id=\"ph4\">`)`</ph>","source":"`QUOTENAME(` `'char_string'` [, '`quote_char'`]`)`"},{"content":"Returns a Unicode <ph id=\"ph1\">`String`</ph> with the delimiters added to make the input string a valid SQL Server 2005 delimited identifier.","pos":[5800,5923],"source":"Returns a Unicode `String` with the delimiters added to make the input string a valid SQL Server 2005 delimited identifier."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[5936,5949],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`char_string`</ph>: A Unicode <ph id=\"ph2\">`String`</ph>.","pos":[5962,5996],"source":"`char_string`: A Unicode `String`."},{"content":"<ph id=\"ph1\">`quote_char`</ph>: A one-character string to use as the delimiter.","pos":[6009,6070],"source":"`quote_char`: A one-character string to use as the delimiter."},{"content":"Can be a single quotation mark ( ' ), a left or right bracket ( [ ] ), or a double quotation mark ( \" ).","pos":[6071,6175]},{"content":"If <ph id=\"ph1\">`quote_char`</ph> is not specified, brackets are used.","pos":[6176,6228],"source":" If `quote_char` is not specified, brackets are used."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[6241,6257],"source":"**Return Value**"},{"content":"A Unicode <ph id=\"ph1\">`String`</ph>.","pos":[6270,6289],"source":" A Unicode `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6302,6313],"source":"**Example**"},{"pos":[6364,6419],"content":"<ph id=\"ph1\">`REPLACE(`</ph> <ph id=\"ph2\">`expression1`</ph>, <ph id=\"ph3\">`expression2, expression3``)`</ph>","source":"`REPLACE(` `expression1`, `expression2, expression3``)`"},{"content":"Repeats a character expression for a specified number of times.","pos":[6420,6483]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[6496,6509],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression1`</ph>: The string expression to be searched.","pos":[6522,6574],"source":"`expression1`: The string expression to be searched."},{"content":"string_expression1 can be of a Unicode or an ASCII String type.","pos":[6575,6638]},{"content":"<ph id=\"ph1\">`expression2`</ph>:The substring to be found.","pos":[6651,6691],"source":"`expression2`:The substring to be found."},{"content":"string_expression2 can be of a Unicode or an ASCII String type.","pos":[6692,6755]},{"content":"<ph id=\"ph1\">`expression3`</ph>; The replacement string.","pos":[6768,6806],"source":"`expression3`; The replacement string."},{"content":"string_expression3 can be of a Unicode or an ASCII String type.","pos":[6807,6870]},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6883,6894],"source":"**Example**"},{"pos":[6953,7004],"content":"<ph id=\"ph1\">`REPLICATE(`</ph> <ph id=\"ph2\">`char_expression`</ph>, int_<ph id=\"ph3\">`expression``)`</ph>","source":"`REPLICATE(` `char_expression`, int_`expression``)`"},{"content":"Repeats a character expression for a specified number of times.","pos":[7005,7068]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[7081,7094],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`char_expression`</ph>: A Unicode or ASCII <ph id=\"ph2\">`String`</ph> type.","pos":[7107,7159],"source":"`char_expression`: A Unicode or ASCII `String` type."},{"content":"<ph id=\"ph1\">`int_expression`</ph>: <ph id=\"ph2\">`Int64`</ph> (not supported in SQL Server 2000) or <ph id=\"ph3\">`Int32`</ph>.","pos":[7172,7244],"source":"`int_expression`: `Int64` (not supported in SQL Server 2000) or `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[7257,7273],"source":"**Return Value**"},{"content":"A Unicode or ASCII <ph id=\"ph1\">`String`</ph> type.","pos":[7286,7319],"source":" A Unicode or ASCII `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[7332,7343],"source":"**Example**"},{"pos":[7390,7417],"content":"<ph id=\"ph1\">`REVERSE(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`REVERSE(` `expression` `)`"},{"content":"Returns a Unicode or ASCII String with its character positions reversed from the input string.","pos":[7418,7512]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[7525,7538],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: A Unicode or ASCII <ph id=\"ph2\">`String`</ph> type.","pos":[7551,7598],"source":"`expression`: A Unicode or ASCII `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[7611,7627],"source":"**Return Value**"},{"content":"A Unicode or ASCII <ph id=\"ph1\">`String`</ph> type.","pos":[7640,7673],"source":" A Unicode or ASCII `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[7686,7697],"source":"**Example**"},{"pos":[7742,7780],"content":"<ph id=\"ph1\">`RIGHT(`</ph> <ph id=\"ph2\">`char_expression`</ph>, <ph id=\"ph3\">`count``)`</ph>","source":"`RIGHT(` `char_expression`, `count``)`"},{"content":"Returns the right part of a character string with the specified number of characters.","pos":[7781,7866]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[7879,7892],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`char_expression`</ph>:A Unicode or ASCII String type.","pos":[7905,7954],"source":"`char_expression`:A Unicode or ASCII String type."},{"content":"Use the CAST function to explicitly convert character_expression.","pos":[7955,8020]},{"content":"<ph id=\"ph1\">`count`</ph>: An <ph id=\"ph2\">`Int64`</ph> (not returned in SQL Server 2000) or <ph id=\"ph3\">`Int32`</ph> type that specifies how many characters of character_expression will be returned.","pos":[8033,8179],"source":"`count`: An `Int64` (not returned in SQL Server 2000) or `Int32` type that specifies how many characters of character_expression will be returned."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[8192,8208],"source":"**Return Value**"},{"content":"An ASCII <ph id=\"ph1\">`String`</ph> type.","pos":[8221,8244],"source":" An ASCII `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[8257,8268],"source":"**Example**"},{"pos":[8320,8345],"content":"<ph id=\"ph1\">`RTRIM(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`RTRIM(` `expression` `)`"},{"content":"Returns a Unicode or ASCII String after removing trailing spaces.","pos":[8346,8411]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[8424,8437],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: A Unicode or ASCII <ph id=\"ph2\">`String`</ph> type.","pos":[8450,8497],"source":"`expression`: A Unicode or ASCII `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[8510,8526],"source":"**Return Value**"},{"content":"A Unicode or ASCII <ph id=\"ph1\">`String`</ph> type.","pos":[8539,8572],"source":" A Unicode or ASCII `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[8585,8596],"source":"**Example**"},{"pos":[8649,8676],"content":"<ph id=\"ph1\">`SOUNDEX(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`SOUNDEX(` `expression` `)`"},{"content":"Returns a four-character (SOUNDEX) code to evaluate the similarity of two strings.<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[8677,8772],"source":"Returns a four-character (SOUNDEX) code to evaluate the similarity of two strings.**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: A Unicode or ASCII String type.","pos":[8785,8830],"source":"`expression`: A Unicode or ASCII String type."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[8843,8859],"source":"**Return Value**"},{"content":"An ASCII <ph id=\"ph1\">`String`</ph>.","pos":[8872,8890],"source":" An ASCII `String`."},{"content":"A four-character (SOUNDEX) code is a string that evaluates the similarity of two strings.","pos":[8891,8980]},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[8993,9004],"source":"**Example**"},{"content":"<bpt id=\"p1\">**</bpt>Returns<ept id=\"p1\">**</ept>","pos":[9103,9114],"source":"**Returns**"},{"pos":[9157,9186],"content":"<ph id=\"ph1\">`SPACE(`</ph> <ph id=\"ph2\">`int_expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`SPACE(` `int_expression` `)`"},{"content":"Returns an ASCII <ph id=\"ph1\">`String`</ph> of repeated spaces.","pos":[9187,9232],"source":"Returns an ASCII `String` of repeated spaces."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[9245,9258],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`int_expression`</ph>: An <ph id=\"ph2\">`Int64`</ph> (not returned in SQL Server 2000) or <ph id=\"ph3\">`Int32`</ph> that indicates the number of spaces.","pos":[9271,9381],"source":"`int_expression`: An `Int64` (not returned in SQL Server 2000) or `Int32` that indicates the number of spaces."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[9394,9410],"source":"**Return Value**"},{"content":"An ASCII <ph id=\"ph1\">`String`</ph>.","pos":[9423,9441],"source":" An ASCII `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[9454,9465],"source":"**Example**"},{"pos":[9503,9558],"content":"<ph id=\"ph1\">`STR(`</ph> <ph id=\"ph2\">`float_expression`</ph> [, <ph id=\"ph3\">`length`</ph> [, <ph id=\"ph4\">`decimal`</ph>]]<ph id=\"ph5\">`)`</ph>","source":"`STR(` `float_expression` [, `length` [, `decimal`]]`)`"},{"content":"Returns an ASCII <ph id=\"ph1\">`String`</ph> converted from numeric data.","pos":[9559,9613],"source":"Returns an ASCII `String` converted from numeric data."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[9626,9639],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`float _expression`</ph>: A expression of approximate numeric (<ph id=\"ph2\">`Double`</ph>) data type with a decimal point.","pos":[9652,9751],"source":"`float _expression`: A expression of approximate numeric (`Double`) data type with a decimal point."},{"content":"<ph id=\"ph1\">`length`</ph>: (optional) An <ph id=\"ph2\">`Int32`</ph> that represents the total length.","pos":[9764,9829],"source":"`length`: (optional) An `Int32` that represents the total length."},{"content":"This includes decimal point, sign, digits, and spaces.","pos":[9830,9884]},{"content":"The default is 10.","pos":[9885,9903]},{"content":"<ph id=\"ph1\">`decimal`</ph>:(optional) An <ph id=\"ph2\">`Int32`</ph> that represents the number of places to the right of the decimal point.","pos":[9916,10019],"source":"`decimal`:(optional) An `Int32` that represents the number of places to the right of the decimal point."},{"content":"decimal must be less than or equal to 16.","pos":[10020,10061]},{"content":"If decimal is more than 16, the result is truncated to sixteen places to the right of the decimal point.","pos":[10062,10166]},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[10179,10195],"source":"**Return Value**"},{"content":"An ASCII <ph id=\"ph1\">`String`</ph>.","pos":[10208,10226],"source":" An ASCII `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[10239,10250],"source":"**Example**"},{"pos":[10290,10363],"content":"<ph id=\"ph1\">`STUFF(`</ph> <ph id=\"ph2\">`str_expression`</ph>, <ph id=\"ph3\">`start, length`</ph>, <ph id=\"ph4\">`str_expression_to_insert``)`</ph>","source":"`STUFF(` `str_expression`, `start, length`, `str_expression_to_insert``)`"},{"content":"Deletes a specified length of characters and inserts another set of characters at a specified starting point in a string expression.","pos":[10364,10496]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[10509,10522],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`str_expression`</ph>: A Unicode or ASCII <ph id=\"ph2\">`String`</ph>.","pos":[10535,10581],"source":"`str_expression`: A Unicode or ASCII `String`."},{"content":"<ph id=\"ph1\">`start:`</ph> An <ph id=\"ph2\">`Int64`</ph> (not returned in SQL Server 2000) or <ph id=\"ph3\">`Int32`</ph> value that specifies the location to start the deletion and insertion.","pos":[10594,10729],"source":"`start:` An `Int64` (not returned in SQL Server 2000) or `Int32` value that specifies the location to start the deletion and insertion."},{"content":"<ph id=\"ph1\">`length`</ph>: An <ph id=\"ph2\">`Int64`</ph> (not returned in SQL Server 2000) or <ph id=\"ph3\">`Int32`</ph> value that specifies the number of characters to delete.","pos":[10742,10864],"source":"`length`: An `Int64` (not returned in SQL Server 2000) or `Int32` value that specifies the number of characters to delete."},{"content":"<ph id=\"ph1\">`str_expression_to_insert`</ph>: A Unicode or ASCII <ph id=\"ph2\">`String`</ph>.","pos":[10877,10933],"source":"`str_expression_to_insert`: A Unicode or ASCII `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[10946,10962],"source":"**Return Value**"},{"content":"A Unicode or ASCII <ph id=\"ph1\">`String`</ph>.","pos":[10975,11003],"source":" A Unicode or ASCII `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[11016,11027],"source":"**Example**"},{"pos":[11082,11131],"content":"<ph id=\"ph1\">`SUBSTRING(`</ph> <ph id=\"ph2\">`str_expression`</ph>, <ph id=\"ph3\">`start, length``)`</ph>","source":"`SUBSTRING(` `str_expression`, `start, length``)`"},{"content":"Returns part of a <ph id=\"ph1\">`String`</ph> expression.","pos":[11132,11170],"source":"Returns part of a `String` expression."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[11183,11196],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`str_expression`</ph>: An expression of a <ph id=\"ph2\">`String`</ph> (ASCII or Unicode) type or a <ph id=\"ph3\">`Binary`</ph> type.","pos":[11209,11298],"source":"`str_expression`: An expression of a `String` (ASCII or Unicode) type or a `Binary` type."},{"content":"<ph id=\"ph1\">`start`</ph>: An <ph id=\"ph2\">`Int64`</ph> (not returned in SQL Server 2000) or <ph id=\"ph3\">`Int32`</ph> that specifies where the substring starts.","pos":[11311,11418],"source":"`start`: An `Int64` (not returned in SQL Server 2000) or `Int32` that specifies where the substring starts."},{"content":"1 refers to the first character in the string.","pos":[11419,11465]},{"content":"<ph id=\"ph1\">`length`</ph>: An <ph id=\"ph2\">`Int64`</ph> (not returned in SQL Server 2000) or <ph id=\"ph3\">`Int32`</ph> that specifies how many characters of the expression will be returned.","pos":[11478,11614],"source":"`length`: An `Int64` (not returned in SQL Server 2000) or `Int32` that specifies how many characters of the expression will be returned."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[11627,11643],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph> (ASCII or Unicode) type or a <ph id=\"ph2\">`Binary`</ph> type.","pos":[11656,11710],"source":" A `String` (ASCII or Unicode) type or a `Binary` type."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[11723,11734],"source":"**Example**"},{"pos":[11787,11814],"content":"<ph id=\"ph1\">`UNICODE(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`UNICODE(` `expression` `)`"},{"content":"Returns the integer value, as defined by the Unicode standard, for the first character of the input expression.","pos":[11815,11926]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[11939,11952],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: A Unicode <ph id=\"ph2\">`String`</ph>.","pos":[11965,11998],"source":"`expression`: A Unicode `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[12011,12027],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[12040,12051],"source":" An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[12064,12075],"source":"**Example**"},{"pos":[12117,12142],"content":"<ph id=\"ph1\">`UPPER(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`UPPER(` `expression` `)`"},{"content":"Returns a <ph id=\"ph1\">`String`</ph> expression after converting lowercase character data to uppercase.","pos":[12143,12228],"source":"Returns a `String` expression after converting lowercase character data to uppercase."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[12241,12254],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`expression`</ph>: An expression of an ASCII or a Unicode String type.","pos":[12267,12332],"source":"`expression`: An expression of an ASCII or a Unicode String type."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[12345,12361],"source":"**Return Value**"},{"content":"An ASCII or a Unicode <ph id=\"ph1\">`String`</ph> type.","pos":[12374,12410],"source":" An ASCII or a Unicode `String` type."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[12423,12434],"source":"**Example**"},{"pos":[12479,12657],"content":"For more information about the <ph id=\"ph1\">`String`</ph> functions that SqlClient supports, see the documentation for the SQL Server version that you specified in the SqlClient provider manifest:","source":"For more information about the `String` functions that SqlClient supports, see the documentation for the SQL Server version that you specified in the SqlClient provider manifest:"},{"content":"SQL Server 2000","pos":[12664,12679]},{"content":"SQL Server 2005","pos":[12680,12695]},{"content":"SQL Server 2008","pos":[12696,12711]},{"pos":[12786,12866],"content":"<bpt id=\"p1\">[</bpt>String Functions (Transact-SQL)<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=115915)</ept>","source":"[String Functions (Transact-SQL)](http://go.microsoft.com/fwlink/?LinkId=115915)"},{"pos":[12867,12947],"content":"<bpt id=\"p1\">[</bpt>String Functions (Transact-SQL)<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=115916)</ept>","source":"[String Functions (Transact-SQL)](http://go.microsoft.com/fwlink/?LinkId=115916)"},{"pos":[12948,13028],"content":"<bpt id=\"p1\">[</bpt>String Functions (Transact-SQL)<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=115914)</ept>","source":"[String Functions (Transact-SQL)](http://go.microsoft.com/fwlink/?LinkId=115914)"},{"pos":[13038,13046],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>SqlClient for Entity Framework Functions<ept id=\"p1\">](../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[13050,13169],"source":"[SqlClient for Entity Framework Functions](../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Known Issues in SqlClient for Entity Framework<ept id=\"p1\">](../../../../../docs/framework/data/adonet/ef/known-issues-in-sqlclient-for-entity-framework.md)</ept>","pos":[13172,13317],"source":" [Known Issues in SqlClient for Entity Framework](../../../../../docs/framework/data/adonet/ef/known-issues-in-sqlclient-for-entity-framework.md)"}]}