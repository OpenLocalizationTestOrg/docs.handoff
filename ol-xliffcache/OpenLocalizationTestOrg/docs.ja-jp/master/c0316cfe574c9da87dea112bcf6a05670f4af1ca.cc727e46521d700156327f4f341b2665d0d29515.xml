{"content":"---\ntitle: \"IHostTaskManager::LeaveRuntime Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"IHostTaskManager.LeaveRuntime\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IHostTaskManager::LeaveRuntime\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IHostTaskManager::LeaveRuntime method [.NET Framework hosting]\"\n  - \"LeaveRuntime method [.NET Framework hosting]\"\nms.assetid: 43689cc4-e48e-46e5-a22d-bafd768b8759\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# IHostTaskManager::LeaveRuntime Method\nNotifies the host that the currently executing task is about to leave the common language runtime (CLR) and enter unmanaged code.  \n  \n> [!IMPORTANT]\n>  A corresponding call to [IHostTaskManager::EnterRuntime](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-enterruntime-method.md) notifies the host that the currently executing task is reentering managed code.  \n  \n## Syntax  \n  \n```  \nHRESULT LeaveRuntime (  \n    [in] SIZE_T target  \n);  \n```  \n  \n#### Parameters  \n `target`  \n [in] The address within the mapped portable executable file of the unmanaged function to be called.  \n  \n## Return Value  \n  \n|HRESULT|Description|  \n|-------------|-----------------|  \n|S_OK|`LeaveRuntime` returned successfully.|  \n|HOST_E_CLRNOTAVAILABLE|The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.|  \n|HOST_E_TIMEOUT|The call timed out.|  \n|HOST_E_NOT_OWNER|The caller does not own the lock.|  \n|HOST_E_ABANDONED|An event was canceled while a blocked thread or fiber was waiting on it.|  \n|E_FAIL|An unknown catastrophic failure occurred. When a method returns E_FAIL, the CLR is no longer usable within the process. Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.|  \n|E_OUTOFMEMORY|Not enough memory is available to complete the requested allocation.|  \n  \n## Remarks  \n Call sequences to and from unmanaged code can be nested. For example, the list below describes a hypothetical situation in which the sequence of calls to `LeaveRuntime`, [IHostTaskManager::ReverseEnterRuntime](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-reverseenterruntime-method.md), [IHostTaskManager::ReverseLeaveRuntime](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-reverseleaveruntime-method.md), and `IHostTaskManager::EnterRuntime` allows the host to identify the nested layers.  \n  \n|Action|Corresponding Method Call|  \n|------------|-------------------------------|  \n|A managed Visual Basic executable calls an unmanaged function written in C by using platform invoke.|`IHostTaskManager::LeaveRuntime`|  \n|The unmanaged C function calls a method in a managed DLL written in C#.|`IHostTaskManager::ReverseEnterRuntime`|  \n|The managed C# function calls another unmanaged function written in C, also using platform invoke.|`IHostTaskManager::LeaveRuntime`|  \n|The second unmanaged function returns execution to the C# function.|`IHostTaskManager::EnterRuntime`|  \n|The C# function returns execution to the first unmanaged function.|`IHostTaskManager::ReverseLeaveRuntime`|  \n|The first unmanaged function returns execution to the Visual Basic program.|`IHostTaskManager::EnterRuntime`|  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** MSCorEE.h  \n  \n **Library:** Included as a resource in MSCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [ICLRTask Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtask-interface.md)   \n [ICLRTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtaskmanager-interface.md)   \n [IHostTask Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)   \n [IHostTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-interface.md)","nodes":[{"pos":[12,66],"content":"IHostTaskManager::LeaveRuntime Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IHostTaskManager::LeaveRuntime Method | Microsoft Docs","pos":[0,54]}]},{"pos":[714,751],"content":"IHostTaskManager::LeaveRuntime Method","linkify":"IHostTaskManager::LeaveRuntime Method","nodes":[{"content":"IHostTaskManager::LeaveRuntime Method","pos":[0,37]}]},{"content":"Notifies the host that the currently executing task is about to leave the common language runtime (CLR) and enter unmanaged code.","pos":[752,881]},{"pos":[889,1131],"content":"[!IMPORTANT]\n A corresponding call to [IHostTaskManager::EnterRuntime](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-enterruntime-method.md) notifies the host that the currently executing task is reentering managed code.","leadings":["","> "],"nodes":[{"content":"A corresponding call to <bpt id=\"p1\">[</bpt>IHostTaskManager::EnterRuntime<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-enterruntime-method.md)</ept> notifies the host that the currently executing task is reentering managed code.","pos":[14,240],"source":" A corresponding call to [IHostTaskManager::EnterRuntime](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-enterruntime-method.md) notifies the host that the currently executing task is reentering managed code."}]},{"pos":[1140,1146],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1227,1237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The address within the mapped portable executable file of the unmanaged function to be called.","pos":[1253,1352]},{"pos":[1361,1373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"HRESULT","pos":[1380,1387]},{"content":"Description","pos":[1388,1399]},{"content":"S_OK","pos":[1440,1444]},{"pos":[1445,1482],"content":"<ph id=\"ph1\">`LeaveRuntime`</ph> returned successfully.","source":"`LeaveRuntime` returned successfully."},{"content":"HOST_E_CLRNOTAVAILABLE","pos":[1487,1509]},{"content":"The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.","pos":[1510,1648]},{"content":"HOST_E_TIMEOUT","pos":[1653,1667]},{"content":"The call timed out.","pos":[1668,1687]},{"content":"HOST_E_NOT_OWNER","pos":[1692,1708]},{"content":"The caller does not own the lock.","pos":[1709,1742]},{"content":"HOST_E_ABANDONED","pos":[1747,1763]},{"content":"An event was canceled while a blocked thread or fiber was waiting on it.","pos":[1764,1836]},{"content":"E_FAIL","pos":[1841,1847]},{"content":"An unknown catastrophic failure occurred.","pos":[1848,1889]},{"content":"When a method returns E_FAIL, the CLR is no longer usable within the process.","pos":[1890,1967]},{"content":"Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.","pos":[1968,2034]},{"content":"E_OUTOFMEMORY","pos":[2039,2052]},{"content":"Not enough memory is available to complete the requested allocation.","pos":[2053,2121]},{"pos":[2131,2138],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call sequences to and from unmanaged code can be nested.","pos":[2142,2198]},{"content":"For example, the list below describes a hypothetical situation in which the sequence of calls to <ph id=\"ph1\">`LeaveRuntime`</ph>, <bpt id=\"p1\">[</bpt>IHostTaskManager::ReverseEnterRuntime<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-reverseenterruntime-method.md)</ept>, <bpt id=\"p2\">[</bpt>IHostTaskManager::ReverseLeaveRuntime<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-reverseleaveruntime-method.md)</ept>, and <ph id=\"ph2\">`IHostTaskManager::EnterRuntime`</ph> allows the host to identify the nested layers.","pos":[2199,2671],"source":" For example, the list below describes a hypothetical situation in which the sequence of calls to `LeaveRuntime`, [IHostTaskManager::ReverseEnterRuntime](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-reverseenterruntime-method.md), [IHostTaskManager::ReverseLeaveRuntime](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-reverseleaveruntime-method.md), and `IHostTaskManager::EnterRuntime` allows the host to identify the nested layers."},{"content":"Action","pos":[2678,2684]},{"content":"Corresponding Method Call","pos":[2685,2710]},{"content":"A managed Visual Basic executable calls an unmanaged function written in C by using platform invoke.","pos":[2764,2864]},{"content":"The unmanaged C function calls a method in a managed DLL written in C#.","pos":[2902,2973]},{"content":"The managed C# function calls another unmanaged function written in C, also using platform invoke.","pos":[3018,3116]},{"content":"The second unmanaged function returns execution to the C# function.","pos":[3154,3221]},{"content":"The C# function returns execution to the first unmanaged function.","pos":[3259,3325]},{"content":"The first unmanaged function returns execution to the Visual Basic program.","pos":[3370,3445]},{"pos":[3488,3500],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3504,3608],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3615,3636],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> MSCorEE.h","source":"**Header:** MSCorEE.h"},{"pos":[3643,3693],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Included as a resource in MSCorEE.dll","source":"**Library:** Included as a resource in MSCorEE.dll"},{"pos":[3700,3808],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[3817,3825],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ICLRTask Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtask-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[3829,3922],"source":"[ICLRTask Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtask-interface.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ICLRTaskManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrtaskmanager-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[3925,4033],"source":" [ICLRTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrtaskmanager-interface.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IHostTask Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[4036,4132],"source":" [IHostTask Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttask-interface.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IHostTaskManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-interface.md)</ept>","pos":[4135,4244],"source":" [IHostTaskManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihosttaskmanager-interface.md)"}]}