{"content":"---\ntitle: \"Event Handling in an XML Document Using the XmlNodeChangedEventArgs\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 0fe844e3-5b6f-4fe7-ad15-22459501738b\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# Event Handling in an XML Document Using the XmlNodeChangedEventArgs\nThe **XmlNodeChangedEventArgs** encapsulates the arguments passed to the event handlers registered on the **XmlDocument** object for handling events. The events and a description of when they are fired is given in the following table.  \n  \n|Event|Fired|  \n|-----------|-----------|  \n|<xref:System.Xml.XmlDocument.NodeInserting>|When a node belonging to the current document is about to be inserted into another node.|  \n|<xref:System.Xml.XmlDocument.NodeInserted>|When a node belonging to the current document has been inserted into another node.|  \n|<xref:System.Xml.XmlDocument.NodeRemoving>|When a node belonging to this document is about to be removed from the document.|  \n|<xref:System.Xml.XmlDocument.NodeRemoved>|When a node belonging to this document has been removed from its parent.|  \n|<xref:System.Xml.XmlDocument.NodeChanging>|When the value of a node is about to be changed.|  \n|<xref:System.Xml.XmlDocument.NodeChanged>|When the value of a node has been changed.|  \n  \n> [!NOTE]\n>  If the **XmlDataDocument** memory usage is fully optimized to use **DataSet** storage, the **XmlDataDocument** might not raise any of the events listed above when changes are made to the underlying **DataSet**. If you need these events, you must traverse the whole **XmlDocument** once to make the memory usage non-fully optimized.  \n  \n The following code example shows how to define an event handler and how to add the event handler to an event.  \n  \n```vb  \n' Attach the event handler, NodeInsertedHandler, to the NodeInserted  \n' event.  \nDim doc as XmlDocument = new XmlDocument()  \nDim XmlNodeChgEHdlr as XmlNodeChangedEventHandler = new XmlNodeChangedEventHandler(addressof MyNodeChangedEvent)   \nAddHandler doc.NodeInserted, XmlNodeChgEHdlr   \n  \nDim n as XmlNode = doc.CreateElement( \"element\" )  \nConsole.WriteLine( \"Before Event Inserting\" )   \n  \n' This is the point where the new node is being inserted in the tree,  \n' and this is the point where the NodeInserted event is raised.  \ndoc.AppendChild( n )  \nConsole.WriteLine( \"After Event Inserting\" )   \n  \n' Define the event handler that handles the NodeInserted event.  \nsub NodeInsertedHandler(src as Object, args as XmlNodeChangedEventArgs)  \n    Console.WriteLine(\"Node \" + args.Node.Name + \" inserted!!\")  \nend sub  \n```  \n  \n```csharp  \n// Attach the event handler, NodeInsertedHandler, to the NodeInserted  \n// event.  \nXmlDocument doc = new XmlDocument();  \ndoc.NodeInserted += new XmlNodeChangedEventHandler(NodeInsertedHandler);  \nXmlNode n = doc.CreateElement( \"element\" );  \nConsole.WriteLine( \"Before Event Inserting\" );  \n  \n// This is the point where the new node is being inserted in the tree,  \n// and this is the point where the NodeInserted event is raised.  \ndoc.AppendChild( n );  \nConsole.WriteLine( \"After Event Inserting\" );   \n  \n// Define the event handler that handles the NodeInserted event.  \nvoid NodeInsertedHandler(Object src, XmlNodeChangedEventArgs args)  \n{  \n    Console.WriteLine(\"Node \" + args.Node.Name + \" inserted!!\");  \n}  \n```  \n  \n Some XML Document Object Model (DOM) operations are compound operations that can result in multiple events being fired. For example, **AppendChild** may also have to remove the node being appended from its previous parent. In this case, you see a **NodeRemoved** event fired first, followed by a **NodeInserted** event. Operations like setting **InnerXml** could result in multiple events.  \n  \n The following code example shows the creation of the event handler and the handling of the **NodeInserted** event.  \n  \n```vb  \nImports System  \nImports System.IO  \nImports System.Xml  \nImports Microsoft.VisualBasic  \n  \nPublic Class Sample  \n  \n    Private Const filename As String = \"books.xml\"  \n  \n    Shared Sub Main()  \n        Dim mySample As Sample = New Sample()  \n        mySample.Run(filename)  \n    End Sub  \n  \n    Public Sub Run(ByVal args As String)  \n        ' Create and load the XML document.  \n        Console.WriteLine(\"Loading file 0 ...\", args)  \n        Dim doc As XmlDocument = New XmlDocument()  \n        doc.Load(args)  \n  \n        ' Create the event handlers.  \n        Dim XmlNodeChgEHdlr As XmlNodeChangedEventHandler = New XmlNodeChangedEventHandler(AddressOf MyNodeChangedEvent)  \n        Dim XmlNodeInsrtEHdlr As XmlNodeChangedEventHandler = New XmlNodeChangedEventHandler(AddressOf MyNodeInsertedEvent)  \n        AddHandler doc.NodeChanged, XmlNodeChgEHdlr  \n        AddHandler doc.NodeInserted, XmlNodeInsrtEHdlr  \n  \n        ' Change the book price.  \n        doc.DocumentElement.LastChild.InnerText = \"5.95\"  \n  \n        ' Add a new element.  \n        Dim newElem As XmlElement = doc.CreateElement(\"style\")  \n        newElem.InnerText = \"hardcover\"  \n        doc.DocumentElement.AppendChild(newElem)  \n  \n        Console.WriteLine(Chr(13) + Chr(10) + \"Display the modified XML...\")  \n        Console.WriteLine(doc.OuterXml)  \n    End Sub  \n  \n    ' Handle the NodeChanged event.  \n    Public Sub MyNodeChangedEvent(ByVal src As Object, ByVal args As XmlNodeChangedEventArgs)  \n        Console.Write(\"Node Changed Event: <0> changed\", args.Node.Name)  \n        If Not (args.Node.Value Is Nothing) Then  \n            Console.WriteLine(\" with value  0\", args.Node.Value)  \n        Else  \n            Console.WriteLine(\"\")  \n        End If  \n    End Sub  \n  \n    ' Handle the NodeInserted event.  \n    Public Sub MyNodeInsertedEvent(ByVal src As Object, ByVal args As XmlNodeChangedEventArgs)  \n        Console.Write(\"Node Inserted Event: <0> inserted\", args.Node.Name)  \n        If Not (args.Node.Value Is Nothing) Then  \n            Console.WriteLine(\" with value 0\", args.Node.Value)  \n        Else  \n            Console.WriteLine(\"\")  \n        End If  \n    End Sub  \n  \nEnd Class        ' End class  \n```  \n  \n```csharp  \nusing System;  \nusing System.IO;  \nusing System.Xml;  \n  \npublic class Sample  \n{  \n  private const String filename = \"books.xml\";  \n  \n  public static void Main()  \n  {  \n     Sample mySample = new Sample();  \n     mySample.Run(filename);  \n  }  \n  \n  public void Run(String args)  \n  {  \n  \n     // Create and load the XML document.  \n     Console.WriteLine (\"Loading file {0} ...\", args);  \n     XmlDocument doc = new XmlDocument();  \n     doc.Load (args);  \n  \n     // Create the event handlers.  \n     doc.NodeChanged += new XmlNodeChangedEventHandler(this.MyNodeChangedEvent);  \n     doc.NodeInserted += new XmlNodeChangedEventHandler(this.MyNodeInsertedEvent);  \n  \n     // Change the book price.  \n     doc.DocumentElement.LastChild.InnerText = \"5.95\";  \n  \n     // Add a new element.  \n     XmlElement newElem = doc.CreateElement(\"style\");  \n     newElem.InnerText = \"hardcover\";  \n     doc.DocumentElement.AppendChild(newElem);  \n  \n     Console.WriteLine(\"\\r\\nDisplay the modified XML...\");  \n     Console.WriteLine(doc.OuterXml);             \n  \n  }  \n  \n  // Handle the NodeChanged event.  \n  public void MyNodeChangedEvent(Object src, XmlNodeChangedEventArgs args)  \n  {  \n     Console.Write(\"Node Changed Event: <{0}> changed\", args.Node.Name);  \n     if (args.Node.Value != null)  \n     {  \n        Console.WriteLine(\" with value  {0}\", args.Node.Value);  \n     }  \n     else  \n       Console.WriteLine(\"\");  \n  }  \n  \n  // Handle the NodeInserted event.  \n  public void MyNodeInsertedEvent(Object src, XmlNodeChangedEventArgs args)  \n  {  \n     Console.Write(\"Node Inserted Event: <{0}> inserted\", args.Node.Name);  \n     if (args.Node.Value != null)  \n     {  \n        Console.WriteLine(\" with value {0}\", args.Node.Value);  \n     }  \n     else  \n        Console.WriteLine(\"\");  \n  }  \n  \n} // End class   \n```  \n  \n For more information, see <xref:System.Xml.XmlNodeChangedEventArgs> and <xref:System.Xml.XmlNodeChangedEventHandler>.  \n  \n## See also\n\n- [XML Document Object Model (DOM)](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)\n","nodes":[{"pos":[4,253],"embed":true,"restype":"x-metadata","content":"title: \"Event Handling in an XML Document Using the XmlNodeChangedEventArgs\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 0fe844e3-5b6f-4fe7-ad15-22459501738b\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Event Handling in an XML Document Using the XmlNodeChangedEventArgs","nodes":[{"pos":[0,67],"content":"Event Handling in an XML Document Using the XmlNodeChangedEventArgs","nodes":[{"content":"Event Handling in an XML Document Using the XmlNodeChangedEventArgs","pos":[0,67]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[260,327],"content":"Event Handling in an XML Document Using the XmlNodeChangedEventArgs","linkify":"Event Handling in an XML Document Using the XmlNodeChangedEventArgs","nodes":[{"content":"Event Handling in an XML Document Using the XmlNodeChangedEventArgs","pos":[0,67]}]},{"content":"The <bpt id=\"p1\">**</bpt>XmlNodeChangedEventArgs<ept id=\"p1\">**</ept> encapsulates the arguments passed to the event handlers registered on the <bpt id=\"p2\">**</bpt>XmlDocument<ept id=\"p2\">**</ept> object for handling events.","pos":[328,477],"source":"The **XmlNodeChangedEventArgs** encapsulates the arguments passed to the event handlers registered on the **XmlDocument** object for handling events."},{"content":"The events and a description of when they are fired is given in the following table.","pos":[478,562]},{"content":"Event","pos":[569,574]},{"content":"Fired","pos":[575,580]},{"content":"When a node belonging to the current document is about to be inserted into another node.","pos":[657,745]},{"content":"When a node belonging to the current document has been inserted into another node.","pos":[793,875]},{"content":"When a node belonging to this document is about to be removed from the document.","pos":[923,1003]},{"content":"When a node belonging to this document has been removed from its parent.","pos":[1050,1122]},{"content":"When the value of a node is about to be changed.","pos":[1170,1218]},{"content":"When the value of a node has been changed.","pos":[1265,1307]},{"pos":[1316,1658],"content":"[!NOTE]\n If the **XmlDataDocument** memory usage is fully optimized to use **DataSet** storage, the **XmlDataDocument** might not raise any of the events listed above when changes are made to the underlying **DataSet**. If you need these events, you must traverse the whole **XmlDocument** once to make the memory usage non-fully optimized.","leadings":["","> "],"nodes":[{"content":"If the **XmlDataDocument** memory usage is fully optimized to use **DataSet** storage, the **XmlDataDocument** might not raise any of the events listed above when changes are made to the underlying **DataSet**. If you need these events, you must traverse the whole **XmlDocument** once to make the memory usage non-fully optimized.","pos":[9,340],"nodes":[{"content":"If the <bpt id=\"p1\">**</bpt>XmlDataDocument<ept id=\"p1\">**</ept> memory usage is fully optimized to use <bpt id=\"p2\">**</bpt>DataSet<ept id=\"p2\">**</ept> storage, the <bpt id=\"p3\">**</bpt>XmlDataDocument<ept id=\"p3\">**</ept> might not raise any of the events listed above when changes are made to the underlying <bpt id=\"p4\">**</bpt>DataSet<ept id=\"p4\">**</ept>.","pos":[0,210],"source":"If the **XmlDataDocument** memory usage is fully optimized to use **DataSet** storage, the **XmlDataDocument** might not raise any of the events listed above when changes are made to the underlying **DataSet**."},{"content":"If you need these events, you must traverse the whole <bpt id=\"p1\">**</bpt>XmlDocument<ept id=\"p1\">**</ept> once to make the memory usage non-fully optimized.","pos":[211,331],"source":" If you need these events, you must traverse the whole **XmlDocument** once to make the memory usage non-fully optimized."}]}]},{"content":"The following code example shows how to define an event handler and how to add the event handler to an event.","pos":[1665,1774]},{"content":"Some XML Document Object Model (DOM) operations are compound operations that can result in multiple events being fired.","pos":[3368,3487]},{"content":"For example, <bpt id=\"p1\">**</bpt>AppendChild<ept id=\"p1\">**</ept> may also have to remove the node being appended from its previous parent.","pos":[3488,3590],"source":" For example, **AppendChild** may also have to remove the node being appended from its previous parent."},{"content":"In this case, you see a <bpt id=\"p1\">**</bpt>NodeRemoved<ept id=\"p1\">**</ept> event fired first, followed by a <bpt id=\"p2\">**</bpt>NodeInserted<ept id=\"p2\">**</ept> event.","pos":[3591,3687],"source":" In this case, you see a **NodeRemoved** event fired first, followed by a **NodeInserted** event."},{"content":"Operations like setting <bpt id=\"p1\">**</bpt>InnerXml<ept id=\"p1\">**</ept> could result in multiple events.","pos":[3688,3757],"source":" Operations like setting **InnerXml** could result in multiple events."},{"pos":[3764,3878],"content":"The following code example shows the creation of the event handler and the handling of the <bpt id=\"p1\">**</bpt>NodeInserted<ept id=\"p1\">**</ept> event.","source":"The following code example shows the creation of the event handler and the handling of the **NodeInserted** event."},{"pos":[7957,8074],"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Xml.XmlNodeChangedEventArgs&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.XmlNodeChangedEventHandler&gt;</ph>.","source":"For more information, see <xref:System.Xml.XmlNodeChangedEventArgs> and <xref:System.Xml.XmlNodeChangedEventHandler>."},{"pos":[8083,8091],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8095,8197],"content":"<bpt id=\"p1\">[</bpt>XML Document Object Model (DOM)<ept id=\"p1\">](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)</ept>","source":"[XML Document Object Model (DOM)](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)"}]}