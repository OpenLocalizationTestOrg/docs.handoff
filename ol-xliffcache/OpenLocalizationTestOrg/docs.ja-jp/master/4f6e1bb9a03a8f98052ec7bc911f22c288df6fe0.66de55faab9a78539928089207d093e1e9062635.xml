{"content":"---\ntitle: Unit testing C# with MSTest and .NET Core\ndescription: Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and MSTest.\nauthor: ncarandini\nms.author: wiwagn\nms.date: 09/08/2017\nms.custom: \"seodec18\"\n---\n# Unit testing C# with MSTest and .NET Core\n\nThis tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts. If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/) before you begin. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\n### Creating the source project\n\nOpen a shell window. Create a directory called *unit-testing-using-mstest* to hold the solution. Inside this new directory, run [`dotnet new sln`](../tools/dotnet-new.md) to create\na new solution file for the class library and the test project. Next, create a *PrimeService* directory. The following outline shows the directory and file structure thus far:\n\n```\n/unit-testing-using-mstest\n    unit-testing-using-mstest.sln\n    /PrimeService\n```\n\nMake *PrimeService* the current directory and run [`dotnet new classlib`](../tools/dotnet-new.md) to create the source project. Rename *Class1.cs* to *PrimeService.cs*. You create a failing implementation of the `PrimeService` class:\n\n```csharp\nusing System;\n\nnamespace Prime.Services\n{\n    public class PrimeService\n    {\n        public bool IsPrime(int candidate) \n        {\n            throw new NotImplementedException(\"Please create a test first\");\n        } \n    }\n}\n```\n\nChange the directory back to the *unit-testing-using-mstest* directory. Run [`dotnet sln add PrimeService/PrimeService.csproj`](../tools/dotnet-sln.md) to add the class library project to the solution. \n\n### Creating the test project\n\nNext, create the *PrimeService.Tests* directory. The following outline shows the directory structure:\n\n```\n/unit-testing-using-mstest\n    unit-testing-using-mstest.sln\n    /PrimeService\n        Source Files\n        PrimeService.csproj\n    /PrimeService.Tests\n```\n\nMake the *PrimeService.Tests* directory the current directory and create a new project using [`dotnet new mstest`](../tools/dotnet-new.md). The dotnet new command creates a test project that uses MStest as the test library. The generated template configures the test runner in the *PrimeServiceTests.csproj* file:\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.3.0\" />\n  <PackageReference Include=\"MSTest.TestAdapter\" Version=\"1.1.18\" />\n  <PackageReference Include=\"MSTest.TestFramework\" Version=\"1.1.18\" />\n</ItemGroup>\n```\n\nThe test project requires other packages to create and run unit tests. `dotnet new` in the previous step added the MSTest SDK, the MSTest test framework, and the MSTest runner. Now, add the `PrimeService` class library as another dependency to the project. Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:\n\n```\ndotnet add reference ../PrimeService/PrimeService.csproj\n```\n\nYou can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService.Tests.csproj) on GitHub.\n\nThe following outline shows the final solution layout:\n\n```\n/unit-testing-using-mstest\n    unit-testing-using-mstest.sln\n    /PrimeService\n        Source Files\n        PrimeService.csproj\n    /PrimeService.Tests\n        Test Source Files\n        PrimeServiceTests.csproj\n```\n\nExecute [`dotnet sln add .\\PrimeService.Tests\\PrimeService.Tests.csproj`](../tools/dotnet-sln.md) in the *unit-testing-using-mstest* directory. \n\n## Creating the first test\n\nYou write one failing test, make it pass, then repeat the process. Remove *UnitTest1.cs* from the *PrimeService.Tests* directory and create a new C# file named *PrimeService_IsPrimeShould.cs* with the following content:\n\n```csharp\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Prime.Services;\n\nnamespace Prime.UnitTests.Services\n{\n    [TestClass]\n    public class PrimeService_IsPrimeShould\n    {\n        private readonly PrimeService _primeService;\n\n        public PrimeService_IsPrimeShould()\n        {\n            _primeService = new PrimeService();\n        }\n\n        [TestMethod]\n        public void ReturnFalseGivenValueOf1()\n        {\n            var result = _primeService.IsPrime(1);\n\n            Assert.IsFalse(result, \"1 should not be prime\");\n        }\n    }\n}\n```\n\nThe `[TestClass]` attribute denotes a class that contains unit tests. The `[TestMethod]` attribute indicates a method is a test method. \n\nSave this file and execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests. The MSTest test runner contains the program entry point to run your tests. `dotnet test` starts the test runner using the unit test project you've created.\n\nYour test fails. You haven't created the implementation yet. Make this test pass by writing the simplest code in the `PrimeService` class that works:\n\n```csharp\npublic bool IsPrime(int candidate)\n{\n    if (candidate == 1)\n    {\n        return false;\n    }\n    throw new NotImplementedException(\"Please create a test first\");\n}\n```\n\nIn the *unit-testing-using-mstest* directory, run `dotnet test` again. The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project. After building both projects, it runs this single test. It passes.\n\n## Adding more features\n\nNow that you've made one test pass, it's time to write more. There are a few other simple cases for prime numbers: 0, -1. You could add new tests with the `[TestMethod]` attribute, but that quickly becomes tedious. There are other MSTest attributes that enable you to write a suite of similar tests.  A `[DataTestMethod]`attribute represents a suite of tests that execute the same code but have different input arguments. You can use the `[DataRow]` attribute to specify values for those inputs.\n\nInstead of creating new tests, apply these two attributes to create a single data driven test. The data driven test is a method that tests several values less than two, which is the lowest prime number:\n\n[!code-csharp[Sample_TestCode](../../../samples/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService_IsPrimeShould.cs?name=Sample_TestCode)]\n\nRun `dotnet test`, and two of these tests fail. To make all of the tests pass, change the `if` clause at the beginning of the method:\n\n```csharp\nif (candidate < 2)\n```\n\nContinue to iterate by adding more tests, more theories, and more code in the main library. You have the [finished version of the tests](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService_IsPrimeShould.cs) and the [complete implementation of the library](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/PrimeService/PrimeService.cs).\n\nYou've built a small library and a set of unit tests for that library. You've structured the solution so that adding new packages and tests is part of the normal workflow. You've concentrated most of your time and effort on solving the goals of the application.\n","nodes":[{"pos":[4,293],"embed":true,"restype":"x-metadata","content":"title: Unit testing C# with MSTest and .NET Core\ndescription: Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and MSTest.\nauthor: ncarandini\nms.author: wiwagn\nms.date: 09/08/2017\nms.custom: \"seodec18\"","nodes":[{"content":"Unit testing C# with MSTest and .NET Core","nodes":[{"pos":[0,41],"content":"Unit testing C# with MSTest and .NET Core","nodes":[{"content":"Unit testing C# with MSTest and .NET Core","pos":[0,41]}]}],"path":["title"],"nosxs":false},{"content":"Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and MSTest.","nodes":[{"pos":[0,148],"content":"Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and MSTest.","nodes":[{"content":"Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and MSTest.","pos":[0,148]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[300,341],"content":"Unit testing C# with MSTest and .NET Core","linkify":"Unit testing C# with MSTest and .NET Core","nodes":[{"content":"Unit testing C# with MSTest and .NET Core","pos":[0,41]}]},{"content":"This tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts.","pos":[343,472]},{"content":"If you prefer to follow the tutorial using a pre-built solution, <bpt id=\"p1\">[</bpt>view or download the sample code<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/)</ept> before you begin.","pos":[473,685],"source":" If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/) before you begin."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[686,811],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"pos":[817,844],"content":"Creating the source project","linkify":"Creating the source project","nodes":[{"content":"Creating the source project","pos":[0,27]}]},{"content":"Open a shell window.","pos":[846,866]},{"content":"Create a directory called <bpt id=\"p1\">*</bpt>unit-testing-using-mstest<ept id=\"p1\">*</ept> to hold the solution.","pos":[867,942],"source":" Create a directory called *unit-testing-using-mstest* to hold the solution."},{"content":"Inside this new directory, run <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet new sln`</ph><ept id=\"p1\">](../tools/dotnet-new.md)</ept> to create a new solution file for the class library and the test project.","pos":[943,1090],"source":" Inside this new directory, run [`dotnet new sln`](../tools/dotnet-new.md) to create\na new solution file for the class library and the test project."},{"content":"Next, create a <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> directory.","pos":[1091,1131],"source":" Next, create a *PrimeService* directory."},{"content":"The following outline shows the directory and file structure thus far:","pos":[1132,1202]},{"content":"Make <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> the current directory and run <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new classlib`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept> to create the source project.","pos":[1292,1419],"source":"Make *PrimeService* the current directory and run [`dotnet new classlib`](../tools/dotnet-new.md) to create the source project."},{"content":"Rename <bpt id=\"p1\">*</bpt>Class1.cs<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>PrimeService.cs<ept id=\"p2\">*</ept>.","pos":[1420,1460],"source":" Rename *Class1.cs* to *PrimeService.cs*."},{"content":"You create a failing implementation of the <ph id=\"ph1\">`PrimeService`</ph> class:","pos":[1461,1525],"source":" You create a failing implementation of the `PrimeService` class:"},{"content":"Change the directory back to the <bpt id=\"p1\">*</bpt>unit-testing-using-mstest<ept id=\"p1\">*</ept> directory.","pos":[1770,1841],"source":"Change the directory back to the *unit-testing-using-mstest* directory."},{"content":"Run <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet sln add PrimeService/PrimeService.csproj`</ph><ept id=\"p1\">](../tools/dotnet-sln.md)</ept> to add the class library project to the solution.","pos":[1842,1971],"source":" Run [`dotnet sln add PrimeService/PrimeService.csproj`](../tools/dotnet-sln.md) to add the class library project to the solution."},{"pos":[1978,2003],"content":"Creating the test project","linkify":"Creating the test project","nodes":[{"content":"Creating the test project","pos":[0,25]}]},{"content":"Next, create the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory.","pos":[2005,2053],"source":"Next, create the *PrimeService.Tests* directory."},{"content":"The following outline shows the directory structure:","pos":[2054,2106]},{"content":"Make the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory the current directory and create a new project using <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new mstest`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept>.","pos":[2269,2408],"source":"Make the *PrimeService.Tests* directory the current directory and create a new project using [`dotnet new mstest`](../tools/dotnet-new.md)."},{"content":"The dotnet new command creates a test project that uses MStest as the test library.","pos":[2409,2492]},{"content":"The generated template configures the test runner in the <bpt id=\"p1\">*</bpt>PrimeServiceTests.csproj<ept id=\"p1\">*</ept> file:","pos":[2493,2582],"source":" The generated template configures the test runner in the *PrimeServiceTests.csproj* file:"},{"content":"The test project requires other packages to create and run unit tests.","pos":[2834,2904]},{"content":"<ph id=\"ph1\">`dotnet new`</ph> in the previous step added the MSTest SDK, the MSTest test framework, and the MSTest runner.","pos":[2905,3010],"source":"`dotnet new` in the previous step added the MSTest SDK, the MSTest test framework, and the MSTest runner."},{"content":"Now, add the <ph id=\"ph1\">`PrimeService`</ph> class library as another dependency to the project.","pos":[3011,3090],"source":" Now, add the `PrimeService` class library as another dependency to the project."},{"content":"Use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add reference`</ph><ept id=\"p1\">](../tools/dotnet-add-reference.md)</ept> command:","pos":[3091,3166],"source":" Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:"},{"pos":[3234,3439],"content":"You can see the entire file in the <bpt id=\"p1\">[</bpt>samples repository<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService.Tests.csproj)</ept> on GitHub.","source":"You can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService.Tests.csproj) on GitHub."},{"content":"The following outline shows the final solution layout:","pos":[3441,3495]},{"pos":[3717,3860],"content":"Execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet sln add .\\PrimeService.Tests\\PrimeService.Tests.csproj`</ph><ept id=\"p1\">](../tools/dotnet-sln.md)</ept> in the <bpt id=\"p2\">*</bpt>unit-testing-using-mstest<ept id=\"p2\">*</ept> directory.","source":"Execute [`dotnet sln add .\\PrimeService.Tests\\PrimeService.Tests.csproj`](../tools/dotnet-sln.md) in the *unit-testing-using-mstest* directory."},{"pos":[3866,3889],"content":"Creating the first test","linkify":"Creating the first test","nodes":[{"content":"Creating the first test","pos":[0,23]}]},{"content":"You write one failing test, make it pass, then repeat the process.","pos":[3891,3957]},{"content":"Remove <bpt id=\"p1\">*</bpt>UnitTest1.cs<ept id=\"p1\">*</ept> from the <bpt id=\"p2\">*</bpt>PrimeService.Tests<ept id=\"p2\">*</ept> directory and create a new C# file named <bpt id=\"p3\">*</bpt>PrimeService_IsPrimeShould.cs<ept id=\"p3\">*</ept> with the following content:","pos":[3958,4110],"source":" Remove *UnitTest1.cs* from the *PrimeService.Tests* directory and create a new C# file named *PrimeService_IsPrimeShould.cs* with the following content:"},{"content":"The <ph id=\"ph1\">`[TestClass]`</ph> attribute denotes a class that contains unit tests.","pos":[4681,4750],"source":"The `[TestClass]` attribute denotes a class that contains unit tests."},{"content":"The <ph id=\"ph1\">`[TestMethod]`</ph> attribute indicates a method is a test method.","pos":[4751,4816],"source":" The `[TestMethod]` attribute indicates a method is a test method."},{"content":"Save this file and execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet test`</ph><ept id=\"p1\">](../tools/dotnet-test.md)</ept> to build the tests and the class library and then run the tests.","pos":[4819,4951],"source":"Save this file and execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests."},{"content":"The MSTest test runner contains the program entry point to run your tests.","pos":[4952,5026]},{"content":"<ph id=\"ph1\">`dotnet test`</ph> starts the test runner using the unit test project you've created.","pos":[5027,5107],"source":"`dotnet test` starts the test runner using the unit test project you've created."},{"content":"Your test fails.","pos":[5109,5125]},{"content":"You haven't created the implementation yet.","pos":[5126,5169]},{"content":"Make this test pass by writing the simplest code in the <ph id=\"ph1\">`PrimeService`</ph> class that works:","pos":[5170,5258],"source":" Make this test pass by writing the simplest code in the `PrimeService` class that works:"},{"content":"In the <bpt id=\"p1\">*</bpt>unit-testing-using-mstest<ept id=\"p1\">*</ept> directory, run <ph id=\"ph1\">`dotnet test`</ph> again.","pos":[5441,5511],"source":"In the *unit-testing-using-mstest* directory, run `dotnet test` again."},{"content":"The <ph id=\"ph1\">`dotnet test`</ph> command runs a build for the <ph id=\"ph2\">`PrimeService`</ph> project and then for the <ph id=\"ph3\">`PrimeService.Tests`</ph> project.","pos":[5512,5628],"source":" The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project."},{"content":"After building both projects, it runs this single test.","pos":[5629,5684]},{"content":"It passes.","pos":[5685,5695]},{"pos":[5700,5720],"content":"Adding more features","linkify":"Adding more features","nodes":[{"content":"Adding more features","pos":[0,20]}]},{"content":"Now that you've made one test pass, it's time to write more.","pos":[5722,5782]},{"content":"There are a few other simple cases for prime numbers: 0, -1.","pos":[5783,5843]},{"content":"You could add new tests with the <ph id=\"ph1\">`[TestMethod]`</ph> attribute, but that quickly becomes tedious.","pos":[5844,5936],"source":" You could add new tests with the `[TestMethod]` attribute, but that quickly becomes tedious."},{"content":"There are other MSTest attributes that enable you to write a suite of similar tests.","pos":[5937,6021]},{"content":"A <ph id=\"ph1\">`[DataTestMethod]`</ph>attribute represents a suite of tests that execute the same code but have different input arguments.","pos":[6023,6143],"source":"  A `[DataTestMethod]`attribute represents a suite of tests that execute the same code but have different input arguments."},{"content":"You can use the <ph id=\"ph1\">`[DataRow]`</ph> attribute to specify values for those inputs.","pos":[6144,6217],"source":" You can use the `[DataRow]` attribute to specify values for those inputs."},{"content":"Instead of creating new tests, apply these two attributes to create a single data driven test.","pos":[6219,6313]},{"content":"The data driven test is a method that tests several values less than two, which is the lowest prime number:","pos":[6314,6421]},{"content":"Run <ph id=\"ph1\">`dotnet test`</ph>, and two of these tests fail.","pos":[6591,6638],"source":"Run `dotnet test`, and two of these tests fail."},{"content":"To make all of the tests pass, change the <ph id=\"ph1\">`if`</ph> clause at the beginning of the method:","pos":[6639,6724],"source":" To make all of the tests pass, change the `if` clause at the beginning of the method:"},{"content":"Continue to iterate by adding more tests, more theories, and more code in the main library.","pos":[6760,6851]},{"content":"You have the <bpt id=\"p1\">[</bpt>finished version of the tests<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService_IsPrimeShould.cs)</ept> and the <bpt id=\"p2\">[</bpt>complete implementation of the library<ept id=\"p2\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/PrimeService/PrimeService.cs)</ept>.","pos":[6852,7212],"source":" You have the [finished version of the tests](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService_IsPrimeShould.cs) and the [complete implementation of the library](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-mstest/PrimeService/PrimeService.cs)."},{"content":"You've built a small library and a set of unit tests for that library.","pos":[7214,7284]},{"content":"You've structured the solution so that adding new packages and tests is part of the normal workflow.","pos":[7285,7385]},{"content":"You've concentrated most of your time and effort on solving the goals of the application.","pos":[7386,7475]}]}