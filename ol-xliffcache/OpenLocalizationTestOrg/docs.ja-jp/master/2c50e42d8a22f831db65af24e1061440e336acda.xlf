<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c50e42d8a22f831db65af24e1061440e336acda</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\generics\generic-interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38e746d96f8af1b46f823794c6dc6acac537c39f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be78eaa5bf6370be7465b36fc46509a4da6a5c7d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generic Interfaces (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generic Interfaces (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It is often useful to define interfaces either for generic collection classes, or for the generic classes that represent items in the collection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The preference for generic classes is to use generic interfaces, such as <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> rather than <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, in order to avoid boxing and unboxing operations on value types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Framework class library defines several generic interfaces for use with the collection classes in the <ph id="ph1">&lt;xref:System.Collections.Generic&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When an interface is specified as a constraint on a type parameter, only types that implement the interface can be used.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following code example shows a <ph id="ph1">`SortedList&lt;T&gt;`</ph> class that derives from the <ph id="ph2">`GenericList&lt;T&gt;`</ph> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to Generics<ept id="p1">](../../../csharp/programming-guide/generics/introduction-to-generics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SortedList&lt;T&gt;`</ph> adds the constraint <ph id="ph2">`where T : IComparable&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This enables the <ph id="ph1">`BubbleSort`</ph> method in <ph id="ph2">`SortedList&lt;T&gt;`</ph> to use the generic <ph id="ph3">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method on list elements.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In this example, list elements are a simple class, <ph id="ph1">`Person`</ph>, that implements <ph id="ph2">`IComparable&lt;Person&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideGenerics#29<ept id="p2">](../../../csharp/programming-guide/generics/codesnippet/CSharp/generic-interfaces_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Multiple interfaces can be specified as constraints on a single type, as follows:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideGenerics#30<ept id="p2">](../../../csharp/programming-guide/generics/codesnippet/CSharp/generic-interfaces_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An interface can define more than one type parameter, as follows:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideGenerics#31<ept id="p2">](../../../csharp/programming-guide/generics/codesnippet/CSharp/generic-interfaces_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The rules of inheritance that apply to classes also apply to interfaces:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideGenerics#32<ept id="p2">](../../../csharp/programming-guide/generics/codesnippet/CSharp/generic-interfaces_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Generic interfaces can inherit from non-generic interfaces if the generic interface is contra-variant, which means it only uses its type parameter as a return value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the .NET Framework class library, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> because <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> only uses <ph id="ph4">`T`</ph> in the return value of <ph id="ph5">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> and in the <ph id="ph6">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property getter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Concrete classes can implement closed constructed interfaces, as follows:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideGenerics#33<ept id="p2">](../../../csharp/programming-guide/generics/codesnippet/CSharp/generic-interfaces_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Generic classes can implement generic interfaces or closed constructed interfaces as long as the class parameter list supplies all arguments required by the interface, as follows:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideGenerics#34<ept id="p2">](../../../csharp/programming-guide/generics/codesnippet/CSharp/generic-interfaces_6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The rules that control method overloading are the same for methods within generic classes, generic structs, or generic interfaces.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generic Methods<ept id="p1">](../../../csharp/programming-guide/generics/generic-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Generics<ept id="p1">](../../../csharp/programming-guide/generics/introduction-to-generics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>interface<ept id="p1">](../../../csharp/language-reference/keywords/interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](https://msdn.microsoft.com/library/ms172192)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>