{"content":"---\ntitle: \"Comparing GUID and uniqueidentifier Values\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: aababd75-2335-43e3-ace8-4b7ae84191a8\n---\n# Comparing GUID and uniqueidentifier Values\nThe globally unique identifier (GUID) data type in SQL Server is represented by the `uniqueidentifier` data type, which stores a 16-byte binary value. A GUID is a binary number, and its main use is as an identifier that must be unique in a network that has many computers at many sites. GUIDs can be generated by calling the Transact-SQL NEWID function, and is guaranteed to be unique throughout the world. For more information, see [uniqueidentifier (Transact-SQL)](/sql/t-sql/data-types/uniqueidentifier-transact-sql).  \n  \n## Working with SqlGuid Values  \n Because GUIDs values are long and obscure, they are not meaningful for users. If randomly generated GUIDs are used for key values and you insert a lot of rows, you get random I/O into your indexes, which can negatively impact performance. GUIDs are also relatively large when compared to other data types. In general we recommend using GUIDs only for very narrow scenarios for which no other data type is suitable.  \n  \n### Comparing GUID Values  \n Comparison operators can be used with `uniqueidentifier` values. However, ordering is not implemented by comparing the bit patterns of the two values. The only operations that are allowed against a `uniqueidentifier` value are comparisons (=, <>, \\<, >, \\<=, >=) and checking for NULL (IS NULL and IS NOT NULL). No other arithmetic operators are allowed.  \n  \n Both <xref:System.Guid> and <xref:System.Data.SqlTypes.SqlGuid> have a `CompareTo` method for comparing different GUID values. However, `System.Guid.CompareTo` and `SqlTypes.SqlGuid.CompareTo` are implemented differently. <xref:System.Data.SqlTypes.SqlGuid> implements `CompareTo` using SQL Server behavior, in the last six bytes of a value are most significant. <xref:System.Guid> evaluates all 16 bytes. The following example demonstrates this behavioral difference. The first section of code displays unsorted <xref:System.Guid> values, and the second section of code shows the sorted <xref:System.Guid> values. The third section shows the sorted <xref:System.Data.SqlTypes.SqlGuid> values. The output is displayed beneath the code listing.  \n  \n [!code-csharp[DataWorks SqlTypes.Guid#1](../../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlTypes.Guid/CS/source.cs#1)]\n [!code-vb[DataWorks SqlTypes.Guid#1](../../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlTypes.Guid/VB/source.vb#1)]  \n  \n This example produces the following results.  \n  \n```  \nUnsorted Guids:  \n3aaaaaaa-bbbb-cccc-dddd-2eeeeeeeeeee  \n2aaaaaaa-bbbb-cccc-dddd-1eeeeeeeeeee  \n1aaaaaaa-bbbb-cccc-dddd-3eeeeeeeeeee  \n  \nSorted Guids:  \n1aaaaaaa-bbbb-cccc-dddd-3eeeeeeeeeee  \n2aaaaaaa-bbbb-cccc-dddd-1eeeeeeeeeee  \n3aaaaaaa-bbbb-cccc-dddd-2eeeeeeeeeee  \n  \nSorted SqlGuids:  \n2aaaaaaa-bbbb-cccc-dddd-1eeeeeeeeeee  \n3aaaaaaa-bbbb-cccc-dddd-2eeeeeeeeeee  \n1aaaaaaa-bbbb-cccc-dddd-3eeeeeeeeeee  \n```  \n  \n## See also\n\n- [SQL Server Data Types and ADO.NET](sql-server-data-types.md)\n- [ADO.NET Overview](../ado-net-overview.md)\n","nodes":[{"pos":[4,160],"embed":true,"restype":"x-metadata","content":"title: \"Comparing GUID and uniqueidentifier Values\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: aababd75-2335-43e3-ace8-4b7ae84191a8","nodes":[{"content":"Comparing GUID and uniqueidentifier Values","nodes":[{"pos":[0,42],"content":"Comparing GUID and uniqueidentifier Values","nodes":[{"content":"Comparing GUID and uniqueidentifier Values","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[167,209],"content":"Comparing GUID and uniqueidentifier Values","linkify":"Comparing GUID and uniqueidentifier Values","nodes":[{"content":"Comparing GUID and uniqueidentifier Values","pos":[0,42]}]},{"content":"The globally unique identifier (GUID) data type in SQL Server is represented by the <ph id=\"ph1\">`uniqueidentifier`</ph> data type, which stores a 16-byte binary value.","pos":[210,360],"source":"The globally unique identifier (GUID) data type in SQL Server is represented by the `uniqueidentifier` data type, which stores a 16-byte binary value."},{"content":"A GUID is a binary number, and its main use is as an identifier that must be unique in a network that has many computers at many sites.","pos":[361,496]},{"content":"GUIDs can be generated by calling the Transact-SQL NEWID function, and is guaranteed to be unique throughout the world.","pos":[497,616]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>uniqueidentifier (Transact-SQL)<ept id=\"p1\">](/sql/t-sql/data-types/uniqueidentifier-transact-sql)</ept>.","pos":[617,730],"source":" For more information, see [uniqueidentifier (Transact-SQL)](/sql/t-sql/data-types/uniqueidentifier-transact-sql)."},{"pos":[739,766],"content":"Working with SqlGuid Values","linkify":"Working with SqlGuid Values","nodes":[{"content":"Working with SqlGuid Values","pos":[0,27]}]},{"content":"Because GUIDs values are long and obscure, they are not meaningful for users.","pos":[770,847]},{"content":"If randomly generated GUIDs are used for key values and you insert a lot of rows, you get random I/O into your indexes, which can negatively impact performance.","pos":[848,1008]},{"content":"GUIDs are also relatively large when compared to other data types.","pos":[1009,1075]},{"content":"In general we recommend using GUIDs only for very narrow scenarios for which no other data type is suitable.","pos":[1076,1184]},{"pos":[1194,1215],"content":"Comparing GUID Values","linkify":"Comparing GUID Values","nodes":[{"content":"Comparing GUID Values","pos":[0,21]}]},{"content":"Comparison operators can be used with <ph id=\"ph1\">`uniqueidentifier`</ph> values.","pos":[1219,1283],"source":"Comparison operators can be used with `uniqueidentifier` values."},{"content":"However, ordering is not implemented by comparing the bit patterns of the two values.","pos":[1284,1369]},{"content":"The only operations that are allowed against a <ph id=\"ph1\">`uniqueidentifier`</ph> value are comparisons (=, &lt;&gt;, <ph id=\"ph2\">\\&lt;</ph>, &gt;, <ph id=\"ph3\">\\&lt;</ph>=, &gt;=) and checking for NULL (IS NULL and IS NOT NULL).","pos":[1370,1530],"source":" The only operations that are allowed against a `uniqueidentifier` value are comparisons (=, <>, \\<, >, \\<=, >=) and checking for NULL (IS NULL and IS NOT NULL)."},{"content":"No other arithmetic operators are allowed.","pos":[1531,1573]},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.SqlTypes.SqlGuid&gt;</ph> have a <ph id=\"ph3\">`CompareTo`</ph> method for comparing different GUID values.","pos":[1580,1706],"source":"Both <xref:System.Guid> and <xref:System.Data.SqlTypes.SqlGuid> have a `CompareTo` method for comparing different GUID values."},{"content":"However, <ph id=\"ph1\">`System.Guid.CompareTo`</ph> and <ph id=\"ph2\">`SqlTypes.SqlGuid.CompareTo`</ph> are implemented differently.","pos":[1707,1801],"source":" However, `System.Guid.CompareTo` and `SqlTypes.SqlGuid.CompareTo` are implemented differently."},{"content":"<ph id=\"ph1\">&lt;xref:System.Data.SqlTypes.SqlGuid&gt;</ph> implements <ph id=\"ph2\">`CompareTo`</ph> using SQL Server behavior, in the last six bytes of a value are most significant.","pos":[1802,1942],"source":"<xref:System.Data.SqlTypes.SqlGuid> implements `CompareTo` using SQL Server behavior, in the last six bytes of a value are most significant."},{"content":"<ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> evaluates all 16 bytes.","pos":[1943,1985],"source":"<xref:System.Guid> evaluates all 16 bytes."},{"content":"The following example demonstrates this behavioral difference.","pos":[1986,2048]},{"content":"The first section of code displays unsorted <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> values, and the second section of code shows the sorted <ph id=\"ph2\">&lt;xref:System.Guid&gt;</ph> values.","pos":[2049,2194],"source":" The first section of code displays unsorted <xref:System.Guid> values, and the second section of code shows the sorted <xref:System.Guid> values."},{"content":"The third section shows the sorted <ph id=\"ph1\">&lt;xref:System.Data.SqlTypes.SqlGuid&gt;</ph> values.","pos":[2195,2273],"source":" The third section shows the sorted <xref:System.Data.SqlTypes.SqlGuid> values."},{"content":"The output is displayed beneath the code listing.","pos":[2274,2323]},{"content":"This example produces the following results.","pos":[2620,2664]},{"pos":[3098,3106],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3110,3171],"content":"<bpt id=\"p1\">[</bpt>SQL Server Data Types and ADO.NET<ept id=\"p1\">](sql-server-data-types.md)</ept>","source":"[SQL Server Data Types and ADO.NET](sql-server-data-types.md)"},{"pos":[3174,3216],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Overview<ept id=\"p1\">](../ado-net-overview.md)</ept>","source":"[ADO.NET Overview](../ado-net-overview.md)"}]}