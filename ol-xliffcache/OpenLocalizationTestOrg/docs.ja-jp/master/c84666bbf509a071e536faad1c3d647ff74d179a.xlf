<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-simple-object-model-and-query-csharp.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c84666bbf509a071e536faad1c3d647ff74d179a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\walkthrough-simple-object-model-and-query-csharp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8059fae7d0e0098e1ac4af449b24a32b5dc95d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04341b812fd1a73826c6d71c3d8d6869a9fd666f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Simple Object Model and Query (C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Simple Object Model and Query (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This walkthrough provides a fundamental end-to-end <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> scenario with minimal complexities.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You will create an entity class that models the Customers table in the sample Northwind database.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You will then create a simple query to list customers who are located in London.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This walkthrough is code-oriented by design to help show <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> concepts.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Normally speaking, you would use the <ph id="ph1">[!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)]</ph> to create your object model.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This walkthrough was written by using Visual C# Development Settings.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This walkthrough uses a dedicated folder ("c:\linqtest5") to hold files.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create this folder before you begin the walkthrough.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This walkthrough requires the Northwind sample database.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you do not have this database on your development computer, you can download it from the Microsoft download site.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For instructions, see <bpt id="p1">[</bpt>Downloading Sample Databases<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>After you have downloaded the database, copy the file to the c:\linqtest5 folder.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This walkthrough consists of six main tasks:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating a <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> solution in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Mapping a class to a database table.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Designating properties on the class to represent database columns.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Specifying the connection to the Northwind database.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creating a simple query to run against the database.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Executing the query and observing the results.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Creating a LINQ to SQL Solution</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this first task, you create a Visual Studio solution that contains the necessary references to build and run a <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> project.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To create a LINQ to SQL solution</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>On the Visual Studio <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, point to <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Project types<ept id="p1">**</ept> pane of the <bpt id="p2">**</bpt>New Project<ept id="p2">**</ept> dialog box, click <bpt id="p3">**</bpt>Visual C#<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Templates<ept id="p1">**</ept> pane, click <bpt id="p2">**</bpt>Console Application<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type <bpt id="p2">**</bpt>LinqConsoleApp<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Location<ept id="p1">**</ept> box, verify where you want to store your project files.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Adding LINQ References and Directives</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This walkthrough uses assemblies that might not be installed by default in your project.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If System.Data.Linq is not listed as a reference in your project (expand the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node in <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept>), add it, as explained in the following steps.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To add System.Data.Linq</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click <bpt id="p2">**</bpt>References<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>.NET<ept id="p2">**</ept>, click the System.Data.Linq assembly, and then click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The assembly is added to the project.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add the following directives at the top of <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Mapping a Class to a Database Table</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In this step, you create a class and map it to a database table.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Such a class is termed an <bpt id="p1">*</bpt>entity class<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Note that the mapping is accomplished by just adding the <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.TableAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.TableAttribute.Name%2A&gt;</ph> property specifies the name of the table in the database.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To create an entity class and map it to a database table</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Type or paste the following code into Program.cs immediately above the <ph id="ph1">`Program`</ph> class declaration:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Designating Properties on the Class to Represent Database Columns</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this step, you accomplish several tasks.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.ColumnAttribute&gt;</ph> attribute to designate <ph id="ph2">`CustomerID`</ph> and <ph id="ph3">`City`</ph> properties on the entity class as representing columns in the database table.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You designate the <ph id="ph1">`CustomerID`</ph> property as representing a primary key column in the database.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You designate <ph id="ph1">`_CustomerID`</ph> and <ph id="ph2">`_City`</ph> fields for private storage.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> can then store and retrieve values directly, instead of using public accessors that might include business logic.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To represent characteristics of two database columns</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Type or paste the following code into Program.cs inside the curly braces for the <ph id="ph1">`Customer`</ph> class.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifying the Connection to the Northwind Database</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In this step you use a <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> object to establish a connection between your code-based data structures and the database itself.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is the main channel through which you retrieve objects from the database and submit changes.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You also declare a <ph id="ph1">`Table&lt;Customer&gt;`</ph> to act as the logical, typed table for your queries against the Customers table in the database.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You will create and execute these queries in later steps.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To specify the database connection</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Type or paste the following code into the <ph id="ph1">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`northwnd.mdf`</ph> file is assumed to be in the linqtest5 folder.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see the Prerequisites section earlier in this walkthrough.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Creating a Simple Query</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In this step, you create a query to find which customers in the database Customers table are located in London.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The query code in this step just describes the query.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It does not execute it.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This approach is known as <bpt id="p1">*</bpt>deferred execution<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to LINQ Queries (C#)<ept id="p1">](~/docs/csharp/programming-guide/concepts/linq/introduction-to-linq-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You will also produce a log output to show the SQL commands that <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> generates.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This logging feature (which uses <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.Log%2A&gt;</ph>) is helpful in debugging, and in determining that the commands being sent to the database accurately represent your query.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To create a simple query</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Type or paste the following code into the <ph id="ph1">`Main`</ph> method after the <ph id="ph2">`Table&lt;Customer&gt;`</ph> declaration.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Executing the Query</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In this step, you actually execute the query.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The query expressions you created in the previous steps are not evaluated until the results are needed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When you begin the <ph id="ph1">`foreach`</ph> iteration, a SQL command is executed against the database and objects are materialized.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To execute the query</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Type or paste the following code at the end of the <ph id="ph1">`Main`</ph> method (after the query description).</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Press F5 to debug the application.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If your application generates a run-time error, see the Troubleshooting section of <bpt id="p1">[</bpt>Learning by Walkthroughs<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The query results in the console window should appear as follows:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Press Enter in the console window to close the application.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Walkthrough: Querying Across Relationships (C#)<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-querying-across-relationships-csharp.md)</ept> topic continues where this walkthrough ends.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The Query Across Relationships walkthrough demonstrates how <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> can query across tables, similar to <bpt id="p1">*</bpt>joins<ept id="p1">*</ept> in a relational database.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you want to do the Query Across Relationships walkthrough, make sure to save the solution for the walkthrough you have just completed, which is a prerequisite.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Learning by Walkthroughs<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>