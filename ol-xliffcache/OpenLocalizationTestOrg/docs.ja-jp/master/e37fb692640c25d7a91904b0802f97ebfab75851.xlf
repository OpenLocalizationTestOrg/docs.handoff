<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="custom-templates.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e37fb692640c25d7a91904b0802f97ebfab75851</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\custom-templates.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c84eb0f96875f48ea8c4b34ed58adea8d95dde4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b46ff23e5e9a20c4ba8da08212f8dd026d7f33d2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Custom templates for dotnet new</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about custom templates for any type of .NET project or files.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom templates for dotnet new</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/download/core)</ept> comes with many templates pre-installed to use with the <bpt id="p2">[</bpt><ph id="ph1">`dotnet new`</ph> command<ept id="p2">](dotnet-new.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Starting with .NET Core 2.0, you can create your own custom templates for any type of project, such as an app, service, tool, or class library.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can even create a template that outputs one or more independent files, such as a configuration file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can install custom templates from a NuGet package on any NuGet feed, by referencing a NuGet <bpt id="p1">*</bpt>nupkg<ept id="p1">*</ept> file directly, or by specifying a file system directory that contains the template.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The template engine offers features that allow you to replace values, include and exclude files and regions of files, and execute custom processing operations when your template is used.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The template engine is open source, and the online code repository is at <bpt id="p1">[</bpt>dotnet/templating<ept id="p1">](https://github.com/dotnet/templating/)</ept> on GitHub.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Visit the <bpt id="p1">[</bpt>dotnet/dotnet-template-samples<ept id="p1">](https://github.com/dotnet/dotnet-template-samples)</ept> repo for samples of templates.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>More templates, including templates from third parties, are found at <bpt id="p1">[</bpt>Available templates for dotnet new<ept id="p1">](https://github.com/dotnet/templating/wiki/Available-templates-for-dotnet-new)</ept> on GitHub.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about creating and using custom templates, see <bpt id="p1">[</bpt>How to create your own templates for dotnet new<ept id="p1">](https://devblogs.microsoft.com/dotnet/how-to-create-your-own-templates-for-dotnet-new/)</ept> and the <bpt id="p2">[</bpt>dotnet/templating GitHub repo Wiki<ept id="p2">](https://github.com/dotnet/templating/wiki)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To follow a walkthrough and create a template, see the <bpt id="p1">[</bpt>Create a custom template for dotnet new<ept id="p1">](~/docs/core/tutorials/create-custom-template.md)</ept> tutorial.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Configuration</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A template is composed of the following components:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Source files and folders</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A configuration file (<bpt id="p1">*</bpt>template.json<ept id="p1">*</ept>)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Source files and folders</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The source files and folders include whatever files and folders you want the template engine to use when the <ph id="ph1">`dotnet new &lt;TEMPLATE&gt;`</ph> command is executed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The template engine is designed to use <bpt id="p1">*</bpt>runnable projects<ept id="p1">*</ept> as source code to produce projects.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This has several benefits:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The template engine doesn't require you to inject special tokens into your project's source code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The code files aren't special files or modified in any way to work with the template engine.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>So, the tools you normally use when working with projects also work with template content.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You build, run, and debug your template projects just like you do for any of your other projects.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can quickly create a template from an existing project just by adding a <bpt id="p1">*</bpt>template.json<ept id="p1">*</ept> configuration file to the project.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Files and folders stored in the template aren't limited to formal .NET project types, such as .NET Core or .NET Framework solutions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Source files and folders may consist of any content that you wish to create when the template is used, even if the template engine produces just one file for its output, such as a configuration file or a solution file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, you can create a template that contains a <bpt id="p1">*</bpt>web.config<ept id="p1">*</ept> source file and creates a modified <bpt id="p2">*</bpt>web.config<ept id="p2">*</ept> file for projects where the template is used.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The modifications to source files are based on logic and settings you've provided in the <bpt id="p1">*</bpt>template.json<ept id="p1">*</ept> configuration file along with values provided by the user passed as options to the <ph id="ph1">`dotnet new &lt;TEMPLATE&gt;`</ph> command.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>template.json</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>template.json<ept id="p1">*</ept> file is placed in a <bpt id="p2">*</bpt>.template.config<ept id="p2">*</ept> folder in the root directory of the template.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The file provides configuration information to the template engine.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The minimum configuration requires the members shown in the following table, which is sufficient to create a functional template.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>URI</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The JSON schema for the <bpt id="p1">*</bpt>template.json<ept id="p1">*</ept> file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Editors that support JSON schemas enable JSON-editing features when the schema is specified.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://code.visualstudio.com/)</ept> requires this member to enable IntelliSense.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use a value of <ph id="ph1">`http://json.schemastore.org/template`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The author of the template.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>array(string)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Zero or more characteristics of the template that a user might use to find the template when searching for it.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The classifications also appear in the <bpt id="p1">*</bpt>Tags<ept id="p1">*</ept> column when it appears in a list of templates produced by using the <ph id="ph1">&lt;code&gt;dotnet new -l&amp;#124;--list&lt;/code&gt;</ph> command.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A unique name for this template.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The name for the template that users should see.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A default shorthand for selecting the template that applies to environments where the template name is specified by the user, not selected via a GUI.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, the short name is useful when using templates from a command prompt with CLI commands.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The full schema for the <bpt id="p1">*</bpt>template.json<ept id="p1">*</ept> file is found at the <bpt id="p2">[</bpt>JSON Schema Store<ept id="p2">](http://json.schemastore.org/template)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>.NET default templates</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/download/core)</ept>, you receive over a dozen built-in templates for creating projects and files, including console apps, class libraries, unit test projects, ASP.NET Core apps (including <bpt id="p2">[</bpt>Angular<ept id="p2">](https://angular.io/)</ept> and <bpt id="p3">[</bpt>React<ept id="p3">](https://facebook.github.io/react/)</ept> projects), and configuration files.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To list the built-in templates, execute the <ph id="ph1">`dotnet new`</ph> command with the <ph id="ph2">`-l|--list`</ph> option:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Packing a template into a NuGet package (nupkg file)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Currently, a custom template is packed on Windows with <bpt id="p1">[</bpt>nuget.exe<ept id="p1">](https://dist.nuget.org/win-x86-commandline/latest/nuget.exe)</ept> (not <bpt id="p2">[</bpt>dotnet pack<ept id="p2">](dotnet-pack.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For cross-platform packaging, consider using <bpt id="p1">[</bpt>NuGetizer 3000<ept id="p1">](https://github.com/NuGet/Home/wiki/NuGetizer-3000)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The contents of the project folder, together with its <bpt id="p1">*</bpt>.template.config/template.json<ept id="p1">*</ept> file, are placed into a folder named <bpt id="p2">*</bpt>content<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Next to the <bpt id="p1">*</bpt>content<ept id="p1">*</ept> folder, add a <bpt id="p2">[</bpt><bpt id="p3">*</bpt>nuspec<ept id="p3">*</ept> file<ept id="p2">](/nuget/create-packages/creating-a-package)</ept>, which is an XML manifest file that describes a package's contents and drives the process of creating the NuGet package.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Inside of a <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>packageTypes&gt;<ept id="p1">**</ept> element in the <bpt id="p2">*</bpt>nuspec<ept id="p2">*</ept> file, include a <bpt id="p3">**</bpt><ph id="ph2">\&lt;</ph>packageType&gt;<ept id="p3">**</ept> element with a <ph id="ph3">`name`</ph> attribute value of <ph id="ph4">`Template`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Both the <bpt id="p1">*</bpt>content<ept id="p1">*</ept> folder and the <bpt id="p2">*</bpt>nuspec<ept id="p2">*</ept> file should reside in the same directory.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The table shows the minimum <bpt id="p1">*</bpt>nuspec<ept id="p1">*</ept> file elements required to produce a template as a NuGet package.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>authors&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A comma-separated list of packages authors, matching the profile names on nuget.org. Authors are displayed in the NuGet Gallery on nuget.org and are used to cross-reference packages by the same authors.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>description&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A long description of the package for UI display.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>id&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The case-insensitive package identifier, which must be unique across nuget.org or whatever gallery the package will reside in.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>IDs may not contain spaces or characters that are not valid for a URL and generally follow .NET namespace rules.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Choosing a unique package identifier and setting the version number<ept id="p1">](/nuget/create-packages/creating-a-package#choosing-a-unique-package-identifier-and-setting-the-version-number)</ept> for guidance.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>packageType&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Place this element inside a <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>packageTypes&gt;<ept id="p1">**</ept> element among the <bpt id="p2">**</bpt><ph id="ph2">\&lt;</ph>metadata&gt;<ept id="p2">**</ept> elements.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">`name`</ph> attribute of the <bpt id="p1">**</bpt><ph id="ph2">\&lt;</ph>packageType&gt;<ept id="p1">**</ept> element to <ph id="ph3">`Template`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>version&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The version of the package, following the major.minor.patch pattern.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Version numbers may include a pre-release suffix as described in the <bpt id="p1">[</bpt>Pre-release versions<ept id="p1">](/nuget/create-packages/prerelease-packages#semantic-versioning)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>.nuspec reference<ept id="p1">](/nuget/schema/nuspec)</ept> for the complete <bpt id="p2">*</bpt>nuspec<ept id="p2">*</ept> file schema.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An example <bpt id="p1">*</bpt>nuspec<ept id="p1">*</ept> file for a template appears in the <bpt id="p2">[</bpt>Create a custom template for dotnet new<ept id="p2">](~/docs/core/tutorials/create-custom-template.md)</ept> tutorial.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a package<ept id="p1">](/nuget/create-packages/creating-a-package#creating-the-package)</ept> using the <ph id="ph1">`nuget pack &lt;PATH_TO_NUSPEC_FILE&gt;`</ph> command.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Installing a template</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Install a custom template from a NuGet package on any NuGet feed by referencing a <bpt id="p1">*</bpt>nupkg<ept id="p1">*</ept> file directly or by specifying a file system directory that contains a templating configuration.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`-i|--install`</ph> option with the <bpt id="p1">[</bpt>dotnet new<ept id="p1">](dotnet-new.md)</ept> command.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To install a template from a NuGet package stored at nuget.org</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To install a template from a local nupkg file</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To install a template from a file system directory</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FILE_SYSTEM_DIRECTORY`</ph> is the project folder containing the project and the <bpt id="p1">*</bpt>.template.config<ept id="p1">*</ept> folder:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Uninstalling a template</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Uninstall a custom template by referencing a NuGet package by its <ph id="ph1">`id`</ph> or by specifying a file system directory that contains a templating configuration.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`-u|--uninstall`</ph> install option with the <bpt id="p1">[</bpt>dotnet new<ept id="p1">](dotnet-new.md)</ept> command.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To uninstall a template from a NuGet package stored at nuget.org</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To uninstall a template from a local nupkg file</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To uninstall the template, don't attempt to use the path to the <bpt id="p1">*</bpt>nupkg<ept id="p1">*</ept> file.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Attempting to uninstall a template using <ph id="ph1">`dotnet new -u &lt;PATH_TO_NUPKG_FILE&gt;`</ph> fails.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Reference the package by its <ph id="ph1">`id`</ph>:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To uninstall a template from a file system directory</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FILE_SYSTEM_DIRECTORY`</ph> is the project folder containing the project and the <bpt id="p1">*</bpt>.template.config<ept id="p1">*</ept> folder.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The path provided needs to be the absolute path.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Attempting to uninstall a template using a relative path fails.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>dotnet new<ept id="p1">](dotnet-new.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Create a project using a custom template</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>After a template is installed, use the template by executing the <ph id="ph1">`dotnet new &lt;TEMPLATE&gt;`</ph> command as you would with any other pre-installed template.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can also specify <bpt id="p1">[</bpt>options<ept id="p1">](dotnet-new.md#options)</ept> to the <ph id="ph1">`dotnet new`</ph> command, including template specific options you configured in the template settings.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Supply the template's short name directly to the command:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a custom template for dotnet new (tutorial)<ept id="p1">](../tutorials/create-custom-template.md)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dotnet/templating GitHub repo Wiki<ept id="p1">](https://github.com/dotnet/templating/wiki)</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dotnet/dotnet-template-samples GitHub repo<ept id="p1">](https://github.com/dotnet/dotnet-template-samples)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to create your own templates for dotnet new<ept id="p1">](https://devblogs.microsoft.com/dotnet/how-to-create-your-own-templates-for-dotnet-new/)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">*</bpt>template.json<ept id="p2">*</ept> schema at the JSON Schema Store<ept id="p1">](http://json.schemastore.org/template)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>