{"content":"---\ntitle: \"Built-In Types Table (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"types [C#], built-in\"\n  - \"built-in C# types\"\nms.assetid: 54f901f2-bf2f-472c-ae8d-73e8ecfc57fe\ncaps.latest.revision: 12\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Built-In Types Table (C# Reference)\nThe following table shows the keywords for built-in C# types, which are aliases of predefined types in the <xref:System> namespace.  \n  \n|C# Type|.NET Framework Type|  \n|--------------|-------------------------|  \n|[bool](../../../csharp/language-reference/keywords/bool.md)|`System.Boolean`|  \n|[byte](../../../csharp/language-reference/keywords/byte.md)|`System.Byte`|  \n|[sbyte](../../../csharp/language-reference/keywords/sbyte.md)|`System.SByte`|  \n|[char](../../../csharp/language-reference/keywords/char.md)|`System.Char`|  \n|[decimal](../../../csharp/language-reference/keywords/decimal.md)|`System.Decimal`|  \n|[double](../../../csharp/language-reference/keywords/double.md)|`System.Double`|  \n|[float](../../../csharp/language-reference/keywords/float.md)|`System.Single`|  \n|[int](../../../csharp/language-reference/keywords/int.md)|`System.Int32`|  \n|[uint](../../../csharp/language-reference/keywords/uint.md)|`System.UInt32`|  \n|[long](../../../csharp/language-reference/keywords/long.md)|`System.Int64`|  \n|[ulong](../../../csharp/language-reference/keywords/ulong.md)|`System.UInt64`|  \n|[object](../../../csharp/language-reference/keywords/object.md)|`System.Object`|  \n|[short](../../../csharp/language-reference/keywords/short.md)|`System.Int16`|  \n|[ushort](../../../csharp/language-reference/keywords/ushort.md)|`System.UInt16`|  \n|[string](../../../csharp/language-reference/keywords/string.md)|`System.String`|  \n  \n## Remarks  \n All of the types in the table, except `object` and `string`, are referred to as simple types.  \n  \n The C# type keywords and their aliases are interchangeable. For example, you can declare an integer variable by using either of the following declarations:  \n  \n```  \nint x = 123;  \nSystem.Int32 x = 123;  \n```  \n  \n To display the actual type for any C# type, use the system method `GetType()`. For example, the following statement displays the system alias that represents the type of `myVariable`:  \n  \n```  \nConsole.WriteLine(myVariable.GetType());  \n```  \n  \n You can also use the [typeof](../../../csharp/language-reference/keywords/typeof.md) operator.  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Value Types](../../../csharp/language-reference/keywords/value-types.md)   \n [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)   \n [Formatting Numeric Results Table](../../../csharp/language-reference/keywords/formatting-numeric-results-table.md)   \n [dynamic](../../../csharp/language-reference/keywords/dynamic.md)   \n [Reference Tables for Types](../../../csharp/language-reference/keywords/reference-tables-for-types.md)","nodes":[{"pos":[4,553],"nodes":[{"content":"Built-In Types Table (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,52],"content":"Built-In Types Table (C# Reference) | Microsoft Docs","nodes":[{"content":"Built-In Types Table (C# Reference) | Microsoft Docs","pos":[0,52]}]}],"pos":[6,61],"yaml":true}],"content":"title: \"Built-In Types Table (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"types [C#], built-in\"\n  - \"built-in C# types\"\nms.assetid: 54f901f2-bf2f-472c-ae8d-73e8ecfc57fe\ncaps.latest.revision: 12\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[560,595],"content":"Built-In Types Table (C# Reference)","linkify":"Built-In Types Table (C# Reference)","nodes":[{"content":"Built-In Types Table (C# Reference)","pos":[0,35]}]},{"content":"The following table shows the keywords for built-in C# types, which are aliases of predefined types in the <ph id=\"ph1\">&lt;xref:System&gt;</ph> namespace.","pos":[596,727],"source":"The following table shows the keywords for built-in C# types, which are aliases of predefined types in the <xref:System> namespace."},{"content":"C# Type","pos":[734,741]},{"content":".NET Framework Type","pos":[742,761]},{"pos":[811,870],"content":"<bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../../../csharp/language-reference/keywords/bool.md)</ept>","source":"[bool](../../../csharp/language-reference/keywords/bool.md)"},{"pos":[892,951],"content":"<bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](../../../csharp/language-reference/keywords/byte.md)</ept>","source":"[byte](../../../csharp/language-reference/keywords/byte.md)"},{"pos":[970,1031],"content":"<bpt id=\"p1\">[</bpt>sbyte<ept id=\"p1\">](../../../csharp/language-reference/keywords/sbyte.md)</ept>","source":"[sbyte](../../../csharp/language-reference/keywords/sbyte.md)"},{"pos":[1051,1110],"content":"<bpt id=\"p1\">[</bpt>char<ept id=\"p1\">](../../../csharp/language-reference/keywords/char.md)</ept>","source":"[char](../../../csharp/language-reference/keywords/char.md)"},{"pos":[1129,1194],"content":"<bpt id=\"p1\">[</bpt>decimal<ept id=\"p1\">](../../../csharp/language-reference/keywords/decimal.md)</ept>","source":"[decimal](../../../csharp/language-reference/keywords/decimal.md)"},{"pos":[1216,1279],"content":"<bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](../../../csharp/language-reference/keywords/double.md)</ept>","source":"[double](../../../csharp/language-reference/keywords/double.md)"},{"pos":[1300,1361],"content":"<bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept>","source":"[float](../../../csharp/language-reference/keywords/float.md)"},{"pos":[1382,1439],"content":"<bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>","source":"[int](../../../csharp/language-reference/keywords/int.md)"},{"pos":[1459,1518],"content":"<bpt id=\"p1\">[</bpt>uint<ept id=\"p1\">](../../../csharp/language-reference/keywords/uint.md)</ept>","source":"[uint](../../../csharp/language-reference/keywords/uint.md)"},{"pos":[1539,1598],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept>","source":"[long](../../../csharp/language-reference/keywords/long.md)"},{"pos":[1618,1679],"content":"<bpt id=\"p1\">[</bpt>ulong<ept id=\"p1\">](../../../csharp/language-reference/keywords/ulong.md)</ept>","source":"[ulong](../../../csharp/language-reference/keywords/ulong.md)"},{"pos":[1700,1763],"content":"<bpt id=\"p1\">[</bpt>object<ept id=\"p1\">](../../../csharp/language-reference/keywords/object.md)</ept>","source":"[object](../../../csharp/language-reference/keywords/object.md)"},{"pos":[1784,1845],"content":"<bpt id=\"p1\">[</bpt>short<ept id=\"p1\">](../../../csharp/language-reference/keywords/short.md)</ept>","source":"[short](../../../csharp/language-reference/keywords/short.md)"},{"pos":[1865,1928],"content":"<bpt id=\"p1\">[</bpt>ushort<ept id=\"p1\">](../../../csharp/language-reference/keywords/ushort.md)</ept>","source":"[ushort](../../../csharp/language-reference/keywords/ushort.md)"},{"pos":[1949,2012],"content":"<bpt id=\"p1\">[</bpt>string<ept id=\"p1\">](../../../csharp/language-reference/keywords/string.md)</ept>","source":"[string](../../../csharp/language-reference/keywords/string.md)"},{"pos":[2038,2045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2049,2142],"content":"All of the types in the table, except <ph id=\"ph1\">`object`</ph> and <ph id=\"ph2\">`string`</ph>, are referred to as simple types.","source":"All of the types in the table, except `object` and `string`, are referred to as simple types."},{"content":"The C# type keywords and their aliases are interchangeable.","pos":[2149,2208]},{"content":"For example, you can declare an integer variable by using either of the following declarations:","pos":[2209,2304]},{"content":"To display the actual type for any C# type, use the system method <ph id=\"ph1\">`GetType()`</ph>.","pos":[2365,2443],"source":"To display the actual type for any C# type, use the system method `GetType()`."},{"content":"For example, the following statement displays the system alias that represents the type of <ph id=\"ph1\">`myVariable`</ph>:","pos":[2444,2548],"source":" For example, the following statement displays the system alias that represents the type of `myVariable`:"},{"pos":[2613,2707],"content":"You can also use the <bpt id=\"p1\">[</bpt>typeof<ept id=\"p1\">](../../../csharp/language-reference/keywords/typeof.md)</ept> operator.","source":"You can also use the [typeof](../../../csharp/language-reference/keywords/typeof.md) operator."},{"pos":[2716,2724],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2728,2788],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2792,2859],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2863,2931],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Value Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2935,3009],"source":"[Value Types](../../../csharp/language-reference/keywords/value-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Default Values Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/default-values-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3013,3105],"source":"[Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Formatting Numeric Results Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/formatting-numeric-results-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3109,3225],"source":"[Formatting Numeric Results Table](../../../csharp/language-reference/keywords/formatting-numeric-results-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>dynamic<ept id=\"p1\">](../../../csharp/language-reference/keywords/dynamic.md)</ept><ph id=\"ph1\"> </ph>","pos":[3229,3295],"source":"[dynamic](../../../csharp/language-reference/keywords/dynamic.md) "},{"content":"<bpt id=\"p1\">[</bpt>Reference Tables for Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-tables-for-types.md)</ept>","pos":[3299,3402],"source":"[Reference Tables for Types](../../../csharp/language-reference/keywords/reference-tables-for-types.md)"}]}