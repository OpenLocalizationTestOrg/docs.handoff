<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd1b765faa734973bf5e184cee2ac934ebdf9241</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\covariance-contravariance\variance-in-delegates.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eab3d263c2fbffa2db125c3397dcf00026546fe0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5372c5c8a43a7eff1610121d834761c9e6e0bbc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Variance in Delegates (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Variance in Delegates (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET Framework 3.5 introduced variance support for matching method signatures with delegate types in all delegates in C#.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This means that you can assign to delegates not only methods that have matching signatures, but also methods that return more derived types (covariance) or that accept parameters that have less derived types (contravariance) than that specified by the delegate type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This includes both generic and non-generic delegates.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, consider the following code, which has two classes and two delegates: generic and non-generic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you create delegates of the <ph id="ph1">`SampleDelegate`</ph> or <ph id="ph2">`SampleGenericDelegate&lt;A, R&gt;`</ph> types, you can assign any one of the following methods to those delegates.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following code example illustrates the implicit conversion between the method signature and the delegate type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more examples, see <bpt id="p1">[</bpt>Using Variance in Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md)</ept> and <bpt id="p2">[</bpt>Using Variance for Func and Action Generic Delegates (C#)<ept id="p2">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Variance in Generic Type Parameters</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In .NET Framework 4 or later you can enable implicit conversion between delegates, so that generic delegates that have different types specified by generic type parameters can be assigned to each other, if the types are inherited from each other as required by variance.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To enable implicit conversion, you must explicitly declare generic parameters in a delegate as covariant or contravariant by using the <ph id="ph1">`in`</ph> or <ph id="ph2">`out`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code example shows how you can create a delegate that has a covariant generic type parameter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you use only variance support to match method signatures with delegate types and do not use the <ph id="ph1">`in`</ph> and <ph id="ph2">`out`</ph> keywords, you may find that sometimes you can instantiate delegates with identical lambda expressions or methods, but you cannot assign one delegate to another.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the following code example, <ph id="ph1">`SampleGenericDelegate&lt;String&gt;`</ph> cannot be explicitly converted to <ph id="ph2">`SampleGenericDelegate&lt;Object&gt;`</ph>, although <ph id="ph3">`String`</ph> inherits <ph id="ph4">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can fix this problem by marking the generic parameter <ph id="ph1">`T`</ph> with the <ph id="ph2">`out`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Generic Delegates That Have Variant Type Parameters in the .NET Framework</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>.NET Framework 4 introduced variance support for generic type parameters in several existing generic delegates:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Action`</ph> delegates from the <ph id="ph2">&lt;xref:System&gt;</ph> namespace, for example, <ph id="ph3">&lt;xref:System.Action%601&gt;</ph> and <ph id="ph4">&lt;xref:System.Action%602&gt;</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Func`</ph> delegates from the <ph id="ph2">&lt;xref:System&gt;</ph> namespace, for example, <ph id="ph3">&lt;xref:System.Func%601&gt;</ph> and <ph id="ph4">&lt;xref:System.Func%602&gt;</ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> delegate</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph> delegate</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Converter%602&gt;</ph> delegate</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <bpt id="p1">[</bpt>Using Variance for Func and Action Generic Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Declaring Variant Type Parameters in Generic Delegates</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If a generic delegate has covariant or contravariant generic type parameters, it can be referred to as a <bpt id="p1">*</bpt>variant generic delegate<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can declare a generic type parameter covariant in a generic delegate by using the <ph id="ph1">`out`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The covariant type can be used only as a method return type and not as a type of method arguments.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code example shows how to declare a covariant generic delegate.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can declare a generic type parameter contravariant in a generic delegate by using the <ph id="ph1">`in`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The contravariant type can be used only as a type of method arguments and not as a method return type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code example shows how to declare a contravariant generic delegate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ref`</ph> and <ph id="ph2">`out`</ph> parameters in C# can't be marked as variant.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is also possible to support both variance and covariance in the same delegate, but for different type parameters.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Instantiating and Invoking Variant Generic Delegates</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can instantiate and invoke variant delegates just as you instantiate and invoke invariant delegates.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the following example, the delegate is instantiated by a lambda expression.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Combining Variant Generic Delegates</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You should not combine variant delegates.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Delegate.Combine%2A&gt;</ph> method does not support variant delegate conversion and expects delegates to be of exactly the same type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This can lead to a run-time exception when you combine delegates either by using the <ph id="ph1">&lt;xref:System.Delegate.Combine%2A&gt;</ph> method or by using the <ph id="ph2">`+`</ph> operator, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Variance in Generic Type Parameters for Value and Reference Types</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Variance for generic type parameters is supported for reference types only.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`DVariant&lt;int&gt;`</ph> can't be implicitly converted to <ph id="ph2">`DVariant&lt;Object&gt;`</ph> or <ph id="ph3">`DVariant&lt;long&gt;`</ph>, because integer is a value type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example demonstrates that variance in generic type parameters is not supported for value types.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](https://msdn.microsoft.com/library/ms172192)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Variance for Func and Action Generic Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Combine Delegates (Multicast Delegates)<ept id="p1">](../../../../csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>