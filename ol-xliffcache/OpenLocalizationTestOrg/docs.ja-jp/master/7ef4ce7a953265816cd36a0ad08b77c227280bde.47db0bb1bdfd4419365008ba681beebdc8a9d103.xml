{"content":"---\ntitle: Using .NET Core SDK and tools in Continuous Integration (CI) | Microsoft Docs\ndescription: Using .NET Core SDK and tools in Continuous Integration (CI)\nkeywords: .NET, .NET Core\nauthor: blackdwarf\nms.author: mairaw\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-cli\nms.devlang: dotnet\nms.assetid: 0d6e1e34-277c-4aaf-9880-3ebf81023857\n---\n\n# Using .NET Core SDK and tools in Continuous Integration (CI)\n\n## Overview\nThis document outlines the usage of .NET Core SDK and its tools on the build server. In general, on a CI build server, \nyou want to automate the installation in some way. The automation, ideally, should not require administrative \nprivileges if at all possible. \n\nFor SaaS CI solutions, there are several options. This document will cover two very popular ones, [TravisCI](https://travis-ci.org/) and \n[AppVeyor](https://www.appveyor.com/). There are, of course, many other services out there, but the installation and \nusage mechanisms should be similar.\n\n## Installation options for CI build servers\n\n## Using the native installers\nIf using installers that require administrative privileges is not something that presents a problem, native installers for \neach platform can be used to set up the build server. This approach, especially in the case of Linux build servers, has \none advantage which is automatic installing of dependencies needed for the SDK to run. The native installers will also \ninstall a system-wide version of the SDK, which may be desired; if it's not, you should look into the \n[installer script usage](#using-the-installer-script) outlined below. \n\nUsing this approach is simple. For Linux, there is a choice of using a feed-based package manager, such as `apt-get` for \nUbuntu or `yum` for CentOS, or using the packages themselves (that is, DEB or RPM). The former would require setting up the \nfeed that contains the packages.\n\nFor Windows platforms, you can use the MSI. \n\nAll of the binaries can be found on the [.NET Core installation guide](https://aka.ms/dotnetcoregs) which points to the \nlatest stable releases. If you wish to use newer (and potentially unstable) releases or the latest, you can use the \nlinks from the [CLI repo](https://github.com/dotnet/cli). \n\n## Using the installer script\nUsing the installer script allows for non-administrative installation on your build server. It also allows a very easy \nautomation. The script itself will download the ZIP/tarball files needed and will unpack them; it will also add the \ninstall location on the local machine to the PATH so that the tools become available for invocation immediately \npost-install. \n\nThe installer script can easily be automated at the start of the build to fetch and install the needed version of the SDK. \nThe \"needed version\" is whatever version application being built requires. You can choose the installation path so you \ncan install the SDK locally and then clean up after the build completes. This brings additional encapsulation and \natomicity to the build process. \n\nThe installation script reference can be found in the [dotnet-install](dotnet-install-script.md) document. \n\n### Dealing with the dependencies\nUsing the installer script means that the native dependencies are not installed automatically and that you have to \ninstall them if the operating system you are installing on already doesn't have them. You can see the list of prerequisites \nin the [CLI repo](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md). \n\n## CI services setup examples\nThe below sections show examples of configurations using the mentioned CI SaaS offerings. \n\n### TravisCI\n\nThe [travis-ci](https://travis-ci.org/) can be configured to install the .NET Core SDK using the `csharp` language and the `dotnet` key.\n\nJust use:\n\n```yaml\ndotnet: 1.0.0-preview2-003121\n```\n\nTravis can run both `osx` (OS X 10.11) and `linux` ( Ubuntu 14.04 ) job in a build matrix, see [example .travis.yml](https://github.com/dotnet/docs/blob/master/.travis.yml) \nfor more information.\n\n### AppVeyor\n\nThe [appveyor.com ci](https://www.appveyor.com/) has .NET Core SDK 1.0.1 already installed in the build worker image `Visual Studio 2017`.\n\nJust use:\n\n```yaml\nos: Visual Studio 2017\n```\n\nIt's possible to install a specific version of .NET Core SDK, see [example appveyor.yml](https://github.com/dotnet/docs/blob/master/appveyor.yml) \nfor more info. \n\nIn the example, the .NET Core SDK binaries are downloaded, unzipped in a subdirectory and added to `PATH` env var.\n\nA build matrix can be added to run integration tests with multiple version of \nthe .NET Core SDK.\n\n```yaml\nenvironment:\n  matrix:\n    - CLI_VERSION: 1.0.0-preview2-003121\n    - CLI_VERSION: Latest\n\ninstall:\n  # .NET Core SDK binaries\n  - ps: $url = \"https://dotnetcli.blob.core.windows.net/dotnet/preview/Binaries/$($env:CLI_VERSION)/dotnet-dev-win-x64.$($env:CLI_VERSION.ToLower()).zip\"\n  # follow normal installation from binaries\n```","nodes":[{"pos":[11,88],"content":"Using .NET Core SDK and tools in Continuous Integration (CI) | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"Using .NET Core SDK and tools in Continuous Integration (CI) | Microsoft Docs","pos":[0,77]}]},{"pos":[102,162],"content":"Using .NET Core SDK and tools in Continuous Integration (CI)","needQuote":true,"needEscape":true,"nodes":[{"content":"Using .NET Core SDK and tools in Continuous Integration (CI)","pos":[0,60]}]},{"pos":[173,188],"content":".NET, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"pos":[384,444],"content":"Using .NET Core SDK and tools in Continuous Integration (CI)","linkify":"Using .NET Core SDK and tools in Continuous Integration (CI)","nodes":[{"content":"Using .NET Core SDK and tools in Continuous Integration (CI)","pos":[0,60]}]},{"pos":[449,457],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"content":"This document outlines the usage of .NET Core SDK and its tools on the build server.","pos":[458,542]},{"content":"In general, on a CI build server, you want to automate the installation in some way.","pos":[543,628],"source":" In general, on a CI build server, \nyou want to automate the installation in some way."},{"content":"The automation, ideally, should not require administrative privileges if at all possible.","pos":[629,719],"source":" The automation, ideally, should not require administrative \nprivileges if at all possible."},{"content":"For SaaS CI solutions, there are several options.","pos":[722,771]},{"content":"This document will cover two very popular ones, <bpt id=\"p1\">[</bpt>TravisCI<ept id=\"p1\">](https://travis-ci.org/)</ept> and <bpt id=\"p2\">[</bpt>AppVeyor<ept id=\"p2\">](https://www.appveyor.com/)</ept>.","pos":[772,898],"source":" This document will cover two very popular ones, [TravisCI](https://travis-ci.org/) and \n[AppVeyor](https://www.appveyor.com/)."},{"content":"There are, of course, many other services out there, but the installation and usage mechanisms should be similar.","pos":[899,1013],"source":" There are, of course, many other services out there, but the installation and \nusage mechanisms should be similar."},{"pos":[1018,1059],"content":"Installation options for CI build servers","linkify":"Installation options for CI build servers","nodes":[{"content":"Installation options for CI build servers","pos":[0,41]}]},{"pos":[1064,1091],"content":"Using the native installers","linkify":"Using the native installers","nodes":[{"content":"Using the native installers","pos":[0,27]}]},{"content":"If using installers that require administrative privileges is not something that presents a problem, native installers for each platform can be used to set up the build server.","pos":[1092,1269],"source":"If using installers that require administrative privileges is not something that presents a problem, native installers for \neach platform can be used to set up the build server."},{"content":"This approach, especially in the case of Linux build servers, has one advantage which is automatic installing of dependencies needed for the SDK to run.","pos":[1270,1423],"source":" This approach, especially in the case of Linux build servers, has \none advantage which is automatic installing of dependencies needed for the SDK to run."},{"content":"The native installers will also install a system-wide version of the SDK, which may be desired; if it's not, you should look into the <bpt id=\"p1\">[</bpt>installer script usage<ept id=\"p1\">](#using-the-installer-script)</ept> outlined below.","pos":[1424,1629],"source":" The native installers will also \ninstall a system-wide version of the SDK, which may be desired; if it's not, you should look into the \n[installer script usage](#using-the-installer-script) outlined below."},{"content":"Using this approach is simple.","pos":[1632,1662]},{"content":"For Linux, there is a choice of using a feed-based package manager, such as <ph id=\"ph1\">`apt-get`</ph> for Ubuntu or <ph id=\"ph2\">`yum`</ph> for CentOS, or using the packages themselves (that is, DEB or RPM).","pos":[1663,1837],"source":" For Linux, there is a choice of using a feed-based package manager, such as `apt-get` for \nUbuntu or `yum` for CentOS, or using the packages themselves (that is, DEB or RPM)."},{"content":"The former would require setting up the feed that contains the packages.","pos":[1838,1911],"source":" The former would require setting up the \nfeed that contains the packages."},{"content":"For Windows platforms, you can use the MSI.","pos":[1913,1956]},{"content":"All of the binaries can be found on the <bpt id=\"p1\">[</bpt>.NET Core installation guide<ept id=\"p1\">](https://aka.ms/dotnetcoregs)</ept> which points to the latest stable releases.","pos":[1959,2103],"source":"All of the binaries can be found on the [.NET Core installation guide](https://aka.ms/dotnetcoregs) which points to the \nlatest stable releases."},{"content":"If you wish to use newer (and potentially unstable) releases or the latest, you can use the links from the <bpt id=\"p1\">[</bpt>CLI repo<ept id=\"p1\">](https://github.com/dotnet/cli)</ept>.","pos":[2104,2254],"source":" If you wish to use newer (and potentially unstable) releases or the latest, you can use the \nlinks from the [CLI repo](https://github.com/dotnet/cli)."},{"pos":[2260,2286],"content":"Using the installer script","linkify":"Using the installer script","nodes":[{"content":"Using the installer script","pos":[0,26]}]},{"content":"Using the installer script allows for non-administrative installation on your build server.","pos":[2287,2378]},{"content":"It also allows a very easy automation.","pos":[2379,2418],"source":" It also allows a very easy \nautomation."},{"content":"The script itself will download the ZIP/tarball files needed and will unpack them; it will also add the install location on the local machine to the PATH so that the tools become available for invocation immediately post-install.","pos":[2419,2650],"source":" The script itself will download the ZIP/tarball files needed and will unpack them; it will also add the \ninstall location on the local machine to the PATH so that the tools become available for invocation immediately \npost-install."},{"content":"The installer script can easily be automated at the start of the build to fetch and install the needed version of the SDK.","pos":[2653,2775]},{"content":"The \"needed version\" is whatever version application being built requires.","pos":[2776,2851],"source":" \nThe \"needed version\" is whatever version application being built requires."},{"content":"You can choose the installation path so you can install the SDK locally and then clean up after the build completes.","pos":[2852,2969],"source":" You can choose the installation path so you \ncan install the SDK locally and then clean up after the build completes."},{"content":"This brings additional encapsulation and atomicity to the build process.","pos":[2970,3043],"source":" This brings additional encapsulation and \natomicity to the build process."},{"pos":[3046,3152],"content":"The installation script reference can be found in the <bpt id=\"p1\">[</bpt>dotnet-install<ept id=\"p1\">](dotnet-install-script.md)</ept> document.","source":"The installation script reference can be found in the [dotnet-install](dotnet-install-script.md) document."},{"pos":[3159,3188],"content":"Dealing with the dependencies","linkify":"Dealing with the dependencies","nodes":[{"content":"Dealing with the dependencies","pos":[0,29]}]},{"content":"Using the installer script means that the native dependencies are not installed automatically and that you have to install them if the operating system you are installing on already doesn't have them.","pos":[3189,3390],"source":"Using the installer script means that the native dependencies are not installed automatically and that you have to \ninstall them if the operating system you are installing on already doesn't have them."},{"content":"You can see the list of prerequisites in the <bpt id=\"p1\">[</bpt>CLI repo<ept id=\"p1\">](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md)</ept>.","pos":[3391,3517],"source":" You can see the list of prerequisites \nin the [CLI repo](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md)."},{"pos":[3523,3549],"content":"CI services setup examples","linkify":"CI services setup examples","nodes":[{"content":"CI services setup examples","pos":[0,26]}]},{"content":"The below sections show examples of configurations using the mentioned CI SaaS offerings.","pos":[3550,3639]},{"pos":[3646,3654],"content":"TravisCI","linkify":"TravisCI","nodes":[{"content":"TravisCI","pos":[0,8]}]},{"pos":[3656,3792],"content":"The <bpt id=\"p1\">[</bpt>travis-ci<ept id=\"p1\">](https://travis-ci.org/)</ept> can be configured to install the .NET Core SDK using the <ph id=\"ph1\">`csharp`</ph> language and the <ph id=\"ph2\">`dotnet`</ph> key.","source":"The [travis-ci](https://travis-ci.org/) can be configured to install the .NET Core SDK using the `csharp` language and the `dotnet` key."},{"content":"Just use:","pos":[3794,3803]},{"pos":[3848,4043],"content":"Travis can run both <ph id=\"ph1\">`osx`</ph> (OS X 10.11) and <ph id=\"ph2\">`linux`</ph> ( Ubuntu 14.04 ) job in a build matrix, see <bpt id=\"p1\">[</bpt>example .travis.yml<ept id=\"p1\">](https://github.com/dotnet/docs/blob/master/.travis.yml)</ept> for more information.","source":"Travis can run both `osx` (OS X 10.11) and `linux` ( Ubuntu 14.04 ) job in a build matrix, see [example .travis.yml](https://github.com/dotnet/docs/blob/master/.travis.yml) \nfor more information."},{"pos":[4049,4057],"content":"AppVeyor","linkify":"AppVeyor","nodes":[{"content":"AppVeyor","pos":[0,8]}]},{"pos":[4059,4197],"content":"The <bpt id=\"p1\">[</bpt>appveyor.com ci<ept id=\"p1\">](https://www.appveyor.com/)</ept> has .NET Core SDK 1.0.1 already installed in the build worker image <ph id=\"ph1\">`Visual Studio 2017`</ph>.","source":"The [appveyor.com ci](https://www.appveyor.com/) has .NET Core SDK 1.0.1 already installed in the build worker image `Visual Studio 2017`."},{"content":"Just use:","pos":[4199,4208]},{"pos":[4246,4407],"content":"It's possible to install a specific version of .NET Core SDK, see <bpt id=\"p1\">[</bpt>example appveyor.yml<ept id=\"p1\">](https://github.com/dotnet/docs/blob/master/appveyor.yml)</ept> for more info.","source":"It's possible to install a specific version of .NET Core SDK, see [example appveyor.yml](https://github.com/dotnet/docs/blob/master/appveyor.yml) \nfor more info."},{"pos":[4410,4524],"content":"In the example, the .NET Core SDK binaries are downloaded, unzipped in a subdirectory and added to <ph id=\"ph1\">`PATH`</ph> env var.","source":"In the example, the .NET Core SDK binaries are downloaded, unzipped in a subdirectory and added to `PATH` env var."},{"pos":[4526,4623],"content":"A build matrix can be added to run integration tests with multiple version of the .NET Core SDK.","source":"A build matrix can be added to run integration tests with multiple version of \nthe .NET Core SDK."}]}