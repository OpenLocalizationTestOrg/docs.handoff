{"content":"---\ntitle: \"explicit (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"explicit_CSharpKeyword\"\n  - \"explicit\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"explicit keyword [C#]\"\nms.assetid: cfb8f42a-e411-4db2-af9b-796b05644846\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# explicit (C# Reference)\nThe `explicit` keyword declares a user-defined type conversion operator that must be invoked with a cast. For example, this operator converts from a class called Fahrenheit to a class called Celsius:  \n  \n [!code-cs[csrefKeywordsConversion#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_1.cs)]  \n  \n This conversion operator can be invoked like this:  \n  \n [!code-cs[csrefKeywordsConversion#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_2.cs)]  \n  \n The conversion operator converts from a source type to a target type. The source type provides the conversion operator. Unlike implicit conversion, explicit conversion operators must be invoked by means of a cast. If a conversion operation can cause exceptions or lose information, you should mark it `explicit`. This prevents the compiler from silently invoking the conversion operation with possibly unforeseen consequences.  \n  \n Omitting the cast results in compile-time error CS0266.  \n  \n For more information, see [Using Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/using-conversion-operators.md).  \n  \n## Example  \n The following example provides a `Fahrenheit` and a `Celsius` class, each of which provides an explicit conversion operator to the other class.  \n  \n [!code-cs[csrefKeywordsConversion#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_3.cs)]  \n  \n## Example  \n The following example defines a struct, `Digit`, that represents a single decimal digit. An operator is defined for conversions from `byte` to `Digit`, but because not all bytes can be converted to a `Digit`, the conversion is explicit.  \n  \n [!code-cs[csrefKeywordsConversion#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_4.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [implicit](../../../csharp/language-reference/keywords/implicit.md)   \n [operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md)   \n [How to: Implement User-Defined Conversions Between Structs](../../../csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md)   \n [Chained user-defined explicit conversions in C#](http://go.microsoft.com/fwlink/?LinkId=112384)","nodes":[{"pos":[4,576],"nodes":[{"content":"explicit (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,40],"content":"explicit (C# Reference) | Microsoft Docs","nodes":[{"content":"explicit (C# Reference) | Microsoft Docs","pos":[0,40]}]}],"pos":[6,49],"yaml":true}],"content":"title: \"explicit (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"explicit_CSharpKeyword\"\n  - \"explicit\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"explicit keyword [C#]\"\nms.assetid: cfb8f42a-e411-4db2-af9b-796b05644846\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[583,606],"content":"explicit (C# Reference)","linkify":"explicit (C# Reference)","nodes":[{"content":"explicit (C# Reference)","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">`explicit`</ph> keyword declares a user-defined type conversion operator that must be invoked with a cast.","pos":[607,712],"source":"The `explicit` keyword declares a user-defined type conversion operator that must be invoked with a cast."},{"content":"For example, this operator converts from a class called Fahrenheit to a class called Celsius:","pos":[713,806]},{"pos":[813,928],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsConversion#2<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsConversion#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_1.cs)]"},{"content":"This conversion operator can be invoked like this:","pos":[935,985]},{"pos":[992,1107],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsConversion#3<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsConversion#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_2.cs)]"},{"content":"The conversion operator converts from a source type to a target type.","pos":[1114,1183]},{"content":"The source type provides the conversion operator.","pos":[1184,1233]},{"content":"Unlike implicit conversion, explicit conversion operators must be invoked by means of a cast.","pos":[1234,1327]},{"content":"If a conversion operation can cause exceptions or lose information, you should mark it <ph id=\"ph1\">`explicit`</ph>.","pos":[1328,1426],"source":" If a conversion operation can cause exceptions or lose information, you should mark it `explicit`."},{"content":"This prevents the compiler from silently invoking the conversion operation with possibly unforeseen consequences.","pos":[1427,1540]},{"content":"Omitting the cast results in compile-time error CS0266.","pos":[1547,1602]},{"pos":[1609,1762],"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Conversion Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/using-conversion-operators.md)</ept>.","source":"For more information, see [Using Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/using-conversion-operators.md)."},{"pos":[1771,1778],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1782,1925],"content":"The following example provides a <ph id=\"ph1\">`Fahrenheit`</ph> and a <ph id=\"ph2\">`Celsius`</ph> class, each of which provides an explicit conversion operator to the other class.","source":"The following example provides a `Fahrenheit` and a `Celsius` class, each of which provides an explicit conversion operator to the other class."},{"pos":[1932,2047],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsConversion#1<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsConversion#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_3.cs)]"},{"pos":[2056,2063],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example defines a struct, <ph id=\"ph1\">`Digit`</ph>, that represents a single decimal digit.","pos":[2067,2155],"source":"The following example defines a struct, `Digit`, that represents a single decimal digit."},{"content":"An operator is defined for conversions from <ph id=\"ph1\">`byte`</ph> to <ph id=\"ph2\">`Digit`</ph>, but because not all bytes can be converted to a <ph id=\"ph3\">`Digit`</ph>, the conversion is explicit.","pos":[2156,2303],"source":" An operator is defined for conversions from `byte` to `Digit`, but because not all bytes can be converted to a `Digit`, the conversion is explicit."},{"pos":[2310,2425],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsConversion#4<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsConversion#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/explicit_4.cs)]"},{"pos":[2434,2459],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2573,2581],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2585,2645],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2649,2716],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2720,2788],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>implicit<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit.md)</ept><ph id=\"ph1\"> </ph>","pos":[2792,2860],"source":"[implicit](../../../csharp/language-reference/keywords/implicit.md) "},{"content":"<bpt id=\"p1\">[</bpt>operator (C# Reference)<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2864,2947],"source":"[operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Implement User-Defined Conversions Between Structs<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md)</ept><ph id=\"ph1\"> </ph>","pos":[2951,3141],"source":"[How to: Implement User-Defined Conversions Between Structs](../../../csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md) "},{"content":"<bpt id=\"p1\">[</bpt>Chained user-defined explicit conversions in C#<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=112384)</ept>","pos":[3145,3241],"source":"[Chained user-defined explicit conversions in C#](http://go.microsoft.com/fwlink/?LinkId=112384)"}]}