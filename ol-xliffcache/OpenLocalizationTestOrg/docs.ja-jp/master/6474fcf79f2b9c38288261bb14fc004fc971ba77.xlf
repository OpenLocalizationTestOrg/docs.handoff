<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6474fcf79f2b9c38288261bb14fc004fc971ba77</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbage-collection\latency.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86392c6dc9ad4086b11c37c1b568b0dbbac40b5d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cd43683d27de573495dbf36adeea634df450cb2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Latency Modes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Latency Modes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To reclaim objects, the garbage collector must stop all the executing threads in an application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In some situations, such as when an application retrieves data or displays content, a full garbage collection can occur at a critical time and impede performance.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can adjust the intrusiveness of the garbage collector by setting the <ph id="ph1">&lt;xref:System.Runtime.GCSettings.LatencyMode%2A?displayProperty=fullName&gt;</ph> property to one of the <ph id="ph2">&lt;xref:System.Runtime.GCLatencyMode?displayProperty=fullName&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Latency refers to the time that the garbage collector intrudes in your application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>During low latency periods, the garbage collector is more conservative and less intrusive in reclaiming objects.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.GCLatencyMode?displayProperty=fullName&gt;</ph> enumeration provides two low latency settings:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.GCLatencyMode&gt;</ph> suppresses generation 2 collections and performs only generation 0 and 1 collections.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It can be used only for short periods of time.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Over longer periods, if the system is under memory pressure, the garbage collector will trigger a collection, which can briefly pause the application and disrupt a time-critical operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This setting is available only for workstation garbage collection.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.GCLatencyMode&gt;</ph> suppresses foreground generation 2 collections and performs only generation 0, 1, and background generation 2 collections.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It can be used for longer periods of time, and is available for both workstation and server garbage collection.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This setting cannot be used if <bpt id="p1">[</bpt>concurrent garbage collection<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md)</ept> is disabled.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>During low latency periods, generation 2 collections are suppressed unless the following occurs:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The system receives a low memory notification from the operating system.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Your application code induces a collection by calling the <ph id="ph1">&lt;xref:System.GC.Collect%2A?displayProperty=fullName&gt;</ph> method and specifying 2 for the <ph id="ph2">`generation`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following table lists the application scenarios for using the <ph id="ph1">&lt;xref:System.Runtime.GCLatencyMode&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Latency mode</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Application scenarios</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For applications that have no UI or server-side operations.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is the default mode when <bpt id="p1">[</bpt>concurrent garbage collection<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md)</ept> is disabled.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For most applications that have a UI.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is the default mode when <bpt id="p1">[</bpt>concurrent garbage collection<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md)</ept> is enabled.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For applications that have short-term, time-sensitive operations during which interruptions from the garbage collector could be disruptive.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, applications that do animation rendering or data acquisition functions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For applications that have time-sensitive operations for a contained but potentially longer duration of time during which interruptions from the garbage collector could be disruptive.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, applications that need quick response times as market data changes during trading hours.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This mode results in a larger managed heap size than other modes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because it does not compact the managed heap, higher fragmentation is possible.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Ensure that sufficient memory is available.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Guidelines for Using Low Latency</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">&lt;xref:System.Runtime.GCLatencyMode&gt;</ph> mode, consider the following guidelines:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Keep the period of time in low latency as short as possible.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Avoid allocating high amounts of memory during low latency periods.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Low memory notifications can occur because garbage collection reclaims fewer objects.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>While in the low latency mode, minimize the number of allocations you make, in particular allocations onto the Large Object Heap and pinned objects.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Be aware of threads that could be allocating.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Runtime.GCSettings.LatencyMode%2A&gt;</ph> property setting is process-wide, you could generate an <ph id="ph2">&lt;xref:System.OutOfMemoryException&gt;</ph> on any thread that may be allocating.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Wrap the low latency code in constrained execution regions (for more information, see <bpt id="p1">[</bpt>Constrained Execution Regions<ept id="p1">](../../../docs/framework/performance/constrained-execution-regions.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can force generation 2 collections during a low latency period by calling the <ph id="ph1">&lt;xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Induced Collections<ept id="p1">](../../../docs/standard/garbage-collection/induced.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Garbage Collection<ept id="p1">](../../../docs/standard/garbage-collection/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>