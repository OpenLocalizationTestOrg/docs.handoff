{"content":"---\ntitle: \"invalidVariant MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"MDAs (managed debugging assistants), invalid variant\"\n  - \"VARIANT type errors\"\n  - \"InvalidVariant MDA\"\n  - \"invalid VARIANT types\"\n  - \"managed debugging assistants (MDAs), invalid variant\"\nms.assetid: d273e070-d1b1-4a53-a9c7-7af837b04a3d\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# invalidVariant MDA\nThe `invalidVariant` managed debugging assistant (MDA) is activated when an invalid `VARIANT` structure is encountered during a call from native or unmanaged code to managed code.  \n  \n## Symptoms  \n Unexpected behavior during a transition between native and managed code involving the marshaling of a `VARIANT` to an object.  \n  \n## Cause  \n Native code is passing a malformed `VARIANT` structure to managed code.  The runtime attempts to marshal this `VARIANT` to an object and activates the MDA if the `VARIANT` is not valid. Examples of invalid `VARIANT`S include a `VARIANT` with `VARTYPE` VT_EMPTY &#124; VT_BYREF or a `VARIANT` with `VARTYPE` VT_VARIANT.  \n  \n## Resolution  \n The native or unmanaged code passing the `VARIANT` must ensure that the `VARIANT` is correctly formed and initialized.  \n  \n## Effect on the Runtime  \n The MDA has no effect on the runtime's behavior.  \n  \n## Output  \n An MDA message indicating that the runtime detected an invalid `VARIANT` passed to managed code by an unmanaged module.  \n  \n## Configuration  \n  \n```xml  \n<mdaConfig>  \n  <assistants>  \n    <invalidVariant />  \n  </assistants>  \n</mdaConfig>  \n```  \n  \n## See also\n\n- <xref:System.Runtime.InteropServices.MarshalAsAttribute>\n- [Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)\n- [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)\n","nodes":[{"pos":[4,358],"embed":true,"restype":"x-metadata","content":"title: \"invalidVariant MDA\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"MDAs (managed debugging assistants), invalid variant\"\n  - \"VARIANT type errors\"\n  - \"InvalidVariant MDA\"\n  - \"invalid VARIANT types\"\n  - \"managed debugging assistants (MDAs), invalid variant\"\nms.assetid: d273e070-d1b1-4a53-a9c7-7af837b04a3d\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"invalidVariant MDA","nodes":[{"pos":[0,18],"content":"invalidVariant MDA","nodes":[{"content":"invalidVariant MDA","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[365,383],"content":"invalidVariant MDA","linkify":"invalidVariant MDA","nodes":[{"content":"invalidVariant MDA","pos":[0,18]}]},{"pos":[384,563],"content":"The <ph id=\"ph1\">`invalidVariant`</ph> managed debugging assistant (MDA) is activated when an invalid <ph id=\"ph2\">`VARIANT`</ph> structure is encountered during a call from native or unmanaged code to managed code.","source":"The `invalidVariant` managed debugging assistant (MDA) is activated when an invalid `VARIANT` structure is encountered during a call from native or unmanaged code to managed code."},{"pos":[572,580],"content":"Symptoms","linkify":"Symptoms","nodes":[{"content":"Symptoms","pos":[0,8]}]},{"pos":[584,709],"content":"Unexpected behavior during a transition between native and managed code involving the marshaling of a <ph id=\"ph1\">`VARIANT`</ph> to an object.","source":"Unexpected behavior during a transition between native and managed code involving the marshaling of a `VARIANT` to an object."},{"pos":[718,723],"content":"Cause","linkify":"Cause","nodes":[{"content":"Cause","pos":[0,5]}]},{"content":"Native code is passing a malformed <ph id=\"ph1\">`VARIANT`</ph> structure to managed code.","pos":[727,798],"source":"Native code is passing a malformed `VARIANT` structure to managed code."},{"content":"The runtime attempts to marshal this <ph id=\"ph1\">`VARIANT`</ph> to an object and activates the MDA if the <ph id=\"ph2\">`VARIANT`</ph> is not valid.","pos":[800,912],"source":"  The runtime attempts to marshal this `VARIANT` to an object and activates the MDA if the `VARIANT` is not valid."},{"content":"Examples of invalid <ph id=\"ph1\">`VARIANT`</ph>S include a <ph id=\"ph2\">`VARIANT`</ph> with <ph id=\"ph3\">`VARTYPE`</ph> VT_EMPTY &amp;#124; VT_BYREF or a <ph id=\"ph4\">`VARIANT`</ph> with <ph id=\"ph5\">`VARTYPE`</ph> VT_VARIANT.","pos":[913,1045],"source":" Examples of invalid `VARIANT`S include a `VARIANT` with `VARTYPE` VT_EMPTY &#124; VT_BYREF or a `VARIANT` with `VARTYPE` VT_VARIANT."},{"pos":[1054,1064],"content":"Resolution","linkify":"Resolution","nodes":[{"content":"Resolution","pos":[0,10]}]},{"pos":[1068,1186],"content":"The native or unmanaged code passing the <ph id=\"ph1\">`VARIANT`</ph> must ensure that the <ph id=\"ph2\">`VARIANT`</ph> is correctly formed and initialized.","source":"The native or unmanaged code passing the `VARIANT` must ensure that the `VARIANT` is correctly formed and initialized."},{"pos":[1195,1216],"content":"Effect on the Runtime","linkify":"Effect on the Runtime","nodes":[{"content":"Effect on the Runtime","pos":[0,21]}]},{"content":"The MDA has no effect on the runtime's behavior.","pos":[1220,1268]},{"pos":[1277,1283],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[1287,1406],"content":"An MDA message indicating that the runtime detected an invalid <ph id=\"ph1\">`VARIANT`</ph> passed to managed code by an unmanaged module.","source":"An MDA message indicating that the runtime detected an invalid `VARIANT` passed to managed code by an unmanaged module."},{"pos":[1415,1428],"content":"Configuration","linkify":"Configuration","nodes":[{"content":"Configuration","pos":[0,13]}]},{"pos":[1544,1552],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1615,1768],"content":"<bpt id=\"p1\">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept>","source":"[Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)"},{"pos":[1771,1846],"content":"<bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](../../../docs/framework/interop/interop-marshaling.md)</ept>","source":"[Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)"}]}