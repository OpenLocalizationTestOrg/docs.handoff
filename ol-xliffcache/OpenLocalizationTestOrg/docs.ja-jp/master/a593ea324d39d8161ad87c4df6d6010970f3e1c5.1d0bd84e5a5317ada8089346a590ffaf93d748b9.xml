{"content":"---\ntitle: \"Using Streams on the Network\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"requesting data from Internet, streams\"\n  - \"Networking\"\n  - \"response to Internet request, streams\"\n  - \"network resources, stream capabilities\"\n  - \"receiving data, stream capabilities\"\n  - \"Network Resources\"\n  - \"sending data, stream capabilities\"\n  - \"downloading Internet resources, streams\"\n  - \"streams, capabilities\"\n  - \"Internet, streams\"\n  - \"streams\"\nms.assetid: 02b05fba-7235-45ce-94e5-060436ee0875\n---\n# Using Streams on the Network\nNetwork resources are represented in the .NET Framework as streams. By treating streams generically, the .NET Framework offers the following capabilities:  \n  \n-   A common way to send and receive Web data. Whatever the actual contents of the file — HTML, XML, or anything else — your application will use <xref:System.IO.Stream.Write%2A?displayProperty=nameWithType> and <xref:System.IO.Stream.Read%2A?displayProperty=nameWithType> to send and receive data.  \n  \n-   Compatibility with streams across the .NET Framework. Streams are used throughout the .NET Framework, which has a rich infrastructure for handling them. For example, you can modify an application that reads XML data from a <xref:System.IO.FileStream> to read data from a <xref:System.Net.Sockets.NetworkStream> instead by changing only the few lines of code that initialize the stream. The major differences between the **NetworkStream** class and other streams are that **NetworkStream** is not seekable, the <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> property always returns **false**, and the <xref:System.Net.Sockets.NetworkStream.Seek%2A> and <xref:System.Net.Sockets.NetworkStream.Position%2A> methods throw a <xref:System.NotSupportedException>.  \n  \n-   Processing of data as it arrives. Streams provide access to data as it arrives from the network, rather than forcing your application to wait for an entire data set to be downloaded.  \n  \n The <xref:System.Net.Sockets> namespace contains a **NetworkStream** class that implements the <xref:System.IO.Stream> class specifically for use with network resources. Classes in the <xref:System.Net.Sockets> namespace use the **NetworkStream** class to represent streams.  \n  \n To send data to the network using the returned stream, call <xref:System.Net.WebRequest.GetRequestStream%2A> on your <xref:System.Net.WebRequest>. The **WebRequest** will send request headers to the server; then you can send data to the network resource by calling the <xref:System.IO.Stream.BeginWrite%2A>, <xref:System.IO.Stream.EndWrite%2A>, or <xref:System.IO.Stream.Write%2A> method on the returned stream. Some protocols, such as HTTP, may require you to set protocol-specific properties before sending data. The following code example shows how to set HTTP-specific properties for sending data. It assumes that the variable `sendData` contains the data to send and that the variable `sendLength` is the number of bytes of data to send.  \n  \n```csharp  \nHttpWebRequest request =   \n   (HttpWebRequest) WebRequest.Create(\"http://www.contoso.com/\");  \nrequest.Method = \"POST\";  \nrequest.ContentLength = sendLength;  \ntry  \n{  \n   Stream sendStream = request.GetRequestStream();  \n   sendStream.Write(sendData,0,sendLength);  \n   sendStream.Close();  \n}  \ncatch  \n{  \n   // Handle errors . . .  \n}  \n```  \n  \n```vb  \nDim request As HttpWebRequest = _  \n   CType(WebRequest.Create(\"http://www.contoso.com/\"), HttpWebRequest)  \nrequest.Method = \"POST\"  \nrequest.ContentLength = sendLength  \nTry  \n   Dim sendStream As Stream = request.GetRequestStream()  \n   sendStream.Write(sendData, 0, sendLength)  \n   sendStream.Close()  \nCatch  \n   ' Handle errors . . .  \nEnd Try  \n```  \n  \n To receive data from the network, call <xref:System.Net.WebResponse.GetResponseStream%2A> on your <xref:System.Net.WebResponse>. You can then read data from the network resource by calling the <xref:System.IO.Stream.BeginRead%2A>, <xref:System.IO.Stream.EndRead%2A>, or <xref:System.IO.Stream.Read%2A> method on the returned stream.  \n  \n When using streams from network resources, keep in mind the following points:  \n  \n-   The **CanSeek** property always returns **false** since the **NetworkStream** class cannot change position in the stream. The **Seek** and **Position** methods throw a **NotSupportedException**.  \n  \n-   When you use **WebRequest** and **WebResponse**, stream instances created by calling **GetResponseStream** are read-only and stream instances created by calling **GetRequestStream** are write-only.  \n  \n-   Use the <xref:System.IO.StreamReader> class to make encoding easier. The following code example uses a **StreamReader** to read an ASCII-encoded stream from a **WebResponse** (the example does not show creating the request).  \n  \n-   The call to **GetResponse** can block if network resources are not available. You should consider using an asynchronous request with the <xref:System.Net.WebRequest.BeginGetResponse%2A> and <xref:System.Net.WebRequest.EndGetResponse%2A> methods.  \n  \n-   The call to **GetRequestStream** can block while the connection to the server is created. You should consider using an asynchronous request for the stream with the <xref:System.Net.WebRequest.BeginGetRequestStream%2A> and <xref:System.Net.WebRequest.EndGetRequestStream%2A> methods.  \n  \n```csharp  \n// Create a response object.  \nWebResponse response = request.GetResponse();  \n// Get a readable stream from the server.  \nStreamReader sr =   \n   new StreamReader(response.GetResponseStream(), Encoding.ASCII);  \n// Use the stream. Remember when you are through with the stream to close it.  \nsr.Close();  \n```  \n  \n```vb  \n' Create a response object.  \nDim response As WebResponse = request.GetResponse()  \n' Get a readable stream from the server.  \nDim sr As _   \n   New StreamReader(response.GetResponseStream(), Encoding.ASCII)  \n' Use the stream. Remember when you are through with the stream to close it.  \nsr.Close()  \n```  \n  \n## See also\n\n- [How to: Request Data Using the WebRequest Class](../../../docs/framework/network-programming/how-to-request-data-using-the-webrequest-class.md)\n- [Requesting Data](../../../docs/framework/network-programming/requesting-data.md)\n","nodes":[{"pos":[4,537],"embed":true,"restype":"x-metadata","content":"title: \"Using Streams on the Network\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"requesting data from Internet, streams\"\n  - \"Networking\"\n  - \"response to Internet request, streams\"\n  - \"network resources, stream capabilities\"\n  - \"receiving data, stream capabilities\"\n  - \"Network Resources\"\n  - \"sending data, stream capabilities\"\n  - \"downloading Internet resources, streams\"\n  - \"streams, capabilities\"\n  - \"Internet, streams\"\n  - \"streams\"\nms.assetid: 02b05fba-7235-45ce-94e5-060436ee0875","nodes":[{"content":"Using Streams on the Network","nodes":[{"pos":[0,28],"content":"Using Streams on the Network","nodes":[{"content":"Using Streams on the Network","pos":[0,28]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[544,572],"content":"Using Streams on the Network","linkify":"Using Streams on the Network","nodes":[{"content":"Using Streams on the Network","pos":[0,28]}]},{"content":"Network resources are represented in the .NET Framework as streams.","pos":[573,640]},{"content":"By treating streams generically, the .NET Framework offers the following capabilities:","pos":[641,727]},{"content":"A common way to send and receive Web data.","pos":[737,779]},{"content":"Whatever the actual contents of the file — HTML, XML, or anything else — your application will use <ph id=\"ph1\">&lt;xref:System.IO.Stream.Write%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.Read%2A?displayProperty=nameWithType&gt;</ph> to send and receive data.","pos":[780,1031],"source":" Whatever the actual contents of the file — HTML, XML, or anything else — your application will use <xref:System.IO.Stream.Write%2A?displayProperty=nameWithType> and <xref:System.IO.Stream.Read%2A?displayProperty=nameWithType> to send and receive data."},{"content":"Compatibility with streams across the .NET Framework.","pos":[1041,1094]},{"content":"Streams are used throughout the .NET Framework, which has a rich infrastructure for handling them.","pos":[1095,1193]},{"content":"For example, you can modify an application that reads XML data from a <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> to read data from a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> instead by changing only the few lines of code that initialize the stream.","pos":[1194,1426],"source":" For example, you can modify an application that reads XML data from a <xref:System.IO.FileStream> to read data from a <xref:System.Net.Sockets.NetworkStream> instead by changing only the few lines of code that initialize the stream."},{"content":"The major differences between the <bpt id=\"p1\">**</bpt>NetworkStream<ept id=\"p1\">**</ept> class and other streams are that <bpt id=\"p2\">**</bpt>NetworkStream<ept id=\"p2\">**</ept> is not seekable, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> property always returns <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept>, and the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph> methods throw a <ph id=\"ph4\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[1427,1801],"source":" The major differences between the **NetworkStream** class and other streams are that **NetworkStream** is not seekable, the <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> property always returns **false**, and the <xref:System.Net.Sockets.NetworkStream.Seek%2A> and <xref:System.Net.Sockets.NetworkStream.Position%2A> methods throw a <xref:System.NotSupportedException>."},{"content":"Processing of data as it arrives.","pos":[1811,1844]},{"content":"Streams provide access to data as it arrives from the network, rather than forcing your application to wait for an entire data set to be downloaded.","pos":[1845,1993]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets&gt;</ph> namespace contains a <bpt id=\"p1\">**</bpt>NetworkStream<ept id=\"p1\">**</ept> class that implements the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> class specifically for use with network resources.","pos":[2000,2169],"source":"The <xref:System.Net.Sockets> namespace contains a **NetworkStream** class that implements the <xref:System.IO.Stream> class specifically for use with network resources."},{"content":"Classes in the <ph id=\"ph1\">&lt;xref:System.Net.Sockets&gt;</ph> namespace use the <bpt id=\"p1\">**</bpt>NetworkStream<ept id=\"p1\">**</ept> class to represent streams.","pos":[2170,2274],"source":" Classes in the <xref:System.Net.Sockets> namespace use the **NetworkStream** class to represent streams."},{"content":"To send data to the network using the returned stream, call <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.GetRequestStream%2A&gt;</ph> on your <ph id=\"ph2\">&lt;xref:System.Net.WebRequest&gt;</ph>.","pos":[2281,2427],"source":"To send data to the network using the returned stream, call <xref:System.Net.WebRequest.GetRequestStream%2A> on your <xref:System.Net.WebRequest>."},{"content":"The <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> will send request headers to the server; then you can send data to the network resource by calling the <ph id=\"ph1\">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> method on the returned stream.","pos":[2428,2692],"source":" The **WebRequest** will send request headers to the server; then you can send data to the network resource by calling the <xref:System.IO.Stream.BeginWrite%2A>, <xref:System.IO.Stream.EndWrite%2A>, or <xref:System.IO.Stream.Write%2A> method on the returned stream."},{"content":"Some protocols, such as HTTP, may require you to set protocol-specific properties before sending data.","pos":[2693,2795]},{"content":"The following code example shows how to set HTTP-specific properties for sending data.","pos":[2796,2882]},{"content":"It assumes that the variable <ph id=\"ph1\">`sendData`</ph> contains the data to send and that the variable <ph id=\"ph2\">`sendLength`</ph> is the number of bytes of data to send.","pos":[2883,3023],"source":" It assumes that the variable `sendData` contains the data to send and that the variable `sendLength` is the number of bytes of data to send."},{"content":"To receive data from the network, call <ph id=\"ph1\">&lt;xref:System.Net.WebResponse.GetResponseStream%2A&gt;</ph> on your <ph id=\"ph2\">&lt;xref:System.Net.WebResponse&gt;</ph>.","pos":[3764,3892],"source":"To receive data from the network, call <xref:System.Net.WebResponse.GetResponseStream%2A> on your <xref:System.Net.WebResponse>."},{"content":"You can then read data from the network resource by calling the <ph id=\"ph1\">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> method on the returned stream.","pos":[3893,4096],"source":" You can then read data from the network resource by calling the <xref:System.IO.Stream.BeginRead%2A>, <xref:System.IO.Stream.EndRead%2A>, or <xref:System.IO.Stream.Read%2A> method on the returned stream."},{"content":"When using streams from network resources, keep in mind the following points:","pos":[4103,4180]},{"content":"The <bpt id=\"p1\">**</bpt>CanSeek<ept id=\"p1\">**</ept> property always returns <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> since the <bpt id=\"p3\">**</bpt>NetworkStream<ept id=\"p3\">**</ept> class cannot change position in the stream.","pos":[4190,4311],"source":"The **CanSeek** property always returns **false** since the **NetworkStream** class cannot change position in the stream."},{"content":"The <bpt id=\"p1\">**</bpt>Seek<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Position<ept id=\"p2\">**</ept> methods throw a <bpt id=\"p3\">**</bpt>NotSupportedException<ept id=\"p3\">**</ept>.","pos":[4312,4384],"source":" The **Seek** and **Position** methods throw a **NotSupportedException**."},{"pos":[4394,4591],"content":"When you use <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept>, stream instances created by calling <bpt id=\"p3\">**</bpt>GetResponseStream<ept id=\"p3\">**</ept> are read-only and stream instances created by calling <bpt id=\"p4\">**</bpt>GetRequestStream<ept id=\"p4\">**</ept> are write-only.","source":"When you use **WebRequest** and **WebResponse**, stream instances created by calling **GetResponseStream** are read-only and stream instances created by calling **GetRequestStream** are write-only."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.StreamReader&gt;</ph> class to make encoding easier.","pos":[4601,4669],"source":"Use the <xref:System.IO.StreamReader> class to make encoding easier."},{"content":"The following code example uses a <bpt id=\"p1\">**</bpt>StreamReader<ept id=\"p1\">**</ept> to read an ASCII-encoded stream from a <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept> (the example does not show creating the request).","pos":[4670,4825],"source":" The following code example uses a **StreamReader** to read an ASCII-encoded stream from a **WebResponse** (the example does not show creating the request)."},{"content":"The call to <bpt id=\"p1\">**</bpt>GetResponse<ept id=\"p1\">**</ept> can block if network resources are not available.","pos":[4835,4912],"source":"The call to **GetResponse** can block if network resources are not available."},{"content":"You should consider using an asynchronous request with the <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.BeginGetResponse%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.WebRequest.EndGetResponse%2A&gt;</ph> methods.","pos":[4913,5080],"source":" You should consider using an asynchronous request with the <xref:System.Net.WebRequest.BeginGetResponse%2A> and <xref:System.Net.WebRequest.EndGetResponse%2A> methods."},{"content":"The call to <bpt id=\"p1\">**</bpt>GetRequestStream<ept id=\"p1\">**</ept> can block while the connection to the server is created.","pos":[5090,5179],"source":"The call to **GetRequestStream** can block while the connection to the server is created."},{"content":"You should consider using an asynchronous request for the stream with the <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.BeginGetRequestStream%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.WebRequest.EndGetRequestStream%2A&gt;</ph> methods.","pos":[5180,5372],"source":" You should consider using an asynchronous request for the stream with the <xref:System.Net.WebRequest.BeginGetRequestStream%2A> and <xref:System.Net.WebRequest.EndGetRequestStream%2A> methods."},{"pos":[6028,6036],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6040,6184],"content":"<bpt id=\"p1\">[</bpt>How to: Request Data Using the WebRequest Class<ept id=\"p1\">](../../../docs/framework/network-programming/how-to-request-data-using-the-webrequest-class.md)</ept>","source":"[How to: Request Data Using the WebRequest Class](../../../docs/framework/network-programming/how-to-request-data-using-the-webrequest-class.md)"},{"pos":[6187,6268],"content":"<bpt id=\"p1\">[</bpt>Requesting Data<ept id=\"p1\">](../../../docs/framework/network-programming/requesting-data.md)</ept>","source":"[Requesting Data](../../../docs/framework/network-programming/requesting-data.md)"}]}