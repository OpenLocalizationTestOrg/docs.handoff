{"content":"---\ntitle: \"Value types table - C# Reference\"\nms.custom: seodec18\n\nms.date: 08/24/2018\nhelpviewer_keywords: \n  - \"value types [C#], table\"\n  - \"types [C#], value types\"\n  - \"types [C#], suffixes\"\nms.assetid: 67d8f631-b6e3-4d83-9910-5ec497f8c5f3\n---\n# Value types table (C# Reference)\n\nThe following table shows the C# value types:\n\n|Value type|Category|Type suffix|\n|----------------|--------------|-----------------|\n|[bool](bool.md)|Boolean||\n|[byte](byte.md)|Unsigned, numeric, [integral](integral-types-table.md)||\n|[char](char.md)|Unsigned, numeric, [integral](integral-types-table.md)||\n|[decimal](decimal.md)|Numeric, [floating-point](floating-point-types-table.md)|M or m|\n|[double](double.md)|Numeric, [floating-point](floating-point-types-table.md)|D or d|\n|[enum](enum.md)|Enumeration||\n|[float](float.md)|Numeric, [floating-point](floating-point-types-table.md)|F or f|\n|[int](int.md)|Signed, numeric, [integral](integral-types-table.md)||\n|[long](long.md)|Signed, numeric, [integral](integral-types-table.md)|L or l|\n|[sbyte](sbyte.md)|Signed, numeric, [integral](integral-types-table.md)||\n|[short](short.md)|Signed, numeric, [integral](integral-types-table.md)||\n|[struct](struct.md)|User-defined structure||\n|[uint](uint.md)|Unsigned, numeric, [integral](integral-types-table.md)|U or u|\n|[ulong](ulong.md)|Unsigned, numeric, [integral](integral-types-table.md)|UL, Ul, uL, ul, LU, Lu, lU, or lu|\n|[ushort](ushort.md)|Unsigned, numeric, [integral](integral-types-table.md)||\n\n## Remarks\n\nYou use a type suffix to specify a type of a numerical literal. For example:\n\n```csharp\ndecimal a = 0.1M;\n```\n\nIf an [integer numerical literal](~/_csharplang/spec/lexical-structure.md#integer-literals) has no suffix, it has the first of the following types in which its value can be represented: `int`, `uint`, `long`, `ulong`.\n\nIf a [real numerical literal](~/_csharplang/spec/lexical-structure.md#real-literals) has no suffix, it's of type `double`.\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [Reference tables for types](reference-tables-for-types.md)\n- [Default values table](default-values-table.md)\n- [Value types](value-types.md)\n- [Formatting numeric results table](formatting-numeric-results-table.md)","nodes":[{"pos":[4,244],"embed":true,"restype":"x-metadata","content":"title: \"Value types table - C# Reference\"\nms.custom: seodec18\n\nms.date: 08/24/2018\nhelpviewer_keywords: \n  - \"value types [C#], table\"\n  - \"types [C#], value types\"\n  - \"types [C#], suffixes\"\nms.assetid: 67d8f631-b6e3-4d83-9910-5ec497f8c5f3","nodes":[{"content":"Value types table - C# Reference","nodes":[{"pos":[0,32],"content":"Value types table - C# Reference","nodes":[{"content":"Value types table - C# Reference","pos":[0,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[251,283],"content":"Value types table (C# Reference)","linkify":"Value types table (C# Reference)","nodes":[{"content":"Value types table (C# Reference)","pos":[0,32]}]},{"content":"The following table shows the C# value types:","pos":[285,330]},{"content":"Value type","pos":[333,343]},{"content":"Category","pos":[344,352]},{"content":"Type suffix","pos":[353,364]},{"pos":[419,434],"content":"<bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](bool.md)</ept>","source":"[bool](bool.md)"},{"content":"Boolean","pos":[435,442]},{"pos":[446,461],"content":"<bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](byte.md)</ept>","source":"[byte](byte.md)"},{"pos":[462,516],"content":"Unsigned, numeric, <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](integral-types-table.md)</ept>","source":"Unsigned, numeric, [integral](integral-types-table.md)"},{"pos":[520,535],"content":"<bpt id=\"p1\">[</bpt>char<ept id=\"p1\">](char.md)</ept>","source":"[char](char.md)"},{"pos":[536,590],"content":"Unsigned, numeric, <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](integral-types-table.md)</ept>","source":"Unsigned, numeric, [integral](integral-types-table.md)"},{"pos":[594,615],"content":"<bpt id=\"p1\">[</bpt>decimal<ept id=\"p1\">](decimal.md)</ept>","source":"[decimal](decimal.md)"},{"pos":[616,672],"content":"Numeric, <bpt id=\"p1\">[</bpt>floating-point<ept id=\"p1\">](floating-point-types-table.md)</ept>","source":"Numeric, [floating-point](floating-point-types-table.md)"},{"content":"M or m","pos":[673,679]},{"pos":[682,701],"content":"<bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](double.md)</ept>","source":"[double](double.md)"},{"pos":[702,758],"content":"Numeric, <bpt id=\"p1\">[</bpt>floating-point<ept id=\"p1\">](floating-point-types-table.md)</ept>","source":"Numeric, [floating-point](floating-point-types-table.md)"},{"content":"D or d","pos":[759,765]},{"pos":[768,783],"content":"<bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](enum.md)</ept>","source":"[enum](enum.md)"},{"content":"Enumeration","pos":[784,795]},{"pos":[799,816],"content":"<bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](float.md)</ept>","source":"[float](float.md)"},{"pos":[817,873],"content":"Numeric, <bpt id=\"p1\">[</bpt>floating-point<ept id=\"p1\">](floating-point-types-table.md)</ept>","source":"Numeric, [floating-point](floating-point-types-table.md)"},{"content":"F or f","pos":[874,880]},{"pos":[883,896],"content":"<bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>","source":"[int](int.md)"},{"pos":[897,949],"content":"Signed, numeric, <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](integral-types-table.md)</ept>","source":"Signed, numeric, [integral](integral-types-table.md)"},{"pos":[953,968],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](long.md)</ept>","source":"[long](long.md)"},{"pos":[969,1021],"content":"Signed, numeric, <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](integral-types-table.md)</ept>","source":"Signed, numeric, [integral](integral-types-table.md)"},{"content":"L or l","pos":[1022,1028]},{"pos":[1031,1048],"content":"<bpt id=\"p1\">[</bpt>sbyte<ept id=\"p1\">](sbyte.md)</ept>","source":"[sbyte](sbyte.md)"},{"pos":[1049,1101],"content":"Signed, numeric, <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](integral-types-table.md)</ept>","source":"Signed, numeric, [integral](integral-types-table.md)"},{"pos":[1105,1122],"content":"<bpt id=\"p1\">[</bpt>short<ept id=\"p1\">](short.md)</ept>","source":"[short](short.md)"},{"pos":[1123,1175],"content":"Signed, numeric, <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](integral-types-table.md)</ept>","source":"Signed, numeric, [integral](integral-types-table.md)"},{"pos":[1179,1198],"content":"<bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](struct.md)</ept>","source":"[struct](struct.md)"},{"content":"User-defined structure","pos":[1199,1221]},{"pos":[1225,1240],"content":"<bpt id=\"p1\">[</bpt>uint<ept id=\"p1\">](uint.md)</ept>","source":"[uint](uint.md)"},{"pos":[1241,1295],"content":"Unsigned, numeric, <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](integral-types-table.md)</ept>","source":"Unsigned, numeric, [integral](integral-types-table.md)"},{"content":"U or u","pos":[1296,1302]},{"pos":[1305,1322],"content":"<bpt id=\"p1\">[</bpt>ulong<ept id=\"p1\">](ulong.md)</ept>","source":"[ulong](ulong.md)"},{"pos":[1323,1377],"content":"Unsigned, numeric, <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](integral-types-table.md)</ept>","source":"Unsigned, numeric, [integral](integral-types-table.md)"},{"content":"UL, Ul, uL, ul, LU, Lu, lU, or lu","pos":[1378,1411]},{"pos":[1414,1433],"content":"<bpt id=\"p1\">[</bpt>ushort<ept id=\"p1\">](ushort.md)</ept>","source":"[ushort](ushort.md)"},{"pos":[1434,1488],"content":"Unsigned, numeric, <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](integral-types-table.md)</ept>","source":"Unsigned, numeric, [integral](integral-types-table.md)"},{"pos":[1495,1502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You use a type suffix to specify a type of a numerical literal.","pos":[1504,1567]},{"content":"For example:","pos":[1568,1580]},{"pos":[1615,1832],"content":"If an <bpt id=\"p1\">[</bpt>integer numerical literal<ept id=\"p1\">](~/_csharplang/spec/lexical-structure.md#integer-literals)</ept> has no suffix, it has the first of the following types in which its value can be represented: <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`uint`</ph>, <ph id=\"ph3\">`long`</ph>, <ph id=\"ph4\">`ulong`</ph>.","source":"If an [integer numerical literal](~/_csharplang/spec/lexical-structure.md#integer-literals) has no suffix, it has the first of the following types in which its value can be represented: `int`, `uint`, `long`, `ulong`."},{"pos":[1834,1956],"content":"If a <bpt id=\"p1\">[</bpt>real numerical literal<ept id=\"p1\">](~/_csharplang/spec/lexical-structure.md#real-literals)</ept> has no suffix, it's of type <ph id=\"ph1\">`double`</ph>.","source":"If a [real numerical literal](~/_csharplang/spec/lexical-structure.md#real-literals) has no suffix, it's of type `double`."},{"pos":[1961,1969],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1973,2000],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2003,2059],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2062,2121],"content":"<bpt id=\"p1\">[</bpt>Reference tables for types<ept id=\"p1\">](reference-tables-for-types.md)</ept>","source":"[Reference tables for types](reference-tables-for-types.md)"},{"pos":[2124,2171],"content":"<bpt id=\"p1\">[</bpt>Default values table<ept id=\"p1\">](default-values-table.md)</ept>","source":"[Default values table](default-values-table.md)"},{"pos":[2174,2203],"content":"<bpt id=\"p1\">[</bpt>Value types<ept id=\"p1\">](value-types.md)</ept>","source":"[Value types](value-types.md)"},{"pos":[2206,2277],"content":"<bpt id=\"p1\">[</bpt>Formatting numeric results table<ept id=\"p1\">](formatting-numeric-results-table.md)</ept>","source":"[Formatting numeric results table](formatting-numeric-results-table.md)"}]}