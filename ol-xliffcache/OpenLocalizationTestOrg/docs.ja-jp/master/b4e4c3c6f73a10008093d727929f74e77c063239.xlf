<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="overloadable-operators.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4e4c3c6f73a10008093d727929f74e77c063239</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\overloadable-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd1b69ff62c34956ef1f6c93d35db597c654a757</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22a46efc5a620350335f977569305c2d0c4e2d33</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Overloadable operators - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Overloadable operators (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>C# allows user-defined types to overload operators by defining static member functions using the <bpt id="p1">[</bpt>operator<ept id="p1">](../../language-reference/keywords/operator.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Not all operators can be overloaded, however, and others have restrictions, as listed in this table:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overloadability</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">+</ph><ept id="p1">](../../language-reference/operators/addition-operator.md)</ept>, <bpt id="p2">[</bpt><ph id="ph2">-</ph><ept id="p2">](../../language-reference/operators/subtraction-operator.md)</ept>, <bpt id="p3">[</bpt>!<ept id="p3">](../../language-reference/operators/logical-negation-operator.md)</ept>, <bpt id="p4">[</bpt><ph id="ph3">~</ph><ept id="p4">](../../language-reference/operators/bitwise-complement-operator.md)</ept>, <bpt id="p5">[</bpt><ph id="ph4">++</ph><ept id="p5">](../../language-reference/operators/arithmetic-operators.md#increment-operator-)</ept>, <bpt id="p6">[</bpt><ph id="ph5">--</ph><ept id="p6">](../../language-reference/operators/arithmetic-operators.md#decrement-operator---)</ept>, <bpt id="p7">[</bpt>true<ept id="p7">](../../language-reference/keywords/true-false-operators.md)</ept>, <bpt id="p8">[</bpt>false<ept id="p8">](../../language-reference/keywords/true-false-operators.md)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These unary operators can be overloaded.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">+</ph><ept id="p1">](../../language-reference/operators/addition-operator.md)</ept>, <bpt id="p2">[</bpt><ph id="ph2">-</ph><ept id="p2">](../../language-reference/operators/subtraction-operator.md)</ept>, <bpt id="p3">[</bpt><ph id="ph3">\*</ph><ept id="p3">](../../language-reference/operators/arithmetic-operators.md#multiplication-operator-)</ept>, <bpt id="p4">[</bpt><ph id="ph4">/</ph><ept id="p4">](../../language-reference/operators/arithmetic-operators.md#division-operator-)</ept>, <bpt id="p5">[</bpt><ph id="ph5">%</ph><ept id="p5">](../../language-reference/operators/arithmetic-operators.md#remainder-operator-)</ept>, <bpt id="p6">[</bpt><ph id="ph6">&amp;</ph><ept id="p6">](../../language-reference/operators/and-operator.md)</ept>, <bpt id="p7">[</bpt>&amp;#124;<ept id="p7">](../../language-reference/operators/or-operator.md)</ept>, <bpt id="p8">[</bpt><ph id="ph7">^</ph><ept id="p8">](../../language-reference/operators/xor-operator.md)</ept>, <bpt id="p9">[</bpt><ph id="ph8">\&lt;</ph><ph id="ph9">\&lt;</ph><ept id="p9">](../../language-reference/operators/left-shift-operator.md)</ept>, <bpt id="p10">[</bpt><ph id="ph10">&gt;&gt;</ph><ept id="p10">](../../language-reference/operators/right-shift-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These binary operators can be overloaded.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">==</ph><ept id="p1">](../../language-reference/operators/equality-operators.md#equality-operator-)</ept>, <bpt id="p2">[</bpt>!=<ept id="p2">](../../language-reference/operators/equality-operators.md#inequality-operator-)</ept>, <bpt id="p3">[</bpt><ph id="ph2">\&lt;</ph><ept id="p3">](../../language-reference/operators/less-than-operator.md)</ept>, <bpt id="p4">[</bpt><ph id="ph3">&gt;</ph><ept id="p4">](../../language-reference/operators/greater-than-operator.md)</ept>, <bpt id="p5">[</bpt><ph id="ph4">\&lt;</ph><ph id="ph5">=</ph><ept id="p5">](../../language-reference/operators/less-than-equal-operator.md)</ept>, <bpt id="p6">[</bpt><ph id="ph6">&gt;=</ph><ept id="p6">](../../language-reference/operators/greater-than-equal-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The comparison operators can be overloaded (but see the note that follows this table).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p1">](../../language-reference/operators/conditional-and-operator.md)</ept>, <bpt id="p2">[</bpt>&amp;#124;&amp;#124;<ept id="p2">](../../language-reference/operators/conditional-or-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The conditional logical operators cannot be overloaded, but they are evaluated using <ph id="ph1">`&amp;`</ph> and <ph id="ph2">&lt;code&gt;&amp;#124;&lt;/code&gt;</ph>, which can be overloaded.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;&amp;#93;<ept id="p1">](../../language-reference/operators/index-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The array indexing operator cannot be overloaded, but you can define <bpt id="p1">[</bpt>indexers<ept id="p1">](../indexers/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>(T)x<ept id="p1">](../../language-reference/operators/invocation-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The cast operator cannot be overloaded, but you can define new conversion operators (see <bpt id="p1">[</bpt>explicit<ept id="p1">](../../language-reference/keywords/explicit.md)</ept> and <bpt id="p2">[</bpt>implicit<ept id="p2">](../../language-reference/keywords/implicit.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">+=</ph><ept id="p1">](../../language-reference/operators/addition-assignment-operator.md)</ept>, <bpt id="p2">[</bpt><ph id="ph2">-=</ph><ept id="p2">](../../language-reference/operators/subtraction-assignment-operator.md)</ept>, <bpt id="p3">[</bpt><ph id="ph3">\*</ph><ph id="ph4">=</ph><ept id="p3">](../../language-reference/operators/arithmetic-operators.md#compound-assignment)</ept>, <bpt id="p4">[</bpt><ph id="ph5">/=</ph><ept id="p4">](../../language-reference/operators/arithmetic-operators.md#compound-assignment)</ept>, <bpt id="p5">[</bpt><ph id="ph6">%=</ph><ept id="p5">](../../language-reference/operators/arithmetic-operators.md#compound-assignment)</ept>, <bpt id="p6">[</bpt><ph id="ph7">&amp;=</ph><ept id="p6">](../../language-reference/operators/and-assignment-operator.md)</ept>, <bpt id="p7">[</bpt>&amp;#124;=<ept id="p7">](../../language-reference/operators/or-assignment-operator.md)</ept>, <bpt id="p8">[</bpt><ph id="ph8">^=</ph><ept id="p8">](../../language-reference/operators/xor-assignment-operator.md)</ept>, <bpt id="p9">[</bpt><ph id="ph9">\&lt;</ph><ph id="ph10">\&lt;</ph><ph id="ph11">=</ph><ept id="p9">](../../language-reference/operators/left-shift-assignment-operator.md)</ept>, <bpt id="p10">[</bpt><ph id="ph12">&gt;&gt;=</ph><ept id="p10">](../../language-reference/operators/right-shift-assignment-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Assignment operators cannot be explicitly overloaded.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, when you overload a binary operator, the corresponding assignment operator, if any, is also implicitly overloaded.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`+=`</ph> is evaluated using <ph id="ph2">`+`</ph>, which can be overloaded.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">=</ph><ept id="p1">](../../language-reference/operators/assignment-operator.md)</ept>, <bpt id="p2">[</bpt>.<ept id="p2">](../../language-reference/operators/member-access-operator.md)</ept>, <bpt id="p3">[</bpt>?:<ept id="p3">](../../language-reference/operators/conditional-operator.md)</ept>, <bpt id="p4">[</bpt>??<ept id="p4">](../../language-reference/operators/null-coalescing-operator.md)</ept>, <bpt id="p5">[</bpt><ph id="ph2">-&gt;</ph><ept id="p5">](../../language-reference/operators/dereference-operator.md)</ept>, <bpt id="p6">[</bpt><ph id="ph3">=&gt;</ph><ept id="p6">](../../language-reference/operators/lambda-operator.md)</ept>, <bpt id="p7">[</bpt>f(x)<ept id="p7">](../../language-reference/operators/invocation-operator.md)</ept>, <bpt id="p8">[</bpt>as<ept id="p8">](../../language-reference/keywords/as.md)</ept>, <bpt id="p9">[</bpt>checked<ept id="p9">](../../language-reference/keywords/checked.md)</ept>, <bpt id="p10">[</bpt>unchecked<ept id="p10">](../../language-reference/keywords/unchecked.md)</ept>, <bpt id="p11">[</bpt>default<ept id="p11">](../../programming-guide/statements-expressions-operators/default-value-expressions.md)</ept>, <bpt id="p12">[</bpt>delegate<ept id="p12">](../../programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>, <bpt id="p13">[</bpt>is<ept id="p13">](../../language-reference/keywords/is.md)</ept>, <bpt id="p14">[</bpt>new<ept id="p14">](../../language-reference/keywords/new.md)</ept>, <bpt id="p15">[</bpt>sizeof<ept id="p15">](../../language-reference/keywords/sizeof.md)</ept>, <bpt id="p16">[</bpt>typeof<ept id="p16">](../../language-reference/keywords/typeof.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These operators cannot be overloaded.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The comparison operators, if overloaded, must be overloaded in pairs; that is, if <ph id="ph1">`==`</ph> is overloaded, <ph id="ph2">`!=`</ph> must also be overloaded.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The reverse is also true, where overloading <ph id="ph1">`!=`</ph> requires an overload for <ph id="ph2">`==`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The same is true for comparison operators <ph id="ph1">`&lt;`</ph> and <ph id="ph2">`&gt;`</ph> and for <ph id="ph3">`&lt;=`</ph> and <ph id="ph4">`&gt;=`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For information about how to overload an operator, see the <bpt id="p1">[</bpt>operator<ept id="p1">](../../language-reference/keywords/operator.md)</ept> keyword article.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Statements, Expressions, and Operators<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators<ept id="p1">](operators.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](../../language-reference/operators/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Why are overloaded operators always static in C#?<ept id="p1">](https://blogs.msdn.microsoft.com/ericlippert/2007/05/14/why-are-overloaded-operators-always-static-in-c/)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>