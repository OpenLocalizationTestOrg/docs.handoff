<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d1eb53454b6e0d964be15df2e320ce189e7d875</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\threading\parameters-and-return-values-for-multithreaded-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac62d6cbbb5adbdcae9a1702430eb7f5160b73b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5845bf1168ec218b27e1402d4a924488e7824893</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Parameters and Return Values for Multithreaded Procedures (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Parameters and Return Values for Multithreaded Procedures (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Supplying and returning values in a multithreaded application is complicated because the constructor for the thread class must be passed a reference to a procedure that takes no arguments and returns no value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following sections show some simple ways to supply parameters and return values from procedures on separate threads.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Supplying Parameters for Multithreaded Procedures</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The best way to supply parameters for a multithreaded method call is to wrap the target method in a class and define fields for that class that will serve as parameters for the new thread.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The advantage of this approach is that you can create a new instance of the class, with its own parameters, every time you want to start a new thread.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a function that calculates the area of a triangle, as in the following code:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can write a class that wraps the <ph id="ph1">`CalcArea`</ph> function and creates fields to store input parameters, as follows:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">`AreaClass`</ph>, you can create an <ph id="ph2">`AreaClass`</ph> object, and set the <ph id="ph3">`Base`</ph> and <ph id="ph4">`Height`</ph> properties as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`TestArea`</ph> procedure does not check the value of the <ph id="ph2">`Area`</ph> field after calling the <ph id="ph3">`CalcArea`</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CalcArea`</ph> runs on a separate thread, the <ph id="ph2">`Area`</ph> field is not guaranteed to be set if you check it immediately after calling <ph id="ph3">`Thread.Start`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The next section discusses a better way to return values from multithreaded procedures.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Returning Values from Multithreaded Procedures</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returning values from procedures that run on separate threads is complicated by the fact that the procedures cannot be functions and cannot use <ph id="ph1">`ByRef`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The easiest way to return values is to use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to manage your threads and raise an event when the task is done, and process the results with an event handler.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example returns a value by raising an event from a procedure running on a separate thread:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can provide parameters and return values to thread-pool threads by using the optional <ph id="ph1">`ByVal`</ph> state-object variable of the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Thread-timer threads also support a state object for this purpose.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For information on thread pooling and thread timers, see <bpt id="p1">[</bpt>Thread Pooling (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept><bpt id="p2">[</bpt>Thread Pooling<ept id="p2">](http://msdn.microsoft.com/library/4b8bb2c8-8ca4-457c-9afd-d11bc9a05701)</ept> and <bpt id="p3">[</bpt>Thread Timers (Visual Basic)<ept id="p3">](../../../../visual-basic/programming-guide/concepts/threading/thread-timers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Pooling (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Synchronization (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/thread-synchronization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Multithreaded Applications (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/multithreaded-applications.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Delegates<ept id="p1">](../../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Multithreading in Components<ept id="p1">](http://msdn.microsoft.com/library/2fc31e68-fb71-4544-b654-0ce720478779)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>