{"content":"---\ntitle: \"How to: Define Abstract Properties - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"properties [C#], abstract\"\n  - \"abstract properties [C#]\"\nms.assetid: 672a90eb-47b9-4ae0-9914-af53852fddcb\n---\n# How to: Define Abstract Properties (C# Programming Guide)\nThe following example shows how to define [abstract](../../../csharp/language-reference/keywords/abstract.md) properties. An abstract property declaration does not provide an implementation of the property accessors -- it declares that the class supports properties, but leaves the accessor implementation to derived classes. The following example demonstrates how to implement the abstract properties inherited from a base class.  \n  \n This sample consists of three files, each of which is compiled individually and its resulting assembly is referenced by the next compilation:  \n  \n-   abstractshape.cs: the `Shape` class that contains an abstract `Area` property.  \n  \n-   shapes.cs: The subclasses of the `Shape` class.  \n  \n-   shapetest.cs: A test program to display the areas of some `Shape`-derived objects.  \n  \n To compile the example, use the following command:  \n  \n `csc abstractshape.cs shapes.cs shapetest.cs`  \n  \n This will create the executable file shapetest.exe.  \n  \n## Example  \n This file declares the `Shape` class that contains the `Area` property of the type `double`.  \n  \n [!code-csharp[csProgGuideInheritance#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideInheritance/CS/Inheritance.cs#1)]  \n  \n-   Modifiers on the property are placed on the property declaration itself. For example:  \n  \n    ```csharp  \n    public abstract double Area  \n    ```  \n  \n-   When declaring an abstract property (such as `Area` in this example), you simply indicate what property accessors are available, but do not implement them. In this example, only a [get](../../../csharp/language-reference/keywords/get.md) accessor is available, so the property is read-only.  \n  \n## Example  \n The following code shows three subclasses of `Shape` and how they override the `Area` property to provide their own implementation.  \n  \n [!code-csharp[csProgGuideInheritance#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideInheritance/CS/Inheritance.cs#2)]  \n  \n## Example  \n The following code shows a test program that creates a number of `Shape`-derived objects and prints out their areas.  \n  \n [!code-csharp[csProgGuideInheritance#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideInheritance/CS/Inheritance.cs#3)]  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)\n- [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)\n- [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)\n- [How to: Create and Use Assemblies Using the Command Line](../concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md)\n","nodes":[{"pos":[4,244],"embed":true,"restype":"x-metadata","content":"title: \"How to: Define Abstract Properties - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"properties [C#], abstract\"\n  - \"abstract properties [C#]\"\nms.assetid: 672a90eb-47b9-4ae0-9914-af53852fddcb","nodes":[{"content":"How to: Define Abstract Properties - C# Programming Guide","nodes":[{"pos":[0,57],"content":"How to: Define Abstract Properties - C# Programming Guide","nodes":[{"content":"How to: Define Abstract Properties - C# Programming Guide","pos":[0,57]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[251,308],"content":"How to: Define Abstract Properties (C# Programming Guide)","linkify":"How to: Define Abstract Properties (C# Programming Guide)","nodes":[{"content":"How to: Define Abstract Properties (C# Programming Guide)","pos":[0,57]}]},{"content":"The following example shows how to define <bpt id=\"p1\">[</bpt>abstract<ept id=\"p1\">](../../../csharp/language-reference/keywords/abstract.md)</ept> properties.","pos":[309,430],"source":"The following example shows how to define [abstract](../../../csharp/language-reference/keywords/abstract.md) properties."},{"content":"An abstract property declaration does not provide an implementation of the property accessors -- it declares that the class supports properties, but leaves the accessor implementation to derived classes.","pos":[431,634]},{"content":"The following example demonstrates how to implement the abstract properties inherited from a base class.","pos":[635,739]},{"content":"This sample consists of three files, each of which is compiled individually and its resulting assembly is referenced by the next compilation:","pos":[746,887]},{"pos":[897,975],"content":"abstractshape.cs: the <ph id=\"ph1\">`Shape`</ph> class that contains an abstract <ph id=\"ph2\">`Area`</ph> property.","source":"abstractshape.cs: the `Shape` class that contains an abstract `Area` property."},{"pos":[985,1032],"content":"shapes.cs: The subclasses of the <ph id=\"ph1\">`Shape`</ph> class.","source":"shapes.cs: The subclasses of the `Shape` class."},{"pos":[1042,1124],"content":"shapetest.cs: A test program to display the areas of some <ph id=\"ph1\">`Shape`</ph>-derived objects.","source":"shapetest.cs: A test program to display the areas of some `Shape`-derived objects."},{"content":"To compile the example, use the following command:","pos":[1131,1181]},{"content":"This will create the executable file shapetest.exe.","pos":[1240,1291]},{"pos":[1300,1307],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1311,1403],"content":"This file declares the <ph id=\"ph1\">`Shape`</ph> class that contains the <ph id=\"ph2\">`Area`</ph> property of the type <ph id=\"ph3\">`double`</ph>.","source":"This file declares the `Shape` class that contains the `Area` property of the type `double`."},{"content":"Modifiers on the property are placed on the property declaration itself.","pos":[1551,1623]},{"content":"For example:","pos":[1624,1636]},{"content":"When declaring an abstract property (such as <ph id=\"ph1\">`Area`</ph> in this example), you simply indicate what property accessors are available, but do not implement them.","pos":[1709,1864],"source":"When declaring an abstract property (such as `Area` in this example), you simply indicate what property accessors are available, but do not implement them."},{"content":"In this example, only a <bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](../../../csharp/language-reference/keywords/get.md)</ept> accessor is available, so the property is read-only.","pos":[1865,1999],"source":" In this example, only a [get](../../../csharp/language-reference/keywords/get.md) accessor is available, so the property is read-only."},{"pos":[2008,2015],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2019,2150],"content":"The following code shows three subclasses of <ph id=\"ph1\">`Shape`</ph> and how they override the <ph id=\"ph2\">`Area`</ph> property to provide their own implementation.","source":"The following code shows three subclasses of `Shape` and how they override the `Area` property to provide their own implementation."},{"pos":[2297,2304],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2308,2424],"content":"The following code shows a test program that creates a number of <ph id=\"ph1\">`Shape`</ph>-derived objects and prints out their areas.","source":"The following code shows a test program that creates a number of `Shape`-derived objects and prints out their areas."},{"pos":[2571,2579],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2583,2649],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2652,2737],"content":"<bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept>","source":"[Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)"},{"pos":[2740,2891],"content":"<bpt id=\"p1\">[</bpt>Abstract and Sealed Classes and Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept>","source":"[Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)"},{"pos":[2894,2975],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"},{"pos":[2978,3123],"content":"<bpt id=\"p1\">[</bpt>How to: Create and Use Assemblies Using the Command Line<ept id=\"p1\">](../concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md)</ept>","source":"[How to: Create and Use Assemblies Using the Command Line](../concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md)"}]}