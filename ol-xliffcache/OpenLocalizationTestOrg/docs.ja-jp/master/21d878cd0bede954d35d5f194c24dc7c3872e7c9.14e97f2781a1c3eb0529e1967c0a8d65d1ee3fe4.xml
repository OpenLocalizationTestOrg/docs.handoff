{"content":"---\ntitle: \"SByte Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2017-04-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.sbyte\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"numbers, whole\"\n  - \"whole numbers\"\n  - \"integral data types\"\n  - \"integer numbers\"\n  - \"numbers, integer\"\n  - \"integers, data types\"\n  - \"integers, types\"\n  - \"data types [Visual Basic], integral\"\n  - \"SByte data type\"\nms.assetid: 5c38374a-18a1-4cc2-b493-299e3dcaa60f\ncaps.latest.revision: 18\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# SByte data type (Visual Basic)\n\nHolds signed 8-bit (1-byte) integers that range in value from -128 through 127.  \n  \n## Remarks\n\nUse the `SByte` data type to contain integer values that do not require the full data width of `Integer` or even the half data width of `Short`. In some cases, the common language runtime might be able to pack your `SByte` variables closely together and save memory consumption.\n\nThe default value of `SByte` is 0.\n\n## Literal assignments\n  \nYou can declare and initialize an `SByte` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.\n\nIn the following example, integers equal to -102 that are represented as decimal, hexadecimal, and binary literals are assigned to `SByte` values. This example requires that you compile with the `/removeintchecks` compiler switch.\n\n[!code-vb[SByte](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#SByte)]  \n\n> [!NOTE] \n> You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.\n\nStarting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-vb[SByteSeparator](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#SByteS)]  \n\nIf the integer literal is outside the range of `SByte` (that is, if it is less than <xref:System.SByte.MinValue?displayProperty=fullName> or greater than <xref:System.SByte.MaxValue?displayProperty=fullName>, a compilation error occurs. When an integer literal has no suffix, an [Integer](integer-data-type.md) is inferred. If the integer literal is outside the range of the `Integer` type, a [Long](long-data-type.md) is inferred. This means that, in the previous examples, the numeric literals `0x9A` and `0b10011010` are interpreted as 32-bit signed integers with a value of 156, which exceeds <xref:System.SByte.MaxValue?displayProperty=fullName>. To successfully compile code like this that assigns a non-decimal integer to an `SByte`, you can do either of the following:\n\n- Disable integer bounds checks by compiling with the `/removeintchecks` compiler switch.\n\n- Use a [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to explicitly define the literal value that you want to assign to the `SByte`. The following example assigns a negative literal `Short` value to an `SByte`. Note that, for negative numbers, the high-order bit of the high-order word of the numeric literal must be set. In the case of our example, this is bit 15 of the literal `Short` value.\n\n   [!code-vb[SByteTypeChars](../../../../samples/snippets/visualbasic/language-reference/data-types/sbyte-assignment.vb#1)]\n\n## Programming tips\n  \n-   **CLS Compliance.** The `SByte` data type is not part of the [Common Language Specification](http://www.ecma-international.org/publications/standards/Ecma-335.htm) (CLS), so CLS-compliant code cannot consume a component that uses it.\n\n-   **Widening.** The `SByte` data type widens to `Short`, `Integer`, `Long`, `Decimal`, `Single`, and `Double`. This means you can convert `SByte` to any of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error.\n  \n-   **Type Characters.** `SByte` has no literal type character or identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.SByte?displayProperty=fullName> structure.\n  \n## See also\n\n <xref:System.SByte?displayProperty=fullName>   \n [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)   \n [Short Data Type](../../../visual-basic/language-reference/data-types/short-data-type.md)   \n [Integer Data Type](../../../visual-basic/language-reference/data-types/integer-data-type.md)   \n [Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md)   \n [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)","nodes":[{"pos":[4,769],"embed":true,"restype":"x-metadata","content":"title: \"SByte Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2017-04-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.sbyte\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"numbers, whole\"\n  - \"whole numbers\"\n  - \"integral data types\"\n  - \"integer numbers\"\n  - \"numbers, integer\"\n  - \"integers, data types\"\n  - \"integers, types\"\n  - \"data types [Visual Basic], integral\"\n  - \"SByte data type\"\nms.assetid: 5c38374a-18a1-4cc2-b493-299e3dcaa60f\ncaps.latest.revision: 18\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"SByte Data Type (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,47],"content":"SByte Data Type (Visual Basic) | Microsoft Docs","nodes":[{"content":"SByte Data Type (Visual Basic) | Microsoft Docs","pos":[0,47]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[776,806],"content":"SByte data type (Visual Basic)","linkify":"SByte data type (Visual Basic)","nodes":[{"content":"SByte data type (Visual Basic)","pos":[0,30]}]},{"content":"Holds signed 8-bit (1-byte) integers that range in value from -128 through 127.","pos":[808,887]},{"pos":[896,903],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the <ph id=\"ph1\">`SByte`</ph> data type to contain integer values that do not require the full data width of <ph id=\"ph2\">`Integer`</ph> or even the half data width of <ph id=\"ph3\">`Short`</ph>.","pos":[905,1049],"source":"Use the `SByte` data type to contain integer values that do not require the full data width of `Integer` or even the half data width of `Short`."},{"content":"In some cases, the common language runtime might be able to pack your <ph id=\"ph1\">`SByte`</ph> variables closely together and save memory consumption.","pos":[1050,1183],"source":" In some cases, the common language runtime might be able to pack your `SByte` variables closely together and save memory consumption."},{"pos":[1185,1219],"content":"The default value of <ph id=\"ph1\">`SByte`</ph> is 0.","source":"The default value of `SByte` is 0."},{"pos":[1224,1243],"content":"Literal assignments","linkify":"Literal assignments","nodes":[{"content":"Literal assignments","pos":[0,19]}]},{"pos":[1247,1428],"content":"You can declare and initialize an <ph id=\"ph1\">`SByte`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.","source":"You can declare and initialize an `SByte` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal."},{"content":"In the following example, integers equal to -102 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`SByte`</ph> values.","pos":[1430,1576],"source":"In the following example, integers equal to -102 that are represented as decimal, hexadecimal, and binary literals are assigned to `SByte` values."},{"content":"This example requires that you compile with the <ph id=\"ph1\">`/removeintchecks`</ph> compiler switch.","pos":[1577,1660],"source":" This example requires that you compile with the `/removeintchecks` compiler switch."},{"pos":[1783,1999],"content":"[!NOTE] \nYou use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","pos":[9,214],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`&amp;h`</ph> or <ph id=\"ph2\">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id=\"ph3\">`&amp;b`</ph> or <ph id=\"ph4\">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id=\"ph5\">`&amp;o`</ph> or <ph id=\"ph6\">`&amp;O`</ph> to denote an octal literal.","pos":[0,172],"source":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal."},{"content":"Decimal literals have no prefix.","pos":[173,205]}]}]},{"pos":[2001,2158],"content":"Starting with Visual Basic 2017, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`SByte`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.SByte.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.SByte.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[2289,2525],"source":"If the integer literal is outside the range of `SByte` (that is, if it is less than <xref:System.SByte.MinValue?displayProperty=fullName> or greater than <xref:System.SByte.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"content":"When an integer literal has no suffix, an <bpt id=\"p1\">[</bpt>Integer<ept id=\"p1\">](integer-data-type.md)</ept> is inferred.","pos":[2526,2612],"source":" When an integer literal has no suffix, an [Integer](integer-data-type.md) is inferred."},{"content":"If the integer literal is outside the range of the <ph id=\"ph1\">`Integer`</ph> type, a <bpt id=\"p1\">[</bpt>Long<ept id=\"p1\">](long-data-type.md)</ept> is inferred.","pos":[2613,2720],"source":" If the integer literal is outside the range of the `Integer` type, a [Long](long-data-type.md) is inferred."},{"content":"This means that, in the previous examples, the numeric literals <ph id=\"ph1\">`0x9A`</ph> and <ph id=\"ph2\">`0b10011010`</ph> are interpreted as 32-bit signed integers with a value of 156, which exceeds <ph id=\"ph3\">&lt;xref:System.SByte.MaxValue?displayProperty=fullName&gt;</ph>.","pos":[2721,2940],"source":" This means that, in the previous examples, the numeric literals `0x9A` and `0b10011010` are interpreted as 32-bit signed integers with a value of 156, which exceeds <xref:System.SByte.MaxValue?displayProperty=fullName>."},{"content":"To successfully compile code like this that assigns a non-decimal integer to an <ph id=\"ph1\">`SByte`</ph>, you can do either of the following:","pos":[2941,3065],"source":" To successfully compile code like this that assigns a non-decimal integer to an `SByte`, you can do either of the following:"},{"pos":[3069,3156],"content":"Disable integer bounds checks by compiling with the <ph id=\"ph1\">`/removeintchecks`</ph> compiler switch.","source":"Disable integer bounds checks by compiling with the `/removeintchecks` compiler switch."},{"content":"Use a <bpt id=\"p1\">[</bpt>type character<ept id=\"p1\">](../../programming-guide\\language-features\\data-types/type-characters.md)</ept> to explicitly define the literal value that you want to assign to the <ph id=\"ph1\">`SByte`</ph>.","pos":[3160,3334],"source":"Use a [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to explicitly define the literal value that you want to assign to the `SByte`."},{"content":"The following example assigns a negative literal <ph id=\"ph1\">`Short`</ph> value to an <ph id=\"ph2\">`SByte`</ph>.","pos":[3335,3412],"source":" The following example assigns a negative literal `Short` value to an `SByte`."},{"content":"Note that, for negative numbers, the high-order bit of the high-order word of the numeric literal must be set.","pos":[3413,3523]},{"content":"In the case of our example, this is bit 15 of the literal <ph id=\"ph1\">`Short`</ph> value.","pos":[3524,3596],"source":" In the case of our example, this is bit 15 of the literal `Short` value."},{"pos":[3726,3742],"content":"Programming tips","linkify":"Programming tips","nodes":[{"content":"Programming tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>CLS Compliance.<ept id=\"p1\">**</ept>","pos":[3750,3769],"source":"**CLS Compliance.**"},{"content":"The <ph id=\"ph1\">`SByte`</ph> data type is not part of the <bpt id=\"p1\">[</bpt>Common Language Specification<ept id=\"p1\">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept> (CLS), so CLS-compliant code cannot consume a component that uses it.","pos":[3770,3983],"source":" The `SByte` data type is not part of the [Common Language Specification](http://www.ecma-international.org/publications/standards/Ecma-335.htm) (CLS), so CLS-compliant code cannot consume a component that uses it."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[3989,4002],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`SByte`</ph> data type widens to <ph id=\"ph2\">`Short`</ph>, <ph id=\"ph3\">`Integer`</ph>, <ph id=\"ph4\">`Long`</ph>, <ph id=\"ph5\">`Decimal`</ph>, <ph id=\"ph6\">`Single`</ph>, and <ph id=\"ph7\">`Double`</ph>.","pos":[4003,4097],"source":" The `SByte` data type widens to `Short`, `Integer`, `Long`, `Decimal`, `Single`, and `Double`."},{"content":"This means you can convert <ph id=\"ph1\">`SByte`</ph> to any of these types without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=fullName&gt;</ph> error.","pos":[4098,4241],"source":" This means you can convert `SByte` to any of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[4249,4269],"source":"**Type Characters.**"},{"content":"<ph id=\"ph1\">`SByte`</ph> has no literal type character or identifier type character.","pos":[4270,4337],"source":"`SByte` has no literal type character or identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[4347,4366],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.SByte?displayProperty=fullName&gt;</ph> structure.","pos":[4367,4474],"source":" The corresponding type in the .NET Framework is the <xref:System.SByte?displayProperty=fullName> structure."},{"pos":[4481,4489],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[4541,4628],"source":"[Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[4632,4741],"source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[4745,4839],"source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>Short Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[4843,4933],"source":"[Short Data Type](../../../visual-basic/language-reference/data-types/short-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integer Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[4937,5031],"source":"[Integer Data Type](../../../visual-basic/language-reference/data-types/integer-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Long Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[5035,5123],"source":"[Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","pos":[5127,5257],"source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}