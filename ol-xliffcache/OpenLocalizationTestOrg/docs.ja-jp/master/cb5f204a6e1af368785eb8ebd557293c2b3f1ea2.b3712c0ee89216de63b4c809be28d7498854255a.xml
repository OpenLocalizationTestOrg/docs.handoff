{"content":"---\ntitle: \"Ordered Node Retrieval by Index | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nms.assetid: 5412c90f-2703-4aa8-a9c4-1b8a35183c37\ncaps.latest.revision: 4\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# Ordered Node Retrieval by Index\nThe World Wide Web Consortium (W3C) XML Document Object Model (DOM) also describes a NodeList, which has the ability to handle an ordered list of nodes, as opposed to the unordered set handled by the **XmlNamedNodeMap**. The NodeList in the Microsoft .NET Framework is called **XmlNodeList**. Methods and properties that return an **XmlNodeList** are:  \n  \n-   XmlNode.ChildNodes  \n  \n-   XmlDocument.GetElementsByTagName  \n  \n-   XmlElement.GetElementsByTagName  \n  \n-   XmlNode.SelectNodes  \n  \n The **XmlNodeList** has a **Count** property that can be used to write loops to iterate over the nodes in the **XmlNodeList**, as shown in the following code sample:  \n  \n```vb  \nDim doc as XmlDocument = new XmlDocument()  \n   doc.Load(\"books.xml\")  \n  \n    ' Retrieve all book titles.  \n    Dim root as XmlElement = doc.DocumentElement  \n    Dim elemList as XmlNodeList = root.GetElementsByTagName(\"title\")  \n    Dim i as integer  \n    for i=0  to elemList.Count-1  \n        ' Display all book titles in the Node List.  \n        Console.WriteLine(elemList.ItemOf(i).InnerXml)  \n    next  \n  \n```  \n  \n```csharp  \nXmlDocument doc = new XmlDocument();  \ndoc.Load(\"books.xml\");  \n// Retrieve all book titles.  \nXmlElement root = doc.DocumentElement;  \nXmlNodeList elemList = root.GetElementsByTagName(\"title\");  \nfor (int i=0; i < elemList.Count; i++)  \n{     \n   // Display all book titles in the Node List.  \n   Console.WriteLine(elemList[i].InnerXml);  \n}   \n```  \n  \n In addition to the **Count** property, there is a **GetEnumerator** method that provides a, `foreach` style iteration over the collection of nodes in the **XmlNodeList**. The following code example shows the use of the `foreach` statement.  \n  \n```vb  \nDim doc As New XmlDocument()  \ndoc.Load(\"books.xml\")  \n  \n' Get book titles.  \nDim root As XmlElement = doc.DocumentElement  \nDim elemList As XmlNodeList = root.GetElementsByTagName(\"title\")  \nDim ienum As IEnumerator = elemList.GetEnumerator()  \n' Loop over the XmlNodeList using the enumerator ienum          \nWhile ienum.MoveNext()  \n    ' Display the book title.  \n    Dim title As XmlNode = CType(ienum.Current, XmlNode)  \n    Console.WriteLine(title.InnerText)  \nEnd While  \n```  \n  \n```csharp  \n{  \n     XmlDocument doc = new XmlDocument();  \n     doc.Load(\"books.xml\");  \n  \n     // Get book titles.  \n     XmlElement root = doc.DocumentElement;  \n     XmlNodeList elemList = root.GetElementsByTagName(\"title\");  \n     IEnumerator ienum = elemList.GetEnumerator();    \n     // Loop over the XmlNodeList using the enumerator ienum          \n     while (ienum.MoveNext())  \n     {  \n          // Display the book title.  \n           XmlNode title = (XmlNode) ienum.Current;  \n           Console.WriteLine(title.InnerText);  \n     }  \n  }  \n```  \n  \n For more information on the methods and properties available on the **XmlNodeList**, see <xref:System.Xml.XmlNodeList>.  \n  \n## See Also  \n [XML Document Object Model (DOM)](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)","nodes":[{"pos":[12,60],"content":"Ordered Node Retrieval by Index | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Ordered Node Retrieval by Index | Microsoft Docs","pos":[0,48]}]},{"pos":[405,436],"content":"Ordered Node Retrieval by Index","linkify":"Ordered Node Retrieval by Index","nodes":[{"content":"Ordered Node Retrieval by Index","pos":[0,31]}]},{"content":"The World Wide Web Consortium (W3C) XML Document Object Model (DOM) also describes a NodeList, which has the ability to handle an ordered list of nodes, as opposed to the unordered set handled by the <bpt id=\"p1\">**</bpt>XmlNamedNodeMap<ept id=\"p1\">**</ept>.","pos":[437,657],"source":"The World Wide Web Consortium (W3C) XML Document Object Model (DOM) also describes a NodeList, which has the ability to handle an ordered list of nodes, as opposed to the unordered set handled by the **XmlNamedNodeMap**."},{"content":"The NodeList in the Microsoft .NET Framework is called <bpt id=\"p1\">**</bpt>XmlNodeList<ept id=\"p1\">**</ept>.","pos":[658,729],"source":" The NodeList in the Microsoft .NET Framework is called **XmlNodeList**."},{"content":"Methods and properties that return an <bpt id=\"p1\">**</bpt>XmlNodeList<ept id=\"p1\">**</ept> are:","pos":[730,788],"source":" Methods and properties that return an **XmlNodeList** are:"},{"content":"XmlNode.ChildNodes","pos":[798,816]},{"content":"XmlDocument.GetElementsByTagName","pos":[826,858]},{"content":"XmlElement.GetElementsByTagName","pos":[868,899]},{"content":"XmlNode.SelectNodes","pos":[909,928]},{"pos":[935,1100],"content":"The <bpt id=\"p1\">**</bpt>XmlNodeList<ept id=\"p1\">**</ept> has a <bpt id=\"p2\">**</bpt>Count<ept id=\"p2\">**</ept> property that can be used to write loops to iterate over the nodes in the <bpt id=\"p3\">**</bpt>XmlNodeList<ept id=\"p3\">**</ept>, as shown in the following code sample:","source":"The **XmlNodeList** has a **Count** property that can be used to write loops to iterate over the nodes in the **XmlNodeList**, as shown in the following code sample:"},{"content":"In addition to the <bpt id=\"p1\">**</bpt>Count<ept id=\"p1\">**</ept> property, there is a <bpt id=\"p2\">**</bpt>GetEnumerator<ept id=\"p2\">**</ept> method that provides a, <ph id=\"ph1\">`foreach`</ph> style iteration over the collection of nodes in the <bpt id=\"p3\">**</bpt>XmlNodeList<ept id=\"p3\">**</ept>.","pos":[1905,2075],"source":"In addition to the **Count** property, there is a **GetEnumerator** method that provides a, `foreach` style iteration over the collection of nodes in the **XmlNodeList**."},{"content":"The following code example shows the use of the <ph id=\"ph1\">`foreach`</ph> statement.","pos":[2076,2144],"source":" The following code example shows the use of the `foreach` statement."},{"pos":[3214,3333],"content":"For more information on the methods and properties available on the <bpt id=\"p1\">**</bpt>XmlNodeList<ept id=\"p1\">**</ept>, see <ph id=\"ph1\">&lt;xref:System.Xml.XmlNodeList&gt;</ph>.","source":"For more information on the methods and properties available on the **XmlNodeList**, see <xref:System.Xml.XmlNodeList>."},{"pos":[3342,3350],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3354,3456],"content":"<bpt id=\"p1\">[</bpt>XML Document Object Model (DOM)<ept id=\"p1\">](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)</ept>","source":"[XML Document Object Model (DOM)](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)"}]}