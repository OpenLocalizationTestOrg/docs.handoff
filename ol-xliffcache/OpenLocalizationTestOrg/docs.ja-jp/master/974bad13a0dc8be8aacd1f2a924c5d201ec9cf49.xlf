<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">974bad13a0dc8be8aacd1f2a924c5d201ec9cf49</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\optimizing-performance-2d-graphics-and-imaging.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d750b6e0936f5c55784bd232b9d84e7ce9099886</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c82d5e1e6a20db456bc3d3c996817faa8a9c8d66</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Optimizing Performance: 2D Graphics and Imaging | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Optimizing Performance: 2D Graphics and Imaging</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides a wide range of 2D graphics and imaging functionality that can be optimized for your application requirements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic provides information about performance optimization in those areas.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Drawing and Shapes</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides both <ph id="ph2">&lt;xref:System.Windows.Media.Drawing&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects to represent graphical drawing content.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">&lt;xref:System.Windows.Media.Drawing&gt;</ph> objects are simpler constructs than <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects and provide better performance characteristics.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> allows you to draw a graphical shape to the screen.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because they are derived from the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class, <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects can be used inside panels and most controls.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> offers several layers of access to graphics and rendering services.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>At the top layer, <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects are easy to use and provide many useful features, such as layout and event handling.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides a number of ready-to-use shape objects.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>All shape objects inherit from the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Available shape objects include <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Shapes.Line&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Shapes.Path&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Shapes.Polygon&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Shapes.Polyline&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Drawing&gt;</ph> objects, on the other hand, do not derive from the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class and provide a lighter-weight implementation for rendering shapes, images, and text.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are four types of <ph id="ph1">&lt;xref:System.Windows.Media.Drawing&gt;</ph> objects:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.GeometryDrawing&gt;</ph> Draws a shape.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.ImageDrawing&gt;</ph> Draws an image.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.GlyphRunDrawing&gt;</ph> Draws text.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.DrawingGroup&gt;</ph> Draws other drawings.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use a drawing group to combine other drawings into a single composite drawing.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.GeometryDrawing&gt;</ph> object is used to render geometry content.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class and the concrete classes which derive from it, such as <ph id="ph2">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>, provide a means for rendering 2D graphics, as well as providing hit-testing and clipping support.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Geometry objects can be used to define the region of a control, for example, or to define the clip region to apply to an image.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Geometry objects can be simple regions, such as rectangles and circles, or composite regions created from two or more geometry objects.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>More complex geometric regions can be created by combining <ph id="ph1">&lt;xref:System.Windows.Media.PathSegment&gt;</ph>-derived objects, such as <ph id="ph2">&lt;xref:System.Windows.Media.ArcSegment&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.BezierSegment&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Media.QuadraticBezierSegment&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>On the surface, the <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class and the <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> class are quite similar.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Both are used in the rendering of 2D graphics and both have similar concrete classes which derive from them, for example, <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, there are important differences between these two sets of classes.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For one, the <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class lacks some of the functionality of the <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> class, such as the ability to draw itself.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To draw a geometry object, another class such as DrawingContext, Drawing, or a Path (it is worth noting that a Path is a Shape) must be used to perform the drawing operation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Rendering properties such as fill, stroke, and the stroke thickness are on the class which draws the geometry object, while a shape object contains these properties.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>One way to think of this difference is that a geometry object defines a region, a circle for example, while a shape object defines a region, defines how that region is filled and outlined, and participates in the layout system.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects derive from the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class, using them can add significantly more memory consumption in your application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you really do not need the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> features for your graphical content, consider using the lighter-weight <ph id="ph2">&lt;xref:System.Windows.Media.Drawing&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">&lt;xref:System.Windows.Media.Drawing&gt;</ph> objects, see <bpt id="p1">[</bpt>Drawing Objects Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/drawing-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>StreamGeometry Objects</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> object is a light-weight alternative to <ph id="ph2">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> for creating geometric shapes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> when you need to describe a complex geometry.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> is optimized for handling many <ph id="ph2">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> objects and performs better when compared to using many individual <ph id="ph3">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example uses attribute syntax to create a triangular <ph id="ph1">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>GeometriesMiscSnippets_snip#StreamGeometryTriangleExampleWholePage<ept id="p2">](../../../../samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/StreamGeometryExample.xaml#streamgeometrytriangleexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> objects, see <bpt id="p1">[</bpt>Create a Shape Using a StreamGeometry<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-create-a-shape-using-a-streamgeometry.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>DrawingVisual Objects</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.DrawingVisual&gt;</ph> object is a lightweight drawing class that is used to render shapes, images, or text.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This class is considered lightweight because it does not provide layout or event handling, which improves its performance.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For this reason, drawings are ideal for backgrounds and clip art.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using DrawingVisual Objects<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/using-drawingvisual-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Images</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> imaging provides a significant improvement over the imaging capabilities in previous versions of <ph id="ph2">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Imaging capabilities, such as displaying a bitmap or using an image on a common control were primarily handled by the Microsoft Windows Graphics Device Interface (GDI) or Microsoft Windows GDI+ application programming interface (API).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These API provided baseline imaging functionality, but lacked features such as support for codec extensibility and high fidelity image support.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>WPF Imaging API have been redesigned to overcome the shortcomings of GDI and GDI+ and provide a new set of API to display and use images within your applications.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When using images, consider the following recommendations for gaining better performance:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If your application requires you to display thumbnail images, consider creating a reduced-sized version of the image.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> loads your image and decodes it to its full size.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you only want a thumbnail version of the image, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> unnecessary decodes the image to its full-size and then scales it down to a thumbnail size.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To avoid this unnecessary overhead, you can either request <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> to decode the image to a thumbnail size, or request <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> to load a thumbnail size image.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Always decode the image to desired size and not to the default size.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>As mentioned above, request <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> to decode your image to a desired size and not the default full size.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You will reduce not only your application's working set, but execution speed as well.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If possible, combine the images into a single image, such as a film strip composed of multiple images.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Imaging Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/imaging-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>BitmapScalingMode</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When animating the scale of any bitmap, the default high-quality image re-sampling algorithm can sometimes consume sufficient system resources to cause frame rate degradation, effectively causing animations to stutter.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>By setting the <ph id="ph1">&lt;xref:System.Windows.Media.RenderOptions.BitmapScalingMode%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Media.RenderOptions&gt;</ph> object to <ph id="ph3">&lt;xref:System.Windows.Media.BitmapScalingMode&gt;</ph> you can create a smoother animation when scaling a bitmap.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.BitmapScalingMode&gt;</ph> mode tells the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> rendering engine to switch from a quality-optimized algorithm to a speed-optimized algorithm when processing images.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the <ph id="ph1">&lt;xref:System.Windows.Media.BitmapScalingMode&gt;</ph> for an image object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RenderOptions#RenderOptionsSnippet2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/RenderOptions/CSharp/Window1.xaml.cs#renderoptionssnippet2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RenderOptions#RenderOptionsSnippet2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/RenderOptions/visualbasic/window1.xaml.vb#renderoptionssnippet2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CachingHint</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> does not cache the rendered contents of <ph id="ph2">&lt;xref:System.Windows.Media.TileBrush&gt;</ph> objects, such as <ph id="ph3">&lt;xref:System.Windows.Media.DrawingBrush&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Media.VisualBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In static scenarios where neither the contents nor use of the <ph id="ph1">&lt;xref:System.Windows.Media.TileBrush&gt;</ph> in the scene is changing, this makes sense, since it conserves video memory.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It does not make as much sense when a <ph id="ph1">&lt;xref:System.Windows.Media.TileBrush&gt;</ph> with static content is used in a non-static way—for example, when a static <ph id="ph2">&lt;xref:System.Windows.Media.DrawingBrush&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Media.VisualBrush&gt;</ph> is mapped to the surface of a rotating 3D object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The default behavior of <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is to re-render the entire content of the <ph id="ph2">&lt;xref:System.Windows.Media.DrawingBrush&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Media.VisualBrush&gt;</ph> for every frame, even though the content is unchanging.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>By setting the <ph id="ph1">&lt;xref:System.Windows.Media.RenderOptions.CachingHint%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Media.RenderOptions&gt;</ph> object to <ph id="ph3">&lt;xref:System.Windows.Media.CachingHint&gt;</ph> you can increase performance by using cached versions of the tiled brush objects.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimum%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum%2A&gt;</ph> property values are relative size values that determine when the <ph id="ph3">&lt;xref:System.Windows.Media.TileBrush&gt;</ph> object should be regenerated due to changes in scale.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, by setting the <ph id="ph1">&lt;xref:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum%2A&gt;</ph> property to 2.0, the cache for the <ph id="ph2">&lt;xref:System.Windows.Media.TileBrush&gt;</ph> only needs to be regenerated when its size exceeds twice the size of the current cache.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the caching hint option for a <ph id="ph1">&lt;xref:System.Windows.Media.DrawingBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>RenderOptions#RenderOptionsSnippet3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/RenderOptions/CSharp/Window1.xaml.cs#renderoptionssnippet3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>RenderOptions#RenderOptionsSnippet3<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/RenderOptions/visualbasic/window1.xaml.vb#renderoptionssnippet3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Optimizing WPF Application Performance<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-wpf-application-performance.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Planning for Application Performance<ept id="p1">](../../../../docs/framework/wpf/advanced/planning-for-application-performance.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Taking Advantage of Hardware<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-taking-advantage-of-hardware.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout and Design<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-layout-and-design.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Behavior<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-object-behavior.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-application-resources.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Text<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-text.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-data-binding.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Other Performance Recommendations<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-other-recommendations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation Tips and Tricks<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-tips-and-tricks.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>