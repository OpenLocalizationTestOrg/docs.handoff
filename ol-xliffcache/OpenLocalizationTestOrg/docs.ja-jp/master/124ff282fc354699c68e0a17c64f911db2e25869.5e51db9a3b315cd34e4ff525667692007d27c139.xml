{"content":"---\ntitle: \"sbyte - C# Reference\"\nms.custom: seodec18\nms.date: 03/14/2017\nf1_keywords:\n  - \"sbyte_CSharpKeyword\"\n  - \"sbyte\"\nhelpviewer_keywords:\n  - \"sbyte keyword [C#]\"\nms.assetid: 1a9c7b48-73d1-4d33-b485-c4faf0a816bc\n---\n# sbyte (C# Reference)\n\n`sbyte` denotes an integral type that stores values according to the size and range shown in the following table.\n\n|Type|Range|Size|.NET type|\n|----------|-----------|----------|-------------------------|\n|`sbyte`|-128 to 127|Signed 8-bit integer|<xref:System.SByte?displayProperty=nameWithType>|\n\n## Literals\n\nYou can declare and initialize an `sbyte` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.\n\nIn the following example, integers equal to -102 that are represented as decimal, hexadecimal, and binary literals are converted from [int](../../../csharp/language-reference/keywords/int.md) to `sbyte` values.\n\n[!code-csharp[SByte](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#SByte)]\n\n> [!NOTE]\n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7.0, a couple of features have been added to enhance readability.\n- C# 7.0 allows the usage of the underscore character, `_`, as a digit separator.\n- C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix. A decimal literal isn't permitted to have a leading underscore.\n\nSome examples are shown below.\n\n[!code-csharp[SByteSeparator](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#SByteS)]\n\nIf the integer literal is outside the range of `sbyte` (that is, if it is less than <xref:System.SByte.MinValue?displayProperty=nameWithType> or greater than <xref:System.SByte.MaxValue?displayProperty=nameWithType>, a compilation error occurs. When an integer literal has no suffix, its type is the first of these types in which its value can be represented: [int](int.md), [uint](uint.md), [long](long.md), [ulong](ulong.md). This means that, in this example, the numeric literals `0x9A` and `0b10011010` are interpreted as 32-bit signed integers with a value of 156, which exceeds <xref:System.SByte.MaxValue?displayProperty=nameWithType>. Because of this, the casting operator is needed, and the assignment must occur in an [unchecked](unchecked.md) context.\n\n## Compiler overload resolution\n\nA cast must be used when calling overloaded methods. Consider, for example, the following overloaded methods that use `sbyte` and [int](../../../csharp/language-reference/keywords/int.md) parameters:\n\n```csharp\npublic static void SampleMethod(int i) {}\npublic static void SampleMethod(sbyte b) {}\n```\n\nUsing the `sbyte` cast guarantees that the correct type is called, for example:\n\n```csharp\n// Calling the method with the int parameter:\nSampleMethod(5);\n// Calling the method with the sbyte parameter:\nSampleMethod((sbyte)5);\n```\n\n## Conversions\n\nThere is a predefined implicit conversion from `sbyte` to [short](../../../csharp/language-reference/keywords/short.md), [int](../../../csharp/language-reference/keywords/int.md), [long](../../../csharp/language-reference/keywords/long.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md).\n\nYou cannot implicitly convert nonliteral numeric types of larger storage size to `sbyte` (see [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) for the storage sizes of integral types). Consider, for example, the following two `sbyte` variables `x` and `y`:\n\n```csharp\nsbyte x = 10, y = 20;\n```\n\nThe following assignment statement will produce a compilation error, because the arithmetic expression on the right side of the assignment operator evaluates to [int](../../../csharp/language-reference/keywords/int.md) by default.\n\n```csharp\nsbyte z = x + y;   // Error: conversion from int to sbyte\n```\n\nTo fix this problem, cast the expression as in the following example:\n\n```csharp\nsbyte z = (sbyte)(x + y);   // OK: explicit conversion\n```\n\nIt is possible though to use the following statements, where the destination variable has the same storage size or a larger storage size:\n\n```csharp\nsbyte x = 10, y = 20;\nint m = x + y;\nlong n = x + y;\n```\n\nNotice also that there is no implicit conversion from floating-point types to `sbyte`. For example, the following statement generates a compiler error unless an explicit cast is used:\n\n```csharp\nsbyte x = 3.0;         // Error: no implicit conversion from double\nsbyte y = (sbyte)3.0;  // OK: explicit conversion\n```\n\nFor information about arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md).\n\nFor more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).\n\n## C# Language Specification\n\nFor more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- <xref:System.SByte>\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)\n- [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)\n- [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)\n","nodes":[{"pos":[4,219],"embed":true,"restype":"x-metadata","content":"title: \"sbyte - C# Reference\"\nms.custom: seodec18\nms.date: 03/14/2017\nf1_keywords:\n  - \"sbyte_CSharpKeyword\"\n  - \"sbyte\"\nhelpviewer_keywords:\n  - \"sbyte keyword [C#]\"\nms.assetid: 1a9c7b48-73d1-4d33-b485-c4faf0a816bc","nodes":[{"content":"sbyte - C# Reference","nodes":[{"pos":[0,20],"content":"sbyte - C# Reference","nodes":[{"content":"sbyte - C# Reference","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[226,246],"content":"sbyte (C# Reference)","linkify":"sbyte (C# Reference)","nodes":[{"content":"sbyte (C# Reference)","pos":[0,20]}]},{"pos":[248,361],"content":"<ph id=\"ph1\">`sbyte`</ph> denotes an integral type that stores values according to the size and range shown in the following table.","source":"`sbyte` denotes an integral type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[364,368]},{"content":"Range","pos":[369,374]},{"content":"Size","pos":[375,379]},{"content":".NET type","pos":[380,389]},{"content":"-128 to 127","pos":[462,473]},{"content":"Signed 8-bit integer","pos":[474,494]},{"pos":[549,557],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"pos":[559,714],"content":"You can declare and initialize an <ph id=\"ph1\">`sbyte`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.","source":"You can declare and initialize an `sbyte` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it."},{"pos":[716,926],"content":"In the following example, integers equal to -102 that are represented as decimal, hexadecimal, and binary literals are converted from <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> to <ph id=\"ph1\">`sbyte`</ph> values.","source":"In the following example, integers equal to -102 that are represented as decimal, hexadecimal, and binary literals are converted from [int](../../../csharp/language-reference/keywords/int.md) to `sbyte` values."},{"pos":[1044,1206],"content":"[!NOTE]\nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[8,160],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"content":"Starting with C# 7.0, a couple of features have been added to enhance readability.","pos":[1208,1290]},{"pos":[1293,1372],"content":"C# 7.0 allows the usage of the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator.","source":"C# 7.0 allows the usage of the underscore character, `_`, as a digit separator."},{"content":"C# 7.2 allows <ph id=\"ph1\">`_`</ph> to be used as a digit separator for a binary or hexadecimal literal, after the prefix.","pos":[1375,1479],"source":"C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix."},{"content":"A decimal literal isn't permitted to have a leading underscore.","pos":[1480,1543]},{"content":"Some examples are shown below.","pos":[1545,1575]},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`sbyte`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.SByte.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.SByte.MaxValue?displayProperty=nameWithType&gt;</ph>, a compilation error occurs.","pos":[1701,1945],"source":"If the integer literal is outside the range of `sbyte` (that is, if it is less than <xref:System.SByte.MinValue?displayProperty=nameWithType> or greater than <xref:System.SByte.MaxValue?displayProperty=nameWithType>, a compilation error occurs."},{"content":"When an integer literal has no suffix, its type is the first of these types in which its value can be represented: <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>, <bpt id=\"p2\">[</bpt>uint<ept id=\"p2\">](uint.md)</ept>, <bpt id=\"p3\">[</bpt>long<ept id=\"p3\">](long.md)</ept>, <bpt id=\"p4\">[</bpt>ulong<ept id=\"p4\">](ulong.md)</ept>.","pos":[1946,2128],"source":" When an integer literal has no suffix, its type is the first of these types in which its value can be represented: [int](int.md), [uint](uint.md), [long](long.md), [ulong](ulong.md)."},{"content":"This means that, in this example, the numeric literals <ph id=\"ph1\">`0x9A`</ph> and <ph id=\"ph2\">`0b10011010`</ph> are interpreted as 32-bit signed integers with a value of 156, which exceeds <ph id=\"ph3\">&lt;xref:System.SByte.MaxValue?displayProperty=nameWithType&gt;</ph>.","pos":[2129,2343],"source":" This means that, in this example, the numeric literals `0x9A` and `0b10011010` are interpreted as 32-bit signed integers with a value of 156, which exceeds <xref:System.SByte.MaxValue?displayProperty=nameWithType>."},{"content":"Because of this, the casting operator is needed, and the assignment must occur in an <bpt id=\"p1\">[</bpt>unchecked<ept id=\"p1\">](unchecked.md)</ept> context.","pos":[2344,2463],"source":" Because of this, the casting operator is needed, and the assignment must occur in an [unchecked](unchecked.md) context."},{"pos":[2468,2496],"content":"Compiler overload resolution","linkify":"Compiler overload resolution","nodes":[{"content":"Compiler overload resolution","pos":[0,28]}]},{"content":"A cast must be used when calling overloaded methods.","pos":[2498,2550]},{"content":"Consider, for example, the following overloaded methods that use <ph id=\"ph1\">`sbyte`</ph> and <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> parameters:","pos":[2551,2697],"source":" Consider, for example, the following overloaded methods that use `sbyte` and [int](../../../csharp/language-reference/keywords/int.md) parameters:"},{"pos":[2800,2879],"content":"Using the <ph id=\"ph1\">`sbyte`</ph> cast guarantees that the correct type is called, for example:","source":"Using the `sbyte` cast guarantees that the correct type is called, for example:"},{"pos":[3034,3045],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"pos":[3047,3485],"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`sbyte`</ph> to <bpt id=\"p1\">[</bpt>short<ept id=\"p1\">](../../../csharp/language-reference/keywords/short.md)</ept>, <bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id=\"p3\">[</bpt>long<ept id=\"p3\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p4\">[</bpt>float<ept id=\"p4\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p5\">[</bpt>double<ept id=\"p5\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p6\">[</bpt>decimal<ept id=\"p6\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","source":"There is a predefined implicit conversion from `sbyte` to [short](../../../csharp/language-reference/keywords/short.md), [int](../../../csharp/language-reference/keywords/int.md), [long](../../../csharp/language-reference/keywords/long.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"You cannot implicitly convert nonliteral numeric types of larger storage size to <ph id=\"ph1\">`sbyte`</ph> (see <bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept> for the storage sizes of integral types).","pos":[3487,3714],"source":"You cannot implicitly convert nonliteral numeric types of larger storage size to `sbyte` (see [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) for the storage sizes of integral types)."},{"content":"Consider, for example, the following two <ph id=\"ph1\">`sbyte`</ph> variables <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph>:","pos":[3715,3786],"source":" Consider, for example, the following two `sbyte` variables `x` and `y`:"},{"pos":[3825,4055],"content":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right side of the assignment operator evaluates to <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> by default.","source":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right side of the assignment operator evaluates to [int](../../../csharp/language-reference/keywords/int.md) by default."},{"content":"To fix this problem, cast the expression as in the following example:","pos":[4130,4199]},{"content":"It is possible though to use the following statements, where the destination variable has the same storage size or a larger storage size:","pos":[4271,4408]},{"content":"Notice also that there is no implicit conversion from floating-point types to <ph id=\"ph1\">`sbyte`</ph>.","pos":[4478,4564],"source":"Notice also that there is no implicit conversion from floating-point types to `sbyte`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[4565,4661]},{"pos":[4796,5027],"content":"For information about arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>.","source":"For information about arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md)."},{"pos":[5029,5219],"content":"For more information about implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"pos":[5224,5249],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](~/_csharplang/spec/types.md#integral-types)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[5251,5409],"source":"For more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[5410,5486]},{"pos":[5491,5499],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5525,5584],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[5587,5653],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[5656,5723],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[5726,5817],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept>","source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)"},{"pos":[5820,5911],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept>","source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)"},{"pos":[5914,6033],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)"},{"pos":[6036,6155],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}