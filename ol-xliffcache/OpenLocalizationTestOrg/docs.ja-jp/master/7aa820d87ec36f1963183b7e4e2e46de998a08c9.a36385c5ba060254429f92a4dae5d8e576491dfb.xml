{"content":"---\ntitle: \"Implicitly Typed Arrays - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords:\n  - \"arrays [C#], implicitly-typed\"\n  - \"implicitly-typed arrays [C#]\"\n  - \"C# language, implicitly typed arrays\"\nms.assetid: e05be95c-6732-403d-ae42-b35f057cbbea\n---\n\n# Implicitly Typed Arrays (C# Programming Guide)\n\nYou can create an implicitly-typed array in which the type of the array instance is inferred from the elements specified in the array initializer. The rules for any implicitly-typed variable also apply to implicitly-typed arrays. For more information, see [Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md).\n\nImplicitly-typed arrays are usually used in query expressions together with anonymous types and object and collection initializers.\n\nThe following examples show how to create an implicitly-typed array:\n\n[!code-csharp[csProgGuideLINQ#37](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideLINQ/CS/csRef30LangFeatures_2.cs#37)]\n\nIn the previous example, notice that with implicitly-typed arrays, no square brackets are used on the left side of the initialization statement. Note also that jagged arrays are initialized by using `new []` just like single-dimension arrays.\n\n## Implicitly-typed Arrays in Object Initializers\n\nWhen you create an anonymous type that contains an array, the array must be implicitly typed in the type's object initializer. In the following example, `contacts` is an implicitly-typed array of anonymous types, each of which contains an array named `PhoneNumbers`. Note that the `var` keyword is not used inside the object initializers.\n\n[!code-csharp[csProgGuideLINQ#38](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideLINQ/CS/csRef30LangFeatures_2.cs#38)]\n\n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)\n- [Arrays](../../../csharp/programming-guide/arrays/index.md)\n- [Anonymous Types](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)\n- [Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)\n- [var](../../../csharp/language-reference/keywords/var.md)\n- [LINQ Query Expressions](../../../csharp/programming-guide/linq-query-expressions/index.md)\n","nodes":[{"pos":[4,283],"embed":true,"restype":"x-metadata","content":"title: \"Implicitly Typed Arrays - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords:\n  - \"arrays [C#], implicitly-typed\"\n  - \"implicitly-typed arrays [C#]\"\n  - \"C# language, implicitly typed arrays\"\nms.assetid: e05be95c-6732-403d-ae42-b35f057cbbea","nodes":[{"content":"Implicitly Typed Arrays - C# Programming Guide","nodes":[{"pos":[0,46],"content":"Implicitly Typed Arrays - C# Programming Guide","nodes":[{"content":"Implicitly Typed Arrays - C# Programming Guide","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[291,337],"content":"Implicitly Typed Arrays (C# Programming Guide)","linkify":"Implicitly Typed Arrays (C# Programming Guide)","nodes":[{"content":"Implicitly Typed Arrays (C# Programming Guide)","pos":[0,46]}]},{"content":"You can create an implicitly-typed array in which the type of the array instance is inferred from the elements specified in the array initializer.","pos":[339,485]},{"content":"The rules for any implicitly-typed variable also apply to implicitly-typed arrays.","pos":[486,568]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Implicitly Typed Local Variables<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>.","pos":[569,721],"source":" For more information, see [Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)."},{"content":"Implicitly-typed arrays are usually used in query expressions together with anonymous types and object and collection initializers.","pos":[723,854]},{"content":"The following examples show how to create an implicitly-typed array:","pos":[856,924]},{"content":"In the previous example, notice that with implicitly-typed arrays, no square brackets are used on the left side of the initialization statement.","pos":[1057,1201]},{"content":"Note also that jagged arrays are initialized by using <ph id=\"ph1\">`new []`</ph> just like single-dimension arrays.","pos":[1202,1299],"source":" Note also that jagged arrays are initialized by using `new []` just like single-dimension arrays."},{"pos":[1304,1350],"content":"Implicitly-typed Arrays in Object Initializers","linkify":"Implicitly-typed Arrays in Object Initializers","nodes":[{"content":"Implicitly-typed Arrays in Object Initializers","pos":[0,46]}]},{"content":"When you create an anonymous type that contains an array, the array must be implicitly typed in the type's object initializer.","pos":[1352,1478]},{"content":"In the following example, <ph id=\"ph1\">`contacts`</ph> is an implicitly-typed array of anonymous types, each of which contains an array named <ph id=\"ph2\">`PhoneNumbers`</ph>.","pos":[1479,1618],"source":" In the following example, `contacts` is an implicitly-typed array of anonymous types, each of which contains an array named `PhoneNumbers`."},{"content":"Note that the <ph id=\"ph1\">`var`</ph> keyword is not used inside the object initializers.","pos":[1619,1690],"source":" Note that the `var` keyword is not used inside the object initializers."},{"pos":[1826,1834],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1838,1904],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1907,2032],"content":"<bpt id=\"p1\">[</bpt>Implicitly Typed Local Variables<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>","source":"[Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)"},{"pos":[2035,2094],"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/index.md)</ept>","source":"[Arrays](../../../csharp/programming-guide/arrays/index.md)"},{"pos":[2097,2188],"content":"<bpt id=\"p1\">[</bpt>Anonymous Types<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)</ept>","source":"[Anonymous Types](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)"},{"pos":[2191,2320],"content":"<bpt id=\"p1\">[</bpt>Object and Collection Initializers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>","source":"[Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)"},{"pos":[2323,2380],"content":"<bpt id=\"p1\">[</bpt>var<ept id=\"p1\">](../../../csharp/language-reference/keywords/var.md)</ept>","source":"[var](../../../csharp/language-reference/keywords/var.md)"},{"pos":[2383,2474],"content":"<bpt id=\"p1\">[</bpt>LINQ Query Expressions<ept id=\"p1\">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept>","source":"[LINQ Query Expressions](../../../csharp/programming-guide/linq-query-expressions/index.md)"}]}