{"content":"---\ntitle: \"IHostMemoryManager::VirtualAlloc Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"IHostMemoryManager.VirtualAlloc\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IHostMemoryManager::VirtualAlloc\"\nhelpviewer_keywords: \n  - \"VirtualAlloc method [.NET Framework hosting]\"\n  - \"IHostMemoryManager::VirtualAlloc method [.NET Framework hosting]\"\nms.assetid: 4dff3646-a050-4bd9-ac31-fe307e8637ec\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# IHostMemoryManager::VirtualAlloc Method\nServes as a logical wrapper for the corresponding Win32 function. The Win32 implementation of `VirtualAlloc` reserves or commits a region of pages in the virtual address space of the calling process.  \n  \n## Syntax  \n  \n```  \nHRESULT VirtualAlloc (  \n    [in]  void*   pAddress,  \n    [in]  SIZE_T  dwSize,  \n    [in]  DWORD   flAllocationType,  \n    [in]  DWORD   flProtect,  \n    [in]  EMemoryCriticalLevel dwCriticalLevel,  \n    [out] void**  ppMem  \n);  \n```  \n  \n## Parameters  \n `pAddress`  \n [in] A pointer to the starting address of the region to allocate.  \n  \n `dwSize`  \n [in] The size, in bytes, of the region.  \n  \n `flAllocationType`  \n [in] The type of memory allocation.  \n  \n `flProtect`  \n [in] Memory protection for the region of pages to be allocated.  \n  \n `dwCriticalLevel`  \n [in] An [EMemoryCriticalLevel](../../../../docs/framework/unmanaged-api/hosting/ememorycriticallevel-enumeration.md) value that indicates the impact of an allocation failure.  \n  \n `ppMem`  \n [out] Pointer to the starting address of the allocated memory, or null if the request could not be satisfied.  \n  \n## Return Value  \n  \n|HRESULT|Description|  \n|-------------|-----------------|  \n|S_OK|`VirtualAlloc` returned successfully.|  \n|HOST_E_CLRNOTAVAILABLE|The common language runtime (CLR) has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.|  \n|HOST_E_TIMEOUT|The call timed out.|  \n|HOST_E_NOT_OWNER|The caller does not own the lock.|  \n|HOST_E_ABANDONED|An event was canceled while a blocked thread or fiber was waiting on it.|  \n|E_FAIL|An unknown catastrophic failure occurred. When a method returns E_FAIL, the CLR is no longer usable within the process. Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.|  \n|E_OUTOFMEMORY|Not enough memory was available to complete the allocation request|  \n  \n## Remarks  \n You reserve a region in the address space of your process by calling `VirtualAlloc`. The `pAddress` parameter contains the beginning address of the memory block you want. This parameter is typically set to null. The operating system keeps a record of free address ranges available to your process. A `pAddress` value of null instructs the system to reserve the region wherever it sees fit. Alternatively, you can provide a specific starting address for the memory block. In both cases, the output parameter `ppMem` is returned as a pointer to the allocated memory. The function itself returns an HRESULT value.  \n  \n The Win32 `VirtualAlloc` function does not have a `ppMem` parameter, and returns the pointer to the allocated memory instead. For more information, see the Windows Platform documentation.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** MSCorEE.h  \n  \n **Library:** Included as a resource in MSCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See also\n\n- [IHostMemoryManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihostmemorymanager-interface.md)\n","nodes":[{"pos":[4,489],"embed":true,"restype":"x-metadata","content":"title: \"IHostMemoryManager::VirtualAlloc Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"IHostMemoryManager.VirtualAlloc\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IHostMemoryManager::VirtualAlloc\"\nhelpviewer_keywords: \n  - \"VirtualAlloc method [.NET Framework hosting]\"\n  - \"IHostMemoryManager::VirtualAlloc method [.NET Framework hosting]\"\nms.assetid: 4dff3646-a050-4bd9-ac31-fe307e8637ec\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"IHostMemoryManager::VirtualAlloc Method","nodes":[{"pos":[0,39],"content":"IHostMemoryManager::VirtualAlloc Method","nodes":[{"content":"IHostMemoryManager::VirtualAlloc Method","pos":[0,39]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[496,535],"content":"IHostMemoryManager::VirtualAlloc Method","linkify":"IHostMemoryManager::VirtualAlloc Method","nodes":[{"content":"IHostMemoryManager::VirtualAlloc Method","pos":[0,39]}]},{"content":"Serves as a logical wrapper for the corresponding Win32 function.","pos":[536,601]},{"content":"The Win32 implementation of <ph id=\"ph1\">`VirtualAlloc`</ph> reserves or commits a region of pages in the virtual address space of the calling process.","pos":[602,735],"source":" The Win32 implementation of `VirtualAlloc` reserves or commits a region of pages in the virtual address space of the calling process."},{"pos":[744,750],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1007,1017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A pointer to the starting address of the region to allocate.","pos":[1035,1100]},{"content":"[in] The size, in bytes, of the region.","pos":[1119,1158]},{"content":"[in] The type of memory allocation.","pos":[1187,1222]},{"content":"[in] Memory protection for the region of pages to be allocated.","pos":[1244,1307]},{"content":"[in] An <bpt id=\"p1\">[</bpt>EMemoryCriticalLevel<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ememorycriticallevel-enumeration.md)</ept> value that indicates the impact of an allocation failure.","pos":[1335,1509],"source":"[in] An [EMemoryCriticalLevel](../../../../docs/framework/unmanaged-api/hosting/ememorycriticallevel-enumeration.md) value that indicates the impact of an allocation failure."},{"content":"[out] Pointer to the starting address of the allocated memory, or null if the request could not be satisfied.","pos":[1527,1636]},{"pos":[1645,1657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"HRESULT","pos":[1664,1671]},{"content":"Description","pos":[1672,1683]},{"content":"S_OK","pos":[1724,1728]},{"pos":[1729,1766],"content":"<ph id=\"ph1\">`VirtualAlloc`</ph> returned successfully.","source":"`VirtualAlloc` returned successfully."},{"content":"HOST_E_CLRNOTAVAILABLE","pos":[1771,1793]},{"content":"The common language runtime (CLR) has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.","pos":[1794,1958]},{"content":"HOST_E_TIMEOUT","pos":[1963,1977]},{"content":"The call timed out.","pos":[1978,1997]},{"content":"HOST_E_NOT_OWNER","pos":[2002,2018]},{"content":"The caller does not own the lock.","pos":[2019,2052]},{"content":"HOST_E_ABANDONED","pos":[2057,2073]},{"content":"An event was canceled while a blocked thread or fiber was waiting on it.","pos":[2074,2146]},{"content":"E_FAIL","pos":[2151,2157]},{"content":"An unknown catastrophic failure occurred.","pos":[2158,2199]},{"content":"When a method returns E_FAIL, the CLR is no longer usable within the process.","pos":[2200,2277]},{"content":"Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.","pos":[2278,2344]},{"content":"E_OUTOFMEMORY","pos":[2349,2362]},{"content":"Not enough memory was available to complete the allocation request","pos":[2363,2429]},{"pos":[2439,2446],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You reserve a region in the address space of your process by calling <ph id=\"ph1\">`VirtualAlloc`</ph>.","pos":[2450,2534],"source":"You reserve a region in the address space of your process by calling `VirtualAlloc`."},{"content":"The <ph id=\"ph1\">`pAddress`</ph> parameter contains the beginning address of the memory block you want.","pos":[2535,2620],"source":" The `pAddress` parameter contains the beginning address of the memory block you want."},{"content":"This parameter is typically set to null.","pos":[2621,2661]},{"content":"The operating system keeps a record of free address ranges available to your process.","pos":[2662,2747]},{"content":"A <ph id=\"ph1\">`pAddress`</ph> value of null instructs the system to reserve the region wherever it sees fit.","pos":[2748,2839],"source":" A `pAddress` value of null instructs the system to reserve the region wherever it sees fit."},{"content":"Alternatively, you can provide a specific starting address for the memory block.","pos":[2840,2920]},{"content":"In both cases, the output parameter <ph id=\"ph1\">`ppMem`</ph> is returned as a pointer to the allocated memory.","pos":[2921,3014],"source":" In both cases, the output parameter `ppMem` is returned as a pointer to the allocated memory."},{"content":"The function itself returns an HRESULT value.","pos":[3015,3060]},{"content":"The Win32 <ph id=\"ph1\">`VirtualAlloc`</ph> function does not have a <ph id=\"ph2\">`ppMem`</ph> parameter, and returns the pointer to the allocated memory instead.","pos":[3067,3192],"source":"The Win32 `VirtualAlloc` function does not have a `ppMem` parameter, and returns the pointer to the allocated memory instead."},{"content":"For more information, see the Windows Platform documentation.","pos":[3193,3254]},{"pos":[3263,3275],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3279,3383],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3390,3411],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> MSCorEE.h","source":"**Header:** MSCorEE.h"},{"pos":[3418,3468],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Included as a resource in MSCorEE.dll","source":"**Library:** Included as a resource in MSCorEE.dll"},{"pos":[3475,3583],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[3592,3600],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3604,3716],"content":"<bpt id=\"p1\">[</bpt>IHostMemoryManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihostmemorymanager-interface.md)</ept>","source":"[IHostMemoryManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihostmemorymanager-interface.md)"}]}