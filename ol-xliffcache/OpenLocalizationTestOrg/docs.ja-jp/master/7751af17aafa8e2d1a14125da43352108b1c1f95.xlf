<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="expression-trees-building.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7751af17aafa8e2d1a14125da43352108b1c1f95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\expression-trees-building.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34b772bbfbcc01e837ba05d6de43fc35ad89e47d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7d1f89d3f4b9e4ecde73ac80bba4f2a2aa139ac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Building Expression Trees</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about techniques for building expression trees.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Building Expression Trees</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous -- Interpreting Expressions<ept id="p1">](expression-trees-interpreting.md)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>All the expression trees you've seen so far have been created by the C# compiler.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>All you had to do was create a lambda expression that was assigned to a variable typed as an <ph id="ph1">`Expression&lt;Func&lt;T&gt;&gt;`</ph> or some similar type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>That's not the only way to create an expression tree.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For many scenarios you may find that you need to build an expression in memory at runtime.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Building Expression Trees is complicated by the fact that those expression trees are immutable.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Being immutable means that you must build the tree from the leaves up to the root.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The APIs you'll use to build expression trees reflect this fact: The methods you'll use to build a node take all its children as arguments.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Let's walk through a few examples to show you the techniques.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Creating Nodes</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Let's start relatively simply again.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>We'll use the addition expression I've been working with throughout these sections:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To construct that expression tree, you must construct the leaf nodes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The leaf nodes are constants, so you can use the <ph id="ph1">`Expression.Constant`</ph> method to create the nodes:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Next, you'll build the addition expression:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Once you've got the addition expression, you can create the lambda expression:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is a very simple lambda expression, because it contains no arguments.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Later in this section, you'll see how to map arguments to parameters and build more complicated expressions.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For expressions that are as simple as this one, you may combine all the calls into a single statement:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Building a Tree</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>That's the basics of building an expression tree in memory.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>More complex trees generally mean more node types, and more nodes in the tree.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Let's run through one more example and show two more node types that you will typically build when you create expression trees: the argument nodes, and method call nodes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Let's build an expression tree to create this expression:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You'll start by creating parameter expressions for <ph id="ph1">`x`</ph> and <ph id="ph2">`y`</ph>:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creating the multiplication and addition expressions follows the pattern you've already seen:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Next, you need to create a method call expression for the call to <ph id="ph1">`Math.Sqrt`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>And  then finally, you put the method call into a lambda expression, and make sure to define the arguments to the lambda expression:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this more complicated example, you see a couple more techniques that you will often need to create expression trees.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>First, you need to create the objects that represent parameters or local variables before you use them.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Once you've created those objects, you can use them in your expression tree wherever you need.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Second, you need to use a subset of the Reflection APIs to create a <ph id="ph1">`MethodInfo`</ph> object so that you can create an expression tree to access that method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You must limit yourself to the subset of the Reflection APIs that are available on the .NET Core platform.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Again, these techniques will extend to other expression trees.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Building Code In Depth</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You aren't limited in what you can build using these APIs.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, the more complicated expression tree that you want to build, the more difficult the code is to manage and to read.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Let's build an expression tree that is the equivalent of this code:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Notice above that I did not build the expression tree, but simply the delegate.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`Expression`</ph> class, you can't build statement lambdas.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Here's the code that is required to build the same functionality.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It's complicated by the fact that there isn't an API to build a <ph id="ph1">`while`</ph> loop, instead you need to build a loop that contains a conditional test, and a label target to break out of the loop.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The code to build the expression tree for the factorial function is quite a bit longer, more complicated, and it's riddled with labels and break statements and other elements we'd like to avoid in our everyday coding tasks.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For this section, I've also updated the visitor code to visit every node in this expression tree and write out information about the nodes that are created in this sample.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can <bpt id="p1">[</bpt>view or download the sample code<ept id="p1">](https://github.com/dotnet/samples/tree/master/csharp/expression-trees)</ept> at the dotnet/docs GitHub repository.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Experiment for yourself by building and running the samples.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For download instructions, see <bpt id="p1">[</bpt>Samples and Tutorials<ept id="p1">](../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Examining the APIs</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The expression tree APIs are some of the more difficult to navigate in .NET Core, but that's fine.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Their purpose is a rather complex undertaking: writing code that generates code at runtime.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>They are necessarily complicated to provide a balance between supporting all the control structures available in the C# language and keeping the surface area of the APIs as small as reasonable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This balance means that many control structures are represented not by their C# constructs, but by constructs that represent the underlying logic that the compiler generates from these higher level constructs.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Also, at this time, there are C# expressions that cannot be built directly using <ph id="ph1">`Expression`</ph> class methods.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In general, these will be the newest operators and expressions added in C# 5 and C# 6.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>(For example, <ph id="ph1">`async`</ph> expressions cannot be built, and the new <ph id="ph2">`?.`</ph> operator cannot be directly created.)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Next -- Translating Expressions<ept id="p1">](expression-trees-translating.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>