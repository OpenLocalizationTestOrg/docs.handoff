{"content":"---\ntitle: \"How to: Implement a Producer-Consumer Dataflow Pattern\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"TPL dataflow library, implementing producer-consumer pattern\"\n  - \"Task Parallel Library, dataflows\"\n  - \"producer-consumer patterns, implementing [TPL]\"\nms.assetid: 47a1d38c-fe9c-44aa-bd15-937bd5659b0b\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Implement a Producer-Consumer Dataflow Pattern\nThis document describes how to use the TPL Dataflow Library to implement a producer-consumer pattern. In this pattern, the *producer* sends messages to a message block, and the *consumer* reads messages from that block.  \n\n[!INCLUDE [tpl-install-instructions](../../../includes/tpl-install-instructions.md)]\n  \n## Example  \n The following example demonstrates a basic producer- consumer model that uses dataflow. The `Produce` method writes arrays that contain random bytes of data to a <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601?displayProperty=nameWithType> object and the `Consume` method reads bytes from a <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601?displayProperty=nameWithType> object. By acting on the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> and <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interfaces, instead of their derived types, you can write reusable code that can act on a variety of dataflow block types. This example uses the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> class. Because the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> class acts as both a source block and as a target block, the producer and the consumer can use a shared object to transfer data.  \n  \n The `Produce` method calls the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> method in a loop to synchronously write data to the target block. After the `Produce` method writes all data to the target block, it calls the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> method to indicate that the block will never have additional data available. The `Consume` method uses the [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) operators ([Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) in Visual Basic) to asynchronously compute the total number of bytes that are received from the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> object. To act asynchronously, the `Consume` method calls the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync%2A> method to receive a notification when the source block has data available and when the source block will never have additional data available.  \n  \n [!code-csharp[TPLDataflow_ProducerConsumer#1](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_producerconsumer/cs/dataflowproducerconsumer.cs#1)]\n [!code-vb[TPLDataflow_ProducerConsumer#1](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_producerconsumer/vb/dataflowproducerconsumer.vb#1)]  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `DataflowProducerConsumer.cs` (`DataflowProducerConsumer.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.  \n  \n Visual C#  \n  \n **csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowProducerConsumer.cs**  \n  \n Visual Basic  \n  \n **vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowProducerConsumer.vb**  \n  \n## Robust Programming  \n The preceding example uses just one consumer to process the source data. If you have multiple consumers in your application, use the <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> method to read data from the source block, as shown in the following example.  \n  \n [!code-csharp[TPLDataflow_ProducerConsumer#2](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_producerconsumer/cs/dataflowproducerconsumer.cs#2)]\n [!code-vb[TPLDataflow_ProducerConsumer#2](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_producerconsumer/vb/dataflowproducerconsumer.vb#2)]  \n  \n The <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> method returns `False` when no data is available. When multiple consumers must access the source block concurrently, this mechanism guarantees that data is still available after the call to <xref:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync%2A>.  \n  \n## See also\n\n- [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)\n","nodes":[{"pos":[4,424],"embed":true,"restype":"x-metadata","content":"title: \"How to: Implement a Producer-Consumer Dataflow Pattern\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"TPL dataflow library, implementing producer-consumer pattern\"\n  - \"Task Parallel Library, dataflows\"\n  - \"producer-consumer patterns, implementing [TPL]\"\nms.assetid: 47a1d38c-fe9c-44aa-bd15-937bd5659b0b\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Implement a Producer-Consumer Dataflow Pattern","nodes":[{"pos":[0,54],"content":"How to: Implement a Producer-Consumer Dataflow Pattern","nodes":[{"content":"How to: Implement a Producer-Consumer Dataflow Pattern","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[431,485],"content":"How to: Implement a Producer-Consumer Dataflow Pattern","linkify":"How to: Implement a Producer-Consumer Dataflow Pattern","nodes":[{"content":"How to: Implement a Producer-Consumer Dataflow Pattern","pos":[0,54]}]},{"content":"This document describes how to use the TPL Dataflow Library to implement a producer-consumer pattern.","pos":[486,587]},{"content":"In this pattern, the <bpt id=\"p1\">*</bpt>producer<ept id=\"p1\">*</ept> sends messages to a message block, and the <bpt id=\"p2\">*</bpt>consumer<ept id=\"p2\">*</ept> reads messages from that block.","pos":[588,705],"source":" In this pattern, the *producer* sends messages to a message block, and the *consumer* reads messages from that block."},{"pos":[800,807],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates a basic producer- consumer model that uses dataflow.","pos":[811,898]},{"content":"The <ph id=\"ph1\">`Produce`</ph> method writes arrays that contain random bytes of data to a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601?displayProperty=nameWithType&gt;</ph> object and the <ph id=\"ph3\">`Consume`</ph> method reads bytes from a <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601?displayProperty=nameWithType&gt;</ph> object.","pos":[899,1201],"source":" The `Produce` method writes arrays that contain random bytes of data to a <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601?displayProperty=nameWithType> object and the `Consume` method reads bytes from a <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601?displayProperty=nameWithType> object."},{"content":"By acting on the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> interfaces, instead of their derived types, you can write reusable code that can act on a variety of dataflow block types.","pos":[1202,1457],"source":" By acting on the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> and <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interfaces, instead of their derived types, you can write reusable code that can act on a variety of dataflow block types."},{"content":"This example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601&gt;</ph> class.","pos":[1458,1541],"source":" This example uses the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> class."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.BufferBlock%601&gt;</ph> class acts as both a source block and as a target block, the producer and the consumer can use a shared object to transfer data.","pos":[1542,1737],"source":" Because the <xref:System.Threading.Tasks.Dataflow.BufferBlock%601> class acts as both a source block and as a target block, the producer and the consumer can use a shared object to transfer data."},{"content":"The <ph id=\"ph1\">`Produce`</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A&gt;</ph> method in a loop to synchronously write data to the target block.","pos":[1744,1901],"source":"The `Produce` method calls the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> method in a loop to synchronously write data to the target block."},{"content":"After the <ph id=\"ph1\">`Produce`</ph> method writes all data to the target block, it calls the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A&gt;</ph> method to indicate that the block will never have additional data available.","pos":[1902,2121],"source":" After the `Produce` method writes all data to the target block, it calls the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> method to indicate that the block will never have additional data available."},{"content":"The <ph id=\"ph1\">`Consume`</ph> method uses the <bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/async.md)</ept> and <bpt id=\"p2\">[</bpt>await<ept id=\"p2\">](~/docs/csharp/language-reference/keywords/await.md)</ept> operators (<bpt id=\"p3\">[</bpt>Async<ept id=\"p3\">](~/docs/visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id=\"p4\">[</bpt>Await<ept id=\"p4\">](~/docs/visual-basic/language-reference/operators/await-operator.md)</ept> in Visual Basic) to asynchronously compute the total number of bytes that are received from the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> object.","pos":[2122,2593],"source":" The `Consume` method uses the [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) operators ([Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) in Visual Basic) to asynchronously compute the total number of bytes that are received from the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> object."},{"content":"To act asynchronously, the <ph id=\"ph1\">`Consume`</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync%2A&gt;</ph> method to receive a notification when the source block has data available and when the source block will never have additional data available.","pos":[2594,2867],"source":" To act asynchronously, the `Consume` method calls the <xref:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync%2A> method to receive a notification when the source block has data available and when the source block will never have additional data available."},{"pos":[3204,3222],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[3226,3495],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`DataflowProducerConsumer.cs`</ph> (<ph id=\"ph2\">`DataflowProducerConsumer.vb`</ph> for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `DataflowProducerConsumer.cs` (`DataflowProducerConsumer.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window."},{"content":"Visual C#","pos":[3502,3511]},{"pos":[3518,3596],"content":"<bpt id=\"p1\">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowProducerConsumer.cs<ept id=\"p1\">**</ept>","source":"**csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowProducerConsumer.cs**"},{"content":"Visual Basic","pos":[3603,3615]},{"pos":[3622,3700],"content":"<bpt id=\"p1\">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowProducerConsumer.vb<ept id=\"p1\">**</ept>","source":"**vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowProducerConsumer.vb**"},{"pos":[3709,3727],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"The preceding example uses just one consumer to process the source data.","pos":[3731,3803]},{"content":"If you have multiple consumers in your application, use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A&gt;</ph> method to read data from the source block, as shown in the following example.","pos":[3804,4021],"source":" If you have multiple consumers in your application, use the <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> method to read data from the source block, as shown in the following example."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A&gt;</ph> method returns <ph id=\"ph2\">`False`</ph> when no data is available.","pos":[4356,4489],"source":"The <xref:System.Threading.Tasks.Dataflow.IReceivableSourceBlock%601.TryReceive%2A> method returns `False` when no data is available."},{"content":"When multiple consumers must access the source block concurrently, this mechanism guarantees that data is still available after the call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync%2A&gt;</ph>.","pos":[4490,4707],"source":" When multiple consumers must access the source block concurrently, this mechanism guarantees that data is still available after the call to <xref:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync%2A>."},{"pos":[4716,4724],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4728,4817],"content":"<bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept>","source":"[Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)"}]}