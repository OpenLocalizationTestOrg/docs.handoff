<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0539b54e591f87be61c1b61c10142fa146dad83c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\code-access-security.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54794d6a8d9d9cd4ddba4396b3b261a4161439da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b63a793df1d65d797af83c7c5ceb9d40a47e5e65</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Code Access Security and ADO.NET | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Code Access Security and ADO.NET</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework offers role-based security as well as code access security (CAS), both of which are implemented using a common infrastructure supplied by the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the world of unmanaged code, most applications execute with the permissions of the user or principal.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>As a result, computer systems can be damaged and private data compromised when malicious or error-filled software is run by a user with elevated privileges.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By contrast, managed code executing in the .NET Framework includes code access security, which applies to code alone.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Whether the code is allowed to run or not depends on the code's origin or other aspects of the code's identity, not solely the identity of the principal.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This reduces the likelihood that managed code can be misused.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Code Access Permissions</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When code is executed, it presents evidence that is evaluated by the CLR security system.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Typically, this evidence comprises the origin of the code including URL, site, and zone, and digital signatures that ensure the identity of the assembly.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The CLR allows code to perform only those operations that the code has permission to perform.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Code can request permissions, and those requests are honored based on the security policy set by an administrator.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Code executing in the CLR cannot grant permissions to itself.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, code can request and be granted fewer permissions than a security policy allows, but it will never be granted more permissions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When granting permissions, start with no permissions at all and then add the narrowest permissions for the particular task being performed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Starting with all permissions and then denying individual ones leads to insecure applications that may contain unintentional security holes from granting more permissions than required.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Configuring Security Policy<ept id="p1">](http://msdn.microsoft.com/en-us/0f130bcd-1bba-4346-b231-0bcca7dab1a4)</ept> and <bpt id="p2">[</bpt>NIB: Security Policy Management<ept id="p2">](http://msdn.microsoft.com/en-us/d754e05d-29dc-4d3a-a2c2-95eaaf1b82b9)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>There are three types of code access permissions:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Code access permissions`</ph> derive from the <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Permissions are required in order to access protected resources, such as files and environment variables, and to perform protected operations, such as accessing unmanaged code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Identity permissions`</ph> represent characteristics that identify an assembly.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Permissions are granted to an assembly based on evidence, which can include items such as a digital signature or where the code originated.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Identity permissions also derive from the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> base class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Role-based security permissions`</ph> are based on whether a principal has a specified identity or is a member of a specified role.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> class allows both declarative and imperative permission checks against the active principal.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To determine whether code is authorized to access a resource or perform an operation, the runtime's security system traverses the call stack, comparing the granted permissions of each caller to the permission being demanded.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If any caller in the call stack does not have the demanded permission, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown and access is refused.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Requesting Permissions</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The purpose of requesting permissions is to inform the runtime which permissions your application requires in order to run, and to ensure that it receives only the permissions that it actually needs.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, if your application needs to write data to the local disk, it requires <ph id="ph1">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If that permission hasn't been granted, the application will fail when it attempts to write to the disk.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, if the application requests <ph id="ph1">`FileIOPermission`</ph> and that permission has not been granted, the application will generate the exception at the outset and will not load.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In a scenario where the application only needs to read data from the disk, you can request that it never be granted any write permissions.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the event of a bug or a malicious attack, your code cannot damage the data on which it operates.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Requesting Permissions<ept id="p1">](http://msdn.microsoft.com/en-us/0447c49d-8cba-45e4-862c-ff0b59bebdc2)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Role-Based Security and CAS</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Implementing both role-based security and code-accessed security (CAS) enhances overall security for your application.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Role-based security can be based on a Windows account or a custom identity, making information about the security principal available to the current thread.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In addition, applications are often required to provide access to data or resources based on credentials supplied by the user.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Typically, such applications check the role of a user and provide access to resources based on those roles.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Role-based security enables a component to identify current users and their associated roles at run time.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This information is then mapped using a CAS policy to determine the set of permissions granted at run time.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For a specified application domain, the host can change the default role-based security policy and set a default security principal that represents a user and the roles associated with that user.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The CLR uses permissions to implement its mechanism for enforcing restrictions on managed code.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Role-based security permissions provide a mechanism for discovering whether a user (or the agent acting on the user's behalf) has a particular identity or is a member of a specified role.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Security Permissions<ept id="p1">](http://msdn.microsoft.com/en-us/b03757b4-e926-4196-b738-3733ced2bda0)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Depending on the type of application you are building, you should also consider implementing role-based permissions in the database.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information on role-based security in SQL Server, see <bpt id="p1">[</bpt>SQL Server Security<ept id="p1">](../../../../docs/framework/data/adonet/sql/sql-server-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Assemblies</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Assemblies form the fundamental unit of deployment, version control, reuse, activation scoping, and security permissions for a .NET Framework application.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An assembly provides a collection of types and resources that are built to work together and form a logical unit of functionality.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To the CLR, a type does not exist outside the context of an assembly.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information on creating and deploying assemblies, see <bpt id="p1">[</bpt>Programming with Assemblies<ept id="p1">](../../../../docs/framework/app-domains/programming-with-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Strong-naming Assemblies</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A strong name, or digital signature, consists of the assembly's identity, which includes its simple text name, version number, and culture information (if provided), plus a public key and a digital signature.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The digital signature is generated from an assembly file using the corresponding private key.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The assembly file contains the assembly manifest, which contains the names and hashes of all the files that make up the assembly.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Strong naming an assembly gives an application or component a unique identity that other software can use to refer explicitly to it.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Strong naming guards assemblies against being spoofed by an assembly that contains hostile code.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Strong-naming also ensures versioning consistency among different versions of a component.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You must strong name assemblies that will be deployed to the Global Assembly Cache (GAC).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating and Using Strong-Named Assemblies<ept id="p1">](../../../../docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Partial Trust in ADO.NET 2.0</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In ADO.NET 2.0, the .NET Framework Data Provider for SQL Server, the .NET Framework Data Provider for OLE DB, the .NET Framework Data Provider for ODBC, and the .NET Framework Data Provider for Oracle can now all run in partially trusted environments.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In previous releases of the .NET Framework, only <ph id="ph1">&lt;xref:System.Data.SqlClient&gt;</ph> was supported in less than full-trust applications.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>At minimum, a partially trusted application using the SQL Server provider must have execution and <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlClientPermission&gt;</ph> permissions.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Permission Attribute Properties for Partial Trust</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For partial trust scenarios, you can use <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlClientPermissionAttribute&gt;</ph> members to further restrict the capabilities available for the .NET Framework Data Provider for SQL Server.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following table lists the available <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlClientPermissionAttribute&gt;</ph> properties and their descriptions:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Permission attribute property</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Gets or sets a security action.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Inherited from <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Enables or disables the use of a blank password in a connection string.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Valid values are <ph id="ph1">`true`</ph> (to enable the use of blank passwords) and <ph id="ph2">`false`</ph> (to disable the use of blank passwords).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Inherited from <ph id="ph1">&lt;xref:System.Data.Common.DBDataPermissionAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Identifies a permitted connection string.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Multiple connection strings can be identified.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  Do not include a user ID or password in your connection string.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In this release, you cannot change connection string restrictions using the .NET Framework Configuration Tool.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Inherited from <ph id="ph1">&lt;xref:System.Data.Common.DBDataPermissionAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Identifies connection string parameters that are allowed or disallowed.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Connection string parameters are identified in the form <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>parameter name&gt;=<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Multiple parameters can be specified, delimited using a semicolon (;).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  If you do not specify <ph id="ph1">`KeyRestrictions`</ph>, but you set <ph id="ph2">`KeyRestrictionBehavior`</ph> property to <ph id="ph3">`AllowOnly`</ph> or <ph id="ph4">`PreventUsage`</ph>, no additional connection string parameters are allowed.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Inherited from <ph id="ph1">&lt;xref:System.Data.Common.DBDataPermissionAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Identifies the connection string parameters as the only additional parameters allowed (<ph id="ph1">`AllowOnly`</ph>), or identifies the additional parameters that are not allowed (<ph id="ph2">`PreventUsage`</ph>).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AllowOnly`</ph> is the default.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Inherited from <ph id="ph1">&lt;xref:System.Data.Common.DBDataPermissionAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Gets a unique identifier for this attribute when implemented in a derived class.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Inherited from <ph id="ph1">&lt;xref:System.Attribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Indicates whether unrestricted permission to the resource is declared.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Inherited from <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>ConnectionString Syntax</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">`connectionStrings`</ph> element of a configuration file to allow only a specific connection string to be used.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Connection Strings<ept id="p1">](../../../../docs/framework/data/adonet/connection-strings.md)</ept> for more information on storing and retrieving connection strings from configuration files.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>KeyRestrictions Syntax</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following example enables the same connection string, enables the use of the <ph id="ph1">`Encrypt`</ph> and <ph id="ph2">`Packet``Size`</ph> connection string options, but restricts the use of any other connection string options.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>KeyRestrictionBehavior with PreventUsage Syntax</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following example enables the same connection string and allows all other connection parameters except for <ph id="ph1">`User Id`</ph>, <ph id="ph2">`Password`</ph> and <ph id="ph3">`Persist Security Info`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>KeyRestrictionBehavior with AllowOnly Syntax</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following example enables two connection strings that also contain <ph id="ph1">`Initial Catalog`</ph>, <ph id="ph2">`Connection Timeout`</ph>, <ph id="ph3">`Encrypt`</ph>, and <ph id="ph4">`Packet Size`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>All other connection string parameters are restricted.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Enabling Partial Trust with a Custom Permission Set</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To enable the use of <ph id="ph1">&lt;xref:System.Data.SqlClient&gt;</ph> permissions for a particular zone, a system administrator must create a custom permission set and set it as the permission set for a particular zone.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Default permission sets, such as <ph id="ph1">`LocalIntranet`</ph>, cannot be modified.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, to include <ph id="ph1">&lt;xref:System.Data.SqlClient&gt;</ph> permissions for code that has a <ph id="ph2">&lt;xref:System.Security.Policy.Zone&gt;</ph> of <ph id="ph3">`LocalIntranet`</ph>, a system administrator could copy the permission set for <ph id="ph4">`LocalIntranet`</ph>, rename it to "CustomLocalIntranet", add the <ph id="ph5">&lt;xref:System.Data.SqlClient&gt;</ph> permissions, import the CustomLocalIntranet permission set using the <bpt id="p1">[</bpt>Caspol.exe (Code Access Security Policy Tool)<ept id="p1">](../../../../docs/framework/tools/caspol-exe-code-access-security-policy-tool.md)</ept>, and set the permission set of <ph id="ph6">`LocalIntranet_Zone`</ph> to CustomLocalIntranet.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Sample Permission Set</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following is a sample permission set for the .NET Framework Data Provider for SQL Server in a partially trusted scenario.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For information on creating custom permission sets, see <bpt id="p1">[</bpt>NIB:Configuring Permission Sets Using Caspol.exe<ept id="p1">](http://msdn.microsoft.com/en-us/94e2625e-21ad-4038-af36-6d1f9df40a57)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Verifying ADO.NET Code Access Using Security Permissions</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For partial-trust scenarios, you can require CAS privileges for particular methods in your code by specifying a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlClientPermissionAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If that privilege is not allowed by the restricted security policy in effect, an exception is thrown before your code is run.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information on security policy, see <bpt id="p1">[</bpt>NIB: Security Policy Management<ept id="p1">](http://msdn.microsoft.com/en-us/d754e05d-29dc-4d3a-a2c2-95eaaf1b82b9)</ept> and <bpt id="p2">[</bpt>NIB: Security Policy Best Practices<ept id="p2">](http://msdn.microsoft.com/en-us/d49bc4d5-efb7-4caa-a2fe-e4d3cec63c05)</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to write code that requires a particular connection string.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>It simulates denying unrestricted permissions to <ph id="ph1">&lt;xref:System.Data.SqlClient&gt;</ph>, which a system administrator would implement using a CAS policy in the real world.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>When designing CAS permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The opposite pattern, starting with all permissions and then denying a specific permission, is not secure because there are many ways of expressing the same connection string.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For example, if you start with all permissions and then attempt to deny the use of the connection string "server=someserver", the string "server=someserver.mycompany.com" would still be allowed.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how <ph id="ph1">`SqlClient`</ph> performs the security demand, which throws a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> if the appropriate CAS permissions are not in place.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> output is displayed in the console window.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks SqlClient.CAS#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.CAS/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks SqlClient.CAS#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.CAS/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You should see this output in the Console window:</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Interoperability with Unmanaged Code</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Code that runs outside the CLR is called unmanaged code.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Therefore, security mechanisms such as CAS cannot be applied to unmanaged code.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>COM components, ActiveX interfaces, and Win32 API functions are examples of unmanaged code.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Special security considerations apply when executing unmanaged code so that you do not jeopardize overall application security.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Interoperating with Unmanaged Code<ept id="p1">](../../../../docs/framework/interop/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The .NET Framework also supports backward compatibility to existing COM components by providing access through COM interop.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You can incorporate COM components into a .NET Framework application by using COM interop tools to import the relevant COM types.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Once imported, the COM types are ready to use.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>COM interop also enables COM clients to access managed code by exporting assembly metadata to a type library and registering the managed component as a COM component.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Advanced COM Interoperability<ept id="p1">](http://msdn.microsoft.com/en-us/3ada36e5-2390-4d70-b490-6ad8de92f2fb)</ept>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Securing ADO.NET Applications<ept id="p1">](../../../../docs/framework/data/adonet/securing-ado-net-applications.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>PAVE Security in Native and .NET Framework Code<ept id="p1">](http://msdn.microsoft.com/en-us/bd61be84-c143-409a-a75a-44253724f784)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Code Access Security<ept id="p1">](http://msdn.microsoft.com/en-us/23a20143-241d-4fe5-9d9f-3933fd594c03)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Role-Based Security<ept id="p1">](http://msdn.microsoft.com/en-us/239442e3-5be4-4203-b7fd-793baffea803)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>