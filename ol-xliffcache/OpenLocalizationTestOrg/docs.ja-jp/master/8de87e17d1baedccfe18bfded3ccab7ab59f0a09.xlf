<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="rendering-a-windows-forms-control.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8de87e17d1baedccfe18bfded3ccab7ab59f0a09</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\rendering-a-windows-forms-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1123b208e8b40fba0c74ecd13c9592de7de7630</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3b15118a22728f43b62feb9648a4161c0d3bc58</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Rendering a Windows Forms Control</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Rendering a Windows Forms Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Rendering refers to the process of creating a visual representation on a user's screen.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Windows Forms uses <ph id="ph1">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> (the new Windows graphics library) for rendering.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The managed classes that provide access to <ph id="ph1">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> are in the <ph id="ph2">&lt;xref:System.Drawing?displayProperty=nameWithType&gt;</ph> namespace and its subnamespaces.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following elements are involved in control rendering:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The drawing functionality provided by the base class <ph id="ph1">&lt;xref:System.Windows.Forms.Control?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The essential elements of the <ph id="ph1">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> graphics library.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The geometry of the drawing region.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The procedure for freeing graphics resources.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Drawing Functionality Provided by Control</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The base class <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> provides drawing functionality through its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A control raises the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event whenever it needs to update its display.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about events in the .NET Framework, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](../../../standard/events/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The event data class for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event, <ph id="ph2">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>, holds the data needed for drawing a control â€” a handle to a graphics object and a rectangle object that represents the region to draw in.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These objects are shown in bold in the following code fragment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> is a managed class that encapsulates drawing functionality, as described in the discussion of <ph id="ph2">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> later in this topic.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> is an instance of the <ph id="ph2">&lt;xref:System.Drawing.Rectangle&gt;</ph> structure and defines the available area in which a control can draw.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A control developer can compute the <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> property of a control, as described in the discussion of geometry later in this topic.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A control must provide rendering logic by overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method that it inherits from <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> gets access to a graphics object and a rectangle to draw in through the <ph id="ph2">&lt;xref:System.Drawing.Design.PaintValueEventArgs.Graphics%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> instance passed to it.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method of the base <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class does not implement any drawing functionality but merely invokes the event delegates that are registered with the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph>, you should typically invoke the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method of the base class so that registered delegates receive the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, controls that paint their entire surface should not invoke the base class's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph>, as this introduces flicker.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For an example of overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> event, see the <bpt id="p1">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id="p1">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Do not invoke <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> directly from your control; instead, invoke the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method (inherited from <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph>) or some other method that invokes <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method in turn invokes <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method is overloaded, and, depending on the arguments supplied to <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> <ph id="ph3">`e`</ph>, a control redraws either some or all of its screen area.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The base <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class defines another method that is useful for drawing â€” the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> paints the background (and thereby the shape) of the window and is guaranteed to be fast, while <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> paints the details and might be slower because individual paint requests are combined into one <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event that covers all areas that have to be redrawn.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You might want to invoke the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> if, for instance, you want to draw a gradient-colored background for your control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>While <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> has an event-like nomenclature and takes the same argument as the <ph id="ph2">`OnPaint`</ph> method, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> is not a true event method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>There is no <ph id="ph1">`PaintBackground`</ph> event and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> does not invoke event delegates.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> method, a derived class is not required to invoke the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> method of its base class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>GDI+ Basics</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> class provides methods for drawing various shapes such as circles, triangles, arcs, and ellipses, as well as methods for displaying text.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing?displayProperty=nameWithType&gt;</ph> namespace and its subnamespaces contain classes that encapsulate graphics elements such as shapes (circles, rectangles, arcs, and others), colors, fonts, brushes, and so on.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph>, see <bpt id="p1">[</bpt>Using Managed Graphics Classes<ept id="p1">](../advanced/using-managed-graphics-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The essentials of <ph id="ph1">[!INCLUDE[ndptecgdi](../../../../includes/ndptecgdi-md.md)]</ph> are also described in the <bpt id="p1">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id="p1">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Geometry of the Drawing Region</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ClientRectangle%2A&gt;</ph> property of a control specifies the rectangular region available to the control on the user's screen, while the <ph id="ph2">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> property of <ph id="ph3">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> specifies the area that is actually painted.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(Remember that painting is done in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event method that takes a <ph id="ph2">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> instance as its argument).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A control might need to paint only a portion of its available area, as is the case when a small section of the control's display changes.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In those situations, a control developer must compute the actual rectangle to draw in and pass that to <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The overloaded versions of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> that take a <ph id="ph2">&lt;xref:System.Drawing.Rectangle&gt;</ph> or <ph id="ph3">&lt;xref:System.Drawing.Region&gt;</ph> as an argument use that argument to generate the <ph id="ph4">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> property of <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following code fragment shows how the <ph id="ph1">`FlashTrackBar`</ph> custom control computes the rectangular area to draw in.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`client`</ph> variable denotes the <ph id="ph2">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For a complete sample, see <bpt id="p1">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id="p1">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Freeing Graphics Resources</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Graphics objects are expensive because they use system resources.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Such objects include instances of the <ph id="ph1">&lt;xref:System.Drawing.Graphics?displayProperty=nameWithType&gt;</ph> class as well as instances of <ph id="ph2">&lt;xref:System.Drawing.Brush?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Drawing.Pen?displayProperty=nameWithType&gt;</ph>, and other graphics classes.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is important that you create a graphics resource only when you need it and release it soon as you are finished using it.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you create a type that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface, call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method when you are finished with it in order to free resources.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following code fragment shows how the <ph id="ph1">`FlashTrackBar`</ph> custom control creates and releases a <ph id="ph2">&lt;xref:System.Drawing.Brush&gt;</ph> resource.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For the complete source code, see <bpt id="p1">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id="p1">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Windows Forms Control That Shows Progress<ept id="p1">](how-to-create-a-windows-forms-control-that-shows-progress.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>