{"content":"---\ntitle: \"*= Operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/26/2019\nf1_keywords: \n  - \"*=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"*= operator [C#]\"\n  - \"binary multiplication assignment operator (*=) [C#]\"\nms.assetid: 2e472155-59db-4dbf-bb94-bcccfa1a794d\n---\n# \\*= Operator (C# Reference)\n\nThe multiplication assignment operator.\n\nAn expression using the `*=` operator, such as\n\n```csharp\nx *= y\n```\n\nis equivalent to\n\n```csharp\nx = x * y\n```\n\nexcept that `x` is only evaluated once.\n\nFor numeric types, the [\\* operator](multiplication-operator.md) computes the product of its operands.\n\nThe following example demonstrates the usage of the `*=` operator:\n\n[!code-csharp-interactive[multiply and assign](~/samples/snippets/csharp/language-reference/operators/MultiplicationExamples.cs#MultiplyAndAssign)]\n\n## Operator overloadability\n\nIf a user-defined type [overloads](../keywords/operator.md) the [multiplication operator](multiplication-operator.md) `*`, the multiplication assignment operator `*=` is implicitly overloaded. A user-defined type cannot explicitly overload the multiplication assignment operator.\n\n## C# language specification\n\nFor more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n","nodes":[{"pos":[4,268],"embed":true,"restype":"x-metadata","content":"title: \"*= Operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/26/2019\nf1_keywords: \n  - \"*=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"*= operator [C#]\"\n  - \"binary multiplication assignment operator (*=) [C#]\"\nms.assetid: 2e472155-59db-4dbf-bb94-bcccfa1a794d","nodes":[{"content":"*= Operator - C# Reference","nodes":[{"pos":[0,26],"content":"*= Operator - C# Reference","nodes":[{"content":"*= Operator - C# Reference","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[275,302],"content":"\\*= Operator (C# Reference)","linkify":"\\*= Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">\\*</ph>= Operator (C# Reference)","pos":[0,27],"source":"\\*= Operator (C# Reference)"}]},{"content":"The multiplication assignment operator.","pos":[304,343]},{"pos":[345,391],"content":"An expression using the <ph id=\"ph1\">`*=`</ph> operator, such as","source":"An expression using the `*=` operator, such as"},{"content":"is equivalent to","pos":[415,431]},{"pos":[458,497],"content":"except that <ph id=\"ph1\">`x`</ph> is only evaluated once.","source":"except that `x` is only evaluated once."},{"pos":[499,601],"content":"For numeric types, the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\*</ph> operator<ept id=\"p1\">](multiplication-operator.md)</ept> computes the product of its operands.","source":"For numeric types, the [\\* operator](multiplication-operator.md) computes the product of its operands."},{"pos":[603,669],"content":"The following example demonstrates the usage of the <ph id=\"ph1\">`*=`</ph> operator:","source":"The following example demonstrates the usage of the `*=` operator:"},{"pos":[823,847],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"If a user-defined type <bpt id=\"p1\">[</bpt>overloads<ept id=\"p1\">](../keywords/operator.md)</ept> the <bpt id=\"p2\">[</bpt>multiplication operator<ept id=\"p2\">](multiplication-operator.md)</ept> <ph id=\"ph1\">`*`</ph>, the multiplication assignment operator <ph id=\"ph2\">`*=`</ph> is implicitly overloaded.","pos":[849,1041],"source":"If a user-defined type [overloads](../keywords/operator.md) the [multiplication operator](multiplication-operator.md) `*`, the multiplication assignment operator `*=` is implicitly overloaded."},{"content":"A user-defined type cannot explicitly overload the multiplication assignment operator.","pos":[1042,1128]},{"pos":[1133,1158],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1160,1346],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Compound assignment<ept id=\"p1\">](~/_csharplang/spec/expressions.md#compound-assignment)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1351,1359],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1363,1390],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1393,1449],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1452,1476],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"}]}