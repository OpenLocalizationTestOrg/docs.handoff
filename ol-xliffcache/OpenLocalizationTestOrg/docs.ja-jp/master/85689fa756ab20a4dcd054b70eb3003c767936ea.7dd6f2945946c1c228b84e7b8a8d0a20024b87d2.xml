{"content":"---\ntitle: \"How to: Join Two Collections (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 5a5758d4-906b-4285-908d-5b930db192e6\n---\n# How to: Join Two Collections (LINQ to XML) (Visual Basic)\nAn element or attribute in an XML document can sometimes refer to another element or attribute. For example, the [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md) XML document contains a list of customers and a list of orders. Each `Customer` element contains a `CustomerID` attribute. Each `Order` element contains a `CustomerID` element. The `CustomerID` element in each order refers to the `CustomerID` attribute in a customer.  \n  \n The topic [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md) contains an XSD that can be used to validate this document. It uses the `xs:key` and `xs:keyref` features of XSD to establish that the `CustomerID` attribute of the `Customer` element is a key, and to establish a relationship between the `CustomerID` element in each `Order` element and the `CustomerID` attribute in each `Customer` element.  \n  \n With [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], you can take advantage of this relationship by using the `Join` clause.  \n  \n Note that because there is no index available, such joining will have poor runtime performance.  \n  \n For more detailed information about `Join`, see [Join Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/join-operations.md).  \n  \n## Example  \n The following example joins the `Customer` elements to the `Order` elements, and generates a new XML document that includes the `CompanyName` element in the orders.  \n  \n Before executing the query, the example validates that the document complies with the schema in [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md). This ensures that the join clause will always work.  \n  \n This query first retrieves all `Customer` elements, and then joins them to the `Order` elements. It selects only the orders for customers with a `CustomerID` greater than \"K\". It then projects a new `Order` element that contains the customer information within each order.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md).  \n  \n This example uses the following XSD schema: [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md).  \n  \n Note that joining in this fashion will not perform very well. Joins are performed via a linear search. There are no hash tables or indexes to help with performance.  \n  \n```vb  \nPublic Class Program  \n    Public Shared errors As Boolean = False  \n  \n    Public Shared Function LamValidEvent(ByVal o As Object, _  \n                 ByVal e As ValidationEventArgs) As Boolean  \n        Console.WriteLine(\"{0}\", e.Message)  \n        errors = True  \n    End Function  \n  \n    Shared Sub Main()  \n        Dim schemas As New XmlSchemaSet()  \n        schemas.Add(\"\", \"CustomersOrders.xsd\")  \n  \n        Console.Write(\"Attempting to validate, \")  \n        Dim custOrdDoc As XDocument = XDocument.Load(\"CustomersOrders.xml\")  \n  \n        custOrdDoc.Validate(schemas, Function(o, e) LamValidEvent(0, e))  \n        If errors Then  \n            Console.WriteLine(\"custOrdDoc did not validate\")  \n        Else  \n            Console.WriteLine(\"custOrdDoc validated\")  \n        End If  \n  \n        If Not errors Then  \n            'Join customers and orders, and create a new XML document with  \n            ' a different shape.  \n            'The new document contains orders only for customers with a  \n            ' CustomerID > 'K'.  \n            Dim custOrd As XElement = custOrdDoc.<Root>.FirstOrDefault  \n            Dim newCustOrd As XElement = _  \n                <Root>  \n                    <%= From c In custOrd.<Customers>.<Customer> _  \n                        Join o In custOrd.<Orders>.<Order> _  \n                        On c.@CustomerID Equals o.<CustomerID>.Value _  \n                        Where c.@CustomerID.CompareTo(\"K\") > 0 _  \n                        Select _  \n                        <Order>  \n                            <CustomerID><%= c.@CustomerID %></CustomerID>  \n                            <%= c.<CompanyName> %>  \n                            <%= c.<ContactName> %>  \n                            <%= o.<EmployeeID> %>  \n                            <%= o.<OrderDate> %>  \n                        </Order> _  \n                    %>  \n                </Root>  \n            Console.WriteLine(newCustOrd)  \n        End If  \n    End Sub  \nEnd Class  \n```  \n  \n This code produces the following output:  \n  \n```  \nAttempting to validate, custOrdDoc validated  \n<Root>  \n  <Order>  \n    <CustomerID>LAZYK</CustomerID>  \n    <CompanyName>Lazy K Kountry Store</CompanyName>  \n    <ContactName>John Steel</ContactName>  \n    <EmployeeID>1</EmployeeID>  \n    <OrderDate>1997-03-21T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LAZYK</CustomerID>  \n    <CompanyName>Lazy K Kountry Store</CompanyName>  \n    <ContactName>John Steel</ContactName>  \n    <EmployeeID>8</EmployeeID>  \n    <OrderDate>1997-05-22T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LETSS</CustomerID>  \n    <CompanyName>Let's Stop N Shop</CompanyName>  \n    <ContactName>Jaime Yorres</ContactName>  \n    <EmployeeID>1</EmployeeID>  \n    <OrderDate>1997-06-25T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LETSS</CustomerID>  \n    <CompanyName>Let's Stop N Shop</CompanyName>  \n    <ContactName>Jaime Yorres</ContactName>  \n    <EmployeeID>8</EmployeeID>  \n    <OrderDate>1997-10-27T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LETSS</CustomerID>  \n    <CompanyName>Let's Stop N Shop</CompanyName>  \n    <ContactName>Jaime Yorres</ContactName>  \n    <EmployeeID>6</EmployeeID>  \n    <OrderDate>1997-11-10T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LETSS</CustomerID>  \n    <CompanyName>Let's Stop N Shop</CompanyName>  \n    <ContactName>Jaime Yorres</ContactName>  \n    <EmployeeID>4</EmployeeID>  \n    <OrderDate>1998-02-12T00:00:00</OrderDate>  \n  </Order>  \n</Root>  \n```  \n  \n## See also\n\n- [Advanced Query Techniques (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)\n","nodes":[{"pos":[4,139],"embed":true,"restype":"x-metadata","content":"title: \"How to: Join Two Collections (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 5a5758d4-906b-4285-908d-5b930db192e6","nodes":[{"content":"How to: Join Two Collections (LINQ to XML) (Visual Basic)","nodes":[{"pos":[0,57],"content":"How to: Join Two Collections (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Join Two Collections (LINQ to XML) (Visual Basic)","pos":[0,57]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[146,203],"content":"How to: Join Two Collections (LINQ to XML) (Visual Basic)","linkify":"How to: Join Two Collections (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Join Two Collections (LINQ to XML) (Visual Basic)","pos":[0,57]}]},{"content":"An element or attribute in an XML document can sometimes refer to another element or attribute.","pos":[204,299]},{"content":"For example, the <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept> XML document contains a list of customers and a list of orders.","pos":[300,544],"source":" For example, the [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md) XML document contains a list of customers and a list of orders."},{"content":"Each <ph id=\"ph1\">`Customer`</ph> element contains a <ph id=\"ph2\">`CustomerID`</ph> attribute.","pos":[545,603],"source":" Each `Customer` element contains a `CustomerID` attribute."},{"content":"Each <ph id=\"ph1\">`Order`</ph> element contains a <ph id=\"ph2\">`CustomerID`</ph> element.","pos":[604,657],"source":" Each `Order` element contains a `CustomerID` element."},{"content":"The <ph id=\"ph1\">`CustomerID`</ph> element in each order refers to the <ph id=\"ph2\">`CustomerID`</ph> attribute in a customer.","pos":[658,748],"source":" The `CustomerID` element in each order refers to the `CustomerID` attribute in a customer."},{"content":"The topic <bpt id=\"p1\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md)</ept> contains an XSD that can be used to validate this document.","pos":[755,962],"source":"The topic [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md) contains an XSD that can be used to validate this document."},{"content":"It uses the <ph id=\"ph1\">`xs:key`</ph> and <ph id=\"ph2\">`xs:keyref`</ph> features of XSD to establish that the <ph id=\"ph3\">`CustomerID`</ph> attribute of the <ph id=\"ph4\">`Customer`</ph> element is a key, and to establish a relationship between the <ph id=\"ph5\">`CustomerID`</ph> element in each <ph id=\"ph6\">`Order`</ph> element and the <ph id=\"ph7\">`CustomerID`</ph> attribute in each <ph id=\"ph8\">`Customer`</ph> element.","pos":[963,1244],"source":" It uses the `xs:key` and `xs:keyref` features of XSD to establish that the `CustomerID` attribute of the `Customer` element is a key, and to establish a relationship between the `CustomerID` element in each `Order` element and the `CustomerID` attribute in each `Customer` element."},{"pos":[1251,1382],"content":"With <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>, you can take advantage of this relationship by using the <ph id=\"ph2\">`Join`</ph> clause.","source":"With [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], you can take advantage of this relationship by using the `Join` clause."},{"content":"Note that because there is no index available, such joining will have poor runtime performance.","pos":[1389,1484]},{"pos":[1491,1649],"content":"For more detailed information about <ph id=\"ph1\">`Join`</ph>, see <bpt id=\"p1\">[</bpt>Join Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/join-operations.md)</ept>.","source":"For more detailed information about `Join`, see [Join Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/join-operations.md)."},{"pos":[1658,1665],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1669,1833],"content":"The following example joins the <ph id=\"ph1\">`Customer`</ph> elements to the <ph id=\"ph2\">`Order`</ph> elements, and generates a new XML document that includes the <ph id=\"ph3\">`CompanyName`</ph> element in the orders.","source":"The following example joins the `Customer` elements to the `Order` elements, and generates a new XML document that includes the `CompanyName` element in the orders."},{"content":"Before executing the query, the example validates that the document complies with the schema in <bpt id=\"p1\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md)</ept>.","pos":[1840,2074],"source":"Before executing the query, the example validates that the document complies with the schema in [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md)."},{"content":"This ensures that the join clause will always work.","pos":[2075,2126]},{"content":"This query first retrieves all <ph id=\"ph1\">`Customer`</ph> elements, and then joins them to the <ph id=\"ph2\">`Order`</ph> elements.","pos":[2133,2229],"source":"This query first retrieves all `Customer` elements, and then joins them to the `Order` elements."},{"content":"It selects only the orders for customers with a <ph id=\"ph1\">`CustomerID`</ph> greater than \"K\".","pos":[2230,2308],"source":" It selects only the orders for customers with a `CustomerID` greater than \"K\"."},{"content":"It then projects a new <ph id=\"ph1\">`Order`</ph> element that contains the customer information within each order.","pos":[2309,2405],"source":" It then projects a new `Order` element that contains the customer information within each order."},{"pos":[2412,2622],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)."},{"pos":[2629,2811],"content":"This example uses the following XSD schema: <bpt id=\"p1\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md)</ept>.","source":"This example uses the following XSD schema: [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md)."},{"content":"Note that joining in this fashion will not perform very well.","pos":[2818,2879]},{"content":"Joins are performed via a linear search.","pos":[2880,2920]},{"content":"There are no hash tables or indexes to help with performance.","pos":[2921,2982]},{"content":"This code produces the following output:","pos":[4996,5036]},{"pos":[6574,6582],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6586,6741],"content":"<bpt id=\"p1\">[</bpt>Advanced Query Techniques (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)</ept>","source":"[Advanced Query Techniques (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)"}]}