<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="icordebugclass2-getparameterizedtype-method.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e1734ca91fd48cc15b8dbf25f11518ed0455b6f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\debugging\icordebugclass2-getparameterizedtype-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0fe05e21b17d4f896f3336831414f51ed58a7117</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">028c9f66acab4ca6525185ae91d4117176a9c837</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>ICorDebugClass2::GetParameterizedType Method</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ICorDebugClass2::GetParameterizedType Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Gets the type declaration for this class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] A value of the CorElementType enumeration that specifies the element type for this class: Set this value to ELEMENT_TYPE_VALUETYPE if this ICorDebugClass2 represents a value type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Set this value to ELEMENT_TYPE_CLASS if this <ph id="ph1">`ICorDebugClass2`</ph> represents a complex type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[in] The number of type parameters, if the type is generic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The number of type parameters (if any) must match the number required by the class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[in] An array of pointers, each of which points to an ICorDebugType object that represents a type parameter.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the class is non-generic, this value is null.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>[out] A pointer to the address of an <ph id="ph1">`ICorDebugType`</ph> object that represents the type declaration.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This object is equivalent to a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object in managed code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the class is non-generic, that is, if it has no type parameters, <ph id="ph1">`GetParameterizedType`</ph> simply gets the runtime type object corresponding to the class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`elementType`</ph> parameter should be set to the correct element type for the class: ELEMENT_TYPE_VALUETYPE if the class is a value type; otherwise, ELEMENT_TYPE_CLASS.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the class accepts type parameters (for example, <ph id="ph1">`ArrayList&lt;T&gt;`</ph>), you can use <ph id="ph2">`GetParameterizedType`</ph> to construct a type object for an instantiated type such as <ph id="ph3">`ArrayList&lt;int&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Background Information</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the .NET Framework versions 1.0 and 1.1, every type in the metadata could be directly mapped to a type in the running process.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Thus, a metadata type and a runtime type had a single representation in the running process.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, one generic type in metadata can be mapped to many different instantiations of the type in the running process.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, the metadata type <ph id="ph1">`SortedList&lt;K,V&gt;`</ph> can map to <ph id="ph2">`SortedList&lt;String, EmployeeRecord&gt;`</ph>, <ph id="ph3">`SortedList&lt;Int32, String&gt;`</ph>, <ph id="ph4">`SortedList&lt;String,Array&lt;Int32&gt;&gt;`</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Thus, you need a way to handle type instantiation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The .NET Framework version 2.0 introduces the <ph id="ph1">`ICorDebugType`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For a generic type, an <ph id="ph1">`ICorDebugClass`</ph> or <ph id="ph2">`ICorDebugClass2`</ph> object represents the uninstantiated type (<ph id="ph3">`SortedList&lt;K,V&gt;`</ph>), and an <ph id="ph4">`ICorDebugType`</ph> object represents the various instantiated types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Given an <ph id="ph1">`ICorDebugClass`</ph> or <ph id="ph2">`ICorDebugClass2`</ph> object, you can create an <ph id="ph3">`ICorDebugType`</ph> object for any instantiation by calling the <ph id="ph4">`ICorDebugClass2::GetParameterizedType`</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also create an <ph id="ph1">`ICorDebugType`</ph> object for a simple type, such as Int32, or for a non-generic type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The introduction of the <ph id="ph1">`ICorDebugType`</ph> object to represent the run-time notion of a type has a ripple effect throughout the API.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Functions that previously took an <ph id="ph1">`ICorDebugClass`</ph> or <ph id="ph2">`ICorDebugClass2`</ph> object or even a <ph id="ph3">`CorElementType`</ph> value are generalized to take an <ph id="ph4">`ICorDebugType`</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> CorDebug.idl, CorDebug.h</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> CorGuids.lib</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept> <ph id="ph1">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>