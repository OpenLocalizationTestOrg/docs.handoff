<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-overload-a-procedure-that-takes-an-indefinite-number-of-parameters.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e4ef81049f3b0d3ab1271fb709f07c37f274a88</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\how-to-overload-a-procedure-that-takes-an-indefinite-number-of-parameters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8c28206e11d0dc58f7327e9ba34a646cfd38683</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">285b39d79ca8e7d1b05289be45789dcffd50c0a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Overload a Procedure that Takes an Indefinite Number of Parameters (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Overload a Procedure that Takes an Indefinite Number of Parameters (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If a procedure has a <bpt id="p1">[</bpt>ParamArray<ept id="p1">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> parameter, you cannot define an overloaded version taking a one-dimensional array for the parameter array.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see "Implicit Overloads for a ParamArray Parameter" in <bpt id="p1">[</bpt>Considerations in Overloading Procedures<ept id="p1">](./considerations-in-overloading-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To overload a procedure that takes a variable number of parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Ascertain that the procedure and calling code logic benefits from overloaded versions more than from a <ph id="ph1">`ParamArray`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>See "Overloads and ParamArrays" in <bpt id="p1">[</bpt>Considerations in Overloading Procedures<ept id="p1">](./considerations-in-overloading-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Determine which numbers of supplied values the procedure should accept in the variable part of the parameter list.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This might include the case of no value, and it might include the case of a single one-dimensional array.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For each acceptable number of supplied values, write a <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph> declaration statement that defines the corresponding parameter list.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Do not use either the <ph id="ph1">`Optional`</ph> or the <ph id="ph2">`ParamArray`</ph> keyword in this overloaded version.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In each declaration, precede the <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph> keyword with the <bpt id="p1">[</bpt>Overloads<ept id="p1">](../../../../visual-basic/language-reference/modifiers/overloads.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Following each declaration, write the procedure code that should execute when the calling code supplies values corresponding to that declaration's parameter list.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Terminate each procedure with the <ph id="ph1">`End Sub`</ph> or <ph id="ph2">`End Function`</ph> statement as appropriate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example shows a procedure defined with a <bpt id="p1">[</bpt>ParamArray<ept id="p1">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> parameter, and then an equivalent set of overloaded procedures.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You cannot overload such a procedure with a parameter list that takes a one-dimensional array for the parameter array.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, you can use the signatures of the other implicit overloads.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following declarations illustrate this.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The code in the overloaded versions does not have to test whether the calling code supplied one or more values for the <ph id="ph1">`ParamArray`</ph> parameter, or if so, how many.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> passes control to the version matching the calling argument list.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because a procedure with a <ph id="ph1">`ParamArray`</ph> parameter is equivalent to a set of overloaded versions, you cannot overload such a procedure with a parameter list corresponding to any of these implicit overloads.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Considerations in Overloading Procedures<ept id="p1">](./considerations-in-overloading-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>.NET Framework Security</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you accept a parameter array, you should test for the length of the array the calling code passed to it, and take appropriate steps if it is too large for your application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Optional Parameters<ept id="p1">](./optional-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parameter Arrays<ept id="p1">](./parameter-arrays.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Procedures<ept id="p1">](./troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define Multiple Versions of a Procedure<ept id="p1">](./how-to-define-multiple-versions-of-a-procedure.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Call an Overloaded Procedure<ept id="p1">](./how-to-call-an-overloaded-procedure.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Overload a Procedure that Takes Optional Parameters<ept id="p1">](./how-to-overload-a-procedure-that-takes-optional-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overload Resolution<ept id="p1">](./overload-resolution.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>