{"content":"---\ntitle: C# Statements | A tour of the C# language\ndescription: You create the actions of a C# program using statements\nkeywords: .NET, csharp, statements, syntax\nauthor: BillWagner\nms.author: wiwagn\nms.date: 11/06/2016\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: 5409c379-5622-4fae-88b5-1654276ea8d4\n---\n\n# Statements\n\nThe actions of a program are expressed using *statements*. C# supports several different kinds of statements, a number of which are defined in terms of embedded statements.\n\nA *block* permits multiple statements to be written in contexts where a single statement is allowed. A block consists of a list of statements written between the delimiters `{` and `}`.\n\n*Declaration statements* are used to declare local variables and constants.\n\n*Expression statements* are used to evaluate expressions. Expressions that can be used as statements include method invocations, object allocations using the `new` operator, assignments using `=` and the compound assignment operators, increment and decrement operations using the `++` and `--` operators and `await` expressions.\n\n*Selection statements* are used to select one of a number of possible statements for execution based on the value of some expression. In this group are the `if` and `switch` statements.\n\n*Iteration statements* are used to execute repeatedly an embedded statement. In this group are the `while`, `do`, `for`, and `foreach` statements.\n\n*Jump statements* are used to transfer control. In this group are the `break`, `continue`, `goto`, `throw`, `return`, and `yield` statements.\n\nThe `try`...`catch` statement is used to catch exceptions that occur during execution of a block, and the `try`...`finally` statement is used to specify finalization code that is always executed, whether an exception occurred or not.\n\nThe `checked` and `unchecked` statements are used to control the overflow-checking context for integral-type arithmetic operations and conversions.\n\nThe `lock` statement is used to obtain the mutual-exclusion lock for a given object, execute a statement, and then release the lock.\n\nThe `using` statement is used to obtain a resource, execute a statement, and then dispose of that resource.\n\nThe following lists the kinds of statements that can be used, and provides an example for each.\n\n* Local variable declaration:\n\n [!code-csharp[Declarations](../../../samples/snippets/csharp/tour/statements/Program.cs#L9-L15)]\n\n* Local constant declaration:\n\n [!code-csharp[ConstantDeclarations](../../../samples/snippets/csharp/tour/statements/Program.cs#L17-L22)]\n\n* Expression statement:\n\n [!code-csharp[Expressions](../../../samples/snippets/csharp/tour/statements/Program.cs#L24-L31)]\n\n* `if` statement:\n\n [!code-csharp[IfStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L33-L43)]\n\n* `switch` statement:\n\n [!code-csharp[SwitchStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L45-L60)]\n\n* `while` statement:\n\n [!code-csharp[WhileStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L62-L70)]\n\n* `do` statement:\n\n [!code-csharp[DoStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L72-L81)]\n\n* `for` statement:\n\n [!code-csharp[ForStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L83-L89)]\n\n* `foreach` statement:\n\n [!code-csharp[ForEachStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L91-L97)]\n\n* `break` statement:\n\n [!code-csharp[BreakStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L99-L108)]\n\n* `continue` statement:\n\n [!code-csharp[ContinueStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L110-L118)]\n\n* `goto` statement:\n\n [!code-csharp[GotoStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L120-L129)]\n\n* `return` statement:\n\n [!code-csharp[ReturnStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L131-L139)]\n\n* `yield` statement:\n\n [!code-csharp[YieldStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L141-L155)]\n\n* `throw` statements and `try` statements:\n\n [!code-csharp[TryThrow](../../../samples/snippets/csharp/tour/statements/Program.cs#L157-L183)]\n\n* `checked` and `unchecked` statements:\n\n [!code-csharp[CheckedUncheckedStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L185-L196)]\n\n* `lock` statement:\n\n [!code-csharp[LockStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L257-L273)]\n\n* `using` statement:\n\n [!code-csharp[UsingStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L198-L206)]\n\n>[!div class=\"step-by-step\"]\n[Previous](expressions.md)\n[Next](classes-and-objects.md)\n","nodes":[{"pos":[11,52],"content":"C# Statements | A tour of the C# language","needQuote":true,"needEscape":true,"nodes":[{"content":"C# Statements | A tour of the C# language","pos":[0,41]}]},{"pos":[66,121],"content":"You create the actions of a C# program using statements","needQuote":true,"needEscape":true,"nodes":[{"content":"You create the actions of a C# program using statements","pos":[0,55]}]},{"pos":[132,164],"content":".NET, csharp, statements, syntax","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, csharp, statements, syntax","pos":[0,32]}]},{"pos":[359,369],"content":"Statements","linkify":"Statements","nodes":[{"content":"Statements","pos":[0,10]}]},{"content":"The actions of a program are expressed using <bpt id=\"p1\">*</bpt>statements<ept id=\"p1\">*</ept>.","pos":[371,429],"source":"The actions of a program are expressed using *statements*."},{"content":"C# supports several different kinds of statements, a number of which are defined in terms of embedded statements.","pos":[430,543]},{"content":"A <bpt id=\"p1\">*</bpt>block<ept id=\"p1\">*</ept> permits multiple statements to be written in contexts where a single statement is allowed.","pos":[545,645],"source":"A *block* permits multiple statements to be written in contexts where a single statement is allowed."},{"content":"A block consists of a list of statements written between the delimiters <ph id=\"ph1\">`{`</ph> and <ph id=\"ph2\">`}`</ph>.","pos":[646,730],"source":" A block consists of a list of statements written between the delimiters `{` and `}`."},{"pos":[732,807],"content":"<bpt id=\"p1\">*</bpt>Declaration statements<ept id=\"p1\">*</ept> are used to declare local variables and constants.","source":"*Declaration statements* are used to declare local variables and constants."},{"content":"<bpt id=\"p1\">*</bpt>Expression statements<ept id=\"p1\">*</ept> are used to evaluate expressions.","pos":[809,866],"source":"*Expression statements* are used to evaluate expressions."},{"content":"Expressions that can be used as statements include method invocations, object allocations using the <ph id=\"ph1\">`new`</ph> operator, assignments using <ph id=\"ph2\">`=`</ph> and the compound assignment operators, increment and decrement operations using the <ph id=\"ph3\">`++`</ph> and <ph id=\"ph4\">`--`</ph> operators and <ph id=\"ph5\">`await`</ph> expressions.","pos":[867,1137],"source":" Expressions that can be used as statements include method invocations, object allocations using the `new` operator, assignments using `=` and the compound assignment operators, increment and decrement operations using the `++` and `--` operators and `await` expressions."},{"content":"<bpt id=\"p1\">*</bpt>Selection statements<ept id=\"p1\">*</ept> are used to select one of a number of possible statements for execution based on the value of some expression.","pos":[1139,1272],"source":"*Selection statements* are used to select one of a number of possible statements for execution based on the value of some expression."},{"content":"In this group are the <ph id=\"ph1\">`if`</ph> and <ph id=\"ph2\">`switch`</ph> statements.","pos":[1273,1324],"source":" In this group are the `if` and `switch` statements."},{"content":"<bpt id=\"p1\">*</bpt>Iteration statements<ept id=\"p1\">*</ept> are used to execute repeatedly an embedded statement.","pos":[1326,1402],"source":"*Iteration statements* are used to execute repeatedly an embedded statement."},{"content":"In this group are the <ph id=\"ph1\">`while`</ph>, <ph id=\"ph2\">`do`</ph>, <ph id=\"ph3\">`for`</ph>, and <ph id=\"ph4\">`foreach`</ph> statements.","pos":[1403,1472],"source":" In this group are the `while`, `do`, `for`, and `foreach` statements."},{"content":"<bpt id=\"p1\">*</bpt>Jump statements<ept id=\"p1\">*</ept> are used to transfer control.","pos":[1474,1521],"source":"*Jump statements* are used to transfer control."},{"content":"In this group are the <ph id=\"ph1\">`break`</ph>, <ph id=\"ph2\">`continue`</ph>, <ph id=\"ph3\">`goto`</ph>, <ph id=\"ph4\">`throw`</ph>, <ph id=\"ph5\">`return`</ph>, and <ph id=\"ph6\">`yield`</ph> statements.","pos":[1522,1615],"source":" In this group are the `break`, `continue`, `goto`, `throw`, `return`, and `yield` statements."},{"pos":[1617,1850],"content":"The <ph id=\"ph1\">`try`</ph>...<ph id=\"ph2\">`catch`</ph> statement is used to catch exceptions that occur during execution of a block, and the <ph id=\"ph3\">`try`</ph>...<ph id=\"ph4\">`finally`</ph> statement is used to specify finalization code that is always executed, whether an exception occurred or not.","source":"The `try`...`catch` statement is used to catch exceptions that occur during execution of a block, and the `try`...`finally` statement is used to specify finalization code that is always executed, whether an exception occurred or not."},{"pos":[1852,1999],"content":"The <ph id=\"ph1\">`checked`</ph> and <ph id=\"ph2\">`unchecked`</ph> statements are used to control the overflow-checking context for integral-type arithmetic operations and conversions.","source":"The `checked` and `unchecked` statements are used to control the overflow-checking context for integral-type arithmetic operations and conversions."},{"pos":[2001,2133],"content":"The <ph id=\"ph1\">`lock`</ph> statement is used to obtain the mutual-exclusion lock for a given object, execute a statement, and then release the lock.","source":"The `lock` statement is used to obtain the mutual-exclusion lock for a given object, execute a statement, and then release the lock."},{"pos":[2135,2242],"content":"The <ph id=\"ph1\">`using`</ph> statement is used to obtain a resource, execute a statement, and then dispose of that resource.","source":"The `using` statement is used to obtain a resource, execute a statement, and then dispose of that resource."},{"content":"The following lists the kinds of statements that can be used, and provides an example for each.","pos":[2244,2339]},{"content":"Local variable declaration:","pos":[2343,2370]},{"pos":[2373,2469],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Declarations<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L9-L15)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Declarations](../../../samples/snippets/csharp/tour/statements/Program.cs#L9-L15)]"},{"content":"Local constant declaration:","pos":[2473,2500]},{"pos":[2503,2608],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ConstantDeclarations<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L17-L22)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ConstantDeclarations](../../../samples/snippets/csharp/tour/statements/Program.cs#L17-L22)]"},{"content":"Expression statement:","pos":[2612,2633]},{"pos":[2636,2732],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Expressions<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L24-L31)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[Expressions](../../../samples/snippets/csharp/tour/statements/Program.cs#L24-L31)]"},{"pos":[2736,2751],"content":"<ph id=\"ph1\">`if`</ph> statement:","source":"`if` statement:"},{"pos":[2754,2850],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>IfStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L33-L43)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[IfStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L33-L43)]"},{"pos":[2854,2873],"content":"<ph id=\"ph1\">`switch`</ph> statement:","source":"`switch` statement:"},{"pos":[2876,2976],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>SwitchStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L45-L60)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[SwitchStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L45-L60)]"},{"pos":[2980,2998],"content":"<ph id=\"ph1\">`while`</ph> statement:","source":"`while` statement:"},{"pos":[3001,3100],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>WhileStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L62-L70)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[WhileStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L62-L70)]"},{"pos":[3104,3119],"content":"<ph id=\"ph1\">`do`</ph> statement:","source":"`do` statement:"},{"pos":[3122,3218],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DoStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L72-L81)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[DoStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L72-L81)]"},{"pos":[3222,3238],"content":"<ph id=\"ph1\">`for`</ph> statement:","source":"`for` statement:"},{"pos":[3241,3338],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ForStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L83-L89)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ForStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L83-L89)]"},{"pos":[3342,3362],"content":"<ph id=\"ph1\">`foreach`</ph> statement:","source":"`foreach` statement:"},{"pos":[3365,3466],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ForEachStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L91-L97)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ForEachStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L91-L97)]"},{"pos":[3470,3488],"content":"<ph id=\"ph1\">`break`</ph> statement:","source":"`break` statement:"},{"pos":[3491,3591],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>BreakStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L99-L108)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[BreakStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L99-L108)]"},{"pos":[3595,3616],"content":"<ph id=\"ph1\">`continue`</ph> statement:","source":"`continue` statement:"},{"pos":[3619,3723],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ContinueStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L110-L118)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ContinueStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L110-L118)]"},{"pos":[3727,3744],"content":"<ph id=\"ph1\">`goto`</ph> statement:","source":"`goto` statement:"},{"pos":[3747,3847],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>GotoStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L120-L129)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[GotoStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L120-L129)]"},{"pos":[3851,3870],"content":"<ph id=\"ph1\">`return`</ph> statement:","source":"`return` statement:"},{"pos":[3873,3975],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ReturnStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L131-L139)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ReturnStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L131-L139)]"},{"pos":[3979,3997],"content":"<ph id=\"ph1\">`yield`</ph> statement:","source":"`yield` statement:"},{"pos":[4000,4101],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>YieldStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L141-L155)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[YieldStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L141-L155)]"},{"pos":[4105,4145],"content":"<ph id=\"ph1\">`throw`</ph> statements and <ph id=\"ph2\">`try`</ph> statements:","source":"`throw` statements and `try` statements:"},{"pos":[4148,4243],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TryThrow<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L157-L183)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[TryThrow](../../../samples/snippets/csharp/tour/statements/Program.cs#L157-L183)]"},{"pos":[4247,4284],"content":"<ph id=\"ph1\">`checked`</ph> and <ph id=\"ph2\">`unchecked`</ph> statements:","source":"`checked` and `unchecked` statements:"},{"pos":[4287,4399],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CheckedUncheckedStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L185-L196)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CheckedUncheckedStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L185-L196)]"},{"pos":[4403,4420],"content":"<ph id=\"ph1\">`lock`</ph> statement:","source":"`lock` statement:"},{"pos":[4423,4523],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>LockStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L257-L273)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[LockStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L257-L273)]"},{"pos":[4527,4545],"content":"<ph id=\"ph1\">`using`</ph> statement:","source":"`using` statement:"},{"pos":[4548,4649],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>UsingStatement<ept id=\"p2\">](../../../samples/snippets/csharp/tour/statements/Program.cs#L198-L206)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[UsingStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L198-L206)]"},{"content":"<bpt id=\"p1\">[</bpt>Previous<ept id=\"p1\">](expressions.md)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">[</bpt>Next<ept id=\"p2\">](classes-and-objects.md)</ept>","pos":[4680,4737],"source":"[Previous](expressions.md)\n[Next](classes-and-objects.md)"}]}