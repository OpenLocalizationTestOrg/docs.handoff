<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="persistence-participants.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9a1f2142a2aef617c3337bf1bc384a51c8ed049</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\persistence-participants.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c32c03dd91b1e8e3387c5efdf79cf88b8ebd87a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37b94d0fece44bc21729ed1ecca816e7dec4919a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Persistence Participants</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Persistence Participants</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A persistence participant can participate in a persistence operation (Save or Load) triggered by an application host.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph> ships with two abstract classes, <bpt id="p1">**</bpt>PersistenceParticipant<ept id="p1">**</ept> and <bpt id="p2">**</bpt>PersistenceIOParticipant<ept id="p2">**</ept>, which you can use to create a persistence participant.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A persistence participant derives from one of these classes, implements the methods of interest, and then adds an instance of the class to the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost.WorkflowExtensions%2A&gt;</ph> collection on the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The application host may look for such workflow extensions when persisting a workflow instance and invoke appropriate methods on the persistence participants at appropriate times.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following list describes the tasks performed by the persistence subsystem in different stages of the Persist (Save) operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The persistence participants are used in the third and fourth stages.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the participant is an I/O participant (a persistence participant that also participates in I/O operations), the participant is also used in the sixth stage.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Gathers built-in values, including workflow state, bookmarks, mapped variables, and timestamp.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Gathers all persistence participants that were added to the extension collection associated with the workflow instance.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Invokes the <ph id="ph1">&lt;xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A&gt;</ph> method implemented by all persistence participants.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Invokes the <ph id="ph1">&lt;xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A&gt;</ph> method implemented by all persistence participants.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Persist or save the workflow into the persistence store.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Invokes the <ph id="ph1">&lt;xref:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave%2A&gt;</ph> method on all of the persistence I/O participants.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the participant is not an I/O participant, this task is skipped.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the persistence episode is transactional, the transaction is provided in Transaction.Current property.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Waits for all persistence participants to complete.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If all the participants succeed in persisting instance data, commits the transaction.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A persistence participant derives from the <bpt id="p1">**</bpt>PersistenceParticipant<ept id="p1">**</ept> class and may implement the <bpt id="p2">**</bpt>CollectValues<ept id="p2">**</ept> and <bpt id="p3">**</bpt>MapValues<ept id="p3">**</ept> methods.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A persistence I/O participant derives from the <bpt id="p1">**</bpt>PersistenceIOParticipant<ept id="p1">**</ept> class and may implement the <bpt id="p2">**</bpt>BeginOnSave<ept id="p2">**</ept> method in addition to implementing the <bpt id="p3">**</bpt>CollectValues<ept id="p3">**</ept> and <bpt id="p4">**</bpt>MapValues<ept id="p4">**</ept> methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Each stage is completed before the next stage begins.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, values are collected from <bpt id="p1">**</bpt>all<ept id="p1">**</ept> persistence participants in the first stage.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Then all the values collected in the first stage are provided to all persistence participants in the second stage for mapping.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Then all the values collected and mapped in the first and second stages are provided to the persistence provider in the third stage, and so on.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following list describes the tasks performed by the persistence subsystem in different stages of the Load operation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The persistence participants are used in the fourth stage.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The persistence I/O participants (persistence participants that also participate in I/O operations) are also used in the third stage.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gathers all persistence participants that were added to the extension collection associated with the workflow instance.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Loads the workflow from the persistence store.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Invokes the <ph id="ph1">&lt;xref:System.Activities.Persistence.PersistenceIOParticipant.BeginOnLoad%2A&gt;</ph> on all persistence I/O participants and waits for all the persistence participants to complete.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the persistence episode is transactional, the transaction is provided in Transaction.Current.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Loads the workflow instance in memory based on the data retrieved from the persistence store.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Invokes <ph id="ph1">&lt;xref:System.Activities.Persistence.PersistenceParticipant.PublishValues%2A&gt;</ph> on each persistence participant.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A persistence participant derives from the <bpt id="p1">**</bpt>PersistenceParticipant<ept id="p1">**</ept> class and may implement the <bpt id="p2">**</bpt>PublishValues<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A persistence I/O participant derives from the <bpt id="p1">**</bpt>PersistenceIOParticipant<ept id="p1">**</ept> class and may implement the <bpt id="p2">**</bpt>BeginOnLoad<ept id="p2">**</ept> method in addition to implementing the <bpt id="p3">**</bpt>PublishValues<ept id="p3">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When loading a workflow instance the persistence provider creates a lock on that instance.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This prevents the instance from being loaded by more than one host in a multi-node scenario.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you attempt to load a workflow instance that has been locked you will see an exception like the following: The exception " System.ServiceModel.Persistence.InstanceLockException: The requested operation could not complete because the lock for instance '00000000-0000-0000-0000-000000000000' could not be acquired".</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This error is caused when one of the following occurs:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In a multi-node scenario the instance is loaded by another host.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are a few different ways to resolve these types of conflicts: forward the processing to the node which owns the lock and retry, or force the load which will cause the other host to be unable to save their work.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In a single-node scenario and the host crashed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When the host starts up again (a process recycle or creating a new persistence provider factory) the new host attempts to load an instance which is still locked by the old host because the lock hasn't expired yet.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In a single-node scenario and the instance in question was aborted at some point and a new persistence provider instance is created which has a different host ID.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The lock timeout value has a default value of 5 minutes, you can specify a different timeout value when calling <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Custom Persistence Participant<ept id="p1">](how-to-create-a-custom-persistence-participant.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Store Extensibility<ept id="p1">](store-extensibility.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>