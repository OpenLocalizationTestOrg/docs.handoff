{"content":"---\ntitle: \"Synchronizing a DataSet with an XmlDataDocument | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: fbc96fa9-b5d1-4f97-b099-c89b0e14ce2c\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Synchronizing a DataSet with an XmlDataDocument\nThis section demonstrates one step in the processing of a purchase order, using a strongly typed <xref:System.Data.DataSet> synchronized with an <xref:System.Xml.XmlDataDocument>. The examples that follow create a **DataSet** with a minimized schema that matches only a portion of the source XML document. The examples use an **XmlDataDocument** to preserve the fidelity of the source XML document, enabling the **DataSet** to be used to expose a subset of the XML document.  \n  \n The following XML document contains all the information pertaining to a purchase order: customer information, items ordered, shipping information, and so on.  \n  \n```  \n<?xml version=\"1.0\" standalone=\"yes\"?>  \n<PurchaseOrder>  \n  <Customers>  \n    <CustomerID>CHOPS</CustomerID>  \n    <Orders>  \n      <OrderID>10966</OrderID>  \n      <OrderDetails>  \n        <OrderID>10966</OrderID>  \n        <ProductID>37</ProductID>  \n        <UnitPrice>26</UnitPrice>  \n        <Quantity>8</Quantity>  \n        <Discount>0</Discount>  \n      </OrderDetails>  \n      <OrderDetails>  \n        <OrderID>10966</OrderID>  \n        <ProductID>56</ProductID>  \n        <UnitPrice>38</UnitPrice>  \n        <Quantity>12</Quantity>  \n        <Discount>0.15</Discount>  \n      </OrderDetails>  \n      <OrderDetails>  \n        <OrderID>10966</OrderID>  \n        <ProductID>62</ProductID>  \n        <UnitPrice>49.3</UnitPrice>  \n        <Quantity>12</Quantity>  \n        <Discount>0.15</Discount>  \n      </OrderDetails>  \n      <CustomerID>CHOPS</CustomerID>  \n      <EmployeeID>4</EmployeeID>  \n      <OrderDate>1998-03-20T00:00:00.0000000</OrderDate>  \n      <RequiredDate>1998-04-17T00:00:00.0000000</RequiredDate>  \n      <ShippedDate>1998-04-08T00:00:00.0000000</ShippedDate>  \n      <ShipVia>1</ShipVia>  \n      <Freight>27.19</Freight>  \n      <ShipName>Chop-suey Chinese</ShipName>  \n      <ShipAddress>Hauptstr. 31</ShipAddress>  \n      <ShipCity>Bern</ShipCity>  \n      <ShipPostalCode>3012</ShipPostalCode>  \n      <ShipCountry>Switzerland</ShipCountry>  \n    </Orders>  \n    <CompanyName>Chop-suey Chinese</CompanyName>  \n    <ContactName>Yang Wang</ContactName>  \n    <ContactTitle>Owner</ContactTitle>  \n    <Address>Hauptstr. 29</Address>  \n    <City>Bern</City>  \n    <PostalCode>3012</PostalCode>  \n    <Country>Switzerland</Country>  \n    <Phone>0452-076545</Phone>  \n  </Customers>  \n  <Shippers>  \n    <ShipperID>1</ShipperID>  \n    <CompanyName>Speedy Express</CompanyName>  \n    <Phone>(503) 555-0100</Phone>  \n  </Shippers>  \n  <Shippers>  \n    <ShipperID>2</ShipperID>  \n    <CompanyName>United Package</CompanyName>  \n    <Phone>(503) 555-0101</Phone>  \n  </Shippers>  \n  <Shippers>  \n    <ShipperID>3</ShipperID>  \n    <CompanyName>Federal Shipping</CompanyName>  \n    <Phone>(503) 555-0102</Phone>  \n  </Shippers>  \n  <Products>  \n    <ProductID>37</ProductID>  \n    <ProductName>Gravad lax</ProductName>  \n    <QuantityPerUnit>12 - 500 g pkgs.</QuantityPerUnit>  \n    <UnitsInStock>11</UnitsInStock>  \n    <UnitsOnOrder>50</UnitsOnOrder>  \n    <ReorderLevel>25</ReorderLevel>  \n  </Products>  \n  <Products>  \n    <ProductID>56</ProductID>  \n    <ProductName>Gnocchi di nonna Alice</ProductName>  \n    <QuantityPerUnit>24 - 250 g pkgs.</QuantityPerUnit>  \n    <UnitsInStock>21</UnitsInStock>  \n    <UnitsOnOrder>10</UnitsOnOrder>  \n    <ReorderLevel>30</ReorderLevel>  \n  </Products>  \n  <Products>  \n    <ProductID>62</ProductID>  \n    <ProductName>Tarte au sucre</ProductName>  \n    <QuantityPerUnit>48 pies</QuantityPerUnit>  \n    <UnitsInStock>17</UnitsInStock>  \n    <UnitsOnOrder>0</UnitsOnOrder>  \n    <ReorderLevel>0</ReorderLevel>  \n  </Products>  \n</PurchaseOrder>  \n```  \n  \n One step in processing the purchase order information contained in the preceding XML document is for the order to be filled from the company's current inventory. The employee responsible for filling the order from the company's warehouse does not need to see the entire contents of the purchase order; they only need to see the product information for the order. To expose only the product information from the XML document, create a strongly typed **DataSet** with a schema, written as XML Schema definition language (XSD) schema, that maps to the products and quantities ordered. For more information about strongly typed **DataSet** objects, see [Typed DataSets](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/typed-datasets.md).  \n  \n The following code shows the schema from which the strongly typed **DataSet** is generated for this sample.  \n  \n```  \n<?xml version=\"1.0\" standalone=\"yes\"?>  \n<xs:schema id=\"OrderDetail\" xmlns=\"\"   \n                            xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"   \n                            xmlns:codegen=\"urn:schemas-microsoft-com:xml-msprop\"   \n                            xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"OrderDetail\" msdata:IsDataSet=\"true\">  \n    <xs:complexType>  \n      <xs:choice maxOccurs=\"unbounded\">  \n        <xs:element name=\"OrderDetails\" codegen:typedName=\"LineItem\" codegen:typedPlural=\"LineItems\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"OrderID\" type=\"xs:int\" minOccurs=\"0\" codegen:typedName=\"OrderID\"/>  \n              <xs:element name=\"Quantity\" type=\"xs:short\" minOccurs=\"0\" codegen:typedName=\"Quantity\"/>  \n              <xs:element name=\"ProductID\" type=\"xs:int\" minOccurs=\"0\" codegen:typedName=\"ProductID\"/>  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n        <xs:element name=\"Products\" codegen:typedName=\"Product\" codegen:typedPlural=\"Products\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"ProductID\" type=\"xs:int\" minOccurs=\"0\" codegen:typedName=\"ProductID\"/>  \n              <xs:element name=\"ProductName\" type=\"xs:string\" minOccurs=\"0\" codegen:typedName=\"ProductName\"/>  \n              <xs:element name=\"QuantityPerUnit\" type=\"xs:string\" minOccurs=\"0\" codegen:typedName=\"QuantityPerUnit\"/>  \n              <xs:element name=\"UnitsInStock\" type=\"xs:short\" minOccurs=\"0\" codegen:typedName=\"UnitsInStock\"/>  \n              <xs:element name=\"UnitsOnOrder\" type=\"xs:short\" minOccurs=\"0\" codegen:typedName=\"UnitsOnOrder\"/>  \n              <xs:element name=\"ReorderLevel\" type=\"xs:short\" minOccurs=\"0\" codegen:typedName=\"ReorderLevel\"/>  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\">  \n      <xs:selector xpath=\".//Products\" />  \n      <xs:field xpath=\"ProductID\" />  \n    </xs:unique>  \n    <xs:keyref name=\"Relation1\" refer=\"Constraint1\" codegen:typedChildren=\"GetLineItems\" codegen:typedParent=\"Product\">  \n      <xs:selector xpath=\".//OrderDetails\" />  \n      <xs:field xpath=\"ProductID\" />  \n    </xs:keyref>  \n  </xs:element>  \n</xs:schema>  \n```  \n  \n Notice that only information from the **OrderDetails** and **Products** elements of the original XML document are included in the schema for the **DataSet**. Synchronizing the **DataSet** with an **XmlDataDocument** ensures that the elements not included in the **DataSet** will persist with the XML document.  \n  \n With the strongly typed **DataSet** generated from the XML Schema (with a namespace of **Northwind.FillOrder**), a portion of the original XML document can be exposed by synchronizing the **DataSet** with the **XmlDataDocument** loaded from the source XML document. Notice that the **DataSet** generated from the schema contains structure but no data. The data is filled in when you load the XML into the **XmlDataDocument**. If you attempt to load an **XmlDataDocument** that has been synchronized with a **DataSet** that already contains data, an exception will be thrown.  \n  \n After the **DataSet** (and the **XmlDataDocument**) has been updated, the **XmlDataDocument** can then write out the modified XML document with the elements ignored by the **DataSet** still intact, as shown below. In the purchase order scenario, after the order items have been filled, the modified XML document can then be passed on to the next step in the order process, perhaps to the company's shipping department.  \n  \n```vb  \nImports System  \nImports System.Data  \nImports System.Xml  \nImports Northwind.FillOrder  \n  \nPublic class Sample  \n  Public Shared Sub Main()  \n  \n    Dim orderDS As OrderDetail = New OrderDetail  \n  \n    Dim xmlDocument As XmlDataDocument = New XmlDataDocument(orderDS)   \n  \n    xmlDocument.Load(\"Order.xml\")  \n  \n    Dim orderItem As OrderDetail.LineItem  \n    Dim product As OrderDetail.Product  \n  \n    For Each orderItem In orderDS.LineItems  \n      product = orderItem.Product  \n  \n      ' Remove quantity from the current stock.  \n      product.UnitsInStock = CType(product.UnitsInStock - orderItem.Quantity, Short)  \n  \n      ' If the remaining stock is less than the reorder level, order more.  \n      If ((product.UnitsInStock + product.UnitsOnOrder) < product.ReorderLevel) Then  \n        product.UnitsOnOrder = CType(product.UnitsOnOrder + product.ReorderLevel, Short)  \n      End If  \n    Next  \n  \n    xmlDocument.Save(\"Order_out.xml\")  \n  End Sub  \nEnd Class  \n```  \n  \n```csharp  \nusing System;  \nusing System.Data;  \nusing System.Xml;  \nusing Northwind.FillOrder;  \n  \npublic class Sample  \n{  \n  public static void Main()  \n  {  \n    OrderDetail orderDS = new OrderDetail();   \n  \n    XmlDataDocument xmlDocument = new XmlDataDocument(orderDS);   \n  \n    xmlDocument.Load(\"Order.xml\");  \n  \n    foreach (OrderDetail.LineItem orderItem in orderDS.LineItems)  \n    {  \n      OrderDetail.Product product = orderItem.Product;  \n  \n      // Remove quantity from the current stock.  \n      product.UnitsInStock = (short)(product.UnitsInStock - orderItem.Quantity);  \n  \n      // If the remaining stock is less than the reorder level, order more.  \n      if ((product.UnitsInStock + product.UnitsOnOrder) < product.ReorderLevel)  \n        product.UnitsOnOrder = (short)(product.UnitsOnOrder + product.ReorderLevel);  \n    }  \n  \n    xmlDocument.Save(\"Order_out.xml\");  \n  }  \n}  \n```  \n  \n## See Also  \n [DataSet and XmlDataDocument Synchronization](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/dataset-and-xmldatadocument-synchronization.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[12,76],"content":"Synchronizing a DataSet with an XmlDataDocument | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Synchronizing a DataSet with an XmlDataDocument | Microsoft Docs","pos":[0,64]}]},{"pos":[385,432],"content":"Synchronizing a DataSet with an XmlDataDocument","linkify":"Synchronizing a DataSet with an XmlDataDocument","nodes":[{"content":"Synchronizing a DataSet with an XmlDataDocument","pos":[0,47]}]},{"content":"This section demonstrates one step in the processing of a purchase order, using a strongly typed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> synchronized with an <ph id=\"ph2\">&lt;xref:System.Xml.XmlDataDocument&gt;</ph>.","pos":[433,612],"source":"This section demonstrates one step in the processing of a purchase order, using a strongly typed <xref:System.Data.DataSet> synchronized with an <xref:System.Xml.XmlDataDocument>."},{"content":"The examples that follow create a <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> with a minimized schema that matches only a portion of the source XML document.","pos":[613,738],"source":" The examples that follow create a **DataSet** with a minimized schema that matches only a portion of the source XML document."},{"content":"The examples use an <bpt id=\"p1\">**</bpt>XmlDataDocument<ept id=\"p1\">**</ept> to preserve the fidelity of the source XML document, enabling the <bpt id=\"p2\">**</bpt>DataSet<ept id=\"p2\">**</ept> to be used to expose a subset of the XML document.","pos":[739,907],"source":" The examples use an **XmlDataDocument** to preserve the fidelity of the source XML document, enabling the **DataSet** to be used to expose a subset of the XML document."},{"content":"The following XML document contains all the information pertaining to a purchase order: customer information, items ordered, shipping information, and so on.","pos":[914,1071]},{"content":"One step in processing the purchase order information contained in the preceding XML document is for the order to be filled from the company's current inventory.","pos":[4105,4266]},{"content":"The employee responsible for filling the order from the company's warehouse does not need to see the entire contents of the purchase order; they only need to see the product information for the order.","pos":[4267,4467]},{"content":"To expose only the product information from the XML document, create a strongly typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> with a schema, written as XML Schema definition language (XSD) schema, that maps to the products and quantities ordered.","pos":[4468,4686],"source":" To expose only the product information from the XML document, create a strongly typed **DataSet** with a schema, written as XML Schema definition language (XSD) schema, that maps to the products and quantities ordered."},{"content":"For more information about strongly typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> objects, see <bpt id=\"p2\">[</bpt>Typed DataSets<ept id=\"p2\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/typed-datasets.md)</ept>.","pos":[4687,4859],"source":" For more information about strongly typed **DataSet** objects, see [Typed DataSets](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/typed-datasets.md)."},{"pos":[4866,4973],"content":"The following code shows the schema from which the strongly typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> is generated for this sample.","source":"The following code shows the schema from which the strongly typed **DataSet** is generated for this sample."},{"content":"Notice that only information from the <bpt id=\"p1\">**</bpt>OrderDetails<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Products<ept id=\"p2\">**</ept> elements of the original XML document are included in the schema for the <bpt id=\"p3\">**</bpt>DataSet<ept id=\"p3\">**</ept>.","pos":[7357,7514],"source":"Notice that only information from the **OrderDetails** and **Products** elements of the original XML document are included in the schema for the **DataSet**."},{"content":"Synchronizing the <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> with an <bpt id=\"p2\">**</bpt>XmlDataDocument<ept id=\"p2\">**</ept> ensures that the elements not included in the <bpt id=\"p3\">**</bpt>DataSet<ept id=\"p3\">**</ept> will persist with the XML document.","pos":[7515,7666],"source":" Synchronizing the **DataSet** with an **XmlDataDocument** ensures that the elements not included in the **DataSet** will persist with the XML document."},{"content":"With the strongly typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> generated from the XML Schema (with a namespace of <bpt id=\"p2\">**</bpt>Northwind.FillOrder<ept id=\"p2\">**</ept>), a portion of the original XML document can be exposed by synchronizing the <bpt id=\"p3\">**</bpt>DataSet<ept id=\"p3\">**</ept> with the <bpt id=\"p4\">**</bpt>XmlDataDocument<ept id=\"p4\">**</ept> loaded from the source XML document.","pos":[7673,7938],"source":"With the strongly typed **DataSet** generated from the XML Schema (with a namespace of **Northwind.FillOrder**), a portion of the original XML document can be exposed by synchronizing the **DataSet** with the **XmlDataDocument** loaded from the source XML document."},{"content":"Notice that the <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> generated from the schema contains structure but no data.","pos":[7939,8024],"source":" Notice that the **DataSet** generated from the schema contains structure but no data."},{"content":"The data is filled in when you load the XML into the <bpt id=\"p1\">**</bpt>XmlDataDocument<ept id=\"p1\">**</ept>.","pos":[8025,8098],"source":" The data is filled in when you load the XML into the **XmlDataDocument**."},{"content":"If you attempt to load an <bpt id=\"p1\">**</bpt>XmlDataDocument<ept id=\"p1\">**</ept> that has been synchronized with a <bpt id=\"p2\">**</bpt>DataSet<ept id=\"p2\">**</ept> that already contains data, an exception will be thrown.","pos":[8099,8247],"source":" If you attempt to load an **XmlDataDocument** that has been synchronized with a **DataSet** that already contains data, an exception will be thrown."},{"content":"After the <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> (and the <bpt id=\"p2\">**</bpt>XmlDataDocument<ept id=\"p2\">**</ept>) has been updated, the <bpt id=\"p3\">**</bpt>XmlDataDocument<ept id=\"p3\">**</ept> can then write out the modified XML document with the elements ignored by the <bpt id=\"p4\">**</bpt>DataSet<ept id=\"p4\">**</ept> still intact, as shown below.","pos":[8254,8467],"source":"After the **DataSet** (and the **XmlDataDocument**) has been updated, the **XmlDataDocument** can then write out the modified XML document with the elements ignored by the **DataSet** still intact, as shown below."},{"content":"In the purchase order scenario, after the order items have been filled, the modified XML document can then be passed on to the next step in the order process, perhaps to the company's shipping department.","pos":[8468,8672]},{"pos":[10590,10598],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>DataSet and XmlDataDocument Synchronization<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/dataset-and-xmldatadocument-synchronization.md)</ept><ph id=\"ph1\"> </ph>","pos":[10602,10765],"source":"[DataSet and XmlDataDocument Synchronization](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/dataset-and-xmldatadocument-synchronization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[10768,10872],"source":" [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}