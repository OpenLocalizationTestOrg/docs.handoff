{"content":"---\ntitle: \"How to: Modify string contents - C# Guide\"\nms.date: 02/26/2018\nhelpviewer_keywords: \n  - \"strings [C#], modifying\"\n---\n# How to: Modify string contents in C\\#\n\nThis article demonstrates several techniques to produce a `string` by modifying an existing `string`. All the techniques demonstrated return the result of the modifications as a new `string` object. To clearly demonstrate this, the examples all store the result in a new variable. You can then examine both the original `string` and the `string` resulting from the modification when you run each example.\n\n[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]\n\nThere are several techniques demonstrated in this article. You can replace existing text. You can search for patterns and replace matching text with other text. You can treat a string as a sequence of characters. You can also use convenience methods that remove white space. You should choose the techniques that most closely match your scenario.\n\n## Replace text\n\nThe following code creates a new string by replacing existing text with a substitute.\n\n[!code-csharp-interactive[replace creates a new string](../../../samples/snippets/csharp/how-to/strings/ModifyStrings.cs#1)]\n\nThe preceding code demonstrates this *immutable* property of strings. You can see in the preceding example that the original string, `source`, is not modified. The <xref:System.String.Replace%2A?displayProperty=nameWithType> method creates a new `string` containing the modifications.\n\nThe <xref:System.String.Replace%2A> method can replace either strings or single characters. In both cases, every occurrence of the sought text is replaced.  The following example replaces all ' ' characters with '\\_':\n\n[!code-csharp-interactive[replace characters](../../../samples/snippets/csharp/how-to/strings/ModifyStrings.cs#2)]\n\nThe source string is unchanged, and a new string is returned with the replacement.\n\n## Trim white space\n\nYou can use the <xref:System.String.Trim%2A?displayProperty=nameWithType>, <xref:System.String.TrimStart%2A?displayProperty=nameWithType>, and <xref:System.String.TrimEnd%2A?displayProperty=nameWithType> methods to remove any leading or trailing white space.  The following code shows an example of each. The source string does not change; these methods return a new string with the modified contents.\n\n[!code-csharp-interactive[trim white space](../../../samples/snippets/csharp/how-to/strings/ModifyStrings.cs#3)]\n\n## Remove text\n\nYou can remove text from a string using the <xref:System.String.Remove%2A?displayProperty=nameWithType> method. This method removes a number of characters starting at a specific index. The following example shows how to use <xref:System.String.IndexOf%2A?displayProperty=nameWithType> followed by <xref:System.String.Remove%2A> to remove text from a string:\n\n[!code-csharp-interactive[remove text](../../../samples/snippets/csharp/how-to/strings/ModifyStrings.cs#4)]\n\n## Replace matching patterns\n\nYou can use [regular expressions](../../standard/base-types/regular-expressions.md) to replace text matching patterns with new text, possibly defined by a pattern. The following example uses the <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> class to find a pattern in a source string and replace it with proper capitalization. The <xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)?displayProperty=nameWithType> method takes a function that provides the logic of the replacement as one of its arguments. In this example, that function, `LocalReplaceMatchCase` is a **local function** declared inside the sample method. `LocalReplaceMatchCase` uses the <xref:System.Text.StringBuilder?displayProperty=nameWithType> class to build the replacement string with proper capitalization.\n\nRegular expressions are most useful for searching and replacing text that follows a pattern, rather than known text. See [How to: search strings](search-strings.md) for more details. The search pattern, \"the\\s\" searches for the word \"the\" followed by a white-space character. That part of the pattern ensures that it doesn't match \"there\" in the source string. For more information on regular expression language elements, see [Regular Expression Language - Quick Reference](../../standard/base-types/regular-expression-language-quick-reference.md).\n\n[!code-csharp-interactive[replace creates a new string](../../../samples/snippets/csharp/how-to/strings/ModifyStrings.cs#5)]\n\nThe <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method returns an immutable string with the contents in the <xref:System.Text.StringBuilder> object.\n\n## Modifying individual characters\n\nYou can produce a character array from a string, modify the contents of the array, and then create a new string from the modified contents of the array.\n\nThe following example shows how to replace a set of characters in a string. First, it uses the <xref:System.String.ToCharArray?displayProperty=nameWithName> method to create an array of characters. It uses the <xref:System.String.IndexOf%2A> method to find the starting index of the word \"fox.\" The next three characters are replaced with a different word. Finally, a new string is constructed from the updated character array.\n\n[!code-csharp-interactive[replace creates a new string](../../../samples/snippets/csharp/how-to/strings/ModifyStrings.cs#6)]\n\n## Unsafe modifications to string\n\nUsing **unsafe** code, you can modify a string \"in place\" after it has been created. Unsafe code bypasses many of the features of .NET designed to minimize certain types of bugs in code. You need to use unsafe code to modify a string in place because the string class is designed as an **immutable** type. Once it has been created, its value does not change. Unsafe code circumvents this property by accessing and modifying the memory used by a `string` without using normal `string` methods.\nThe following example is provided for those rare situations where you want to modify a string in-place using unsafe code. The example shows how to use the `fixed` keyword. The `fixed` keyword prevents the garbage collector (GC) from moving the string object in memory while code accesses the memory using the unsafe pointer. It also demonstrates one possible side effect of unsafe operations on strings that results from the way that the C# compiler stores (interns) strings internally. In general, you shouldn't use this technique unless it is absolutely necessary. You can learn more in the articles on [unsafe](../language-reference/keywords/unsafe.md) and [fixed](../language-reference/keywords/fixed-statement.md). The API reference for <xref:System.String.Intern%2A> includes information on string interning.\n\n[!code-csharp-interactive[unsafe ways to create a new string](../../../samples/snippets/csharp/how-to/strings/ModifyStrings.cs#7)]\n\nYou can try these samples by looking at the code in our [GitHub repository](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings). Or you can download the samples [as a zip file](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip).\n\n## See also\n\n- [.NET Framework Regular Expressions](../../standard/base-types/regular-expressions.md)\n- [Regular Expression Language - Quick Reference](../../standard/base-types/regular-expression-language-quick-reference.md)\n","nodes":[{"pos":[4,126],"embed":true,"restype":"x-metadata","content":"title: \"How to: Modify string contents - C# Guide\"\nms.date: 02/26/2018\nhelpviewer_keywords: \n  - \"strings [C#], modifying\"","nodes":[{"content":"How to: Modify string contents - C# Guide","nodes":[{"pos":[0,41],"content":"How to: Modify string contents - C# Guide","nodes":[{"content":"How to: Modify string contents - C# Guide","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[133,170],"content":"How to: Modify string contents in C\\#","linkify":"How to: Modify string contents in C\\#","nodes":[{"content":"How to: Modify string contents in C<ph id=\"ph1\">\\#</ph>","pos":[0,37],"source":"How to: Modify string contents in C\\#"}]},{"content":"This article demonstrates several techniques to produce a <ph id=\"ph1\">`string`</ph> by modifying an existing <ph id=\"ph2\">`string`</ph>.","pos":[172,273],"source":"This article demonstrates several techniques to produce a `string` by modifying an existing `string`."},{"content":"All the techniques demonstrated return the result of the modifications as a new <ph id=\"ph1\">`string`</ph> object.","pos":[274,370],"source":" All the techniques demonstrated return the result of the modifications as a new `string` object."},{"content":"To clearly demonstrate this, the examples all store the result in a new variable.","pos":[371,452]},{"content":"You can then examine both the original <ph id=\"ph1\">`string`</ph> and the <ph id=\"ph2\">`string`</ph> resulting from the modification when you run each example.","pos":[453,576],"source":" You can then examine both the original `string` and the `string` resulting from the modification when you run each example."},{"content":"There are several techniques demonstrated in this article.","pos":[647,705]},{"content":"You can replace existing text.","pos":[706,736]},{"content":"You can search for patterns and replace matching text with other text.","pos":[737,807]},{"content":"You can treat a string as a sequence of characters.","pos":[808,859]},{"content":"You can also use convenience methods that remove white space.","pos":[860,921]},{"content":"You should choose the techniques that most closely match your scenario.","pos":[922,993]},{"pos":[998,1010],"content":"Replace text","linkify":"Replace text","nodes":[{"content":"Replace text","pos":[0,12]}]},{"content":"The following code creates a new string by replacing existing text with a substitute.","pos":[1012,1097]},{"content":"The preceding code demonstrates this <bpt id=\"p1\">*</bpt>immutable<ept id=\"p1\">*</ept> property of strings.","pos":[1225,1294],"source":"The preceding code demonstrates this *immutable* property of strings."},{"content":"You can see in the preceding example that the original string, <ph id=\"ph1\">`source`</ph>, is not modified.","pos":[1295,1384],"source":" You can see in the preceding example that the original string, `source`, is not modified."},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Replace%2A?displayProperty=nameWithType&gt;</ph> method creates a new <ph id=\"ph2\">`string`</ph> containing the modifications.","pos":[1385,1509],"source":" The <xref:System.String.Replace%2A?displayProperty=nameWithType> method creates a new `string` containing the modifications."},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Replace%2A&gt;</ph> method can replace either strings or single characters.","pos":[1511,1602],"source":"The <xref:System.String.Replace%2A> method can replace either strings or single characters."},{"content":"In both cases, every occurrence of the sought text is replaced.","pos":[1603,1666]},{"content":"The following example replaces all ' ' characters with '<ph id=\"ph1\">\\_</ph>':","pos":[1668,1728],"source":"  The following example replaces all ' ' characters with '\\_':"},{"content":"The source string is unchanged, and a new string is returned with the replacement.","pos":[1846,1928]},{"pos":[1933,1949],"content":"Trim white space","linkify":"Trim white space","nodes":[{"content":"Trim white space","pos":[0,16]}]},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.String.Trim%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.String.TrimEnd%2A?displayProperty=nameWithType&gt;</ph> methods to remove any leading or trailing white space.","pos":[1951,2209],"source":"You can use the <xref:System.String.Trim%2A?displayProperty=nameWithType>, <xref:System.String.TrimStart%2A?displayProperty=nameWithType>, and <xref:System.String.TrimEnd%2A?displayProperty=nameWithType> methods to remove any leading or trailing white space."},{"content":"The following code shows an example of each.","pos":[2211,2255]},{"content":"The source string does not change; these methods return a new string with the modified contents.","pos":[2256,2352]},{"pos":[2471,2482],"content":"Remove text","linkify":"Remove text","nodes":[{"content":"Remove text","pos":[0,11]}]},{"content":"You can remove text from a string using the <ph id=\"ph1\">&lt;xref:System.String.Remove%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[2484,2595],"source":"You can remove text from a string using the <xref:System.String.Remove%2A?displayProperty=nameWithType> method."},{"content":"This method removes a number of characters starting at a specific index.","pos":[2596,2668]},{"content":"The following example shows how to use <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph> followed by <ph id=\"ph2\">&lt;xref:System.String.Remove%2A&gt;</ph> to remove text from a string:","pos":[2669,2841],"source":" The following example shows how to use <xref:System.String.IndexOf%2A?displayProperty=nameWithType> followed by <xref:System.String.Remove%2A> to remove text from a string:"},{"pos":[2955,2980],"content":"Replace matching patterns","linkify":"Replace matching patterns","nodes":[{"content":"Replace matching patterns","pos":[0,25]}]},{"content":"You can use <bpt id=\"p1\">[</bpt>regular expressions<ept id=\"p1\">](../../standard/base-types/regular-expressions.md)</ept> to replace text matching patterns with new text, possibly defined by a pattern.","pos":[2982,3145],"source":"You can use [regular expressions](../../standard/base-types/regular-expressions.md) to replace text matching patterns with new text, possibly defined by a pattern."},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType&gt;</ph> class to find a pattern in a source string and replace it with proper capitalization.","pos":[3146,3335],"source":" The following example uses the <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> class to find a pattern in a source string and replace it with proper capitalization."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)?displayProperty=nameWithType&gt;</ph> method takes a function that provides the logic of the replacement as one of its arguments.","pos":[3336,3631],"source":" The <xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)?displayProperty=nameWithType> method takes a function that provides the logic of the replacement as one of its arguments."},{"content":"In this example, that function, <ph id=\"ph1\">`LocalReplaceMatchCase`</ph> is a <bpt id=\"p1\">**</bpt>local function<ept id=\"p1\">**</ept> declared inside the sample method.","pos":[3632,3746],"source":" In this example, that function, `LocalReplaceMatchCase` is a **local function** declared inside the sample method."},{"content":"<ph id=\"ph1\">`LocalReplaceMatchCase`</ph> uses the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph> class to build the replacement string with proper capitalization.","pos":[3747,3907],"source":"`LocalReplaceMatchCase` uses the <xref:System.Text.StringBuilder?displayProperty=nameWithType> class to build the replacement string with proper capitalization."},{"content":"Regular expressions are most useful for searching and replacing text that follows a pattern, rather than known text.","pos":[3909,4025]},{"content":"See <bpt id=\"p1\">[</bpt>How to: search strings<ept id=\"p1\">](search-strings.md)</ept> for more details.","pos":[4026,4091],"source":" See [How to: search strings](search-strings.md) for more details."},{"content":"The search pattern, \"the\\s\" searches for the word \"the\" followed by a white-space character.","pos":[4092,4184]},{"content":"That part of the pattern ensures that it doesn't match \"there\" in the source string.","pos":[4185,4269]},{"content":"For more information on regular expression language elements, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](../../standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[4270,4458],"source":" For more information on regular expression language elements, see [Regular Expression Language - Quick Reference](../../standard/base-types/regular-expression-language-quick-reference.md)."},{"pos":[4586,4764],"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType&gt;</ph> method returns an immutable string with the contents in the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","source":"The <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method returns an immutable string with the contents in the <xref:System.Text.StringBuilder> object."},{"pos":[4769,4800],"content":"Modifying individual characters","linkify":"Modifying individual characters","nodes":[{"content":"Modifying individual characters","pos":[0,31]}]},{"content":"You can produce a character array from a string, modify the contents of the array, and then create a new string from the modified contents of the array.","pos":[4802,4954]},{"content":"The following example shows how to replace a set of characters in a string.","pos":[4956,5031]},{"content":"First, it uses the <ph id=\"ph1\">&lt;xref:System.String.ToCharArray?displayProperty=nameWithName&gt;</ph> method to create an array of characters.","pos":[5032,5153],"source":" First, it uses the <xref:System.String.ToCharArray?displayProperty=nameWithName> method to create an array of characters."},{"content":"It uses the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> method to find the starting index of the word \"fox.\"","pos":[5154,5250],"source":" It uses the <xref:System.String.IndexOf%2A> method to find the starting index of the word \"fox.\""},{"content":"The next three characters are replaced with a different word.","pos":[5251,5312]},{"content":"Finally, a new string is constructed from the updated character array.","pos":[5313,5383]},{"pos":[5514,5544],"content":"Unsafe modifications to string","linkify":"Unsafe modifications to string","nodes":[{"content":"Unsafe modifications to string","pos":[0,30]}]},{"content":"Using <bpt id=\"p1\">**</bpt>unsafe<ept id=\"p1\">**</ept> code, you can modify a string \"in place\" after it has been created.","pos":[5546,5630],"source":"Using **unsafe** code, you can modify a string \"in place\" after it has been created."},{"content":"Unsafe code bypasses many of the features of .NET designed to minimize certain types of bugs in code.","pos":[5631,5732]},{"content":"You need to use unsafe code to modify a string in place because the string class is designed as an <bpt id=\"p1\">**</bpt>immutable<ept id=\"p1\">**</ept> type.","pos":[5733,5851],"source":" You need to use unsafe code to modify a string in place because the string class is designed as an **immutable** type."},{"content":"Once it has been created, its value does not change.","pos":[5852,5904]},{"content":"Unsafe code circumvents this property by accessing and modifying the memory used by a <ph id=\"ph1\">`string`</ph> without using normal <ph id=\"ph2\">`string`</ph> methods.","pos":[5905,6038],"source":" Unsafe code circumvents this property by accessing and modifying the memory used by a `string` without using normal `string` methods."},{"content":"The following example is provided for those rare situations where you want to modify a string in-place using unsafe code.","pos":[6039,6160],"source":"\nThe following example is provided for those rare situations where you want to modify a string in-place using unsafe code."},{"content":"The example shows how to use the <ph id=\"ph1\">`fixed`</ph> keyword.","pos":[6161,6210],"source":" The example shows how to use the `fixed` keyword."},{"content":"The <ph id=\"ph1\">`fixed`</ph> keyword prevents the garbage collector (GC) from moving the string object in memory while code accesses the memory using the unsafe pointer.","pos":[6211,6363],"source":" The `fixed` keyword prevents the garbage collector (GC) from moving the string object in memory while code accesses the memory using the unsafe pointer."},{"content":"It also demonstrates one possible side effect of unsafe operations on strings that results from the way that the C# compiler stores (interns) strings internally.","pos":[6364,6525]},{"content":"In general, you shouldn't use this technique unless it is absolutely necessary.","pos":[6526,6605]},{"content":"You can learn more in the articles on <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../language-reference/keywords/unsafe.md)</ept> and <bpt id=\"p2\">[</bpt>fixed<ept id=\"p2\">](../language-reference/keywords/fixed-statement.md)</ept>.","pos":[6606,6758],"source":" You can learn more in the articles on [unsafe](../language-reference/keywords/unsafe.md) and [fixed](../language-reference/keywords/fixed-statement.md)."},{"content":"The API reference for <ph id=\"ph1\">&lt;xref:System.String.Intern%2A&gt;</ph> includes information on string interning.","pos":[6759,6853],"source":" The API reference for <xref:System.String.Intern%2A> includes information on string interning."},{"content":"You can try these samples by looking at the code in our <bpt id=\"p1\">[</bpt>GitHub repository<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings)</ept>.","pos":[6987,7141],"source":"You can try these samples by looking at the code in our [GitHub repository](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings)."},{"content":"Or you can download the samples <bpt id=\"p1\">[</bpt>as a zip file<ept id=\"p1\">](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip)</ept>.","pos":[7142,7271],"source":" Or you can download the samples [as a zip file](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip)."},{"pos":[7276,7284],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7288,7374],"content":"<bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](../../standard/base-types/regular-expressions.md)</ept>","source":"[.NET Framework Regular Expressions](../../standard/base-types/regular-expressions.md)"},{"pos":[7377,7498],"content":"<bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](../../standard/base-types/regular-expression-language-quick-reference.md)</ept>","source":"[Regular Expression Language - Quick Reference](../../standard/base-types/regular-expression-language-quick-reference.md)"}]}