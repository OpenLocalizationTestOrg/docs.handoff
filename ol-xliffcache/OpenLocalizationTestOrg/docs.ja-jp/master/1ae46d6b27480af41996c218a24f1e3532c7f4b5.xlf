<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ae46d6b27480af41996c218a24f1e3532c7f4b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\built-in-types-for-common-xaml-language-primitives.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7b12b815630ed56a4cda44b64cb33cf0c3d0769</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec510ed15436cbba72aa62ca9985422f4e264080</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Built-in Types for Common XAML Language Primitives | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Built-in Types for Common XAML Language Primitives</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XAML 2009 introduces XAML language-level support for several data types that are frequently used primitives in the common language runtime (CLR) and in other programming languages.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XAML 2009 adds support for these primitives: <ph id="ph1">`x:Object`</ph>, <ph id="ph2">`x:Boolean`</ph>, <ph id="ph3">`x:Char`</ph>, <ph id="ph4">`x:String`</ph>, <ph id="ph5">`x:Decimal`</ph>, <ph id="ph6">`x:Single`</ph>, <ph id="ph7">`x:Double`</ph>, <ph id="ph8">`x:Int16`</ph>, <ph id="ph9">`x:Int32`</ph>, <ph id="ph10">`x:Int64`</ph>, <ph id="ph11">`x:TimeSpan`</ph>, <ph id="ph12">`x:Uri`</ph>, <ph id="ph13">`x:Byte`</ph>, and <ph id="ph14">`x:Array`</ph></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Previous Techniques for Language Primitives in XAML Markup</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In XAML for previous WPF versions, you could reference the CLR language primitives by mapping the assembly and namespace that contained a CLR primitive definition class for the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Most of these are in the mscorlib assembly and <ph id="ph1">&lt;xref:System&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, to use <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, you could declare the following mapping (with an example usage shown thereafter):</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>XAML 2009 Language Primitives</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By convention, the language primitives for XAML and all other XAML language elements are shown, including the <ph id="ph1">`x:`</ph> prefix.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is how XAML language elements are typically used in real-world markup.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This convention is followed in the conceptual documentation for XAML in WPF and also in the XAML specification.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>x:Object</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Object`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This primitive is not typically used in application markup, but might be useful for some scenarios such as checking assignability in a XAML type system.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>x:Boolean</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Boolean`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>XAML parses values for <ph id="ph1">`x:Boolean`</ph> as case insensitive.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`x:Bool`</ph> is not an accepted alternative.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.17 and 5.4.11<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>x:Char</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Char`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Char&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>String and char types have interaction with the overall encoding of the file at the XML level.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.7 and 5.4.1<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>x:String</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:String`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>String and char types have interaction with the overall encoding of the file at the XML level.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.6<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>x:Decimal</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Decimal`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that XAML parsing is inherently done under <ph id="ph1">`en-US`</ph> culture.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Under <ph id="ph1">`en-US`</ph> culture, the correct separator for the components of a decimal is always a period (<ph id="ph2">`.`</ph>) regardless of culture settings of the development environment, or of the eventual client target where the XAML is loaded at run time.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.14 and 5.4.8<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>x:Single</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Single`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Single&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In addition to the numeric values, text syntax for <ph id="ph1">`x:Single`</ph> also permits the tokens <ph id="ph2">`Infinity`</ph>, <ph id="ph3">`-Infinity`</ph>, and <ph id="ph4">`NaN`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These tokens are treated as case sensitive.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Single`</ph> can support values in scientific notation form, if the first character in text syntax is <ph id="ph2">`e`</ph> or <ph id="ph3">`E`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.8 and 5.4.2<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>x:Double</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Double`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Double&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In addition to the numeric values, text syntax for <ph id="ph1">`x:Double`</ph> permits the tokens <ph id="ph2">`Infinity`</ph>, <ph id="ph3">`-Infinity`</ph>, and <ph id="ph4">`NaN`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These tokens are treated as case sensitive.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Double`</ph> can support values in scientific notation form.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Use the character <ph id="ph1">`e`</ph> or <ph id="ph2">`E`</ph> to introduce the exponent portion.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.9 and 5.4.3<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>x:Int16</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Int16`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Int16&gt;</ph> and <ph id="ph3">`x:Int16`</ph> is treated as signed.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In XAML, the absence of a plus (<ph id="ph1">`+`</ph>) sign in text syntax is implied as a positive signed value.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.11 and 5.4.5<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>x:Int32</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Int32`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Int32&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Int32`</ph> is treated as signed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In XAML, the absence of a plus (<ph id="ph1">`+`</ph>) sign in text syntax is implied as a positive signed value.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.12 and 5.4.6<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>x:Int64</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Int64`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Int64`</ph> is treated as signed.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In XAML, the absence of a plus (<ph id="ph1">`+`</ph>) sign in text syntax is implied as a positive signed value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.13 and 5.4.7<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>x:TimeSpan</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:TimeSpan`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that XAML parsing for time-date format is inherently done under <ph id="ph1">`en-US`</ph> culture.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.16 and 5.4.10<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>x:Uri</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Uri`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Uri&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Checking for protocols is not part of the XAML definition for <ph id="ph1">`x:Uri`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.15 and 5.4.9<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>x:Byte</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Byte`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Byte&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A<ph id="ph1">&lt;xref:System.Byte&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">`x:Byte`</ph> is treated as unsigned.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.10 and 5.4.4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>x:Array</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For CLR backing, the <ph id="ph1">`x:Array`</ph> primitive corresponds to <ph id="ph2">&lt;xref:System.Array&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can define an array in XAML 2006  by using a markup extension syntax; however, the XAML 2009 syntax is a language-defined primitive that does not require accessing a markup extension.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information about XAML 2006 support, see <bpt id="p1">[</bpt>x:Array Markup Extension<ept id="p1">](../../../docs/framework/xaml-services/x-array-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For the XAML language specification definition, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Sections 5.2.18<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>WPF Support</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In WPF, you can use XAML 2009 features but only for XAML that is not markup-compiled.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A scenario where you can use XAML 2009 features together with WPF is if you author loose XAML and you then load that XAML into a WPF runtime and object graph with <ph id="ph1">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The WPF <ph id="ph1">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=fullName&gt;</ph> and its <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;</ph> can process XAML 2009 language keywords and features into a valid object graph representation.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>