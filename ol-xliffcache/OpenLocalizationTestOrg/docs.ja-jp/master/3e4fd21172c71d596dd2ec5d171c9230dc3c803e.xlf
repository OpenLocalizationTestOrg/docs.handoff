<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="task-asynchronous-programming-model.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e4fd21172c71d596dd2ec5d171c9230dc3c803e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\async\task-asynchronous-programming-model.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebbce423b78036a9fe321c60c30a3f3e607079a9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">81382c54d723b119d2b62fe2384c513fbdfaacee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>The Task Asynchronous Programming Model (TAP) with async and await (C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Task asynchronous programming model</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can avoid performance bottlenecks and enhance the overall responsiveness of your application by using asynchronous programming.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, traditional techniques for writing asynchronous applications can be complicated, making them difficult to write, debug, and maintain.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# 5<ept id="p1">](../../../whats-new/csharp-version-history.md#c-version-50)</ept> introduced a simplified approach, async programming, that leverages asynchronous support in the .NET Framework 4.5 and higher, .NET Core, and the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The compiler does the difficult work that the developer used to do, and your application retains a logical structure that resembles synchronous code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As a result, you get all the advantages of asynchronous programming with a fraction of the effort.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of when and how to use async programming and includes links to support topics that contain details and examples.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_WhentoUseAsynchrony"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Async improves responsiveness</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Asynchrony is essential for activities that are potentially blocking, such as web access.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Access to a web resource sometimes is slow or delayed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If such an activity is blocked in a synchronous process, the entire application must wait.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In an asynchronous process, the application can continue with other work that doesn't depend on the web resource until the potentially blocking task finishes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following table shows typical areas where asynchronous programming improves responsiveness.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The listed APIs from .NET and the Windows Runtime contain methods that support async programming.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Application area</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>.NET types with async methods</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Windows Runtime types with async methods</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Web access</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Working with files</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Working with images</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Windows.Media.Capture.MediaCapture&gt;</ph>, <ph id="ph2">&lt;xref:Windows.Graphics.Imaging.BitmapEncoder&gt;</ph>, <ph id="ph3">&lt;xref:Windows.Graphics.Imaging.BitmapDecoder&gt;</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>WCF programming</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Synchronous and Asynchronous Operations<ept id="p1">](../../../../framework/wcf/synchronous-and-asynchronous-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Asynchrony proves especially valuable for applications that access the UI thread because all UI-related activity usually shares one thread.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If any process is blocked in a synchronous application, all are blocked.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Your application stops responding, and you might conclude that it has failed when instead it's just waiting.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you use asynchronous methods, the application continues to respond to the UI.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can resize or minimize a window, for example, or you can close the application if you don't want to wait for it to finish.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The async-based approach adds the equivalent of an automatic transmission to the list of options that you can choose from when designing asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>That is, you get all the benefits of traditional asynchronous programming but with much less effort from the developer.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_HowtoWriteanAsyncMethod"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Async methods are easier to write</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>async<ept id="p1">](../../../../csharp/language-reference/keywords/async.md)</ept> and <bpt id="p2">[</bpt>await<ept id="p2">](../../../../csharp/language-reference/keywords/await.md)</ept> keywords in C# are the heart of async programming.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>By using those two keywords, you can use resources in the .NET Framework, .NET Core, or the Windows Runtime to create an asynchronous method almost as easily as you create a synchronous method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Asynchronous methods that you define by using the <ph id="ph1">`async`</ph> keyword are referred to as <bpt id="p1">*</bpt>async methods<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example shows an async method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Almost everything in the code should look completely familiar to you.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can find a complete Windows Presentation Foundation (WPF) example file at the end of this topic, and you can download the sample from <bpt id="p1">[</bpt>Async Sample: Example from "Asynchronous Programming with Async and Await"<ept id="p1">](https://code.msdn.microsoft.com/Async-Sample-Example-from-9b9f505c)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can learn several practices from the preceding sample.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>start with the method signature.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It includes the <ph id="ph1">`async`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The return type is <ph id="ph1">`Task&lt;int&gt;`</ph> (See "Return Types" section for more options).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The method name ends in <ph id="ph1">`Async`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the body of the method, <ph id="ph1">`GetStringAsync`</ph> returns a <ph id="ph2">`Task&lt;string&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>That means that when you <ph id="ph1">`await`</ph> the task you'll get a <ph id="ph2">`string`</ph> (<ph id="ph3">`urlContents`</ph>).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Before awaiting the task, you can do work that doesn't rely on the <ph id="ph1">`string`</ph> from <ph id="ph2">`GetStringAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Pay close attention to the <ph id="ph1">`await`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It suspends <ph id="ph1">`AccessTheWebAsync`</ph>;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> can't continue until <ph id="ph2">`getStringTask`</ph> is complete.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Meanwhile, control returns to the caller of <ph id="ph1">`AccessTheWebAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Control resumes here when <ph id="ph1">`getStringTask`</ph> is complete.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`await`</ph> operator then retrieves the <ph id="ph2">`string`</ph> result from <ph id="ph3">`getStringTask`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The return statement specifies an integer result.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Any methods that are awaiting <ph id="ph1">`AccessTheWebAsync`</ph> retrieve the length value.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`AccessTheWebAsync`</ph> doesn't have any work that it can do between calling <ph id="ph2">`GetStringAsync`</ph> and awaiting its completion, you can simplify your code by calling and awaiting in the following single statement.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following characteristics summarize what makes the previous example an async method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The method signature includes an <ph id="ph1">`async`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The name of an async method, by convention, ends with an "Async" suffix.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The return type is one of the following types:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> if your method has a return statement in which the operand has type <ph id="ph2">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> if your method has no return statement or has a return statement with no operand.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`void`</ph> if you're writing an async event handler.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Any other type that has a <ph id="ph1">`GetAwaiter`</ph> method (starting with C# 7.0).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Return Types and Parameters<ept id="p1">](#BKMK_ReturnTypesandParameters)</ept> section.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The method usually includes at least one <ph id="ph1">`await`</ph> expression, which marks a point where the method can't continue until the awaited asynchronous operation is complete.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the meantime, the method is suspended, and control returns to the method's caller.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The next section of this topic illustrates what happens at the suspension point.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In async methods, you use the provided keywords and types to indicate what you want to do, and the compiler does the rest, including keeping track of what must happen when control returns to an await point in a suspended method.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Some routine processes, such as loops and exception handling, can be difficult to handle in traditional asynchronous code.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In an async method, you write these elements much as you would in a synchronous solution, and the problem is solved.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information about asynchrony in previous versions of the .NET Framework, see <bpt id="p1">[</bpt>TPL and Traditional .NET Framework Asynchronous Programming<ept id="p1">](../../../../standard/parallel-programming/tpl-and-traditional-async-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_WhatHappensUnderstandinganAsyncMethod"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> What happens in an async method</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The most important thing to understand in asynchronous programming is how the control flow moves from method to method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following diagram leads you through the process.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Trace an async program<ept id="p1">]</ept><bpt id="p2">(./media/task-asynchronous-programming-model/navigation-trace-async-program.png "</bpt>NavigationTrace<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The numbers in the diagram correspond to the following steps, initiated when the user clicks the "start" button.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An event handler calls and awaits the  <ph id="ph1">`AccessTheWebAsync`</ph> async method.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> creates an <ph id="ph2">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance and calls the <ph id="ph3">&lt;xref:System.Net.Http.HttpClient.GetStringAsync%2A&gt;</ph> asynchronous method to download the contents of a website as a string.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Something happens in <ph id="ph1">`GetStringAsync`</ph> that suspends its progress.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Perhaps it must wait for a website to download or some other blocking activity.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To avoid blocking resources, <ph id="ph1">`GetStringAsync`</ph> yields control to its caller, <ph id="ph2">`AccessTheWebAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetStringAsync`</ph> returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, where <ph id="ph3">`TResult`</ph> is a string, and <ph id="ph4">`AccessTheWebAsync`</ph> assigns the task to the <ph id="ph5">`getStringTask`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The task represents the ongoing process for the call to <ph id="ph1">`GetStringAsync`</ph>, with a commitment to produce an actual string value when the work is complete.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`getStringTask`</ph> hasn't been awaited yet, <ph id="ph2">`AccessTheWebAsync`</ph> can continue with other work that doesn't depend on the final result from <ph id="ph3">`GetStringAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>That work is represented by a call to the synchronous method <ph id="ph1">`DoIndependentWork`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DoIndependentWork`</ph> is a synchronous method that does its work and returns to its caller.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> has run out of work that it can do without a result from <ph id="ph2">`getStringTask`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> next wants to calculate and return the length of the downloaded string, but the method can't calculate that value until the method has the string.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`AccessTheWebAsync`</ph> uses an await operator to suspend its progress and to yield control to the method that called <ph id="ph2">`AccessTheWebAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> returns a <ph id="ph2">`Task&lt;int&gt;`</ph> to the caller.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The task represents a promise to produce an integer result that's the length of the downloaded string.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`GetStringAsync`</ph> (and therefore <ph id="ph2">`getStringTask`</ph>) completes before <ph id="ph3">`AccessTheWebAsync`</ph> awaits it, control remains in <ph id="ph4">`AccessTheWebAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The expense of suspending and then returning to <ph id="ph1">`AccessTheWebAsync`</ph> would be wasted if the called asynchronous process (<ph id="ph2">`getStringTask`</ph>) has already completed and <ph id="ph3">`AccessTheWebSync`</ph> doesn't have to wait for the final result.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Inside the caller (the event handler in this example), the processing pattern continues.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The caller might do other work that doesn't depend on the result from <ph id="ph1">`AccessTheWebAsync`</ph> before awaiting that result, or the caller might await immediately.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The event handler is waiting for <ph id="ph1">`AccessTheWebAsync`</ph>, and <ph id="ph2">`AccessTheWebAsync`</ph> is waiting for <ph id="ph3">`GetStringAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetStringAsync`</ph> completes and produces a string result.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The string result isn't returned by the call to <ph id="ph1">`GetStringAsync`</ph> in the way that you might expect.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>(Remember that the method already returned a task in step 3.) Instead, the string result is stored in the task that represents the completion of the method, <ph id="ph1">`getStringTask`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The await operator retrieves the result from <ph id="ph1">`getStringTask`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The assignment statement assigns the retrieved result to <ph id="ph1">`urlContents`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`AccessTheWebAsync`</ph> has the string result, the method can calculate the length of the string.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Then the work of <ph id="ph1">`AccessTheWebAsync`</ph> is also complete, and the waiting event handler can resume.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the full example at the end of the topic, you can confirm that the event handler retrieves and prints the value of the length result.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you are new to asynchronous programming, take a minute to consider the difference between synchronous and asynchronous behavior.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A synchronous method returns when its work is complete (step 5), but an async method returns a task value when its work is suspended (steps 3 and 6).</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When the async method eventually completes its work, the task is marked as completed and the result, if any, is stored in the task.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For more information about control flow, see <bpt id="p1">[</bpt>Control Flow in Async Programs (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_APIAsyncMethods"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> API async methods</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You might be wondering where to find methods such as <ph id="ph1">`GetStringAsync`</ph> that support async programming.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The  .NET Framework 4.5 or higher and .NET Core contain many members that work with <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can recognize them by the "Async" suffix that’s appended to the member name, and by their return type of <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`System.IO.Stream`</ph> class contains methods such as <ph id="ph2">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> alongside the synchronous methods <ph id="ph5">&lt;xref:System.IO.Stream.CopyTo%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The Windows Runtime also contains many methods that you can use with <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> in Windows apps.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Threading and async programming<ept id="p1">](/windows/uwp/threading-async/)</ept> for UWP development, and <bpt id="p2">[</bpt>Asynchronous programming (Windows Store apps)<ept id="p2">](https://docs.microsoft.com/previous-versions/windows/apps/hh464924(v=win.10))</ept> and <bpt id="p3">[</bpt>Quickstart: Calling asynchronous APIs in C# or Visual Basic<ept id="p3">](https://docs.microsoft.com/previous-versions/windows/apps/hh452713(v=win.10))</ept> if you use earlier versions of the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_Threads"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Threads</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Async methods are intended to be non-blocking operations.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`await`</ph> expression in an async method doesn’t block the current thread while the awaited task is running.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Instead, the expression signs up the rest of the method as a continuation and returns control to the caller of the async method.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords don't cause additional threads to be created.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Async methods don't require multithreading because an async method doesn't run on its own thread.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The method runs on the current synchronization context and uses time on the thread only when the method is active.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> to move CPU-bound work to a background thread, but a background thread doesn't help with a process that's just waiting for results to become available.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The async-based approach to asynchronous programming is preferable to existing approaches in almost every case.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In particular, this approach is better than the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class for I/O-bound operations because the code is simpler and you don't have to guard against race conditions.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In combination with the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method, async programming is better than <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> for CPU-bound operations because async programming separates the coordination details of running your code from the work that <ph id="ph3">`Task.Run`</ph> transfers to the threadpool.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_AsyncandAwait"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> async and await</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If you specify that a method is an async method by using the <bpt id="p1">[</bpt>async<ept id="p1">](../../../../csharp/language-reference/keywords/async.md)</ept> modifier, you enable the following two capabilities.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The marked async method can use <bpt id="p1">[</bpt>await<ept id="p1">](../../../../csharp/language-reference/keywords/await.md)</ept> to designate suspension points.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`await`</ph> operator tells the compiler that the async method can't continue past that point until the awaited asynchronous process is complete.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In the meantime, control returns to the caller of the async method.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The suspension of an async method at an <ph id="ph1">`await`</ph> expression doesn't constitute an exit from the method, and <ph id="ph2">`finally`</ph> blocks don’t run.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The marked async method can itself be awaited by methods that call it.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An async method typically contains one or more occurrences of an <ph id="ph1">`await`</ph> operator, but the absence of <ph id="ph2">`await`</ph> expressions doesn’t cause a compiler error.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If an async method doesn’t use an <ph id="ph1">`await`</ph> operator to mark a suspension point, the method executes as a synchronous method does, despite the <ph id="ph2">`async`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The compiler issues a warning for such methods.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> are contextual keywords.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For more information and examples, see the following topics:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>async<ept id="p1">](../../../../csharp/language-reference/keywords/async.md)</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](../../../../csharp/language-reference/keywords/await.md)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_ReturnTypesandParameters"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Return types and parameters</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>An async method typically returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Inside an async method, an <ph id="ph1">`await`</ph> operator is applied to a task that's returned from a call to another async method.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You specify <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> as the return type if the method contains a <bpt id="p1">[</bpt><ph id="ph2">`return`</ph><ept id="p1">](../../../../csharp/language-reference/keywords/return.md)</ept> statement that specifies an operand of type <ph id="ph3">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>  as the return type if the method has no return statement or has a return statement that doesn't return an operand.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, you can also specify any other return type, provided that the type includes a <ph id="ph1">`GetAwaiter`</ph> method.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> is an example of such a type.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It is available in the <bpt id="p1">[</bpt>System.Threading.Tasks.Extension<ept id="p1">](https://www.nuget.org/packages/System.Threading.Tasks.Extensions/)</ept> NuGet package.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following example shows how you declare and call a method that returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> or a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Each returned task represents ongoing work.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A task encapsulates information about the state of the asynchronous process and, eventually, either the final result from the process or the exception that the process raises if it doesn't succeed.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>An async method can also have a <ph id="ph1">`void`</ph> return type.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This return type is used primarily to define event handlers, where a <ph id="ph1">`void`</ph> return type is required.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Async event handlers often serve as the starting point for async programs.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>An async method that has a <ph id="ph1">`void`</ph> return type can’t be awaited, and the caller of a void-returning method can't catch any exceptions that the method throws.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An async method can't declare <bpt id="p1">[</bpt>in<ept id="p1">](../../../../csharp/language-reference/keywords/in-parameter-modifier.md)</ept>, <bpt id="p2">[</bpt>ref<ept id="p2">](../../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id="p3">[</bpt>out<ept id="p3">](../../../../csharp/language-reference/keywords/out-parameter-modifier.md)</ept> parameters, but the method can call methods that have such parameters.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Similarly, an async method can't return a value by reference, although it can call methods with ref return values.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <bpt id="p1">[</bpt>Async Return Types (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>For more information about how to catch exceptions in async methods, see <bpt id="p1">[</bpt>try-catch<ept id="p1">](../../../../csharp/language-reference/keywords/try-catch.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Asynchronous APIs in Windows Runtime programming have one of the following return types, which are similar to tasks:</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Windows.Foundation.IAsyncOperation%601&gt;</ph>, which corresponds to <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Windows.Foundation.IAsyncAction&gt;</ph>, which corresponds to <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_NamingConvention"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Naming convention</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>By convention, methods that return commonly awaitable types (e.g. <ph id="ph1">`Task`</ph>, <ph id="ph2">`Task&lt;T&gt;`</ph>, <ph id="ph3">`ValueTask`</ph>, <ph id="ph4">`ValueTask&lt;T&gt;`</ph>) should have names that end with "Async".</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Methods that start an asynchronous operation but do not return an awaitable type should not have names that end with "Async", but may start with "Begin", "Start", or some other verb to suggest this method does not return or throw the result of the operation.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>You can ignore the convention where an event, base class, or interface contract suggests a different name.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For example, you shouldn’t rename common event handlers, such as <ph id="ph1">`Button1_Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_RelatedTopics"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Related topics and samples (Visual Studio)</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Sample</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using async and await (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Shows how to convert a synchronous WPF solution to an asynchronous WPF solution.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The application downloads a series of websites.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Sample: Accessing the Web Walkthrough<ept id="p1">](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)</ept></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Extend the async Walkthrough by Using Task.WhenAll (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Adds <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph> to the previous walkthrough.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The use of <ph id="ph1">`WhenAll`</ph> starts all the downloads at the same time.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Make Multiple Web Requests in Parallel by Using async and await (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md)</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Demonstrates how to start several tasks at the same time.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Sample: Make Multiple Web Requests in Parallel<ept id="p1">](https://code.msdn.microsoft.com/Async-Make-Multiple-Web-49adb82e)</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Return Types (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Illustrates the types that async methods can return and explains when each type is appropriate.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Control Flow in Async Programs (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Traces in detail the flow of control through a succession of await expressions in an asynchronous program.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Sample: Control Flow in Async Programs<ept id="p1">](https://code.msdn.microsoft.com/Async-Sample-Control-Flow-5c804fc0)</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fine-Tuning Your Async Application (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/fine-tuning-your-async-application.md)</ept></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Shows how to add the following functionality to your async solution:</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Cancel an Async Task or a List of Tasks (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Cancel Async Tasks after a Period of Time (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md)</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Cancel Remaining Async Tasks after One Is Complete (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Start Multiple Async Tasks and Process Them As They Complete (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)</ept></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](https://code.msdn.microsoft.com/Async-Fine-Tuning-Your-a676abea)</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Handling Reentrancy in Async Apps (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/handling-reentrancy-in-async-apps.md)</ept></source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Shows how to handle cases in which an active asynchronous operation is restarted while it’s running.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WhenAny: Bridging between the .NET Framework and the Windows Runtime<ept id="p1">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/jj635140(v=vs.120))</ept></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Shows how to bridge between Task types in the .NET Framework and IAsyncOperations in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> so that you can use <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph> with a <ph id="ph3">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> method.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Sample: Bridging between .NET and Windows Runtime (AsTask and WhenAny)<ept id="p1">](https://code.msdn.microsoft.com/Async-Sample-Bridging-d6a2f739)</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Async Cancellation: Bridging between the .NET Framework and the Windows Runtime</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Shows how to bridge between Task types in the .NET Framework and IAsyncOperations in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> so that you can use <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> with a <ph id="ph3">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> method.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Sample: Bridging between .NET and Windows Runtime (AsTask &amp; Cancellation)<ept id="p1">](https://code.msdn.microsoft.com/Async-Sample-Bridging-9479eca3)</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Async for File Access (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/using-async-for-file-access.md)</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Lists and demonstrates the benefits of using async and await to access files.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p1">](../../../../standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Describes a new pattern for asynchrony in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The pattern is based on the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> types.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Videos on Channel 9<ept id="p1">](https://channel9.msdn.com/search?term=async%20&amp;type=All#pubDate=year&amp;ch9Search&amp;lang-en=en)</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Provides links to a variety of videos about async programming.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_CompleteExample"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Complete example</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The following code is the MainWindow.xaml.cs file from the Windows Presentation Foundation (WPF) application that this topic discusses.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>You can download the sample from <bpt id="p1">[</bpt>Async Sample: Example from "Asynchronous Programming with Async and Await"<ept id="p1">](https://code.msdn.microsoft.com/Async-Sample-Example-from-9b9f505c)</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>async<ept id="p1">](../../../../csharp/language-reference/keywords/async.md)</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](../../../../csharp/language-reference/keywords/await.md)</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous programming<ept id="p1">](../../../../csharp/async.md)</ept></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async overview<ept id="p1">](../../../../standard/async.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>