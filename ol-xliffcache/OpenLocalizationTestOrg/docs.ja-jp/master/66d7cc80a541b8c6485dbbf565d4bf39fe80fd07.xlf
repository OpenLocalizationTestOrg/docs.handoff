<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66d7cc80a541b8c6485dbbf565d4bf39fe80fd07</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\understanding-generated-client-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">300bc657069ff01146c4fc4c06ac690852eefbc5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13015370f19c4bad0903ea1f0f211dae83886586</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Understanding Generated Client Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Understanding Generated Client Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> generates client code and a client application configuration file for use in building client applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic provides a tour of generated code examples for standard service contract scenarios.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> building a client application using the generated code, see <bpt id="p1">[</bpt>WCF Client Overview<ept id="p1">](../../../../docs/framework/wcf/wcf-client-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">[!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)]</ph> to generate <ph id="ph2">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> client types for your project, you typically do not need to examine the generated client code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are not using a development environment that performs the same services for you, you can use a tool such as Svcutil.exe to generate client code and then use that code to develop your client application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because Svcutil.exe has a number of options that modify the generated type information, this topic does not discuss all scenarios.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, the following standard tasks involve locating generated code:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Identifying service contract interfaces.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Identifying the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Identifying data types.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Identifying callback contracts for duplex services.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Identifying the helper service contract channel interface.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Finding Service Contract Interfaces</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To locate the interfaces that model service contracts, search for interfaces that are marked with the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute?displayProperty=fullName&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Often this attribute can be difficult to locate with a quick read due to the presence of other attributes and the explicit properties set on the attribute itself.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remember that the service contract interface and the client contract interface are two different types.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code example shows the original service contract.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#22<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#22)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code example shows the same service contract as generated by Svcutil.exe.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#12<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#12)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use the generated service contract interface along with the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory?displayProperty=fullName&gt;</ph> class to create a <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> channel object with which to invoke service operations.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>How to: Use the ChannelFactory<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-use-the-channelfactory.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Finding WCF Client Classes</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To locate the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client class that implements the service contract you want to use, search for an extension of <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601?displayProperty=fullName&gt;</ph>, where the type parameter is the service contract interface that you previously located and that extends that interface.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following code example shows the <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> class of type <ph id="ph2">`ISampleService`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#14<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#14)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can use this <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client class by creating a new instance of it and calling the methods it implements.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Those methods invoke the service operation with which it is designed and configured to interact.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>WCF Client Overview<ept id="p1">](../../../../docs/framework/wcf/wcf-client-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When SvcUtil.exe generates a WCF client class, it adds a <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerStepThroughAttribute&gt;</ph> to the client class that prevents debuggers from stepping through the WCF client class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Finding Data Types</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To locate data types in the generated code, the most basic mechanism is to identify the type name specified in a contract and search the code for that type declaration.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the following contract specifies that the <ph id="ph1">`SampleMethod`</ph> can return a SOAP fault of type <ph id="ph2">`microsoft.wcf.documentation.SampleFault`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#11<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#11)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Searching for <ph id="ph1">`SampleFault`</ph> locates the following type declaration.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#30<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#30)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this case the data type is the detail type thrown by a specific exception on the client, a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> where the detail type parameter is <ph id="ph2">`microsoft.wcf.documentation.SampleFault`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> data types, see <bpt id="p1">[</bpt>Specifying Data Transfer in Service Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> handling exceptions in clients, see <bpt id="p1">[</bpt>Sending and Receiving Faults<ept id="p1">](../../../../docs/framework/wcf/sending-and-receiving-faults.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Finding Callback Contracts for Duplex Services</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you locate a service contract for which the contract interface specifies a value for the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A?displayProperty=fullName&gt;</ph> property, then that contract specifies a duplex contract.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Duplex contracts require the client application to create a callback class that implements the callback contract and pass an instance of that class to the <ph id="ph1">&lt;xref:System.ServiceModel.DuplexClientBase%601?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.DuplexChannelFactory%601?displayProperty=fullName&gt;</ph> used to communicate with the service.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> duplex clients, see <bpt id="p1">[</bpt>How to: Access Services with a Duplex Contract<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-access-services-with-a-duplex-contract.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following contract specifies a callback contract of type <ph id="ph1">`SampleDuplexHelloCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/duplexproxycode.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>C_GeneratedCodeFiles#2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_generatedcodefiles/vb/duplexproxycode.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Searching for that callback contract locates the following interface that the client application must implement.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/duplexproxycode.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>C_GeneratedCodeFiles#4<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_generatedcodefiles/vb/duplexproxycode.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Finding Service Contract Channel Interfaces</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory&gt;</ph> class with a service contract interface, you must cast to the <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel?displayProperty=fullName&gt;</ph> interface to explicitly open, close, or abort the channel.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To make it easier to work with, the Svcutil.exe tool also generates a helper interface that implements both the service contract interface and <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> to enable you to interact with the client channel infrastructure without having to cast.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following code shows the definition of a helper client channel that implements the preceding service contract.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#13<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#13)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WCF Client Overview<ept id="p1">](../../../../docs/framework/wcf/wcf-client-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>