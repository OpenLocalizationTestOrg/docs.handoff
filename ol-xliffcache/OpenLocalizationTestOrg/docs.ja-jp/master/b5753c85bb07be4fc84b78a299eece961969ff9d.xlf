<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="group-results-by-contiguous-keys.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5753c85bb07be4fc84b78a299eece961969ff9d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\linq\group-results-by-contiguous-keys.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">388b31916ad13aa51c69d033eeebaa52267da998</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7086574dd64e1f1aec6e4ce8ddaad7eb31ae509</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Group results by contiguous keys (LINQ in C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to group results by contiguous keys using LINQ in C#.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Group results by contiguous keys</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following example shows how to group elements into chunks that represent subsequences of contiguous keys.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, assume that you are given the following sequence of key-value pairs:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Key</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>think</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>that</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>B</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Linq</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>C</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>is</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>really</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>B</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>cool</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>B</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>!</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following groups will be created in this order:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>We, think, that</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Linq</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>is</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>really</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>cool, !</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The solution is implemented as an extension method that is thread-safe and that returns its results in a streaming manner.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In other words, it produces its groups as it moves through the source sequence.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Unlike the <ph id="ph1">`group`</ph> or <ph id="ph2">`orderby`</ph> operators, it can begin returning groups to the caller before all of the sequence has been read.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Thread-safety is accomplished by making a copy of each group or chunk as the source sequence is iterated, as explained in the source code comments.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the source sequence has a large sequence of contiguous items, the common language runtime may throw an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example shows both the extension method and the client code that uses it:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To use the extension method in your project, copy the <ph id="ph1">`MyExtensions`</ph> static class to a new or existing source code file and if it is required, add a <ph id="ph2">`using`</ph> directive for the namespace where it is located.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Language Integrated Query (LINQ)<ept id="p1">](index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>