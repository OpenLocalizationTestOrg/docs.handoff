<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5211f62b072a8d42aa0792e570e5f2528f378e82</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\io\how-to-find-existing-files-and-directories-in-isolated-storage.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dfe964400d807c3e62034f54f3ec82be4983ecc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">382f8cef9fbb0e0375123a8bfe2ba87a358ad7cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Find Existing Files and Directories in Isolated Storage | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Find Existing Files and Directories in Isolated Storage</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To search for a directory in isolated storage, use the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This method takes a string that represents a search pattern.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use both single-character (?) and multi-character (*) wildcard characters in the search pattern, but the wildcard characters must appear in the final portion of the name.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`directory1/*ect*`</ph> is a valid search string, but <ph id="ph2">`*ect*/directory2`</ph> is not.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To search for a file, use the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The restriction for wildcard characters in search strings that applies to <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A&gt;</ph> also applies to <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Neither of these methods is recursive; the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph> class does not supply any methods for listing all directories or files in your store.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, recursive methods are shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code example illustrates how to create files and directories in an isolated store.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First, a store that is isolated for user, domain, and assembly is retrieved and placed in the <ph id="ph1">`isoStore`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory%2A&gt;</ph> method is used to set up a few different directories, and the <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.IsolatedStorage.IsolatedStorageFile%29&gt;</ph> constructor creates some files in these directories.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The code then loops through the results of the <ph id="ph1">`GetAllDirectories`</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This method uses <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A&gt;</ph> to find all the directory names in the current directory.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These names are stored in an array, and then <ph id="ph1">`GetAllDirectories`</ph> calls itself, passing in each directory it has found.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As a result, all the directory names are returned in an array.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Next, the code calls the <ph id="ph1">`GetAllFiles`</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This method calls <ph id="ph1">`GetAllDirectories`</ph> to find out the names of all the directories, and then it checks each directory for files by using the <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The result is returned in an array for display.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.IsolatedStorage#9<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.isolatedstorage/cpp/source8.cpp#9)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.IsolatedStorage#9<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.isolatedstorage/cs/source8.cs#9)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.IsolatedStorage#9<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.isolatedstorage/vb/source8.vb#9)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Isolated Storage<ept id="p1">](../../../docs/standard/io/isolated-storage.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>