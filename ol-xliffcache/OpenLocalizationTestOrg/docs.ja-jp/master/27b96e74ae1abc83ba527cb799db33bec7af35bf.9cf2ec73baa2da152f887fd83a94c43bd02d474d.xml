{"content":"---\ntitle: dotnet-vstest command | Microsoft Docs\ndescription: The dotnet-vstest command builds a project and all of its dependencies. \nkeywords: dotnet-vstest, CLI, CLI command, .NET Core\nauthor: guardrex\nms.author: mairaw\nms.date: 03/09/2017\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-cli\nms.devlang: dotnet\nms.assetid: 0e36c070-2242-41d3-96f1-aea0aca48d4d\n---\n\n# dotnet-vstest\n\n## Name\n\n`dotnet-vstest` - Runs tests from the specified files.\n\n## Synopsis\n\n`dotnet vstest [<TEST_FILE_NAMES>] [--Settings|/Settings] [--Tests|/Tests] [--TestAdapterPath|/TestAdapterPath] [--Platform|/Platform] [--Framework|/Framework] [--Parallel|/Parallel] [--TestCaseFilter|/TestCaseFilter] [--logger|/logger] [-lt|--ListTests|/lt|/ListTests] [--ParentProcessId|/ParentProcessId] [--Port|/Port] [--Diag|/Diag] [[--] <args>...]] [-?|--Help|/?|/Help]`\n\n## Description\n\nThe `dotnet-vstest` command runs the `VSTest.Console` command-line application to run automated unit and coded UI application tests.\n\n## Arguments\n\n`TEST_FILE_NAMES`\n\nRun tests from the specified assemblies. Separate multiple test assembly names with spaces.\n\n## Options\n\n`--Settings|/Settings:<Settings File>`\n\nSettings to use when running tests.\n\n`--Tests|/Tests:<Test Names>`\n\nRun tests with names that match the provided values. Separate multiple values with commas.\n\n`--TestAdapterPath|/TestAdapterPath`\n\nUse custom test adapters from a given path (if any) in the test run.\n\n`--Platform|/Platform:<Platform type>`\n\nTarget platform architecture used for test execution. Valid values are `x86`, `x64`, and `ARM`.\n\n`--Framework|/Framework:<Framework Version>`\n\nTarget .NET Framework version used for test execution. Examples of valid values are `.NETFramework,Version=v4.6`, `.NETCoreApp,Version=v1.0`, etc. Other supported values are `Framework35`, `Framework40`, `Framework45`, and `FrameworkCore10`.\n\n`--Parallel|/Parallel`\n\nExecute tests in parallel. By default, all available cores on the machine are available for use. Set an explicit number of cores with a settings file.\n\n`--TestCaseFilter|/TestCaseFilter:<Expression>`\n\nRun tests that match the given expression. `<Expression>` is of the format `<property>Operator<value>[|&<Expression>]`, where Operator is one of `=`, `!=`, or `~`.  Operator `~` has 'contains' semantics and is applicable for string properties like `DisplayName`. Parenthesis `()` are used to group sub-expressions.\n\n`-?|--Help|/?|/Help`\n\nPrints out a short help for the command.\n\n`--logger|/logger:<Logger Uri/FriendlyName>`\n\nSpecify a logger for test results.  \n\n* To publish test results to Team Foundation Server, use the `TfsPublisher` logger provider:\n\n  ```\n  /logger:TfsPublisher;\n      Collection=<team project collection url>;\n      BuildName=<build name>;\n      TeamProject=<team project name>\n      [;Platform=<Defaults to \"Any CPU\">]\n      [;Flavor=<Defaults to \"Debug\">]\n      [;RunTitle=<title>]\n  ```\n\n* To log results to a Visual Studio Test Results File (TRX), use the `trx` logger provider. This switch creates a file in the test results directory with given log file name. If `LogFileName` isn't provided, a unique file name is created to hold the test results.\n\n  ```\n  /logger:trx [;LogFileName=<Defaults to unique file name>]\n  ```\n\n`-lt|--ListTests|/lt|/ListTests:<File Name>`\n\nLists discovered tests from the given test container.\n\n`--ParentProcessId|/ParentProcessId:<ParentProcessId>`\n\nProcess Id of the parent process responsible for launching the current process.\n\n`--Port|/Port:<Port>`\n\nSpecifies the port for the socket connection and receiving the event messages.\n\n`--Diag|/Diag:<Path to log file>`\n\nEnables verbose logs for the test platform. Logs are written to the provided file.\n\n`args`\n\nSpecifies extra arguments to pass to the adapter. Arguments are specified as name-value pairs of the form `<n>=<v>`, where `<n>` is the argument name and `<v>` is the argument value. Use a space to separate multiple arguments.\n\n## Examples\n\nRun tests in `mytestproject.dll`:\n\n`dotnet vstest mytestproject.dll`\n\nRun tests in `mytestproject.dll` and `myothertestproject.exe`:\n\n`dotnet vstest mytestproject.dll myothertestproject.exe`\n\nRun `TestMethod1` tests:\n\n`dotnet vstest /Tests:TestMethod1`\n\nRun `TestMethod1` and `TestMethod2` tests:\n\n`dotnet vstest /Tests:TestMethod1,TestMethod2`\n","nodes":[{"pos":[11,49],"content":"dotnet-vstest command | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"dotnet-vstest command | Microsoft Docs","pos":[0,38]}]},{"pos":[63,134],"content":"The dotnet-vstest command builds a project and all of its dependencies.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dotnet-vstest command builds a project and all of its dependencies.","pos":[0,71]}]},{"pos":[146,188],"content":"dotnet-vstest, CLI, CLI command, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":"dotnet-vstest, CLI, CLI command, .NET Core","pos":[0,42]}]},{"pos":[382,395],"content":"dotnet-vstest","linkify":"dotnet-vstest","nodes":[{"content":"dotnet-vstest","pos":[0,13]}]},{"pos":[400,404],"content":"Name","linkify":"Name","nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[406,460],"content":"<ph id=\"ph1\">`dotnet-vstest`</ph> - Runs tests from the specified files.","source":"`dotnet-vstest` - Runs tests from the specified files."},{"pos":[465,473],"content":"Synopsis","linkify":"Synopsis","nodes":[{"content":"Synopsis","pos":[0,8]}]},{"pos":[856,867],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[869,1001],"content":"The <ph id=\"ph1\">`dotnet-vstest`</ph> command runs the <ph id=\"ph2\">`VSTest.Console`</ph> command-line application to run automated unit and coded UI application tests.","source":"The `dotnet-vstest` command runs the `VSTest.Console` command-line application to run automated unit and coded UI application tests."},{"pos":[1006,1015],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"Run tests from the specified assemblies.","pos":[1036,1076]},{"content":"Separate multiple test assembly names with spaces.","pos":[1077,1127]},{"pos":[1132,1139],"content":"Options","linkify":"Options","nodes":[{"content":"Options","pos":[0,7]}]},{"content":"Settings to use when running tests.","pos":[1181,1216]},{"content":"Run tests with names that match the provided values.","pos":[1249,1301]},{"content":"Separate multiple values with commas.","pos":[1302,1339]},{"content":"Use custom test adapters from a given path (if any) in the test run.","pos":[1379,1447]},{"content":"Target platform architecture used for test execution.","pos":[1489,1542]},{"content":"Valid values are <ph id=\"ph1\">`x86`</ph>, <ph id=\"ph2\">`x64`</ph>, and <ph id=\"ph3\">`ARM`</ph>.","pos":[1543,1584],"source":" Valid values are `x86`, `x64`, and `ARM`."},{"content":"Target .NET Framework version used for test execution.","pos":[1632,1686]},{"content":"Examples of valid values are <ph id=\"ph1\">`.NETFramework,Version=v4.6`</ph>, <ph id=\"ph2\">`.NETCoreApp,Version=v1.0`</ph>, etc. Other supported values are <ph id=\"ph3\">`Framework35`</ph>, <ph id=\"ph4\">`Framework40`</ph>, <ph id=\"ph5\">`Framework45`</ph>, and <ph id=\"ph6\">`FrameworkCore10`</ph>.","pos":[1687,1873],"source":" Examples of valid values are `.NETFramework,Version=v4.6`, `.NETCoreApp,Version=v1.0`, etc. Other supported values are `Framework35`, `Framework40`, `Framework45`, and `FrameworkCore10`."},{"content":"Execute tests in parallel.","pos":[1899,1925]},{"content":"By default, all available cores on the machine are available for use.","pos":[1926,1995]},{"content":"Set an explicit number of cores with a settings file.","pos":[1996,2049]},{"content":"Run tests that match the given expression.","pos":[2100,2142]},{"content":"<ph id=\"ph1\">`&lt;Expression&gt;`</ph> is of the format <ph id=\"ph2\">`&lt;property&gt;Operator&lt;value&gt;[|&amp;&lt;Expression&gt;]`</ph>, where Operator is one of <ph id=\"ph3\">`=`</ph>, <ph id=\"ph4\">`!=`</ph>, or <ph id=\"ph5\">`~`</ph>.","pos":[2143,2263],"source":"`<Expression>` is of the format `<property>Operator<value>[|&<Expression>]`, where Operator is one of `=`, `!=`, or `~`."},{"content":"Operator <ph id=\"ph1\">`~`</ph> has 'contains' semantics and is applicable for string properties like <ph id=\"ph2\">`DisplayName`</ph>.","pos":[2265,2362],"source":"  Operator `~` has 'contains' semantics and is applicable for string properties like `DisplayName`."},{"content":"Parenthesis <ph id=\"ph1\">`()`</ph> are used to group sub-expressions.","pos":[2363,2414],"source":" Parenthesis `()` are used to group sub-expressions."},{"content":"Prints out a short help for the command.","pos":[2438,2478]},{"content":"Specify a logger for test results.","pos":[2526,2560]},{"pos":[2566,2656],"content":"To publish test results to Team Foundation Server, use the <ph id=\"ph1\">`TfsPublisher`</ph> logger provider:","source":"To publish test results to Team Foundation Server, use the `TfsPublisher` logger provider:"},{"content":"To log results to a Visual Studio Test Results File (TRX), use the <ph id=\"ph1\">`trx`</ph> logger provider.","pos":[2919,3008],"source":"To log results to a Visual Studio Test Results File (TRX), use the `trx` logger provider."},{"content":"This switch creates a file in the test results directory with given log file name.","pos":[3009,3091]},{"content":"If <ph id=\"ph1\">`LogFileName`</ph> isn't provided, a unique file name is created to hold the test results.","pos":[3092,3180],"source":" If `LogFileName` isn't provided, a unique file name is created to hold the test results."},{"content":"Lists discovered tests from the given test container.","pos":[3301,3354]},{"content":"Process Id of the parent process responsible for launching the current process.","pos":[3412,3491]},{"content":"Specifies the port for the socket connection and receiving the event messages.","pos":[3516,3594]},{"content":"Enables verbose logs for the test platform.","pos":[3631,3674]},{"content":"Logs are written to the provided file.","pos":[3675,3713]},{"content":"Specifies extra arguments to pass to the adapter.","pos":[3723,3772]},{"content":"Arguments are specified as name-value pairs of the form <ph id=\"ph1\">`&lt;n&gt;=&lt;v&gt;`</ph>, where <ph id=\"ph2\">`&lt;n&gt;`</ph> is the argument name and <ph id=\"ph3\">`&lt;v&gt;`</ph> is the argument value.","pos":[3773,3905],"source":" Arguments are specified as name-value pairs of the form `<n>=<v>`, where `<n>` is the argument name and `<v>` is the argument value."},{"content":"Use a space to separate multiple arguments.","pos":[3906,3949]},{"pos":[3954,3962],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[3964,3997],"content":"Run tests in <ph id=\"ph1\">`mytestproject.dll`</ph>:","source":"Run tests in `mytestproject.dll`:"},{"pos":[4034,4096],"content":"Run tests in <ph id=\"ph1\">`mytestproject.dll`</ph> and <ph id=\"ph2\">`myothertestproject.exe`</ph>:","source":"Run tests in `mytestproject.dll` and `myothertestproject.exe`:"},{"pos":[4156,4180],"content":"Run <ph id=\"ph1\">`TestMethod1`</ph> tests:","source":"Run `TestMethod1` tests:"},{"pos":[4218,4260],"content":"Run <ph id=\"ph1\">`TestMethod1`</ph> and <ph id=\"ph2\">`TestMethod2`</ph> tests:","source":"Run `TestMethod1` and `TestMethod2` tests:"}]}