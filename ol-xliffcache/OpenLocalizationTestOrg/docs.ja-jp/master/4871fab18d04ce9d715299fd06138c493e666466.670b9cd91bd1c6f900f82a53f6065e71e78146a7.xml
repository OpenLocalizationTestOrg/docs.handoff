{"content":"---\ntitle: \"Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 06ea104b-f44c-4bb2-9c34-889ae025c80d\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic)\nOne way to improve performance in LINQ to XML is to pre-atomize <xref:System.Xml.Linq.XName> objects. Pre-atomization means that you assign a string to an <xref:System.Xml.Linq.XName> object before you create the XML tree by using the constructors of the <xref:System.Xml.Linq.XElement> and  <xref:System.Xml.Linq.XAttribute> classes. Then, instead of passing a string to the constructor, which would use the implicit conversion from string to <xref:System.Xml.Linq.XName>, you pass the initialized <xref:System.Xml.Linq.XName> object.  \n  \n This improves performance when you create a large XML tree in which specific names are repeated. To do this, you declare and initialize <xref:System.Xml.Linq.XName> objects before you construct the XML tree, and then use the <xref:System.Xml.Linq.XName> objects instead of specifying strings for the element and attribute names. This technique can yield significant performance gains if you are creating a large number of elements (or attributes) with the same name.  \n  \n You should test pre-atomization with your scenario to decide if you should use it.  \n  \n## Example  \n The following example demonstrates this.  \n  \n```vb  \nDim Root__1 As XName = \"Root\"  \nDim Data As XName = \"Data\"  \nDim ID As XName = \"ID\"  \n  \nDim root__2 As New XElement(Root__1, New XElement(Data, New XAttribute(ID, \"1\"), \"4,100,000\"), New XElement(Data, New XAttribute(ID, \"2\"), \"3,700,000\"), New XElement(Data, New XAttribute(ID, \"3\"), \"1,150,000\"))  \n  \nConsole.WriteLine(root__2)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>  \n  <Data ID=\"1\">4,100,000</Data>  \n  <Data ID=\"2\">3,700,000</Data>  \n  <Data ID=\"3\">1,150,000</Data>  \n</Root>  \n```  \n  \n The following example shows the same technique where the XML document is in a namespace:  \n  \n```vb  \nDim aw As XNamespace = \"http://www.adventure-works.com\"  \nDim Root__1 As XName = aw + \"Root\"  \nDim Data As XName = aw + \"Data\"  \nDim ID As XName = \"ID\"  \n  \nDim root__2 As New XElement(Root__1, New XAttribute(XNamespace.Xmlns + \"aw\", aw), New XElement(Data, New XAttribute(ID, \"1\"), \"4,100,000\"), New XElement(Data, New XAttribute(ID, \"2\"), \"3,700,000\"), New XElement(Data, New XAttribute(ID, \"3\"), \"1,150,000\"))  \n  \nConsole.WriteLine(root__2)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<aw:Root xmlns:aw=\"http://www.adventure-works.com\">  \n  <aw:Data ID=\"1\">4,100,000</aw:Data>  \n  <aw:Data ID=\"2\">3,700,000</aw:Data>  \n  <aw:Data ID=\"3\">1,150,000</aw:Data>  \n</aw:Root>  \n```  \n  \n The following example is more similar to what you will likely encounter in the real world. In this example, the content of the element is supplied by a query:  \n  \n```vb  \nDim Root__1 As XName = \"Root\"  \nDim Data As XName = \"Data\"  \nDim ID As XName = \"ID\"  \n  \nDim t1 As DateTime = DateTime.Now  \nDim root__2 As New XElement(Root__1, From i In System.Linq.Enumerable.Range(1, 100000)New XElement(Data, New XAttribute(ID, i), i * 5))  \nDim t2 As DateTime = DateTime.Now  \n  \nConsole.WriteLine(\"Time to construct:{0}\", t2 - t1)  \n```  \n  \n The previous example performs better than the following example, in which names are not pre-atomized:  \n  \n```vb  \nDim t1 As DateTime = DateTime.Now  \nDim root As New XElement(\"Root\", From i In System.Linq.Enumerable.Range(1, 100000)New XElement(\"Data\", New XAttribute(\"ID\", i), i * 5))  \nDim t2 As DateTime = DateTime.Now  \n  \nConsole.WriteLine(\"Time to construct:{0}\", t2 - t1)  \n```  \n  \n## See Also  \n [Performance (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/performance-linq-to-xml.md)   \n [Atomized XName and XNamespace Objects (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/atomized-xname-and-xnamespace-objects-linq-to-xml.md)","nodes":[{"pos":[12,90],"content":"Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic) | Microsoft Docs","pos":[0,78]}]},{"pos":[397,458],"content":"Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic)","linkify":"Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic)","nodes":[{"content":"Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic)","pos":[0,61]}]},{"content":"One way to improve performance in LINQ to XML is to pre-atomize <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects.","pos":[459,560],"source":"One way to improve performance in LINQ to XML is to pre-atomize <xref:System.Xml.Linq.XName> objects."},{"content":"Pre-atomization means that you assign a string to an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> object before you create the XML tree by using the constructors of the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> and  <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> classes.","pos":[561,793],"source":" Pre-atomization means that you assign a string to an <xref:System.Xml.Linq.XName> object before you create the XML tree by using the constructors of the <xref:System.Xml.Linq.XElement> and  <xref:System.Xml.Linq.XAttribute> classes."},{"content":"Then, instead of passing a string to the constructor, which would use the implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>, you pass the initialized <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> object.","pos":[794,994],"source":" Then, instead of passing a string to the constructor, which would use the implicit conversion from string to <xref:System.Xml.Linq.XName>, you pass the initialized <xref:System.Xml.Linq.XName> object."},{"content":"This improves performance when you create a large XML tree in which specific names are repeated.","pos":[1001,1097]},{"content":"To do this, you declare and initialize <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects before you construct the XML tree, and then use the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects instead of specifying strings for the element and attribute names.","pos":[1098,1329],"source":" To do this, you declare and initialize <xref:System.Xml.Linq.XName> objects before you construct the XML tree, and then use the <xref:System.Xml.Linq.XName> objects instead of specifying strings for the element and attribute names."},{"content":"This technique can yield significant performance gains if you are creating a large number of elements (or attributes) with the same name.","pos":[1330,1467]},{"content":"You should test pre-atomization with your scenario to decide if you should use it.","pos":[1474,1556]},{"pos":[1565,1572],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates this.","pos":[1576,1616]},{"content":"This example produces the following output:","pos":[1974,2017]},{"content":"The following example shows the same technique where the XML document is in a namespace:","pos":[2163,2251]},{"content":"This example produces the following output:","pos":[2722,2765]},{"content":"The following example is more similar to what you will likely encounter in the real world.","pos":[2977,3067]},{"content":"In this example, the content of the element is supplied by a query:","pos":[3068,3135]},{"content":"The previous example performs better than the following example, in which names are not pre-atomized:","pos":[3515,3616]},{"pos":[3909,3917],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Performance (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/performance-linq-to-xml.md)</ept><ph id=\"ph1\"> </ph>","pos":[3921,4049],"source":"[Performance (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/performance-linq-to-xml.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Atomized XName and XNamespace Objects (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/atomized-xname-and-xnamespace-objects-linq-to-xml.md)</ept>","pos":[4052,4232],"source":" [Atomized XName and XNamespace Objects (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/atomized-xname-and-xnamespace-objects-linq-to-xml.md)"}]}