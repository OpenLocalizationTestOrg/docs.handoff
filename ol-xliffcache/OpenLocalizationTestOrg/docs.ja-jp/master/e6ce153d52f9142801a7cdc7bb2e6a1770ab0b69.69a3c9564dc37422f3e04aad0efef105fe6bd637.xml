{"content":"---\ntitle: \"Impersonating and Reverting\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"WindowsIdentity objects, impersonating\"\n  - \"security [.NET Framework], impersonating Windows accounts\"\n  - \"impersonating Windows accounts\"\nms.assetid: b93d402c-6c28-4f50-b2bc-d9607dc3e470\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# Impersonating and Reverting\nSometimes you might need to obtain a Windows account token to impersonate a Windows account. For example, your ASP.NET-based application might have to act on behalf of several users at different times. Your application might accept a token that represents an administrator from Internet Information Services (IIS), impersonate that user, perform an operation, and revert to the previous identity. Next, it might accept a token from IIS that represents a user with fewer rights, perform some operation, and revert again.  \n  \n In situations where your application must impersonate a Windows account that has not been attached to the current thread by IIS, you must retrieve that account's token and use it to activate the account. You can do this by performing the following tasks:  \n  \n1.  Retrieve an account token for a particular user by making a call to the unmanaged **LogonUser** method. This method is not in the .NET Framework base class library, but is located in the unmanaged **advapi32.dll**. Accessing methods in unmanaged code is an advanced operation and is beyond the scope of this discussion. For more information, see [Interoperating with Unmanaged Code](../../../docs/framework/interop/index.md). For more information about the **LogonUser** method and **advapi32.dll**, see the Platform SDK documentation.  \n  \n2.  Create a new instance of the **WindowsIdentity** class, passing the token. The following code demonstrates this call, where `hToken` represents a Windows token.  \n  \n    ```csharp  \n    WindowsIdentity impersonatedIdentity = new WindowsIdentity(hToken);  \n    ```  \n  \n    ```vb  \n    Dim impersonatedIdentity As New WindowsIdentity(hToken)  \n    ```  \n  \n3.  Begin impersonation by creating a new instance of the <xref:System.Security.Principal.WindowsImpersonationContext> class and initializing it with the <xref:System.Security.Principal.WindowsIdentity.Impersonate%2A?displayProperty=nameWithType> method of the initialized class, as shown in the following code.  \n  \n    ```csharp  \n    WindowsImpersonationContext myImpersonation = impersonatedIdentity.Impersonate();  \n    ```  \n  \n    ```vb  \n    WindowsImpersonationContext myImpersonation = impersonatedIdentity.Impersonate()  \n    ```  \n  \n4.  When you no longer need to impersonate, call the <xref:System.Security.Principal.WindowsImpersonationContext.Undo%2A?displayProperty=nameWithType> method to revert the impersonation, as shown in the following code.  \n  \n    ```csharp  \n    myImpersonation.Undo();  \n    ```  \n  \n    ```vb  \n    myImpersonation.Undo()  \n    ```  \n  \n If trusted code has already attached a <xref:System.Security.Principal.WindowsPrincipal> object to the thread, you can call the instance method **Impersonate**, which does not take an account token. Note that this is only useful when the **WindowsPrincipal** object on the thread represents a user other than the one under which the process is currently executing. For example, you might encounter this situation using ASP.NET with Windows authentication turned on and impersonation turned off. In this case, the process is running under an account configured in Internet Information Services (IIS) while the current principal represents the Windows user that is accessing the page.  \n  \n Note that neither **Impersonate** nor **Undo** changes the **Principal** object (<xref:System.Security.Principal.IPrincipal>)  associated with the current call context. Rather, impersonation and reverting change the token associated with the current operating system process..  \n  \n## See also\n\n- <xref:System.Security.Principal.WindowsIdentity>\n- <xref:System.Security.Principal.WindowsImpersonationContext>\n- [Principal and Identity Objects](../../../docs/standard/security/principal-and-identity-objects.md)\n- [Interoperating with Unmanaged Code](../../../docs/framework/interop/index.md)\n","nodes":[{"pos":[4,381],"embed":true,"restype":"x-metadata","content":"title: \"Impersonating and Reverting\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"WindowsIdentity objects, impersonating\"\n  - \"security [.NET Framework], impersonating Windows accounts\"\n  - \"impersonating Windows accounts\"\nms.assetid: b93d402c-6c28-4f50-b2bc-d9607dc3e470\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Impersonating and Reverting","nodes":[{"pos":[0,27],"content":"Impersonating and Reverting","nodes":[{"content":"Impersonating and Reverting","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[388,415],"content":"Impersonating and Reverting","linkify":"Impersonating and Reverting","nodes":[{"content":"Impersonating and Reverting","pos":[0,27]}]},{"content":"Sometimes you might need to obtain a Windows account token to impersonate a Windows account.","pos":[416,508]},{"content":"For example, your ASP.NET-based application might have to act on behalf of several users at different times.","pos":[509,617]},{"content":"Your application might accept a token that represents an administrator from Internet Information Services (IIS), impersonate that user, perform an operation, and revert to the previous identity.","pos":[618,812]},{"content":"Next, it might accept a token from IIS that represents a user with fewer rights, perform some operation, and revert again.","pos":[813,935]},{"content":"In situations where your application must impersonate a Windows account that has not been attached to the current thread by IIS, you must retrieve that account's token and use it to activate the account.","pos":[942,1145]},{"content":"You can do this by performing the following tasks:","pos":[1146,1196]},{"content":"Retrieve an account token for a particular user by making a call to the unmanaged <bpt id=\"p1\">**</bpt>LogonUser<ept id=\"p1\">**</ept> method.","pos":[1206,1309],"source":"Retrieve an account token for a particular user by making a call to the unmanaged **LogonUser** method."},{"content":"This method is not in the .NET Framework base class library, but is located in the unmanaged <bpt id=\"p1\">**</bpt>advapi32.dll<ept id=\"p1\">**</ept>.","pos":[1310,1420],"source":" This method is not in the .NET Framework base class library, but is located in the unmanaged **advapi32.dll**."},{"content":"Accessing methods in unmanaged code is an advanced operation and is beyond the scope of this discussion.","pos":[1421,1525]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Interoperating with Unmanaged Code<ept id=\"p1\">](../../../docs/framework/interop/index.md)</ept>.","pos":[1526,1631],"source":" For more information, see [Interoperating with Unmanaged Code](../../../docs/framework/interop/index.md)."},{"content":"For more information about the <bpt id=\"p1\">**</bpt>LogonUser<ept id=\"p1\">**</ept> method and <bpt id=\"p2\">**</bpt>advapi32.dll<ept id=\"p2\">**</ept>, see the Platform SDK documentation.","pos":[1632,1741],"source":" For more information about the **LogonUser** method and **advapi32.dll**, see the Platform SDK documentation."},{"content":"Create a new instance of the <bpt id=\"p1\">**</bpt>WindowsIdentity<ept id=\"p1\">**</ept> class, passing the token.","pos":[1751,1825],"source":"Create a new instance of the **WindowsIdentity** class, passing the token."},{"content":"The following code demonstrates this call, where <ph id=\"ph1\">`hToken`</ph> represents a Windows token.","pos":[1826,1911],"source":" The following code demonstrates this call, where `hToken` represents a Windows token."},{"pos":[2111,2418],"content":"Begin impersonation by creating a new instance of the <ph id=\"ph1\">&lt;xref:System.Security.Principal.WindowsImpersonationContext&gt;</ph> class and initializing it with the <ph id=\"ph2\">&lt;xref:System.Security.Principal.WindowsIdentity.Impersonate%2A?displayProperty=nameWithType&gt;</ph> method of the initialized class, as shown in the following code.","source":"Begin impersonation by creating a new instance of the <xref:System.Security.Principal.WindowsImpersonationContext> class and initializing it with the <xref:System.Security.Principal.WindowsIdentity.Impersonate%2A?displayProperty=nameWithType> method of the initialized class, as shown in the following code."},{"pos":[2657,2871],"content":"When you no longer need to impersonate, call the <ph id=\"ph1\">&lt;xref:System.Security.Principal.WindowsImpersonationContext.Undo%2A?displayProperty=nameWithType&gt;</ph> method to revert the impersonation, as shown in the following code.","source":"When you no longer need to impersonate, call the <xref:System.Security.Principal.WindowsImpersonationContext.Undo%2A?displayProperty=nameWithType> method to revert the impersonation, as shown in the following code."},{"content":"If trusted code has already attached a <ph id=\"ph1\">&lt;xref:System.Security.Principal.WindowsPrincipal&gt;</ph> object to the thread, you can call the instance method <bpt id=\"p1\">**</bpt>Impersonate<ept id=\"p1\">**</ept>, which does not take an account token.","pos":[2991,3189],"source":"If trusted code has already attached a <xref:System.Security.Principal.WindowsPrincipal> object to the thread, you can call the instance method **Impersonate**, which does not take an account token."},{"content":"Note that this is only useful when the <bpt id=\"p1\">**</bpt>WindowsPrincipal<ept id=\"p1\">**</ept> object on the thread represents a user other than the one under which the process is currently executing.","pos":[3190,3355],"source":" Note that this is only useful when the **WindowsPrincipal** object on the thread represents a user other than the one under which the process is currently executing."},{"content":"For example, you might encounter this situation using ASP.NET with Windows authentication turned on and impersonation turned off.","pos":[3356,3485]},{"content":"In this case, the process is running under an account configured in Internet Information Services (IIS) while the current principal represents the Windows user that is accessing the page.","pos":[3486,3673]},{"content":"Note that neither <bpt id=\"p1\">**</bpt>Impersonate<ept id=\"p1\">**</ept> nor <bpt id=\"p2\">**</bpt>Undo<ept id=\"p2\">**</ept> changes the <bpt id=\"p3\">**</bpt>Principal<ept id=\"p3\">**</ept> object (<ph id=\"ph1\">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph>)  associated with the current call context.","pos":[3680,3848],"source":"Note that neither **Impersonate** nor **Undo** changes the **Principal** object (<xref:System.Security.Principal.IPrincipal>)  associated with the current call context."},{"content":"Rather, impersonation and reverting change the token associated with the current operating system process..","pos":[3849,3956]},{"pos":[3965,3973],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4091,4190],"content":"<bpt id=\"p1\">[</bpt>Principal and Identity Objects<ept id=\"p1\">](../../../docs/standard/security/principal-and-identity-objects.md)</ept>","source":"[Principal and Identity Objects](../../../docs/standard/security/principal-and-identity-objects.md)"},{"pos":[4193,4271],"content":"<bpt id=\"p1\">[</bpt>Interoperating with Unmanaged Code<ept id=\"p1\">](../../../docs/framework/interop/index.md)</ept>","source":"[Interoperating with Unmanaged Code](../../../docs/framework/interop/index.md)"}]}