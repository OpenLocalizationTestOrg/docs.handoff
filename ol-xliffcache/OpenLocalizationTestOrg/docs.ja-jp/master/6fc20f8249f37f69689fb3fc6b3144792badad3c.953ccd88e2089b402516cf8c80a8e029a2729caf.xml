{"content":"---\ntitle: \"Features Provided by System.Transactions\"\nms.date: \"03/30/2017\"\nms.assetid: e458cef9-63b5-4401-b448-1536dcd9d9e5\n---\n# Features Provided by System.Transactions\nThis section describes how you can use the features provided by the <xref:System.Transactions> namespace to write your own transactional application and resource manager. Specifically, this section covers how to create and participate in a transaction (local or distributed) with one or multiple participants.  \n  \n## Overview of System.Transactions  \n The infrastructure provided by the classes in the <xref:System.Transactions> namespace makes transactional programming simple and efficient by supporting transactions initiated in SQL Server, ADO.NET, Message Queuing (MSMQ), and the Microsoft Distributed Transaction Coordinator (MSDTC). The <xref:System.Transactions> namespace provides both an explicit programming model based on the <xref:System.Transactions.Transaction> class, as well as an implicit programming model using the <xref:System.Transactions.TransactionScope> class, in which transactions are automatically managed by the infrastructure. For more information on how to create a transactional application using these two models, see [Writing a Transactional Application](../../../../docs/framework/data/transactions/writing-a-transactional-application.md).  \n  \n The <xref:System.Transactions> namespace also provides types for you to implement a resource manager. A resource manager manages durable or volatile data used in a transaction, and work in cooperation with the transaction manager to provide the application with a guarantee of atomicity and isolation. The transaction manager that is provided by the <xref:System.Transactions> infrastructure supports transactions involving multiple volatile resources or a single durable resource. For more information on implementing a resource manager, see [Implementing a Resource Manager](../../../../docs/framework/data/transactions/implementing-a-resource-manager.md).  \n  \n The transaction manager also transparently escalates local transactions to distributed transactions by coordinating with a disk-based transaction manager like the DTC, when an additional durable resource manager enlists itself with a transaction. There are two key ways that the <xref:System.Transactions> infrastructure provides enhanced performance.  \n  \n-   Dynamic Escalation, which ensures that the <xref:System.Transactions> infrastructure only engages the MSDTC when a transaction spans across multiple distributed resources. For more information about dynamic escalation. see [Transaction Management Escalation](../../../../docs/framework/data/transactions/transaction-management-escalation.md) topic.  \n  \n-   Promotable Enlistments, which allows a resource, such as a database, to take ownership of the transaction if it is the only entity participating in the transaction. Later, if needed, the <xref:System.Transactions> infrastructure can still escalate the management of the transaction to the MSDTC. This further reduces the chance of using the MSDTC. Promotable Enlistments are covered in depth in the topic[Optimization using Single Phase Commit and Promotable Single Phase Notification](../../../../docs/framework/data/transactions/optimization-spc-and-promotable-spn.md).  \n  \n The <xref:System.Transactions> namespace defines three levels of trust - AllowPartiallyTrustedCallers (APTCA), DistributedTransactionPermission(DTP) and full trust - that restrict access to the types of resources it exposes. For more information on the various trust levels, see [Security Trust Levels in Accessing Resources](../../../../docs/framework/data/transactions/security-trust-levels-in-accessing-resources.md).  \n  \n## In this section  \n  \n### Writing A Transactional Application  \n The <xref:System.Transactions> namespace provides two models for creating transactional applications. [Implementing an Implicit Transaction using Transaction Scope](../../../../docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md) describes how the <xref:System.Transactions> namespace supports creating implicit transactions using the <xref:System.Transactions.TransactionScope> class.  \n  \n [Implementing an Explicit Transaction using CommittableTransaction](../../../../docs/framework/data/transactions/implementing-an-explicit-transaction-using-committabletransaction.md) describes how the <xref:System.Transactions> namespace supports creating explicit transactions using the <xref:System.Transactions.CommittableTransaction> class.  \n  \n For additional topics covering writing a transactional application, see [Writing a Transactional Application](../../../../docs/framework/data/transactions/writing-a-transactional-application.md).  \n  \n### Implementing A Resource Manager  \n To implement a resource manager that can participate in a transaction, see [Implementing a Resource Manager](../../../../docs/framework/data/transactions/implementing-a-resource-manager.md). This section covers the enlistment of a resource, committing a transaction, recovery after failure, and optimization best practices.\n","nodes":[{"pos":[4,124],"embed":true,"restype":"x-metadata","content":"title: \"Features Provided by System.Transactions\"\nms.date: \"03/30/2017\"\nms.assetid: e458cef9-63b5-4401-b448-1536dcd9d9e5","nodes":[{"content":"Features Provided by System.Transactions","nodes":[{"pos":[0,40],"content":"Features Provided by System.Transactions","nodes":[{"content":"Features Provided by System.Transactions","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[131,171],"content":"Features Provided by System.Transactions","linkify":"Features Provided by System.Transactions","nodes":[{"content":"Features Provided by System.Transactions","pos":[0,40]}]},{"content":"This section describes how you can use the features provided by the <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> namespace to write your own transactional application and resource manager.","pos":[172,342],"source":"This section describes how you can use the features provided by the <xref:System.Transactions> namespace to write your own transactional application and resource manager."},{"content":"Specifically, this section covers how to create and participate in a transaction (local or distributed) with one or multiple participants.","pos":[343,481]},{"pos":[490,521],"content":"Overview of System.Transactions","linkify":"Overview of System.Transactions","nodes":[{"content":"Overview of System.Transactions","pos":[0,31]}]},{"content":"The infrastructure provided by the classes in the <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> namespace makes transactional programming simple and efficient by supporting transactions initiated in SQL Server, ADO.NET, Message Queuing (MSMQ), and the Microsoft Distributed Transaction Coordinator (MSDTC).","pos":[525,812],"source":"The infrastructure provided by the classes in the <xref:System.Transactions> namespace makes transactional programming simple and efficient by supporting transactions initiated in SQL Server, ADO.NET, Message Queuing (MSMQ), and the Microsoft Distributed Transaction Coordinator (MSDTC)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> namespace provides both an explicit programming model based on the <ph id=\"ph2\">&lt;xref:System.Transactions.Transaction&gt;</ph> class, as well as an implicit programming model using the <ph id=\"ph3\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, in which transactions are automatically managed by the infrastructure.","pos":[813,1129],"source":" The <xref:System.Transactions> namespace provides both an explicit programming model based on the <xref:System.Transactions.Transaction> class, as well as an implicit programming model using the <xref:System.Transactions.TransactionScope> class, in which transactions are automatically managed by the infrastructure."},{"content":"For more information on how to create a transactional application using these two models, see <bpt id=\"p1\">[</bpt>Writing a Transactional Application<ept id=\"p1\">](../../../../docs/framework/data/transactions/writing-a-transactional-application.md)</ept>.","pos":[1130,1347],"source":" For more information on how to create a transactional application using these two models, see [Writing a Transactional Application](../../../../docs/framework/data/transactions/writing-a-transactional-application.md)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> namespace also provides types for you to implement a resource manager.","pos":[1354,1455],"source":"The <xref:System.Transactions> namespace also provides types for you to implement a resource manager."},{"content":"A resource manager manages durable or volatile data used in a transaction, and work in cooperation with the transaction manager to provide the application with a guarantee of atomicity and isolation.","pos":[1456,1655]},{"content":"The transaction manager that is provided by the <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> infrastructure supports transactions involving multiple volatile resources or a single durable resource.","pos":[1656,1835],"source":" The transaction manager that is provided by the <xref:System.Transactions> infrastructure supports transactions involving multiple volatile resources or a single durable resource."},{"content":"For more information on implementing a resource manager, see <bpt id=\"p1\">[</bpt>Implementing a Resource Manager<ept id=\"p1\">](../../../../docs/framework/data/transactions/implementing-a-resource-manager.md)</ept>.","pos":[1836,2012],"source":" For more information on implementing a resource manager, see [Implementing a Resource Manager](../../../../docs/framework/data/transactions/implementing-a-resource-manager.md)."},{"content":"The transaction manager also transparently escalates local transactions to distributed transactions by coordinating with a disk-based transaction manager like the DTC, when an additional durable resource manager enlists itself with a transaction.","pos":[2019,2265]},{"content":"There are two key ways that the <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> infrastructure provides enhanced performance.","pos":[2266,2370],"source":" There are two key ways that the <xref:System.Transactions> infrastructure provides enhanced performance."},{"content":"Dynamic Escalation, which ensures that the <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> infrastructure only engages the MSDTC when a transaction spans across multiple distributed resources.","pos":[2380,2551],"source":"Dynamic Escalation, which ensures that the <xref:System.Transactions> infrastructure only engages the MSDTC when a transaction spans across multiple distributed resources."},{"content":"For more information about dynamic escalation.","pos":[2552,2598]},{"content":"see <bpt id=\"p1\">[</bpt>Transaction Management Escalation<ept id=\"p1\">](../../../../docs/framework/data/transactions/transaction-management-escalation.md)</ept> topic.","pos":[2599,2728],"source":" see [Transaction Management Escalation](../../../../docs/framework/data/transactions/transaction-management-escalation.md) topic."},{"content":"Promotable Enlistments, which allows a resource, such as a database, to take ownership of the transaction if it is the only entity participating in the transaction.","pos":[2738,2902]},{"content":"Later, if needed, the <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> infrastructure can still escalate the management of the transaction to the MSDTC.","pos":[2903,3033],"source":" Later, if needed, the <xref:System.Transactions> infrastructure can still escalate the management of the transaction to the MSDTC."},{"content":"This further reduces the chance of using the MSDTC.","pos":[3034,3085]},{"content":"Promotable Enlistments are covered in depth in the topic<bpt id=\"p1\">[</bpt>Optimization using Single Phase Commit and Promotable Single Phase Notification<ept id=\"p1\">](../../../../docs/framework/data/transactions/optimization-spc-and-promotable-spn.md)</ept>.","pos":[3086,3309],"source":" Promotable Enlistments are covered in depth in the topic[Optimization using Single Phase Commit and Promotable Single Phase Notification](../../../../docs/framework/data/transactions/optimization-spc-and-promotable-spn.md)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> namespace defines three levels of trust - AllowPartiallyTrustedCallers (APTCA), DistributedTransactionPermission(DTP) and full trust - that restrict access to the types of resources it exposes.","pos":[3316,3540],"source":"The <xref:System.Transactions> namespace defines three levels of trust - AllowPartiallyTrustedCallers (APTCA), DistributedTransactionPermission(DTP) and full trust - that restrict access to the types of resources it exposes."},{"content":"For more information on the various trust levels, see <bpt id=\"p1\">[</bpt>Security Trust Levels in Accessing Resources<ept id=\"p1\">](../../../../docs/framework/data/transactions/security-trust-levels-in-accessing-resources.md)</ept>.","pos":[3541,3736],"source":" For more information on the various trust levels, see [Security Trust Levels in Accessing Resources](../../../../docs/framework/data/transactions/security-trust-levels-in-accessing-resources.md)."},{"pos":[3745,3760],"content":"In this section","linkify":"In this section","nodes":[{"content":"In this section","pos":[0,15]}]},{"pos":[3770,3805],"content":"Writing A Transactional Application","linkify":"Writing A Transactional Application","nodes":[{"content":"Writing A Transactional Application","pos":[0,35]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> namespace provides two models for creating transactional applications.","pos":[3809,3910],"source":"The <xref:System.Transactions> namespace provides two models for creating transactional applications."},{"content":"<bpt id=\"p1\">[</bpt>Implementing an Implicit Transaction using Transaction Scope<ept id=\"p1\">](../../../../docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> describes how the <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> namespace supports creating implicit transactions using the <ph id=\"ph2\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class.","pos":[3911,4239],"source":"[Implementing an Implicit Transaction using Transaction Scope](../../../../docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md) describes how the <xref:System.Transactions> namespace supports creating implicit transactions using the <xref:System.Transactions.TransactionScope> class."},{"pos":[4246,4590],"content":"<bpt id=\"p1\">[</bpt>Implementing an Explicit Transaction using CommittableTransaction<ept id=\"p1\">](../../../../docs/framework/data/transactions/implementing-an-explicit-transaction-using-committabletransaction.md)</ept> describes how the <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> namespace supports creating explicit transactions using the <ph id=\"ph2\">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class.","source":"[Implementing an Explicit Transaction using CommittableTransaction](../../../../docs/framework/data/transactions/implementing-an-explicit-transaction-using-committabletransaction.md) describes how the <xref:System.Transactions> namespace supports creating explicit transactions using the <xref:System.Transactions.CommittableTransaction> class."},{"pos":[4597,4792],"content":"For additional topics covering writing a transactional application, see <bpt id=\"p1\">[</bpt>Writing a Transactional Application<ept id=\"p1\">](../../../../docs/framework/data/transactions/writing-a-transactional-application.md)</ept>.","source":"For additional topics covering writing a transactional application, see [Writing a Transactional Application](../../../../docs/framework/data/transactions/writing-a-transactional-application.md)."},{"pos":[4802,4833],"content":"Implementing A Resource Manager","linkify":"Implementing A Resource Manager","nodes":[{"content":"Implementing A Resource Manager","pos":[0,31]}]},{"content":"To implement a resource manager that can participate in a transaction, see <bpt id=\"p1\">[</bpt>Implementing a Resource Manager<ept id=\"p1\">](../../../../docs/framework/data/transactions/implementing-a-resource-manager.md)</ept>.","pos":[4837,5027],"source":"To implement a resource manager that can participate in a transaction, see [Implementing a Resource Manager](../../../../docs/framework/data/transactions/implementing-a-resource-manager.md)."},{"content":"This section covers the enlistment of a resource, committing a transaction, recovery after failure, and optimization best practices.","pos":[5028,5160]}]}