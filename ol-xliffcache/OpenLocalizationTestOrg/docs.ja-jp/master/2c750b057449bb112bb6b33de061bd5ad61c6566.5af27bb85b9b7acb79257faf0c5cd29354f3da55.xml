{"content":"---\ntitle: \"Of Clause (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"Of\"\n  - \"vb.Of\"\n  - \"vb.of\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Of keyword\"\n  - \"arguments [Visual Basic], data types\"\n  - \"constraints, Visual Basic generic types\"\n  - \"generic parameters\"\n  - \"generics [Visual Basic], constraints\"\n  - \"parameters, type\"\n  - \"types [Visual Basic], generic\"\n  - \"parameters, generic\"\n  - \"type parameters\"\n  - \"data type arguments\"\nms.assetid: 0db8f65c-65af-4089-ab7f-6fcfecb60444\ncaps.latest.revision: 17\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Of Clause (Visual Basic)\nIntroduces an `Of` clause, which identifies a *type parameter* on a *generic* class, structure, interface, delegate, or procedure. For information on generic types, see [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md).  \n  \n## Using the Of Keyword  \n The following code example uses the `Of` keyword to define the outline of a class that takes two type parameters. It *constrains* the `keyType` parameter by the <xref:System.IComparable> interface, which means the consuming code must supply a type argument that implements <xref:System.IComparable>. This is necessary so that the `add` procedure can call the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> method. For more information on constraints, see [Type List](../../../visual-basic/language-reference/statements/type-list.md).  \n  \n```  \nPublic Class Dictionary(Of entryType, keyType As IComparable)  \n    Public Sub add(ByVal e As entryType, ByVal k As keyType)  \n        Dim dk As keyType  \n        If k.CompareTo(dk) = 0 Then  \n        End If  \n    End Sub  \n    Public Function find(ByVal k As keyType) As entryType  \n    End Function  \nEnd Class  \n```  \n  \n If you complete the preceding class definition, you can construct a variety of `dictionary` classes from it. The types you supply to `entryType` and `keyType` determine what type of entry the class holds and what type of key it associates with each entry. Because of the constraint, you must supply to `keyType` a type that implements <xref:System.IComparable>.  \n  \n The following code example creates an object that holds `String` entries and associates an `Integer` key with each one. `Integer` implements <xref:System.IComparable> and therefore satisfies the constraint on `keyType`.  \n  \n```  \nDim d As New dictionary(Of String, Integer)  \n```  \n  \n The `Of` keyword can be used in these contexts:  \n  \n [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)  \n  \n [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)  \n  \n [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## See Also  \n <xref:System.IComparable>   \n [Type List](../../../visual-basic/language-reference/statements/type-list.md)   \n [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)   \n [Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)","nodes":[{"pos":[12,53],"content":"Of Clause (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Of Clause (Visual Basic) | Microsoft Docs","pos":[0,41]}]},{"pos":[889,913],"content":"Of Clause (Visual Basic)","linkify":"Of Clause (Visual Basic)","nodes":[{"content":"Of Clause (Visual Basic)","pos":[0,24]}]},{"content":"Introduces an <ph id=\"ph1\">`Of`</ph> clause, which identifies a <bpt id=\"p1\">*</bpt>type parameter<ept id=\"p1\">*</ept> on a <bpt id=\"p2\">*</bpt>generic<ept id=\"p2\">*</ept> class, structure, interface, delegate, or procedure.","pos":[914,1044],"source":"Introduces an `Of` clause, which identifies a *type parameter* on a *generic* class, structure, interface, delegate, or procedure."},{"content":"For information on generic types, see <bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>.","pos":[1045,1202],"source":" For information on generic types, see [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)."},{"pos":[1211,1231],"content":"Using the Of Keyword","linkify":"Using the Of Keyword","nodes":[{"content":"Using the Of Keyword","pos":[0,20]}]},{"content":"The following code example uses the <ph id=\"ph1\">`Of`</ph> keyword to define the outline of a class that takes two type parameters.","pos":[1235,1348],"source":"The following code example uses the `Of` keyword to define the outline of a class that takes two type parameters."},{"content":"It <bpt id=\"p1\">*</bpt>constrains<ept id=\"p1\">*</ept> the <ph id=\"ph1\">`keyType`</ph> parameter by the <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph> interface, which means the consuming code must supply a type argument that implements <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph>.","pos":[1349,1534],"source":" It *constrains* the `keyType` parameter by the <xref:System.IComparable> interface, which means the consuming code must supply a type argument that implements <xref:System.IComparable>."},{"content":"This is necessary so that the <ph id=\"ph1\">`add`</ph> procedure can call the <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=fullName&gt;</ph> method.","pos":[1535,1665],"source":" This is necessary so that the `add` procedure can call the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> method."},{"content":"For more information on constraints, see <bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/type-list.md)</ept>.","pos":[1666,1785],"source":" For more information on constraints, see [Type List](../../../visual-basic/language-reference/statements/type-list.md)."},{"content":"If you complete the preceding class definition, you can construct a variety of <ph id=\"ph1\">`dictionary`</ph> classes from it.","pos":[2122,2230],"source":"If you complete the preceding class definition, you can construct a variety of `dictionary` classes from it."},{"content":"The types you supply to <ph id=\"ph1\">`entryType`</ph> and <ph id=\"ph2\">`keyType`</ph> determine what type of entry the class holds and what type of key it associates with each entry.","pos":[2231,2377],"source":" The types you supply to `entryType` and `keyType` determine what type of entry the class holds and what type of key it associates with each entry."},{"content":"Because of the constraint, you must supply to <ph id=\"ph1\">`keyType`</ph> a type that implements <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph>.","pos":[2378,2483],"source":" Because of the constraint, you must supply to `keyType` a type that implements <xref:System.IComparable>."},{"content":"The following code example creates an object that holds <ph id=\"ph1\">`String`</ph> entries and associates an <ph id=\"ph2\">`Integer`</ph> key with each one.","pos":[2490,2609],"source":"The following code example creates an object that holds `String` entries and associates an `Integer` key with each one."},{"content":"<ph id=\"ph1\">`Integer`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph> and therefore satisfies the constraint on <ph id=\"ph3\">`keyType`</ph>.","pos":[2610,2709],"source":"`Integer` implements <xref:System.IComparable> and therefore satisfies the constraint on `keyType`."},{"pos":[2777,2824],"content":"The <ph id=\"ph1\">`Of`</ph> keyword can be used in these contexts:","source":"The `Of` keyword can be used in these contexts:"},{"pos":[2831,2920],"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept>","source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)"},{"pos":[2927,3022],"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept>","source":"[Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)"},{"pos":[3029,3124],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[3131,3228],"content":"<bpt id=\"p1\">[</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept>","source":"[Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)"},{"pos":[3235,3332],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[3339,3424],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[3433,3441],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Type List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/type-list.md)</ept><ph id=\"ph1\"> </ph>","pos":[3474,3553],"source":" [Type List](../../../visual-basic/language-reference/statements/type-list.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3556,3676],"source":" [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>In<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept><ph id=\"ph1\"> </ph>","pos":[3679,3760],"source":" [In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Out<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept>","pos":[3763,3845],"source":" [Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)"}]}