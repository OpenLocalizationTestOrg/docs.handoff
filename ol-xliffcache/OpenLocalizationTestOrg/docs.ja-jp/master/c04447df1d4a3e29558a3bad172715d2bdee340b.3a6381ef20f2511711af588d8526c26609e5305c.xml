{"content":"---\ntitle: \"How to: Find All Nodes in a Namespace (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: b735d7da-5727-48a3-ab57-a16378adc32e\n---\n# How to: Find All Nodes in a Namespace (Visual Basic)\nYou can filter on the namespace of each element or attribute to find all nodes in that particular namespace.  \n  \n## Example  \n The following example creates an XML tree with two namespaces. It then iterates through the tree and prints the names of all the elements and attributes in one of those namespaces.  \n  \n```vb  \nImports <xmlns:aw=\"http://www.adventure-works.com\">  \nImports <xmlns:fc=\"www.fourthcoffee.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            <aw:Root>  \n                <fc:Child1>abc</fc:Child1>  \n                <fc:Child2>def</fc:Child2>  \n                <aw:Child3>ghi</aw:Child3>  \n                <fc:Child4>  \n                    <fc:GrandChild1>jkl</fc:GrandChild1>  \n                    <aw:GrandChild2>mno</aw:GrandChild2>  \n                </fc:Child4>  \n            </aw:Root>  \n        Console.WriteLine(\"Nodes in the http://www.adventure-works.com namespace\")  \n        Dim awElements As IEnumerable(Of XElement) = _  \n            From el In xmlTree.Descendants() _  \n            Where (el.Name.Namespace = GetXmlNamespace(aw)) _  \n            Select el  \n        For Each el As XElement In awElements  \n            Console.WriteLine(el.Name.ToString())  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This code produces the following output:  \n  \n```  \nNodes in the http://www.adventure-works.com namespace  \n{http://www.adventure-works.com}Child3  \n{http://www.adventure-works.com}GrandChild2  \n```  \n  \n## Example  \n The XML file accessed by the following query contains purchase orders in two different namespaces. The query creates a new tree with just the elements in one of the namespaces.  \n  \n This example uses the following XML document: [Sample XML File: Consolidated Purchase Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-consolidated-purchase-orders.md).  \n  \n```vb  \nImports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim cpo As XDocument = XDocument.Load(\"ConsolidatedPurchaseOrders.xml\")  \n        Dim newTree As XElement = _  \n            <Root>  \n                <%= From el In cpo.Root.Elements() _  \n                    Where el.Name.Namespace = GetXmlNamespace(aw) _  \n                    Select el %>  \n            </Root>  \n        Console.WriteLine(newTree)  \n    End Sub  \nEnd Module  \n```  \n  \n This code produces the following output:  \n  \n```xml  \n<Root>  \n  <aw:PurchaseOrder PONumber=\"11223\" Date=\"2000-01-15\" xmlns:aw=\"http://www.adventure-works.com\">  \n    <aw:ShippingAddress>  \n      <aw:Name>Chris Preston</aw:Name>  \n      <aw:Street>123 Main St.</aw:Street>  \n      <aw:City>Seattle</aw:City>  \n      <aw:State>WA</aw:State>  \n      <aw:Zip>98113</aw:Zip>  \n      <aw:Country>USA</aw:Country>  \n    </aw:ShippingAddress>  \n    <aw:BillingAddress>  \n      <aw:Name>Chris Preston</aw:Name>  \n      <aw:Street>123 Main St.</aw:Street>  \n      <aw:City>Seattle</aw:City>  \n      <aw:State>WA</aw:State>  \n      <aw:Zip>98113</aw:Zip>  \n      <aw:Country>USA</aw:Country>  \n    </aw:BillingAddress>  \n    <aw:DeliveryInstructions>Ship only complete order.</aw:DeliveryInstructions>  \n    <aw:Item PartNum=\"LIT-01\">  \n      <aw:ProductID>Litware Networking Card</aw:ProductID>  \n      <aw:Qty>1</aw:Qty>  \n      <aw:Price>20.99</aw:Price>  \n    </aw:Item>  \n    <aw:Item PartNum=\"LIT-25\">  \n      <aw:ProductID>Litware 17in LCD Monitor</aw:ProductID>  \n      <aw:Qty>1</aw:Qty>  \n      <aw:Price>199.99</aw:Price>  \n    </aw:Item>  \n  </aw:PurchaseOrder>  \n</Root>  \n```  \n  \n## See also\n\n- [Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)\n","nodes":[{"pos":[4,134],"embed":true,"restype":"x-metadata","content":"title: \"How to: Find All Nodes in a Namespace (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: b735d7da-5727-48a3-ab57-a16378adc32e","nodes":[{"content":"How to: Find All Nodes in a Namespace (Visual Basic)","nodes":[{"pos":[0,52],"content":"How to: Find All Nodes in a Namespace (Visual Basic)","nodes":[{"content":"How to: Find All Nodes in a Namespace (Visual Basic)","pos":[0,52]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[141,193],"content":"How to: Find All Nodes in a Namespace (Visual Basic)","linkify":"How to: Find All Nodes in a Namespace (Visual Basic)","nodes":[{"content":"How to: Find All Nodes in a Namespace (Visual Basic)","pos":[0,52]}]},{"content":"You can filter on the namespace of each element or attribute to find all nodes in that particular namespace.","pos":[194,302]},{"pos":[311,318],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates an XML tree with two namespaces.","pos":[322,384]},{"content":"It then iterates through the tree and prints the names of all the elements and attributes in one of those namespaces.","pos":[385,502]},{"content":"This code produces the following output:","pos":[1483,1523]},{"pos":[1690,1697],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The XML file accessed by the following query contains purchase orders in two different namespaces.","pos":[1701,1799]},{"content":"The query creates a new tree with just the elements in one of the namespaces.","pos":[1800,1877]},{"pos":[1884,2084],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Consolidated Purchase Orders<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-consolidated-purchase-orders.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Consolidated Purchase Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-consolidated-purchase-orders.md)."},{"content":"This code produces the following output:","pos":[2586,2626]},{"pos":[3775,3783],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3787,3918],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}