{"content":"---\ntitle: \"ICLRSyncManager::CreateRWLockOwnerIterator Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICLRSyncManager.CreateRWLockOwnerIterator\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRSyncManager::CreateRWLockOwnerIterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICLRSyncManager::CreateRWLockOwnerIterator method [.NET Framework hosting]\"\n  - \"CreateRWLockOwnerIterator method [.NET Framework hosting]\"\nms.assetid: b5535b87-9439-424e-b9b3-7d6fafb9819e\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# ICLRSyncManager::CreateRWLockOwnerIterator Method\nRequests that the common language runtime (CLR) create an iterator for the host to use to determine the set of tasks waiting on a reader-writer lock.  \n  \n## Syntax  \n  \n```  \nHRESULT CreateRWLockOwnerIterator (  \n    [in]  SIZE_T    cookie,  \n    [out] SIZE_T   *pIterator  \n);  \n```  \n  \n#### Parameters  \n `cookie`  \n [in] The cookie associated with the desired reader-writer lock.  \n  \n `pIterator`  \n [out] A pointer to an iterator that can be passed to the [GetRWLockOwnerNext](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-getrwlockownernext-method.md) and [DeleteRWLockOwnerIterator](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-deleterwlockowneriterator-method.md) methods.  \n  \n## Return Value  \n  \n|HRESULT|Description|  \n|-------------|-----------------|  \n|S_OK|`CreateRWLockOwnerIterator` returned successfully.|  \n|HOST_E_CLRNOTAVAILABLE|The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.|  \n|HOST_E_TIMEOUT|The call timed out.|  \n|HOST_E_NOT_OWNER|The caller does not own the lock.|  \n|HOST_E_ABANDONED|An event was canceled while a blocked thread or fiber was waiting on it.|  \n|E_FAIL|An unknown catastrophic failure occurred. When a method returns E_FAIL, the CLR is no longer usable within the process. Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.|  \n|HOST_E_INVALIDOPERATION|`CreateRWLockOwnerIterator` was called on a thread that is currently running managed code.|  \n  \n## Remarks  \n Hosts typically call the `CreateRWLockOwnerIterator`, `DeleteRWLockOwnerIterator`, and `GetRWLockOwnerNext` methods during deadlock detection. The host is responsible for ensuring that the reader-writer lock is still valid, because the CLR makes no attempt to keep the reader-writer lock alive. Several strategies are available for the host to ensure the validity of the lock:  \n  \n-   The host can block release calls on the reader-writer lock (for example, [IHostSemaphore::ReleaseSemaphore](../../../../docs/framework/unmanaged-api/hosting/ihostsemaphore-releasesemaphore-method.md)) while ensuring that this block does not cause deadlock.  \n  \n-   The host can block the exit from waiting on the event object associated with the reader-writer lock, again ensuring that this block does not cause deadlock.  \n  \n> [!NOTE]\n>  `CreateRWLockOwnerIterator` must be called only on threads that are currently executing unmanaged code.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** MSCorEE.h  \n  \n **Library:** Included as a resource in MSCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [ICLRSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-interface.md)   \n [IHostSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-interface.md)","nodes":[{"pos":[4,768],"embed":true,"restype":"x-metadata","content":"title: \"ICLRSyncManager::CreateRWLockOwnerIterator Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICLRSyncManager.CreateRWLockOwnerIterator\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICLRSyncManager::CreateRWLockOwnerIterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICLRSyncManager::CreateRWLockOwnerIterator method [.NET Framework hosting]\"\n  - \"CreateRWLockOwnerIterator method [.NET Framework hosting]\"\nms.assetid: b5535b87-9439-424e-b9b3-7d6fafb9819e\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method | Microsoft Docs","nodes":[{"pos":[0,66],"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method | Microsoft Docs","nodes":[{"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method | Microsoft Docs","pos":[0,66]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[775,824],"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method","linkify":"ICLRSyncManager::CreateRWLockOwnerIterator Method","nodes":[{"content":"ICLRSyncManager::CreateRWLockOwnerIterator Method","pos":[0,49]}]},{"content":"Requests that the common language runtime (CLR) create an iterator for the host to use to determine the set of tasks waiting on a reader-writer lock.","pos":[825,974]},{"pos":[983,989],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1120,1130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The cookie associated with the desired reader-writer lock.","pos":[1146,1209]},{"content":"[out] A pointer to an iterator that can be passed to the <bpt id=\"p1\">[</bpt>GetRWLockOwnerNext<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-getrwlockownernext-method.md)</ept> and <bpt id=\"p2\">[</bpt>DeleteRWLockOwnerIterator<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-deleterwlockowneriterator-method.md)</ept> methods.","pos":[1231,1546],"source":"[out] A pointer to an iterator that can be passed to the [GetRWLockOwnerNext](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-getrwlockownernext-method.md) and [DeleteRWLockOwnerIterator](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-deleterwlockowneriterator-method.md) methods."},{"pos":[1555,1567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"HRESULT","pos":[1574,1581]},{"content":"Description","pos":[1582,1593]},{"content":"S_OK","pos":[1634,1638]},{"pos":[1639,1689],"content":"<ph id=\"ph1\">`CreateRWLockOwnerIterator`</ph> returned successfully.","source":"`CreateRWLockOwnerIterator` returned successfully."},{"content":"HOST_E_CLRNOTAVAILABLE","pos":[1694,1716]},{"content":"The CLR has not been loaded into a process, or the CLR is in a state in which it cannot run managed code or process the call successfully.","pos":[1717,1855]},{"content":"HOST_E_TIMEOUT","pos":[1860,1874]},{"content":"The call timed out.","pos":[1875,1894]},{"content":"HOST_E_NOT_OWNER","pos":[1899,1915]},{"content":"The caller does not own the lock.","pos":[1916,1949]},{"content":"HOST_E_ABANDONED","pos":[1954,1970]},{"content":"An event was canceled while a blocked thread or fiber was waiting on it.","pos":[1971,2043]},{"content":"E_FAIL","pos":[2048,2054]},{"content":"An unknown catastrophic failure occurred.","pos":[2055,2096]},{"content":"When a method returns E_FAIL, the CLR is no longer usable within the process.","pos":[2097,2174]},{"content":"Subsequent calls to hosting methods return HOST_E_CLRNOTAVAILABLE.","pos":[2175,2241]},{"content":"HOST_E_INVALIDOPERATION","pos":[2246,2269]},{"pos":[2270,2360],"content":"<ph id=\"ph1\">`CreateRWLockOwnerIterator`</ph> was called on a thread that is currently running managed code.","source":"`CreateRWLockOwnerIterator` was called on a thread that is currently running managed code."},{"pos":[2370,2377],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Hosts typically call the <ph id=\"ph1\">`CreateRWLockOwnerIterator`</ph>, <ph id=\"ph2\">`DeleteRWLockOwnerIterator`</ph>, and <ph id=\"ph3\">`GetRWLockOwnerNext`</ph> methods during deadlock detection.","pos":[2381,2523],"source":"Hosts typically call the `CreateRWLockOwnerIterator`, `DeleteRWLockOwnerIterator`, and `GetRWLockOwnerNext` methods during deadlock detection."},{"content":"The host is responsible for ensuring that the reader-writer lock is still valid, because the CLR makes no attempt to keep the reader-writer lock alive.","pos":[2524,2675]},{"content":"Several strategies are available for the host to ensure the validity of the lock:","pos":[2676,2757]},{"pos":[2767,3023],"content":"The host can block release calls on the reader-writer lock (for example, <bpt id=\"p1\">[</bpt>IHostSemaphore::ReleaseSemaphore<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihostsemaphore-releasesemaphore-method.md)</ept>) while ensuring that this block does not cause deadlock.","source":"The host can block release calls on the reader-writer lock (for example, [IHostSemaphore::ReleaseSemaphore](../../../../docs/framework/unmanaged-api/hosting/ihostsemaphore-releasesemaphore-method.md)) while ensuring that this block does not cause deadlock."},{"content":"The host can block the exit from waiting on the event object associated with the reader-writer lock, again ensuring that this block does not cause deadlock.","pos":[3033,3189]},{"pos":[3197,3311],"content":"[!NOTE]\n `CreateRWLockOwnerIterator` must be called only on threads that are currently executing unmanaged code.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">`CreateRWLockOwnerIterator`</ph> must be called only on threads that are currently executing unmanaged code.","pos":[9,112],"source":"`CreateRWLockOwnerIterator` must be called only on threads that are currently executing unmanaged code."}]},{"pos":[3320,3332],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3336,3440],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3447,3468],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> MSCorEE.h","source":"**Header:** MSCorEE.h"},{"pos":[3475,3525],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Included as a resource in MSCorEE.dll","source":"**Library:** Included as a resource in MSCorEE.dll"},{"pos":[3532,3640],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[3649,3657],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ICLRSyncManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[3661,3768],"source":"[ICLRSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/iclrsyncmanager-interface.md) "},{"content":"<bpt id=\"p1\">[</bpt>IHostSyncManager Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-interface.md)</ept>","pos":[3772,3880],"source":"[IHostSyncManager Interface](../../../../docs/framework/unmanaged-api/hosting/ihostsyncmanager-interface.md)"}]}