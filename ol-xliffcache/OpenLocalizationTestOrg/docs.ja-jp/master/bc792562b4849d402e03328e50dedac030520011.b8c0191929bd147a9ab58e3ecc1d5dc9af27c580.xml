{"content":"---\ntitle: \"How to: Implement User-Defined Conversions Between Structs - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"user-defined conversions [C#]\"\nms.assetid: 97839aef-8fbc-40d5-9769-6b569bc2710b\n---\n# How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)\nThis example defines two structs, `RomanNumeral` and `BinaryNumeral`, and demonstrates conversions between them.  \n  \n## Example  \n [!code-csharp[csProgGuideStatements#13](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideStatements/CS/Statements.cs#13)]  \n  \n## Robust Programming  \n  \n-   In the previous example, the statement:  \n  \n     [!code-csharp[csProgGuideStatements#14](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideStatements/CS/Statements.cs#14)]  \n  \n     performs a conversion from a `RomanNumeral` to a `BinaryNumeral`. Because there is no direct conversion from `RomanNumeral` to `BinaryNumeral`, a cast is used to convert from a `RomanNumeral` to an `int`, and another cast to convert from an `int` to a `BinaryNumeral`.  \n  \n-   Also the statement  \n  \n     [!code-csharp[csProgGuideStatements#15](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideStatements/CS/Statements.cs#15)]  \n  \n     performs a conversion from a `BinaryNumeral` to a `RomanNumeral`. Because `RomanNumeral` defines an implicit conversion from `BinaryNumeral`, no cast is required.  \n  \n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)\n","nodes":[{"pos":[4,241],"embed":true,"restype":"x-metadata","content":"title: \"How to: Implement User-Defined Conversions Between Structs - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"user-defined conversions [C#]\"\nms.assetid: 97839aef-8fbc-40d5-9769-6b569bc2710b","nodes":[{"content":"How to: Implement User-Defined Conversions Between Structs - C# Programming Guide","nodes":[{"pos":[0,81],"content":"How to: Implement User-Defined Conversions Between Structs - C# Programming Guide","nodes":[{"content":"How to: Implement User-Defined Conversions Between Structs - C# Programming Guide","pos":[0,81]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[248,329],"content":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)","linkify":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)","nodes":[{"content":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)","pos":[0,81]}]},{"pos":[330,442],"content":"This example defines two structs, <ph id=\"ph1\">`RomanNumeral`</ph> and <ph id=\"ph2\">`BinaryNumeral`</ph>, and demonstrates conversions between them.","source":"This example defines two structs, `RomanNumeral` and `BinaryNumeral`, and demonstrates conversions between them."},{"pos":[451,458],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[601,619],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"In the previous example, the statement:","pos":[629,668]},{"content":"performs a conversion from a <ph id=\"ph1\">`RomanNumeral`</ph> to a <ph id=\"ph2\">`BinaryNumeral`</ph>.","pos":[820,885],"source":"performs a conversion from a `RomanNumeral` to a `BinaryNumeral`."},{"content":"Because there is no direct conversion from <ph id=\"ph1\">`RomanNumeral`</ph> to <ph id=\"ph2\">`BinaryNumeral`</ph>, a cast is used to convert from a <ph id=\"ph3\">`RomanNumeral`</ph> to an <ph id=\"ph4\">`int`</ph>, and another cast to convert from an <ph id=\"ph5\">`int`</ph> to a <ph id=\"ph6\">`BinaryNumeral`</ph>.","pos":[886,1088],"source":" Because there is no direct conversion from `RomanNumeral` to `BinaryNumeral`, a cast is used to convert from a `RomanNumeral` to an `int`, and another cast to convert from an `int` to a `BinaryNumeral`."},{"content":"Also the statement","pos":[1098,1116]},{"content":"performs a conversion from a <ph id=\"ph1\">`BinaryNumeral`</ph> to a <ph id=\"ph2\">`RomanNumeral`</ph>.","pos":[1268,1333],"source":"performs a conversion from a `BinaryNumeral` to a `RomanNumeral`."},{"content":"Because <ph id=\"ph1\">`RomanNumeral`</ph> defines an implicit conversion from <ph id=\"ph2\">`BinaryNumeral`</ph>, no cast is required.","pos":[1334,1430],"source":" Because `RomanNumeral` defines an implicit conversion from `BinaryNumeral`, no cast is required."},{"pos":[1439,1447],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1451,1510],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[1513,1579],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1582,1696],"content":"<bpt id=\"p1\">[</bpt>Conversion Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)</ept>","source":"[Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)"}]}