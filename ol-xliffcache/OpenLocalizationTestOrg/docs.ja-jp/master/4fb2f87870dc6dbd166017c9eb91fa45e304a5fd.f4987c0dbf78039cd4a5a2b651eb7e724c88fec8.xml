{"content":"---\ntitle: \"Version Tolerant Serialization | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"version tolerant serialization\"\n  - \"serialization, custom serialization\"\n  - \"serialization, version tolerant\"\n  - \"serialization, controlling\"\n  - \"versions and serialization\"\n  - \"BinaryFormatter class, samples\"\n  - \"serialization, attributes\"\nms.assetid: bea0ffe3-2708-4a16-ac7d-e586ed6b8e8d\ncaps.latest.revision: 9\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Version Tolerant Serialization\nIn version 1.0 and 1.1 of the .NET Framework, creating serializable types that would be reusable from one version of an application to the next was problematic. If a type was modified by adding extra fields, the following problems would occur:  \n  \n-   Older versions of an application would throw exceptions when asked to deserialize new versions of the old type.  \n  \n-   Newer versions of an application would throw exceptions when deserializing older versions of a type with missing data.  \n  \n Version Tolerant Serialization (VTS) is a set of features introduced in .NET Framework 2.0 that makes it easier, over time, to modify serializable types. Specifically, the VTS features are enabled for classes to which the <xref:System.SerializableAttribute> attribute has been applied, including generic types. VTS makes it possible to add new fields to those classes without breaking compatibility with other versions of the type. For a working sample application, see [Version Tolerant Serialization Technology Sample](../../../docs/framework/serialization/version-tolerant-serialization-technology-sample.md).  \n  \n The VTS features are enabled when using the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>. Additionally, all features except extraneous data tolerance are also enabled when using the <xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter>. For more information about using these classes for serialization, see [Binary Serialization](../../../docs/framework/serialization/binary-serialization.md).  \n  \n## Feature List  \n The set of features includes the following:  \n  \n-   Tolerance of extraneous or unexpected data. This enables newer versions of the type to send data to older versions.  \n  \n-   Tolerance of missing optional data. This enables older versions to send data to newer versions.  \n  \n-   Serialization callbacks. This enables intelligent default value setting in cases where data is missing.  \n  \n In addition, there is a feature for declaring when a new optional field has been added. This is the <xref:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded%2A> property of the <xref:System.Runtime.Serialization.OptionalFieldAttribute> attribute.  \n  \n These features are discussed in greater detail below.  \n  \n## Tolerance of Extraneous or Unexpected Data  \n In the past, during deserialization, any extraneous or unexpected data caused exceptions to be thrown. With VTS, in the same situation, any extraneous or unexpected data is ignored instead of causing exceptions to be thrown. This enables applications that use newer versions of a type (that is, a version that includes more fields) to send information to applications that expect older versions of the same type.  \n  \n In the following example, the extra data contained in the `CountryField` of version 2.0 of the `Address` class is ignored when an older application deserializes the newer version.  \n  \n```csharp  \n// Version 1 of the Address class.  \n[Serializable]  \npublic class Address  \n{  \n    public string Street;  \n    public string City;  \n}  \n// Version 2.0 of the Address class.  \n[Serializable]  \npublic class Address  \n{  \n    public string Street;  \n    public string City;  \n    // The older application ignores this data.  \n    public string CountryField;  \n}  \n```  \n  \n```vb  \n' Version 1 of the Address class.  \n<Serializable> _  \nPublic Class Address  \n    Public Street As String  \n    Public City As String  \nEnd Class  \n  \n' Version 2.0 of the Address class.  \n<Serializable> _  \nPublic Class Address  \n    Public Street As String  \n    Public City As String  \n    ' The older application ignores this data.  \n    Public CountryField As String  \nEnd Class  \n```  \n  \n## Tolerance of Missing Data  \n Fields can be marked as optional by applying the <xref:System.Runtime.Serialization.OptionalFieldAttribute> attribute to them. During deserialization, if the optional data is missing, the serialization engine ignores the absence and does not throw an exception. Thus, applications that expect older versions of a type can send data to applications that expect newer versions of the same type.  \n  \n The following example shows version 2.0 of the `Address` class with the `CountryField` field marked as optional. If an older application sends version 1 to a newer application that expects version 2.0, the absence of the data is ignored.  \n  \n```csharp  \n[Serializable]  \npublic class Address  \n{  \n    public string Street;  \n    public string City;  \n  \n    [OptionalField]  \n    public string CountryField;  \n}  \n```  \n  \n```vb  \n<Serializable> _  \nPublic Class Address  \n    Public Street As String  \n    Public City As String  \n  \n    <OptionalField> _  \n    Public CountryField As String  \nEnd Class  \n```  \n  \n## Serialization Callbacks  \n Serialization callbacks are a mechanism that provides hooks into the serialization/deserialization process at four points.  \n  \n|Attribute|When the Associated Method is Called|Typical Use|  \n|---------------|------------------------------------------|-----------------|  \n|<xref:System.Runtime.Serialization.OnDeserializingAttribute>|Before deserialization.*|Initialize default values for optional fields.|  \n|<xref:System.Runtime.Serialization.OnDeserializedAttribute>|After deserialization.|Fix optional field values based on contents of other fields.|  \n|<xref:System.Runtime.Serialization.OnSerializingAttribute>|Before serialization.|Prepare for serialization. For example, create optional data structures.|  \n|<xref:System.Runtime.Serialization.OnSerializedAttribute>|After serialization.|Log serialization events.|  \n  \n \\* This callback is invoked before the deserialization constructor, if one is present.  \n  \n### Using Callbacks  \n To use callbacks, apply the appropriate attribute to a method that accepts a <xref:System.Runtime.Serialization.StreamingContext> parameter. Only one method per class can be marked with each of these attributes. For example:  \n  \n```csharp  \n[OnDeserializing]  \nprivate void SetCountryRegionDefault(StreamingContext sc)  \n{  \n    CountryField = \"Japan\";  \n}  \n  \n```  \n  \n```vb  \n<OnDeserializing>  \nPrivate Sub SetCountryRegionDefault(StreamingContext sc)  \n    CountryField = \"Japan\";  \nEnd Sub  \n```  \n  \n The intended use of these methods is for versioning. During deserialization, an optional field may not be correctly initialized if the data for the field is missing. This can be corrected by creating the method that assigns the correct value, then applying either the **OnDeserializingAttribute** or **OnDeserializedAttribute** attribute to the method.  \n  \n The following example shows the method in the context of a type. If an earlier version of an application sends an instance of the `Address` class to a later version of the application, the `CountryField` field data will be missing. But after deserialization, the field will be set to a default value \"Japan.\"  \n  \n```csharp  \n[Serializable]  \npublic class Address  \n{  \n    public string Street;  \n    public string City;  \n    [OptionalField]  \n    public string CountryField;  \n  \n    [OnDeserializing]  \n    private void SetCountryRegionDefault (StreamingContext sc)  \n    {  \n        CountryField = \"Japan\";  \n    }  \n}  \n  \n```  \n  \n```vb  \n<Serializable> _  \nPublic Class Address  \n    Public Street As String  \n    Public City As String  \n    <OptionalField> _  \n    Public CountryField As String  \n  \n    <OnDeserializing> _  \n    Private Sub SetCountryRegionDefault(StreamingContext sc)  \n        CountryField = \"Japan\";  \n    End Sub  \nEnd Class  \n```  \n  \n## The VersionAdded Property  \n The **OptionalFieldAttribute** has the **VersionAdded** property. In version 2.0 of the .NET Framework, this is not used. However, it is important to set this property correctly to ensure that the type will be compatible with future serialization engines.  \n  \n The property indicates which version of a type a given field has been added. It should be incremented by exactly one (starting at 2) every time the type is modified, as shown in the following example:  \n  \n```csharp  \n// Version 1.0  \n[Serializable]  \npublic class Person  \n{  \n    public string FullName;  \n}  \n  \n// Version 2.0  \n[Serializable]  \npublic class Person  \n{  \n    public string FullName;  \n  \n    [OptionalField(VersionAdded = 2)]  \n    public string NickName;  \n    [OptionalField(VersionAdded = 2)]  \n    public DateTime BirthDate;  \n}  \n  \n// Version 3.0  \n[Serializable]  \npublic class Person  \n{  \n    public string FullName;  \n  \n    [OptionalField(VersionAdded=2)]  \n    public string NickName;  \n    [OptionalField(VersionAdded=2)]  \n    public DateTime BirthDate;  \n  \n    [OptionalField(VersionAdded=3)]  \n    public int Weight;  \n}  \n```  \n  \n```vb  \n' Version 1.0  \n<Serializable> _  \nPublic Class Person  \n    Public FullName  \nEnd Class  \n  \n' Version 2.0  \n<Serializable> _  \nPublic Class Person  \n    Public FullName As String  \n  \n    <OptionalField(VersionAdded := 2)> _  \n    Public NickName As String  \n    <OptionalField(VersionAdded := 2)> _  \n    Public BirthDate As DateTime  \nEnd Class  \n  \n' Version 3.0  \n<Serializable> _  \nPublic Class Person  \n    Public FullName As String  \n  \n    <OptionalField(VersionAdded := 2)> _  \n    Public NickName As String  \n    <OptionalField(VersionAdded := 2)> _  \n    Public BirthDate As DateTime  \n  \n    <OptionalField(VersionAdded := 3)> _  \n    Public Weight As Integer  \nEnd Class  \n```  \n  \n## SerializationBinder  \n Some users may need to control which class to serialize and deserialize because a different version of the class is required on the server and client. <xref:System.Runtime.Serialization.SerializationBinder> is an abstract class used to control the actual types used during serialization and deserialization.  To use this class, derive a class from <xref:System.Runtime.Serialization.SerializationBinder> and override the <xref:System.Runtime.Serialization.SerializationBinder.BindToName%2A> System.String, System.String)?qualifyHint=False&autoUpgrade=True and <xref:System.Runtime.Serialization.SerializationBinder.BindToType%2A> System.String)?qualifyHint=False&autoUpgrade=True methods. [!INCLUDE[crdefault](../../../includes/crdefault-md.md)][Controlling Serialization and Deserialization with SerializationBinder](../../../docs/framework/wcf/feature-details/controlling-serialization-and-deserialization-with-serializationbinder.md).  \n  \n## Best Practices  \n To ensure proper versioning behavior, follow these rules when modifying a type from version to version:  \n  \n-   Never remove a serialized field.  \n  \n-   Never apply the <xref:System.NonSerializedAttribute> attribute to a field if the attribute was not applied to the field in the previous version.  \n  \n-   Never change the name or the type of a serialized field.  \n  \n-   When adding a new serialized field, apply the **OptionalFieldAttribute** attribute.  \n  \n-   When removing a **NonSerializedAttribute** attribute from a field (that was not serializable in a previous version), apply the **OptionalFieldAttribute** attribute.  \n  \n-   For all optional fields, set meaningful defaults using the serialization callbacks unless 0 or **null** as defaults are acceptable.  \n  \n To ensure that a type will be compatible with future serialization engines, follow these guidelines:  \n  \n-   Always set the **VersionAdded** property on the **OptionalFieldAttribute** attribute correctly.  \n  \n-   Avoid branched versioning.  \n  \n## See Also  \n <xref:System.SerializableAttribute>   \n <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>   \n <xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter>   \n <xref:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded%2A>   \n <xref:System.Runtime.Serialization.OptionalFieldAttribute>   \n <xref:System.Runtime.Serialization.OnDeserializingAttribute>   \n <xref:System.Runtime.Serialization.OnDeserializedAttribute>   \n <xref:System.Runtime.Serialization.OnDeserializingAttribute>   \n <xref:System.Runtime.Serialization.OnSerializedAttribute>   \n <xref:System.Runtime.Serialization.StreamingContext>   \n <xref:System.NonSerializedAttribute>   \n [Binary Serialization](../../../docs/framework/serialization/binary-serialization.md)","nodes":[{"pos":[4,648],"nodes":[{"content":"Version Tolerant Serialization | Microsoft Docs","nodes":[{"pos":[0,47],"content":"Version Tolerant Serialization | Microsoft Docs","nodes":[{"content":"Version Tolerant Serialization | Microsoft Docs","pos":[0,47]}]}],"pos":[6,56],"yaml":true}],"content":"title: \"Version Tolerant Serialization | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"version tolerant serialization\"\n  - \"serialization, custom serialization\"\n  - \"serialization, version tolerant\"\n  - \"serialization, controlling\"\n  - \"versions and serialization\"\n  - \"BinaryFormatter class, samples\"\n  - \"serialization, attributes\"\nms.assetid: bea0ffe3-2708-4a16-ac7d-e586ed6b8e8d\ncaps.latest.revision: 9\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[655,685],"content":"Version Tolerant Serialization","linkify":"Version Tolerant Serialization","nodes":[{"content":"Version Tolerant Serialization","pos":[0,30]}]},{"content":"In version 1.0 and 1.1 of the .NET Framework, creating serializable types that would be reusable from one version of an application to the next was problematic.","pos":[686,846]},{"content":"If a type was modified by adding extra fields, the following problems would occur:","pos":[847,929]},{"content":"Older versions of an application would throw exceptions when asked to deserialize new versions of the old type.","pos":[939,1050]},{"content":"Newer versions of an application would throw exceptions when deserializing older versions of a type with missing data.","pos":[1060,1178]},{"content":"Version Tolerant Serialization (VTS) is a set of features introduced in .NET Framework 2.0 that makes it easier, over time, to modify serializable types.","pos":[1185,1338]},{"content":"Specifically, the VTS features are enabled for classes to which the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute has been applied, including generic types.","pos":[1339,1495],"source":" Specifically, the VTS features are enabled for classes to which the <xref:System.SerializableAttribute> attribute has been applied, including generic types."},{"content":"VTS makes it possible to add new fields to those classes without breaking compatibility with other versions of the type.","pos":[1496,1616]},{"content":"For a working sample application, see <bpt id=\"p1\">[</bpt>Version Tolerant Serialization Technology Sample<ept id=\"p1\">](../../../docs/framework/serialization/version-tolerant-serialization-technology-sample.md)</ept>.","pos":[1617,1797],"source":" For a working sample application, see [Version Tolerant Serialization Technology Sample](../../../docs/framework/serialization/version-tolerant-serialization-technology-sample.md)."},{"content":"The VTS features are enabled when using the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.","pos":[1804,1918],"source":"The VTS features are enabled when using the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>."},{"content":"Additionally, all features except extraneous data tolerance are also enabled when using the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph>.","pos":[1919,2077],"source":" Additionally, all features except extraneous data tolerance are also enabled when using the <xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter>."},{"content":"For more information about using these classes for serialization, see <bpt id=\"p1\">[</bpt>Binary Serialization<ept id=\"p1\">](../../../docs/framework/serialization/binary-serialization.md)</ept>.","pos":[2078,2234],"source":" For more information about using these classes for serialization, see [Binary Serialization](../../../docs/framework/serialization/binary-serialization.md)."},{"pos":[2243,2255],"content":"Feature List","linkify":"Feature List","nodes":[{"content":"Feature List","pos":[0,12]}]},{"content":"The set of features includes the following:","pos":[2259,2302]},{"content":"Tolerance of extraneous or unexpected data.","pos":[2312,2355]},{"content":"This enables newer versions of the type to send data to older versions.","pos":[2356,2427]},{"content":"Tolerance of missing optional data.","pos":[2437,2472]},{"content":"This enables older versions to send data to newer versions.","pos":[2473,2532]},{"content":"Serialization callbacks.","pos":[2542,2566]},{"content":"This enables intelligent default value setting in cases where data is missing.","pos":[2567,2645]},{"content":"In addition, there is a feature for declaring when a new optional field has been added.","pos":[2652,2739]},{"content":"This is the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.OptionalFieldAttribute&gt;</ph> attribute.","pos":[2740,2912],"source":" This is the <xref:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded%2A> property of the <xref:System.Runtime.Serialization.OptionalFieldAttribute> attribute."},{"content":"These features are discussed in greater detail below.","pos":[2919,2972]},{"pos":[2981,3023],"content":"Tolerance of Extraneous or Unexpected Data","linkify":"Tolerance of Extraneous or Unexpected Data","nodes":[{"content":"Tolerance of Extraneous or Unexpected Data","pos":[0,42]}]},{"content":"In the past, during deserialization, any extraneous or unexpected data caused exceptions to be thrown.","pos":[3027,3129]},{"content":"With VTS, in the same situation, any extraneous or unexpected data is ignored instead of causing exceptions to be thrown.","pos":[3130,3251]},{"content":"This enables applications that use newer versions of a type (that is, a version that includes more fields) to send information to applications that expect older versions of the same type.","pos":[3252,3439]},{"pos":[3446,3625],"content":"In the following example, the extra data contained in the <ph id=\"ph1\">`CountryField`</ph> of version 2.0 of the <ph id=\"ph2\">`Address`</ph> class is ignored when an older application deserializes the newer version.","source":"In the following example, the extra data contained in the `CountryField` of version 2.0 of the `Address` class is ignored when an older application deserializes the newer version."},{"pos":[4422,4447],"content":"Tolerance of Missing Data","linkify":"Tolerance of Missing Data","nodes":[{"content":"Tolerance of Missing Data","pos":[0,25]}]},{"content":"Fields can be marked as optional by applying the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.OptionalFieldAttribute&gt;</ph> attribute to them.","pos":[4451,4577],"source":"Fields can be marked as optional by applying the <xref:System.Runtime.Serialization.OptionalFieldAttribute> attribute to them."},{"content":"During deserialization, if the optional data is missing, the serialization engine ignores the absence and does not throw an exception.","pos":[4578,4712]},{"content":"Thus, applications that expect older versions of a type can send data to applications that expect newer versions of the same type.","pos":[4713,4843]},{"content":"The following example shows version 2.0 of the <ph id=\"ph1\">`Address`</ph> class with the <ph id=\"ph2\">`CountryField`</ph> field marked as optional.","pos":[4850,4962],"source":"The following example shows version 2.0 of the `Address` class with the `CountryField` field marked as optional."},{"content":"If an older application sends version 1 to a newer application that expects version 2.0, the absence of the data is ignored.","pos":[4963,5087]},{"pos":[5470,5493],"content":"Serialization Callbacks","linkify":"Serialization Callbacks","nodes":[{"content":"Serialization Callbacks","pos":[0,23]}]},{"content":"Serialization callbacks are a mechanism that provides hooks into the serialization/deserialization process at four points.","pos":[5497,5619]},{"content":"Attribute","pos":[5626,5635]},{"content":"When the Associated Method is Called","pos":[5636,5672]},{"content":"Typical Use","pos":[5673,5684]},{"content":"Before deserialization.*","pos":[5831,5855]},{"content":"Initialize default values for optional fields.","pos":[5856,5902]},{"content":"After deserialization.","pos":[5967,5989]},{"content":"Fix optional field values based on contents of other fields.","pos":[5990,6050]},{"content":"Before serialization.","pos":[6114,6135]},{"content":"Prepare for serialization.","pos":[6136,6162]},{"content":"For example, create optional data structures.","pos":[6163,6208]},{"content":"After serialization.","pos":[6271,6291]},{"content":"Log serialization events.","pos":[6292,6317]},{"content":"<ph id=\"ph1\">\\*</ph> This callback is invoked before the deserialization constructor, if one is present.","pos":[6325,6411],"source":"\\* This callback is invoked before the deserialization constructor, if one is present."},{"pos":[6421,6436],"content":"Using Callbacks","linkify":"Using Callbacks","nodes":[{"content":"Using Callbacks","pos":[0,15]}]},{"content":"To use callbacks, apply the appropriate attribute to a method that accepts a <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> parameter.","pos":[6440,6580],"source":"To use callbacks, apply the appropriate attribute to a method that accepts a <xref:System.Runtime.Serialization.StreamingContext> parameter."},{"content":"Only one method per class can be marked with each of these attributes.","pos":[6581,6651]},{"content":"For example:","pos":[6652,6664]},{"content":"The intended use of these methods is for versioning.","pos":[6949,7001]},{"content":"During deserialization, an optional field may not be correctly initialized if the data for the field is missing.","pos":[7002,7114]},{"content":"This can be corrected by creating the method that assigns the correct value, then applying either the <bpt id=\"p1\">**</bpt>OnDeserializingAttribute<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>OnDeserializedAttribute<ept id=\"p2\">**</ept> attribute to the method.","pos":[7115,7301],"source":" This can be corrected by creating the method that assigns the correct value, then applying either the **OnDeserializingAttribute** or **OnDeserializedAttribute** attribute to the method."},{"content":"The following example shows the method in the context of a type.","pos":[7308,7372]},{"content":"If an earlier version of an application sends an instance of the <ph id=\"ph1\">`Address`</ph> class to a later version of the application, the <ph id=\"ph2\">`CountryField`</ph> field data will be missing.","pos":[7373,7539],"source":" If an earlier version of an application sends an instance of the `Address` class to a later version of the application, the `CountryField` field data will be missing."},{"content":"But after deserialization, the field will be set to a default value \"Japan.\"","pos":[7540,7616]},{"pos":[8278,8303],"content":"The VersionAdded Property","linkify":"The VersionAdded Property","nodes":[{"content":"The VersionAdded Property","pos":[0,25]}]},{"content":"The <bpt id=\"p1\">**</bpt>OptionalFieldAttribute<ept id=\"p1\">**</ept> has the <bpt id=\"p2\">**</bpt>VersionAdded<ept id=\"p2\">**</ept> property.","pos":[8307,8372],"source":"The **OptionalFieldAttribute** has the **VersionAdded** property."},{"content":"In version 2.0 of the .NET Framework, this is not used.","pos":[8373,8428]},{"content":"However, it is important to set this property correctly to ensure that the type will be compatible with future serialization engines.","pos":[8429,8562]},{"content":"The property indicates which version of a type a given field has been added.","pos":[8569,8645]},{"content":"It should be incremented by exactly one (starting at 2) every time the type is modified, as shown in the following example:","pos":[8646,8769]},{"pos":[10146,10165],"content":"SerializationBinder","linkify":"SerializationBinder","nodes":[{"content":"SerializationBinder","pos":[0,19]}]},{"content":"Some users may need to control which class to serialize and deserialize because a different version of the class is required on the server and client.","pos":[10169,10319]},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationBinder&gt;</ph> is an abstract class used to control the actual types used during serialization and deserialization.","pos":[10320,10476],"source":" <xref:System.Runtime.Serialization.SerializationBinder> is an abstract class used to control the actual types used during serialization and deserialization."},{"content":"To use this class, derive a class from <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationBinder&gt;</ph> and override the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.SerializationBinder.BindToName%2A&gt;</ph> System.String, System.String)?qualifyHint=False&amp;autoUpgrade=True and <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.SerializationBinder.BindToType%2A&gt;</ph> System.String)?qualifyHint=False&amp;autoUpgrade=True methods.","pos":[10478,10857],"source":"  To use this class, derive a class from <xref:System.Runtime.Serialization.SerializationBinder> and override the <xref:System.Runtime.Serialization.SerializationBinder.BindToName%2A> System.String, System.String)?qualifyHint=False&autoUpgrade=True and <xref:System.Runtime.Serialization.SerializationBinder.BindToType%2A> System.String)?qualifyHint=False&autoUpgrade=True methods."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Controlling Serialization and Deserialization with SerializationBinder<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/controlling-serialization-and-deserialization-with-serializationbinder.md)</ept>.","pos":[10858,11106],"source":"[!INCLUDE[crdefault](../../../includes/crdefault-md.md)][Controlling Serialization and Deserialization with SerializationBinder](../../../docs/framework/wcf/feature-details/controlling-serialization-and-deserialization-with-serializationbinder.md)."},{"pos":[11115,11129],"content":"Best Practices","linkify":"Best Practices","nodes":[{"content":"Best Practices","pos":[0,14]}]},{"content":"To ensure proper versioning behavior, follow these rules when modifying a type from version to version:","pos":[11133,11236]},{"content":"Never remove a serialized field.","pos":[11246,11278]},{"content":"Never apply the <ph id=\"ph1\">&lt;xref:System.NonSerializedAttribute&gt;</ph> attribute to a field if the attribute was not applied to the field in the previous version.","pos":[11288,11432],"source":"Never apply the <xref:System.NonSerializedAttribute> attribute to a field if the attribute was not applied to the field in the previous version."},{"content":"Never change the name or the type of a serialized field.","pos":[11442,11498]},{"pos":[11508,11591],"content":"When adding a new serialized field, apply the <bpt id=\"p1\">**</bpt>OptionalFieldAttribute<ept id=\"p1\">**</ept> attribute.","source":"When adding a new serialized field, apply the **OptionalFieldAttribute** attribute."},{"pos":[11601,11765],"content":"When removing a <bpt id=\"p1\">**</bpt>NonSerializedAttribute<ept id=\"p1\">**</ept> attribute from a field (that was not serializable in a previous version), apply the <bpt id=\"p2\">**</bpt>OptionalFieldAttribute<ept id=\"p2\">**</ept> attribute.","source":"When removing a **NonSerializedAttribute** attribute from a field (that was not serializable in a previous version), apply the **OptionalFieldAttribute** attribute."},{"pos":[11775,11906],"content":"For all optional fields, set meaningful defaults using the serialization callbacks unless 0 or <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept> as defaults are acceptable.","source":"For all optional fields, set meaningful defaults using the serialization callbacks unless 0 or **null** as defaults are acceptable."},{"content":"To ensure that a type will be compatible with future serialization engines, follow these guidelines:","pos":[11913,12013]},{"pos":[12023,12118],"content":"Always set the <bpt id=\"p1\">**</bpt>VersionAdded<ept id=\"p1\">**</ept> property on the <bpt id=\"p2\">**</bpt>OptionalFieldAttribute<ept id=\"p2\">**</ept> attribute correctly.","source":"Always set the **VersionAdded** property on the **OptionalFieldAttribute** attribute correctly."},{"content":"Avoid branched versioning.","pos":[12128,12154]},{"pos":[12163,12171],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph>","pos":[12175,12210],"source":"<xref:System.SerializableAttribute> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>","pos":[12215,12284],"source":"<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph>","pos":[12289,12354],"source":"<xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded%2A&gt;</ph>","pos":[12359,12433],"source":"<xref:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.OptionalFieldAttribute&gt;</ph>","pos":[12438,12496],"source":"<xref:System.Runtime.Serialization.OptionalFieldAttribute> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.OnDeserializingAttribute&gt;</ph>","pos":[12501,12561],"source":"<xref:System.Runtime.Serialization.OnDeserializingAttribute> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.OnDeserializedAttribute&gt;</ph>","pos":[12566,12625],"source":"<xref:System.Runtime.Serialization.OnDeserializedAttribute> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.OnDeserializingAttribute&gt;</ph>","pos":[12630,12690],"source":"<xref:System.Runtime.Serialization.OnDeserializingAttribute> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.OnSerializedAttribute&gt;</ph>","pos":[12695,12752],"source":"<xref:System.Runtime.Serialization.OnSerializedAttribute> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph>","pos":[12757,12809],"source":"<xref:System.Runtime.Serialization.StreamingContext> "},{"content":"<ph id=\"ph1\">&lt;xref:System.NonSerializedAttribute&gt;</ph>","pos":[12814,12850],"source":"<xref:System.NonSerializedAttribute> "},{"content":"<bpt id=\"p1\">[</bpt>Binary Serialization<ept id=\"p1\">](../../../docs/framework/serialization/binary-serialization.md)</ept>","pos":[12855,12940],"source":"[Binary Serialization](../../../docs/framework/serialization/binary-serialization.md)"}]}