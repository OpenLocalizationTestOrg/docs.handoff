{"content":"---\ntitle: \"How to: Speed Up Small Loop Bodies | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"parallel loops, how to speed up\"\nms.assetid: c7a66677-cb59-4cbf-969a-d2e8fc61a6ce\ncaps.latest.revision: 18\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Speed Up Small Loop Bodies\nWhen a <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> loop has a small body, it might perform more slowly than the equivalent sequential loop, such as the [for](~/docs/csharp/language-reference/keywords/for.md) loop in C# and the [For](http://msdn.microsoft.com/en-us/c470a263-9b49-4308-8fd6-8592b84a7980) loop in Visual Basic. Slower performance is caused by the overhead involved in partitioning the data and the cost of invoking a delegate on each loop iteration. To address such scenarios, the <xref:System.Collections.Concurrent.Partitioner> class provides the <xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName> method, which enables you to provide a sequential loop for the delegate body, so that the delegate is invoked only once per partition, instead of once per iteration. For more information, see [Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).  \n  \n## Example  \n [!code-csharp[TPL_Partitioners#01](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioner01.cs#01)]\n [!code-vb[TPL_Partitioners#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_partitioners/vb/partitionercreate01.vb#01)]  \n  \n The approach demonstrated in this example is useful when the loop performs a minimal amount of work. As the work becomes more computationally expensive, you will probably get the same or better performance by using a <xref:System.Threading.Tasks.Parallel.For%2A> or <xref:System.Threading.Tasks.Parallel.ForEach%2A> loop with the default partitioner.  \n  \n## See Also  \n [Data Parallelism](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)   \n [Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)   \n [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)   \n [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)","nodes":[{"pos":[4,408],"nodes":[{"content":"How to: Speed Up Small Loop Bodies | Microsoft Docs","nodes":[{"pos":[0,51],"content":"How to: Speed Up Small Loop Bodies | Microsoft Docs","nodes":[{"content":"How to: Speed Up Small Loop Bodies | Microsoft Docs","pos":[0,51]}]}],"pos":[6,60],"yaml":true}],"content":"title: \"How to: Speed Up Small Loop Bodies | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"parallel loops, how to speed up\"\nms.assetid: c7a66677-cb59-4cbf-969a-d2e8fc61a6ce\ncaps.latest.revision: 18\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[415,449],"content":"How to: Speed Up Small Loop Bodies","linkify":"How to: Speed Up Small Loop Bodies","nodes":[{"content":"How to: Speed Up Small Loop Bodies","pos":[0,34]}]},{"content":"When a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> loop has a small body, it might perform more slowly than the equivalent sequential loop, such as the <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/for.md)</ept> loop in C# and the <bpt id=\"p2\">[</bpt>For<ept id=\"p2\">](http://msdn.microsoft.com/en-us/c470a263-9b49-4308-8fd6-8592b84a7980)</ept> loop in Visual Basic.","pos":[450,801],"source":"When a <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> loop has a small body, it might perform more slowly than the equivalent sequential loop, such as the [for](~/docs/csharp/language-reference/keywords/for.md) loop in C# and the [For](http://msdn.microsoft.com/en-us/c470a263-9b49-4308-8fd6-8592b84a7980) loop in Visual Basic."},{"content":"Slower performance is caused by the overhead involved in partitioning the data and the cost of invoking a delegate on each loop iteration.","pos":[802,940]},{"content":"To address such scenarios, the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.Partitioner&gt;</ph> class provides the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName&gt;</ph> method, which enables you to provide a sequential loop for the delegate body, so that the delegate is invoked only once per partition, instead of once per iteration.","pos":[941,1289],"source":" To address such scenarios, the <xref:System.Collections.Concurrent.Partitioner> class provides the <xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName> method, which enables you to provide a sequential loop for the delegate body, so that the delegate is invoked only once per partition, instead of once per iteration."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","pos":[1290,1442],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."},{"pos":[1451,1458],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1462,1723],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPL_Partitioners#01<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioner01.cs#01)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPL_Partitioners#01<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_partitioners/vb/partitionercreate01.vb#01)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[TPL_Partitioners#01](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioner01.cs#01)]\n [!code-vb[TPL_Partitioners#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_partitioners/vb/partitionercreate01.vb#01)]"},{"content":"The approach demonstrated in this example is useful when the loop performs a minimal amount of work.","pos":[1730,1830]},{"content":"As the work becomes more computationally expensive, you will probably get the same or better performance by using a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> loop with the default partitioner.","pos":[1831,2080],"source":" As the work becomes more computationally expensive, you will probably get the same or better performance by using a <xref:System.Threading.Tasks.Parallel.For%2A> or <xref:System.Threading.Tasks.Parallel.ForEach%2A> loop with the default partitioner."},{"pos":[2089,2097],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Data Parallelism<ept id=\"p1\">](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[2101,2207],"source":"[Data Parallelism](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md) "},{"content":"<bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept><ph id=\"ph1\"> </ph>","pos":[2211,2337],"source":"[Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) "},{"content":"<bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept><ph id=\"ph1\"> </ph>","pos":[2341,2425],"source":"[Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7) "},{"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions in PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>","pos":[2429,2550],"source":"[Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)"}]}