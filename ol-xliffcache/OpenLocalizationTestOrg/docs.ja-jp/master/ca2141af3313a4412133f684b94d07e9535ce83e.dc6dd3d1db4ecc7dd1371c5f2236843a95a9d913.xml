{"content":"---\ntitle: \"How to: Enable Thread-Tracking Mode in SpinLock | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"SpinLock, how to enable thread-tracking\"\nms.assetid: 62ee2e68-0bdd-4869-afc9-f0a57a11ae01\ncaps.latest.revision: 8\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Enable Thread-Tracking Mode in SpinLock\n<xref:System.Threading.SpinLock?displayProperty=fullName> is a low-level mutual exclusion lock that you can use for scenarios that have very short wait times. <xref:System.Threading.SpinLock> is not re-entrant. After a thread enters the lock, it must exit the lock correctly before it can enter again. Typically, any attempt to re-enter the lock would cause deadlock, and deadlocks can be very difficult to debug. As an aid to development, <xref:System.Threading.SpinLock?displayProperty=fullName> supports a thread-tracking mode that causes an exception to be thrown when a thread attempts to re-enter a lock that it already holds. This lets you more easily locate the point at which the lock was not exited correctly. You can turn on thread-tracking mode by using the <xref:System.Threading.SpinLock> constructor that takes a Boolean input parameter, and passing in an argument of `true`. After you complete the development and testing phases, turn off thread-tracking mode for better performance.  \n  \n## Example  \n The following example demonstrates thread-tracking mode. The lines that correctly exit the lock are commented out to simulate a coding error that causes one of the following results:  \n  \n-   An exception is thrown if the <xref:System.Threading.SpinLock> was created by using an argument of `true` (`True` in Visual Basic).  \n  \n-   Deadlock if the <xref:System.Threading.SpinLock> was created by using an argument of `false` (`False` in Visual Basic).  \n  \n [!code-csharp[CDS_SpinLock#01](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinlock/cs/spinlockdemo.cs#01)]\n [!code-vb[CDS_SpinLock#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinlock/vb/spinlock_threadtracking.vb#01)]  \n  \n## See Also  \n [SpinLock](../../../docs/standard/threading/spinlock.md)","nodes":[{"pos":[4,428],"embed":true,"restype":"x-metadata","content":"title: \"How to: Enable Thread-Tracking Mode in SpinLock | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"SpinLock, how to enable thread-tracking\"\nms.assetid: 62ee2e68-0bdd-4869-afc9-f0a57a11ae01\ncaps.latest.revision: 8\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Enable Thread-Tracking Mode in SpinLock | Microsoft Docs","nodes":[{"pos":[0,64],"content":"How to: Enable Thread-Tracking Mode in SpinLock | Microsoft Docs","nodes":[{"content":"How to: Enable Thread-Tracking Mode in SpinLock | Microsoft Docs","pos":[0,64]}]}],"path":["title"]}],"yml":true},{"pos":[435,482],"content":"How to: Enable Thread-Tracking Mode in SpinLock","linkify":"How to: Enable Thread-Tracking Mode in SpinLock","nodes":[{"content":"How to: Enable Thread-Tracking Mode in SpinLock","pos":[0,47]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.SpinLock?displayProperty=fullName&gt;</ph> is a low-level mutual exclusion lock that you can use for scenarios that have very short wait times.","pos":[483,641],"source":"<xref:System.Threading.SpinLock?displayProperty=fullName> is a low-level mutual exclusion lock that you can use for scenarios that have very short wait times."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> is not re-entrant.","pos":[642,693],"source":" <xref:System.Threading.SpinLock> is not re-entrant."},{"content":"After a thread enters the lock, it must exit the lock correctly before it can enter again.","pos":[694,784]},{"content":"Typically, any attempt to re-enter the lock would cause deadlock, and deadlocks can be very difficult to debug.","pos":[785,896]},{"content":"As an aid to development, <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock?displayProperty=fullName&gt;</ph> supports a thread-tracking mode that causes an exception to be thrown when a thread attempts to re-enter a lock that it already holds.","pos":[897,1115],"source":" As an aid to development, <xref:System.Threading.SpinLock?displayProperty=fullName> supports a thread-tracking mode that causes an exception to be thrown when a thread attempts to re-enter a lock that it already holds."},{"content":"This lets you more easily locate the point at which the lock was not exited correctly.","pos":[1116,1202]},{"content":"You can turn on thread-tracking mode by using the <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> constructor that takes a Boolean input parameter, and passing in an argument of <ph id=\"ph2\">`true`</ph>.","pos":[1203,1373],"source":" You can turn on thread-tracking mode by using the <xref:System.Threading.SpinLock> constructor that takes a Boolean input parameter, and passing in an argument of `true`."},{"content":"After you complete the development and testing phases, turn off thread-tracking mode for better performance.","pos":[1374,1482]},{"pos":[1491,1498],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates thread-tracking mode.","pos":[1502,1558]},{"content":"The lines that correctly exit the lock are commented out to simulate a coding error that causes one of the following results:","pos":[1559,1684]},{"pos":[1694,1825],"content":"An exception is thrown if the <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> was created by using an argument of <ph id=\"ph2\">`true`</ph> (<ph id=\"ph3\">`True`</ph> in Visual Basic).","source":"An exception is thrown if the <xref:System.Threading.SpinLock> was created by using an argument of `true` (`True` in Visual Basic)."},{"pos":[1835,1954],"content":"Deadlock if the <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> was created by using an argument of <ph id=\"ph2\">`false`</ph> (<ph id=\"ph3\">`False`</ph> in Visual Basic).","source":"Deadlock if the <xref:System.Threading.SpinLock> was created by using an argument of `false` (`False` in Visual Basic)."},{"pos":[1961,2209],"content":"[!code-csharp[CDS_SpinLock#01](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinlock/cs/spinlockdemo.cs#01)]\n[!code-vb[CDS_SpinLock#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinlock/vb/spinlock_threadtracking.vb#01)]","leadings":[""," "],"nodes":[]},{"pos":[2218,2226],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2230,2286],"content":"<bpt id=\"p1\">[</bpt>SpinLock<ept id=\"p1\">](../../../docs/standard/threading/spinlock.md)</ept>","source":"[SpinLock](../../../docs/standard/threading/spinlock.md)"}]}