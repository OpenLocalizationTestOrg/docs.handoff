{"content":"---\ntitle: \"Option Strict On disallows implicit conversions from &#39;&lt;type1&gt;&#39; to &#39;&lt;type2&gt;&#39; | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"bc30512\"\n  - \"vbc30512\"\nhelpviewer_keywords: \n  - \"BC30512\"\nms.assetid: b9756d48-05fa-4027-8a80-b4a0ef92099d\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Option Strict On disallows implicit conversions from &#39;&lt;type1&gt;&#39; to &#39;&lt;type2&gt;&#39;\nYou have tried to convert a type to another type that may not be able to contain the value, such as a `Long` to an `Integer`, while the type checking switch ([Option Strict Statement](../../visual-basic/language-reference/statements/option-strict-statement.md)) is set to `On`.  \n  \n This type of conversion is called a *narrowing conversion*, and it is possible for it to fail at run time. For this reason, `Option Strict On` disallows implicit narrowing conversions.  \n  \n **Error ID:** BC30512  \n  \n## To correct this error  \n  \n1.  Determine whether a conversion of any type exists from `<type1>` to `<type2>`. If both are [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] elementary types, or if both are instances of classes, you can usually make this determination by consulting the table in [Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md).  \n  \n2.  If only a narrowing conversion exists from `<type1>` to `<type2>`, you should use explicit casting. The [CType Function](../../visual-basic/language-reference/functions/ctype-function.md) and [DirectCast Operator](../../visual-basic/language-reference/operators/directcast-operator.md) keywords throw a run-time exception if the conversion fails. The [TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md) keyword applies only to reference types and returns [Nothing](../../visual-basic/language-reference/nothing.md) if the conversion fails.  \n  \n3.  If a narrowing conversion exists and your program can tolerate a run-time failure, or you are confident that a run-time failure is not possible, you can specify `Option Strict Off` at the beginning of your source code. But you should still enclose the conversion in a [Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md) block to avoid unexpected results or early termination of your program.  \n  \n4.  If no conversion exists from `<type1>` to `<type2>`, you must re-evaluate your program logic. You might be able to write code that can assign values to `<type2>` corresponding to anticipated values of `<type1>`.  \n  \n5.  If no conversion exists from `<type1>` to `<type2>` and one of the types is a class or structure you have defined, you might be able to define a conversion operator from that type to or from the other type. For more information, see [How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md).  \n  \n6.  In all cases and as a general guideline, you should avoid using narrowing conversions unless you can trap failures in a `Catch` block and deal with them effectively.  \n  \n## See Also  \n [Option Strict Statement](../../visual-basic/language-reference/statements/option-strict-statement.md)   \n [Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)   \n [CType Function](../../visual-basic/language-reference/functions/ctype-function.md)   \n [DirectCast Operator](../../visual-basic/language-reference/operators/directcast-operator.md)   \n [TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md)   \n [Nothing](../../visual-basic/language-reference/nothing.md)   \n [Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)   \n [How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)","nodes":[{"pos":[12,132],"content":"Option Strict On disallows implicit conversions from &#39;&lt;type1&gt;&#39; to &#39;&lt;type2&gt;&#39; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Option Strict On disallows implicit conversions from &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>type1<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; to &amp;#39;<ph id=\"ph3\">&amp;lt;</ph>type2<ph id=\"ph4\">&amp;gt;</ph>&amp;#39; | Microsoft Docs","pos":[0,120],"source":"Option Strict On disallows implicit conversions from &#39;&lt;type1&gt;&#39; to &#39;&lt;type2&gt;&#39; | Microsoft Docs"}]},{"pos":[649,752],"content":"Option Strict On disallows implicit conversions from &#39;&lt;type1&gt;&#39; to &#39;&lt;type2&gt;&#39;","linkify":"Option Strict On disallows implicit conversions from &#39;&lt;type1&gt;&#39; to &#39;&lt;type2&gt;&#39;","nodes":[{"content":"Option Strict On disallows implicit conversions from &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>type1<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; to &amp;#39;<ph id=\"ph3\">&amp;lt;</ph>type2<ph id=\"ph4\">&amp;gt;</ph>&amp;#39;","pos":[0,103],"source":"Option Strict On disallows implicit conversions from &#39;&lt;type1&gt;&#39; to &#39;&lt;type2&gt;&#39;"}]},{"pos":[753,1030],"content":"You have tried to convert a type to another type that may not be able to contain the value, such as a <ph id=\"ph1\">`Long`</ph> to an <ph id=\"ph2\">`Integer`</ph>, while the type checking switch (<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>) is set to <ph id=\"ph3\">`On`</ph>.","source":"You have tried to convert a type to another type that may not be able to contain the value, such as a `Long` to an `Integer`, while the type checking switch ([Option Strict Statement](../../visual-basic/language-reference/statements/option-strict-statement.md)) is set to `On`."},{"content":"This type of conversion is called a <bpt id=\"p1\">*</bpt>narrowing conversion<ept id=\"p1\">*</ept>, and it is possible for it to fail at run time.","pos":[1037,1143],"source":"This type of conversion is called a *narrowing conversion*, and it is possible for it to fail at run time."},{"content":"For this reason, <ph id=\"ph1\">`Option Strict On`</ph> disallows implicit narrowing conversions.","pos":[1144,1221],"source":" For this reason, `Option Strict On` disallows implicit narrowing conversions."},{"pos":[1228,1249],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC30512","source":"**Error ID:** BC30512"},{"pos":[1258,1279],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Determine whether a conversion of any type exists from <ph id=\"ph1\">`&lt;type1&gt;`</ph> to <ph id=\"ph2\">`&lt;type2&gt;`</ph>.","pos":[1289,1367],"source":"Determine whether a conversion of any type exists from `<type1>` to `<type2>`."},{"content":"If both are <ph id=\"ph1\">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> elementary types, or if both are instances of classes, you can usually make this determination by consulting the table in <bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.","pos":[1368,1731],"source":" If both are [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] elementary types, or if both are instances of classes, you can usually make this determination by consulting the table in [Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)."},{"content":"If only a narrowing conversion exists from <ph id=\"ph1\">`&lt;type1&gt;`</ph> to <ph id=\"ph2\">`&lt;type2&gt;`</ph>, you should use explicit casting.","pos":[1741,1840],"source":"If only a narrowing conversion exists from `<type1>` to `<type2>`, you should use explicit casting."},{"content":"The <bpt id=\"p1\">[</bpt>CType Function<ept id=\"p1\">](../../visual-basic/language-reference/functions/ctype-function.md)</ept> and <bpt id=\"p2\">[</bpt>DirectCast Operator<ept id=\"p2\">](../../visual-basic/language-reference/operators/directcast-operator.md)</ept> keywords throw a run-time exception if the conversion fails.","pos":[1841,2087],"source":" The [CType Function](../../visual-basic/language-reference/functions/ctype-function.md) and [DirectCast Operator](../../visual-basic/language-reference/operators/directcast-operator.md) keywords throw a run-time exception if the conversion fails."},{"content":"The <bpt id=\"p1\">[</bpt>TryCast Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/trycast-operator.md)</ept> keyword applies only to reference types and returns <bpt id=\"p2\">[</bpt>Nothing<ept id=\"p2\">](../../visual-basic/language-reference/nothing.md)</ept> if the conversion fails.","pos":[2088,2316],"source":" The [TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md) keyword applies only to reference types and returns [Nothing](../../visual-basic/language-reference/nothing.md) if the conversion fails."},{"content":"If a narrowing conversion exists and your program can tolerate a run-time failure, or you are confident that a run-time failure is not possible, you can specify <ph id=\"ph1\">`Option Strict Off`</ph> at the beginning of your source code.","pos":[2326,2544],"source":"If a narrowing conversion exists and your program can tolerate a run-time failure, or you are confident that a run-time failure is not possible, you can specify `Option Strict Off` at the beginning of your source code."},{"content":"But you should still enclose the conversion in a <bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept> block to avoid unexpected results or early termination of your program.","pos":[2545,2780],"source":" But you should still enclose the conversion in a [Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md) block to avoid unexpected results or early termination of your program."},{"content":"If no conversion exists from <ph id=\"ph1\">`&lt;type1&gt;`</ph> to <ph id=\"ph2\">`&lt;type2&gt;`</ph>, you must re-evaluate your program logic.","pos":[2790,2883],"source":"If no conversion exists from `<type1>` to `<type2>`, you must re-evaluate your program logic."},{"content":"You might be able to write code that can assign values to <ph id=\"ph1\">`&lt;type2&gt;`</ph> corresponding to anticipated values of <ph id=\"ph2\">`&lt;type1&gt;`</ph>.","pos":[2884,3001],"source":" You might be able to write code that can assign values to `<type2>` corresponding to anticipated values of `<type1>`."},{"content":"If no conversion exists from <ph id=\"ph1\">`&lt;type1&gt;`</ph> to <ph id=\"ph2\">`&lt;type2&gt;`</ph> and one of the types is a class or structure you have defined, you might be able to define a conversion operator from that type to or from the other type.","pos":[3011,3217],"source":"If no conversion exists from `<type1>` to `<type2>` and one of the types is a class or structure you have defined, you might be able to define a conversion operator from that type to or from the other type."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>.","pos":[3218,3389],"source":" For more information, see [How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)."},{"pos":[3399,3564],"content":"In all cases and as a general guideline, you should avoid using narrowing conversions unless you can trap failures in a <ph id=\"ph1\">`Catch`</ph> block and deal with them effectively.","source":"In all cases and as a general guideline, you should avoid using narrowing conversions unless you can trap failures in a `Catch` block and deal with them effectively."},{"pos":[3573,3581],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3585,3688],"source":"[Option Strict Statement](../../visual-basic/language-reference/statements/option-strict-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3691,3834],"source":" [Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CType Function<ept id=\"p1\">](../../visual-basic/language-reference/functions/ctype-function.md)</ept><ph id=\"ph1\"> </ph>","pos":[3837,3922],"source":" [CType Function](../../visual-basic/language-reference/functions/ctype-function.md) "},{"content":"<bpt id=\"p1\"> [</bpt>DirectCast Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/directcast-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[3925,4020],"source":" [DirectCast Operator](../../visual-basic/language-reference/operators/directcast-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>TryCast Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/trycast-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[4023,4112],"source":" [TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Nothing<ept id=\"p1\">](../../visual-basic/language-reference/nothing.md)</ept><ph id=\"ph1\"> </ph>","pos":[4115,4176],"source":" [Nothing](../../visual-basic/language-reference/nothing.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[4179,4295],"source":" [Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>","pos":[4298,4443],"source":" [How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)"}]}