<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="x-name-directive.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d25c8500250411083e9fb6b33b3f743e5cd103c0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\x-name-directive.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3e0fadb922a97d7e6afcbbacc6b2678101a85bd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1212c0d9a38a7be4e287e94196ace26fbdf76c16</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>x:Name Directive</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>x:Name Directive</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Uniquely identifies XAML-defined elements in a XAML namescope.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XAML namescopes and their uniqueness models can be applied to the instantiated objects, when frameworks provide APIs or implement behaviors that access the XAML-created object graph at run time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A string that conforms to the restrictions of the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](xamlname-grammar.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`x:Name`</ph> is applied to a framework's backing programming model, the name is equivalent to the variable that holds an object reference or an instance as returned by a constructor.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The value of an <ph id="ph1">`x:Name`</ph> directive usage must be unique within a XAML namescope.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By default when used by .NET Framework XAML Services API, the primary XAML namescope is defined at the XAML root element of a single XAML production, and encompasses the elements that are contained in that XAML production.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Additional discrete XAML namescopes that might occur within a single XAML production can be defined by frameworks to address specific scenarios.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, in WPF, new XAML namescopes are defined and created by any template that is also defined on that XAML production.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about XAML namescopes (written for WPF but relevant for many XAML namescope concepts), see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](../wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In general, <ph id="ph1">`x:Name`</ph> should not be applied in situations that also use <ph id="ph2">`x:Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>XAML implementations by specific existing frameworks have introduced substitution concepts between <ph id="ph1">`x:Key`</ph> and <ph id="ph2">`x:Name`</ph>, but that is not a recommended practice.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>.NET Framework XAML Services does not support such substitution concepts when handling name/key information such as <ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Markup.DictionaryKeyPropertyAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Rules for permittance of <ph id="ph1">`x:Name`</ph> as well as the name uniqueness enforcement are potentially defined by specific implementing frameworks.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, to be usable with .NET Framework XAML Services, the framework definitions of XAML namescope uniqueness should be consistent with the definition of <ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> information in this documentation, and should use the same rules regarding where the information is applied.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../includes/tlasharptla-winclient-md.md)]</ph> implementation divides various markup elements into separate <ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph> ranges, such as resource dictionaries, the logical tree created by the page-level XAML, templates, and other deferred content, and then enforces XAML name uniqueness within each of those XAML namescopes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For custom types that use .NET Framework XAML Services XAML object writers, a property that maps to <ph id="ph1">`x:Name`</ph> on a type can be established or changed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You define this behavior by referencing the name of the property to map with the <ph id="ph1">&lt;xref:System.Windows.Markup.RuntimeNamePropertyAttribute&gt;</ph> in the type definition code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.RuntimeNamePropertyAttribute&gt;</ph> is a type-level attribute.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Using.NET Framework XAML Services, the backing logic for XAML namescope support can be defined in a framework-neutral way by implementing the <ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Under the standard build configuration for a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> application that uses XAML, partial classes, and code-behind, the specified <ph id="ph2">`x:Name`</ph> becomes the name of a field that is created in the underlying code when <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> is processed by a markup compilation build task, and that field holds a reference to the object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By default, the created field is internal.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can change field access by specifying the <bpt id="p1">[</bpt>x:FieldModifier attribute<ept id="p1">](x-fieldmodifier-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In WPF and Silverlight, the sequence is that the markup compile defines and names the field in a partial class, but the value is initially empty.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Then, a generated method named <ph id="ph1">`InitializeComponent`</ph> is called from within the class constructor.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InitializeComponent`</ph> consists of <ph id="ph2">`FindName`</ph> calls using each of the <ph id="ph3">`x:Name`</ph> values that exist in the XAML-defined part of the partial class as input strings.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The return values are then assigned to the like-named field reference to fill the field values with objects that were created from XAML parsing.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The execution of <ph id="ph1">`InitializeComponent`</ph> make it possible to reference the run time object graph using the <ph id="ph2">`x:Name`</ph> / field name directly, rather than having to call <ph id="ph3">`FindName`</ph> explicitly any time you need a reference to a XAML-defined object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For a WPF application that uses the Microsoft Visual Basic targets and includes XAML files with <ph id="ph1">`Page`</ph> build action, a separate reference property is created during compilation that adds the <ph id="ph2">`WithEvents`</ph> keyword to all elements that have an <ph id="ph3">`x:Name`</ph>, to support <ph id="ph4">`Handles`</ph> syntax for event handler delegates.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This property is always public.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Visual Basic and WPF Event Handling<ept id="p1">](../wpf/advanced/visual-basic-and-wpf-event-handling.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Name`</ph> is used by the WPF XAML processor to register a name into a XAML namescope at load time, even for cases where the page is not markup-compiled by build actions (for example, loose XAML of a resource dictionary).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>One reason for this behavior is because the <ph id="ph1">`x:Name`</ph> is potentially needed for <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph> binding.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>As mentioned previously, <ph id="ph1">`x:Name`</ph> (or <ph id="ph2">`Name`</ph>) should not be applied in situations that also use <ph id="ph3">`x:Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> has a special behavior of defining itself as a XAML namescope but returning Not Implemented or null values for <ph id="ph3">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> APIs as a way to enforce this behavior.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the WPF XAML parser encounters <ph id="ph1">`Name`</ph> or <ph id="ph2">`x:Name`</ph> in a XAML-defined <ph id="ph3">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, the name is not added to any XAML namescope.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Attempting to find that name from any XAML namescope and the <ph id="ph1">`FindName`</ph> methods will not return valid results.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>x:Name and Name</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Many WPF application scenarios can avoid any use of the <ph id="ph1">`x:Name`</ph> attribute, because the <ph id="ph2">`Name`</ph> dependency property as specified in the default XAML namespace for several of the important base classes such as <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> satisfies this same purpose.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>There are still some common XAML and WPF scenarios where code access to an element with no <ph id="ph1">`Name`</ph> property at the framework level is important.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, certain animation and storyboard support classes do not support a <ph id="ph1">`Name`</ph> property, but they often need to be referenced in code in order to control the animation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You should specify <ph id="ph1">`x:Name`</ph> as an attribute on timelines and transforms that are created in XAML, if you intend to reference them from code later.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> is available as a property on the class, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> and <ph id="ph3">`x:Name`</ph> can be used interchangeably as attributes, but a parse exception will result if both are specified on the same element.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the XAML is markup compiled, the exception will occur on the markup compile, otherwise it occurs on load.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> can be set using XAML attribute syntax, and in code using <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>; note however that setting the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property in code does not create the representative field reference within the XAML namescope in most circumstances where the XAML is already loaded.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Instead of attempting to set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> in code, use <ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph> methods from code, against the appropriate namescope.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> can also be set using property element syntax with inner text, but that is uncommon.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In contrast, <ph id="ph1">`x:Name`</ph> cannot be set in XAML property element syntax, or in code using <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>; it can only be set using attribute syntax on objects because it is a directive.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Silverlight Usage Notes</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Name`</ph> for Silverlight is documented separately.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Namespace (x:) Language Features (Silverlight)<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=199081)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](../wpf/advanced/trees-in-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>