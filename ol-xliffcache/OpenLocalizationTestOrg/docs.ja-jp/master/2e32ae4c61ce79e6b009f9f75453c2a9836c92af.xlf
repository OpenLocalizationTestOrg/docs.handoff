<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e32ae4c61ce79e6b009f9f75453c2a9836c92af</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-stream-xml-fragments-from-an-xmlreader.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c8d85f27f3d0e063b90bfe3786c29c39b76f6ce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0d00d62ca58b947479d3556dff9af95f0b82b79</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Stream XML Fragments from an XmlReader (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Stream XML Fragments from an XmlReader (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you have to process large XML files, it might not be feasible to load the whole XML tree into memory.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic shows how to stream fragments using an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>One of the most effective ways to use an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to read <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects is to write your own custom axis method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An axis method typically returns a collection such as <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, as shown in the example in this topic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the custom axis method, after you create the XML fragment by calling the <ph id="ph1">&lt;xref:System.Xml.Linq.XNode.ReadFrom%2A&gt;</ph> method, return the collection using <ph id="ph2">`yield return`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This provides deferred execution semantics to your custom axis method.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you create an XML tree from an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object, the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> must be positioned on an element.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XNode.ReadFrom%2A&gt;</ph> method does not return until it has read the close tag of the element.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you want to create a partial tree, you can instantiate an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, position the reader on the node that you want to convert to an <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> tree, and then create the <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The topic <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept> contains information and an example on how to stream a more complex document.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The topic <bpt id="p1">[</bpt>How to: Perform Streaming Transform of Large XML Documents (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md)</ept> contains an example of using LINQ to XML to transform extremely large XML documents while maintaining a small memory footprint.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This example creates a custom axis method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can query it by using a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The custom axis method, <ph id="ph1">`StreamRootChildDoc`</ph>, is a method that is designed specifically to read a document that has a repeating <ph id="ph2">`Child`</ph> element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this example, the source document is very small.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, even if there were millions of <ph id="ph1">`Child`</ph> elements, this example would still have a small memory footprint.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Implementing IEnumerable(Of T) in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/control-flow/walkthrough-implementing-ienumerable-of-t.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/parsing-xml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>