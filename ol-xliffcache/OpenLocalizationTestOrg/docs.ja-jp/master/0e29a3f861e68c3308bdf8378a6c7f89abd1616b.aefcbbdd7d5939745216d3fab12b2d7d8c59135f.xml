{"content":"---\ntitle: \"invalidVariant MDA | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MDAs (managed debugging assistants), invalid variant\"\n  - \"VARIANT type errors\"\n  - \"InvalidVariant MDA\"\n  - \"invalid VARIANT types\"\n  - \"managed debugging assistants (MDAs), invalid variant\"\nms.assetid: d273e070-d1b1-4a53-a9c7-7af837b04a3d\ncaps.latest.revision: 11\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# invalidVariant MDA\nThe `invalidVariant` managed debugging assistant (MDA) is activated when an invalid `VARIANT` structure is encountered during a call from native or unmanaged code to managed code.  \n  \n## Symptoms  \n Unexpected behavior during a transition between native and managed code involving the marshaling of a `VARIANT` to an object.  \n  \n## Cause  \n Native code is passing a malformed `VARIANT` structure to managed code.  The runtime attempts to marshal this `VARIANT` to an object and activates the MDA if the `VARIANT` is not valid. Examples of invalid `VARIANT`S include a `VARIANT` with `VARTYPE` VT_EMPTY &#124; VT_BYREF or a `VARIANT` with `VARTYPE` VT_VARIANT.  \n  \n## Resolution  \n The native or unmanaged code passing the `VARIANT` must ensure that the `VARIANT` is correctly formed and initialized.  \n  \n## Effect on the Runtime  \n The MDA has no effect on the runtime's behavior.  \n  \n## Output  \n An MDA message indicating that the runtime detected an invalid `VARIANT` passed to managed code by an unmanaged module.  \n  \n## Configuration  \n  \n```  \n<mdaConfig>  \n  <assistants>  \n    <invalidVariant />  \n  </assistants>  \n</mdaConfig>  \n```  \n  \n## See Also  \n <xref:System.Runtime.InteropServices.MarshalAsAttribute>   \n [Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)   \n [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)","nodes":[{"pos":[4,617],"embed":true,"restype":"x-metadata","content":"title: \"invalidVariant MDA | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MDAs (managed debugging assistants), invalid variant\"\n  - \"VARIANT type errors\"\n  - \"InvalidVariant MDA\"\n  - \"invalid VARIANT types\"\n  - \"managed debugging assistants (MDAs), invalid variant\"\nms.assetid: d273e070-d1b1-4a53-a9c7-7af837b04a3d\ncaps.latest.revision: 11\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","nodes":[{"content":"invalidVariant MDA | Microsoft Docs","nodes":[{"pos":[0,35],"content":"invalidVariant MDA | Microsoft Docs","nodes":[{"content":"invalidVariant MDA | Microsoft Docs","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[624,642],"content":"invalidVariant MDA","linkify":"invalidVariant MDA","nodes":[{"content":"invalidVariant MDA","pos":[0,18]}]},{"pos":[643,822],"content":"The <ph id=\"ph1\">`invalidVariant`</ph> managed debugging assistant (MDA) is activated when an invalid <ph id=\"ph2\">`VARIANT`</ph> structure is encountered during a call from native or unmanaged code to managed code.","source":"The `invalidVariant` managed debugging assistant (MDA) is activated when an invalid `VARIANT` structure is encountered during a call from native or unmanaged code to managed code."},{"pos":[831,839],"content":"Symptoms","linkify":"Symptoms","nodes":[{"content":"Symptoms","pos":[0,8]}]},{"pos":[843,968],"content":"Unexpected behavior during a transition between native and managed code involving the marshaling of a <ph id=\"ph1\">`VARIANT`</ph> to an object.","source":"Unexpected behavior during a transition between native and managed code involving the marshaling of a `VARIANT` to an object."},{"pos":[977,982],"content":"Cause","linkify":"Cause","nodes":[{"content":"Cause","pos":[0,5]}]},{"content":"Native code is passing a malformed <ph id=\"ph1\">`VARIANT`</ph> structure to managed code.","pos":[986,1057],"source":"Native code is passing a malformed `VARIANT` structure to managed code."},{"content":"The runtime attempts to marshal this <ph id=\"ph1\">`VARIANT`</ph> to an object and activates the MDA if the <ph id=\"ph2\">`VARIANT`</ph> is not valid.","pos":[1059,1171],"source":"  The runtime attempts to marshal this `VARIANT` to an object and activates the MDA if the `VARIANT` is not valid."},{"content":"Examples of invalid <ph id=\"ph1\">`VARIANT`</ph>S include a <ph id=\"ph2\">`VARIANT`</ph> with <ph id=\"ph3\">`VARTYPE`</ph> VT_EMPTY &amp;#124; VT_BYREF or a <ph id=\"ph4\">`VARIANT`</ph> with <ph id=\"ph5\">`VARTYPE`</ph> VT_VARIANT.","pos":[1172,1304],"source":" Examples of invalid `VARIANT`S include a `VARIANT` with `VARTYPE` VT_EMPTY &#124; VT_BYREF or a `VARIANT` with `VARTYPE` VT_VARIANT."},{"pos":[1313,1323],"content":"Resolution","linkify":"Resolution","nodes":[{"content":"Resolution","pos":[0,10]}]},{"pos":[1327,1445],"content":"The native or unmanaged code passing the <ph id=\"ph1\">`VARIANT`</ph> must ensure that the <ph id=\"ph2\">`VARIANT`</ph> is correctly formed and initialized.","source":"The native or unmanaged code passing the `VARIANT` must ensure that the `VARIANT` is correctly formed and initialized."},{"pos":[1454,1475],"content":"Effect on the Runtime","linkify":"Effect on the Runtime","nodes":[{"content":"Effect on the Runtime","pos":[0,21]}]},{"content":"The MDA has no effect on the runtime's behavior.","pos":[1479,1527]},{"pos":[1536,1542],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[1546,1665],"content":"An MDA message indicating that the runtime detected an invalid <ph id=\"ph1\">`VARIANT`</ph> passed to managed code by an unmanaged module.","source":"An MDA message indicating that the runtime detected an invalid `VARIANT` passed to managed code by an unmanaged module."},{"pos":[1674,1687],"content":"Configuration","linkify":"Configuration","nodes":[{"content":"Configuration","pos":[0,13]}]},{"pos":[1800,1808],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept><ph id=\"ph1\"> </ph>","pos":[1873,2027],"source":"[Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md) "},{"content":"<bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](../../../docs/framework/interop/interop-marshaling.md)</ept>","pos":[2031,2106],"source":"[Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)"}]}