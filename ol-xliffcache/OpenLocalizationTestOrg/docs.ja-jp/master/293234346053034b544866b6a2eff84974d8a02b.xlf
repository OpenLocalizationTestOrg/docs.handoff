<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-return-a-value-from-a-procedure.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">293234346053034b544866b6a2eff84974d8a02b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\how-to-return-a-value-from-a-procedure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">857692619f1b042ddc23306b68b0e6584429429b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff7d0a5597a6dcbafbcdf8be52e79c68cd6608a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Return a Value from a Procedure (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Return a Value from a Procedure (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure returns a value to the calling code either by executing a <ph id="ph2">`Return`</ph> statement or by encountering an <ph id="ph3">`Exit Function`</ph> or <ph id="ph4">`End Function`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To return a value using the Return statement</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Put a <ph id="ph1">`Return`</ph> statement at the point where the procedure's task is completed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Follow the <ph id="ph1">`Return`</ph> keyword with an expression that yields the value you want to return to the calling code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can have more than one <ph id="ph1">`Return`</ph> statement in the same procedure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Function`</ph> procedure calculates the longest side, or hypotenuse, of a right triangle, and returns it to the calling code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example shows a typical call to <ph id="ph1">`hypotenuse`</ph>, which stores the returned value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To return a value using Exit Function or End Function</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In at least one place in the <ph id="ph1">`Function`</ph> procedure, assign a value to the procedure's name.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you execute an <ph id="ph1">`Exit Function`</ph> or <ph id="ph2">`End Function`</ph> statement, Visual Basic returns the value most recently assigned to the procedure's name.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can have more than one <ph id="ph1">`Exit Function`</ph> statement in the same procedure, and you can mix <ph id="ph2">`Return`</ph> and <ph id="ph3">`Exit Function`</ph> statements in the same procedure.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can have only one <ph id="ph1">`End Function`</ph> statement in a <ph id="ph2">`Function`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information and an example, see "Return Value" in <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Return Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/return-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Procedure that Returns a Value<ept id="p1">](./how-to-create-a-procedure-that-returns-a-value.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Call a Procedure That Returns a Value<ept id="p1">](./how-to-call-a-procedure-that-returns-a-value.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>