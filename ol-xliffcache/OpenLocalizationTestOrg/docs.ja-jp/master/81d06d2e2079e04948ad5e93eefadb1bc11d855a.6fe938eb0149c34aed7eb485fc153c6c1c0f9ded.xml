{"content":"---\ntitle: What's New in C# 7.0 - C# Guide\ndescription: Get an overview of the new features in version 7.0 of the C# language.\nms.date: 02/20/2019\nms.assetid: fd41596d-d0c2-4816-b94d-c4d00a5d0243\n---\n\n# What's new in C# 7.0\n\nC# 7.0 adds a number of new features to the C# language:\n* [`out` variables](#out-variables)\n    - You can declare `out` values inline as arguments to the method where they're used.\n* [Tuples](#tuples)\n    - You can create lightweight, unnamed types that contain multiple public fields. Compilers and IDE tools understand the semantics of these types.\n* [Discards](#discards)\n    - Discards are temporary, write-only variables used in assignments when you don't care about the value assigned. They're most useful when deconstructing tuples and user-defined types, as well as when calling methods with `out` parameters.\n* [Pattern Matching](#pattern-matching)\n    - You can create branching logic based on arbitrary types and values of the members of those types.\n* [`ref` locals and returns](#ref-locals-and-returns)\n    - Method local variables and return values can be references to other storage.\n* [Local Functions](#local-functions)\n    - You can nest functions inside other functions to limit their scope and visibility.\n* [More expression-bodied members](#more-expression-bodied-members)\n    - The list of members that can be authored using expressions has grown.\n* [`throw` Expressions](#throw-expressions)\n    - You can throw exceptions in code constructs that previously weren't allowed because `throw` was a statement. \n* [Generalized async return types](#generalized-async-return-types)\n    - Methods declared with the `async` modifier can return other types in addition to `Task` and `Task<T>`.\n* [Numeric literal syntax improvements](#numeric-literal-syntax-improvements)\n    - New tokens improve readability for numeric constants.\n\nThe remainder of this article provides an overview of each feature. For each feature,\nyou'll learn the reasoning behind it. You'll learn the syntax. You can explore these features in our [interactive exploration](../tutorials/exploration/csharp-7.yml) of these features.\n\n## `out` variables\n\nThe existing syntax that supports `out` parameters has been improved\nin this version. You can now declare `out` variables in the argument list of a method call,\nrather than writing a separate declaration statement:\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\nYou may want to specify the type of the `out` variable for clarity,\nas shown above. However, the language does support using an implicitly\ntyped local variable:\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\n* The code is easier to read. \n    - You declare the out variable where you use it, not on another line above.\n* No need to assign an initial value.\n    - By declaring the `out` variable where it's used in a method call, you can't accidentally use it before it is assigned.\n\n## Tuples\n\nC# provides a rich syntax for classes and structs that is used to explain\nyour design intent. But sometimes that rich syntax requires extra\nwork with minimal benefit. You may often write methods that need a simple\nstructure containing more than one data element. To support these scenarios\n*tuples* were added to C#. Tuples are lightweight data structures\nthat contain multiple fields to represent the data members.\nThe fields aren't validated, and you can't define your own methods\n\n> [!NOTE]\n> Tuples were available before C# 7.0,\n> but they were inefficient and had no language support.\n> This meant that tuple elements could only be referenced as\n> `Item1`, `Item2` and so on. C# 7.0 introduces language support for tuples,\n> which enables semantic names for the fields of a tuple using new,\n> more efficient tuple types.\n\nYou can create a tuple by assigning a value to each member, and optionally providing semantic\nnames to each of the members of the tuple:\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\nThe `namedLetters` tuple contains fields referred to as `Alpha` and\n`Beta`. Those names exist only at compile time and aren't preserved,\nfor example when inspecting the tuple using reflection at runtime.\n\nIn a tuple assignment, you can also specify the names of the fields\non the right-hand side of the assignment:\n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\nThere may be times when you want to unpackage the members of a tuple that\nwere returned from a method.  You can do that by declaring separate variables\nfor each of the values in the tuple. This unpackaging is called *deconstructing* the tuple:\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\nYou can also provide a similar deconstruction for any type in .NET. You write a `Deconstruct` method as a member of the class. That\n`Deconstruct` method provides a set of `out` arguments for each of the\nproperties you want to extract. Consider\nthis `Point` class that provides a deconstructor method that extracts\nthe `X` and `Y` coordinates:\n\n[!code-csharp[PointWithDeconstruction](~/samples/snippets/csharp/new-in-7/point.cs#PointWithDeconstruction \"Point with deconstruction method\")]\n \nYou can extract the individual fields by assigning a `Point` to a tuple:\n\n[!code-csharp[DeconstructPoint](~/samples/snippets/csharp/new-in-7/program.cs#DeconstructPoint \"Deconstruct a point\")]\n\nYou can learn more in depth about tuples in the\n[tuples article](../tuples.md).\n\n## Discards\n\nOften when deconstructing a tuple or calling a method with `out` parameters, you're forced to define a variable whose value you don't care about and don't intend to use. C# adds support for *discards* to handle this scenario. A discard is a write-only variable whose name is `_` (the underscore character); you can assign all of the values that you intend to discard to the single variable. A discard is like an unassigned variable; apart from the assignment statement, the discard can't be used in code.\n\nDiscards are supported in the following scenarios:\n\n* When deconstructing tuples or user-defined types.\n* When calling methods with [out](../language-reference/keywords/out-parameter-modifier.md) parameters.\n* In a pattern matching operation with the [is](../language-reference/keywords/is.md) and [switch](../language-reference/keywords/switch.md) statements.\n* As a standalone identifier when you want to explicitly identify the value of an assignment as a discard.\n\nThe following example defines a `QueryCityDataForYears` method that returns a 6-tuple that contains a data for a city for two different years. The method call in the example is concerned only with the two population values returned by the method and so treats the remaining values in the tuple as discards when it deconstructs the tuple.\n\n[!code-csharp[Tuple-discard](~/samples/snippets/csharp/programming-guide/deconstructing-tuples/discard-tuple1.cs)]\n\nFor more information, see [Discards](../discards.md).\n\n## Pattern matching\n\n*Pattern matching* is a feature that allows you to implement method dispatch on\nproperties other than the type of an object. You're probably already familiar\nwith method dispatch based on the type of an object. In object-oriented programming,\nvirtual and override methods provide language syntax to implement method dispatching\nbased on an object's type. Base and Derived classes provide different implementations. \nPattern matching expressions extend this concept so that you can easily\nimplement similar dispatch patterns for types and data elements that aren't\nrelated through an inheritance hierarchy. \n\nPattern matching supports `is` expressions and `switch` expressions. Each\nenables inspecting an object and its properties to determine if that object\nsatisfies the sought pattern. You use the `when` keyword to specify additional\nrules to the pattern.\n\nThe `is` pattern expression extends the familiar [`is` operator](../language-reference/keywords/is.md#pattern-matching-with-is) to query an object about its type and assign the result in one instruction. The following code checks if a variable is an `int`, and if so, adds it to the current sum:\n\n```csharp\nif (input is int count)\n    sum += count;\n```\n\nThe preceding small example demonstrates the enhancements to the `is` expression. You can test against value types as well as reference types, and you can assign the successful result to a new variable of the correct type.\n\nThe switch match expression has a familiar syntax, based on the `switch`\nstatement already part of the C# language. The updated switch statement has several new constructs:\n\n- The governing type of a `switch` expression is no longer restricted to integral types, `Enum` types, `string`, or a nullable type corresponding to one of those types. Any type may be used.\n- You can test the type of the `switch` expression in each `case` label. As with the `is` expression, you may assign a new variable to that type.\n- You may add a `when` clause to further test conditions on that variable.\n- The order of `case` labels is now important. The first branch to match is executed; others are skipped.\n\nThe following code demonstrates these new features:\n\n```csharp\npublic static int SumPositiveNumbers(IEnumerable<object> sequence)\n{\n    int sum = 0;\n    foreach (var i in sequence)\n    {\n        switch (i)\n        {\n            case 0: \n                break;\n            case IEnumerable<int> childSequence:\n            {\n                foreach(var item in childSequence)\n                    sum += (item > 0) ? item : 0;\n                break;\n            }\n            case int n when n > 0: \n                sum += n; \n                break;\n            null:\n                throw new NullReferenceException(\"Null found in sequence\");\n            default:\n                throw new InvalidOperationException(\"Unrecognized type\");\n        }\n    }\n    return sum;\n}\n```\n\n- `case 0:` is the familiar constant pattern. \n- `case IEnumerable<int> childSequence:` is a type pattern.\n- `case int n when n > 0:` is a type pattern with an additional `when` condition.\n- `case null:` is the null pattern.\n- `default:` is the familiar default case.\n\nYou can learn more about pattern matching in\n[Pattern Matching in C#](../pattern-matching.md).\n\n## Ref locals and returns\n\nThis feature enables algorithms that use and return references\nto variables defined elsewhere. One example is working with\nlarge matrices, and finding a single location with certain\ncharacteristics. The following method returns a **reference** to that storage in the matrix:\n\n[!code-csharp[FindReturningRef](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#FindReturningRef \"Find returning by reference\")]\n\nYou can declare the return value as a `ref` and modify that value in the matrix, as shown in the following code:\n\n[!code-csharp[AssignRefReturn](~/samples/snippets/csharp/new-in-7/program.cs#AssignRefReturn \"Assign ref return\")]\n\nThe C# language has several rules that protect you from misusing\nthe `ref` locals and returns:\n\n* You must add the `ref` keyword to the method signature and to all `return` statements in a method.\n    - That makes it clear the method returns by reference throughout the method.\n* A `ref return` may be assigned to a value variable, or a `ref` variable.\n    - The caller controls whether the return value is copied or not. Omitting the `ref` modifier when assigning the return value indicates that the caller wants a copy of the value, not a reference to the storage.\n* You can't assign a standard method return value to a `ref` local variable.\n    - That disallows statements like `ref int i = sequence.Count();`\n* You can't return a `ref` to a variable whose lifetime doesn't extend beyond the execution of the method.\n    - That means you can't return a reference to a local variable or a variable with a similar scope.\n* `ref` locals and returns can't be used with async methods.\n    - The compiler can't know if the referenced variable has been set to its final value when the async method returns.\n\nThe addition of ref locals and ref returns enables algorithms that are more\nefficient by avoiding copying values, or performing dereferencing operations\nmultiple times.\n\nAdding `ref` to the return value is a [source compatible change](version-update-considerations.md#source-compatible-changes). Existing code compiles, but the ref return value is copied when assigned. Callers must update the storage for the return value to a `ref` local variable to store the return as a reference.\n\nFor more information, see the [ref keyword](../language-reference/keywords/ref.md) article.\n\n## Local functions\n\nMany designs for classes include methods that are called from only\none location. These additional private methods keep each method small\nand focused. *Local functions* enable you to declare methods\ninside the context of another method. Local functions make it easier for readers\nof the class to see that the local method is only called from the context\nin which is it declared.\n\nThere are two common use cases for local functions: public iterator\nmethods and public async methods. Both types of methods generate\ncode that reports errors later than programmers might expect. In\niterator methods, any exceptions are observed only\nwhen calling code that enumerates the returned sequence. In\nasync methods, any exceptions are only observed when the returned\n`Task` is awaited. The following example demonstrates separating parameter validation from the iterator implementation using a local function:\n\n[!code-csharp[22_IteratorMethodLocal](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocal \"Iterator method with local function\")]\n\nThe same technique can be employed with `async` methods to ensure that\nexceptions arising from argument validation are thrown before the asynchronous\nwork begins:\n\n[!code-csharp[TaskExample](~/samples/snippets/csharp/new-in-7/AsyncWork.cs#TaskExample \"Task returning method with local function\")]\n\n> [!NOTE]\n> Some of the designs that are supported by local functions\n> could also be accomplished using *lambda expressions*. Those\n> interested can [read more about the differences](../local-functions-vs-lambdas.md)\n\n## More expression-bodied members\n\nC# 6 introduced [expression-bodied members](csharp-6.md#expression-bodied-function-members)\nfor member functions, and read-only properties. C# 7.0 expands the allowed\nmembers that can be implemented as expressions. In C# 7.0, you can implement\n*constructors*, *finalizers*, and `get` and `set` accessors on *properties*\nand *indexers*. The following code shows examples of each:\n\n[!code-csharp[ExpressionBodiedMembers](~/samples/snippets/csharp/new-in-7/expressionmembers.cs#ExpressionBodiedEverything \"new expression-bodied members\")]\n\n> [!NOTE]\n> This example does not need a finalizer, but it is shown\n> to demonstrate the syntax. You should not implement a\n> finalizer in your class unless it is necessary to  release\n> unmanaged resources. You should also consider using the\n> <xref:System.Runtime.InteropServices.SafeHandle> class instead\n> of managing unmanaged resources directly.\n\nThese new locations for expression-bodied members represent\nan important milestone for the C# language: These features\nwere implemented by community members working on the open-source\n[Roslyn](https://github.com/dotnet/Roslyn) project.\n\nChanging a method to an expression bodied member is a [binary compatible change](version-update-considerations.md#binary-compatible-changes).\n\n## Throw expressions\n\nIn C#, `throw` has always been a statement. Because `throw` is a statement,\nnot an expression, there were C# constructs where you couldn't use it. These\nincluded conditional expressions, null coalescing expressions, and some lambda\nexpressions. The addition of expression-bodied members adds more locations\nwhere `throw` expressions would be useful. So that you can write any of these\nconstructs, C# 7.0 introduces *throw expressions*. \n\nThis addition makes it easier to write more expression-based code. You don't need additional statements for error checking.\n\n## Generalized async return types\n\nReturning a `Task` object from async methods can introduce\nperformance bottlenecks in certain paths. `Task` is a reference\ntype, so using it means allocating an object. In cases where a\nmethod declared with the `async` modifier returns a cached result, or\ncompletes synchronously, the extra allocations can become a significant\ntime cost in performance critical sections of code. It can become\ncostly if those allocations occur in tight loops.\n\nThe new language feature means that async method return types aren't limited to `Task`, `Task<T>`, and `void`. The returned type\nmust still satisfy the async pattern, meaning a `GetAwaiter` method\nmust be accessible. As one concrete example, the `ValueTask` type\nhas been added to the .NET framework to make use of this new language\nfeature: \n\n[!code-csharp[UsingValueTask](~/samples/snippets/csharp/new-in-7/AsyncWork.cs#UsingValueTask \"Using ValueTask\")]\n\n> [!NOTE]\n> You need to add the NuGet package [`System.Threading.Tasks.Extensions`](https://www.nuget.org/packages/System.Threading.Tasks.Extensions/)\n> in order to use the <xref:System.Threading.Tasks.ValueTask%601> type.\n\nThis enhancement is most useful for library authors to avoid allocating a `Task` in performance critical code.\n\n## Numeric literal syntax improvements\n\nMisreading numeric constants can make it harder to understand\ncode when reading it for the first time. Bit masks or other symbolic\nvalues are prone to misunderstanding. C# 7.0 includes two new features to write numbers in the most readable fashion\nfor the intended use: *binary literals*, and *digit separators*.\n\nFor those times when you're creating bit masks, or whenever a\nbinary representation of a number makes the most readable code,\nwrite that number in binary:\n\n[!code-csharp[ThousandSeparators](~/samples/snippets/csharp/new-in-7/Program.cs#ThousandSeparators \"Thousands separators\")]\n\nThe `0b` at the beginning of the constant indicates that the\nnumber is written as a binary number. Binary numbers can get long, so it's often easier to see\nthe bit patterns by introducing the `_` as a digit separator, as shown above in the binary constant. The digit separator can appear anywhere in the constant. For base 10\nnumbers, it is common to use it as a thousands separator:\n\n[!code-csharp[LargeIntegers](~/samples/snippets/csharp/new-in-7/Program.cs#LargeIntegers \"Large integer\")]\n\nThe digit separator can be used with `decimal`, `float`, and `double`\ntypes as well:\n\n[!code-csharp[OtherConstants](~/samples/snippets/csharp/new-in-7/Program.cs#OtherConstants \"non-integral constants\")]\n\nTaken together, you can declare numeric constants with much more\nreadability.\n","nodes":[{"pos":[4,195],"embed":true,"restype":"x-metadata","content":"title: What's New in C# 7.0 - C# Guide\ndescription: Get an overview of the new features in version 7.0 of the C# language.\nms.date: 02/20/2019\nms.assetid: fd41596d-d0c2-4816-b94d-c4d00a5d0243","nodes":[{"content":"What's New in C# 7.0 - C# Guide","nodes":[{"pos":[0,31],"content":"What's New in C# 7.0 - C# Guide","nodes":[{"content":"What's New in C# 7.0 - C# Guide","pos":[0,31]}]}],"path":["title"],"nosxs":false},{"content":"Get an overview of the new features in version 7.0 of the C# language.","nodes":[{"pos":[0,70],"content":"Get an overview of the new features in version 7.0 of the C# language.","nodes":[{"content":"Get an overview of the new features in version 7.0 of the C# language.","pos":[0,70]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[203,223],"content":"What's new in C# 7.0","linkify":"What's new in C# 7.0","nodes":[{"content":"What's new in C# 7.0","pos":[0,20]}]},{"content":"C# 7.0 adds a number of new features to the C# language:","pos":[225,281]},{"pos":[284,317],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`out`</ph> variables<ept id=\"p1\">](#out-variables)</ept>","source":"[`out` variables](#out-variables)"},{"pos":[324,406],"content":"You can declare <ph id=\"ph1\">`out`</ph> values inline as arguments to the method where they're used.","source":"You can declare `out` values inline as arguments to the method where they're used."},{"pos":[409,426],"content":"<bpt id=\"p1\">[</bpt>Tuples<ept id=\"p1\">](#tuples)</ept>","source":"[Tuples](#tuples)"},{"content":"You can create lightweight, unnamed types that contain multiple public fields.","pos":[433,511]},{"content":"Compilers and IDE tools understand the semantics of these types.","pos":[512,576]},{"pos":[579,600],"content":"<bpt id=\"p1\">[</bpt>Discards<ept id=\"p1\">](#discards)</ept>","source":"[Discards](#discards)"},{"content":"Discards are temporary, write-only variables used in assignments when you don't care about the value assigned.","pos":[607,717]},{"content":"They're most useful when deconstructing tuples and user-defined types, as well as when calling methods with <ph id=\"ph1\">`out`</ph> parameters.","pos":[718,843],"source":" They're most useful when deconstructing tuples and user-defined types, as well as when calling methods with `out` parameters."},{"pos":[846,883],"content":"<bpt id=\"p1\">[</bpt>Pattern Matching<ept id=\"p1\">](#pattern-matching)</ept>","source":"[Pattern Matching](#pattern-matching)"},{"content":"You can create branching logic based on arbitrary types and values of the members of those types.","pos":[890,987]},{"pos":[990,1041],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`ref`</ph> locals and returns<ept id=\"p1\">](#ref-locals-and-returns)</ept>","source":"[`ref` locals and returns](#ref-locals-and-returns)"},{"content":"Method local variables and return values can be references to other storage.","pos":[1048,1124]},{"pos":[1127,1162],"content":"<bpt id=\"p1\">[</bpt>Local Functions<ept id=\"p1\">](#local-functions)</ept>","source":"[Local Functions](#local-functions)"},{"content":"You can nest functions inside other functions to limit their scope and visibility.","pos":[1169,1251]},{"pos":[1254,1319],"content":"<bpt id=\"p1\">[</bpt>More expression-bodied members<ept id=\"p1\">](#more-expression-bodied-members)</ept>","source":"[More expression-bodied members](#more-expression-bodied-members)"},{"content":"The list of members that can be authored using expressions has grown.","pos":[1326,1395]},{"pos":[1398,1439],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`throw`</ph> Expressions<ept id=\"p1\">](#throw-expressions)</ept>","source":"[`throw` Expressions](#throw-expressions)"},{"pos":[1446,1554],"content":"You can throw exceptions in code constructs that previously weren't allowed because <ph id=\"ph1\">`throw`</ph> was a statement.","source":"You can throw exceptions in code constructs that previously weren't allowed because `throw` was a statement."},{"pos":[1558,1623],"content":"<bpt id=\"p1\">[</bpt>Generalized async return types<ept id=\"p1\">](#generalized-async-return-types)</ept>","source":"[Generalized async return types](#generalized-async-return-types)"},{"pos":[1630,1732],"content":"Methods declared with the <ph id=\"ph1\">`async`</ph> modifier can return other types in addition to <ph id=\"ph2\">`Task`</ph> and <ph id=\"ph3\">`Task&lt;T&gt;`</ph>.","source":"Methods declared with the `async` modifier can return other types in addition to `Task` and `Task<T>`."},{"pos":[1735,1810],"content":"<bpt id=\"p1\">[</bpt>Numeric literal syntax improvements<ept id=\"p1\">](#numeric-literal-syntax-improvements)</ept>","source":"[Numeric literal syntax improvements](#numeric-literal-syntax-improvements)"},{"content":"New tokens improve readability for numeric constants.","pos":[1817,1870]},{"content":"The remainder of this article provides an overview of each feature.","pos":[1872,1939]},{"content":"For each feature, you'll learn the reasoning behind it.","pos":[1940,1995],"source":" For each feature,\nyou'll learn the reasoning behind it."},{"content":"You'll learn the syntax.","pos":[1996,2020]},{"content":"You can explore these features in our <bpt id=\"p1\">[</bpt>interactive exploration<ept id=\"p1\">](../tutorials/exploration/csharp-7.yml)</ept> of these features.","pos":[2021,2142],"source":" You can explore these features in our [interactive exploration](../tutorials/exploration/csharp-7.yml) of these features."},{"pos":[2147,2162],"content":"<ph id=\"ph1\">`out`</ph> variables","linkify":"`out` variables","source":"`out` variables"},{"content":"The existing syntax that supports <ph id=\"ph1\">`out`</ph> parameters has been improved in this version.","pos":[2164,2249],"source":"The existing syntax that supports `out` parameters has been improved\nin this version."},{"content":"You can now declare <ph id=\"ph1\">`out`</ph> variables in the argument list of a method call, rather than writing a separate declaration statement:","pos":[2250,2378],"source":" You can now declare `out` variables in the argument list of a method call,\nrather than writing a separate declaration statement:"},{"content":"You may want to specify the type of the <ph id=\"ph1\">`out`</ph> variable for clarity, as shown above.","pos":[2520,2603],"source":"You may want to specify the type of the `out` variable for clarity,\nas shown above."},{"content":"However, the language does support using an implicitly typed local variable:","pos":[2604,2680],"source":" However, the language does support using an implicitly\ntyped local variable:"},{"content":"The code is easier to read.","pos":[2834,2861]},{"content":"You declare the out variable where you use it, not on another line above.","pos":[2869,2942]},{"content":"No need to assign an initial value.","pos":[2945,2980]},{"pos":[2987,3105],"content":"By declaring the <ph id=\"ph1\">`out`</ph> variable where it's used in a method call, you can't accidentally use it before it is assigned.","source":"By declaring the `out` variable where it's used in a method call, you can't accidentally use it before it is assigned."},{"pos":[3110,3116],"content":"Tuples","linkify":"Tuples","nodes":[{"content":"Tuples","pos":[0,6]}]},{"content":"C# provides a rich syntax for classes and structs that is used to explain your design intent.","pos":[3118,3211],"source":"C# provides a rich syntax for classes and structs that is used to explain\nyour design intent."},{"content":"But sometimes that rich syntax requires extra work with minimal benefit.","pos":[3212,3284],"source":" But sometimes that rich syntax requires extra\nwork with minimal benefit."},{"content":"You may often write methods that need a simple structure containing more than one data element.","pos":[3285,3380],"source":" You may often write methods that need a simple\nstructure containing more than one data element."},{"content":"To support these scenarios <bpt id=\"p1\">*</bpt>tuples<ept id=\"p1\">*</ept> were added to C#.","pos":[3381,3434],"source":" To support these scenarios\n*tuples* were added to C#."},{"content":"Tuples are lightweight data structures that contain multiple fields to represent the data members.","pos":[3435,3533],"source":" Tuples are lightweight data structures\nthat contain multiple fields to represent the data members."},{"content":"The fields aren't validated, and you can't define your own methods","pos":[3534,3600],"source":"\nThe fields aren't validated, and you can't define your own methods"},{"pos":[3604,3943],"content":"[!NOTE]\nTuples were available before C# 7.0,\nbut they were inefficient and had no language support.\nThis meant that tuple elements could only be referenced as\n`Item1`, `Item2` and so on. C# 7.0 introduces language support for tuples,\nwhich enables semantic names for the fields of a tuple using new,\nmore efficient tuple types.","leadings":["","> ","> ","> ","> ","> ","> "],"nodes":[{"content":"Tuples were available before C# 7.0,\nbut they were inefficient and had no language support.\nThis meant that tuple elements could only be referenced as\n`Item1`, `Item2` and so on. C# 7.0 introduces language support for tuples,\nwhich enables semantic names for the fields of a tuple using new,\nmore efficient tuple types.","pos":[8,327],"nodes":[{"content":"Tuples were available before C# 7.0, but they were inefficient and had no language support.","pos":[0,91],"source":"Tuples were available before C# 7.0,\nbut they were inefficient and had no language support."},{"content":"This meant that tuple elements could only be referenced as <ph id=\"ph1\">`Item1`</ph>, <ph id=\"ph2\">`Item2`</ph> and so on.","pos":[92,178],"source":"\nThis meant that tuple elements could only be referenced as\n`Item1`, `Item2` and so on."},{"content":"C# 7.0 introduces language support for tuples, which enables semantic names for the fields of a tuple using new, more efficient tuple types.","pos":[179,319],"source":" C# 7.0 introduces language support for tuples,\nwhich enables semantic names for the fields of a tuple using new,\nmore efficient tuple types."}]}]},{"pos":[3945,4081],"content":"You can create a tuple by assigning a value to each member, and optionally providing semantic names to each of the members of the tuple:","source":"You can create a tuple by assigning a value to each member, and optionally providing semantic\nnames to each of the members of the tuple:"},{"content":"The <ph id=\"ph1\">`namedLetters`</ph> tuple contains fields referred to as <ph id=\"ph2\">`Alpha`</ph> and <ph id=\"ph3\">`Beta`</ph>.","pos":[4183,4258],"source":"The `namedLetters` tuple contains fields referred to as `Alpha` and\n`Beta`."},{"content":"Those names exist only at compile time and aren't preserved, for example when inspecting the tuple using reflection at runtime.","pos":[4259,4386],"source":" Those names exist only at compile time and aren't preserved,\nfor example when inspecting the tuple using reflection at runtime."},{"pos":[4388,4497],"content":"In a tuple assignment, you can also specify the names of the fields on the right-hand side of the assignment:","source":"In a tuple assignment, you can also specify the names of the fields\non the right-hand side of the assignment:"},{"content":"There may be times when you want to unpackage the members of a tuple that were returned from a method.","pos":[4626,4728],"source":"There may be times when you want to unpackage the members of a tuple that\nwere returned from a method."},{"content":"You can do that by declaring separate variables for each of the values in the tuple.","pos":[4730,4814],"source":"  You can do that by declaring separate variables\nfor each of the values in the tuple."},{"content":"This unpackaging is called <bpt id=\"p1\">*</bpt>deconstructing<ept id=\"p1\">*</ept> the tuple:","pos":[4815,4869],"source":" This unpackaging is called *deconstructing* the tuple:"},{"content":"You can also provide a similar deconstruction for any type in .NET.","pos":[5010,5077]},{"content":"You write a <ph id=\"ph1\">`Deconstruct`</ph> method as a member of the class.","pos":[5078,5136],"source":" You write a `Deconstruct` method as a member of the class."},{"content":"That <ph id=\"ph1\">`Deconstruct`</ph> method provides a set of <ph id=\"ph2\">`out`</ph> arguments for each of the properties you want to extract.","pos":[5137,5244],"source":" That\n`Deconstruct` method provides a set of `out` arguments for each of the\nproperties you want to extract."},{"content":"Consider this <ph id=\"ph1\">`Point`</ph> class that provides a deconstructor method that extracts the <ph id=\"ph2\">`X`</ph> and <ph id=\"ph3\">`Y`</ph> coordinates:","pos":[5245,5352],"source":" Consider\nthis `Point` class that provides a deconstructor method that extracts\nthe `X` and `Y` coordinates:"},{"pos":[5500,5572],"content":"You can extract the individual fields by assigning a <ph id=\"ph1\">`Point`</ph> to a tuple:","source":"You can extract the individual fields by assigning a `Point` to a tuple:"},{"pos":[5694,5773],"content":"You can learn more in depth about tuples in the <bpt id=\"p1\">[</bpt>tuples article<ept id=\"p1\">](../tuples.md)</ept>.","source":"You can learn more in depth about tuples in the\n[tuples article](../tuples.md)."},{"pos":[5778,5786],"content":"Discards","linkify":"Discards","nodes":[{"content":"Discards","pos":[0,8]}]},{"content":"Often when deconstructing a tuple or calling a method with <ph id=\"ph1\">`out`</ph> parameters, you're forced to define a variable whose value you don't care about and don't intend to use.","pos":[5788,5957],"source":"Often when deconstructing a tuple or calling a method with `out` parameters, you're forced to define a variable whose value you don't care about and don't intend to use."},{"content":"C# adds support for <bpt id=\"p1\">*</bpt>discards<ept id=\"p1\">*</ept> to handle this scenario.","pos":[5958,6013],"source":" C# adds support for *discards* to handle this scenario."},{"content":"A discard is a write-only variable whose name is <ph id=\"ph1\">`_`</ph> (the underscore character); you can assign all of the values that you intend to discard to the single variable.","pos":[6014,6178],"source":" A discard is a write-only variable whose name is `_` (the underscore character); you can assign all of the values that you intend to discard to the single variable."},{"content":"A discard is like an unassigned variable; apart from the assignment statement, the discard can't be used in code.","pos":[6179,6292]},{"content":"Discards are supported in the following scenarios:","pos":[6294,6344]},{"content":"When deconstructing tuples or user-defined types.","pos":[6348,6397]},{"pos":[6400,6501],"content":"When calling methods with <bpt id=\"p1\">[</bpt>out<ept id=\"p1\">](../language-reference/keywords/out-parameter-modifier.md)</ept> parameters.","source":"When calling methods with [out](../language-reference/keywords/out-parameter-modifier.md) parameters."},{"pos":[6504,6654],"content":"In a pattern matching operation with the <bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../language-reference/keywords/is.md)</ept> and <bpt id=\"p2\">[</bpt>switch<ept id=\"p2\">](../language-reference/keywords/switch.md)</ept> statements.","source":"In a pattern matching operation with the [is](../language-reference/keywords/is.md) and [switch](../language-reference/keywords/switch.md) statements."},{"content":"As a standalone identifier when you want to explicitly identify the value of an assignment as a discard.","pos":[6657,6761]},{"content":"The following example defines a <ph id=\"ph1\">`QueryCityDataForYears`</ph> method that returns a 6-tuple that contains a data for a city for two different years.","pos":[6763,6905],"source":"The following example defines a `QueryCityDataForYears` method that returns a 6-tuple that contains a data for a city for two different years."},{"content":"The method call in the example is concerned only with the two population values returned by the method and so treats the remaining values in the tuple as discards when it deconstructs the tuple.","pos":[6906,7100]},{"pos":[7218,7271],"content":"For more information, see <bpt id=\"p1\">[</bpt>Discards<ept id=\"p1\">](../discards.md)</ept>.","source":"For more information, see [Discards](../discards.md)."},{"pos":[7276,7292],"content":"Pattern matching","linkify":"Pattern matching","nodes":[{"content":"Pattern matching","pos":[0,16]}]},{"content":"<bpt id=\"p1\">*</bpt>Pattern matching<ept id=\"p1\">*</ept> is a feature that allows you to implement method dispatch on properties other than the type of an object.","pos":[7294,7418],"source":"*Pattern matching* is a feature that allows you to implement method dispatch on\nproperties other than the type of an object."},{"content":"You're probably already familiar with method dispatch based on the type of an object.","pos":[7419,7504],"source":" You're probably already familiar\nwith method dispatch based on the type of an object."},{"content":"In object-oriented programming, virtual and override methods provide language syntax to implement method dispatching based on an object's type.","pos":[7505,7648],"source":" In object-oriented programming,\nvirtual and override methods provide language syntax to implement method dispatching\nbased on an object's type."},{"content":"Base and Derived classes provide different implementations.","pos":[7649,7708]},{"content":"Pattern matching expressions extend this concept so that you can easily implement similar dispatch patterns for types and data elements that aren't related through an inheritance hierarchy.","pos":[7709,7899],"source":" \nPattern matching expressions extend this concept so that you can easily\nimplement similar dispatch patterns for types and data elements that aren't\nrelated through an inheritance hierarchy."},{"content":"Pattern matching supports <ph id=\"ph1\">`is`</ph> expressions and <ph id=\"ph2\">`switch`</ph> expressions.","pos":[7902,7970],"source":"Pattern matching supports `is` expressions and `switch` expressions."},{"content":"Each enables inspecting an object and its properties to determine if that object satisfies the sought pattern.","pos":[7971,8081],"source":" Each\nenables inspecting an object and its properties to determine if that object\nsatisfies the sought pattern."},{"content":"You use the <ph id=\"ph1\">`when`</ph> keyword to specify additional rules to the pattern.","pos":[8082,8152],"source":" You use the `when` keyword to specify additional\nrules to the pattern."},{"content":"The <ph id=\"ph1\">`is`</ph> pattern expression extends the familiar <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`is`</ph> operator<ept id=\"p1\">](../language-reference/keywords/is.md#pattern-matching-with-is)</ept> to query an object about its type and assign the result in one instruction.","pos":[8154,8357],"source":"The `is` pattern expression extends the familiar [`is` operator](../language-reference/keywords/is.md#pattern-matching-with-is) to query an object about its type and assign the result in one instruction."},{"content":"The following code checks if a variable is an <ph id=\"ph1\">`int`</ph>, and if so, adds it to the current sum:","pos":[8358,8449],"source":" The following code checks if a variable is an `int`, and if so, adds it to the current sum:"},{"content":"The preceding small example demonstrates the enhancements to the <ph id=\"ph1\">`is`</ph> expression.","pos":[8508,8589],"source":"The preceding small example demonstrates the enhancements to the `is` expression."},{"content":"You can test against value types as well as reference types, and you can assign the successful result to a new variable of the correct type.","pos":[8590,8730]},{"content":"The switch match expression has a familiar syntax, based on the <ph id=\"ph1\">`switch`</ph> statement already part of the C# language.","pos":[8732,8847],"source":"The switch match expression has a familiar syntax, based on the `switch`\nstatement already part of the C# language."},{"content":"The updated switch statement has several new constructs:","pos":[8848,8904]},{"content":"The governing type of a <ph id=\"ph1\">`switch`</ph> expression is no longer restricted to integral types, <ph id=\"ph2\">`Enum`</ph> types, <ph id=\"ph3\">`string`</ph>, or a nullable type corresponding to one of those types.","pos":[8908,9074],"source":"The governing type of a `switch` expression is no longer restricted to integral types, `Enum` types, `string`, or a nullable type corresponding to one of those types."},{"content":"Any type may be used.","pos":[9075,9096]},{"content":"You can test the type of the <ph id=\"ph1\">`switch`</ph> expression in each <ph id=\"ph2\">`case`</ph> label.","pos":[9099,9169],"source":"You can test the type of the `switch` expression in each `case` label."},{"content":"As with the <ph id=\"ph1\">`is`</ph> expression, you may assign a new variable to that type.","pos":[9170,9242],"source":" As with the `is` expression, you may assign a new variable to that type."},{"pos":[9245,9317],"content":"You may add a <ph id=\"ph1\">`when`</ph> clause to further test conditions on that variable.","source":"You may add a `when` clause to further test conditions on that variable."},{"content":"The order of <ph id=\"ph1\">`case`</ph> labels is now important.","pos":[9320,9364],"source":"The order of `case` labels is now important."},{"content":"The first branch to match is executed; others are skipped.","pos":[9365,9423]},{"content":"The following code demonstrates these new features:","pos":[9425,9476]},{"pos":[10202,10245],"content":"<ph id=\"ph1\">`case 0:`</ph> is the familiar constant pattern.","source":"`case 0:` is the familiar constant pattern."},{"pos":[10249,10306],"content":"<ph id=\"ph1\">`case IEnumerable&lt;int&gt; childSequence:`</ph> is a type pattern.","source":"`case IEnumerable<int> childSequence:` is a type pattern."},{"pos":[10309,10388],"content":"<ph id=\"ph1\">`case int n when n &gt; 0:`</ph> is a type pattern with an additional <ph id=\"ph2\">`when`</ph> condition.","source":"`case int n when n > 0:` is a type pattern with an additional `when` condition."},{"pos":[10391,10424],"content":"<ph id=\"ph1\">`case null:`</ph> is the null pattern.","source":"`case null:` is the null pattern."},{"pos":[10427,10467],"content":"<ph id=\"ph1\">`default:`</ph> is the familiar default case.","source":"`default:` is the familiar default case."},{"pos":[10469,10563],"content":"You can learn more about pattern matching in <bpt id=\"p1\">[</bpt>Pattern Matching in C#<ept id=\"p1\">](../pattern-matching.md)</ept>.","source":"You can learn more about pattern matching in\n[Pattern Matching in C#](../pattern-matching.md)."},{"pos":[10568,10590],"content":"Ref locals and returns","linkify":"Ref locals and returns","nodes":[{"content":"Ref locals and returns","pos":[0,22]}]},{"content":"This feature enables algorithms that use and return references to variables defined elsewhere.","pos":[10592,10686],"source":"This feature enables algorithms that use and return references\nto variables defined elsewhere."},{"content":"One example is working with large matrices, and finding a single location with certain characteristics.","pos":[10687,10790],"source":" One example is working with\nlarge matrices, and finding a single location with certain\ncharacteristics."},{"content":"The following method returns a <bpt id=\"p1\">**</bpt>reference<ept id=\"p1\">**</ept> to that storage in the matrix:","pos":[10791,10866],"source":" The following method returns a **reference** to that storage in the matrix:"},{"pos":[11001,11113],"content":"You can declare the return value as a <ph id=\"ph1\">`ref`</ph> and modify that value in the matrix, as shown in the following code:","source":"You can declare the return value as a `ref` and modify that value in the matrix, as shown in the following code:"},{"pos":[11231,11325],"content":"The C# language has several rules that protect you from misusing the <ph id=\"ph1\">`ref`</ph> locals and returns:","source":"The C# language has several rules that protect you from misusing\nthe `ref` locals and returns:"},{"pos":[11329,11427],"content":"You must add the <ph id=\"ph1\">`ref`</ph> keyword to the method signature and to all <ph id=\"ph2\">`return`</ph> statements in a method.","source":"You must add the `ref` keyword to the method signature and to all `return` statements in a method."},{"content":"That makes it clear the method returns by reference throughout the method.","pos":[11434,11508]},{"pos":[11511,11583],"content":"A <ph id=\"ph1\">`ref return`</ph> may be assigned to a value variable, or a <ph id=\"ph2\">`ref`</ph> variable.","source":"A `ref return` may be assigned to a value variable, or a `ref` variable."},{"content":"The caller controls whether the return value is copied or not.","pos":[11590,11652]},{"content":"Omitting the <ph id=\"ph1\">`ref`</ph> modifier when assigning the return value indicates that the caller wants a copy of the value, not a reference to the storage.","pos":[11653,11797],"source":" Omitting the `ref` modifier when assigning the return value indicates that the caller wants a copy of the value, not a reference to the storage."},{"pos":[11800,11874],"content":"You can't assign a standard method return value to a <ph id=\"ph1\">`ref`</ph> local variable.","source":"You can't assign a standard method return value to a `ref` local variable."},{"pos":[11881,11943],"content":"That disallows statements like <ph id=\"ph1\">`ref int i = sequence.Count();`</ph>","source":"That disallows statements like `ref int i = sequence.Count();`"},{"pos":[11946,12050],"content":"You can't return a <ph id=\"ph1\">`ref`</ph> to a variable whose lifetime doesn't extend beyond the execution of the method.","source":"You can't return a `ref` to a variable whose lifetime doesn't extend beyond the execution of the method."},{"content":"That means you can't return a reference to a local variable or a variable with a similar scope.","pos":[12057,12152]},{"pos":[12155,12213],"content":"<ph id=\"ph1\">`ref`</ph> locals and returns can't be used with async methods.","source":"`ref` locals and returns can't be used with async methods."},{"content":"The compiler can't know if the referenced variable has been set to its final value when the async method returns.","pos":[12220,12333]},{"pos":[12335,12503],"content":"The addition of ref locals and ref returns enables algorithms that are more efficient by avoiding copying values, or performing dereferencing operations multiple times.","source":"The addition of ref locals and ref returns enables algorithms that are more\nefficient by avoiding copying values, or performing dereferencing operations\nmultiple times."},{"content":"Adding <ph id=\"ph1\">`ref`</ph> to the return value is a <bpt id=\"p1\">[</bpt>source compatible change<ept id=\"p1\">](version-update-considerations.md#source-compatible-changes)</ept>.","pos":[12505,12630],"source":"Adding `ref` to the return value is a [source compatible change](version-update-considerations.md#source-compatible-changes)."},{"content":"Existing code compiles, but the ref return value is copied when assigned.","pos":[12631,12704]},{"content":"Callers must update the storage for the return value to a <ph id=\"ph1\">`ref`</ph> local variable to store the return as a reference.","pos":[12705,12819],"source":" Callers must update the storage for the return value to a `ref` local variable to store the return as a reference."},{"pos":[12821,12912],"content":"For more information, see the <bpt id=\"p1\">[</bpt>ref keyword<ept id=\"p1\">](../language-reference/keywords/ref.md)</ept> article.","source":"For more information, see the [ref keyword](../language-reference/keywords/ref.md) article."},{"pos":[12917,12932],"content":"Local functions","linkify":"Local functions","nodes":[{"content":"Local functions","pos":[0,15]}]},{"content":"Many designs for classes include methods that are called from only one location.","pos":[12934,13014],"source":"Many designs for classes include methods that are called from only\none location."},{"content":"These additional private methods keep each method small and focused.","pos":[13015,13083],"source":" These additional private methods keep each method small\nand focused."},{"content":"<bpt id=\"p1\">*</bpt>Local functions<ept id=\"p1\">*</ept> enable you to declare methods inside the context of another method.","pos":[13084,13169],"source":"*Local functions* enable you to declare methods\ninside the context of another method."},{"content":"Local functions make it easier for readers of the class to see that the local method is only called from the context in which is it declared.","pos":[13170,13311],"source":" Local functions make it easier for readers\nof the class to see that the local method is only called from the context\nin which is it declared."},{"content":"There are two common use cases for local functions: public iterator methods and public async methods.","pos":[13313,13414],"source":"There are two common use cases for local functions: public iterator\nmethods and public async methods."},{"content":"Both types of methods generate code that reports errors later than programmers might expect.","pos":[13415,13507],"source":" Both types of methods generate\ncode that reports errors later than programmers might expect."},{"content":"In iterator methods, any exceptions are observed only when calling code that enumerates the returned sequence.","pos":[13508,13618],"source":" In\niterator methods, any exceptions are observed only\nwhen calling code that enumerates the returned sequence."},{"content":"In async methods, any exceptions are only observed when the returned <ph id=\"ph1\">`Task`</ph> is awaited.","pos":[13619,13706],"source":" In\nasync methods, any exceptions are only observed when the returned\n`Task` is awaited."},{"content":"The following example demonstrates separating parameter validation from the iterator implementation using a local function:","pos":[13707,13830]},{"pos":[13978,14140],"content":"The same technique can be employed with <ph id=\"ph1\">`async`</ph> methods to ensure that exceptions arising from argument validation are thrown before the asynchronous work begins:","source":"The same technique can be employed with `async` methods to ensure that\nexceptions arising from argument validation are thrown before the asynchronous\nwork begins:"},{"pos":[14278,14493],"content":"[!NOTE]\nSome of the designs that are supported by local functions\ncould also be accomplished using *lambda expressions*. Those\ninterested can [read more about the differences](../local-functions-vs-lambdas.md)","leadings":["","> ","> ","> "],"nodes":[{"content":"Some of the designs that are supported by local functions\ncould also be accomplished using *lambda expressions*. Those\ninterested can [read more about the differences](../local-functions-vs-lambdas.md)","pos":[8,209],"nodes":[{"content":"Some of the designs that are supported by local functions could also be accomplished using <bpt id=\"p1\">*</bpt>lambda expressions<ept id=\"p1\">*</ept>.","pos":[0,112],"source":"Some of the designs that are supported by local functions\ncould also be accomplished using *lambda expressions*."},{"content":"Those interested can <bpt id=\"p1\">[</bpt>read more about the differences<ept id=\"p1\">](../local-functions-vs-lambdas.md)</ept>","pos":[113,201],"source":" Those\ninterested can [read more about the differences](../local-functions-vs-lambdas.md)"}]}]},{"pos":[14498,14528],"content":"More expression-bodied members","linkify":"More expression-bodied members","nodes":[{"content":"More expression-bodied members","pos":[0,30]}]},{"content":"C# 6 introduced <bpt id=\"p1\">[</bpt>expression-bodied members<ept id=\"p1\">](csharp-6.md#expression-bodied-function-members)</ept> for member functions, and read-only properties.","pos":[14530,14669],"source":"C# 6 introduced [expression-bodied members](csharp-6.md#expression-bodied-function-members)\nfor member functions, and read-only properties."},{"content":"C# 7.0 expands the allowed members that can be implemented as expressions.","pos":[14670,14744],"source":" C# 7.0 expands the allowed\nmembers that can be implemented as expressions."},{"content":"In C# 7.0, you can implement <bpt id=\"p1\">*</bpt>constructors<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>finalizers<ept id=\"p2\">*</ept>, and <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors on <bpt id=\"p3\">*</bpt>properties<ept id=\"p3\">*</ept> and <bpt id=\"p4\">*</bpt>indexers<ept id=\"p4\">*</ept>.","pos":[14745,14865],"source":" In C# 7.0, you can implement\n*constructors*, *finalizers*, and `get` and `set` accessors on *properties*\nand *indexers*."},{"content":"The following code shows examples of each:","pos":[14866,14908]},{"pos":[15069,15418],"content":"[!NOTE]\nThis example does not need a finalizer, but it is shown\nto demonstrate the syntax. You should not implement a\nfinalizer in your class unless it is necessary to  release\nunmanaged resources. You should also consider using the\n<xref:System.Runtime.InteropServices.SafeHandle> class instead\nof managing unmanaged resources directly.","leadings":["","> ","> ","> ","> ","> ","> "],"nodes":[{"content":"This example does not need a finalizer, but it is shown\nto demonstrate the syntax. You should not implement a\nfinalizer in your class unless it is necessary to  release\nunmanaged resources. You should also consider using the\n<xref:System.Runtime.InteropServices.SafeHandle> class instead\nof managing unmanaged resources directly.","pos":[8,337],"nodes":[{"content":"This example does not need a finalizer, but it is shown to demonstrate the syntax.","pos":[0,82],"source":"This example does not need a finalizer, but it is shown\nto demonstrate the syntax."},{"content":"You should not implement a finalizer in your class unless it is necessary to  release unmanaged resources.","pos":[83,189],"source":" You should not implement a\nfinalizer in your class unless it is necessary to  release\nunmanaged resources."},{"content":"You should also consider using the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class instead of managing unmanaged resources directly.","pos":[190,329],"source":" You should also consider using the\n<xref:System.Runtime.InteropServices.SafeHandle> class instead\nof managing unmanaged resources directly."}]}]},{"pos":[15420,15655],"content":"These new locations for expression-bodied members represent an important milestone for the C# language: These features were implemented by community members working on the open-source <bpt id=\"p1\">[</bpt>Roslyn<ept id=\"p1\">](https://github.com/dotnet/Roslyn)</ept> project.","source":"These new locations for expression-bodied members represent\nan important milestone for the C# language: These features\nwere implemented by community members working on the open-source\n[Roslyn](https://github.com/dotnet/Roslyn) project."},{"pos":[15657,15798],"content":"Changing a method to an expression bodied member is a <bpt id=\"p1\">[</bpt>binary compatible change<ept id=\"p1\">](version-update-considerations.md#binary-compatible-changes)</ept>.","source":"Changing a method to an expression bodied member is a [binary compatible change](version-update-considerations.md#binary-compatible-changes)."},{"pos":[15803,15820],"content":"Throw expressions","linkify":"Throw expressions","nodes":[{"content":"Throw expressions","pos":[0,17]}]},{"content":"In C#, <ph id=\"ph1\">`throw`</ph> has always been a statement.","pos":[15822,15865],"source":"In C#, `throw` has always been a statement."},{"content":"Because <ph id=\"ph1\">`throw`</ph> is a statement, not an expression, there were C# constructs where you couldn't use it.","pos":[15866,15968],"source":" Because `throw` is a statement,\nnot an expression, there were C# constructs where you couldn't use it."},{"content":"These included conditional expressions, null coalescing expressions, and some lambda expressions.","pos":[15969,16066],"source":" These\nincluded conditional expressions, null coalescing expressions, and some lambda\nexpressions."},{"content":"The addition of expression-bodied members adds more locations where <ph id=\"ph1\">`throw`</ph> expressions would be useful.","pos":[16067,16171],"source":" The addition of expression-bodied members adds more locations\nwhere `throw` expressions would be useful."},{"content":"So that you can write any of these constructs, C# 7.0 introduces <bpt id=\"p1\">*</bpt>throw expressions<ept id=\"p1\">*</ept>.","pos":[16172,16257],"source":" So that you can write any of these\nconstructs, C# 7.0 introduces *throw expressions*."},{"content":"This addition makes it easier to write more expression-based code.","pos":[16260,16326]},{"content":"You don't need additional statements for error checking.","pos":[16327,16383]},{"pos":[16388,16418],"content":"Generalized async return types","linkify":"Generalized async return types","nodes":[{"content":"Generalized async return types","pos":[0,30]}]},{"content":"Returning a <ph id=\"ph1\">`Task`</ph> object from async methods can introduce performance bottlenecks in certain paths.","pos":[16420,16520],"source":"Returning a `Task` object from async methods can introduce\nperformance bottlenecks in certain paths."},{"content":"<ph id=\"ph1\">`Task`</ph> is a reference type, so using it means allocating an object.","pos":[16521,16588],"source":"`Task` is a reference\ntype, so using it means allocating an object."},{"content":"In cases where a method declared with the <ph id=\"ph1\">`async`</ph> modifier returns a cached result, or completes synchronously, the extra allocations can become a significant time cost in performance critical sections of code.","pos":[16589,16799],"source":" In cases where a\nmethod declared with the `async` modifier returns a cached result, or\ncompletes synchronously, the extra allocations can become a significant\ntime cost in performance critical sections of code."},{"content":"It can become costly if those allocations occur in tight loops.","pos":[16800,16863],"source":" It can become\ncostly if those allocations occur in tight loops."},{"content":"The new language feature means that async method return types aren't limited to <ph id=\"ph1\">`Task`</ph>, <ph id=\"ph2\">`Task&lt;T&gt;`</ph>, and <ph id=\"ph3\">`void`</ph>.","pos":[16865,16975],"source":"The new language feature means that async method return types aren't limited to `Task`, `Task<T>`, and `void`."},{"content":"The returned type must still satisfy the async pattern, meaning a <ph id=\"ph1\">`GetAwaiter`</ph> method must be accessible.","pos":[16976,17081],"source":" The returned type\nmust still satisfy the async pattern, meaning a `GetAwaiter` method\nmust be accessible."},{"content":"As one concrete example, the <ph id=\"ph1\">`ValueTask`</ph> type has been added to the .NET framework to make use of this new language feature:","pos":[17082,17206],"source":" As one concrete example, the `ValueTask` type\nhas been added to the .NET framework to make use of this new language\nfeature:"},{"pos":[17325,17545],"content":"[!NOTE]\nYou need to add the NuGet package [`System.Threading.Tasks.Extensions`](https://www.nuget.org/packages/System.Threading.Tasks.Extensions/)\nin order to use the <xref:System.Threading.Tasks.ValueTask%601> type.","leadings":["","> ","> "],"nodes":[{"content":"You need to add the NuGet package <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`System.Threading.Tasks.Extensions`</ph><ept id=\"p1\">](https://www.nuget.org/packages/System.Threading.Tasks.Extensions/)</ept> in order to use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> type.","pos":[8,216],"source":"You need to add the NuGet package [`System.Threading.Tasks.Extensions`](https://www.nuget.org/packages/System.Threading.Tasks.Extensions/)\nin order to use the <xref:System.Threading.Tasks.ValueTask%601> type."}]},{"pos":[17547,17657],"content":"This enhancement is most useful for library authors to avoid allocating a <ph id=\"ph1\">`Task`</ph> in performance critical code.","source":"This enhancement is most useful for library authors to avoid allocating a `Task` in performance critical code."},{"pos":[17662,17697],"content":"Numeric literal syntax improvements","linkify":"Numeric literal syntax improvements","nodes":[{"content":"Numeric literal syntax improvements","pos":[0,35]}]},{"content":"Misreading numeric constants can make it harder to understand code when reading it for the first time.","pos":[17699,17801],"source":"Misreading numeric constants can make it harder to understand\ncode when reading it for the first time."},{"content":"Bit masks or other symbolic values are prone to misunderstanding.","pos":[17802,17867],"source":" Bit masks or other symbolic\nvalues are prone to misunderstanding."},{"content":"C# 7.0 includes two new features to write numbers in the most readable fashion for the intended use: <bpt id=\"p1\">*</bpt>binary literals<ept id=\"p1\">*</ept>, and <bpt id=\"p2\">*</bpt>digit separators<ept id=\"p2\">*</ept>.","pos":[17868,18011],"source":" C# 7.0 includes two new features to write numbers in the most readable fashion\nfor the intended use: *binary literals*, and *digit separators*."},{"pos":[18013,18167],"content":"For those times when you're creating bit masks, or whenever a binary representation of a number makes the most readable code, write that number in binary:","source":"For those times when you're creating bit masks, or whenever a\nbinary representation of a number makes the most readable code,\nwrite that number in binary:"},{"content":"The <ph id=\"ph1\">`0b`</ph> at the beginning of the constant indicates that the number is written as a binary number.","pos":[18294,18392],"source":"The `0b` at the beginning of the constant indicates that the\nnumber is written as a binary number."},{"content":"Binary numbers can get long, so it's often easier to see the bit patterns by introducing the <ph id=\"ph1\">`_`</ph> as a digit separator, as shown above in the binary constant.","pos":[18393,18550],"source":" Binary numbers can get long, so it's often easier to see\nthe bit patterns by introducing the `_` as a digit separator, as shown above in the binary constant."},{"content":"The digit separator can appear anywhere in the constant.","pos":[18551,18607]},{"content":"For base 10 numbers, it is common to use it as a thousands separator:","pos":[18608,18677],"source":" For base 10\nnumbers, it is common to use it as a thousands separator:"},{"pos":[18787,18871],"content":"The digit separator can be used with <ph id=\"ph1\">`decimal`</ph>, <ph id=\"ph2\">`float`</ph>, and <ph id=\"ph3\">`double`</ph> types as well:","source":"The digit separator can be used with `decimal`, `float`, and `double`\ntypes as well:"},{"pos":[18992,19069],"content":"Taken together, you can declare numeric constants with much more readability.","source":"Taken together, you can declare numeric constants with much more\nreadability."}]}