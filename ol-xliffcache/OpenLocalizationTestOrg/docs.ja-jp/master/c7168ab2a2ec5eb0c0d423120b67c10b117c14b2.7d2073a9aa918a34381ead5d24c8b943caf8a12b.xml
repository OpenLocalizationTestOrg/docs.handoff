{"content":"---\ntitle: \"Expression recursively calls the containing property &#39;&lt;propertyname&gt;&#39; | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc42026\"\n  - \"BC42026\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"BC42026\"\nms.assetid: 4fde9db6-3bf3-48dc-8e05-981bf08969da\ncaps.latest.revision: 10\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Expression recursively calls the containing property &#39;&lt;propertyname&gt;&#39;\nA statement in the `Set` procedure of a property definition stores a value into the name of the property.  \n  \n The recommended approach to holding the value of a property is to define a `Private` variable in the property's container and use it in both the `Get` and `Set` procedures. The `Set` procedure should then store the incoming value in this `Private` variable.  \n  \n The `Get` procedure behaves like a `Function` procedure, so it can assign a value to the property name and return control by encountering the `End Get` statement. The recommended approach, however, is to include the `Private` variable as the value in a [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md).  \n  \n The `Set` procedure behaves like a `Sub` procedure, which does not return a value. Therefore, the procedure or property name has no special meaning within a `Set` procedure, and you cannot store a value into it.  \n  \n The following example illustrates the approach that can cause this error, followed by the recommended approach.  \n  \n```  \nPublic Class illustrateProperties  \n' The code in the following property causes this error.  \n    Public Property badProp() As Char  \n        Get  \n            Dim charValue As Char  \n            ' Insert code to update charValue.  \n            badProp = charValue  \n        End Get  \n        Set(ByVal Value As Char)  \n            ' The following statement causes this error.  \n            badProp = Value  \n            ' The value stored in the local variable badProp  \n            ' is not used by the Get procedure in this property.  \n        End Set  \n    End Property  \n' The following code uses the recommended approach.  \n    Private propValue As Char  \n    Public Property goodProp() As Char  \n        Get  \n            ' Insert code to update propValue.  \n            Return propValue  \n        End Get  \n        Set(ByVal Value As Char)  \n            propValue = Value  \n        End Set  \n    End Property  \nEnd Class  \n```  \n  \n By default, this message is a warning. For more information about hiding warnings or treating warnings as errors, please see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic).  \n  \n **Error ID:** BC42026  \n  \n## To correct this error  \n  \n-   Rewrite the property definition to use the recommended approach as illustrated in the preceding example.  \n  \n## See Also  \n [Property Procedures](../../../visual-basic/programming-guide/language-features/procedures/property-procedures.md)   \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)   \n [Set Statement](../../../visual-basic/language-reference/statements/set-statement.md)","nodes":[{"pos":[4,644],"nodes":[{"content":"Expression recursively calls the containing property &#39;&lt;propertyname&gt;&#39; | Microsoft Docs","nodes":[{"pos":[0,100],"content":"Expression recursively calls the containing property &#39;&lt;propertyname&gt;&#39; | Microsoft Docs","nodes":[{"content":"Expression recursively calls the containing property &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>propertyname<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; | Microsoft Docs","pos":[0,100],"source":"Expression recursively calls the containing property &#39;&lt;propertyname&gt;&#39; | Microsoft Docs"}]}],"pos":[6,109],"yaml":true}],"content":"title: \"Expression recursively calls the containing property &#39;&lt;propertyname&gt;&#39; | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc42026\"\n  - \"BC42026\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"BC42026\"\nms.assetid: 4fde9db6-3bf3-48dc-8e05-981bf08969da\ncaps.latest.revision: 10\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[651,734],"content":"Expression recursively calls the containing property &#39;&lt;propertyname&gt;&#39;","linkify":"Expression recursively calls the containing property &#39;&lt;propertyname&gt;&#39;","nodes":[{"content":"Expression recursively calls the containing property &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>propertyname<ph id=\"ph2\">&amp;gt;</ph>&amp;#39;","pos":[0,83],"source":"Expression recursively calls the containing property &#39;&lt;propertyname&gt;&#39;"}]},{"pos":[735,840],"content":"A statement in the <ph id=\"ph1\">`Set`</ph> procedure of a property definition stores a value into the name of the property.","source":"A statement in the `Set` procedure of a property definition stores a value into the name of the property."},{"content":"The recommended approach to holding the value of a property is to define a <ph id=\"ph1\">`Private`</ph> variable in the property's container and use it in both the <ph id=\"ph2\">`Get`</ph> and <ph id=\"ph3\">`Set`</ph> procedures.","pos":[847,1019],"source":"The recommended approach to holding the value of a property is to define a `Private` variable in the property's container and use it in both the `Get` and `Set` procedures."},{"content":"The <ph id=\"ph1\">`Set`</ph> procedure should then store the incoming value in this <ph id=\"ph2\">`Private`</ph> variable.","pos":[1020,1104],"source":" The `Set` procedure should then store the incoming value in this `Private` variable."},{"content":"The <ph id=\"ph1\">`Get`</ph> procedure behaves like a <ph id=\"ph2\">`Function`</ph> procedure, so it can assign a value to the property name and return control by encountering the <ph id=\"ph3\">`End Get`</ph> statement.","pos":[1111,1273],"source":"The `Get` procedure behaves like a `Function` procedure, so it can assign a value to the property name and return control by encountering the `End Get` statement."},{"content":"The recommended approach, however, is to include the <ph id=\"ph1\">`Private`</ph> variable as the value in a <bpt id=\"p1\">[</bpt>Return Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/return-statement.md)</ept>.","pos":[1274,1456],"source":" The recommended approach, however, is to include the `Private` variable as the value in a [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md)."},{"content":"The <ph id=\"ph1\">`Set`</ph> procedure behaves like a <ph id=\"ph2\">`Sub`</ph> procedure, which does not return a value.","pos":[1463,1545],"source":"The `Set` procedure behaves like a `Sub` procedure, which does not return a value."},{"content":"Therefore, the procedure or property name has no special meaning within a <ph id=\"ph1\">`Set`</ph> procedure, and you cannot store a value into it.","pos":[1546,1674],"source":" Therefore, the procedure or property name has no special meaning within a `Set` procedure, and you cannot store a value into it."},{"content":"The following example illustrates the approach that can cause this error, followed by the recommended approach.","pos":[1681,1792]},{"content":"By default, this message is a warning.","pos":[2745,2783]},{"content":"For more information about hiding warnings or treating warnings as errors, please see <bpt id=\"p1\">[</bpt>Configuring Warnings in Visual Basic<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)</ept>.","pos":[2784,2991],"source":" For more information about hiding warnings or treating warnings as errors, please see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)."},{"pos":[2998,3019],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC42026","source":"**Error ID:** BC42026"},{"pos":[3028,3049],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Rewrite the property definition to use the recommended approach as illustrated in the preceding example.","pos":[3059,3163]},{"pos":[3172,3180],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Property Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/property-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3184,3299],"source":"[Property Procedures](../../../visual-basic/programming-guide/language-features/procedures/property-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3303,3399],"source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Set Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/set-statement.md)</ept>","pos":[3403,3488],"source":"[Set Statement](../../../visual-basic/language-reference/statements/set-statement.md)"}]}