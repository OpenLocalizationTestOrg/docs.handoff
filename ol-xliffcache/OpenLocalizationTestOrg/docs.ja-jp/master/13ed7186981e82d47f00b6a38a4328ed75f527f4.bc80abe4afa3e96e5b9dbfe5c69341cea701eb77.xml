{"content":"---\ntitle: \"Modification SQL Generation\"\nms.date: \"03/30/2017\"\nms.assetid: 2188a39d-46ed-4a8b-906a-c9f15e6fefd1\n---\n\n# Modification SQL Generation\n\nThis section discusses how to develop a modification SQL generation module for your (SQL:1999-compliant database) provider. This module is responsible for translating a modification command tree into the appropriate SQL INSERT, UPDATE or DELETE statements.\n\nFor information about SQL generation for select statements, see [SQL Generation](../../../../../docs/framework/data/adonet/ef/sql-generation.md).\n\n## Overview of Modification Command Trees\n\nThe modification SQL generation module generates database-specific modification SQL statements based on a given input DbModificationCommandTree.\n\nA DbModificationCommandTree is an object model representation of a modification DML operation (an insert, an update, or a delete operation), inheriting from DbCommandTree. There are three implementations of DbModificationCommandTree:\n\n- DbInsertCommandTree\n\n- DbUpdateCommandTree\n\n- DbDeleteCommandTree\n\nDbModificationCommandTree and its implementations that are produced by the [!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)] always represent a single row operation. This section describes these types with their constraints in the .NET Framework version 3.5.\n\n![Diagram](../../../../../docs/framework/data/adonet/ef/media/558ba7b3-dd19-48d0-b91e-30a76415bf5f.gif \"558ba7b3-dd19-48d0-b91e-30a76415bf5f\")\n\nDbModificationCommandTree has a Target property that represents the target set for the modification operation. The Target’s Expression property, which defines the input set is always DbScanExpression.  A DbScanExpression can either represent a table or a view, or a set of data defined with a query if the metadata property \"Defining Query\" of its Target is non-null.\n\nA DbScanExpression that represents a query could only reach a provider as a target of modification if the set was defined by using a defining query in the model but no function was provided for the corresponding modification operation. Providers may not be able to support such a scenario (SqlClient, for example, does not).\n\nDbInsertCommandTree represents a single row insert operation expressed as a command tree.\n\n```csharp\npublic sealed class DbInsertCommandTree : DbModificationCommandTree {\n   public IList<DbModificationClause> SetClauses { get }\n   public DbExpression Returning { get }\n}\n```\n\nDbUpdateCommandTree represents a single-row update operation expressed as a command tree.\n\nDbDeleteCommandTree represents a single row delete operation expressed as a command tree.\n\n### Restrictions on Modification Command Tree Properties\n\nThe following information and restrictions apply to the modification command tree properties.\n\n#### Returning in DbInsertCommandTree and DbUpdateCommandTree\n\nWhen non-null, Returning indicates that the command returns a reader. Otherwise, the command should return a scalar value indicating the number of rows affected (inserted or updated).\n\nThe Returning value specifies a projection of results to be returned based on the inserted or the updated row. It can only be of type DbNewInstanceExpression representing a row, with each of its arguments being a DbPropertyExpression over a DbVariableReferenceExpression representing a reference to the Target of the corresponding DbModificationCommandTree. The properties represented by the DbPropertyExpressions used in the property Returning are always store generated or computed values. In DbInsertCommandTree, Returning is not null when at least one property of the table in which the row is being inserted is specified as store generated or computed (marked as StoreGeneratedPattern.Identity or StoreGeneratedPattern.Computed in the ssdl). In DbUpdateCommandTrees, Returning is not null when at least one property of the table in which the row is being updated is specified as store computed (marked as StoreGeneratedPattern.Computed in the ssdl).\n\n#### SetClauses in DbInsertCommandTree and DbUpdateCommandTree\n\nSetClauses specifies the list of insert or update set clauses that define the insert or update operation.\n\n```\nThe elements of the list are specified as type DbModificationClause, which specifies a single clause in an insert or update modification operation. DbSetClause inherits from DbModificationClause and specifies the clause in a modification operation that sets the value of a property. Beginning in version 3.5 of the .NET Framework, all elements in SetClauses are of type SetClause.\n```\n\nProperty specifies the property that should be updated. It is always a DbPropertyExpression over a DbVariableReferenceExpression, which represents a reference to the Target of the corresponding DbModificationCommandTree.\n\nValue specifies the new value with which to update the property. It is either of type DbConstantExpression or DbNullExpression.\n\n#### Predicate in DbUpdateCommandTree and DbDeleteCommandTree\n\nPredicate specifies the predicate used to determine which members of the target collection should be updated or deleted. It is an expression tree built of the following subset of DbExpressions:\n\n- DbComparisonExpression of kind Equals, with the right child being a DbPropertyExpression as restricted below and the left child a DbConstantExpression.\n\n- DbConstantExpression\n\n- DbIsNullExpression over a DbPropertyExpression as restricted below\n\n- DbPropertyExpression over a DbVariableReferenceExpression representing a reference to the Target of the corresponding DbModificationCommandTree.\n\n- DbAndExpression\n\n- DbNotExpression\n\n- DbOrExpression\n\n## Modification SQL Generation in the Sample Provider\n\nThe [Entity Framework Sample Provider](https://code.msdn.microsoft.com/windowsdesktop/Entity-Framework-Sample-6a9801d0) demonstrates the components of ADO.NET Data Providers that support the [!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)]. It targets a SQL Server 2005 database and is implemented as a wrapper on top of System.Data.SqlClient ADO.NET 2.0 Data Provider.\n\nThe modification SQL generation module of the sample provider (located in the file SQL Generation\\DmlSqlGenerator.cs) takes an input DbModificationCommandTree and produces a single modification SQL statement possibly followed by a select statement to return a reader if specified by the DbModificationCommandTree. Note that the shape of the commands generated is affected by the target SQL Server database.\n\n### Helper Classes: ExpressionTranslator\n\nExpressionTranslator serves as a common lightweight translator for all modification command tree properties of type DbExpression. It supports translation of only the expression types to which the properties of the modification command tree are constrained and is built with the particular constraints in mind.\n\nThe following information discusses visiting specific expression types (nodes with trivial translations are omitted).\n\n### DbComparisonExpression\n\nWhen the ExpressionTranslator is constructed with preserveMemberValues = true, and when the constant to the right is a DbConstantExpression (instead of DbNullExpression), it associates the left operand (a DbPropertyExpressions) with that DbConstantExpression. That is used if a return Select statement needs to be generated to identify the affected row.\n\n### DbConstantExpression\n\nFor each visited constant a parameter is created.\n\n### DbPropertyExpression\n\nGiven that the Instance of the DbPropertyExpression always represents the input table, unless the generation has created an alias (which only happens in update scenarios when a table variable is used), no alias needs to be specified for the input; the translation defaults to the property name.\n\n## Generating an Insert SQL Command\n\nFor a given DbInsertCommandTree in the sample provider, the generated insert command follows one of the two insert templates below.\n\nThe first template has a command to perform the insert given the values in the list of SetClauses, and a SELECT statement to return the properties specified in the Returning property for the inserted row if the Returning property was not null. The predicate element \"\\@@ROWCOUNT > 0\" is true if a row was inserted. The predicate element \"keyMemberI =  keyValueI &#124; scope_identity()\" takes the shape  \"keyMemberI =  scope_identity()\" only if keyMemberI is a store-generated key, because scope_identity() returns the last identity value inserted into an identity (store-generated) column.\n\n```sql\n-- first insert Template\nINSERT <target>   [ (setClauseProperty0, .. setClausePropertyN)]\nVALUES (setClauseValue0, .. setClauseValueN) |  DEFAULT VALUES\n\n[SELECT <returning>\n FROM <target>\n WHERE @@ROWCOUNT > 0 AND keyMember0 = keyValue0 AND .. keyMemberI =  keyValueI | scope_identity()  .. AND  keyMemberN = keyValueN]\n```\n\nThe second template is needed if the insert specifies inserting a row where the primary key is store-generated but is not an integer type and therefore can't be used with scope_identity()). It is also used if there is a compound store-generated key.\n\n```sql\n-- second insert template\nDECLARE @generated_keys TABLE [(keyMember0, … keyMemberN)\n\nINSERT <target>   [ (setClauseProperty0, .. setClausePropertyN)]\n OUTPUT inserted.KeyMember0, …, inserted.KeyMemberN INTO @generated_keys\n VALUES (setClauseValue0, .. setClauseValueN) |  DEFAULT VALUES\n\n[SELECT <returning_over_t>\n FROM @generated_keys  AS g\nJOIN <target> AS t ON g.KeyMember0 = t.KeyMember0 AND … g.KeyMemberN = t.KeyMemberN\n WHERE @@ROWCOUNT > 0\n```\n\nThe following is an example that uses the model that is included with the sample provider. It generates an insert command from a DbInsertCommandTree.\n\nThe following code inserts a Category:\n\n```csharp\nusing (NorthwindEntities northwindContext = new NorthwindEntities()) {\n   Category c = new Category();\n   c.CategoryName = \"Test Category\";\n   c.Description = \"A new category for testing\";\n   northwindContext.AddObject(\"Categories\", c);\n   northwindContext.SaveChanges();\n}\n```\n\nThis code produces the following command tree, which is passed to the provider:\n\n```\nDbInsertCommandTree\n|_Parameters\n|_Target : 'target'\n| |_Scan : dbo.Categories\n|_SetClauses\n| |_DbSetClause\n| | |_Property\n| | | |_Var(target).CategoryName\n| | |_Value\n| |   |_'Test Category'\n| |_DbSetClause\n| | |_Property\n| | | |_Var(target).Description\n| | |_Value\n| |   |_'A new category for testing'\n| |_DbSetClause\n|   |_Property\n|   | |_Var(target).Picture\n|   |_Value\n|     |_null\n|_Returning\n  |_NewInstance : Record['CategoryID'=Edm.Int32]\n    |_Column : 'CategoryID'\n      |_Var(target).CategoryID\n```\n\nThe store command that the sample provider produces is the following SQL statement:\n\n```sql\ninsert [dbo].[Categories]([CategoryName], [Description], [Picture])\nvalues (@p0, @p1, null)\nselect [CategoryID]\nfrom [dbo].[Categories]\nwhere @@ROWCOUNT > 0 and [CategoryID] = scope_identity()\n```\n\n## Generating an Update SQL Command\n\nFor a given DbUpdateCommandTree, the generated update command is based on the following template:\n\n```sql\n-- UPDATE Template\nUPDATE <target>\nSET setClauseProperty0 = setClauseValue0, .. setClausePropertyN = setClauseValueN  | @i = 0\nWHERE <predicate>\n\n[SELECT <returning>\n FROM <target>\n WHERE @@ROWCOUNT > 0 AND keyMember0 = keyValue0 AND .. keyMemberI =  keyValueI | scope_identity()  .. AND  keyMemberN = keyValueN]\n```\n\nThe set clause has the fake set clause (\"@i = 0\") only if no set clauses are specified. This is to ensure that any store-computed columns are recomputed.\n\nOnly if the Returning property is not null, a select statement is generated to return the properties specified in the Returning property.\n\nThe following example uses the model that is included with the sample provider to generate an update command.\n\nThe following user code updates a Category:\n\n```csharp\nusing (NorthwindEntities northwindContext = new NorthwindEntities()) {\n   Category c = northwindContext.Categories.Where(i => i.CategoryName == \"Test Category\").First();\n   c.CategoryName = \"New test name\";\n   northwindContext.SaveChanges();\n}\n```\n\nThis user code produces the following command tree, which is passed to the provider:\n\n```\nDbUpdateCommandTree\n|_Parameters\n|_Target : 'target'\n| |_Scan : dbo.Categories\n|_SetClauses\n| |_DbSetClause\n|   |_Property\n|   | |_Var(target).CategoryName\n|   |_Value\n|     |_'New test name'\n|_Predicate\n| |_\n|   |_Var(target).CategoryID\n|   |_=\n|   |_10\n|_Returning\n```\n\nThe sample provider produces the following store command:\n\n```sql\nupdate [dbo].[Categories]\nset [CategoryName] = @p0\nwhere ([CategoryID] = @p1)\n```\n\n### Generating a Delete SQL Command\n\nFor a given DbDeleteCommandTree, the generated DELETE command is based on the following template:\n\n```sql\n-- DELETE Template\nDELETE <target>\nWHERE <predicate>\n```\n\nThe following example uses the model that is included with the sample provider to generate a delete command.\n\nThe following user code deletes a Category:\n\n```csharp\nusing (NorthwindEntities northwindContext = new NorthwindEntities()) {\n   Category c = northwindContext.Categories.Where(i => i.CategoryName == \"New test name\").First();\n   northwindContext.DeleteObject(c);\n   northwindContext.SaveChanges();\n}\n```\n\nThis user code produces the following command tree, which is passed to the provider.\n\n```\nDbDeleteCommandTree\n|_Parameters\n|_Target : 'target'\n| |_Scan : dbo.Categories\n|_Predicate\n  |_\n    |_Var(target).CategoryID\n    |_=\n    |_10\n```\n\nThe following store command is produced by the sample provider:\n\n```sql\ndelete [dbo].[Categories]\nwhere ([CategoryID] = @p0)\n```\n\n## See also\n\n- [Writing an Entity Framework Data Provider](../../../../../docs/framework/data/adonet/ef/writing-an-ef-data-provider.md)\n","nodes":[{"pos":[4,111],"embed":true,"restype":"x-metadata","content":"title: \"Modification SQL Generation\"\nms.date: \"03/30/2017\"\nms.assetid: 2188a39d-46ed-4a8b-906a-c9f15e6fefd1","nodes":[{"content":"Modification SQL Generation","nodes":[{"pos":[0,27],"content":"Modification SQL Generation","nodes":[{"content":"Modification SQL Generation","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[119,146],"content":"Modification SQL Generation","linkify":"Modification SQL Generation","nodes":[{"content":"Modification SQL Generation","pos":[0,27]}]},{"content":"This section discusses how to develop a modification SQL generation module for your (SQL:1999-compliant database) provider.","pos":[148,271]},{"content":"This module is responsible for translating a modification command tree into the appropriate SQL INSERT, UPDATE or DELETE statements.","pos":[272,404]},{"pos":[406,551],"content":"For information about SQL generation for select statements, see <bpt id=\"p1\">[</bpt>SQL Generation<ept id=\"p1\">](../../../../../docs/framework/data/adonet/ef/sql-generation.md)</ept>.","source":"For information about SQL generation for select statements, see [SQL Generation](../../../../../docs/framework/data/adonet/ef/sql-generation.md)."},{"pos":[556,594],"content":"Overview of Modification Command Trees","linkify":"Overview of Modification Command Trees","nodes":[{"content":"Overview of Modification Command Trees","pos":[0,38]}]},{"content":"The modification SQL generation module generates database-specific modification SQL statements based on a given input DbModificationCommandTree.","pos":[596,740]},{"content":"A DbModificationCommandTree is an object model representation of a modification DML operation (an insert, an update, or a delete operation), inheriting from DbCommandTree.","pos":[742,913]},{"content":"There are three implementations of DbModificationCommandTree:","pos":[914,975]},{"content":"DbInsertCommandTree","pos":[979,998]},{"content":"DbUpdateCommandTree","pos":[1002,1021]},{"content":"DbDeleteCommandTree","pos":[1025,1044]},{"content":"DbModificationCommandTree and its implementations that are produced by the <ph id=\"ph1\">[!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)]</ph> always represent a single row operation.","pos":[1046,1224],"source":"DbModificationCommandTree and its implementations that are produced by the [!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)] always represent a single row operation."},{"content":"This section describes these types with their constraints in the .NET Framework version 3.5.","pos":[1225,1317]},{"pos":[1319,1461],"content":"<bpt id=\"p1\">![</bpt>Diagram<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../../docs/framework/data/adonet/ef/media/558ba7b3-dd19-48d0-b91e-30a76415bf5f.gif \"</bpt>558ba7b3-dd19-48d0-b91e-30a76415bf5f<ept id=\"p2\">\")</ept>","source":"![Diagram](../../../../../docs/framework/data/adonet/ef/media/558ba7b3-dd19-48d0-b91e-30a76415bf5f.gif \"558ba7b3-dd19-48d0-b91e-30a76415bf5f\")"},{"content":"DbModificationCommandTree has a Target property that represents the target set for the modification operation.","pos":[1463,1573]},{"content":"The Target’s Expression property, which defines the input set is always DbScanExpression.","pos":[1574,1663]},{"content":"A DbScanExpression can either represent a table or a view, or a set of data defined with a query if the metadata property \"Defining Query\" of its Target is non-null.","pos":[1665,1830]},{"content":"A DbScanExpression that represents a query could only reach a provider as a target of modification if the set was defined by using a defining query in the model but no function was provided for the corresponding modification operation.","pos":[1832,2067]},{"content":"Providers may not be able to support such a scenario (SqlClient, for example, does not).","pos":[2068,2156]},{"content":"DbInsertCommandTree represents a single row insert operation expressed as a command tree.","pos":[2158,2247]},{"content":"DbUpdateCommandTree represents a single-row update operation expressed as a command tree.","pos":[2434,2523]},{"content":"DbDeleteCommandTree represents a single row delete operation expressed as a command tree.","pos":[2525,2614]},{"pos":[2620,2672],"content":"Restrictions on Modification Command Tree Properties","linkify":"Restrictions on Modification Command Tree Properties","nodes":[{"content":"Restrictions on Modification Command Tree Properties","pos":[0,52]}]},{"content":"The following information and restrictions apply to the modification command tree properties.","pos":[2674,2767]},{"pos":[2774,2830],"content":"Returning in DbInsertCommandTree and DbUpdateCommandTree","linkify":"Returning in DbInsertCommandTree and DbUpdateCommandTree","nodes":[{"content":"Returning in DbInsertCommandTree and DbUpdateCommandTree","pos":[0,56]}]},{"content":"When non-null, Returning indicates that the command returns a reader.","pos":[2832,2901]},{"content":"Otherwise, the command should return a scalar value indicating the number of rows affected (inserted or updated).","pos":[2902,3015]},{"content":"The Returning value specifies a projection of results to be returned based on the inserted or the updated row.","pos":[3017,3127]},{"content":"It can only be of type DbNewInstanceExpression representing a row, with each of its arguments being a DbPropertyExpression over a DbVariableReferenceExpression representing a reference to the Target of the corresponding DbModificationCommandTree.","pos":[3128,3374]},{"content":"The properties represented by the DbPropertyExpressions used in the property Returning are always store generated or computed values.","pos":[3375,3508]},{"content":"In DbInsertCommandTree, Returning is not null when at least one property of the table in which the row is being inserted is specified as store generated or computed (marked as StoreGeneratedPattern.Identity or StoreGeneratedPattern.Computed in the ssdl).","pos":[3509,3763]},{"content":"In DbUpdateCommandTrees, Returning is not null when at least one property of the table in which the row is being updated is specified as store computed (marked as StoreGeneratedPattern.Computed in the ssdl).","pos":[3764,3971]},{"pos":[3978,4035],"content":"SetClauses in DbInsertCommandTree and DbUpdateCommandTree","linkify":"SetClauses in DbInsertCommandTree and DbUpdateCommandTree","nodes":[{"content":"SetClauses in DbInsertCommandTree and DbUpdateCommandTree","pos":[0,57]}]},{"content":"SetClauses specifies the list of insert or update set clauses that define the insert or update operation.","pos":[4037,4142]},{"content":"Property specifies the property that should be updated.","pos":[4534,4589]},{"content":"It is always a DbPropertyExpression over a DbVariableReferenceExpression, which represents a reference to the Target of the corresponding DbModificationCommandTree.","pos":[4590,4754]},{"content":"Value specifies the new value with which to update the property.","pos":[4756,4820]},{"content":"It is either of type DbConstantExpression or DbNullExpression.","pos":[4821,4883]},{"pos":[4890,4946],"content":"Predicate in DbUpdateCommandTree and DbDeleteCommandTree","linkify":"Predicate in DbUpdateCommandTree and DbDeleteCommandTree","nodes":[{"content":"Predicate in DbUpdateCommandTree and DbDeleteCommandTree","pos":[0,56]}]},{"content":"Predicate specifies the predicate used to determine which members of the target collection should be updated or deleted.","pos":[4948,5068]},{"content":"It is an expression tree built of the following subset of DbExpressions:","pos":[5069,5141]},{"content":"DbComparisonExpression of kind Equals, with the right child being a DbPropertyExpression as restricted below and the left child a DbConstantExpression.","pos":[5145,5296]},{"content":"DbConstantExpression","pos":[5300,5320]},{"content":"DbIsNullExpression over a DbPropertyExpression as restricted below","pos":[5324,5390]},{"content":"DbPropertyExpression over a DbVariableReferenceExpression representing a reference to the Target of the corresponding DbModificationCommandTree.","pos":[5394,5538]},{"content":"DbAndExpression","pos":[5542,5557]},{"content":"DbNotExpression","pos":[5561,5576]},{"content":"DbOrExpression","pos":[5580,5594]},{"pos":[5599,5649],"content":"Modification SQL Generation in the Sample Provider","linkify":"Modification SQL Generation in the Sample Provider","nodes":[{"content":"Modification SQL Generation in the Sample Provider","pos":[0,50]}]},{"content":"The <bpt id=\"p1\">[</bpt>Entity Framework Sample Provider<ept id=\"p1\">](https://code.msdn.microsoft.com/windowsdesktop/Entity-Framework-Sample-6a9801d0)</ept> demonstrates the components of ADO.NET Data Providers that support the <ph id=\"ph1\">[!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)]</ph>.","pos":[5651,5905],"source":"The [Entity Framework Sample Provider](https://code.msdn.microsoft.com/windowsdesktop/Entity-Framework-Sample-6a9801d0) demonstrates the components of ADO.NET Data Providers that support the [!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)]."},{"content":"It targets a SQL Server 2005 database and is implemented as a wrapper on top of System.Data.SqlClient ADO.NET 2.0 Data Provider.","pos":[5906,6034]},{"content":"The modification SQL generation module of the sample provider (located in the file SQL Generation\\DmlSqlGenerator.cs) takes an input DbModificationCommandTree and produces a single modification SQL statement possibly followed by a select statement to return a reader if specified by the DbModificationCommandTree.","pos":[6036,6349]},{"content":"Note that the shape of the commands generated is affected by the target SQL Server database.","pos":[6350,6442]},{"pos":[6448,6484],"content":"Helper Classes: ExpressionTranslator","linkify":"Helper Classes: ExpressionTranslator","nodes":[{"content":"Helper Classes: ExpressionTranslator","pos":[0,36]}]},{"content":"ExpressionTranslator serves as a common lightweight translator for all modification command tree properties of type DbExpression.","pos":[6486,6615]},{"content":"It supports translation of only the expression types to which the properties of the modification command tree are constrained and is built with the particular constraints in mind.","pos":[6616,6795]},{"content":"The following information discusses visiting specific expression types (nodes with trivial translations are omitted).","pos":[6797,6914]},{"pos":[6920,6942],"content":"DbComparisonExpression","linkify":"DbComparisonExpression","nodes":[{"content":"DbComparisonExpression","pos":[0,22]}]},{"content":"When the ExpressionTranslator is constructed with preserveMemberValues = true, and when the constant to the right is a DbConstantExpression (instead of DbNullExpression), it associates the left operand (a DbPropertyExpressions) with that DbConstantExpression.","pos":[6944,7203]},{"content":"That is used if a return Select statement needs to be generated to identify the affected row.","pos":[7204,7297]},{"pos":[7303,7323],"content":"DbConstantExpression","linkify":"DbConstantExpression","nodes":[{"content":"DbConstantExpression","pos":[0,20]}]},{"content":"For each visited constant a parameter is created.","pos":[7325,7374]},{"pos":[7380,7400],"content":"DbPropertyExpression","linkify":"DbPropertyExpression","nodes":[{"content":"DbPropertyExpression","pos":[0,20]}]},{"content":"Given that the Instance of the DbPropertyExpression always represents the input table, unless the generation has created an alias (which only happens in update scenarios when a table variable is used), no alias needs to be specified for the input; the translation defaults to the property name.","pos":[7402,7696]},{"pos":[7701,7733],"content":"Generating an Insert SQL Command","linkify":"Generating an Insert SQL Command","nodes":[{"content":"Generating an Insert SQL Command","pos":[0,32]}]},{"content":"For a given DbInsertCommandTree in the sample provider, the generated insert command follows one of the two insert templates below.","pos":[7735,7866]},{"content":"The first template has a command to perform the insert given the values in the list of SetClauses, and a SELECT statement to return the properties specified in the Returning property for the inserted row if the Returning property was not null.","pos":[7868,8111]},{"content":"The predicate element \"<ph id=\"ph1\">\\@</ph><ph id=\"ph2\">@ROWCOUNT</ph> &gt; 0\" is true if a row was inserted.","pos":[8112,8182],"source":" The predicate element \"\\@@ROWCOUNT > 0\" is true if a row was inserted."},{"content":"The predicate element \"keyMemberI =  keyValueI &amp;#124; scope_identity()\" takes the shape  \"keyMemberI =  scope_identity()\" only if keyMemberI is a store-generated key, because scope_identity() returns the last identity value inserted into an identity (store-generated) column.","pos":[8183,8458],"source":" The predicate element \"keyMemberI =  keyValueI &#124; scope_identity()\" takes the shape  \"keyMemberI =  scope_identity()\" only if keyMemberI is a store-generated key, because scope_identity() returns the last identity value inserted into an identity (store-generated) column."},{"content":"The second template is needed if the insert specifies inserting a row where the primary key is store-generated but is not an integer type and therefore can't be used with scope_identity()).","pos":[8793,8982]},{"content":"It is also used if there is a compound store-generated key.","pos":[8983,9042]},{"content":"The following is an example that uses the model that is included with the sample provider.","pos":[9505,9595]},{"content":"It generates an insert command from a DbInsertCommandTree.","pos":[9596,9654]},{"content":"The following code inserts a Category:","pos":[9656,9694]},{"content":"This code produces the following command tree, which is passed to the provider:","pos":[9985,10064]},{"content":"The store command that the sample provider produces is the following SQL statement:","pos":[10583,10666]},{"pos":[10876,10908],"content":"Generating an Update SQL Command","linkify":"Generating an Update SQL Command","nodes":[{"content":"Generating an Update SQL Command","pos":[0,32]}]},{"content":"For a given DbUpdateCommandTree, the generated update command is based on the following template:","pos":[10910,11007]},{"content":"The set clause has the fake set clause (\"<ph id=\"ph1\">@i</ph> = 0\") only if no set clauses are specified.","pos":[11334,11421],"source":"The set clause has the fake set clause (\"@i = 0\") only if no set clauses are specified."},{"content":"This is to ensure that any store-computed columns are recomputed.","pos":[11422,11487]},{"content":"Only if the Returning property is not null, a select statement is generated to return the properties specified in the Returning property.","pos":[11489,11626]},{"content":"The following example uses the model that is included with the sample provider to generate an update command.","pos":[11628,11737]},{"content":"The following user code updates a Category:","pos":[11739,11782]},{"content":"This user code produces the following command tree, which is passed to the provider:","pos":[12043,12127]},{"content":"The sample provider produces the following store command:","pos":[12405,12462]},{"pos":[12558,12589],"content":"Generating a Delete SQL Command","linkify":"Generating a Delete SQL Command","nodes":[{"content":"Generating a Delete SQL Command","pos":[0,31]}]},{"content":"For a given DbDeleteCommandTree, the generated DELETE command is based on the following template:","pos":[12591,12688]},{"content":"The following example uses the model that is included with the sample provider to generate a delete command.","pos":[12755,12863]},{"content":"The following user code deletes a Category:","pos":[12865,12908]},{"content":"This user code produces the following command tree, which is passed to the provider.","pos":[13169,13253]},{"content":"The following store command is produced by the sample provider:","pos":[13406,13469]},{"pos":[13539,13547],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[13551,13671],"content":"<bpt id=\"p1\">[</bpt>Writing an Entity Framework Data Provider<ept id=\"p1\">](../../../../../docs/framework/data/adonet/ef/writing-an-ef-data-provider.md)</ept>","source":"[Writing an Entity Framework Data Provider](../../../../../docs/framework/data/adonet/ef/writing-an-ef-data-provider.md)"}]}