<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="special-characters-in-code.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65fcd10521742e287c7934080b3352a06668df7a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\program-structure\special-characters-in-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a22bff87c9da558ab7e0d54325b0f3eebd1c264</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bcbc022ed6e6d27cd609c137365f688f3cde738</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Special Characters in Code (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Special Characters in Code (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sometimes you have to use special characters in your code, that is, characters that are not alphabetical or numeric.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The punctuation and special characters in the Visual Basic character set have various uses, from organizing program text to defining the tasks that the compiler or the compiled program performs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They do not specify an operation to be performed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parentheses</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use parentheses when you define a procedure, such as a <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You must enclose all procedure argument lists in parentheses.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You also use parentheses for putting variables or arguments into logical groups, especially to override the default order of operator precedence in a complex expression.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Following execution of the previous code, the value of <ph id="ph1">`d`</ph> is 8.225 and the value of <ph id="ph2">`e`</ph> is 3.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The calculation for <ph id="ph1">`d`</ph> uses the default precedence of <ph id="ph2">`/`</ph> over <ph id="ph3">`+`</ph> and is equivalent to <ph id="ph4">`d = b + (c / a)`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The parentheses in the calculation for <ph id="ph1">`e`</ph> override the default precedence.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Separators</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Separators do what their name suggests: they separate sections of code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In Visual Basic, the separator character is the colon (<ph id="ph1">`:`</ph>).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use separators when you want to include multiple statements on a single line instead of separate lines.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This saves space and improves the readability of your code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example shows three statements separated by colons.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Break and Combine Statements in Code<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The colon (<ph id="ph1">`:`</ph>) character is also used to identify a statement label.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Label Statements<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Concatenation</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`&amp;`</ph> operator for <bpt id="p1">*</bpt>concatenation<ept id="p1">*</ept>, or linking strings together.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Do not confuse it with the <ph id="ph1">`+`</ph> operator, which adds together numeric values.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">`+`</ph> operator to concatenate when you operate on numeric values, you can obtain incorrect results.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Following execution of the previous code, the value of <ph id="ph1">`resultA`</ph> is 21.01 and the value of <ph id="ph2">`resultB`</ph> is "10.0111".</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Member Access Operators</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To access a member of a type, you use the dot (<ph id="ph1">`.`</ph>) or exclamation point (<ph id="ph2">`!`</ph>) operator between the type name and the member name.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Dot (.) Operator</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`.`</ph> operator on a class, structure, interface, or enumeration as a member access operator.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The member can be a field, property, event, or method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Exclamation Point (!) Operator</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`!`</ph> operator only on a class or interface as a dictionary access operator.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The class or interface must have a default property that accepts a single <ph id="ph1">`String`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The identifier immediately following the <ph id="ph1">`!`</ph> operator becomes the argument value passed to the default property as a string.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The three output lines of <ph id="ph1">`MsgBox`</ph> all display the value <ph id="ph2">`32856`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The first line uses the traditional access to property <ph id="ph1">`index`</ph>, the second makes use of the fact that <ph id="ph2">`index`</ph> is the default property of class <ph id="ph3">`hasDefault`</ph>, and the third uses dictionary access to the class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Note that the second operand of the <ph id="ph1">`!`</ph> operator must be a valid Visual Basic identifier not enclosed in double quotation marks (<ph id="ph2">`" "`</ph>).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In other words, you cannot use a string literal or string variable.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following change to the last line of the <ph id="ph1">`MsgBox`</ph> call generates an error because <ph id="ph2">`"X"`</ph> is an enclosed string literal.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>References to default collections must be explicit.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In particular, you cannot use the <ph id="ph1">`!`</ph> operator on a late-bound variable.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`!`</ph> character is also used as the <ph id="ph2">`Single`</ph> type character.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Program Structure and Code Conventions<ept id="p1">](../../../visual-basic/programming-guide/program-structure/program-structure-and-code-conventions.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Characters<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>