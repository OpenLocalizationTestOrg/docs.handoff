{"content":"---\ntitle: \"IsFalse Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.isfalse\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"AndAlso operator\"\n  - \"IsFalse operator\"\nms.assetid: 37fc9dbf-e5cc-4570-b93f-7213447974df\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IsFalse Operator (Visual Basic)\nDetermines whether an expression is `False`.  \n  \n You cannot call `IsFalse` explicitly in your code, but the Visual Basic compiler can use it to generate code from `AndAlso` clauses. If you define a class or structure and then use a variable of that type in an `AndAlso` clause, you must define `IsFalse` on that class or structure.  \n  \n The compiler considers the `IsFalse` and `IsTrue` operators as a *matched pair*. This means that if you define one of them, you must also define the other one.  \n  \n> [!NOTE]\n>  The `IsFalse` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following code example defines the outline of a structure that includes definitions for the `IsFalse` and `IsTrue` operators.  \n  \n [!code-vb[VbVbalrOperators#28](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/isfalse-operator_1.vb)]  \n  \n## See Also  \n [IsTrue Operator](../../../visual-basic/language-reference/operators/istrue-operator.md)   \n [How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)   \n [AndAlso Operator](../../../visual-basic/language-reference/operators/andalso-operator.md)","nodes":[{"pos":[12,60],"content":"IsFalse Operator (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IsFalse Operator (Visual Basic) | Microsoft Docs","pos":[0,48]}]},{"pos":[619,650],"content":"IsFalse Operator (Visual Basic)","linkify":"IsFalse Operator (Visual Basic)","nodes":[{"content":"IsFalse Operator (Visual Basic)","pos":[0,31]}]},{"pos":[651,695],"content":"Determines whether an expression is <ph id=\"ph1\">`False`</ph>.","source":"Determines whether an expression is `False`."},{"content":"You cannot call <ph id=\"ph1\">`IsFalse`</ph> explicitly in your code, but the Visual Basic compiler can use it to generate code from <ph id=\"ph2\">`AndAlso`</ph> clauses.","pos":[702,834],"source":"You cannot call `IsFalse` explicitly in your code, but the Visual Basic compiler can use it to generate code from `AndAlso` clauses."},{"content":"If you define a class or structure and then use a variable of that type in an <ph id=\"ph1\">`AndAlso`</ph> clause, you must define <ph id=\"ph2\">`IsFalse`</ph> on that class or structure.","pos":[835,984],"source":" If you define a class or structure and then use a variable of that type in an `AndAlso` clause, you must define `IsFalse` on that class or structure."},{"content":"The compiler considers the <ph id=\"ph1\">`IsFalse`</ph> and <ph id=\"ph2\">`IsTrue`</ph> operators as a <bpt id=\"p1\">*</bpt>matched pair<ept id=\"p1\">*</ept>.","pos":[991,1071],"source":"The compiler considers the `IsFalse` and `IsTrue` operators as a *matched pair*."},{"content":"This means that if you define one of them, you must also define the other one.","pos":[1072,1150]},{"pos":[1158,1585],"content":"[!NOTE]\n The `IsFalse` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":" The `IsFalse` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[8,425],"nodes":[{"content":"The <ph id=\"ph1\">`IsFalse`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure.","pos":[1,166],"source":" The `IsFalse` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[167,275]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[276,417],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[1594,1601],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1605,1734],"content":"The following code example defines the outline of a structure that includes definitions for the <ph id=\"ph1\">`IsFalse`</ph> and <ph id=\"ph2\">`IsTrue`</ph> operators.","source":"The following code example defines the outline of a structure that includes definitions for the `IsFalse` and `IsTrue` operators."},{"pos":[1741,1870],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#28<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/isfalse-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#28](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/isfalse-operator_1.vb)]"},{"pos":[1879,1887],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>IsTrue Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/istrue-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[1891,1980],"source":"[IsTrue Operator](../../../visual-basic/language-reference/operators/istrue-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Define an Operator<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[1983,2112],"source":" [How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>AndAlso Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/andalso-operator.md)</ept>","pos":[2115,2206],"source":" [AndAlso Operator](../../../visual-basic/language-reference/operators/andalso-operator.md)"}]}