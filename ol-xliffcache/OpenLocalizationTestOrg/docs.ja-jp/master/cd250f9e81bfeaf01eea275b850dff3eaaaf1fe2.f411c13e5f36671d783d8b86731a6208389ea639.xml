{"content":"---\ntitle: \"Compiler Warning (level 2) CS0728 | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"CS0728\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS0728\"\nms.assetid: ad6d860d-bac4-48f3-9eab-1efd2b6de6c0\ncaps.latest.revision: 12\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Warning (level 2) CS0728\nPossibly incorrect assignment to local 'variable' which is the argument to a using or lock statement.  The Dispose call or unlocking will happen on the original value of the local.  \n  \n There are several scenarios where `using` or `lock` blocks will result in a temporary leak of resources. Here is one example:  \n  \n `thisType f = null;`  \n  \n `using (f)`  \n  \n `{`  \n  \n `f = new thisType();`  \n  \n `...`  \n  \n `}`  \n  \n In this case, the original value, such as null, of the variable `thisType` will be disposed of when the `using` block finishes executing, but the `thisType` object created inside the block will not be, although it will eventually get garbage collected.  \n  \n To resolve this error, use the following form:  \n  \n `using (thisType f = new thisType())`  \n  \n `{`  \n  \n `...`  \n  \n `}`  \n  \n In this case, the newly allocated `thisType` object will be disposed of.  \n  \n## Example  \n The following code will generate warning CS0728.  \n  \n```  \n// CS0728.cs  \n  \nusing System;  \npublic class ValidBase : IDisposable  \n{  \n    public void Dispose() {  }  \n}  \n  \npublic class Logger  \n{  \n    public static void dummy()  \n    {  \n        ValidBase vb = null;  \n        using (vb)   \n        {  \n            vb = null;  // CS0728  \n        }  \n        vb = null;  \n    }  \n    public static void Main() { }  \n}  \n```","nodes":[{"pos":[12,62],"content":"Compiler Warning (level 2) CS0728 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 2) CS0728 | Microsoft Docs","pos":[0,50]}]},{"pos":[578,611],"content":"Compiler Warning (level 2) CS0728","linkify":"Compiler Warning (level 2) CS0728","nodes":[{"content":"Compiler Warning (level 2) CS0728","pos":[0,33]}]},{"content":"Possibly incorrect assignment to local 'variable' which is the argument to a using or lock statement.","pos":[612,713]},{"content":"The Dispose call or unlocking will happen on the original value of the local.","pos":[715,792]},{"content":"There are several scenarios where <ph id=\"ph1\">`using`</ph> or <ph id=\"ph2\">`lock`</ph> blocks will result in a temporary leak of resources.","pos":[799,903],"source":"There are several scenarios where `using` or `lock` blocks will result in a temporary leak of resources."},{"content":"Here is one example:","pos":[904,924]},{"pos":[1036,1288],"content":"In this case, the original value, such as null, of the variable <ph id=\"ph1\">`thisType`</ph> will be disposed of when the <ph id=\"ph2\">`using`</ph> block finishes executing, but the <ph id=\"ph3\">`thisType`</ph> object created inside the block will not be, although it will eventually get garbage collected.","source":"In this case, the original value, such as null, of the variable `thisType` will be disposed of when the `using` block finishes executing, but the `thisType` object created inside the block will not be, although it will eventually get garbage collected."},{"content":"To resolve this error, use the following form:","pos":[1295,1341]},{"pos":[1424,1496],"content":"In this case, the newly allocated <ph id=\"ph1\">`thisType`</ph> object will be disposed of.","source":"In this case, the newly allocated `thisType` object will be disposed of."},{"pos":[1505,1512],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code will generate warning CS0728.","pos":[1516,1564]}]}