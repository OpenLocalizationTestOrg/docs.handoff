{"content":"---\ntitle: \"Properties - C# Programming Guide\"\nms.custom: seodec18\nms.date: 03/10/2017\nf1_keywords: \n  - \"cs.properties\"\nhelpviewer_keywords: \n  - \"properties [C#]\"\n  - \"C# language, properties\"\nms.assetid: e295a8a2-b357-4ee7-a12e-385a44146fa8\n---\n# Properties (C# Programming Guide)\n\nA property is a member that provides a flexible mechanism to read, write, or compute the value of a private field. Properties can be used as if they are public data members, but they are actually special methods called *accessors*. This enables data to be accessed easily and still helps promote the safety and flexibility of methods.  \n\n## Properties overview  \n  \n- Properties enable a class to expose a public way of getting and setting values, while hiding implementation or verification code.  \n  \n- A [get](../../../csharp/language-reference/keywords/get.md) property accessor is used to return the property value, and a [set](../../../csharp/language-reference/keywords/set.md) property accessor is used to assign a new value. These accessors can have different access levels. For more information, see [Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md).  \n  \n- The [value](../../../csharp/language-reference/keywords/value.md) keyword is used to define the value being assigned by the `set` accessor.  \n- Properties can be *read-write* (they have both a `get` and a `set` accessor), *read-only* (they have a `get` accessor but no `set` accessor), or *write-only* (they have a `set` accessor, but no `get` accessor). Write-only properties are rare and are most commonly used to restrict access to sensitive data.\n\n- Simple properties that require no custom accessor code can be implemented either as expression body definitions or as [auto-implemented properties](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md).\n \n## Properties with backing fields\n\nOne basic pattern for implementing a property involves using a private backing field for setting and retrieving the property value. The `get` accessor returns the value of the private field, and the `set` accessor may perform some data validation before assigning a value to the private field. Both accessors may also perform some conversion or computation on the data before it is stored or returned.\n\nThe following example illustrates this pattern. In this example, the `TimePeriod` class represents an interval of time. Internally, the class stores the time interval in seconds in a private field named `_seconds`. A read-write property named `Hours` allows the customer to specify the time interval in hours. Both the `get` and the `set` accessors perform the necessary conversion between hours and seconds. In addition, the `set` accessor validates the data and throws an <xref:System.ArgumentOutOfRangeException> if the number of hours is invalid. \n   \n [!code-csharp[Properties#1](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/properties-1.cs)]  \n  \n## Expression body definitions  \n\n Property accessors often consist of single-line statements that just assign or return the result of an expression. You can implement these properties as expression-bodied members. Expression body definitions consist of the `=>` symbol followed by the expression to assign to or retrieve from the property.\n\n Starting with C# 6, read-only properties can implement the `get` accessor as an expression-bodied member. In this case, neither the `get` accessor keyword nor the `return` keyword is used. The following example implements the read-only `Name` property as an expression-bodied member.\n\n [!code-csharp[Properties#2](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/properties-2.cs)]  \n\n Starting with C# 7.0, both the `get` and the `set` accessor can be implemented as expression-bodied members. In this case, the `get` and `set` keywords must be present. The following example illustrates the use of expression body definitions for both accessors. Note that the `return` keyword is not used with the `get` accessor.\n \n  [!code-csharp[Properties#3](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/properties-3.cs)]  \n\n## Auto-implemented properties\n\nIn some cases, property `get` and `set` accessors just assign a value to or retrieve a value from a backing field without including any additional logic. By using auto-implemented properties, you can simplify your code while having the C# compiler transparently provide the backing field for you. \n\nIf a property has both a `get` and a `set` accessor, both must be auto-implemented. You define an auto-implemented property by using the `get` and `set` keywords without providing any implementation. The following example repeats the previous one, except that `Name` and `Price` are auto-implemented properties. Note that the example also removes the parameterized constructor, so that `SaleItem` objects are now initialized with a call to the default constructor and an [object initializer](object-and-collection-initializers.md).\n\n  [!code-csharp[Properties#4](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/properties-4.cs)]  \n\n## Related sections  \n  \n-   [Using Properties](../../../csharp/programming-guide/classes-and-structs/using-properties.md)  \n  \n-   [Interface Properties](../../../csharp/programming-guide/classes-and-structs/interface-properties.md)  \n  \n-   [Comparison Between Properties and Indexers](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)  \n  \n-   [Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)  \n  \n-   [Auto-Implemented Properties](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)  \n  \n## C# Language Specification  \n\nFor more information, see [Properties](~/_csharplang/spec/classes.md#properties) in the [C# Language Specification](../../language-reference/language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Using Properties](../../../csharp/programming-guide/classes-and-structs/using-properties.md)\n- [Indexers](../../../csharp/programming-guide/indexers/index.md)\n- [get keyword](../../../csharp/language-reference/keywords/get.md)\n- [set keyword](../../../csharp/language-reference/keywords/set.md)\n","nodes":[{"pos":[4,243],"embed":true,"restype":"x-metadata","content":"title: \"Properties - C# Programming Guide\"\nms.custom: seodec18\nms.date: 03/10/2017\nf1_keywords: \n  - \"cs.properties\"\nhelpviewer_keywords: \n  - \"properties [C#]\"\n  - \"C# language, properties\"\nms.assetid: e295a8a2-b357-4ee7-a12e-385a44146fa8","nodes":[{"content":"Properties - C# Programming Guide","nodes":[{"pos":[0,33],"content":"Properties - C# Programming Guide","nodes":[{"content":"Properties - C# Programming Guide","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[250,283],"content":"Properties (C# Programming Guide)","linkify":"Properties (C# Programming Guide)","nodes":[{"content":"Properties (C# Programming Guide)","pos":[0,33]}]},{"content":"A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field.","pos":[285,399]},{"content":"Properties can be used as if they are public data members, but they are actually special methods called <bpt id=\"p1\">*</bpt>accessors<ept id=\"p1\">*</ept>.","pos":[400,516],"source":" Properties can be used as if they are public data members, but they are actually special methods called *accessors*."},{"content":"This enables data to be accessed easily and still helps promote the safety and flexibility of methods.","pos":[517,619]},{"pos":[626,645],"content":"Properties overview","linkify":"Properties overview","nodes":[{"content":"Properties overview","pos":[0,19]}]},{"content":"Properties enable a class to expose a public way of getting and setting values, while hiding implementation or verification code.","pos":[653,782]},{"content":"A <bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](../../../csharp/language-reference/keywords/get.md)</ept> property accessor is used to return the property value, and a <bpt id=\"p2\">[</bpt>set<ept id=\"p2\">](../../../csharp/language-reference/keywords/set.md)</ept> property accessor is used to assign a new value.","pos":[790,1018],"source":"A [get](../../../csharp/language-reference/keywords/get.md) property accessor is used to return the property value, and a [set](../../../csharp/language-reference/keywords/set.md) property accessor is used to assign a new value."},{"content":"These accessors can have different access levels.","pos":[1019,1068]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Restricting Accessor Accessibility<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept>.","pos":[1069,1225],"source":" For more information, see [Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)."},{"pos":[1233,1372],"content":"The <bpt id=\"p1\">[</bpt>value<ept id=\"p1\">](../../../csharp/language-reference/keywords/value.md)</ept> keyword is used to define the value being assigned by the <ph id=\"ph1\">`set`</ph> accessor.","source":"The [value](../../../csharp/language-reference/keywords/value.md) keyword is used to define the value being assigned by the `set` accessor."},{"content":"Properties can be <bpt id=\"p1\">*</bpt>read-write<ept id=\"p1\">*</ept> (they have both a <ph id=\"ph1\">`get`</ph> and a <ph id=\"ph2\">`set`</ph> accessor), <bpt id=\"p2\">*</bpt>read-only<ept id=\"p2\">*</ept> (they have a <ph id=\"ph3\">`get`</ph> accessor but no <ph id=\"ph4\">`set`</ph> accessor), or <bpt id=\"p3\">*</bpt>write-only<ept id=\"p3\">*</ept> (they have a <ph id=\"ph5\">`set`</ph> accessor, but no <ph id=\"ph6\">`get`</ph> accessor).","pos":[1377,1587],"source":"Properties can be *read-write* (they have both a `get` and a `set` accessor), *read-only* (they have a `get` accessor but no `set` accessor), or *write-only* (they have a `set` accessor, but no `get` accessor)."},{"content":"Write-only properties are rare and are most commonly used to restrict access to sensitive data.","pos":[1588,1683]},{"pos":[1687,1921],"content":"Simple properties that require no custom accessor code can be implemented either as expression body definitions or as <bpt id=\"p1\">[</bpt>auto-implemented properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)</ept>.","source":"Simple properties that require no custom accessor code can be implemented either as expression body definitions or as [auto-implemented properties](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)."},{"pos":[1927,1957],"content":"Properties with backing fields","linkify":"Properties with backing fields","nodes":[{"content":"Properties with backing fields","pos":[0,30]}]},{"content":"One basic pattern for implementing a property involves using a private backing field for setting and retrieving the property value.","pos":[1959,2090]},{"content":"The <ph id=\"ph1\">`get`</ph> accessor returns the value of the private field, and the <ph id=\"ph2\">`set`</ph> accessor may perform some data validation before assigning a value to the private field.","pos":[2091,2252],"source":" The `get` accessor returns the value of the private field, and the `set` accessor may perform some data validation before assigning a value to the private field."},{"content":"Both accessors may also perform some conversion or computation on the data before it is stored or returned.","pos":[2253,2360]},{"content":"The following example illustrates this pattern.","pos":[2362,2409]},{"content":"In this example, the <ph id=\"ph1\">`TimePeriod`</ph> class represents an interval of time.","pos":[2410,2481],"source":" In this example, the `TimePeriod` class represents an interval of time."},{"content":"Internally, the class stores the time interval in seconds in a private field named <ph id=\"ph1\">`_seconds`</ph>.","pos":[2482,2576],"source":" Internally, the class stores the time interval in seconds in a private field named `_seconds`."},{"content":"A read-write property named <ph id=\"ph1\">`Hours`</ph> allows the customer to specify the time interval in hours.","pos":[2577,2671],"source":" A read-write property named `Hours` allows the customer to specify the time interval in hours."},{"content":"Both the <ph id=\"ph1\">`get`</ph> and the <ph id=\"ph2\">`set`</ph> accessors perform the necessary conversion between hours and seconds.","pos":[2672,2770],"source":" Both the `get` and the `set` accessors perform the necessary conversion between hours and seconds."},{"content":"In addition, the <ph id=\"ph1\">`set`</ph> accessor validates the data and throws an <ph id=\"ph2\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> if the number of hours is invalid.","pos":[2771,2912],"source":" In addition, the `set` accessor validates the data and throws an <xref:System.ArgumentOutOfRangeException> if the number of hours is invalid."},{"pos":[3047,3074],"content":"Expression body definitions","linkify":"Expression body definitions","nodes":[{"content":"Expression body definitions","pos":[0,27]}]},{"content":"Property accessors often consist of single-line statements that just assign or return the result of an expression.","pos":[3079,3193]},{"content":"You can implement these properties as expression-bodied members.","pos":[3194,3258]},{"content":"Expression body definitions consist of the <ph id=\"ph1\">`=&gt;`</ph> symbol followed by the expression to assign to or retrieve from the property.","pos":[3259,3384],"source":" Expression body definitions consist of the `=>` symbol followed by the expression to assign to or retrieve from the property."},{"content":"Starting with C# 6, read-only properties can implement the <ph id=\"ph1\">`get`</ph> accessor as an expression-bodied member.","pos":[3387,3492],"source":"Starting with C# 6, read-only properties can implement the `get` accessor as an expression-bodied member."},{"content":"In this case, neither the <ph id=\"ph1\">`get`</ph> accessor keyword nor the <ph id=\"ph2\">`return`</ph> keyword is used.","pos":[3493,3575],"source":" In this case, neither the `get` accessor keyword nor the `return` keyword is used."},{"content":"The following example implements the read-only <ph id=\"ph1\">`Name`</ph> property as an expression-bodied member.","pos":[3576,3670],"source":" The following example implements the read-only `Name` property as an expression-bodied member."},{"content":"Starting with C# 7.0, both the <ph id=\"ph1\">`get`</ph> and the <ph id=\"ph2\">`set`</ph> accessor can be implemented as expression-bodied members.","pos":[3797,3905],"source":"Starting with C# 7.0, both the `get` and the `set` accessor can be implemented as expression-bodied members."},{"content":"In this case, the <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> keywords must be present.","pos":[3906,3965],"source":" In this case, the `get` and `set` keywords must be present."},{"content":"The following example illustrates the use of expression body definitions for both accessors.","pos":[3966,4058]},{"content":"Note that the <ph id=\"ph1\">`return`</ph> keyword is not used with the <ph id=\"ph2\">`get`</ph> accessor.","pos":[4059,4126],"source":" Note that the `return` keyword is not used with the `get` accessor."},{"pos":[4257,4284],"content":"Auto-implemented properties","linkify":"Auto-implemented properties","nodes":[{"content":"Auto-implemented properties","pos":[0,27]}]},{"content":"In some cases, property <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors just assign a value to or retrieve a value from a backing field without including any additional logic.","pos":[4286,4439],"source":"In some cases, property `get` and `set` accessors just assign a value to or retrieve a value from a backing field without including any additional logic."},{"content":"By using auto-implemented properties, you can simplify your code while having the C# compiler transparently provide the backing field for you.","pos":[4440,4582]},{"content":"If a property has both a <ph id=\"ph1\">`get`</ph> and a <ph id=\"ph2\">`set`</ph> accessor, both must be auto-implemented.","pos":[4585,4668],"source":"If a property has both a `get` and a `set` accessor, both must be auto-implemented."},{"content":"You define an auto-implemented property by using the <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> keywords without providing any implementation.","pos":[4669,4784],"source":" You define an auto-implemented property by using the `get` and `set` keywords without providing any implementation."},{"content":"The following example repeats the previous one, except that <ph id=\"ph1\">`Name`</ph> and <ph id=\"ph2\">`Price`</ph> are auto-implemented properties.","pos":[4785,4896],"source":" The following example repeats the previous one, except that `Name` and `Price` are auto-implemented properties."},{"content":"Note that the example also removes the parameterized constructor, so that <ph id=\"ph1\">`SaleItem`</ph> objects are now initialized with a call to the default constructor and an <bpt id=\"p1\">[</bpt>object initializer<ept id=\"p1\">](object-and-collection-initializers.md)</ept>.","pos":[4897,5116],"source":" Note that the example also removes the parameterized constructor, so that `SaleItem` objects are now initialized with a call to the default constructor and an [object initializer](object-and-collection-initializers.md)."},{"pos":[5246,5262],"content":"Related sections","linkify":"Related sections","nodes":[{"content":"Related sections","pos":[0,16]}]},{"pos":[5272,5365],"content":"<bpt id=\"p1\">[</bpt>Using Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/using-properties.md)</ept>","source":"[Using Properties](../../../csharp/programming-guide/classes-and-structs/using-properties.md)"},{"pos":[5375,5476],"content":"<bpt id=\"p1\">[</bpt>Interface Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/interface-properties.md)</ept>","source":"[Interface Properties](../../../csharp/programming-guide/classes-and-structs/interface-properties.md)"},{"pos":[5486,5620],"content":"<bpt id=\"p1\">[</bpt>Comparison Between Properties and Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)</ept>","source":"[Comparison Between Properties and Indexers](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)"},{"pos":[5630,5759],"content":"<bpt id=\"p1\">[</bpt>Restricting Accessor Accessibility<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept>","source":"[Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)"},{"pos":[5769,5884],"content":"<bpt id=\"p1\">[</bpt>Auto-Implemented Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)</ept>","source":"[Auto-Implemented Properties](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)"},{"pos":[5893,5918],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](~/_csharplang/spec/classes.md#properties)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../../language-reference/language-specification/index.md)</ept>.","pos":[5922,6096],"source":"For more information, see [Properties](~/_csharplang/spec/classes.md#properties) in the [C# Language Specification](../../language-reference/language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[6097,6173]},{"pos":[6180,6188],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6192,6258],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[6261,6354],"content":"<bpt id=\"p1\">[</bpt>Using Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/using-properties.md)</ept>","source":"[Using Properties](../../../csharp/programming-guide/classes-and-structs/using-properties.md)"},{"pos":[6357,6420],"content":"<bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md)</ept>","source":"[Indexers](../../../csharp/programming-guide/indexers/index.md)"},{"pos":[6423,6488],"content":"<bpt id=\"p1\">[</bpt>get keyword<ept id=\"p1\">](../../../csharp/language-reference/keywords/get.md)</ept>","source":"[get keyword](../../../csharp/language-reference/keywords/get.md)"},{"pos":[6491,6556],"content":"<bpt id=\"p1\">[</bpt>set keyword<ept id=\"p1\">](../../../csharp/language-reference/keywords/set.md)</ept>","source":"[set keyword](../../../csharp/language-reference/keywords/set.md)"}]}