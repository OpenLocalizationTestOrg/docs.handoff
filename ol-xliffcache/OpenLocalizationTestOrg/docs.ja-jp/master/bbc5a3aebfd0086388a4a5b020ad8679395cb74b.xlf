<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbc5a3aebfd0086388a4a5b020ad8679395cb74b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\types\how-to-convert-between-hexadecimal-strings-and-numeric-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">375a4255b8304c3c1ce02b27758ce5e79dbf8e9f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08d7657594af541dbcdc494f123d583d1fb91ab6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Convert Between Hexadecimal Strings and Numeric Types (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Convert Between Hexadecimal Strings and Numeric Types (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These examples show you how to perform the following tasks:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Obtain the hexadecimal value of each character in a <bpt id="p1">[</bpt>string<ept id="p1">](../../../csharp/language-reference/keywords/string.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Obtain the <bpt id="p1">[</bpt>char<ept id="p1">](../../../csharp/language-reference/keywords/char.md)</ept> that corresponds to each value in a hexadecimal string.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Convert a hexadecimal <ph id="ph1">`string`</ph> to an <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Convert a hexadecimal <ph id="ph1">`string`</ph> to a <bpt id="p1">[</bpt>float<ept id="p1">](../../../csharp/language-reference/keywords/float.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Convert a <bpt id="p1">[</bpt>byte<ept id="p1">](../../../csharp/language-reference/keywords/byte.md)</ept> array to a hexadecimal <ph id="ph1">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example outputs the hexadecimal value of each character in a <ph id="ph1">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>First it parses the <ph id="ph1">`string`</ph> to an array of characters.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Then it calls <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Char%29&gt;</ph> on each character to obtain its numeric value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Finally, it formats the number as its hexadecimal representation in a <ph id="ph1">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideTypes#30<ept id="p2">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/how-to-convert-between-hexadecimal-strings-and-numeric-types_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example parses a <ph id="ph1">`string`</ph> of hexadecimal values and outputs the character corresponding to each hexadecimal value.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>First it calls the <bpt id="p1">[</bpt>Split(Char<ph id="ph1">\[</ph><ph id="ph2">\]</ph>)<ept id="p1">](xref:System.String.Split(System.Char[]))</ept> method to obtain each hexadecimal value as an individual <ph id="ph3">`string`</ph> in an array.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Then it calls <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> to convert the hexadecimal value to a decimal value represented as an <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It shows two different ways to obtain the character corresponding to that character code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The first technique uses <ph id="ph1">&lt;xref:System.Char.ConvertFromUtf32%28System.Int32%29&gt;</ph>, which returns the character corresponding to the integer argument as a <ph id="ph2">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The second technique explicitly casts the <ph id="ph1">`int`</ph> to a <bpt id="p1">[</bpt>char<ept id="p1">](../../../csharp/language-reference/keywords/char.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideTypes#31<ept id="p2">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/how-to-convert-between-hexadecimal-strings-and-numeric-types_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example shows another way to convert a hexadecimal <ph id="ph1">`string`</ph> to an integer, by calling the <ph id="ph2">&lt;xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideTypes#32<ept id="p2">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/how-to-convert-between-hexadecimal-strings-and-numeric-types_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example shows how to convert a hexadecimal <ph id="ph1">`string`</ph> to a <bpt id="p1">[</bpt>float<ept id="p1">](../../../csharp/language-reference/keywords/float.md)</ept> by using the <ph id="ph2">&lt;xref:System.BitConverter?displayProperty=fullName&gt;</ph> class and the <ph id="ph3">&lt;xref:System.Int32.Parse%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideTypes#39<ept id="p2">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/how-to-convert-between-hexadecimal-strings-and-numeric-types_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows how to convert a <bpt id="p1">[</bpt>byte<ept id="p1">](../../../csharp/language-reference/keywords/byte.md)</ept> array to a hexadecimal string by using the <ph id="ph1">&lt;xref:System.BitConverter?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideTypes#38<ept id="p2">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/how-to-convert-between-hexadecimal-strings-and-numeric-types_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](../../../standard/base-types/standard-numeric-format-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types<ept id="p1">](../../../csharp/programming-guide/types/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Determine Whether a String Represents a Numeric Value<ept id="p1">](../../../csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>