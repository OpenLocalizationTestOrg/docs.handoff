<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ba2aa53b14103c46f74f7c01109bca45ec6e595</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\x-type-markup-extension.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">528cf15df80d34514a9cd0586edc36cca3020445</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e150961146b16d8c8d1708e8fc355e2753efe411</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>x:Type Markup Extension | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>x:Type Markup Extension</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Supplies the CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that is the underlying type for a specified XAML type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Object Element Usage</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A prefix that maps a non-default XAML namespace.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specifying a prefix is frequently not necessary.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A type name resolvable to the current default XAML namespace; or the specified mapped prefix if <ph id="ph1">`prefix`</ph> is supplied.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`x:Type`</ph> markup extension has a similar function to the <ph id="ph2">`typeof()`</ph> operator in <ph id="ph3">[!INCLUDE[TLA#tla_cshrp](../../../includes/tlasharptla-cshrp-md.md)]</ph> or the <ph id="ph4">`GetType`</ph> operator in <ph id="ph5">[!INCLUDE[TLA#tla_visualb](../../../includes/tlasharptla-visualb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`x:Type`</ph> markup extension supplies a from-string conversion behavior for properties that take the type <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The input is a XAML type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The relationship between the input XAML type and the output CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> is that the output <ph id="ph2">&lt;xref:System.Type&gt;</ph> is the <ph id="ph3">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> of the input <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>, after looking up the necessary <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph> based on XAML schema context and the <ph id="ph6">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> service the context provides.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In .NET Framework XAML Services, the handling for this markup extension is defined by the <ph id="ph1">&lt;xref:System.Windows.Markup.TypeExtension&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In specific framework implementations, some properties that take <ph id="ph1">&lt;xref:System.Type&gt;</ph> as a value can accept the name of the type directly (the string value of the type <ph id="ph2">`Name`</ph>).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, implementing this behavior is a complex scenario.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For examples, see the "WPF Usage Notes" section that follows.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Attribute syntax is the most common syntax used with this markup extension.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The string token provided after the <ph id="ph1">`x:Type`</ph> identifier string is assigned as the <ph id="ph2">&lt;xref:System.Windows.Markup.TypeExtension.TypeName%2A&gt;</ph> value of the underlying <ph id="ph3">&lt;xref:System.Windows.Markup.TypeExtension&gt;</ph> extension class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Under the default XAML schema context for .NET Framework XAML Services, which is based on CLR types, the value of this attribute is either the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> of the desired type, or contains that <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> preceded by a prefix for a non-default XAML namespace mapping.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`x:Type`</ph> markup extension can be used in object element syntax.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this case, specifying the value of the <ph id="ph1">&lt;xref:System.Windows.Markup.TypeExtension.TypeName%2A&gt;</ph> property is required to properly initialize the extension.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`x:Type`</ph> markup extension can also be used as a verbose attribute; however this use is not typical: <ph id="ph2">`&lt;``object`</ph> <ph id="ph3">`property``="{x:Type TypeName=``typeNameValue``}" .../&gt;`</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Default XAML Namespace and Type Mapping</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default XAML namespace for WPF programming contains most of the XAML types you need for typical XAML scenarios; therefore, you can often avoid prefixes when referencing XAML type values.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You might need to map a prefix if you are referencing a type from a custom assembly or for types that exist in a WPF assembly but are from a CLR namespace that was not mapped to the default XAML namespace.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about prefixes, XAML namespaces, and mapping CLR namespaces, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](../../../docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Type Properties That Support Typename-as-String</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>WPF supports techniques that enable specifying the value of some properties of type <ph id="ph1">&lt;xref:System.Type&gt;</ph> without requiring an <ph id="ph2">`x:Type`</ph> markup extension usage.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instead, you can specify the value as a string that names the type.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Examples of this are <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate.TargetType%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Support for this behavior is not provided through either type converters or markup extensions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Instead, this is a deferral behavior implemented through <ph id="ph1">&lt;xref:System.Windows.FrameworkElementFactory&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Silverlight supports a similar convention.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In fact, Silverlight does not currently support <ph id="ph1">`{x:Type}`</ph> in its XAML language support, and does not accept <ph id="ph2">`{x:Type}`</ph> usages outside of a few circumstances that are intended to support WPF-Silverlight XAML migration.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Therefore, the typename-as-string behavior is built-in to all Silverlight native property evaluation where a <ph id="ph1">&lt;xref:System.Type&gt;</ph> is the value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>XAML 2009</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>XAML 2009 provides additional support for generic types and modifies the feature behavior of <ph id="ph1">`x:TypeArguments`</ph> and <ph id="ph2">`x:Type`</ph> to provide this support.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:TypeArguments`</ph> and the associated object element for a generic object instantiation can be on elements other than the root.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see the "XAML 2009" section of <bpt id="p1">[</bpt>x:TypeArguments Directive<ept id="p1">](../../../docs/framework/xaml-services/x-typearguments-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>XAML 2009 supports a syntax for specifying a generic type's constraint in markup.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This can be used by <ph id="ph1">`x:TypeArguments`</ph>, by <ph id="ph2">`x:Type`</ph>, or by the two features in combination.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>WPF XAML implementation when processing XAML 2009 for load also adds this capability to the implicit type conversion behavior for certain framework properties that use type <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In WPF, you can use XAML 2009 features but only for loose XAML (XAML that is not markup-compiled).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Styling and Templating<ept id="p1">](../../../docs/framework/wpf/controls/styling-and-templating.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XAML Overview (WPF)<ept id="p1">](../../../docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Markup Extensions and WPF XAML<ept id="p1">](../../../docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>