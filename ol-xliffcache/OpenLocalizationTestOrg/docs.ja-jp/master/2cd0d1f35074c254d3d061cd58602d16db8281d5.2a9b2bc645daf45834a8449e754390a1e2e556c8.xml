{"content":"---\ntitle: \"Compiler Warning (level 2) CS0728\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0728\"\nhelpviewer_keywords: \n  - \"CS0728\"\nms.assetid: ad6d860d-bac4-48f3-9eab-1efd2b6de6c0\n---\n# Compiler Warning (level 2) CS0728\nPossibly incorrect assignment to local 'variable' which is the argument to a using or lock statement.  The Dispose call or unlocking will happen on the original value of the local.  \n  \n There are several scenarios where `using` or `lock` blocks will result in a temporary leak of resources. Here is one example:  \n  \n `thisType f = null;`  \n  \n `using (f)`  \n  \n `{`  \n  \n `f = new thisType();`  \n  \n `...`  \n  \n `}`  \n  \n In this case, the original value, such as null, of the variable `thisType` will be disposed of when the `using` block finishes executing, but the `thisType` object created inside the block will not be, although it will eventually get garbage collected.  \n  \n To resolve this error, use the following form:  \n  \n `using (thisType f = new thisType())`  \n  \n `{`  \n  \n `...`  \n  \n `}`  \n  \n In this case, the newly allocated `thisType` object will be disposed of.  \n  \n## Example  \n The following code will generate warning CS0728.  \n  \n```csharp \n// CS0728.cs  \n  \nusing System;  \npublic class ValidBase : IDisposable  \n{  \n    public void Dispose() {  }  \n}  \n  \npublic class Logger  \n{  \n    public static void dummy()  \n    {  \n        ValidBase vb = null;  \n        using (vb)   \n        {  \n            vb = null;  // CS0728  \n        }  \n        vb = null;  \n    }  \n    public static void Main() { }  \n}  \n```\n","nodes":[{"pos":[4,177],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Warning (level 2) CS0728\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0728\"\nhelpviewer_keywords: \n  - \"CS0728\"\nms.assetid: ad6d860d-bac4-48f3-9eab-1efd2b6de6c0","nodes":[{"content":"Compiler Warning (level 2) CS0728","nodes":[{"pos":[0,33],"content":"Compiler Warning (level 2) CS0728","nodes":[{"content":"Compiler Warning (level 2) CS0728","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[184,217],"content":"Compiler Warning (level 2) CS0728","linkify":"Compiler Warning (level 2) CS0728","nodes":[{"content":"Compiler Warning (level 2) CS0728","pos":[0,33]}]},{"content":"Possibly incorrect assignment to local 'variable' which is the argument to a using or lock statement.","pos":[218,319]},{"content":"The Dispose call or unlocking will happen on the original value of the local.","pos":[321,398]},{"content":"There are several scenarios where <ph id=\"ph1\">`using`</ph> or <ph id=\"ph2\">`lock`</ph> blocks will result in a temporary leak of resources.","pos":[405,509],"source":"There are several scenarios where `using` or `lock` blocks will result in a temporary leak of resources."},{"content":"Here is one example:","pos":[510,530]},{"pos":[642,894],"content":"In this case, the original value, such as null, of the variable <ph id=\"ph1\">`thisType`</ph> will be disposed of when the <ph id=\"ph2\">`using`</ph> block finishes executing, but the <ph id=\"ph3\">`thisType`</ph> object created inside the block will not be, although it will eventually get garbage collected.","source":"In this case, the original value, such as null, of the variable `thisType` will be disposed of when the `using` block finishes executing, but the `thisType` object created inside the block will not be, although it will eventually get garbage collected."},{"content":"To resolve this error, use the following form:","pos":[901,947]},{"pos":[1030,1102],"content":"In this case, the newly allocated <ph id=\"ph1\">`thisType`</ph> object will be disposed of.","source":"In this case, the newly allocated `thisType` object will be disposed of."},{"pos":[1111,1118],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code will generate warning CS0728.","pos":[1122,1170]}]}