<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f0e91bd14ef8f633c857b9be0bfb32baef88a64</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\serialization\controlling-xml-serialization-using-attributes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79d7b17baa36e8ed7049e21463e358ea9628b9e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0af6d1fc251425d12367882ce435917b1564ff2c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Controlling XML Serialization Using Attributes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Controlling XML Serialization Using Attributes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Attributes can be used to control the XML serialization of an object or to create an alternate XML stream from the same set of classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more details about creating an alternate XML stream, see <bpt id="p1">[</bpt>How to: Specify an Alternate Element Name for an XML Stream<ept id="p1">](../../../docs/framework/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the XML generated must conform to section 5 of the World Wide Web Consortium (www.w3.org) document titled "Simple Object Access Protocol (SOAP) 1.1," use the attributes listed in <bpt id="p1">[</bpt>Attributes That Control Encoded SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By default, an XML element name is determined by the class or member name.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In a simple class named <ph id="ph1">`Book`</ph>, a field named <ph id="ph2">`ISBN`</ph> will produce an XML element tag <ph id="ph3">\&lt;</ph>ISBN&gt;, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This default behavior can be changed if you want to give the element a new name.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following code shows how an attribute enables this by setting the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about attributes, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](../../../docs/standard/attributes/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a list of attributes that control XML serialization, see <bpt id="p1">[</bpt>Attributes That Control XML Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Controlling Array Serialization</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> attributes are designed to control the serialization of arrays.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using these attributes, you can control the element name, namespace, and XML Schema (XSD) data type (as defined in the World Wide Web Consortium [www.w3.org] document titled "XML Schema Part 2: Datatypes").</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also specify the types that can be included in an array.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> will determine the properties of the enclosing XML element that results when an array is serialized.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, by default, serializing the array below will result in an XML element named <ph id="ph1">`Employees`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Employees`</ph> element will contain a series of elements named after the array type <ph id="ph2">`Employee`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A serialized instance might resemble the following.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By applying a <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph>, you can change the name of the XML element, as follows.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The resulting XML might resemble the following.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph>, on the other hand, controls how the items contained in the array are serialized.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that the attribute is applied to the field returning the array.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The resulting XML might resemble the following.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Serializing Derived Classes</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Another use of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> is to allow the serialization of derived classes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, another class named <ph id="ph1">`Manager`</ph> that derives from <ph id="ph2">`Employee`</ph> can be added to the previous example.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you do not apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph>, the code will fail at run time because the derived class type will not be recognized.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To remedy this, apply the attribute twice, each time setting the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A&gt;</ph> property for each acceptable type (base and derived).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A serialized instance might resemble the following.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Serializing an Array as a Sequence of Elements</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can also serialize an array as a flat sequence of XML elements by applying a <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> to the field returning the array as follows.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A serialized instance might resemble the following.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Another way to differentiate the two XML streams is to use the XML Schema Definition tool to generate the XML Schema (XSD) document files from the compiled code.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>(For more details on using the tool, see <bpt id="p1">[</bpt>The XML Schema Definition Tool and XML Serialization<ept id="p1">](../../../docs/framework/serialization/the-xml-schema-definition-tool-and-xml-serialization.md)</ept>.) When no attribute is applied to the field, the schema describes the element in the following manner.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> is applied to the field, the resulting schema describes the element as follows.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Serializing an ArrayList</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> class can contain a collection of diverse objects.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can therefore use a <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> much as you use an array.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Instead of creating a field that returns an array of typed objects, however, you can create a field that returns a single <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, as with arrays, you must inform the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> of the types of objects the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> contains.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To accomplish this, assign multiple instances of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> to the field, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Controlling Serialization of Classes Using XmlRootAttribute and XmlTypeAttribute</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>There are two attributes that can be applied to a class (and only a class): <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>These attributes are very similar.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph> can be applied to only one class: the class that, when serialized, represents the XML document's opening and closing element—in other words, the root element.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph>, on the other hand, can be applied to any class, including the root class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, in the previous examples, the <ph id="ph1">`Group`</ph> class is the root class, and all its public fields and properties become the XML elements found in the XML document.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, there can be only one root class.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>By applying the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph>, you can control the XML stream generated by the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, you can change the element name and namespace.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph> allows you to control the schema of the generated XML.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This capability is useful when you need to publish the schema through an XML Web service.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example applies both the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph> to the same class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If this class is compiled, and the XML Schema Definition tool is used to generate its schema, you would find the following XML describing <ph id="ph1">`Group`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In contrast, if you were to serialize an instance of the class, only <ph id="ph1">`NewGroupName`</ph> would be found in the XML document.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Preventing Serialization with the XmlIgnoreAttribute</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>There might be situations when a public property or field does not need to be serialized.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, a field or property could be used to contain metadata.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In such cases, apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlIgnoreAttribute&gt;</ph> to the field or property and the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> will skip over it.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes That Control XML Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Attributes That Control Encoded SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introducing XML Serialization<ept id="p1">](../../../docs/framework/serialization/introducing-xml-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Examples of XML Serialization<ept id="p1">](../../../docs/framework/serialization/examples-of-xml-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Specify an Alternate Element Name for an XML Stream<ept id="p1">](../../../docs/framework/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Serialize an Object<ept id="p1">](../../../docs/framework/serialization/how-to-serialize-an-object.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Deserialize an Object<ept id="p1">](../../../docs/framework/serialization/how-to-deserialize-an-object.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>