{"content":"---\ntitle: \"stackalloc (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stackalloc_CSharpKeyword\"\n  - \"stackalloc\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"stackalloc keyword [C#]\"\nms.assetid: adc04c28-3ed2-4326-807a-7545df92b852\ncaps.latest.revision: 27\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# stackalloc (C# Reference)\nThe `stackalloc` keyword is used in an unsafe code context to allocate a block of memory on the stack.  \n  \n```  \nint* block = stackalloc int[100];  \n```  \n  \n## Remarks  \n The keyword is valid only in local variable initializers. The following code causes compiler errors.  \n  \n```  \nint* block;  \n// The following assignment statement causes compiler errors. You  \n// can use stackalloc only when declaring and initializing a local   \n// variable.  \nblock = stackalloc int[100];  \n```  \n  \n Because pointer types are involved, `stackalloc` requires [unsafe](../../../csharp/language-reference/keywords/unsafe.md) context. For more information, see [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md).  \n  \n `stackalloc` is like [_alloca](https://docs.microsoft.com/cpp/c-runtime-library/reference/alloca) in the C run-time library.  \n  \n The following example calculates and displays the first 20 numbers in the Fibonacci sequence. Each number is the sum of the previous two numbers. In the code, a block of memory of sufficient size to contain 20 elements of type `int` is allocated on the stack, not the heap. The address of the block is stored in the pointer `fib`. This memory is not subject to garbage collection and therefore does not have to be pinned (by using [fixed](../../../csharp/language-reference/keywords/fixed-statement.md)). The lifetime of the memory block is limited to the lifetime of the method that defines it. You cannot free the memory before the method returns.  \n  \n## Example  \n [!code-cs[csrefKeywordsOperator#15](../../../csharp/language-reference/keywords/codesnippet/CSharp/stackalloc_1.cs)]  \n  \n## Security  \n Unsafe code is less secure than safe alternatives. However, the use of `stackalloc` automatically enables buffer overrun detection features in the common language runtime (CLR). If a buffer overrun is detected, the process is terminated as quickly as possible to minimize the chance that malicious code is executed.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)   \n [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)","nodes":[{"pos":[4,584],"embed":true,"restype":"x-metadata","content":"title: \"stackalloc (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stackalloc_CSharpKeyword\"\n  - \"stackalloc\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"stackalloc keyword [C#]\"\nms.assetid: adc04c28-3ed2-4326-807a-7545df92b852\ncaps.latest.revision: 27\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"stackalloc (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,42],"content":"stackalloc (C# Reference) | Microsoft Docs","nodes":[{"content":"stackalloc (C# Reference) | Microsoft Docs","pos":[0,42]}]}],"path":["title"]}],"yml":true},{"pos":[591,616],"content":"stackalloc (C# Reference)","linkify":"stackalloc (C# Reference)","nodes":[{"content":"stackalloc (C# Reference)","pos":[0,25]}]},{"pos":[617,719],"content":"The <ph id=\"ph1\">`stackalloc`</ph> keyword is used in an unsafe code context to allocate a block of memory on the stack.","source":"The `stackalloc` keyword is used in an unsafe code context to allocate a block of memory on the stack."},{"pos":[779,786],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The keyword is valid only in local variable initializers.","pos":[790,847]},{"content":"The following code causes compiler errors.","pos":[848,890]},{"content":"Because pointer types are involved, <ph id=\"ph1\">`stackalloc`</ph> requires <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept> context.","pos":[1110,1240],"source":"Because pointer types are involved, `stackalloc` requires [unsafe](../../../csharp/language-reference/keywords/unsafe.md) context."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept>.","pos":[1241,1359],"source":" For more information, see [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)."},{"pos":[1366,1490],"content":"<ph id=\"ph1\">`stackalloc`</ph> is like <bpt id=\"p1\">[</bpt>_alloca<ept id=\"p1\">](https://docs.microsoft.com/cpp/c-runtime-library/reference/alloca)</ept> in the C run-time library.","source":"`stackalloc` is like [_alloca](https://docs.microsoft.com/cpp/c-runtime-library/reference/alloca) in the C run-time library."},{"content":"The following example calculates and displays the first 20 numbers in the Fibonacci sequence.","pos":[1497,1590]},{"content":"Each number is the sum of the previous two numbers.","pos":[1591,1642]},{"content":"In the code, a block of memory of sufficient size to contain 20 elements of type <ph id=\"ph1\">`int`</ph> is allocated on the stack, not the heap.","pos":[1643,1770],"source":" In the code, a block of memory of sufficient size to contain 20 elements of type `int` is allocated on the stack, not the heap."},{"content":"The address of the block is stored in the pointer <ph id=\"ph1\">`fib`</ph>.","pos":[1771,1827],"source":" The address of the block is stored in the pointer `fib`."},{"content":"This memory is not subject to garbage collection and therefore does not have to be pinned (by using <bpt id=\"p1\">[</bpt>fixed<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept>).","pos":[1828,2001],"source":" This memory is not subject to garbage collection and therefore does not have to be pinned (by using [fixed](../../../csharp/language-reference/keywords/fixed-statement.md))."},{"content":"The lifetime of the memory block is limited to the lifetime of the method that defines it.","pos":[2002,2092]},{"content":"You cannot free the memory before the method returns.","pos":[2093,2146]},{"pos":[2155,2162],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2291,2299],"content":"Security","linkify":"Security","nodes":[{"content":"Security","pos":[0,8]}]},{"content":"Unsafe code is less secure than safe alternatives.","pos":[2303,2353]},{"content":"However, the use of <ph id=\"ph1\">`stackalloc`</ph> automatically enables buffer overrun detection features in the common language runtime (CLR).","pos":[2354,2480],"source":" However, the use of `stackalloc` automatically enables buffer overrun detection features in the common language runtime (CLR)."},{"content":"If a buffer overrun is detected, the process is terminated as quickly as possible to minimize the chance that malicious code is executed.","pos":[2481,2618]},{"pos":[2627,2652],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2766,2774],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2778,2838],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2842,2909],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2913,2981],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept><ph id=\"ph1\"> </ph>","pos":[2985,3071],"source":"[Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md) "},{"content":"<bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept>","pos":[3075,3166],"source":"[Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)"}]}