{"content":"---\ntitle: \"Attributes (C#)\"\nms.date: 04/26/2018\n---\n# Attributes (C#)\n\nAttributes provide a powerful method of associating metadata, or declarative information, with code (assemblies, types, methods, properties, and so forth). After an attribute is associated with a program entity, the attribute can be queried at run time by using a technique called *reflection*. For more information, see [Reflection (C#)](../reflection.md).\n\nAttributes have the following properties:\n\n- Attributes add metadata to your program. *Metadata* is information about the types defined in a program. All .NET assemblies contain a specified set of metadata that describes the types and type members defined in the assembly. You can add custom attributes to specify any additional information that is required. For more information, see, [Creating Custom Attributes (C#)](creating-custom-attributes.md).\n- You can apply one or more attributes to entire assemblies, modules, or smaller program elements such as classes and properties.\n- Attributes can accept arguments in the same way as methods and properties.\n- Your program can examine its own metadata or the metadata in other programs by using reflection. For more information, see [Accessing Attributes by Using Reflection (C#)](accessing-attributes-by-using-reflection.md).\n\n## Using attributes\n\nAttributes can be placed on most any declaration, though a specific attribute might restrict the types of declarations on which it is valid. In C#, you specify an attribute by placing the name of the attribute enclosed in square brackets ([]) above the declaration of the entity to which it applies.\n\nIn this example, the <xref:System.SerializableAttribute> attribute is used to apply a specific characteristic to a class:\n\n[!code-csharp[Using the serializable attribute](../../../../../samples/snippets/csharp/attributes/AttributesOverview.cs#1)]\n\nA method with the attribute <xref:System.Runtime.InteropServices.DllImportAttribute> is declared like the following example:\n\n[!code-csharp[Declaring a method to import from an external library](../../../../../samples/snippets/csharp/attributes/AttributesOverview.cs#2)]\n\nMore than one attribute can be placed on a declaration as the following example shows:\n\n[!code-csharp[Including the interop namespace](../../../../../samples/snippets/csharp/attributes/AttributesOverview.cs#3)]\n[!code-csharp[Declaring two way marshaling for arguments](../../../../../samples/snippets/csharp/attributes/AttributesOverview.cs#4)]\n\nSome attributes can be specified more than once for a given entity. An example of such a multiuse attribute is <xref:System.Diagnostics.ConditionalAttribute>:\n\n[!code-csharp[Using the conditional attribute](../../../../../samples/snippets/csharp/attributes/AttributesOverview.cs#5)]\n\n> [!NOTE]\n> By convention, all attribute names end with the word \"Attribute\" to distinguish them from other items in the .NET libraries. However, you do not need to specify the attribute suffix when using attributes in code. For example, `[DllImport]` is equivalent to `[DllImportAttribute]`, but `DllImportAttribute` is the attribute's actual name in the .NET Framework Class Library.\n\n### Attribute parameters\n\nMany attributes have parameters, which can be positional, unnamed, or named. Any positional parameters must be specified in a certain order and cannot be omitted. Named parameters are optional and can be specified in any order. Positional parameters are specified first. For example, these three attributes are equivalent:\n\n```csharp\n[DllImport(\"user32.dll\")]\n[DllImport(\"user32.dll\", SetLastError=false, ExactSpelling=false)]\n[DllImport(\"user32.dll\", ExactSpelling=false, SetLastError=false)]\n```\n\nThe first parameter, the DLL name, is positional and always comes first; the others are named. In this case, both named parameters default to false, so they can be omitted. Positional parameters correspond to the parameters of the attribute constructor. Named or optional parameters correspond to either properties or fields of the attribute. Refer to the individual attribute's documentation for information on default parameter values.\n\n### Attribute targets\n\nThe *target* of an attribute is the entity which the attribute applies to. For example, an attribute may apply to a class, a particular method, or an entire assembly. By default, an attribute applies to the element that it precedes. But you can also explicitly identify, for example, whether an attribute is applied to a method, or to its parameter, or to its return value.\n\nTo explicitly identify an attribute target, use the following syntax:\n\n```csharp\n[target : attribute-list]\n```\n\nThe list of possible `target` values is shown in the following table.\n\n|Target value|Applies to|\n|------------------|----------------|\n|`assembly`|Entire assembly|\n|`module`|Current assembly module|\n|`field`|Field in a class or a struct|\n|`event`|Event|\n|`method`|Method or `get` and `set` property accessors|\n|`param`|Method parameters or `set` property accessor parameters|\n|`property`|Property|\n|`return`|Return value of a method, property indexer, or `get` property accessor|\n|`type`|Struct, class, interface, enum, or delegate|\n\nYou would specify the `field` target value to apply an attribute to the backing field created for an [auto-implemented property](../../../properties.md).\n\nThe following example shows how to apply attributes to assemblies and modules. For more information, see [Common Attributes (C#)](common-attributes.md).\n\n```csharp\nusing System;\nusing System.Reflection;\n[assembly: AssemblyTitleAttribute(\"Production assembly 4\")]\n[module: CLSCompliant(true)]\n```\n\nThe following example shows how to apply attributes to methods, method parameters, and method return values in C#.\n\n[!code-csharp[Applying attributes to different code elements](../../../../../samples/snippets/csharp/attributes/AttributesOverview.cs#6)]\n\n> [!NOTE]\n> Regardless of the targets on which `ValidatedContract` is defined to be valid, the `return` target has to be specified, even if `ValidatedContract` were defined to apply only to return values. In other words, the compiler will not use `AttributeUsage` information to resolve ambiguous attribute targets. For more information, see [AttributeUsage (C#)](attributeusage.md).\n\n## Common uses for attributes\n\nThe following list includes a few of the common uses of attributes in code:\n\n- Marking methods using the `WebMethod` attribute in Web services to indicate that the method should be callable over the SOAP protocol. For more information, see <xref:System.Web.Services.WebMethodAttribute>.\n- Describing how to marshal method parameters when interoperating with native code. For more information, see <xref:System.Runtime.InteropServices.MarshalAsAttribute>.\n- Describing the COM properties for classes, methods, and interfaces.\n- Calling unmanaged code using the <xref:System.Runtime.InteropServices.DllImportAttribute> class.\n- Describing your assembly in terms of title, version, description, or trademark.\n- Describing which members of a class to serialize for persistence.\n- Describing how to map between class members and XML nodes for XML serialization.\n- Describing the security requirements for methods.\n- Specifying characteristics used to enforce security.\n- Controlling optimizations by the just-in-time (JIT) compiler so the code remains easy to debug.\n- Obtaining information about the caller to a method.\n\n## Related sections\n\nFor more information, see:\n\n- [Creating Custom Attributes (C#)](creating-custom-attributes.md)  \n- [Accessing Attributes by Using Reflection (C#)](accessing-attributes-by-using-reflection.md)  \n- [How to: Create a C/C++ Union by Using Attributes (C#)](how-to-create-a-c-cpp-union-by-using-attributes.md)  \n- [Common Attributes (C#)](common-attributes.md)  \n- [Caller Information (C#)](../caller-information.md)  \n\n## See also\n\n- [C# Programming Guide](../../index.md)\n- [Reflection (C#)](../reflection.md)\n- [Attributes](../../../../standard/attributes/index.md)\n- [Using Attributes in C#](../../../tutorials/attributes.md)\n","nodes":[{"pos":[4,48],"embed":true,"restype":"x-metadata","content":"title: \"Attributes (C#)\"\nms.date: 04/26/2018","nodes":[{"content":"Attributes (C#)","nodes":[{"pos":[0,15],"content":"Attributes (C#)","nodes":[{"content":"Attributes (C#)","pos":[0,15]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[55,70],"content":"Attributes (C#)","linkify":"Attributes (C#)","nodes":[{"content":"Attributes (C#)","pos":[0,15]}]},{"content":"Attributes provide a powerful method of associating metadata, or declarative information, with code (assemblies, types, methods, properties, and so forth).","pos":[72,227]},{"content":"After an attribute is associated with a program entity, the attribute can be queried at run time by using a technique called <bpt id=\"p1\">*</bpt>reflection<ept id=\"p1\">*</ept>.","pos":[228,366],"source":" After an attribute is associated with a program entity, the attribute can be queried at run time by using a technique called *reflection*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Reflection (C#)<ept id=\"p1\">](../reflection.md)</ept>.","pos":[367,429],"source":" For more information, see [Reflection (C#)](../reflection.md)."},{"content":"Attributes have the following properties:","pos":[431,472]},{"content":"Attributes add metadata to your program.","pos":[476,516]},{"content":"<bpt id=\"p1\">*</bpt>Metadata<ept id=\"p1\">*</ept> is information about the types defined in a program.","pos":[517,580],"source":"*Metadata* is information about the types defined in a program."},{"content":"All .NET assemblies contain a specified set of metadata that describes the types and type members defined in the assembly.","pos":[581,703]},{"content":"You can add custom attributes to specify any additional information that is required.","pos":[704,789]},{"content":"For more information, see, <bpt id=\"p1\">[</bpt>Creating Custom Attributes (C#)<ept id=\"p1\">](creating-custom-attributes.md)</ept>.","pos":[790,882],"source":" For more information, see, [Creating Custom Attributes (C#)](creating-custom-attributes.md)."},{"content":"You can apply one or more attributes to entire assemblies, modules, or smaller program elements such as classes and properties.","pos":[885,1012]},{"content":"Attributes can accept arguments in the same way as methods and properties.","pos":[1015,1089]},{"content":"Your program can examine its own metadata or the metadata in other programs by using reflection.","pos":[1092,1188]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id=\"p1\">](accessing-attributes-by-using-reflection.md)</ept>.","pos":[1189,1308],"source":" For more information, see [Accessing Attributes by Using Reflection (C#)](accessing-attributes-by-using-reflection.md)."},{"pos":[1313,1329],"content":"Using attributes","linkify":"Using attributes","nodes":[{"content":"Using attributes","pos":[0,16]}]},{"content":"Attributes can be placed on most any declaration, though a specific attribute might restrict the types of declarations on which it is valid.","pos":[1331,1471]},{"content":"In C#, you specify an attribute by placing the name of the attribute enclosed in square brackets ([]) above the declaration of the entity to which it applies.","pos":[1472,1630]},{"pos":[1632,1753],"content":"In this example, the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute is used to apply a specific characteristic to a class:","source":"In this example, the <xref:System.SerializableAttribute> attribute is used to apply a specific characteristic to a class:"},{"pos":[1880,2004],"content":"A method with the attribute <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> is declared like the following example:","source":"A method with the attribute <xref:System.Runtime.InteropServices.DllImportAttribute> is declared like the following example:"},{"content":"More than one attribute can be placed on a declaration as the following example shows:","pos":[2152,2238]},{"content":"Some attributes can be specified more than once for a given entity.","pos":[2498,2565]},{"content":"An example of such a multiuse attribute is <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConditionalAttribute&gt;</ph>:","pos":[2566,2656],"source":" An example of such a multiuse attribute is <xref:System.Diagnostics.ConditionalAttribute>:"},{"pos":[2784,3167],"content":"[!NOTE]\nBy convention, all attribute names end with the word \"Attribute\" to distinguish them from other items in the .NET libraries. However, you do not need to specify the attribute suffix when using attributes in code. For example, `[DllImport]` is equivalent to `[DllImportAttribute]`, but `DllImportAttribute` is the attribute's actual name in the .NET Framework Class Library.","leadings":["","> "],"nodes":[{"content":"By convention, all attribute names end with the word \"Attribute\" to distinguish them from other items in the .NET libraries. However, you do not need to specify the attribute suffix when using attributes in code. For example, `[DllImport]` is equivalent to `[DllImportAttribute]`, but `DllImportAttribute` is the attribute's actual name in the .NET Framework Class Library.","pos":[8,381],"nodes":[{"content":"By convention, all attribute names end with the word \"Attribute\" to distinguish them from other items in the .NET libraries.","pos":[0,124]},{"content":"However, you do not need to specify the attribute suffix when using attributes in code.","pos":[125,212]},{"content":"For example, <ph id=\"ph1\">`[DllImport]`</ph> is equivalent to <ph id=\"ph2\">`[DllImportAttribute]`</ph>, but <ph id=\"ph3\">`DllImportAttribute`</ph> is the attribute's actual name in the .NET Framework Class Library.","pos":[213,373],"source":" For example, `[DllImport]` is equivalent to `[DllImportAttribute]`, but `DllImportAttribute` is the attribute's actual name in the .NET Framework Class Library."}]}]},{"pos":[3173,3193],"content":"Attribute parameters","linkify":"Attribute parameters","nodes":[{"content":"Attribute parameters","pos":[0,20]}]},{"content":"Many attributes have parameters, which can be positional, unnamed, or named.","pos":[3195,3271]},{"content":"Any positional parameters must be specified in a certain order and cannot be omitted.","pos":[3272,3357]},{"content":"Named parameters are optional and can be specified in any order.","pos":[3358,3422]},{"content":"Positional parameters are specified first.","pos":[3423,3465]},{"content":"For example, these three attributes are equivalent:","pos":[3466,3517]},{"content":"The first parameter, the DLL name, is positional and always comes first; the others are named.","pos":[3694,3788]},{"content":"In this case, both named parameters default to false, so they can be omitted.","pos":[3789,3866]},{"content":"Positional parameters correspond to the parameters of the attribute constructor.","pos":[3867,3947]},{"content":"Named or optional parameters correspond to either properties or fields of the attribute.","pos":[3948,4036]},{"content":"Refer to the individual attribute's documentation for information on default parameter values.","pos":[4037,4131]},{"pos":[4137,4154],"content":"Attribute targets","linkify":"Attribute targets","nodes":[{"content":"Attribute targets","pos":[0,17]}]},{"content":"The <bpt id=\"p1\">*</bpt>target<ept id=\"p1\">*</ept> of an attribute is the entity which the attribute applies to.","pos":[4156,4230],"source":"The *target* of an attribute is the entity which the attribute applies to."},{"content":"For example, an attribute may apply to a class, a particular method, or an entire assembly.","pos":[4231,4322]},{"content":"By default, an attribute applies to the element that it precedes.","pos":[4323,4388]},{"content":"But you can also explicitly identify, for example, whether an attribute is applied to a method, or to its parameter, or to its return value.","pos":[4389,4529]},{"content":"To explicitly identify an attribute target, use the following syntax:","pos":[4531,4600]},{"pos":[4643,4712],"content":"The list of possible <ph id=\"ph1\">`target`</ph> values is shown in the following table.","source":"The list of possible `target` values is shown in the following table."},{"content":"Target value","pos":[4715,4727]},{"content":"Applies to","pos":[4728,4738]},{"content":"Entire assembly","pos":[4790,4805]},{"content":"Current assembly module","pos":[4817,4840]},{"content":"Field in a class or a struct","pos":[4851,4879]},{"content":"Event","pos":[4890,4895]},{"pos":[4907,4951],"content":"Method or <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> property accessors","source":"Method or `get` and `set` property accessors"},{"pos":[4962,5017],"content":"Method parameters or <ph id=\"ph1\">`set`</ph> property accessor parameters","source":"Method parameters or `set` property accessor parameters"},{"content":"Property","pos":[5031,5039]},{"pos":[5051,5121],"content":"Return value of a method, property indexer, or <ph id=\"ph1\">`get`</ph> property accessor","source":"Return value of a method, property indexer, or `get` property accessor"},{"content":"Struct, class, interface, enum, or delegate","pos":[5131,5174]},{"pos":[5177,5330],"content":"You would specify the <ph id=\"ph1\">`field`</ph> target value to apply an attribute to the backing field created for an <bpt id=\"p1\">[</bpt>auto-implemented property<ept id=\"p1\">](../../../properties.md)</ept>.","source":"You would specify the `field` target value to apply an attribute to the backing field created for an [auto-implemented property](../../../properties.md)."},{"content":"The following example shows how to apply attributes to assemblies and modules.","pos":[5332,5410]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Common Attributes (C#)<ept id=\"p1\">](common-attributes.md)</ept>.","pos":[5411,5484],"source":" For more information, see [Common Attributes (C#)](common-attributes.md)."},{"content":"The following example shows how to apply attributes to methods, method parameters, and method return values in C#.","pos":[5629,5743]},{"pos":[5886,6267],"content":"[!NOTE]\nRegardless of the targets on which `ValidatedContract` is defined to be valid, the `return` target has to be specified, even if `ValidatedContract` were defined to apply only to return values. In other words, the compiler will not use `AttributeUsage` information to resolve ambiguous attribute targets. For more information, see [AttributeUsage (C#)](attributeusage.md).","leadings":["","> "],"nodes":[{"content":"Regardless of the targets on which `ValidatedContract` is defined to be valid, the `return` target has to be specified, even if `ValidatedContract` were defined to apply only to return values. In other words, the compiler will not use `AttributeUsage` information to resolve ambiguous attribute targets. For more information, see [AttributeUsage (C#)](attributeusage.md).","pos":[8,379],"nodes":[{"content":"Regardless of the targets on which <ph id=\"ph1\">`ValidatedContract`</ph> is defined to be valid, the <ph id=\"ph2\">`return`</ph> target has to be specified, even if <ph id=\"ph3\">`ValidatedContract`</ph> were defined to apply only to return values.","pos":[0,192],"source":"Regardless of the targets on which `ValidatedContract` is defined to be valid, the `return` target has to be specified, even if `ValidatedContract` were defined to apply only to return values."},{"content":"In other words, the compiler will not use <ph id=\"ph1\">`AttributeUsage`</ph> information to resolve ambiguous attribute targets.","pos":[193,303],"source":" In other words, the compiler will not use `AttributeUsage` information to resolve ambiguous attribute targets."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>AttributeUsage (C#)<ept id=\"p1\">](attributeusage.md)</ept>.","pos":[304,371],"source":" For more information, see [AttributeUsage (C#)](attributeusage.md)."}]}]},{"pos":[6272,6298],"content":"Common uses for attributes","linkify":"Common uses for attributes","nodes":[{"content":"Common uses for attributes","pos":[0,26]}]},{"content":"The following list includes a few of the common uses of attributes in code:","pos":[6300,6375]},{"content":"Marking methods using the <ph id=\"ph1\">`WebMethod`</ph> attribute in Web services to indicate that the method should be callable over the SOAP protocol.","pos":[6379,6513],"source":"Marking methods using the `WebMethod` attribute in Web services to indicate that the method should be callable over the SOAP protocol."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Web.Services.WebMethodAttribute&gt;</ph>.","pos":[6514,6586],"source":" For more information, see <xref:System.Web.Services.WebMethodAttribute>."},{"content":"Describing how to marshal method parameters when interoperating with native code.","pos":[6589,6670]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph>.","pos":[6671,6754],"source":" For more information, see <xref:System.Runtime.InteropServices.MarshalAsAttribute>."},{"content":"Describing the COM properties for classes, methods, and interfaces.","pos":[6757,6824]},{"pos":[6827,6923],"content":"Calling unmanaged code using the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> class.","source":"Calling unmanaged code using the <xref:System.Runtime.InteropServices.DllImportAttribute> class."},{"content":"Describing your assembly in terms of title, version, description, or trademark.","pos":[6926,7005]},{"content":"Describing which members of a class to serialize for persistence.","pos":[7008,7073]},{"content":"Describing how to map between class members and XML nodes for XML serialization.","pos":[7076,7156]},{"content":"Describing the security requirements for methods.","pos":[7159,7208]},{"content":"Specifying characteristics used to enforce security.","pos":[7211,7263]},{"content":"Controlling optimizations by the just-in-time (JIT) compiler so the code remains easy to debug.","pos":[7266,7361]},{"content":"Obtaining information about the caller to a method.","pos":[7364,7415]},{"pos":[7420,7436],"content":"Related sections","linkify":"Related sections","nodes":[{"content":"Related sections","pos":[0,16]}]},{"content":"For more information, see:","pos":[7438,7464]},{"pos":[7468,7532],"content":"<bpt id=\"p1\">[</bpt>Creating Custom Attributes (C#)<ept id=\"p1\">](creating-custom-attributes.md)</ept>","source":"[Creating Custom Attributes (C#)](creating-custom-attributes.md)"},{"pos":[7537,7629],"content":"<bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id=\"p1\">](accessing-attributes-by-using-reflection.md)</ept>","source":"[Accessing Attributes by Using Reflection (C#)](accessing-attributes-by-using-reflection.md)"},{"pos":[7634,7741],"content":"<bpt id=\"p1\">[</bpt>How to: Create a C/C++ Union by Using Attributes (C#)<ept id=\"p1\">](how-to-create-a-c-cpp-union-by-using-attributes.md)</ept>","source":"[How to: Create a C/C++ Union by Using Attributes (C#)](how-to-create-a-c-cpp-union-by-using-attributes.md)"},{"pos":[7746,7792],"content":"<bpt id=\"p1\">[</bpt>Common Attributes (C#)<ept id=\"p1\">](common-attributes.md)</ept>","source":"[Common Attributes (C#)](common-attributes.md)"},{"pos":[7797,7848],"content":"<bpt id=\"p1\">[</bpt>Caller Information (C#)<ept id=\"p1\">](../caller-information.md)</ept>","source":"[Caller Information (C#)](../caller-information.md)"},{"pos":[7855,7863],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7867,7905],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../index.md)</ept>","source":"[C# Programming Guide](../../index.md)"},{"pos":[7908,7943],"content":"<bpt id=\"p1\">[</bpt>Reflection (C#)<ept id=\"p1\">](../reflection.md)</ept>","source":"[Reflection (C#)](../reflection.md)"},{"pos":[7946,8000],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](../../../../standard/attributes/index.md)</ept>","source":"[Attributes](../../../../standard/attributes/index.md)"},{"pos":[8003,8061],"content":"<bpt id=\"p1\">[</bpt>Using Attributes in C#<ept id=\"p1\">](../../../tutorials/attributes.md)</ept>","source":"[Using Attributes in C#](../../../tutorials/attributes.md)"}]}