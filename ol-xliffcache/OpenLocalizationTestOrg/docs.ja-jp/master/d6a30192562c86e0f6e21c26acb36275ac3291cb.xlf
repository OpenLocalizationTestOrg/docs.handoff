<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-hook-up-a-command-to-a-control-with-no-command-support.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6a30192562c86e0f6e21c26acb36275ac3291cb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\how-to-hook-up-a-command-to-a-control-with-no-command-support.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1073e71d581381872669cf4bda654f9a4bb76072</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a35c9e841b486d77b61564a87a4aeaeb7e3c4c7d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Hook Up a Command to a Control with No Command Support | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Hook Up a Command to a Control with No Command Support</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following example shows how to hook up a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to a <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> which does not have built in support for the command.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For a complete sample which hooks up commands to multiple sources, see the <bpt id="p1">[</bpt>Create a Custom RoutedCommand Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159980)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>provides a library of common commands which application programmers encounter regularly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The classes which comprise the command library are: <ph id="ph1">&lt;xref:System.Windows.Input.ApplicationCommands&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.ComponentCommands&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.NavigationCommands&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.MediaCommands&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Documents.EditingCommands&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The static <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> objects which make up these classes do not supply command logic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The logic for the command is associated with the command with a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Many controls in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> have built in support for some of the commands in the command library.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, for example, supports many of the application edit commands such as <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Copy%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Cut%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.ApplicationCommands.Redo%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Input.ApplicationCommands.Undo%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The application developer does not have to do anything special to get these commands to work with these controls.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is the command target when the command is executed, it will handle the command using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> that is built into the control.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following shows how to use a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> as the command source for the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> command.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is created that associates the specified <ph id="ph2">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph3">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> with the <ph id="ph4">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>First, the command source is created.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is used as the command source.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> are created.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> simply opens a <ph id="ph2">&lt;xref:System.Windows.MessageBox&gt;</ph> to signify that the command executed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> sets the <ph id="ph2">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Normally, the can execute handler would perform more robust checks to see if the command could execute on the current command target.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Finally, a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is created on the root <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> of the application that associates the routed events handlers to the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> command.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/commanding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hook Up a Command to a Control with Command Support<ept id="p1">](../../../../docs/framework/wpf/advanced/how-to-hook-up-a-command-to-a-control-with-command-support.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>