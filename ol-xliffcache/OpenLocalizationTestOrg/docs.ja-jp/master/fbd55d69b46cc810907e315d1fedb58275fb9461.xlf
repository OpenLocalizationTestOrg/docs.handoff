<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbd55d69b46cc810907e315d1fedb58275fb9461</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\data-types\ushort-data-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f7e753a35375d367085a17ddb2d166e583a9a5d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2014c5c2c3324f32cb4d1b64ea12f2cf324cdec</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>UShort Data Type (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>UShort data type (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Holds unsigned 16-bit (2-byte) integers ranging in value from 0 through 65,535.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`UShort`</ph> data type to contain binary data too large for <ph id="ph2">`Byte`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The default value of <ph id="ph1">`UShort`</ph> is 0.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Literal assignments</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can declare and initialize a <ph id="ph1">`UShort`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the integer literal is outside the range of <ph id="ph1">`UShort`</ph> (that is, if it is less than <ph id="ph2">&lt;xref:System.UInt16.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id="ph3">&lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id="ph1">`UShort`</ph> values.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>UShort<ept id="p2">](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#UShort)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You use the prefix <ph id="ph1">`&amp;h`</ph> or <ph id="ph2">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id="ph3">`&amp;b`</ph> or <ph id="ph4">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id="ph5">`&amp;o`</ph> or <ph id="ph6">`&amp;O`</ph> to denote an octal literal.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Decimal literals have no prefix.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Starting with Visual Basic 2017, you can also use the underscore character, <ph id="ph1">`_`</ph>, as a digit separator to enhance readability, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>UShort<ept id="p2">](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#UShortS)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Numeric literals can also include the <ph id="ph1">`US`</ph> or <ph id="ph2">`us`</ph> <bpt id="p1">[</bpt>type character<ept id="p1">](../../programming-guide\language-features\data-types/type-characters.md)</ept> to denote the <ph id="ph3">`UShort`</ph> data type, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Programming tips</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Negative Numbers.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`UShort`</ph> is an unsigned type, it cannot represent a negative number.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you use the unary minus (<ph id="ph1">`-`</ph>) operator on an expression that evaluates to type <ph id="ph2">`UShort`</ph>, Visual Basic converts the expression to <ph id="ph3">`Integer`</ph> first.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CLS Compliance.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UShort`</ph> data type is not part of the <bpt id="p1">[</bpt>Common Language Specification<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept> (CLS), so CLS-compliant code cannot consume a component that uses it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Widening.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UShort`</ph> data type widens to <ph id="ph2">`Integer`</ph>, <ph id="ph3">`UInteger`</ph>, <ph id="ph4">`Long`</ph>, <ph id="ph5">`ULong`</ph>, <ph id="ph6">`Decimal`</ph>, <ph id="ph7">`Single`</ph>, and <ph id="ph8">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This means you can convert <ph id="ph1">`UShort`</ph> to any of these types without encountering a <ph id="ph2">&lt;xref:System.OverflowException?displayProperty=fullName&gt;</ph> error.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Type Characters.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Appending the literal type characters <ph id="ph1">`US`</ph> to a literal forces it to the <ph id="ph2">`UShort`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UShort`</ph> has no identifier type character.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Framework Type.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The corresponding type in the .NET Framework is the <ph id="ph1">&lt;xref:System.UInt16?displayProperty=fullName&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.UInt16&gt;</ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Types<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Conversion Summary<ept id="p1">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id="p1">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Efficient Use of Data Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>