<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-sign-an-assembly-with-a-strong-name.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">548cc4ffd0f894c4f522552c5f032be4c94d3585</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\app-domains\how-to-sign-an-assembly-with-a-strong-name.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35bc7a4812a8cb3527ecbeec261f1f814050e77f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a954943ee4c2e93071e82eaa3cec575e45ec0e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Sign an Assembly with a Strong Name | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Sign an Assembly with a Strong Name</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>There are a number of ways to sign an assembly with a strong name:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By using the <bpt id="p1">**</bpt>Signing<ept id="p1">**</ept> tab in a project's <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> dialog box in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This is the easiest and most convenient way to sign an assembly with a strong name.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By using the <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> to link a .NET Framework code module (a .netmodule file) with a key file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By using assembly attributes to insert the strong name information into your code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use either the <ph id="ph1">&lt;xref:System.Reflection.AssemblyKeyFileAttribute&gt;</ph> or the <ph id="ph2">&lt;xref:System.Reflection.AssemblyKeyNameAttribute&gt;</ph> attribute, depending on where the key file to be used is located.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By using compiler options.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You must have a cryptographic key pair to sign an assembly with a strong name.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about creating a key pair, see <bpt id="p1">[</bpt>How to: Create a Public-Private Key Pair<ept id="p1">](../../../docs/framework/app-domains/how-to-create-a-public-private-key-pair.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To create and sign an assembly with a strong name by using Visual Studio</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for the project, and then choose <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Signing<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Sign the assembly<ept id="p1">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Choose a strong name key file<ept id="p1">**</ept> box, choose <bpt id="p2">**</bpt><ph id="ph1">\&lt;</ph>Browse…&gt;<ept id="p2">**</ept>, and then navigate to the key file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To create a new key file, choose <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>New…&gt;<ept id="p1">**</ept> and enter its name in the <bpt id="p2">**</bpt>Create Strong Name Key<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To create and sign an assembly with a strong name by using the Assembly Linker</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>At the <bpt id="p1">[</bpt>Visual Studio Command Prompt<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>, type the following command:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>al<ept id="p1">**</ept> <bpt id="p2">**</bpt>/out:<ept id="p2">**</ept><ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>assemblyName<ept id="p3">*</ept><ph id="ph2">&gt; </ph><bpt id="p4">*</bpt><ph id="ph3">\&lt;</ph>moduleName&gt;<ept id="p4">*</ept> <bpt id="p5">**</bpt>/keyfile:<ept id="p5">**</ept><ph id="ph4">\&lt;</ph><bpt id="p6">*</bpt>keyfileName<ept id="p6">*</ept><ph id="ph5">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>where:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>assemblyName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The name of the strongly signed assembly (a .dll or .exe file) that Assembly Linker will emit.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>moduleName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The name of a .NET Framework code module (a .netmodule file) that includes one or more types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can create a .netmodule file by compiling your code with the <ph id="ph1">`/target:module`</ph> switch in C# or Visual Basic.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>keyfileName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The name of the container or file that contains the key pair.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Assembly Linker interprets a relative path in relationship to the current directory.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example signs the assembly <ph id="ph1">`MyAssembly.dll`</ph> with a strong name by using the key file <ph id="ph2">`sgKey.snk`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about this tool, see <bpt id="p1">[</bpt>Assembly Linker<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To sign an assembly with a strong name by using attributes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">&lt;xref:System.Reflection.AssemblyKeyFileAttribute?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.AssemblyKeyNameAttribute&gt;</ph> attribute to your source code file, and specify the name of the file or container that contains the key pair to use when signing the assembly with a strong name.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Compile the source code file normally.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The C# and Visual Basic compilers issue compiler warnings (CS1699 and BC41008, respectively) when they encounter the <ph id="ph1">&lt;xref:System.Reflection.AssemblyKeyFileAttribute&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.AssemblyKeyNameAttribute&gt;</ph> attribute in source code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can ignore the warnings.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.AssemblyKeyFileAttribute&gt;</ph> attribute with a key file called <ph id="ph2">`keyfile.snk`</ph>, which is located in the directory where the assembly is compiled.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can also delay sign an assembly when compiling your source file.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Delay Signing an Assembly<ept id="p1">](../../../docs/framework/app-domains/delay-sign-assembly.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To sign an assembly with a strong name by using the compiler</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Compile your source code file or files with the <ph id="ph1">`/keyfile`</ph> or <ph id="ph2">`/delaysign`</ph> compiler option in C# and Visual Basic, or the <ph id="ph3">`/KEYFILE`</ph> or <ph id="ph4">`/DELAYSIGN`</ph> linker option in C++.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>After the option name, add a colon and the name of the key file.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When using command-line compilers, you can copy the key file to the directory that contains your source code files.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For information on delay signing, see <bpt id="p1">[</bpt>Delay Signing an Assembly<ept id="p1">](../../../docs/framework/app-domains/delay-sign-assembly.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example uses the C# compiler and signs the assembly <ph id="ph1">`UtilityLibrary.dll`</ph> with a strong name by using the key file <ph id="ph2">`sgKey.snk`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating and Using Strong-Named Assemblies<ept id="p1">](../../../docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Public-Private Key Pair<ept id="p1">](../../../docs/framework/app-domains/how-to-create-a-public-private-key-pair.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Al.exe (Assembly Linker)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delay Signing an Assembly<ept id="p1">](../../../docs/framework/app-domains/delay-sign-assembly.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managing Assembly and Manifest Signing<ept id="p1">](/visualstudio/ide/managing-assembly-and-manifest-signing)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Signing Page, Project Designer<ept id="p1">](https://msdn.microsoft.com/library/0k50fs3b)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>