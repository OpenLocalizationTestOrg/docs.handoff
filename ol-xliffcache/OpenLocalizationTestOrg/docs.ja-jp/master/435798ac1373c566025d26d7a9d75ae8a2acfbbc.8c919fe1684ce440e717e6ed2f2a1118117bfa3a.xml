{"content":"---\ntitle: \"Usage of the Switch Activity with Custom Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 482a48c4-eb83-40c3-a4e2-2f9a8af88b75\ncaps.latest.revision: 10\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Usage of the Switch Activity with Custom Types\nThis sample describes how to enable a <!--zz <xref:System.Activities.>--> `xref:System.Activities` Statements.Switch`1?qualifyHint=False&autoUpgrade=True activity to evaluate a user-defined complex type at runtime. In most traditional procedural programming languages, a [switch](http://go.microsoft.com/fwlink/?LinkId=180521) statement selects an execution logic based on the conditional evaluation of a variable. Traditionally, a `switch` statement operates on an expression that can be statically evaluated. For example, in C# this means that only primitive types, such as <xref:System.Boolean>, <xref:System.Int32>, <xref:System.String>, and enumeration types are supported.  \n  \n To enable switching on a custom class, logic must be implemented to evaluate values of the custom complex type at runtime. This sample demonstrates how to enable switching on a custom complex type named `Person`.  \n  \n-   In the custom class `Person`, a <xref:System.ComponentModel.TypeConverter> attribute is declared with the name of the custom <xref:System.ComponentModel.TypeConverter>.  \n  \n    ```  \n    [TypeConverter(typeof(PersonConverter))]  \n    public class Person  \n    {  \n       public string Name { get; set; }  \n       public int Age { get; set; }  \n    ...  \n  \n    ```  \n  \n-   In the custom class `Person`, the <xref:System.Object.Equals%2A> and <xref:System.Object.GetHashCode%2A> classes are overridden.  \n  \n    ```  \n    public override bool Equals(object obj)  \n    {  \n        Person person = obj as Person;  \n  \n        if (person != null)  \n        {  \n            return string.Equals(this.Name, person.Name);  \n        }  \n  \n        return false;  \n    }  \n  \n    public override int GetHashCode()  \n    {  \n        if (this.Name != null)  \n        {  \n            return this.Name.GetHashCode();  \n        }  \n  \n        return 0;  \n    }  \n  \n    ```  \n  \n-   A custom <xref:System.ComponentModel.TypeConverter> class is implemented that performs the conversion of an instance of the custom class to a string and a string to an instance of a custom class.  \n  \n    ```  \n    public class PersonConverter : TypeConverter  \n    {  \n        public override bool CanConvertFrom(ITypeDescriptorContext context,  \n           Type sourceType)  \n        {  \n            return (sourceType is string);  \n        }  \n  \n        // Overrides the ConvertFrom method of TypeConverter.  \n        public override object ConvertFrom(ITypeDescriptorContext context,  \n           CultureInfo culture, object value)  \n        {  \n            if (value == null)  \n            {  \n                return null;  \n            }  \n  \n            if (value is string)  \n            {  \n                return new Person  \n                {  \n                    Name = (string)value  \n                };  \n            }  \n  \n            return base.ConvertFrom(context, culture, value);  \n        }  \n  \n        // Overrides the ConvertTo method of TypeConverter.  \n        public override object ConvertTo(ITypeDescriptorContext context,  \n           CultureInfo culture, object value, Type destinationType)  \n        {  \n            if (destinationType == typeof(string))  \n            {  \n                if (value != null)  \n                {  \n                    return ((Person) value).Name;  \n                }  \n                else  \n                {  \n                    return null;  \n                }  \n            }  \n  \n            return base.ConvertTo(context, culture, value, destinationType);  \n        }  \n    }  \n    ```  \n  \n The following files are included in this sample:  \n  \n-   **Person.cs**: Defines the `Person` class.  \n  \n-   **PersonConverter.cs**: The type converter for the `Person` class.  \n  \n-   **Sequence.xaml**: a workflow that switches over the `Person` type.  \n  \n-   **Program.cs**: The main function that runs the workflow.  \n  \n#### To use this sample  \n  \n1.  Load Switch.sln in [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)].  \n  \n2.  Press CTRL+SHIFT+B to build the solution.  \n  \n3.  Press CTRL + F5 to run the sample.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Basic\\Built-InActivities\\Switch`  \n  \n## See Also  \n [Built-In Activity Library](../../../../docs/framework/windows-workflow-foundation/net-framework-4-5-built-in-activity-library.md)","nodes":[{"pos":[12,75],"content":"Usage of the Switch Activity with Custom Types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Usage of the Switch Activity with Custom Types | Microsoft Docs","pos":[0,63]}]},{"pos":[341,387],"content":"Usage of the Switch Activity with Custom Types","linkify":"Usage of the Switch Activity with Custom Types","nodes":[{"content":"Usage of the Switch Activity with Custom Types","pos":[0,46]}]},{"content":"This sample describes how to enable a <ph id=\"ph1\">&lt;!--zz &lt;xref:System.Activities.&gt;--&gt;</ph> <ph id=\"ph2\">`xref:System.Activities`</ph> Statements.Switch<ph id=\"ph3\">`1?qualifyHint=False&amp;autoUpgrade=True activity to evaluate a user-defined complex type at runtime. In most traditional procedural programming languages, a [switch](http://go.microsoft.com/fwlink/?LinkId=180521) statement selects an execution logic based on the conditional evaluation of a variable. Traditionally, a `</ph>switch` statement operates on an expression that can be statically evaluated.","pos":[388,898],"source":"This sample describes how to enable a <!--zz <xref:System.Activities.>--> `xref:System.Activities` Statements.Switch`1?qualifyHint=False&autoUpgrade=True activity to evaluate a user-defined complex type at runtime. In most traditional procedural programming languages, a [switch](http://go.microsoft.com/fwlink/?LinkId=180521) statement selects an execution logic based on the conditional evaluation of a variable. Traditionally, a `switch` statement operates on an expression that can be statically evaluated."},{"content":"For example, in C# this means that only primitive types, such as <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.String&gt;</ph>, and enumeration types are supported.","pos":[899,1066],"source":" For example, in C# this means that only primitive types, such as <xref:System.Boolean>, <xref:System.Int32>, <xref:System.String>, and enumeration types are supported."},{"content":"To enable switching on a custom class, logic must be implemented to evaluate values of the custom complex type at runtime.","pos":[1073,1195]},{"content":"This sample demonstrates how to enable switching on a custom complex type named <ph id=\"ph1\">`Person`</ph>.","pos":[1196,1285],"source":" This sample demonstrates how to enable switching on a custom complex type named `Person`."},{"pos":[1295,1463],"content":"In the custom class <ph id=\"ph1\">`Person`</ph>, a <ph id=\"ph2\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> attribute is declared with the name of the custom <ph id=\"ph3\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.","source":"In the custom class `Person`, a <xref:System.ComponentModel.TypeConverter> attribute is declared with the name of the custom <xref:System.ComponentModel.TypeConverter>."},{"pos":[1670,1798],"content":"In the custom class <ph id=\"ph1\">`Person`</ph>, the <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> classes are overridden.","source":"In the custom class `Person`, the <xref:System.Object.Equals%2A> and <xref:System.Object.GetHashCode%2A> classes are overridden."},{"content":"A custom <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class is implemented that performs the conversion of an instance of the custom class to a string and a string to an instance of a custom class.","pos":[2266,2461],"source":"A custom <xref:System.ComponentModel.TypeConverter> class is implemented that performs the conversion of an instance of the custom class to a string and a string to an instance of a custom class."},{"content":"The following files are included in this sample:","pos":[3932,3980]},{"pos":[3990,4032],"content":"<bpt id=\"p1\">**</bpt>Person.cs<ept id=\"p1\">**</ept>: Defines the <ph id=\"ph1\">`Person`</ph> class.","source":"**Person.cs**: Defines the `Person` class."},{"pos":[4042,4108],"content":"<bpt id=\"p1\">**</bpt>PersonConverter.cs<ept id=\"p1\">**</ept>: The type converter for the <ph id=\"ph1\">`Person`</ph> class.","source":"**PersonConverter.cs**: The type converter for the `Person` class."},{"pos":[4118,4185],"content":"<bpt id=\"p1\">**</bpt>Sequence.xaml<ept id=\"p1\">**</ept>: a workflow that switches over the <ph id=\"ph1\">`Person`</ph> type.","source":"**Sequence.xaml**: a workflow that switches over the `Person` type."},{"pos":[4195,4252],"content":"<bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>: The main function that runs the workflow.","source":"**Program.cs**: The main function that runs the workflow."},{"pos":[4263,4281],"content":"To use this sample","linkify":"To use this sample","nodes":[{"content":"To use this sample","pos":[0,18]}]},{"pos":[4291,4364],"content":"Load Switch.sln in <ph id=\"ph1\">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.","source":"Load Switch.sln in [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]."},{"content":"Press CTRL+SHIFT+B to build the solution.","pos":[4374,4415]},{"content":"Press CTRL + F5 to run the sample.","pos":[4425,4459]},{"pos":[4467,4599],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[4653,4979],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[4980,5030]},{"pos":[5117,5125],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5129,5259],"content":"<bpt id=\"p1\">[</bpt>Built-In Activity Library<ept id=\"p1\">](../../../../docs/framework/windows-workflow-foundation/net-framework-4-5-built-in-activity-library.md)</ept>","source":"[Built-In Activity Library](../../../../docs/framework/windows-workflow-foundation/net-framework-4-5-built-in-activity-library.md)"}]}