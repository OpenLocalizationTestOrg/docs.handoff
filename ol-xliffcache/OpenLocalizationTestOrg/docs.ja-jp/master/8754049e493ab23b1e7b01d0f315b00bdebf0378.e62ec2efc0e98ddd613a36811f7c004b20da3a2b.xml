{"content":"---\ntitle: \"How to: Create a Lambda Expression (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"lambda expressions [Visual Basic]\"\n  - \"expressions [Visual Basic], lambda\"\nms.assetid: 3279bd5c-80f7-410a-a7ba-f7085ed36aa5\n---\n# How to: Create a Lambda Expression (Visual Basic)\nA *lambda expression* is a function or subroutine that does not have a name. A lambda expression can be used wherever a delegate type is valid.  \n  \n### To create a single-line lambda expression function  \n  \n1.  In any situation where a delegate type could be used, type the keyword `Function`, as in the following example:  \n  \n     `Dim add1 =`   `Function`  \n  \n2.  In parentheses, directly after `Function`, type the parameters of the function. Notice that you do not specify a name after `Function`.  \n  \n     `Dim add1 = Function`   `(num As Integer)`  \n  \n3.  Following the parameter list, type a single expression as the body of the function. The value that the expression evaluates to is the value returned by the function. You do not use an `As` clause to specify the return type.  \n  \n     [!code-vb[VbVbalrLambdas#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#1)]  \n  \n     You call the lambda expression by passing in an integer argument.  \n  \n     [!code-vb[VbVbalrLambdas#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#2)]  \n  \n4.  Alternatively, the same result is accomplished by the following example:  \n  \n     [!code-vb[VbVbalrLambdas#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#3)]  \n  \n### To create a single-line lambda expression subroutine  \n  \n1.  In any situation where a delegate type could be used, type the keyword `Sub`, as shown in the following example.  \n  \n     `Dim add1 =`   `Sub`  \n  \n2.  In parentheses, directly after `Sub`, type the parameters of the subroutine. Notice that you do not specify a name after `Sub`.  \n  \n     `Dim add1 = Sub`   `(msg As String)`  \n  \n3.  Following the parameter list, type a single statement as the body of the subroutine.  \n  \n     [!code-vb[VbVbalrLambdas#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#17)]  \n  \n     You call the lambda expression by passing in a string argument.  \n  \n     [!code-vb[VbVbalrLambdas#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#18)]  \n  \n### To create a multiline lambda expression function  \n  \n1.  In any situation where a delegate type could be used, type the keyword `Function`, as shown in the following example.  \n  \n     `Dim add1 =`   `Function`  \n  \n2.  In parentheses, directly after `Function`, type the parameters of the function. Notice that you do not specify a name after `Function`.  \n  \n     `Dim add1 = Function`   `(index As Integer)`  \n  \n3.  Press ENTER. The `End Function` statement is automatically added.  \n  \n4.  Within the body of the function, add the following code to create an expression and return the value. You do not use an `As` clause to specify the return type.  \n  \n     [!code-vb[VbVbalrLambdas#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#19)]  \n  \n     You call the lambda expression by passing in an integer argument.  \n  \n     [!code-vb[VbVbalrLambdas#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#20)]  \n  \n### To create a multiline lambda expression subroutine  \n  \n1.  In any situation where a delegate type could be used, type the keyword `Sub`, as shown in the following example:  \n  \n     `Dim add1 =`   `Sub`  \n  \n2.  In parentheses, directly after `Sub`, type the parameters of the subroutine. Notice that you do not specify a name after `Sub`.  \n  \n     `Dim add1 = Sub`  `(msg As String)`  \n  \n3.  Press ENTER. The `End Sub` statement is automatically added.  \n  \n4.  Within the body of the function, add the following code to execute when the subroutine is invoked.  \n  \n     [!code-vb[VbVbalrLambdas#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#21)]  \n  \n     You call the lambda expression by passing in a string argument.  \n  \n     [!code-vb[VbVbalrLambdas#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#22)]  \n  \n## Example  \n A common use of lambda expressions is to define a function that can be passed in as the argument for a parameter whose type is `Delegate`. In the following example, the <xref:System.Diagnostics.Process.GetProcesses%2A> method returns an array of the processes running on the local computer. The <xref:System.Linq.Enumerable.Where%2A> method from the <xref:System.Linq.Enumerable> class requires a `Boolean` delegate as its argument. The lambda expression in the example is used for that purpose. It returns `True` for each process that has only one thread, and those are selected in `filteredList`.  \n  \n [!code-vb[VbVbalrLambdas#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class4.vb#10)]  \n  \n The previous example is equivalent to the following code, which is written in [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] syntax:  \n  \n [!code-vb[VbVbalrLambdas#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class5.vb#11)]  \n  \n## See also\n\n- <xref:System.Linq.Enumerable>\n- [Lambda Expressions](./lambda-expressions.md)\n- [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md)\n- [Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md)\n- [Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md)\n- [How to: Pass Procedures to Another Procedure in Visual Basic](../../../../visual-basic/programming-guide/language-features/delegates/how-to-pass-procedures-to-another-procedure.md)\n- [Delegate Statement](../../../../visual-basic/language-reference/statements/delegate-statement.md)\n- [Introduction to LINQ in Visual Basic](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)\n","nodes":[{"pos":[4,234],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create a Lambda Expression (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"lambda expressions [Visual Basic]\"\n  - \"expressions [Visual Basic], lambda\"\nms.assetid: 3279bd5c-80f7-410a-a7ba-f7085ed36aa5","nodes":[{"content":"How to: Create a Lambda Expression (Visual Basic)","nodes":[{"pos":[0,49],"content":"How to: Create a Lambda Expression (Visual Basic)","nodes":[{"content":"How to: Create a Lambda Expression (Visual Basic)","pos":[0,49]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[241,290],"content":"How to: Create a Lambda Expression (Visual Basic)","linkify":"How to: Create a Lambda Expression (Visual Basic)","nodes":[{"content":"How to: Create a Lambda Expression (Visual Basic)","pos":[0,49]}]},{"content":"A <bpt id=\"p1\">*</bpt>lambda expression<ept id=\"p1\">*</ept> is a function or subroutine that does not have a name.","pos":[291,367],"source":"A *lambda expression* is a function or subroutine that does not have a name."},{"content":"A lambda expression can be used wherever a delegate type is valid.","pos":[368,434]},{"pos":[444,494],"content":"To create a single-line lambda expression function","linkify":"To create a single-line lambda expression function","nodes":[{"content":"To create a single-line lambda expression function","pos":[0,50]}]},{"pos":[504,615],"content":"In any situation where a delegate type could be used, type the keyword <ph id=\"ph1\">`Function`</ph>, as in the following example:","source":"In any situation where a delegate type could be used, type the keyword `Function`, as in the following example:"},{"pos":[626,651],"content":"<ph id=\"ph1\">`Dim add1 =`</ph>   <ph id=\"ph2\">`Function`</ph>","source":"`Dim add1 =`   `Function`"},{"content":"In parentheses, directly after <ph id=\"ph1\">`Function`</ph>, type the parameters of the function.","pos":[661,740],"source":"In parentheses, directly after `Function`, type the parameters of the function."},{"content":"Notice that you do not specify a name after <ph id=\"ph1\">`Function`</ph>.","pos":[741,796],"source":" Notice that you do not specify a name after `Function`."},{"pos":[807,849],"content":"<ph id=\"ph1\">`Dim add1 = Function`</ph>   <ph id=\"ph2\">`(num As Integer)`</ph>","source":"`Dim add1 = Function`   `(num As Integer)`"},{"content":"Following the parameter list, type a single expression as the body of the function.","pos":[859,942]},{"content":"The value that the expression evaluates to is the value returned by the function.","pos":[943,1024]},{"content":"You do not use an <ph id=\"ph1\">`As`</ph> clause to specify the return type.","pos":[1025,1082],"source":" You do not use an `As` clause to specify the return type."},{"content":"You call the lambda expression by passing in an integer argument.","pos":[1215,1280]},{"content":"Alternatively, the same result is accomplished by the following example:","pos":[1412,1484]},{"pos":[1616,1668],"content":"To create a single-line lambda expression subroutine","linkify":"To create a single-line lambda expression subroutine","nodes":[{"content":"To create a single-line lambda expression subroutine","pos":[0,52]}]},{"pos":[1678,1790],"content":"In any situation where a delegate type could be used, type the keyword <ph id=\"ph1\">`Sub`</ph>, as shown in the following example.","source":"In any situation where a delegate type could be used, type the keyword `Sub`, as shown in the following example."},{"pos":[1801,1821],"content":"<ph id=\"ph1\">`Dim add1 =`</ph>   <ph id=\"ph2\">`Sub`</ph>","source":"`Dim add1 =`   `Sub`"},{"content":"In parentheses, directly after <ph id=\"ph1\">`Sub`</ph>, type the parameters of the subroutine.","pos":[1831,1907],"source":"In parentheses, directly after `Sub`, type the parameters of the subroutine."},{"content":"Notice that you do not specify a name after <ph id=\"ph1\">`Sub`</ph>.","pos":[1908,1958],"source":" Notice that you do not specify a name after `Sub`."},{"pos":[1969,2005],"content":"<ph id=\"ph1\">`Dim add1 = Sub`</ph>   <ph id=\"ph2\">`(msg As String)`</ph>","source":"`Dim add1 = Sub`   `(msg As String)`"},{"content":"Following the parameter list, type a single statement as the body of the subroutine.","pos":[2015,2099]},{"content":"You call the lambda expression by passing in a string argument.","pos":[2234,2297]},{"pos":[2431,2479],"content":"To create a multiline lambda expression function","linkify":"To create a multiline lambda expression function","nodes":[{"content":"To create a multiline lambda expression function","pos":[0,48]}]},{"pos":[2489,2606],"content":"In any situation where a delegate type could be used, type the keyword <ph id=\"ph1\">`Function`</ph>, as shown in the following example.","source":"In any situation where a delegate type could be used, type the keyword `Function`, as shown in the following example."},{"pos":[2617,2642],"content":"<ph id=\"ph1\">`Dim add1 =`</ph>   <ph id=\"ph2\">`Function`</ph>","source":"`Dim add1 =`   `Function`"},{"content":"In parentheses, directly after <ph id=\"ph1\">`Function`</ph>, type the parameters of the function.","pos":[2652,2731],"source":"In parentheses, directly after `Function`, type the parameters of the function."},{"content":"Notice that you do not specify a name after <ph id=\"ph1\">`Function`</ph>.","pos":[2732,2787],"source":" Notice that you do not specify a name after `Function`."},{"pos":[2798,2842],"content":"<ph id=\"ph1\">`Dim add1 = Function`</ph>   <ph id=\"ph2\">`(index As Integer)`</ph>","source":"`Dim add1 = Function`   `(index As Integer)`"},{"content":"Press ENTER.","pos":[2852,2864]},{"content":"The <ph id=\"ph1\">`End Function`</ph> statement is automatically added.","pos":[2865,2917],"source":" The `End Function` statement is automatically added."},{"content":"Within the body of the function, add the following code to create an expression and return the value.","pos":[2927,3028]},{"content":"You do not use an <ph id=\"ph1\">`As`</ph> clause to specify the return type.","pos":[3029,3086],"source":" You do not use an `As` clause to specify the return type."},{"content":"You call the lambda expression by passing in an integer argument.","pos":[3221,3286]},{"pos":[3420,3470],"content":"To create a multiline lambda expression subroutine","linkify":"To create a multiline lambda expression subroutine","nodes":[{"content":"To create a multiline lambda expression subroutine","pos":[0,50]}]},{"pos":[3480,3592],"content":"In any situation where a delegate type could be used, type the keyword <ph id=\"ph1\">`Sub`</ph>, as shown in the following example:","source":"In any situation where a delegate type could be used, type the keyword `Sub`, as shown in the following example:"},{"pos":[3603,3623],"content":"<ph id=\"ph1\">`Dim add1 =`</ph>   <ph id=\"ph2\">`Sub`</ph>","source":"`Dim add1 =`   `Sub`"},{"content":"In parentheses, directly after <ph id=\"ph1\">`Sub`</ph>, type the parameters of the subroutine.","pos":[3633,3709],"source":"In parentheses, directly after `Sub`, type the parameters of the subroutine."},{"content":"Notice that you do not specify a name after <ph id=\"ph1\">`Sub`</ph>.","pos":[3710,3760],"source":" Notice that you do not specify a name after `Sub`."},{"pos":[3771,3806],"content":"<ph id=\"ph1\">`Dim add1 = Sub`</ph>  <ph id=\"ph2\">`(msg As String)`</ph>","source":"`Dim add1 = Sub`  `(msg As String)`"},{"content":"Press ENTER.","pos":[3816,3828]},{"content":"The <ph id=\"ph1\">`End Sub`</ph> statement is automatically added.","pos":[3829,3876],"source":" The `End Sub` statement is automatically added."},{"content":"Within the body of the function, add the following code to execute when the subroutine is invoked.","pos":[3886,3984]},{"content":"You call the lambda expression by passing in a string argument.","pos":[4119,4182]},{"pos":[4315,4322],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"A common use of lambda expressions is to define a function that can be passed in as the argument for a parameter whose type is <ph id=\"ph1\">`Delegate`</ph>.","pos":[4326,4464],"source":"A common use of lambda expressions is to define a function that can be passed in as the argument for a parameter whose type is `Delegate`."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> method returns an array of the processes running on the local computer.","pos":[4465,4616],"source":" In the following example, the <xref:System.Diagnostics.Process.GetProcesses%2A> method returns an array of the processes running on the local computer."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method from the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable&gt;</ph> class requires a <ph id=\"ph3\">`Boolean`</ph> delegate as its argument.","pos":[4617,4758],"source":" The <xref:System.Linq.Enumerable.Where%2A> method from the <xref:System.Linq.Enumerable> class requires a `Boolean` delegate as its argument."},{"content":"The lambda expression in the example is used for that purpose.","pos":[4759,4821]},{"content":"It returns <ph id=\"ph1\">`True`</ph> for each process that has only one thread, and those are selected in <ph id=\"ph2\">`filteredList`</ph>.","pos":[4822,4924],"source":" It returns `True` for each process that has only one thread, and those are selected in `filteredList`."},{"pos":[5051,5192],"content":"The previous example is equivalent to the following code, which is written in <ph id=\"ph1\">[!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]</ph> syntax:","source":"The previous example is equivalent to the following code, which is written in [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] syntax:"},{"pos":[5321,5329],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5365,5410],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](./lambda-expressions.md)</ept>","source":"[Lambda Expressions](./lambda-expressions.md)"},{"pos":[5413,5511],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[5514,5602],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[5605,5697],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept>","source":"[Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md)"},{"pos":[5700,5881],"content":"<bpt id=\"p1\">[</bpt>How to: Pass Procedures to Another Procedure in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/how-to-pass-procedures-to-another-procedure.md)</ept>","source":"[How to: Pass Procedures to Another Procedure in Visual Basic](../../../../visual-basic/programming-guide/language-features/delegates/how-to-pass-procedures-to-another-procedure.md)"},{"pos":[5884,5982],"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/delegate-statement.md)</ept>","source":"[Delegate Statement](../../../../visual-basic/language-reference/statements/delegate-statement.md)"},{"pos":[5985,6114],"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>","source":"[Introduction to LINQ in Visual Basic](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)"}]}