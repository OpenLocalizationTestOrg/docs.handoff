{"content":"---\ntitle: \"Boolean Data Type (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.FALSE\"\n  - \"vb.TRUE\"\n  - \"vb.Boolean\"\nhelpviewer_keywords: \n  - \"Boolean data type\"\n  - \"Boolean values [Visual Basic], False keyword\"\n  - \"False keyword [Visual Basic]\"\n  - \"True keyword [Visual Basic]\"\n  - \"Boolean values [Visual Basic], True keyword\"\nms.assetid: 4858e630-4813-4216-a55e-f4d0feb884e4\n---\n# Boolean Data Type (Visual Basic)\nHolds values that can be only `True` or `False`. The keywords `True` and `False` correspond to the two states of `Boolean` variables.  \n  \n## Remarks  \n Use the [Boolean Data Type (Visual Basic)](../../../visual-basic/language-reference/data-types/boolean-data-type.md) to contain two-state values such as true/false, yes/no, or on/off.  \n  \n The default value of `Boolean` is `False`.  \n  \n `Boolean` values are not stored as numbers, and the stored values are not intended to be equivalent to numbers. You should never write code that relies on equivalent numeric values for `True` and `False`. Whenever possible, you should restrict usage of `Boolean` variables to the logical values for which they are designed.  \n  \n## Type Conversions  \n When Visual Basic converts numeric data type values to `Boolean`, 0 becomes `False` and all other values become `True`. When Visual Basic converts `Boolean` values to numeric types, `False` becomes 0 and `True` becomes -1.  \n  \n When you convert between `Boolean` values and numeric data types, keep in mind that the .NET Framework conversion methods do not always produce the same results as the Visual Basic conversion keywords. This is because the Visual Basic conversion retains behavior compatible with previous versions. For more information, see \"Boolean Type Does Not Convert to Numeric Type Accurately\" in [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md).  \n  \n## Programming Tips  \n  \n-   **Negative Numbers.** `Boolean` is not a numeric type and cannot represent a negative value. In any case, you should not use `Boolean` to hold numeric values.  \n  \n-   **Type Characters.** `Boolean` has no literal type character or identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Boolean?displayProperty=nameWithType> structure.  \n  \n## Example  \n In the following example, `runningVB` is a `Boolean` variable, which stores a simple yes/no setting.  \n  \n```  \nDim runningVB As Boolean  \n' Check to see if program is running on Visual Basic engine.  \nIf scriptEngine = \"VB\" Then  \n    runningVB = True  \nEnd If  \n```  \n  \n## See also\n\n- <xref:System.Boolean?displayProperty=nameWithType>\n- [Data Types](../../../visual-basic/language-reference/data-types/index.md)\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)\n- [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n- [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)\n- [CType Function](../../../visual-basic/language-reference/functions/ctype-function.md)\n","nodes":[{"pos":[4,390],"embed":true,"restype":"x-metadata","content":"title: \"Boolean Data Type (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.FALSE\"\n  - \"vb.TRUE\"\n  - \"vb.Boolean\"\nhelpviewer_keywords: \n  - \"Boolean data type\"\n  - \"Boolean values [Visual Basic], False keyword\"\n  - \"False keyword [Visual Basic]\"\n  - \"True keyword [Visual Basic]\"\n  - \"Boolean values [Visual Basic], True keyword\"\nms.assetid: 4858e630-4813-4216-a55e-f4d0feb884e4","nodes":[{"content":"Boolean Data Type (Visual Basic)","nodes":[{"pos":[0,32],"content":"Boolean Data Type (Visual Basic)","nodes":[{"content":"Boolean Data Type (Visual Basic)","pos":[0,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[397,429],"content":"Boolean Data Type (Visual Basic)","linkify":"Boolean Data Type (Visual Basic)","nodes":[{"content":"Boolean Data Type (Visual Basic)","pos":[0,32]}]},{"content":"Holds values that can be only <ph id=\"ph1\">`True`</ph> or <ph id=\"ph2\">`False`</ph>.","pos":[430,478],"source":"Holds values that can be only `True` or `False`."},{"content":"The keywords <ph id=\"ph1\">`True`</ph> and <ph id=\"ph2\">`False`</ph> correspond to the two states of <ph id=\"ph3\">`Boolean`</ph> variables.","pos":[479,563],"source":" The keywords `True` and `False` correspond to the two states of `Boolean` variables."},{"pos":[572,579],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[583,766],"content":"Use the <bpt id=\"p1\">[</bpt>Boolean Data Type (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> to contain two-state values such as true/false, yes/no, or on/off.","source":"Use the [Boolean Data Type (Visual Basic)](../../../visual-basic/language-reference/data-types/boolean-data-type.md) to contain two-state values such as true/false, yes/no, or on/off."},{"pos":[773,815],"content":"The default value of <ph id=\"ph1\">`Boolean`</ph> is <ph id=\"ph2\">`False`</ph>.","source":"The default value of `Boolean` is `False`."},{"content":"<ph id=\"ph1\">`Boolean`</ph> values are not stored as numbers, and the stored values are not intended to be equivalent to numbers.","pos":[822,933],"source":"`Boolean` values are not stored as numbers, and the stored values are not intended to be equivalent to numbers."},{"content":"You should never write code that relies on equivalent numeric values for <ph id=\"ph1\">`True`</ph> and <ph id=\"ph2\">`False`</ph>.","pos":[934,1026],"source":" You should never write code that relies on equivalent numeric values for `True` and `False`."},{"content":"Whenever possible, you should restrict usage of <ph id=\"ph1\">`Boolean`</ph> variables to the logical values for which they are designed.","pos":[1027,1145],"source":" Whenever possible, you should restrict usage of `Boolean` variables to the logical values for which they are designed."},{"pos":[1154,1170],"content":"Type Conversions","linkify":"Type Conversions","nodes":[{"content":"Type Conversions","pos":[0,16]}]},{"content":"When Visual Basic converts numeric data type values to <ph id=\"ph1\">`Boolean`</ph>, 0 becomes <ph id=\"ph2\">`False`</ph> and all other values become <ph id=\"ph3\">`True`</ph>.","pos":[1174,1293],"source":"When Visual Basic converts numeric data type values to `Boolean`, 0 becomes `False` and all other values become `True`."},{"content":"When Visual Basic converts <ph id=\"ph1\">`Boolean`</ph> values to numeric types, <ph id=\"ph2\">`False`</ph> becomes 0 and <ph id=\"ph3\">`True`</ph> becomes -1.","pos":[1294,1396],"source":" When Visual Basic converts `Boolean` values to numeric types, `False` becomes 0 and `True` becomes -1."},{"content":"When you convert between <ph id=\"ph1\">`Boolean`</ph> values and numeric data types, keep in mind that the .NET Framework conversion methods do not always produce the same results as the Visual Basic conversion keywords.","pos":[1403,1604],"source":"When you convert between `Boolean` values and numeric data types, keep in mind that the .NET Framework conversion methods do not always produce the same results as the Visual Basic conversion keywords."},{"content":"This is because the Visual Basic conversion retains behavior compatible with previous versions.","pos":[1605,1700]},{"content":"For more information, see \"Boolean Type Does Not Convert to Numeric Type Accurately\" in <bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>.","pos":[1701,1918],"source":" For more information, see \"Boolean Type Does Not Convert to Numeric Type Accurately\" in [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)."},{"pos":[1927,1943],"content":"Programming Tips","linkify":"Programming Tips","nodes":[{"content":"Programming Tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Negative Numbers.<ept id=\"p1\">**</ept>","pos":[1953,1974],"source":"**Negative Numbers.**"},{"content":"<ph id=\"ph1\">`Boolean`</ph> is not a numeric type and cannot represent a negative value.","pos":[1975,2045],"source":"`Boolean` is not a numeric type and cannot represent a negative value."},{"content":"In any case, you should not use <ph id=\"ph1\">`Boolean`</ph> to hold numeric values.","pos":[2046,2111],"source":" In any case, you should not use `Boolean` to hold numeric values."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[2121,2141],"source":"**Type Characters.**"},{"content":"<ph id=\"ph1\">`Boolean`</ph> has no literal type character or identifier type character.","pos":[2142,2211],"source":"`Boolean` has no literal type character or identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[2221,2240],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Boolean?displayProperty=nameWithType&gt;</ph> structure.","pos":[2241,2354],"source":" The corresponding type in the .NET Framework is the <xref:System.Boolean?displayProperty=nameWithType> structure."},{"pos":[2363,2370],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2374,2474],"content":"In the following example, <ph id=\"ph1\">`runningVB`</ph> is a <ph id=\"ph2\">`Boolean`</ph> variable, which stores a simple yes/no setting.","source":"In the following example, `runningVB` is a `Boolean` variable, which stores a simple yes/no setting."},{"pos":[2650,2658],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2715,2789],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[2792,2900],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[2903,2996],"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept>","source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)"},{"pos":[2999,3129],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"},{"pos":[3132,3260],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>","source":"[Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)"},{"pos":[3263,3349],"content":"<bpt id=\"p1\">[</bpt>CType Function<ept id=\"p1\">](../../../visual-basic/language-reference/functions/ctype-function.md)</ept>","source":"[CType Function](../../../visual-basic/language-reference/functions/ctype-function.md)"}]}