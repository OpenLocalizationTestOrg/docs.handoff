{"content":"---\ntitle: \"async - C# Reference\"\nms.custom: seodec18\n\nms.date: 05/22/2017\nf1_keywords: \n  - \"async_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"async keyword [C#]\"\n  - \"async method [C#]\"\n  - \"async [C#]\"\nms.assetid: 16f14f09-b2ce-42c7-a875-e4eca5d50674\n---\n# async (C# Reference)\nUse the `async` modifier to specify that a method, [lambda expression](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md), or [anonymous method](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md) is asynchronous. If you use this modifier on a method or expression, it's referred to as an *async method*. The following example defines an async method named `ExampleMethodAsync`: \n  \n```csharp  \npublic async Task<int> ExampleMethodAsync()  \n{  \n    // . . . .  \n}  \n```  \n \nIf you're new to asynchronous programming or do not understand how an async method uses the `await` keyword to do potentially long-running work without blocking the caller’s thread, read the introduction in [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md). The following code is found inside an async method and calls the <xref:System.Net.Http.HttpClient.GetStringAsync%2a?displayProperty=nameWithType> method: \n  \n```csharp  \nstring contents = await httpClient.GetStringAsync(requestUrl);  \n```  \n  \nAn async method runs synchronously until it reaches its first `await` expression, at which point the method is suspended until the awaited task is complete. In the meantime, control returns to the caller of the method, as the example in the next section shows.  \n  \nIf the method that the `async` keyword modifies doesn't contain an `await` expression or statement, the method executes synchronously. A compiler warning alerts you to any async methods that don't contain `await` statements, because that situation might indicate an error. See [Compiler Warning (level 1) CS4014](../../../csharp/language-reference/compiler-messages/cs4014.md).  \n  \n The `async` keyword is contextual in that it's a keyword only when it modifies a method, a lambda expression, or an anonymous method. In all other contexts, it's interpreted as an identifier.  \n  \n## Example  \nThe following example shows the structure and flow of control between an async event handler, `StartButton_Click`, and an async method, `ExampleMethodAsync`. The result from the async method is the number of characters of a web page. The code is suitable for a Windows Presentation Foundation (WPF) app or Windows Store app that you create in Visual Studio; see the code comments for setting up the app.  \n\nYou can run this code in Visual Studio as a Windows Presentation Foundation (WPF) app or a Windows Store app. You need a Button control named `StartButton` and a Textbox control named `ResultsTextBox`. Remember to set the names and handler so that you have something like this:  \n\n```xaml\n<Button Content=\"Button\" HorizontalAlignment=\"Left\" Margin=\"88,77,0,0\" VerticalAlignment=\"Top\" Width=\"75\"  \n        Click=\"StartButton_Click\" Name=\"StartButton\"/>  \n<TextBox HorizontalAlignment=\"Left\" Height=\"137\" Margin=\"88,140,0,0\" TextWrapping=\"Wrap\"   \n         Text=\"&lt;Enter a URL&gt;\" VerticalAlignment=\"Top\" Width=\"310\" Name=\"ResultsTextBox\"/>  \n```\n  \nTo run the code as a WPF app:  \n\n- Paste this code into the `MainWindow` class in MainWindow.xaml.cs.  \n- Add a reference to System.Net.Http.  \n- Add a `using` directive for System.Net.Http.  \n  \nTo run the code as a Windows Store app:  \n- Paste this code into the `MainPage` class in MainPage.xaml.cs.  \n- Add using directives for System.Net.Http and System.Threading.Tasks.  \n  \n[!code-csharp[wpf-async](../../../../samples/snippets/csharp/language-reference/keywords/async/wpf/mainwindow.xaml.cs#1)]\n  \n> [!IMPORTANT]\n>  For more information about tasks and the code that executes while waiting for a task, see [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md). For a full WPF example that uses similar elements, see [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md).  \n  \n## Return Types  \nAn async method can have the following return types:\n\n- <xref:System.Threading.Tasks.Task>\n- <xref:System.Threading.Tasks.Task%601>\n- [void](../../../csharp/language-reference/keywords/void.md), which should only be used for event handlers.\n- Starting with C# 7.0, any type that has an accessible `GetAwaiter` method. The `System.Threading.Tasks.ValueTask<TResult>` type is one such implementation. It is available by adding the NuGet package `System.Threading.Tasks.Extensions`. \n\nThe async method can't declare any [in](../../../csharp/language-reference/keywords/in-parameter-modifier.md), [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out-parameter-modifier.md) parameters, nor can it have a [reference return value](../../programming-guide/classes-and-structs/ref-returns.md), but it can call methods that have such parameters.  \n  \nYou specify `Task<TResult>` as the return type of an async method if the [return](../../../csharp/language-reference/keywords/return.md) statement of the method specifies an operand of type `TResult`. You use `Task` if no meaningful value is returned when the method is completed. That is, a call to the method returns a `Task`, but when the `Task` is completed, any `await` expression that's awaiting the `Task` evaluates to `void`.  \n  \nYou use the `void` return type primarily to define event handlers, which require that return type. The caller of a `void`-returning async method can't await it and can't catch exceptions that the method throws.  \n\nStarting with C# 7.0, you return another type, typically a value type, that has a `GetAwaiter` method to minimize memory allocations in performance-critical sections of code. \n\nFor more information and examples, see [Async Return Types](../../../csharp/programming-guide/concepts/async/async-return-types.md).  \n  \n## See also\n\n- <xref:System.Runtime.CompilerServices.AsyncStateMachineAttribute>\n- [await](../../../csharp/language-reference/keywords/await.md)\n- [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)\n- [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md)\n","nodes":[{"pos":[4,251],"embed":true,"restype":"x-metadata","content":"title: \"async - C# Reference\"\nms.custom: seodec18\n\nms.date: 05/22/2017\nf1_keywords: \n  - \"async_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"async keyword [C#]\"\n  - \"async method [C#]\"\n  - \"async [C#]\"\nms.assetid: 16f14f09-b2ce-42c7-a875-e4eca5d50674","nodes":[{"content":"async - C# Reference","nodes":[{"pos":[0,20],"content":"async - C# Reference","nodes":[{"content":"async - C# Reference","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[258,278],"content":"async (C# Reference)","linkify":"async (C# Reference)","nodes":[{"content":"async (C# Reference)","pos":[0,20]}]},{"content":"Use the <ph id=\"ph1\">`async`</ph> modifier to specify that a method, <bpt id=\"p1\">[</bpt>lambda expression<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>, or <bpt id=\"p2\">[</bpt>anonymous method<ept id=\"p2\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept> is asynchronous.","pos":[279,568],"source":"Use the `async` modifier to specify that a method, [lambda expression](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md), or [anonymous method](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md) is asynchronous."},{"content":"If you use this modifier on a method or expression, it's referred to as an <bpt id=\"p1\">*</bpt>async method<ept id=\"p1\">*</ept>.","pos":[569,659],"source":" If you use this modifier on a method or expression, it's referred to as an *async method*."},{"content":"The following example defines an async method named <ph id=\"ph1\">`ExampleMethodAsync`</ph>:","pos":[660,733],"source":" The following example defines an async method named `ExampleMethodAsync`:"},{"content":"If you're new to asynchronous programming or do not understand how an async method uses the <ph id=\"ph1\">`await`</ph> keyword to do potentially long-running work without blocking the caller’s thread, read the introduction in <bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/index.md)</ept>.","pos":[829,1143],"source":"If you're new to asynchronous programming or do not understand how an async method uses the `await` keyword to do potentially long-running work without blocking the caller’s thread, read the introduction in [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md)."},{"content":"The following code is found inside an async method and calls the <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient.GetStringAsync%2a?displayProperty=nameWithType&gt;</ph> method:","pos":[1144,1297],"source":" The following code is found inside an async method and calls the <xref:System.Net.Http.HttpClient.GetStringAsync%2a?displayProperty=nameWithType> method:"},{"content":"An async method runs synchronously until it reaches its first <ph id=\"ph1\">`await`</ph> expression, at which point the method is suspended until the awaited task is complete.","pos":[1388,1544],"source":"An async method runs synchronously until it reaches its first `await` expression, at which point the method is suspended until the awaited task is complete."},{"content":"In the meantime, control returns to the caller of the method, as the example in the next section shows.","pos":[1545,1648]},{"content":"If the method that the <ph id=\"ph1\">`async`</ph> keyword modifies doesn't contain an <ph id=\"ph2\">`await`</ph> expression or statement, the method executes synchronously.","pos":[1654,1788],"source":"If the method that the `async` keyword modifies doesn't contain an `await` expression or statement, the method executes synchronously."},{"content":"A compiler warning alerts you to any async methods that don't contain <ph id=\"ph1\">`await`</ph> statements, because that situation might indicate an error.","pos":[1789,1926],"source":" A compiler warning alerts you to any async methods that don't contain `await` statements, because that situation might indicate an error."},{"content":"See <bpt id=\"p1\">[</bpt>Compiler Warning (level 1) CS4014<ept id=\"p1\">](../../../csharp/language-reference/compiler-messages/cs4014.md)</ept>.","pos":[1927,2031],"source":" See [Compiler Warning (level 1) CS4014](../../../csharp/language-reference/compiler-messages/cs4014.md)."},{"content":"The <ph id=\"ph1\">`async`</ph> keyword is contextual in that it's a keyword only when it modifies a method, a lambda expression, or an anonymous method.","pos":[2038,2171],"source":"The `async` keyword is contextual in that it's a keyword only when it modifies a method, a lambda expression, or an anonymous method."},{"content":"In all other contexts, it's interpreted as an identifier.","pos":[2172,2229]},{"pos":[2238,2245],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the structure and flow of control between an async event handler, <ph id=\"ph1\">`StartButton_Click`</ph>, and an async method, <ph id=\"ph2\">`ExampleMethodAsync`</ph>.","pos":[2248,2405],"source":"The following example shows the structure and flow of control between an async event handler, `StartButton_Click`, and an async method, `ExampleMethodAsync`."},{"content":"The result from the async method is the number of characters of a web page.","pos":[2406,2481]},{"content":"The code is suitable for a Windows Presentation Foundation (WPF) app or Windows Store app that you create in Visual Studio; see the code comments for setting up the app.","pos":[2482,2651]},{"content":"You can run this code in Visual Studio as a Windows Presentation Foundation (WPF) app or a Windows Store app.","pos":[2655,2764]},{"content":"You need a Button control named <ph id=\"ph1\">`StartButton`</ph> and a Textbox control named <ph id=\"ph2\">`ResultsTextBox`</ph>.","pos":[2765,2856],"source":" You need a Button control named `StartButton` and a Textbox control named `ResultsTextBox`."},{"content":"Remember to set the names and handler so that you have something like this:","pos":[2857,2932]},{"content":"To run the code as a WPF app:","pos":[3306,3335]},{"pos":[3341,3407],"content":"Paste this code into the <ph id=\"ph1\">`MainWindow`</ph> class in MainWindow.xaml.cs.","source":"Paste this code into the `MainWindow` class in MainWindow.xaml.cs."},{"content":"Add a reference to System.Net.Http.","pos":[3412,3447]},{"pos":[3452,3496],"content":"Add a <ph id=\"ph1\">`using`</ph> directive for System.Net.Http.","source":"Add a `using` directive for System.Net.Http."},{"content":"To run the code as a Windows Store app:","pos":[3502,3541]},{"pos":[3546,3608],"content":"Paste this code into the <ph id=\"ph1\">`MainPage`</ph> class in MainPage.xaml.cs.","source":"Paste this code into the `MainPage` class in MainPage.xaml.cs."},{"content":"Add using directives for System.Net.Http and System.Threading.Tasks.","pos":[3613,3681]},{"pos":[3814,4249],"content":"[!IMPORTANT]\n For more information about tasks and the code that executes while waiting for a task, see [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md). For a full WPF example that uses similar elements, see [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md).","leadings":["","> "],"nodes":[{"content":"For more information about tasks and the code that executes while waiting for a task, see [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md). For a full WPF example that uses similar elements, see [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md).","pos":[14,433],"nodes":[{"content":"For more information about tasks and the code that executes while waiting for a task, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/index.md)</ept>.","pos":[0,197],"source":"For more information about tasks and the code that executes while waiting for a task, see [Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md)."},{"content":"For a full WPF example that uses similar elements, see <bpt id=\"p1\">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.","pos":[198,419],"source":" For a full WPF example that uses similar elements, see [Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)."}]}]},{"pos":[4258,4270],"content":"Return Types","linkify":"Return Types","nodes":[{"content":"Return Types","pos":[0,12]}]},{"content":"An async method can have the following return types:","pos":[4273,4325]},{"pos":[4407,4513],"content":"<bpt id=\"p1\">[</bpt>void<ept id=\"p1\">](../../../csharp/language-reference/keywords/void.md)</ept>, which should only be used for event handlers.","source":"[void](../../../csharp/language-reference/keywords/void.md), which should only be used for event handlers."},{"content":"Starting with C# 7.0, any type that has an accessible <ph id=\"ph1\">`GetAwaiter`</ph> method.","pos":[4516,4590],"source":"Starting with C# 7.0, any type that has an accessible `GetAwaiter` method."},{"content":"The <ph id=\"ph1\">`System.Threading.Tasks.ValueTask&lt;TResult&gt;`</ph> type is one such implementation.","pos":[4591,4671],"source":" The `System.Threading.Tasks.ValueTask<TResult>` type is one such implementation."},{"content":"It is available by adding the NuGet package <ph id=\"ph1\">`System.Threading.Tasks.Extensions`</ph>.","pos":[4672,4752],"source":" It is available by adding the NuGet package `System.Threading.Tasks.Extensions`."},{"pos":[4755,5170],"content":"The async method can't declare any <bpt id=\"p1\">[</bpt>in<ept id=\"p1\">](../../../csharp/language-reference/keywords/in-parameter-modifier.md)</ept>, <bpt id=\"p2\">[</bpt>ref<ept id=\"p2\">](../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id=\"p3\">[</bpt>out<ept id=\"p3\">](../../../csharp/language-reference/keywords/out-parameter-modifier.md)</ept> parameters, nor can it have a <bpt id=\"p4\">[</bpt>reference return value<ept id=\"p4\">](../../programming-guide/classes-and-structs/ref-returns.md)</ept>, but it can call methods that have such parameters.","source":"The async method can't declare any [in](../../../csharp/language-reference/keywords/in-parameter-modifier.md), [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out-parameter-modifier.md) parameters, nor can it have a [reference return value](../../programming-guide/classes-and-structs/ref-returns.md), but it can call methods that have such parameters."},{"content":"You specify <ph id=\"ph1\">`Task&lt;TResult&gt;`</ph> as the return type of an async method if the <bpt id=\"p1\">[</bpt>return<ept id=\"p1\">](../../../csharp/language-reference/keywords/return.md)</ept> statement of the method specifies an operand of type <ph id=\"ph2\">`TResult`</ph>.","pos":[5176,5376],"source":"You specify `Task<TResult>` as the return type of an async method if the [return](../../../csharp/language-reference/keywords/return.md) statement of the method specifies an operand of type `TResult`."},{"content":"You use <ph id=\"ph1\">`Task`</ph> if no meaningful value is returned when the method is completed.","pos":[5377,5456],"source":" You use `Task` if no meaningful value is returned when the method is completed."},{"content":"That is, a call to the method returns a <ph id=\"ph1\">`Task`</ph>, but when the <ph id=\"ph2\">`Task`</ph> is completed, any <ph id=\"ph3\">`await`</ph> expression that's awaiting the <ph id=\"ph4\">`Task`</ph> evaluates to <ph id=\"ph5\">`void`</ph>.","pos":[5457,5609],"source":" That is, a call to the method returns a `Task`, but when the `Task` is completed, any `await` expression that's awaiting the `Task` evaluates to `void`."},{"content":"You use the <ph id=\"ph1\">`void`</ph> return type primarily to define event handlers, which require that return type.","pos":[5615,5713],"source":"You use the `void` return type primarily to define event handlers, which require that return type."},{"content":"The caller of a <ph id=\"ph1\">`void`</ph>-returning async method can't await it and can't catch exceptions that the method throws.","pos":[5714,5825],"source":" The caller of a `void`-returning async method can't await it and can't catch exceptions that the method throws."},{"pos":[5829,6003],"content":"Starting with C# 7.0, you return another type, typically a value type, that has a <ph id=\"ph1\">`GetAwaiter`</ph> method to minimize memory allocations in performance-critical sections of code.","source":"Starting with C# 7.0, you return another type, typically a value type, that has a `GetAwaiter` method to minimize memory allocations in performance-critical sections of code."},{"pos":[6006,6138],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Async Return Types<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept>.","source":"For more information and examples, see [Async Return Types](../../../csharp/programming-guide/concepts/async/async-return-types.md)."},{"pos":[6147,6155],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6227,6288],"content":"<bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](../../../csharp/language-reference/keywords/await.md)</ept>","source":"[await](../../../csharp/language-reference/keywords/await.md)"},{"pos":[6291,6456],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>","source":"[Walkthrough: Accessing the Web by Using Async and Await](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)"},{"pos":[6459,6565],"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await<ept id=\"p1\">](../../../csharp/programming-guide/concepts/async/index.md)</ept>","source":"[Asynchronous Programming with async and await](../../../csharp/programming-guide/concepts/async/index.md)"}]}