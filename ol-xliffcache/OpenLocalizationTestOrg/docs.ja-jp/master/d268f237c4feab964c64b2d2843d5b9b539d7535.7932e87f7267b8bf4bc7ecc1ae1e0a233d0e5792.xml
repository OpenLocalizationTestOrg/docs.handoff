{"content":"---\ntitle: \"Accessing Attributes by Using Reflection (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: dce3a696-4ceb-489a-b5e4-322a83052f18\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Accessing Attributes by Using Reflection (C#)\nThe fact that you can define custom attributes and place them in your source code would be of little value without some way of retrieving that information and acting on it. By using reflection, you can retrieve the information that was defined with custom attributes. The key method is `GetCustomAttributes`, which returns an array of objects that are the run-time equivalents of the source code attributes. This method has several overloaded versions. For more information, see <xref:System.Attribute>.  \n  \n An attribute specification such as:  \n  \n```csharp  \n[Author(\"P. Ackerman\", version = 1.1)]  \nclass SampleClass  \n```  \n  \n is conceptually equivalent to this:  \n  \n```csharp  \nAuthor anonymousAuthorObject = new Author(\"P. Ackerman\");  \nanonymousAuthorObject.version = 1.1;  \n```  \n  \n However, the code is not executed until `SampleClass` is queried for attributes. Calling `GetCustomAttributes` on `SampleClass` causes an `Author` object to be constructed and initialized as above. If the class has other attributes, other attribute objects are constructed similarly. `GetCustomAttributes` then returns the `Author` object and any other attribute objects in an array. You can then iterate over this array, determine what attributes were applied based on the type of each array element, and extract information from the attribute objects.  \n  \n## Example  \n Here is a complete example. A custom attribute is defined, applied to several entities, and retrieved via reflection.  \n  \n```csharp  \n// Multiuse attribute.  \n[System.AttributeUsage(System.AttributeTargets.Class |  \n                       System.AttributeTargets.Struct,  \n                       AllowMultiple = true)  // Multiuse attribute.  \n]  \npublic class Author : System.Attribute  \n{  \n    string name;  \n    public double version;  \n  \n    public Author(string name)  \n    {  \n        this.name = name;  \n  \n        // Default value.  \n        version = 1.0;  \n    }  \n  \n    public string GetName()  \n    {  \n        return name;  \n    }  \n}  \n  \n// Class with the Author attribute.  \n[Author(\"P. Ackerman\")]  \npublic class FirstClass  \n{  \n    // ...  \n}  \n  \n// Class without the Author attribute.  \npublic class SecondClass  \n{  \n    // ...  \n}  \n  \n// Class with multiple Author attributes.  \n[Author(\"P. Ackerman\"), Author(\"R. Koch\", version = 2.0)]  \npublic class ThirdClass  \n{  \n    // ...  \n}  \n  \nclass TestAuthorAttribute  \n{  \n    static void Test()  \n    {  \n        PrintAuthorInfo(typeof(FirstClass));  \n        PrintAuthorInfo(typeof(SecondClass));  \n        PrintAuthorInfo(typeof(ThirdClass));  \n    }  \n  \n    private static void PrintAuthorInfo(System.Type t)  \n    {  \n        System.Console.WriteLine(\"Author information for {0}\", t);  \n  \n        // Using reflection.  \n        System.Attribute[] attrs = System.Attribute.GetCustomAttributes(t);  // Reflection.  \n  \n        // Displaying output.  \n        foreach (System.Attribute attr in attrs)  \n        {  \n            if (attr is Author)  \n            {  \n                Author a = (Author)attr;  \n                System.Console.WriteLine(\"   {0}, version {1:f}\", a.GetName(), a.version);  \n            }  \n        }  \n    }  \n}  \n/* Output:  \n    Author information for FirstClass  \n       P. Ackerman, version 1.00  \n    Author information for SecondClass  \n    Author information for ThirdClass  \n       R. Koch, version 2.00  \n       P. Ackerman, version 1.00  \n*/  \n```  \n  \n## See Also  \n <xref:System.Reflection>   \n <xref:System.Attribute>   \n [C# Programming Guide](../../../../csharp/programming-guide/index.md)   \n [Retrieving Information Stored in Attributes](../../../../standard/attributes/retrieving-information-stored-in-attributes.md)   \n [Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md)   \n [Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/index.md)   \n [Creating Custom Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)","nodes":[{"pos":[12,74],"content":"Accessing Attributes by Using Reflection (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Accessing Attributes by Using Reflection (C#) | Microsoft Docs","pos":[0,62]}]},{"pos":[433,478],"content":"Accessing Attributes by Using Reflection (C#)","linkify":"Accessing Attributes by Using Reflection (C#)","nodes":[{"content":"Accessing Attributes by Using Reflection (C#)","pos":[0,45]}]},{"content":"The fact that you can define custom attributes and place them in your source code would be of little value without some way of retrieving that information and acting on it.","pos":[479,651]},{"content":"By using reflection, you can retrieve the information that was defined with custom attributes.","pos":[652,746]},{"content":"The key method is <ph id=\"ph1\">`GetCustomAttributes`</ph>, which returns an array of objects that are the run-time equivalents of the source code attributes.","pos":[747,886],"source":" The key method is `GetCustomAttributes`, which returns an array of objects that are the run-time equivalents of the source code attributes."},{"content":"This method has several overloaded versions.","pos":[887,931]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Attribute&gt;</ph>.","pos":[932,982],"source":" For more information, see <xref:System.Attribute>."},{"content":"An attribute specification such as:","pos":[989,1024]},{"content":"is conceptually equivalent to this:","pos":[1113,1148]},{"content":"However, the code is not executed until <ph id=\"ph1\">`SampleClass`</ph> is queried for attributes.","pos":[1275,1355],"source":"However, the code is not executed until `SampleClass` is queried for attributes."},{"content":"Calling <ph id=\"ph1\">`GetCustomAttributes`</ph> on <ph id=\"ph2\">`SampleClass`</ph> causes an <ph id=\"ph3\">`Author`</ph> object to be constructed and initialized as above.","pos":[1356,1472],"source":" Calling `GetCustomAttributes` on `SampleClass` causes an `Author` object to be constructed and initialized as above."},{"content":"If the class has other attributes, other attribute objects are constructed similarly.","pos":[1473,1558]},{"content":"<ph id=\"ph1\">`GetCustomAttributes`</ph> then returns the <ph id=\"ph2\">`Author`</ph> object and any other attribute objects in an array.","pos":[1559,1658],"source":"`GetCustomAttributes` then returns the `Author` object and any other attribute objects in an array."},{"content":"You can then iterate over this array, determine what attributes were applied based on the type of each array element, and extract information from the attribute objects.","pos":[1659,1828]},{"pos":[1837,1844],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Here is a complete example.","pos":[1848,1875]},{"content":"A custom attribute is defined, applied to several entities, and retrieved via reflection.","pos":[1876,1965]},{"pos":[3921,3929],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection&gt;</ph>","pos":[3933,3957],"source":"<xref:System.Reflection> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Attribute&gt;</ph>","pos":[3962,3985],"source":" <xref:System.Attribute> "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3989,4060],"source":" [C# Programming Guide](../../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Retrieving Information Stored in Attributes<ept id=\"p1\">](../../../../standard/attributes/retrieving-information-stored-in-attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[4063,4190],"source":" [Retrieving Information Stored in Attributes](../../../../standard/attributes/retrieving-information-stored-in-attributes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/reflection.md)</ept><ph id=\"ph1\"> </ph>","pos":[4193,4273],"source":" [Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Attributes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4276,4362],"source":" [Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Creating Custom Attributes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)</ept>","pos":[4365,4487],"source":" [Creating Custom Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)"}]}