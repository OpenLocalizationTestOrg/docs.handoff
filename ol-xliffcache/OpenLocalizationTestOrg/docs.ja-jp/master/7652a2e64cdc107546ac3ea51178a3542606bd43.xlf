<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7652a2e64cdc107546ac3ea51178a3542606bd43</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\controls\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c4bf9e48d3ecc4bd38cd296cb656c6183ae5d46</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">465606a5d072f63b1fec357e3eb08548e382d00f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Controls | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Controls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> ships with many of the common UI components that are used in almost every Windows application, such as              <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>,              <ph id="ph3">&lt;xref:System.Windows.Controls.Label&gt;</ph>,              <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>,              <ph id="ph5">&lt;xref:System.Windows.Controls.Menu&gt;</ph>, and              <ph id="ph6">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Historically, these objects have been referred to as controls.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>While the              <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> SDK continues to use the term "control" to loosely mean any class that represents a visible object in an application, it is important to note that a class does not need to inherit from the              <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> class to have a visible presence.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Classes that inherit from the              <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> class contain a              <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, which allows the consumer of a control to radically change the control's appearance without having to create a new subclass.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic discusses how controls (both those that do inherit from the              <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> class and those that do not) are commonly used in              <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating an Instance of a Control</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can add a control to an application by using either                  <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> or code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a simple application that asks a user for their first and last name.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This example creates six controls: two labels, two text boxes, and two buttons, in                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All controls can be created similarly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>ControlsOverview#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/Window1.xaml#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example creates the same application in code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For brevity, the creation of the                  <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph>,                  <ph id="ph2">`grid1`</ph>, has been excluded from the sample.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`grid1`</ph> has the same column and row definitions as shown in the preceding                  <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> example.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ControlsOverview#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/AppInCode.xaml.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>ControlsOverview#2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ControlsOverview/VisualBasic/AppInCode.xaml.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Changing the Appearance of a Control</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It is common to change the appearance of a control to fit the look and feel of your application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can change the appearance of a control by doing one of the following, depending on what you want to accomplish:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Change the value of a property of the control.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create a                          <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> for the control.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Create a new                          <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for the control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Changing a Control's Property Value</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Many controls have properties that allow you to change how the control appears, such as the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> of a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can set the value properties in both                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> and code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example sets the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph>,                          <ph id="ph2">&lt;xref:System.Windows.Controls.Control.FontSize%2A&gt;</ph>, and                          <ph id="ph3">&lt;xref:System.Windows.Controls.Control.FontWeight%2A&gt;</ph> properties on a                          <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> in                          <ph id="ph5">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>ControlsOverview#3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/AppInCode.xaml#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example sets the same properties in code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ControlsOverview#4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/AppInCode.xaml.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>ControlsOverview#4<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ControlsOverview/VisualBasic/AppInCode.xaml.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creating a Style for a Control</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> gives you the ability to specify the appearance of controls wholesale, instead of setting properties on each instance in the application, by creating a                          <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example                          creates a                          <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> that is applied to each                          <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> in the application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> definitions are typically defined in                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> in a                          <ph id="ph3">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, such as the                          <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> property of the                          <ph id="ph5">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>ControlsOverview#5<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/AppInCode.xaml#5)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can also apply a style to only certain controls of a specific type by assigning a key to the style and specifying that key in the                          <ph id="ph1">`Style`</ph> property of your control.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information about styles, see                          <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../../../../docs/framework/wpf/controls/styling-and-templating.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Creating a ControlTemplate</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A                          <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> allows you to set properties on multiple controls at a time, but sometimes you might want to customize the appearance of a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> beyond what you can do by creating a                          <ph id="ph3">&lt;xref:System.Windows.Style&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Classes that inherit from the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> class have a                          <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, which defines the structure and appearance of a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Template%2A&gt;</ph> property of a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> is public, so you can give a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> a                          <ph id="ph4">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> that is different than its default.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can often specify a new                          <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> instead of inheriting from a control to customize the appearance of a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Consider the very common control,                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The primary behavior of a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is to enable an application to take some action when the user clicks it.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>By default, the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> in                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> appears as a raised rectangle.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>While developing an application, you might want to take advantage of the behavior of a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>--that is, by handling the button's click event--but you might change the button's appearance beyond what you can do by changing the button's properties.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this case, you can create a new                          <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example creates a                          <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> creates a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> with rounded corners and a gradient background.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> contains a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Border&gt;</ph> whose                          <ph id="ph3">&lt;xref:System.Windows.Controls.Border.Background%2A&gt;</ph> is a                          <ph id="ph4">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph> with two                          <ph id="ph5">&lt;xref:System.Windows.Media.GradientStop&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The first                          <ph id="ph1">&lt;xref:System.Windows.Media.GradientStop&gt;</ph> uses data binding to bind the                          <ph id="ph2">&lt;xref:System.Windows.Media.GradientStop.Color%2A&gt;</ph> property of the                          <ph id="ph3">&lt;xref:System.Windows.Media.GradientStop&gt;</ph> to the color of the button's background.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you set the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the color of that value will be used as the first                          <ph id="ph3">&lt;xref:System.Windows.Media.GradientStop&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about data binding, see                          <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The example also creates a                          <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> that changes the appearance of the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> when                          <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> is                          <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>ControlsOverview#6<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/Window1.xaml#6)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>ControlsOverview#7<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/AppInCode.xaml#7)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The                              <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of the                              <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> must be set to a                              <ph id="ph3">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> for the example to work properly.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Subscribing to Events</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can subscribe to a control's event by using either                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> or code, but you can only handle an event in code.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example shows how to subscribe to the                  <ph id="ph1">`Click`</ph> event of a                  <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>ControlsOverview#10<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/Window1.xaml#10)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ControlsOverview#8<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/AppInCode.xaml.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>ControlsOverview#8<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ControlsOverview/VisualBasic/AppInCode.xaml.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example handles the                  <ph id="ph1">`Click`</ph> event of a                  <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ControlsOverview#9<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ControlsOverview/CSharp/AppInCode.xaml.cs#9)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>ControlsOverview#9<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ControlsOverview/VisualBasic/AppInCode.xaml.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Rich Content in Controls</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Most classes that inherit from the                  <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> class have the capacity to contain rich content.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, a                  <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> can contain any object, such as a string, an                  <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph>, or a                  <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following classes provide support for rich content and act as base classes for most of the controls in                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>-- Some examples of classes that inherit from this class are                          <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph>,                          <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>, and                          <ph id="ph4">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>-- Some examples of classes that inherit from this class are                          <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>,                          <ph id="ph3">&lt;xref:System.Windows.Controls.Menu&gt;</ph>, and                          <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.StatusBar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.HeaderedContentControl&gt;</ph>-- Some examples of classes that inherit from this class are                          <ph id="ph2">&lt;xref:System.Windows.Controls.TabItem&gt;</ph>,                          <ph id="ph3">&lt;xref:System.Windows.Controls.GroupBox&gt;</ph>, and                          <ph id="ph4">&lt;xref:System.Windows.Controls.Expander&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph>--Some examples of classes that inherit from this class are                          <ph id="ph2">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>,                          <ph id="ph3">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph>, and                          <ph id="ph4">&lt;xref:System.Windows.Controls.ToolBar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information about these base classes, see                  <bpt id="p1">[</bpt>WPF Content Model<ept id="p1">](../../../../docs/framework/wpf/controls/wpf-content-model.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../../../../docs/framework/wpf/controls/styling-and-templating.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Controls by Category<ept id="p1">](../../../../docs/framework/wpf/controls/controls-by-category.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Control Library<ept id="p1">](../../../../docs/framework/wpf/controls/control-library.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Templating Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-templating-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Input<ept id="p1">](../../../../docs/framework/wpf/advanced/input-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enable a Command<ept id="p1">](../../../../docs/framework/wpf/advanced/how-to-enable-a-command.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthroughs: Create a Custom Animated Button<ept id="p1">](../../../../docs/framework/wpf/controls/walkthroughs-create-a-custom-animated-button.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Control Customization<ept id="p1">](../../../../docs/framework/wpf/controls/control-customization.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>