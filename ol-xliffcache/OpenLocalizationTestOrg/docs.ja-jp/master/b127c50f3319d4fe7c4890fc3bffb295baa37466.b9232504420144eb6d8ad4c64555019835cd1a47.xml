{"content":"---\ntitle: \"Mod Operator (Visual Basic)\"\nms.date: 04/24/2018\nf1_keywords: \n  - \"vb.Mod\"\nhelpviewer_keywords: \n  - \"remainder (Mod operator)\"\n  - \"division operator [Visual Basic], Mod operator\"\n  - \"modulus operator [Visual Basic], Visual Basic\"\n  - \"Mod operator [Visual Basic]\"\n  - \"operators [Visual Basic], division\"\n  - \"arithmetic operators [Visual Basic], Mod\"\n  - \"math operators [Visual Basic]\"\nms.assetid: 6ff7e40e-cec8-4c77-bff6-8ddd2791c25b\n---\n# Mod operator (Visual Basic)\nDivides two numbers and returns only the remainder.  \n  \n## Syntax  \n  \n```  \nnumber1 Mod number2  \n```  \n  \n## Parts  \n `number1`  \n Required. Any numeric expression.  \n  \n `number2`  \n Required. Any numeric expression.  \n  \n## Supported types  \n All numeric types. This includes the unsigned and floating-point types and `Decimal`.  \n  \n## Result\n\nThe result is the remainder after `number1` is divided by `number2`. For example, the expression `14 Mod 4` evaluates to 2.  \n\n> [!NOTE]\n> There is a difference between *remainder* and *modulus* in mathematics, with different results for negative numbers. The `Mod` operator in Visual Basic, the .NET Framework `op_Modulus` operator, and the underlying [rem](<xref:System.Reflection.Emit.OpCodes.Rem>) IL instruction all perform a remainder operation.\n\nThe result of a `Mod` operation retains the sign of the dividend, `number1`, and so it may be positive or negative. The result is always in the range (-`number2`, `number2`), exclusive. For example:\n\n```vb\nPublic Module Example\n   Public Sub Main()\n      Console.WriteLine($\" 8 Mod  3 = {8 Mod 3}\")\n      Console.WriteLine($\"-8 Mod  3 = {-8 Mod 3}\")\n      Console.WriteLine($\" 8 Mod -3 = {8 Mod -3}\")\n      Console.WriteLine($\"-8 Mod -3 = {-8 Mod -3}\")\n   End Sub\nEnd Module\n' The example displays the following output:\n'       8 Mod  3 = 2\n'      -8 Mod  3 = -2\n'       8 Mod -3 = 2\n'      -8 Mod -3 = -2\n```\n\n## Remarks  \n If either `number1` or `number2` is a floating-point value, the floating-point remainder of the division is returned. The data type of the result is the smallest data type that can hold all possible values that result from division with the data types of `number1` and `number2`.  \n  \n If `number1` or `number2` evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero.  \n  \n Related operators include the following:  \n  \n-   The [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md) returns the integer quotient of a division. For example, the expression `14 \\ 4` evaluates to 3.  \n  \n-   The [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md) returns the full quotient, including the remainder, as a floating-point number. For example, the expression `14 / 4` evaluates to 3.5.  \n  \n## Attempted division by zero  \n If `number2` evaluates to zero, the behavior of the `Mod` operator depends on the data type of the operands. An integral division throws a <xref:System.DivideByZeroException> exception. A floating-point division returns <xref:System.Double.NaN>.  \n  \n## Equivalent formula  \n The expression `a Mod b` is equivalent to either of the following formulas:  \n  \n `a - (b * (a \\ b))`  \n  \n `a - (b * Fix(a / b))`  \n  \n## Floating-point imprecision  \n When you work with floating-point numbers, remember that they do not always have a precise decimal representation in memory. This can lead to unexpected results from certain operations, such as value comparison and the `Mod` operator. For more information, see [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md).  \n  \n## Overloading  \n The `Mod` operator can be *overloaded*, which means that a class or structure can redefine its behavior. If your code applies `Mod` to an instance of a class or structure that includes such an overload, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `Mod` operator to divide two numbers and return only the remainder. If either number is a floating-point number, the result is a floating-point number that represents the remainder.  \n  \n [!code-vb[VbVbalrOperators#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#31)]  \n  \n## Example  \n The following example demonstrates the potential imprecision of floating-point operands. In the first statement, the operands are `Double`, and 0.2 is an infinitely repeating binary fraction with a stored value of 0.20000000000000001. In the second statement, the literal type character `D` forces both operands to `Decimal`, and 0.2 has a precise representation.  \n  \n [!code-vb[VbVbalrOperators#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#32)]  \n  \n## See also\n\n- <xref:Microsoft.VisualBasic.Conversion.Int%2A>\n- <xref:Microsoft.VisualBasic.Conversion.Fix%2A>\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)\n- [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)\n- [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md)\n","nodes":[{"pos":[4,452],"embed":true,"restype":"x-metadata","content":"title: \"Mod Operator (Visual Basic)\"\nms.date: 04/24/2018\nf1_keywords: \n  - \"vb.Mod\"\nhelpviewer_keywords: \n  - \"remainder (Mod operator)\"\n  - \"division operator [Visual Basic], Mod operator\"\n  - \"modulus operator [Visual Basic], Visual Basic\"\n  - \"Mod operator [Visual Basic]\"\n  - \"operators [Visual Basic], division\"\n  - \"arithmetic operators [Visual Basic], Mod\"\n  - \"math operators [Visual Basic]\"\nms.assetid: 6ff7e40e-cec8-4c77-bff6-8ddd2791c25b","nodes":[{"content":"Mod Operator (Visual Basic)","nodes":[{"pos":[0,27],"content":"Mod Operator (Visual Basic)","nodes":[{"content":"Mod Operator (Visual Basic)","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[459,486],"content":"Mod operator (Visual Basic)","linkify":"Mod operator (Visual Basic)","nodes":[{"content":"Mod operator (Visual Basic)","pos":[0,27]}]},{"content":"Divides two numbers and returns only the remainder.","pos":[487,538]},{"pos":[547,553],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[599,604],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[621,630]},{"content":"Any numeric expression.","pos":[631,654]},{"content":"Required.","pos":[674,683]},{"content":"Any numeric expression.","pos":[684,707]},{"pos":[716,731],"content":"Supported types","linkify":"Supported types","nodes":[{"content":"Supported types","pos":[0,15]}]},{"content":"All numeric types.","pos":[735,753]},{"content":"This includes the unsigned and floating-point types and <ph id=\"ph1\">`Decimal`</ph>.","pos":[754,820],"source":" This includes the unsigned and floating-point types and `Decimal`."},{"pos":[829,835],"content":"Result","linkify":"Result","nodes":[{"content":"Result","pos":[0,6]}]},{"content":"The result is the remainder after <ph id=\"ph1\">`number1`</ph> is divided by <ph id=\"ph2\">`number2`</ph>.","pos":[837,905],"source":"The result is the remainder after `number1` is divided by `number2`."},{"content":"For example, the expression <ph id=\"ph1\">`14 Mod 4`</ph> evaluates to 2.","pos":[906,960],"source":" For example, the expression `14 Mod 4` evaluates to 2."},{"pos":[966,1288],"content":"[!NOTE]\nThere is a difference between *remainder* and *modulus* in mathematics, with different results for negative numbers. The `Mod` operator in Visual Basic, the .NET Framework `op_Modulus` operator, and the underlying [rem](<xref:System.Reflection.Emit.OpCodes.Rem>) IL instruction all perform a remainder operation.","leadings":["","> "],"nodes":[{"content":"There is a difference between *remainder* and *modulus* in mathematics, with different results for negative numbers. The `Mod` operator in Visual Basic, the .NET Framework `op_Modulus` operator, and the underlying [rem](<xref:System.Reflection.Emit.OpCodes.Rem>) IL instruction all perform a remainder operation.","pos":[8,320],"nodes":[{"content":"There is a difference between <bpt id=\"p1\">*</bpt>remainder<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>modulus<ept id=\"p2\">*</ept> in mathematics, with different results for negative numbers.","pos":[0,116],"source":"There is a difference between *remainder* and *modulus* in mathematics, with different results for negative numbers."},{"content":"The <ph id=\"ph1\">`Mod`</ph> operator in Visual Basic, the .NET Framework <ph id=\"ph2\">`op_Modulus`</ph> operator, and the underlying <bpt id=\"p1\">[</bpt>rem<ept id=\"p1\">](&lt;xref:System.Reflection.Emit.OpCodes.Rem&gt;)</ept> IL instruction all perform a remainder operation.","pos":[117,312],"source":" The `Mod` operator in Visual Basic, the .NET Framework `op_Modulus` operator, and the underlying [rem](<xref:System.Reflection.Emit.OpCodes.Rem>) IL instruction all perform a remainder operation."}]}]},{"content":"The result of a <ph id=\"ph1\">`Mod`</ph> operation retains the sign of the dividend, <ph id=\"ph2\">`number1`</ph>, and so it may be positive or negative.","pos":[1290,1405],"source":"The result of a `Mod` operation retains the sign of the dividend, `number1`, and so it may be positive or negative."},{"content":"The result is always in the range (-<ph id=\"ph1\">`number2`</ph>, <ph id=\"ph2\">`number2`</ph>), exclusive.","pos":[1406,1475],"source":" The result is always in the range (-`number2`, `number2`), exclusive."},{"content":"For example:","pos":[1476,1488]},{"pos":[1904,1911],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If either <ph id=\"ph1\">`number1`</ph> or <ph id=\"ph2\">`number2`</ph> is a floating-point value, the floating-point remainder of the division is returned.","pos":[1915,2032],"source":"If either `number1` or `number2` is a floating-point value, the floating-point remainder of the division is returned."},{"content":"The data type of the result is the smallest data type that can hold all possible values that result from division with the data types of <ph id=\"ph1\">`number1`</ph> and <ph id=\"ph2\">`number2`</ph>.","pos":[2033,2194],"source":" The data type of the result is the smallest data type that can hold all possible values that result from division with the data types of `number1` and `number2`."},{"pos":[2201,2326],"content":"If <ph id=\"ph1\">`number1`</ph> or <ph id=\"ph2\">`number2`</ph> evaluates to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept>, it is treated as zero.","source":"If `number1` or `number2` evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero."},{"content":"Related operators include the following:","pos":[2333,2373]},{"content":"The <bpt id=\"p1\">[</bpt>\\ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept> returns the integer quotient of a division.","pos":[2383,2539],"source":"The [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md) returns the integer quotient of a division."},{"content":"For example, the expression <ph id=\"ph1\">`14 \\ 4`</ph> evaluates to 3.","pos":[2540,2592],"source":" For example, the expression `14 \\ 4` evaluates to 3."},{"content":"The <bpt id=\"p1\">[</bpt>/ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept> returns the full quotient, including the remainder, as a floating-point number.","pos":[2602,2801],"source":"The [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md) returns the full quotient, including the remainder, as a floating-point number."},{"content":"For example, the expression <ph id=\"ph1\">`14 / 4`</ph> evaluates to 3.5.","pos":[2802,2856],"source":" For example, the expression `14 / 4` evaluates to 3.5."},{"pos":[2865,2891],"content":"Attempted division by zero","linkify":"Attempted division by zero","nodes":[{"content":"Attempted division by zero","pos":[0,26]}]},{"content":"If <ph id=\"ph1\">`number2`</ph> evaluates to zero, the behavior of the <ph id=\"ph2\">`Mod`</ph> operator depends on the data type of the operands.","pos":[2895,3003],"source":"If `number2` evaluates to zero, the behavior of the `Mod` operator depends on the data type of the operands."},{"content":"An integral division throws a <ph id=\"ph1\">&lt;xref:System.DivideByZeroException&gt;</ph> exception.","pos":[3004,3080],"source":" An integral division throws a <xref:System.DivideByZeroException> exception."},{"content":"A floating-point division returns <ph id=\"ph1\">&lt;xref:System.Double.NaN&gt;</ph>.","pos":[3081,3140],"source":" A floating-point division returns <xref:System.Double.NaN>."},{"pos":[3149,3167],"content":"Equivalent formula","linkify":"Equivalent formula","nodes":[{"content":"Equivalent formula","pos":[0,18]}]},{"pos":[3171,3246],"content":"The expression <ph id=\"ph1\">`a Mod b`</ph> is equivalent to either of the following formulas:","source":"The expression `a Mod b` is equivalent to either of the following formulas:"},{"pos":[3310,3336],"content":"Floating-point imprecision","linkify":"Floating-point imprecision","nodes":[{"content":"Floating-point imprecision","pos":[0,26]}]},{"content":"When you work with floating-point numbers, remember that they do not always have a precise decimal representation in memory.","pos":[3340,3464]},{"content":"This can lead to unexpected results from certain operations, such as value comparison and the <ph id=\"ph1\">`Mod`</ph> operator.","pos":[3465,3574],"source":" This can lead to unexpected results from certain operations, such as value comparison and the `Mod` operator."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>.","pos":[3575,3730],"source":" For more information, see [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)."},{"pos":[3739,3750],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`Mod`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior.","pos":[3754,3858],"source":"The `Mod` operator can be *overloaded*, which means that a class or structure can redefine its behavior."},{"content":"If your code applies <ph id=\"ph1\">`Mod`</ph> to an instance of a class or structure that includes such an overload, be sure you understand its redefined behavior.","pos":[3859,4003],"source":" If your code applies `Mod` to an instance of a class or structure that includes such an overload, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[4004,4145],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[4154,4161],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`Mod`</ph> operator to divide two numbers and return only the remainder.","pos":[4165,4263],"source":"The following example uses the `Mod` operator to divide two numbers and return only the remainder."},{"content":"If either number is a floating-point number, the result is a floating-point number that represents the remainder.","pos":[4264,4377]},{"pos":[4510,4517],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the potential imprecision of floating-point operands.","pos":[4521,4609]},{"content":"In the first statement, the operands are <ph id=\"ph1\">`Double`</ph>, and 0.2 is an infinitely repeating binary fraction with a stored value of 0.20000000000000001.","pos":[4610,4755],"source":" In the first statement, the operands are `Double`, and 0.2 is an infinitely repeating binary fraction with a stored value of 0.20000000000000001."},{"content":"In the second statement, the literal type character <ph id=\"ph1\">`D`</ph> forces both operands to <ph id=\"ph2\">`Decimal`</ph>, and 0.2 has a precise representation.","pos":[4756,4884],"source":" In the second statement, the literal type character `D` forces both operands to `Decimal`, and 0.2 has a precise representation."},{"pos":[5017,5025],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5127,5225],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[5228,5340],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[5343,5467],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[5470,5598],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>","source":"[Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)"},{"pos":[5601,5748],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"},{"pos":[5751,5859],"content":"<bpt id=\"p1\">[</bpt>\\ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept>","source":"[\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md)"}]}