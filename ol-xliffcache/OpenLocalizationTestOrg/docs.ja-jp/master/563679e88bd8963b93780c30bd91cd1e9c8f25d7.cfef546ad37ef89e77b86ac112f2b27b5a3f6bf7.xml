{"content":"---\ntitle: \"Delegation and Impersonation with WCF | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"impersonation [WCF]\"\n  - \"delegation [WCF]\"\nms.assetid: 110e60f7-5b03-4b69-b667-31721b8e3152\ncaps.latest.revision: 40\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Delegation and Impersonation with WCF\n*Impersonation* is a common technique that services use to restrict client access to a service domain's resources. Service domain resources can either be machine resources, such as local files (impersonation), or a resource on another machine, such as a file share (delegation). For a sample application, see [Impersonating the Client](../../../../docs/framework/wcf/samples/impersonating-the-client.md). For an example of how to use impersonation, see [How to: Impersonate a Client on a Service](../../../../docs/framework/wcf/how-to-impersonate-a-client-on-a-service.md).  \n  \n> [!IMPORTANT]\n>  Be aware that when impersonating a client on a service, the service runs with the client's credentials, which may have higher privileges than the server process.  \n  \n## Overview  \n Typically, clients call a service to have the service perform some action on the client’s behalf. Impersonation allows the service to act as the client while performing the action. Delegation allows a front-end service to forward the client’s request to a back-end service in such a way that the back-end service can also impersonate the client. Impersonation is most commonly used as a way of checking whether a client is authorized to perform a particular action, while delegation is a way of flowing impersonation capabilities, along with the client’s identity, to a back-end service. Delegation is a Windows domain feature that can be used when Kerberos-based authentication is performed. Delegation is distinct from identity flow and, because delegation transfers the ability to impersonate the client without possession of the client’s password, it is a much higher privileged operation than identity flow.  \n  \n Both impersonation and delegation require that the client have a Windows identity. If a client does not possess a Windows identity, then the only option available is to flow the client’s identity to the second service.  \n  \n## Impersonation Basics  \n [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] supports impersonation for a variety of client credentials. This topic describes service model support for impersonating the caller during the implementation of a service method. Also discussed are common deployment scenarios involving impersonation and SOAP security and [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] options in these scenarios.  \n  \n This topic focuses on impersonation and delegation in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] when using SOAP security. You can also use impersonation and delegation with [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] when using transport security, as described in [Using Impersonation with Transport Security](../../../../docs/framework/wcf/feature-details/using-impersonation-with-transport-security.md).  \n  \n## Two Methods  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] SOAP security has two distinct methods for performing impersonation. The method used depends on the binding. One is impersonation from a Windows token obtained from the Security Support Provider Interface (SSPI) or Kerberos authentication, which is then cached on the service. The second is impersonation from a Windows token obtained from the Kerberos extensions, collectively called *Service-for-User* (S4U).  \n  \n### Cached Token Impersonation  \n You can perform cached-token impersonation with the following:  \n  \n-   <xref:System.ServiceModel.WSHttpBinding>, <xref:System.ServiceModel.WSDualHttpBinding>, and <xref:System.ServiceModel.NetTcpBinding> with a Windows client credential.  \n  \n-   <xref:System.ServiceModel.BasicHttpBinding> with a <xref:System.ServiceModel.BasicHttpSecurityMode> set to the <xref:System.ServiceModel.BasicHttpSecurityMode> credential, or any other standard binding where the client presents a user name credential that the service can map to a valid Windows account.  \n  \n-   Any <xref:System.ServiceModel.Channels.CustomBinding> that uses a Windows client credential with the `requireCancellation` set to `true`. (The property is available on the following classes: <xref:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters>, <xref:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters>, and <xref:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters>.) If a secure conversation is used on the binding, it must also have the `requireCancellation` property set to `true`.  \n  \n-   Any <xref:System.ServiceModel.Channels.CustomBinding> where the client presents a user name credential. If secure conversation is used on the binding, it must also have the `requireCancellation` property set to `true`.  \n  \n### S4U-Based Impersonation  \n You can perform S4U-based impersonation with the following:  \n  \n-   <xref:System.ServiceModel.WSHttpBinding>, <xref:System.ServiceModel.WSDualHttpBinding>, and <xref:System.ServiceModel.NetTcpBinding> with a certificate client credential that the service can map to a valid Windows account.  \n  \n-   Any <xref:System.ServiceModel.Channels.CustomBinding> that uses a Windows client credential with the `requireCancellation` property set to `false`.  \n  \n-   Any <xref:System.ServiceModel.Channels.CustomBinding> that uses a user name or Windows client credential and secure conversation with the `requireCancellation` property set to `false`.  \n  \n The extent to which the service can impersonate the client depends on the privileges the service account holds when it attempts impersonation, the type of impersonation used, and possibly the extent of impersonation the client permits.  \n  \n> [!NOTE]\n>  When the client and service are running on the same computer and the client is running under a system account (for example, `Local System` or `Network Service`), the client cannot be impersonated when a secure session is established with stateful Security Context tokens. A Windows Form or console application typically runs under the currently logged-in account, so that account can be impersonated by default. However, when the client is an [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] page and that page is hosted in [!INCLUDE[iis601](../../../../includes/iis601-md.md)] or [!INCLUDE[iisver](../../../../includes/iisver-md.md)], then the client does run under the `Network Service` account by default. All of the system-provided bindings that support secure sessions use a stateless security context token (SCT) by default. However, if the client is an [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] page, and secure sessions with stateful SCTs are used, the client cannot be impersonated. [!INCLUDE[crabout](../../../../includes/crabout-md.md)] using stateful SCTs in a secure session, see [How to: Create a Security Context Token for a Secure Session](../../../../docs/framework/wcf/feature-details/how-to-create-a-security-context-token-for-a-secure-session.md).  \n  \n## Impersonation in a Service Method: Declarative Model  \n Most impersonation scenarios involve executing the service method in the caller context. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides an impersonation feature that makes this easy to do by allowing the user to specify the impersonation requirement in the <xref:System.ServiceModel.OperationBehaviorAttribute> attribute. For example, in the following code, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] infrastructure impersonates the caller before executing the `Hello` method. Any attempt to access native resources inside the `Hello` method succeed only if the access control list (ACL) of the resource allows the caller access privileges. To enable impersonation, set the <xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A> property to one of the <xref:System.ServiceModel.ImpersonationOption> enumeration values, either <xref:System.ServiceModel.ImpersonationOption?displayProperty=fullName> or <xref:System.ServiceModel.ImpersonationOption?displayProperty=fullName>, as shown in the following example.  \n  \n> [!NOTE]\n>  When a service has higher credentials than the remote client, the credentials of the service are used if the <xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A> property is set to <xref:System.ServiceModel.ImpersonationOption>. That is, if a low-privileged user provides its credentials, a higher-privileged service executes the method with the credentials of the service, and can use resources that the low-privileged user would otherwise not be able to use.  \n  \n [!code-csharp[c_ImpersonationAndDelegation#1](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_impersonationanddelegation/cs/source.cs#1)]\n [!code-vb[c_ImpersonationAndDelegation#1](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_impersonationanddelegation/vb/source.vb#1)]  \n  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] infrastructure can impersonate the caller only if the caller is authenticated with credentials that can be mapped to a Windows user account. If the service is configured to authenticate using a credential that cannot be mapped to a Windows account, the service method is not executed.  \n  \n> [!NOTE]\n>  On [!INCLUDE[wxp](../../../../includes/wxp-md.md)], impersonation fails if a stateful SCT is created, resulting in an <xref:System.InvalidOperationException>. [!INCLUDE[crdefault](../../../../includes/crdefault-md.md)][Unsupported Scenarios](../../../../docs/framework/wcf/feature-details/unsupported-scenarios.md).  \n  \n## Impersonation in a Service Method: Imperative Model  \n Sometimes a caller does not need to impersonate the entire service method to function, but for only a portion of it. In this case, obtain the Windows identity of the caller inside the service method and imperatively perform the impersonation. Do this by using the <xref:System.ServiceModel.ServiceSecurityContext.WindowsIdentity%2A> property of the <xref:System.ServiceModel.ServiceSecurityContext> to return an instance of the <xref:System.Security.Principal.WindowsIdentity> class and calling the <xref:System.Security.Principal.WindowsIdentity.Impersonate%2A> method before using the instance.  \n  \n> [!NOTE]\n>  Be sure to use the [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]`Using` statement or the C# `using` statement to automatically revert the impersonation action. If you do not use the statement, or if you use a programming language other than [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] or C#, be sure to revert the impersonation level. Failure to do this can form the basis for denial of service and elevation of privilege attacks.  \n  \n [!code-csharp[c_ImpersonationAndDelegation#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_impersonationanddelegation/cs/source.cs#2)]\n [!code-vb[c_ImpersonationAndDelegation#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_impersonationanddelegation/vb/source.vb#2)]  \n  \n## Impersonation for All Service Methods  \n In some cases, you must perform all the methods of a service in the caller’s context. Instead of explicitly enabling this feature on a per-method basis, use the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>. As shown in the following code, set the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations%2A> property to `true`. The <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> is retrieved from the collections of behaviors of the <xref:System.ServiceModel.ServiceHost> class. Also note that the `Impersonation` property of the <xref:System.ServiceModel.OperationBehaviorAttribute> applied to each method must also be set to either <xref:System.ServiceModel.ImpersonationOption> or <xref:System.ServiceModel.ImpersonationOption>.  \n  \n [!code-csharp[c_ImpersonationAndDelegation#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_impersonationanddelegation/cs/source.cs#3)]\n [!code-vb[c_ImpersonationAndDelegation#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_impersonationanddelegation/vb/source.vb#3)]  \n  \n The following table describes [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] behavior for all possible combinations of `ImpersonationOption` and `ImpersonateCallerForAllServiceOperations`.  \n  \n|`ImpersonationOption`|`ImpersonateCallerForAllServiceOperations`|Behavior|  \n|---------------------------|------------------------------------------------|--------------|  \n|Required|n/a|[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] impersonates the caller|  \n|Allowed|false|[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not impersonate the caller|  \n|Allowed|true|[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] impersonates the caller|  \n|NotAllowed|false|[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not impersonate the caller|  \n|NotAllowed|true|Disallowed. (An <xref:System.InvalidOperationException> is thrown.)|  \n  \n## Impersonation Level Obtained from Windows Credentials and Cached Token Impersonation  \n In some scenarios the client has partial control over the level of impersonation the service performs when a Windows client credential is used. One scenario occurs when the client specifies an Anonymous impersonation level. The other occurs when performing impersonation with a cached token. This is done by setting the <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> property of the <xref:System.ServiceModel.Security.WindowsClientCredential> class, which is accessed as a property of the generic <xref:System.ServiceModel.ChannelFactory%601> class.  \n  \n> [!NOTE]\n>  Specifying an impersonation level of Anonymous causes the client to log on to the service anonymously. The service must therefore allow anonymous logons, regardless of whether impersonation is performed.  \n  \n The client can specify the impersonation level as <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>. Only a token at the specified level is produced, as shown in the following code.  \n  \n [!code-csharp[c_ImpersonationAndDelegation#4](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_impersonationanddelegation/cs/source.cs#4)]\n [!code-vb[c_ImpersonationAndDelegation#4](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_impersonationanddelegation/vb/source.vb#4)]  \n  \n The following table specifies the impersonation level the service obtains when impersonating from a cached token.  \n  \n|`AllowedImpersonationLevel` value|Service has `SeImpersonatePrivilege`|Service and client are capable of delegation|Cached token `ImpersonationLevel`|  \n|---------------------------------------|------------------------------------------|--------------------------------------------------|---------------------------------------|  \n|Anonymous|Yes|n/a|Impersonation|  \n|Anonymous|No|n/a|Identification|  \n|Identification|n/a|n/a|Identification|  \n|Impersonation|Yes|n/a|Impersonation|  \n|Impersonation|No|n/a|Identification|  \n|Delegation|Yes|Yes|Delegation|  \n|Delegation|Yes|No|Impersonation|  \n|Delegation|No|n/a|Identification|  \n  \n## Impersonation Level Obtained from User Name Credentials and Cached Token Impersonation  \n By passing the service its user name and password, a client enables [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] to log on as that user, which is equivalent to setting the `AllowedImpersonationLevel` property to <xref:System.Security.Principal.TokenImpersonationLevel>. (The `AllowedImpersonationLevel` is available on the <xref:System.ServiceModel.Security.WindowsClientCredential> and <xref:System.ServiceModel.Security.HttpDigestClientCredential> classes.) The following table provides the impersonation level obtained when the service receives user name credentials.  \n  \n|`AllowedImpersonationLevel`|Service has `SeImpersonatePrivilege`|Service and client are capable of delegation|Cached token `ImpersonationLevel`|  \n|---------------------------------|------------------------------------------|--------------------------------------------------|---------------------------------------|  \n|n/a|Yes|Yes|Delegation|  \n|n/a|Yes|No|Impersonation|  \n|n/a|No|n/a|Identification|  \n  \n## Impersonation Level Obtained from S4U-Based Impersonation  \n  \n|Service has `SeTcbPrivilege`|Service has `SeImpersonatePrivilege`|Service and client are capable of delegation|Cached token `ImpersonationLevel`|  \n|----------------------------------|------------------------------------------|--------------------------------------------------|---------------------------------------|  \n|Yes|Yes|n/a|Impersonation|  \n|Yes|No|n/a|Identification|  \n|No|n/a|n/a|Identification|  \n  \n## Mapping a Client Certificate to a Windows Account  \n It is possible for a client to authenticate itself to a service using a certificate, and to have the service map the client to an existing account through Active Directory. The following XML shows how to configure the service to map the certificate.  \n  \n```xml  \n  \n<behaviors>  \n  <serviceBehaviors>  \n    <behavior name=\"MapToWindowsAccount\">  \n      <serviceCredentials>  \n        <clientCertificate>  \n          <authentication mapClientCertificateToWindowsAccount=\"true\" />  \n        </clientCertificate>  \n      </serviceCredentials>  \n    </behavior>  \n  </serviceBehaviors>  \n</behaviors>  \n  \n```  \n  \n The following code shows how to configure the service.  \n  \n```  \n  \n// Create a binding that sets a certificate as the client credential type.  \nWSHttpBinding b = new WSHttpBinding();  \nb.Security.Message.ClientCredentialType = MessageCredentialType.Certificate;  \n  \n// Create a service host that maps the certificate to a Windows account.  \nUri httpUri = new Uri(\"http://localhost/Calculator\");  \nServiceHost sh = new ServiceHost(typeof(HelloService), httpUri);  \nsh.Credentials.ClientCertificate.Authentication.MapClientCertificateToWindowsAccount = true;  \n  \n```  \n  \n## Delegation  \n To delegate to a back-end service, a service must perform Kerberos multi-leg (SSPI without NTLM fallback) or Kerberos direct authentication to the back-end service using the client’s Windows identity. To delegate to a back-end service, create a <xref:System.ServiceModel.ChannelFactory%601> and a channel, and then communicate through the channel while impersonating the client. With this form of delegation, the distance at which the back-end service can be located from the front-end service depends on the impersonation level achieved by the front-end service. When the impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the front-end and back-end services must be running on the same machine. When the impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the front-end and back-end services can be on separate machines or on the same machine. Enabling delegation-level impersonation requires that Windows domain policy be configured to permit delegation. For more information about configuring Active Directory for delegation support, see [Enabling Delegated Authentication](http://go.microsoft.com/fwlink/?LinkId=99690).  \n  \n> [!NOTE]\n>  When a client authenticates to the front-end service using a user name and password that correspond to a Windows account on the back-end service, the front-end service can authenticate to the back-end service by reusing the client’s user name and password. This is a particularly powerful form of identity flow, because passing user name and password to the back-end service enables the back-end service to perform impersonation, but it does not constitute delegation because Kerberos is not used. Active Directory controls on delegation do not apply to user name and password authentication.  \n  \n### Delegation Ability as a Function of Impersonation Level  \n  \n|Impersonation level|Service can perform cross-process delegation|Service can perform cross-machine delegation|  \n|-------------------------|---------------------------------------------------|---------------------------------------------------|  \n|<xref:System.Security.Principal.TokenImpersonationLevel>|No|No|  \n|<xref:System.Security.Principal.TokenImpersonationLevel>|Yes|No|  \n|<xref:System.Security.Principal.TokenImpersonationLevel>|Yes|Yes|  \n  \n The following code example demonstrates how to use delegation.  \n  \n [!code-csharp[c_delegation#1](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_delegation/cs/source.cs#1)]\n [!code-vb[c_delegation#1](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_delegation/vb/source.vb#1)]  \n  \n### How to Configure an Application to Use Constrained Delegation  \n Before you can use constrained delegation, the sender, receiver, and the domain controller must be configured to do so. The following procedure lists the steps that enable constrained delegation. For details about the differences between delegation and constrained delegation, see the portion of [Windows Server 2003 Kerberos Extensions](http://go.microsoft.com/fwlink/?LinkId=100194) that discusses constrained discussion.  \n  \n1.  On the domain controller, clear the **Account is sensitive and cannot be delegated** check box for the account under which the client application is running.  \n  \n2.  On the domain controller, select the **Account is trusted for delegation** check box for the account under which the client application is running.  \n  \n3.  On the domain controller, configure the middle tier computer so that it is trusted for delegation, by clicking the **Trust computer for delegation** option.  \n  \n4.  On the domain controller, configure the middle tier computer to use constrained delegation, by clicking the **Trust this computer for delegation to specified services only** option.  \n  \n For more detailed instructions about configuring constrained delegation, see the following topics on MSDN:  \n  \n-   [Troubleshooting Kerberos Delegation](http://go.microsoft.com/fwlink/?LinkId=36724)  \n  \n-   [Kerberos Protocol Transition and Constrained Delegation](http://go.microsoft.com/fwlink/?LinkId=36725)  \n  \n## See Also  \n <xref:System.ServiceModel.OperationBehaviorAttribute>   \n <xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A>   \n <xref:System.ServiceModel.ImpersonationOption>   \n <xref:System.ServiceModel.ServiceSecurityContext.WindowsIdentity%2A>   \n <xref:System.ServiceModel.ServiceSecurityContext>   \n <xref:System.Security.Principal.WindowsIdentity>   \n <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>   \n <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations%2A>   \n <xref:System.ServiceModel.ServiceHost>   \n <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A>   \n <xref:System.ServiceModel.Security.WindowsClientCredential>   \n <xref:System.ServiceModel.ChannelFactory%601>   \n <xref:System.Security.Principal.TokenImpersonationLevel>   \n [Using Impersonation with Transport Security](../../../../docs/framework/wcf/feature-details/using-impersonation-with-transport-security.md)   \n [Impersonating the Client](../../../../docs/framework/wcf/samples/impersonating-the-client.md)   \n [How to: Impersonate a Client on a Service](../../../../docs/framework/wcf/how-to-impersonate-a-client-on-a-service.md)   \n [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)","nodes":[{"pos":[4,429],"embed":true,"restype":"x-metadata","content":"title: \"Delegation and Impersonation with WCF | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"impersonation [WCF]\"\n  - \"delegation [WCF]\"\nms.assetid: 110e60f7-5b03-4b69-b667-31721b8e3152\ncaps.latest.revision: 40\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"Delegation and Impersonation with WCF | Microsoft Docs","nodes":[{"pos":[0,54],"content":"Delegation and Impersonation with WCF | Microsoft Docs","nodes":[{"content":"Delegation and Impersonation with WCF | Microsoft Docs","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[436,473],"content":"Delegation and Impersonation with WCF","linkify":"Delegation and Impersonation with WCF","nodes":[{"content":"Delegation and Impersonation with WCF","pos":[0,37]}]},{"content":"<bpt id=\"p1\">*</bpt>Impersonation<ept id=\"p1\">*</ept> is a common technique that services use to restrict client access to a service domain's resources.","pos":[474,588],"source":"*Impersonation* is a common technique that services use to restrict client access to a service domain's resources."},{"content":"Service domain resources can either be machine resources, such as local files (impersonation), or a resource on another machine, such as a file share (delegation).","pos":[589,752]},{"content":"For a sample application, see <bpt id=\"p1\">[</bpt>Impersonating the Client<ept id=\"p1\">](../../../../docs/framework/wcf/samples/impersonating-the-client.md)</ept>.","pos":[753,878],"source":" For a sample application, see [Impersonating the Client](../../../../docs/framework/wcf/samples/impersonating-the-client.md)."},{"content":"For an example of how to use impersonation, see <bpt id=\"p1\">[</bpt>How to: Impersonate a Client on a Service<ept id=\"p1\">](../../../../docs/framework/wcf/how-to-impersonate-a-client-on-a-service.md)</ept>.","pos":[879,1047],"source":" For an example of how to use impersonation, see [How to: Impersonate a Client on a Service](../../../../docs/framework/wcf/how-to-impersonate-a-client-on-a-service.md)."},{"pos":[1055,1232],"content":"[!IMPORTANT]\n Be aware that when impersonating a client on a service, the service runs with the client's credentials, which may have higher privileges than the server process.","leadings":["","> "],"nodes":[{"content":"Be aware that when impersonating a client on a service, the service runs with the client's credentials, which may have higher privileges than the server process.","pos":[14,175]}]},{"pos":[1241,1249],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"content":"Typically, clients call a service to have the service perform some action on the client’s behalf.","pos":[1253,1350]},{"content":"Impersonation allows the service to act as the client while performing the action.","pos":[1351,1433]},{"content":"Delegation allows a front-end service to forward the client’s request to a back-end service in such a way that the back-end service can also impersonate the client.","pos":[1434,1598]},{"content":"Impersonation is most commonly used as a way of checking whether a client is authorized to perform a particular action, while delegation is a way of flowing impersonation capabilities, along with the client’s identity, to a back-end service.","pos":[1599,1840]},{"content":"Delegation is a Windows domain feature that can be used when Kerberos-based authentication is performed.","pos":[1841,1945]},{"content":"Delegation is distinct from identity flow and, because delegation transfers the ability to impersonate the client without possession of the client’s password, it is a much higher privileged operation than identity flow.","pos":[1946,2165]},{"content":"Both impersonation and delegation require that the client have a Windows identity.","pos":[2172,2254]},{"content":"If a client does not possess a Windows identity, then the only option available is to flow the client’s identity to the second service.","pos":[2255,2390]},{"pos":[2399,2419],"content":"Impersonation Basics","linkify":"Impersonation Basics","nodes":[{"content":"Impersonation Basics","pos":[0,20]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> supports impersonation for a variety of client credentials.","pos":[2423,2538],"source":"[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] supports impersonation for a variety of client credentials."},{"content":"This topic describes service model support for impersonating the caller during the implementation of a service method.","pos":[2539,2657]},{"content":"Also discussed are common deployment scenarios involving impersonation and SOAP security and <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> options in these scenarios.","pos":[2658,2834],"source":" Also discussed are common deployment scenarios involving impersonation and SOAP security and [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] options in these scenarios."},{"content":"This topic focuses on impersonation and delegation in <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> when using SOAP security.","pos":[2841,2976],"source":"This topic focuses on impersonation and delegation in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] when using SOAP security."},{"content":"You can also use impersonation and delegation with <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> when using transport security, as described in <bpt id=\"p1\">[</bpt>Using Impersonation with Transport Security<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/using-impersonation-with-transport-security.md)</ept>.","pos":[2977,3272],"source":" You can also use impersonation and delegation with [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] when using transport security, as described in [Using Impersonation with Transport Security](../../../../docs/framework/wcf/feature-details/using-impersonation-with-transport-security.md)."},{"pos":[3281,3292],"content":"Two Methods","linkify":"Two Methods","nodes":[{"content":"Two Methods","pos":[0,11]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> SOAP security has two distinct methods for performing impersonation.","pos":[3296,3420],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] SOAP security has two distinct methods for performing impersonation."},{"content":"The method used depends on the binding.","pos":[3421,3460]},{"content":"One is impersonation from a Windows token obtained from the Security Support Provider Interface (SSPI) or Kerberos authentication, which is then cached on the service.","pos":[3461,3628]},{"content":"The second is impersonation from a Windows token obtained from the Kerberos extensions, collectively called <bpt id=\"p1\">*</bpt>Service-for-User<ept id=\"p1\">*</ept> (S4U).","pos":[3629,3762],"source":" The second is impersonation from a Windows token obtained from the Kerberos extensions, collectively called *Service-for-User* (S4U)."},{"pos":[3772,3798],"content":"Cached Token Impersonation","linkify":"Cached Token Impersonation","nodes":[{"content":"Cached Token Impersonation","pos":[0,26]}]},{"content":"You can perform cached-token impersonation with the following:","pos":[3802,3864]},{"pos":[3874,4040],"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceModel.WSDualHttpBinding&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.ServiceModel.NetTcpBinding&gt;</ph> with a Windows client credential.","source":"<xref:System.ServiceModel.WSHttpBinding>, <xref:System.ServiceModel.WSDualHttpBinding>, and <xref:System.ServiceModel.NetTcpBinding> with a Windows client credential."},{"pos":[4050,4353],"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph> with a <ph id=\"ph2\">&lt;xref:System.ServiceModel.BasicHttpSecurityMode&gt;</ph> set to the <ph id=\"ph3\">&lt;xref:System.ServiceModel.BasicHttpSecurityMode&gt;</ph> credential, or any other standard binding where the client presents a user name credential that the service can map to a valid Windows account.","source":"<xref:System.ServiceModel.BasicHttpBinding> with a <xref:System.ServiceModel.BasicHttpSecurityMode> set to the <xref:System.ServiceModel.BasicHttpSecurityMode> credential, or any other standard binding where the client presents a user name credential that the service can map to a valid Windows account."},{"content":"Any <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.CustomBinding&gt;</ph> that uses a Windows client credential with the <ph id=\"ph2\">`requireCancellation`</ph> set to <ph id=\"ph3\">`true`</ph>.","pos":[4363,4500],"source":"Any <xref:System.ServiceModel.Channels.CustomBinding> that uses a Windows client credential with the `requireCancellation` set to `true`."},{"content":"(The property is available on the following classes: <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters&gt;</ph>.) If a secure conversation is used on the binding, it must also have the <ph id=\"ph4\">`requireCancellation`</ph> property set to <ph id=\"ph5\">`true`</ph>.","pos":[4501,4904],"source":" (The property is available on the following classes: <xref:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters>, <xref:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters>, and <xref:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters>.) If a secure conversation is used on the binding, it must also have the `requireCancellation` property set to `true`."},{"content":"Any <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.CustomBinding&gt;</ph> where the client presents a user name credential.","pos":[4914,5017],"source":"Any <xref:System.ServiceModel.Channels.CustomBinding> where the client presents a user name credential."},{"content":"If secure conversation is used on the binding, it must also have the <ph id=\"ph1\">`requireCancellation`</ph> property set to <ph id=\"ph2\">`true`</ph>.","pos":[5018,5132],"source":" If secure conversation is used on the binding, it must also have the `requireCancellation` property set to `true`."},{"pos":[5142,5165],"content":"S4U-Based Impersonation","linkify":"S4U-Based Impersonation","nodes":[{"content":"S4U-Based Impersonation","pos":[0,23]}]},{"content":"You can perform S4U-based impersonation with the following:","pos":[5169,5228]},{"pos":[5238,5460],"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceModel.WSDualHttpBinding&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.ServiceModel.NetTcpBinding&gt;</ph> with a certificate client credential that the service can map to a valid Windows account.","source":"<xref:System.ServiceModel.WSHttpBinding>, <xref:System.ServiceModel.WSDualHttpBinding>, and <xref:System.ServiceModel.NetTcpBinding> with a certificate client credential that the service can map to a valid Windows account."},{"pos":[5470,5617],"content":"Any <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.CustomBinding&gt;</ph> that uses a Windows client credential with the <ph id=\"ph2\">`requireCancellation`</ph> property set to <ph id=\"ph3\">`false`</ph>.","source":"Any <xref:System.ServiceModel.Channels.CustomBinding> that uses a Windows client credential with the `requireCancellation` property set to `false`."},{"pos":[5627,5811],"content":"Any <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.CustomBinding&gt;</ph> that uses a user name or Windows client credential and secure conversation with the <ph id=\"ph2\">`requireCancellation`</ph> property set to <ph id=\"ph3\">`false`</ph>.","source":"Any <xref:System.ServiceModel.Channels.CustomBinding> that uses a user name or Windows client credential and secure conversation with the `requireCancellation` property set to `false`."},{"content":"The extent to which the service can impersonate the client depends on the privileges the service account holds when it attempts impersonation, the type of impersonation used, and possibly the extent of impersonation the client permits.","pos":[5818,6053]},{"pos":[6061,7364],"content":"[!NOTE]\n When the client and service are running on the same computer and the client is running under a system account (for example, `Local System` or `Network Service`), the client cannot be impersonated when a secure session is established with stateful Security Context tokens. A Windows Form or console application typically runs under the currently logged-in account, so that account can be impersonated by default. However, when the client is an [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] page and that page is hosted in [!INCLUDE[iis601](../../../../includes/iis601-md.md)] or [!INCLUDE[iisver](../../../../includes/iisver-md.md)], then the client does run under the `Network Service` account by default. All of the system-provided bindings that support secure sessions use a stateless security context token (SCT) by default. However, if the client is an [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] page, and secure sessions with stateful SCTs are used, the client cannot be impersonated. [!INCLUDE[crabout](../../../../includes/crabout-md.md)] using stateful SCTs in a secure session, see [How to: Create a Security Context Token for a Secure Session](../../../../docs/framework/wcf/feature-details/how-to-create-a-security-context-token-for-a-secure-session.md).","leadings":["","> "],"nodes":[{"content":"When the client and service are running on the same computer and the client is running under a system account (for example, `Local System` or `Network Service`), the client cannot be impersonated when a secure session is established with stateful Security Context tokens. A Windows Form or console application typically runs under the currently logged-in account, so that account can be impersonated by default. However, when the client is an [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] page and that page is hosted in [!INCLUDE[iis601](../../../../includes/iis601-md.md)] or [!INCLUDE[iisver](../../../../includes/iisver-md.md)], then the client does run under the `Network Service` account by default. All of the system-provided bindings that support secure sessions use a stateless security context token (SCT) by default. However, if the client is an [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] page, and secure sessions with stateful SCTs are used, the client cannot be impersonated. [!INCLUDE[crabout](../../../../includes/crabout-md.md)] using stateful SCTs in a secure session, see [How to: Create a Security Context Token for a Secure Session](../../../../docs/framework/wcf/feature-details/how-to-create-a-security-context-token-for-a-secure-session.md).","pos":[9,1301],"nodes":[{"content":"When the client and service are running on the same computer and the client is running under a system account (for example, <ph id=\"ph1\">`Local System`</ph> or <ph id=\"ph2\">`Network Service`</ph>), the client cannot be impersonated when a secure session is established with stateful Security Context tokens.","pos":[0,271],"source":"When the client and service are running on the same computer and the client is running under a system account (for example, `Local System` or `Network Service`), the client cannot be impersonated when a secure session is established with stateful Security Context tokens."},{"content":"A Windows Form or console application typically runs under the currently logged-in account, so that account can be impersonated by default.","pos":[272,411]},{"content":"However, when the client is an <ph id=\"ph1\">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> page and that page is hosted in <ph id=\"ph2\">[!INCLUDE[iis601](../../../../includes/iis601-md.md)]</ph> or <ph id=\"ph3\">[!INCLUDE[iisver](../../../../includes/iisver-md.md)]</ph>, then the client does run under the <ph id=\"ph4\">`Network Service`</ph> account by default.","pos":[412,717],"source":" However, when the client is an [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] page and that page is hosted in [!INCLUDE[iis601](../../../../includes/iis601-md.md)] or [!INCLUDE[iisver](../../../../includes/iisver-md.md)], then the client does run under the `Network Service` account by default."},{"content":"All of the system-provided bindings that support secure sessions use a stateless security context token (SCT) by default.","pos":[718,839]},{"content":"However, if the client is an <ph id=\"ph1\">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> page, and secure sessions with stateful SCTs are used, the client cannot be impersonated.","pos":[840,1016],"source":" However, if the client is an [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] page, and secure sessions with stateful SCTs are used, the client cannot be impersonated."},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> using stateful SCTs in a secure session, see <bpt id=\"p1\">[</bpt>How to: Create a Security Context Token for a Secure Session<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-create-a-security-context-token-for-a-secure-session.md)</ept>.","pos":[1017,1292],"source":"[!INCLUDE[crabout](../../../../includes/crabout-md.md)] using stateful SCTs in a secure session, see [How to: Create a Security Context Token for a Secure Session](../../../../docs/framework/wcf/feature-details/how-to-create-a-security-context-token-for-a-secure-session.md)."}]}]},{"pos":[7373,7425],"content":"Impersonation in a Service Method: Declarative Model","linkify":"Impersonation in a Service Method: Declarative Model","nodes":[{"content":"Impersonation in a Service Method: Declarative Model","pos":[0,52]}]},{"content":"Most impersonation scenarios involve executing the service method in the caller context.","pos":[7429,7517]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides an impersonation feature that makes this easy to do by allowing the user to specify the impersonation requirement in the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph> attribute.","pos":[7518,7768],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides an impersonation feature that makes this easy to do by allowing the user to specify the impersonation requirement in the <xref:System.ServiceModel.OperationBehaviorAttribute> attribute."},{"content":"For example, in the following code, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> infrastructure impersonates the caller before executing the <ph id=\"ph2\">`Hello`</ph> method.","pos":[7769,7940],"source":" For example, in the following code, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] infrastructure impersonates the caller before executing the `Hello` method."},{"content":"Any attempt to access native resources inside the <ph id=\"ph1\">`Hello`</ph> method succeed only if the access control list (ACL) of the resource allows the caller access privileges.","pos":[7941,8104],"source":" Any attempt to access native resources inside the `Hello` method succeed only if the access control list (ACL) of the resource allows the caller access privileges."},{"content":"To enable impersonation, set the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A&gt;</ph> property to one of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph> enumeration values, either <ph id=\"ph3\">&lt;xref:System.ServiceModel.ImpersonationOption?displayProperty=fullName&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.ServiceModel.ImpersonationOption?displayProperty=fullName&gt;</ph>, as shown in the following example.","pos":[8105,8488],"source":" To enable impersonation, set the <xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A> property to one of the <xref:System.ServiceModel.ImpersonationOption> enumeration values, either <xref:System.ServiceModel.ImpersonationOption?displayProperty=fullName> or <xref:System.ServiceModel.ImpersonationOption?displayProperty=fullName>, as shown in the following example."},{"pos":[8496,8985],"content":"[!NOTE]\n When a service has higher credentials than the remote client, the credentials of the service are used if the <xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A> property is set to <xref:System.ServiceModel.ImpersonationOption>. That is, if a low-privileged user provides its credentials, a higher-privileged service executes the method with the credentials of the service, and can use resources that the low-privileged user would otherwise not be able to use.","leadings":["","> "],"nodes":[{"content":"When a service has higher credentials than the remote client, the credentials of the service are used if the <xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A> property is set to <xref:System.ServiceModel.ImpersonationOption>. That is, if a low-privileged user provides its credentials, a higher-privileged service executes the method with the credentials of the service, and can use resources that the low-privileged user would otherwise not be able to use.","pos":[9,487],"nodes":[{"content":"When a service has higher credentials than the remote client, the credentials of the service are used if the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A&gt;</ph> property is set to <ph id=\"ph2\">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph>.","pos":[0,246],"source":"When a service has higher credentials than the remote client, the credentials of the service are used if the <xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A> property is set to <xref:System.ServiceModel.ImpersonationOption>."},{"content":"That is, if a low-privileged user provides its credentials, a higher-privileged service executes the method with the credentials of the service, and can use resources that the low-privileged user would otherwise not be able to use.","pos":[247,478]}]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> infrastructure can impersonate the caller only if the caller is authenticated with credentials that can be mapped to a Windows user account.","pos":[9288,9488],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] infrastructure can impersonate the caller only if the caller is authenticated with credentials that can be mapped to a Windows user account."},{"content":"If the service is configured to authenticate using a credential that cannot be mapped to a Windows account, the service method is not executed.","pos":[9489,9632]},{"pos":[9640,9966],"content":"[!NOTE]\n On [!INCLUDE[wxp](../../../../includes/wxp-md.md)], impersonation fails if a stateful SCT is created, resulting in an <xref:System.InvalidOperationException>. [!INCLUDE[crdefault](../../../../includes/crdefault-md.md)][Unsupported Scenarios](../../../../docs/framework/wcf/feature-details/unsupported-scenarios.md).","leadings":["","> "],"nodes":[{"content":"On [!INCLUDE[wxp](../../../../includes/wxp-md.md)], impersonation fails if a stateful SCT is created, resulting in an <xref:System.InvalidOperationException>. [!INCLUDE[crdefault](../../../../includes/crdefault-md.md)][Unsupported Scenarios](../../../../docs/framework/wcf/feature-details/unsupported-scenarios.md).","pos":[9,324],"nodes":[{"content":"On <ph id=\"ph1\">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>, impersonation fails if a stateful SCT is created, resulting in an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[0,158],"source":"On [!INCLUDE[wxp](../../../../includes/wxp-md.md)], impersonation fails if a stateful SCT is created, resulting in an <xref:System.InvalidOperationException>."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Unsupported Scenarios<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/unsupported-scenarios.md)</ept>.","pos":[159,315],"source":"[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)][Unsupported Scenarios](../../../../docs/framework/wcf/feature-details/unsupported-scenarios.md)."}]}]},{"pos":[9975,10026],"content":"Impersonation in a Service Method: Imperative Model","linkify":"Impersonation in a Service Method: Imperative Model","nodes":[{"content":"Impersonation in a Service Method: Imperative Model","pos":[0,51]}]},{"content":"Sometimes a caller does not need to impersonate the entire service method to function, but for only a portion of it.","pos":[10030,10146]},{"content":"In this case, obtain the Windows identity of the caller inside the service method and imperatively perform the impersonation.","pos":[10147,10272]},{"content":"Do this by using the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceSecurityContext.WindowsIdentity%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph> to return an instance of the <ph id=\"ph3\">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> class and calling the <ph id=\"ph4\">&lt;xref:System.Security.Principal.WindowsIdentity.Impersonate%2A&gt;</ph> method before using the instance.","pos":[10273,10626],"source":" Do this by using the <xref:System.ServiceModel.ServiceSecurityContext.WindowsIdentity%2A> property of the <xref:System.ServiceModel.ServiceSecurityContext> to return an instance of the <xref:System.Security.Principal.WindowsIdentity> class and calling the <xref:System.Security.Principal.WindowsIdentity.Impersonate%2A> method before using the instance."},{"pos":[10634,11093],"content":"[!NOTE]\n Be sure to use the [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]`Using` statement or the C# `using` statement to automatically revert the impersonation action. If you do not use the statement, or if you use a programming language other than [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] or C#, be sure to revert the impersonation level. Failure to do this can form the basis for denial of service and elevation of privilege attacks.","leadings":["","> "],"nodes":[{"content":"Be sure to use the [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]`Using` statement or the C# `using` statement to automatically revert the impersonation action. If you do not use the statement, or if you use a programming language other than [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] or C#, be sure to revert the impersonation level. Failure to do this can form the basis for denial of service and elevation of privilege attacks.","pos":[9,457],"nodes":[{"content":"Be sure to use the <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph><ph id=\"ph2\">`Using`</ph> statement or the C# <ph id=\"ph3\">`using`</ph> statement to automatically revert the impersonation action.","pos":[0,167],"source":"Be sure to use the [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]`Using` statement or the C# `using` statement to automatically revert the impersonation action."},{"content":"If you do not use the statement, or if you use a programming language other than <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph> or C#, be sure to revert the impersonation level.","pos":[168,352],"source":" If you do not use the statement, or if you use a programming language other than [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] or C#, be sure to revert the impersonation level."},{"content":"Failure to do this can form the basis for denial of service and elevation of privilege attacks.","pos":[353,448]}]}]},{"pos":[11398,11435],"content":"Impersonation for All Service Methods","linkify":"Impersonation for All Service Methods","nodes":[{"content":"Impersonation for All Service Methods","pos":[0,37]}]},{"content":"In some cases, you must perform all the methods of a service in the caller’s context.","pos":[11439,11524]},{"content":"Instead of explicitly enabling this feature on a per-method basis, use the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior&gt;</ph>.","pos":[11525,11668],"source":" Instead of explicitly enabling this feature on a per-method basis, use the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>."},{"content":"As shown in the following code, set the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[11669,11833],"source":" As shown in the following code, set the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations%2A> property to `true`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior&gt;</ph> is retrieved from the collections of behaviors of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class.","pos":[11834,12005],"source":" The <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> is retrieved from the collections of behaviors of the <xref:System.ServiceModel.ServiceHost> class."},{"content":"Also note that the <ph id=\"ph1\">`Impersonation`</ph> property of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph> applied to each method must also be set to either <ph id=\"ph3\">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph>.","pos":[12006,12258],"source":" Also note that the `Impersonation` property of the <xref:System.ServiceModel.OperationBehaviorAttribute> applied to each method must also be set to either <xref:System.ServiceModel.ImpersonationOption> or <xref:System.ServiceModel.ImpersonationOption>."},{"pos":[12561,12758],"content":"The following table describes <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> behavior for all possible combinations of <ph id=\"ph2\">`ImpersonationOption`</ph> and <ph id=\"ph3\">`ImpersonateCallerForAllServiceOperations`</ph>.","source":"The following table describes [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] behavior for all possible combinations of `ImpersonationOption` and `ImpersonateCallerForAllServiceOperations`."},{"content":"Behavior","pos":[12830,12838]},{"content":"Required","pos":[12939,12947]},{"content":"n/a","pos":[12948,12951]},{"pos":[12952,13031],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> impersonates the caller","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] impersonates the caller"},{"content":"Allowed","pos":[13036,13043]},{"content":"false","pos":[13044,13049]},{"pos":[13050,13137],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not impersonate the caller","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not impersonate the caller"},{"content":"Allowed","pos":[13142,13149]},{"content":"true","pos":[13150,13154]},{"pos":[13155,13234],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> impersonates the caller","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] impersonates the caller"},{"content":"NotAllowed","pos":[13239,13249]},{"content":"false","pos":[13250,13255]},{"pos":[13256,13343],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not impersonate the caller","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not impersonate the caller"},{"content":"NotAllowed","pos":[13348,13358]},{"content":"true","pos":[13359,13363]},{"content":"Disallowed.","pos":[13364,13375]},{"content":"(An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.)","pos":[13376,13431],"source":" (An <xref:System.InvalidOperationException> is thrown.)"},{"pos":[13441,13525],"content":"Impersonation Level Obtained from Windows Credentials and Cached Token Impersonation","linkify":"Impersonation Level Obtained from Windows Credentials and Cached Token Impersonation","nodes":[{"content":"Impersonation Level Obtained from Windows Credentials and Cached Token Impersonation","pos":[0,84]}]},{"content":"In some scenarios the client has partial control over the level of impersonation the service performs when a Windows client credential is used.","pos":[13529,13672]},{"content":"One scenario occurs when the client specifies an Anonymous impersonation level.","pos":[13673,13752]},{"content":"The other occurs when performing impersonation with a cached token.","pos":[13753,13820]},{"content":"This is done by setting the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Security.WindowsClientCredential&gt;</ph> class, which is accessed as a property of the generic <ph id=\"ph3\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> class.","pos":[13821,14120],"source":" This is done by setting the <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> property of the <xref:System.ServiceModel.Security.WindowsClientCredential> class, which is accessed as a property of the generic <xref:System.ServiceModel.ChannelFactory%601> class."},{"pos":[14128,14342],"content":"[!NOTE]\n Specifying an impersonation level of Anonymous causes the client to log on to the service anonymously. The service must therefore allow anonymous logons, regardless of whether impersonation is performed.","leadings":["","> "],"nodes":[{"content":"Specifying an impersonation level of Anonymous causes the client to log on to the service anonymously. The service must therefore allow anonymous logons, regardless of whether impersonation is performed.","pos":[9,212],"nodes":[{"content":"Specifying an impersonation level of Anonymous causes the client to log on to the service anonymously.","pos":[0,102]},{"content":"The service must therefore allow anonymous logons, regardless of whether impersonation is performed.","pos":[103,203]}]}]},{"content":"The client can specify the impersonation level as <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>.","pos":[14349,14633],"source":"The client can specify the impersonation level as <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>."},{"content":"Only a token at the specified level is produced, as shown in the following code.","pos":[14634,14714]},{"content":"The following table specifies the impersonation level the service obtains when impersonating from a cached token.","pos":[15017,15130]},{"pos":[15137,15170],"content":"<ph id=\"ph1\">`AllowedImpersonationLevel`</ph> value","source":"`AllowedImpersonationLevel` value"},{"pos":[15171,15207],"content":"Service has <ph id=\"ph1\">`SeImpersonatePrivilege`</ph>","source":"Service has `SeImpersonatePrivilege`"},{"content":"Service and client are capable of delegation","pos":[15208,15252]},{"pos":[15253,15286],"content":"Cached token <ph id=\"ph1\">`ImpersonationLevel`</ph>","source":"Cached token `ImpersonationLevel`"},{"content":"Anonymous","pos":[15469,15478]},{"content":"Yes","pos":[15479,15482]},{"content":"n/a","pos":[15483,15486]},{"content":"Impersonation","pos":[15487,15500]},{"content":"Anonymous","pos":[15505,15514]},{"content":"No","pos":[15515,15517]},{"content":"n/a","pos":[15518,15521]},{"content":"Identification","pos":[15522,15536]},{"content":"Identification","pos":[15541,15555]},{"content":"n/a","pos":[15556,15559]},{"content":"n/a","pos":[15560,15563]},{"content":"Identification","pos":[15564,15578]},{"content":"Impersonation","pos":[15583,15596]},{"content":"Yes","pos":[15597,15600]},{"content":"n/a","pos":[15601,15604]},{"content":"Impersonation","pos":[15605,15618]},{"content":"Impersonation","pos":[15623,15636]},{"content":"No","pos":[15637,15639]},{"content":"n/a","pos":[15640,15643]},{"content":"Identification","pos":[15644,15658]},{"content":"Delegation","pos":[15663,15673]},{"content":"Yes","pos":[15674,15677]},{"content":"Yes","pos":[15678,15681]},{"content":"Delegation","pos":[15682,15692]},{"content":"Delegation","pos":[15697,15707]},{"content":"Yes","pos":[15708,15711]},{"content":"No","pos":[15712,15714]},{"content":"Impersonation","pos":[15715,15728]},{"content":"Delegation","pos":[15733,15743]},{"content":"No","pos":[15744,15746]},{"content":"n/a","pos":[15747,15750]},{"content":"Identification","pos":[15751,15765]},{"pos":[15775,15861],"content":"Impersonation Level Obtained from User Name Credentials and Cached Token Impersonation","linkify":"Impersonation Level Obtained from User Name Credentials and Cached Token Impersonation","nodes":[{"content":"Impersonation Level Obtained from User Name Credentials and Cached Token Impersonation","pos":[0,86]}]},{"content":"By passing the service its user name and password, a client enables <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> to log on as that user, which is equivalent to setting the <ph id=\"ph2\">`AllowedImpersonationLevel`</ph> property to <ph id=\"ph3\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>.","pos":[15865,16145],"source":"By passing the service its user name and password, a client enables [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] to log on as that user, which is equivalent to setting the `AllowedImpersonationLevel` property to <xref:System.Security.Principal.TokenImpersonationLevel>."},{"content":"(The <ph id=\"ph1\">`AllowedImpersonationLevel`</ph> is available on the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Security.WindowsClientCredential&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ServiceModel.Security.HttpDigestClientCredential&gt;</ph> classes.) The following table provides the impersonation level obtained when the service receives user name credentials.","pos":[16146,16446],"source":" (The `AllowedImpersonationLevel` is available on the <xref:System.ServiceModel.Security.WindowsClientCredential> and <xref:System.ServiceModel.Security.HttpDigestClientCredential> classes.) The following table provides the impersonation level obtained when the service receives user name credentials."},{"pos":[16481,16517],"content":"Service has <ph id=\"ph1\">`SeImpersonatePrivilege`</ph>","source":"Service has `SeImpersonatePrivilege`"},{"content":"Service and client are capable of delegation","pos":[16518,16562]},{"pos":[16563,16596],"content":"Cached token <ph id=\"ph1\">`ImpersonationLevel`</ph>","source":"Cached token `ImpersonationLevel`"},{"content":"n/a","pos":[16773,16776]},{"content":"Yes","pos":[16777,16780]},{"content":"Yes","pos":[16781,16784]},{"content":"Delegation","pos":[16785,16795]},{"content":"n/a","pos":[16800,16803]},{"content":"Yes","pos":[16804,16807]},{"content":"No","pos":[16808,16810]},{"content":"Impersonation","pos":[16811,16824]},{"content":"n/a","pos":[16829,16832]},{"content":"No","pos":[16833,16835]},{"content":"n/a","pos":[16836,16839]},{"content":"Identification","pos":[16840,16854]},{"pos":[16864,16921],"content":"Impersonation Level Obtained from S4U-Based Impersonation","linkify":"Impersonation Level Obtained from S4U-Based Impersonation","nodes":[{"content":"Impersonation Level Obtained from S4U-Based Impersonation","pos":[0,57]}]},{"pos":[16928,16956],"content":"Service has <ph id=\"ph1\">`SeTcbPrivilege`</ph>","source":"Service has `SeTcbPrivilege`"},{"pos":[16957,16993],"content":"Service has <ph id=\"ph1\">`SeImpersonatePrivilege`</ph>","source":"Service has `SeImpersonatePrivilege`"},{"content":"Service and client are capable of delegation","pos":[16994,17038]},{"pos":[17039,17072],"content":"Cached token <ph id=\"ph1\">`ImpersonationLevel`</ph>","source":"Cached token `ImpersonationLevel`"},{"content":"Yes","pos":[17250,17253]},{"content":"Yes","pos":[17254,17257]},{"content":"n/a","pos":[17258,17261]},{"content":"Impersonation","pos":[17262,17275]},{"content":"Yes","pos":[17280,17283]},{"content":"No","pos":[17284,17286]},{"content":"n/a","pos":[17287,17290]},{"content":"Identification","pos":[17291,17305]},{"content":"No","pos":[17310,17312]},{"content":"n/a","pos":[17313,17316]},{"content":"n/a","pos":[17317,17320]},{"content":"Identification","pos":[17321,17335]},{"pos":[17345,17394],"content":"Mapping a Client Certificate to a Windows Account","linkify":"Mapping a Client Certificate to a Windows Account","nodes":[{"content":"Mapping a Client Certificate to a Windows Account","pos":[0,49]}]},{"content":"It is possible for a client to authenticate itself to a service using a certificate, and to have the service map the client to an existing account through Active Directory.","pos":[17398,17570]},{"content":"The following XML shows how to configure the service to map the certificate.","pos":[17571,17647]},{"content":"The following code shows how to configure the service.","pos":[18011,18065]},{"pos":[18588,18598],"content":"Delegation","linkify":"Delegation","nodes":[{"content":"Delegation","pos":[0,10]}]},{"content":"To delegate to a back-end service, a service must perform Kerberos multi-leg (SSPI without NTLM fallback) or Kerberos direct authentication to the back-end service using the client’s Windows identity.","pos":[18602,18802]},{"content":"To delegate to a back-end service, create a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> and a channel, and then communicate through the channel while impersonating the client.","pos":[18803,18980],"source":" To delegate to a back-end service, create a <xref:System.ServiceModel.ChannelFactory%601> and a channel, and then communicate through the channel while impersonating the client."},{"content":"With this form of delegation, the distance at which the back-end service can be located from the front-end service depends on the impersonation level achieved by the front-end service.","pos":[18981,19165]},{"content":"When the impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, the front-end and back-end services must be running on the same machine.","pos":[19166,19328],"source":" When the impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the front-end and back-end services must be running on the same machine."},{"content":"When the impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, the front-end and back-end services can be on separate machines or on the same machine.","pos":[19329,19506],"source":" When the impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the front-end and back-end services can be on separate machines or on the same machine."},{"content":"Enabling delegation-level impersonation requires that Windows domain policy be configured to permit delegation.","pos":[19507,19618]},{"content":"For more information about configuring Active Directory for delegation support, see <bpt id=\"p1\">[</bpt>Enabling Delegated Authentication<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=99690)</ept>.","pos":[19619,19785],"source":" For more information about configuring Active Directory for delegation support, see [Enabling Delegated Authentication](http://go.microsoft.com/fwlink/?LinkId=99690)."},{"pos":[19793,20396],"content":"[!NOTE]\n When a client authenticates to the front-end service using a user name and password that correspond to a Windows account on the back-end service, the front-end service can authenticate to the back-end service by reusing the client’s user name and password. This is a particularly powerful form of identity flow, because passing user name and password to the back-end service enables the back-end service to perform impersonation, but it does not constitute delegation because Kerberos is not used. Active Directory controls on delegation do not apply to user name and password authentication.","leadings":["","> "],"nodes":[{"content":"When a client authenticates to the front-end service using a user name and password that correspond to a Windows account on the back-end service, the front-end service can authenticate to the back-end service by reusing the client’s user name and password. This is a particularly powerful form of identity flow, because passing user name and password to the back-end service enables the back-end service to perform impersonation, but it does not constitute delegation because Kerberos is not used. Active Directory controls on delegation do not apply to user name and password authentication.","pos":[9,601],"nodes":[{"content":"When a client authenticates to the front-end service using a user name and password that correspond to a Windows account on the back-end service, the front-end service can authenticate to the back-end service by reusing the client’s user name and password.","pos":[0,256]},{"content":"This is a particularly powerful form of identity flow, because passing user name and password to the back-end service enables the back-end service to perform impersonation, but it does not constitute delegation because Kerberos is not used.","pos":[257,497]},{"content":"Active Directory controls on delegation do not apply to user name and password authentication.","pos":[498,592]}]}]},{"pos":[20406,20461],"content":"Delegation Ability as a Function of Impersonation Level","linkify":"Delegation Ability as a Function of Impersonation Level","nodes":[{"content":"Delegation Ability as a Function of Impersonation Level","pos":[0,55]}]},{"content":"Impersonation level","pos":[20468,20487]},{"content":"Service can perform cross-process delegation","pos":[20488,20532]},{"content":"Service can perform cross-machine delegation","pos":[20533,20577]},{"content":"No","pos":[20773,20775]},{"content":"No","pos":[20776,20778]},{"content":"Yes","pos":[20840,20843]},{"content":"No","pos":[20844,20846]},{"content":"Yes","pos":[20908,20911]},{"content":"Yes","pos":[20912,20915]},{"content":"The following code example demonstrates how to use delegation.","pos":[20923,20985]},{"pos":[21227,21288],"content":"How to Configure an Application to Use Constrained Delegation","linkify":"How to Configure an Application to Use Constrained Delegation","nodes":[{"content":"How to Configure an Application to Use Constrained Delegation","pos":[0,61]}]},{"content":"Before you can use constrained delegation, the sender, receiver, and the domain controller must be configured to do so.","pos":[21292,21411]},{"content":"The following procedure lists the steps that enable constrained delegation.","pos":[21412,21487]},{"content":"For details about the differences between delegation and constrained delegation, see the portion of <bpt id=\"p1\">[</bpt>Windows Server 2003 Kerberos Extensions<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=100194)</ept> that discusses constrained discussion.","pos":[21488,21715],"source":" For details about the differences between delegation and constrained delegation, see the portion of [Windows Server 2003 Kerberos Extensions](http://go.microsoft.com/fwlink/?LinkId=100194) that discusses constrained discussion."},{"pos":[21725,21882],"content":"On the domain controller, clear the <bpt id=\"p1\">**</bpt>Account is sensitive and cannot be delegated<ept id=\"p1\">**</ept> check box for the account under which the client application is running.","source":"On the domain controller, clear the **Account is sensitive and cannot be delegated** check box for the account under which the client application is running."},{"pos":[21892,22039],"content":"On the domain controller, select the <bpt id=\"p1\">**</bpt>Account is trusted for delegation<ept id=\"p1\">**</ept> check box for the account under which the client application is running.","source":"On the domain controller, select the **Account is trusted for delegation** check box for the account under which the client application is running."},{"pos":[22049,22205],"content":"On the domain controller, configure the middle tier computer so that it is trusted for delegation, by clicking the <bpt id=\"p1\">**</bpt>Trust computer for delegation<ept id=\"p1\">**</ept> option.","source":"On the domain controller, configure the middle tier computer so that it is trusted for delegation, by clicking the **Trust computer for delegation** option."},{"pos":[22215,22396],"content":"On the domain controller, configure the middle tier computer to use constrained delegation, by clicking the <bpt id=\"p1\">**</bpt>Trust this computer for delegation to specified services only<ept id=\"p1\">**</ept> option.","source":"On the domain controller, configure the middle tier computer to use constrained delegation, by clicking the **Trust this computer for delegation to specified services only** option."},{"content":"For more detailed instructions about configuring constrained delegation, see the following topics on MSDN:","pos":[22403,22509]},{"pos":[22519,22602],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Kerberos Delegation<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=36724)</ept>","source":"[Troubleshooting Kerberos Delegation](http://go.microsoft.com/fwlink/?LinkId=36724)"},{"pos":[22612,22715],"content":"<bpt id=\"p1\">[</bpt>Kerberos Protocol Transition and Constrained Delegation<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=36725)</ept>","source":"[Kerberos Protocol Transition and Constrained Delegation](http://go.microsoft.com/fwlink/?LinkId=36725)"},{"pos":[22724,22732],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Using Impersonation with Transport Security<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/using-impersonation-with-transport-security.md)</ept><ph id=\"ph1\"> </ph>","pos":[23592,23733],"source":"[Using Impersonation with Transport Security](../../../../docs/framework/wcf/feature-details/using-impersonation-with-transport-security.md) "},{"content":"<bpt id=\"p1\">[</bpt>Impersonating the Client<ept id=\"p1\">](../../../../docs/framework/wcf/samples/impersonating-the-client.md)</ept><ph id=\"ph1\"> </ph>","pos":[23737,23832],"source":"[Impersonating the Client](../../../../docs/framework/wcf/samples/impersonating-the-client.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Impersonate a Client on a Service<ept id=\"p1\">](../../../../docs/framework/wcf/how-to-impersonate-a-client-on-a-service.md)</ept><ph id=\"ph1\"> </ph>","pos":[23836,23956],"source":"[How to: Impersonate a Client on a Service](../../../../docs/framework/wcf/how-to-impersonate-a-client-on-a-service.md) "},{"content":"<bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>","pos":[23960,24092],"source":"[ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)"}]}