{"content":"---\ntitle: \"Type of '<variablename>' cannot be inferred because the loop bounds and the step variable do not widen to the same type\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc30982\"\n  - \"vbc30982\"\nhelpviewer_keywords: \n  - \"BC30982\"\nms.assetid: 741e85d9-a747-42ad-a1e1-a3f1928aaff5\n---\n# Type of '\\<variablename>' cannot be inferred because the loop bounds and the step variable do not widen to the same type\nYou have written a `For...Next` loop in which the compiler cannot infer a data type for the loop control variable because the following conditions are true:  \n  \n-   The data type of the loop control variable is not specified with an `As` clause.  \n  \n-   The loop bounds and step variable contain at least two data types.  \n  \n-   No standard conversions exist between the data types.  \n  \n Therefore, the compiler cannot infer the data type of a loop's control variable.  \n  \n In the following example, the step variable is a character and the loop bounds are both integers. Because there is no standard conversion between characters and integers, this error is reported.  \n  \n```vb  \nDim stepVar = \"1\"c  \nDim m = 0  \nDim n = 20  \n  \n' Not valid.  \n' For i = 1 To 10 Step stepVar  \n    ' Loop processing  \n' Next  \n```  \n  \n **Error ID:** BC30982  \n  \n## To correct this error  \n  \n-   Change the types of the loop bounds and step variable as necessary so that at least one of them is a type that the others widen to. In the preceding example, change the type of `stepVar` to `Integer`.  \n  \n    ```  \n    Dim stepVar = 1  \n    ```  \n  \n     —or—  \n  \n    ```  \n    Dim stepVar As Integer = 1  \n    ```  \n  \n-   Use explicit conversion functions to convert the loop bounds and step variable to the appropriate types. In the preceding example, apply the `Val` function to `stepVar`.  \n  \n    ```  \n    For i = 1 To 10 Step Val(stepVar)  \n        ' Loop processing  \n    Next  \n    ```  \n  \n## See also\n\n- <xref:Microsoft.VisualBasic.Conversion.Val%2A>\n- [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)\n- [Implicit and Explicit Conversions](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)\n- [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)\n- [Option Infer Statement](../../../visual-basic/language-reference/statements/option-infer-statement.md)\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)\n","nodes":[{"pos":[4,280],"embed":true,"restype":"x-metadata","content":"title: \"Type of '<variablename>' cannot be inferred because the loop bounds and the step variable do not widen to the same type\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc30982\"\n  - \"vbc30982\"\nhelpviewer_keywords: \n  - \"BC30982\"\nms.assetid: 741e85d9-a747-42ad-a1e1-a3f1928aaff5","nodes":[{"content":"Type of '<variablename>' cannot be inferred because the loop bounds and the step variable do not widen to the same type","nodes":[{"pos":[0,119],"content":"Type of '<ph id=\"ph1\">&lt;variablename&gt;</ph>' cannot be inferred because the loop bounds and the step variable do not widen to the same type","source":"Type of '<variablename>' cannot be inferred because the loop bounds and the step variable do not widen to the same type"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[287,407],"content":"Type of '\\<variablename>' cannot be inferred because the loop bounds and the step variable do not widen to the same type","linkify":"Type of '\\<variablename>' cannot be inferred because the loop bounds and the step variable do not widen to the same type","nodes":[{"content":"Type of '<ph id=\"ph1\">\\&lt;</ph>variablename&gt;' cannot be inferred because the loop bounds and the step variable do not widen to the same type","pos":[0,120],"source":"Type of '\\<variablename>' cannot be inferred because the loop bounds and the step variable do not widen to the same type"}]},{"pos":[408,564],"content":"You have written a <ph id=\"ph1\">`For...Next`</ph> loop in which the compiler cannot infer a data type for the loop control variable because the following conditions are true:","source":"You have written a `For...Next` loop in which the compiler cannot infer a data type for the loop control variable because the following conditions are true:"},{"pos":[574,654],"content":"The data type of the loop control variable is not specified with an <ph id=\"ph1\">`As`</ph> clause.","source":"The data type of the loop control variable is not specified with an `As` clause."},{"content":"The loop bounds and step variable contain at least two data types.","pos":[664,730]},{"content":"No standard conversions exist between the data types.","pos":[740,793]},{"content":"Therefore, the compiler cannot infer the data type of a loop's control variable.","pos":[800,880]},{"content":"In the following example, the step variable is a character and the loop bounds are both integers.","pos":[887,984]},{"content":"Because there is no standard conversion between characters and integers, this error is reported.","pos":[985,1081]},{"pos":[1235,1256],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC30982","source":"**Error ID:** BC30982"},{"pos":[1265,1286],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Change the types of the loop bounds and step variable as necessary so that at least one of them is a type that the others widen to.","pos":[1296,1427]},{"content":"In the preceding example, change the type of <ph id=\"ph1\">`stepVar`</ph> to <ph id=\"ph2\">`Integer`</ph>.","pos":[1428,1496],"source":" In the preceding example, change the type of `stepVar` to `Integer`."},{"content":"—or—","pos":[1552,1556]},{"content":"Use explicit conversion functions to convert the loop bounds and step variable to the appropriate types.","pos":[1622,1726]},{"content":"In the preceding example, apply the <ph id=\"ph1\">`Val`</ph> function to <ph id=\"ph2\">`stepVar`</ph>.","pos":[1727,1791],"source":" In the preceding example, apply the `Val` function to `stepVar`."},{"pos":[1902,1910],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1963,2060],"content":"<bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept>","source":"[For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)"},{"pos":[2063,2205],"content":"<bpt id=\"p1\">[</bpt>Implicit and Explicit Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>","source":"[Implicit and Explicit Conversions](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)"},{"pos":[2208,2323],"content":"<bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>","source":"[Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)"},{"pos":[2326,2429],"content":"<bpt id=\"p1\">[</bpt>Option Infer Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>","source":"[Option Infer Statement](../../../visual-basic/language-reference/statements/option-infer-statement.md)"},{"pos":[2432,2540],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[2543,2687],"content":"<bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>","source":"[Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)"}]}