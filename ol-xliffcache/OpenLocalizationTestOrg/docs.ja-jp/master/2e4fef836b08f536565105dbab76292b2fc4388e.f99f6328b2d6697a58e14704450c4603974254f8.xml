{"content":"---\ntitle: \"Try...Catch...Finally statement - Visual Basic\"\ndescription: Learn to use exception handling with Visual Basic Try/Catch/Finally statements.\nms.date: 12/07/2018\nf1_keywords: \n  - \"vb.Try...Catch...Finally\"\n  - \"vb.when\"\n  - \"vb.Finally\"\n  - \"vb.Catch\"\n  - \"vb.Try\"\nhelpviewer_keywords: \n  - \"Try...Catch...Finally statements\"\n  - \"Try statement [Visual Basic]\"\n  - \"try-catch exception handling, Try...Catch...Finally statements\"\n  - \"error handling, while running code\"\n  - \"Try statement [Visual Basic], Try...Catch...Finally\"\n  - \"Finally keyword [Visual Basic], Try...Catch...Finally\"\n  - \"Catch statement [Visual Basic]\"\n  - \"When keyword [Visual Basic]\"\n  - \"Visual Basic code, handling errors while running\"\n  - \"structured exception handling, Try...Catch...Finally statements\"\nms.assetid: d6488026-ccb3-42b8-a810-0d97b9d6472b\nms.custom: seodec18\n---\n# Try...Catch...Finally Statement (Visual Basic)\n\nProvides a way to handle some or all possible errors that may occur in a given block of code, while still running code.\n\n## Syntax\n\n```vb\nTry\n    [ tryStatements ]\n    [ Exit Try ]\n[ Catch [ exception [ As type ] ] [ When expression ]\n    [ catchStatements ]\n    [ Exit Try ] ]\n[ Catch ... ]\n[ Finally\n    [ finallyStatements ] ]\nEnd Try\n```\n\n## Parts\n\n|Term|Definition|\n|---|---|\n|`tryStatements`|Optional. Statement(s) where an error can occur. Can be a compound statement.|\n|`Catch`|Optional. Multiple `Catch` blocks permitted. If an exception occurs when processing the `Try` block, each `Catch` statement is examined in textual order to determine whether it handles the exception, with `exception` representing the exception that has been thrown.|\n|`exception`|Optional. Any variable name. The initial value of `exception` is the value of the thrown error. Used with `Catch` to specify the error caught. If omitted, the `Catch` statement catches any exception.|\n|`type`|Optional. Specifies the type of class filter. If the value of `exception` is of the type specified by `type` or of a derived type, the identifier becomes bound to the exception object.|\n|`When`|Optional. A `Catch` statement with a `When` clause catches exceptions only when `expression` evaluates to `True`. A `When` clause is applied only after checking the type of the exception, and `expression` may refer to the identifier representing the exception.|\n|`expression`|Optional. Must be implicitly convertible to `Boolean`. Any expression that describes a generic filter. Typically used to filter by error number. Used with `When` keyword to specify circumstances under which the error is caught.|\n|`catchStatements`|Optional. Statement(s) to handle errors that occur in the associated `Try` block. Can be a compound statement.|\n|`Exit Try`|Optional. Keyword that breaks out of the `Try...Catch...Finally` structure. Execution resumes with the code immediately following the `End Try` statement. The `Finally` statement will still be executed. Not allowed in `Finally` blocks.|\n|`Finally`|Optional. A `Finally` block is always executed when execution leaves any part of the `Try...Catch` statement.|\n|`finallyStatements`|Optional. Statement(s) that are executed after all other error processing has occurred.|\n|`End Try`|Terminates the `Try...Catch...Finally` structure.|\n\n## Remarks\n\nIf you expect that a particular exception might occur during a particular section of code, put the code in a `Try` block and use a `Catch` block to retain control and handle the exception if it occurs.\n\nA `Try…Catch` statement consists of a `Try` block followed by one or more `Catch` clauses, which specify handlers for various exceptions. When an exception is thrown in a `Try` block, Visual Basic looks for the `Catch` statement that handles the exception. If a matching `Catch` statement is not found, Visual Basic examines the method that called the current method, and so on up the call stack. If no `Catch` block is found, Visual Basic displays an unhandled exception message to the user and stops execution of the program.\n\nYou can use more than one `Catch` statement in a `Try…Catch` statement. If you do this, the order of the `Catch` clauses is significant because they are examined in order. Catch the more specific exceptions before the less specific ones.\n\nThe following `Catch` statement conditions are the least specific, and will catch all exceptions that derive from the <xref:System.Exception> class. You should ordinarily use one of these variations as the last `Catch` block in the `Try...Catch...Finally` structure, after catching all the specific exceptions you expect. Control flow can never reach a `Catch` block that follows either of these variations.\n\n- The `type` is `Exception`, for example: `Catch ex As Exception`\n\n- The statement has no `exception` variable, for example: `Catch`\n\nWhen a `Try…Catch…Finally` statement is nested in another `Try` block, Visual Basic first examines each `Catch` statement in the innermost `Try` block. If no matching `Catch` statement is found, the search proceeds to the `Catch` statements of the outer `Try…Catch…Finally` block.\n\nLocal variables from a `Try` block are not available in a `Catch` block because they are separate blocks. If you want to use a variable in more than one block, declare the variable outside the `Try...Catch...Finally` structure.\n\n> [!TIP]\n> The `Try…Catch…Finally` statement is available as an IntelliSense code snippet. In the Code Snippets Manager, expand **Code Patterns - If, For Each, Try Catch, Property, etc**, and then **Error Handling (Exceptions)**. For more information, see [Code Snippets](/visualstudio/ide/code-snippets).\n\n## Finally block\n\nIf you have one or more statements that must run before you exit the `Try` structure, use a `Finally` block. Control passes to the `Finally` block just before it passes out of the `Try…Catch` structure. This is true even if an exception occurs anywhere inside the `Try` structure.\n\nA `Finally` block is useful for running any code that must execute even if there is an exception. Control is passed to the `Finally` block regardless of how the `Try...Catch` block exits.\n\nThe code in a `Finally` block runs even if your code encounters a `Return` statement in a `Try` or `Catch` block. Control does not pass from a `Try` or `Catch` block to the corresponding `Finally` block in the following cases:\n\n- An [End Statement](end-statement.md) is encountered in the `Try` or `Catch` block.\n\n- A <xref:System.StackOverflowException> is thrown in the `Try` or `Catch` block.\n\nIt is not valid to explicitly transfer execution into a `Finally` block. Transferring execution out of a `Finally` block is not valid, except through an exception.\n\nIf a `Try` statement does not contain at least one `Catch` block, it must contain a `Finally` block.\n\n> [!TIP]\n> If you do not have to catch specific exceptions, the `Using` statement behaves like a `Try…Finally` block, and guarantees disposal of the resources, regardless of how you exit the block. This is true even with an unhandled exception. For more information, see [Using Statement](using-statement.md).\n\n## Exception argument\n\nThe `Catch` block `exception` argument is an instance of the <xref:System.Exception> class or a class that derives from the `Exception` class. The `Exception` class instance corresponds to the error that occurred in the `Try` block.\n\nThe properties of the `Exception` object help to identify the cause and location of an exception. For example, the <xref:System.Exception.StackTrace%2A> property lists the called methods that led to the exception, helping you find where the error occurred in the code. <xref:System.Exception.Message%2A> returns a message that describes the exception. <xref:System.Exception.HelpLink%2A> returns a link to an associated Help file. <xref:System.Exception.InnerException%2A> returns the `Exception` object that caused the current exception, or it returns `Nothing` if there is no original `Exception`.\n\n## Considerations when using a Try…Catch statement\n\nUse a `Try…Catch` statement only to signal the occurrence of unusual or unanticipated program events. Reasons for this include the following:\n\n- Catching exceptions at runtime creates additional overhead, and is likely to be slower than pre-checking to avoid exceptions.\n\n- If a `Catch` block is not handled correctly, the exception might not be reported correctly to users.\n\n- Exception handling makes a program more complex.\n\nYou do not always need a `Try…Catch` statement to check for a condition that is likely to occur. The following example checks whether a file exists before trying to open it. This reduces the need for catching an exception thrown by the <xref:System.IO.File.OpenText%2A> method.\n\n[!code-vb[VbVbalrStatements#94](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#94)]\n\nEnsure that code in `Catch` blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages. Otherwise, exceptions might remain unknown.\n\n## Async methods\n\nIf you mark a method with the [Async](../modifiers/async.md) modifier, you can use the [Await](../operators/await-operator.md) operator in the method. A statement with the `Await` operator suspends execution of the method until the awaited task completes. The task represents ongoing work. When the task that's associated with the `Await` operator finishes, execution resumes in the same method. For more information, see [Control Flow in Async Programs](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md).\n\nA task returned by an Async method may end in a faulted state, indicating that it completed due to an unhandled exception. A task may also end in a canceled state, which results in an `OperationCanceledException` being thrown out of the await expression. To catch either type of exception, place the `Await` expression that's associated with the task in a `Try` block, and catch the exception in the `Catch` block. An example is provided later in this topic.\n\nA task can be in a faulted state because multiple exceptions were responsible for its faulting. For example, the task might be the result of a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>. When you await such a task, the caught exception is only one of the exceptions, and you can't predict which exception will be caught. An example is provided later in this topic.\n\nAn `Await` expression can't be inside a `Catch` block or `Finally` block.\n\n## Iterators\n\nAn iterator function or `Get` accessor performs a custom iteration over a collection. An iterator uses a [Yield](yield-statement.md) statement to return each element of the collection one at a time. You call an iterator function by using a [For Each...Next Statement](for-each-next-statement.md).\n\nA `Yield` statement can be inside a `Try` block. A `Try` block that contains a `Yield` statement can have `Catch` blocks, and can have a `Finally` block. See the \"Try Blocks in Visual Basic\" section of [Iterators](../../programming-guide/concepts/iterators.md) for an example.\n\nA `Yield` statement cannot be inside a `Catch` block or a `Finally` block.\n\nIf the `For Each` body (outside of the iterator function) throws an exception, a `Catch` block in the iterator function is not executed, but a `Finally` block in the iterator function is executed. A `Catch` block inside an iterator function catches only exceptions that occur inside the iterator function.\n\n## Partial-trust situations\n\nIn partial-trust situations, such as an application hosted on a network share, `Try...Catch...Finally` does not catch security exceptions that occur before the method that contains the call is invoked. The following example, when you put it on a server share and run from there, produces the error \"System.Security.SecurityException: Request Failed.\" For more information about security exceptions, see the <xref:System.Security.SecurityException> class.\n\n[!code-vb[VbVbalrStatements#85](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#85)]\n\nIn such a partial-trust situation, you have to put the `Process.Start` statement in a separate `Sub`. The initial call to the `Sub` will fail. This enables `Try...Catch` to catch it before the `Sub` that contains `Process.Start` is started and the security exception produced.\n\n## Examples\n\n### The structure of Try...Catch...Finally\n\nThe following example illustrates the structure of the `Try...Catch...Finally` statement.\n\n[!code-vb[VbVbalrStatements#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#86)]  \n\n### Exception in a method called from a Try block\n\nIn the following example, the `CreateException` method throws a `NullReferenceException`. The code that generates the exception is not in a `Try` block. Therefore, the `CreateException` method does not handle the exception. The `RunSample` method does handle the exception because the call to the `CreateException` method is in a `Try` block.\n\nThe example includes `Catch` statements for several types of exceptions, ordered from the most specific to the most general.\n\n[!code-vb[VbVbalrStatements#91](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#91)]\n\n### The Catch When statement\n\nThe following example shows how to use a `Catch When` statement to filter on a conditional expression. If the conditional expression evaluates to `True`, the code in the `Catch` block runs.\n\n[!code-vb[VbVbalrStatements#92](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#92)]\n\n### Nested Try statements\n\nThe following example has a `Try…Catch` statement that is contained in a `Try` block. The inner `Catch` block throws an exception that has its `InnerException` property set to the original exception. The outer `Catch` block reports its own exception and the inner exception.\n\n[!code-vb[VbVbalrStatements#93](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#93)]\n\n### Exception handling for async methods\n\nThe following example illustrates exception handling for async methods. To catch an exception that applies to an async task, the `Await` expression is in a `Try` block of the caller, and the exception is caught in the `Catch` block.\n\nUncomment the `Throw New Exception` line in the example to demonstrate exception handling. The exception is caught in the `Catch` block, the task's `IsFaulted` property is set to `True`, and the task's `Exception.InnerException` property is set to the exception.\n\nUncomment the `Throw New OperationCancelledException` line to demonstrate what happens when you cancel an asynchronous process. The exception is caught in the `Catch` block, and the task's `IsCanceled` property is set to `True`. However, under some conditions that don't apply to this example, `IsFaulted` is set to `True` and `IsCanceled` is set to `False`.\n\n[!code-vb[csAsyncExceptions#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/csasyncexceptions/vb/class1.vb#1)]\n\n### Handling multiple exceptions in async methods\n\nThe following example illustrates exception handling where multiple tasks can result in multiple exceptions. The `Try` block has the `Await` expression for the task that <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType> returned. The task is complete when the three tasks to which <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType> is applied are complete.\n\nEach of the three tasks causes an exception. The `Catch` block iterates through the exceptions, which are found in the `Exception.InnerExceptions` property of the task that `Task.WhenAll` returned.\n\n[!code-vb[csAsyncExceptions#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/csasyncexceptions/vb/class1.vb#3)]\n\n## See also\n\n- <xref:Microsoft.VisualBasic.Information.Err%2A>\n- <xref:System.Exception>\n- [Exit Statement](exit-statement.md)\n- [On Error Statement](on-error-statement.md)\n- [Best Practices for Using Code Snippets](/visualstudio/ide/best-practices-for-using-code-snippets)\n- [Exception Handling](../../../standard/parallel-programming/exception-handling-task-parallel-library.md)\n- [Throw Statement](throw-statement.md)","nodes":[{"pos":[4,865],"embed":true,"restype":"x-metadata","content":"title: \"Try...Catch...Finally statement - Visual Basic\"\ndescription: Learn to use exception handling with Visual Basic Try/Catch/Finally statements.\nms.date: 12/07/2018\nf1_keywords: \n  - \"vb.Try...Catch...Finally\"\n  - \"vb.when\"\n  - \"vb.Finally\"\n  - \"vb.Catch\"\n  - \"vb.Try\"\nhelpviewer_keywords: \n  - \"Try...Catch...Finally statements\"\n  - \"Try statement [Visual Basic]\"\n  - \"try-catch exception handling, Try...Catch...Finally statements\"\n  - \"error handling, while running code\"\n  - \"Try statement [Visual Basic], Try...Catch...Finally\"\n  - \"Finally keyword [Visual Basic], Try...Catch...Finally\"\n  - \"Catch statement [Visual Basic]\"\n  - \"When keyword [Visual Basic]\"\n  - \"Visual Basic code, handling errors while running\"\n  - \"structured exception handling, Try...Catch...Finally statements\"\nms.assetid: d6488026-ccb3-42b8-a810-0d97b9d6472b\nms.custom: seodec18","nodes":[{"content":"Try...Catch...Finally statement - Visual Basic","nodes":[{"pos":[0,46],"content":"Try...Catch...Finally statement - Visual Basic","nodes":[{"content":"Try...Catch...Finally statement - Visual Basic","pos":[0,46]}]}],"path":["title"],"nosxs":false},{"content":"Learn to use exception handling with Visual Basic Try/Catch/Finally statements.","nodes":[{"pos":[0,79],"content":"Learn to use exception handling with Visual Basic Try/Catch/Finally statements.","nodes":[{"content":"Learn to use exception handling with Visual Basic Try/Catch/Finally statements.","pos":[0,79]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[872,918],"content":"Try...Catch...Finally Statement (Visual Basic)","linkify":"Try...Catch...Finally Statement (Visual Basic)","nodes":[{"content":"Try...Catch...Finally Statement (Visual Basic)","pos":[0,46]}]},{"content":"Provides a way to handle some or all possible errors that may occur in a given block of code, while still running code.","pos":[920,1039]},{"pos":[1044,1050],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1266,1271],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1274,1278]},{"content":"Definition","pos":[1279,1289]},{"content":"Optional.","pos":[1318,1327]},{"content":"Statement(s) where an error can occur.","pos":[1328,1366]},{"content":"Can be a compound statement.","pos":[1367,1395]},{"content":"Optional.","pos":[1406,1415]},{"content":"Multiple <ph id=\"ph1\">`Catch`</ph> blocks permitted.","pos":[1416,1450],"source":" Multiple `Catch` blocks permitted."},{"content":"If an exception occurs when processing the <ph id=\"ph1\">`Try`</ph> block, each <ph id=\"ph2\">`Catch`</ph> statement is examined in textual order to determine whether it handles the exception, with <ph id=\"ph3\">`exception`</ph> representing the exception that has been thrown.","pos":[1451,1671],"source":" If an exception occurs when processing the `Try` block, each `Catch` statement is examined in textual order to determine whether it handles the exception, with `exception` representing the exception that has been thrown."},{"content":"Optional.","pos":[1686,1695]},{"content":"Any variable name.","pos":[1696,1714]},{"content":"The initial value of <ph id=\"ph1\">`exception`</ph> is the value of the thrown error.","pos":[1715,1781],"source":" The initial value of `exception` is the value of the thrown error."},{"content":"Used with <ph id=\"ph1\">`Catch`</ph> to specify the error caught.","pos":[1782,1828],"source":" Used with `Catch` to specify the error caught."},{"content":"If omitted, the <ph id=\"ph1\">`Catch`</ph> statement catches any exception.","pos":[1829,1885],"source":" If omitted, the `Catch` statement catches any exception."},{"content":"Optional.","pos":[1895,1904]},{"content":"Specifies the type of class filter.","pos":[1905,1940]},{"content":"If the value of <ph id=\"ph1\">`exception`</ph> is of the type specified by <ph id=\"ph2\">`type`</ph> or of a derived type, the identifier becomes bound to the exception object.","pos":[1941,2079],"source":" If the value of `exception` is of the type specified by `type` or of a derived type, the identifier becomes bound to the exception object."},{"content":"Optional.","pos":[2089,2098]},{"content":"A <ph id=\"ph1\">`Catch`</ph> statement with a <ph id=\"ph2\">`When`</ph> clause catches exceptions only when <ph id=\"ph3\">`expression`</ph> evaluates to <ph id=\"ph4\">`True`</ph>.","pos":[2099,2202],"source":" A `Catch` statement with a `When` clause catches exceptions only when `expression` evaluates to `True`."},{"content":"A <ph id=\"ph1\">`When`</ph> clause is applied only after checking the type of the exception, and <ph id=\"ph2\">`expression`</ph> may refer to the identifier representing the exception.","pos":[2203,2349],"source":" A `When` clause is applied only after checking the type of the exception, and `expression` may refer to the identifier representing the exception."},{"content":"Optional.","pos":[2365,2374]},{"content":"Must be implicitly convertible to <ph id=\"ph1\">`Boolean`</ph>.","pos":[2375,2419],"source":" Must be implicitly convertible to `Boolean`."},{"content":"Any expression that describes a generic filter.","pos":[2420,2467]},{"content":"Typically used to filter by error number.","pos":[2468,2509]},{"content":"Used with <ph id=\"ph1\">`When`</ph> keyword to specify circumstances under which the error is caught.","pos":[2510,2592],"source":" Used with `When` keyword to specify circumstances under which the error is caught."},{"content":"Optional.","pos":[2613,2622]},{"content":"Statement(s) to handle errors that occur in the associated <ph id=\"ph1\">`Try`</ph> block.","pos":[2623,2694],"source":" Statement(s) to handle errors that occur in the associated `Try` block."},{"content":"Can be a compound statement.","pos":[2695,2723]},{"content":"Optional.","pos":[2737,2746]},{"content":"Keyword that breaks out of the <ph id=\"ph1\">`Try...Catch...Finally`</ph> structure.","pos":[2747,2812],"source":" Keyword that breaks out of the `Try...Catch...Finally` structure."},{"content":"Execution resumes with the code immediately following the <ph id=\"ph1\">`End Try`</ph> statement.","pos":[2813,2891],"source":" Execution resumes with the code immediately following the `End Try` statement."},{"content":"The <ph id=\"ph1\">`Finally`</ph> statement will still be executed.","pos":[2892,2939],"source":" The `Finally` statement will still be executed."},{"content":"Not allowed in <ph id=\"ph1\">`Finally`</ph> blocks.","pos":[2940,2972],"source":" Not allowed in `Finally` blocks."},{"content":"Optional.","pos":[2985,2994]},{"content":"A <ph id=\"ph1\">`Finally`</ph> block is always executed when execution leaves any part of the <ph id=\"ph2\">`Try...Catch`</ph> statement.","pos":[2995,3094],"source":" A `Finally` block is always executed when execution leaves any part of the `Try...Catch` statement."},{"content":"Optional.","pos":[3117,3126]},{"content":"Statement(s) that are executed after all other error processing has occurred.","pos":[3127,3204]},{"pos":[3217,3266],"content":"Terminates the <ph id=\"ph1\">`Try...Catch...Finally`</ph> structure.","source":"Terminates the `Try...Catch...Finally` structure."},{"pos":[3272,3279],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3281,3482],"content":"If you expect that a particular exception might occur during a particular section of code, put the code in a <ph id=\"ph1\">`Try`</ph> block and use a <ph id=\"ph2\">`Catch`</ph> block to retain control and handle the exception if it occurs.","source":"If you expect that a particular exception might occur during a particular section of code, put the code in a `Try` block and use a `Catch` block to retain control and handle the exception if it occurs."},{"content":"A <ph id=\"ph1\">`Try…Catch`</ph> statement consists of a <ph id=\"ph2\">`Try`</ph> block followed by one or more <ph id=\"ph3\">`Catch`</ph> clauses, which specify handlers for various exceptions.","pos":[3484,3621],"source":"A `Try…Catch` statement consists of a `Try` block followed by one or more `Catch` clauses, which specify handlers for various exceptions."},{"content":"When an exception is thrown in a <ph id=\"ph1\">`Try`</ph> block, Visual Basic looks for the <ph id=\"ph2\">`Catch`</ph> statement that handles the exception.","pos":[3622,3740],"source":" When an exception is thrown in a `Try` block, Visual Basic looks for the `Catch` statement that handles the exception."},{"content":"If a matching <ph id=\"ph1\">`Catch`</ph> statement is not found, Visual Basic examines the method that called the current method, and so on up the call stack.","pos":[3741,3880],"source":" If a matching `Catch` statement is not found, Visual Basic examines the method that called the current method, and so on up the call stack."},{"content":"If no <ph id=\"ph1\">`Catch`</ph> block is found, Visual Basic displays an unhandled exception message to the user and stops execution of the program.","pos":[3881,4011],"source":" If no `Catch` block is found, Visual Basic displays an unhandled exception message to the user and stops execution of the program."},{"content":"You can use more than one <ph id=\"ph1\">`Catch`</ph> statement in a <ph id=\"ph2\">`Try…Catch`</ph> statement.","pos":[4013,4084],"source":"You can use more than one `Catch` statement in a `Try…Catch` statement."},{"content":"If you do this, the order of the <ph id=\"ph1\">`Catch`</ph> clauses is significant because they are examined in order.","pos":[4085,4184],"source":" If you do this, the order of the `Catch` clauses is significant because they are examined in order."},{"content":"Catch the more specific exceptions before the less specific ones.","pos":[4185,4250]},{"content":"The following <ph id=\"ph1\">`Catch`</ph> statement conditions are the least specific, and will catch all exceptions that derive from the <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph> class.","pos":[4252,4400],"source":"The following `Catch` statement conditions are the least specific, and will catch all exceptions that derive from the <xref:System.Exception> class."},{"content":"You should ordinarily use one of these variations as the last <ph id=\"ph1\">`Catch`</ph> block in the <ph id=\"ph2\">`Try...Catch...Finally`</ph> structure, after catching all the specific exceptions you expect.","pos":[4401,4573],"source":" You should ordinarily use one of these variations as the last `Catch` block in the `Try...Catch...Finally` structure, after catching all the specific exceptions you expect."},{"content":"Control flow can never reach a <ph id=\"ph1\">`Catch`</ph> block that follows either of these variations.","pos":[4574,4659],"source":" Control flow can never reach a `Catch` block that follows either of these variations."},{"pos":[4663,4726],"content":"The <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">`Exception`</ph>, for example: <ph id=\"ph3\">`Catch ex As Exception`</ph>","source":"The `type` is `Exception`, for example: `Catch ex As Exception`"},{"pos":[4730,4793],"content":"The statement has no <ph id=\"ph1\">`exception`</ph> variable, for example: <ph id=\"ph2\">`Catch`</ph>","source":"The statement has no `exception` variable, for example: `Catch`"},{"content":"When a <ph id=\"ph1\">`Try…Catch…Finally`</ph> statement is nested in another <ph id=\"ph2\">`Try`</ph> block, Visual Basic first examines each <ph id=\"ph3\">`Catch`</ph> statement in the innermost <ph id=\"ph4\">`Try`</ph> block.","pos":[4795,4946],"source":"When a `Try…Catch…Finally` statement is nested in another `Try` block, Visual Basic first examines each `Catch` statement in the innermost `Try` block."},{"content":"If no matching <ph id=\"ph1\">`Catch`</ph> statement is found, the search proceeds to the <ph id=\"ph2\">`Catch`</ph> statements of the outer <ph id=\"ph3\">`Try…Catch…Finally`</ph> block.","pos":[4947,5075],"source":" If no matching `Catch` statement is found, the search proceeds to the `Catch` statements of the outer `Try…Catch…Finally` block."},{"content":"Local variables from a <ph id=\"ph1\">`Try`</ph> block are not available in a <ph id=\"ph2\">`Catch`</ph> block because they are separate blocks.","pos":[5077,5182],"source":"Local variables from a `Try` block are not available in a `Catch` block because they are separate blocks."},{"content":"If you want to use a variable in more than one block, declare the variable outside the <ph id=\"ph1\">`Try...Catch...Finally`</ph> structure.","pos":[5183,5304],"source":" If you want to use a variable in more than one block, declare the variable outside the `Try...Catch...Finally` structure."},{"pos":[5308,5611],"content":"[!TIP]\nThe `Try…Catch…Finally` statement is available as an IntelliSense code snippet. In the Code Snippets Manager, expand **Code Patterns - If, For Each, Try Catch, Property, etc**, and then **Error Handling (Exceptions)**. For more information, see [Code Snippets](/visualstudio/ide/code-snippets).","leadings":["","> "],"nodes":[{"content":"The `Try…Catch…Finally` statement is available as an IntelliSense code snippet. In the Code Snippets Manager, expand **Code Patterns - If, For Each, Try Catch, Property, etc**, and then **Error Handling (Exceptions)**. For more information, see [Code Snippets](/visualstudio/ide/code-snippets).","pos":[7,301],"nodes":[{"content":"The <ph id=\"ph1\">`Try…Catch…Finally`</ph> statement is available as an IntelliSense code snippet.","pos":[0,79],"source":"The `Try…Catch…Finally` statement is available as an IntelliSense code snippet."},{"content":"In the Code Snippets Manager, expand <bpt id=\"p1\">**</bpt>Code Patterns - If, For Each, Try Catch, Property, etc<ept id=\"p1\">**</ept>, and then <bpt id=\"p2\">**</bpt>Error Handling (Exceptions)<ept id=\"p2\">**</ept>.","pos":[80,218],"source":" In the Code Snippets Manager, expand **Code Patterns - If, For Each, Try Catch, Property, etc**, and then **Error Handling (Exceptions)**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Code Snippets<ept id=\"p1\">](/visualstudio/ide/code-snippets)</ept>.","pos":[219,294],"source":" For more information, see [Code Snippets](/visualstudio/ide/code-snippets)."}]}]},{"pos":[5616,5629],"content":"Finally block","linkify":"Finally block","nodes":[{"content":"Finally block","pos":[0,13]}]},{"content":"If you have one or more statements that must run before you exit the <ph id=\"ph1\">`Try`</ph> structure, use a <ph id=\"ph2\">`Finally`</ph> block.","pos":[5631,5739],"source":"If you have one or more statements that must run before you exit the `Try` structure, use a `Finally` block."},{"content":"Control passes to the <ph id=\"ph1\">`Finally`</ph> block just before it passes out of the <ph id=\"ph2\">`Try…Catch`</ph> structure.","pos":[5740,5833],"source":" Control passes to the `Finally` block just before it passes out of the `Try…Catch` structure."},{"content":"This is true even if an exception occurs anywhere inside the <ph id=\"ph1\">`Try`</ph> structure.","pos":[5834,5911],"source":" This is true even if an exception occurs anywhere inside the `Try` structure."},{"content":"A <ph id=\"ph1\">`Finally`</ph> block is useful for running any code that must execute even if there is an exception.","pos":[5913,6010],"source":"A `Finally` block is useful for running any code that must execute even if there is an exception."},{"content":"Control is passed to the <ph id=\"ph1\">`Finally`</ph> block regardless of how the <ph id=\"ph2\">`Try...Catch`</ph> block exits.","pos":[6011,6100],"source":" Control is passed to the `Finally` block regardless of how the `Try...Catch` block exits."},{"content":"The code in a <ph id=\"ph1\">`Finally`</ph> block runs even if your code encounters a <ph id=\"ph2\">`Return`</ph> statement in a <ph id=\"ph3\">`Try`</ph> or <ph id=\"ph4\">`Catch`</ph> block.","pos":[6102,6215],"source":"The code in a `Finally` block runs even if your code encounters a `Return` statement in a `Try` or `Catch` block."},{"content":"Control does not pass from a <ph id=\"ph1\">`Try`</ph> or <ph id=\"ph2\">`Catch`</ph> block to the corresponding <ph id=\"ph3\">`Finally`</ph> block in the following cases:","pos":[6216,6328],"source":" Control does not pass from a `Try` or `Catch` block to the corresponding `Finally` block in the following cases:"},{"pos":[6332,6414],"content":"An <bpt id=\"p1\">[</bpt>End Statement<ept id=\"p1\">](end-statement.md)</ept> is encountered in the <ph id=\"ph1\">`Try`</ph> or <ph id=\"ph2\">`Catch`</ph> block.","source":"An [End Statement](end-statement.md) is encountered in the `Try` or `Catch` block."},{"pos":[6418,6497],"content":"A <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph> is thrown in the <ph id=\"ph2\">`Try`</ph> or <ph id=\"ph3\">`Catch`</ph> block.","source":"A <xref:System.StackOverflowException> is thrown in the `Try` or `Catch` block."},{"content":"It is not valid to explicitly transfer execution into a <ph id=\"ph1\">`Finally`</ph> block.","pos":[6499,6571],"source":"It is not valid to explicitly transfer execution into a `Finally` block."},{"content":"Transferring execution out of a <ph id=\"ph1\">`Finally`</ph> block is not valid, except through an exception.","pos":[6572,6662],"source":" Transferring execution out of a `Finally` block is not valid, except through an exception."},{"pos":[6664,6764],"content":"If a <ph id=\"ph1\">`Try`</ph> statement does not contain at least one <ph id=\"ph2\">`Catch`</ph> block, it must contain a <ph id=\"ph3\">`Finally`</ph> block.","source":"If a `Try` statement does not contain at least one `Catch` block, it must contain a `Finally` block."},{"pos":[6768,7075],"content":"[!TIP]\nIf you do not have to catch specific exceptions, the `Using` statement behaves like a `Try…Finally` block, and guarantees disposal of the resources, regardless of how you exit the block. This is true even with an unhandled exception. For more information, see [Using Statement](using-statement.md).","leadings":["","> "],"nodes":[{"content":"If you do not have to catch specific exceptions, the `Using` statement behaves like a `Try…Finally` block, and guarantees disposal of the resources, regardless of how you exit the block. This is true even with an unhandled exception. For more information, see [Using Statement](using-statement.md).","pos":[7,305],"nodes":[{"content":"If you do not have to catch specific exceptions, the <ph id=\"ph1\">`Using`</ph> statement behaves like a <ph id=\"ph2\">`Try…Finally`</ph> block, and guarantees disposal of the resources, regardless of how you exit the block.","pos":[0,186],"source":"If you do not have to catch specific exceptions, the `Using` statement behaves like a `Try…Finally` block, and guarantees disposal of the resources, regardless of how you exit the block."},{"content":"This is true even with an unhandled exception.","pos":[187,233]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Statement<ept id=\"p1\">](using-statement.md)</ept>.","pos":[234,298],"source":" For more information, see [Using Statement](using-statement.md)."}]}]},{"pos":[7080,7098],"content":"Exception argument","linkify":"Exception argument","nodes":[{"content":"Exception argument","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">`Catch`</ph> block <ph id=\"ph2\">`exception`</ph> argument is an instance of the <ph id=\"ph3\">&lt;xref:System.Exception&gt;</ph> class or a class that derives from the <ph id=\"ph4\">`Exception`</ph> class.","pos":[7100,7242],"source":"The `Catch` block `exception` argument is an instance of the <xref:System.Exception> class or a class that derives from the `Exception` class."},{"content":"The <ph id=\"ph1\">`Exception`</ph> class instance corresponds to the error that occurred in the <ph id=\"ph2\">`Try`</ph> block.","pos":[7243,7332],"source":" The `Exception` class instance corresponds to the error that occurred in the `Try` block."},{"content":"The properties of the <ph id=\"ph1\">`Exception`</ph> object help to identify the cause and location of an exception.","pos":[7334,7431],"source":"The properties of the `Exception` object help to identify the cause and location of an exception."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property lists the called methods that led to the exception, helping you find where the error occurred in the code.","pos":[7432,7602],"source":" For example, the <xref:System.Exception.StackTrace%2A> property lists the called methods that led to the exception, helping you find where the error occurred in the code."},{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> returns a message that describes the exception.","pos":[7603,7685],"source":"<xref:System.Exception.Message%2A> returns a message that describes the exception."},{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.HelpLink%2A&gt;</ph> returns a link to an associated Help file.","pos":[7686,7764],"source":"<xref:System.Exception.HelpLink%2A> returns a link to an associated Help file."},{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> returns the <ph id=\"ph2\">`Exception`</ph> object that caused the current exception, or it returns <ph id=\"ph3\">`Nothing`</ph> if there is no original <ph id=\"ph4\">`Exception`</ph>.","pos":[7765,7933],"source":"<xref:System.Exception.InnerException%2A> returns the `Exception` object that caused the current exception, or it returns `Nothing` if there is no original `Exception`."},{"pos":[7938,7985],"content":"Considerations when using a Try…Catch statement","linkify":"Considerations when using a Try…Catch statement","nodes":[{"content":"Considerations when using a Try…Catch statement","pos":[0,47]}]},{"content":"Use a <ph id=\"ph1\">`Try…Catch`</ph> statement only to signal the occurrence of unusual or unanticipated program events.","pos":[7987,8088],"source":"Use a `Try…Catch` statement only to signal the occurrence of unusual or unanticipated program events."},{"content":"Reasons for this include the following:","pos":[8089,8128]},{"content":"Catching exceptions at runtime creates additional overhead, and is likely to be slower than pre-checking to avoid exceptions.","pos":[8132,8257]},{"pos":[8261,8361],"content":"If a <ph id=\"ph1\">`Catch`</ph> block is not handled correctly, the exception might not be reported correctly to users.","source":"If a `Catch` block is not handled correctly, the exception might not be reported correctly to users."},{"content":"Exception handling makes a program more complex.","pos":[8365,8413]},{"content":"You do not always need a <ph id=\"ph1\">`Try…Catch`</ph> statement to check for a condition that is likely to occur.","pos":[8415,8511],"source":"You do not always need a `Try…Catch` statement to check for a condition that is likely to occur."},{"content":"The following example checks whether a file exists before trying to open it.","pos":[8512,8588]},{"content":"This reduces the need for catching an exception thrown by the <ph id=\"ph1\">&lt;xref:System.IO.File.OpenText%2A&gt;</ph> method.","pos":[8589,8692],"source":" This reduces the need for catching an exception thrown by the <xref:System.IO.File.OpenText%2A> method."},{"content":"Ensure that code in <ph id=\"ph1\">`Catch`</ph> blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages.","pos":[8815,8951],"source":"Ensure that code in `Catch` blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages."},{"content":"Otherwise, exceptions might remain unknown.","pos":[8952,8995]},{"pos":[9000,9013],"content":"Async methods","linkify":"Async methods","nodes":[{"content":"Async methods","pos":[0,13]}]},{"content":"If you mark a method with the <bpt id=\"p1\">[</bpt>Async<ept id=\"p1\">](../modifiers/async.md)</ept> modifier, you can use the <bpt id=\"p2\">[</bpt>Await<ept id=\"p2\">](../operators/await-operator.md)</ept> operator in the method.","pos":[9015,9165],"source":"If you mark a method with the [Async](../modifiers/async.md) modifier, you can use the [Await](../operators/await-operator.md) operator in the method."},{"content":"A statement with the <ph id=\"ph1\">`Await`</ph> operator suspends execution of the method until the awaited task completes.","pos":[9166,9270],"source":" A statement with the `Await` operator suspends execution of the method until the awaited task completes."},{"content":"The task represents ongoing work.","pos":[9271,9304]},{"content":"When the task that's associated with the <ph id=\"ph1\">`Await`</ph> operator finishes, execution resumes in the same method.","pos":[9305,9410],"source":" When the task that's associated with the `Await` operator finishes, execution resumes in the same method."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Control Flow in Async Programs<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.","pos":[9411,9560],"source":" For more information, see [Control Flow in Async Programs](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)."},{"content":"A task returned by an Async method may end in a faulted state, indicating that it completed due to an unhandled exception.","pos":[9562,9684]},{"content":"A task may also end in a canceled state, which results in an <ph id=\"ph1\">`OperationCanceledException`</ph> being thrown out of the await expression.","pos":[9685,9816],"source":" A task may also end in a canceled state, which results in an `OperationCanceledException` being thrown out of the await expression."},{"content":"To catch either type of exception, place the <ph id=\"ph1\">`Await`</ph> expression that's associated with the task in a <ph id=\"ph2\">`Try`</ph> block, and catch the exception in the <ph id=\"ph3\">`Catch`</ph> block.","pos":[9817,9976],"source":" To catch either type of exception, place the `Await` expression that's associated with the task in a `Try` block, and catch the exception in the `Catch` block."},{"content":"An example is provided later in this topic.","pos":[9977,10020]},{"content":"A task can be in a faulted state because multiple exceptions were responsible for its faulting.","pos":[10022,10117]},{"content":"For example, the task might be the result of a call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph>.","pos":[10118,10248],"source":" For example, the task might be the result of a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>."},{"content":"When you await such a task, the caught exception is only one of the exceptions, and you can't predict which exception will be caught.","pos":[10249,10382]},{"content":"An example is provided later in this topic.","pos":[10383,10426]},{"pos":[10428,10501],"content":"An <ph id=\"ph1\">`Await`</ph> expression can't be inside a <ph id=\"ph2\">`Catch`</ph> block or <ph id=\"ph3\">`Finally`</ph> block.","source":"An `Await` expression can't be inside a `Catch` block or `Finally` block."},{"pos":[10506,10515],"content":"Iterators","linkify":"Iterators","nodes":[{"content":"Iterators","pos":[0,9]}]},{"content":"An iterator function or <ph id=\"ph1\">`Get`</ph> accessor performs a custom iteration over a collection.","pos":[10517,10602],"source":"An iterator function or `Get` accessor performs a custom iteration over a collection."},{"content":"An iterator uses a <bpt id=\"p1\">[</bpt>Yield<ept id=\"p1\">](yield-statement.md)</ept> statement to return each element of the collection one at a time.","pos":[10603,10715],"source":" An iterator uses a [Yield](yield-statement.md) statement to return each element of the collection one at a time."},{"content":"You call an iterator function by using a <bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](for-each-next-statement.md)</ept>.","pos":[10716,10813],"source":" You call an iterator function by using a [For Each...Next Statement](for-each-next-statement.md)."},{"content":"A <ph id=\"ph1\">`Yield`</ph> statement can be inside a <ph id=\"ph2\">`Try`</ph> block.","pos":[10815,10863],"source":"A `Yield` statement can be inside a `Try` block."},{"content":"A <ph id=\"ph1\">`Try`</ph> block that contains a <ph id=\"ph2\">`Yield`</ph> statement can have <ph id=\"ph3\">`Catch`</ph> blocks, and can have a <ph id=\"ph4\">`Finally`</ph> block.","pos":[10864,10968],"source":" A `Try` block that contains a `Yield` statement can have `Catch` blocks, and can have a `Finally` block."},{"content":"See the \"Try Blocks in Visual Basic\" section of <bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](../../programming-guide/concepts/iterators.md)</ept> for an example.","pos":[10969,11091],"source":" See the \"Try Blocks in Visual Basic\" section of [Iterators](../../programming-guide/concepts/iterators.md) for an example."},{"pos":[11093,11167],"content":"A <ph id=\"ph1\">`Yield`</ph> statement cannot be inside a <ph id=\"ph2\">`Catch`</ph> block or a <ph id=\"ph3\">`Finally`</ph> block.","source":"A `Yield` statement cannot be inside a `Catch` block or a `Finally` block."},{"content":"If the <ph id=\"ph1\">`For Each`</ph> body (outside of the iterator function) throws an exception, a <ph id=\"ph2\">`Catch`</ph> block in the iterator function is not executed, but a <ph id=\"ph3\">`Finally`</ph> block in the iterator function is executed.","pos":[11169,11365],"source":"If the `For Each` body (outside of the iterator function) throws an exception, a `Catch` block in the iterator function is not executed, but a `Finally` block in the iterator function is executed."},{"content":"A <ph id=\"ph1\">`Catch`</ph> block inside an iterator function catches only exceptions that occur inside the iterator function.","pos":[11366,11474],"source":" A `Catch` block inside an iterator function catches only exceptions that occur inside the iterator function."},{"pos":[11479,11503],"content":"Partial-trust situations","linkify":"Partial-trust situations","nodes":[{"content":"Partial-trust situations","pos":[0,24]}]},{"content":"In partial-trust situations, such as an application hosted on a network share, <ph id=\"ph1\">`Try...Catch...Finally`</ph> does not catch security exceptions that occur before the method that contains the call is invoked.","pos":[11505,11706],"source":"In partial-trust situations, such as an application hosted on a network share, `Try...Catch...Finally` does not catch security exceptions that occur before the method that contains the call is invoked."},{"content":"The following example, when you put it on a server share and run from there, produces the error \"System.Security.SecurityException: Request Failed.\"","pos":[11707,11855]},{"content":"For more information about security exceptions, see the <ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph> class.","pos":[11856,11959],"source":" For more information about security exceptions, see the <xref:System.Security.SecurityException> class."},{"content":"In such a partial-trust situation, you have to put the <ph id=\"ph1\">`Process.Start`</ph> statement in a separate <ph id=\"ph2\">`Sub`</ph>.","pos":[12082,12183],"source":"In such a partial-trust situation, you have to put the `Process.Start` statement in a separate `Sub`."},{"content":"The initial call to the <ph id=\"ph1\">`Sub`</ph> will fail.","pos":[12184,12224],"source":" The initial call to the `Sub` will fail."},{"content":"This enables <ph id=\"ph1\">`Try...Catch`</ph> to catch it before the <ph id=\"ph2\">`Sub`</ph> that contains <ph id=\"ph3\">`Process.Start`</ph> is started and the security exception produced.","pos":[12225,12358],"source":" This enables `Try...Catch` to catch it before the `Sub` that contains `Process.Start` is started and the security exception produced."},{"pos":[12363,12371],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[12377,12415],"content":"The structure of Try...Catch...Finally","linkify":"The structure of Try...Catch...Finally","nodes":[{"content":"The structure of Try...Catch...Finally","pos":[0,38]}]},{"pos":[12417,12506],"content":"The following example illustrates the structure of the <ph id=\"ph1\">`Try...Catch...Finally`</ph> statement.","source":"The following example illustrates the structure of the `Try...Catch...Finally` statement."},{"pos":[12635,12680],"content":"Exception in a method called from a Try block","linkify":"Exception in a method called from a Try block","nodes":[{"content":"Exception in a method called from a Try block","pos":[0,45]}]},{"content":"In the following example, the <ph id=\"ph1\">`CreateException`</ph> method throws a <ph id=\"ph2\">`NullReferenceException`</ph>.","pos":[12682,12771],"source":"In the following example, the `CreateException` method throws a `NullReferenceException`."},{"content":"The code that generates the exception is not in a <ph id=\"ph1\">`Try`</ph> block.","pos":[12772,12834],"source":" The code that generates the exception is not in a `Try` block."},{"content":"Therefore, the <ph id=\"ph1\">`CreateException`</ph> method does not handle the exception.","pos":[12835,12905],"source":" Therefore, the `CreateException` method does not handle the exception."},{"content":"The <ph id=\"ph1\">`RunSample`</ph> method does handle the exception because the call to the <ph id=\"ph2\">`CreateException`</ph> method is in a <ph id=\"ph3\">`Try`</ph> block.","pos":[12906,13024],"source":" The `RunSample` method does handle the exception because the call to the `CreateException` method is in a `Try` block."},{"pos":[13026,13150],"content":"The example includes <ph id=\"ph1\">`Catch`</ph> statements for several types of exceptions, ordered from the most specific to the most general.","source":"The example includes `Catch` statements for several types of exceptions, ordered from the most specific to the most general."},{"pos":[13277,13301],"content":"The Catch When statement","linkify":"The Catch When statement","nodes":[{"content":"The Catch When statement","pos":[0,24]}]},{"content":"The following example shows how to use a <ph id=\"ph1\">`Catch When`</ph> statement to filter on a conditional expression.","pos":[13303,13405],"source":"The following example shows how to use a `Catch When` statement to filter on a conditional expression."},{"content":"If the conditional expression evaluates to <ph id=\"ph1\">`True`</ph>, the code in the <ph id=\"ph2\">`Catch`</ph> block runs.","pos":[13406,13492],"source":" If the conditional expression evaluates to `True`, the code in the `Catch` block runs."},{"pos":[13619,13640],"content":"Nested Try statements","linkify":"Nested Try statements","nodes":[{"content":"Nested Try statements","pos":[0,21]}]},{"content":"The following example has a <ph id=\"ph1\">`Try…Catch`</ph> statement that is contained in a <ph id=\"ph2\">`Try`</ph> block.","pos":[13642,13727],"source":"The following example has a `Try…Catch` statement that is contained in a `Try` block."},{"content":"The inner <ph id=\"ph1\">`Catch`</ph> block throws an exception that has its <ph id=\"ph2\">`InnerException`</ph> property set to the original exception.","pos":[13728,13841],"source":" The inner `Catch` block throws an exception that has its `InnerException` property set to the original exception."},{"content":"The outer <ph id=\"ph1\">`Catch`</ph> block reports its own exception and the inner exception.","pos":[13842,13916],"source":" The outer `Catch` block reports its own exception and the inner exception."},{"pos":[14043,14079],"content":"Exception handling for async methods","linkify":"Exception handling for async methods","nodes":[{"content":"Exception handling for async methods","pos":[0,36]}]},{"content":"The following example illustrates exception handling for async methods.","pos":[14081,14152]},{"content":"To catch an exception that applies to an async task, the <ph id=\"ph1\">`Await`</ph> expression is in a <ph id=\"ph2\">`Try`</ph> block of the caller, and the exception is caught in the <ph id=\"ph3\">`Catch`</ph> block.","pos":[14153,14313],"source":" To catch an exception that applies to an async task, the `Await` expression is in a `Try` block of the caller, and the exception is caught in the `Catch` block."},{"content":"Uncomment the <ph id=\"ph1\">`Throw New Exception`</ph> line in the example to demonstrate exception handling.","pos":[14315,14405],"source":"Uncomment the `Throw New Exception` line in the example to demonstrate exception handling."},{"content":"The exception is caught in the <ph id=\"ph1\">`Catch`</ph> block, the task's <ph id=\"ph2\">`IsFaulted`</ph> property is set to <ph id=\"ph3\">`True`</ph>, and the task's <ph id=\"ph4\">`Exception.InnerException`</ph> property is set to the exception.","pos":[14406,14577],"source":" The exception is caught in the `Catch` block, the task's `IsFaulted` property is set to `True`, and the task's `Exception.InnerException` property is set to the exception."},{"content":"Uncomment the <ph id=\"ph1\">`Throw New OperationCancelledException`</ph> line to demonstrate what happens when you cancel an asynchronous process.","pos":[14579,14706],"source":"Uncomment the `Throw New OperationCancelledException` line to demonstrate what happens when you cancel an asynchronous process."},{"content":"The exception is caught in the <ph id=\"ph1\">`Catch`</ph> block, and the task's <ph id=\"ph2\">`IsCanceled`</ph> property is set to <ph id=\"ph3\">`True`</ph>.","pos":[14707,14807],"source":" The exception is caught in the `Catch` block, and the task's `IsCanceled` property is set to `True`."},{"content":"However, under some conditions that don't apply to this example, <ph id=\"ph1\">`IsFaulted`</ph> is set to <ph id=\"ph2\">`True`</ph> and <ph id=\"ph3\">`IsCanceled`</ph> is set to <ph id=\"ph4\">`False`</ph>.","pos":[14808,14937],"source":" However, under some conditions that don't apply to this example, `IsFaulted` is set to `True` and `IsCanceled` is set to `False`."},{"pos":[15062,15107],"content":"Handling multiple exceptions in async methods","linkify":"Handling multiple exceptions in async methods","nodes":[{"content":"Handling multiple exceptions in async methods","pos":[0,45]}]},{"content":"The following example illustrates exception handling where multiple tasks can result in multiple exceptions.","pos":[15109,15217]},{"content":"The <ph id=\"ph1\">`Try`</ph> block has the <ph id=\"ph2\">`Await`</ph> expression for the task that <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph> returned.","pos":[15218,15363],"source":" The `Try` block has the `Await` expression for the task that <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType> returned."},{"content":"The task is complete when the three tasks to which <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph> is applied are complete.","pos":[15364,15514],"source":" The task is complete when the three tasks to which <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType> is applied are complete."},{"content":"Each of the three tasks causes an exception.","pos":[15516,15560]},{"content":"The <ph id=\"ph1\">`Catch`</ph> block iterates through the exceptions, which are found in the <ph id=\"ph2\">`Exception.InnerExceptions`</ph> property of the task that <ph id=\"ph3\">`Task.WhenAll`</ph> returned.","pos":[15561,15713],"source":" The `Catch` block iterates through the exceptions, which are found in the `Exception.InnerExceptions` property of the task that `Task.WhenAll` returned."},{"pos":[15837,15845],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[15925,15960],"content":"<bpt id=\"p1\">[</bpt>Exit Statement<ept id=\"p1\">](exit-statement.md)</ept>","source":"[Exit Statement](exit-statement.md)"},{"pos":[15963,16006],"content":"<bpt id=\"p1\">[</bpt>On Error Statement<ept id=\"p1\">](on-error-statement.md)</ept>","source":"[On Error Statement](on-error-statement.md)"},{"pos":[16009,16107],"content":"<bpt id=\"p1\">[</bpt>Best Practices for Using Code Snippets<ept id=\"p1\">](/visualstudio/ide/best-practices-for-using-code-snippets)</ept>","source":"[Best Practices for Using Code Snippets](/visualstudio/ide/best-practices-for-using-code-snippets)"},{"pos":[16110,16214],"content":"<bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](../../../standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>","source":"[Exception Handling](../../../standard/parallel-programming/exception-handling-task-parallel-library.md)"},{"pos":[16217,16254],"content":"<bpt id=\"p1\">[</bpt>Throw Statement<ept id=\"p1\">](throw-statement.md)</ept>","source":"[Throw Statement](throw-statement.md)"}]}