<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c9618ffa8a90df63d15ef22e9537b922f1e2a9e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\collection-initializers\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b24ef91d4d7d007887b8112da2a6e670d336dd4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8bb4eaba1e4276d20d9867d812f1772e3debaeb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Collection Initializers (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Collection Initializers (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Collection initializers<ept id="p1">*</ept> provide a shortened syntax that enables you to create a collection and populate it with an initial set of values.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Collection initializers are useful when you are creating a collection from a set of known values, for example, a list of menu options or categories, an initial set of numeric values, a static list of strings such as day or month names, or geographic locations such as a list of states that is used for validation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about collections, see <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You identify a collection initializer by using the <ph id="ph1">`From`</ph> keyword followed by braces (<ph id="ph2">`{}`</ph>).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is similar to the array literal syntax that is described in <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following examples show various ways to use collection initializers to create collections.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrCollectionInitializers#1<ept id="p2">](../../../../visual-basic/programming-guide/language-features/arrays/codesnippet/VisualBasic/index_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>C# also provides collection initializers.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>C# collection initializers provide the same functionality as Visual Basic collection initializers.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about C# collection initializers, see <bpt id="p1">[</bpt>Object and Collection Initializers<ept id="p1">](../../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A collection initializer consists of a list of comma-separated values that are enclosed in braces (<ph id="ph1">`{}`</ph>), preceded by the <ph id="ph2">`From`</ph> keyword, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrCollectionInitializers#2<ept id="p2">](../../../../visual-basic/programming-guide/language-features/arrays/codesnippet/VisualBasic/index_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you create a collection, such as a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> or a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, you must supply the collection type before the collection initializer, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrCollectionInitializers#13<ept id="p2">](../../../../visual-basic/programming-guide/language-features/arrays/codesnippet/VisualBasic/index_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You cannot combine both a collection initializer and an object initializer to initialize the same collection object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use object initializers to initialize objects in a collection initializer.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creating a Collection by Using a Collection Intializer</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you create a collection by using a collection initializer, each value that is supplied in the collection initializer is passed to the appropriate <ph id="ph1">`Add`</ph> method of the collection.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, if you create a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> by using a collection initializer, each string value in the collection initializer is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you want to create a collection by using a collection initializer, the specified type must be valid collection type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Examples of valid collection types include classes that implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface or inherit the <ph id="ph2">&lt;xref:System.Collections.CollectionBase&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The specified type must also expose an <ph id="ph1">`Add`</ph> method that meets the following criteria.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Add`</ph> method must be available from the scope in which the collection initializer is being called.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Add`</ph> method does not have to be public if you are using the collection initializer in a scenario where non-public methods of the collection can be accessed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Add`</ph> method must be an instance member or <ph id="ph2">`Shared`</ph> member of the collection class, or an extension method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Add`</ph> method must exist that can be matched, based on overload resolution rules, to the types that are supplied in the collection initializer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, the following code example shows how to create a <ph id="ph1">`List(Of Customer)`</ph> collection by using a collection initializer.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When the code is run, each <ph id="ph1">`Customer`</ph> object is passed to the <ph id="ph2">`Add(Customer)`</ph> method of the generic list.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrCollectionInitializers#9<ept id="p2">](../../../../visual-basic/programming-guide/language-features/arrays/codesnippet/VisualBasic/index_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following code example shows equivalent code that does not use a collection initializer.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrCollectionInitializers#10<ept id="p2">](../../../../visual-basic/programming-guide/language-features/arrays/codesnippet/VisualBasic/index_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the collection has an <ph id="ph1">`Add`</ph> method that has parameters that match the constructor for the <ph id="ph2">`Customer`</ph> object, you could nest parameter values for the <ph id="ph3">`Add`</ph> method within collection initializers, as discussed in the next section.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the collection does not have such an <ph id="ph1">`Add`</ph> method, you can create one as an extension method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For an example of how to create an <ph id="ph1">`Add`</ph> method as an extension method for a collection, see <bpt id="p1">[</bpt>How to: Create an Add Extension Method Used by a Collection Initializer<ept id="p1">](../../../../visual-basic/programming-guide/language-features/collection-initializers/how-to-create-an-add-extension-method-used-by-a-collection-initializer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For an example of how to create a custom collection that can be used with a collection initializer, see <bpt id="p1">[</bpt>How to: Create a Collection Used by a Collection Initializer<ept id="p1">](../../../../visual-basic/programming-guide/language-features/collection-initializers/how-to-create-a-collection-used-by-a-collection-initializer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Nesting Collection Initializers</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can nest values within a collection initializer to identify a specific overload of an <ph id="ph1">`Add`</ph> method for the collection that is being created.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The values passed to the <ph id="ph1">`Add`</ph> method must be separated by commas and enclosed in braces (<ph id="ph2">`{}`</ph>), like you would do in an array literal or collection initializer.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When you create a collection by using nested values, each element of the nested value list is passed as an argument to the <ph id="ph1">`Add`</ph> method that matches the element types.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, the following code example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> in which the keys are of type <ph id="ph2">`Integer`</ph> and the values are of type <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each of the nested value lists is matched to the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method for the <ph id="ph2">`Dictionary`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrCollectionInitializers#5<ept id="p2">](../../../../visual-basic/programming-guide/language-features/arrays/codesnippet/VisualBasic/index_6.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The previous code example is equivalent to the following code.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrCollectionInitializers#6<ept id="p2">](../../../../visual-basic/programming-guide/language-features/arrays/codesnippet/VisualBasic/index_7.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Only nested value lists from the first level of nesting are sent to the <ph id="ph1">`Add`</ph> method for the collection type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Deeper levels of nesting are treated as array literals and the nested value lists are not matched to the <ph id="ph1">`Add`</ph> method of any collection.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create an Add Extension Method Used by a Collection Initializer<ept id="p1">](../../../../visual-basic/programming-guide/language-features/collection-initializers/how-to-create-an-add-extension-method-used-by-a-collection-initializer.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Shows how to create an extension method called <ph id="ph1">`Add`</ph> that can be used to populate a collection with values from a collection initializer.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Collection Used by a Collection Initializer<ept id="p1">](../../../../visual-basic/programming-guide/language-features/collection-initializers/how-to-create-a-collection-used-by-a-collection-initializer.md)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Shows how to enable use of a collection initializer by including an <ph id="ph1">`Add`</ph> method in a collection class that implements <ph id="ph2">`IEnumerable`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Auto-Implemented Properties<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/auto-implemented-properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Initialize an Array Variable in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a List of Items<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-create-a-list-of-items.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>