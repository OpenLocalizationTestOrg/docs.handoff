<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">870320c8467237e87a2675ec5cfb57647026d8ec</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\porting\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28216131d6e24a3e220cabe0739c0879c141668f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e3543a93261f65833e2e0677de900af7d822228</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Port code from .NET Framework to .NET Core</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Understand the porting process and discover tools you may find helpful when porting a .NET Framework project to .NET Core.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Port your code from .NET Framework to .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you've got code that runs on the .NET Framework, you may be interested in running your code on .NET Core, too.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Here's an overview of the porting process and a list of the tools you may find helpful when porting your code to .NET Core.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overview of the porting process</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is the process we recommend you take when porting your project to .NET Core.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each step of the process is covered in more detail in further articles.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Identify and account for your third-party dependencies.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This step involves understanding what your third-party dependencies are, how you depend on them, how to check if they also run on .NET Core, and steps you can take if they don't.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It also covers how you can migrate your dependencies over to the <bpt id="p1">[</bpt>PackageReference<ept id="p1">](/nuget/consume-packages/package-references-in-project-files)</ept> format that is used in .NET Core.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Retarget all projects you wish to port to target the .NET Framework 4.7.2 or higher.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This step ensures that you can use API alternatives for .NET Framework-specific targets when .NET Core doesn't support a particular API.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>.NET Portability Analyzer<ept id="p1">](../../standard/analyzers/portability-analyzer.md)</ept> to analyze your assemblies and develop a plan to port based on its results.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The API Portability Analyzer tool analyzes your compiled assemblies and generates a report that shows a high-level portability summary and a breakdown of each API you're using that isn't available on .NET Core.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use this report alongside an analysis of your codebase to develop a plan for how you'll port your code over.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Port your tests code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because porting to .NET Core is such a significant change to your codebase, it's highly recommended to get your tests ported, so that you can run tests as you port your code over.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>MSTest, xUnit, and NUnit all support .NET Core.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Execute your plan for porting!</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following list shows tools you might find helpful to use during the porting process:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>.NET Portability Analyzer - <bpt id="p1">[</bpt>command line tool<ept id="p1">](https://github.com/Microsoft/dotnet-apiport/releases)</ept> or <bpt id="p2">[</bpt>Visual Studio Extension<ept id="p2">](https://marketplace.visualstudio.com/items?itemName=ConnieYau.NETPortabilityAnalyzer)</ept>, a toolchain that can generate a report of how portable your code is between .NET Framework and .NET Core, with an assembly-by-assembly breakdown of issues.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>.NET Portability Analyzer<ept id="p1">](../../standard/analyzers/portability-analyzer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>.NET API analyzer - A Roslyn analyzer that discovers potential compatibility risks for C# APIs on different platforms and detects calls to deprecated APIs.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>.NET API analyzer<ept id="p1">](../../standard/analyzers/api-analyzer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Reverse Package Search - A <bpt id="p1">[</bpt>useful web service<ept id="p1">](https://packagesearch.azurewebsites.net)</ept> that allows you to search for a type and find packages containing that type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Additionally, you can attempt to port smaller solutions or individual projects to the .NET Core project file format with the <bpt id="p1">[</bpt>CsprojToVs2017<ept id="p1">](https://github.com/hvanbakel/CsprojToVs2017)</ept> tool.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CsprojToVs2017 is a third-party tool.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There is no guarantee that it will work for all of your projects, and it may cause subtle changes in behavior that you depend on.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CsprojToVs2017 should be used as a <bpt id="p1">_</bpt>starting point<ept id="p1">_</ept> that automates the basic things that can be automated.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It is not a guaranteed solution to migrating project file formats.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Next<ept id="p1">](net-framework-tech-unavailable.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>