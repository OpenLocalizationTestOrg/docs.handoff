{"content":"---\ntitle: \"TypeOf Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"TypeOf\"\n  - \"vb.TypeOf\"\nhelpviewer_keywords: \n  - \"types [Visual Basic], compatible\"\n  - \"comparison operators [Visual Basic]\"\n  - \"TypeOf...Is expression\"\n  - \"data types [Visual Basic], compatible\"\n  - \"TypeOf operator [Visual Basic]\"\n  - \"compatible data types [Visual Basic]\"\nms.assetid: 33f65296-659a-4b9a-9a29-c2a91cff68b2\n---\n# TypeOf Operator (Visual Basic)\nCompares an object reference variable to a data type.  \n  \n## Syntax  \n  \n```  \nresult = TypeOf objectexpression Is typename  \n```  \n  \n```  \nresult = TypeOf objectexpression IsNot typename  \n```  \n  \n## Parts  \n `result`  \n Returned. A `Boolean` value.  \n  \n `objectexpression`  \n Required. Any expression that evaluates to a reference type.  \n  \n `typename`  \n Required. Any data type name.  \n  \n## Remarks  \n The `TypeOf` operator determines whether the run-time type of `objectexpression` is compatible with `typename`. The compatibility depends on the type category of `typename`. The following table shows how compatibility is determined.  \n  \n|Type category of `typename`|Compatibility criterion|  \n|---------------------------------|-----------------------------|  \n|Class|`objectexpression` is of type `typename` or inherits from `typename`|  \n|Structure|`objectexpression` is of type `typename`|  \n|Interface|`objectexpression` implements `typename` or inherits from a class that implements `typename`|  \n  \n If the run-time type of `objectexpression` satisfies the compatibility criterion, `result` is `True`. Otherwise, `result` is `False`.  If `objectexpression` is null, then `TypeOf`...`Is` returns `False`, and ...`IsNot` returns `True`.  \n  \n `TypeOf` is always used with the `Is` keyword to construct a `TypeOf`...`Is` expression, or with the `IsNot` keyword to construct a `TypeOf`...`IsNot` expression.  \n  \n## Example  \n The following example uses `TypeOf`...`Is` expressions to test the type compatibility of two object reference variables with various data types.  \n  \n [!code-vb[VbVbalrOperators#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#39)]  \n  \n The variable `refInteger` has a run-time type of `Integer`. It is compatible with `Integer` but not with `Double`. The variable `refForm` has a run-time type of <xref:System.Windows.Forms.Form>. It is compatible with <xref:System.Windows.Forms.Form> because that is its type, with <xref:System.Windows.Forms.Control> because <xref:System.Windows.Forms.Form> inherits from <xref:System.Windows.Forms.Control>, and with <xref:System.ComponentModel.IComponent> because <xref:System.Windows.Forms.Form> inherits from <xref:System.ComponentModel.Component>, which implements <xref:System.ComponentModel.IComponent>. However, `refForm` is not compatible with <xref:System.Windows.Forms.Label>.  \n  \n## See also\n\n- [Is Operator](../../../visual-basic/language-reference/operators/is-operator.md)\n- [IsNot Operator](../../../visual-basic/language-reference/operators/isnot-operator.md)\n- [Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)\n","nodes":[{"pos":[4,411],"embed":true,"restype":"x-metadata","content":"title: \"TypeOf Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"TypeOf\"\n  - \"vb.TypeOf\"\nhelpviewer_keywords: \n  - \"types [Visual Basic], compatible\"\n  - \"comparison operators [Visual Basic]\"\n  - \"TypeOf...Is expression\"\n  - \"data types [Visual Basic], compatible\"\n  - \"TypeOf operator [Visual Basic]\"\n  - \"compatible data types [Visual Basic]\"\nms.assetid: 33f65296-659a-4b9a-9a29-c2a91cff68b2","nodes":[{"content":"TypeOf Operator (Visual Basic)","nodes":[{"pos":[0,30],"content":"TypeOf Operator (Visual Basic)","nodes":[{"content":"TypeOf Operator (Visual Basic)","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[418,448],"content":"TypeOf Operator (Visual Basic)","linkify":"TypeOf Operator (Visual Basic)","nodes":[{"content":"TypeOf Operator (Visual Basic)","pos":[0,30]}]},{"content":"Compares an object reference variable to a data type.","pos":[449,502]},{"pos":[511,517],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[653,658],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Returned.","pos":[674,683]},{"content":"A <ph id=\"ph1\">`Boolean`</ph> value.","pos":[684,702],"source":" A `Boolean` value."},{"content":"Required.","pos":[731,740]},{"content":"Any expression that evaluates to a reference type.","pos":[741,791]},{"content":"Required.","pos":[812,821]},{"content":"Any data type name.","pos":[822,841]},{"pos":[850,857],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`TypeOf`</ph> operator determines whether the run-time type of <ph id=\"ph2\">`objectexpression`</ph> is compatible with <ph id=\"ph3\">`typename`</ph>.","pos":[861,972],"source":"The `TypeOf` operator determines whether the run-time type of `objectexpression` is compatible with `typename`."},{"content":"The compatibility depends on the type category of <ph id=\"ph1\">`typename`</ph>.","pos":[973,1034],"source":" The compatibility depends on the type category of `typename`."},{"content":"The following table shows how compatibility is determined.","pos":[1035,1093]},{"pos":[1100,1127],"content":"Type category of <ph id=\"ph1\">`typename`</ph>","source":"Type category of `typename`"},{"content":"Compatibility criterion","pos":[1128,1151]},{"content":"Class","pos":[1224,1229]},{"pos":[1230,1298],"content":"<ph id=\"ph1\">`objectexpression`</ph> is of type <ph id=\"ph2\">`typename`</ph> or inherits from <ph id=\"ph3\">`typename`</ph>","source":"`objectexpression` is of type `typename` or inherits from `typename`"},{"content":"Structure","pos":[1303,1312]},{"pos":[1313,1353],"content":"<ph id=\"ph1\">`objectexpression`</ph> is of type <ph id=\"ph2\">`typename`</ph>","source":"`objectexpression` is of type `typename`"},{"content":"Interface","pos":[1358,1367]},{"pos":[1368,1460],"content":"<ph id=\"ph1\">`objectexpression`</ph> implements <ph id=\"ph2\">`typename`</ph> or inherits from a class that implements <ph id=\"ph3\">`typename`</ph>","source":"`objectexpression` implements `typename` or inherits from a class that implements `typename`"},{"content":"If the run-time type of <ph id=\"ph1\">`objectexpression`</ph> satisfies the compatibility criterion, <ph id=\"ph2\">`result`</ph> is <ph id=\"ph3\">`True`</ph>.","pos":[1468,1569],"source":"If the run-time type of `objectexpression` satisfies the compatibility criterion, `result` is `True`."},{"content":"Otherwise, <ph id=\"ph1\">`result`</ph> is <ph id=\"ph2\">`False`</ph>.","pos":[1570,1601],"source":" Otherwise, `result` is `False`."},{"content":"If <ph id=\"ph1\">`objectexpression`</ph> is null, then <ph id=\"ph2\">`TypeOf`</ph>...<ph id=\"ph3\">`Is`</ph> returns <ph id=\"ph4\">`False`</ph>, and ...<ph id=\"ph5\">`IsNot`</ph> returns <ph id=\"ph6\">`True`</ph>.","pos":[1603,1702],"source":"  If `objectexpression` is null, then `TypeOf`...`Is` returns `False`, and ...`IsNot` returns `True`."},{"pos":[1709,1871],"content":"<ph id=\"ph1\">`TypeOf`</ph> is always used with the <ph id=\"ph2\">`Is`</ph> keyword to construct a <ph id=\"ph3\">`TypeOf`</ph>...<ph id=\"ph4\">`Is`</ph> expression, or with the <ph id=\"ph5\">`IsNot`</ph> keyword to construct a <ph id=\"ph6\">`TypeOf`</ph>...<ph id=\"ph7\">`IsNot`</ph> expression.","source":"`TypeOf` is always used with the `Is` keyword to construct a `TypeOf`...`Is` expression, or with the `IsNot` keyword to construct a `TypeOf`...`IsNot` expression."},{"pos":[1880,1887],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1891,2035],"content":"The following example uses <ph id=\"ph1\">`TypeOf`</ph>...<ph id=\"ph2\">`Is`</ph> expressions to test the type compatibility of two object reference variables with various data types.","source":"The following example uses `TypeOf`...`Is` expressions to test the type compatibility of two object reference variables with various data types."},{"content":"The variable <ph id=\"ph1\">`refInteger`</ph> has a run-time type of <ph id=\"ph2\">`Integer`</ph>.","pos":[2166,2225],"source":"The variable `refInteger` has a run-time type of `Integer`."},{"content":"It is compatible with <ph id=\"ph1\">`Integer`</ph> but not with <ph id=\"ph2\">`Double`</ph>.","pos":[2226,2280],"source":" It is compatible with `Integer` but not with `Double`."},{"content":"The variable <ph id=\"ph1\">`refForm`</ph> has a run-time type of <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form&gt;</ph>.","pos":[2281,2360],"source":" The variable `refForm` has a run-time type of <xref:System.Windows.Forms.Form>."},{"content":"It is compatible with <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form&gt;</ph> because that is its type, with <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control&gt;</ph> because <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Form&gt;</ph> inherits from <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Control&gt;</ph>, and with <ph id=\"ph5\">&lt;xref:System.ComponentModel.IComponent&gt;</ph> because <ph id=\"ph6\">&lt;xref:System.Windows.Forms.Form&gt;</ph> inherits from <ph id=\"ph7\">&lt;xref:System.ComponentModel.Component&gt;</ph>, which implements <ph id=\"ph8\">&lt;xref:System.ComponentModel.IComponent&gt;</ph>.","pos":[2361,2776],"source":" It is compatible with <xref:System.Windows.Forms.Form> because that is its type, with <xref:System.Windows.Forms.Control> because <xref:System.Windows.Forms.Form> inherits from <xref:System.Windows.Forms.Control>, and with <xref:System.ComponentModel.IComponent> because <xref:System.Windows.Forms.Form> inherits from <xref:System.ComponentModel.Component>, which implements <xref:System.ComponentModel.IComponent>."},{"content":"However, <ph id=\"ph1\">`refForm`</ph> is not compatible with <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Label&gt;</ph>.","pos":[2777,2853],"source":" However, `refForm` is not compatible with <xref:System.Windows.Forms.Label>."},{"pos":[2862,2870],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2874,2954],"content":"<bpt id=\"p1\">[</bpt>Is Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/is-operator.md)</ept>","source":"[Is Operator](../../../visual-basic/language-reference/operators/is-operator.md)"},{"pos":[2957,3043],"content":"<bpt id=\"p1\">[</bpt>IsNot Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/isnot-operator.md)</ept>","source":"[IsNot Operator](../../../visual-basic/language-reference/operators/isnot-operator.md)"},{"pos":[3046,3193],"content":"<bpt id=\"p1\">[</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept>","source":"[Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)"},{"pos":[3196,3308],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[3311,3435],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[3438,3559],"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept>","source":"[Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)"}]}