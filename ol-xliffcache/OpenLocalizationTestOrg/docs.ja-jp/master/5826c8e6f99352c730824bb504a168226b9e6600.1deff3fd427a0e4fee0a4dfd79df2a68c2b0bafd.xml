{"content":"---\ntitle: \"checked (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"checked_CSharpKeyword\"\n  - \"checked\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"checked keyword [C#]\"\nms.assetid: 718a1194-988d-48a3-b089-d6ee8bd1608d\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# checked (C# Reference)\nThe `checked` keyword is used to explicitly enable overflow checking for integral-type arithmetic operations and conversions.  \n  \n By default, an expression that contains only constant values causes a compiler error if the expression produces a value that is outside the range of the destination type. If the expression contains one or more non-constant values, the compiler does not detect the overflow. Evaluating the expression assigned to `i2` in the following example does not cause a compiler error.  \n  \n [!code-cs[csrefKeywordsChecked#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/checked_1.cs)]  \n  \n By default, these non-constant expressions are not checked for overflow at run time either, and they do not raise overflow exceptions. The previous example displays -2,147,483,639 as the sum of two positive integers.  \n  \n Overflow checking can be enabled by compiler options, environment configuration, or use of the `checked` keyword. The following examples demonstrate how to use a `checked` expression or a `checked` block to detect the overflow that is produced by the previous sum at run time. Both examples raise an overflow exception.  \n  \n [!code-cs[csrefKeywordsChecked#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/checked_2.cs)]  \n  \n The [unchecked](../../../csharp/language-reference/keywords/unchecked.md) keyword can be used to prevent overflow checking.  \n  \n## Example  \n This sample shows how to use `checked` to enable overflow checking at run time.  \n  \n [!code-cs[csrefKeywordsChecked#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/checked_3.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Checked and Unchecked](../../../csharp/language-reference/keywords/checked-and-unchecked.md)   \n [unchecked](../../../csharp/language-reference/keywords/unchecked.md)","nodes":[{"pos":[4,572],"nodes":[{"content":"checked (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,39],"content":"checked (C# Reference) | Microsoft Docs","nodes":[{"content":"checked (C# Reference) | Microsoft Docs","pos":[0,39]}]}],"pos":[6,48],"yaml":true}],"content":"title: \"checked (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"checked_CSharpKeyword\"\n  - \"checked\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"checked keyword [C#]\"\nms.assetid: 718a1194-988d-48a3-b089-d6ee8bd1608d\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[579,601],"content":"checked (C# Reference)","linkify":"checked (C# Reference)","nodes":[{"content":"checked (C# Reference)","pos":[0,22]}]},{"pos":[602,727],"content":"The <ph id=\"ph1\">`checked`</ph> keyword is used to explicitly enable overflow checking for integral-type arithmetic operations and conversions.","source":"The `checked` keyword is used to explicitly enable overflow checking for integral-type arithmetic operations and conversions."},{"content":"By default, an expression that contains only constant values causes a compiler error if the expression produces a value that is outside the range of the destination type.","pos":[734,904]},{"content":"If the expression contains one or more non-constant values, the compiler does not detect the overflow.","pos":[905,1007]},{"content":"Evaluating the expression assigned to <ph id=\"ph1\">`i2`</ph> in the following example does not cause a compiler error.","pos":[1008,1108],"source":" Evaluating the expression assigned to `i2` in the following example does not cause a compiler error."},{"pos":[1115,1226],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsChecked#3<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/checked_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsChecked#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/checked_1.cs)]"},{"content":"By default, these non-constant expressions are not checked for overflow at run time either, and they do not raise overflow exceptions.","pos":[1233,1367]},{"content":"The previous example displays -2,147,483,639 as the sum of two positive integers.","pos":[1368,1449]},{"content":"Overflow checking can be enabled by compiler options, environment configuration, or use of the <ph id=\"ph1\">`checked`</ph> keyword.","pos":[1456,1569],"source":"Overflow checking can be enabled by compiler options, environment configuration, or use of the `checked` keyword."},{"content":"The following examples demonstrate how to use a <ph id=\"ph1\">`checked`</ph> expression or a <ph id=\"ph2\">`checked`</ph> block to detect the overflow that is produced by the previous sum at run time.","pos":[1570,1732],"source":" The following examples demonstrate how to use a `checked` expression or a `checked` block to detect the overflow that is produced by the previous sum at run time."},{"content":"Both examples raise an overflow exception.","pos":[1733,1775]},{"pos":[1782,1893],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsChecked#4<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/checked_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsChecked#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/checked_2.cs)]"},{"pos":[1900,2023],"content":"The <bpt id=\"p1\">[</bpt>unchecked<ept id=\"p1\">](../../../csharp/language-reference/keywords/unchecked.md)</ept> keyword can be used to prevent overflow checking.","source":"The [unchecked](../../../csharp/language-reference/keywords/unchecked.md) keyword can be used to prevent overflow checking."},{"pos":[2032,2039],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2043,2122],"content":"This sample shows how to use <ph id=\"ph1\">`checked`</ph> to enable overflow checking at run time.","source":"This sample shows how to use `checked` to enable overflow checking at run time."},{"pos":[2129,2240],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsChecked#1<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/checked_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsChecked#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/checked_3.cs)]"},{"pos":[2249,2274],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2388,2396],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2400,2460],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2464,2531],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2535,2603],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Checked and Unchecked<ept id=\"p1\">](../../../csharp/language-reference/keywords/checked-and-unchecked.md)</ept><ph id=\"ph1\"> </ph>","pos":[2607,2701],"source":"[Checked and Unchecked](../../../csharp/language-reference/keywords/checked-and-unchecked.md) "},{"content":"<bpt id=\"p1\">[</bpt>unchecked<ept id=\"p1\">](../../../csharp/language-reference/keywords/unchecked.md)</ept>","pos":[2705,2774],"source":"[unchecked](../../../csharp/language-reference/keywords/unchecked.md)"}]}