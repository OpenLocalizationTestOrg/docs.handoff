{"content":"---\ntitle: \"Differences Between Shadowing and Overriding (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"shadowing, vs. overriding\"\n  - \"overriding, vs. shadowing\"\nms.assetid: 2d014a0b-7630-407d-8f4e-24bd87987923\ncaps.latest.revision: 24\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Differences Between Shadowing and Overriding (Visual Basic)\nWhen you define a class that inherits from a base class, you sometimes want to redefine one or more of the base class elements in the derived class. Shadowing and overriding are both available for this purpose.  \n  \n## Comparison  \n Shadowing and overriding are both used when a derived class inherits from a base class, and both redefine one declared element with another. But there are significant differences between the two.  \n  \n The following table compares shadowing with overriding.  \n  \n||||  \n|---|---|---|  \n|Point of comparison|Shadowing|Overriding|  \n|Purpose|Protects against a subsequent base-class modification that introduces a member you have already defined in your derived class|Achieves polymorphism by defining a different implementation of a procedure or property with the same calling sequence<sup>1</sup>|  \n|Redefined element|Any declared element type|Only a procedure (`Function`, `Sub`, or `Operator`) or property|  \n|Redefining element|Any declared element type|Only a procedure or property with the identical calling sequence<sup>1</sup>|  \n|Access level of redefining element|Any access level|Cannot change access level of overridden element|  \n|Readability and writability of redefining element|Any combination|Cannot change readability or writability of overridden property|  \n|Control over redefining|Base class element cannot enforce or prohibit shadowing|Base class element can specify `MustOverride`, `NotOverridable`, or `Overridable`|  \n|Keyword usage|`Shadows` recommended in derived class; `Shadows` assumed if neither `Shadows` nor `Overrides` specified<sup>2</sup>|`Overridable` or `MustOverride` required in base class; `Overrides` required in derived class|  \n|Inheritance of redefining element by classes deriving from your derived class|Shadowing element inherited by further derived classes; shadowed element still hidden<sup>3</sup>|Overriding element inherited by further derived classes; overridden element still overridden|  \n  \n <sup>1</sup> The *calling sequence* consists of the element type (`Function`, `Sub`, `Operator`, or `Property`), name, parameter list, and return type. You cannot override a procedure with a property, or the other way around. You cannot override one kind of procedure (`Function`, `Sub`, or `Operator`) with another kind.  \n  \n <sup>2</sup> If you do not specify either `Shadows` or `Overrides`, the compiler issues a warning message to help you be sure which kind of redefinition you want to use. If you ignore the warning, the shadowing mechanism is used.  \n  \n <sup>3</sup> If the shadowing element is inaccessible in a further derived class, shadowing is not inherited. For example, if you declare the shadowing element as `Private`, a class deriving from your derived class inherits the original element instead of the shadowing element.  \n  \n## Guidelines  \n You normally use overriding in the following cases:  \n  \n-   You are defining polymorphic derived classes.  \n  \n-   You want the safety of having the compiler enforce the identical element type and calling sequence.  \n  \n You normally use shadowing in the following cases:  \n  \n-   You anticipate that your base class might be modified and define an element using the same name as yours.  \n  \n-   You want the freedom of changing the element type or calling sequence.  \n  \n## See Also  \n [References to Declared Elements](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)   \n [Shadowing in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md)   \n [How to: Hide a Variable with the Same Name as Your Variable](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)   \n [How to: Hide an Inherited Variable](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)   \n [How to: Access a Variable Hidden by a Derived Class](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)   \n [Shadows](../../../../visual-basic/language-reference/modifiers/shadows.md)   \n [Overrides](../../../../visual-basic/language-reference/modifiers/overrides.md)","nodes":[{"pos":[4,640],"nodes":[{"content":"Differences Between Shadowing and Overriding (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,76],"content":"Differences Between Shadowing and Overriding (Visual Basic) | Microsoft Docs","nodes":[{"content":"Differences Between Shadowing and Overriding (Visual Basic) | Microsoft Docs","pos":[0,76]}]}],"pos":[6,85],"yaml":true}],"content":"title: \"Differences Between Shadowing and Overriding (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"shadowing, vs. overriding\"\n  - \"overriding, vs. shadowing\"\nms.assetid: 2d014a0b-7630-407d-8f4e-24bd87987923\ncaps.latest.revision: 24\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[647,706],"content":"Differences Between Shadowing and Overriding (Visual Basic)","linkify":"Differences Between Shadowing and Overriding (Visual Basic)","nodes":[{"content":"Differences Between Shadowing and Overriding (Visual Basic)","pos":[0,59]}]},{"content":"When you define a class that inherits from a base class, you sometimes want to redefine one or more of the base class elements in the derived class.","pos":[707,855]},{"content":"Shadowing and overriding are both available for this purpose.","pos":[856,917]},{"pos":[926,936],"content":"Comparison","linkify":"Comparison","nodes":[{"content":"Comparison","pos":[0,10]}]},{"content":"Shadowing and overriding are both used when a derived class inherits from a base class, and both redefine one declared element with another.","pos":[940,1080]},{"content":"But there are significant differences between the two.","pos":[1081,1135]},{"content":"The following table compares shadowing with overriding.","pos":[1142,1197]},{"content":"Point of comparison","pos":[1227,1246]},{"content":"Shadowing","pos":[1247,1256]},{"content":"Overriding","pos":[1257,1267]},{"content":"Purpose","pos":[1272,1279]},{"content":"Protects against a subsequent base-class modification that introduces a member you have already defined in your derived class","pos":[1280,1405]},{"pos":[1406,1536],"content":"Achieves polymorphism by defining a different implementation of a procedure or property with the same calling sequence<bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept>","source":"Achieves polymorphism by defining a different implementation of a procedure or property with the same calling sequence<sup>1</sup>"},{"content":"Redefined element","pos":[1541,1558]},{"content":"Any declared element type","pos":[1559,1584]},{"pos":[1585,1648],"content":"Only a procedure (<ph id=\"ph1\">`Function`</ph>, <ph id=\"ph2\">`Sub`</ph>, or <ph id=\"ph3\">`Operator`</ph>) or property","source":"Only a procedure (`Function`, `Sub`, or `Operator`) or property"},{"content":"Redefining element","pos":[1653,1671]},{"content":"Any declared element type","pos":[1672,1697]},{"pos":[1698,1774],"content":"Only a procedure or property with the identical calling sequence<bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept>","source":"Only a procedure or property with the identical calling sequence<sup>1</sup>"},{"content":"Access level of redefining element","pos":[1779,1813]},{"content":"Any access level","pos":[1814,1830]},{"content":"Cannot change access level of overridden element","pos":[1831,1879]},{"content":"Readability and writability of redefining element","pos":[1884,1933]},{"content":"Any combination","pos":[1934,1949]},{"content":"Cannot change readability or writability of overridden property","pos":[1950,2013]},{"content":"Control over redefining","pos":[2018,2041]},{"content":"Base class element cannot enforce or prohibit shadowing","pos":[2042,2097]},{"pos":[2098,2179],"content":"Base class element can specify <ph id=\"ph1\">`MustOverride`</ph>, <ph id=\"ph2\">`NotOverridable`</ph>, or <ph id=\"ph3\">`Overridable`</ph>","source":"Base class element can specify `MustOverride`, `NotOverridable`, or `Overridable`"},{"content":"Keyword usage","pos":[2184,2197]},{"pos":[2198,2314],"content":"<ph id=\"ph1\">`Shadows`</ph> recommended in derived class; <ph id=\"ph2\">`Shadows`</ph> assumed if neither <ph id=\"ph3\">`Shadows`</ph> nor <ph id=\"ph4\">`Overrides`</ph> specified<bpt id=\"p1\">&lt;sup&gt;</bpt>2<ept id=\"p1\">&lt;/sup&gt;</ept>","source":"`Shadows` recommended in derived class; `Shadows` assumed if neither `Shadows` nor `Overrides` specified<sup>2</sup>"},{"pos":[2315,2408],"content":"<ph id=\"ph1\">`Overridable`</ph> or <ph id=\"ph2\">`MustOverride`</ph> required in base class; <ph id=\"ph3\">`Overrides`</ph> required in derived class","source":"`Overridable` or `MustOverride` required in base class; `Overrides` required in derived class"},{"content":"Inheritance of redefining element by classes deriving from your derived class","pos":[2413,2490]},{"pos":[2491,2588],"content":"Shadowing element inherited by further derived classes; shadowed element still hidden<bpt id=\"p1\">&lt;sup&gt;</bpt>3<ept id=\"p1\">&lt;/sup&gt;</ept>","source":"Shadowing element inherited by further derived classes; shadowed element still hidden<sup>3</sup>"},{"content":"Overriding element inherited by further derived classes; overridden element still overridden","pos":[2589,2681]},{"content":"<bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept> The <bpt id=\"p2\">*</bpt>calling sequence<ept id=\"p2\">*</ept> consists of the element type (<ph id=\"ph1\">`Function`</ph>, <ph id=\"ph2\">`Sub`</ph>, <ph id=\"ph3\">`Operator`</ph>, or <ph id=\"ph4\">`Property`</ph>), name, parameter list, and return type.","pos":[2689,2840],"source":"<sup>1</sup> The *calling sequence* consists of the element type (`Function`, `Sub`, `Operator`, or `Property`), name, parameter list, and return type."},{"content":"You cannot override a procedure with a property, or the other way around.","pos":[2841,2914]},{"content":"You cannot override one kind of procedure (<ph id=\"ph1\">`Function`</ph>, <ph id=\"ph2\">`Sub`</ph>, or <ph id=\"ph3\">`Operator`</ph>) with another kind.","pos":[2915,3010],"source":" You cannot override one kind of procedure (`Function`, `Sub`, or `Operator`) with another kind."},{"content":"<bpt id=\"p1\">&lt;sup&gt;</bpt>2<ept id=\"p1\">&lt;/sup&gt;</ept> If you do not specify either <ph id=\"ph1\">`Shadows`</ph> or <ph id=\"ph2\">`Overrides`</ph>, the compiler issues a warning message to help you be sure which kind of redefinition you want to use.","pos":[3017,3186],"source":"<sup>2</sup> If you do not specify either `Shadows` or `Overrides`, the compiler issues a warning message to help you be sure which kind of redefinition you want to use."},{"content":"If you ignore the warning, the shadowing mechanism is used.","pos":[3187,3246]},{"content":"<bpt id=\"p1\">&lt;sup&gt;</bpt>3<ept id=\"p1\">&lt;/sup&gt;</ept> If the shadowing element is inaccessible in a further derived class, shadowing is not inherited.","pos":[3253,3362],"source":"<sup>3</sup> If the shadowing element is inaccessible in a further derived class, shadowing is not inherited."},{"content":"For example, if you declare the shadowing element as <ph id=\"ph1\">`Private`</ph>, a class deriving from your derived class inherits the original element instead of the shadowing element.","pos":[3363,3531],"source":" For example, if you declare the shadowing element as `Private`, a class deriving from your derived class inherits the original element instead of the shadowing element."},{"pos":[3540,3550],"content":"Guidelines","linkify":"Guidelines","nodes":[{"content":"Guidelines","pos":[0,10]}]},{"content":"You normally use overriding in the following cases:","pos":[3554,3605]},{"content":"You are defining polymorphic derived classes.","pos":[3615,3660]},{"content":"You want the safety of having the compiler enforce the identical element type and calling sequence.","pos":[3670,3769]},{"content":"You normally use shadowing in the following cases:","pos":[3776,3826]},{"content":"You anticipate that your base class might be modified and define an element using the same name as yours.","pos":[3836,3941]},{"content":"You want the freedom of changing the element type or calling sequence.","pos":[3951,4021]},{"pos":[4030,4038],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>References to Declared Elements<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept><ph id=\"ph1\"> </ph>","pos":[4042,4191],"source":"[References to Declared Elements](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md) "},{"content":"<bpt id=\"p1\">[</bpt>Shadowing in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md)</ept><ph id=\"ph1\"> </ph>","pos":[4195,4316],"source":"[Shadowing in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Hide a Variable with the Same Name as Your Variable<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept><ph id=\"ph1\"> </ph>","pos":[4320,4524],"source":"[How to: Hide a Variable with the Same Name as Your Variable](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Hide an Inherited Variable<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)</ept><ph id=\"ph1\"> </ph>","pos":[4528,4682],"source":"[How to: Hide an Inherited Variable](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Access a Variable Hidden by a Derived Class<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[4686,4874],"source":"[How to: Access a Variable Hidden by a Derived Class](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md) "},{"content":"<bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id=\"ph1\"> </ph>","pos":[4878,4954],"source":"[Shadows](../../../../visual-basic/language-reference/modifiers/shadows.md) "},{"content":"<bpt id=\"p1\">[</bpt>Overrides<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/overrides.md)</ept>","pos":[4958,5037],"source":"[Overrides](../../../../visual-basic/language-reference/modifiers/overrides.md)"}]}