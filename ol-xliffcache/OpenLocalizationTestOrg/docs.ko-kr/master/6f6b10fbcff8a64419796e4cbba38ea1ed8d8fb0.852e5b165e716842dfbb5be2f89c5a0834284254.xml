{"content":"---\ntitle: \"Manipulating Data | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 51096a2e-8b38-4c4d-a523-799bfdb7ec69\ncaps.latest.revision: 6\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Manipulating Data\nBefore the introduction of Multiple Active Result Sets (MARS), developers had to use either multiple connections or server-side cursors to solve certain scenarios. In addition, when multiple connections were used in a transactional situation, bound connections (with **sp_getbindtoken** and **sp_bindsession**) were required. The following scenarios show how to use a MARS-enabled connection instead of multiple connections.  \n  \n## Using Multiple Commands with MARS  \n The following Console application demonstrates how to use two <xref:System.Data.SqlClient.SqlDataReader> objects with two <xref:System.Data.SqlClient.SqlCommand> objects and a single <xref:System.Data.SqlClient.SqlConnection> object with MARS enabled.  \n  \n### Example  \n The example opens a single connection to the **AdventureWorks** database. Using a <xref:System.Data.SqlClient.SqlCommand> object, a <xref:System.Data.SqlClient.SqlDataReader> is created. As the reader is used, a second <xref:System.Data.SqlClient.SqlDataReader> is opened, using data from the first <xref:System.Data.SqlClient.SqlDataReader> as input to the WHERE clause for the second reader.  \n  \n> [!NOTE]\n>  The following example uses the sample **AdventureWorks** database included with [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]. The connection string provided in the sample code assumes that the database is installed and available on the local computer. Modify the connection string as necessary for your environment.  \n  \n```vb  \nOption Strict On  \nOption Explicit On  \n  \nImports System  \nImports System.Data  \nImports System.Data.SqlClient  \nModule Module1  \n  Sub Main()  \n    ' By default, MARS is disabled when connecting  \n    ' to a MARS-enabled host.  \n    ' It must be enabled in the connection string.  \n    Dim connectionString As String = GetConnectionString()  \n  \n    Dim vendorID As Integer  \n  \n    Dim vendorCmd As SqlCommand  \n    Dim productCmd As SqlCommand  \n    Dim productReader As SqlDataReader  \n  \n    Dim vendorSQL As String = & _   \n      \"SELECT VendorId, Name FROM Purchasing.Vendor\"  \n    Dim productSQL As String = _  \n        \"SELECT Production.Product.Name FROM Production.Product \" & _  \n        \"INNER JOIN Purchasing.ProductVendor \" & _  \n        \"ON Production.Product.ProductID = \" & _  \n        \"Purchasing.ProductVendor.ProductID \" & _  \n        \"WHERE Purchasing.ProductVendor.VendorID = @VendorId\"  \n  \n    Using awConnection As New SqlConnection(connectionString)  \n      vendorCmd = New SqlCommand(vendorSQL, awConnection)  \n      productCmd = New SqlCommand(productSQL, awConnection)  \n      productCmd.Parameters.Add(\"@VendorId\", SqlDbType.Int)  \n  \n      awConnection.Open()  \n      Using vendorReader As SqlDataReader = vendorCmd.ExecuteReader()  \n        While vendorReader.Read()  \n          Console.WriteLine(vendorReader(\"Name\"))  \n  \n          vendorID = CInt(vendorReader(\"VendorId\"))  \n  \n          productCmd.Parameters(\"@VendorId\").Value = vendorID  \n  \n          ' The following line of code requires  \n          ' a MARS-enabled connection.  \n          productReader = productCmd.ExecuteReader()  \n          Using productReader  \n            While productReader.Read()  \n              Console.WriteLine(\"  \" & CStr(productReader(\"Name\")))  \n            End While  \n          End Using  \n        End While  \n      End Using  \n    End Using  \n  \n    Console.WriteLine(\"Press any key to continue\")  \n    Console.ReadLine()  \n  End Sub  \n  \n  Function GetConnectionString() As String  \n    ' To avoid storing the connection string in your code,  \n    ' you can retrive it from a configuration file.  \n    Return \"Data Source=(local);Integrated Security=SSPI;\" & _  \n      \"Initial Catalog=AdventureWorks; MultipleActiveResultSets=True\"  \n  End Function  \nEnd Module  \n```  \n  \n```csharp  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n  \nclass Class1  \n{  \nstatic void Main()  \n{  \n  // By default, MARS is disabled when connecting  \n  // to a MARS-enabled host.  \n  // It must be enabled in the connection string.  \n  string connectionString = GetConnectionString();  \n  \n  int vendorID;  \n  SqlDataReader productReader = null;  \n  string vendorSQL =   \n    \"SELECT VendorId, Name FROM Purchasing.Vendor\";  \n  string productSQL =   \n    \"SELECT Production.Product.Name FROM Production.Product \" +  \n    \"INNER JOIN Purchasing.ProductVendor \" +  \n    \"ON Production.Product.ProductID = \" +   \n    \"Purchasing.ProductVendor.ProductID \" +  \n    \"WHERE Purchasing.ProductVendor.VendorID = @VendorId\";  \n  \n  using (SqlConnection awConnection =   \n    new SqlConnection(connectionString))  \n  {  \n    SqlCommand vendorCmd = new SqlCommand(vendorSQL, awConnection);  \n    SqlCommand productCmd =   \n      new SqlCommand(productSQL, awConnection);  \n  \n    productCmd.Parameters.Add(\"@VendorId\", SqlDbType.Int);  \n  \n    awConnection.Open();  \n    using (SqlDataReader vendorReader = vendorCmd.ExecuteReader())  \n    {  \n      while (vendorReader.Read())  \n      {  \n        Console.WriteLine(vendorReader[\"Name\"]);  \n  \n        vendorID = (int)vendorReader[\"VendorId\"];  \n  \n        productCmd.Parameters[\"@VendorId\"].Value = vendorID;  \n        // The following line of code requires  \n        // a MARS-enabled connection.  \n        productReader = productCmd.ExecuteReader();  \n        using (productReader)  \n        {  \n          while (productReader.Read())  \n          {  \n            Console.WriteLine(\"  \" +  \n              productReader[\"Name\"].ToString());  \n          }  \n        }  \n      }  \n  }  \n      Console.WriteLine(\"Press any key to continue\");  \n      Console.ReadLine();  \n    }  \n  }  \n  private static string GetConnectionString()  \n  {  \n    // To avoid storing the connection string in your code,  \n    // you can retrive it from a configuration file.  \n    return \"Data Source=(local);Integrated Security=SSPI;\" +   \n      \"Initial Catalog=AdventureWorks;MultipleActiveResultSets=True\";  \n  }  \n}  \n```  \n  \n## Reading and Updating Data with MARS  \n MARS allows a connection to be used for both read operations and data manipulation language (DML) operations with more than one pending operation. This feature eliminates the need for an application to deal with connection-busy errors. In addition, MARS can replace the user of server-side cursors, which generally consume more resources. Finally, because multiple operations can operate on a single connection, they can share the same transaction context, eliminating the need to use **sp_getbindtoken** and **sp_bindsession** system stored procedures.  \n  \n### Example  \n The following Console application demonstrates how to use two <xref:System.Data.SqlClient.SqlDataReader> objects with three <xref:System.Data.SqlClient.SqlCommand> objects and a single <xref:System.Data.SqlClient.SqlConnection> object with MARS enabled. The first command object retrieves a list of vendors whose credit rating is 5. The second command object uses the vendor ID provided from a <xref:System.Data.SqlClient.SqlDataReader> to load the second <xref:System.Data.SqlClient.SqlDataReader> with all of the products for the particular vendor. Each product record is visited by the second <xref:System.Data.SqlClient.SqlDataReader>. A calculation is performed to determine what the new **OnOrderQty** should be. The third command object is then used to update the **ProductVendor** table with the new value. This entire process takes place within a single transaction, which is rolled back at the end.  \n  \n> [!NOTE]\n>  The following example uses the sample **AdventureWorks** database included with [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]. The connection string provided in the sample code assumes that the database is installed and available on the local computer. Modify the connection string as necessary for your environment.  \n  \n```vb  \nOption Strict On  \nOption Explicit On  \n  \nImports System  \nImports System.Data  \nImports System.Data.SqlClient  \n  \nModule Module1  \n  \n  Sub Main()  \n    ' By default, MARS is disabled when connecting  \n    ' to a MARS-enabled host.  \n    ' It must be enabled in the connection string.  \n    Dim connectionString As String = GetConnectionString()  \n  \n    Dim updateTx As SqlTransaction  \n    Dim vendorCmd As SqlCommand  \n    Dim prodVendCmd As SqlCommand  \n    Dim updateCmd As SqlCommand  \n  \n    Dim prodVendReader As SqlDataReader  \n  \n    Dim vendorID As Integer  \n    Dim productID As Integer  \n    Dim minOrderQty As Integer  \n    Dim maxOrderQty As Integer  \n    Dim onOrderQty As Integer  \n    Dim recordsUpdated As Integer  \n    Dim totalRecordsUpdated As Integer  \n  \n    Dim vendorSQL As String = _  \n        \"SELECT VendorID, Name FROM Purchasing.Vendor \" & _  \n        \"WHERE CreditRating = 5\"  \n    Dim prodVendSQL As String = _  \n        \"SELECT ProductID, MaxOrderQty, MinOrderQty, OnOrderQty \" & _  \n        \"FROM Purchasing.ProductVendor \" & _  \n        \"WHERE VendorID = @VendorID\"  \n    Dim updateSQL As String = _  \n        \"UPDATE Purchasing.ProductVendor \" & _   \n        \"SET OnOrderQty = @OrderQty \" & _  \n        \"WHERE ProductID = @ProductID AND VendorID = @VendorID\"  \n  \n    Using awConnection As New SqlConnection(connectionString)  \n      awConnection.Open()  \n      updateTx = awConnection.BeginTransaction()  \n  \n      vendorCmd = New SqlCommand(vendorSQL, awConnection)  \n      vendorCmd.Transaction = updateTx  \n  \n      prodVendCmd = New SqlCommand(prodVendSQL, awConnection)  \n      prodVendCmd.Transaction = updateTx  \n      prodVendCmd.Parameters.Add(\"@VendorId\", SqlDbType.Int)  \n  \n      updateCmd = New SqlCommand(updateSQL, awConnection)  \n      updateCmd.Transaction = updateTx  \n      updateCmd.Parameters.Add(\"@OrderQty\", SqlDbType.Int)  \n      updateCmd.Parameters.Add(\"@ProductID\", SqlDbType.Int)  \n      updateCmd.Parameters.Add(\"@VendorID\", SqlDbType.Int)  \n  \n      Using vendorReader As SqlDataReader = vendorCmd.ExecuteReader()  \n        While vendorReader.Read()  \n          Console.WriteLine(vendorReader(\"Name\"))  \n  \n          vendorID = CInt(vendorReader(\"VendorID\"))  \n          prodVendCmd.Parameters(\"@VendorID\").Value = vendorID  \n          prodVendReader = prodVendCmd.ExecuteReader()  \n  \n          Using prodVendReader  \n            While (prodVendReader.Read)  \n              productID = CInt(prodVendReader(\"ProductID\"))  \n  \n              If IsDBNull(prodVendReader(\"OnOrderQty\")) Then  \n                minOrderQty = CInt(prodVendReader(\"MinOrderQty\"))  \n                onOrderQty = minOrderQty  \n              Else  \n                maxOrderQty = CInt(prodVendReader(\"MaxOrderQty\"))  \n                onOrderQty = CInt(maxOrderQty / 2)  \n              End If  \n  \n              updateCmd.Parameters(\"@OrderQty\").Value = onOrderQty  \n              updateCmd.Parameters(\"@ProductID\").Value = productID  \n              updateCmd.Parameters(\"@VendorID\").Value = vendorID  \n  \n              recordsUpdated = updateCmd.ExecuteNonQuery()  \n              totalRecordsUpdated += recordsUpdated  \n            End While  \n          End Using  \n        End While  \n      End Using  \n  \n      Console.WriteLine(\"Total Records Updated: \" & _   \n        CStr(totalRecordsUpdated))  \n      updateTx.Rollback()  \n      Console.WriteLine(\"Transaction Rolled Back\")  \n    End Using  \n  \n    Console.WriteLine(\"Press any key to continue\")  \n    Console.ReadLine()  \n  \n  End Sub  \n  \n  Function GetConnectionString() As String  \n    ' To avoid storing the connection string in your code,  \n    ' you can retrive it from a configuration file.  \n    Return \"Data Source=(local);Integrated Security=SSPI;\" & _  \n      \"Initial Catalog=AdventureWorks;MultipleActiveResultSets=True\"  \n  End Function  \nEnd Module  \n```  \n  \n```csharp  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Text;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n  \nclass Program  \n{  \nstatic void Main()  \n{  \n  // By default, MARS is disabled when connecting  \n  // to a MARS-enabled host.  \n  // It must be enabled in the connection string.  \n  string connectionString = GetConnectionString();  \n  \n  SqlTransaction updateTx = null;  \n  SqlCommand vendorCmd = null;  \n  SqlCommand prodVendCmd = null;  \n  SqlCommand updateCmd = null;  \n  \n  SqlDataReader prodVendReader = null;  \n  \n  int vendorID = 0;  \n  int productID = 0;  \n  int minOrderQty = 0;  \n  int maxOrderQty = 0;  \n  int onOrderQty = 0;  \n  int recordsUpdated = 0;  \n  int totalRecordsUpdated = 0;  \n  \n  string vendorSQL =  \n      \"SELECT VendorID, Name FROM Purchasing.Vendor \" +   \n      \"WHERE CreditRating = 5\";  \n  string prodVendSQL =  \n      \"SELECT ProductID, MaxOrderQty, MinOrderQty, OnOrderQty \" +  \n      \"FROM Purchasing.ProductVendor \" +   \n      \"WHERE VendorID = @VendorID\";  \n  string updateSQL =  \n      \"UPDATE Purchasing.ProductVendor \" +   \n      \"SET OnOrderQty = @OrderQty \" +  \n      \"WHERE ProductID = @ProductID AND VendorID = @VendorID\";  \n  \n  using (SqlConnection awConnection =   \n    new SqlConnection(connectionString))  \n  {  \n    awConnection.Open();  \n    updateTx = awConnection.BeginTransaction();  \n  \n    vendorCmd = new SqlCommand(vendorSQL, awConnection);  \n    vendorCmd.Transaction = updateTx;  \n  \n    prodVendCmd = new SqlCommand(prodVendSQL, awConnection);  \n    prodVendCmd.Transaction = updateTx;  \n    prodVendCmd.Parameters.Add(\"@VendorId\", SqlDbType.Int);  \n  \n    updateCmd = new SqlCommand(updateSQL, awConnection);  \n    updateCmd.Transaction = updateTx;  \n    updateCmd.Parameters.Add(\"@OrderQty\", SqlDbType.Int);  \n    updateCmd.Parameters.Add(\"@ProductID\", SqlDbType.Int);  \n    updateCmd.Parameters.Add(\"@VendorID\", SqlDbType.Int);  \n  \n    using (SqlDataReader vendorReader = vendorCmd.ExecuteReader())  \n    {  \n      while (vendorReader.Read())  \n      {  \n        Console.WriteLine(vendorReader[\"Name\"]);  \n  \n        vendorID = (int) vendorReader[\"VendorID\"];  \n        prodVendCmd.Parameters[\"@VendorID\"].Value = vendorID;  \n        prodVendReader = prodVendCmd.ExecuteReader();  \n  \n        using (prodVendReader)  \n        {  \n          while (prodVendReader.Read())  \n          {  \n            productID = (int) prodVendReader[\"ProductID\"];  \n  \n            if (prodVendReader[\"OnOrderQty\"] == DBNull.Value)  \n            {  \n              minOrderQty = (int) prodVendReader[\"MinOrderQty\"];  \n              onOrderQty = minOrderQty;  \n            }  \n            else  \n            {  \n              maxOrderQty = (int) prodVendReader[\"MaxOrderQty\"];  \n              onOrderQty = (int)(maxOrderQty / 2);  \n            }  \n  \n            updateCmd.Parameters[\"@OrderQty\"].Value = onOrderQty;  \n            updateCmd.Parameters[\"@ProductID\"].Value = productID;  \n            updateCmd.Parameters[\"@VendorID\"].Value = vendorID;  \n  \n            recordsUpdated = updateCmd.ExecuteNonQuery();  \n            totalRecordsUpdated += recordsUpdated;  \n          }  \n        }  \n      }  \n    }  \n    Console.WriteLine(\"Total Records Updated: \" +   \n      totalRecordsUpdated.ToString());  \n    updateTx.Rollback();  \n    Console.WriteLine(\"Transaction Rolled Back\");  \n  }  \n  \n  Console.WriteLine(\"Press any key to continue\");  \n  Console.ReadLine();  \n}  \nprivate static string GetConnectionString()  \n{  \n  // To avoid storing the connection string in your code,  \n  // you can retrive it from a configuration file.  \n  return \"Data Source=(local);Integrated Security=SSPI;\" +   \n    \"Initial Catalog=AdventureWorks;\" +   \n    \"MultipleActiveResultSets=True\";  \n  }  \n}  \n```  \n  \n## See Also  \n [Multiple Active Result Sets (MARS)](../../../../../docs/framework/data/adonet/sql/multiple-active-result-sets-mars.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[4,348],"nodes":[{"content":"Manipulating Data | Microsoft Docs","nodes":[{"pos":[0,34],"content":"Manipulating Data | Microsoft Docs","nodes":[{"content":"Manipulating Data | Microsoft Docs","pos":[0,34]}]}],"pos":[6,43],"yaml":true}],"content":"title: \"Manipulating Data | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 51096a2e-8b38-4c4d-a523-799bfdb7ec69\ncaps.latest.revision: 6\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","yamlblock":true},{"pos":[355,372],"content":"Manipulating Data","linkify":"Manipulating Data","nodes":[{"content":"Manipulating Data","pos":[0,17]}]},{"content":"Before the introduction of Multiple Active Result Sets (MARS), developers had to use either multiple connections or server-side cursors to solve certain scenarios.","pos":[373,536]},{"content":"In addition, when multiple connections were used in a transactional situation, bound connections (with <bpt id=\"p1\">**</bpt>sp_getbindtoken<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>sp_bindsession<ept id=\"p2\">**</ept>) were required.","pos":[537,698],"source":" In addition, when multiple connections were used in a transactional situation, bound connections (with **sp_getbindtoken** and **sp_bindsession**) were required."},{"content":"The following scenarios show how to use a MARS-enabled connection instead of multiple connections.","pos":[699,797]},{"pos":[806,839],"content":"Using Multiple Commands with MARS","linkify":"Using Multiple Commands with MARS","nodes":[{"content":"Using Multiple Commands with MARS","pos":[0,33]}]},{"content":"The following Console application demonstrates how to use two <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> objects with two <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> objects and a single <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> object with MARS enabled.","pos":[843,1094],"source":"The following Console application demonstrates how to use two <xref:System.Data.SqlClient.SqlDataReader> objects with two <xref:System.Data.SqlClient.SqlCommand> objects and a single <xref:System.Data.SqlClient.SqlConnection> object with MARS enabled."},{"pos":[1104,1111],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The example opens a single connection to the <bpt id=\"p1\">**</bpt>AdventureWorks<ept id=\"p1\">**</ept> database.","pos":[1115,1188],"source":"The example opens a single connection to the **AdventureWorks** database."},{"content":"Using a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> object, a <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> is created.","pos":[1189,1301],"source":" Using a <xref:System.Data.SqlClient.SqlCommand> object, a <xref:System.Data.SqlClient.SqlDataReader> is created."},{"content":"As the reader is used, a second <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> is opened, using data from the first <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> as input to the WHERE clause for the second reader.","pos":[1302,1508],"source":" As the reader is used, a second <xref:System.Data.SqlClient.SqlDataReader> is opened, using data from the first <xref:System.Data.SqlClient.SqlDataReader> as input to the WHERE clause for the second reader."},{"pos":[1516,1864],"content":"[!NOTE]\n The following example uses the sample **AdventureWorks** database included with [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]. The connection string provided in the sample code assumes that the database is installed and available on the local computer. Modify the connection string as necessary for your environment.","leadings":["","> "],"nodes":[{"content":"The following example uses the sample **AdventureWorks** database included with [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]. The connection string provided in the sample code assumes that the database is installed and available on the local computer. Modify the connection string as necessary for your environment.","pos":[9,346],"nodes":[{"content":"The following example uses the sample <bpt id=\"p1\">**</bpt>AdventureWorks<ept id=\"p1\">**</ept> database included with <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph>.","pos":[0,147],"source":"The following example uses the sample **AdventureWorks** database included with [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]."},{"content":"The connection string provided in the sample code assumes that the database is installed and available on the local computer.","pos":[148,273]},{"content":"Modify the connection string as necessary for your environment.","pos":[274,337]}]}]},{"pos":[6360,6395],"content":"Reading and Updating Data with MARS","linkify":"Reading and Updating Data with MARS","nodes":[{"content":"Reading and Updating Data with MARS","pos":[0,35]}]},{"content":"MARS allows a connection to be used for both read operations and data manipulation language (DML) operations with more than one pending operation.","pos":[6399,6545]},{"content":"This feature eliminates the need for an application to deal with connection-busy errors.","pos":[6546,6634]},{"content":"In addition, MARS can replace the user of server-side cursors, which generally consume more resources.","pos":[6635,6737]},{"content":"Finally, because multiple operations can operate on a single connection, they can share the same transaction context, eliminating the need to use <bpt id=\"p1\">**</bpt>sp_getbindtoken<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>sp_bindsession<ept id=\"p2\">**</ept> system stored procedures.","pos":[6738,6952],"source":" Finally, because multiple operations can operate on a single connection, they can share the same transaction context, eliminating the need to use **sp_getbindtoken** and **sp_bindsession** system stored procedures."},{"pos":[6962,6969],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following Console application demonstrates how to use two <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> objects with three <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> objects and a single <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> object with MARS enabled.","pos":[6973,7226],"source":"The following Console application demonstrates how to use two <xref:System.Data.SqlClient.SqlDataReader> objects with three <xref:System.Data.SqlClient.SqlCommand> objects and a single <xref:System.Data.SqlClient.SqlConnection> object with MARS enabled."},{"content":"The first command object retrieves a list of vendors whose credit rating is 5.","pos":[7227,7305]},{"content":"The second command object uses the vendor ID provided from a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> to load the second <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> with all of the products for the particular vendor.","pos":[7306,7523],"source":" The second command object uses the vendor ID provided from a <xref:System.Data.SqlClient.SqlDataReader> to load the second <xref:System.Data.SqlClient.SqlDataReader> with all of the products for the particular vendor."},{"content":"Each product record is visited by the second <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph>.","pos":[7524,7612],"source":" Each product record is visited by the second <xref:System.Data.SqlClient.SqlDataReader>."},{"content":"A calculation is performed to determine what the new <bpt id=\"p1\">**</bpt>OnOrderQty<ept id=\"p1\">**</ept> should be.","pos":[7613,7691],"source":" A calculation is performed to determine what the new **OnOrderQty** should be."},{"content":"The third command object is then used to update the <bpt id=\"p1\">**</bpt>ProductVendor<ept id=\"p1\">**</ept> table with the new value.","pos":[7692,7787],"source":" The third command object is then used to update the **ProductVendor** table with the new value."},{"content":"This entire process takes place within a single transaction, which is rolled back at the end.","pos":[7788,7881]},{"pos":[7889,8237],"content":"[!NOTE]\n The following example uses the sample **AdventureWorks** database included with [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]. The connection string provided in the sample code assumes that the database is installed and available on the local computer. Modify the connection string as necessary for your environment.","leadings":["","> "],"nodes":[{"content":"The following example uses the sample **AdventureWorks** database included with [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]. The connection string provided in the sample code assumes that the database is installed and available on the local computer. Modify the connection string as necessary for your environment.","pos":[9,346],"nodes":[{"content":"The following example uses the sample <bpt id=\"p1\">**</bpt>AdventureWorks<ept id=\"p1\">**</ept> database included with <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph>.","pos":[0,147],"source":"The following example uses the sample **AdventureWorks** database included with [!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]."},{"content":"The connection string provided in the sample code assumes that the database is installed and available on the local computer.","pos":[148,273]},{"content":"Modify the connection string as necessary for your environment.","pos":[274,337]}]}]},{"pos":[15911,15919],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Multiple Active Result Sets (MARS)<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/multiple-active-result-sets-mars.md)</ept><ph id=\"ph1\"> </ph>","pos":[15923,16043],"source":"[Multiple Active Result Sets (MARS)](../../../../../docs/framework/data/adonet/sql/multiple-active-result-sets-mars.md) "},{"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[16047,16150],"source":"[ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}