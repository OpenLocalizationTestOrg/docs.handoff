{"content":"---\ntitle: \"Garbage Collection | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"memory, garbage collection\"\n  - \"garbage collection, automatic memory management\"\n  - \"GC [.NET Framework]\"\n  - \"memory, allocating\"\n  - \"common language runtime, garbage collection\"\n  - \"garbage collector\"\n  - \"cleanup operations\"\n  - \"garbage collection\"\n  - \"memory, releasing\"\n  - \"common language runtime, automatic memory management\"\n  - \"automatic memory management\"\n  - \"runtime, automatic memory management\"\n  - \"runtime, garbage collection\"\n  - \"garbage collection, about\"\nms.assetid: 22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9\ncaps.latest.revision: 36\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Garbage Collection\n.NET's garbage collector manages the allocation and release of memory for your application. Each time you create a new object, the common language runtime allocates memory for the object from the managed heap. As long as address space is available in the managed heap, the runtime continues to allocate space for new objects. However, memory is not infinite. Eventually the garbage collector must perform a collection in order to free some memory. The garbage collector's optimizing engine determines the best time to perform a collection, based upon the allocations being made. When the garbage collector performs a collection, it checks for objects in the managed heap that are no longer being used by the application and performs the necessary operations to reclaim their memory.  \n  \n<a name=\"related_topics\"></a>   \n## Related Topics  \n  \n|Title|Description|  \n|-----------|-----------------|  \n|[Fundamentals of Garbage Collection](../../../docs/standard/garbage-collection/fundamentals.md)|Describes how garbage collection works, how objects are allocated on the managed heap, and other core concepts.|  \n|[Garbage Collection and Performance](../../../docs/standard/garbage-collection/performance.md)|Describes the performance checks you can use to diagnose garbage collection and performance issues.|  \n|[Induced Collections](../../../docs/standard/garbage-collection/induced.md)|Describes how to make a garbage collection occur.|  \n|[Latency Modes](../../../docs/standard/garbage-collection/latency.md)|Describes the modes that determine the intrusiveness of garbage collection.|  \n|[Optimization for Shared Web Hosting](../../../docs/standard/garbage-collection/optimization-for-shared-web-hosting.md)|Describes how to optimize garbage collection on servers shared by several small Web sites.|  \n|[Garbage Collection Notifications](../../../docs/standard/garbage-collection/notifications.md)|Describes how to determine when a full garbage collection is approaching and when it has completed.|  \n|[Application Domain Resource Monitoring](../../../docs/standard/garbage-collection/app-domain-resource-monitoring.md)|Describes how to monitor CPU and memory usage by an application domain.|  \n|[Weak References](../../../docs/standard/garbage-collection/weak-references.md)|Describes features that permit the garbage collector to collect an object while still allowing the application to access that object.|  \n  \n## Reference  \n <xref:System.GC?displayProperty=fullName>  \n  \n <xref:System.GCCollectionMode?displayProperty=fullName>  \n  \n <xref:System.GCNotificationStatus?displayProperty=fullName>  \n  \n <xref:System.Runtime.GCLatencyMode?displayProperty=fullName>  \n  \n <xref:System.Runtime.GCSettings?displayProperty=fullName>  \n  \n <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=fullName>  \n  \n <xref:System.Object.Finalize%2A?displayProperty=fullName>  \n  \n <xref:System.IDisposable?displayProperty=fullName>  \n  \n## See Also  \n [Cleaning Up Unmanaged Resources](../../../docs/standard/garbage-collection/unmanaged.md)","nodes":[{"pos":[12,47],"content":"Garbage Collection | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Garbage Collection | Microsoft Docs","pos":[0,35]}]},{"pos":[849,867],"content":"Garbage Collection","linkify":"Garbage Collection","nodes":[{"content":"Garbage Collection","pos":[0,18]}]},{"content":".NET's garbage collector manages the allocation and release of memory for your application.","pos":[868,959]},{"content":"Each time you create a new object, the common language runtime allocates memory for the object from the managed heap.","pos":[960,1077]},{"content":"As long as address space is available in the managed heap, the runtime continues to allocate space for new objects.","pos":[1078,1193]},{"content":"However, memory is not infinite.","pos":[1194,1226]},{"content":"Eventually the garbage collector must perform a collection in order to free some memory.","pos":[1227,1315]},{"content":"The garbage collector's optimizing engine determines the best time to perform a collection, based upon the allocations being made.","pos":[1316,1446]},{"content":"When the garbage collector performs a collection, it checks for objects in the managed heap that are no longer being used by the application and performs the necessary operations to reclaim their memory.","pos":[1447,1650]},{"pos":[1692,1706],"content":"Related Topics","linkify":"Related Topics","nodes":[{"content":"Related Topics","pos":[0,14]}]},{"content":"Title","pos":[1713,1718]},{"content":"Description","pos":[1719,1730]},{"pos":[1769,1864],"content":"<bpt id=\"p1\">[</bpt>Fundamentals of Garbage Collection<ept id=\"p1\">](../../../docs/standard/garbage-collection/fundamentals.md)</ept>","source":"[Fundamentals of Garbage Collection](../../../docs/standard/garbage-collection/fundamentals.md)"},{"content":"Describes how garbage collection works, how objects are allocated on the managed heap, and other core concepts.","pos":[1865,1976]},{"pos":[1981,2075],"content":"<bpt id=\"p1\">[</bpt>Garbage Collection and Performance<ept id=\"p1\">](../../../docs/standard/garbage-collection/performance.md)</ept>","source":"[Garbage Collection and Performance](../../../docs/standard/garbage-collection/performance.md)"},{"content":"Describes the performance checks you can use to diagnose garbage collection and performance issues.","pos":[2076,2175]},{"pos":[2180,2255],"content":"<bpt id=\"p1\">[</bpt>Induced Collections<ept id=\"p1\">](../../../docs/standard/garbage-collection/induced.md)</ept>","source":"[Induced Collections](../../../docs/standard/garbage-collection/induced.md)"},{"content":"Describes how to make a garbage collection occur.","pos":[2256,2305]},{"pos":[2310,2379],"content":"<bpt id=\"p1\">[</bpt>Latency Modes<ept id=\"p1\">](../../../docs/standard/garbage-collection/latency.md)</ept>","source":"[Latency Modes](../../../docs/standard/garbage-collection/latency.md)"},{"content":"Describes the modes that determine the intrusiveness of garbage collection.","pos":[2380,2455]},{"pos":[2460,2579],"content":"<bpt id=\"p1\">[</bpt>Optimization for Shared Web Hosting<ept id=\"p1\">](../../../docs/standard/garbage-collection/optimization-for-shared-web-hosting.md)</ept>","source":"[Optimization for Shared Web Hosting](../../../docs/standard/garbage-collection/optimization-for-shared-web-hosting.md)"},{"content":"Describes how to optimize garbage collection on servers shared by several small Web sites.","pos":[2580,2670]},{"pos":[2675,2769],"content":"<bpt id=\"p1\">[</bpt>Garbage Collection Notifications<ept id=\"p1\">](../../../docs/standard/garbage-collection/notifications.md)</ept>","source":"[Garbage Collection Notifications](../../../docs/standard/garbage-collection/notifications.md)"},{"content":"Describes how to determine when a full garbage collection is approaching and when it has completed.","pos":[2770,2869]},{"pos":[2874,2991],"content":"<bpt id=\"p1\">[</bpt>Application Domain Resource Monitoring<ept id=\"p1\">](../../../docs/standard/garbage-collection/app-domain-resource-monitoring.md)</ept>","source":"[Application Domain Resource Monitoring](../../../docs/standard/garbage-collection/app-domain-resource-monitoring.md)"},{"content":"Describes how to monitor CPU and memory usage by an application domain.","pos":[2992,3063]},{"pos":[3068,3147],"content":"<bpt id=\"p1\">[</bpt>Weak References<ept id=\"p1\">](../../../docs/standard/garbage-collection/weak-references.md)</ept>","source":"[Weak References](../../../docs/standard/garbage-collection/weak-references.md)"},{"content":"Describes features that permit the garbage collector to collect an object while still allowing the application to access that object.","pos":[3148,3281]},{"pos":[3291,3300],"content":"Reference","linkify":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]},{"pos":[3831,3839],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3843,3932],"content":"<bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](../../../docs/standard/garbage-collection/unmanaged.md)</ept>","source":"[Cleaning Up Unmanaged Resources](../../../docs/standard/garbage-collection/unmanaged.md)"}]}