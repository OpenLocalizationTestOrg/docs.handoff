{"content":"---\ntitle: \"&amp; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"&_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"bitwise AND operator [C#]\"\n  - \"ampersand operator (&) [C#]\"\n  - \"& operator [C#]\"\n  - \"AND operator (&) [C#]\"\nms.assetid: afa346d5-90ec-4b1f-a2c8-3881f018741d\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# &amp; Operator (C# Reference)\nThe & operator can function as either a unary or a binary operator.  \n  \n## Remarks  \n The unary & operator returns the address of its operand (requires [unsafe](../../../csharp/language-reference/keywords/unsafe.md) context).  \n  \n Binary & operators are predefined for the integral types and `bool`. For integral types, & computes the logical bitwise AND of its operands. For `bool` operands, & computes the logical AND of its operands; that is, the result is `true` if and only if both its operands are `true`.  \n  \n The `&` operator evaluates both operators regardless of the first one's value. For example:  \n  \n [!code-cs[csRefOperators#37](../../../csharp/language-reference/operators/codesnippet/CSharp/and-operator_1.cs)]  \n  \n User-defined types can overload the binary `&` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)). Operations on integral types are generally allowed on enumeration. When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.  \n  \n## Example  \n [!code-cs[csRefOperators#38](../../../csharp/language-reference/operators/codesnippet/CSharp/and-operator_2.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,674],"nodes":[{"content":"&amp; Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"&amp; Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph> Operator (C# Reference) | Microsoft Docs","pos":[0,46],"source":"&amp; Operator (C# Reference) | Microsoft Docs"}]}],"pos":[6,55],"yaml":true}],"content":"title: \"&amp; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"&_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"bitwise AND operator [C#]\"\n  - \"ampersand operator (&) [C#]\"\n  - \"& operator [C#]\"\n  - \"AND operator (&) [C#]\"\nms.assetid: afa346d5-90ec-4b1f-a2c8-3881f018741d\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[681,710],"content":"&amp; Operator (C# Reference)","linkify":"&amp; Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph> Operator (C# Reference)","pos":[0,29],"source":"&amp; Operator (C# Reference)"}]},{"content":"The &amp; operator can function as either a unary or a binary operator.","pos":[711,778],"source":"The & operator can function as either a unary or a binary operator."},{"pos":[787,794],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[798,937],"content":"The unary &amp; operator returns the address of its operand (requires <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept> context).","source":"The unary & operator returns the address of its operand (requires [unsafe](../../../csharp/language-reference/keywords/unsafe.md) context)."},{"content":"Binary &amp; operators are predefined for the integral types and <ph id=\"ph1\">`bool`</ph>.","pos":[944,1012],"source":"Binary & operators are predefined for the integral types and `bool`."},{"content":"For integral types, &amp; computes the logical bitwise AND of its operands.","pos":[1013,1084],"source":" For integral types, & computes the logical bitwise AND of its operands."},{"content":"For <ph id=\"ph1\">`bool`</ph> operands, &amp; computes the logical AND of its operands; that is, the result is <ph id=\"ph2\">`true`</ph> if and only if both its operands are <ph id=\"ph3\">`true`</ph>.","pos":[1085,1224],"source":" For `bool` operands, & computes the logical AND of its operands; that is, the result is `true` if and only if both its operands are `true`."},{"content":"The <ph id=\"ph1\">`&amp;`</ph> operator evaluates both operators regardless of the first one's value.","pos":[1231,1309],"source":"The `&` operator evaluates both operators regardless of the first one's value."},{"content":"For example:","pos":[1310,1322]},{"pos":[1329,1441],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#37<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/and-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#37](../../../csharp/language-reference/operators/codesnippet/CSharp/and-operator_1.cs)]"},{"content":"User-defined types can overload the binary <ph id=\"ph1\">`&amp;`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","pos":[1448,1578],"source":"User-defined types can overload the binary `&` operator (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"content":"Operations on integral types are generally allowed on enumeration.","pos":[1579,1645]},{"content":"When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.","pos":[1646,1761]},{"pos":[1770,1777],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1781,1893],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#38<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/and-operator_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#38](../../../csharp/language-reference/operators/codesnippet/CSharp/and-operator_2.cs)]"},{"pos":[1902,1910],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1914,1974],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1978,2045],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[2049,2118],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}