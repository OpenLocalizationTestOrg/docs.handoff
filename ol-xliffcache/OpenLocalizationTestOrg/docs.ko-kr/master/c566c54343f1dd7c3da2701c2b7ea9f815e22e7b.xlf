<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="generating-keys-for-encryption-and-decryption.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c566c54343f1dd7c3da2701c2b7ea9f815e22e7b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\security\generating-keys-for-encryption-and-decryption.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86e239ea483091db325c5767ddc9a6409c6bd6d1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cad00662233e433686b047428833345c979f0f59</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Generating Keys for Encryption and Decryption</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generating Keys for Encryption and Decryption</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creating and managing keys is an important part of the cryptographic process.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Symmetric algorithms require the creation of a key and an initialization vector (IV).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The key must be kept secret from anyone who should not decrypt your data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The IV does not have to be secret, but should be changed for each session.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Asymmetric algorithms require the creation of a public key and a private key.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The public key can be made public to anyone, while the private key must known only by the party who will decrypt the data encrypted with the public key.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This section describes how to generate and manage keys for both symmetric and asymmetric algorithms.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Symmetric Keys</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The symmetric encryption classes supplied by the .NET Framework require a key and a new initialization vector (IV) to encrypt and decrypt data.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Whenever you create a new instance of one of the managed symmetric cryptographic classes using the default constructor, a new key and IV are automatically created.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Anyone that you allow to decrypt your data must possess the same key and IV and use the same algorithm.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Generally, a new key and IV should be created for every session, and neither the key nor IV should be stored for use in a later session.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To communicate a symmetric key and IV to a remote party, you would usually encrypt the symmetric key by using asymmetric encryption.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Sending the key across an insecure network without encrypting it is unsafe, because anyone who intercepts the key and IV can then decrypt your data.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about exchanging data by using encryption, see <bpt id="p1">[</bpt>Creating a Cryptographic Scheme<ept id="p1">](../../../docs/standard/security/creating-a-cryptographic-scheme.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example shows the creation of a new instance of the <ph id="ph1">&lt;xref:System.Security.Cryptography.TripleDESCryptoServiceProvider&gt;</ph> class that implements the TripleDES algorithm.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the previous code is executed, a new key and IV are generated and placed in the <bpt id="p1">**</bpt>Key<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IV<ept id="p2">**</ept> properties, respectively.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Sometimes you might need to generate multiple keys.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this situation, you can create a new instance of a class that implements a symmetric algorithm and then create a new key and IV by calling the <bpt id="p1">**</bpt>GenerateKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>GenerateIV<ept id="p2">**</ept> methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code example illustrates how to create new keys and IVs after a new instance of the symmetric cryptographic class has been made.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When the previous code is executed, a key and IV are generated when the new instance of <bpt id="p1">**</bpt>TripleDESCryptoServiceProvider<ept id="p1">**</ept> is made.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Another key and IV are created when the <bpt id="p1">**</bpt>GenerateKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>GenerateIV<ept id="p2">**</ept> methods are called.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Asymmetric Keys</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> classes for asymmetric encryption.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>These classes create a public/private key pair when you use the default constructor to create a new instance.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Asymmetric keys can be either stored for use in multiple sessions or generated for one session only.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>While the public key can be made generally available, the private key should be closely guarded.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A public/private key pair is generated whenever a new instance of an asymmetric algorithm class is created.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After a new instance of the class is created, the key information can be extracted using one of two methods:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSA.ToXmlString%2A&gt;</ph> method, which returns an XML representation of the key information.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters%2A&gt;</ph> method, which returns an <ph id="ph2">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph> structure that holds the key information.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Both methods accept a Boolean value that indicates whether to return only the public key information or to return both the public-key and the private-key information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>RSACryptoServiceProvider<ept id="p1">**</ept> class can be initialized to the value of an <bpt id="p2">**</bpt>RSAParameters<ept id="p2">**</ept> structure by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Asymmetric private keys should never be stored verbatim or in plain text on the local computer.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you need to store a private key, you should use a key container.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more on how to store a private key in a key container, see <bpt id="p1">[</bpt>How to: Store Asymmetric Keys in a Key Container<ept id="p1">](../../../docs/standard/security/how-to-store-asymmetric-keys-in-a-key-container.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following code example creates a new instance of the <bpt id="p1">**</bpt>RSACryptoServiceProvider<ept id="p1">**</ept> class, creating a public/private key pair, and saves the public key information to an <bpt id="p2">**</bpt>RSAParameters<ept id="p2">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Encrypting Data<ept id="p1">](../../../docs/standard/security/encrypting-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Decrypting Data<ept id="p1">](../../../docs/standard/security/decrypting-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](../../../docs/standard/security/cryptographic-services.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Store Asymmetric Keys in a Key Container<ept id="p1">](../../../docs/standard/security/how-to-store-asymmetric-keys-in-a-key-container.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>