{"content":"---\ntitle: \"Call Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Call\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"procedures, Call statement\"\n  - \"Call statement\"\n  - \"procedures, calling\"\nms.assetid: e5b31571-6867-406f-b8e7-a3f9aae4723a\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Call Statement (Visual Basic)\nTransfers control to a `Function`, `Sub`, or dynamic-link library (DLL) procedure.  \n  \n## Syntax  \n  \n```  \n[ Call ] procedureName [ (argumentList) ]  \n```  \n  \n## Parts  \n `procedureName`  \n Required. Name of the procedure to call.  \n  \n `argumentList`  \n Optional. List of variables or expressions representing arguments that are passed to the procedure when it is called. Multiple arguments are separated by commas. If you include `argumentList`, you must enclose it in parentheses.  \n  \n## Remarks  \n You can use the `Call` keyword when you call a procedure. For most procedure calls, you aren’t required to use this  keyword.  \n  \n You typically use the `Call` keyword when the called expression doesn’t start with an identifier. Use of the `Call` keyword for other uses isn’t recommended.  \n  \n If the procedure returns a value, the `Call` statement discards it.  \n  \n## Example  \n The following code shows two examples where the `Call` keyword is necessary to call a procedure. In both examples, the called expression doesn't start with an identifier.  \n  \n [!code-vb[VbVbalrStatements#97](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/call-statement_1.vb)]  \n  \n## See Also  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)   \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)   \n [Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)   \n [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)\n","nodes":[{"pos":[4,641],"nodes":[{"content":"Call Statement (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"Call Statement (Visual Basic) | Microsoft Docs","nodes":[{"content":"Call Statement (Visual Basic) | Microsoft Docs","pos":[0,46]}]}],"pos":[6,55],"yaml":true}],"content":"title: \"Call Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Call\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"procedures, Call statement\"\n  - \"Call statement\"\n  - \"procedures, calling\"\nms.assetid: e5b31571-6867-406f-b8e7-a3f9aae4723a\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[648,677],"content":"Call Statement (Visual Basic)","linkify":"Call Statement (Visual Basic)","nodes":[{"content":"Call Statement (Visual Basic)","pos":[0,29]}]},{"pos":[678,760],"content":"Transfers control to a <ph id=\"ph1\">`Function`</ph>, <ph id=\"ph2\">`Sub`</ph>, or dynamic-link library (DLL) procedure.","source":"Transfers control to a `Function`, `Sub`, or dynamic-link library (DLL) procedure."},{"pos":[769,775],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[843,848],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[871,880]},{"content":"Name of the procedure to call.","pos":[881,911]},{"content":"Optional.","pos":[936,945]},{"content":"List of variables or expressions representing arguments that are passed to the procedure when it is called.","pos":[946,1053]},{"content":"Multiple arguments are separated by commas.","pos":[1054,1097]},{"content":"If you include <ph id=\"ph1\">`argumentList`</ph>, you must enclose it in parentheses.","pos":[1098,1164],"source":" If you include `argumentList`, you must enclose it in parentheses."},{"pos":[1173,1180],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use the <ph id=\"ph1\">`Call`</ph> keyword when you call a procedure.","pos":[1184,1241],"source":"You can use the `Call` keyword when you call a procedure."},{"content":"For most procedure calls, you aren’t required to use this  keyword.","pos":[1242,1309]},{"content":"You typically use the <ph id=\"ph1\">`Call`</ph> keyword when the called expression doesn’t start with an identifier.","pos":[1316,1413],"source":"You typically use the `Call` keyword when the called expression doesn’t start with an identifier."},{"content":"Use of the <ph id=\"ph1\">`Call`</ph> keyword for other uses isn’t recommended.","pos":[1414,1473],"source":" Use of the `Call` keyword for other uses isn’t recommended."},{"pos":[1480,1547],"content":"If the procedure returns a value, the <ph id=\"ph1\">`Call`</ph> statement discards it.","source":"If the procedure returns a value, the `Call` statement discards it."},{"pos":[1556,1563],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code shows two examples where the <ph id=\"ph1\">`Call`</ph> keyword is necessary to call a procedure.","pos":[1567,1663],"source":"The following code shows two examples where the `Call` keyword is necessary to call a procedure."},{"content":"In both examples, the called expression doesn't start with an identifier.","pos":[1664,1737]},{"pos":[1744,1877],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#97<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/call-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#97](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/call-statement_1.vb)]"},{"pos":[1886,1894],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[1898,1994],"source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[1998,2084],"source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Declare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declare-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2088,2182],"source":"[Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>","pos":[2186,2298],"source":"[Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)"}]}