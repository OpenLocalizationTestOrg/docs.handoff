<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="assignment-operator.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40dc844f2a4b6411ea82aa2f029b36d7dd8f6e5a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\assignment-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb2700e885b492b60b377497498087c1e5133969</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c3484b29f919011f7015f134fc6db7efca8b3f6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>= Operator - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>= Operator (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The assignment operator <ph id="ph1">`=`</ph> assigns the value of its right-hand operand to a variable, a <bpt id="p1">[</bpt>property<ept id="p1">](../../programming-guide/classes-and-structs/properties.md)</ept>, or an <bpt id="p2">[</bpt>indexer<ept id="p2">](../../../csharp/programming-guide/indexers/index.md)</ept> element given by its left-hand operand.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The result of an assignment expression is the value assigned to the left-hand operand.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The type of the right-hand operand must be the same as the type of the left-hand operand or implicitly convertible to it.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The assignment operator is right-associative, that is, an expression of the form</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>is evaluated as</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the usage of the assignment operator to assign values to a local variable, a property, and an indexer element:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>ref assignment operator</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.3, you can use the ref assignment operator <ph id="ph1">`= ref`</ph> to reassign a <bpt id="p1">[</bpt>ref local<ept id="p1">](../keywords/ref.md#ref-locals)</ept> or <bpt id="p2">[</bpt>ref readonly local<ept id="p2">](../keywords/ref.md#ref-readonly-locals)</ept> variable.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the usage of the ref assignment operator:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the case of the ref assignment operator, the type of the left operand and the right operand must be the same.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>feature proposal note<ept id="p1">](../../../../_csharplang/proposals/csharp-7.3/ref-local-reassignment.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Operator overloadability</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A user-defined type cannot overload the assignment operator.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, a user-defined type can define an implicit conversion to another type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>That way, the value of a user-defined type can be assigned to a variable, a property, or an indexer element of another type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>implicit<ept id="p1">](../keywords/implicit.md)</ept> keyword article.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Simple assignment<ept id="p1">](~/_csharplang/spec/expressions.md#simple-assignment)</ept> section of the <bpt id="p2">[</bpt>C# language specification<ept id="p2">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ref keyword<ept id="p1">](../keywords/ref.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>