{"content":"---\ntitle: Collect ink in WPF apps\nms.date: 08/15/2018\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"ink [WPF], collecting\"\n  - \"InkCanvas element [WPF]\"\n  - \"properties [WPF], DrawingAttributes\"\n  - \"collecting digital ink [WPF]\"\n  - \"digital ink [WPF], collecting\"\n  - \"properties [WPF], DefaultDrawingAttributes\"\n  - \"DefaultDrawingAttributes property [WPF]\"\nms.assetid: 66a3129d-9577-43eb-acbd-56c147282016\n---\n# Collect Ink\n\nThe [Windows Presentation Foundation](../index.md) platform collects digital ink as a core part of its functionality. This topic discusses methods for collection of ink in Windows Presentation Foundation (WPF).\n\n## Prerequisites\n\nTo use the following examples, you must first install Visual Studio and the [!INCLUDE[TLA2#tla_winfxsdk](../../../../includes/tla2sharptla-winfxsdk-md.md)]. You should also understand how to write applications for the WPF. For more information about getting started with WPF, see [Walkthrough: My first WPF desktop application](../getting-started/walkthrough-my-first-wpf-desktop-application.md).\n\n## Use the InkCanvas Element\n\nThe <xref:System.Windows.Controls.InkCanvas?displayProperty=fullName> element provides the easiest way to collect ink in WPF. Use an <xref:System.Windows.Controls.InkCanvas> element to receive and display ink input. You commonly input ink through the use of a stylus, which interacts with a digitizer to produce ink strokes. In addition, a mouse can be used in place of a stylus. The created strokes are represented as <xref:System.Windows.Ink.Stroke> objects, and they can be manipulated both programmatically and by user input. The <xref:System.Windows.Controls.InkCanvas> enables users to select, modify, or delete an existing <xref:System.Windows.Ink.Stroke>.\n\nBy using XAML, you can set up ink collection as easily as adding an **InkCanvas** element to your tree. The following example adds an <xref:System.Windows.Controls.InkCanvas> to a default WPF project created in Visual Studio:\n\n[!code-xaml[DigitalInkTopics#6](~/samples/snippets/csharp/VS_Snippets_Wpf/DigitalInkTopics/CSharp/Window2.xaml#6)]\n\nThe **InkCanvas** element can also contain child elements, making it possible to add ink annotation capabilities to almost any type of XAML element. For example, to add inking capabilities to a text element, simply make it a child of an <xref:System.Windows.Controls.InkCanvas>:\n\n[!code-xaml[DigitalInkTopics#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DigitalInkTopics/CSharp/Window2.xaml#5)]\n\nAdding support for marking up an image with ink is just as easy:\n\n[!code-xaml[DigitalInkTopics#7](~/samples/snippets/csharp/VS_Snippets_Wpf/DigitalInkTopics/CSharp/Window2.xaml#7)]\n\n### InkCollection Modes\n\nThe <xref:System.Windows.Controls.InkCanvas> provides support for various input modes through its <xref:System.Windows.Controls.InkCanvas.EditingMode%2A> property.\n\n### Manipulate Ink\n\nThe <xref:System.Windows.Controls.InkCanvas> provides support for many ink editing operations. For example, <xref:System.Windows.Controls.InkCanvas> supports back-of-pen erase, and no additional code is needed to add the functionality to the element.\n\n#### Selection\n\nSetting selection mode is as simple as setting the <xref:System.Windows.Controls.InkCanvasEditingMode> property to **Select**.\n\nThe following code sets the editing mode based on the value of a <xref:System.Windows.Forms.CheckBox>:\n\n[!code-csharp[DigitalInkTopics#8](~/samples/snippets/csharp/VS_Snippets_Wpf/DigitalInkTopics/CSharp/Window1.xaml.cs#8)]\n[!code-vb[DigitalInkTopics#8](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DigitalInkTopics/VisualBasic/Window1.xaml.vb#8)]\n\n#### DrawingAttributes\n\nUse the <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A> property to change the appearance of ink strokes. For instance, the <xref:System.Windows.Ink.DrawingAttributes.Color%2A> member of <xref:System.Windows.Ink.DrawingAttributes> sets the color of the rendered <xref:System.Windows.Ink.Stroke>.\n\nThe following example changes the color of the selected strokes to red:\n\n[!code-csharp[DigitalInkTopics#9](~/samples/snippets/csharp/VS_Snippets_Wpf/DigitalInkTopics/CSharp/Window1.xaml.cs#9)]\n[!code-vb[DigitalInkTopics#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DigitalInkTopics/VisualBasic/Window1.xaml.vb#9)]\n\n### DefaultDrawingAttributes\n\nThe <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> property provides access to properties such as the height, width, and color of the strokes to be created in an <xref:System.Windows.Controls.InkCanvas>. Once you change the <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A>, all future strokes entered into the <xref:System.Windows.Controls.InkCanvas> are rendered with the new property values.\n\nIn addition to modifying the <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> in the code-behind file, you can use XAML syntax for specifying <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> properties.\n\nThe next example demonstrates how to set the <xref:System.Windows.Ink.DrawingAttributes.Color%2A> property. To use this code, create a new WPF project called \"HelloInkCanvas\" in Visual Studio. Replace the code in the *MainWindow.xaml* file with the following code:\n\n[!code-xaml[HelloInkCanvas#1](~/samples/snippets/csharp/VS_Snippets_Wpf/HelloInkCanvas/CSharp/Window1.xaml#1)]\n\nNext, add the following button event handlers to the code behind file, inside the MainWindow class:\n\n[!code-csharp[HelloInkCanvas#2](~/samples/snippets/csharp/VS_Snippets_Wpf/HelloInkCanvas/CSharp/Window1.xaml.cs#2)]\n\nAfter copying this code, press **F5** in Visual Studio to run the program in the debugger.\n\nNotice how the <xref:System.Windows.Controls.StackPanel> places the buttons on top of the <xref:System.Windows.Controls.InkCanvas>. If you try to ink over the top of the buttons, the <xref:System.Windows.Controls.InkCanvas> collects and renders the ink behind the buttons. This is because the buttons are siblings of the <xref:System.Windows.Controls.InkCanvas> as opposed to children. Also, the buttons are higher in the z-order, so the ink is rendered behind them.\n\n## See also\n\n- <xref:System.Windows.Ink.DrawingAttributes>\n- <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A>\n- <xref:System.Windows.Ink>","nodes":[{"pos":[4,423],"embed":true,"restype":"x-metadata","content":"title: Collect ink in WPF apps\nms.date: 08/15/2018\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"ink [WPF], collecting\"\n  - \"InkCanvas element [WPF]\"\n  - \"properties [WPF], DrawingAttributes\"\n  - \"collecting digital ink [WPF]\"\n  - \"digital ink [WPF], collecting\"\n  - \"properties [WPF], DefaultDrawingAttributes\"\n  - \"DefaultDrawingAttributes property [WPF]\"\nms.assetid: 66a3129d-9577-43eb-acbd-56c147282016","nodes":[{"content":"Collect ink in WPF apps","nodes":[{"pos":[0,23],"content":"Collect ink in WPF apps","nodes":[{"content":"Collect ink in WPF apps","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[430,441],"content":"Collect Ink","linkify":"Collect Ink","nodes":[{"content":"Collect Ink","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>Windows Presentation Foundation<ept id=\"p1\">](../index.md)</ept> platform collects digital ink as a core part of its functionality.","pos":[443,560],"source":"The [Windows Presentation Foundation](../index.md) platform collects digital ink as a core part of its functionality."},{"content":"This topic discusses methods for collection of ink in Windows Presentation Foundation (WPF).","pos":[561,653]},{"pos":[658,671],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"To use the following examples, you must first install Visual Studio and the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winfxsdk](../../../../includes/tla2sharptla-winfxsdk-md.md)]</ph>.","pos":[673,829],"source":"To use the following examples, you must first install Visual Studio and the [!INCLUDE[TLA2#tla_winfxsdk](../../../../includes/tla2sharptla-winfxsdk-md.md)]."},{"content":"You should also understand how to write applications for the WPF.","pos":[830,895]},{"content":"For more information about getting started with WPF, see <bpt id=\"p1\">[</bpt>Walkthrough: My first WPF desktop application<ept id=\"p1\">](../getting-started/walkthrough-my-first-wpf-desktop-application.md)</ept>.","pos":[896,1069],"source":" For more information about getting started with WPF, see [Walkthrough: My first WPF desktop application](../getting-started/walkthrough-my-first-wpf-desktop-application.md)."},{"pos":[1074,1099],"content":"Use the InkCanvas Element","linkify":"Use the InkCanvas Element","nodes":[{"content":"Use the InkCanvas Element","pos":[0,25]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas?displayProperty=fullName&gt;</ph> element provides the easiest way to collect ink in WPF.","pos":[1101,1226],"source":"The <xref:System.Windows.Controls.InkCanvas?displayProperty=fullName> element provides the easiest way to collect ink in WPF."},{"content":"Use an <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> element to receive and display ink input.","pos":[1227,1316],"source":" Use an <xref:System.Windows.Controls.InkCanvas> element to receive and display ink input."},{"content":"You commonly input ink through the use of a stylus, which interacts with a digitizer to produce ink strokes.","pos":[1317,1425]},{"content":"In addition, a mouse can be used in place of a stylus.","pos":[1426,1480]},{"content":"The created strokes are represented as <ph id=\"ph1\">&lt;xref:System.Windows.Ink.Stroke&gt;</ph> objects, and they can be manipulated both programmatically and by user input.","pos":[1481,1630],"source":" The created strokes are represented as <xref:System.Windows.Ink.Stroke> objects, and they can be manipulated both programmatically and by user input."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> enables users to select, modify, or delete an existing <ph id=\"ph2\">&lt;xref:System.Windows.Ink.Stroke&gt;</ph>.","pos":[1631,1764],"source":" The <xref:System.Windows.Controls.InkCanvas> enables users to select, modify, or delete an existing <xref:System.Windows.Ink.Stroke>."},{"content":"By using XAML, you can set up ink collection as easily as adding an <bpt id=\"p1\">**</bpt>InkCanvas<ept id=\"p1\">**</ept> element to your tree.","pos":[1766,1869],"source":"By using XAML, you can set up ink collection as easily as adding an **InkCanvas** element to your tree."},{"content":"The following example adds an <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> to a default WPF project created in Visual Studio:","pos":[1870,1991],"source":" The following example adds an <xref:System.Windows.Controls.InkCanvas> to a default WPF project created in Visual Studio:"},{"content":"The <bpt id=\"p1\">**</bpt>InkCanvas<ept id=\"p1\">**</ept> element can also contain child elements, making it possible to add ink annotation capabilities to almost any type of XAML element.","pos":[2109,2257],"source":"The **InkCanvas** element can also contain child elements, making it possible to add ink annotation capabilities to almost any type of XAML element."},{"content":"For example, to add inking capabilities to a text element, simply make it a child of an <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>:","pos":[2258,2387],"source":" For example, to add inking capabilities to a text element, simply make it a child of an <xref:System.Windows.Controls.InkCanvas>:"},{"content":"Adding support for marking up an image with ink is just as easy:","pos":[2505,2569]},{"pos":[2691,2710],"content":"InkCollection Modes","linkify":"InkCollection Modes","nodes":[{"content":"InkCollection Modes","pos":[0,19]}]},{"pos":[2712,2875],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> provides support for various input modes through its <ph id=\"ph2\">&lt;xref:System.Windows.Controls.InkCanvas.EditingMode%2A&gt;</ph> property.","source":"The <xref:System.Windows.Controls.InkCanvas> provides support for various input modes through its <xref:System.Windows.Controls.InkCanvas.EditingMode%2A> property."},{"pos":[2881,2895],"content":"Manipulate Ink","linkify":"Manipulate Ink","nodes":[{"content":"Manipulate Ink","pos":[0,14]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> provides support for many ink editing operations.","pos":[2897,2991],"source":"The <xref:System.Windows.Controls.InkCanvas> provides support for many ink editing operations."},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> supports back-of-pen erase, and no additional code is needed to add the functionality to the element.","pos":[2992,3147],"source":" For example, <xref:System.Windows.Controls.InkCanvas> supports back-of-pen erase, and no additional code is needed to add the functionality to the element."},{"pos":[3154,3163],"content":"Selection","linkify":"Selection","nodes":[{"content":"Selection","pos":[0,9]}]},{"pos":[3165,3291],"content":"Setting selection mode is as simple as setting the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvasEditingMode&gt;</ph> property to <bpt id=\"p1\">**</bpt>Select<ept id=\"p1\">**</ept>.","source":"Setting selection mode is as simple as setting the <xref:System.Windows.Controls.InkCanvasEditingMode> property to **Select**."},{"pos":[3293,3395],"content":"The following code sets the editing mode based on the value of a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph>:","source":"The following code sets the editing mode based on the value of a <xref:System.Windows.Forms.CheckBox>:"},{"pos":[3649,3666],"content":"DrawingAttributes","linkify":"DrawingAttributes","nodes":[{"content":"DrawingAttributes","pos":[0,17]}]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Ink.Stroke.DrawingAttributes%2A&gt;</ph> property to change the appearance of ink strokes.","pos":[3668,3779],"source":"Use the <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A> property to change the appearance of ink strokes."},{"content":"For instance, the <ph id=\"ph1\">&lt;xref:System.Windows.Ink.DrawingAttributes.Color%2A&gt;</ph> member of <ph id=\"ph2\">&lt;xref:System.Windows.Ink.DrawingAttributes&gt;</ph> sets the color of the rendered <ph id=\"ph3\">&lt;xref:System.Windows.Ink.Stroke&gt;</ph>.","pos":[3780,3969],"source":" For instance, the <xref:System.Windows.Ink.DrawingAttributes.Color%2A> member of <xref:System.Windows.Ink.DrawingAttributes> sets the color of the rendered <xref:System.Windows.Ink.Stroke>."},{"content":"The following example changes the color of the selected strokes to red:","pos":[3971,4042]},{"pos":[4295,4319],"content":"DefaultDrawingAttributes","linkify":"DefaultDrawingAttributes","nodes":[{"content":"DefaultDrawingAttributes","pos":[0,24]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A&gt;</ph> property provides access to properties such as the height, width, and color of the strokes to be created in an <ph id=\"ph2\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>.","pos":[4321,4546],"source":"The <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> property provides access to properties such as the height, width, and color of the strokes to be created in an <xref:System.Windows.Controls.InkCanvas>."},{"content":"Once you change the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A&gt;</ph>, all future strokes entered into the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> are rendered with the new property values.","pos":[4547,4756],"source":" Once you change the <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A>, all future strokes entered into the <xref:System.Windows.Controls.InkCanvas> are rendered with the new property values."},{"pos":[4758,5000],"content":"In addition to modifying the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A&gt;</ph> in the code-behind file, you can use XAML syntax for specifying <ph id=\"ph2\">&lt;xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A&gt;</ph> properties.","source":"In addition to modifying the <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> in the code-behind file, you can use XAML syntax for specifying <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> properties."},{"content":"The next example demonstrates how to set the <ph id=\"ph1\">&lt;xref:System.Windows.Ink.DrawingAttributes.Color%2A&gt;</ph> property.","pos":[5002,5109],"source":"The next example demonstrates how to set the <xref:System.Windows.Ink.DrawingAttributes.Color%2A> property."},{"content":"To use this code, create a new WPF project called \"HelloInkCanvas\" in Visual Studio.","pos":[5110,5194]},{"content":"Replace the code in the <bpt id=\"p1\">*</bpt>MainWindow.xaml<ept id=\"p1\">*</ept> file with the following code:","pos":[5195,5266],"source":" Replace the code in the *MainWindow.xaml* file with the following code:"},{"content":"Next, add the following button event handlers to the code behind file, inside the MainWindow class:","pos":[5380,5479]},{"pos":[5598,5688],"content":"After copying this code, press <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> in Visual Studio to run the program in the debugger.","source":"After copying this code, press **F5** in Visual Studio to run the program in the debugger."},{"content":"Notice how the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> places the buttons on top of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>.","pos":[5690,5821],"source":"Notice how the <xref:System.Windows.Controls.StackPanel> places the buttons on top of the <xref:System.Windows.Controls.InkCanvas>."},{"content":"If you try to ink over the top of the buttons, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> collects and renders the ink behind the buttons.","pos":[5822,5962],"source":" If you try to ink over the top of the buttons, the <xref:System.Windows.Controls.InkCanvas> collects and renders the ink behind the buttons."},{"content":"This is because the buttons are siblings of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> as opposed to children.","pos":[5963,6075],"source":" This is because the buttons are siblings of the <xref:System.Windows.Controls.InkCanvas> as opposed to children."},{"content":"Also, the buttons are higher in the z-order, so the ink is rendered behind them.","pos":[6076,6156]},{"pos":[6161,6169],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]}]}