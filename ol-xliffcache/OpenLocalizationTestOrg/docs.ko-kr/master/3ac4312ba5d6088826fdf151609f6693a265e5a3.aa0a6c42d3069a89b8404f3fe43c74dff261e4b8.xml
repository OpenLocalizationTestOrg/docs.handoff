{"content":"---\ntitle: Console Application\ndescription: This tutorial teaches you a number of features in .NET Core and the C# language.\nms.date: 03/06/2017\nms.assetid: 883cd93d-50ce-4144-b7c9-2df28d9c11a0\n---\n\n# Console Application\n\nThis tutorial teaches you a number of features in .NET Core and the C# language. You’ll learn:\n\n- The basics of the .NET Core Command Line Interface (CLI)\n- The structure of a C# Console Application\n- Console I/O\n- The basics of File I/O APIs in .NET\n- The basics of the Task-based Asynchronous Programming in .NET\n\nYou’ll build an application that reads a text file, and echoes the\ncontents of that text file to the console. The output to the console is paced to match reading it aloud. You can speed up or slow down the pace\nby pressing the ‘<’ (less than) or ‘>’ (greater than) keys.\n\nThere are a lot of features in this tutorial. Let’s build them one by one.\n\n## Prerequisites\n\nYou’ll need to setup your machine to run .NET Core. You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage. You can run this\napplication on Windows, Linux, macOS or in a Docker container.\nYou’ll need to install your favorite code editor.\n\n## Create the Application\n\nThe first step is to create a new application. Open a command prompt and\ncreate a new directory for your application. Make that the current\ndirectory. Type the command `dotnet new console` at the command prompt. This\ncreates the starter files for a basic \"Hello World\" application.\n\nBefore you start making modifications, let’s go through the steps to run\nthe simple Hello World application. After creating the application, type\n`dotnet restore` at the command prompt. This command runs the NuGet\npackage restore process. NuGet is a .NET package manager. This command\ndownloads any of the missing dependencies for your project. As this is a\nnew project, none of the dependencies are in place, so the first run will\ndownload the .NET Core framework. After this initial step, you will only\nneed to run `dotnet restore` when you add new dependent packages, or update\nthe versions of any of your dependencies.\n\n[!INCLUDE[DotNet Restore Note](~/includes/dotnet-restore-note.md)]\n\nAfter restoring packages, you run `dotnet build`. This executes the build\nengine and creates your application executable. Finally, you execute `dotnet run` to\nrun your application.\n\nThe simple Hello World application code is all in Program.cs. Open that\nfile with your favorite text editor. We’re about to make our first changes.\nAt the top of the file, see a using statement:\n\n```csharp\nusing System;\n```\n\nThis statement tells the compiler that any types from the `System` namespace\nare in scope. Like other Object Oriented languages you may have used, C#\nuses namespaces to organize types. This Hello World program is no\ndifferent. You can see that the program is enclosed in the namespace with the name \nbased on the name of the current directory. For this tutorial, let's change the name of the namespace to `TeleprompterConsole`:\n\n```csharp\nnamespace TeleprompterConsole\n```\n\n## Reading and Echoing the File\n\nThe first feature to add is the ability to read a text file and display all that text to the console. First, let’s add a text file. Copy the [sampleQuotes.txt](https://github.com/dotnet/samples/raw/master/csharp/getting-started/console-teleprompter/sampleQuotes.txt) file from the GitHub repository for this [sample](https://github.com/dotnet/samples/tree/master/csharp/getting-started/console-teleprompter) into your project directory. This will serve as the script for your application. If you would like information on how to download the sample app for this topic, see the instructions in the [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples) topic.\n\nNext, add the following method in your `Program` class (right below the `Main` method):\n\n```csharp\nstatic IEnumerable<string> ReadFrom(string file)\n{\n    string line;\n    using (var reader = File.OpenText(file))\n    {\n        while ((line = reader.ReadLine()) != null)\n        {\n            yield return line;\n        }\n    }\n}\n```\n\nThis method uses types from two new namespaces. For this to compile you’ll\nneed to add the following two lines to the top of the file:\n\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\n```\n\nThe <xref:System.Collections.Generic.IEnumerable%601> interface is defined in the\n<xref:System.Collections.Generic> namespace. The <xref:System.IO.File> class is defined in the <xref:System.IO> namespace.\n\nThis method is a special type of C# method called an *Iterator method*. \nEnumerator methods return sequences that are evaluated lazily. That means \neach item in the sequence is generated as it is requested by the code \nconsuming the sequence. Enumerator methods are methods that contain one or \nmore [`yield return`](../language-reference/keywords/yield.md) statements. The object returned by the `ReadFrom` \nmethod contains the code to generate each item in the sequence. In this \nexample, that involves reading the next line of text from the source file, \nand returning that string. Each time the calling code requests the next \nitem from the sequence, the code reads the next line of text from the file\nand returns it. When the file is completely read, the sequence \nindicates that there are no more items.\n\nThere are two other C# syntax elements that may be new to you. The [`using`](../language-reference/keywords/using-statement.md) \nstatement in this method manages resource cleanup. The variable that is\ninitialized in the `using` statement (`reader`, in this example) must\nimplement the <xref:System.IDisposable> interface. That interface\ndefines a single method, `Dispose`, that should be called when the\nresource should be released. The compiler generates that call when\nexecution reaches the closing brace of the `using` statement. The\ncompiler-generated code ensures that the resource is released even if an\nexception is thrown from the code in the block defined by the using\nstatement.\n\nThe `reader` variable is defined using the `var` keyword. [`var`](../language-reference/keywords/var.md) defines an\n*implicitly typed local variable*. That means the type of the variable is\ndetermined by the compile-time type of the object assigned to the\nvariable. Here, that is the return value from the <xref:System.IO.File.OpenText(System.String)> method, which is\na <xref:System.IO.StreamReader> object.\n\nNow, let’s fill in the code to read the file in the `Main` method:\n\n```csharp\nvar lines = ReadFrom(\"sampleQuotes.txt\");\nforeach (var line in lines)\n{\n    Console.WriteLine(line);\n}\n```\n\nRun the program (using `dotnet run`) and you can see every line printed out\nto the console.\n\n## Adding Delays and Formatting output\n\nWhat you have is being displayed far too fast to read aloud. Now you need\nto add the delays in the output. As you start, you’ll be building some of\nthe core code that enables asynchronous processing. However, these first\nsteps will follow a few anti-patterns. The anti-patterns are pointed out\nin comments as you add the code, and the code will be updated in later\nsteps.\n\nThere are two steps to this section. First, you’ll update the iterator\nmethod to return single words instead of entire lines. That’s done with\nthese modifications. Replace the `yield return line;` statement with the\nfollowing code:\n\n```csharp\nvar words = line.Split(' ');\nforeach (var word in words)\n{\n    yield return word + \" \";\n}\nyield return Environment.NewLine;\n```\n\nNext, you need to modify how you consume the lines of the file, and add a\ndelay after writing each word. Replace the `Console.WriteLine(line)` statement\nin the `Main` method with the following block:\n\n```csharp\nConsole.Write(line);\nif (!string.IsNullOrWhiteSpace(line))\n{\n    var pause = Task.Delay(200);\n    // Synchronously waiting on a task is an\n    // anti-pattern. This will get fixed in later\n    // steps.\n    pause.Wait();\n}\n```\n\nThe <xref:System.Threading.Tasks.Task> class is in the <xref:System.Threading.Tasks> namespace, so you need\nto add that `using` statement at the top of file:\n\n```csharp\nusing System.Threading.Tasks;\n```\n\nRun the sample, and check the output. Now, each single word is printed,\nfollowed by a 200 ms delay. However, the displayed output shows some\nissues because the source text file has several lines that have more than\n80 characters without a line break. That can be hard to read while it's\nscrolling by. That’s easy to fix. You’ll just keep track of the length of\neach line, and generate a new line whenever the line length reaches a\ncertain threshold. Declare a local variable after the declaration of\n`words` in the `ReadFrom` method that holds the line length:\n\n```csharp\nvar lineLength = 0;\n```\n\nThen, add the following code after the `yield return word + \" \";` statement\n(before the closing brace):\n\n```csharp\nlineLength += word.Length + 1;\nif (lineLength > 70)\n{\n    yield return Environment.NewLine;\n    lineLength = 0;\n}\n```\n\nRun the sample, and you’ll be able to read aloud at its pre-configured\npace.\n\n## Async Tasks\n\nIn this final step, you’ll add the code to write the output asynchronously\nin one task, while also running another task to read input from the user\nif they want to speed up or slow down the text display, or stop the text display altogether. \nThis has a few steps in it and by the end, you’ll have all the updates that you need.\nThe first step is to create an asynchronous <xref:System.Threading.Tasks.Task> returning method that\nrepresents the code you’ve created so far to read and display the file.\n\nAdd this method to your `Program` class (it’s taken from the body of your\n`Main` method):\n\n```csharp\nprivate static async Task ShowTeleprompter()\n{\n    var words = ReadFrom(\"sampleQuotes.txt\");\n    foreach (var word in words)\n    {\n        Console.Write(word);\n        if (!string.IsNullOrWhiteSpace(word))\n        {\n            await Task.Delay(200);\n        }\n    }\n}\n```\n\nYou’ll notice two changes. First, in the body of the method, instead of\ncalling <xref:System.Threading.Tasks.Task.Wait> to synchronously wait for a task to finish, this version\nuses the `await` keyword. In order to do that, you need to add the `async`\nmodifier to the method signature. This method returns a `Task`. Notice that\nthere are no return statements that return a `Task` object. Instead, that\n`Task` object is created by code the compiler generates when you use the\n`await` operator. You can imagine that this method returns when it reaches\nan `await`. The returned `Task` indicates that the work has not completed.\nThe method resumes when the awaited task completes. When it has executed\nto completion, the returned `Task` indicates that it is complete.\nCalling code can\nmonitor that returned `Task` to determine when it has completed.\n\nYou can call this new method in your `Main` method:\n\n```csharp\nShowTeleprompter().Wait();\n```\n\nHere, in `Main`, the code does synchronously wait. You should use the\n`await` operator instead of synchronously waiting whenever possible. But,\nin a console application’s `Main` method, you cannot use the `await`\noperator. That would result in the application exiting before all tasks\nhave completed.\n\n> [!NOTE]\n> If you use C# 7.1 or later, you can create console applications with [`async` `Main` method](../whats-new/csharp-7-1.md#async-main).\n\nNext, you need to write the second asynchronous method to read from the\nConsole and watch for the ‘<’ (less than), ‘>’ (greater than) and ‘X’ or ‘x’ keys. Here’s the method you add for\nthat task:\n\n```csharp\nprivate static async Task GetInput()\n{\n    var delay = 200;\n    Action work = () =>\n    {\n        do {\n            var key = Console.ReadKey(true);\n            if (key.KeyChar == '>')\n            {\n                delay -= 10;\n            }\n            else if (key.KeyChar == '<')\n            {\n                delay += 10;\n            }\n            else if (key.KeyChar == 'X' || key.KeyChar == 'x')\n            {\n                break;\n            }\n        } while (true);\n    };\n    await Task.Run(work);\n}\n```\n\nThis creates a lambda expression to represent an <xref:System.Action> delegate that reads a key\nfrom the Console and modifies a local variable representing the delay when\nthe user presses the ‘<’ (less than) or ‘>’ (greater than) keys. The delegate method finishes when user presses\nthe ‘X’ or ‘x’  keys, which allow the user to stop the text display at any time.\nThis method uses <xref:System.Console.ReadKey> to block and wait for the user to press a key.\n\nTo finish this feature, you need to create a new `async Task` returning\nmethod that starts both of these tasks (`GetInput` and \n`ShowTeleprompter`), and also manages the shared data between these two\ntasks.\n\nIt’s time to create a class that can handle the shared data between these\ntwo tasks. This class contains two public properties: the delay, and a\nflag `Done` to indicate that the file has been completely read:\n\n```csharp\nnamespace TeleprompterConsole\n{\n    internal class TelePrompterConfig\n    {\n        public int DelayInMilliseconds { get; private set; } = 200;\n\n        public void UpdateDelay(int increment) // negative to speed up\n        {\n            var newDelay = Min(DelayInMilliseconds + increment, 1000);\n            newDelay = Max(newDelay, 20);\n            DelayInMilliseconds = newDelay;\n        }\n\n        public bool Done { get; private set; }\n\n        public void SetDone()\n        {\n            Done = true;\n        }\n    }\n}\n```\n\nPut that class in a new file, and enclose that class in the\n`TeleprompterConsole` namespace as shown above. You’ll also need to add a `using static`\nstatement so that you can reference the `Min` and `Max` methods without the\nenclosing class or namespace names. A [`using static`](../language-reference/keywords/using-static.md) statement imports the\nmethods from one class. This is in contrast with the `using` statements used\nup to this point that have imported all classes from a namespace.\n\n```csharp\nusing static System.Math;\n```\n\nNext, you need to update the `ShowTeleprompter` and `GetInput` methods to\nuse the new `config` object. Write one final `Task` returning `async` method to\nstart both tasks and exit when the first task finishes:\n\n```csharp\nprivate static async Task RunTeleprompter()\n{\n    var config = new TelePrompterConfig();\n    var displayTask = ShowTeleprompter(config);\n\n    var speedTask = GetInput(config);\n    await Task.WhenAny(displayTask, speedTask);\n}\n```\n\nThe one new method here is the <xref:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])> call. That creates a `Task`\nthat finishes as soon as any of the tasks in its argument list completes.\n\nNext, you need to update both the `ShowTeleprompter` and `GetInput` methods to\nuse the `config` object for the delay:\n\n```csharp\nprivate static async Task ShowTeleprompter(TelePrompterConfig config)\n{\n    var words = ReadFrom(\"sampleQuotes.txt\");\n    foreach (var word in words)\n    {\n        Console.Write(word);\n        if (!string.IsNullOrWhiteSpace(word))\n        {\n            await Task.Delay(config.DelayInMilliseconds);\n        }\n    }\n    config.SetDone();\n}\n\nprivate static async Task GetInput(TelePrompterConfig config)\n{\n    Action work = () =>\n    {\n        do {\n            var key = Console.ReadKey(true);\n            if (key.KeyChar == '>')\n                config.UpdateDelay(-10);\n            else if (key.KeyChar == '<')\n                config.UpdateDelay(10);\n            else if (key.KeyChar == 'X' || key.KeyChar == 'x')\n                config.SetDone();\n        } while (!config.Done);\n    };\n    await Task.Run(work);\n}\n```\n\nThis new version of `ShowTeleprompter` calls a new method in the\n`TeleprompterConfig` class. Now, you need to update `Main` to call \n`RunTeleprompter` instead of `ShowTeleprompter`:\n\n```csharp\nRunTeleprompter().Wait();\n```\n\n## Conclusion\n\nThis tutorial showed you a number of the features around the C# language\nand the .NET Core libraries related to working in Console applications.\nYou can build on this knowledge to explore more about the language, and\nthe classes introduced here. You’ve seen the basics of File and Console\nI/O, blocking and non-blocking use of the Task-based asynchronous\nprogramming, a tour of the C# language and how C# programs are\norganized and the .NET Core Command Line Interface and tools.\n\nFor more information about File I/O, see the [File and Stream I/O](../../standard/io/index.md) topic. For more information about asynchronous programming model used in this tutorial, see the [Task-based Asynchronous Programming](../..//standard/parallel-programming/task-based-asynchronous-programming.md) topic and the [Asynchronous programming](../async.md) topic.\n","nodes":[{"pos":[4,193],"embed":true,"restype":"x-metadata","content":"title: Console Application\ndescription: This tutorial teaches you a number of features in .NET Core and the C# language.\nms.date: 03/06/2017\nms.assetid: 883cd93d-50ce-4144-b7c9-2df28d9c11a0","nodes":[{"content":"Console Application","nodes":[{"pos":[0,19],"content":"Console Application","nodes":[{"content":"Console Application","pos":[0,19]}]}],"path":["title"],"nosxs":false},{"content":"This tutorial teaches you a number of features in .NET Core and the C# language.","nodes":[{"pos":[0,80],"content":"This tutorial teaches you a number of features in .NET Core and the C# language.","nodes":[{"content":"This tutorial teaches you a number of features in .NET Core and the C# language.","pos":[0,80]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[201,220],"content":"Console Application","linkify":"Console Application","nodes":[{"content":"Console Application","pos":[0,19]}]},{"content":"This tutorial teaches you a number of features in .NET Core and the C# language.","pos":[222,302]},{"content":"You’ll learn:","pos":[303,316]},{"content":"The basics of the .NET Core Command Line Interface (CLI)","pos":[320,376]},{"content":"The structure of a C# Console Application","pos":[379,420]},{"content":"Console I/O","pos":[423,434]},{"content":"The basics of File I/O APIs in .NET","pos":[437,472]},{"content":"The basics of the Task-based Asynchronous Programming in .NET","pos":[475,536]},{"content":"You’ll build an application that reads a text file, and echoes the contents of that text file to the console.","pos":[538,647],"source":"You’ll build an application that reads a text file, and echoes the\ncontents of that text file to the console."},{"content":"The output to the console is paced to match reading it aloud.","pos":[648,709]},{"content":"You can speed up or slow down the pace by pressing the ‘&lt;’ (less than) or ‘&gt;’ (greater than) keys.","pos":[710,808],"source":" You can speed up or slow down the pace\nby pressing the ‘<’ (less than) or ‘>’ (greater than) keys."},{"content":"There are a lot of features in this tutorial.","pos":[810,855]},{"content":"Let’s build them one by one.","pos":[856,884]},{"pos":[889,902],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"You’ll need to setup your machine to run .NET Core.","pos":[904,955]},{"content":"You can find the installation instructions on the <bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> page.","pos":[956,1059],"source":" You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage."},{"content":"You can run this application on Windows, Linux, macOS or in a Docker container.","pos":[1060,1139],"source":" You can run this\napplication on Windows, Linux, macOS or in a Docker container."},{"content":"You’ll need to install your favorite code editor.","pos":[1140,1189],"source":"\nYou’ll need to install your favorite code editor."},{"pos":[1194,1216],"content":"Create the Application","linkify":"Create the Application","nodes":[{"content":"Create the Application","pos":[0,22]}]},{"content":"The first step is to create a new application.","pos":[1218,1264]},{"content":"Open a command prompt and create a new directory for your application.","pos":[1265,1335],"source":" Open a command prompt and\ncreate a new directory for your application."},{"content":"Make that the current directory.","pos":[1336,1368],"source":" Make that the current\ndirectory."},{"content":"Type the command <ph id=\"ph1\">`dotnet new console`</ph> at the command prompt.","pos":[1369,1429],"source":" Type the command `dotnet new console` at the command prompt."},{"content":"This creates the starter files for a basic \"Hello World\" application.","pos":[1430,1499],"source":" This\ncreates the starter files for a basic \"Hello World\" application."},{"content":"Before you start making modifications, let’s go through the steps to run the simple Hello World application.","pos":[1501,1609],"source":"Before you start making modifications, let’s go through the steps to run\nthe simple Hello World application."},{"content":"After creating the application, type <ph id=\"ph1\">`dotnet restore`</ph> at the command prompt.","pos":[1610,1686],"source":" After creating the application, type\n`dotnet restore` at the command prompt."},{"content":"This command runs the NuGet package restore process.","pos":[1687,1739],"source":" This command runs the NuGet\npackage restore process."},{"content":"NuGet is a .NET package manager.","pos":[1740,1772]},{"content":"This command downloads any of the missing dependencies for your project.","pos":[1773,1845],"source":" This command\ndownloads any of the missing dependencies for your project."},{"content":"As this is a new project, none of the dependencies are in place, so the first run will download the .NET Core framework.","pos":[1846,1966],"source":" As this is a\nnew project, none of the dependencies are in place, so the first run will\ndownload the .NET Core framework."},{"content":"After this initial step, you will only need to run <ph id=\"ph1\">`dotnet restore`</ph> when you add new dependent packages, or update the versions of any of your dependencies.","pos":[1967,2123],"source":" After this initial step, you will only\nneed to run `dotnet restore` when you add new dependent packages, or update\nthe versions of any of your dependencies."},{"content":"After restoring packages, you run <ph id=\"ph1\">`dotnet build`</ph>.","pos":[2193,2242],"source":"After restoring packages, you run `dotnet build`."},{"content":"This executes the build engine and creates your application executable.","pos":[2243,2314],"source":" This executes the build\nengine and creates your application executable."},{"content":"Finally, you execute <ph id=\"ph1\">`dotnet run`</ph> to run your application.","pos":[2315,2373],"source":" Finally, you execute `dotnet run` to\nrun your application."},{"content":"The simple Hello World application code is all in Program.cs.","pos":[2375,2436]},{"content":"Open that file with your favorite text editor.","pos":[2437,2483],"source":" Open that\nfile with your favorite text editor."},{"content":"We’re about to make our first changes.","pos":[2484,2522]},{"content":"At the top of the file, see a using statement:","pos":[2523,2569],"source":"\nAt the top of the file, see a using statement:"},{"content":"This statement tells the compiler that any types from the <ph id=\"ph1\">`System`</ph> namespace are in scope.","pos":[2600,2690],"source":"This statement tells the compiler that any types from the `System` namespace\nare in scope."},{"content":"Like other Object Oriented languages you may have used, C# uses namespaces to organize types.","pos":[2691,2784],"source":" Like other Object Oriented languages you may have used, C#\nuses namespaces to organize types."},{"content":"This Hello World program is no different.","pos":[2785,2826],"source":" This Hello World program is no\ndifferent."},{"content":"You can see that the program is enclosed in the namespace with the name based on the name of the current directory.","pos":[2827,2943],"source":" You can see that the program is enclosed in the namespace with the name \nbased on the name of the current directory."},{"content":"For this tutorial, let's change the name of the namespace to <ph id=\"ph1\">`TeleprompterConsole`</ph>:","pos":[2944,3027],"source":" For this tutorial, let's change the name of the namespace to `TeleprompterConsole`:"},{"pos":[3077,3105],"content":"Reading and Echoing the File","linkify":"Reading and Echoing the File","nodes":[{"content":"Reading and Echoing the File","pos":[0,28]}]},{"content":"The first feature to add is the ability to read a text file and display all that text to the console.","pos":[3107,3208]},{"content":"First, let’s add a text file.","pos":[3209,3238]},{"content":"Copy the <bpt id=\"p1\">[</bpt>sampleQuotes.txt<ept id=\"p1\">](https://github.com/dotnet/samples/raw/master/csharp/getting-started/console-teleprompter/sampleQuotes.txt)</ept> file from the GitHub repository for this <bpt id=\"p2\">[</bpt>sample<ept id=\"p2\">](https://github.com/dotnet/samples/tree/master/csharp/getting-started/console-teleprompter)</ept> into your project directory.","pos":[3239,3543],"source":" Copy the [sampleQuotes.txt](https://github.com/dotnet/samples/raw/master/csharp/getting-started/console-teleprompter/sampleQuotes.txt) file from the GitHub repository for this [sample](https://github.com/dotnet/samples/tree/master/csharp/getting-started/console-teleprompter) into your project directory."},{"content":"This will serve as the script for your application.","pos":[3544,3595]},{"content":"If you would like information on how to download the sample app for this topic, see the instructions in the <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept> topic.","pos":[3596,3804],"source":" If you would like information on how to download the sample app for this topic, see the instructions in the [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples) topic."},{"pos":[3806,3893],"content":"Next, add the following method in your <ph id=\"ph1\">`Program`</ph> class (right below the <ph id=\"ph2\">`Main`</ph> method):","source":"Next, add the following method in your `Program` class (right below the `Main` method):"},{"content":"This method uses types from two new namespaces.","pos":[4139,4186]},{"content":"For this to compile you’ll need to add the following two lines to the top of the file:","pos":[4187,4273],"source":" For this to compile you’ll\nneed to add the following two lines to the top of the file:"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface is defined in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic&gt;</ph> namespace.","pos":[4341,4467],"source":"The <xref:System.Collections.Generic.IEnumerable%601> interface is defined in the\n<xref:System.Collections.Generic> namespace."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.File&gt;</ph> class is defined in the <ph id=\"ph2\">&lt;xref:System.IO&gt;</ph> namespace.","pos":[4468,4545],"source":" The <xref:System.IO.File> class is defined in the <xref:System.IO> namespace."},{"content":"This method is a special type of C# method called an <bpt id=\"p1\">*</bpt>Iterator method<ept id=\"p1\">*</ept>.","pos":[4547,4618],"source":"This method is a special type of C# method called an *Iterator method*."},{"content":"Enumerator methods return sequences that are evaluated lazily.","pos":[4619,4682],"source":" \nEnumerator methods return sequences that are evaluated lazily."},{"content":"That means each item in the sequence is generated as it is requested by the code consuming the sequence.","pos":[4683,4789],"source":" That means \neach item in the sequence is generated as it is requested by the code \nconsuming the sequence."},{"content":"Enumerator methods are methods that contain one or more <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`yield return`</ph><ept id=\"p1\">](../language-reference/keywords/yield.md)</ept> statements.","pos":[4790,4916],"source":" Enumerator methods are methods that contain one or \nmore [`yield return`](../language-reference/keywords/yield.md) statements."},{"content":"The object returned by the <ph id=\"ph1\">`ReadFrom`</ph> method contains the code to generate each item in the sequence.","pos":[4917,5019],"source":" The object returned by the `ReadFrom` \nmethod contains the code to generate each item in the sequence."},{"content":"In this example, that involves reading the next line of text from the source file, and returning that string.","pos":[5020,5131],"source":" In this \nexample, that involves reading the next line of text from the source file, \nand returning that string."},{"content":"Each time the calling code requests the next item from the sequence, the code reads the next line of text from the file and returns it.","pos":[5132,5268],"source":" Each time the calling code requests the next \nitem from the sequence, the code reads the next line of text from the file\nand returns it."},{"content":"When the file is completely read, the sequence indicates that there are no more items.","pos":[5269,5356],"source":" When the file is completely read, the sequence \nindicates that there are no more items."},{"content":"There are two other C# syntax elements that may be new to you.","pos":[5358,5420]},{"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`using`</ph><ept id=\"p1\">](../language-reference/keywords/using-statement.md)</ept> statement in this method manages resource cleanup.","pos":[5421,5537],"source":" The [`using`](../language-reference/keywords/using-statement.md) \nstatement in this method manages resource cleanup."},{"content":"The variable that is initialized in the <ph id=\"ph1\">`using`</ph> statement (<ph id=\"ph2\">`reader`</ph>, in this example) must implement the <ph id=\"ph3\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[5538,5679],"source":" The variable that is\ninitialized in the `using` statement (`reader`, in this example) must\nimplement the <xref:System.IDisposable> interface."},{"content":"That interface defines a single method, <ph id=\"ph1\">`Dispose`</ph>, that should be called when the resource should be released.","pos":[5680,5790],"source":" That interface\ndefines a single method, `Dispose`, that should be called when the\nresource should be released."},{"content":"The compiler generates that call when execution reaches the closing brace of the <ph id=\"ph1\">`using`</ph> statement.","pos":[5791,5890],"source":" The compiler generates that call when\nexecution reaches the closing brace of the `using` statement."},{"content":"The compiler-generated code ensures that the resource is released even if an exception is thrown from the code in the block defined by the using statement.","pos":[5891,6046],"source":" The\ncompiler-generated code ensures that the resource is released even if an\nexception is thrown from the code in the block defined by the using\nstatement."},{"content":"The <ph id=\"ph1\">`reader`</ph> variable is defined using the <ph id=\"ph2\">`var`</ph> keyword.","pos":[6048,6105],"source":"The `reader` variable is defined using the `var` keyword."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`var`</ph><ept id=\"p1\">](../language-reference/keywords/var.md)</ept> defines an <bpt id=\"p2\">*</bpt>implicitly typed local variable<ept id=\"p2\">*</ept>.","pos":[6106,6198],"source":"[`var`](../language-reference/keywords/var.md) defines an\n*implicitly typed local variable*."},{"content":"That means the type of the variable is determined by the compile-time type of the object assigned to the variable.","pos":[6199,6313],"source":" That means the type of the variable is\ndetermined by the compile-time type of the object assigned to the\nvariable."},{"content":"Here, that is the return value from the <ph id=\"ph1\">&lt;xref:System.IO.File.OpenText(System.String)&gt;</ph> method, which is a <ph id=\"ph2\">&lt;xref:System.IO.StreamReader&gt;</ph> object.","pos":[6314,6456],"source":" Here, that is the return value from the <xref:System.IO.File.OpenText(System.String)> method, which is\na <xref:System.IO.StreamReader> object."},{"pos":[6458,6524],"content":"Now, let’s fill in the code to read the file in the <ph id=\"ph1\">`Main`</ph> method:","source":"Now, let’s fill in the code to read the file in the `Main` method:"},{"pos":[6644,6735],"content":"Run the program (using <ph id=\"ph1\">`dotnet run`</ph>) and you can see every line printed out to the console.","source":"Run the program (using `dotnet run`) and you can see every line printed out\nto the console."},{"pos":[6740,6775],"content":"Adding Delays and Formatting output","linkify":"Adding Delays and Formatting output","nodes":[{"content":"Adding Delays and Formatting output","pos":[0,35]}]},{"content":"What you have is being displayed far too fast to read aloud.","pos":[6777,6837]},{"content":"Now you need to add the delays in the output.","pos":[6838,6883],"source":" Now you need\nto add the delays in the output."},{"content":"As you start, you’ll be building some of the core code that enables asynchronous processing.","pos":[6884,6976],"source":" As you start, you’ll be building some of\nthe core code that enables asynchronous processing."},{"content":"However, these first steps will follow a few anti-patterns.","pos":[6977,7036],"source":" However, these first\nsteps will follow a few anti-patterns."},{"content":"The anti-patterns are pointed out in comments as you add the code, and the code will be updated in later steps.","pos":[7037,7148],"source":" The anti-patterns are pointed out\nin comments as you add the code, and the code will be updated in later\nsteps."},{"content":"There are two steps to this section.","pos":[7150,7186]},{"content":"First, you’ll update the iterator method to return single words instead of entire lines.","pos":[7187,7275],"source":" First, you’ll update the iterator\nmethod to return single words instead of entire lines."},{"content":"That’s done with these modifications.","pos":[7276,7313],"source":" That’s done with\nthese modifications."},{"content":"Replace the <ph id=\"ph1\">`yield return line;`</ph> statement with the following code:","pos":[7314,7381],"source":" Replace the `yield return line;` statement with the\nfollowing code:"},{"content":"Next, you need to modify how you consume the lines of the file, and add a delay after writing each word.","pos":[7522,7626],"source":"Next, you need to modify how you consume the lines of the file, and add a\ndelay after writing each word."},{"content":"Replace the <ph id=\"ph1\">`Console.WriteLine(line)`</ph> statement in the <ph id=\"ph2\">`Main`</ph> method with the following block:","pos":[7627,7721],"source":" Replace the `Console.WriteLine(line)` statement\nin the `Main` method with the following block:"},{"pos":[7961,8118],"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class is in the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks&gt;</ph> namespace, so you need to add that <ph id=\"ph3\">`using`</ph> statement at the top of file:","source":"The <xref:System.Threading.Tasks.Task> class is in the <xref:System.Threading.Tasks> namespace, so you need\nto add that `using` statement at the top of file:"},{"content":"Run the sample, and check the output.","pos":[8165,8202]},{"content":"Now, each single word is printed, followed by a 200 ms delay.","pos":[8203,8264],"source":" Now, each single word is printed,\nfollowed by a 200 ms delay."},{"content":"However, the displayed output shows some issues because the source text file has several lines that have more than 80 characters without a line break.","pos":[8265,8415],"source":" However, the displayed output shows some\nissues because the source text file has several lines that have more than\n80 characters without a line break."},{"content":"That can be hard to read while it's scrolling by.","pos":[8416,8465],"source":" That can be hard to read while it's\nscrolling by."},{"content":"That’s easy to fix.","pos":[8466,8485]},{"content":"You’ll just keep track of the length of each line, and generate a new line whenever the line length reaches a certain threshold.","pos":[8486,8614],"source":" You’ll just keep track of the length of\neach line, and generate a new line whenever the line length reaches a\ncertain threshold."},{"content":"Declare a local variable after the declaration of <ph id=\"ph1\">`words`</ph> in the <ph id=\"ph2\">`ReadFrom`</ph> method that holds the line length:","pos":[8615,8725],"source":" Declare a local variable after the declaration of\n`words` in the `ReadFrom` method that holds the line length:"},{"pos":[8762,8865],"content":"Then, add the following code after the <ph id=\"ph1\">`yield return word + \" \";`</ph> statement (before the closing brace):","source":"Then, add the following code after the `yield return word + \" \";` statement\n(before the closing brace):"},{"pos":[8996,9072],"content":"Run the sample, and you’ll be able to read aloud at its pre-configured pace.","source":"Run the sample, and you’ll be able to read aloud at its pre-configured\npace."},{"pos":[9077,9088],"content":"Async Tasks","linkify":"Async Tasks","nodes":[{"content":"Async Tasks","pos":[0,11]}]},{"content":"In this final step, you’ll add the code to write the output asynchronously in one task, while also running another task to read input from the user if they want to speed up or slow down the text display, or stop the text display altogether.","pos":[9090,9330],"source":"In this final step, you’ll add the code to write the output asynchronously\nin one task, while also running another task to read input from the user\nif they want to speed up or slow down the text display, or stop the text display altogether."},{"content":"This has a few steps in it and by the end, you’ll have all the updates that you need.","pos":[9331,9417],"source":" \nThis has a few steps in it and by the end, you’ll have all the updates that you need."},{"content":"The first step is to create an asynchronous <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> returning method that represents the code you’ve created so far to read and display the file.","pos":[9418,9590],"source":"\nThe first step is to create an asynchronous <xref:System.Threading.Tasks.Task> returning method that\nrepresents the code you’ve created so far to read and display the file."},{"pos":[9592,9681],"content":"Add this method to your <ph id=\"ph1\">`Program`</ph> class (it’s taken from the body of your <ph id=\"ph2\">`Main`</ph> method):","source":"Add this method to your `Program` class (it’s taken from the body of your\n`Main` method):"},{"content":"You’ll notice two changes.","pos":[9967,9993]},{"content":"First, in the body of the method, instead of calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait&gt;</ph> to synchronously wait for a task to finish, this version uses the <ph id=\"ph2\">`await`</ph> keyword.","pos":[9994,10169],"source":" First, in the body of the method, instead of\ncalling <xref:System.Threading.Tasks.Task.Wait> to synchronously wait for a task to finish, this version\nuses the `await` keyword."},{"content":"In order to do that, you need to add the <ph id=\"ph1\">`async`</ph> modifier to the method signature.","pos":[10170,10252],"source":" In order to do that, you need to add the `async`\nmodifier to the method signature."},{"content":"This method returns a <ph id=\"ph1\">`Task`</ph>.","pos":[10253,10282],"source":" This method returns a `Task`."},{"content":"Notice that there are no return statements that return a <ph id=\"ph1\">`Task`</ph> object.","pos":[10283,10354],"source":" Notice that\nthere are no return statements that return a `Task` object."},{"content":"Instead, that <ph id=\"ph1\">`Task`</ph> object is created by code the compiler generates when you use the <ph id=\"ph2\">`await`</ph> operator.","pos":[10355,10459],"source":" Instead, that\n`Task` object is created by code the compiler generates when you use the\n`await` operator."},{"content":"You can imagine that this method returns when it reaches an <ph id=\"ph1\">`await`</ph>.","pos":[10460,10528],"source":" You can imagine that this method returns when it reaches\nan `await`."},{"content":"The returned <ph id=\"ph1\">`Task`</ph> indicates that the work has not completed.","pos":[10529,10591],"source":" The returned `Task` indicates that the work has not completed."},{"content":"The method resumes when the awaited task completes.","pos":[10592,10643],"source":"\nThe method resumes when the awaited task completes."},{"content":"When it has executed to completion, the returned <ph id=\"ph1\">`Task`</ph> indicates that it is complete.","pos":[10644,10730],"source":" When it has executed\nto completion, the returned `Task` indicates that it is complete."},{"content":"Calling code can monitor that returned <ph id=\"ph1\">`Task`</ph> to determine when it has completed.","pos":[10731,10812],"source":"\nCalling code can\nmonitor that returned `Task` to determine when it has completed."},{"pos":[10814,10865],"content":"You can call this new method in your <ph id=\"ph1\">`Main`</ph> method:","source":"You can call this new method in your `Main` method:"},{"content":"Here, in <ph id=\"ph1\">`Main`</ph>, the code does synchronously wait.","pos":[10909,10959],"source":"Here, in `Main`, the code does synchronously wait."},{"content":"You should use the <ph id=\"ph1\">`await`</ph> operator instead of synchronously waiting whenever possible.","pos":[10960,11047],"source":" You should use the\n`await` operator instead of synchronously waiting whenever possible."},{"content":"But, in a console application’s <ph id=\"ph1\">`Main`</ph> method, you cannot use the <ph id=\"ph2\">`await`</ph> operator.","pos":[11048,11131],"source":" But,\nin a console application’s `Main` method, you cannot use the `await`\noperator."},{"content":"That would result in the application exiting before all tasks have completed.","pos":[11132,11209],"source":" That would result in the application exiting before all tasks\nhave completed."},{"pos":[11213,11355],"content":"[!NOTE]\nIf you use C# 7.1 or later, you can create console applications with [`async` `Main` method](../whats-new/csharp-7-1.md#async-main).","leadings":["","> "],"nodes":[{"content":"If you use C# 7.1 or later, you can create console applications with <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`async`</ph> <ph id=\"ph2\">`Main`</ph> method<ept id=\"p1\">](../whats-new/csharp-7-1.md#async-main)</ept>.","pos":[8,140],"source":"If you use C# 7.1 or later, you can create console applications with [`async` `Main` method](../whats-new/csharp-7-1.md#async-main)."}]},{"content":"Next, you need to write the second asynchronous method to read from the Console and watch for the ‘&lt;’ (less than), ‘&gt;’ (greater than) and ‘X’ or ‘x’ keys.","pos":[11357,11511],"source":"Next, you need to write the second asynchronous method to read from the\nConsole and watch for the ‘<’ (less than), ‘>’ (greater than) and ‘X’ or ‘x’ keys."},{"content":"Here’s the method you add for that task:","pos":[11512,11552],"source":" Here’s the method you add for\nthat task:"},{"content":"This creates a lambda expression to represent an <ph id=\"ph1\">&lt;xref:System.Action&gt;</ph> delegate that reads a key from the Console and modifies a local variable representing the delay when the user presses the ‘&lt;’ (less than) or ‘&gt;’ (greater than) keys.","pos":[12081,12316],"source":"This creates a lambda expression to represent an <xref:System.Action> delegate that reads a key\nfrom the Console and modifies a local variable representing the delay when\nthe user presses the ‘<’ (less than) or ‘>’ (greater than) keys."},{"content":"The delegate method finishes when user presses the ‘X’ or ‘x’  keys, which allow the user to stop the text display at any time.","pos":[12317,12444],"source":" The delegate method finishes when user presses\nthe ‘X’ or ‘x’  keys, which allow the user to stop the text display at any time."},{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Console.ReadKey&gt;</ph> to block and wait for the user to press a key.","pos":[12445,12538],"source":"\nThis method uses <xref:System.Console.ReadKey> to block and wait for the user to press a key."},{"pos":[12540,12746],"content":"To finish this feature, you need to create a new <ph id=\"ph1\">`async Task`</ph> returning method that starts both of these tasks (<ph id=\"ph2\">`GetInput`</ph> and <ph id=\"ph3\">`ShowTeleprompter`</ph>), and also manages the shared data between these two tasks.","source":"To finish this feature, you need to create a new `async Task` returning\nmethod that starts both of these tasks (`GetInput` and \n`ShowTeleprompter`), and also manages the shared data between these two\ntasks."},{"content":"It’s time to create a class that can handle the shared data between these two tasks.","pos":[12748,12832],"source":"It’s time to create a class that can handle the shared data between these\ntwo tasks."},{"content":"This class contains two public properties: the delay, and a flag <ph id=\"ph1\">`Done`</ph> to indicate that the file has been completely read:","pos":[12833,12956],"source":" This class contains two public properties: the delay, and a\nflag `Done` to indicate that the file has been completely read:"},{"content":"Put that class in a new file, and enclose that class in the <ph id=\"ph1\">`TeleprompterConsole`</ph> namespace as shown above.","pos":[13498,13605],"source":"Put that class in a new file, and enclose that class in the\n`TeleprompterConsole` namespace as shown above."},{"content":"You’ll also need to add a <ph id=\"ph1\">`using static`</ph> statement so that you can reference the <ph id=\"ph2\">`Min`</ph> and <ph id=\"ph3\">`Max`</ph> methods without the enclosing class or namespace names.","pos":[13606,13758],"source":" You’ll also need to add a `using static`\nstatement so that you can reference the `Min` and `Max` methods without the\nenclosing class or namespace names."},{"content":"A <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`using static`</ph><ept id=\"p1\">](../language-reference/keywords/using-static.md)</ept> statement imports the methods from one class.","pos":[13759,13871],"source":" A [`using static`](../language-reference/keywords/using-static.md) statement imports the\nmethods from one class."},{"content":"This is in contrast with the <ph id=\"ph1\">`using`</ph> statements used up to this point that have imported all classes from a namespace.","pos":[13872,13990],"source":" This is in contrast with the `using` statements used\nup to this point that have imported all classes from a namespace."},{"content":"Next, you need to update the <ph id=\"ph1\">`ShowTeleprompter`</ph> and <ph id=\"ph2\">`GetInput`</ph> methods to use the new <ph id=\"ph3\">`config`</ph> object.","pos":[14033,14135],"source":"Next, you need to update the `ShowTeleprompter` and `GetInput` methods to\nuse the new `config` object."},{"content":"Write one final <ph id=\"ph1\">`Task`</ph> returning <ph id=\"ph2\">`async`</ph> method to start both tasks and exit when the first task finishes:","pos":[14136,14242],"source":" Write one final `Task` returning `async` method to\nstart both tasks and exit when the first task finishes:"},{"content":"The one new method here is the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])&gt;</ph> call.","pos":[14485,14595],"source":"The one new method here is the <xref:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])> call."},{"content":"That creates a <ph id=\"ph1\">`Task`</ph> that finishes as soon as any of the tasks in its argument list completes.","pos":[14596,14691],"source":" That creates a `Task`\nthat finishes as soon as any of the tasks in its argument list completes."},{"pos":[14693,14810],"content":"Next, you need to update both the <ph id=\"ph1\">`ShowTeleprompter`</ph> and <ph id=\"ph2\">`GetInput`</ph> methods to use the <ph id=\"ph3\">`config`</ph> object for the delay:","source":"Next, you need to update both the `ShowTeleprompter` and `GetInput` methods to\nuse the `config` object for the delay:"},{"content":"This new version of <ph id=\"ph1\">`ShowTeleprompter`</ph> calls a new method in the <ph id=\"ph2\">`TeleprompterConfig`</ph> class.","pos":[15641,15733],"source":"This new version of `ShowTeleprompter` calls a new method in the\n`TeleprompterConfig` class."},{"content":"Now, you need to update <ph id=\"ph1\">`Main`</ph> to call <ph id=\"ph2\">`RunTeleprompter`</ph> instead of <ph id=\"ph3\">`ShowTeleprompter`</ph>:","pos":[15734,15822],"source":" Now, you need to update `Main` to call \n`RunTeleprompter` instead of `ShowTeleprompter`:"},{"pos":[15868,15878],"content":"Conclusion","linkify":"Conclusion","nodes":[{"content":"Conclusion","pos":[0,10]}]},{"content":"This tutorial showed you a number of the features around the C# language and the .NET Core libraries related to working in Console applications.","pos":[15880,16024],"source":"This tutorial showed you a number of the features around the C# language\nand the .NET Core libraries related to working in Console applications."},{"content":"You can build on this knowledge to explore more about the language, and the classes introduced here.","pos":[16025,16125],"source":"\nYou can build on this knowledge to explore more about the language, and\nthe classes introduced here."},{"content":"You’ve seen the basics of File and Console I/O, blocking and non-blocking use of the Task-based asynchronous programming, a tour of the C# language and how C# programs are organized and the .NET Core Command Line Interface and tools.","pos":[16126,16359],"source":" You’ve seen the basics of File and Console\nI/O, blocking and non-blocking use of the Task-based asynchronous\nprogramming, a tour of the C# language and how C# programs are\norganized and the .NET Core Command Line Interface and tools."},{"content":"For more information about File I/O, see the <bpt id=\"p1\">[</bpt>File and Stream I/O<ept id=\"p1\">](../../standard/io/index.md)</ept> topic.","pos":[16361,16462],"source":"For more information about File I/O, see the [File and Stream I/O](../../standard/io/index.md) topic."},{"content":"For more information about asynchronous programming model used in this tutorial, see the <bpt id=\"p1\">[</bpt>Task-based Asynchronous Programming<ept id=\"p1\">](../..//standard/parallel-programming/task-based-asynchronous-programming.md)</ept> topic and the <bpt id=\"p2\">[</bpt>Asynchronous programming<ept id=\"p2\">](../async.md)</ept> topic.","pos":[16463,16727],"source":" For more information about asynchronous programming model used in this tutorial, see the [Task-based Asynchronous Programming](../..//standard/parallel-programming/task-based-asynchronous-programming.md) topic and the [Asynchronous programming](../async.md) topic."}]}