{"content":"---\ntitle: \"Client Architecture\"\nms.date: \"03/30/2017\"\nms.assetid: 02624403-0d77-41cb-9a86-ab55e98c7966\n---\n# Client Architecture\nApplications use Windows Communication Foundation (WCF) client objects to invoke service operations. This topic discusses WCF client objects, WCF client channels, and their relationships to the underlying channel architecture. For a basic overview of WCF client objects, see [WCF Client Overview](../../../../docs/framework/wcf/wcf-client-overview.md). For more information about the channel layer, see [Extending the Channel Layer](../../../../docs/framework/wcf/extending/extending-the-channel-layer.md).  \n  \n## Overview  \n The service model run time creates WCF clients, which are composed of the following:  \n  \n-   An automatically generated client implementation of a service contract, which turns calls from your application code into outgoing messages, and turns response messages into output parameters and return values that your application can retrieve.  \n  \n-   An implementation of a control interface (<xref:System.ServiceModel.IClientChannel?displayProperty=nameWithType>) that groups together various interfaces and provides access to control functionality, most notably the ability to close the client session and dispose the channel.  \n  \n-   A client channel that is built based on the configuration settings specified by the used binding.  \n  \n Applications can create such clients on demand, either through a <xref:System.ServiceModel.ChannelFactory?displayProperty=nameWithType> or by creating an instance of a <xref:System.ServiceModel.ClientBase%601> derived class as it is generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md). These ready-built client classes encapsulate and delegate to a client channel implementation that is dynamically constructed by a <xref:System.ServiceModel.ChannelFactory>. Therefore, the client channel and the channel factory that produces them are the focal point of interest for this discussion.  \n  \n## Client Objects and Client Channels  \n The base interface of WCF clients is the <xref:System.ServiceModel.IClientChannel?displayProperty=nameWithType> interface, which exposes core client functionality as well as the basic communication object functionality of <xref:System.ServiceModel.ICommunicationObject?displayProperty=nameWithType>, the context functionality of <xref:System.ServiceModel.IContextChannel?displayProperty=nameWithType>, and the extensible behavior of <xref:System.ServiceModel.IExtensibleObject%601?displayProperty=nameWithType>.  \n  \n The <xref:System.ServiceModel.IClientChannel> interface, however, does not define a service contract itself. Those are declared by the service contract interface (typically generated from service metadata using a tool like the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)). WCF client types extend both <xref:System.ServiceModel.IClientChannel> and the target service contract interface to enable applications to call operations directly and also have access to client-side run-time functionality. Creating an WCF client provides WCF<xref:System.ServiceModel.ChannelFactory?displayProperty=nameWithType> objects with the information necessary to create a run time that can connect and interact with the configured service endpoint.  \n  \n As mentioned earlier, the two WCF client types must be configured before you can use them. The simplest WCF client types are objects that derive from <xref:System.ServiceModel.ClientBase%601> (or <xref:System.ServiceModel.DuplexClientBase%601> if the service contract is a duplex contract). You can create these types by using a constructor, configured programmatically, or by using a configuration file, and then called directly to invoke service operations. For a basic overview of <xref:System.ServiceModel.ClientBase%601> objects, see [WCF Client Overview](../../../../docs/framework/wcf/wcf-client-overview.md).  \n  \n The second type is generated at run time from a call to the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A> method. Applications concerned with tight control of the communication specifics typically use this client type, called a *client channel object*, because it enables more direct interaction than the underlying client run-time and channel system.  \n  \n## Channel Factories  \n The class that is responsible for creating the underlying run time that supports client invocations is the <xref:System.ServiceModel.ChannelFactory%601?displayProperty=nameWithType> class. Both WCF client objects and WCF client channel objects use a <xref:System.ServiceModel.ChannelFactory%601> object to create instances; the <xref:System.ServiceModel.ClientBase%601> derived client object encapsulates the handling of the channel factory, but for a number of scenarios it is perfectly reasonable to use the channel factory directly. The common scenario for this is if you want to repeatedly create new client channels from an existing factory. If you are using a client object, you can obtain the underlying channel factory from a WCF client object by calling the <xref:System.ServiceModel.ClientBase%601.ChannelFactory%2A?displayProperty=nameWithType> property.  \n  \n The important thing to remember about channel factories is that they create new instances of client channels for the configuration provided to them prior to calling <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>. Once you call <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A> (or <xref:System.ServiceModel.ClientBase%601.Open%2A?displayProperty=nameWithType>, <xref:System.ServiceModel.ClientBase%601.CreateChannel%2A?displayProperty=nameWithType>, or any operation on a WCF client object), you cannot modify the channel factory and expect to get channels to different service instances, even if you are merely changing the target endpoint address. If you want to create a client object or client channel with a different configuration, you must create a new channel factory first.  \n  \n For more information about various issues using WCF client objects and WCF client channels, see [Accessing Services Using a WCF Client](../../../../docs/framework/wcf/feature-details/accessing-services-using-a-client.md).  \n  \n The following two sections describe the creation and use of WCF client channel objects.  \n  \n#### Creating a New WCF Client Channel Object  \n To illustrate the use of a client channel, assume the following service contract has been generated.  \n  \n [!code-csharp[C_GeneratedCodeFiles#12](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#12)]  \n  \n To connect to an `ISampleService` service, use the generated contract interface directly with a channel factory (<xref:System.ServiceModel.ChannelFactory%601>). Once you create and configure a channel factory for a particular contract, you can call the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A> method to return client channel objects that you can use to communicate with an `ISampleService` service.  \n  \n When using the <xref:System.ServiceModel.ChannelFactory%601> class with a service contract interface, you must cast to the <xref:System.ServiceModel.IClientChannel> interface to explicitly open, close, or abort the channel. To make it easier to work with, the Svcutil.exe tool also generates a helper interface that implements both the service contract interface and <xref:System.ServiceModel.IClientChannel> to enable you to interact with the client channel infrastructure without having to cast. The following code shows the definition of a helper client channel that implements the preceding service contract.  \n  \n [!code-csharp[C_GeneratedCodeFiles#13](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#13)]  \n  \n#### Creating a New WCF Client Channel Object  \n To use a client channel to connect to an `ISampleService` service, use the generated contract interface (or the helper version) directly with a channel factory, passing the type of the contract interface as the type parameter. Once a channel factory for a particular contract has been created and configured, you can call the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> method to return client channel objects that you can use to communicate with an `ISampleService` service.  \n  \n When created, the client channel objects implement <xref:System.ServiceModel.IClientChannel> and the contract interface. Therefore, you can use them directly to call operations that interact with a service that supports that contract.  \n  \n The difference between using client objects and client channel objects is merely one of control and ease of use for developers. Many developers who are comfortable working with classes and objects will prefer to use the WCF client object instead of the WCF client channel.  \n  \n For an example, see [How to: Use the ChannelFactory](../../../../docs/framework/wcf/feature-details/how-to-use-the-channelfactory.md).\n","nodes":[{"pos":[4,103],"embed":true,"restype":"x-metadata","content":"title: \"Client Architecture\"\nms.date: \"03/30/2017\"\nms.assetid: 02624403-0d77-41cb-9a86-ab55e98c7966","nodes":[{"content":"Client Architecture","nodes":[{"pos":[0,19],"content":"Client Architecture","nodes":[{"content":"Client Architecture","pos":[0,19]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[110,129],"content":"Client Architecture","linkify":"Client Architecture","nodes":[{"content":"Client Architecture","pos":[0,19]}]},{"content":"Applications use Windows Communication Foundation (WCF) client objects to invoke service operations.","pos":[130,230]},{"content":"This topic discusses WCF client objects, WCF client channels, and their relationships to the underlying channel architecture.","pos":[231,356]},{"content":"For a basic overview of WCF client objects, see <bpt id=\"p1\">[</bpt>WCF Client Overview<ept id=\"p1\">](../../../../docs/framework/wcf/wcf-client-overview.md)</ept>.","pos":[357,482],"source":" For a basic overview of WCF client objects, see [WCF Client Overview](../../../../docs/framework/wcf/wcf-client-overview.md)."},{"content":"For more information about the channel layer, see <bpt id=\"p1\">[</bpt>Extending the Channel Layer<ept id=\"p1\">](../../../../docs/framework/wcf/extending/extending-the-channel-layer.md)</ept>.","pos":[483,636],"source":" For more information about the channel layer, see [Extending the Channel Layer](../../../../docs/framework/wcf/extending/extending-the-channel-layer.md)."},{"pos":[645,653],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"content":"The service model run time creates WCF clients, which are composed of the following:","pos":[657,741]},{"content":"An automatically generated client implementation of a service contract, which turns calls from your application code into outgoing messages, and turns response messages into output parameters and return values that your application can retrieve.","pos":[751,996]},{"pos":[1006,1283],"content":"An implementation of a control interface (<ph id=\"ph1\">&lt;xref:System.ServiceModel.IClientChannel?displayProperty=nameWithType&gt;</ph>) that groups together various interfaces and provides access to control functionality, most notably the ability to close the client session and dispose the channel.","source":"An implementation of a control interface (<xref:System.ServiceModel.IClientChannel?displayProperty=nameWithType>) that groups together various interfaces and provides access to control functionality, most notably the ability to close the client session and dispose the channel."},{"content":"A client channel that is built based on the configuration settings specified by the used binding.","pos":[1293,1390]},{"content":"Applications can create such clients on demand, either through a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory?displayProperty=nameWithType&gt;</ph> or by creating an instance of a <ph id=\"ph2\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> derived class as it is generated by the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.","pos":[1397,1780],"source":"Applications can create such clients on demand, either through a <xref:System.ServiceModel.ChannelFactory?displayProperty=nameWithType> or by creating an instance of a <xref:System.ServiceModel.ClientBase%601> derived class as it is generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)."},{"content":"These ready-built client classes encapsulate and delegate to a client channel implementation that is dynamically constructed by a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory&gt;</ph>.","pos":[1781,1953],"source":" These ready-built client classes encapsulate and delegate to a client channel implementation that is dynamically constructed by a <xref:System.ServiceModel.ChannelFactory>."},{"content":"Therefore, the client channel and the channel factory that produces them are the focal point of interest for this discussion.","pos":[1954,2079]},{"pos":[2088,2122],"content":"Client Objects and Client Channels","linkify":"Client Objects and Client Channels","nodes":[{"content":"Client Objects and Client Channels","pos":[0,34]}]},{"pos":[2126,2637],"content":"The base interface of WCF clients is the <ph id=\"ph1\">&lt;xref:System.ServiceModel.IClientChannel?displayProperty=nameWithType&gt;</ph> interface, which exposes core client functionality as well as the basic communication object functionality of <ph id=\"ph2\">&lt;xref:System.ServiceModel.ICommunicationObject?displayProperty=nameWithType&gt;</ph>, the context functionality of <ph id=\"ph3\">&lt;xref:System.ServiceModel.IContextChannel?displayProperty=nameWithType&gt;</ph>, and the extensible behavior of <ph id=\"ph4\">&lt;xref:System.ServiceModel.IExtensibleObject%601?displayProperty=nameWithType&gt;</ph>.","source":"The base interface of WCF clients is the <xref:System.ServiceModel.IClientChannel?displayProperty=nameWithType> interface, which exposes core client functionality as well as the basic communication object functionality of <xref:System.ServiceModel.ICommunicationObject?displayProperty=nameWithType>, the context functionality of <xref:System.ServiceModel.IContextChannel?displayProperty=nameWithType>, and the extensible behavior of <xref:System.ServiceModel.IExtensibleObject%601?displayProperty=nameWithType>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> interface, however, does not define a service contract itself.","pos":[2644,2752],"source":"The <xref:System.ServiceModel.IClientChannel> interface, however, does not define a service contract itself."},{"content":"Those are declared by the service contract interface (typically generated from service metadata using a tool like the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>).","pos":[2753,3005],"source":" Those are declared by the service contract interface (typically generated from service metadata using a tool like the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md))."},{"content":"WCF client types extend both <ph id=\"ph1\">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> and the target service contract interface to enable applications to call operations directly and also have access to client-side run-time functionality.","pos":[3006,3229],"source":" WCF client types extend both <xref:System.ServiceModel.IClientChannel> and the target service contract interface to enable applications to call operations directly and also have access to client-side run-time functionality."},{"content":"Creating an WCF client provides WCF<ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory?displayProperty=nameWithType&gt;</ph> objects with the information necessary to create a run time that can connect and interact with the configured service endpoint.","pos":[3230,3463],"source":" Creating an WCF client provides WCF<xref:System.ServiceModel.ChannelFactory?displayProperty=nameWithType> objects with the information necessary to create a run time that can connect and interact with the configured service endpoint."},{"content":"As mentioned earlier, the two WCF client types must be configured before you can use them.","pos":[3470,3560]},{"content":"The simplest WCF client types are objects that derive from <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> (or <ph id=\"ph2\">&lt;xref:System.ServiceModel.DuplexClientBase%601&gt;</ph> if the service contract is a duplex contract).","pos":[3561,3760],"source":" The simplest WCF client types are objects that derive from <xref:System.ServiceModel.ClientBase%601> (or <xref:System.ServiceModel.DuplexClientBase%601> if the service contract is a duplex contract)."},{"content":"You can create these types by using a constructor, configured programmatically, or by using a configuration file, and then called directly to invoke service operations.","pos":[3761,3929]},{"content":"For a basic overview of <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> objects, see <bpt id=\"p1\">[</bpt>WCF Client Overview<ept id=\"p1\">](../../../../docs/framework/wcf/wcf-client-overview.md)</ept>.","pos":[3930,4086],"source":" For a basic overview of <xref:System.ServiceModel.ClientBase%601> objects, see [WCF Client Overview](../../../../docs/framework/wcf/wcf-client-overview.md)."},{"content":"The second type is generated at run time from a call to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A&gt;</ph> method.","pos":[4093,4223],"source":"The second type is generated at run time from a call to the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A> method."},{"content":"Applications concerned with tight control of the communication specifics typically use this client type, called a <bpt id=\"p1\">*</bpt>client channel object<ept id=\"p1\">*</ept>, because it enables more direct interaction than the underlying client run-time and channel system.","pos":[4224,4461],"source":" Applications concerned with tight control of the communication specifics typically use this client type, called a *client channel object*, because it enables more direct interaction than the underlying client run-time and channel system."},{"pos":[4470,4487],"content":"Channel Factories","linkify":"Channel Factories","nodes":[{"content":"Channel Factories","pos":[0,17]}]},{"content":"The class that is responsible for creating the underlying run time that supports client invocations is the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601?displayProperty=nameWithType&gt;</ph> class.","pos":[4491,4679],"source":"The class that is responsible for creating the underlying run time that supports client invocations is the <xref:System.ServiceModel.ChannelFactory%601?displayProperty=nameWithType> class."},{"content":"Both WCF client objects and WCF client channel objects use a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> object to create instances; the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> derived client object encapsulates the handling of the channel factory, but for a number of scenarios it is perfectly reasonable to use the channel factory directly.","pos":[4680,5026],"source":" Both WCF client objects and WCF client channel objects use a <xref:System.ServiceModel.ChannelFactory%601> object to create instances; the <xref:System.ServiceModel.ClientBase%601> derived client object encapsulates the handling of the channel factory, but for a number of scenarios it is perfectly reasonable to use the channel factory directly."},{"content":"The common scenario for this is if you want to repeatedly create new client channels from an existing factory.","pos":[5027,5137]},{"content":"If you are using a client object, you can obtain the underlying channel factory from a WCF client object by calling the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601.ChannelFactory%2A?displayProperty=nameWithType&gt;</ph> property.","pos":[5138,5356],"source":" If you are using a client object, you can obtain the underlying channel factory from a WCF client object by calling the <xref:System.ServiceModel.ClientBase%601.ChannelFactory%2A?displayProperty=nameWithType> property."},{"content":"The important thing to remember about channel factories is that they create new instances of client channels for the configuration provided to them prior to calling <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType&gt;</ph>.","pos":[5363,5620],"source":"The important thing to remember about channel factories is that they create new instances of client channels for the configuration provided to them prior to calling <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>."},{"content":"Once you call <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A&gt;</ph> (or <ph id=\"ph2\">&lt;xref:System.ServiceModel.ClientBase%601.Open%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.ServiceModel.ClientBase%601.CreateChannel%2A?displayProperty=nameWithType&gt;</ph>, or any operation on a WCF client object), you cannot modify the channel factory and expect to get channels to different service instances, even if you are merely changing the target endpoint address.","pos":[5621,6070],"source":" Once you call <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A> (or <xref:System.ServiceModel.ClientBase%601.Open%2A?displayProperty=nameWithType>, <xref:System.ServiceModel.ClientBase%601.CreateChannel%2A?displayProperty=nameWithType>, or any operation on a WCF client object), you cannot modify the channel factory and expect to get channels to different service instances, even if you are merely changing the target endpoint address."},{"content":"If you want to create a client object or client channel with a different configuration, you must create a new channel factory first.","pos":[6071,6203]},{"pos":[6210,6431],"content":"For more information about various issues using WCF client objects and WCF client channels, see <bpt id=\"p1\">[</bpt>Accessing Services Using a WCF Client<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept>.","source":"For more information about various issues using WCF client objects and WCF client channels, see [Accessing Services Using a WCF Client](../../../../docs/framework/wcf/feature-details/accessing-services-using-a-client.md)."},{"content":"The following two sections describe the creation and use of WCF client channel objects.","pos":[6438,6525]},{"pos":[6536,6576],"content":"Creating a New WCF Client Channel Object","linkify":"Creating a New WCF Client Channel Object","nodes":[{"content":"Creating a New WCF Client Channel Object","pos":[0,40]}]},{"content":"To illustrate the use of a client channel, assume the following service contract has been generated.","pos":[6580,6680]},{"content":"To connect to an <ph id=\"ph1\">`ISampleService`</ph> service, use the generated contract interface directly with a channel factory (<ph id=\"ph2\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>).","pos":[6826,6986],"source":"To connect to an `ISampleService` service, use the generated contract interface directly with a channel factory (<xref:System.ServiceModel.ChannelFactory%601>)."},{"content":"Once you create and configure a channel factory for a particular contract, you can call the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A&gt;</ph> method to return client channel objects that you can use to communicate with an <ph id=\"ph2\">`ISampleService`</ph> service.","pos":[6987,7247],"source":" Once you create and configure a channel factory for a particular contract, you can call the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A> method to return client channel objects that you can use to communicate with an `ISampleService` service."},{"content":"When using the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> class with a service contract interface, you must cast to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> interface to explicitly open, close, or abort the channel.","pos":[7254,7477],"source":"When using the <xref:System.ServiceModel.ChannelFactory%601> class with a service contract interface, you must cast to the <xref:System.ServiceModel.IClientChannel> interface to explicitly open, close, or abort the channel."},{"content":"To make it easier to work with, the Svcutil.exe tool also generates a helper interface that implements both the service contract interface and <ph id=\"ph1\">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> to enable you to interact with the client channel infrastructure without having to cast.","pos":[7478,7751],"source":" To make it easier to work with, the Svcutil.exe tool also generates a helper interface that implements both the service contract interface and <xref:System.ServiceModel.IClientChannel> to enable you to interact with the client channel infrastructure without having to cast."},{"content":"The following code shows the definition of a helper client channel that implements the preceding service contract.","pos":[7752,7866]},{"pos":[8016,8056],"content":"Creating a New WCF Client Channel Object","linkify":"Creating a New WCF Client Channel Object","nodes":[{"content":"Creating a New WCF Client Channel Object","pos":[0,40]}]},{"content":"To use a client channel to connect to an <ph id=\"ph1\">`ISampleService`</ph> service, use the generated contract interface (or the helper version) directly with a channel factory, passing the type of the contract interface as the type parameter.","pos":[8060,8286],"source":"To use a client channel to connect to an `ISampleService` service, use the generated contract interface (or the helper version) directly with a channel factory, passing the type of the contract interface as the type parameter."},{"content":"Once a channel factory for a particular contract has been created and configured, you can call the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType&gt;</ph> method to return client channel objects that you can use to communicate with an <ph id=\"ph2\">`ISampleService`</ph> service.","pos":[8287,8583],"source":" Once a channel factory for a particular contract has been created and configured, you can call the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> method to return client channel objects that you can use to communicate with an `ISampleService` service."},{"content":"When created, the client channel objects implement <ph id=\"ph1\">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> and the contract interface.","pos":[8590,8710],"source":"When created, the client channel objects implement <xref:System.ServiceModel.IClientChannel> and the contract interface."},{"content":"Therefore, you can use them directly to call operations that interact with a service that supports that contract.","pos":[8711,8824]},{"content":"The difference between using client objects and client channel objects is merely one of control and ease of use for developers.","pos":[8831,8958]},{"content":"Many developers who are comfortable working with classes and objects will prefer to use the WCF client object instead of the WCF client channel.","pos":[8959,9103]},{"pos":[9110,9244],"content":"For an example, see <bpt id=\"p1\">[</bpt>How to: Use the ChannelFactory<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-use-the-channelfactory.md)</ept>.","source":"For an example, see [How to: Use the ChannelFactory](../../../../docs/framework/wcf/feature-details/how-to-use-the-channelfactory.md)."}]}