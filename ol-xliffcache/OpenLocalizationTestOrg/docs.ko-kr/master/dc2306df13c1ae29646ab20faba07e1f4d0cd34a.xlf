<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc2306df13c1ae29646ab20faba07e1f4d0cd34a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\advanced-text-formatting.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa90fa7a2d40ba94c9a793143c4743b93426d510</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87ea079d91735524dc707d254644099cf8f50ceb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Advanced Text Formatting | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Advanced Text Formatting</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The              <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> provides a robust set of              <ph id="ph2">[!INCLUDE[TLA#tla_api#plural](../../../../includes/tlasharptla-apisharpplural-md.md)]</ph> for including text in your application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Layout and              <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph><ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph>, such as              <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, provide the most common and general use elements for text presentation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Drawing              <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph>, such as              <ph id="ph2">&lt;xref:System.Windows.Media.GlyphRunDrawing&gt;</ph> and              <ph id="ph3">&lt;xref:System.Windows.Media.FormattedText&gt;</ph>, provide a means for including formatted text in drawings.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>At the most advanced level,              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> provides an extensible text formatting engine to control every aspect of text presentation, such as text store management, text run formatting management, and embedded object management.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic provides an introduction to              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> text formatting.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It focuses on client implementation and use of the              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> text formatting engine.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>All code examples within this document can be found in the                  <bpt id="p1">[</bpt>Advanced Text Formatting Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159965)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic assumes that you are familiar with the higher level                  <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> used for text presentation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Most user scenarios will not require the advanced text formatting                  <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> discussed in this topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For an introduction to the different text                  <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph>, see                  <bpt id="p1">[</bpt>Documents in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/documents-in-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Advanced Text Formatting</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The text layout and                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> controls in                  <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> provide formatting properties that allow you to easily include formatted text in your application.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These controls expose a number of properties to handle the presentation of text, which includes its typeface, size, and color.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Under ordinary circumstances, these controls can handle the majority of text presentation in your application.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, some advanced scenarios require the control of text storage as well as text presentation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> provides an extensible text formatting engine for this purpose.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The advanced text formatting features found in                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> consist of a text formatting engine, a text store, text runs, and formatting properties.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The text formatting engine,                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter&gt;</ph>, creates lines of text to be used for presentation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is achieved by initiating the line formatting process and calling the text formatter's                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter.FormatLine%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The text formatter retrieves text runs from your text store by calling the store's                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextRun&gt;</ph> objects are then formed into                  <ph id="ph2">&lt;xref:System.Windows.Media.TextFormatting.TextLine&gt;</ph> objects by the text formatter and given to your application for inspection or display.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Using the Text Formatter</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter&gt;</ph> is the                  <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> text formatting engine and provides services for formatting and breaking text lines.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The text formatter can handle different text character formats and paragraph styles, and includes support for international text layout.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Unlike a traditional text                  <ph id="ph1">[!INCLUDE[TLA#tla_api](../../../../includes/tlasharptla-api-md.md)]</ph>, the                  <ph id="ph2">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter&gt;</ph> interacts with a text layout client through a set of callback methods.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It requires the client to provide these methods in an implementation of the                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following diagram illustrates the text layout interaction between the client application and                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram of text layout client and TextFormatter<ept id="p1">](../../../../docs/framework/wpf/advanced/media/textformatter01.png "TextFormatter01")</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Interaction between application and TextFormatter</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The text formatter is used to retrieve formatted text lines from the text store, which is an implementation of                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is done by first creating an instance of the text formatter by using the                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter.Create%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This method creates an instance of the text formatter and sets the maximum line height and width values.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>As soon as an instance of the text formatter is created, the line creation process is started by calling the                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter.FormatLine%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter&gt;</ph> calls back to the text source to retrieve the text and formatting parameters for the runs of text that form a line.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the following example, the process of formatting a text store is shown.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter&gt;</ph> object is used to retrieve text lines from the text store and then format the text line for drawing into the                  <ph id="ph2">&lt;xref:System.Windows.Media.DrawingContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TextFormatterExample#100<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/TextFormatterExample/CSharp/Window1.xaml.cs#100)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>TextFormatterExample#100<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/TextFormatterExample/VisualBasic/Window1.xaml.vb#100)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Implementing the Client Text Store</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When you extend the text formatting engine, you are required to implement and manage all aspects of the text store.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is not a trivial task.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The text store is responsible for tracking text run properties, paragraph properties, embedded objects, and other similar content.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It also provides the text formatter with individual                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextRun&gt;</ph> objects which the text formatter uses to create                  <ph id="ph2">&lt;xref:System.Windows.Media.TextFormatting.TextLine&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To handle the virtualization of the text store, the text store must be derived from                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource&gt;</ph> defines the method the text formatter uses to retrieve text runs from the text store.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A&gt;</ph> is the method used by the text formatter to retrieve text runs used in line formatting.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The call to                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A&gt;</ph> is repeatedly made by the text formatter until one of the following conditions occurs:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A                          <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextEndOfLine&gt;</ph> or a subclass is returned.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The accumulated width of text runs exceeds the maximum line width specified in either the call to create the text formatter or the call to the text formatter's                          <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextFormatter.FormatLine%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A                          <ph id="ph1">[!INCLUDE[TLA#tla_unicode](../../../../includes/tlasharptla-unicode-md.md)]</ph> newline sequence, such as "CF", "LF", or "CRLF", is returned.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Providing Text Runs</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The core of the text formatting process is the interaction between the text formatter and the text store.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Your implementation of                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource&gt;</ph> provides the text formatter with the                  <ph id="ph2">&lt;xref:System.Windows.Media.TextFormatting.TextRun&gt;</ph> objects and the properties with which to format the text runs.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This interaction is handled by the                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A&gt;</ph> method, which is called by the text formatter.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following table shows some of the predefined                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextRun&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>TextRun Type</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The specialized text run used to pass a representation of character glyphs back to the text formatter.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The specialized text run used to provide content in which measuring, hit testing, and drawing is done in whole, such as a button or image within the text.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The specialized text run used to mark the end of a line.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The specialized text run used to mark the end of a paragraph.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The specialized text run used to mark the end of a segment, such as to end the scope affected by a previous                                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextModifier&gt;</ph> run.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The specialized text run used to mark a range of hidden characters.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The specialized text run used to modify properties of text runs in its scope.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The scope extends to the next matching                                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextEndOfSegment&gt;</ph> text run, or the next                                  <ph id="ph2">&lt;xref:System.Windows.Media.TextFormatting.TextEndOfParagraph&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Any of the predefined                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextRun&gt;</ph> objects can be subclassed.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This allows your text source to provide the text formatter with text runs that include custom data.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This text store returns                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextRun&gt;</ph> objects to the text formatter for processing.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TextFormatterExample#101<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/TextFormatterExample/CSharp/CustomTextSource.cs#101)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>TextFormatterExample#101<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/TextFormatterExample/VisualBasic/CustomTextSource.vb#101)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In this example, the text store provides the same text properties to all of the text.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Advanced text stores would need to implement their own span management to allow individual characters to have different properties.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Specifying Formatting Properties</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextRun&gt;</ph> objects are formatted by using properties provided by the text store.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>These properties come in two types,                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextParagraphProperties&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Media.TextFormatting.TextRunProperties&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextParagraphProperties&gt;</ph> handle paragraph inclusive properties such as                  <ph id="ph2">&lt;xref:System.Windows.TextAlignment&gt;</ph> and                  <ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextRunProperties&gt;</ph> are properties that can be different for each text run within a paragraph, such as foreground brush,                  <ph id="ph2">&lt;xref:System.Windows.Media.Typeface&gt;</ph>, and font size.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To implement custom paragraph and custom text run property types, your application must create classes that derive from                  <ph id="ph1">&lt;xref:System.Windows.Media.TextFormatting.TextParagraphProperties&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Media.TextFormatting.TextRunProperties&gt;</ph> respectively.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Typography in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/typography-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Documents in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/documents-in-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>