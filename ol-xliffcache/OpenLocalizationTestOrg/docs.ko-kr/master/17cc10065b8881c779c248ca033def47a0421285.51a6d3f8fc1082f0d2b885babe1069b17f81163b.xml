{"content":"---\ntitle: \"Introducing XML Serialization | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"XML serialization, about XML serialization\"\n  - \"ICollection interface, serializing\"\n  - \"XmlSerializer class, serializing\"\n  - \"serialization, about serialization\"\n  - \"DataSet class, serializing\"\n  - \"XML Schema, serializing\"\nms.assetid: 8c63200d-db63-4a03-a93d-21641623df62\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Introducing XML Serialization\nSerialization is the process of converting an object into a form that can be readily transported. For example, you can serialize an object and transport it over the Internet using HTTP between a client and a server. On the other end, deserialization reconstructs the object from the stream.  \n  \n XML serialization serializes only the public fields and property values of an object into an XML stream. XML serialization does not include type information. For example, if you have a **Book** object that exists in the **Library** namespace, there is no guarantee that it is deserialized into an object of the same type.  \n  \n> [!NOTE]\n>  XML serialization does not convert methods, indexers, private fields, or read-only properties (except read-only collections). To serialize all an object's fields and properties, both public and private, use the <xref:System.Runtime.Serialization.DataContractSerializer> instead of XML serialization.  \n  \n The central class in XML serialization is the [XmlSerializer](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx) class, and the most important methods in this class are the **Serialize** and **Deserialize** methods. The <xref:System.Xml.Serialization.XmlSerializer> creates C# files and compiles them into .dll files to perform this serialization. In .NET Framework 2.0, the [XML Serializer Generator Tool (Sgen.exe)](../../../docs/framework/serialization/xml-serializer-generator-tool-sgen-exe.md) is designed to generate these serialization assemblies in advance to be deployed with your application and improve startup performance. The XML stream generated by the **XmlSerializer** is compliant with the World Wide Web Consortium (www.w3.org) XML Schema definition language (XSD) 1.0 recommendation. Furthermore, the data types generated are compliant with the document titled \"XML Schema Part 2: Datatypes.\"  \n  \n The data in your objects is described using programming language constructs like classes, fields, properties, primitive types, arrays, and even embedded XML in the form of **XmlElement** or **XmlAttribute** objects. You have the option of creating your own classes, annotated with attributes, or using the XML Schema Definition tool to generate the classes based on an existing XML Schema.  \n  \n If you have an XML Schema, you can run the XML Schema Definition tool to produce a set of classes that are strongly typed to the schema and annotated with attributes. When an instance of such a class is serialized, the generated XML adheres to the XML Schema. Provided with such a class, you can program against an easily manipulated object model while being assured that the generated XML conforms to the XML schema. This is an alternative to using other classes in the .NET Framework, such as the **XmlReader** and **XmlWriter** classes, to parse and write an XML stream. For more information, see [XML Documents and Data](../../../docs/standard/data/xml/index.md). These classes allow you to parse any XML stream. In contrast, use the **XmlSerializer** when the XML stream is expected to conform to a known XML Schema.  \n  \n Attributes control the XML stream generated by the **XmlSerializer** class, allowing you to set the XML namespace, element name, attribute name, and so on, of the XML stream. For more information about these attributes and how they control XML serialization, see [Controlling XML Serialization Using Attributes](../../../docs/framework/serialization/controlling-xml-serialization-using-attributes.md). For a table of those attributes that are used to control the generated XML, see [Attributes That Control XML Serialization](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md).  \n  \n The **XmlSerializer** class can further serialize an object and generate an encoded SOAP XML stream. The generated XML adheres to section 5 of the World Wide Web Consortium document titled \"Simple Object Access Protocol (SOAP) 1.1.\" For more information about this process, see [How to: Serialize an Object as a SOAP-Encoded XML Stream](../../../docs/framework/serialization/how-to-serialize-an-object-as-a-soap-encoded-xml-stream.md). For a table of the attributes that control the generated XML, see [Attributes That Control Encoded SOAP Serialization](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md).  \n  \n The **XmlSerializer** class generates the SOAP messages created by, and passed to, XML Web services. To control the SOAP messages, you can apply attributes to the classes, return values, parameters, and fields found in an XML Web service file (.asmx). You can use both the attributes listed in \"Attributes That Control XML Serialization\" and \"Attributes That Control Encoded SOAP Serialization\" because an XML Web service can use either the literal or encoded SOAP style. For more information about using attributes to control the XML generated by an XML Web service, see [XML Serialization with XML Web Services](../../../docs/framework/serialization/xml-serialization-with-xml-web-services.md). For more information about SOAP and XML Web services, see [Customizing SOAP Messages](https://msdn.microsoft.com/en-us/subscriptions/index/dkwy2d72\\(v=vs.71\\).aspx).  \n  \n## Security Considerations for XmlSerializer Applications  \n When creating an application that uses the **XmlSerializer**, you should be aware of the following items and their implications:  \n  \n-   The **XmlSerializer** creates C# (.cs) files and compiles them into .dll files in the directory named by the TEMP environment variable; serialization occurs with those DLLs.  \n  \n    > [!NOTE]\n    >  These serialization assemblies can be generated in advance and signed by using the SGen.exe tool. This does not work a server of Web services. In other words, it is only for client use and for manual serialization.  \n  \n     The code and the DLLs are vulnerable to a malicious process at the time of creation and compilation. When using a computer running Microsoft Windows NT 4.0 or later, it might be possible for two or more users to share the TEMP directory. Sharing a TEMP directory is dangerous if the two accounts have different security privileges and the higher-privilege account runs an application using the **XmlSerializer**. In this case, one user can breach the computer's security by replacing either the .cs or .dll file that is compiled. To eliminate this concern, always be sure that each account on the computer has its own profile. By default, the TEMP environment variable points to a different directory for each account.  \n  \n-   If a malicious user sends a continuous stream of XML data to a Web server (a denial of service attack), then the **XmlSerializer** continues to process the data until the computer runs low on resources.  \n  \n     This kind of attack is eliminated if you are using a computer running Internet Information Services (IIS), and your application is running within IIS. IIS features a gate that does not process streams longer than a set amount (the default is 4 KB). If you create an application that does not use IIS and deserializes with the **XmlSerializer**, you should implement a similar gate that prevents a denial of service attack.  \n  \n-   The **XmlSerializer** serializes data and runs any code using any type given to it.  \n  \n     There are two ways in which a malicious object presents a threat. It could run malicious code or it could inject malicious code into the C# file created by the **XmlSerializer**. In the first case, if a malicious object tries to run a destructive procedure, code access security helps prevent any damage from being done. In the second case, there is a theoretical possibility that a malicious object may somehow inject code into the C# file created by the **XmlSerializer**. Although this issue has been examined thoroughly, and such an attack is considered unlikely, you should take the precaution of never serializing data with an unknown and untrusted type.  \n  \n-   Serialized sensitive data might be vulnerable.  \n  \n     After the **XmlSerializer**has serialized data, it can be stored as an XML file or other data store. If your data store is available to other processes, or is visible on an intranet or the Internet, the data can be stolen and used maliciously. For example, if you create an application that serializes orders that include credit card numbers, the data is highly sensitive. To help prevent this, always protect the store for your data and take steps to keep it private.  \n  \n## Serialization of a Simple Class  \n The following code example shows a basic class with a public field.  \n  \n```vb  \nPublic Class OrderForm  \n    Public OrderDate As DateTime  \nEnd Class  \n  \n```  \n  \n```csharp  \npublic class OrderForm  \n{  \n    public DateTime OrderDate;  \n}  \n```  \n  \n When an instance of this class is serialized, it might resemble the following.  \n  \n```  \n<OrderForm>  \n    <OrderDate>12/12/01</OrderDate>  \n</OrderForm>  \n```  \n  \n For more examples of serialization, see [Examples of XML Serialization](../../../docs/framework/serialization/examples-of-xml-serialization.md).  \n  \n## Items That Can Be Serialized  \n The following items can be serialized using the **XmLSerializer** class:  \n  \n-   Public read/write properties and fields of public classes.  \n  \n-   Classes that implement **ICollection** or **IEnumerable**.  \n  \n    > [!NOTE]\n    >  Only collections are serialized, not public properties.  \n  \n-   **XmlElement** objects.  \n  \n-   **XmlNode** objects.  \n  \n-   **DataSet** objects.  \n  \n For more information about serializing or deserializing objects, see [How to: Serialize an Object](../../../docs/framework/serialization/how-to-serialize-an-object.md) and [How to: Deserialize an Object](../../../docs/framework/serialization/how-to-deserialize-an-object.md).  \n  \n## Advantages of Using XML Serialization  \n The **XmlSerializer**class gives you complete and flexible control when you serialize an object as XML. If you are creating an XML Web service, you can apply attributes that control serialization to classes and members to ensure that the XML output conforms to a specific schema.  \n  \n For example, **XmlSerializer** enables you to:  \n  \n-   Specify whether a field or property should be encoded as an attribute or an element.  \n  \n-   Specify an XML namespace to use.  \n  \n-   Specify the name of an element or attribute if a field or property name is inappropriate.  \n  \n Another advantage of XML serialization is that you have no constraints on the applications you develop, as long as the XML stream that is generated conforms to a given schema. Imagine a schema that is used to describe books. It features a title, author, publisher, and ISBN number element. You can develop an application that processes the XML data in any way you want, for example, as a book order, or as an inventory of books. In either case, the only requirement is that the XML stream conforms to the specified XML Schema definition language (XSD) schema.  \n  \n## XML Serialization Considerations  \n The following should be considered when using the **XmlSerializer** class:  \n  \n-   The Sgen.exe tool is expressly designed to generate serialization assemblies for optimum performance.  \n  \n-   The serialized data contains only the data itself and the structure of your classes. Type identity and assembly information are not included.  \n  \n-   Only public properties and fields can be serialized. Properties must have public accessors (get and set methods). If you must serialize non-public data, use the <xref:System.Runtime.Serialization.DataContractSerializer> class rather than XML serialization.  \n  \n-   A class must have a default constructor to be serialized by **XmlSerializer**.  \n  \n-   Methods cannot be serialized.  \n  \n-   **XmlSerializer** can process classes that implement **IEnumerable** or **ICollection** differently if they meet certain requirements, as follows.  \n  \n     A class that implements **IEnumerable** must implement a public **Add** method that takes a single parameter. The **Add** method's parameter must be consistent (polymorphic) with the type returned from the **IEnumerator.Current** property returned from the **GetEnumerator** method.  \n  \n     A class that implements **ICollection** in addition to **IEnumerable** (such as **CollectionBase**) must have a public **Item** indexed property (an indexer in C#) that takes an integer and it must have a public **Count** property of type **integer**. The parameter passed to the **Add** method must be the same type as that returned from the **Item** property, or one of that type's bases.  \n  \n     For classes that implement **ICollection**, values to be serialized are retrieved from the indexed **Item** property rather than by calling **GetEnumerator**. Also, public fields and properties are not serialized, with the exception of public fields that return another collection class (one that implements **ICollection**). For an example, see [Examples of XML Serialization](../../../docs/framework/serialization/examples-of-xml-serialization.md).  \n  \n## XSD Data Type Mapping  \n The World Wide Web Consortium (www.w3.org) document titled \"XML Schema Part 2: Datatypes\" specifies the simple data types that are allowed in an XML Schema definition language (XSD) schema. For many of these (for example, **int** and **decimal**), there is a corresponding data type in the .NET Framework. However, some XML data types do not have a corresponding data type in the .NET Framework (for example, the **NMTOKEN** data type). In such cases, if you use the XML Schema Definition tool ([XML Schema Definition Tool (Xsd.exe)](../../../docs/framework/serialization/xml-schema-definition-tool-xsd-exe.md)) to generate classes from a schema, an appropriate attribute is applied to a member of type string, and its **DataType** property is set to the XML data type name. For example, if a schema contains an element named \"MyToken\" with the XML data type **NMTOKEN**, the generated class might contain a member as shown in the following example.  \n  \n```vb  \n<XmlElement(DataType:=\"NMTOKEN\")> _  \nPublic MyToken As String  \n  \n```  \n  \n```csharp  \n[XmlElement(DataType = \"NMTOKEN\")]  \npublic string MyToken;  \n```  \n  \n Similarly, if you are creating a class that must conform to a specific XML Schema (XSD), you should apply the appropriate attribute and set its **DataType** property to the desired XML data type name.  \n  \n For a complete list of type mappings, see the **DataType**property for any of the following attribute classes:  \n  \n-   <xref:System.Xml.Serialization.SoapAttributeAttribute>  \n  \n-   <xref:System.Xml.Serialization.SoapElementAttribute>  \n  \n-   <xref:System.Xml.Serialization.XmlArrayItemAttribute>  \n  \n-   <xref:System.Xml.Serialization.XmlAttributeAttribute>  \n  \n-   <xref:System.Xml.Serialization.XmlElementAttribute>  \n  \n-   <xref:System.Xml.Serialization.XmlRootAttribute>  \n  \n## See Also  \n <xref:System.Xml.Serialization.XmlSerializer>   \n <xref:System.Runtime.Serialization.DataContractSerializer>   \n <xref:System.IO.FileStream>   \n [XML and SOAP Serialization](../../../docs/framework/serialization/xml-and-soap-serialization.md)   \n [Binary Serialization](../../../docs/framework/serialization/binary-serialization.md)   \n [Serialization](../../../docs/framework/serialization/index.md)   \n [XmlSerializer](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx)   \n [Examples of XML Serialization](../../../docs/framework/serialization/examples-of-xml-serialization.md)   \n [How to: Serialize an Object](../../../docs/framework/serialization/how-to-serialize-an-object.md)   \n [How to: Deserialize an Object](../../../docs/framework/serialization/how-to-deserialize-an-object.md)","nodes":[{"pos":[12,58],"content":"Introducing XML Serialization | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Introducing XML Serialization | Microsoft Docs","pos":[0,46]}]},{"pos":[635,664],"content":"Introducing XML Serialization","linkify":"Introducing XML Serialization","nodes":[{"content":"Introducing XML Serialization","pos":[0,29]}]},{"content":"Serialization is the process of converting an object into a form that can be readily transported.","pos":[665,762]},{"content":"For example, you can serialize an object and transport it over the Internet using HTTP between a client and a server.","pos":[763,880]},{"content":"On the other end, deserialization reconstructs the object from the stream.","pos":[881,955]},{"content":"XML serialization serializes only the public fields and property values of an object into an XML stream.","pos":[962,1066]},{"content":"XML serialization does not include type information.","pos":[1067,1119]},{"content":"For example, if you have a <bpt id=\"p1\">**</bpt>Book<ept id=\"p1\">**</ept> object that exists in the <bpt id=\"p2\">**</bpt>Library<ept id=\"p2\">**</ept> namespace, there is no guarantee that it is deserialized into an object of the same type.","pos":[1120,1283],"source":" For example, if you have a **Book** object that exists in the **Library** namespace, there is no guarantee that it is deserialized into an object of the same type."},{"pos":[1291,1601],"content":"[!NOTE]\n XML serialization does not convert methods, indexers, private fields, or read-only properties (except read-only collections). To serialize all an object's fields and properties, both public and private, use the <xref:System.Runtime.Serialization.DataContractSerializer> instead of XML serialization.","leadings":["","> "],"nodes":[{"content":" XML serialization does not convert methods, indexers, private fields, or read-only properties (except read-only collections). To serialize all an object's fields and properties, both public and private, use the <xref:System.Runtime.Serialization.DataContractSerializer> instead of XML serialization.","pos":[8,308],"nodes":[{"content":"XML serialization does not convert methods, indexers, private fields, or read-only properties (except read-only collections).","pos":[1,126]},{"content":"To serialize all an object's fields and properties, both public and private, use the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> instead of XML serialization.","pos":[127,300],"source":" To serialize all an object's fields and properties, both public and private, use the <xref:System.Runtime.Serialization.DataContractSerializer> instead of XML serialization."}]}]},{"content":"The central class in XML serialization is the <bpt id=\"p1\">[</bpt>XmlSerializer<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx)</ept> class, and the most important methods in this class are the <bpt id=\"p2\">**</bpt>Serialize<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Deserialize<ept id=\"p3\">**</ept> methods.","pos":[1608,1858],"source":"The central class in XML serialization is the [XmlSerializer](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx) class, and the most important methods in this class are the **Serialize** and **Deserialize** methods."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> creates C# files and compiles them into .dll files to perform this serialization.","pos":[1859,1990],"source":" The <xref:System.Xml.Serialization.XmlSerializer> creates C# files and compiles them into .dll files to perform this serialization."},{"content":"In .NET Framework 2.0, the <bpt id=\"p1\">[</bpt>XML Serializer Generator Tool (Sgen.exe)<ept id=\"p1\">](../../../docs/framework/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept> is designed to generate these serialization assemblies in advance to be deployed with your application and improve startup performance.","pos":[1991,2277],"source":" In .NET Framework 2.0, the [XML Serializer Generator Tool (Sgen.exe)](../../../docs/framework/serialization/xml-serializer-generator-tool-sgen-exe.md) is designed to generate these serialization assemblies in advance to be deployed with your application and improve startup performance."},{"content":"The XML stream generated by the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> is compliant with the World Wide Web Consortium (www.w3.org) XML Schema definition language (XSD) 1.0 recommendation.","pos":[2278,2445],"source":" The XML stream generated by the **XmlSerializer** is compliant with the World Wide Web Consortium (www.w3.org) XML Schema definition language (XSD) 1.0 recommendation."},{"content":"Furthermore, the data types generated are compliant with the document titled \"XML Schema Part 2: Datatypes.\"","pos":[2446,2554]},{"content":"The data in your objects is described using programming language constructs like classes, fields, properties, primitive types, arrays, and even embedded XML in the form of <bpt id=\"p1\">**</bpt>XmlElement<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>XmlAttribute<ept id=\"p2\">**</ept> objects.","pos":[2561,2776],"source":"The data in your objects is described using programming language constructs like classes, fields, properties, primitive types, arrays, and even embedded XML in the form of **XmlElement** or **XmlAttribute** objects."},{"content":"You have the option of creating your own classes, annotated with attributes, or using the XML Schema Definition tool to generate the classes based on an existing XML Schema.","pos":[2777,2950]},{"content":"If you have an XML Schema, you can run the XML Schema Definition tool to produce a set of classes that are strongly typed to the schema and annotated with attributes.","pos":[2957,3123]},{"content":"When an instance of such a class is serialized, the generated XML adheres to the XML Schema.","pos":[3124,3216]},{"content":"Provided with such a class, you can program against an easily manipulated object model while being assured that the generated XML conforms to the XML schema.","pos":[3217,3374]},{"content":"This is an alternative to using other classes in the .NET Framework, such as the <bpt id=\"p1\">**</bpt>XmlReader<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>XmlWriter<ept id=\"p2\">**</ept> classes, to parse and write an XML stream.","pos":[3375,3530],"source":" This is an alternative to using other classes in the .NET Framework, such as the **XmlReader** and **XmlWriter** classes, to parse and write an XML stream."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XML Documents and Data<ept id=\"p1\">](../../../docs/standard/data/xml/index.md)</ept>.","pos":[3531,3624],"source":" For more information, see [XML Documents and Data](../../../docs/standard/data/xml/index.md)."},{"content":"These classes allow you to parse any XML stream.","pos":[3625,3673]},{"content":"In contrast, use the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> when the XML stream is expected to conform to a known XML Schema.","pos":[3674,3778],"source":" In contrast, use the **XmlSerializer** when the XML stream is expected to conform to a known XML Schema."},{"content":"Attributes control the XML stream generated by the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> class, allowing you to set the XML namespace, element name, attribute name, and so on, of the XML stream.","pos":[3785,3959],"source":"Attributes control the XML stream generated by the **XmlSerializer** class, allowing you to set the XML namespace, element name, attribute name, and so on, of the XML stream."},{"content":"For more information about these attributes and how they control XML serialization, see <bpt id=\"p1\">[</bpt>Controlling XML Serialization Using Attributes<ept id=\"p1\">](../../../docs/framework/serialization/controlling-xml-serialization-using-attributes.md)</ept>.","pos":[3960,4186],"source":" For more information about these attributes and how they control XML serialization, see [Controlling XML Serialization Using Attributes](../../../docs/framework/serialization/controlling-xml-serialization-using-attributes.md)."},{"content":"For a table of those attributes that are used to control the generated XML, see <bpt id=\"p1\">[</bpt>Attributes That Control XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept>.","pos":[4187,4395],"source":" For a table of those attributes that are used to control the generated XML, see [Attributes That Control XML Serialization](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)."},{"content":"The <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> class can further serialize an object and generate an encoded SOAP XML stream.","pos":[4402,4502],"source":"The **XmlSerializer** class can further serialize an object and generate an encoded SOAP XML stream."},{"content":"The generated XML adheres to section 5 of the World Wide Web Consortium document titled \"Simple Object Access Protocol (SOAP) 1.1.\"","pos":[4503,4634]},{"content":"For more information about this process, see <bpt id=\"p1\">[</bpt>How to: Serialize an Object as a SOAP-Encoded XML Stream<ept id=\"p1\">](../../../docs/framework/serialization/how-to-serialize-an-object-as-a-soap-encoded-xml-stream.md)</ept>.","pos":[4635,4837],"source":" For more information about this process, see [How to: Serialize an Object as a SOAP-Encoded XML Stream](../../../docs/framework/serialization/how-to-serialize-an-object-as-a-soap-encoded-xml-stream.md)."},{"content":"For a table of the attributes that control the generated XML, see <bpt id=\"p1\">[</bpt>Attributes That Control Encoded SOAP Serialization<ept id=\"p1\">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept>.","pos":[4838,5050],"source":" For a table of the attributes that control the generated XML, see [Attributes That Control Encoded SOAP Serialization](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)."},{"content":"The <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> class generates the SOAP messages created by, and passed to, XML Web services.","pos":[5057,5157],"source":"The **XmlSerializer** class generates the SOAP messages created by, and passed to, XML Web services."},{"content":"To control the SOAP messages, you can apply attributes to the classes, return values, parameters, and fields found in an XML Web service file (.asmx).","pos":[5158,5308]},{"content":"You can use both the attributes listed in \"Attributes That Control XML Serialization\" and \"Attributes That Control Encoded SOAP Serialization\" because an XML Web service can use either the literal or encoded SOAP style.","pos":[5309,5528]},{"content":"For more information about using attributes to control the XML generated by an XML Web service, see <bpt id=\"p1\">[</bpt>XML Serialization with XML Web Services<ept id=\"p1\">](../../../docs/framework/serialization/xml-serialization-with-xml-web-services.md)</ept>.","pos":[5529,5753],"source":" For more information about using attributes to control the XML generated by an XML Web service, see [XML Serialization with XML Web Services](../../../docs/framework/serialization/xml-serialization-with-xml-web-services.md)."},{"content":"For more information about SOAP and XML Web services, see <bpt id=\"p1\">[</bpt>Customizing SOAP Messages<ept id=\"p1\">](https://msdn.microsoft.com/en-us/subscriptions/index/dkwy2d72\\(v=vs.71\\).aspx)</ept>.","pos":[5754,5919],"source":" For more information about SOAP and XML Web services, see [Customizing SOAP Messages](https://msdn.microsoft.com/en-us/subscriptions/index/dkwy2d72\\(v=vs.71\\).aspx)."},{"pos":[5928,5982],"content":"Security Considerations for XmlSerializer Applications","linkify":"Security Considerations for XmlSerializer Applications","nodes":[{"content":"Security Considerations for XmlSerializer Applications","pos":[0,54]}]},{"pos":[5986,6114],"content":"When creating an application that uses the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept>, you should be aware of the following items and their implications:","source":"When creating an application that uses the **XmlSerializer**, you should be aware of the following items and their implications:"},{"pos":[6124,6297],"content":"The <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> creates C# (.cs) files and compiles them into .dll files in the directory named by the TEMP environment variable; serialization occurs with those DLLs.","source":"The **XmlSerializer** creates C# (.cs) files and compiles them into .dll files in the directory named by the TEMP environment variable; serialization occurs with those DLLs."},{"pos":[6309,6538],"content":"[!NOTE]\nThese serialization assemblies can be generated in advance and signed by using the SGen.exe tool. This does not work a server of Web services. In other words, it is only for client use and for manual serialization.","leadings":["","    >  "],"nodes":[{"content":"These serialization assemblies can be generated in advance and signed by using the SGen.exe tool. This does not work a server of Web services. In other words, it is only for client use and for manual serialization.","pos":[8,222],"nodes":[{"content":"These serialization assemblies can be generated in advance and signed by using the SGen.exe tool.","pos":[0,97]},{"content":"This does not work a server of Web services.","pos":[98,142]},{"content":"In other words, it is only for client use and for manual serialization.","pos":[143,214]}]}]},{"content":"The code and the DLLs are vulnerable to a malicious process at the time of creation and compilation.","pos":[6549,6649]},{"content":"When using a computer running Microsoft Windows NT 4.0 or later, it might be possible for two or more users to share the TEMP directory.","pos":[6650,6786]},{"content":"Sharing a TEMP directory is dangerous if the two accounts have different security privileges and the higher-privilege account runs an application using the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept>.","pos":[6787,6961],"source":" Sharing a TEMP directory is dangerous if the two accounts have different security privileges and the higher-privilege account runs an application using the **XmlSerializer**."},{"content":"In this case, one user can breach the computer's security by replacing either the .cs or .dll file that is compiled.","pos":[6962,7078]},{"content":"To eliminate this concern, always be sure that each account on the computer has its own profile.","pos":[7079,7175]},{"content":"By default, the TEMP environment variable points to a different directory for each account.","pos":[7176,7267]},{"pos":[7277,7479],"content":"If a malicious user sends a continuous stream of XML data to a Web server (a denial of service attack), then the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> continues to process the data until the computer runs low on resources.","source":"If a malicious user sends a continuous stream of XML data to a Web server (a denial of service attack), then the **XmlSerializer** continues to process the data until the computer runs low on resources."},{"content":"This kind of attack is eliminated if you are using a computer running Internet Information Services (IIS), and your application is running within IIS.","pos":[7490,7640]},{"content":"IIS features a gate that does not process streams longer than a set amount (the default is 4 KB).","pos":[7641,7738]},{"content":"If you create an application that does not use IIS and deserializes with the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept>, you should implement a similar gate that prevents a denial of service attack.","pos":[7739,7912],"source":" If you create an application that does not use IIS and deserializes with the **XmlSerializer**, you should implement a similar gate that prevents a denial of service attack."},{"pos":[7922,8005],"content":"The <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> serializes data and runs any code using any type given to it.","source":"The **XmlSerializer** serializes data and runs any code using any type given to it."},{"content":"There are two ways in which a malicious object presents a threat.","pos":[8016,8081]},{"content":"It could run malicious code or it could inject malicious code into the C# file created by the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept>.","pos":[8082,8194],"source":" It could run malicious code or it could inject malicious code into the C# file created by the **XmlSerializer**."},{"content":"In the first case, if a malicious object tries to run a destructive procedure, code access security helps prevent any damage from being done.","pos":[8195,8336]},{"content":"In the second case, there is a theoretical possibility that a malicious object may somehow inject code into the C# file created by the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept>.","pos":[8337,8490],"source":" In the second case, there is a theoretical possibility that a malicious object may somehow inject code into the C# file created by the **XmlSerializer**."},{"content":"Although this issue has been examined thoroughly, and such an attack is considered unlikely, you should take the precaution of never serializing data with an unknown and untrusted type.","pos":[8491,8676]},{"content":"Serialized sensitive data might be vulnerable.","pos":[8686,8732]},{"content":"After the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept>has serialized data, it can be stored as an XML file or other data store.","pos":[8743,8843],"source":"After the **XmlSerializer**has serialized data, it can be stored as an XML file or other data store."},{"content":"If your data store is available to other processes, or is visible on an intranet or the Internet, the data can be stolen and used maliciously.","pos":[8844,8986]},{"content":"For example, if you create an application that serializes orders that include credit card numbers, the data is highly sensitive.","pos":[8987,9115]},{"content":"To help prevent this, always protect the store for your data and take steps to keep it private.","pos":[9116,9211]},{"pos":[9220,9251],"content":"Serialization of a Simple Class","linkify":"Serialization of a Simple Class","nodes":[{"content":"Serialization of a Simple Class","pos":[0,31]}]},{"content":"The following code example shows a basic class with a public field.","pos":[9255,9322]},{"content":"When an instance of this class is serialized, it might resemble the following.","pos":[9508,9586]},{"pos":[9675,9819],"content":"For more examples of serialization, see <bpt id=\"p1\">[</bpt>Examples of XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/examples-of-xml-serialization.md)</ept>.","source":"For more examples of serialization, see [Examples of XML Serialization](../../../docs/framework/serialization/examples-of-xml-serialization.md)."},{"pos":[9828,9856],"content":"Items That Can Be Serialized","linkify":"Items That Can Be Serialized","nodes":[{"content":"Items That Can Be Serialized","pos":[0,28]}]},{"pos":[9860,9932],"content":"The following items can be serialized using the <bpt id=\"p1\">**</bpt>XmLSerializer<ept id=\"p1\">**</ept> class:","source":"The following items can be serialized using the **XmLSerializer** class:"},{"content":"Public read/write properties and fields of public classes.","pos":[9942,10000]},{"pos":[10010,10068],"content":"Classes that implement <bpt id=\"p1\">**</bpt>ICollection<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>IEnumerable<ept id=\"p2\">**</ept>.","source":"Classes that implement **ICollection** or **IEnumerable**."},{"pos":[10080,10150],"content":"[!NOTE]\nOnly collections are serialized, not public properties.","leadings":["","    >  "],"nodes":[{"content":"Only collections are serialized, not public properties.","pos":[8,63]}]},{"pos":[10160,10183],"content":"<bpt id=\"p1\">**</bpt>XmlElement<ept id=\"p1\">**</ept> objects.","source":"**XmlElement** objects."},{"pos":[10193,10213],"content":"<bpt id=\"p1\">**</bpt>XmlNode<ept id=\"p1\">**</ept> objects.","source":"**XmlNode** objects."},{"pos":[10223,10243],"content":"<bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> objects.","source":"**DataSet** objects."},{"pos":[10250,10525],"content":"For more information about serializing or deserializing objects, see <bpt id=\"p1\">[</bpt>How to: Serialize an Object<ept id=\"p1\">](../../../docs/framework/serialization/how-to-serialize-an-object.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Deserialize an Object<ept id=\"p2\">](../../../docs/framework/serialization/how-to-deserialize-an-object.md)</ept>.","source":"For more information about serializing or deserializing objects, see [How to: Serialize an Object](../../../docs/framework/serialization/how-to-serialize-an-object.md) and [How to: Deserialize an Object](../../../docs/framework/serialization/how-to-deserialize-an-object.md)."},{"pos":[10534,10571],"content":"Advantages of Using XML Serialization","linkify":"Advantages of Using XML Serialization","nodes":[{"content":"Advantages of Using XML Serialization","pos":[0,37]}]},{"content":"The <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept>class gives you complete and flexible control when you serialize an object as XML.","pos":[10575,10678],"source":"The **XmlSerializer**class gives you complete and flexible control when you serialize an object as XML."},{"content":"If you are creating an XML Web service, you can apply attributes that control serialization to classes and members to ensure that the XML output conforms to a specific schema.","pos":[10679,10854]},{"pos":[10861,10907],"content":"For example, <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> enables you to:","source":"For example, **XmlSerializer** enables you to:"},{"content":"Specify whether a field or property should be encoded as an attribute or an element.","pos":[10917,11001]},{"content":"Specify an XML namespace to use.","pos":[11011,11043]},{"content":"Specify the name of an element or attribute if a field or property name is inappropriate.","pos":[11053,11142]},{"content":"Another advantage of XML serialization is that you have no constraints on the applications you develop, as long as the XML stream that is generated conforms to a given schema.","pos":[11149,11324]},{"content":"Imagine a schema that is used to describe books.","pos":[11325,11373]},{"content":"It features a title, author, publisher, and ISBN number element.","pos":[11374,11438]},{"content":"You can develop an application that processes the XML data in any way you want, for example, as a book order, or as an inventory of books.","pos":[11439,11577]},{"content":"In either case, the only requirement is that the XML stream conforms to the specified XML Schema definition language (XSD) schema.","pos":[11578,11708]},{"pos":[11717,11749],"content":"XML Serialization Considerations","linkify":"XML Serialization Considerations","nodes":[{"content":"XML Serialization Considerations","pos":[0,32]}]},{"pos":[11753,11827],"content":"The following should be considered when using the <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> class:","source":"The following should be considered when using the **XmlSerializer** class:"},{"content":"The Sgen.exe tool is expressly designed to generate serialization assemblies for optimum performance.","pos":[11837,11938]},{"content":"The serialized data contains only the data itself and the structure of your classes.","pos":[11948,12032]},{"content":"Type identity and assembly information are not included.","pos":[12033,12089]},{"content":"Only public properties and fields can be serialized.","pos":[12099,12151]},{"content":"Properties must have public accessors (get and set methods).","pos":[12152,12212]},{"content":"If you must serialize non-public data, use the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> class rather than XML serialization.","pos":[12213,12355],"source":" If you must serialize non-public data, use the <xref:System.Runtime.Serialization.DataContractSerializer> class rather than XML serialization."},{"pos":[12365,12443],"content":"A class must have a default constructor to be serialized by <bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept>.","source":"A class must have a default constructor to be serialized by **XmlSerializer**."},{"content":"Methods cannot be serialized.","pos":[12453,12482]},{"pos":[12492,12638],"content":"<bpt id=\"p1\">**</bpt>XmlSerializer<ept id=\"p1\">**</ept> can process classes that implement <bpt id=\"p2\">**</bpt>IEnumerable<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>ICollection<ept id=\"p3\">**</ept> differently if they meet certain requirements, as follows.","source":"**XmlSerializer** can process classes that implement **IEnumerable** or **ICollection** differently if they meet certain requirements, as follows."},{"content":"A class that implements <bpt id=\"p1\">**</bpt>IEnumerable<ept id=\"p1\">**</ept> must implement a public <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept> method that takes a single parameter.","pos":[12649,12758],"source":"A class that implements **IEnumerable** must implement a public **Add** method that takes a single parameter."},{"content":"The <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> method's parameter must be consistent (polymorphic) with the type returned from the <bpt id=\"p2\">**</bpt>IEnumerator.Current<ept id=\"p2\">**</ept> property returned from the <bpt id=\"p3\">**</bpt>GetEnumerator<ept id=\"p3\">**</ept> method.","pos":[12759,12931],"source":" The **Add** method's parameter must be consistent (polymorphic) with the type returned from the **IEnumerator.Current** property returned from the **GetEnumerator** method."},{"content":"A class that implements <bpt id=\"p1\">**</bpt>ICollection<ept id=\"p1\">**</ept> in addition to <bpt id=\"p2\">**</bpt>IEnumerable<ept id=\"p2\">**</ept> (such as <bpt id=\"p3\">**</bpt>CollectionBase<ept id=\"p3\">**</ept>) must have a public <bpt id=\"p4\">**</bpt>Item<ept id=\"p4\">**</ept> indexed property (an indexer in C#) that takes an integer and it must have a public <bpt id=\"p5\">**</bpt>Count<ept id=\"p5\">**</ept> property of type <bpt id=\"p6\">**</bpt>integer<ept id=\"p6\">**</ept>.","pos":[12942,13193],"source":"A class that implements **ICollection** in addition to **IEnumerable** (such as **CollectionBase**) must have a public **Item** indexed property (an indexer in C#) that takes an integer and it must have a public **Count** property of type **integer**."},{"content":"The parameter passed to the <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> method must be the same type as that returned from the <bpt id=\"p2\">**</bpt>Item<ept id=\"p2\">**</ept> property, or one of that type's bases.","pos":[13194,13332],"source":" The parameter passed to the **Add** method must be the same type as that returned from the **Item** property, or one of that type's bases."},{"content":"For classes that implement <bpt id=\"p1\">**</bpt>ICollection<ept id=\"p1\">**</ept>, values to be serialized are retrieved from the indexed <bpt id=\"p2\">**</bpt>Item<ept id=\"p2\">**</ept> property rather than by calling <bpt id=\"p3\">**</bpt>GetEnumerator<ept id=\"p3\">**</ept>.","pos":[13343,13501],"source":"For classes that implement **ICollection**, values to be serialized are retrieved from the indexed **Item** property rather than by calling **GetEnumerator**."},{"content":"Also, public fields and properties are not serialized, with the exception of public fields that return another collection class (one that implements <bpt id=\"p1\">**</bpt>ICollection<ept id=\"p1\">**</ept>).","pos":[13502,13668],"source":" Also, public fields and properties are not serialized, with the exception of public fields that return another collection class (one that implements **ICollection**)."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>Examples of XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/examples-of-xml-serialization.md)</ept>.","pos":[13669,13793],"source":" For an example, see [Examples of XML Serialization](../../../docs/framework/serialization/examples-of-xml-serialization.md)."},{"pos":[13802,13823],"content":"XSD Data Type Mapping","linkify":"XSD Data Type Mapping","nodes":[{"content":"XSD Data Type Mapping","pos":[0,21]}]},{"content":"The World Wide Web Consortium (www.w3.org) document titled \"XML Schema Part 2: Datatypes\" specifies the simple data types that are allowed in an XML Schema definition language (XSD) schema.","pos":[13827,14016]},{"content":"For many of these (for example, <bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>decimal<ept id=\"p2\">**</ept>), there is a corresponding data type in the .NET Framework.","pos":[14017,14132],"source":" For many of these (for example, **int** and **decimal**), there is a corresponding data type in the .NET Framework."},{"content":"However, some XML data types do not have a corresponding data type in the .NET Framework (for example, the <bpt id=\"p1\">**</bpt>NMTOKEN<ept id=\"p1\">**</ept> data type).","pos":[14133,14263],"source":" However, some XML data types do not have a corresponding data type in the .NET Framework (for example, the **NMTOKEN** data type)."},{"content":"In such cases, if you use the XML Schema Definition tool (<bpt id=\"p1\">[</bpt>XML Schema Definition Tool (Xsd.exe)<ept id=\"p1\">](../../../docs/framework/serialization/xml-schema-definition-tool-xsd-exe.md)</ept>) to generate classes from a schema, an appropriate attribute is applied to a member of type string, and its <bpt id=\"p2\">**</bpt>DataType<ept id=\"p2\">**</ept> property is set to the XML data type name.","pos":[14264,14601],"source":" In such cases, if you use the XML Schema Definition tool ([XML Schema Definition Tool (Xsd.exe)](../../../docs/framework/serialization/xml-schema-definition-tool-xsd-exe.md)) to generate classes from a schema, an appropriate attribute is applied to a member of type string, and its **DataType** property is set to the XML data type name."},{"content":"For example, if a schema contains an element named \"MyToken\" with the XML data type <bpt id=\"p1\">**</bpt>NMTOKEN<ept id=\"p1\">**</ept>, the generated class might contain a member as shown in the following example.","pos":[14602,14776],"source":" For example, if a schema contains an element named \"MyToken\" with the XML data type **NMTOKEN**, the generated class might contain a member as shown in the following example."},{"pos":[14951,15151],"content":"Similarly, if you are creating a class that must conform to a specific XML Schema (XSD), you should apply the appropriate attribute and set its <bpt id=\"p1\">**</bpt>DataType<ept id=\"p1\">**</ept> property to the desired XML data type name.","source":"Similarly, if you are creating a class that must conform to a specific XML Schema (XSD), you should apply the appropriate attribute and set its **DataType** property to the desired XML data type name."},{"pos":[15158,15268],"content":"For a complete list of type mappings, see the <bpt id=\"p1\">**</bpt>DataType<ept id=\"p1\">**</ept>property for any of the following attribute classes:","source":"For a complete list of type mappings, see the **DataType**property for any of the following attribute classes:"},{"pos":[15648,15656],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>XML and SOAP Serialization<ept id=\"p1\">](../../../docs/framework/serialization/xml-and-soap-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[15804,15903],"source":" [XML and SOAP Serialization](../../../docs/framework/serialization/xml-and-soap-serialization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Binary Serialization<ept id=\"p1\">](../../../docs/framework/serialization/binary-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[15906,15993],"source":" [Binary Serialization](../../../docs/framework/serialization/binary-serialization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Serialization<ept id=\"p1\">](../../../docs/framework/serialization/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[15996,16061],"source":" [Serialization](../../../docs/framework/serialization/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>XmlSerializer<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx)</ept><ph id=\"ph1\"> </ph>","pos":[16064,16167],"source":" [XmlSerializer](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx) "},{"content":"<bpt id=\"p1\"> [</bpt>Examples of XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/examples-of-xml-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[16170,16275],"source":" [Examples of XML Serialization](../../../docs/framework/serialization/examples-of-xml-serialization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Serialize an Object<ept id=\"p1\">](../../../docs/framework/serialization/how-to-serialize-an-object.md)</ept><ph id=\"ph1\"> </ph>","pos":[16278,16378],"source":" [How to: Serialize an Object](../../../docs/framework/serialization/how-to-serialize-an-object.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Deserialize an Object<ept id=\"p1\">](../../../docs/framework/serialization/how-to-deserialize-an-object.md)</ept>","pos":[16381,16484],"source":" [How to: Deserialize an Object](../../../docs/framework/serialization/how-to-deserialize-an-object.md)"}]}