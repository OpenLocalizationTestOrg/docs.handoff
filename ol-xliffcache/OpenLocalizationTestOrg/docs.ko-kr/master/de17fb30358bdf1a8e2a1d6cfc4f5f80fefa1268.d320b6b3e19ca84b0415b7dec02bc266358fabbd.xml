{"content":"---\ntitle: \"Attached Properties Overview\"\nms.date: \"03/30/2017\"\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"attached properties [WPF Designer]\"\nms.assetid: 75928354-dc01-47e8-a018-8409aec1f32d\n---\n# Attached Properties Overview\n\nAn attached property is a concept defined by XAML. An attached property is intended to be used as a type of global property that is settable on any object. In [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)], attached properties are typically defined as a specialized form of dependency property that does not have the conventional property \"wrapper\".\n\n## Prerequisites <a name=\"prerequisites\"></a>\n\nThis topic assumes that you understand dependency properties from the perspective of a consumer of existing dependency properties on [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] classes, and have read the [Dependency Properties Overview](dependency-properties-overview.md). To follow the examples in this topic, you should also understand XAML and know how to write WPF applications.\n\n## Why Use Attached Properties <a name=\"attached_properties_usage\"></a>\n\nOne purpose of an attached property is to allow different child elements to specify unique values for a property that is actually defined in a parent element. A specific application of this scenario is having child elements inform the parent element of how they are to be presented in the [!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]. One example is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property. The <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property is created as an attached property because it is designed to be set on elements that are contained within a <xref:System.Windows.Controls.DockPanel>, rather than on <xref:System.Windows.Controls.DockPanel> itself. The <xref:System.Windows.Controls.DockPanel> class defines the static <xref:System.Windows.DependencyProperty> field named <xref:System.Windows.Controls.DockPanel.DockProperty>, and then provides the <xref:System.Windows.Controls.DockPanel.GetDock%2A> and <xref:System.Windows.Controls.DockPanel.SetDock%2A> methods as public accessors for the attached property.\n\n## Attached Properties in XAML <a name=\"attached_properties_xaml\"></a>\n\nIn XAML, you set attached properties by using the syntax *AttachedPropertyProvider*.*PropertyName*\n\nThe following is an example of how you can set <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> in XAML:\n\n[!code-xaml[PropertiesOvwSupport#APBasicUsage](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page4.xaml#apbasicusage)]\n\nNote that the usage is somewhat similar to a static property; you always reference the type <xref:System.Windows.Controls.DockPanel> that owns and registers the attached property, rather than referring to any instance specified by name.\n\nAlso, because an attached property in XAML is an attribute that you set in markup, only the set operation has any relevance. You cannot directly get a property in XAML, although there are some indirect mechanisms for comparing values, such as triggers in styles (for details, see [Styling and Templating](../controls/styling-and-templating.md)).\n\n### Attached Property Implementation in WPF\n\nIn [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)], most of the attached properties that exist on WPF types that are related to UI presentation are implemented as dependency properties. Attached properties are a XAML concept, whereas dependency properties are a WPF concept. Because WPF attached properties are dependency properties, they support dependency property concepts such as property metadata, and default values from that property metadata.\n\n## How Attached Properties Are Used by the Owning Type <a name=\"howused\"></a>\n\nAlthough attached properties are settable on any object, that does not automatically mean that setting the property will produce a tangible result, or that the value will ever be used by another object. Generally, attached properties are intended so that objects coming from a wide variety of possible class hierarchies or logical relationships can each report common information to the type that defines the attached property. The type that defines the attached property typically follows one of these models:\n\n-   The type that defines the attached property is designed so that it can be the parent element of the elements that will set values for the attached property. The type then iterates its child objects through internal logic against some object tree structure, obtains the values, and acts on those values in some manner.\n\n-   The type that defines the attached property will be used as the child element for a variety of possible parent elements and content models.\n\n-   The type that defines the attached property represents a service. Other types set values for the attached property. Then, when the element that set the property is evaluated in the context of the service, the attached property values are obtained through internal logic of the service class.\n\n### An Example of a Parent-Defined Attached Property\n\nThe most typical scenario where WPF defines an attached property is when a parent element supports a child element collection, and also implements a behavior where the specifics of the behavior are reported individually for each child element.\n\n<xref:System.Windows.Controls.DockPanel> defines the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> attached property, and <xref:System.Windows.Controls.DockPanel> has class-level code as part of its rendering logic (specifically, <xref:System.Windows.Controls.DockPanel.MeasureOverride%2A> and <xref:System.Windows.Controls.DockPanel.ArrangeOverride%2A>). A <xref:System.Windows.Controls.DockPanel> instance will always check to see whether any of its immediate child elements have set a value for <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>. If so, those values become input for the rendering logic applied to that particular child element. Nested <xref:System.Windows.Controls.DockPanel> instances each treat their own immediate child element collections, but that behavior is implementation-specific to how <xref:System.Windows.Controls.DockPanel> processes <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> values. It is theoretically possible to have attached properties that influence elements beyond the immediate parent. If the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> attached property is set on an element that has no <xref:System.Windows.Controls.DockPanel> parent element to act upon it, no error or exception is raised. This simply means that a global property value was set, but it has no current <xref:System.Windows.Controls.DockPanel> parent that could consume the information.\n\n## Attached Properties in Code <a name=\"attached_properties_code\"></a>\n\nAttached properties in WPF do not have the typical [!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)] \"wrapper\" methods for easy get/set access. This is because the attached property is not necessarily part of the [!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)] namespace for instances where the property is set. However, a XAML processor must be able to set those values when XAML is parsed. To support an effective attached property usage, the owner type of the attached property must implement dedicated accessor methods in the form **Get_PropertyName_** and **Set_PropertyName_**. These dedicated accessor methods are also useful to get or set the attached property in code. From a code perspective, an attached property is similar to a backing field that has method accessors instead of property accessors, and that backing field can exist on any object rather than needing to be specifically defined.\n\nThe following example shows how you can set an attached property in code. In this example, `myCheckBox` is an instance of the <xref:System.Windows.Controls.CheckBox> class.\n\n[!code-csharp[PropertiesOvwSupport#APCode](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page4.xaml.cs#apcode)]\n[!code-vb[PropertiesOvwSupport#APCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page4.xaml.vb#apcode)]\n\nSimilar to the XAML case, if `myCheckBox` had not already been added as a child element of `myDockPanel` by the third line of code, the fourth line of code would not raise an exception, but the property value would not interact with a <xref:System.Windows.Controls.DockPanel> parent and thus would do nothing. Only a <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> value set on a child element combined with the presence of a <xref:System.Windows.Controls.DockPanel> parent element will cause an effective behavior in the rendered application. (In this case, you could set the attached property, then attach to the tree. Or you could attach to the tree then set the attached property. Either action order provides the same result.)\n\n## Attached Property Metadata <a name=\"attached_properties_metadata\"></a>\n\nWhen registering the property, <xref:System.Windows.FrameworkPropertyMetadata> is set to specify characteristics of the property, such as whether the property affects rendering, measurement, and so on. Metadata for an attached property is generally no different than on a dependency property. If you specify a default value in an override to attached property metadata, that value becomes the default value of the implicit attached property on instances of the overriding class. Specifically, your default value is reported if some process queries for the value of an attached property through the `Get` method accessor for that property, specifying an instance of the class where you specified the metadata, and the value for that attached property was otherwise not set.\n\nIf you want to enable property value inheritance on a property, you should use attached properties rather than non-attached dependency properties. For details, see [Property Value Inheritance](property-value-inheritance.md).\n\n## Custom Attached Properties <a name=\"custom\"></a>\n\n### When to Create an Attached Property <a name=\"create_attached_properties\"></a>\n\nYou might create an attached property when there is a reason to have a property setting mechanism available for classes other than the defining class. The most common scenario for this is layout. Examples of existing layout properties are <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>, <xref:System.Windows.Controls.Panel.ZIndex%2A?displayProperty=nameWithType>, and <xref:System.Windows.Controls.Canvas.Top%2A?displayProperty=nameWithType>. The scenario enabled here is that elements that exist as child elements to layout-controlling elements are able to express layout requirements to their layout parent elements individually, each setting a property value that the parent defined as an attached property.\n\nAnother scenario for using an attached property is when your class represents a service, and you want classes to be able to integrate the service more transparently.\n\nYet another scenario is to receive Visual Studio WPF Designer support, such as **Properties** window editing. For more information, see [Control Authoring Overview](../controls/control-authoring-overview.md).\n\nAs mentioned before, you should register as an attached property if you want to use property value inheritance.\n\n### How to Create an Attached Property <a name=\"how_do_i_create_attached_properties\"></a>\n\nIf your class is defining the attached property strictly for use on other types, then the class does not have to derive from <xref:System.Windows.DependencyObject>. But you do need to derive from <xref:System.Windows.DependencyObject> if you follow the overall WPF model of having your attached property also be a dependency property.\n\nDefine your attached property as a dependency property by declaring a `public static readonly` field of type <xref:System.Windows.DependencyProperty>. You define this field by using the return value of the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method. The field name must match the attached property name, appended with the string `Property`, to follow the established WPF pattern of naming the identifying fields versus the properties that they represent. The attached property provider must also provide static **Get_PropertyName_** and **Set_PropertyName_** methods as accessors for the attached property; failing to do this will result in the property system being unable to use your attached property.\n\n> [!NOTE]\n> If you omit the attached property's get accessor, data binding on the property will not work in design tools, such as Visual Studio and Expression Blend.\n\n#### The Get Accessor\n\nThe signature for the **Get_PropertyName_** accessor must be:\n\n`public static object GetPropertyName(object target)`\n\n-   The `target` object can be specified as a more specific type in your implementation. For example, the <xref:System.Windows.Controls.DockPanel.GetDock%2A?displayProperty=nameWithType> method types the parameter as <xref:System.Windows.UIElement>, because the attached property is only intended to be set on <xref:System.Windows.UIElement> instances.\n\n-   The return value can be specified as a more specific type in your implementation. For example, the <xref:System.Windows.Controls.DockPanel.GetDock%2A> method types it as <xref:System.Windows.Controls.Dock>, because the value can only be set to that enumeration.\n\n#### The Set Accessor\n\nThe signature for the **Set_PropertyName_** accessor must be:\n\n`public static void SetPropertyName(object target, object value)`\n\n-   The `target` object can be specified as a more specific type in your implementation. For example, the <xref:System.Windows.Controls.DockPanel.SetDock%2A> method types it as <xref:System.Windows.UIElement>, because the attached property is only intended to be set on <xref:System.Windows.UIElement> instances.\n\n-   The `value` object can be specified as a more specific type in your implementation. For example, the <xref:System.Windows.Controls.DockPanel.SetDock%2A> method types it as <xref:System.Windows.Controls.Dock>, because the value can only be set to that enumeration. Remember that the value for this method is the input coming from the XAML loader when it encounters your attached property in an attached property usage in markup. That input is the value specified as a XAML attribute value in markup. Therefore there must be type conversion, value serializer, or markup extension support for the type you use, such that the appropriate type can be created from the attribute value (which is ultimately just a string).\n\nThe following example shows the dependency property registration (using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method), as well as the **Get_PropertyName_** and **Set_PropertyName_** accessors. In the example, the attached property name is `IsBubbleSource`. Therefore, the accessors must be named `GetIsBubbleSource` and `SetIsBubbleSource`.\n\n[!code-csharp[WPFAquariumSln#RegisterAttachedBubbler](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler)]\n[!code-vb[WPFAquariumSln#RegisterAttachedBubbler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler)]\n\n#### Attached Property Attributes\n\nWPF defines several [!INCLUDE[TLA2#tla_netframewkattr#plural](../../../../includes/tla2sharptla-netframewkattrsharpplural-md.md)] that are intended to provide information about attached properties to reflection processes, and to typical users of reflection and property information such as designers. Because attached properties have a type of unlimited scope, designers need a way to avoid overwhelming users with a global list of all the attached properties that are defined in a particular technology implementation that uses XAML. The [!INCLUDE[TLA2#tla_netframewkattr#plural](../../../../includes/tla2sharptla-netframewkattrsharpplural-md.md)] that WPF defines for attached properties can be used to scope the situations where a given attached property should be shown in a properties window. You might consider applying these attributes for your own custom attached properties also. The purpose and syntax of the [!INCLUDE[TLA2#tla_netframewkattr#plural](../../../../includes/tla2sharptla-netframewkattrsharpplural-md.md)] is described on the appropriate reference pages:\n\n-   <xref:System.Windows.AttachedPropertyBrowsableAttribute>\n\n-   <xref:System.Windows.AttachedPropertyBrowsableForChildrenAttribute>\n\n-   <xref:System.Windows.AttachedPropertyBrowsableForTypeAttribute>\n\n-   <xref:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute>\n\n## Learning More About Attached Properties <a name=\"more\"></a>\n\n-   For more information on creating an attached property, see [Register an Attached Property](how-to-register-an-attached-property.md).\n\n-   For more advanced usage scenarios for dependency properties and attached properties, see [Custom Dependency Properties](custom-dependency-properties.md).\n\n-   You can also register a property as an attached property, and as a dependency property, but then still expose \"wrapper\" implementations. In this case, the property can be set either on that element, or on any element through the XAML attached property syntax. An example of a property with an appropriate scenario for both standard and attached usages is <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType>.\n\n## See also\n\n- <xref:System.Windows.DependencyProperty>\n- [Dependency Properties Overview](dependency-properties-overview.md)\n- [Custom Dependency Properties](custom-dependency-properties.md)\n- [XAML Overview (WPF)](xaml-overview-wpf.md)\n- [Register an Attached Property](how-to-register-an-attached-property.md)","nodes":[{"pos":[4,207],"embed":true,"restype":"x-metadata","content":"title: \"Attached Properties Overview\"\nms.date: \"03/30/2017\"\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"attached properties [WPF Designer]\"\nms.assetid: 75928354-dc01-47e8-a018-8409aec1f32d","nodes":[{"content":"Attached Properties Overview","nodes":[{"pos":[0,28],"content":"Attached Properties Overview","nodes":[{"content":"Attached Properties Overview","pos":[0,28]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[214,242],"content":"Attached Properties Overview","linkify":"Attached Properties Overview","nodes":[{"content":"Attached Properties Overview","pos":[0,28]}]},{"content":"An attached property is a concept defined by XAML.","pos":[244,294]},{"content":"An attached property is intended to be used as a type of global property that is settable on any object.","pos":[295,399]},{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>, attached properties are typically defined as a specialized form of dependency property that does not have the conventional property \"wrapper\".","pos":[400,626],"source":" In [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)], attached properties are typically defined as a specialized form of dependency property that does not have the conventional property \"wrapper\"."},{"pos":[631,673],"content":"Prerequisites <bpt id=\"p1\">&lt;a name=\"prerequisites\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"Prerequisites <a name=\"prerequisites\"></a>","source":"Prerequisites <a name=\"prerequisites\"></a>"},{"content":"This topic assumes that you understand dependency properties from the perspective of a consumer of existing dependency properties on <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> classes, and have read the <bpt id=\"p1\">[</bpt>Dependency Properties Overview<ept id=\"p1\">](dependency-properties-overview.md)</ept>.","pos":[675,983],"source":"This topic assumes that you understand dependency properties from the perspective of a consumer of existing dependency properties on [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] classes, and have read the [Dependency Properties Overview](dependency-properties-overview.md)."},{"content":"To follow the examples in this topic, you should also understand XAML and know how to write WPF applications.","pos":[984,1093]},{"pos":[1098,1166],"content":"Why Use Attached Properties <bpt id=\"p1\">&lt;a name=\"attached_properties_usage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"Why Use Attached Properties <a name=\"attached_properties_usage\"></a>","source":"Why Use Attached Properties <a name=\"attached_properties_usage\"></a>"},{"content":"One purpose of an attached property is to allow different child elements to specify unique values for a property that is actually defined in a parent element.","pos":[1168,1326]},{"content":"A specific application of this scenario is having child elements inform the parent element of how they are to be presented in the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>.","pos":[1327,1523],"source":" A specific application of this scenario is having child elements inform the parent element of how they are to be presented in the [!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]."},{"content":"One example is the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> property.","pos":[1524,1630],"source":" One example is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> property is created as an attached property because it is designed to be set on elements that are contained within a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>, rather than on <ph id=\"ph3\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> itself.","pos":[1631,1935],"source":" The <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property is created as an attached property because it is designed to be set on elements that are contained within a <xref:System.Windows.Controls.DockPanel>, rather than on <xref:System.Windows.Controls.DockPanel> itself."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> class defines the static <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty&gt;</ph> field named <ph id=\"ph3\">&lt;xref:System.Windows.Controls.DockPanel.DockProperty&gt;</ph>, and then provides the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.DockPanel.GetDock%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Controls.DockPanel.SetDock%2A&gt;</ph> methods as public accessors for the attached property.","pos":[1936,2298],"source":" The <xref:System.Windows.Controls.DockPanel> class defines the static <xref:System.Windows.DependencyProperty> field named <xref:System.Windows.Controls.DockPanel.DockProperty>, and then provides the <xref:System.Windows.Controls.DockPanel.GetDock%2A> and <xref:System.Windows.Controls.DockPanel.SetDock%2A> methods as public accessors for the attached property."},{"pos":[2303,2370],"content":"Attached Properties in XAML <bpt id=\"p1\">&lt;a name=\"attached_properties_xaml\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"Attached Properties in XAML <a name=\"attached_properties_xaml\"></a>","source":"Attached Properties in XAML <a name=\"attached_properties_xaml\"></a>"},{"pos":[2372,2470],"content":"In XAML, you set attached properties by using the syntax <bpt id=\"p1\">*</bpt>AttachedPropertyProvider<ept id=\"p1\">*</ept>.<bpt id=\"p2\">*</bpt>PropertyName<ept id=\"p2\">*</ept>","source":"In XAML, you set attached properties by using the syntax *AttachedPropertyProvider*.*PropertyName*"},{"pos":[2472,2605],"content":"The following is an example of how you can set <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> in XAML:","source":"The following is an example of how you can set <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> in XAML:"},{"pos":[2751,2987],"content":"Note that the usage is somewhat similar to a static property; you always reference the type <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> that owns and registers the attached property, rather than referring to any instance specified by name.","source":"Note that the usage is somewhat similar to a static property; you always reference the type <xref:System.Windows.Controls.DockPanel> that owns and registers the attached property, rather than referring to any instance specified by name."},{"content":"Also, because an attached property in XAML is an attribute that you set in markup, only the set operation has any relevance.","pos":[2989,3113]},{"content":"You cannot directly get a property in XAML, although there are some indirect mechanisms for comparing values, such as triggers in styles (for details, see <bpt id=\"p1\">[</bpt>Styling and Templating<ept id=\"p1\">](../controls/styling-and-templating.md)</ept>).","pos":[3114,3334],"source":" You cannot directly get a property in XAML, although there are some indirect mechanisms for comparing values, such as triggers in styles (for details, see [Styling and Templating](../controls/styling-and-templating.md))."},{"pos":[3340,3379],"content":"Attached Property Implementation in WPF","linkify":"Attached Property Implementation in WPF","nodes":[{"content":"Attached Property Implementation in WPF","pos":[0,39]}]},{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>, most of the attached properties that exist on WPF types that are related to UI presentation are implemented as dependency properties.","pos":[3381,3598],"source":"In [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)], most of the attached properties that exist on WPF types that are related to UI presentation are implemented as dependency properties."},{"content":"Attached properties are a XAML concept, whereas dependency properties are a WPF concept.","pos":[3599,3687]},{"content":"Because WPF attached properties are dependency properties, they support dependency property concepts such as property metadata, and default values from that property metadata.","pos":[3688,3863]},{"pos":[3868,3942],"content":"How Attached Properties Are Used by the Owning Type <bpt id=\"p1\">&lt;a name=\"howused\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"How Attached Properties Are Used by the Owning Type <a name=\"howused\"></a>","source":"How Attached Properties Are Used by the Owning Type <a name=\"howused\"></a>"},{"content":"Although attached properties are settable on any object, that does not automatically mean that setting the property will produce a tangible result, or that the value will ever be used by another object.","pos":[3944,4146]},{"content":"Generally, attached properties are intended so that objects coming from a wide variety of possible class hierarchies or logical relationships can each report common information to the type that defines the attached property.","pos":[4147,4371]},{"content":"The type that defines the attached property typically follows one of these models:","pos":[4372,4454]},{"content":"The type that defines the attached property is designed so that it can be the parent element of the elements that will set values for the attached property.","pos":[4460,4616]},{"content":"The type then iterates its child objects through internal logic against some object tree structure, obtains the values, and acts on those values in some manner.","pos":[4617,4777]},{"content":"The type that defines the attached property will be used as the child element for a variety of possible parent elements and content models.","pos":[4783,4922]},{"content":"The type that defines the attached property represents a service.","pos":[4928,4993]},{"content":"Other types set values for the attached property.","pos":[4994,5043]},{"content":"Then, when the element that set the property is evaluated in the context of the service, the attached property values are obtained through internal logic of the service class.","pos":[5044,5219]},{"pos":[5225,5273],"content":"An Example of a Parent-Defined Attached Property","linkify":"An Example of a Parent-Defined Attached Property","nodes":[{"content":"An Example of a Parent-Defined Attached Property","pos":[0,48]}]},{"content":"The most typical scenario where WPF defines an attached property is when a parent element supports a child element collection, and also implements a behavior where the specifics of the behavior are reported individually for each child element.","pos":[5275,5518]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> defines the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> attached property, and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> has class-level code as part of its rendering logic (specifically, <ph id=\"ph4\">&lt;xref:System.Windows.Controls.DockPanel.MeasureOverride%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Controls.DockPanel.ArrangeOverride%2A&gt;</ph>).","pos":[5520,5907],"source":"<xref:System.Windows.Controls.DockPanel> defines the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> attached property, and <xref:System.Windows.Controls.DockPanel> has class-level code as part of its rendering logic (specifically, <xref:System.Windows.Controls.DockPanel.MeasureOverride%2A> and <xref:System.Windows.Controls.DockPanel.ArrangeOverride%2A>)."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> instance will always check to see whether any of its immediate child elements have set a value for <ph id=\"ph2\">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph>.","pos":[5908,6128],"source":" A <xref:System.Windows.Controls.DockPanel> instance will always check to see whether any of its immediate child elements have set a value for <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>."},{"content":"If so, those values become input for the rendering logic applied to that particular child element.","pos":[6129,6227]},{"content":"Nested <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> instances each treat their own immediate child element collections, but that behavior is implementation-specific to how <ph id=\"ph2\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> processes <ph id=\"ph3\">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> values.","pos":[6228,6532],"source":" Nested <xref:System.Windows.Controls.DockPanel> instances each treat their own immediate child element collections, but that behavior is implementation-specific to how <xref:System.Windows.Controls.DockPanel> processes <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> values."},{"content":"It is theoretically possible to have attached properties that influence elements beyond the immediate parent.","pos":[6533,6642]},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> attached property is set on an element that has no <ph id=\"ph2\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> parent element to act upon it, no error or exception is raised.","pos":[6643,6883],"source":" If the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> attached property is set on an element that has no <xref:System.Windows.Controls.DockPanel> parent element to act upon it, no error or exception is raised."},{"content":"This simply means that a global property value was set, but it has no current <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> parent that could consume the information.","pos":[6884,7045],"source":" This simply means that a global property value was set, but it has no current <xref:System.Windows.Controls.DockPanel> parent that could consume the information."},{"pos":[7050,7117],"content":"Attached Properties in Code <bpt id=\"p1\">&lt;a name=\"attached_properties_code\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"Attached Properties in Code <a name=\"attached_properties_code\"></a>","source":"Attached Properties in Code <a name=\"attached_properties_code\"></a>"},{"content":"Attached properties in WPF do not have the typical <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> \"wrapper\" methods for easy get/set access.","pos":[7119,7282],"source":"Attached properties in WPF do not have the typical [!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)] \"wrapper\" methods for easy get/set access."},{"content":"This is because the attached property is not necessarily part of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> namespace for instances where the property is set.","pos":[7283,7472],"source":" This is because the attached property is not necessarily part of the [!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)] namespace for instances where the property is set."},{"content":"However, a XAML processor must be able to set those values when XAML is parsed.","pos":[7473,7552]},{"content":"To support an effective attached property usage, the owner type of the attached property must implement dedicated accessor methods in the form <bpt id=\"p1\">**</bpt>Get_PropertyName_<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Set_PropertyName_<ept id=\"p2\">**</ept>.","pos":[7553,7744],"source":" To support an effective attached property usage, the owner type of the attached property must implement dedicated accessor methods in the form **Get_PropertyName_** and **Set_PropertyName_**."},{"content":"These dedicated accessor methods are also useful to get or set the attached property in code.","pos":[7745,7838]},{"content":"From a code perspective, an attached property is similar to a backing field that has method accessors instead of property accessors, and that backing field can exist on any object rather than needing to be specifically defined.","pos":[7839,8066]},{"content":"The following example shows how you can set an attached property in code.","pos":[8068,8141]},{"content":"In this example, <ph id=\"ph1\">`myCheckBox`</ph> is an instance of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> class.","pos":[8142,8240],"source":" In this example, `myCheckBox` is an instance of the <xref:System.Windows.Controls.CheckBox> class."},{"content":"Similar to the XAML case, if <ph id=\"ph1\">`myCheckBox`</ph> had not already been added as a child element of <ph id=\"ph2\">`myDockPanel`</ph> by the third line of code, the fourth line of code would not raise an exception, but the property value would not interact with a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> parent and thus would do nothing.","pos":[8521,8830],"source":"Similar to the XAML case, if `myCheckBox` had not already been added as a child element of `myDockPanel` by the third line of code, the fourth line of code would not raise an exception, but the property value would not interact with a <xref:System.Windows.Controls.DockPanel> parent and thus would do nothing."},{"content":"Only a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> value set on a child element combined with the presence of a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> parent element will cause an effective behavior in the rendered application.","pos":[8831,9094],"source":" Only a <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> value set on a child element combined with the presence of a <xref:System.Windows.Controls.DockPanel> parent element will cause an effective behavior in the rendered application."},{"content":"(In this case, you could set the attached property, then attach to the tree.","pos":[9095,9171]},{"content":"Or you could attach to the tree then set the attached property.","pos":[9172,9235]},{"content":"Either action order provides the same result.)","pos":[9236,9282]},{"pos":[9287,9357],"content":"Attached Property Metadata <bpt id=\"p1\">&lt;a name=\"attached_properties_metadata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"Attached Property Metadata <a name=\"attached_properties_metadata\"></a>","source":"Attached Property Metadata <a name=\"attached_properties_metadata\"></a>"},{"content":"When registering the property, <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> is set to specify characteristics of the property, such as whether the property affects rendering, measurement, and so on.","pos":[9359,9560],"source":"When registering the property, <xref:System.Windows.FrameworkPropertyMetadata> is set to specify characteristics of the property, such as whether the property affects rendering, measurement, and so on."},{"content":"Metadata for an attached property is generally no different than on a dependency property.","pos":[9561,9651]},{"content":"If you specify a default value in an override to attached property metadata, that value becomes the default value of the implicit attached property on instances of the overriding class.","pos":[9652,9837]},{"content":"Specifically, your default value is reported if some process queries for the value of an attached property through the <ph id=\"ph1\">`Get`</ph> method accessor for that property, specifying an instance of the class where you specified the metadata, and the value for that attached property was otherwise not set.","pos":[9838,10131],"source":" Specifically, your default value is reported if some process queries for the value of an attached property through the `Get` method accessor for that property, specifying an instance of the class where you specified the metadata, and the value for that attached property was otherwise not set."},{"content":"If you want to enable property value inheritance on a property, you should use attached properties rather than non-attached dependency properties.","pos":[10133,10279]},{"content":"For details, see <bpt id=\"p1\">[</bpt>Property Value Inheritance<ept id=\"p1\">](property-value-inheritance.md)</ept>.","pos":[10280,10357],"source":" For details, see [Property Value Inheritance](property-value-inheritance.md)."},{"pos":[10362,10410],"content":"Custom Attached Properties <bpt id=\"p1\">&lt;a name=\"custom\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"Custom Attached Properties <a name=\"custom\"></a>","source":"Custom Attached Properties <a name=\"custom\"></a>"},{"pos":[10416,10493],"content":"When to Create an Attached Property <bpt id=\"p1\">&lt;a name=\"create_attached_properties\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"When to Create an Attached Property <a name=\"create_attached_properties\"></a>","source":"When to Create an Attached Property <a name=\"create_attached_properties\"></a>"},{"content":"You might create an attached property when there is a reason to have a property setting mechanism available for classes other than the defining class.","pos":[10495,10645]},{"content":"The most common scenario for this is layout.","pos":[10646,10690]},{"content":"Examples of existing layout properties are <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Panel.ZIndex%2A?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Canvas.Top%2A?displayProperty=nameWithType&gt;</ph>.","pos":[10691,10968],"source":" Examples of existing layout properties are <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>, <xref:System.Windows.Controls.Panel.ZIndex%2A?displayProperty=nameWithType>, and <xref:System.Windows.Controls.Canvas.Top%2A?displayProperty=nameWithType>."},{"content":"The scenario enabled here is that elements that exist as child elements to layout-controlling elements are able to express layout requirements to their layout parent elements individually, each setting a property value that the parent defined as an attached property.","pos":[10969,11236]},{"content":"Another scenario for using an attached property is when your class represents a service, and you want classes to be able to integrate the service more transparently.","pos":[11238,11403]},{"content":"Yet another scenario is to receive Visual Studio WPF Designer support, such as <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window editing.","pos":[11405,11514],"source":"Yet another scenario is to receive Visual Studio WPF Designer support, such as **Properties** window editing."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Control Authoring Overview<ept id=\"p1\">](../controls/control-authoring-overview.md)</ept>.","pos":[11515,11613],"source":" For more information, see [Control Authoring Overview](../controls/control-authoring-overview.md)."},{"content":"As mentioned before, you should register as an attached property if you want to use property value inheritance.","pos":[11615,11726]},{"pos":[11732,11817],"content":"How to Create an Attached Property <bpt id=\"p1\">&lt;a name=\"how_do_i_create_attached_properties\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"How to Create an Attached Property <a name=\"how_do_i_create_attached_properties\"></a>","source":"How to Create an Attached Property <a name=\"how_do_i_create_attached_properties\"></a>"},{"content":"If your class is defining the attached property strictly for use on other types, then the class does not have to derive from <ph id=\"ph1\">&lt;xref:System.Windows.DependencyObject&gt;</ph>.","pos":[11819,11983],"source":"If your class is defining the attached property strictly for use on other types, then the class does not have to derive from <xref:System.Windows.DependencyObject>."},{"content":"But you do need to derive from <ph id=\"ph1\">&lt;xref:System.Windows.DependencyObject&gt;</ph> if you follow the overall WPF model of having your attached property also be a dependency property.","pos":[11984,12153],"source":" But you do need to derive from <xref:System.Windows.DependencyObject> if you follow the overall WPF model of having your attached property also be a dependency property."},{"content":"Define your attached property as a dependency property by declaring a <ph id=\"ph1\">`public static readonly`</ph> field of type <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.","pos":[12155,12305],"source":"Define your attached property as a dependency property by declaring a `public static readonly` field of type <xref:System.Windows.DependencyProperty>."},{"content":"You define this field by using the return value of the <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</ph> method.","pos":[12306,12429],"source":" You define this field by using the return value of the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method."},{"content":"The field name must match the attached property name, appended with the string <ph id=\"ph1\">`Property`</ph>, to follow the established WPF pattern of naming the identifying fields versus the properties that they represent.","pos":[12430,12634],"source":" The field name must match the attached property name, appended with the string `Property`, to follow the established WPF pattern of naming the identifying fields versus the properties that they represent."},{"content":"The attached property provider must also provide static <bpt id=\"p1\">**</bpt>Get_PropertyName_<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Set_PropertyName_<ept id=\"p2\">**</ept> methods as accessors for the attached property; failing to do this will result in the property system being unable to use your attached property.","pos":[12635,12884],"source":" The attached property provider must also provide static **Get_PropertyName_** and **Set_PropertyName_** methods as accessors for the attached property; failing to do this will result in the property system being unable to use your attached property."},{"pos":[12888,13051],"content":"[!NOTE]\nIf you omit the attached property's get accessor, data binding on the property will not work in design tools, such as Visual Studio and Expression Blend.","leadings":["","> "],"nodes":[{"content":"If you omit the attached property's get accessor, data binding on the property will not work in design tools, such as Visual Studio and Expression Blend.","pos":[8,161]}]},{"pos":[13058,13074],"content":"The Get Accessor","linkify":"The Get Accessor","nodes":[{"content":"The Get Accessor","pos":[0,16]}]},{"pos":[13076,13137],"content":"The signature for the <bpt id=\"p1\">**</bpt>Get_PropertyName_<ept id=\"p1\">**</ept> accessor must be:","source":"The signature for the **Get_PropertyName_** accessor must be:"},{"content":"The <ph id=\"ph1\">`target`</ph> object can be specified as a more specific type in your implementation.","pos":[13198,13282],"source":"The `target` object can be specified as a more specific type in your implementation."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.GetDock%2A?displayProperty=nameWithType&gt;</ph> method types the parameter as <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph>, because the attached property is only intended to be set on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> instances.","pos":[13283,13546],"source":" For example, the <xref:System.Windows.Controls.DockPanel.GetDock%2A?displayProperty=nameWithType> method types the parameter as <xref:System.Windows.UIElement>, because the attached property is only intended to be set on <xref:System.Windows.UIElement> instances."},{"content":"The return value can be specified as a more specific type in your implementation.","pos":[13552,13633]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.GetDock%2A&gt;</ph> method types it as <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Dock&gt;</ph>, because the value can only be set to that enumeration.","pos":[13634,13813],"source":" For example, the <xref:System.Windows.Controls.DockPanel.GetDock%2A> method types it as <xref:System.Windows.Controls.Dock>, because the value can only be set to that enumeration."},{"pos":[13820,13836],"content":"The Set Accessor","linkify":"The Set Accessor","nodes":[{"content":"The Set Accessor","pos":[0,16]}]},{"pos":[13838,13899],"content":"The signature for the <bpt id=\"p1\">**</bpt>Set_PropertyName_<ept id=\"p1\">**</ept> accessor must be:","source":"The signature for the **Set_PropertyName_** accessor must be:"},{"content":"The <ph id=\"ph1\">`target`</ph> object can be specified as a more specific type in your implementation.","pos":[13972,14056],"source":"The `target` object can be specified as a more specific type in your implementation."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.SetDock%2A&gt;</ph> method types it as <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph>, because the attached property is only intended to be set on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> instances.","pos":[14057,14280],"source":" For example, the <xref:System.Windows.Controls.DockPanel.SetDock%2A> method types it as <xref:System.Windows.UIElement>, because the attached property is only intended to be set on <xref:System.Windows.UIElement> instances."},{"content":"The <ph id=\"ph1\">`value`</ph> object can be specified as a more specific type in your implementation.","pos":[14286,14369],"source":"The `value` object can be specified as a more specific type in your implementation."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DockPanel.SetDock%2A&gt;</ph> method types it as <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Dock&gt;</ph>, because the value can only be set to that enumeration.","pos":[14370,14549],"source":" For example, the <xref:System.Windows.Controls.DockPanel.SetDock%2A> method types it as <xref:System.Windows.Controls.Dock>, because the value can only be set to that enumeration."},{"content":"Remember that the value for this method is the input coming from the XAML loader when it encounters your attached property in an attached property usage in markup.","pos":[14550,14713]},{"content":"That input is the value specified as a XAML attribute value in markup.","pos":[14714,14784]},{"content":"Therefore there must be type conversion, value serializer, or markup extension support for the type you use, such that the appropriate type can be created from the attribute value (which is ultimately just a string).","pos":[14785,15001]},{"content":"The following example shows the dependency property registration (using the <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</ph> method), as well as the <bpt id=\"p1\">**</bpt>Get_PropertyName_<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Set_PropertyName_<ept id=\"p2\">**</ept> accessors.","pos":[15003,15222],"source":"The following example shows the dependency property registration (using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method), as well as the **Get_PropertyName_** and **Set_PropertyName_** accessors."},{"content":"In the example, the attached property name is <ph id=\"ph1\">`IsBubbleSource`</ph>.","pos":[15223,15286],"source":" In the example, the attached property name is `IsBubbleSource`."},{"content":"Therefore, the accessors must be named <ph id=\"ph1\">`GetIsBubbleSource`</ph> and <ph id=\"ph2\">`SetIsBubbleSource`</ph>.","pos":[15287,15370],"source":" Therefore, the accessors must be named `GetIsBubbleSource` and `SetIsBubbleSource`."},{"pos":[15730,15758],"content":"Attached Property Attributes","linkify":"Attached Property Attributes","nodes":[{"content":"Attached Property Attributes","pos":[0,28]}]},{"content":"WPF defines several <ph id=\"ph1\">[!INCLUDE[TLA2#tla_netframewkattr#plural](../../../../includes/tla2sharptla-netframewkattrsharpplural-md.md)]</ph> that are intended to provide information about attached properties to reflection processes, and to typical users of reflection and property information such as designers.","pos":[15760,16060],"source":"WPF defines several [!INCLUDE[TLA2#tla_netframewkattr#plural](../../../../includes/tla2sharptla-netframewkattrsharpplural-md.md)] that are intended to provide information about attached properties to reflection processes, and to typical users of reflection and property information such as designers."},{"content":"Because attached properties have a type of unlimited scope, designers need a way to avoid overwhelming users with a global list of all the attached properties that are defined in a particular technology implementation that uses XAML.","pos":[16061,16294]},{"content":"The <ph id=\"ph1\">[!INCLUDE[TLA2#tla_netframewkattr#plural](../../../../includes/tla2sharptla-netframewkattrsharpplural-md.md)]</ph> that WPF defines for attached properties can be used to scope the situations where a given attached property should be shown in a properties window.","pos":[16295,16557],"source":" The [!INCLUDE[TLA2#tla_netframewkattr#plural](../../../../includes/tla2sharptla-netframewkattrsharpplural-md.md)] that WPF defines for attached properties can be used to scope the situations where a given attached property should be shown in a properties window."},{"content":"You might consider applying these attributes for your own custom attached properties also.","pos":[16558,16648]},{"content":"The purpose and syntax of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_netframewkattr#plural](../../../../includes/tla2sharptla-netframewkattrsharpplural-md.md)]</ph> is described on the appropriate reference pages:","pos":[16649,16837],"source":" The purpose and syntax of the [!INCLUDE[TLA2#tla_netframewkattr#plural](../../../../includes/tla2sharptla-netframewkattrsharpplural-md.md)] is described on the appropriate reference pages:"},{"pos":[17128,17187],"content":"Learning More About Attached Properties <bpt id=\"p1\">&lt;a name=\"more\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>","linkify":"Learning More About Attached Properties <a name=\"more\"></a>","source":"Learning More About Attached Properties <a name=\"more\"></a>"},{"pos":[17193,17325],"content":"For more information on creating an attached property, see <bpt id=\"p1\">[</bpt>Register an Attached Property<ept id=\"p1\">](how-to-register-an-attached-property.md)</ept>.","source":"For more information on creating an attached property, see [Register an Attached Property](how-to-register-an-attached-property.md)."},{"pos":[17331,17484],"content":"For more advanced usage scenarios for dependency properties and attached properties, see <bpt id=\"p1\">[</bpt>Custom Dependency Properties<ept id=\"p1\">](custom-dependency-properties.md)</ept>.","source":"For more advanced usage scenarios for dependency properties and attached properties, see [Custom Dependency Properties](custom-dependency-properties.md)."},{"content":"You can also register a property as an attached property, and as a dependency property, but then still expose \"wrapper\" implementations.","pos":[17490,17626]},{"content":"In this case, the property can be set either on that element, or on any element through the XAML attached property syntax.","pos":[17627,17749]},{"content":"An example of a property with an appropriate scenario for both standard and attached usages is <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType&gt;</ph>.","pos":[17750,17930],"source":" An example of a property with an appropriate scenario for both standard and attached usages is <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType>."},{"pos":[17935,17943],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[17990,18057],"content":"<bpt id=\"p1\">[</bpt>Dependency Properties Overview<ept id=\"p1\">](dependency-properties-overview.md)</ept>","source":"[Dependency Properties Overview](dependency-properties-overview.md)"},{"pos":[18060,18123],"content":"<bpt id=\"p1\">[</bpt>Custom Dependency Properties<ept id=\"p1\">](custom-dependency-properties.md)</ept>","source":"[Custom Dependency Properties](custom-dependency-properties.md)"},{"pos":[18126,18169],"content":"<bpt id=\"p1\">[</bpt>XAML Overview (WPF)<ept id=\"p1\">](xaml-overview-wpf.md)</ept>","source":"[XAML Overview (WPF)](xaml-overview-wpf.md)"},{"pos":[18172,18244],"content":"<bpt id=\"p1\">[</bpt>Register an Attached Property<ept id=\"p1\">](how-to-register-an-attached-property.md)</ept>","source":"[Register an Attached Property](how-to-register-an-attached-property.md)"}]}