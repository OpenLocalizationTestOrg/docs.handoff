{"content":"---\ntitle: \"ushort keyword - C# Reference\"\nms.custom: seodec18\nms.date: 03/14/2017\nf1_keywords:\n  - \"ushort\"\n  - \"ushort_CSharpKeyword\"\nhelpviewer_keywords:\n  - \"ushort keyword [C#]\"\nms.assetid: 1a7dbaae-b7a0-4111-872a-c88a6d3981ac\n---\n# ushort (C# Reference)\n\nThe `ushort` keyword indicates an integral data type that stores values according to the size and range shown in the following table.\n\n|Type|Range|Size|.NET type|\n|----------|-----------|----------|-------------------------|\n|`ushort`|0 to 65,535|Unsigned 16-bit integer|<xref:System.UInt16?displayProperty=nameWithType>|\n\n## Literals\n\nYou can declare and initialize a `ushort` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it. If the integer literal is outside the range of `ushort` (that is, if it is less than <xref:System.UInt16.MinValue?displayProperty=nameWithType> or greater than <xref:System.UInt16.MaxValue?displayProperty=nameWithType>), a compilation error occurs.\n\nIn the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](int.md) to `ushort` values.\n\n[!code-csharp[UShort](~/samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UShort)]\n\n> [!NOTE]\n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7.0, a couple of features have been added to enhance readability:\n\n- C# 7.0 allows the usage of the underscore character, `_`, as a digit separator.\n- C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix. A decimal literal isn't permitted to have a leading underscore.\n\nSome examples are shown below.\n\n[!code-csharp[UShort](~/samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UShortS)]\n\n## Compiler overload resolution\n\nA cast must be used when you call overloaded methods. Consider, for example, the following overloaded methods that use `ushort` and [int](int.md) parameters:\n\n```csharp\npublic static void SampleMethod(int i) {}\npublic static void SampleMethod(ushort s) {}\n```\n\nUsing the `ushort` cast guarantees that the correct type is called, for example:\n\n```csharp\n// Calls the method with the int parameter:\nSampleMethod(5);\n// Calls the method with the ushort parameter:\nSampleMethod((ushort)5);\n```\n\n## Conversions\n\nThere is a predefined implicit conversion from `ushort` to [int](int.md), [uint](uint.md), [long](long.md), [ulong](ulong.md), [float](float.md), [double](double.md), or [decimal](decimal.md).\n\nThere is a predefined implicit conversion from [byte](byte.md) or [char](char.md) to `ushort`. Otherwise a cast must be used to perform an explicit conversion. Consider, for example, the following two `ushort` variables `x` and `y`:\n\n```csharp\nushort x = 5, y = 12;\n```\n\nThe following assignment statement will produce a compilation error, because the arithmetic expression on the right side of the assignment operator evaluates to `int` by default.\n\n```csharp\nushort z = x + y;   // Error: conversion from int to ushort\n```\n\nTo fix this problem, use a cast:\n\n```csharp\nushort z = (ushort)(x + y);   // OK: explicit conversion\n```\n\nIt is possible though to use the following statements, where the destination variable has the same storage size or a larger storage size:\n\n```csharp\nint m = x + y;\nlong n = x + y;\n```\n\nNotice also that there is no implicit conversion from floating-point types to `ushort`. For example, the following statement generates a compiler error unless an explicit cast is used:\n\n```csharp\n// Error -- no implicit conversion from double:\nushort x = 3.0;\n// OK -- explicit conversion:\nushort y = (ushort)3.0;\n```\n\nFor information about arithmetic expressions with mixed floating-point types and integral types, see [float](float.md) and [double](double.md).\n\nFor more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md).\n\n## C# language specification\n\nFor more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- <xref:System.UInt16>\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Integral Types Table](integral-types-table.md)\n- [Built-In Types Table](built-in-types-table.md)\n- [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)\n","nodes":[{"pos":[4,231],"embed":true,"restype":"x-metadata","content":"title: \"ushort keyword - C# Reference\"\nms.custom: seodec18\nms.date: 03/14/2017\nf1_keywords:\n  - \"ushort\"\n  - \"ushort_CSharpKeyword\"\nhelpviewer_keywords:\n  - \"ushort keyword [C#]\"\nms.assetid: 1a7dbaae-b7a0-4111-872a-c88a6d3981ac","nodes":[{"content":"ushort keyword - C# Reference","nodes":[{"pos":[0,29],"content":"ushort keyword - C# Reference","nodes":[{"content":"ushort keyword - C# Reference","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[238,259],"content":"ushort (C# Reference)","linkify":"ushort (C# Reference)","nodes":[{"content":"ushort (C# Reference)","pos":[0,21]}]},{"pos":[261,394],"content":"The <ph id=\"ph1\">`ushort`</ph> keyword indicates an integral data type that stores values according to the size and range shown in the following table.","source":"The `ushort` keyword indicates an integral data type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[397,401]},{"content":"Range","pos":[402,407]},{"content":"Size","pos":[408,412]},{"content":".NET type","pos":[413,422]},{"content":"0 to 65,535","pos":[496,507]},{"content":"Unsigned 16-bit integer","pos":[508,531]},{"pos":[587,595],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`ushort`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.","pos":[597,752],"source":"You can declare and initialize a `ushort` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`ushort`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.UInt16.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph>), a compilation error occurs.","pos":[753,1001],"source":" If the integer literal is outside the range of `ushort` (that is, if it is less than <xref:System.UInt16.MinValue?displayProperty=nameWithType> or greater than <xref:System.UInt16.MaxValue?displayProperty=nameWithType>), a compilation error occurs."},{"pos":[1003,1183],"content":"In the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept> to <ph id=\"ph1\">`ushort`</ph> values.","source":"In the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](int.md) to `ushort` values."},{"pos":[1293,1455],"content":"[!NOTE]\nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[8,160],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"content":"Starting with C# 7.0, a couple of features have been added to enhance readability:","pos":[1457,1539]},{"pos":[1543,1622],"content":"C# 7.0 allows the usage of the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator.","source":"C# 7.0 allows the usage of the underscore character, `_`, as a digit separator."},{"content":"C# 7.2 allows <ph id=\"ph1\">`_`</ph> to be used as a digit separator for a binary or hexadecimal literal, after the prefix.","pos":[1625,1729],"source":"C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix."},{"content":"A decimal literal isn't permitted to have a leading underscore.","pos":[1730,1793]},{"content":"Some examples are shown below.","pos":[1795,1825]},{"pos":[1937,1965],"content":"Compiler overload resolution","linkify":"Compiler overload resolution","nodes":[{"content":"Compiler overload resolution","pos":[0,28]}]},{"content":"A cast must be used when you call overloaded methods.","pos":[1967,2020]},{"content":"Consider, for example, the following overloaded methods that use <ph id=\"ph1\">`ushort`</ph> and <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept> parameters:","pos":[2021,2124],"source":" Consider, for example, the following overloaded methods that use `ushort` and [int](int.md) parameters:"},{"pos":[2228,2308],"content":"Using the <ph id=\"ph1\">`ushort`</ph> cast guarantees that the correct type is called, for example:","source":"Using the `ushort` cast guarantees that the correct type is called, for example:"},{"pos":[2461,2472],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"pos":[2474,2666],"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`ushort`</ph> to <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>, <bpt id=\"p2\">[</bpt>uint<ept id=\"p2\">](uint.md)</ept>, <bpt id=\"p3\">[</bpt>long<ept id=\"p3\">](long.md)</ept>, <bpt id=\"p4\">[</bpt>ulong<ept id=\"p4\">](ulong.md)</ept>, <bpt id=\"p5\">[</bpt>float<ept id=\"p5\">](float.md)</ept>, <bpt id=\"p6\">[</bpt>double<ept id=\"p6\">](double.md)</ept>, or <bpt id=\"p7\">[</bpt>decimal<ept id=\"p7\">](decimal.md)</ept>.","source":"There is a predefined implicit conversion from `ushort` to [int](int.md), [uint](uint.md), [long](long.md), [ulong](ulong.md), [float](float.md), [double](double.md), or [decimal](decimal.md)."},{"content":"There is a predefined implicit conversion from <bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](byte.md)</ept> or <bpt id=\"p2\">[</bpt>char<ept id=\"p2\">](char.md)</ept> to <ph id=\"ph1\">`ushort`</ph>.","pos":[2668,2762],"source":"There is a predefined implicit conversion from [byte](byte.md) or [char](char.md) to `ushort`."},{"content":"Otherwise a cast must be used to perform an explicit conversion.","pos":[2763,2827]},{"content":"Consider, for example, the following two <ph id=\"ph1\">`ushort`</ph> variables <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph>:","pos":[2828,2900],"source":" Consider, for example, the following two `ushort` variables `x` and `y`:"},{"pos":[2939,3117],"content":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right side of the assignment operator evaluates to <ph id=\"ph1\">`int`</ph> by default.","source":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right side of the assignment operator evaluates to `int` by default."},{"content":"To fix this problem, use a cast:","pos":[3194,3226]},{"content":"It is possible though to use the following statements, where the destination variable has the same storage size or a larger storage size:","pos":[3300,3437]},{"content":"Notice also that there is no implicit conversion from floating-point types to <ph id=\"ph1\">`ushort`</ph>.","pos":[3485,3572],"source":"Notice also that there is no implicit conversion from floating-point types to `ushort`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[3573,3669]},{"pos":[3804,3947],"content":"For information about arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](double.md)</ept>.","source":"For information about arithmetic expressions with mixed floating-point types and integral types, see [float](float.md) and [double](double.md)."},{"pos":[3949,4095],"content":"For more information about implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept>.","source":"For more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)."},{"pos":[4100,4125],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](~/_csharplang/spec/types.md#integral-types)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[4127,4285],"source":"For more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[4286,4362]},{"pos":[4367,4375],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4402,4429],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4432,4488],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4491,4514],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[4517,4564],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](integral-types-table.md)</ept>","source":"[Integral Types Table](integral-types-table.md)"},{"pos":[4567,4614],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](built-in-types-table.md)</ept>","source":"[Built-In Types Table](built-in-types-table.md)"},{"pos":[4617,4692],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)"},{"pos":[4695,4770],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)"}]}