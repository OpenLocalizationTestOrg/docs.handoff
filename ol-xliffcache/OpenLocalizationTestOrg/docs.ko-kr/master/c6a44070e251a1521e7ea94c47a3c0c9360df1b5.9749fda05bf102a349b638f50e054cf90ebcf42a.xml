{"content":"---\ntitle: \"How to: Compare the Contents of Two Folders (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: c7c4870e-c500-4de3-afa4-2c8e07f510e6\n---\n# How to: Compare the Contents of Two Folders (LINQ) (C#)\nThis example demonstrates three ways to compare two file listings:  \n  \n-   By querying for a Boolean value that specifies whether the two file lists are identical.  \n  \n-   By querying for the intersection to retrieve the files that are in both folders.  \n  \n-   By querying for the set difference to retrieve the files that are in one folder but not the other.  \n  \n    > [!NOTE]\n    >  The techniques shown here can be adapted to compare sequences of objects of any type.  \n  \n The `FileComparer` class shown here demonstrates how to use a custom comparer class together with the Standard Query Operators. The class is not intended for use in real-world scenarios. It just uses the name and length in bytes of each file to determine whether the contents of each folder are identical or not. In a real-world scenario, you should modify this comparer to perform a more rigorous equality check.  \n  \n## Example  \n  \n```csharp  \nnamespace QueryCompareTwoDirs  \n{  \n    class CompareDirs  \n    {  \n  \n        static void Main(string[] args)  \n        {  \n  \n            // Create two identical or different temporary folders   \n            // on a local drive and change these file paths.  \n            string pathA = @\"C:\\TestDir\";  \n            string pathB = @\"C:\\TestDir2\";  \n  \n            System.IO.DirectoryInfo dir1 = new System.IO.DirectoryInfo(pathA);  \n            System.IO.DirectoryInfo dir2 = new System.IO.DirectoryInfo(pathB);  \n  \n            // Take a snapshot of the file system.  \n            IEnumerable<System.IO.FileInfo> list1 = dir1.GetFiles(\"*.*\", System.IO.SearchOption.AllDirectories);  \n            IEnumerable<System.IO.FileInfo> list2 = dir2.GetFiles(\"*.*\", System.IO.SearchOption.AllDirectories);  \n  \n            //A custom file comparer defined below  \n            FileCompare myFileCompare = new FileCompare();  \n  \n            // This query determines whether the two folders contain  \n            // identical file lists, based on the custom file comparer  \n            // that is defined in the FileCompare class.  \n            // The query executes immediately because it returns a bool.  \n            bool areIdentical = list1.SequenceEqual(list2, myFileCompare);  \n  \n            if (areIdentical == true)  \n            {  \n                Console.WriteLine(\"the two folders are the same\");  \n            }  \n            else  \n            {  \n                Console.WriteLine(\"The two folders are not the same\");  \n            }  \n  \n            // Find the common files. It produces a sequence and doesn't   \n            // execute until the foreach statement.  \n            var queryCommonFiles = list1.Intersect(list2, myFileCompare);  \n  \n            if (queryCommonFiles.Count() > 0)  \n            {  \n                Console.WriteLine(\"The following files are in both folders:\");  \n                foreach (var v in queryCommonFiles)  \n                {  \n                    Console.WriteLine(v.FullName); //shows which items end up in result list  \n                }  \n            }  \n            else  \n            {  \n                Console.WriteLine(\"There are no common files in the two folders.\");  \n            }  \n  \n            // Find the set difference between the two folders.  \n            // For this example we only check one way.  \n            var queryList1Only = (from file in list1  \n                                  select file).Except(list2, myFileCompare);  \n  \n            Console.WriteLine(\"The following files are in list1 but not list2:\");  \n            foreach (var v in queryList1Only)  \n            {  \n                Console.WriteLine(v.FullName);  \n            }  \n  \n            // Keep the console window open in debug mode.  \n            Console.WriteLine(\"Press any key to exit.\");  \n            Console.ReadKey();  \n        }  \n    }  \n  \n    // This implementation defines a very simple comparison  \n    // between two FileInfo objects. It only compares the name  \n    // of the files being compared and their length in bytes.  \n    class FileCompare : System.Collections.Generic.IEqualityComparer<System.IO.FileInfo>  \n    {  \n        public FileCompare() { }  \n  \n        public bool Equals(System.IO.FileInfo f1, System.IO.FileInfo f2)  \n        {  \n            return (f1.Name == f2.Name &&  \n                    f1.Length == f2.Length);  \n        }  \n  \n        // Return a hash that reflects the comparison criteria. According to the   \n        // rules for IEqualityComparer<T>, if Equals is true, then the hash codes must  \n        // also be equal. Because equality as defined here is a simple value equality, not  \n        // reference identity, it is possible that two or more objects will produce the same  \n        // hash code.  \n        public int GetHashCode(System.IO.FileInfo fi)  \n        {  \n            string s = $\"{fi.Name}{fi.Length}\";\n            return s.GetHashCode();  \n        }  \n    }  \n}  \n```  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces.  \n  \n## See also\n\n- [LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)\n- [LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)\n","nodes":[{"pos":[4,137],"embed":true,"restype":"x-metadata","content":"title: \"How to: Compare the Contents of Two Folders (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: c7c4870e-c500-4de3-afa4-2c8e07f510e6","nodes":[{"content":"How to: Compare the Contents of Two Folders (LINQ) (C#)","nodes":[{"pos":[0,55],"content":"How to: Compare the Contents of Two Folders (LINQ) (C#)","nodes":[{"content":"How to: Compare the Contents of Two Folders (LINQ) (C#)","pos":[0,55]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[144,199],"content":"How to: Compare the Contents of Two Folders (LINQ) (C#)","linkify":"How to: Compare the Contents of Two Folders (LINQ) (C#)","nodes":[{"content":"How to: Compare the Contents of Two Folders (LINQ) (C#)","pos":[0,55]}]},{"content":"This example demonstrates three ways to compare two file listings:","pos":[200,266]},{"content":"By querying for a Boolean value that specifies whether the two file lists are identical.","pos":[276,364]},{"content":"By querying for the intersection to retrieve the files that are in both folders.","pos":[374,454]},{"content":"By querying for the set difference to retrieve the files that are in one folder but not the other.","pos":[464,562]},{"pos":[574,674],"content":"[!NOTE]\nThe techniques shown here can be adapted to compare sequences of objects of any type.","leadings":["","    >  "],"nodes":[{"content":"The techniques shown here can be adapted to compare sequences of objects of any type.","pos":[8,93]}]},{"content":"The <ph id=\"ph1\">`FileComparer`</ph> class shown here demonstrates how to use a custom comparer class together with the Standard Query Operators.","pos":[681,808],"source":"The `FileComparer` class shown here demonstrates how to use a custom comparer class together with the Standard Query Operators."},{"content":"The class is not intended for use in real-world scenarios.","pos":[809,867]},{"content":"It just uses the name and length in bytes of each file to determine whether the contents of each folder are identical or not.","pos":[868,993]},{"content":"In a real-world scenario, you should modify this comparer to perform a more rigorous equality check.","pos":[994,1094]},{"pos":[1103,1110],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5122,5140],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[5144,5321],"content":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id=\"ph1\">`using`</ph> directives for the System.Linq and System.IO namespaces.","source":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces."},{"pos":[5330,5338],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5342,5435],"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept>","source":"[LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)"},{"pos":[5438,5551],"content":"<bpt id=\"p1\">[</bpt>LINQ and File Directories (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)</ept>","source":"[LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)"}]}