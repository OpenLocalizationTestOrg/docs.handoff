<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="local-functions.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e91069c25ebe6c2a22927391734e5030a908e4ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\local-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee18d7e4014c1ba84228143287527f91079d1716</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a45b93b0b9fd336db289796bc90d71153824d9a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Local functions - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Local functions (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, C# supports <bpt id="p1">*</bpt>local functions<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Local functions are private methods of a type that are nested in another member.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They can only be called from their containing member.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Local functions can be declared in and called from:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Methods, especially iterator methods and async methods</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Property accessors</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Event accessors</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Anonymous methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Lambda expressions</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Finalizers</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Other local functions</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, local functions can't be declared inside an expression-bodied member.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In some cases, you can use a lambda expression to implement functionality also supported by a local function.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For a comparison, see <bpt id="p1">[</bpt>Local functions compared to Lambda expressions<ept id="p1">](../../local-functions-vs-lambdas.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Local functions make the intent of your code clear.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Anyone reading you code can see that the method is not callable except by the containing method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For team projects, they also make it impossible for another developer to mistakenly call the method directly from elsewhere in the class or struct.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Local function syntax</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A local function is defined as a nested method inside a containing member.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Its definition has the following syntax:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Local functions can use the <bpt id="p1">[</bpt>async<ept id="p1">](../../language-reference/keywords/async.md)</ept> and <bpt id="p2">[</bpt>unsafe<ept id="p2">](../../language-reference/keywords/unsafe.md)</ept> modifiers.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that all local variables that are defined in the containing member, including its method parameters, are accessible in the local function.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Unlike a method definition, a local function definition cannot include the following elements:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The member access modifier.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because all local functions are private, including an access modifier, such as the <ph id="ph1">`private`</ph> keyword, generates compiler error CS0106, "The modifier 'private' is not valid for this item."</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>static<ept id="p1">](../../language-reference/keywords/static.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Including the <ph id="ph1">`static`</ph> keyword generates compiler error CS0106, "The modifier 'static' is not valid for this item."</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In addition, attributes can't be applied to the local function or to its parameters and type parameters.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example defines a local function named <ph id="ph1">`AppendPathSeparator`</ph> that is private to a method named <ph id="ph2">`GetText`</ph>:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Local functions and exceptions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>One of the useful features of local functions is that they can allow exceptions to surface immediately.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For method iterators, exceptions are surfaced only when the returned sequence is enumerated, and not when the iterator is retrieved.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For async methods, any exceptions thrown in an async method are observed when the returned task is awaited.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example defines an <ph id="ph1">`OddSequence`</ph> method that enumerates odd numbers between a specified range.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Because it passes a number greater than 100 to the <ph id="ph1">`OddSequence`</ph> enumerator method, the method throws an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As the output from the example shows, the exception surfaces only when you iterate the numbers, and not when you retrieve the enumerator.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Instead, you can throw an exception when performing validation and before retrieving the iterator by returning the iterator from a local function, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Local functions can be used in a similar way to handle exceptions outside of the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Ordinarily, exceptions thrown in async method require that you examine the inner exceptions of an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Local functions allow your code to fail fast and allow your exception to be both thrown and observed synchronously.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example uses an asynchronous method named <ph id="ph1">`GetMultipleAsync`</ph> to pause for a specified number of seconds and return a value that is a random multiple of that number of seconds.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The maximum delay is 5 seconds; an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> results if the value is greater than 5.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>As the following example shows, the exception that is thrown when a value of 6 is passed to the <ph id="ph1">`GetMultipleAsync`</ph> method is wrapped in an <ph id="ph2">&lt;xref:System.AggregateException&gt;</ph> after the <ph id="ph3">`GetMultipleAsync`</ph> method begins execution.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>As we did with the method iterator, we can refactor the code from this example to perform the validation before calling the asynchronous method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>As the output from the following example shows, the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> is not wrapped in a <ph id="ph2">&lt;xref:System.AggregateException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Methods<ept id="p1">](methods.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>