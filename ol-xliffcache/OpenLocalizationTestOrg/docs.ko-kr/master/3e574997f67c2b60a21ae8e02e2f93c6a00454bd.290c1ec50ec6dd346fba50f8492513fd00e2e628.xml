{"content":"---\ntitle: \"Implementing Business Logic (LINQ to SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: c4577590-7b12-42e1-84a6-95aa2562727e\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Implementing Business Logic (LINQ to SQL)\nThe term \"business logic\" in this topic refers to any custom rules or validation tests that you apply to data before it is inserted, updated or deleted from the database. Business logic is also sometimes referred to as \"business rules\" or \"domain logic.\" In n-tier applications it is typically designed as a logical layer so that it can be modified independently of the presentation layer or data access layer. The business logic can be invoked by the data access layer before or after any update, insertion, or deletion of data in the database.  \n  \n The business logic can be as simple as a schema validation to make sure that the type of the field is compatible with the type of the table column. Or it can consist of a set of objects that interact in arbitrarily complex ways. The rules may be implemented as stored procedures on the database or as in-memory objects. However the business logic is implemented, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] enables you use partial classes and partial methods to separate the business logic from the data access code.  \n  \n## How LINQ to SQL Invokes Your Business Logic  \n When you generate an entity class at design time, either manually or by using the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)] or SQLMetal, it is defined as a partial class. This means that, in a separate code file, you can define another part of the entity class that contains your custom business logic. At compile time, the two parts are merged into a single class. But if you have to regenerate your entity classes by using the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)] or SQLMetal, you can do so and your part of the class will not be modified.  \n  \n The partial classes that define entities and the <xref:System.Data.Linq.DataContext> contain partial methods. These are the extensibility points that you can use to apply your business logic before and after any update, insert, or delete for an entity or entity property. Partial methods can be thought of as compile-time events. The code-generator defines a method signature and calls the methods in the get and set property accessors, the `DataContext` constructor, and in some cases behind the scenes when <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. However, if you do not implement a particular partial method, then all the references to it and the definition are removed at compile time.  \n  \n In the implementing definition that you write in your separate code file, you can perform whatever custom logic is required. You can use your partial class itself as your domain layer, or you can call from your implementing definition of the partial method into a separate object or objects. Either way, your business logic is cleanly separated from both your data access code and your presentation layer code.  \n  \n## A Closer Look at the Extensibility Points  \n The following example shows part of the code generated by the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)] for the `DataContext` class that has two tables: `Customers` and `Orders`. Note that Insert, Update, and Delete methods are defined for each table in the class.  \n  \n```vb  \nPartial Public Class Northwnd  \n    Inherits System.Data.Linq.DataContext  \n  \n    Private Shared mappingSource As _  \n        System.Data.Linq.Mapping.MappingSource = New _  \n        AttributeMappingSource  \n  \n    #Region \"Extensibility Method Definitions\"  \n    Partial Private Sub OnCreated()  \n    End Sub  \n    Partial Private Sub InsertCustomer(instance As Customer)  \n    End Sub  \n    Partial Private Sub UpdateCustomer(instance As Customer)  \n    End Sub  \n    Partial Private Sub DeleteCustomer(instance As Customer)  \n    End Sub  \n    Partial Private Sub InsertOrder(instance As [Order])  \n    End Sub  \n    Partial Private Sub UpdateOrder(instance As [Order])  \n    End Sub  \n    Partial Private Sub DeleteOrder(instance As [Order])  \n    End Sub  \n    #End Region  \n```  \n  \n```csharp  \npublic partial class MyNorthWindDataContext : System.Data.Linq.DataContext  \n    {  \n        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();  \n  \n        #region Extensibility Method Definitions  \n        partial void OnCreated();  \n        partial void InsertCustomer(Customer instance);  \n        partial void UpdateCustomer(Customer instance);  \n        partial void DeleteCustomer(Customer instance);  \n        partial void InsertOrder(Order instance);  \n        partial void UpdateOrder(Order instance);  \n        partial void DeleteOrder(Order instance);  \n        #endregion  \n```  \n  \n If you implement the Insert, Update and Delete methods in your partial class, the [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] runtime will call them instead of its own default methods when <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. This enables you to override the default behavior for create / read / update / delete operations. For more information, see [Walkthrough: Customizing the insert, update, and delete behavior of entity classes](https://docs.microsoft.com/visualstudio/data-tools/walkthrough-customizing-the-insert-update-and-delete-behavior-of-entity-classes).  \n  \n The `OnCreated` method is called in the class constructor.  \n  \n```vb  \nPublic Sub New(ByVal connection As String)  \n    MyBase.New(connection, mappingSource)  \n    OnCreated()  \nEnd Sub  \n```  \n  \n```csharp  \npublic MyNorthWindDataContext(string connection) :  \n            base(connection, mappingSource)  \n        {  \n            OnCreated();  \n        }  \n```  \n  \n The entity classes have three methods that are called by the [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] runtime when the entity is created, loaded, and validated (when `SubmitChanges` is called). The entity classes also have two partial methods for each property, one that is called before the property is set, and one that is called after. The following code example shows some of the methods generated for the `Customer` class:  \n  \n```vb  \n#Region \"Extensibility Method Definitions\"  \n    Partial Private Sub OnLoaded()  \n    End Sub  \n    Partial Private Sub OnValidate(action As _  \n        System.Data.Linq.ChangeAction)  \n    End Sub  \n    Partial Private Sub OnCreated()  \n    End Sub  \n    Partial Private Sub OnCustomerIDChanging(value As String)  \n    End Sub  \n    Partial Private Sub OnCustomerIDChanged()  \n    End Sub  \n    Partial Private Sub OnCompanyNameChanging(value As String)  \n    End Sub  \n    Partial Private Sub OnCompanyNameChanged()  \n    End Sub  \n' ...Additional Changing/Changed methods for each property.  \n```  \n  \n```csharp  \n#region Extensibility Method Definitions  \n    partial void OnLoaded();  \n    partial void OnValidate();  \n    partial void OnCreated();  \n    partial void OnCustomerIDChanging(string value);  \n    partial void OnCustomerIDChanged();  \n    partial void OnCompanyNameChanging(string value);  \n    partial void OnCompanyNameChanged();  \n// ...additional Changing/Changed methods for each property  \n```  \n  \n The methods are called in the property set accessor as shown in the following example for the `CustomerID` property:  \n  \n```vb  \nPublic Property CustomerID() As String  \n    Set  \n        If (String.Equals(Me._CustomerID, value) = False) Then  \n            Me.OnCustomerIDChanging(value)  \n            Me.SendPropertyChanging()  \n            Me._CustomerID = value  \n            Me.SendPropertyChanged(\"CustomerID\")  \n            Me.OnCustomerIDChanged()  \n        End If  \n    End Set  \nEnd Property  \n```  \n  \n```csharp  \npublic string CustomerID  \n{  \n    set  \n    {  \n        if ((this._CustomerID != value))  \n        {  \n            this.OnCustomerIDChanging(value);  \n            this.SendPropertyChanging();  \n            this._CustomerID = value;  \n            this.SendPropertyChanged(\"CustomerID\");  \n            this.OnCustomerIDChanged();  \n        }  \n     }  \n}  \n```  \n  \n In your part of the class, you write an implementing definition of the method. In [!INCLUDE[vsprvs](../../../../../../includes/vsprvs-md.md)], after you type `partial` you will see IntelliSense for the method definitions in the other part of the class.  \n  \n```vb  \nPartial Public Class Customer  \n    Private Sub OnCustomerIDChanging(value As String)  \n        ' Perform custom validation logic here.  \n    End Sub  \nEnd Class  \n```  \n  \n```csharp  \npartial class Customer   \n    {  \n        partial void OnCustomerIDChanging(string value)  \n        {  \n            //Perform custom validation logic here.  \n        }  \n    }  \n```  \n  \n For more information about how to add business logic to your application by using partial methods, see the following topics:  \n  \n [How to: Add validation to entity classes](/visualstudio/data-tools/how-to-add-validation-to-entity-classes)  \n  \n [Walkthrough: Customizing the insert, update, and delete behavior of entity classes](https://docs.microsoft.com/visualstudio/data-tools/walkthrough-customizing-the-insert-update-and-delete-behavior-of-entity-classes)  \n  \n [Walkthrough: Adding Validation to Entity Classes](http://msdn.microsoft.com/library/85b06a02-b2e3-4534-95b8-d077c8d4c1d7)  \n  \n## See Also  \n [Partial Classes and Methods](~/docs/csharp/programming-guide/classes-and-structs/partial-classes-and-methods.md)   \n [Partial Methods](~/docs/visual-basic/programming-guide/language-features/procedures/partial-methods.md)   \n [LINQ to SQL Tools in Visual Studio](/visualstudio/data-tools/linq-to-sql-tools-in-visual-studio2)   \n [SqlMetal.exe (Code Generation Tool)](../../../../../../docs/framework/tools/sqlmetal-exe-code-generation-tool.md)","nodes":[{"pos":[12,70],"content":"Implementing Business Logic (LINQ to SQL) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Implementing Business Logic (LINQ to SQL) | Microsoft Docs","pos":[0,58]}]},{"pos":[379,420],"content":"Implementing Business Logic (LINQ to SQL)","linkify":"Implementing Business Logic (LINQ to SQL)","nodes":[{"content":"Implementing Business Logic (LINQ to SQL)","pos":[0,41]}]},{"content":"The term \"business logic\" in this topic refers to any custom rules or validation tests that you apply to data before it is inserted, updated or deleted from the database.","pos":[421,591]},{"content":"Business logic is also sometimes referred to as \"business rules\" or \"domain logic.\"","pos":[592,675]},{"content":"In n-tier applications it is typically designed as a logical layer so that it can be modified independently of the presentation layer or data access layer.","pos":[676,831]},{"content":"The business logic can be invoked by the data access layer before or after any update, insertion, or deletion of data in the database.","pos":[832,966]},{"content":"The business logic can be as simple as a schema validation to make sure that the type of the field is compatible with the type of the table column.","pos":[973,1120]},{"content":"Or it can consist of a set of objects that interact in arbitrarily complex ways.","pos":[1121,1201]},{"content":"The rules may be implemented as stored procedures on the database or as in-memory objects.","pos":[1202,1292]},{"content":"However the business logic is implemented, <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> enables you use partial classes and partial methods to separate the business logic from the data access code.","pos":[1293,1513],"source":" However the business logic is implemented, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] enables you use partial classes and partial methods to separate the business logic from the data access code."},{"pos":[1522,1565],"content":"How LINQ to SQL Invokes Your Business Logic","linkify":"How LINQ to SQL Invokes Your Business Logic","nodes":[{"content":"How LINQ to SQL Invokes Your Business Logic","pos":[0,43]}]},{"content":"When you generate an entity class at design time, either manually or by using the <ph id=\"ph1\">[!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)]</ph> or SQLMetal, it is defined as a partial class.","pos":[1569,1781],"source":"When you generate an entity class at design time, either manually or by using the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)] or SQLMetal, it is defined as a partial class."},{"content":"This means that, in a separate code file, you can define another part of the entity class that contains your custom business logic.","pos":[1782,1913]},{"content":"At compile time, the two parts are merged into a single class.","pos":[1914,1976]},{"content":"But if you have to regenerate your entity classes by using the <ph id=\"ph1\">[!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)]</ph> or SQLMetal, you can do so and your part of the class will not be modified.","pos":[1977,2199],"source":" But if you have to regenerate your entity classes by using the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)] or SQLMetal, you can do so and your part of the class will not be modified."},{"content":"The partial classes that define entities and the <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> contain partial methods.","pos":[2206,2315],"source":"The partial classes that define entities and the <xref:System.Data.Linq.DataContext> contain partial methods."},{"content":"These are the extensibility points that you can use to apply your business logic before and after any update, insert, or delete for an entity or entity property.","pos":[2316,2477]},{"content":"Partial methods can be thought of as compile-time events.","pos":[2478,2535]},{"content":"The code-generator defines a method signature and calls the methods in the get and set property accessors, the <ph id=\"ph1\">`DataContext`</ph> constructor, and in some cases behind the scenes when <ph id=\"ph2\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.","pos":[2536,2778],"source":" The code-generator defines a method signature and calls the methods in the get and set property accessors, the `DataContext` constructor, and in some cases behind the scenes when <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called."},{"content":"However, if you do not implement a particular partial method, then all the references to it and the definition are removed at compile time.","pos":[2779,2918]},{"content":"In the implementing definition that you write in your separate code file, you can perform whatever custom logic is required.","pos":[2925,3049]},{"content":"You can use your partial class itself as your domain layer, or you can call from your implementing definition of the partial method into a separate object or objects.","pos":[3050,3216]},{"content":"Either way, your business logic is cleanly separated from both your data access code and your presentation layer code.","pos":[3217,3335]},{"pos":[3344,3385],"content":"A Closer Look at the Extensibility Points","linkify":"A Closer Look at the Extensibility Points","nodes":[{"content":"A Closer Look at the Extensibility Points","pos":[0,41]}]},{"content":"The following example shows part of the code generated by the <ph id=\"ph1\">[!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)]</ph> for the <ph id=\"ph2\">`DataContext`</ph> class that has two tables: <ph id=\"ph3\">`Customers`</ph> and <ph id=\"ph4\">`Orders`</ph>.","pos":[3389,3609],"source":"The following example shows part of the code generated by the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)] for the `DataContext` class that has two tables: `Customers` and `Orders`."},{"content":"Note that Insert, Update, and Delete methods are defined for each table in the class.","pos":[3610,3695]},{"content":"If you implement the Insert, Update and Delete methods in your partial class, the <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> runtime will call them instead of its own default methods when <ph id=\"ph2\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.","pos":[5157,5433],"source":"If you implement the Insert, Update and Delete methods in your partial class, the [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] runtime will call them instead of its own default methods when <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called."},{"content":"This enables you to override the default behavior for create / read / update / delete operations.","pos":[5434,5531]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Customizing the insert, update, and delete behavior of entity classes<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/data-tools/walkthrough-customizing-the-insert-update-and-delete-behavior-of-entity-classes)</ept>.","pos":[5532,5775],"source":" For more information, see [Walkthrough: Customizing the insert, update, and delete behavior of entity classes](https://docs.microsoft.com/visualstudio/data-tools/walkthrough-customizing-the-insert-update-and-delete-behavior-of-entity-classes)."},{"pos":[5782,5840],"content":"The <ph id=\"ph1\">`OnCreated`</ph> method is called in the class constructor.","source":"The `OnCreated` method is called in the class constructor."},{"content":"The entity classes have three methods that are called by the <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> runtime when the entity is created, loaded, and validated (when <ph id=\"ph2\">`SubmitChanges`</ph> is called).","pos":[6152,6372],"source":"The entity classes have three methods that are called by the [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] runtime when the entity is created, loaded, and validated (when `SubmitChanges` is called)."},{"content":"The entity classes also have two partial methods for each property, one that is called before the property is set, and one that is called after.","pos":[6373,6517]},{"content":"The following code example shows some of the methods generated for the <ph id=\"ph1\">`Customer`</ph> class:","pos":[6518,6606],"source":" The following code example shows some of the methods generated for the `Customer` class:"},{"pos":[7644,7760],"content":"The methods are called in the property set accessor as shown in the following example for the <ph id=\"ph1\">`CustomerID`</ph> property:","source":"The methods are called in the property set accessor as shown in the following example for the `CustomerID` property:"},{"content":"In your part of the class, you write an implementing definition of the method.","pos":[8535,8613]},{"content":"In <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../../../../includes/vsprvs-md.md)]</ph>, after you type <ph id=\"ph2\">`partial`</ph> you will see IntelliSense for the method definitions in the other part of the class.","pos":[8614,8787],"source":" In [!INCLUDE[vsprvs](../../../../../../includes/vsprvs-md.md)], after you type `partial` you will see IntelliSense for the method definitions in the other part of the class."},{"content":"For more information about how to add business logic to your application by using partial methods, see the following topics:","pos":[9174,9298]},{"pos":[9305,9413],"content":"<bpt id=\"p1\">[</bpt>How to: Add validation to entity classes<ept id=\"p1\">](/visualstudio/data-tools/how-to-add-validation-to-entity-classes)</ept>","source":"[How to: Add validation to entity classes](/visualstudio/data-tools/how-to-add-validation-to-entity-classes)"},{"pos":[9420,9636],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Customizing the insert, update, and delete behavior of entity classes<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/data-tools/walkthrough-customizing-the-insert-update-and-delete-behavior-of-entity-classes)</ept>","source":"[Walkthrough: Customizing the insert, update, and delete behavior of entity classes](https://docs.microsoft.com/visualstudio/data-tools/walkthrough-customizing-the-insert-update-and-delete-behavior-of-entity-classes)"},{"pos":[9643,9765],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Adding Validation to Entity Classes<ept id=\"p1\">](http://msdn.microsoft.com/library/85b06a02-b2e3-4534-95b8-d077c8d4c1d7)</ept>","source":"[Walkthrough: Adding Validation to Entity Classes](http://msdn.microsoft.com/library/85b06a02-b2e3-4534-95b8-d077c8d4c1d7)"},{"pos":[9774,9782],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Partial Classes and Methods<ept id=\"p1\">](~/docs/csharp/programming-guide/classes-and-structs/partial-classes-and-methods.md)</ept><ph id=\"ph1\"> </ph>","pos":[9786,9900],"source":"[Partial Classes and Methods](~/docs/csharp/programming-guide/classes-and-structs/partial-classes-and-methods.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Partial Methods<ept id=\"p1\">](~/docs/visual-basic/programming-guide/language-features/procedures/partial-methods.md)</ept><ph id=\"ph1\"> </ph>","pos":[9903,10009],"source":" [Partial Methods](~/docs/visual-basic/programming-guide/language-features/procedures/partial-methods.md) "},{"content":"<bpt id=\"p1\"> [</bpt>LINQ to SQL Tools in Visual Studio<ept id=\"p1\">](/visualstudio/data-tools/linq-to-sql-tools-in-visual-studio2)</ept><ph id=\"ph1\"> </ph>","pos":[10012,10112],"source":" [LINQ to SQL Tools in Visual Studio](/visualstudio/data-tools/linq-to-sql-tools-in-visual-studio2) "},{"content":"<bpt id=\"p1\"> [</bpt>SqlMetal.exe (Code Generation Tool)<ept id=\"p1\">](../../../../../../docs/framework/tools/sqlmetal-exe-code-generation-tool.md)</ept>","pos":[10115,10230],"source":" [SqlMetal.exe (Code Generation Tool)](../../../../../../docs/framework/tools/sqlmetal-exe-code-generation-tool.md)"}]}