{"content":"---\ntitle: \"Char Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Char\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"literal type characters, C\"\n  - \"Char data type\"\n  - \"C literal type character\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Char data type, character literals\"\nms.assetid: cd7547a9-7855-4e8e-b216-35d74a362657\ncaps.latest.revision: 17\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Char Data Type (Visual Basic)\nHolds unsigned 16-bit (2-byte) code points ranging in value from 0 through 65535. Each *code point*, or character code, represents a single Unicode character.  \n  \n## Remarks  \n Use the `Char` data type when you need to hold only a single character and do not need the overhead of `String`. In some cases you can use `Char()`, an array of `Char` elements, to hold multiple characters.  \n  \n The default value of `Char` is the character with a code point of 0.  \n  \n## Unicode Characters  \n The first 128 code points (0–127) of Unicode correspond to the letters and symbols on a standard U.S. keyboard. These first 128 code points are the same as those the ASCII character set defines. The second 128 code points (128–255) represent special characters, such as Latin-based alphabet letters, accents, currency symbols, and fractions. Unicode uses the remaining code points (256-65535) for a wide variety of symbols, including worldwide textual characters, diacritics, and mathematical and technical symbols.  \n  \n You can use methods like <xref:System.Char.IsDigit%2A> and <xref:System.Char.IsPunctuation%2A> on a `Char` variable to determine its Unicode classification.  \n  \n## Type Conversions  \n Visual Basic does not convert directly between `Char` and the numeric types. You can use the <xref:Microsoft.VisualBasic.Strings.Asc%2A> or <xref:Microsoft.VisualBasic.Strings.AscW%2A> function to convert a `Char` value to an `Integer` that represents its code point. You can use the <xref:Microsoft.VisualBasic.Strings.Chr%2A> or <xref:Microsoft.VisualBasic.Strings.ChrW%2A> function to convert an `Integer` value to a `Char` that has that code point.  \n  \n If the type checking switch ([Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)) is on, you must append the literal type character to a single-character string literal to identify it as the `Char` data type. The following example illustrates this.  \n  \n```  \nOption Strict On  \nDim charVar As Char  \n' The following statement attempts to convert a String literal to Char.  \n' Because Option Strict is On, it generates a compiler error.  \ncharVar = \"Z\"  \n' The following statement succeeds because it specifies a Char literal.  \ncharVar = \"Z\"C  \n```  \n  \n## Programming Tips  \n  \n-   **Negative Numbers.** `Char` is an unsigned type and cannot represent a negative value. In any case, you should not use `Char` to hold numeric values.  \n  \n-   **Interop Considerations.** If you interface with components not written for the .NET Framework, for example Automation or COM objects, remember that character types have a different data width (8 bits) in other environments. If you pass an 8-bit argument to such a component, declare it as `Byte` instead of `Char` in your new Visual Basic code.  \n  \n-   **Widening.** The `Char` data type widens to `String`. This means you can convert `Char` to `String` and will not encounter a <xref:System.OverflowException?displayProperty=fullName> error.  \n  \n-   **Type Characters.** Appending the literal type character `C` to a single-character string literal forces it to the `Char` data type. `Char` has no identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Char?displayProperty=fullName> structure.  \n  \n## See Also  \n <xref:System.Char?displayProperty=fullName>   \n <xref:Microsoft.VisualBasic.Strings.Asc%2A>   \n <xref:Microsoft.VisualBasic.Strings.AscW%2A>   \n <xref:Microsoft.VisualBasic.Strings.Chr%2A>   \n <xref:Microsoft.VisualBasic.Strings.ChrW%2A>   \n [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [String Data Type](../../../visual-basic/language-reference/data-types/string-data-type.md)   \n [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)   \n [How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)   \n [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)","nodes":[{"pos":[4,715],"nodes":[{"content":"Char Data Type (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"Char Data Type (Visual Basic) | Microsoft Docs","nodes":[{"content":"Char Data Type (Visual Basic) | Microsoft Docs","pos":[0,46]}]}],"pos":[6,55],"yaml":true}],"content":"title: \"Char Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Char\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"literal type characters, C\"\n  - \"Char data type\"\n  - \"C literal type character\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Char data type, character literals\"\nms.assetid: cd7547a9-7855-4e8e-b216-35d74a362657\ncaps.latest.revision: 17\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[722,751],"content":"Char Data Type (Visual Basic)","linkify":"Char Data Type (Visual Basic)","nodes":[{"content":"Char Data Type (Visual Basic)","pos":[0,29]}]},{"content":"Holds unsigned 16-bit (2-byte) code points ranging in value from 0 through 65535.","pos":[752,833]},{"content":"Each <bpt id=\"p1\">*</bpt>code point<ept id=\"p1\">*</ept>, or character code, represents a single Unicode character.","pos":[834,910],"source":" Each *code point*, or character code, represents a single Unicode character."},{"pos":[919,926],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the <ph id=\"ph1\">`Char`</ph> data type when you need to hold only a single character and do not need the overhead of <ph id=\"ph2\">`String`</ph>.","pos":[930,1042],"source":"Use the `Char` data type when you need to hold only a single character and do not need the overhead of `String`."},{"content":"In some cases you can use <ph id=\"ph1\">`Char()`</ph>, an array of <ph id=\"ph2\">`Char`</ph> elements, to hold multiple characters.","pos":[1043,1136],"source":" In some cases you can use `Char()`, an array of `Char` elements, to hold multiple characters."},{"pos":[1143,1211],"content":"The default value of <ph id=\"ph1\">`Char`</ph> is the character with a code point of 0.","source":"The default value of `Char` is the character with a code point of 0."},{"pos":[1220,1238],"content":"Unicode Characters","linkify":"Unicode Characters","nodes":[{"content":"Unicode Characters","pos":[0,18]}]},{"content":"The first 128 code points (0–127) of Unicode correspond to the letters and symbols on a standard U.S. keyboard.","pos":[1242,1353]},{"content":"These first 128 code points are the same as those the ASCII character set defines.","pos":[1354,1436]},{"content":"The second 128 code points (128–255) represent special characters, such as Latin-based alphabet letters, accents, currency symbols, and fractions.","pos":[1437,1583]},{"content":"Unicode uses the remaining code points (256-65535) for a wide variety of symbols, including worldwide textual characters, diacritics, and mathematical and technical symbols.","pos":[1584,1757]},{"pos":[1764,1920],"content":"You can use methods like <ph id=\"ph1\">&lt;xref:System.Char.IsDigit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Char.IsPunctuation%2A&gt;</ph> on a <ph id=\"ph3\">`Char`</ph> variable to determine its Unicode classification.","source":"You can use methods like <xref:System.Char.IsDigit%2A> and <xref:System.Char.IsPunctuation%2A> on a `Char` variable to determine its Unicode classification."},{"pos":[1929,1945],"content":"Type Conversions","linkify":"Type Conversions","nodes":[{"content":"Type Conversions","pos":[0,16]}]},{"content":"Visual Basic does not convert directly between <ph id=\"ph1\">`Char`</ph> and the numeric types.","pos":[1949,2025],"source":"Visual Basic does not convert directly between `Char` and the numeric types."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Asc%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</ph> function to convert a <ph id=\"ph3\">`Char`</ph> value to an <ph id=\"ph4\">`Integer`</ph> that represents its code point.","pos":[2026,2216],"source":" You can use the <xref:Microsoft.VisualBasic.Strings.Asc%2A> or <xref:Microsoft.VisualBasic.Strings.AscW%2A> function to convert a `Char` value to an `Integer` that represents its code point."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Chr%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Strings.ChrW%2A&gt;</ph> function to convert an <ph id=\"ph3\">`Integer`</ph> value to a <ph id=\"ph4\">`Char`</ph> that has that code point.","pos":[2217,2401],"source":" You can use the <xref:Microsoft.VisualBasic.Strings.Chr%2A> or <xref:Microsoft.VisualBasic.Strings.ChrW%2A> function to convert an `Integer` value to a `Char` that has that code point."},{"content":"If the type checking switch (<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>) is on, you must append the literal type character to a single-character string literal to identify it as the <ph id=\"ph1\">`Char`</ph> data type.","pos":[2408,2670],"source":"If the type checking switch ([Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)) is on, you must append the literal type character to a single-character string literal to identify it as the `Char` data type."},{"content":"The following example illustrates this.","pos":[2671,2710]},{"pos":[3020,3036],"content":"Programming Tips","linkify":"Programming Tips","nodes":[{"content":"Programming Tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Negative Numbers.<ept id=\"p1\">**</ept>","pos":[3046,3067],"source":"**Negative Numbers.**"},{"content":"<ph id=\"ph1\">`Char`</ph> is an unsigned type and cannot represent a negative value.","pos":[3068,3133],"source":"`Char` is an unsigned type and cannot represent a negative value."},{"content":"In any case, you should not use <ph id=\"ph1\">`Char`</ph> to hold numeric values.","pos":[3134,3196],"source":" In any case, you should not use `Char` to hold numeric values."},{"content":"<bpt id=\"p1\">**</bpt>Interop Considerations.<ept id=\"p1\">**</ept>","pos":[3206,3233],"source":"**Interop Considerations.**"},{"content":"If you interface with components not written for the .NET Framework, for example Automation or COM objects, remember that character types have a different data width (8 bits) in other environments.","pos":[3234,3431]},{"content":"If you pass an 8-bit argument to such a component, declare it as <ph id=\"ph1\">`Byte`</ph> instead of <ph id=\"ph2\">`Char`</ph> in your new Visual Basic code.","pos":[3432,3552],"source":" If you pass an 8-bit argument to such a component, declare it as `Byte` instead of `Char` in your new Visual Basic code."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[3562,3575],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`Char`</ph> data type widens to <ph id=\"ph2\">`String`</ph>.","pos":[3576,3616],"source":" The `Char` data type widens to `String`."},{"content":"This means you can convert <ph id=\"ph1\">`Char`</ph> to <ph id=\"ph2\">`String`</ph> and will not encounter a <ph id=\"ph3\">&lt;xref:System.OverflowException?displayProperty=fullName&gt;</ph> error.","pos":[3617,3751],"source":" This means you can convert `Char` to `String` and will not encounter a <xref:System.OverflowException?displayProperty=fullName> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[3761,3781],"source":"**Type Characters.**"},{"content":"Appending the literal type character <ph id=\"ph1\">`C`</ph> to a single-character string literal forces it to the <ph id=\"ph2\">`Char`</ph> data type.","pos":[3782,3894],"source":" Appending the literal type character `C` to a single-character string literal forces it to the `Char` data type."},{"content":"<ph id=\"ph1\">`Char`</ph> has no identifier type character.","pos":[3895,3935],"source":"`Char` has no identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[3945,3964],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Char?displayProperty=fullName&gt;</ph> structure.","pos":[3965,4071],"source":" The corresponding type in the .NET Framework is the <xref:System.Char?displayProperty=fullName> structure."},{"pos":[4080,4088],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Char?displayProperty=fullName&gt;</ph>","pos":[4092,4135],"source":"<xref:System.Char?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Asc%2A&gt;</ph>","pos":[4140,4183],"source":"<xref:Microsoft.VisualBasic.Strings.Asc%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</ph>","pos":[4188,4232],"source":"<xref:Microsoft.VisualBasic.Strings.AscW%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Chr%2A&gt;</ph>","pos":[4237,4280],"source":"<xref:Microsoft.VisualBasic.Strings.Chr%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.ChrW%2A&gt;</ph>","pos":[4285,4329],"source":"<xref:Microsoft.VisualBasic.Strings.ChrW%2A> "},{"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[4334,4421],"source":"[Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>String Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/string-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[4425,4517],"source":"[String Data Type](../../../visual-basic/language-reference/data-types/string-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[4521,4630],"source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[4634,4728],"source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id=\"p1\">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4732,4905],"source":"[How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","pos":[4909,5039],"source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}