<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="declare-statement.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbb7b4e118598157e2005469f89831df50de6576</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\declare-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fec4673def9c3731b82b8fb750a78250e72876bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e5e423d3a8313e75ad67dcc1b6ebc799239c190</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Declare Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Declare Statement</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares a reference to a procedure implemented in an external file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Attribute List<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- </ph><bpt id="p1">[</bpt>Protected Friend<ept id="p1">](../../language-reference/modifiers/protected-friend.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- </ph><bpt id="p1">[</bpt>Private Protected<ept id="p1">](../../language-reference/modifiers/private-protected.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Access levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Specifies character set and file search information.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Ansi<ept id="p1">](../../../visual-basic/language-reference/modifiers/ansi.md)</ept> (default)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Unicode<ept id="p1">](../../../visual-basic/language-reference/modifiers/unicode.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Auto<ept id="p1">](../../../visual-basic/language-reference/modifiers/auto.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Optional, but either <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph> must appear.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Indicates that the external procedure does not return a value.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Optional, but either <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph> must appear.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Indicates that the external procedure returns a value.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Name of this external reference.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Introduces a <ph id="ph1">`Lib`</ph> clause, which identifies the external file (DLL or code resource) that contains an external procedure.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Name of the file that contains the declared procedure.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Indicates that the procedure being declared cannot be identified within its file by the name specified in <ph id="ph1">`name`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You specify its identification in <ph id="ph1">`aliasname`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Required if you use the <ph id="ph1">`Alias`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>String that identifies the procedure in one of two ways:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The entry point name of the procedure within its file, within quotes (<ph id="ph1">`""`</ph>)</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A number sign (<ph id="ph1">`#`</ph>) followed by an integer specifying the ordinal number of the procedure's entry point within its file</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Required if the procedure takes parameters.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Parameter List<ept id="p1">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`Function`</ph> is specified and <ph id="ph2">`Option Strict`</ph> is <ph id="ph3">`On`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Data type of the value returned by the procedure.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Sometimes you need to call a procedure defined in a file (such as a DLL or code resource) outside your project.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you do this, the Visual Basic compiler does not have access to the information it needs to call the procedure correctly, such as where the procedure is located, how it is identified, its calling sequence and return type, and the string character set it uses.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Declare`</ph> statement creates a reference to an external procedure and supplies this necessary information.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Declare`</ph> only at module level.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This means the <bpt id="p1">*</bpt>declaration context<ept id="p1">*</ept> for an external reference must be a class, structure, or module, and cannot be a source file, namespace, interface, procedure, or block.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declaration Contexts and Default Access Levels<ept id="p1">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>External references default to <bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept> access.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can adjust their access levels with the access modifiers.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Rules</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Attributes.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can apply attributes to an external reference.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Any attribute you apply has effect only in your project, not in the external file.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Modifiers.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>External procedures are implicitly <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You cannot use the <ph id="ph1">`Shared`</ph> keyword when declaring an external reference, and you cannot alter its shared status.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>An external procedure cannot participate in overriding, implement interface members, or handle events.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Accordingly, you cannot use the <ph id="ph1">`Overrides`</ph>, <ph id="ph2">`Overridable`</ph>, <ph id="ph3">`NotOverridable`</ph>, <ph id="ph4">`MustOverride`</ph>, <ph id="ph5">`Implements`</ph>, or <ph id="ph6">`Handles`</ph> keyword in a <ph id="ph7">`Declare`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>External Procedure Name.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You do not have to give this external reference the same name (in <ph id="ph1">`name`</ph>) as the procedure's entry-point name within its external file (<ph id="ph2">`aliasname`</ph>).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can use an <ph id="ph1">`Alias`</ph> clause to specify the entry-point name.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This can be useful if the external procedure has the same name as a Visual Basic reserved modifier or a variable, procedure, or any other programming element in the same scope.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Entry-point names in most DLLs are case-sensitive.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>External Procedure Number.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use an <ph id="ph1">`Alias`</ph> clause to specify the ordinal number of the entry point within the export table of the external file.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To do this, you begin <ph id="ph1">`aliasname`</ph> with a number sign (<ph id="ph2">`#`</ph>).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This can be useful if any character in the external procedure name is not allowed in Visual Basic, or if the external file exports the procedure without a name.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Data Type Rules</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameter Data Types.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`On`</ph>, you must specify the data type of each parameter in <ph id="ph3">`parameterlist`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This can be any data type or the name of an enumeration, structure, class, or interface.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Within <ph id="ph1">`parameterlist`</ph>, you use an <ph id="ph2">`As`</ph> clause to specify the data type of the argument to be passed to each parameter.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the external procedure was not written for the .NET Framework, you must take care that the data types correspond.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example, if you declare an external reference to a Visual Basic 6.0 procedure with an <ph id="ph1">`Integer`</ph> parameter (16 bits in Visual Basic 6.0), you must identify the corresponding argument as <ph id="ph2">`Short`</ph> in the <ph id="ph3">`Declare`</ph> statement, because that is the 16-bit integer type in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Similarly, <ph id="ph1">`Long`</ph> has a different data width in Visual Basic 6.0, and <ph id="ph2">`Date`</ph> is implemented differently.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Return Data Type.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the external procedure is a <ph id="ph1">`Function`</ph> and <ph id="ph2">`Option Strict`</ph> is <ph id="ph3">`On`</ph>, you must specify the data type of the value returned to the calling code.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This can be any data type or the name of an enumeration, structure, class, or interface.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The Visual Basic compiler does not verify that your data types are compatible with those of the external procedure.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If there is a mismatch, the common language runtime generates a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalDirectiveException&gt;</ph> exception at run time.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default Data Types.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`Off`</ph> and you do not specify the data type of a parameter in <ph id="ph3">`parameterlist`</ph>, the Visual Basic compiler converts the corresponding argument to the <bpt id="p1">[</bpt>Object Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Similarly, if you do not specify <ph id="ph1">`returntype`</ph>, the compiler takes the return data type to be <ph id="ph2">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Because you are dealing with an external procedure that might have been written on a different platform, it is dangerous to make any assumptions about data types or to allow them to default.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>It is much safer to specify the data type of every parameter and of the return value, if any.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This also improves the readability of your code.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Scope.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An external reference is in scope throughout its class, structure, or module.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Lifetime.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>An external reference has the same lifetime as the class, structure, or module in which it is declared.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Calling an External Procedure.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You call an external procedure the same way you call a <ph id="ph1">`Function`</ph> or <ph id="ph2">`Sub`</ph> procedure—by using it in an expression if it returns a value, or by specifying it in a <bpt id="p1">[</bpt>Call Statement<ept id="p1">](../../../visual-basic/language-reference/statements/call-statement.md)</ept> if it does not return a value.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You pass arguments to the external procedure exactly as specified by <ph id="ph1">`parameterlist`</ph> in the <ph id="ph2">`Declare`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Do not take into account how the parameters were originally declared in the external file.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Similarly, if there is a return value, use it exactly as specified by <ph id="ph1">`returntype`</ph> in the <ph id="ph2">`Declare`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Character Sets.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can specify in <ph id="ph1">`charsetmodifier`</ph> how Visual Basic should marshal strings when it calls the external procedure.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Ansi`</ph> modifier directs Visual Basic to marshal all strings to ANSI values, and the <ph id="ph2">`Unicode`</ph> modifier directs it to marshal all strings to Unicode values.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Auto`</ph> modifier directs Visual Basic to marshal strings according to .NET Framework rules based on the external reference <ph id="ph2">`name`</ph>, or <ph id="ph3">`aliasname`</ph> if specified.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`Ansi`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`charsetmodifier`</ph> also specifies how Visual Basic should look up the external procedure within its external file.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Ansi`</ph> and <ph id="ph2">`Unicode`</ph> both direct Visual Basic to look it up without modifying its name during the search.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Auto`</ph> directs Visual Basic to determine the base character set of the run-time platform and possibly modify the external procedure name, as follows:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>On an ANSI platform, such as Windows 95, Windows 98, or Windows Millennium Edition, first look up the external procedure with no name modification.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If that fails, append "A" to the end of the external procedure name and look it up again.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>On a Unicode platform, such as Windows NT, Windows 2000, or Windows XP, first look up the external procedure with no name modification.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If that fails, append "W" to the end of the external procedure name and look it up again.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Mechanism.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Visual Basic uses the .NET Framework <bpt id="p1">*</bpt>platform invoke<ept id="p1">*</ept> (PInvoke) mechanism to resolve and access external procedures.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Declare`</ph> statement and the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> class both use this mechanism automatically, and you do not need any knowledge of PInvoke.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Walkthrough: Calling Windows APIs<ept id="p1">](../../../visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If the external procedure runs outside the common language runtime (CLR), it is <bpt id="p1">*</bpt>unmanaged code<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When you call such a procedure, for example a Windows API function or a COM method, you might expose your application to security risks.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Secure Coding Guidelines for Unmanaged Code<ept id="p1">](../../../framework/security/secure-coding-guidelines-for-unmanaged-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following example declares an external reference to a <ph id="ph1">`Function`</ph> procedure that returns the current user name.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It then calls the external procedure <ph id="ph1">`GetUserNameA`</ph> as part of the <ph id="ph2">`getUser`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> provides an alternative way of using functions in unmanaged code.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The following example declares an imported function without using a <ph id="ph1">`Declare`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Imports Statement (.NET Namespace and Type)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AddressOf Operator<ept id="p1">](../../../visual-basic/language-reference/operators/addressof-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Statement<ept id="p1">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parameter List<ept id="p1">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Call Statement<ept id="p1">](../../../visual-basic/language-reference/statements/call-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Calling Windows APIs<ept id="p1">](../../../visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>