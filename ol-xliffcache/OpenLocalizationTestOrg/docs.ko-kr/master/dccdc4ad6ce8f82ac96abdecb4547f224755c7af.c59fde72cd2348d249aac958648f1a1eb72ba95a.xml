{"content":"---\ntitle: \"Custom Token Handlers | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 5062669f-8bfc-420a-a25d-d8ab992ab10e\ncaps.latest.revision: 4\nauthor: \"BrucePerlerMS\"\nms.author: \"bruceper\"\nmanager: \"mbaldwin\"\n---\n# Custom Token Handlers\nThis topic discusses token handlers in WIF and how they are used to process tokens. The topic also covers what is necessary to create custom token handlers for token types that are not supported by default in WIF.  \n  \n## Introduction to Token Handlers in WIF  \n WIF relies on security token handlers to create, read, write, and validate tokens for a relying party (RP) application or a security token service (STS). Token handlers are extensibility points for you to add a custom token handler in the WIF pipeline, or to customize the way that an existing token handler manages tokens. WIF provides nine built-in security token handlers that can be modified or entirely overridden to change the functionality as necessary.  \n  \n## Built-In Security Token Handlers in WIF  \n WIF 4.5 includes nine security token handler classes that derive from the abstract base class <xref:System.IdentityModel.Tokens.SecurityTokenHandler>:  \n  \n-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  \n  \n## Adding a Custom Token Handler  \n Some token types, such as Simple Web Tokens (SWT) and JSON Web Tokens (JWT) do not have built-in token handlers provided by WIF. For these token types and for others that do not have a built-in handler, you need to perform the following steps to create a custom token handler.  \n  \n#### Adding a custom token handler  \n  \n1.  Create a new class that derives from <xref:System.IdentityModel.Tokens.SecurityTokenHandler>.  \n  \n2.  Override the following methods and provide your own implementation:  \n  \n    -   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A>  \n  \n    -   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A>  \n  \n    -   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>  \n  \n    -   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>  \n  \n    -   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A>  \n  \n    -   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>  \n  \n3.  Add a reference to the new custom token handler in the *Web.config* or *App.config* file, within the **\\<system.identityModel>** section that applies to WIF. For example, the following configuration markup specifies a new token handler named **MyCustomTokenHandler** that resides in the **CustomToken** namespace.  \n  \n    ```  \n    <system.identityModel>  \n        <identityConfiguration saveBootstrapContext=\"true\">  \n            <securityTokenHandlers>  \n                <add type=\"CustomToken.MyCustomTokenHandler, CustomToken\" />  \n            </securityTokenHandlers>  \n        </identityConfiguration>  \n    </system.identityModel>  \n    ```  \n  \n     Note that if you are providing your own token handler to handle a token type that already has a built-in token handler, you need to add a **\\<remove>** element to drop the default handler and use your custom handler instead. For example, the following configuration replaces the default <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler> with the custom token handler:  \n  \n    ```  \n    <system.identityModel>  \n        <identityConfiguration saveBootstrapContext=\"true\">  \n            <securityTokenHandlers>  \n                <remove type=\"System.IdentityModel.Tokens.SamlSecurityTokenHandler, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=abcdefg123456789\">  \n                <add type=\"CustomToken.MyCustomTokenHandler, CustomToken\" />  \n            </securityTokenHandlers>  \n        </identityConfiguration>  \n    </system.identityModel>  \n    ```","nodes":[{"pos":[12,50],"content":"Custom Token Handlers | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Custom Token Handlers | Microsoft Docs","pos":[0,38]}]},{"pos":[359,380],"content":"Custom Token Handlers","linkify":"Custom Token Handlers","nodes":[{"content":"Custom Token Handlers","pos":[0,21]}]},{"content":"This topic discusses token handlers in WIF and how they are used to process tokens.","pos":[381,464]},{"content":"The topic also covers what is necessary to create custom token handlers for token types that are not supported by default in WIF.","pos":[465,594]},{"pos":[603,640],"content":"Introduction to Token Handlers in WIF","linkify":"Introduction to Token Handlers in WIF","nodes":[{"content":"Introduction to Token Handlers in WIF","pos":[0,37]}]},{"content":"WIF relies on security token handlers to create, read, write, and validate tokens for a relying party (RP) application or a security token service (STS).","pos":[644,797]},{"content":"Token handlers are extensibility points for you to add a custom token handler in the WIF pipeline, or to customize the way that an existing token handler manages tokens.","pos":[798,967]},{"content":"WIF provides nine built-in security token handlers that can be modified or entirely overridden to change the functionality as necessary.","pos":[968,1104]},{"pos":[1113,1152],"content":"Built-In Security Token Handlers in WIF","linkify":"Built-In Security Token Handlers in WIF","nodes":[{"content":"Built-In Security Token Handlers in WIF","pos":[0,39]}]},{"content":"WIF 4.5 includes nine security token handler classes that derive from the abstract base class <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph>:","pos":[1156,1306],"source":"WIF 4.5 includes nine security token handler classes that derive from the abstract base class <xref:System.IdentityModel.Tokens.SecurityTokenHandler>:"},{"pos":[1963,1992],"content":"Adding a Custom Token Handler","linkify":"Adding a Custom Token Handler","nodes":[{"content":"Adding a Custom Token Handler","pos":[0,29]}]},{"content":"Some token types, such as Simple Web Tokens (SWT) and JSON Web Tokens (JWT) do not have built-in token handlers provided by WIF.","pos":[1996,2124]},{"content":"For these token types and for others that do not have a built-in handler, you need to perform the following steps to create a custom token handler.","pos":[2125,2272]},{"pos":[2283,2312],"content":"Adding a custom token handler","linkify":"Adding a custom token handler","nodes":[{"content":"Adding a custom token handler","pos":[0,29]}]},{"content":"Create a new class that derives from <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph>.","pos":[2322,2415],"source":"Create a new class that derives from <xref:System.IdentityModel.Tokens.SecurityTokenHandler>."},{"content":"Override the following methods and provide your own implementation:","pos":[2425,2492]},{"content":"Add a reference to the new custom token handler in the <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>App.config<ept id=\"p2\">*</ept> file, within the <bpt id=\"p3\">**</bpt><ph id=\"ph1\">\\&lt;</ph>system.identityModel&gt;<ept id=\"p3\">**</ept> section that applies to WIF.","pos":[3013,3170],"source":"Add a reference to the new custom token handler in the *Web.config* or *App.config* file, within the **\\<system.identityModel>** section that applies to WIF."},{"content":"For example, the following configuration markup specifies a new token handler named <bpt id=\"p1\">**</bpt>MyCustomTokenHandler<ept id=\"p1\">**</ept> that resides in the <bpt id=\"p2\">**</bpt>CustomToken<ept id=\"p2\">**</ept> namespace.","pos":[3171,3326],"source":" For example, the following configuration markup specifies a new token handler named **MyCustomTokenHandler** that resides in the **CustomToken** namespace."},{"content":"Note that if you are providing your own token handler to handle a token type that already has a built-in token handler, you need to add a <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>remove&gt;<ept id=\"p1\">**</ept> element to drop the default handler and use your custom handler instead.","pos":[3672,3896],"source":"Note that if you are providing your own token handler to handle a token type that already has a built-in token handler, you need to add a **\\<remove>** element to drop the default handler and use your custom handler instead."},{"content":"For example, the following configuration replaces the default <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler&gt;</ph> with the custom token handler:","pos":[3897,4049],"source":" For example, the following configuration replaces the default <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler> with the custom token handler:"}]}