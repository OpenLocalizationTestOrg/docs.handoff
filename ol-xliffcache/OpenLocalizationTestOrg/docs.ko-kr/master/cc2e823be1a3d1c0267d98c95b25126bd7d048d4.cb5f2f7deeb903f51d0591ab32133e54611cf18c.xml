{"content":"---\ntitle: Unit testing in .NET Core using dotnet test | Microsoft Docs\ndescription: Unit Testing in .NET Core using dotnet test\nkeywords: .NET, .NET Core\nauthor: ardalis\nms.author: wiwagn\nms.date: 03/21/2017\nms.topic: article\nms.prod: .net-core\nms.devlang: dotnet\nms.assetid: bdcdb812-6f13-4f20-9e90-0c0977937142\n---\n\n# Unit testing in .NET Core using dotnet test\n\nThis tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts. If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test/) before you begin. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\n### Creating the source project\n\nOpen a shell window. Create a directory called *unit-testing-using-dotnet-test* to hold the solution. Inside this new directory, create a *PrimeService* directory. The directory structure thus far is shown below:\n\n```\n/unit-testing-using-dotnet-test\n    /PrimeService\n```\n\nMake *PrimeService* the current directory and run [`dotnet new classlib`](../tools/dotnet-new.md) to create the source project. Rename *Class1.cs* to *PrimeService.cs*. To use test-driven development (TDD), you'll create a failing implementation of the `PrimeService` class:\n\n```csharp\nusing System;\n\nnamespace Prime.Services\n{\n    public class PrimeService\n    {\n        public bool IsPrime(int candidate) \n        {\n            throw new NotImplementedException(\"Please create a test first\");\n        } \n    }\n}\n```\n\n### Creating the test project\n\nChange the directory back to the *unit-testing-using-dotnet-test* directory and create the *PrimeService.Tests* directory. The directory structure is shown below:\n\n```\n/unit-testing-using-dotnet-test\n    /PrimeService\n        Source Files\n        PrimeService.csproj\n    /PrimeService.Tests\n```\n\nMake the *PrimeService.Tests* directory the current directory and create a new project using [`dotnet new xunit`](../tools/dotnet-new.md). This creates a test project that uses xUnit as the test library. The generated template configures the test runner in the *PrimeServiceTests.csproj*:\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.0.0\" />\n  <PackageReference Include=\"xunit\" Version=\"2.2.0\" />\n  <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.2.0\" />\n</ItemGroup>\n```\n\nThe test project requires other packages to create and run unit tests. `dotnet new` in the previous step added xUnit and the xUnit runner. Now, add the `PrimeService` class library as another dependency to the project. Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:\n\n```\ndotnet add reference ../PrimeService/PrimeService.csproj\n```\n\nAnother option is to edit the *PrimeService.Tests.csproj* file. Directly under the first `<ItemGroup>` node, add another `<ItemGroup>` node with a reference to the library project:\n\n```xml\n<ItemGroup>\n  <ProjectReference Include=\"..\\PrimeService\\PrimeService.csproj\" />\n</ItemGroup>\n```\n\nYou can see the entire file in the [samples repository](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService.Tests.csproj) on GitHub.\n\nThe final solution layout is shown below:\n\n```\n/unit-testing-using-mstest\n    /PrimeService\n        Source Files\n        PrimeService.csproj\n    /PrimeService.Tests\n        PrimeService\n        PrimeServiceTests.csproj\n```\n\n## Creating the first test\n\nBefore building the library or the tests, execute [`dotnet restore`](../tools/dotnet-restore.md) in the *PrimeService.Tests* directory. This command restores all the necessary NuGet packages for each project.\n\nThe TDD approach calls for writing one failing test, making it pass, then repeating the process. Remove *UnitTest1.cs* from the *PrimeService.Tests* directory and create a new C# file named *PrimeService_IsPrimeShould.cs* with the following content:\n\n```csharp\nusing Xunit;\nusing Prime.Services;\n\nnamespace Prime.UnitTests.Services\n{\n    public class PrimeService_IsPrimeShould\n    {\n        private readonly PrimeService _primeService;\n\n        public PrimeService_IsPrimeShould()\n        {\n            _primeService = new PrimeService();\n        }\n\n        [Fact]\n        public void ReturnFalseGivenValueOf1()\n        {\n            var result = _primeService.IsPrime(1);\n\n            Assert.False(result, $\"1 should not be prime\");\n        }\n    }\n}\n```\n\nThe `[Fact]` attribute denotes a method as a single test. Execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests. The xUnit test runner contains the program entry point to run your tests. `dotnet test` starts the test runner and provides a command-line argument to the test runner indicating the assembly that contains your tests.\n\nYour test fails. You haven't created the implementation yet. Write the simplest code in the `PrimeService` class to make this test pass:\n\n```csharp\npublic bool IsPrime(int candidate) \n{\n    if (candidate == 1) \n    { \n        return false;\n    } \n    throw new NotImplementedException(\"Please create a test first\");\n} \n```\n\nIn the *PrimeService.Tests* directory, run `dotnet test` again. The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project. After building both projects, it runs this single test. It passes.\n\n### Adding more features\n\nNow that you've made one test pass, it's time to write more. There are a few other simple cases for prime numbers: 0, -1. You could add those as new tests with the `[Fact]` attribute, but that quickly becomes tedious. There are other xUnit attributes that enable you to write a suite of similar tests.  A `[Theory]` attribute represents a suite of tests that execute the same code but have different input arguments. You can use the `[InlineData]` attribute to specify values for those inputs. \n \nInstead of creating new tests, leverage these two attributes to create a single theory that tests several values less than two, which is the lowest prime number:\n\n[!code-csharp[Sample_TestCode](../../../samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs?name=Sample_TestCode)]\n\nRun `dotnet test`, and two of these tests fail. To make all of the tests pass, change the `if` clause at the beginning of the method:\n\n```csharp\nif (candidate < 2)\n```\n\nContinue to iterate by adding more tests, more theories, and more code in the main library. You'll end up with the [finished version of the tests](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs) and the [complete implementation of the library](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService/PrimeService.cs).\n\nYou've built a small library and a set of unit tests for that library. You've structured the solution so that adding new packages and tests is seamless, and you can concentrate most of your time and effort on solving the goals of the applicaiton.\n","nodes":[{"pos":[4,313],"embed":true,"restype":"x-metadata","content":"title: Unit testing in .NET Core using dotnet test | Microsoft Docs\ndescription: Unit Testing in .NET Core using dotnet test\nkeywords: .NET, .NET Core\nauthor: ardalis\nms.author: wiwagn\nms.date: 03/21/2017\nms.topic: article\nms.prod: .net-core\nms.devlang: dotnet\nms.assetid: bdcdb812-6f13-4f20-9e90-0c0977937142","nodes":[{"content":"Unit testing in .NET Core using dotnet test | Microsoft Docs","nodes":[{"pos":[0,60],"content":"Unit testing in .NET Core using dotnet test | Microsoft Docs","nodes":[{"content":"Unit testing in .NET Core using dotnet test | Microsoft Docs","pos":[0,60]}]}],"path":["title"]},{"content":"Unit Testing in .NET Core using dotnet test","nodes":[{"pos":[0,43],"content":"Unit Testing in .NET Core using dotnet test","nodes":[{"content":"Unit Testing in .NET Core using dotnet test","pos":[0,43]}]}],"path":["description"]},{"content":".NET, .NET Core","nodes":[{"pos":[0,15],"content":".NET, .NET Core","nodes":[{"content":".NET, .NET Core","pos":[0,15]}]}],"path":["keywords"]}],"yml":true},{"pos":[321,364],"content":"Unit testing in .NET Core using dotnet test","linkify":"Unit testing in .NET Core using dotnet test","nodes":[{"content":"Unit testing in .NET Core using dotnet test","pos":[0,43]}]},{"content":"This tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts.","pos":[366,495]},{"content":"If you prefer to follow the tutorial using a pre-built solution, <bpt id=\"p1\">[</bpt>view or download the sample code<ept id=\"p1\">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test/)</ept> before you begin.","pos":[496,718],"source":" If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test/) before you begin."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[719,844],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"pos":[850,877],"content":"Creating the source project","linkify":"Creating the source project","nodes":[{"content":"Creating the source project","pos":[0,27]}]},{"content":"Open a shell window.","pos":[879,899]},{"content":"Create a directory called <bpt id=\"p1\">*</bpt>unit-testing-using-dotnet-test<ept id=\"p1\">*</ept> to hold the solution.","pos":[900,980],"source":" Create a directory called *unit-testing-using-dotnet-test* to hold the solution."},{"content":"Inside this new directory, create a <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> directory.","pos":[981,1042],"source":" Inside this new directory, create a *PrimeService* directory."},{"content":"The directory structure thus far is shown below:","pos":[1043,1091]},{"content":"Make <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> the current directory and run <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new classlib`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept> to create the source project.","pos":[1152,1279],"source":"Make *PrimeService* the current directory and run [`dotnet new classlib`](../tools/dotnet-new.md) to create the source project."},{"content":"Rename <bpt id=\"p1\">*</bpt>Class1.cs<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>PrimeService.cs<ept id=\"p2\">*</ept>.","pos":[1280,1320],"source":" Rename *Class1.cs* to *PrimeService.cs*."},{"content":"To use test-driven development (TDD), you'll create a failing implementation of the <ph id=\"ph1\">`PrimeService`</ph> class:","pos":[1321,1426],"source":" To use test-driven development (TDD), you'll create a failing implementation of the `PrimeService` class:"},{"pos":[1675,1700],"content":"Creating the test project","linkify":"Creating the test project","nodes":[{"content":"Creating the test project","pos":[0,25]}]},{"content":"Change the directory back to the <bpt id=\"p1\">*</bpt>unit-testing-using-dotnet-test<ept id=\"p1\">*</ept> directory and create the <bpt id=\"p2\">*</bpt>PrimeService.Tests<ept id=\"p2\">*</ept> directory.","pos":[1702,1824],"source":"Change the directory back to the *unit-testing-using-dotnet-test* directory and create the *PrimeService.Tests* directory."},{"content":"The directory structure is shown below:","pos":[1825,1864]},{"content":"Make the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory the current directory and create a new project using <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new xunit`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept>.","pos":[1998,2136],"source":"Make the *PrimeService.Tests* directory the current directory and create a new project using [`dotnet new xunit`](../tools/dotnet-new.md)."},{"content":"This creates a test project that uses xUnit as the test library.","pos":[2137,2201]},{"content":"The generated template configures the test runner in the <bpt id=\"p1\">*</bpt>PrimeServiceTests.csproj<ept id=\"p1\">*</ept>:","pos":[2202,2286],"source":" The generated template configures the test runner in the *PrimeServiceTests.csproj*:"},{"content":"The test project requires other packages to create and run unit tests.","pos":[2528,2598]},{"content":"<ph id=\"ph1\">`dotnet new`</ph> in the previous step added xUnit and the xUnit runner.","pos":[2599,2666],"source":"`dotnet new` in the previous step added xUnit and the xUnit runner."},{"content":"Now, add the <ph id=\"ph1\">`PrimeService`</ph> class library as another dependency to the project.","pos":[2667,2746],"source":" Now, add the `PrimeService` class library as another dependency to the project."},{"content":"Use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add reference`</ph><ept id=\"p1\">](../tools/dotnet-add-reference.md)</ept> command:","pos":[2747,2822],"source":" Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:"},{"content":"Another option is to edit the <bpt id=\"p1\">*</bpt>PrimeService.Tests.csproj<ept id=\"p1\">*</ept> file.","pos":[2890,2953],"source":"Another option is to edit the *PrimeService.Tests.csproj* file."},{"content":"Directly under the first <ph id=\"ph1\">`&lt;ItemGroup&gt;`</ph> node, add another <ph id=\"ph2\">`&lt;ItemGroup&gt;`</ph> node with a reference to the library project:","pos":[2954,3070],"source":" Directly under the first `<ItemGroup>` node, add another `<ItemGroup>` node with a reference to the library project:"},{"pos":[3178,3393],"content":"You can see the entire file in the <bpt id=\"p1\">[</bpt>samples repository<ept id=\"p1\">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService.Tests.csproj)</ept> on GitHub.","source":"You can see the entire file in the [samples repository](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService.Tests.csproj) on GitHub."},{"content":"The final solution layout is shown below:","pos":[3395,3436]},{"pos":[3622,3645],"content":"Creating the first test","linkify":"Creating the first test","nodes":[{"content":"Creating the first test","pos":[0,23]}]},{"content":"Before building the library or the tests, execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet restore`</ph><ept id=\"p1\">](../tools/dotnet-restore.md)</ept> in the <bpt id=\"p2\">*</bpt>PrimeService.Tests<ept id=\"p2\">*</ept> directory.","pos":[3647,3782],"source":"Before building the library or the tests, execute [`dotnet restore`](../tools/dotnet-restore.md) in the *PrimeService.Tests* directory."},{"content":"This command restores all the necessary NuGet packages for each project.","pos":[3783,3855]},{"content":"The TDD approach calls for writing one failing test, making it pass, then repeating the process.","pos":[3857,3953]},{"content":"Remove <bpt id=\"p1\">*</bpt>UnitTest1.cs<ept id=\"p1\">*</ept> from the <bpt id=\"p2\">*</bpt>PrimeService.Tests<ept id=\"p2\">*</ept> directory and create a new C# file named <bpt id=\"p3\">*</bpt>PrimeService_IsPrimeShould.cs<ept id=\"p3\">*</ept> with the following content:","pos":[3954,4106],"source":" Remove *UnitTest1.cs* from the *PrimeService.Tests* directory and create a new C# file named *PrimeService_IsPrimeShould.cs* with the following content:"},{"content":"The <ph id=\"ph1\">`[Fact]`</ph> attribute denotes a method as a single test.","pos":[4615,4672],"source":"The `[Fact]` attribute denotes a method as a single test."},{"content":"Execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet test`</ph><ept id=\"p1\">](../tools/dotnet-test.md)</ept> to build the tests and the class library and then run the tests.","pos":[4673,4786],"source":" Execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests."},{"content":"The xUnit test runner contains the program entry point to run your tests.","pos":[4787,4860]},{"content":"<ph id=\"ph1\">`dotnet test`</ph> starts the test runner and provides a command-line argument to the test runner indicating the assembly that contains your tests.","pos":[4861,5003],"source":"`dotnet test` starts the test runner and provides a command-line argument to the test runner indicating the assembly that contains your tests."},{"content":"Your test fails.","pos":[5005,5021]},{"content":"You haven't created the implementation yet.","pos":[5022,5065]},{"content":"Write the simplest code in the <ph id=\"ph1\">`PrimeService`</ph> class to make this test pass:","pos":[5066,5141],"source":" Write the simplest code in the `PrimeService` class to make this test pass:"},{"content":"In the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory, run <ph id=\"ph1\">`dotnet test`</ph> again.","pos":[5329,5392],"source":"In the *PrimeService.Tests* directory, run `dotnet test` again."},{"content":"The <ph id=\"ph1\">`dotnet test`</ph> command runs a build for the <ph id=\"ph2\">`PrimeService`</ph> project and then for the <ph id=\"ph3\">`PrimeService.Tests`</ph> project.","pos":[5393,5509],"source":" The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project."},{"content":"After building both projects, it runs this single test.","pos":[5510,5565]},{"content":"It passes.","pos":[5566,5576]},{"pos":[5582,5602],"content":"Adding more features","linkify":"Adding more features","nodes":[{"content":"Adding more features","pos":[0,20]}]},{"content":"Now that you've made one test pass, it's time to write more.","pos":[5604,5664]},{"content":"There are a few other simple cases for prime numbers: 0, -1.","pos":[5665,5725]},{"content":"You could add those as new tests with the <ph id=\"ph1\">`[Fact]`</ph> attribute, but that quickly becomes tedious.","pos":[5726,5821],"source":" You could add those as new tests with the `[Fact]` attribute, but that quickly becomes tedious."},{"content":"There are other xUnit attributes that enable you to write a suite of similar tests.","pos":[5822,5905]},{"content":"A <ph id=\"ph1\">`[Theory]`</ph> attribute represents a suite of tests that execute the same code but have different input arguments.","pos":[5907,6020],"source":"  A `[Theory]` attribute represents a suite of tests that execute the same code but have different input arguments."},{"content":"You can use the <ph id=\"ph1\">`[InlineData]`</ph> attribute to specify values for those inputs.","pos":[6021,6097],"source":" You can use the `[InlineData]` attribute to specify values for those inputs."},{"content":"Instead of creating new tests, leverage these two attributes to create a single theory that tests several values less than two, which is the lowest prime number:","pos":[6101,6262]},{"content":"Run <ph id=\"ph1\">`dotnet test`</ph>, and two of these tests fail.","pos":[6437,6484],"source":"Run `dotnet test`, and two of these tests fail."},{"content":"To make all of the tests pass, change the <ph id=\"ph1\">`if`</ph> clause at the beginning of the method:","pos":[6485,6570],"source":" To make all of the tests pass, change the `if` clause at the beginning of the method:"},{"content":"Continue to iterate by adding more tests, more theories, and more code in the main library.","pos":[6606,6697]},{"content":"You'll end up with the <bpt id=\"p1\">[</bpt>finished version of the tests<ept id=\"p1\">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs)</ept> and the <bpt id=\"p2\">[</bpt>complete implementation of the library<ept id=\"p2\">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService/PrimeService.cs)</ept>.","pos":[6698,7088],"source":" You'll end up with the [finished version of the tests](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs) and the [complete implementation of the library](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService/PrimeService.cs)."},{"content":"You've built a small library and a set of unit tests for that library.","pos":[7090,7160]},{"content":"You've structured the solution so that adding new packages and tests is seamless, and you can concentrate most of your time and effort on solving the goals of the applicaiton.","pos":[7161,7336]}]}