<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-contract-schema-reference.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4ddaaea2133a8adf5271628f442644194a7f453</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\data-contract-schema-reference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d19b23fbac9243da98fbde4a0dd0289545b0f6f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e96534a9ecc0cda452a2f2c3b35123e90c67aacf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Contract Schema Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Contract Schema Reference</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes the subset of the XML Schema (XSD) used by <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> to describe common language runtime (CLR) types for XML serialization.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>DataContractSerializer Mappings</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataContractSerializer`</ph> maps CLR types to XSD when metadata is exported from a Windows Communication Foundation (WCF) service using a metadata endpoint or the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Data Contract Serializer<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-serializer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataContractSerializer`</ph> also maps XSD to CLR types when Svcutil.exe is used to access Web Services Description Language (WSDL) or XSD documents and generate data contracts for services or clients.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Only XML Schema instances that conform to requirements stated in this document can be mapped to CLR types using <ph id="ph1">`DataContractSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Support Levels</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataContractSerializer`</ph> provides the following levels of support for a given XML Schema feature:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Supported<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There is explicit mapping from this feature to CLR types or attributes (or both) using <ph id="ph1">`DataContractSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ignored<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The feature is allowed in schemas imported by the <ph id="ph1">`DataContractSerializer`</ph>, but has no effect on code generation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Forbidden<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataContractSerializer`</ph> does not support importing a schema using the feature.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, Svcutil.exe, when accessing a WSDL with a schema that uses such a feature, falls back to using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is by default.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>General Information</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The schema namespace is described at <bpt id="p1">[</bpt>XML Schema<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=95475)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The prefix "xs" is used in this document.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Any attributes with a non-schema namespace are ignored.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Any annotations (except for those described in this document) are ignored.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:schema&gt;: attributes</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>DataContract</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Must be qualified.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>All elements must be qualified for a schema to be supported by <ph id="ph1">`DataContractSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This can be accomplished by either setting <ph id="ph1">xs:schema/@elementFormDefault</ph> to "qualified" or by setting <ph id="ph2">xs:element/@form</ph> to "qualified" on each individual element declaration.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Supported and mapped to the data contract namespace.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If this attribute is not specified, the blank namespace is used.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Cannot be the reserved namespace <ph id="ph1">`http://schemas.microsoft.com/2003/10/Serialization/`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:schema&gt;: contents</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Contents</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractSerializer`</ph> supports xs:include and xs:import.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, Svcutil.exe restricts following <ph id="ph1">`xs:include/@schemaLocation`</ph> and <ph id="ph2">`xs:import/@location`</ph> references when metadata is loaded from a local file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The list of schema files must be passed through an out-of-band mechanism and not through <ph id="ph1">`include`</ph> in this case; <ph id="ph2">`include`</ph>d schema documents are ignored.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The use of <ph id="ph1">`xs:redefine`</ph> is forbidden by <ph id="ph2">`DataContractSerializer`</ph> for security reasons: <ph id="ph3">`x:redefine`</ph> requires <ph id="ph4">`schemaLocation`</ph> to be followed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In certain circumstances, Svcutil.exe using DataContract restricts use of <ph id="ph1">`schemaLocation`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractSerializer`</ph> supports <ph id="ph2">`xs:include`</ph> and <ph id="ph3">`xs:import`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>However, Svcutil.exe restricts following <ph id="ph1">`xs:include/@schemaLocation`</ph> and <ph id="ph2">`xs:import/@location`</ph> references when metadata is loaded from a local file.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The list of schema files must be passed through an out-of-band mechanism and not through <ph id="ph1">`include`</ph> in this case; <ph id="ph2">`include`</ph>d schema documents are ignored.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`xs:simpleType`</ph> section.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Supported, maps to data contracts.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`xs:complexType`</ph> section.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractSerializer`</ph> does not support use of <ph id="ph2">`xs:group`</ph>, <ph id="ph3">`xs:attributeGroup`</ph>, and <ph id="ph4">`xs:attribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>These declarations are ignored as children of <ph id="ph1">`xs:schema`</ph>, but cannot be referenced from within <ph id="ph2">`complexType`</ph> or other supported constructs.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractSerializer`</ph> does not support use of <ph id="ph2">`xs:group`</ph>, <ph id="ph3">`xs:attributeGroup`</ph>, and <ph id="ph4">`xs:attribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>These declarations are ignored as children of <ph id="ph1">`xs:schema`</ph>, but cannot be referenced from within <ph id="ph2">`complexType`</ph> or other supported constructs.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Global Element Declaration (GED).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractSerializer`</ph> does not support use of <ph id="ph2">`xs:group`</ph>, <ph id="ph3">`xs:attributeGroup`</ph>, and <ph id="ph4">`xs:attribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>These declarations are ignored as children of <ph id="ph1">`xs:schema`</ph>, but cannot be referenced from within <ph id="ph2">`complexType`</ph> or other supported constructs.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Complex Types – <ph id="ph1">\&lt;</ph>xs:complexType&gt;</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>General Information</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Each complex type <ph id="ph1">\&lt;</ph>xs:complexType&gt; maps to a data contract.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:complexType&gt;: attributes</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Must be false (default).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Must be false (default).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Supported and mapped to the data contract name.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If there are periods in the name, an attempt is made to map the type to an inner type.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, a complex type named <ph id="ph1">`A.B`</ph> maps to a data contract type that is an inner type of a type with the data contract name <ph id="ph2">`A`</ph>, but only if such a data contract type exists.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>More than one level of nesting is possible: for example, <ph id="ph1">`A.B.C`</ph> can be an inner type, but only if <ph id="ph2">`A`</ph> and <ph id="ph3">`A.B`</ph> both exist.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:complexType&gt;: contents</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Contents</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Extensions are forbidden.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Restriction is allowed only from <ph id="ph1">`anySimpleType`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See "Inheritance".</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Forbidden</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Supported, maps to data members of a data contract.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Forbidden, even if use="prohibited" (with one exception).</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Only optional attributes from the Standard Serialization Schema namespace are supported.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>They do not map to data members in the data contract programming model.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Currently, only one such attribute has meaning and is discussed in the ISerializable section.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>All others are ignored.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In the WCF v1 release, <ph id="ph1">`DataContractSerializer`</ph> ignores the presence of <ph id="ph2">`attributeGroup`</ph> inside <ph id="ph3">`xs:complexType`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>(empty)</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Maps to a data contract with no data members.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:sequence&gt; in a complex type: attributes</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Must be 1 (default).</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Must be 1 (default).</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:sequence&gt; in a complex type: contents</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Contents</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Each instance maps to a data member.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>(empty)</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Maps to a data contract with no data members.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Elements – <ph id="ph1">\&lt;</ph>xs:element&gt;</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>General Information</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;xs:element&gt;`</ph> can occur in the following contexts:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It can occur within an <ph id="ph1">`&lt;xs:sequence&gt;`</ph>, which describes a data member of a regular (non-collection) data contract.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`maxOccurs`</ph> attribute must be 1.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>(A value of 0 is not allowed).</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>It can occur within an <ph id="ph1">`&lt;xs:sequence&gt;`</ph>, which describes a data member of a collection data contract.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`maxOccurs`</ph> attribute must be greater than 1 or "unbounded".</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It can occur within an <ph id="ph1">`&lt;xs:schema&gt;`</ph> as a Global Element Declaration (GED).</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:element&gt; with maxOccurs=1 within an <ph id="ph2">\&lt;</ph>xs:sequence&gt; (Data Members)</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Supported, maps to the data member name.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Supported, maps to the data member type.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For more information, see Type/primitive mapping.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If not specified (and the element does not contain an anonymous type), <ph id="ph1">`xs:anyType`</ph> is assumed.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Must be qualified.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This attribute can be set through <ph id="ph1">`elementFormDefault`</ph> on <ph id="ph2">`xs:schema`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Maps to the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.IsRequired%2A&gt;</ph> property of a data member (<ph id="ph2">`IsRequired`</ph> is true when <ph id="ph3">`minOccurs`</ph> is 1).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Affects type mapping.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>See Type/primitive mapping.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:element&gt; with maxOccurs&gt;1 within an <ph id="ph2">\&lt;</ph>xs:sequence&gt; (Collections)</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Maps to a <ph id="ph1">&lt;xref:System.Runtime.Serialization.CollectionDataContractAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>In collection types, only one xs:element is allowed within an xs:sequence.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Collections can be of the following types:</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Regular collections (for example, arrays).</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Dictionary collections (mapping one value to another; for example, a <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The only difference between a dictionary and an array of a key/value pair type is in the generated programming model.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>There is a schema annotation mechanism that can be used to indicate that a given type is a dictionary collection.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The rules for the <ph id="ph1">`ref`</ph>, <ph id="ph2">`block`</ph>, <ph id="ph3">`default`</ph>, <ph id="ph4">`fixed`</ph>, <ph id="ph5">`form`</ph>, and <ph id="ph6">`id`</ph> attributes are the same as for the non-collection case.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Other attributes include those in the following table.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Supported, maps to the <ph id="ph1">&lt;xref:System.Runtime.Serialization.CollectionDataContractAttribute.ItemName%2A&gt;</ph> property in the <ph id="ph2">`CollectionDataContractAttribute`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Supported, maps to the type stored in the collection.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Greater than 1 or "unbounded".</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The DC schema should use "unbounded".</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Affects type mapping.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This attribute is ignored for dictionary collections.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:element&gt; within an <ph id="ph2">\&lt;</ph>xs:schema&gt; Global Element Declaration</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A Global Element Declaration (GED) that has the same name and namespace as a type in schema, or that defines an anonymous type inside itself, is said to be associated with the type.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Schema export: associated GEDs are generated for every generated type, both simple and complex.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Deserialization/serialization: associated GEDs are used as root elements for the type.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Schema import: associated GEDs are not required and are ignored if they follow the following rules (unless they define types).</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Must be false for associated GEDs.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Forbidden in associated GEDs.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Forbidden in associated GEDs.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Must be false for associated GEDs.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Forbidden in associated GEDs.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>See the definition of associated GEDs.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Must be true for associated GEDs.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Forbidden in associated GEDs.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Supported, and must match the associated type for associated GEDs (unless the element contains an anonymous type).</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:element&gt;: contents</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Contents</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Supported.*</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Supported.*</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>(blank)</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\*</ph> When using the <ph id="ph2">`simpleType`</ph> and <ph id="ph3">`complexType,`</ph> mapping for anonymous types is the same as for non-anonymous types, except that there is no anonymous data contracts, and so a named data contract is created, with a generated name derived from the element name.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The rules for anonymous types are in the following list:</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>WCF implementation detail: If the <ph id="ph1">`xs:element`</ph> name does not contain periods, the anonymous type maps to an inner type of the outer data contract type.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If the name contains periods, the resulting data contract type is independent (not an inner type).</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The generated data contract name of the inner type is the data contract name of the outer type followed by a period, the name of the element, and the string "Type".</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>If a data contract with such a name already exists, the name is made unique by appending "1", "2", "3", and so on until a unique name is created.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Simple Types - <ph id="ph1">\&lt;</ph>xs:simpleType&gt;</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:simpleType&gt;: attributes</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Supported, maps to the data contract name.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:simpleType&gt;: contents</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Contents</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Maps to enumeration data contracts.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This attribute is ignored if it does not match the enumeration pattern.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`xs:simpleType`</ph> restrictions section.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Maps to flag enumeration data contracts.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`xs:simpleType`</ph> lists section.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:restriction&gt;</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Complex type restrictions are supported only for base="<ph id="ph1">`xs:anyType`</ph>".</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Simple type restrictions of <ph id="ph1">`xs:string`</ph> that do not have any restriction facets other than <ph id="ph2">`xs:enumeration`</ph> are mapped to enumeration data contracts.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>All other simple type restrictions are mapped to the types they restrict.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For example, a restriction of <ph id="ph1">`xs:int`</ph> maps to an integer, just as <ph id="ph2">`xs:int`</ph> itself does.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>For more information about primitive type mapping, see Type/primitive mapping.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:restriction&gt;: attributes</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Must be a supported simple type or <ph id="ph1">`xs:anyType`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:restriction&gt; for all other cases: contents</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Contents</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>If present, must be derived from a supported primitive type.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>(blank)</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Enumeration</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:restriction&gt; for enumerations: attributes</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>If present, must be <ph id="ph1">`xs:string`</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:restriction&gt; for enumerations: contents</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Contents</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>If present, must be an enumeration restriction supported by the data contract (this section).</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Enumeration "id" is ignored, and "value" maps to the value name in the enumeration data contract.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>(empty)</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Supported, maps to empty enumeration type.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The following code shows a C# enumeration class.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>This class maps to the following schema by the <ph id="ph1">`DataContractSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>If enumeration values start from 1, <ph id="ph1">`xs:annotation`</ph> blocks are not generated.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:list&gt;</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractSerializer`</ph> maps enumeration types marked with <ph id="ph2">`System.FlagsAttribute`</ph> to <ph id="ph3">`xs:list`</ph> derived from <ph id="ph4">`xs:string`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>No other <ph id="ph1">`xs:list`</ph> variations are supported.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:list&gt;: attributes</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Forbidden.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:list&gt;: contents</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Contents</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Must be restriction from <ph id="ph1">`xs:string`</ph> using <ph id="ph2">`xs:enumeration`</ph> facet.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If enumeration value does not follow a power of 2 progression (default for Flags), the value is stored in the <ph id="ph1">`xs:annotation/xs:appInfo/ser:EnumerationValue`</ph> element.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For example, the following code flags an enumeration type.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>This type maps to the following schema.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>General rules</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>A data contract can inherit from another data contract.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Such data contracts map to a base and are derived by extension types using the <ph id="ph1">`&lt;xs:extension&gt;`</ph> XML Schema construct.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>A data contract cannot inherit from a collection data contract.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>For example, the following code is a data contract.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>This data contract maps to the following XML Schema type declaration.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:complexContent&gt;: attributes</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Must be false.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:complexContent&gt;: contents</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Contents</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Forbidden, except when base="<ph id="ph1">`xs:anyType`</ph>".</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The latter is equivalent to placing the content of the <ph id="ph1">`xs:restriction`</ph> directly under the container of the <ph id="ph2">`xs:complexContent`</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Maps to data contract inheritance.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:extension&gt; in <ph id="ph2">\&lt;</ph>xs:complexContent&gt;: attributes</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Schema</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Supported.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Maps to the base data contract type that this type inherits from.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xs:extension&gt; in <ph id="ph2">\&lt;</ph>xs:complexContent&gt;: contents</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The rules are the same as for <ph id="ph1">`&lt;xs:complexType&gt;`</ph> contents.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`&lt;xs:sequence&gt;`</ph> is provided, its member elements map to additional data members that are present in the derived data contract.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>If a derived type contains an element with the same name as an element in a base type, the duplicate element declaration maps to a data member with a name that is generated to be unique.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Positive integer numbers are added to the data member name ("member1", "member2", and so on) until a unique name is found.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Conversely:</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>If a derived data contract has a data member with the same name and type as a data member in a base data contract, <ph id="ph1">`DataContractSerializer`</ph> generates this corresponding element in the derived type.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>If a derived data contract has a data member with the same name as a data member in a base data contract but a different type, the <ph id="ph1">`DataContractSerializer`</ph> imports a schema with an element of the type <ph id="ph2">`xs:anyType`</ph> in both base type and derived type declarations.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The original type name is preserved in <ph id="ph1">`xs:annotations/xs:appInfo/ser:ActualType/@Name`</ph>.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Both variations may lead to a schema with an ambiguous content model, which depends on the order of the respective data members.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Type/primitive mapping</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataContractSerializer`</ph> uses the following mapping for XML Schema primitive types.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>XSD type</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>.NET type</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.DateTime&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> for the offset.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>See DateTimeOffset Serialization below.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Byte&gt;</ph> array.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Single&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Double&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Uri&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlQualifiedName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Decimal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int32&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int16&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.SByte&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.UInt64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.UInt32&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.UInt16&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Byte&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>ISerializable types mapping</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> version 1.0, <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> was introduced as a general mechanism to serialize objects for persistence or data transfer.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>There are many <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> types that implement <ph id="ph2">`ISerializable`</ph> and that can be passed between applications.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> naturally provides support for <ph id="ph2">`ISerializable`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataContractSerializer`</ph> maps <ph id="ph2">`ISerializable`</ph> implementation schema types that differ only by the QName (qualified name) of the type and are effectively property collections.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`DataContractSerializer`</ph> maps <ph id="ph2">&lt;xref:System.Exception&gt;</ph> to the following XSD type in the <ph id="ph3">`http://schemas.datacontract.org/2004/07/System`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The optional attribute <ph id="ph1">`ser:FactoryType`</ph> declared in the Data Contract Serialization schema references a factory class that can deserialize the type.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The factory class must be part of the known types collection of the <ph id="ph1">`DataContractSerializer`</ph> instance being used.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>For more information about known types, see <bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>DataContract Serialization Schema</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>A number of schemas exported by the <ph id="ph1">`DataContractSerializer`</ph> use types, elements, and attributes from a special Data Contract Serialization namespace:</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The following is a complete Data Contract Serialization schema declaration.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The following should be noted:</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ser:char`</ph> is introduced to represent Unicode characters of type <ph id="ph2">&lt;xref:System.Char&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`valuespace`</ph> of <ph id="ph2">`xs:duration`</ph> is reduced to an ordered set so that it can be mapped to a <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FactoryType`</ph> is used in schemas exported from types that are derived from <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Importing non-DataContract schemas</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataContractSerializer`</ph> has the <ph id="ph2">`ImportXmlTypes`</ph> option to allow import of schemas that do not conform to the <ph id="ph3">`DataContractSerializer`</ph> XSD profile (see the <ph id="ph4">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Options%2A&gt;</ph> property).</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Setting this option to <ph id="ph1">`true`</ph> enables acceptance of non-conforming schema types and mapping them to the following implementation, <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> wrapping an array of <ph id="ph3">&lt;xref:System.Xml.XmlNode&gt;</ph> (only the class name differs).</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>DateTimeOffset Serialization</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> is not treated as a primitive type.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Instead, it is serialized as a complex element with two parts.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The first part represents the date time, and the second part represents the offset from the date time.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>An example of a serialized DateTimeOffset value is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The schema is as follows.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-data-contracts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>