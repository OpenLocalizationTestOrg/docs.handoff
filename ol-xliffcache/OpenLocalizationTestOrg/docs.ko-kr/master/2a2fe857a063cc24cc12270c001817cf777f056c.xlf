<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="xor-operator.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a2fe857a063cc24cc12270c001817cf777f056c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\xor-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc2c1f1c9f82dd403fcf6920d273176ef5aa6bdd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf85539516ab8335d5c8147616205b78eb76425f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Xor Operator (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Xor Operator (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Performs a logical exclusion on two <ph id="ph1">`Boolean`</ph> expressions, or a bitwise exclusion on two numeric expressions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`Boolean`</ph> or numeric variable.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For Boolean comparison, <ph id="ph1">`result`</ph> is the logical exclusion (exclusive logical disjunction) of two <ph id="ph2">`Boolean`</ph> values.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For bitwise operations, <ph id="ph1">`result`</ph> is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`Boolean`</ph> or numeric expression.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`Boolean`</ph> or numeric expression.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For Boolean comparison, <ph id="ph1">`result`</ph> is <ph id="ph2">`True`</ph> if and only if exactly one of <ph id="ph3">`expression1`</ph> and <ph id="ph4">`expression2`</ph> evaluates to <ph id="ph5">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>That is, if and only if <ph id="ph1">`expression1`</ph> and <ph id="ph2">`expression2`</ph> evaluate to opposite <ph id="ph3">`Boolean`</ph> values.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following table illustrates how <ph id="ph1">`result`</ph> is determined.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`expression1`</ph> is</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>And <ph id="ph1">`expression2`</ph> is</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`result`</ph> is</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In a Boolean comparison, the <ph id="ph1">`Xor`</ph> operator always evaluates both expressions, which could include making procedure calls.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There is no short-circuiting counterpart to <ph id="ph1">`Xor`</ph>, because the result always depends on both operands.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">*</bpt>short-circuiting<ept id="p1">*</ept> logical operators, see <bpt id="p2">[</bpt>AndAlso Operator<ept id="p2">](../../../visual-basic/language-reference/operators/andalso-operator.md)</ept> and <bpt id="p3">[</bpt>OrElse Operator<ept id="p3">](../../../visual-basic/language-reference/operators/orelse-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For bitwise operations, the <ph id="ph1">`Xor`</ph> operator performs a bitwise comparison of identically positioned bits in two numeric expressions and sets the corresponding bit in <ph id="ph2">`result`</ph> according to the following table.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If bit in <ph id="ph1">`expression1`</ph> is</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>And bit in <ph id="ph1">`expression2`</ph> is</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The bit in <ph id="ph1">`result`</ph> is</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Since the logical and bitwise operators have a lower precedence than other arithmetic and relational operators, any bitwise operations should be enclosed in parentheses to ensure accurate execution.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, 5 <ph id="ph1">`Xor`</ph> 3 is 6.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To see why this is so, convert 5 and 3 to their binary representations, 101 and 011.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Then use the previous table to determine that 101 Xor 011 is 110, which is the binary representation of the decimal number 6.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Data Types</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the operands consist of one <ph id="ph1">`Boolean`</ph> expression and one numeric expression, Visual Basic converts the <ph id="ph2">`Boolean`</ph> expression to a numeric value (â€“1 for <ph id="ph3">`True`</ph> and 0 for <ph id="ph4">`False`</ph>) and performs a bitwise operation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`Boolean`</ph> comparison, the data type of the result is <ph id="ph2">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For a bitwise comparison, the result data type is a numeric type appropriate for the data types of <ph id="ph1">`expression1`</ph> and <ph id="ph2">`expression2`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See the "Relational and Bitwise Comparisons" table in <bpt id="p1">[</bpt>Data Types of Operator Results<ept id="p1">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Overloading</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Xor`</ph> operator can be <bpt id="p1">*</bpt>overloaded<ept id="p1">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If your code uses this operator on such a class or structure, make sure you understand its redefined behavior.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Xor`</ph> operator to perform logical exclusion (exclusive logical disjunction) on two expressions.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The result is a <ph id="ph1">`Boolean`</ph> value that represents whether exactly one of the expressions is <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The previous example produces results of <ph id="ph1">`False`</ph>, <ph id="ph2">`True`</ph>, and <ph id="ph3">`False`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Xor`</ph> operator to perform logical exclusion (exclusive logical disjunction) on the individual bits of two numeric expressions.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The bit in the result pattern is set if exactly one of the corresponding bits in the operands is set to 1.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The previous example produces results of 2, 12, and 14, respectively.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Logical/Bitwise Operators (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Logical and Bitwise Operators in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>