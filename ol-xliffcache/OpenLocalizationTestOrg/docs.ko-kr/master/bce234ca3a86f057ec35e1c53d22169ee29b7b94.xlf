<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="compare-strings.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bce234ca3a86f057ec35e1c53d22169ee29b7b94</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\how-to\compare-strings.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">069d84c2aa9244f6c4643e2decf15deff9cd30e4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ea731e42284bca3a6ea854589abe9f62398f56e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Compare strings - C# Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to compare and order string values, with or without case, with or without culture specific ordering</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to compare strings in C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You compare strings to answer one of two questions: "Are these two strings equal?"</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>or "In what order should these strings be placed when sorting them?"</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Those two questions are complicated by factors that affect string comparisons:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can choose an ordinal or linguistic comparison.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can choose if case matters.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can choose culture-specific comparisons.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Linguistic comparisons are culture and platform-dependent.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you compare strings, you define an order among them.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Comparisons are used to sort a sequence of strings.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Once the sequence is in a known order, it is easier to search, both for software and for humans.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Other comparisons may check if strings are the same.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These sameness checks are similar to equality, but some differences, such as case differences, may be ignored.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Default ordinal comparisons</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The most common operations:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>use an ordinal comparison, a case-sensitive comparison, and use the current culture.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The results are shown in the following example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The default ordinal comparison does not take linguistic rules into account when comparing strings.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It compares the binary value of each <ph id="ph1">&lt;xref:System.Char&gt;</ph> object in two strings.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>As a result, the default ordinal comparison is also case-sensitive.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that the test for equality with <ph id="ph1">&lt;xref:System.String.Equals%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.String.op_Equality%2A?displayProperty=nameWithType&gt;</ph> differs from string comparison using the <ph id="ph3">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph4">&lt;xref:System.String.Compare(System.String,System.String)?displayProperty=nameWithType)&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>While the tests for equality perform a case-sensitive ordinal comparison, the comparison method perform a case-sensitive, culture-sensitive comparison using the current culture.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Because the default comparison methods often perform different types of comparisons, we recommend that you always make the intent of your code clear by calling an overload that explicitly specifies the type of comparison to perform.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Case-insensitive ordinal comparisons</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String.Equals(System.String,System.StringComparison)?displayProperty=nameWithType&gt;</ph> method enables you to specify a <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> value of <ph id="ph3">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>for a case-insensitive ordinal comparison.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There is also a static <ph id="ph1">&lt;xref:System.String.Compare(System.String,System.String,System.StringComparison)?displayProperty=nameWithType&gt;</ph> method that performs a case-insensitive ordinal comparison if you specify a value of <ph id="ph2">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">&lt;xref:System.StringComparison&gt;</ph> argument.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These are shown in the following code:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When performing a case-insensitive ordinal comparison, these methods use the casing conventions of the <bpt id="p1">[</bpt>invariant culture<ept id="p1">](xref:System.Globalization.CultureInfo.InvariantCulture)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Linguistic comparisons</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Strings can also be ordered using linguistic rules for the current culture.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is sometimes referred to as "word sort order."</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you perform a linguistic comparison, some nonalphanumeric Unicode characters might have special weights assigned.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the hyphen "-" may have a very small weight assigned to it so that "co-op" and "coop" appear next to each other in sort order.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In addition, some Unicode characters may be equivalent to a sequence of <ph id="ph1">&lt;xref:System.Char&gt;</ph> instances.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example uses the phrase "They dance in the street."</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>in German with the "ss" (U+0073 U+0073) in one string and 'ß' (U+00DF) in another.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Linguistically (in Windows), "ss" is equal to the German Esszet: 'ß' character in both the "en-US" and "de-DE" cultures.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This sample demonstrates the operating system-dependent nature of linguistic comparisons.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The host for the interactive window is a Linux host.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The linguistic and ordinal comparisons produce the same results.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you ran this same sample on a Windows host, you would see the following output:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>On Windows, the sort order of "cop", "coop", and "co-op" change when you change from a linguistic comparison to an ordinal comparison.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The two German sentences also compare differently using the different comparison types.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Comparisons using specific cultures</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This sample stores <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objects for the en-US and de-DE cultures.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The comparisons are performed using a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object to ensure a culture-specific comparison.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The culture used affects linguistic comparisons.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example shows the results of comparing the two German sentences using the "en-US" culture and the "de-DE" culture:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Culture-sensitive comparisons are typically used to compare and sort strings input by users with other strings input by users.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The characters and sorting conventions of these strings might vary depending on the locale of the user's computer.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Even strings that contain identical characters might sort differently depending on the culture of the current thread.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In addition, try this sample code locally on a Windows machine, and you will the following results:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Linguistic comparisons are dependent on the current culture, and are OS dependent.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You must take that into account when you work with string comparisons.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Linguistic sorting and searching strings in arrays</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following examples show how to sort and search for strings in an array using a linguistic comparison dependent on the current culture.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You use the static <ph id="ph1">&lt;xref:System.Array&gt;</ph> methods that take a <ph id="ph2">&lt;xref:System.StringComparer?displayProperty=nameWithType&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This example shows how to sort an array of strings using the current culture:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Once the array is sorted, you can search for entries using a binary search.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A binary search starts in the middle of the collection to determine which half of the collection would contain the sought string.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Each subsequent comparison subdivides the remaining part of the collection in half.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The array is sorted using the <ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The local function <ph id="ph1">`ShowWhere`</ph> displays information about where the string was found.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If the string was not found, the returned value indicates where it would be if it were found.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Ordinal sorting and searching in collections</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following code uses the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601?displayProperty=nameWithType&gt;</ph> collection class to store strings.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The strings are sorted using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This method needs a delegate that compares and orders two strings.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> method provides that comparison function.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Run the sample and observe the order.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This sort operation uses an ordinal case sensitive sort.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You would use the static <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> methods to specify different comparison rules.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Once sorted, the list of strings can be searched using a binary search.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following sample shows how to search the sorted listed using the same comparison function.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The local function <ph id="ph1">`ShowWhere`</ph> shows where the sought text is or would be:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Always make sure to use the same type of comparison for sorting and searching.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Using different comparison types for sorting and searching produces unexpected results.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Collection classes such as <ph id="ph1">&lt;xref:System.Collections.Hashtable?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601?displayProperty=nameWithType&gt;</ph> have constructors that take a <ph id="ph4">&lt;xref:System.StringComparer?displayProperty=nameWithType&gt;</ph> parameter when the type of the elements or keys is <ph id="ph5">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In general, you should use these constructors whenever possible, and specify either <ph id="ph1">&lt;xref:System.StringComparer.Ordinal?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.StringComparer.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Reference equality and string interning</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>None of the samples have used <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This method determines if two strings are the same object.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This can lead to inconsistent results in string comparisons.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the <bpt id="p1">*</bpt>string interning<ept id="p1">*</ept> feature of C#.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>When a program declares two or more identical string variables, the compiler stores them all in the same location.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>By calling the <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A&gt;</ph> method, you can see that the two strings actually refer to the same object in memory.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.String.Copy%2A?displayProperty=nameWithType&gt;</ph> method to avoid interning.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>After the copy has been made, the two strings have different storage locations, even though they have the same value.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Run the following sample to show that strings <ph id="ph1">`a`</ph> and <ph id="ph2">`b`</ph> are <bpt id="p1">*</bpt>interned<ept id="p1">*</ept> meaning they share the same storage.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The strings <ph id="ph1">`a`</ph> and <ph id="ph2">`c`</ph> are not.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When you test for equality of strings, you should use the methods that explicitly specify what kind of comparison you intend to perform.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Your code is much more maintainable and readable.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Use the overloads of the methods of the <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph> classes that take a <ph id="ph3">&lt;xref:System.StringComparison&gt;</ph> enumeration parameter.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You specify which type of comparison to perform.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Avoid using the <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> operators when you test for equality.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> instance methods always perform an ordinal case-sensitive comparison.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>They are primarily suited for ordering strings alphabetically.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can intern a string or retrieve a reference to an existing interned string by calling the <ph id="ph1">&lt;xref:System.String.Intern%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To determine whether a string is interned, call the <ph id="ph1">&lt;xref:System.String.IsInterned%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strings<ept id="p1">](../programming-guide/strings/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparing Strings<ept id="p1">](../../standard/base-types/comparing.md)</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Globalizing and Localizing Applications<ept id="p1">](/visualstudio/ide/globalizing-and-localizing-applications)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>