{"content":"---\ntitle: \"WCF Simplification Features\"\nms.date: \"03/30/2017\"\nms.assetid: 4535a511-6064-4da0-b361-80262a891663\n---\n\n# WCF Simplification Features\n\nThis topic discusses new features that make writing WCF applications simpler.\n\n## Simplified Generated Configuration Files\n\nWhen you add a service reference in Visual Studio or use the SvcUtil.exe tool a client configuration file is generated. In previous versions of WCF these configuration files contained the value of every binding property even if its value is the default value. In WCF 4.5 the generated configuration files contain only those binding properties that are set to a non-default value.\n\nThe following is an example of a configuration file generated by WCF 3.0.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <system.serviceModel>\n        <bindings>\n            <basicHttpBinding>\n                <binding name=\"BasicHttpBinding_IService1\" closeTimeout=\"00:01:00\"\n                    openTimeout=\"00:01:00\" receiveTimeout=\"00:10:00\" sendTimeout=\"00:01:00\"\n                    allowCookies=\"false\" bypassProxyOnLocal=\"false\"\n                    hostNameComparisonMode=\"StrongWildcard\" maxBufferSize=\"65536\"\n                    maxBufferPoolSize=\"524288\" maxReceivedMessageSize=\"65536\"\n                    messageEncoding=\"Text\" textEncoding=\"utf-8\" transferMode=\"Buffered\"\n                    useDefaultWebProxy=\"true\">\n                    <readerQuotas maxDepth=\"32\" maxStringContentLength=\"8192\"\n                        maxArrayLength=\"16384\" maxBytesPerRead=\"4096\"\n                        maxNameTableCharCount=\"16384\" />\n                    <security mode=\"None\">\n                        <transport clientCredentialType=\"None\" proxyCredentialType=\"None\"\n                            realm=\"\" />\n                        <message clientCredentialType=\"UserName\" algorithmSuite=\"Default\" />\n                    </security>\n                </binding>\n            </basicHttpBinding>\n        </bindings>\n        <client>\n            <endpoint address=\"http://localhost:36906/Service1.svc\" binding=\"basicHttpBinding\"\n                bindingConfiguration=\"BasicHttpBinding_IService1\" contract=\"IService1\"\n                name=\"BasicHttpBinding_IService1\" />\n        </client>\n    </system.serviceModel>\n</configuration>\n```\n\nThe following is an example of the same configuration file generated by WCF 4.5.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <system.serviceModel>\n        <bindings>\n            <basicHttpBinding>\n                <binding name=\"BasicHttpBinding_IService1\" />\n            </basicHttpBinding>\n        </bindings>\n        <client>\n            <endpoint address=\"http://localhost:36906/Service1.svc\" binding=\"basicHttpBinding\"\n                bindingConfiguration=\"BasicHttpBinding_IService1\" contract=\"IService1\"\n                name=\"BasicHttpBinding_IService1\" />\n        </client>\n    </system.serviceModel>\n</configuration>\n```\n\n## Contract-First Development\n\nWCF now has support for contract-first development. The svcutil.exe tool has a /serviceContract switch which allows you to generate service and data contracts from a WSDL document.\n\n## Add Service Reference From a Portable Subset Project\n\nPortable subset projects enable .NET assembly programmers to maintain a single source tree and build system while still supporting multiple .NET implementations (desktop, Silverlight, Windows Phone, and XBOX). Portable subset projects only reference .NET portable libraries which are a .NET framework assembly that can be used on any .NET implementation. The developer experience is the same as adding a service reference within any other WCF client application. For more information, see [Add Service Reference in a Portable Subset Project](../../../docs/framework/wcf/add-service-reference-in-a-portable-subset-project.md).\n\n## ASP.NET Compatibility Mode Default Changed\n\nWCF provides ASP.NET compatibility mode to grant developers full access to the features in the ASP.NET HTTP pipeline when writing WCF services. To use this mode, you must set the `aspNetCompatibilityEnabled` attribute to true in the [\\<serviceHostingEnvironment>](../../../docs/framework/configure-apps/file-schema/wcf/servicehostingenvironment.md) section of web.config. Additionally, any service in this appDomain needs to have the `RequirementsMode` property on its <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute> set to <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed> or <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Required>. By default <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute> is now set to <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed> and the default WCF service application template sets the `aspNetCompatibilityEnabled` attribute to `true`. For more information, see [What's New in Windows Communication Foundation 4.5](../../../docs/framework/wcf/whats-new.md) and [WCF Services and ASP.NET](../../../docs/framework/wcf/feature-details/wcf-services-and-aspnet.md).\n\n## Streaming Improvements\n\n- New support for asynchronous streaming has been added to WCF. To enable asynchronous streaming, add the  <xref:System.ServiceModel.Description.DispatcherSynchronizationBehavior> endpoint behavior to the service host and set its <xref:System.ServiceModel.Description.DispatcherSynchronizationBehavior.AsynchronousSendEnabled%2A> property to `true`. This can benefit scalability when a service is sending streamed messages to multiple clients which are reading slowly. WCF does not block one thread per client anymore and will free up the thread to service another client.\n\n- Removed limitations around buffering of messages when a service is IIS hosted. In previous versions of WCF when receiving a message for an IIS-hosted service that used streaming message transfer, ASP.NET would buffer the entire message before sending it to WCF. This would cause large memory consumption. This buffering has been removed in .NET 4.5 and now IIS-hosted WCF services can start processing the incoming stream before the entire message has been received, thereby enabling true streaming. This allows WCF to respond immediately to messages and allows improved performance. In addition, you no longer have to specify a value for `maxRequestLength`, the ASP.NET size limit on incoming requests. If this property is set, it is ignored. For more information about `maxRequestLength` see [\\<httpRuntime> configuration element](https://go.microsoft.com/fwlink/?LinkId=223344). You will still need to configure the maxAllowedContentLength, For more information, see [IIS Request Limits](https://go.microsoft.com/fwlink/?LinkId=225908).\n\n## New Transport Default Values\n\nThe following table describes the settings that have changed and where to find additional information.\n\n|Property|On|New Default|More Information|\n|--------------|--------|-----------------|----------------------|\n|channelInitializationTimeout|<xref:System.ServiceModel.NetTcpBinding>|30 seconds|This property determines how long a TCP connection can take to authenticate itself using the .NET Framing protocol. A client needs to send some initial data before the server has enough information to perform authentication. This timeout is intentionally made smaller than the ReceiveTimeout (10 min) so that malicious unauthenticated clients do not keep the connections tied up to the server for long. The default value is 30 seconds. For more information about <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.ChannelInitializationTimeout%2A>|\n|listenBacklog|<xref:System.ServiceModel.NetTcpBinding>|16 * number of processors|This socket-level property describes the number of \"pending accept\" requests to be queued. If the listen backlog queue fills up, new socket requests will be rejected. For more information about <xref:System.ServiceModel.NetTcpBinding.ListenBacklog%2A>|\n|maxPendingAccepts|ConnectionOrientedTransportBindingElement<br /><br /> SMSvcHost.exe|2 * number of processors for transport<br /><br /> 4 \\* number of processors for SMSvcHost.exe|This property limits the number of channels that the server can have waiting on a listener. When MaxPendingAccepts is too low, there will be a small interval of time in which all of the waiting channels have started servicing connections, but no new channels have begun listening. A connection can arrive during this interval and will fail because nothing is waiting for it on the server. This property can be configured by setting the <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingConnections%2A> property to a larger number. For more information, see <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingAccepts%2A> and [Configuring the Net.TCP Port Sharing Service](../../../docs/framework/wcf/feature-details/configuring-the-net-tcp-port-sharing-service.md)|\n|maxPendingConnections|ConnectionOrientedTransportBindingElement|12 * number of processors|This property controls how many connections a transport has accepted but have not been picked up by the ServiceModel Dispatcher. To set this value, use `MaxConnections` on the binding or `maxOutboundConnectionsPerEndpoint` on the binding element. For more information about <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingConnections%2A>|\n|receiveTimeout|SMSvcHost.exe|30 seconds|This property specifies the timeout for reading the TCP framing data and performing connection dispatching from the underlying connections. This exists to put a cap on the amount of time SMSvcHost.exe service is kept engaged to read the preamble data from an incoming connection. For more information, see [Configuring the Net.TCP Port Sharing Service](../../../docs/framework/wcf/feature-details/configuring-the-net-tcp-port-sharing-service.md).|\n\n> [!NOTE]\n> These new defaults are used only if you deploy the WCF service on a machine with .NET Framework 4.5. If you deploy the same service on a machine with .NET Framework 4.0, then the .NET Framework 4.0 defaults are used. In such cases it is recommended to configure these settings explicitly.\n\n## XmlDictionaryReaderQuotas\n\n<xref:System.Xml.XmlDictionaryReaderQuotas> contains configurable quota values for XML dictionary readers which limit the amount of memory utilized by an encoder while creating a message. While these quotas are configurable, the default values have changed to lessen the possibility that a developer will need to set them explicitly. `MaxReceivedMessageSize` quota has not been changed so that it can still limit memory consumption preventing the need for you to deal with the complexity of the <xref:System.Xml.XmlDictionaryReaderQuotas>. The following table shows the quotas, their new default values and a brief explanation of what each quota is used for.\n\n|Quota Name|Default Value|Description|\n|----------------|-------------------|-----------------|\n|<xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A>|Int32.MaxValue|Gets and sets the maximum allowed array length. This quota limits the maximum size of an array of primitives that the XML reader returns, including byte arrays. This quota does not limit memory consumption in the XML reader itself, but in whatever component that is using the reader. For example, when the <xref:System.Runtime.Serialization.DataContractSerializer> uses a reader secured with <xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A>, it does not deserialize byte arrays larger than this quota.|\n|<xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A>|Int32.MaxValue|Gets and sets the maximum allowed bytes returned for each read. This quota limits the number of bytes that are read in a single Read operation when reading the element start tag and its attributes. (In non-streamed cases, the element name itself is not counted against the quota). Having too many XML attributes may use up disproportionate processing time because attribute names have to be checked for uniqueness. <xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A> mitigates this threat.|\n|<xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A>|128 nodes deep|This quota limits the maximum nesting depth of XML elements. <xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A> interacts with <xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A>: the reader always keeps data in memory for the current element and all of its ancestors, so the maximum memory consumption of the reader is proportional to the product of these two settings. When deserializing a deeply-nested object graph, the deserializer is forced to access the entire stack and throw an unrecoverable <xref:System.StackOverflowException>. A direct correlation exists between XML nesting and object nesting for both the <xref:System.Runtime.Serialization.DataContractSerializer> and the <xref:System.Xml.Serialization.XmlSerializer>. <xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A> is used to mitigate this threat.|\n|<xref:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount%2A>|Int32.MaxValue|This quota limits the maximum number of characters allowed in a nametable. The nametable contains certain strings (such as namespaces and prefixes) that are encountered when processing an XML document. As these strings are buffered in memory, this quota is used to prevent excessive buffering when streaming is expected.|\n|<xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A>|Int32.MaxValue|This quota limits the maximum string size that the XML reader returns. This quota does not limit memory consumption in the XML reader itself, but in the component that is using the reader. For example, when the <xref:System.Runtime.Serialization.DataContractSerializer> uses a reader secured with <xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A>, it does not deserialize strings larger than this quota.|\n\n> [!IMPORTANT]\n> Refer to \"Using XML Safely\" under [Security Considerations for Data](../../../docs/framework/wcf/feature-details/security-considerations-for-data.md) for more information about securing your data.\n\n> [!NOTE]\n> These new defaults are used only if you deploy the WCF service on a machine with .NET Framework 4.5. If you deploy the same service on a machine with .NET Framework 4.0, then the .NET Framework 4.0 defaults are used. In such cases it is recommended to configure these settings explicitly.\n\n## WCF Configuration Validation\n\nAs part of the build process within Visual Studio, WCF configuration files are now validated. A list of validation errors or warnings are displayed in Visual Studio if the validation fails.\n\n## XML Editor Tooltips\n\nIn order to help new and existing WCF service developers to configure their services, the Visual Studio XML editor now provides tooltips for every configuration element and its properties that is part of the service configuration file.\n\n## BasicHttpBinding Improvements\n\n1. Enables a single WCF endpoint to respond to different authentication modes.\n\n2. Enables a WCF service’s security settings to be controlled by IIS\n","nodes":[{"pos":[4,111],"embed":true,"restype":"x-metadata","content":"title: \"WCF Simplification Features\"\nms.date: \"03/30/2017\"\nms.assetid: 4535a511-6064-4da0-b361-80262a891663","nodes":[{"content":"WCF Simplification Features","nodes":[{"pos":[0,27],"content":"WCF Simplification Features","nodes":[{"content":"WCF Simplification Features","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[119,146],"content":"WCF Simplification Features","linkify":"WCF Simplification Features","nodes":[{"content":"WCF Simplification Features","pos":[0,27]}]},{"content":"This topic discusses new features that make writing WCF applications simpler.","pos":[148,225]},{"pos":[230,270],"content":"Simplified Generated Configuration Files","linkify":"Simplified Generated Configuration Files","nodes":[{"content":"Simplified Generated Configuration Files","pos":[0,40]}]},{"content":"When you add a service reference in Visual Studio or use the SvcUtil.exe tool a client configuration file is generated.","pos":[272,391]},{"content":"In previous versions of WCF these configuration files contained the value of every binding property even if its value is the default value.","pos":[392,531]},{"content":"In WCF 4.5 the generated configuration files contain only those binding properties that are set to a non-default value.","pos":[532,651]},{"content":"The following is an example of a configuration file generated by WCF 3.0.","pos":[653,726]},{"content":"The following is an example of the same configuration file generated by WCF 4.5.","pos":[2305,2385]},{"pos":[2961,2987],"content":"Contract-First Development","linkify":"Contract-First Development","nodes":[{"content":"Contract-First Development","pos":[0,26]}]},{"content":"WCF now has support for contract-first development.","pos":[2989,3040]},{"content":"The svcutil.exe tool has a /serviceContract switch which allows you to generate service and data contracts from a WSDL document.","pos":[3041,3169]},{"pos":[3174,3226],"content":"Add Service Reference From a Portable Subset Project","linkify":"Add Service Reference From a Portable Subset Project","nodes":[{"content":"Add Service Reference From a Portable Subset Project","pos":[0,52]}]},{"content":"Portable subset projects enable .NET assembly programmers to maintain a single source tree and build system while still supporting multiple .NET implementations (desktop, Silverlight, Windows Phone, and XBOX).","pos":[3228,3437]},{"content":"Portable subset projects only reference .NET portable libraries which are a .NET framework assembly that can be used on any .NET implementation.","pos":[3438,3582]},{"content":"The developer experience is the same as adding a service reference within any other WCF client application.","pos":[3583,3690]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Add Service Reference in a Portable Subset Project<ept id=\"p1\">](../../../docs/framework/wcf/add-service-reference-in-a-portable-subset-project.md)</ept>.","pos":[3691,3853],"source":" For more information, see [Add Service Reference in a Portable Subset Project](../../../docs/framework/wcf/add-service-reference-in-a-portable-subset-project.md)."},{"pos":[3858,3900],"content":"ASP.NET Compatibility Mode Default Changed","linkify":"ASP.NET Compatibility Mode Default Changed","nodes":[{"content":"ASP.NET Compatibility Mode Default Changed","pos":[0,42]}]},{"content":"WCF provides ASP.NET compatibility mode to grant developers full access to the features in the ASP.NET HTTP pipeline when writing WCF services.","pos":[3902,4045]},{"content":"To use this mode, you must set the <ph id=\"ph1\">`aspNetCompatibilityEnabled`</ph> attribute to true in the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>serviceHostingEnvironment&gt;<ept id=\"p1\">](../../../docs/framework/configure-apps/file-schema/wcf/servicehostingenvironment.md)</ept> section of web.config. Additionally, any service in this appDomain needs to have the <ph id=\"ph3\">`RequirementsMode`</ph> property on its <ph id=\"ph4\">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute&gt;</ph> set to <ph id=\"ph5\">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed&gt;</ph> or <ph id=\"ph6\">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Required&gt;</ph>.","pos":[4046,4625],"source":" To use this mode, you must set the `aspNetCompatibilityEnabled` attribute to true in the [\\<serviceHostingEnvironment>](../../../docs/framework/configure-apps/file-schema/wcf/servicehostingenvironment.md) section of web.config. Additionally, any service in this appDomain needs to have the `RequirementsMode` property on its <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute> set to <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed> or <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Required>."},{"content":"By default <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute&gt;</ph> is now set to <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed&gt;</ph> and the default WCF service application template sets the <ph id=\"ph3\">`aspNetCompatibilityEnabled`</ph> attribute to <ph id=\"ph4\">`true`</ph>.","pos":[4626,4919],"source":" By default <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute> is now set to <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed> and the default WCF service application template sets the `aspNetCompatibilityEnabled` attribute to `true`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>What's New in Windows Communication Foundation 4.5<ept id=\"p1\">](../../../docs/framework/wcf/whats-new.md)</ept> and <bpt id=\"p2\">[</bpt>WCF Services and ASP.NET<ept id=\"p2\">](../../../docs/framework/wcf/feature-details/wcf-services-and-aspnet.md)</ept>.","pos":[4920,5144],"source":" For more information, see [What's New in Windows Communication Foundation 4.5](../../../docs/framework/wcf/whats-new.md) and [WCF Services and ASP.NET](../../../docs/framework/wcf/feature-details/wcf-services-and-aspnet.md)."},{"pos":[5149,5171],"content":"Streaming Improvements","linkify":"Streaming Improvements","nodes":[{"content":"Streaming Improvements","pos":[0,22]}]},{"content":"New support for asynchronous streaming has been added to WCF.","pos":[5175,5236]},{"content":"To enable asynchronous streaming, add the  <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.DispatcherSynchronizationBehavior&gt;</ph> endpoint behavior to the service host and set its <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.DispatcherSynchronizationBehavior.AsynchronousSendEnabled%2A&gt;</ph> property to <ph id=\"ph3\">`true`</ph>.","pos":[5237,5522],"source":" To enable asynchronous streaming, add the  <xref:System.ServiceModel.Description.DispatcherSynchronizationBehavior> endpoint behavior to the service host and set its <xref:System.ServiceModel.Description.DispatcherSynchronizationBehavior.AsynchronousSendEnabled%2A> property to `true`."},{"content":"This can benefit scalability when a service is sending streamed messages to multiple clients which are reading slowly.","pos":[5523,5641]},{"content":"WCF does not block one thread per client anymore and will free up the thread to service another client.","pos":[5642,5745]},{"content":"Removed limitations around buffering of messages when a service is IIS hosted.","pos":[5749,5827]},{"content":"In previous versions of WCF when receiving a message for an IIS-hosted service that used streaming message transfer, ASP.NET would buffer the entire message before sending it to WCF.","pos":[5828,6010]},{"content":"This would cause large memory consumption.","pos":[6011,6053]},{"content":"This buffering has been removed in .NET 4.5 and now IIS-hosted WCF services can start processing the incoming stream before the entire message has been received, thereby enabling true streaming.","pos":[6054,6248]},{"content":"This allows WCF to respond immediately to messages and allows improved performance.","pos":[6249,6332]},{"content":"In addition, you no longer have to specify a value for <ph id=\"ph1\">`maxRequestLength`</ph>, the ASP.NET size limit on incoming requests.","pos":[6333,6452],"source":" In addition, you no longer have to specify a value for `maxRequestLength`, the ASP.NET size limit on incoming requests."},{"content":"If this property is set, it is ignored.","pos":[6453,6492]},{"content":"For more information about <ph id=\"ph1\">`maxRequestLength`</ph> see <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>httpRuntime&gt; configuration element<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=223344)</ept>.","pos":[6493,6630],"source":" For more information about `maxRequestLength` see [\\<httpRuntime> configuration element](https://go.microsoft.com/fwlink/?LinkId=223344)."},{"content":"You will still need to configure the maxAllowedContentLength, For more information, see <bpt id=\"p1\">[</bpt>IIS Request Limits<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=225908)</ept>.","pos":[6631,6788],"source":" You will still need to configure the maxAllowedContentLength, For more information, see [IIS Request Limits](https://go.microsoft.com/fwlink/?LinkId=225908)."},{"pos":[6793,6821],"content":"New Transport Default Values","linkify":"New Transport Default Values","nodes":[{"content":"New Transport Default Values","pos":[0,28]}]},{"content":"The following table describes the settings that have changed and where to find additional information.","pos":[6823,6925]},{"content":"Property","pos":[6928,6936]},{"content":"On","pos":[6937,6939]},{"content":"New Default","pos":[6940,6951]},{"content":"More Information","pos":[6952,6968]},{"content":"channelInitializationTimeout","pos":[7038,7066]},{"content":"30 seconds","pos":[7108,7118]},{"content":"This property determines how long a TCP connection can take to authenticate itself using the .NET Framing protocol.","pos":[7119,7234]},{"content":"A client needs to send some initial data before the server has enough information to perform authentication.","pos":[7235,7343]},{"content":"This timeout is intentionally made smaller than the ReceiveTimeout (10 min) so that malicious unauthenticated clients do not keep the connections tied up to the server for long.","pos":[7344,7521]},{"content":"The default value is 30 seconds.","pos":[7522,7554]},{"content":"For more information about <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.ChannelInitializationTimeout%2A&gt;</ph>","pos":[7555,7691],"source":" For more information about <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.ChannelInitializationTimeout%2A>"},{"content":"listenBacklog","pos":[7694,7707]},{"content":"16 * number of processors","pos":[7749,7774]},{"content":"This socket-level property describes the number of \"pending accept\" requests to be queued.","pos":[7775,7865]},{"content":"If the listen backlog queue fills up, new socket requests will be rejected.","pos":[7866,7941]},{"content":"For more information about <ph id=\"ph1\">&lt;xref:System.ServiceModel.NetTcpBinding.ListenBacklog%2A&gt;</ph>","pos":[7942,8026],"source":" For more information about <xref:System.ServiceModel.NetTcpBinding.ListenBacklog%2A>"},{"content":"maxPendingAccepts","pos":[8029,8046]},{"content":"ConnectionOrientedTransportBindingElement","pos":[8047,8088]},{"content":"SMSvcHost.exe","pos":[8101,8114]},{"content":"2 * number of processors for transport","pos":[8115,8153]},{"content":"4 <ph id=\"ph1\">\\*</ph> number of processors for SMSvcHost.exe","pos":[8166,8209],"source":"4 \\* number of processors for SMSvcHost.exe"},{"content":"This property limits the number of channels that the server can have waiting on a listener.","pos":[8210,8301]},{"content":"When MaxPendingAccepts is too low, there will be a small interval of time in which all of the waiting channels have started servicing connections, but no new channels have begun listening.","pos":[8302,8490]},{"content":"A connection can arrive during this interval and will fail because nothing is waiting for it on the server.","pos":[8491,8598]},{"content":"This property can be configured by setting the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingConnections%2A&gt;</ph> property to a larger number.","pos":[8599,8777],"source":" This property can be configured by setting the <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingConnections%2A> property to a larger number."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingAccepts%2A&gt;</ph> and <bpt id=\"p1\">[</bpt>Configuring the Net.TCP Port Sharing Service<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/configuring-the-net-tcp-port-sharing-service.md)</ept>","pos":[8778,9046],"source":" For more information, see <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingAccepts%2A> and [Configuring the Net.TCP Port Sharing Service](../../../docs/framework/wcf/feature-details/configuring-the-net-tcp-port-sharing-service.md)"},{"content":"maxPendingConnections","pos":[9049,9070]},{"content":"ConnectionOrientedTransportBindingElement","pos":[9071,9112]},{"content":"12 * number of processors","pos":[9113,9138]},{"content":"This property controls how many connections a transport has accepted but have not been picked up by the ServiceModel Dispatcher.","pos":[9139,9267]},{"content":"To set this value, use <ph id=\"ph1\">`MaxConnections`</ph> on the binding or <ph id=\"ph2\">`maxOutboundConnectionsPerEndpoint`</ph> on the binding element.","pos":[9268,9385],"source":" To set this value, use `MaxConnections` on the binding or `maxOutboundConnectionsPerEndpoint` on the binding element."},{"content":"For more information about <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingConnections%2A&gt;</ph>","pos":[9386,9515],"source":" For more information about <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingConnections%2A>"},{"content":"receiveTimeout","pos":[9518,9532]},{"content":"SMSvcHost.exe","pos":[9533,9546]},{"content":"30 seconds","pos":[9547,9557]},{"content":"This property specifies the timeout for reading the TCP framing data and performing connection dispatching from the underlying connections.","pos":[9558,9697]},{"content":"This exists to put a cap on the amount of time SMSvcHost.exe service is kept engaged to read the preamble data from an incoming connection.","pos":[9698,9837]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Configuring the Net.TCP Port Sharing Service<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/configuring-the-net-tcp-port-sharing-service.md)</ept>.","pos":[9838,10004],"source":" For more information, see [Configuring the Net.TCP Port Sharing Service](../../../docs/framework/wcf/feature-details/configuring-the-net-tcp-port-sharing-service.md)."},{"pos":[10009,10307],"content":"[!NOTE]\nThese new defaults are used only if you deploy the WCF service on a machine with .NET Framework 4.5. If you deploy the same service on a machine with .NET Framework 4.0, then the .NET Framework 4.0 defaults are used. In such cases it is recommended to configure these settings explicitly.","leadings":["","> "],"nodes":[{"content":"These new defaults are used only if you deploy the WCF service on a machine with .NET Framework 4.5. If you deploy the same service on a machine with .NET Framework 4.0, then the .NET Framework 4.0 defaults are used. In such cases it is recommended to configure these settings explicitly.","pos":[8,296],"nodes":[{"content":"These new defaults are used only if you deploy the WCF service on a machine with .NET Framework 4.5.","pos":[0,100]},{"content":"If you deploy the same service on a machine with .NET Framework 4.0, then the .NET Framework 4.0 defaults are used.","pos":[101,216]},{"content":"In such cases it is recommended to configure these settings explicitly.","pos":[217,288]}]}]},{"pos":[10312,10337],"content":"XmlDictionaryReaderQuotas","linkify":"XmlDictionaryReaderQuotas","nodes":[{"content":"XmlDictionaryReaderQuotas","pos":[0,25]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> contains configurable quota values for XML dictionary readers which limit the amount of memory utilized by an encoder while creating a message.","pos":[10339,10526],"source":"<xref:System.Xml.XmlDictionaryReaderQuotas> contains configurable quota values for XML dictionary readers which limit the amount of memory utilized by an encoder while creating a message."},{"content":"While these quotas are configurable, the default values have changed to lessen the possibility that a developer will need to set them explicitly.","pos":[10527,10672]},{"content":"<ph id=\"ph1\">`MaxReceivedMessageSize`</ph> quota has not been changed so that it can still limit memory consumption preventing the need for you to deal with the complexity of the <ph id=\"ph2\">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph>.","pos":[10673,10878],"source":"`MaxReceivedMessageSize` quota has not been changed so that it can still limit memory consumption preventing the need for you to deal with the complexity of the <xref:System.Xml.XmlDictionaryReaderQuotas>."},{"content":"The following table shows the quotas, their new default values and a brief explanation of what each quota is used for.","pos":[10879,10997]},{"content":"Quota Name","pos":[11000,11010]},{"content":"Default Value","pos":[11011,11024]},{"content":"Description","pos":[11025,11036]},{"content":"Int32.MaxValue","pos":[11158,11172]},{"content":"Gets and sets the maximum allowed array length.","pos":[11173,11220]},{"content":"This quota limits the maximum size of an array of primitives that the XML reader returns, including byte arrays.","pos":[11221,11333]},{"content":"This quota does not limit memory consumption in the XML reader itself, but in whatever component that is using the reader.","pos":[11334,11456]},{"content":"For example, when the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> uses a reader secured with <ph id=\"ph2\">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A&gt;</ph>, it does not deserialize byte arrays larger than this quota.","pos":[11457,11687],"source":" For example, when the <xref:System.Runtime.Serialization.DataContractSerializer> uses a reader secured with <xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A>, it does not deserialize byte arrays larger than this quota."},{"content":"Int32.MaxValue","pos":[11753,11767]},{"content":"Gets and sets the maximum allowed bytes returned for each read.","pos":[11768,11831]},{"content":"This quota limits the number of bytes that are read in a single Read operation when reading the element start tag and its attributes.","pos":[11832,11965]},{"content":"(In non-streamed cases, the element name itself is not counted against the quota).","pos":[11966,12048]},{"content":"Having too many XML attributes may use up disproportionate processing time because attribute names have to be checked for uniqueness.","pos":[12049,12182]},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A&gt;</ph> mitigates this threat.","pos":[12183,12268],"source":"<xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A> mitigates this threat."},{"content":"128 nodes deep","pos":[12327,12341]},{"content":"This quota limits the maximum nesting depth of XML elements.","pos":[12342,12402]},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A&gt;</ph> interacts with <ph id=\"ph2\">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A&gt;</ph>: the reader always keeps data in memory for the current element and all of its ancestors, so the maximum memory consumption of the reader is proportional to the product of these two settings.","pos":[12403,12728],"source":"<xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A> interacts with <xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A>: the reader always keeps data in memory for the current element and all of its ancestors, so the maximum memory consumption of the reader is proportional to the product of these two settings."},{"content":"When deserializing a deeply-nested object graph, the deserializer is forced to access the entire stack and throw an unrecoverable <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph>.","pos":[12729,12896],"source":" When deserializing a deeply-nested object graph, the deserializer is forced to access the entire stack and throw an unrecoverable <xref:System.StackOverflowException>."},{"content":"A direct correlation exists between XML nesting and object nesting for both the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.","pos":[12897,13090],"source":" A direct correlation exists between XML nesting and object nesting for both the <xref:System.Runtime.Serialization.DataContractSerializer> and the <xref:System.Xml.Serialization.XmlSerializer>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A&gt;</ph> is used to mitigate this threat.","pos":[13091,13179],"source":"<xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A> is used to mitigate this threat."},{"content":"Int32.MaxValue","pos":[13251,13265]},{"content":"This quota limits the maximum number of characters allowed in a nametable.","pos":[13266,13340]},{"content":"The nametable contains certain strings (such as namespaces and prefixes) that are encountered when processing an XML document.","pos":[13341,13467]},{"content":"As these strings are buffered in memory, this quota is used to prevent excessive buffering when streaming is expected.","pos":[13468,13586]},{"content":"Int32.MaxValue","pos":[13659,13673]},{"content":"This quota limits the maximum string size that the XML reader returns.","pos":[13674,13744]},{"content":"This quota does not limit memory consumption in the XML reader itself, but in the component that is using the reader.","pos":[13745,13862]},{"content":"For example, when the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> uses a reader secured with <ph id=\"ph2\">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A&gt;</ph>, it does not deserialize strings larger than this quota.","pos":[13863,14097],"source":" For example, when the <xref:System.Runtime.Serialization.DataContractSerializer> uses a reader secured with <xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A>, it does not deserialize strings larger than this quota."},{"pos":[14102,14313],"content":"[!IMPORTANT]\nRefer to \"Using XML Safely\" under [Security Considerations for Data](../../../docs/framework/wcf/feature-details/security-considerations-for-data.md) for more information about securing your data.","leadings":["","> "],"nodes":[{"content":"Refer to \"Using XML Safely\" under <bpt id=\"p1\">[</bpt>Security Considerations for Data<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept> for more information about securing your data.","pos":[13,209],"source":"Refer to \"Using XML Safely\" under [Security Considerations for Data](../../../docs/framework/wcf/feature-details/security-considerations-for-data.md) for more information about securing your data."}]},{"pos":[14317,14615],"content":"[!NOTE]\nThese new defaults are used only if you deploy the WCF service on a machine with .NET Framework 4.5. If you deploy the same service on a machine with .NET Framework 4.0, then the .NET Framework 4.0 defaults are used. In such cases it is recommended to configure these settings explicitly.","leadings":["","> "],"nodes":[{"content":"These new defaults are used only if you deploy the WCF service on a machine with .NET Framework 4.5. If you deploy the same service on a machine with .NET Framework 4.0, then the .NET Framework 4.0 defaults are used. In such cases it is recommended to configure these settings explicitly.","pos":[8,296],"nodes":[{"content":"These new defaults are used only if you deploy the WCF service on a machine with .NET Framework 4.5.","pos":[0,100]},{"content":"If you deploy the same service on a machine with .NET Framework 4.0, then the .NET Framework 4.0 defaults are used.","pos":[101,216]},{"content":"In such cases it is recommended to configure these settings explicitly.","pos":[217,288]}]}]},{"pos":[14620,14648],"content":"WCF Configuration Validation","linkify":"WCF Configuration Validation","nodes":[{"content":"WCF Configuration Validation","pos":[0,28]}]},{"content":"As part of the build process within Visual Studio, WCF configuration files are now validated.","pos":[14650,14743]},{"content":"A list of validation errors or warnings are displayed in Visual Studio if the validation fails.","pos":[14744,14839]},{"pos":[14844,14863],"content":"XML Editor Tooltips","linkify":"XML Editor Tooltips","nodes":[{"content":"XML Editor Tooltips","pos":[0,19]}]},{"content":"In order to help new and existing WCF service developers to configure their services, the Visual Studio XML editor now provides tooltips for every configuration element and its properties that is part of the service configuration file.","pos":[14865,15100]},{"pos":[15105,15134],"content":"BasicHttpBinding Improvements","linkify":"BasicHttpBinding Improvements","nodes":[{"content":"BasicHttpBinding Improvements","pos":[0,29]}]},{"content":"Enables a single WCF endpoint to respond to different authentication modes.","pos":[15139,15214]},{"content":"Enables a WCF service’s security settings to be controlled by IIS","pos":[15219,15284]}]}