{"content":"---\ntitle: \"Object-oriented programming (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 49794de4-64c3-473c-b8ed-fe98835df69c\n---\n# Object-oriented programming (Visual Basic)\n\nVisual Basic provides full support for object-oriented programming including encapsulation, inheritance, and polymorphism.\n\n *Encapsulation* means that a group of related properties, methods, and other members are treated as a single unit or object.\n\n *Inheritance* describes the ability to create new classes based on an existing class.\n\n *Polymorphism* means that you can have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways.\n\n This section describes the following concepts:\n\n- [Classes and objects](#classes-and-objects)\n  - [Class members](#class-members)\n    - [Properties and fields](#properties-and-fields)\n    - [Methods](#methods)\n    - [Constructors](#constructors)\n    - [Destructors](#destructors)\n    - [Events](#events)\n    - [Nested classes](#nested-classes)\n  - [Access modifiers and access levels](#access-modifiers-and-access-levels)\n    - [Instantiating classes](#instantiating-classes)\n    - [Shared classes and members](#shared-classes-and-members)\n    - [Anonymous types](#anonymous-types)\n- [Inheritance](#inheritance)\n  - [Overriding members](#overriding-members)\n- [Interfaces](#interfaces)\n- [Generics](#generics)\n- [Delegates](#delegates)\n\n## Classes and objects\n\nThe terms *class* and *object* are sometimes used interchangeably, but in fact, classes describe the *type* of objects, while objects are usable *instances* of classes. So, the act of creating an object is called *instantiation*. Using the blueprint analogy, a class is a blueprint, and an object is a building made from that blueprint.\n\nTo define a class:\n\n```vb\nClass SampleClass\nEnd Class\n```\n\nVisual Basic also provides a light version of classes called *structures* that are useful when you need to create large array of objects and do not want to consume too much memory for that.\n\nTo define a structure:\n\n```vb\nStructure SampleStructure\nEnd Structure\n```\n\nFor more information, see:\n\n- [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)\n- [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)\n\n### Class members\n\nEach class can have different *class members* that include properties that describe class data, methods that define class behavior, and events that provide communication between different classes and objects.\n\n#### Properties and fields\n\nFields and properties represent information that an object contains. Fields are like variables because they can be read or set directly.\n\nTo define a field:\n\n```vb\nClass SampleClass\n    Public SampleField As String\nEnd Class\n```\n\nProperties have get and set procedures, which provide more control on how values are set or returned.\n\nVisual Basic allows you either to create a private field for storing the property value or use so-called auto-implemented properties that create this field automatically behind the scenes and provide the basic logic for the property procedures.\n\nTo define an auto-implemented property:\n\n```vb\nClass SampleClass\n    Public Property SampleProperty as String\nEnd Class\n```\n\nIf you need to perform some additional operations for reading and writing the property value, define a field for storing the property value and provide the basic logic for storing and retrieving it:\n\n```vb\nClass SampleClass\n    Private m_Sample As String\n    Public Property Sample() As String\n        Get\n            ' Return the value stored in the field.\n            Return m_Sample\n        End Get\n        Set(ByVal Value As String)\n            ' Store the value in the field.\n            m_Sample = Value\n        End Set\n    End Property\nEnd Class\n```\n\nMost properties have methods or procedures to both set and get the property value. However, you can create read-only or write-only properties to restrict them from being modified or read. In Visual Basic you can use `ReadOnly` and `WriteOnly` keywords. However, auto-implemented properties cannot be read-only or write-only.\n\nFor more information, see:\n\n- [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)\n- [Get Statement](../../../visual-basic/language-reference/statements/get-statement.md)\n- [Set Statement](../../../visual-basic/language-reference/statements/set-statement.md)\n- [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)\n- [WriteOnly](../../../visual-basic/language-reference/modifiers/writeonly.md)\n\n#### Methods\n\n A *method* is an action that an object can perform.\n\n> [!NOTE]\n> In Visual Basic, there are two ways to create a method: the `Sub` statement is used if the method does not return a value; the `Function` statement is used if a method returns a value.\n\nTo define a method of a class:\n\n```vb\nClass SampleClass\n    Public Function SampleFunc(ByVal SampleParam As String)\n        ' Add code here\n    End Function\nEnd Class\n```\n\nA class can have several implementations, or *overloads*, of the same method that differ in the number of parameters or parameter types.\n\nTo overload a method:\n\n```vb\nOverloads Sub Display(ByVal theChar As Char)\n    ' Add code that displays Char data.\nEnd Sub\nOverloads Sub Display(ByVal theInteger As Integer)\n    ' Add code that displays Integer data.\nEnd Sub\n```\n\nIn most cases you declare a method within a class definition. However, Visual Basic also supports *extension methods* that allow you to add methods to an existing class outside the actual definition of the class.\n\nFor more information, see:\n\n- [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)\n- [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)\n- [Overloads](../../../visual-basic/language-reference/modifiers/overloads.md)\n- [Extension Methods](../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)\n\n#### Constructors\n\nConstructors are class methods that are executed automatically when an object of a given type is created. Constructors usually initialize the data members of the new object. A constructor can run only once when a class is created. Furthermore, the code in the constructor always runs before any other code in a class. However, you can create multiple constructor overloads in the same way as for any other method.\n\nTo define a constructor for a class:\n\n```vb\nClass SampleClass\n    Sub New(ByVal s As String)\n        // Add code here.\n    End Sub\nEnd Class\n```\n\nFor more information, see: [Object Lifetime: How Objects Are Created and Destroyed](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md).\n\n#### Destructors\n\nDestructors are used to destruct instances of classes. In the .NET Framework, the garbage collector automatically manages the allocation and release of memory for the managed objects in your application. However, you may still need destructors to clean up any unmanaged resources that your application creates. There can be only one destructor for a class.\n\nFor more information about destructors and garbage collection in the .NET Framework, see [Garbage Collection](../../../standard/garbage-collection/index.md).\n\n#### Events\n\nEvents enable a class or object to notify other classes or objects when something of interest occurs. The class that sends (or raises) the event is called the *publisher* and the classes that receive (or handle) the event are called *subscribers*. For more information about events, how they are raised and handled, see [Events](../../../standard/events/index.md).\n\n- To declare events, use the [Event Statement](../../../visual-basic/language-reference/statements/event-statement.md).\n\n- To raise events, use the [RaiseEvent Statement](../../../visual-basic/language-reference/statements/raiseevent-statement.md).\n\n- To specify event handlers using a declarative way, use the [WithEvents](../../../visual-basic/language-reference/modifiers/withevents.md) statement and the [Handles](../../../visual-basic/language-reference/statements/handles-clause.md) clause.\n\n- To be able to dynamically add, remove, and change the event handler associated with an event, use the [AddHandler Statement](../../../visual-basic/language-reference/statements/addhandler-statement.md) and [RemoveHandler Statement](../../../visual-basic/language-reference/statements/removehandler-statement.md) together with the [AddressOf Operator](../../../visual-basic/language-reference/operators/addressof-operator.md).\n\n#### Nested classes\n\nA class defined within another class is called *nested*. By default, the nested class is private.\n\n```vb\nClass Container\n    Class Nested\n    ' Add code here.\n    End Class\nEnd Class\n```\n\nTo create an instance of the nested class, use the name of the container class followed by the dot and then followed by the name of the nested class:\n\n```vb\nDim nestedInstance As Container.Nested = New Container.Nested()\n```\n\n### Access modifiers and access levels\n\nAll classes and class members can specify what access level they provide to other classes by using *access modifiers*.\n\nThe following access modifiers are available:\n\n|Visual Basic Modifier|Definition|\n|---------------------------|----------------|\n|[Public](../../../visual-basic/language-reference/modifiers/public.md)|The type or member can be accessed by any other code in the same assembly or another assembly that references it.|\n|[Private](../../../visual-basic/language-reference/modifiers/private.md)|The type or member can only be accessed by code in the same class.|\n|[Protected](../../../visual-basic/language-reference/modifiers/protected.md)|The type or member can only be accessed by code in the same class or in a derived class.|\n|[Friend](../../../visual-basic/language-reference/modifiers/friend.md)|The type or member can be accessed by any code in the same assembly, but not from another assembly.|\n|`Protected Friend`|The type or member can be accessed by any code in the same assembly, or by any derived class in another assembly.|\n\nFor more information, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).\n\n### Instantiating classes\n\nTo create an object, you need to instantiate a class, or create a class instance.\n\n```vb\nDim sampleObject as New SampleClass()\n```\n\nAfter instantiating a class, you can assign values to the instance's properties and fields and invoke class methods.\n\n```vb\n' Set a property value.\nsampleObject.SampleProperty = \"Sample String\"\n' Call a method.\nsampleObject.SampleMethod()\n```\n\nTo assign values to properties during the class instantiation process, use object initializers:\n\n```vb\nDim sampleObject = New SampleClass With\n    {.FirstProperty = \"A\", .SecondProperty = \"B\"}\n```\n\nFor more information, see:\n\n- [New Operator](../../../visual-basic/language-reference/operators/new-operator.md)\n- [Object Initializers: Named and Anonymous Types](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)\n\n### Shared classes and members\n\n A shared member of the class is a property, procedure, or field that is shared by all instances of a class.\n\n To define a shared member:\n\n```vb\nClass SampleClass\n    Public Shared SampleString As String = \"Sample String\"\nEnd Class\n```\n\n To access the shared member, use the name of the class without creating an object of this class:\n\n```vb\nMsgBox(SampleClass.SampleString)\n```\n\n Shared modules in Visual Basic have shared members only and cannot be instantiated. Shared members also cannot access non-shared properties, fields or methods\n\n For more information, see:\n\n- [Shared](../../../visual-basic/language-reference/modifiers/shared.md)\n- [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)\n\n### Anonymous types\n\nAnonymous types enable you to create objects without writing a class definition for the data type. Instead, the compiler generates a class for you. The class has no usable name and contains the properties you specify in declaring the object.\n\nTo create an instance of an anonymous type:\n\n```vb\n' sampleObject is an instance of a simple anonymous type.\nDim sampleObject =\n    New With {Key .FirstProperty = \"A\", .SecondProperty = \"B\"}\n```\n\nFor more information, see: [Anonymous Types](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md).\n\n## Inheritance\n\nInheritance enables you to create a new class that reuses, extends, and modifies the behavior that is defined in another class. The class whose members are inherited is called the *base class*, and the class that inherits those members is called the *derived class*. However, all classes in Visual Basic implicitly inherit from the <xref:System.Object> class that supports .NET class hierarchy and provides low-level services to all classes.\n\n> [!NOTE]\n> Visual Basic doesn't support multiple inheritance. That is, you can specify only one base class for a derived class.\n\nTo inherit from a base class:\n\n```vb\nClass DerivedClass\n    Inherits BaseClass\nEnd Class\n```\n\nBy default all classes can be inherited. However, you can specify whether a class must not be used as a base class, or create a class that can be used as a base class only.\n\nTo specify that a class cannot be used as a base class:\n\n```vb\nNotInheritable Class SampleClass\nEnd Class\n```\n\nTo specify that a class can be used as a base class only and cannot be instantiated:\n\n```vb\nMustInherit Class BaseClass\nEnd Class\n```\n\nFor more information, see:\n\n- [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md)\n- [NotInheritable](../../../visual-basic/language-reference/modifiers/notinheritable.md)\n- [MustInherit](../../../visual-basic/language-reference/modifiers/mustinherit.md)\n\n### Overriding members\n\nBy default, a derived class inherits all members from its base class. If you want to change the behavior of the inherited member, you need to override it. That is, you can define a new implementation of the method, property or event in the derived class.\n\nThe following modifiers are used to control how properties and methods are overridden:\n\n|Visual Basic Modifier|Definition|\n|---------------------------|----------------|\n|[Overridable](../../../visual-basic/language-reference/modifiers/overridable.md)|Allows a class member to be overridden in a derived class.|\n|[Overrides](../../../visual-basic/language-reference/modifiers/overrides.md)|Overrides a virtual (overridable) member defined in the base class.|\n|[NotOverridable](../../../visual-basic/language-reference/modifiers/notoverridable.md)|Prevents a member from being overridden in an inheriting class.|\n|[MustOverride](../../../visual-basic/language-reference/modifiers/mustoverride.md)|Requires that a class member to be overridden in the derived class.|\n|[Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)|Hides a member inherited from a base class|\n\n## Interfaces\n\nInterfaces, like classes, define a set of properties, methods, and events. But unlike classes, interfaces do not provide implementation. They are implemented by classes, and defined as separate entities from classes. An interface represents a contract, in that a class that implements an interface must implement every aspect of that interface exactly as it is defined.\n\nTo define an interface:\n\n```vb\nPublic Interface ISampleInterface\n    Sub DoSomething()\nEnd Interface\n```\n\nTo implement an interface in a class:\n\n```vb\nClass SampleClass\n    Implements ISampleInterface\n    Sub DoSomething\n        ' Method implementation.\n    End Sub\nEnd Class\n```\n\nFor more information, see:\n\n- [Interfaces](../../../visual-basic/programming-guide/language-features/interfaces/index.md)\n- [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)\n- [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md)\n\n## Generics\n\nClasses, structures, interfaces and methods in .NET can include *type parameters* that define types of objects that they can store or use. The most common example of generics is a collection, where you can specify the type of objects to be stored in a collection.\n\nTo define a generic class:\n\n```vb\nClass SampleGeneric(Of T)\n    Public Field As T\nEnd Class\n```\n\nTo create an instance of a generic class:\n\n```vb\nDim sampleObject As New SampleGeneric(Of String)\nsampleObject.Field = \"Sample string\"\n```\n\nFor more information, see:\n\n- [Generics](../../../standard/generics/index.md)\n- [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n\n## Delegates\n\n A *delegate* is a type that defines a method signature, and can provide a reference to any method with a compatible signature. You can invoke (or call) the method through the delegate. Delegates are used to pass methods as arguments to other methods.\n\n> [!NOTE]\n> Event handlers are nothing more than methods that are invoked through delegates. For more information about using delegates in event handling, see [Events](../../../standard/events/index.md).\n\nTo create a delegate:\n\n```vb\nDelegate Sub SampleDelegate(ByVal str As String)\n```\n\nTo create a reference to a method that matches the signature specified by the delegate:\n\n```vb\nClass SampleClass\n    ' Method that matches the SampleDelegate signature.\n    Sub SampleSub(ByVal str As String)\n        ' Add code here.\n    End Sub\n    ' Method that instantiates the delegate.\n    Sub SampleDelegateSub()\n        Dim sd As SampleDelegate = AddressOf SampleSub\n        sd(\"Sample string\")\n    End Sub\nEnd Class\n```\n\nFor more information, see:\n\n- [Delegates](../../../visual-basic/programming-guide/language-features/delegates/index.md)\n- [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)\n- [AddressOf Operator](../../../visual-basic/language-reference/operators/addressof-operator.md)\n\n## See also\n\n- [Visual Basic Programming Guide](../../../visual-basic/programming-guide/index.md)\n","nodes":[{"pos":[4,124],"embed":true,"restype":"x-metadata","content":"title: \"Object-oriented programming (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 49794de4-64c3-473c-b8ed-fe98835df69c","nodes":[{"content":"Object-oriented programming (Visual Basic)","nodes":[{"pos":[0,42],"content":"Object-oriented programming (Visual Basic)","nodes":[{"content":"Object-oriented programming (Visual Basic)","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[131,173],"content":"Object-oriented programming (Visual Basic)","linkify":"Object-oriented programming (Visual Basic)","nodes":[{"content":"Object-oriented programming (Visual Basic)","pos":[0,42]}]},{"content":"Visual Basic provides full support for object-oriented programming including encapsulation, inheritance, and polymorphism.","pos":[175,297]},{"pos":[300,424],"content":"<bpt id=\"p1\">*</bpt>Encapsulation<ept id=\"p1\">*</ept> means that a group of related properties, methods, and other members are treated as a single unit or object.","source":"*Encapsulation* means that a group of related properties, methods, and other members are treated as a single unit or object."},{"pos":[427,512],"content":"<bpt id=\"p1\">*</bpt>Inheritance<ept id=\"p1\">*</ept> describes the ability to create new classes based on an existing class.","source":"*Inheritance* describes the ability to create new classes based on an existing class."},{"pos":[515,688],"content":"<bpt id=\"p1\">*</bpt>Polymorphism<ept id=\"p1\">*</ept> means that you can have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways.","source":"*Polymorphism* means that you can have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways."},{"content":"This section describes the following concepts:","pos":[691,737]},{"pos":[741,784],"content":"<bpt id=\"p1\">[</bpt>Classes and objects<ept id=\"p1\">](#classes-and-objects)</ept>","source":"[Classes and objects](#classes-and-objects)"},{"pos":[789,820],"content":"<bpt id=\"p1\">[</bpt>Class members<ept id=\"p1\">](#class-members)</ept>","source":"[Class members](#class-members)"},{"pos":[827,874],"content":"<bpt id=\"p1\">[</bpt>Properties and fields<ept id=\"p1\">](#properties-and-fields)</ept>","source":"[Properties and fields](#properties-and-fields)"},{"pos":[881,900],"content":"<bpt id=\"p1\">[</bpt>Methods<ept id=\"p1\">](#methods)</ept>","source":"[Methods](#methods)"},{"pos":[907,936],"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](#constructors)</ept>","source":"[Constructors](#constructors)"},{"pos":[943,970],"content":"<bpt id=\"p1\">[</bpt>Destructors<ept id=\"p1\">](#destructors)</ept>","source":"[Destructors](#destructors)"},{"pos":[977,994],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](#events)</ept>","source":"[Events](#events)"},{"pos":[1001,1034],"content":"<bpt id=\"p1\">[</bpt>Nested classes<ept id=\"p1\">](#nested-classes)</ept>","source":"[Nested classes](#nested-classes)"},{"pos":[1039,1112],"content":"<bpt id=\"p1\">[</bpt>Access modifiers and access levels<ept id=\"p1\">](#access-modifiers-and-access-levels)</ept>","source":"[Access modifiers and access levels](#access-modifiers-and-access-levels)"},{"pos":[1119,1166],"content":"<bpt id=\"p1\">[</bpt>Instantiating classes<ept id=\"p1\">](#instantiating-classes)</ept>","source":"[Instantiating classes](#instantiating-classes)"},{"pos":[1173,1230],"content":"<bpt id=\"p1\">[</bpt>Shared classes and members<ept id=\"p1\">](#shared-classes-and-members)</ept>","source":"[Shared classes and members](#shared-classes-and-members)"},{"pos":[1237,1272],"content":"<bpt id=\"p1\">[</bpt>Anonymous types<ept id=\"p1\">](#anonymous-types)</ept>","source":"[Anonymous types](#anonymous-types)"},{"pos":[1275,1302],"content":"<bpt id=\"p1\">[</bpt>Inheritance<ept id=\"p1\">](#inheritance)</ept>","source":"[Inheritance](#inheritance)"},{"pos":[1307,1348],"content":"<bpt id=\"p1\">[</bpt>Overriding members<ept id=\"p1\">](#overriding-members)</ept>","source":"[Overriding members](#overriding-members)"},{"pos":[1351,1376],"content":"<bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](#interfaces)</ept>","source":"[Interfaces](#interfaces)"},{"pos":[1379,1400],"content":"<bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](#generics)</ept>","source":"[Generics](#generics)"},{"pos":[1403,1426],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](#delegates)</ept>","source":"[Delegates](#delegates)"},{"pos":[1431,1450],"content":"Classes and objects","linkify":"Classes and objects","nodes":[{"content":"Classes and objects","pos":[0,19]}]},{"content":"The terms <bpt id=\"p1\">*</bpt>class<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>object<ept id=\"p2\">*</ept> are sometimes used interchangeably, but in fact, classes describe the <bpt id=\"p3\">*</bpt>type<ept id=\"p3\">*</ept> of objects, while objects are usable <bpt id=\"p4\">*</bpt>instances<ept id=\"p4\">*</ept> of classes.","pos":[1452,1620],"source":"The terms *class* and *object* are sometimes used interchangeably, but in fact, classes describe the *type* of objects, while objects are usable *instances* of classes."},{"content":"So, the act of creating an object is called <bpt id=\"p1\">*</bpt>instantiation<ept id=\"p1\">*</ept>.","pos":[1621,1681],"source":" So, the act of creating an object is called *instantiation*."},{"content":"Using the blueprint analogy, a class is a blueprint, and an object is a building made from that blueprint.","pos":[1682,1788]},{"content":"To define a class:","pos":[1790,1808]},{"pos":[1849,2038],"content":"Visual Basic also provides a light version of classes called <bpt id=\"p1\">*</bpt>structures<ept id=\"p1\">*</ept> that are useful when you need to create large array of objects and do not want to consume too much memory for that.","source":"Visual Basic also provides a light version of classes called *structures* that are useful when you need to create large array of objects and do not want to consume too much memory for that."},{"content":"To define a structure:","pos":[2040,2062]},{"content":"For more information, see:","pos":[2115,2141]},{"pos":[2145,2234],"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept>","source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)"},{"pos":[2237,2334],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[2340,2353],"content":"Class members","linkify":"Class members","nodes":[{"content":"Class members","pos":[0,13]}]},{"pos":[2355,2563],"content":"Each class can have different <bpt id=\"p1\">*</bpt>class members<ept id=\"p1\">*</ept> that include properties that describe class data, methods that define class behavior, and events that provide communication between different classes and objects.","source":"Each class can have different *class members* that include properties that describe class data, methods that define class behavior, and events that provide communication between different classes and objects."},{"pos":[2570,2591],"content":"Properties and fields","linkify":"Properties and fields","nodes":[{"content":"Properties and fields","pos":[0,21]}]},{"content":"Fields and properties represent information that an object contains.","pos":[2593,2661]},{"content":"Fields are like variables because they can be read or set directly.","pos":[2662,2729]},{"content":"To define a field:","pos":[2731,2749]},{"content":"Properties have get and set procedures, which provide more control on how values are set or returned.","pos":[2823,2924]},{"content":"Visual Basic allows you either to create a private field for storing the property value or use so-called auto-implemented properties that create this field automatically behind the scenes and provide the basic logic for the property procedures.","pos":[2926,3170]},{"content":"To define an auto-implemented property:","pos":[3172,3211]},{"content":"If you need to perform some additional operations for reading and writing the property value, define a field for storing the property value and provide the basic logic for storing and retrieving it:","pos":[3297,3495]},{"content":"Most properties have methods or procedures to both set and get the property value.","pos":[3855,3937]},{"content":"However, you can create read-only or write-only properties to restrict them from being modified or read.","pos":[3938,4042]},{"content":"In Visual Basic you can use <ph id=\"ph1\">`ReadOnly`</ph> and <ph id=\"ph2\">`WriteOnly`</ph> keywords.","pos":[4043,4107],"source":" In Visual Basic you can use `ReadOnly` and `WriteOnly` keywords."},{"content":"However, auto-implemented properties cannot be read-only or write-only.","pos":[4108,4179]},{"content":"For more information, see:","pos":[4181,4207]},{"pos":[4211,4306],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[4309,4394],"content":"<bpt id=\"p1\">[</bpt>Get Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/get-statement.md)</ept>","source":"[Get Statement](../../../visual-basic/language-reference/statements/get-statement.md)"},{"pos":[4397,4482],"content":"<bpt id=\"p1\">[</bpt>Set Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/set-statement.md)</ept>","source":"[Set Statement](../../../visual-basic/language-reference/statements/set-statement.md)"},{"pos":[4485,4559],"content":"<bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>","source":"[ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)"},{"pos":[4562,4638],"content":"<bpt id=\"p1\">[</bpt>WriteOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/writeonly.md)</ept>","source":"[WriteOnly](../../../visual-basic/language-reference/modifiers/writeonly.md)"},{"pos":[4645,4652],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"pos":[4655,4706],"content":"A <bpt id=\"p1\">*</bpt>method<ept id=\"p1\">*</ept> is an action that an object can perform.","source":"A *method* is an action that an object can perform."},{"pos":[4710,4904],"content":"[!NOTE]\nIn Visual Basic, there are two ways to create a method: the `Sub` statement is used if the method does not return a value; the `Function` statement is used if a method returns a value.","leadings":["","> "],"nodes":[{"content":"In Visual Basic, there are two ways to create a method: the <ph id=\"ph1\">`Sub`</ph> statement is used if the method does not return a value; the <ph id=\"ph2\">`Function`</ph> statement is used if a method returns a value.","pos":[8,192],"source":"In Visual Basic, there are two ways to create a method: the `Sub` statement is used if the method does not return a value; the `Function` statement is used if a method returns a value."}]},{"content":"To define a method of a class:","pos":[4906,4936]},{"pos":[5078,5214],"content":"A class can have several implementations, or <bpt id=\"p1\">*</bpt>overloads<ept id=\"p1\">*</ept>, of the same method that differ in the number of parameters or parameter types.","source":"A class can have several implementations, or *overloads*, of the same method that differ in the number of parameters or parameter types."},{"content":"To overload a method:","pos":[5216,5237]},{"content":"In most cases you declare a method within a class definition.","pos":[5445,5506]},{"content":"However, Visual Basic also supports <bpt id=\"p1\">*</bpt>extension methods<ept id=\"p1\">*</ept> that allow you to add methods to an existing class outside the actual definition of the class.","pos":[5507,5657],"source":" However, Visual Basic also supports *extension methods* that allow you to add methods to an existing class outside the actual definition of the class."},{"content":"For more information, see:","pos":[5659,5685]},{"pos":[5689,5784],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[5787,5872],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[5875,5951],"content":"<bpt id=\"p1\">[</bpt>Overloads<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/overloads.md)</ept>","source":"[Overloads](../../../visual-basic/language-reference/modifiers/overloads.md)"},{"pos":[5954,6064],"content":"<bpt id=\"p1\">[</bpt>Extension Methods<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>","source":"[Extension Methods](../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)"},{"pos":[6071,6083],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"content":"Constructors are class methods that are executed automatically when an object of a given type is created.","pos":[6085,6190]},{"content":"Constructors usually initialize the data members of the new object.","pos":[6191,6258]},{"content":"A constructor can run only once when a class is created.","pos":[6259,6315]},{"content":"Furthermore, the code in the constructor always runs before any other code in a class.","pos":[6316,6402]},{"content":"However, you can create multiple constructor overloads in the same way as for any other method.","pos":[6403,6498]},{"content":"To define a constructor for a class:","pos":[6500,6536]},{"pos":[6646,6866],"content":"For more information, see: <bpt id=\"p1\">[</bpt>Object Lifetime: How Objects Are Created and Destroyed<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept>.","source":"For more information, see: [Object Lifetime: How Objects Are Created and Destroyed](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)."},{"pos":[6873,6884],"content":"Destructors","linkify":"Destructors","nodes":[{"content":"Destructors","pos":[0,11]}]},{"content":"Destructors are used to destruct instances of classes.","pos":[6886,6940]},{"content":"In the .NET Framework, the garbage collector automatically manages the allocation and release of memory for the managed objects in your application.","pos":[6941,7089]},{"content":"However, you may still need destructors to clean up any unmanaged resources that your application creates.","pos":[7090,7196]},{"content":"There can be only one destructor for a class.","pos":[7197,7242]},{"pos":[7244,7401],"content":"For more information about destructors and garbage collection in the .NET Framework, see <bpt id=\"p1\">[</bpt>Garbage Collection<ept id=\"p1\">](../../../standard/garbage-collection/index.md)</ept>.","source":"For more information about destructors and garbage collection in the .NET Framework, see [Garbage Collection](../../../standard/garbage-collection/index.md)."},{"pos":[7408,7414],"content":"Events","linkify":"Events","nodes":[{"content":"Events","pos":[0,6]}]},{"content":"Events enable a class or object to notify other classes or objects when something of interest occurs.","pos":[7416,7517]},{"content":"The class that sends (or raises) the event is called the <bpt id=\"p1\">*</bpt>publisher<ept id=\"p1\">*</ept> and the classes that receive (or handle) the event are called <bpt id=\"p2\">*</bpt>subscribers<ept id=\"p2\">*</ept>.","pos":[7518,7663],"source":" The class that sends (or raises) the event is called the *publisher* and the classes that receive (or handle) the event are called *subscribers*."},{"content":"For more information about events, how they are raised and handled, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../standard/events/index.md)</ept>.","pos":[7664,7780],"source":" For more information about events, how they are raised and handled, see [Events](../../../standard/events/index.md)."},{"pos":[7784,7901],"content":"To declare events, use the <bpt id=\"p1\">[</bpt>Event Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/event-statement.md)</ept>.","source":"To declare events, use the [Event Statement](../../../visual-basic/language-reference/statements/event-statement.md)."},{"pos":[7905,8030],"content":"To raise events, use the <bpt id=\"p1\">[</bpt>RaiseEvent Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/raiseevent-statement.md)</ept>.","source":"To raise events, use the [RaiseEvent Statement](../../../visual-basic/language-reference/statements/raiseevent-statement.md)."},{"pos":[8034,8278],"content":"To specify event handlers using a declarative way, use the <bpt id=\"p1\">[</bpt>WithEvents<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/withevents.md)</ept> statement and the <bpt id=\"p2\">[</bpt>Handles<ept id=\"p2\">](../../../visual-basic/language-reference/statements/handles-clause.md)</ept> clause.","source":"To specify event handlers using a declarative way, use the [WithEvents](../../../visual-basic/language-reference/modifiers/withevents.md) statement and the [Handles](../../../visual-basic/language-reference/statements/handles-clause.md) clause."},{"pos":[8282,8707],"content":"To be able to dynamically add, remove, and change the event handler associated with an event, use the <bpt id=\"p1\">[</bpt>AddHandler Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept> and <bpt id=\"p2\">[</bpt>RemoveHandler Statement<ept id=\"p2\">](../../../visual-basic/language-reference/statements/removehandler-statement.md)</ept> together with the <bpt id=\"p3\">[</bpt>AddressOf Operator<ept id=\"p3\">](../../../visual-basic/language-reference/operators/addressof-operator.md)</ept>.","source":"To be able to dynamically add, remove, and change the event handler associated with an event, use the [AddHandler Statement](../../../visual-basic/language-reference/statements/addhandler-statement.md) and [RemoveHandler Statement](../../../visual-basic/language-reference/statements/removehandler-statement.md) together with the [AddressOf Operator](../../../visual-basic/language-reference/operators/addressof-operator.md)."},{"pos":[8714,8728],"content":"Nested classes","linkify":"Nested classes","nodes":[{"content":"Nested classes","pos":[0,14]}]},{"content":"A class defined within another class is called <bpt id=\"p1\">*</bpt>nested<ept id=\"p1\">*</ept>.","pos":[8730,8786],"source":"A class defined within another class is called *nested*."},{"content":"By default, the nested class is private.","pos":[8787,8827]},{"content":"To create an instance of the nested class, use the name of the container class followed by the dot and then followed by the name of the nested class:","pos":[8918,9067]},{"pos":[9148,9182],"content":"Access modifiers and access levels","linkify":"Access modifiers and access levels","nodes":[{"content":"Access modifiers and access levels","pos":[0,34]}]},{"pos":[9184,9302],"content":"All classes and class members can specify what access level they provide to other classes by using <bpt id=\"p1\">*</bpt>access modifiers<ept id=\"p1\">*</ept>.","source":"All classes and class members can specify what access level they provide to other classes by using *access modifiers*."},{"content":"The following access modifiers are available:","pos":[9304,9349]},{"content":"Visual Basic Modifier","pos":[9352,9373]},{"content":"Definition","pos":[9374,9384]},{"pos":[9434,9504],"content":"<bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept>","source":"[Public](../../../visual-basic/language-reference/modifiers/public.md)"},{"content":"The type or member can be accessed by any other code in the same assembly or another assembly that references it.","pos":[9505,9618]},{"pos":[9621,9693],"content":"<bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/private.md)</ept>","source":"[Private](../../../visual-basic/language-reference/modifiers/private.md)"},{"content":"The type or member can only be accessed by code in the same class.","pos":[9694,9760]},{"pos":[9763,9839],"content":"<bpt id=\"p1\">[</bpt>Protected<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/protected.md)</ept>","source":"[Protected](../../../visual-basic/language-reference/modifiers/protected.md)"},{"content":"The type or member can only be accessed by code in the same class or in a derived class.","pos":[9840,9928]},{"pos":[9931,10001],"content":"<bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>","source":"[Friend](../../../visual-basic/language-reference/modifiers/friend.md)"},{"content":"The type or member can be accessed by any code in the same assembly, but not from another assembly.","pos":[10002,10101]},{"content":"The type or member can be accessed by any code in the same assembly, or by any derived class in another assembly.","pos":[10123,10236]},{"pos":[10239,10391],"content":"For more information, see <bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","source":"For more information, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[10397,10418],"content":"Instantiating classes","linkify":"Instantiating classes","nodes":[{"content":"Instantiating classes","pos":[0,21]}]},{"content":"To create an object, you need to instantiate a class, or create a class instance.","pos":[10420,10501]},{"content":"After instantiating a class, you can assign values to the instance's properties and fields and invoke class methods.","pos":[10552,10668]},{"content":"To assign values to properties during the class instantiation process, use object initializers:","pos":[10796,10891]},{"content":"For more information, see:","pos":[10994,11020]},{"pos":[11024,11106],"content":"<bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/new-operator.md)</ept>","source":"[New Operator](../../../visual-basic/language-reference/operators/new-operator.md)"},{"pos":[11109,11285],"content":"<bpt id=\"p1\">[</bpt>Object Initializers: Named and Anonymous Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>","source":"[Object Initializers: Named and Anonymous Types](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)"},{"pos":[11291,11317],"content":"Shared classes and members","linkify":"Shared classes and members","nodes":[{"content":"Shared classes and members","pos":[0,26]}]},{"content":"A shared member of the class is a property, procedure, or field that is shared by all instances of a class.","pos":[11320,11427]},{"content":"To define a shared member:","pos":[11430,11456]},{"content":"To access the shared member, use the name of the class without creating an object of this class:","pos":[11557,11653]},{"content":"Shared modules in Visual Basic have shared members only and cannot be instantiated.","pos":[11700,11783]},{"content":"Shared members also cannot access non-shared properties, fields or methods","pos":[11784,11858]},{"content":"For more information, see:","pos":[11861,11887]},{"pos":[11891,11961],"content":"<bpt id=\"p1\">[</bpt>Shared<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shared.md)</ept>","source":"[Shared](../../../visual-basic/language-reference/modifiers/shared.md)"},{"pos":[11964,12055],"content":"<bpt id=\"p1\">[</bpt>Module Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/module-statement.md)</ept>","source":"[Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)"},{"pos":[12061,12076],"content":"Anonymous types","linkify":"Anonymous types","nodes":[{"content":"Anonymous types","pos":[0,15]}]},{"content":"Anonymous types enable you to create objects without writing a class definition for the data type.","pos":[12078,12176]},{"content":"Instead, the compiler generates a class for you.","pos":[12177,12225]},{"content":"The class has no usable name and contains the properties you specify in declaring the object.","pos":[12226,12319]},{"content":"To create an instance of an anonymous type:","pos":[12321,12364]},{"pos":[12517,12660],"content":"For more information, see: <bpt id=\"p1\">[</bpt>Anonymous Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.","source":"For more information, see: [Anonymous Types](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)."},{"pos":[12665,12676],"content":"Inheritance","linkify":"Inheritance","nodes":[{"content":"Inheritance","pos":[0,11]}]},{"content":"Inheritance enables you to create a new class that reuses, extends, and modifies the behavior that is defined in another class.","pos":[12678,12805]},{"content":"The class whose members are inherited is called the <bpt id=\"p1\">*</bpt>base class<ept id=\"p1\">*</ept>, and the class that inherits those members is called the <bpt id=\"p2\">*</bpt>derived class<ept id=\"p2\">*</ept>.","pos":[12806,12944],"source":" The class whose members are inherited is called the *base class*, and the class that inherits those members is called the *derived class*."},{"content":"However, all classes in Visual Basic implicitly inherit from the <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> class that supports .NET class hierarchy and provides low-level services to all classes.","pos":[12945,13119],"source":" However, all classes in Visual Basic implicitly inherit from the <xref:System.Object> class that supports .NET class hierarchy and provides low-level services to all classes."},{"pos":[13123,13249],"content":"[!NOTE]\nVisual Basic doesn't support multiple inheritance. That is, you can specify only one base class for a derived class.","leadings":["","> "],"nodes":[{"content":"Visual Basic doesn't support multiple inheritance. That is, you can specify only one base class for a derived class.","pos":[8,124],"nodes":[{"content":"Visual Basic doesn't support multiple inheritance.","pos":[0,50]},{"content":"That is, you can specify only one base class for a derived class.","pos":[51,116]}]}]},{"content":"To inherit from a base class:","pos":[13251,13280]},{"content":"By default all classes can be inherited.","pos":[13345,13385]},{"content":"However, you can specify whether a class must not be used as a base class, or create a class that can be used as a base class only.","pos":[13386,13517]},{"content":"To specify that a class cannot be used as a base class:","pos":[13519,13574]},{"content":"To specify that a class can be used as a base class only and cannot be instantiated:","pos":[13630,13714]},{"content":"For more information, see:","pos":[13765,13791]},{"pos":[13795,13890],"content":"<bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept>","source":"[Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md)"},{"pos":[13893,13979],"content":"<bpt id=\"p1\">[</bpt>NotInheritable<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/notinheritable.md)</ept>","source":"[NotInheritable](../../../visual-basic/language-reference/modifiers/notinheritable.md)"},{"pos":[13982,14062],"content":"<bpt id=\"p1\">[</bpt>MustInherit<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/mustinherit.md)</ept>","source":"[MustInherit](../../../visual-basic/language-reference/modifiers/mustinherit.md)"},{"pos":[14068,14086],"content":"Overriding members","linkify":"Overriding members","nodes":[{"content":"Overriding members","pos":[0,18]}]},{"content":"By default, a derived class inherits all members from its base class.","pos":[14088,14157]},{"content":"If you want to change the behavior of the inherited member, you need to override it.","pos":[14158,14242]},{"content":"That is, you can define a new implementation of the method, property or event in the derived class.","pos":[14243,14342]},{"content":"The following modifiers are used to control how properties and methods are overridden:","pos":[14344,14430]},{"content":"Visual Basic Modifier","pos":[14433,14454]},{"content":"Definition","pos":[14455,14465]},{"pos":[14515,14595],"content":"<bpt id=\"p1\">[</bpt>Overridable<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/overridable.md)</ept>","source":"[Overridable](../../../visual-basic/language-reference/modifiers/overridable.md)"},{"content":"Allows a class member to be overridden in a derived class.","pos":[14596,14654]},{"pos":[14657,14733],"content":"<bpt id=\"p1\">[</bpt>Overrides<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/overrides.md)</ept>","source":"[Overrides](../../../visual-basic/language-reference/modifiers/overrides.md)"},{"content":"Overrides a virtual (overridable) member defined in the base class.","pos":[14734,14801]},{"pos":[14804,14890],"content":"<bpt id=\"p1\">[</bpt>NotOverridable<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept>","source":"[NotOverridable](../../../visual-basic/language-reference/modifiers/notoverridable.md)"},{"content":"Prevents a member from being overridden in an inheriting class.","pos":[14891,14954]},{"pos":[14957,15039],"content":"<bpt id=\"p1\">[</bpt>MustOverride<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/mustoverride.md)</ept>","source":"[MustOverride](../../../visual-basic/language-reference/modifiers/mustoverride.md)"},{"content":"Requires that a class member to be overridden in the derived class.","pos":[15040,15107]},{"pos":[15110,15182],"content":"<bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>","source":"[Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)"},{"content":"Hides a member inherited from a base class","pos":[15183,15225]},{"pos":[15231,15241],"content":"Interfaces","linkify":"Interfaces","nodes":[{"content":"Interfaces","pos":[0,10]}]},{"content":"Interfaces, like classes, define a set of properties, methods, and events.","pos":[15243,15317]},{"content":"But unlike classes, interfaces do not provide implementation.","pos":[15318,15379]},{"content":"They are implemented by classes, and defined as separate entities from classes.","pos":[15380,15459]},{"content":"An interface represents a contract, in that a class that implements an interface must implement every aspect of that interface exactly as it is defined.","pos":[15460,15612]},{"content":"To define an interface:","pos":[15614,15637]},{"content":"To implement an interface in a class:","pos":[15720,15757]},{"content":"For more information, see:","pos":[15895,15921]},{"pos":[15925,16016],"content":"<bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/interfaces/index.md)</ept>","source":"[Interfaces](../../../visual-basic/programming-guide/language-features/interfaces/index.md)"},{"pos":[16019,16116],"content":"<bpt id=\"p1\">[</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept>","source":"[Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)"},{"pos":[16119,16218],"content":"<bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept>","source":"[Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md)"},{"pos":[16223,16231],"content":"Generics","linkify":"Generics","nodes":[{"content":"Generics","pos":[0,8]}]},{"content":"Classes, structures, interfaces and methods in .NET can include <bpt id=\"p1\">*</bpt>type parameters<ept id=\"p1\">*</ept> that define types of objects that they can store or use.","pos":[16233,16371],"source":"Classes, structures, interfaces and methods in .NET can include *type parameters* that define types of objects that they can store or use."},{"content":"The most common example of generics is a collection, where you can specify the type of objects to be stored in a collection.","pos":[16372,16496]},{"content":"To define a generic class:","pos":[16498,16524]},{"content":"To create an instance of a generic class:","pos":[16595,16636]},{"content":"For more information, see:","pos":[16735,16761]},{"pos":[16765,16812],"content":"<bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](../../../standard/generics/index.md)</ept>","source":"[Generics](../../../standard/generics/index.md)"},{"pos":[16815,16933],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[16938,16947],"content":"Delegates","linkify":"Delegates","nodes":[{"content":"Delegates","pos":[0,9]}]},{"content":"A <bpt id=\"p1\">*</bpt>delegate<ept id=\"p1\">*</ept> is a type that defines a method signature, and can provide a reference to any method with a compatible signature.","pos":[16950,17076],"source":"A *delegate* is a type that defines a method signature, and can provide a reference to any method with a compatible signature."},{"content":"You can invoke (or call) the method through the delegate.","pos":[17077,17134]},{"content":"Delegates are used to pass methods as arguments to other methods.","pos":[17135,17200]},{"pos":[17204,17405],"content":"[!NOTE]\nEvent handlers are nothing more than methods that are invoked through delegates. For more information about using delegates in event handling, see [Events](../../../standard/events/index.md).","leadings":["","> "],"nodes":[{"content":"Event handlers are nothing more than methods that are invoked through delegates. For more information about using delegates in event handling, see [Events](../../../standard/events/index.md).","pos":[8,199],"nodes":[{"content":"Event handlers are nothing more than methods that are invoked through delegates.","pos":[0,80]},{"content":"For more information about using delegates in event handling, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../standard/events/index.md)</ept>.","pos":[81,191],"source":" For more information about using delegates in event handling, see [Events](../../../standard/events/index.md)."}]}]},{"content":"To create a delegate:","pos":[17407,17428]},{"content":"To create a reference to a method that matches the signature specified by the delegate:","pos":[17490,17577]},{"content":"For more information, see:","pos":[17918,17944]},{"pos":[17948,18037],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept>","source":"[Delegates](../../../visual-basic/programming-guide/language-features/delegates/index.md)"},{"pos":[18040,18135],"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept>","source":"[Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)"},{"pos":[18138,18232],"content":"<bpt id=\"p1\">[</bpt>AddressOf Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/addressof-operator.md)</ept>","source":"[AddressOf Operator](../../../visual-basic/language-reference/operators/addressof-operator.md)"},{"pos":[18237,18245],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[18249,18331],"content":"<bpt id=\"p1\">[</bpt>Visual Basic Programming Guide<ept id=\"p1\">](../../../visual-basic/programming-guide/index.md)</ept>","source":"[Visual Basic Programming Guide](../../../visual-basic/programming-guide/index.md)"}]}