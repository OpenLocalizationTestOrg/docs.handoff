<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-write-text-to-a-file.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93d87dc98284fad6b8159f681f7d99ce460d60d6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\io\how-to-write-text-to-a-file.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdb91d1e76328812ac7119ab70c1ab5863a026c5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e48ddde33043ef93cd84cf1c160b981c58bb3a24</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Write text to a file</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Write text to a file</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic shows different ways to write text to a file for a .NET app.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following classes and methods are typically used to write text to a file:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> contains methods to write to a file synchronously (<ph id="ph2">&lt;xref:System.IO.StreamWriter.Write%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph>) or asynchronously (<ph id="ph4">&lt;xref:System.IO.StreamWriter.WriteAsync%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.IO.StreamWriter.WriteLineAsync%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.File&gt;</ph> provides static methods to write text to a file, such as <ph id="ph2">&lt;xref:System.IO.File.WriteAllLines%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.File.WriteAllText%2A&gt;</ph>, or to append text to a file, such as <ph id="ph4">&lt;xref:System.IO.File.AppendAllLines%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.File.AppendAllText%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.IO.File.AppendText%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Path&gt;</ph> is for strings that have file or directory path information.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It contains the <ph id="ph1">&lt;xref:System.IO.Path.Combine%2A&gt;</ph> method and, in .NET Core 2.1 and later, the <ph id="ph2">&lt;xref:System.IO.Path.Join%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.Path.TryJoin%2A&gt;</ph> methods, which allow concatenation of strings to build a file or directory path.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following examples show only the minimum amount of code needed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A real-world app usually provides more robust error checking and exception handling.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example: Synchronously write text with StreamWriter</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> class to synchronously write text to a new file one line at a time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> object is declared and instantiated in a <ph id="ph2">`using`</ph> statement, the <ph id="ph3">&lt;xref:System.IO.StreamWriter.Dispose%2A&gt;</ph> method is invoked, which automatically flushes and closes the stream.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example: Synchronously append text with StreamWriter</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> class to synchronously append text to the text file created in the first example.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example: Asynchronously write text with StreamWriter</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows how to asynchronously write text to a new file using the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To invoke the <ph id="ph1">&lt;xref:System.IO.StreamWriter.WriteAsync%2A&gt;</ph> method, the method call must be within an <ph id="ph2">`async`</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The C# example requires C# 7.1 or later, which adds support for the <ph id="ph1">`async`</ph> modifier on the program entry point.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example: Write and append text with the File class</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example shows how to write text to a new file and append new lines of text to the same file using the <ph id="ph1">&lt;xref:System.IO.File&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO.File.WriteAllText%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.File.AppendAllLines%2A&gt;</ph> methods open and close the file automatically.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the path you provide to the <ph id="ph1">&lt;xref:System.IO.File.WriteAllText%2A&gt;</ph> method already exists, the file is overwritten.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Enumerate directories and files<ept id="p1">](../../../docs/standard/io/how-to-enumerate-directories-and-files.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Read and write to a newly-created data file<ept id="p1">](../../../docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Open and append to a log file<ept id="p1">](../../../docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Read text from a file<ept id="p1">](../../../docs/standard/io/how-to-read-text-from-a-file.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>File and stream I/O<ept id="p1">](../../../docs/standard/io/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>