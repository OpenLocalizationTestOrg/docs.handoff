<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="delegate-class.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cf2b113fc9e2c6621f648af7ecb272a42b1f056</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\delegate-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">500b4f35fc189fe918cbd3c288d3deada88cc15e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49e1550f7bc240e199e06ade35ed26b04a1660c4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>System.Delegate and the <ph id="ph1">`delegate`</ph> keyword</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about the classes in the .NET Framework that support delegates and how those map to the 'delegate' keyword.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>System.Delegate and the <ph id="ph1">`delegate`</ph> keyword</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous<ept id="p1">](delegates-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article will cover the classes in the .NET framework that support delegates, and how those map to the <ph id="ph1">`delegate`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Defining Delegate Types</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Let's start with the 'delegate' keyword, because that's primarily what you will use as you work with delegates.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The code that the compiler generates when you use the <ph id="ph1">`delegate`</ph> keyword will map to method calls that invoke members of the <ph id="ph2">&lt;xref:System.Delegate&gt;</ph> and <ph id="ph3">&lt;xref:System.MulticastDelegate&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You define a delegate type using syntax that is similar to defining a method signature.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You just add the <ph id="ph1">`delegate`</ph> keyword to the definition.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Let's continue to use the List.Sort() method as our example.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The first step is to create a type for the comparison delegate:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The compiler generates a class, derived from <ph id="ph1">`System.Delegate`</ph> that matches the signature used (in this case, a method that returns an integer, and has two arguments).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type of that delegate is <ph id="ph1">`Comparison`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Comparison`</ph> delegate type is a generic type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For details on generics see <bpt id="p1">[</bpt>here<ept id="p1">](generics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Notice that the syntax may appear as though it is declaring a variable, but it is actually declaring a <bpt id="p1">*</bpt>type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can define delegate types inside classes, directly inside namespaces, or even in the global namespace.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Declaring delegate types (or other types) directly in the global namespace is not recommended.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The compiler also generates add and remove handlers for this new type so that clients of this class can add and remove methods from an instance's invocation list.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The compiler will enforce that the signature of the method being added or removed matches the signature used when declaring the method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Declaring instances of delegates</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>After defining the delegate, you can create an instance of that type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Like all variables in C#, you cannot declare delegate instances directly in a namespace, or in the global namespace.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The type of the variable is <ph id="ph1">`Comparison&lt;T&gt;`</ph>, the delegate type defined earlier.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The name of the variable is <ph id="ph1">`comparator`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>That code snippet above declared a member variable inside a class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also declare delegate variables that are local variables, or arguments to methods.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Invoking Delegates</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You invoke the methods that are in the invocation list of a delegate by calling that delegate.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Inside the <ph id="ph1">`Sort()`</ph> method, the code will call the comparison method to determine which order to place objects:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the line above, the code <bpt id="p1">*</bpt>invokes<ept id="p1">*</ept> the method attached to the delegate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You treat the variable as a method name, and invoke it using normal method call syntax.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>That line of code makes an unsafe assumption: There's no guarantee that a target has been added to the delegate.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If no targets have been attached, the line above would cause a <ph id="ph1">`NullReferenceException`</ph> to be thrown.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The idioms used to address this problem are more complicated than a simple null-check, and are covered later in this <bpt id="p1">[</bpt>series<ept id="p1">](delegates-patterns.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Assigning, Adding and removing Invocation Targets</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>That's how a delegate type is defined, and how delegate instances are declared and invoked.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Developers that want to use the <ph id="ph1">`List.Sort()`</ph> method need to define a method whose signature matches the delegate type definition, and assign it to the delegate used by the sort method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This assignment adds the method to the invocation list of that delegate object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Suppose you wanted to sort a list of strings by their length.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Your comparison function might be the following:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The method is declared as a private method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>That's fine.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You may not want this method to be part of your public interface.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It can still be used as the comparison method when attached to a delegate.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The calling code will have this method attached to the target list of the delegate object, and can access it through that delegate.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You create that relationship by passing that method to the <ph id="ph1">`List.Sort()`</ph> method:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Notice that the method name is used, without parentheses.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using the method as an argument tells the compiler to convert the method reference into a reference that can be used as a delegate invocation target, and attach that method as an invocation target.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You could also have been explicit by declaring a variable of type <ph id="ph1">`Comparison&lt;string&gt;`</ph> and doing an assignment:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In uses where the method being used as a delegate target is a small method, it's common to use <bpt id="p1">[</bpt>lambda expression<ept id="p1">](./programming-guide/statements-expressions-operators/lambda-expressions.md)</ept> syntax to perform the assignment:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Using lambda expressions for delegate targets is covered more in a <bpt id="p1">[</bpt>later section<ept id="p1">](delegates-patterns.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The Sort() example typically attaches a single target method to the delegate.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>However, delegate objects do support invocation lists that have multiple target methods attached to a delegate object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Delegate and MulticastDelegate classes</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The language support described above provides the features and support you'll typically need to work with delegates.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>These features are built on two classes in the .NET Core framework: <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> and <ph id="ph2">&lt;xref:System.MulticastDelegate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System.Delegate`</ph> class, and its single direct sub-class, <ph id="ph2">`System.MulticastDelegate`</ph>, provide the framework support for creating delegates, registering methods as delegate targets, and invoking all methods that are registered as a delegate target.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Interestingly, the <ph id="ph1">`System.Delegate`</ph> and <ph id="ph2">`System.MulticastDelegate`</ph> classes are not themselves delegate types.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>They do provide the basis for all specific delegate types.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>That same language design process mandated that you cannot declare a class that derives from <ph id="ph1">`Delegate`</ph> or <ph id="ph2">`MulticastDelegate`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The C# language rules prohibit it.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Instead, the C# compiler creates instances of a class derived from <ph id="ph1">`MulticastDelegate`</ph> when you use the C# language keyword to declare delegate types.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This design has its roots in the first release of C# and .NET.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>One goal for the design team was to ensure that the language enforced type safety when using delegates.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>That meant ensuring that delegates were invoked with the right type and number of arguments.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>And, that any return type was correctly indicated at compile time.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Delegates were part of the 1.0 .NET release, which was before generics.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The best way to enforce this type safety was for the compiler to create the concrete delegate classes that represented the method signature being used.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Even though you cannot create derived classes directly, you will use the methods defined on these classes.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Let's go through the most common methods that you will use when you work with delegates.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The first, most important fact to remember is that every delegate you work with is derived from <ph id="ph1">`MulticastDelegate`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A multicast delegate means that more than one method target can be invoked when invoking through a delegate.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The original design considered making a distinction between delegates where only one target method could be attached and invoked, and delegates where multiple target methods could be attached and invoked.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>That distinction proved to be less useful in practice than originally thought.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The two different classes were already created, and have been in the framework since its initial public release.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The methods that you will use the most with delegates are <ph id="ph1">`Invoke()`</ph> and <ph id="ph2">`BeginInvoke()`</ph><ph id="ph3"> / </ph><ph id="ph4">`EndInvoke()`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Invoke()`</ph> will invoke all the methods that have been attached to a particular delegate instance.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>As you saw above, you typically invoke delegates using the method call syntax on the delegate variable.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>As you'll see <bpt id="p1">[</bpt>later in this series<ept id="p1">](delegates-patterns.md)</ept>, there are patterns that work directly with these methods.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Now that you've seen the language syntax and the classes that support delegates, let's examine how strongly typed delegates are used, created and invoked.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Next<ept id="p1">](delegates-strongly-typed.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>