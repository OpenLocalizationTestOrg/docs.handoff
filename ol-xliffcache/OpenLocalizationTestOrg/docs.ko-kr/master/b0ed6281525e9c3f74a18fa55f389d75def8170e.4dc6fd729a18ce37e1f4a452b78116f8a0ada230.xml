{"content":"---\ntitle: \"Structure Statement | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Structure\"\n  - \"Structure\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"user-defined types, Structure statement\"\n  - \"compound data types\"\n  - \"Structure keyword\"\n  - \"Structure statement\"\n  - \"UDT (user-defined types)\"\n  - \"types [Visual Basic], user-defined\"\nms.assetid: 9bd1deea-2a89-4cdc-812c-6dcbb947c391\ncaps.latest.revision: 28\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Structure Statement\nDeclares the name of a structure and introduces the definition of the variables, properties, events, and procedures that the structure comprises.  \n  \n## Syntax  \n  \n```  \n[ <attributelist> ] [ accessmodifier ] [ Shadows ] [ Partial ] _  \nStructure name [ ( Of typelist ) ]  \n    [ Implements interfacenames ]  \n    [ datamemberdeclarations ]  \n    [ methodmemberdeclarations ]  \nEnd Structure  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`attributelist`|Optional. See [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md).|  \n|`accessmodifier`|Optional. Can be one of the following:<br /><br /> -   [Public](../../../visual-basic/language-reference/modifiers/public.md)<br />-   [Protected](../../../visual-basic/language-reference/modifiers/protected.md)<br />-   [Friend](../../../visual-basic/language-reference/modifiers/friend.md)<br />-   [Private](../../../visual-basic/language-reference/modifiers/private.md)<br />-   `Protected Friend`<br /><br /> See [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).|  \n|`Shadows`|Optional. See [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md).|  \n|`Partial`|Optional. Indicates a partial definition of the structure. See [Partial](../../../visual-basic/language-reference/modifiers/partial.md).|  \n|`name`|Required. Name of this structure. See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md).|  \n|`Of`|Optional. Specifies that this is a generic structure.|  \n|`typelist`|Required if you use the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword. List of type parameters for this structure. See [Type List](../../../visual-basic/language-reference/statements/type-list.md).|  \n|`Implements`|Optional. Indicates that this structure implements the members of one or more interfaces. See [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md).|  \n|`interfacenames`|Required if you use the `Implements` statement. The names of the interfaces this structure implements.|  \n|`datamemberdeclarations`|Required. Zero or more `Const`, `Dim`, `Enum`, or `Event` statements declaring *data members* of the structure.|  \n|`methodmemberdeclarations`|Optional. Zero or more declarations of `Function`, `Operator`, `Property`, or `Sub` procedures, which serve as *method members* of the structure.|  \n|`End Structure`|Required. Terminates the `Structure` definition.|  \n  \n## Remarks  \n The `Structure` statement defines a composite value type that you can customize. A *structure* is a generalization of the user-defined type (UDT) of previous versions of Visual Basic. For more information, see [Structures](../../../visual-basic/programming-guide/language-features/data-types/structures.md).  \n  \n Structures support many of the same features as classes. For example, structures can have properties and procedures, they can implement interfaces, and they can have parameterized constructors. However, there are significant differences between structures and classes in areas such as inheritance, declarations, and usage. Also, classes are reference types and structures are value types. For more information, see [Structures and Classes](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md).  \n  \n You can use `Structure` only at namespace or module level. This means the *declaration context* for a structure must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure or block. For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md).  \n  \n Structures default to [Friend](../../../visual-basic/language-reference/modifiers/friend.md) access. You can adjust their access levels with the access modifiers. For more information, see [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n## Rules  \n  \n-   **Nesting.** You can define one structure within another. The outer structure is called the *containing structure*, and the inner structure is called a *nested structure*. However, you cannot access a nested structure's members through the containing structure. Instead, you must declare a variable of the nested structure's data type.  \n  \n-   **Member Declaration.** You must declare every member of a structure. A structure member cannot be [Protected](../../../visual-basic/language-reference/modifiers/protected.md) or `Protected Friend` because nothing can inherit from a structure. The structure itself, however, can be `Protected` or `Protected Friend`.  \n  \n     You can declare zero or more nonshared variables or nonshared, noncustom events in a structure. You cannot have only constants, properties, and procedures, even if some of them are nonshared.  \n  \n-   **Initialization.** You cannot initialize the value of any nonshared data member of a structure as part of its declaration. You must either initialize such a data member by means of a parameterized constructor on the structure, or assign a value to the member after you have created an instance of the structure.  \n  \n-   **Inheritance.** A structure cannot inherit from any type other than <xref:System.ValueType>, from which all structures inherit. In particular, one structure cannot inherit from another.  \n  \n     You cannot use the [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md) in a structure definition, even to specify <xref:System.ValueType>.  \n  \n-   **Implementation.** If the structure uses the [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md), you must implement every member defined by every interface you specify in `interfacenames`.  \n  \n-   **Default Property.** A structure can specify at most one property as its *default property*, using the [Default](../../../visual-basic/language-reference/modifiers/default.md) modifier. For more information, see [Default](../../../visual-basic/language-reference/modifiers/default.md).  \n  \n## Behavior  \n  \n-   **Access Level.** Within a structure, you can declare each member with its own access level. All structure members default to [Public](../../../visual-basic/language-reference/modifiers/public.md) access. Note that if the structure itself has a more restricted access level, this automatically restricts access to its members, even if you adjust their access levels with the access modifiers.  \n  \n-   **Scope.** A structure is in scope throughout its containing namespace, class, structure, or module.  \n  \n     The scope of every structure member is the entire structure.  \n  \n-   **Lifetime.** A structure does not itself have a lifetime. Rather, each instance of that structure has a lifetime independent of all other instances.  \n  \n     The lifetime of an instance begins when it is created by a [New Operator](../../../visual-basic/language-reference/operators/new-operator.md) clause. It ends when the lifetime of the variable that holds it ends.  \n  \n     You cannot extend the lifetime of a structure instance. An approximation to static structure functionality is provided by a module. For more information, see [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md).  \n  \n     Structure members have lifetimes depending on how and where they are declared. For more information, see \"Lifetime\" in [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md).  \n  \n-   **Qualification.** Code outside a structure must qualify a member's name with the name of that structure.  \n  \n     If code inside a nested structure makes an unqualified reference to a programming element, Visual Basic searches for the element first in the nested structure, then in its containing structure, and so on out to the outermost containing element. For more information, see [References to Declared Elements](../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md).  \n  \n-   **Memory Consumption.** As with all composite data types, you cannot safely calculate the total memory consumption of a structure by adding together the nominal storage allocations of its members. Furthermore, you cannot safely assume that the order of storage in memory is the same as your order of declaration. If you need to control the storage layout of a structure, you can apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to the `Structure` statement.  \n  \n## Example  \n The following example uses the `Structure` statement to define a set of related data for an employee. It shows the use of `Public`, `Friend`, and `Private` members to reflect the sensitivity of the data items. It also shows procedure, property, and event members.  \n  \n [!code-vb[VbVbalrStatements#57](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/structure-statement_1.vb)]  \n  \n## See Also  \n [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)   \n [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)   \n [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)   \n [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)   \n [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md)   \n [Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md)   \n [Event Statement](../../../visual-basic/language-reference/statements/event-statement.md)   \n [Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)   \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)   \n [Structures and Classes](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)\n","nodes":[{"pos":[12,48],"content":"Structure Statement | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Structure Statement | Microsoft Docs","pos":[0,36]}]},{"pos":[773,792],"content":"Structure Statement","linkify":"Structure Statement","nodes":[{"content":"Structure Statement","pos":[0,19]}]},{"content":"Declares the name of a structure and introduces the definition of the variables, properties, events, and procedures that the structure comprises.","pos":[793,938]},{"pos":[947,953],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1201,1206],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1213,1217]},{"content":"Definition","pos":[1218,1228]},{"content":"Optional.","pos":[1261,1270]},{"content":"See <bpt id=\"p1\">[</bpt>Attribute List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>.","pos":[1271,1363],"source":" See [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md)."},{"content":"Optional.","pos":[1385,1394]},{"content":"Can be one of the following:","pos":[1395,1423]},{"content":"<ph id=\"ph1\"> -   </ph><bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept>","pos":[1435,1510],"source":" -   [Public](../../../visual-basic/language-reference/modifiers/public.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Protected<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/protected.md)</ept>","pos":[1516,1596],"source":"-   [Protected](../../../visual-basic/language-reference/modifiers/protected.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>","pos":[1602,1676],"source":"-   [Friend](../../../visual-basic/language-reference/modifiers/friend.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/private.md)</ept>","pos":[1682,1758],"source":"-   [Private](../../../visual-basic/language-reference/modifiers/private.md)"},{"content":"See <bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[1799,1929],"source":" See [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"content":"Optional.","pos":[1944,1953]},{"content":"See <bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>.","pos":[1954,2031],"source":" See [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)."},{"content":"Optional.","pos":[2046,2055]},{"content":"Indicates a partial definition of the structure.","pos":[2056,2104]},{"content":"See <bpt id=\"p1\">[</bpt>Partial<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/partial.md)</ept>.","pos":[2105,2182],"source":" See [Partial](../../../visual-basic/language-reference/modifiers/partial.md)."},{"content":"Required.","pos":[2194,2203]},{"content":"Name of this structure.","pos":[2204,2227]},{"content":"See <bpt id=\"p1\">[</bpt>Declared Element Names<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.","pos":[2228,2360],"source":" See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)."},{"content":"Optional.","pos":[2370,2379]},{"content":"Specifies that this is a generic structure.","pos":[2380,2423]},{"content":"Required if you use the <bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../../visual-basic/language-reference/statements/of-clause.md)</ept> keyword.","pos":[2439,2542],"source":"Required if you use the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword."},{"content":"List of type parameters for this structure.","pos":[2543,2586]},{"content":"See <bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/type-list.md)</ept>.","pos":[2587,2669],"source":" See [Type List](../../../visual-basic/language-reference/statements/type-list.md)."},{"content":"Optional.","pos":[2687,2696]},{"content":"Indicates that this structure implements the members of one or more interfaces.","pos":[2697,2776]},{"content":"See <bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept>.","pos":[2777,2881],"source":" See [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md)."},{"content":"Required if you use the <ph id=\"ph1\">`Implements`</ph> statement.","pos":[2903,2950],"source":"Required if you use the `Implements` statement."},{"content":"The names of the interfaces this structure implements.","pos":[2951,3005]},{"content":"Required.","pos":[3035,3044]},{"content":"Zero or more <ph id=\"ph1\">`Const`</ph>, <ph id=\"ph2\">`Dim`</ph>, <ph id=\"ph3\">`Enum`</ph>, or <ph id=\"ph4\">`Event`</ph> statements declaring <bpt id=\"p1\">*</bpt>data members<ept id=\"p1\">*</ept> of the structure.","pos":[3045,3146],"source":" Zero or more `Const`, `Dim`, `Enum`, or `Event` statements declaring *data members* of the structure."},{"content":"Optional.","pos":[3178,3187]},{"content":"Zero or more declarations of <ph id=\"ph1\">`Function`</ph>, <ph id=\"ph2\">`Operator`</ph>, <ph id=\"ph3\">`Property`</ph>, or <ph id=\"ph4\">`Sub`</ph> procedures, which serve as <bpt id=\"p1\">*</bpt>method members<ept id=\"p1\">*</ept> of the structure.","pos":[3188,3323],"source":" Zero or more declarations of `Function`, `Operator`, `Property`, or `Sub` procedures, which serve as *method members* of the structure."},{"content":"Required.","pos":[3344,3353]},{"content":"Terminates the <ph id=\"ph1\">`Structure`</ph> definition.","pos":[3354,3392],"source":" Terminates the `Structure` definition."},{"pos":[3402,3409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Structure`</ph> statement defines a composite value type that you can customize.","pos":[3413,3493],"source":"The `Structure` statement defines a composite value type that you can customize."},{"content":"A <bpt id=\"p1\">*</bpt>structure<ept id=\"p1\">*</ept> is a generalization of the user-defined type (UDT) of previous versions of Visual Basic.","pos":[3494,3596],"source":" A *structure* is a generalization of the user-defined type (UDT) of previous versions of Visual Basic."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept>.","pos":[3597,3720],"source":" For more information, see [Structures](../../../visual-basic/programming-guide/language-features/data-types/structures.md)."},{"content":"Structures support many of the same features as classes.","pos":[3727,3783]},{"content":"For example, structures can have properties and procedures, they can implement interfaces, and they can have parameterized constructors.","pos":[3784,3920]},{"content":"However, there are significant differences between structures and classes in areas such as inheritance, declarations, and usage.","pos":[3921,4049]},{"content":"Also, classes are reference types and structures are value types.","pos":[4050,4115]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Structures and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)</ept>.","pos":[4116,4263],"source":" For more information, see [Structures and Classes](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)."},{"content":"You can use <ph id=\"ph1\">`Structure`</ph> only at namespace or module level.","pos":[4270,4328],"source":"You can use `Structure` only at namespace or module level."},{"content":"This means the <bpt id=\"p1\">*</bpt>declaration context<ept id=\"p1\">*</ept> for a structure must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure or block.","pos":[4329,4491],"source":" This means the *declaration context* for a structure must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure or block."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Declaration Contexts and Default Access Levels<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.","pos":[4492,4670],"source":" For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)."},{"content":"Structures default to <bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept> access.","pos":[4677,4777],"source":"Structures default to [Friend](../../../visual-basic/language-reference/modifiers/friend.md) access."},{"content":"You can adjust their access levels with the access modifiers.","pos":[4778,4839]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[4840,4992],"source":" For more information, see [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[5001,5006],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Nesting.<ept id=\"p1\">**</ept>","pos":[5016,5028],"source":"**Nesting.**"},{"content":"You can define one structure within another.","pos":[5029,5073]},{"content":"The outer structure is called the <bpt id=\"p1\">*</bpt>containing structure<ept id=\"p1\">*</ept>, and the inner structure is called a <bpt id=\"p2\">*</bpt>nested structure<ept id=\"p2\">*</ept>.","pos":[5074,5187],"source":" The outer structure is called the *containing structure*, and the inner structure is called a *nested structure*."},{"content":"However, you cannot access a nested structure's members through the containing structure.","pos":[5188,5277]},{"content":"Instead, you must declare a variable of the nested structure's data type.","pos":[5278,5351]},{"content":"<bpt id=\"p1\">**</bpt>Member Declaration.<ept id=\"p1\">**</ept>","pos":[5361,5384],"source":"**Member Declaration.**"},{"content":"You must declare every member of a structure.","pos":[5385,5430]},{"content":"A structure member cannot be <bpt id=\"p1\">[</bpt>Protected<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/protected.md)</ept> or <ph id=\"ph1\">`Protected Friend`</ph> because nothing can inherit from a structure.","pos":[5431,5604],"source":" A structure member cannot be [Protected](../../../visual-basic/language-reference/modifiers/protected.md) or `Protected Friend` because nothing can inherit from a structure."},{"content":"The structure itself, however, can be <ph id=\"ph1\">`Protected`</ph> or <ph id=\"ph2\">`Protected Friend`</ph>.","pos":[5605,5677],"source":" The structure itself, however, can be `Protected` or `Protected Friend`."},{"content":"You can declare zero or more nonshared variables or nonshared, noncustom events in a structure.","pos":[5688,5783]},{"content":"You cannot have only constants, properties, and procedures, even if some of them are nonshared.","pos":[5784,5879]},{"content":"<bpt id=\"p1\">**</bpt>Initialization.<ept id=\"p1\">**</ept>","pos":[5889,5908],"source":"**Initialization.**"},{"content":"You cannot initialize the value of any nonshared data member of a structure as part of its declaration.","pos":[5909,6012]},{"content":"You must either initialize such a data member by means of a parameterized constructor on the structure, or assign a value to the member after you have created an instance of the structure.","pos":[6013,6201]},{"content":"<bpt id=\"p1\">**</bpt>Inheritance.<ept id=\"p1\">**</ept>","pos":[6211,6227],"source":"**Inheritance.**"},{"content":"A structure cannot inherit from any type other than <ph id=\"ph1\">&lt;xref:System.ValueType&gt;</ph>, from which all structures inherit.","pos":[6228,6339],"source":" A structure cannot inherit from any type other than <xref:System.ValueType>, from which all structures inherit."},{"content":"In particular, one structure cannot inherit from another.","pos":[6340,6397]},{"pos":[6408,6590],"content":"You cannot use the <bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept> in a structure definition, even to specify <ph id=\"ph1\">&lt;xref:System.ValueType&gt;</ph>.","source":"You cannot use the [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md) in a structure definition, even to specify <xref:System.ValueType>."},{"content":"<bpt id=\"p1\">**</bpt>Implementation.<ept id=\"p1\">**</ept>","pos":[6600,6619],"source":"**Implementation.**"},{"content":"If the structure uses the <bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept>, you must implement every member defined by every interface you specify in <ph id=\"ph1\">`interfacenames`</ph>.","pos":[6620,6838],"source":" If the structure uses the [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md), you must implement every member defined by every interface you specify in `interfacenames`."},{"content":"<bpt id=\"p1\">**</bpt>Default Property.<ept id=\"p1\">**</ept>","pos":[6848,6869],"source":"**Default Property.**"},{"content":"A structure can specify at most one property as its <bpt id=\"p1\">*</bpt>default property<ept id=\"p1\">*</ept>, using the <bpt id=\"p2\">[</bpt>Default<ept id=\"p2\">](../../../visual-basic/language-reference/modifiers/default.md)</ept> modifier.","pos":[6870,7034],"source":" A structure can specify at most one property as its *default property*, using the [Default](../../../visual-basic/language-reference/modifiers/default.md) modifier."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Default<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/default.md)</ept>.","pos":[7035,7134],"source":" For more information, see [Default](../../../visual-basic/language-reference/modifiers/default.md)."},{"pos":[7143,7151],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>Access Level.<ept id=\"p1\">**</ept>","pos":[7161,7178],"source":"**Access Level.**"},{"content":"Within a structure, you can declare each member with its own access level.","pos":[7179,7253]},{"content":"All structure members default to <bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept> access.","pos":[7254,7365],"source":" All structure members default to [Public](../../../visual-basic/language-reference/modifiers/public.md) access."},{"content":"Note that if the structure itself has a more restricted access level, this automatically restricts access to its members, even if you adjust their access levels with the access modifiers.","pos":[7366,7553]},{"content":"<bpt id=\"p1\">**</bpt>Scope.<ept id=\"p1\">**</ept>","pos":[7563,7573],"source":"**Scope.**"},{"content":"A structure is in scope throughout its containing namespace, class, structure, or module.","pos":[7574,7663]},{"content":"The scope of every structure member is the entire structure.","pos":[7674,7734]},{"content":"<bpt id=\"p1\">**</bpt>Lifetime.<ept id=\"p1\">**</ept>","pos":[7744,7757],"source":"**Lifetime.**"},{"content":"A structure does not itself have a lifetime.","pos":[7758,7802]},{"content":"Rather, each instance of that structure has a lifetime independent of all other instances.","pos":[7803,7893]},{"content":"The lifetime of an instance begins when it is created by a <bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> clause.","pos":[7904,8053],"source":"The lifetime of an instance begins when it is created by a [New Operator](../../../visual-basic/language-reference/operators/new-operator.md) clause."},{"content":"It ends when the lifetime of the variable that holds it ends.","pos":[8054,8115]},{"content":"You cannot extend the lifetime of a structure instance.","pos":[8126,8181]},{"content":"An approximation to static structure functionality is provided by a module.","pos":[8182,8257]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Module Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/module-statement.md)</ept>.","pos":[8258,8376],"source":" For more information, see [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)."},{"content":"Structure members have lifetimes depending on how and where they are declared.","pos":[8387,8465]},{"content":"For more information, see \"Lifetime\" in <bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept>.","pos":[8466,8596],"source":" For more information, see \"Lifetime\" in [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)."},{"content":"<bpt id=\"p1\">**</bpt>Qualification.<ept id=\"p1\">**</ept>","pos":[8606,8624],"source":"**Qualification.**"},{"content":"Code outside a structure must qualify a member's name with the name of that structure.","pos":[8625,8711]},{"content":"If code inside a nested structure makes an unqualified reference to a programming element, Visual Basic searches for the element first in the nested structure, then in its containing structure, and so on out to the outermost containing element.","pos":[8722,8966]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>References to Declared Elements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept>.","pos":[8967,9139],"source":" For more information, see [References to Declared Elements](../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)."},{"content":"<bpt id=\"p1\">**</bpt>Memory Consumption.<ept id=\"p1\">**</ept>","pos":[9149,9172],"source":"**Memory Consumption.**"},{"content":"As with all composite data types, you cannot safely calculate the total memory consumption of a structure by adding together the nominal storage allocations of its members.","pos":[9173,9345]},{"content":"Furthermore, you cannot safely assume that the order of storage in memory is the same as your order of declaration.","pos":[9346,9461]},{"content":"If you need to control the storage layout of a structure, you can apply the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute to the <ph id=\"ph2\">`Structure`</ph> statement.","pos":[9462,9637],"source":" If you need to control the storage layout of a structure, you can apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to the `Structure` statement."},{"pos":[9646,9653],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`Structure`</ph> statement to define a set of related data for an employee.","pos":[9657,9758],"source":"The following example uses the `Structure` statement to define a set of related data for an employee."},{"content":"It shows the use of <ph id=\"ph1\">`Public`</ph>, <ph id=\"ph2\">`Friend`</ph>, and <ph id=\"ph3\">`Private`</ph> members to reflect the sensitivity of the data items.","pos":[9759,9866],"source":" It shows the use of `Public`, `Friend`, and `Private` members to reflect the sensitivity of the data items."},{"content":"It also shows procedure, property, and event members.","pos":[9867,9920]},{"pos":[9927,10065],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#57<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/structure-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#57](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/structure-statement_1.vb)]"},{"pos":[10074,10082],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10086,10176],"source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10179,10278],"source":" [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Module Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/module-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10281,10374],"source":" [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10377,10464],"source":" [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Const Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/const-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10467,10558],"source":" [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Enum Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/enum-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10561,10650],"source":" [Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Event Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/event-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10653,10744],"source":" [Event Statement](../../../visual-basic/language-reference/statements/event-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/operator-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10747,10844],"source":" [Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10847,10944],"source":" [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Structures and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)</ept>","pos":[10947,11068],"source":" [Structures and Classes](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)"}]}