<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc85fd4fb30278dc39c75c88d5fd23c1f1633366</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\async\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49dd1856c27148172600b21995cbdc16641dabea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65886589e796203738c80070c0cc692daf0fde49</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Asynchronous programming in C#</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>An overview of the C# language support for asynchronous programming using async, await, Task, and Task<ph id="ph1">&lt;T&gt;</ph></source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Task asynchronous programming model in C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Task asynchronous programming model (TAP) provides an abstraction over asynchronous code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You write code as a sequence of statements, just like always.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can read that code as though each statement completes before the next begins.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The compiler performs a number of transformations because some of those statements may start work and return a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> that represents the ongoing work.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>That's the goal of this syntax: enable code that reads like a sequence of statements, but executes in a much more complicated order based on external resource allocation and when tasks complete.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It's analogous to how people give instructions for processes that include asynchronous tasks.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Throughout this article, you'll use an example of instructions for making a breakfast to see how the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords make it easier to reason about code that includes a series of asynchronous instructions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You'd write the instructions something like the following list to explain how to make a breakfast:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Pour a cup of coffee.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Heat up a pan, then fry two eggs.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Fry three slices of bacon.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Toast two pieces of bread.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Add butter and jam to the toast.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Pour a glass of orange juice.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you have experience cooking, you'd execute those instructions <bpt id="p1">**</bpt>asynchronously<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>you'd start warming the pan for eggs, then start the bacon.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You'd put the bread in the toaster, then start the eggs.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>At each step of the process, you'd start a task, then turn your attention to tasks that are ready for your attention.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Cooking breakfast is a good example of asynchronous work that isn't parallel.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>One person (or thread) can handle all these tasks.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Continuing the breakfast analogy, one person can make breakfast asynchronously by starting the next task before the first completes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The cooking progresses whether or not someone is watching it.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As soon as you start warming the pan for the eggs, you can begin frying the bacon.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Once the bacon starts, you can put the bread into the toaster.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For a parallel algorithm, you'd need multiple cooks (or threads).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>One would make the eggs, one the bacon, and so on.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Each one would be focused on just that one task.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Each cook (or thread) would be blocked synchronously waiting for bacon to be ready to flip, or the toast to pop.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Now, consider those same instructions written as C# statements:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Computers don't interpret those instructions the same way people do.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The computer will block on each statement until the work is complete before moving on to the next statement.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>That creates an unsatisfying breakfast.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The later tasks wouldn't be started until the earlier tasks had completed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It would take much longer to create the breakfast, and some items would have gotten cold before being served.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you want the computer to execute the above instructions asynchronously, you must write asynchronous code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>These concerns are important for the programs you write today.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When you write client programs, you want the UI to be responsive to user input.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Your application shouldn't make a phone appear frozen while it's downloading data from the web.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When you write server programs, you don't want threads blocked.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Those threads could be serving other requests.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Using synchronous code when asynchronous alternatives exist hurts your ability to scale out less expensively.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You pay for those blocked threads.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Successful modern applications require asynchronous code.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Without language support, writing asynchronous code required callbacks, completion events, or other means that obscured the original intent of the code.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The advantage of the synchronous code is that it's easy to understand.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The step-by-step actions make it easy to scan and understand.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Traditional asynchronous models forced you to focus on the asynchronous nature of the code, not on the fundamental actions of the code.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Don't block, await instead</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The preceding code demonstrates a bad practice: constructing synchronous code to perform asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As written, this code blocks the thread executing it from doing any other work.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It won't be interrupted while any of the tasks are in progress.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It would be as though you stared at the toaster after putting the bread in.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You'd ignore anyone talking to you until the toast popped.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Let's start by updating this code so that the thread doesn't block while tasks are running.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`await`</ph> keyword provides a non-blocking way to start a task, then continue execution when that task completes.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A simple asynchronous version of the make a breakfast code would look like the following snippet:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This code doesn't block while the eggs or the bacon are cooking.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This code won't start any other tasks though.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You'd still put the toast in the toaster and stare at it until it pops.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>But at least, you'd respond to anyone that wanted your attention.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In a restaurant where multiple orders are placed, the cook could start another breakfast while the first is cooking.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Now, the thread working on the breakfast isn't blocked while awaiting any started task that hasn't yet finished.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For some applications, this change is all that's needed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A GUI application still responds to the user with just this change.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, for this scenario, you want more.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You don't want each of the component tasks to be executed sequentially.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It's better to start each of the component tasks before awaiting the previous task's completion.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Start tasks concurrently</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In many scenarios, you want to start several independent tasks immediately.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Then, as each task finishes, you can continue other work that's ready.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In the breakfast analogy, that's how you get breakfast done more quickly.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You also get everything done close to the same time.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You'll get a hot breakfast.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task?displayProperty=nameWithType&gt;</ph> and related types are classes you can use to reason about tasks that are in progress.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>That enables you to write code that more closely resembles the way you'd actually create breakfast.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You'd start cooking the eggs, bacon, and toast at the same time.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>As each requires action, you'd turn your attention to that task, take care of the next action, then await for something else that requires your attention.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You start a task and hold on to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object that represents the work.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You'll <ph id="ph1">`await`</ph> each task before working with its result.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Let's make these changes to the breakfast code.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The first step is to store the tasks for operations when they start, rather than awaiting them:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Next, you can move the <ph id="ph1">`await`</ph> statements for the bacon and eggs to the end of the method, before serving breakfast:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The preceding code works better.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You start all the asynchronous tasks at once.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You await each task only when you need the results.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The preceding code may be similar to code in a web application that makes requests of different microservices, then combines the results into a single page.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You'll make all the requests immediately, then <ph id="ph1">`await`</ph> all those tasks and compose the web page.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Composition with tasks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You have everything ready for breakfast at the same time except the toast.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Making the toast is the composition of an asynchronous operation (toasting the bread), and synchronous operations (adding the butter and the jam).</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Updating this code illustrates an important concept:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The composition of an asynchronous operation followed by synchronous work is an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Stated another way, if any portion of an operation is asynchronous, the entire operation is asynchronous.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The preceding code showed you that you can use <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects to hold running tasks.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You <ph id="ph1">`await`</ph> each task before using its result.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The next step is to create methods that represent the combination of other work.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Before serving breakfast, you want to await the task that represents toasting the bread before adding butter and jam.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can represent that work with the following code:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The preceding method has the <ph id="ph1">`async`</ph> modifier in its signature.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>That signals to the compiler that this method contains an <ph id="ph1">`await`</ph> statement; it contains asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This method represents the task that toasts the bread, then adds butter and jam.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> that represents the composition of those three operations.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The main block of code now becomes:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The previous change illustrated an important technique for working with asynchronous code.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You compose tasks by separating the operations into a new method that returns a task.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You can choose when to await that task.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can start other tasks concurrently.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Await tasks efficiently</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The series of <ph id="ph1">`await`</ph> statements at the end of the preceding code can be improved by using methods of the <ph id="ph2">`Task`</ph> class.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>One of those APIs is <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph>, which returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> that completes when all the tasks in its argument list have completed, as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Another option is to use <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph>, which returns a <ph id="ph2">`Task&lt;Task&gt;`</ph> that completes when any of its arguments completes.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can await the returned task, knowing that it has already finished.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following code shows how you could use <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph> to await the first task to finish and then process its result.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>After processing the result from the completed task, you remove that completed task from the list of tasks passed to <ph id="ph1">`WhenAny`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>After all those changes, the final version of <ph id="ph1">`Main`</ph> looks like the following code:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This final code is asynchronous.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>It more accurately reflects how a person would cook a breakfast.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Compare the preceding code with the first code sample in this article.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The core actions are still clear from reading the code.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You can read this code the same way you'd read those instructions for making a breakfast at the beginning of this article.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The language features for <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> provide the translation every person makes to follow those written instructions: start tasks as you can and don't block waiting for tasks to complete.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>