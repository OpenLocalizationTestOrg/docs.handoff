{"content":"---\ntitle: \"ICorProfilerCallback::ObjectsAllocatedByClass Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerCallback.ObjectsAllocatedByClass\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback::ObjectsAllocatedByClass\"\nhelpviewer_keywords: \n  - \"ObjectsAllocatedByClass method [.NET Framework profiling]\"\n  - \"ICorProfilerCallback::ObjectsAllocatedByClass method [.NET Framework profiling]\"\nms.assetid: 91d688f3-a80e-419d-9755-ff94bc04188a\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# ICorProfilerCallback::ObjectsAllocatedByClass Method\nNotifies the profiler about the number of instances of each specified class that have been created since the most recent garbage collection.  \n  \n## Syntax  \n  \n```  \nHRESULT ObjectsAllocatedByClass(  \n    [in] ULONG   cClassCount,  \n    [in, size_is(cClassCount)] ClassID classIds[] ,  \n    [in, size_is(cClassCount)] ULONG   cObjects[] );  \n```  \n  \n## Parameters  \n `cClassCount`  \n [in] The size of the `classIds` and `cObjects` arrays.  \n  \n `classIds`  \n [in] An array of class IDs, where each ID specifies a class with one or more instances.  \n  \n `cObjects`  \n [in] An array of integers, where each integer specifies the number of instances for the corresponding class in the `classIds` array.  \n  \n## Remarks  \n The `classIds` and `cObjects` arrays are parallel arrays. For example, `classIds[i]` and `cObjects[i]` reference the same class. If no instance of a class has been created since the previous garbage collection, the class is omitted. The `ObjectsAllocatedByClass` callback will not report objects allocated in the large object heap.  \n  \n The numbers reported by `ObjectsAllocatedByClass` are only estimates. For exact counts, use [ICorProfilerCallback::ObjectAllocated](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectallocated-method.md).  \n  \n The `classIds` array may contain one or more null entries if the corresponding `cObjects` array has types that are unloading.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See also\n\n- [ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)\n","nodes":[{"pos":[4,554],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerCallback::ObjectsAllocatedByClass Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerCallback.ObjectsAllocatedByClass\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback::ObjectsAllocatedByClass\"\nhelpviewer_keywords: \n  - \"ObjectsAllocatedByClass method [.NET Framework profiling]\"\n  - \"ICorProfilerCallback::ObjectsAllocatedByClass method [.NET Framework profiling]\"\nms.assetid: 91d688f3-a80e-419d-9755-ff94bc04188a\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"ICorProfilerCallback::ObjectsAllocatedByClass Method","nodes":[{"pos":[0,52],"content":"ICorProfilerCallback::ObjectsAllocatedByClass Method","nodes":[{"content":"ICorProfilerCallback::ObjectsAllocatedByClass Method","pos":[0,52]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[561,613],"content":"ICorProfilerCallback::ObjectsAllocatedByClass Method","linkify":"ICorProfilerCallback::ObjectsAllocatedByClass Method","nodes":[{"content":"ICorProfilerCallback::ObjectsAllocatedByClass Method","pos":[0,52]}]},{"content":"Notifies the profiler about the number of instances of each specified class that have been created since the most recent garbage collection.","pos":[614,754]},{"pos":[763,769],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[969,979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The size of the <ph id=\"ph1\">`classIds`</ph> and <ph id=\"ph2\">`cObjects`</ph> arrays.","pos":[1000,1054],"source":"[in] The size of the `classIds` and `cObjects` arrays."},{"content":"[in] An array of class IDs, where each ID specifies a class with one or more instances.","pos":[1075,1162]},{"content":"[in] An array of integers, where each integer specifies the number of instances for the corresponding class in the <ph id=\"ph1\">`classIds`</ph> array.","pos":[1183,1315],"source":"[in] An array of integers, where each integer specifies the number of instances for the corresponding class in the `classIds` array."},{"pos":[1324,1331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`classIds`</ph> and <ph id=\"ph2\">`cObjects`</ph> arrays are parallel arrays.","pos":[1335,1392],"source":"The `classIds` and `cObjects` arrays are parallel arrays."},{"content":"For example, <ph id=\"ph1\">`classIds[i]`</ph> and <ph id=\"ph2\">`cObjects[i]`</ph> reference the same class.","pos":[1393,1463],"source":" For example, `classIds[i]` and `cObjects[i]` reference the same class."},{"content":"If no instance of a class has been created since the previous garbage collection, the class is omitted.","pos":[1464,1567]},{"content":"The <ph id=\"ph1\">`ObjectsAllocatedByClass`</ph> callback will not report objects allocated in the large object heap.","pos":[1568,1666],"source":" The `ObjectsAllocatedByClass` callback will not report objects allocated in the large object heap."},{"content":"The numbers reported by <ph id=\"ph1\">`ObjectsAllocatedByClass`</ph> are only estimates.","pos":[1673,1742],"source":"The numbers reported by `ObjectsAllocatedByClass` are only estimates."},{"content":"For exact counts, use <bpt id=\"p1\">[</bpt>ICorProfilerCallback::ObjectAllocated<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectallocated-method.md)</ept>.","pos":[1743,1904],"source":" For exact counts, use [ICorProfilerCallback::ObjectAllocated](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectallocated-method.md)."},{"pos":[1911,2036],"content":"The <ph id=\"ph1\">`classIds`</ph> array may contain one or more null entries if the corresponding <ph id=\"ph2\">`cObjects`</ph> array has types that are unloading.","source":"The `classIds` array may contain one or more null entries if the corresponding `cObjects` array has types that are unloading."},{"pos":[2045,2057],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2061,2165],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2172,2206],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[2213,2238],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[2245,2353],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[2362,2370],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2374,2492],"content":"<bpt id=\"p1\">[</bpt>ICorProfilerCallback Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept>","source":"[ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)"}]}