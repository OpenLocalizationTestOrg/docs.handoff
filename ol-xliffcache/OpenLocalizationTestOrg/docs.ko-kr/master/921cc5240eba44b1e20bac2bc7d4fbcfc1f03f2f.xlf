<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-unwrap-a-nested-task.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">921cc5240eba44b1e20bac2bc7d4fbcfc1f03f2f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\how-to-unwrap-a-nested-task.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c230c08c3c5f31875f7b47b31c145586cd9350c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f54278e7f7e03f4fa9109d34be380966336454b6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Unwrap a Nested Task | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Unwrap a Nested Task</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can return a task from a method, and then wait on or continue from that task, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the previous example, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property is of type <ph id="ph2">`string`</ph> (<ph id="ph3">`String`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, in some scenarios, you might want to create a task within another task, and then return the nested task.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`TResult`</ph> of the enclosing task is itself a task.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the following example, the Result property is a <ph id="ph1">`Task&lt;Task&lt;string&gt;&gt;`</ph> in C# or <ph id="ph2">`Task(Of Task(Of String))`</ph> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Although it is possible to write code to unwrap the outer task and retrieve the original task and its <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property, such code is not easy to write because you must handle exceptions and also cancellation requests.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this situation, we recommend that you use one of the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A&gt;</ph> extension methods, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A&gt;</ph> methods can be used to transform any <ph id="ph2">`Task&lt;Task&gt;`</ph> or <ph id="ph3">`Task&lt;Task&lt;TResult&gt;&gt;`</ph> (<ph id="ph4">`Task(Of Task)`</ph> or <ph id="ph5">`Task(Of Task(Of TResult))`</ph> in Visual Basic) to a <ph id="ph6">`Task`</ph> or <ph id="ph7">`Task&lt;TResult&gt;`</ph> (<ph id="ph8">`Task(Of TResult)`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The new task fully represents the inner nested task, and includes cancellation state and all exceptions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskExtensions.Unwrap%2A&gt;</ph> extension methods.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskExtensions?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task-based Asynchronous Programming<ept id="p1">](../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>