<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="composing-streams.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a53768a31c7df06ee5a0e9d974dda51c391d377</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\io\composing-streams.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbf0dbc6710807959c15a570b4ec8c19472ee49b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a47197635d2830503eb9a4c0b8a22bb9fd49190</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Composing Streams | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Composing Streams</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A backing store is a storage medium, such as a disk or memory.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each different backing store implements its own stream as an implementation of the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each stream type reads and writes bytes from and to its given backing store.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Streams that connect to backing stores are called base streams.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Base streams have constructors that have the parameters necessary to connect the stream to the backing store.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> has constructors that specify a path parameter, which specifies how the file will be shared by processes, and so on.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The design of the <ph id="ph1">&lt;xref:System.IO&gt;</ph> classes provides simplified stream composing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Base streams can be attached to one or more pass-through streams that provide the functionality you want.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A reader or writer can be attached to the end of the chain so that the preferred types can be read or written easily.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code example creates a <bpt id="p1">**</bpt>FileStream<ept id="p1">**</ept> around the existing <ph id="ph1">`MyFile.txt`</ph> in order to buffer <ph id="ph2">`MyFile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(Note that <bpt id="p1">**</bpt>FileStreams<ept id="p1">**</ept> are buffered by default.) Next, a <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> is created to read characters from the <bpt id="p2">**</bpt>FileStream<ept id="p2">**</ept>, which is passed to the <bpt id="p3">**</bpt>StreamReader<ept id="p3">**</ept> as its constructor argument.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> reads until <ph id="ph2">&lt;xref:System.IO.StreamReader.Peek%2A&gt;</ph> finds no more characters.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following code example creates a <bpt id="p1">**</bpt>FileStream<ept id="p1">**</ept> around the existing <ph id="ph1">`MyFile.txt`</ph> in order to buffer <ph id="ph2">`MyFile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(Note that <bpt id="p1">**</bpt>FileStreams<ept id="p1">**</ept> are buffered by default.) Next, a <bpt id="p2">**</bpt>BinaryReader<ept id="p2">**</ept> is created to read bytes from the <bpt id="p3">**</bpt>FileStream<ept id="p3">**</ept>, which is passed to the <bpt id="p4">**</bpt>BinaryReader<ept id="p4">**</ept> as its constructor argument.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadByte%2A&gt;</ph> reads until <ph id="ph2">&lt;xref:System.IO.BinaryReader.PeekChar%2A&gt;</ph> finds no more bytes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>