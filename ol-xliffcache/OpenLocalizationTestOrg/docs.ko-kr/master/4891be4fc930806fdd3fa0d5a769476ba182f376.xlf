<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="accessing-strongly-typed-xml-data-using-xpathnavigator.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4891be4fc930806fdd3fa0d5a769476ba182f376</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\accessing-strongly-typed-xml-data-using-xpathnavigator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">857d8f9b67f6ae724a237aebc31d0f10273dc952</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa17f24cc7ccf369091553d3bdb38c6c87781096</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Accessing Strongly Typed XML Data Using XPathNavigator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessing Strongly Typed XML Data Using XPathNavigator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>As an instance of the XPath 2.0 data model, the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class can contain strongly-typed data that maps to common language runtime (CLR) types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>According to the XPath 2.0 data model, only elements and attributes can contain strongly-typed data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class provides mechanisms for accessing data within an <ph id="ph2">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph> object as strongly-typed data as well as mechanisms for converting from one data type to another.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type Information Exposed by XPathNavigator</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>XML 1.0 data is technically without type, unless processed with a DTD, XML schema definition language (XSD) schema, or other mechanism.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are a number of categories of type information that can be associated with an XML element or attribute.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Simple CLR Types: None of the XML Schema languages support Common Language Runtime (CLR) types directly.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because it is useful to be able to view simple element and attribute content as the most appropriate CLR type, all simple content can be typed as <ph id="ph1">&lt;xref:System.String&gt;</ph> in the absence of schema information with any added schema information potentially refining this content to a more appropriate type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can find the best matching CLR type of simple element and attribute content by using the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.ValueType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about the mapping from schema built-in types to CLR types, see <bpt id="p1">[</bpt>Type Support in the System.Xml Classes<ept id="p1">](../../../../docs/standard/data/xml/type-support-in-the-system-xml-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Lists of Simple (CLR) Types: An element or attribute with simple content can contain a list of values separated by white space.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The values are specified by an XML Schema to be a "list type."</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the absence of an XML Schema, such simple content would be treated as a single text node.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When an XML Schema is available, this simple content can be exposed as a series of atomic values each having a simple type that maps to a collection of CLR objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about the mapping from schema built-in types to CLR types, see <bpt id="p1">[</bpt>Type Support in the System.Xml Classes<ept id="p1">](../../../../docs/standard/data/xml/type-support-in-the-system-xml-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Typed Value: A schema-validated attribute or element with a simple type has a typed value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This value is a primitive type such as a numeric, string, or date type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>All the built-in simple types in XSD can be mapped to CLR types that provide access to the value of a node as a more appropriate type instead of just as a <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An element with attributes or element children is considered to be a complex type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The typed value of a complex type with simple content (only text nodes as children) is the same as that of the simple type of its content.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The typed value of a complex type with complex content (one or more child elements) is the string value of the concatenation of all its child text nodes returned as a <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about the mapping from schema built-in types to CLR types, see <bpt id="p1">[</bpt>Type Support in the System.Xml Classes<ept id="p1">](../../../../docs/standard/data/xml/type-support-in-the-system-xml-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Schema-Language Specific Type Name: In most cases, the CLR types, which are set as a side-effect of applying an external schema, are used to provide access to the value of a node.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, there may be situations where you may want to examine the type associated with a particular schema applied to an XML document.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, you may wish to search through an XML document, extracting all elements that are determined to have content of type "PurchaseOrder" according to an attached schema.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Such type information can be set only as a result of schema validation and this information is accessed through the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.XmlType%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see The Post Schema Validation Infoset (PSVI) section below.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Schema-Language Specific Type Reflection: In other cases, you may want to obtain further details of the schema-specific type applied to an XML document.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, when reading an XML file, you may want to extract the <ph id="ph1">`maxOccurs`</ph> attribute for each valid node in the XML document in order to perform some custom calculation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Because this information is set only through schema validation, it is accessed through the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see The Post Schema Validation Infoset (PSVI) section below.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>XPathNavigator Typed Accessors</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following table shows the various properties and methods of the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class that can be used to access the type information about a node.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This contains the XML schema type information for the node if it is valid.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This contains the Post Schema Validation Infoset of the node that is added after validation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This includes the XML schema type information, as well as validity information.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The CLR type of the typed value of the node.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The content of the node as one or more CLR values whose type is the closest match to the XML schema type of the node.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> value of the current node cast to a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value, according to the XPath 2.0 casting rules for <ph id="ph3">`xs:boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> value of the current node cast to a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value, according to the XPath 2.0 casting rules for <ph id="ph3">`xs:datetime`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> value of the current node cast to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value, according to the XPath 2.0 casting rules for <ph id="ph3">`xsd:double`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> value of the current node cast to a <ph id="ph2">&lt;xref:System.Int32&gt;</ph> value, according to the XPath 2.0 casting rules for <ph id="ph3">`xs:integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> value of the current node cast to a <ph id="ph2">&lt;xref:System.Int64&gt;</ph> value, according to the XPath 2.0 casting rules for <ph id="ph3">`xs:integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The contents of the node cast to the target type according to the XPath 2.0 casting rules.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information about the mapping from schema built-in types to CLR types, see <bpt id="p1">[</bpt>Type Support in the System.Xml Classes<ept id="p1">](../../../../docs/standard/data/xml/type-support-in-the-system-xml-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The Post Schema Validation Infoset (PSVI)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An XML Schema processor accepts an XML Infoset as input and converts it into a Post Schema Validation Infoset (PSVI).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A PSVI is the original input XML infoset with new information items added and new properties added to existing information items.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There are three broad classes of information added to the XML Infoset in the PSVI that are exposed by the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Validation Outcomes: Information as to whether an element or attribute was successfully validated or not.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This is exposed by the <ph id="ph1">&lt;xref:System.Xml.Schema.IXmlSchemaInfo.Validity%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Default Information: Indications as to whether the value of the element or attribute was obtained via default values specified in the schema or not.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This is exposed by the <ph id="ph1">&lt;xref:System.Xml.Schema.IXmlSchemaInfo.IsDefault%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Type Annotations: References to schema components that may be type definitions or element and attribute declarations.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.XmlType%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> contains the specific type information of the node if it is valid.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the validity of a node is unknown, such as when it was validated then subsequently edited.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>then the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.XmlType%2A&gt;</ph> property is set to <ph id="ph2">`null`</ph> but type information is still available from the various properties of the <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example illustrates using information in the Post Schema Validation Infoset exposed by the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The example takes the <ph id="ph1">`books.xml`</ph> file as input.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The example also takes the <ph id="ph1">`books.xsd`</ph> schema as input.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Obtain Typed Values Using ValueAs Properties</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The typed value of a node can be retrieved by accessing the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.TypedValue%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In certain cases you may want to convert the typed value of a node to a different type.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A common example is to get a numeric value from an XML node.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, consider the following unvalidated and untyped XML document.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> is positioned on the <ph id="ph2">`price`</ph> element the <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator.XmlType%2A&gt;</ph> property would be <ph id="ph4">`null`</ph>, the <ph id="ph5">&lt;xref:System.Xml.XPath.XPathNavigator.ValueType%2A&gt;</ph> property would be <ph id="ph6">&lt;xref:System.String&gt;</ph>, and the <ph id="ph7">&lt;xref:System.Xml.XPath.XPathNavigator.TypedValue%2A&gt;</ph> property would be the string <ph id="ph8">`10.00`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>However, it is still possible to extract the value as a numeric value using the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathItem.ValueAs%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.ValueAsDouble%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator.ValueAsInt%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xml.XPath.XPathNavigator.ValueAsLong%2A&gt;</ph> method and properties.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example illustrates performing such a cast using the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathItem.ValueAs%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information about the mapping from schema built-in types to CLR types, see <bpt id="p1">[</bpt>Type Support in the System.Xml Classes<ept id="p1">](../../../../docs/standard/data/xml/type-support-in-the-system-xml-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Support in the System.Xml Classes<ept id="p1">](../../../../docs/standard/data/xml/type-support-in-the-system-xml-classes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Process XML Data Using the XPath Data Model<ept id="p1">](../../../../docs/standard/data/xml/process-xml-data-using-the-xpath-data-model.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Node Set Navigation Using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/node-set-navigation-using-xpathnavigator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attribute and Namespace Node Navigation Using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/attribute-and-namespace-node-navigation-using-xpathnavigator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extract XML Data Using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/extract-xml-data-using-xpathnavigator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>