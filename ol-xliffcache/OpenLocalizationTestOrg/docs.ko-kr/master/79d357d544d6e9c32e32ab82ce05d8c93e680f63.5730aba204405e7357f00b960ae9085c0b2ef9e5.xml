{"content":"---\ntitle: \"How to: Implement a Partitioner for Static Partitioning | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"tasks, how to create a static partitioner\"\nms.assetid: f4410508-cac6-4ba7-bef1-c5e68b2794f3\ncaps.latest.revision: 6\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Implement a Partitioner for Static Partitioning\nThe following example shows one way to implement a simple custom partitioner for PLINQ that performs static partitioning. Because the partitioner does not support dynamic partitions, it is not consumable from <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName>. This particular partitioner might provide speedup over the default range partitioner for data sources for which each element requires an increasing amount of processing time.  \n  \n## Example  \n [!code-csharp[TPL_Partitioners#05](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioners.cs#05)]  \n  \n The partitions in this example are based on the assumption of a linear increase in processing time for each element. In the real world, it might be difficult to predict processing times in this way. If you are using a static partitioner with a specific data source, you can optimize the partitioning formula for the source, add load-balancing logic, or use a chunk partitioning approach as demonstrated in [How to: Implement Dynamic Partitions](../../../docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \n  \n## See Also  \n [Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)","nodes":[{"pos":[12,84],"content":"How to: Implement a Partitioner for Static Partitioning | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Implement a Partitioner for Static Partitioning | Microsoft Docs","pos":[0,72]}]},{"pos":[445,500],"content":"How to: Implement a Partitioner for Static Partitioning","linkify":"How to: Implement a Partitioner for Static Partitioning","nodes":[{"content":"How to: Implement a Partitioner for Static Partitioning","pos":[0,55]}]},{"content":"The following example shows one way to implement a simple custom partitioner for PLINQ that performs static partitioning.","pos":[501,622]},{"content":"Because the partitioner does not support dynamic partitions, it is not consumable from <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph>.","pos":[623,785],"source":" Because the partitioner does not support dynamic partitions, it is not consumable from <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName>."},{"content":"This particular partitioner might provide speedup over the default range partitioner for data sources for which each element requires an increasing amount of processing time.","pos":[786,960]},{"pos":[969,976],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[980,1105],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPL_Partitioners#05<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioners.cs#05)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[TPL_Partitioners#05](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioners.cs#05)]"},{"content":"The partitions in this example are based on the assumption of a linear increase in processing time for each element.","pos":[1112,1228]},{"content":"In the real world, it might be difficult to predict processing times in this way.","pos":[1229,1310]},{"content":"If you are using a static partitioner with a specific data source, you can optimize the partitioning formula for the source, add load-balancing logic, or use a chunk partitioning approach as demonstrated in <bpt id=\"p1\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p1\">](../../../docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[1311,1641],"source":" If you are using a static partitioner with a specific data source, you can optimize the partitioning formula for the source, add load-balancing logic, or use a chunk partitioning approach as demonstrated in [How to: Implement Dynamic Partitions](../../../docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."},{"pos":[1650,1658],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1662,1787],"content":"<bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>","source":"[Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)"}]}