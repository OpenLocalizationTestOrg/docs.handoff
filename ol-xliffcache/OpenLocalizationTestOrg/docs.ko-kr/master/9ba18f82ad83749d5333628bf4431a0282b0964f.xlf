<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="versioning.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ba18f82ad83749d5333628bf4431a0282b0964f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\versioning.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f239ae0393a0524832530613c1e159191b9cfd5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">045e7d3fb4cf1e99aae42339a62174a56f5d70e5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>C# Versioning - C# Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Understand how versioning works in C# and .NET</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Versioning in C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this tutorial you'll learn what versioning means in .NET.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You'll also learn the factors to consider when versioning your library as well as upgrading to a new version of a library.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Authoring Libraries</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As a developer who has created .NET libraries for public use, you've most likely been in situations where you have to roll out new updates.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How you go about this process matters a lot as you need to ensure that there's a seamless transition of existing code to the new version of your library.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Here are several things to consider when creating a new release:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Semantic Versioning</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Semantic versioning<ept id="p1">](https://semver.org/)</ept> (SemVer for short) is a naming convention applied to versions of your library to signify specific milestone events.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Ideally, the version information you give your library should help developers determine the compatibility with their projects that make use of older versions of that same library.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The most basic approach to SemVer is the 3 component format <ph id="ph1">`MAJOR.MINOR.PATCH`</ph>, where:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MAJOR`</ph> is incremented when you make incompatible API changes</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MINOR`</ph> is incremented when you add functionality in a backwards-compatible manner</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PATCH`</ph> is incremented when you make backwards-compatible bug fixes</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There are also ways to specify other scenarios like pre-release versions etc. when applying version information to your .NET library.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Backwards Compatibility</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>As you release new versions of your library, backwards compatibility with previous versions will most likely be one of your major concerns.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A new version of your library is source compatible with a previous version if code that depends on the previous version can, when recompiled, work with the new version.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A new version of your library is binary compatible if an application that depended on the old version can, without recompilation, work with the new version.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Here are some things to consider when trying to maintain backwards compatibility with older versions of your library:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Virtual methods: When you make a virtual method non-virtual in your new version it means that projects that override that method will have to be updated.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is a huge breaking change and is strongly discouraged.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Method signatures: When updating a method behaviour requires you to change its signature as well, you should instead create an overload so that code calling into that method will still work.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can always manipulate the old method signature to call into the new method signature so that implementation remains consistent.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Obsolete attribute<ept id="p1">](programming-guide/concepts/attributes/common-attributes.md#Obsolete)</ept>: You can use this attribute in your code to specify classes or class members that are deprecated and likely to be removed in future versions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This ensures developers utilizing your library are better prepared for breaking changes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Optional Method Arguments: When you make previously optional method arguments compulsory or change their default value then all code that does not supply those arguments will need to be updated.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Making compulsory arguments optional should have very little effect especially if it doesn't change the method's behaviour.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The easier you make it for your users to upgrade to the new version of your library, the more likely that they will upgrade sooner.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Application Configuration File</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As a .NET developer there's a very high chance you've encountered <bpt id="p1">[</bpt>the <ph id="ph1">`app.config`</ph> file<ept id="p1">](../framework/configure-apps/file-schema/index.md)</ept> present in most project types.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This simple configuration file can go a long way into improving the rollout of new updates.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You should generally design your libraries in such a way that information that is likely to change regularly is stored in the <ph id="ph1">`app.config`</ph> file, this way when such information is updated the config file of older versions just needs to be replaced with the new one without the need for recompilation of the library.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Consuming Libraries</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>As a developer that consumes .NET libraries built by other developers you're most likely aware that a new version of a library might not be fully compatible with your project and you might often find yourself having to update your code to work with those changes.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Lucky for you C# and the .NET ecosystem comes with features and techniques that allow us to easily update our app to work with new versions of libraries that might introduce breaking changes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Assembly Binding Redirection</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`app.config`</ph> file to update the version of a library your app uses.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>By adding what is called a <bpt id="p1">[</bpt><bpt id="p2">*</bpt>binding redirect<ept id="p2">*</ept><ept id="p1">](../framework/configure-apps/redirect-assembly-versions.md)</ept> you can use the new library version without having to recompile your app.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example shows how you would update your app's <ph id="ph1">`app.config`</ph> file to use the <ph id="ph2">`1.0.1`</ph> patch version of <ph id="ph3">`ReferencedLibrary`</ph> instead of the <ph id="ph4">`1.0.0`</ph> version it was originally compiled with.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This approach will only work if the new version of <ph id="ph1">`ReferencedLibrary`</ph> is binary compatible with your app.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Backwards Compatibility<ept id="p1">](#backwards-compatibility)</ept> section above for changes to look out for when determining compatibility.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>new</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">`new`</ph> modifier to hide inherited members of a base class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is one way derived classes can respond to updates in base classes.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Take the following example:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Output<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>From the example above you can see how <ph id="ph1">`DerivedClass`</ph> hides the <ph id="ph2">`MyMethod`</ph> method present in <ph id="ph3">`BaseClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This means that when a base class in the new version of a library adds a member that already exists in your derived class, you can simply use the <ph id="ph1">`new`</ph> modifier on your derived class member to hide the base class member.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When no <ph id="ph1">`new`</ph> modifier is specified, a derived class will by default hide conflicting members in a base class, although a compiler warning will be generated the code will still compile.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This means that simply adding new members to an existing class makes that new version of your library both source and binary compatible with code that depends on it.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>override</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`override`</ph> modifier means a derived implementation extends the implementation of a base class member rather than hides it.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The base class member needs to have the <ph id="ph1">`virtual`</ph> modifier applied to it.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Output<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`override`</ph> modifier is evaluated at compile time and the compiler will throw an error if it doesn't find a virtual member to override.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Your knowledge of the discussed techniques as well as your understanding of what situations to use them will go a long way to boost the ease of transition between versions of a library.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>