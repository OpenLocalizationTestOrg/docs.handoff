{"content":"---\ntitle: \"XML Documentation Comments (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"cs.xml\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"XML [C#], code comments\"\n  - \"comments [C#], XML\"\n  - \"documentation comments [C#]\"\n  - \"C# source code files\"\n  - \"C# language, XML code comments\"\n  - \"XML documentation comments [C#]\"\nms.assetid: 803b7f7b-7428-4725-b5db-9a6cff273199\ncaps.latest.revision: 26\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# XML Documentation Comments (C# Programming Guide)\nIn Visual C# you can create documentation for your code by including XML elements in special comment fields (indicated by triple slashes) in the source code directly before the code block to which the comments refer, for example:  \n  \n```  \n/// <summary>  \n///  This class performs an important function.  \n/// </summary>  \npublic class MyClass{}  \n```  \n  \n When you compile with the [/doc](../../../csharp/language-reference/compiler-options/doc-compiler-option.md) option, the compiler will search for all XML tags in the source code and create an XML documentation file. To create the final documentation based on the compiler-generated file, you can create a custom tool or use a tool such as [Sandcastle](http://go.microsoft.com/fwlink/?LinkId=124061).  \n  \n To refer to XML elements (for example, your function processes specific XML elements that you want to describe in an XML documentation comment), you can use the standard quoting mechanism (`<` and `>`).  To refer to generic identifiers in code reference (`cref`) elements, you can use either the escape characters (for example, `cref=\"List<T>\"`) or braces (`cref=\"List{T}\"`).  As a special case, the compiler parses the braces as angle brackets to make the documentation comment less cumbersome to author when referring to generic identifiers.  \n  \n> [!NOTE]\n>  The XML documentation comments are not metadata; they are not included in the compiled assembly and therefore they are not accessible through reflection.  \n  \n## In This Section  \n  \n-   [Recommended Tags for Documentation Comments](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)  \n  \n-   [Processing the XML File](../../../csharp/programming-guide/xmldoc/processing-the-xml-file.md)  \n  \n-   [Delimiters for Documentation Tags](../../../csharp/programming-guide/xmldoc/delimiters-for-documentation-tags.md)  \n  \n-   [How to: Use the XML Documentation Features](../../../csharp/programming-guide/xmldoc/how-to-use-the-xml-documentation-features.md)  \n  \n## Related Sections  \n For more information, see:  \n  \n-   [/doc (Process Documentation Comments)](../../../csharp/language-reference/compiler-options/doc-compiler-option.md)  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)","nodes":[{"pos":[12,78],"content":"XML Documentation Comments (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"XML Documentation Comments (C# Programming Guide) | Microsoft Docs","pos":[0,66]}]},{"pos":[746,795],"content":"XML Documentation Comments (C# Programming Guide)","linkify":"XML Documentation Comments (C# Programming Guide)","nodes":[{"content":"XML Documentation Comments (C# Programming Guide)","pos":[0,49]}]},{"content":"In Visual C# you can create documentation for your code by including XML elements in special comment fields (indicated by triple slashes) in the source code directly before the code block to which the comments refer, for example:","pos":[796,1025]},{"content":"When you compile with the <bpt id=\"p1\">[</bpt>/doc<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/doc-compiler-option.md)</ept> option, the compiler will search for all XML tags in the source code and create an XML documentation file.","pos":[1155,1370],"source":"When you compile with the [/doc](../../../csharp/language-reference/compiler-options/doc-compiler-option.md) option, the compiler will search for all XML tags in the source code and create an XML documentation file."},{"content":"To create the final documentation based on the compiler-generated file, you can create a custom tool or use a tool such as <bpt id=\"p1\">[</bpt>Sandcastle<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=124061)</ept>.","pos":[1371,1554],"source":" To create the final documentation based on the compiler-generated file, you can create a custom tool or use a tool such as [Sandcastle](http://go.microsoft.com/fwlink/?LinkId=124061)."},{"content":"To refer to XML elements (for example, your function processes specific XML elements that you want to describe in an XML documentation comment), you can use the standard quoting mechanism (<ph id=\"ph1\">`&lt;`</ph> and <ph id=\"ph2\">`&gt;`</ph>).","pos":[1561,1763],"source":"To refer to XML elements (for example, your function processes specific XML elements that you want to describe in an XML documentation comment), you can use the standard quoting mechanism (`<` and `>`)."},{"content":"To refer to generic identifiers in code reference (<ph id=\"ph1\">`cref`</ph>) elements, you can use either the escape characters (for example, <ph id=\"ph2\">`cref=\"List&lt;T&gt;\"`</ph>) or braces (<ph id=\"ph3\">`cref=\"List{T}\"`</ph>).","pos":[1765,1936],"source":"  To refer to generic identifiers in code reference (`cref`) elements, you can use either the escape characters (for example, `cref=\"List<T>\"`) or braces (`cref=\"List{T}\"`)."},{"content":"As a special case, the compiler parses the braces as angle brackets to make the documentation comment less cumbersome to author when referring to generic identifiers.","pos":[1938,2104]},{"pos":[2112,2276],"content":"[!NOTE]\n The XML documentation comments are not metadata; they are not included in the compiled assembly and therefore they are not accessible through reflection.","leadings":["","> "],"nodes":[{"content":"The XML documentation comments are not metadata; they are not included in the compiled assembly and therefore they are not accessible through reflection.","pos":[9,162]}]},{"pos":[2285,2300],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"pos":[2310,2444],"content":"<bpt id=\"p1\">[</bpt>Recommended Tags for Documentation Comments<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)</ept>","source":"[Recommended Tags for Documentation Comments](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)"},{"pos":[2454,2548],"content":"<bpt id=\"p1\">[</bpt>Processing the XML File<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/processing-the-xml-file.md)</ept>","source":"[Processing the XML File](../../../csharp/programming-guide/xmldoc/processing-the-xml-file.md)"},{"pos":[2558,2672],"content":"<bpt id=\"p1\">[</bpt>Delimiters for Documentation Tags<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/delimiters-for-documentation-tags.md)</ept>","source":"[Delimiters for Documentation Tags](../../../csharp/programming-guide/xmldoc/delimiters-for-documentation-tags.md)"},{"pos":[2682,2813],"content":"<bpt id=\"p1\">[</bpt>How to: Use the XML Documentation Features<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/how-to-use-the-xml-documentation-features.md)</ept>","source":"[How to: Use the XML Documentation Features](../../../csharp/programming-guide/xmldoc/how-to-use-the-xml-documentation-features.md)"},{"pos":[2822,2838],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"For more information, see:","pos":[2842,2868]},{"pos":[2878,2993],"content":"<bpt id=\"p1\">[</bpt>/doc (Process Documentation Comments)<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/doc-compiler-option.md)</ept>","source":"[/doc (Process Documentation Comments)](../../../csharp/language-reference/compiler-options/doc-compiler-option.md)"},{"pos":[3002,3027],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3141,3149],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3153,3219],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"}]}