{"content":"---\ntitle: \"How to: Handle an Exception Using try-catch (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"exception handling [C#], try/catch blocks\"\n  - \"exceptions [C#], try/catch blocks\"\n  - \"try/catch blocks [C#]\"\nms.assetid: ca8e3773-980e-4767-8633-7408540e9818\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Handle an Exception Using try/catch (C# Programming Guide)\nThe purpose of a [try-catch](../../../csharp/language-reference/keywords/try-catch.md) block is to catch and handle an exception generated by working code. Some exceptions can be handled in a `catch` block and the problem solved without the exception being re-thrown; however, more often the only thing that you can do is make sure that the appropriate exception is thrown.  \n  \n## Example  \n In this example, <xref:System.IndexOutOfRangeException> is not the most appropriate exception: <xref:System.ArgumentOutOfRangeException> makes more sense for the method because the error is caused by the `index` argument passed in by the caller.  \n  \n [!code-cs[csProgGuideExceptions#5](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/how-to-handle-an-exception-using-try-catch_1.cs)]  \n  \n## Comments  \n The code that causes an exception is enclosed in the `try` block. A `catch` statement is added immediately after to handle `IndexOutOfRangeException`, if it occurs. The `catch` block handles the `IndexOutOfRangeException` and throws the more appropriate `ArgumentOutOfRangeException` exception instead. In order to provide the caller with as much information as possible, consider specifying the original exception as the <xref:System.Exception.InnerException%2A> of the new exception. Because the <xref:System.Exception.InnerException%2A> property is [readonly](../../../csharp/language-reference/keywords/readonly.md), you must assign it in the constructor of the new exception.  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md)   \n [Exception Handling](../../../csharp/programming-guide/exceptions/exception-handling.md)","nodes":[{"pos":[12,95],"content":"How to: Handle an Exception Using try-catch (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Handle an Exception Using try-catch (C# Programming Guide) | Microsoft Docs","pos":[0,83]}]},{"pos":[661,727],"content":"How to: Handle an Exception Using try/catch (C# Programming Guide)","linkify":"How to: Handle an Exception Using try/catch (C# Programming Guide)","nodes":[{"content":"How to: Handle an Exception Using try/catch (C# Programming Guide)","pos":[0,66]}]},{"content":"The purpose of a <bpt id=\"p1\">[</bpt>try-catch<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept> block is to catch and handle an exception generated by working code.","pos":[728,883],"source":"The purpose of a [try-catch](../../../csharp/language-reference/keywords/try-catch.md) block is to catch and handle an exception generated by working code."},{"content":"Some exceptions can be handled in a <ph id=\"ph1\">`catch`</ph> block and the problem solved without the exception being re-thrown; however, more often the only thing that you can do is make sure that the appropriate exception is thrown.","pos":[884,1101],"source":" Some exceptions can be handled in a `catch` block and the problem solved without the exception being re-thrown; however, more often the only thing that you can do is make sure that the appropriate exception is thrown."},{"pos":[1110,1117],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1121,1366],"content":"In this example, <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> is not the most appropriate exception: <ph id=\"ph2\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> makes more sense for the method because the error is caused by the <ph id=\"ph3\">`index`</ph> argument passed in by the caller.","source":"In this example, <xref:System.IndexOutOfRangeException> is not the most appropriate exception: <xref:System.ArgumentOutOfRangeException> makes more sense for the method because the error is caused by the `index` argument passed in by the caller."},{"pos":[1373,1521],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideExceptions#5<ept id=\"p2\">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/how-to-handle-an-exception-using-try-catch_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideExceptions#5](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/how-to-handle-an-exception-using-try-catch_1.cs)]"},{"pos":[1530,1538],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"The code that causes an exception is enclosed in the <ph id=\"ph1\">`try`</ph> block.","pos":[1542,1607],"source":"The code that causes an exception is enclosed in the `try` block."},{"content":"A <ph id=\"ph1\">`catch`</ph> statement is added immediately after to handle <ph id=\"ph2\">`IndexOutOfRangeException`</ph>, if it occurs.","pos":[1608,1706],"source":" A `catch` statement is added immediately after to handle `IndexOutOfRangeException`, if it occurs."},{"content":"The <ph id=\"ph1\">`catch`</ph> block handles the <ph id=\"ph2\">`IndexOutOfRangeException`</ph> and throws the more appropriate <ph id=\"ph3\">`ArgumentOutOfRangeException`</ph> exception instead.","pos":[1707,1844],"source":" The `catch` block handles the `IndexOutOfRangeException` and throws the more appropriate `ArgumentOutOfRangeException` exception instead."},{"content":"In order to provide the caller with as much information as possible, consider specifying the original exception as the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> of the new exception.","pos":[1845,2027],"source":" In order to provide the caller with as much information as possible, consider specifying the original exception as the <xref:System.Exception.InnerException%2A> of the new exception."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property is <bpt id=\"p1\">[</bpt>readonly<ept id=\"p1\">](../../../csharp/language-reference/keywords/readonly.md)</ept>, you must assign it in the constructor of the new exception.","pos":[2028,2222],"source":" Because the <xref:System.Exception.InnerException%2A> property is [readonly](../../../csharp/language-reference/keywords/readonly.md), you must assign it in the constructor of the new exception."},{"pos":[2231,2239],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2243,2310],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Exceptions and Exception Handling<ept id=\"p1\">](../../../csharp/programming-guide/exceptions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2313,2405],"source":" [Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Exception Handling<ept id=\"p1\">](../../../csharp/programming-guide/exceptions/exception-handling.md)</ept>","pos":[2408,2497],"source":" [Exception Handling](../../../csharp/programming-guide/exceptions/exception-handling.md)"}]}