{"content":"---\ntitle: \"Oracle LOBs | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 272e8e1e-a31f-475a-8c2a-ae8e1286bdab\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Oracle LOBs\nThe .NET Framework Data Provider for Oracle includes the <xref:System.Data.OracleClient.OracleLob> class, which is used to work with Oracle **LOB** data types.  \n  \n An **OracleLob** may be one of these <xref:System.Data.OracleClient.OracleType> data types:  \n  \n|Data type|Description|  \n|---------------|-----------------|  \n|**Blob**|An Oracle **BLOB** data type that contains binary data with a maximum size of 4 gigabytes. This maps to an **Array** of type **Byte**.|  \n|**Clob**|An Oracle **CLOB** data type that contains character data, based on the default character set on the server, with a maximum size of 4 gigabytes. This maps to **String**.|  \n|**NClob**|An Oracle **NCLOB** data type that contains character data, based on the national character set on the server with a maximum size of 4 gigabytes. This maps to **String**.|  \n  \n An **OracleLob** differs from an <xref:System.Data.OracleClient.OracleBFile> in that the data is stored on the server instead of in a physical file in the operating system. It can also be a read-write object, unlike an **OracleBFile**, which is always read-only.  \n  \n## Creating, Retrieving, and Writing to a LOB  \n The following C# example demonstrates how you can create LOBs in an Oracle table, and then retrieve and write to them in the form of **OracleLob** objects. The example demonstrates using the <xref:System.Data.OracleClient.OracleDataReader> object and the **OracleLob** **Read** and **Write** methods. The example uses Oracle **BLOB**, **CLOB**, and **NCLOB** data types.  \n  \n```csharp  \nusing System;  \nusing System.IO;              \nusing System.Text;             \nusing System.Data;              \nusing System.Data.OracleClient;  \n  \n// LobExample  \npublic class LobExample  \n{  \n   public static int Main(string[] args)  \n   {  \n      //Create a connection.  \n      OracleConnection conn = new OracleConnection(  \n         \"Data Source=Oracle8i;Integrated Security=yes\");  \n      using(conn)  \n      {  \n         //Open a connection.  \n         conn.Open();  \n         OracleCommand cmd = conn.CreateCommand();  \n  \n         //Create the table and schema.  \n         CreateTable(cmd);  \n  \n         //Read example.  \n         ReadLobExample(cmd);  \n  \n         //Write example  \n         WriteLobExample(cmd);  \n      }  \n  \n      return 1;  \n   }  \n  \n   // ReadLobExample  \n   public static void ReadLobExample(OracleCommand cmd)  \n   {  \n      int actual = 0;  \n  \n      // Table Schema:  \n      // \"CREATE TABLE tablewithlobs (a int, b BLOB, c CLOB, d NCLOB)\";  \n      // \"INSERT INTO tablewithlobs values (1, 'AA', 'AAA', N'AAAA')\";  \n      // Select some data.  \n      cmd.CommandText = \"SELECT * FROM tablewithlobs\";  \n      OracleDataReader reader = cmd.ExecuteReader();  \n      using(reader)  \n      {  \n         //Obtain the first row of data.  \n         reader.Read();  \n  \n         //Obtain the LOBs (all 3 varieties).  \n         OracleLob blob = reader.GetOracleLob(1);  \n         OracleLob clob = reader.GetOracleLob(2);  \n         OracleLob nclob = reader.GetOracleLob(3);  \n  \n         //Example - Reading binary data (in chunks).  \n         byte[] buffer = new byte[100];  \n         while((actual = blob.Read(buffer, 0, buffer.Length)) >0)  \n            Console.WriteLine(blob.LobType + \".Read(\" + buffer + \", \" +   \n              buffer.Length + \") => \" + actual);  \n  \n         // Example - Reading CLOB/NCLOB data (in chunks).  \n         // Note: You can read character data as raw Unicode bytes   \n         // (using OracleLob.Read as in the above example).  \n         // However, because the OracleLob object inherits directly   \n         // from the .Net stream object,   \n         // all the existing classes that manipluate streams can   \n         // also be used. For example, the   \n         // .Net StreamReader makes it easier to convert the raw bytes   \n         // into actual characters.  \n         StreamReader streamreader =   \n           new StreamReader(clob, Encoding.Unicode);  \n         char[] cbuffer = new char[100];  \n         while((actual = streamreader.Read(cbuffer,   \n           0, cbuffer.Length)) >0)  \n            Console.WriteLine(clob.LobType + \".Read(  \n              \" + new string(cbuffer, 0, actual) + \", \" +   \n              cbuffer.Length + \") => \" + actual);  \n  \n         // Example - Reading data (all at once).  \n         // You could use StreamReader.ReadToEnd to obtain   \n         // all the string data, or simply  \n         // call OracleLob.Value to obtain a contiguous allocation   \n         // of all the data.  \n         Console.WriteLine(nclob.LobType + \".Value => \" + nclob.Value);  \n      }  \n   }  \n  \n   // WriteLobExample  \n   public static void WriteLobExample(OracleCommand cmd)  \n   {  \n      //Note: Updating LOB data requires a transaction.  \n      cmd.Transaction = cmd.Connection.BeginTransaction();  \n  \n      // Select some data.  \n      // Table Schema:  \n      // \"CREATE TABLE tablewithlobs (a int, b BLOB, c CLOB, d NCLOB)\";  \n      // \"INSERT INTO tablewithlobs values (1, 'AA', 'AAA', N'AAAA')\";  \n      cmd.CommandText = \"SELECT * FROM tablewithlobs FOR UPDATE\";  \n      OracleDataReader reader = cmd.ExecuteReader();  \n      using(reader)  \n      {  \n         // Obtain the first row of data.  \n         reader.Read();  \n  \n         // Obtain a LOB.  \n         OracleLob blob = reader.GetOracleLob(1/*0:based ordinal*/);  \n  \n         // Perform any desired operations on the LOB   \n         // (read, position, and so on).  \n  \n         // Example - Writing binary data (directly to the backend).  \n         // To write, you can use any of the stream classes, or write  \n         // raw binary data using   \n         // the OracleLob write method. Writing character vs. binary   \n         // is the same;  \n         // however note that character is always in terms of   \n         // Unicode byte counts  \n         // (for example, even number of bytes - 2 bytes for every  \n         // Unicode character).  \n         byte[] buffer = new byte[100];  \n         buffer[0] = 0xCC;  \n         buffer[1] = 0xDD;  \n         blob.Write(buffer, 0, 2);  \n         blob.Position = 0;  \n         Console.WriteLine(blob.LobType + \".Write(  \n           \" + buffer + \", 0, 2) => \" + blob.Value);  \n  \n         // Example - Obtaining a temp LOB and copying data   \n         // into it from another LOB.  \n         OracleLob templob = CreateTempLob(cmd, blob.LobType);  \n         long actual = blob.CopyTo(templob);  \n         Console.WriteLine(blob.LobType + \".CopyTo(  \n            \" + templob.Value + \") => \" + actual);  \n  \n         // Commit the transaction now that everything succeeded.  \n         // Note: On error, Transaction.Dispose is called   \n         // (from the using statement)  \n         // and will automatically roll back the pending transaction.  \n         cmd.Transaction.Commit();  \n      }  \n   }  \n  \n   // CreateTempLob  \n   public static OracleLob CreateTempLob(  \n     OracleCommand cmd, OracleType lobtype)  \n   {  \n      //Oracle server syntax to obtain a temporary LOB.  \n      cmd.CommandText = \"DECLARE A \" + lobtype + \"; \"+  \n                     \"BEGIN \"+  \n                        \"DBMS_LOB.CREATETEMPORARY(A, FALSE); \"+  \n                        \":LOC := A; \"+  \n                     \"END;\";  \n  \n      //Bind the LOB as an output parameter.  \n      OracleParameter p = cmd.Parameters.Add(\"LOC\", lobtype);  \n      p.Direction = ParameterDirection.Output;  \n  \n      //Execute (to receive the output temporary LOB).  \n      cmd.ExecuteNonQuery();  \n  \n      //Return the temporary LOB.  \n      return (OracleLob)p.Value;  \n   }  \n  \n   // CreateTable  \n   public static void CreateTable(OracleCommand cmd)  \n   {  \n      // Table Schema:  \n      // \"CREATE TABLE tablewithlobs (a int, b BLOB, c CLOB, d NCLOB)\";  \n      // \"INSERT INTO tablewithlobs VALUES (1, 'AA', 'AAA', N'AAAA')\";  \n      try  \n      {  \n         cmd.CommandText   = \"DROP TABLE tablewithlobs\";  \n         cmd.ExecuteNonQuery();  \n      }  \n      catch(Exception)  \n      {  \n      }  \n  \n      cmd.CommandText =   \n        \"CREATE TABLE tablewithlobs (a int, b BLOB, c CLOB, d NCLOB)\";  \n      cmd.ExecuteNonQuery();  \n      cmd.CommandText =   \n        \"INSERT INTO tablewithlobs VALUES (1, 'AA', 'AAA', N'AAAA')\";  \n      cmd.ExecuteNonQuery();  \n   }  \n}  \n```  \n  \n## Creating a Temporary LOB  \n The following C# example demonstrates how to create a temporary LOB.  \n  \n```csharp  \nOracleConnection conn = new OracleConnection(  \n  \"server=test8172; integrated security=yes;\");  \nconn.Open();  \n  \nOracleTransaction tx = conn.BeginTransaction();  \n  \nOracleCommand cmd = conn.CreateCommand();  \ncmd.Transaction = tx;  \ncmd.CommandText =   \n  \"declare xx blob; begin dbms_lob.createtemporary(  \n  xx, false, 0); :tempblob := xx; end;\";  \ncmd.Parameters.Add(new OracleParameter(\"tempblob\",  \n  OracleType.Blob)).Direction = ParameterDirection.Output;  \ncmd.ExecuteNonQuery();  \nOracleLob tempLob = (OracleLob)cmd.Parameters[0].Value;  \ntempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  \ntempLob.Write(tempbuff,0,tempbuff.Length);  \ntempLob.EndBatch();  \ncmd.Parameters.Clear();  \ncmd.CommandText = \"myTable.myProc\";  \ncmd.CommandType = CommandType.StoredProcedure;    \ncmd.Parameters.Add(new OracleParameter(  \n  \"ImportDoc\", OracleType.Blob)).Value = tempLob;  \ncmd.ExecuteNonQuery();  \n  \ntx.Commit();  \n```  \n  \n## See Also  \n [Oracle and ADO.NET](../../../../docs/framework/data/adonet/oracle-and-adonet.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[12,40],"content":"Oracle LOBs | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Oracle LOBs | Microsoft Docs","pos":[0,28]}]},{"pos":[349,360],"content":"Oracle LOBs","linkify":"Oracle LOBs","nodes":[{"content":"Oracle LOBs","pos":[0,11]}]},{"pos":[361,520],"content":"The .NET Framework Data Provider for Oracle includes the <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> class, which is used to work with Oracle <bpt id=\"p1\">**</bpt>LOB<ept id=\"p1\">**</ept> data types.","source":"The .NET Framework Data Provider for Oracle includes the <xref:System.Data.OracleClient.OracleLob> class, which is used to work with Oracle **LOB** data types."},{"pos":[527,618],"content":"An <bpt id=\"p1\">**</bpt>OracleLob<ept id=\"p1\">**</ept> may be one of these <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleType&gt;</ph> data types:","source":"An **OracleLob** may be one of these <xref:System.Data.OracleClient.OracleType> data types:"},{"content":"Data type","pos":[625,634]},{"content":"Description","pos":[635,646]},{"pos":[689,697],"content":"<bpt id=\"p1\">**</bpt>Blob<ept id=\"p1\">**</ept>","source":"**Blob**"},{"content":"An Oracle <bpt id=\"p1\">**</bpt>BLOB<ept id=\"p1\">**</ept> data type that contains binary data with a maximum size of 4 gigabytes.","pos":[698,788],"source":"An Oracle **BLOB** data type that contains binary data with a maximum size of 4 gigabytes."},{"content":"This maps to an <bpt id=\"p1\">**</bpt>Array<ept id=\"p1\">**</ept> of type <bpt id=\"p2\">**</bpt>Byte<ept id=\"p2\">**</ept>.","pos":[789,832],"source":" This maps to an **Array** of type **Byte**."},{"pos":[837,845],"content":"<bpt id=\"p1\">**</bpt>Clob<ept id=\"p1\">**</ept>","source":"**Clob**"},{"content":"An Oracle <bpt id=\"p1\">**</bpt>CLOB<ept id=\"p1\">**</ept> data type that contains character data, based on the default character set on the server, with a maximum size of 4 gigabytes.","pos":[846,990],"source":"An Oracle **CLOB** data type that contains character data, based on the default character set on the server, with a maximum size of 4 gigabytes."},{"content":"This maps to <bpt id=\"p1\">**</bpt>String<ept id=\"p1\">**</ept>.","pos":[991,1015],"source":" This maps to **String**."},{"pos":[1020,1029],"content":"<bpt id=\"p1\">**</bpt>NClob<ept id=\"p1\">**</ept>","source":"**NClob**"},{"content":"An Oracle <bpt id=\"p1\">**</bpt>NCLOB<ept id=\"p1\">**</ept> data type that contains character data, based on the national character set on the server with a maximum size of 4 gigabytes.","pos":[1030,1175],"source":"An Oracle **NCLOB** data type that contains character data, based on the national character set on the server with a maximum size of 4 gigabytes."},{"content":"This maps to <bpt id=\"p1\">**</bpt>String<ept id=\"p1\">**</ept>.","pos":[1176,1200],"source":" This maps to **String**."},{"content":"An <bpt id=\"p1\">**</bpt>OracleLob<ept id=\"p1\">**</ept> differs from an <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> in that the data is stored on the server instead of in a physical file in the operating system.","pos":[1208,1380],"source":"An **OracleLob** differs from an <xref:System.Data.OracleClient.OracleBFile> in that the data is stored on the server instead of in a physical file in the operating system."},{"content":"It can also be a read-write object, unlike an <bpt id=\"p1\">**</bpt>OracleBFile<ept id=\"p1\">**</ept>, which is always read-only.","pos":[1381,1470],"source":" It can also be a read-write object, unlike an **OracleBFile**, which is always read-only."},{"pos":[1479,1521],"content":"Creating, Retrieving, and Writing to a LOB","linkify":"Creating, Retrieving, and Writing to a LOB","nodes":[{"content":"Creating, Retrieving, and Writing to a LOB","pos":[0,42]}]},{"content":"The following C# example demonstrates how you can create LOBs in an Oracle table, and then retrieve and write to them in the form of <bpt id=\"p1\">**</bpt>OracleLob<ept id=\"p1\">**</ept> objects.","pos":[1525,1680],"source":"The following C# example demonstrates how you can create LOBs in an Oracle table, and then retrieve and write to them in the form of **OracleLob** objects."},{"content":"The example demonstrates using the <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> object and the <bpt id=\"p1\">**</bpt>OracleLob<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>Read<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Write<ept id=\"p3\">**</ept> methods.","pos":[1681,1825],"source":" The example demonstrates using the <xref:System.Data.OracleClient.OracleDataReader> object and the **OracleLob** **Read** and **Write** methods."},{"content":"The example uses Oracle <bpt id=\"p1\">**</bpt>BLOB<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>CLOB<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>NCLOB<ept id=\"p3\">**</ept> data types.","pos":[1826,1895],"source":" The example uses Oracle **BLOB**, **CLOB**, and **NCLOB** data types."},{"pos":[8689,8713],"content":"Creating a Temporary LOB","linkify":"Creating a Temporary LOB","nodes":[{"content":"Creating a Temporary LOB","pos":[0,24]}]},{"content":"The following C# example demonstrates how to create a temporary LOB.","pos":[8717,8785]},{"pos":[9737,9745],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Oracle and ADO.NET<ept id=\"p1\">](../../../../docs/framework/data/adonet/oracle-and-adonet.md)</ept><ph id=\"ph1\"> </ph>","pos":[9749,9831],"source":"[Oracle and ADO.NET](../../../../docs/framework/data/adonet/oracle-and-adonet.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[9834,9938],"source":" [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}