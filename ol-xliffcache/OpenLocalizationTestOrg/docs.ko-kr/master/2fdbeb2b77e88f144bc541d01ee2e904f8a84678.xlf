<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="classes-used-in-net-framework-file-io-and-the-file-system.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2fdbeb2b77e88f144bc541d01ee2e904f8a84678</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\developing-apps\programming\drives-directories-files\classes-used-in-net-framework-file-io-and-the-file-system.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae4cbe99352ee7e0e789f31ac5e67a47cebd4e9f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebe6e0283436e7eaff6810a182d3814365a1218c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Classes Used in .NET Framework File I/O and the File System (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Classes Used in .NET Framework File I/O and the File System (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following tables list the classes commonly used for .NET Framework file I/O, categorized into file I/O classes, classes used for creating streams, and classes used to read and write to streams.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To enter the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> documentation and find a more comprehensive listing, see <bpt id="p1">[</bpt>Class Library Overview<ept id="p1">](../../../../standard/class-library-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Basic I/O Classes for Files, Drives, and Directories</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table lists and describes the main classes used for file I/O.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Provides static methods for creating, moving, and enumerating through directories and subdirectories.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Provides instance methods for creating, moving, and enumerating through directories and subdirectories.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Provides instance methods for creating, moving, and enumerating through drives.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Provides static methods for creating, copying, deleting, moving, and opening files, and aids in the creation of a <ph id="ph1">`FileStream`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Defines constants for read, write, or read/write access to a file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Provides attributes for files and directories such as <ph id="ph1">`Archive`</ph>, <ph id="ph2">`Hidden`</ph>, and <ph id="ph3">`ReadOnly`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Provides static methods for creating, copying, deleting, moving, and opening files, and aids in the creation of a <ph id="ph1">`FileStream`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Controls how a file is opened.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This parameter is specified in many of the constructors for <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`IsolatedStorageFileStream`</ph>, and for the <ph id="ph3">`Open`</ph> methods of <ph id="ph4">&lt;xref:System.IO.File&gt;</ph> and <ph id="ph5">&lt;xref:System.IO.FileInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Defines constants for controlling the type of access other file streams can have to the same file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Provides methods and properties for processing directory strings.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Controls the access of files and folders by defining <ph id="ph1">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A&gt;</ph> permissions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Classes Used to Create Streams</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following table lists and describes the main classes used to create streams.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Adds a buffering layer to read and write operations on another stream.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Supports random access to files through its <ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> opens files synchronously by default but also supports asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Creates a stream whose backing store is memory, rather than a file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Provides the underlying stream of data for network access.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Defines a stream that links data streams to cryptographic transformations.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Classes Used to Read from and Write to Streams</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following table shows the specific classes used for reading from and writing to files with streams.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Class<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Reads encoded strings and primitive data types from a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Writes encoded strings and primitive data types to a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Reads characters from a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>, using <ph id="ph2">&lt;xref:System.IO.StreamReader.CurrentEncoding%2A&gt;</ph> to convert characters to and from bytes.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> has a constructor that attempts to ascertain the correct <ph id="ph2">&lt;xref:System.IO.StreamReader.CurrentEncoding%2A&gt;</ph> for a given stream, based on the presence of a <ph id="ph3">&lt;xref:System.IO.StreamReader.CurrentEncoding%2A&gt;</ph>-specific preamble, such as a byte order mark.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Writes characters to a <ph id="ph1">`FileStream`</ph>, using <ph id="ph2">&lt;xref:System.IO.StreamWriter.Encoding%2A&gt;</ph> to convert characters to bytes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Reads characters from a <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Output can be either a stream in any encoding or a <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Writes characters to a <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Output can be either a stream in any encoding or a <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composing Streams<ept id="p1">](../../../../standard/io/composing-streams.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>File and Stream I/O<ept id="p1">](../../../../standard/io/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous File I/O<ept id="p1">](../../../../standard/io/asynchronous-file-i-o.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basics of .NET Framework File I/O and the File System (Visual Basic)<ept id="p1">](../../../../visual-basic/developing-apps/programming/drives-directories-files/basics-of-net-framework-file-io-and-the-file-system.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>