<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="select-clause.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">367d810c2358963bfe2f092a390443eccdc66941</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\queries\select-clause.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c82e5e0fe04365fc1ef5d41c9eda4837752fba1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa19fc33787551606b469ab46e4986d6c3f28f1e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Select Clause (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Select Clause (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines the result of a query.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An alias that can be used to reference the results of the column expression.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The name of the field to return in the query result.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Select`</ph> clause to define the results to return from a query.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This enables you to either define the members of a new anonymous type that is created by a query, or to target the members of a named type that is returned by a query.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> clause is not required for a query.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`Select`</ph> clause is specified, the query will return a type based on all members of the range variables identified for the current scope.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When a query creates a named type, it will return a result of type <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> where <ph id="ph2">`T`</ph> is the created type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> clause can reference any variables in the current scope.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This includes range variables identified in the <ph id="ph1">`From`</ph> clause (or <ph id="ph2">`From`</ph> clauses).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It also includes any new variables created with an alias by the <ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Let`</ph>, <ph id="ph3">`Group By`</ph>, or <ph id="ph4">`Group Join`</ph> clauses, or variables from a previous <ph id="ph5">`Select`</ph> clause in the query expression.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> clause can also include static values.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the following code example shows a query expression in which the <ph id="ph1">`Select`</ph> clause defines the query result as a new anonymous type with four members: <ph id="ph2">`ProductName`</ph>, <ph id="ph3">`Price`</ph>, <ph id="ph4">`Discount`</ph>, and <ph id="ph5">`DiscountedPrice`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProductName`</ph> and <ph id="ph2">`Price`</ph> member values are taken from the product range variable that is defined in the <ph id="ph3">`From`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DiscountedPrice`</ph> member value is calculated in the <ph id="ph2">`Let`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Discount`</ph> member is a static value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> clause introduces a new set of range variables for subsequent query clauses, and previous range variables are no longer in scope.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The last <ph id="ph1">`Select`</ph> clause in a query expression determines the return value of the query.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the following query returns the company name and order ID for every customer order for which the total exceeds 500.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`Select`</ph> clause identifies the range variables for the <ph id="ph2">`Where`</ph> clause and the second <ph id="ph3">`Select`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">`Select`</ph> clause identifies the values returned by the query as a new anonymous type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Select`</ph> clause identifies a single item to return, the query expression returns a collection of the type of that single item.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Select`</ph> clause identifies multiple items to return, the query expression returns a collection of a new anonymous type, based on the selected items.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the following two queries return collections of two different types based on the <ph id="ph1">`Select`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The first query returns a collection of company names as strings.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The second query returns a collection of <ph id="ph1">`Customer`</ph> objects populated with the company names and address information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following query expression uses a <ph id="ph1">`From`</ph> clause to declare a range variable <ph id="ph2">`cust`</ph> for the <ph id="ph3">`customers`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> clause selects the customer name and ID value and populates the <ph id="ph2">`CompanyName`</ph> and <ph id="ph3">`CustomerID`</ph> columns of the new range variable.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`For Each`</ph> statement loops over each returned object and displays the <ph id="ph2">`CompanyName`</ph> and <ph id="ph3">`CustomerID`</ph> columns for each record.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queries<ept id="p1">](../../../visual-basic/language-reference/queries/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>From Clause<ept id="p1">](../../../visual-basic/language-reference/queries/from-clause.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Where Clause<ept id="p1">](../../../visual-basic/language-reference/queries/where-clause.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Order By Clause<ept id="p1">](../../../visual-basic/language-reference/queries/order-by-clause.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>