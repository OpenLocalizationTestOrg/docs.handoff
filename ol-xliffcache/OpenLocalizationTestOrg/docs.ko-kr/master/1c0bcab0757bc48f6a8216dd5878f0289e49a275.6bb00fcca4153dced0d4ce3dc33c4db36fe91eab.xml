{"content":"---\ntitle: \"Thread Safety in Regular Expressions\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \".NET Framework regular expressions, threads\"\n  - \"regular expressions, threads\"\n  - \"searching with regular expressions, threads\"\n  - \"parsing text with regular expressions, threads\"\n  - \"pattern-matching with regular expressions, threads\"\nms.assetid: 7c4a167b-5236-4cde-a2ca-58646230730f\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Thread Safety in Regular Expressions\nThe <xref:System.Text.RegularExpressions.Regex> class itself is thread safe and immutable (read-only). That is, **Regex** objects can be created on any thread and shared between threads; matching methods can be called from any thread and never alter any global state.  \n  \n However, result objects (**Match** and **MatchCollection**) returned by **Regex** should be used on a single thread. Although many of these objects are logically immutable, their implementations could delay computation of some results to improve performance, and as a result, callers must serialize access to them.  \n  \n If there is a need to share **Regex** result objects on multiple threads, these objects can be converted to thread-safe instances by calling their synchronized methods. With the exception of enumerators, all regular expression classes are thread safe or can be converted into thread-safe objects by a synchronized method.  \n  \n Enumerators are the only exception. An application must serialize calls to collection enumerators. The rule is that if a collection can be enumerated on more than one thread simultaneously, you should synchronize enumerator methods on the root object of the collection traversed by the enumerator.  \n  \n## See also\n\n- [.NET Regular Expressions](../../../docs/standard/base-types/regular-expressions.md)\n","nodes":[{"pos":[4,458],"embed":true,"restype":"x-metadata","content":"title: \"Thread Safety in Regular Expressions\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \".NET Framework regular expressions, threads\"\n  - \"regular expressions, threads\"\n  - \"searching with regular expressions, threads\"\n  - \"parsing text with regular expressions, threads\"\n  - \"pattern-matching with regular expressions, threads\"\nms.assetid: 7c4a167b-5236-4cde-a2ca-58646230730f\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Thread Safety in Regular Expressions","nodes":[{"pos":[0,36],"content":"Thread Safety in Regular Expressions","nodes":[{"content":"Thread Safety in Regular Expressions","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[465,501],"content":"Thread Safety in Regular Expressions","linkify":"Thread Safety in Regular Expressions","nodes":[{"content":"Thread Safety in Regular Expressions","pos":[0,36]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class itself is thread safe and immutable (read-only).","pos":[502,604],"source":"The <xref:System.Text.RegularExpressions.Regex> class itself is thread safe and immutable (read-only)."},{"content":"That is, <bpt id=\"p1\">**</bpt>Regex<ept id=\"p1\">**</ept> objects can be created on any thread and shared between threads; matching methods can be called from any thread and never alter any global state.","pos":[605,769],"source":" That is, **Regex** objects can be created on any thread and shared between threads; matching methods can be called from any thread and never alter any global state."},{"content":"However, result objects (<bpt id=\"p1\">**</bpt>Match<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>MatchCollection<ept id=\"p2\">**</ept>) returned by <bpt id=\"p3\">**</bpt>Regex<ept id=\"p3\">**</ept> should be used on a single thread.","pos":[776,892],"source":"However, result objects (**Match** and **MatchCollection**) returned by **Regex** should be used on a single thread."},{"content":"Although many of these objects are logically immutable, their implementations could delay computation of some results to improve performance, and as a result, callers must serialize access to them.","pos":[893,1090]},{"content":"If there is a need to share <bpt id=\"p1\">**</bpt>Regex<ept id=\"p1\">**</ept> result objects on multiple threads, these objects can be converted to thread-safe instances by calling their synchronized methods.","pos":[1097,1265],"source":"If there is a need to share **Regex** result objects on multiple threads, these objects can be converted to thread-safe instances by calling their synchronized methods."},{"content":"With the exception of enumerators, all regular expression classes are thread safe or can be converted into thread-safe objects by a synchronized method.","pos":[1266,1418]},{"content":"Enumerators are the only exception.","pos":[1425,1460]},{"content":"An application must serialize calls to collection enumerators.","pos":[1461,1523]},{"content":"The rule is that if a collection can be enumerated on more than one thread simultaneously, you should synchronize enumerator methods on the root object of the collection traversed by the enumerator.","pos":[1524,1722]},{"pos":[1731,1739],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1743,1827],"content":"<bpt id=\"p1\">[</bpt>.NET Regular Expressions<ept id=\"p1\">](../../../docs/standard/base-types/regular-expressions.md)</ept>","source":"[.NET Regular Expressions](../../../docs/standard/base-types/regular-expressions.md)"}]}