<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-on-macos.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5ac6fa04a2a5001146936de56acafeec7dd895d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-macos.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4219bbe2556194effe57fb08306dc883a0548d7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a53e9fab0b4d4c895044235d97378bbfe9c9971e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Get started with .NET Core on macOS</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This document provides the steps and workflow to create a .NET Core Solution using Visual Studio Code.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get started with .NET Core on macOS</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This document provides the steps and workflow to create a .NET Core solution for macOS.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Learn how to create projects, unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id="p1">[</bpt>NuGet<ept id="p1">](https://www.nuget.org/)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article uses <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://code.visualstudio.com)</ept> on macOS.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The .NET Core SDK includes the latest release of the .NET Core framework and runtime.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Install <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://code.visualstudio.com)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>During the course of this article, you also install Visual Studio Code extensions that improve the .NET Core development experience.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Install the Visual Studio Code C# extension by opening Visual Studio Code and pressing <bpt id="p1">&lt;kbd&gt;</bpt>F1<ept id="p1">&lt;/kbd&gt;</ept> to open the Visual Studio Code palette.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Type <bpt id="p1">**</bpt>ext install<ept id="p1">**</ept> to see the list of extensions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Select the C# extension.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Restart Visual Studio Code to activate the extension.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Visual Studio Code C# Extension documentation<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Get started</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this tutorial, you create three projects: a library project, tests for that library project, and a console application that makes use of the library.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can <bpt id="p1">[</bpt>view or download the source<ept id="p1">](https://github.com/dotnet/samples/tree/master/core/getting-started/golden)</ept> for this topic at the dotnet/samples repository on GitHub.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For download instructions, see <bpt id="p1">[</bpt>Samples and Tutorials<ept id="p1">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Start Visual Studio Code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">&lt;kbd&gt;</bpt>Ctrl<ept id="p1">&lt;/kbd&gt;</ept><ph id="ph1">+</ph><bpt id="p2">&lt;kbd&gt;</bpt><ph id="ph2">\`</ph><ept id="p2">&lt;/kbd&gt;</ept> (the backquote or backtick character) or select <bpt id="p3">**</bpt>View &gt; Integrated Terminal<ept id="p3">**</ept> from the menu to open an embedded terminal in Visual Studio Code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can still open an external shell with the Explorer <bpt id="p1">**</bpt>Open in Command Prompt<ept id="p1">**</ept> command (<bpt id="p2">**</bpt>Open in Terminal<ept id="p2">**</ept> on Mac or Linux) if you prefer to work outside of Visual Studio Code.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Begin by creating a solution file, which serves as a container for one or more .NET Core projects.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the terminal, create a <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> folder and open the folder.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This folder is the root of your solution.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> command to create a new solution, <bpt id="p2">*</bpt>golden.sln<ept id="p2">*</ept>:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> folder, execute the following command to create a library project, which produces two files,<bpt id="p2">*</bpt>library.csproj<ept id="p2">*</ept> and <bpt id="p3">*</bpt>Class1.cs<ept id="p3">*</ept>, in the <bpt id="p4">*</bpt>library<ept id="p4">*</ept> folder:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Execute the <bpt id="p1">[</bpt><ph id="ph1">`dotnet sln`</ph><ept id="p1">](../tools/dotnet-sln.md)</ept> command to add the newly created <bpt id="p2">*</bpt>library.csproj<ept id="p2">*</ept> project to the solution:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> file contains the following information:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Our library methods serialize and deserialize objects in JSON format.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To support JSON serialization and deserialization, add a reference to the <ph id="ph1">`Newtonsoft.Json`</ph> NuGet package.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet add`</ph> command adds new items to a project.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To add a reference to a NuGet package, use the <bpt id="p1">[</bpt><ph id="ph1">`dotnet add package`</ph><ept id="p1">](../tools/dotnet-add-package.md)</ept> command and specify the name of the package:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This adds <ph id="ph1">`Newtonsoft.Json`</ph> and its dependencies to the library project.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Alternatively, manually edit the <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> file and add the following node:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept>, (<bpt id="p2">[</bpt>see note<ept id="p2">](#dotnet-restore-note)</ept>) which restores dependencies and creates an <bpt id="p3">*</bpt>obj<ept id="p3">*</ept> folder inside <bpt id="p4">*</bpt>library<ept id="p4">*</ept> with three files in it, including a <bpt id="p5">*</bpt>project.assets.json<ept id="p5">*</ept> file:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>library<ept id="p1">*</ept> folder, rename the file <bpt id="p2">*</bpt>Class1.cs<ept id="p2">*</ept> to <bpt id="p3">*</bpt>Thing.cs<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Replace the code with the following:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Thing`</ph> class contains one public method, <ph id="ph2">`Get`</ph>, which returns the sum of two numbers but does so by converting the sum into a string and then deserializing it into an integer.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This makes use of a number of modern C# features, such as <bpt id="p1">[</bpt><ph id="ph1">`using static`</ph> directives<ept id="p1">](../../csharp/language-reference/keywords/using-static.md)</ept>, <bpt id="p2">[</bpt>expression-bodied members<ept id="p2">](../../csharp/whats-new/csharp-7.md#more-expression-bodied-members)</ept>, and <bpt id="p3">[</bpt>string interpolation<ept id="p3">](../../csharp/language-reference/tokens/interpolated.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Build the library with the <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> command.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This produces a <bpt id="p1">*</bpt>library.dll<ept id="p1">*</ept> file under <bpt id="p2">*</bpt>golden/library/bin/Debug/netstandard1.4<ept id="p2">*</ept>:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Create the test project</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Build a test project for the library.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> folder, create a new test project:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add the test project to the solution:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Add a project reference the library you created in the previous section so that the compiler can find and use the library project.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><ph id="ph1">`dotnet add reference`</ph><ept id="p1">](../tools/dotnet-add-reference.md)</ept> command:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Alternatively, manually edit the <bpt id="p1">*</bpt>test-library.csproj<ept id="p1">*</ept> file and add the following node:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Now that the dependencies have been properly configured, create the tests for your library.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> and replace its contents with the following code:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Note that you assert the value 42 is not equal to 19+23 (or 42) when you first create the unit test (<ph id="ph1">`Assert.NotEqual`</ph>), which will fail.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An important step in building unit tests is to create the test to fail once first to confirm its logic.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> folder, execute the following commands:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>These commands will recursively find all projects to restore dependencies, build them, and activate the xUnit test runner to run the tests.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The single test fails, as you expect.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Edit the <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> file and change the assertion from <ph id="ph1">`Assert.NotEqual`</ph> to <ph id="ph2">`Assert.Equal`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Execute the following command from the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> folder to re-run the test, which passes this time:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Create the console app</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The console app you create over the following steps takes a dependency on the library project you created earlier and calls its library method when it runs.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Using this pattern of development, you see how to create reusable libraries for multiple projects.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Create a new console application from the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> folder:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Add the console app project to the solution:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Create the dependency on the library by running the <ph id="ph1">`dotnet add reference`</ph> command:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet restore`</ph> (<bpt id="p1">[</bpt>see note<ept id="p1">](#dotnet-restore-note)</ept>) to restore the dependencies of the three projects in the solution.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> and replace the contents of the <ph id="ph1">`Main`</ph> method with the following line:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Add two <ph id="ph1">`using`</ph> directives to the top of the <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> file:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Execute the following <ph id="ph1">`dotnet run`</ph> command to run the executable, where the <ph id="ph2">`-p`</ph> option to <ph id="ph3">`dotnet run`</ph> specifies the project for the main application.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The app produces the string "The answer is 42".</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Debug the application</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the <ph id="ph1">`WriteLine`</ph> statement in the <ph id="ph2">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Do this by either pressing the <bpt id="p1">&lt;kbd&gt;</bpt>F9<ept id="p1">&lt;/kbd&gt;</ept> key when the cursor is over the <ph id="ph1">`WriteLine`</ph> line or by clicking the mouse in the left margin on the line where you want to set the breakpoint.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A red circle will appear in the margin next to the line of code.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When the breakpoint is reached, code execution will stop <bpt id="p1">*</bpt>before<ept id="p1">*</ept> the breakpoint line is executed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Open the debugger tab by selecting the Debug icon in the Visual Studio Code toolbar, selecting <bpt id="p1">**</bpt>View &gt; Debug<ept id="p1">**</ept> from the menu bar, or using the keyboard shortcut <bpt id="p2">&lt;kbd&gt;</bpt>CTRL<ept id="p2">&lt;/kbd&gt;</ept><ph id="ph1">+</ph><bpt id="p3">&lt;kbd&gt;</bpt>SHIFT<ept id="p3">&lt;/kbd&gt;</ept><ph id="ph2">+</ph><bpt id="p4">&lt;kbd&gt;</bpt>D<ept id="p4">&lt;/kbd&gt;</ept>:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Visual Studio Code Debugger</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Press the Play button to start the application under the debugger.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The app begins execution and runs to the breakpoint, where it stops.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Step into the <ph id="ph1">`Get`</ph> method and make sure that you have passed in the correct arguments.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Confirm that the answer is 42.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>