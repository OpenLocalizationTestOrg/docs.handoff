<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-an-asynccallback-delegate-and-state-object.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb62b191dc3b3246745f9f0ea3737ed74a2bf57b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\using-an-asynccallback-delegate-and-state-object.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c492c95be739f7bbe77f7c05d5a0206ce9a5777d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07aed4901482acade997b928763f0ad73a301edc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using an AsyncCallback Delegate and State Object</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using an AsyncCallback Delegate and State Object</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you use an <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate to process the results of the asynchronous operation in a separate thread, you can use a state object to pass information between the callbacks and to retrieve a final result.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic demonstrates that practice by expanding the example in <bpt id="p1">[</bpt>Using an AsyncCallback Delegate to End an Asynchronous Operation<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/using-an-asynccallback-delegate-to-end-an-asynchronous-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates using asynchronous methods in the <ph id="ph1">&lt;xref:System.Net.Dns&gt;</ph> class to retrieve Domain Name System (DNS) information for user-specified computers.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example defines and uses the <ph id="ph1">`HostRequest`</ph> class to store state information.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`HostRequest`</ph> object gets created for each computer name entered by the user.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This object is passed to the <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostByName%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProcessDnsInformation`</ph> method is called each time a request completes.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HostRequest`</ph> object is retrieved using the <ph id="ph2">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProcessDnsInformation`</ph> method uses the <ph id="ph2">`HostRequest`</ph> object to store the <ph id="ph3">&lt;xref:System.Net.IPHostEntry&gt;</ph> returned by the request or a <ph id="ph4">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> thrown by the request.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When all requests are complete, the application iterates over the <ph id="ph1">`HostRequest`</ph> objects and displays the DNS information or <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> error message.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using an AsyncCallback Delegate to End an Asynchronous Operation<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/using-an-asynccallback-delegate-to-end-an-asynchronous-operation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>