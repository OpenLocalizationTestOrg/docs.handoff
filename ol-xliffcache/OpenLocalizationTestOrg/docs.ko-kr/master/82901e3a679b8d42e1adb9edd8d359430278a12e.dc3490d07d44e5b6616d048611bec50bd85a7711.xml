{"content":"---\ntitle: \"FunctionTailcall2 Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"FunctionTailcall2\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"FunctionTailcall2\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"FunctionTailcall2 function [.NET Framework profiling]\"\nms.assetid: 249f9892-b5a9-41e1-b329-28a925904df6\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 15\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# FunctionTailcall2 Function\nNotifies the profiler that the currently executing function is about to perform a tail call to another function and provides information about the stack frame.  \n  \n## Syntax  \n  \n```  \nvoid __stdcall FunctionTailcall2 (  \n    [in] FunctionID         funcId,   \n    [in] UINT_PTR           clientData,   \n    [in] COR_PRF_FRAME_INFO func  \n);  \n```  \n  \n#### Parameters  \n `funcId`  \n [in] The identifier of the currently executing function that is about to make a tail call.  \n  \n `clientData`  \n [in] The remapped function identifier, which the profiler previously specified via [FunctionIDMapper](../../../../docs/framework/unmanaged-api/profiling/functionidmapper-function.md), of the currently executing function that is about to make a tail call.  \n  \n `func`  \n [in] A `COR_PRF_FRAME_INFO` value that points to information about the stack frame.  \n  \n The profiler should treat this as an opaque handle that can be passed back to the execution engine in the [ICorProfilerInfo2::GetFunctionInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getfunctioninfo2-method.md) method.  \n  \n## Remarks  \n The target function of the tail call will use the current stack frame, and will return directly to the caller of the function that made the tail call. This means that a [FunctionLeave2](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md) callback will not be issued for a function that is the target of a tail call.  \n  \n The value of the `func` parameter is not valid after the `FunctionTailcall2` function returns because the value may change or be destroyed.  \n  \n The `FunctionTailcall2` function is a callback; you must implement it. The implementation must use the `__declspec`(`naked`) storage-class attribute.  \n  \n The execution engine does not save any registers before calling this function.  \n  \n-   On entry, you must save all registers that you use, including those in the floating-point unit (FPU).  \n  \n-   On exit, you must restore the stack by popping off all the parameters that were pushed by its caller.  \n  \n The implementation of `FunctionTailcall2` should not block because it will delay garbage collection. The implementation should not attempt a garbage collection because the stack may not be in a garbage collection-friendly state. If a garbage collection is attempted, the runtime will block until `FunctionTailcall2` returns.  \n  \n Also, the `FunctionTailcall2` function must not call into managed code or in any way cause a managed memory allocation.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [FunctionEnter2 Function](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md)   \n [FunctionLeave2 Function](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)   \n [SetEnterLeaveFunctionHooks2 Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-setenterleavefunctionhooks2-method.md)   \n [Profiling Global Static Functions](../../../../docs/framework/unmanaged-api/profiling/profiling-global-static-functions.md)","nodes":[{"pos":[4,609],"nodes":[{"content":"FunctionTailcall2 Function | Microsoft Docs","nodes":[{"pos":[0,43],"content":"FunctionTailcall2 Function | Microsoft Docs","nodes":[{"content":"FunctionTailcall2 Function | Microsoft Docs","pos":[0,43]}]}],"pos":[6,52],"yaml":true}],"content":"title: \"FunctionTailcall2 Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"FunctionTailcall2\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"FunctionTailcall2\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"FunctionTailcall2 function [.NET Framework profiling]\"\nms.assetid: 249f9892-b5a9-41e1-b329-28a925904df6\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 15\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[616,642],"content":"FunctionTailcall2 Function","linkify":"FunctionTailcall2 Function","nodes":[{"content":"FunctionTailcall2 Function","pos":[0,26]}]},{"content":"Notifies the profiler that the currently executing function is about to perform a tail call to another function and provides information about the stack frame.","pos":[643,802]},{"pos":[811,817],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1002,1012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the currently executing function that is about to make a tail call.","pos":[1028,1118]},{"content":"[in] The remapped function identifier, which the profiler previously specified via <bpt id=\"p1\">[</bpt>FunctionIDMapper<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/functionidmapper-function.md)</ept>, of the currently executing function that is about to make a tail call.","pos":[1141,1395],"source":"[in] The remapped function identifier, which the profiler previously specified via [FunctionIDMapper](../../../../docs/framework/unmanaged-api/profiling/functionidmapper-function.md), of the currently executing function that is about to make a tail call."},{"content":"[in] A <ph id=\"ph1\">`COR_PRF_FRAME_INFO`</ph> value that points to information about the stack frame.","pos":[1412,1495],"source":"[in] A `COR_PRF_FRAME_INFO` value that points to information about the stack frame."},{"pos":[1502,1750],"content":"The profiler should treat this as an opaque handle that can be passed back to the execution engine in the <bpt id=\"p1\">[</bpt>ICorProfilerInfo2::GetFunctionInfo2<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getfunctioninfo2-method.md)</ept> method.","source":"The profiler should treat this as an opaque handle that can be passed back to the execution engine in the [ICorProfilerInfo2::GetFunctionInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getfunctioninfo2-method.md) method."},{"pos":[1759,1766],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The target function of the tail call will use the current stack frame, and will return directly to the caller of the function that made the tail call.","pos":[1770,1920]},{"content":"This means that a <bpt id=\"p1\">[</bpt>FunctionLeave2<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)</ept> callback will not be issued for a function that is the target of a tail call.","pos":[1921,2112],"source":" This means that a [FunctionLeave2](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md) callback will not be issued for a function that is the target of a tail call."},{"pos":[2119,2258],"content":"The value of the <ph id=\"ph1\">`func`</ph> parameter is not valid after the <ph id=\"ph2\">`FunctionTailcall2`</ph> function returns because the value may change or be destroyed.","source":"The value of the `func` parameter is not valid after the `FunctionTailcall2` function returns because the value may change or be destroyed."},{"content":"The <ph id=\"ph1\">`FunctionTailcall2`</ph> function is a callback; you must implement it.","pos":[2265,2335],"source":"The `FunctionTailcall2` function is a callback; you must implement it."},{"content":"The implementation must use the <ph id=\"ph1\">`__declspec`</ph>(<ph id=\"ph2\">`naked`</ph>) storage-class attribute.","pos":[2336,2414],"source":" The implementation must use the `__declspec`(`naked`) storage-class attribute."},{"content":"The execution engine does not save any registers before calling this function.","pos":[2421,2499]},{"content":"On entry, you must save all registers that you use, including those in the floating-point unit (FPU).","pos":[2509,2610]},{"content":"On exit, you must restore the stack by popping off all the parameters that were pushed by its caller.","pos":[2620,2721]},{"content":"The implementation of <ph id=\"ph1\">`FunctionTailcall2`</ph> should not block because it will delay garbage collection.","pos":[2728,2828],"source":"The implementation of `FunctionTailcall2` should not block because it will delay garbage collection."},{"content":"The implementation should not attempt a garbage collection because the stack may not be in a garbage collection-friendly state.","pos":[2829,2956]},{"content":"If a garbage collection is attempted, the runtime will block until <ph id=\"ph1\">`FunctionTailcall2`</ph> returns.","pos":[2957,3052],"source":" If a garbage collection is attempted, the runtime will block until `FunctionTailcall2` returns."},{"pos":[3059,3178],"content":"Also, the <ph id=\"ph1\">`FunctionTailcall2`</ph> function must not call into managed code or in any way cause a managed memory allocation.","source":"Also, the `FunctionTailcall2` function must not call into managed code or in any way cause a managed memory allocation."},{"pos":[3187,3199],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3203,3307],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3314,3337],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl","source":"**Header:** CorProf.idl"},{"pos":[3344,3369],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[3376,3484],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[3493,3501],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>FunctionEnter2 Function<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md)</ept><ph id=\"ph1\"> </ph>","pos":[3505,3610],"source":"[FunctionEnter2 Function](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md) "},{"content":"<bpt id=\"p1\">[</bpt>FunctionLeave2 Function<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)</ept><ph id=\"ph1\"> </ph>","pos":[3614,3719],"source":"[FunctionLeave2 Function](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md) "},{"content":"<bpt id=\"p1\">[</bpt>SetEnterLeaveFunctionHooks2 Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-setenterleavefunctionhooks2-method.md)</ept><ph id=\"ph1\"> </ph>","pos":[3723,3868],"source":"[SetEnterLeaveFunctionHooks2 Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-setenterleavefunctionhooks2-method.md) "},{"content":"<bpt id=\"p1\">[</bpt>Profiling Global Static Functions<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/profiling-global-static-functions.md)</ept>","pos":[3872,3996],"source":"[Profiling Global Static Functions](../../../../docs/framework/unmanaged-api/profiling/profiling-global-static-functions.md)"}]}