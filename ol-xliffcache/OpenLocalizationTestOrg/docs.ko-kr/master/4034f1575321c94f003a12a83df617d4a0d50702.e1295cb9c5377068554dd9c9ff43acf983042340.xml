{"content":"---\ntitle: \"Command-Line Arguments (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"command-line arguments [C#]\"\nms.assetid: 0e597e0d-ea7a-41ba-a38a-0198122f3c26\ncaps.latest.revision: 27\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Command-Line Arguments (C# Programming Guide)\nYou can send arguments to the `Main` method by defining the method in one of the following ways:  \n  \n [!code-cs[csProgGuideMain#2](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_1.cs)]  \n  \n [!code-cs[csProgGuideMain#3](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_2.cs)]  \n  \n> [!NOTE]\n>  To enable command-line arguments in the `Main` method in a Windows Forms application, you must manually modify the signature of `Main` in program.cs. The code generated by the Windows Forms designer creates a `Main` without an input parameter. You can also use <xref:System.Environment.CommandLine%2A?displayProperty=fullName> or <xref:System.Environment.GetCommandLineArgs%2A?displayProperty=fullName> to access the command-line arguments from any point in a console or Windows application.  \n  \n The parameter of the `Main` method is a <xref:System.String> array that represents the command-line arguments. Usually you determine whether arguments exist by testing the `Length` property, for example:  \n  \n [!code-cs[csProgGuideMain#4](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_3.cs)]  \n  \n You can also convert the string arguments to numeric types by using the <xref:System.Convert> class or the `Parse` method. For example, the following statement converts the `string` to a `long` number by using the <xref:System.Int64.Parse%2A> method:  \n  \n```  \nlong num = Int64.Parse(args[0]);  \n```  \n  \n It is also possible to use the C# type `long`, which aliases `Int64`:  \n  \n```  \nlong num = long.Parse(args[0]);  \n```  \n  \n You can also use the `Convert` class method `ToInt64` to do the same thing:  \n  \n```  \nlong num = Convert.ToInt64(s);  \n```  \n  \n For more information, see <xref:System.Int64.Parse%2A> and <xref:System.Convert>.  \n  \n## Example  \n The following example shows how to use command-line arguments in a console application. The application takes one argument at run time, converts the argument to an integer, and calculates the factorial of the number. If no arguments are supplied, the application issues a message that explains the correct usage of the program.  \n  \n To compile and run the application from a command prompt, follow these steps:  \n  \n1.  Paste the following code into any text editor, and then save the file as  a text file with the name `Factorial.cs`.  \n  \n     [!code-cs[csProgGuideMain#16](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_4.cs)]  \n  \n2.  From the **Start** screen or **Start** menu, open a Visual Studio **Developer Command Prompt** window, and then navigate to the folder that contains the file that you just created.  \n  \n3.  Enter the following command to compile the application.  \n  \n     `csc Factorial.cs`  \n  \n     If your application has no compilation errors, an executable file that's named `Factorial.exe` is created.  \n  \n4.  Enter the following command to calculate the factorial of 3:  \n  \n     `Factorial 3`  \n  \n5.  The command produces this output: `The factorial of 3 is 6.`  \n  \n> [!NOTE]\n>  When running an application in Visual Studio, you can specify command-line arguments in the [Debug Page, Project Designer](https://docs.microsoft.com/visualstudio/ide/reference/debug-page-project-designer).  \n  \n For more examples about how to use command-line arguments, see [How to: Create and Use Assemblies Using the Command Line](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4).  \n  \n## See Also  \n <xref:System.Environment?displayProperty=fullName>   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Main() and Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/index.md)   \n [How to: Display Command Line Arguments](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)   \n [How to: Access Command-Line Arguments Using foreach](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)   \n [Main() Return Values](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)   \n [Classes](../../../csharp/programming-guide/classes-and-structs/classes.md)","nodes":[{"pos":[4,551],"nodes":[{"content":"Command-Line Arguments (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,62],"content":"Command-Line Arguments (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Command-Line Arguments (C# Programming Guide) | Microsoft Docs","pos":[0,62]}]}],"pos":[6,71],"yaml":true}],"content":"title: \"Command-Line Arguments (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"command-line arguments [C#]\"\nms.assetid: 0e597e0d-ea7a-41ba-a38a-0198122f3c26\ncaps.latest.revision: 27\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[558,603],"content":"Command-Line Arguments (C# Programming Guide)","linkify":"Command-Line Arguments (C# Programming Guide)","nodes":[{"content":"Command-Line Arguments (C# Programming Guide)","pos":[0,45]}]},{"pos":[604,700],"content":"You can send arguments to the <ph id=\"ph1\">`Main`</ph> method by defining the method in one of the following ways:","source":"You can send arguments to the `Main` method by defining the method in one of the following ways:"},{"pos":[707,835],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideMain#2<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideMain#2](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_1.cs)]"},{"pos":[842,970],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideMain#3<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideMain#3](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_2.cs)]"},{"pos":[978,1480],"content":"[!NOTE]\n To enable command-line arguments in the `Main` method in a Windows Forms application, you must manually modify the signature of `Main` in program.cs. The code generated by the Windows Forms designer creates a `Main` without an input parameter. You can also use <xref:System.Environment.CommandLine%2A?displayProperty=fullName> or <xref:System.Environment.GetCommandLineArgs%2A?displayProperty=fullName> to access the command-line arguments from any point in a console or Windows application.","leadings":["","> "],"nodes":[{"content":"To enable command-line arguments in the `Main` method in a Windows Forms application, you must manually modify the signature of `Main` in program.cs. The code generated by the Windows Forms designer creates a `Main` without an input parameter. You can also use <xref:System.Environment.CommandLine%2A?displayProperty=fullName> or <xref:System.Environment.GetCommandLineArgs%2A?displayProperty=fullName> to access the command-line arguments from any point in a console or Windows application.","pos":[9,500],"nodes":[{"content":"To enable command-line arguments in the <ph id=\"ph1\">`Main`</ph> method in a Windows Forms application, you must manually modify the signature of <ph id=\"ph2\">`Main`</ph> in program.cs.","pos":[0,149],"source":"To enable command-line arguments in the `Main` method in a Windows Forms application, you must manually modify the signature of `Main` in program.cs."},{"content":"The code generated by the Windows Forms designer creates a <ph id=\"ph1\">`Main`</ph> without an input parameter.","pos":[150,243],"source":" The code generated by the Windows Forms designer creates a `Main` without an input parameter."},{"content":"You can also use <ph id=\"ph1\">&lt;xref:System.Environment.CommandLine%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Environment.GetCommandLineArgs%2A?displayProperty=fullName&gt;</ph> to access the command-line arguments from any point in a console or Windows application.","pos":[244,491],"source":" You can also use <xref:System.Environment.CommandLine%2A?displayProperty=fullName> or <xref:System.Environment.GetCommandLineArgs%2A?displayProperty=fullName> to access the command-line arguments from any point in a console or Windows application."}]}]},{"content":"The parameter of the <ph id=\"ph1\">`Main`</ph> method is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> array that represents the command-line arguments.","pos":[1487,1597],"source":"The parameter of the `Main` method is a <xref:System.String> array that represents the command-line arguments."},{"content":"Usually you determine whether arguments exist by testing the <ph id=\"ph1\">`Length`</ph> property, for example:","pos":[1598,1690],"source":" Usually you determine whether arguments exist by testing the `Length` property, for example:"},{"pos":[1697,1825],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideMain#4<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideMain#4](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_3.cs)]"},{"content":"You can also convert the string arguments to numeric types by using the <ph id=\"ph1\">&lt;xref:System.Convert&gt;</ph> class or the <ph id=\"ph2\">`Parse`</ph> method.","pos":[1832,1954],"source":"You can also convert the string arguments to numeric types by using the <xref:System.Convert> class or the `Parse` method."},{"content":"For example, the following statement converts the <ph id=\"ph1\">`string`</ph> to a <ph id=\"ph2\">`long`</ph> number by using the <ph id=\"ph3\">&lt;xref:System.Int64.Parse%2A&gt;</ph> method:","pos":[1955,2082],"source":" For example, the following statement converts the `string` to a `long` number by using the <xref:System.Int64.Parse%2A> method:"},{"pos":[2139,2208],"content":"It is also possible to use the C# type <ph id=\"ph1\">`long`</ph>, which aliases <ph id=\"ph2\">`Int64`</ph>:","source":"It is also possible to use the C# type `long`, which aliases `Int64`:"},{"pos":[2264,2339],"content":"You can also use the <ph id=\"ph1\">`Convert`</ph> class method <ph id=\"ph2\">`ToInt64`</ph> to do the same thing:","source":"You can also use the `Convert` class method `ToInt64` to do the same thing:"},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Int64.Parse%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Convert&gt;</ph>.","pos":[2394,2475],"source":"For more information, see <xref:System.Int64.Parse%2A> and <xref:System.Convert>."},{"pos":[2484,2491],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to use command-line arguments in a console application.","pos":[2495,2582]},{"content":"The application takes one argument at run time, converts the argument to an integer, and calculates the factorial of the number.","pos":[2583,2711]},{"content":"If no arguments are supplied, the application issues a message that explains the correct usage of the program.","pos":[2712,2822]},{"content":"To compile and run the application from a command prompt, follow these steps:","pos":[2829,2906]},{"pos":[2916,3031],"content":"Paste the following code into any text editor, and then save the file as  a text file with the name <ph id=\"ph1\">`Factorial.cs`</ph>.","source":"Paste the following code into any text editor, and then save the file as  a text file with the name `Factorial.cs`."},{"pos":[3042,3171],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideMain#16<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideMain#16](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/command-line-arguments_4.cs)]"},{"pos":[3181,3361],"content":"From the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> screen or <bpt id=\"p2\">**</bpt>Start<ept id=\"p2\">**</ept> menu, open a Visual Studio <bpt id=\"p3\">**</bpt>Developer Command Prompt<ept id=\"p3\">**</ept> window, and then navigate to the folder that contains the file that you just created.","source":"From the **Start** screen or **Start** menu, open a Visual Studio **Developer Command Prompt** window, and then navigate to the folder that contains the file that you just created."},{"content":"Enter the following command to compile the application.","pos":[3371,3426]},{"pos":[3466,3572],"content":"If your application has no compilation errors, an executable file that's named <ph id=\"ph1\">`Factorial.exe`</ph> is created.","source":"If your application has no compilation errors, an executable file that's named `Factorial.exe` is created."},{"content":"Enter the following command to calculate the factorial of 3:","pos":[3582,3642]},{"pos":[3676,3736],"content":"The command produces this output: <ph id=\"ph1\">`The factorial of 3 is 6.`</ph>","source":"The command produces this output: `The factorial of 3 is 6.`"},{"pos":[3744,3961],"content":"[!NOTE]\n When running an application in Visual Studio, you can specify command-line arguments in the [Debug Page, Project Designer](https://docs.microsoft.com/visualstudio/ide/reference/debug-page-project-designer).","leadings":["","> "],"nodes":[{"content":"When running an application in Visual Studio, you can specify command-line arguments in the <bpt id=\"p1\">[</bpt>Debug Page, Project Designer<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/reference/debug-page-project-designer)</ept>.","pos":[9,215],"source":"When running an application in Visual Studio, you can specify command-line arguments in the [Debug Page, Project Designer](https://docs.microsoft.com/visualstudio/ide/reference/debug-page-project-designer)."}]},{"pos":[3968,4162],"content":"For more examples about how to use command-line arguments, see <bpt id=\"p1\">[</bpt>How to: Create and Use Assemblies Using the Command Line<ept id=\"p1\">](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)</ept>.","source":"For more examples about how to use command-line arguments, see [How to: Create and Use Assemblies Using the Command Line](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)."},{"pos":[4171,4179],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Environment?displayProperty=fullName&gt;</ph>","pos":[4183,4233],"source":"<xref:System.Environment?displayProperty=fullName> "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4238,4305],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Main() and Command-Line Arguments<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4309,4411],"source":"[Main() and Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Display Command Line Arguments<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[4415,4554],"source":"[How to: Display Command Line Arguments](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Access Command-Line Arguments Using foreach<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)</ept><ph id=\"ph1\"> </ph>","pos":[4558,4723],"source":"[How to: Access Command-Line Arguments Using foreach](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md) "},{"content":"<bpt id=\"p1\">[</bpt>Main() Return Values<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)</ept><ph id=\"ph1\"> </ph>","pos":[4727,4829],"source":"[Main() Return Values](../../../csharp/programming-guide/main-and-command-args/main-return-values.md) "},{"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/classes.md)</ept>","pos":[4833,4908],"source":"[Classes](../../../csharp/programming-guide/classes-and-structs/classes.md)"}]}