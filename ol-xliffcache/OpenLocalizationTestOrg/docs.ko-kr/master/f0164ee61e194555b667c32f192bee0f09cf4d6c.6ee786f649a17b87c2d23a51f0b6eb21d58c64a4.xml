{"content":"---\ntitle: \"'TryCast' operands must be class-constrained type parameters, but '<typeparametername>' has no class constraint\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"BC30793\"\n  - \"vbc30793\"\nhelpviewer_keywords: \n  - \"BC30793\"\nms.assetid: a38a1da9-4413-4a69-a2ce-0b6d51c2c4ef\n---\n# 'TryCast' operands must be class-constrained type parameters, but '\\<typeparametername>' has no class constraint\nThe [TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md) operator is used with a type parameter operand that is not guaranteed to be a reference type.  \n  \n `TryCast` operates only on reference types, such as classes or interfaces. When you pass a type parameter as an argument to `TryCast`, you must constrain that type parameter to be a reference type. You can do this by including one or more of the following in the type parameter's constraint list:  \n  \n-   One or more interface names (the type argument must implement all of them)  \n  \n-   At most one class name (the type argument must inherit from it)  \n  \n-   The [New Operator](../../visual-basic/language-reference/operators/new-operator.md) constraint (the type argument must expose a parameterless constructor that the creating code can access, and therefore it must be a class)  \n  \n-   The [Class (Visual Basic)](../../visual-basic/language-reference/statements/class-statement.md) constraint (the type argument must be a reference type)  \n  \n **Error ID:** BC30793  \n  \n## To correct this error  \n  \n-   If you need to pass this type parameter to `TryCast`, constrain it with one or more of the constraints in the preceding list.  \n  \n-   If you cannot require the type parameter to accept only a reference type, you cannot use it with `TryCast`. You might be able to use the [CType Function](../../visual-basic/language-reference/functions/ctype-function.md) instead.  \n  \n## See also\n\n- [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [Type List](../../visual-basic/language-reference/statements/type-list.md)\n- [Value Types and Reference Types](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)\n- [Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)\n- [Implicit and Explicit Conversions](../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)\n","nodes":[{"pos":[4,272],"embed":true,"restype":"x-metadata","content":"title: \"'TryCast' operands must be class-constrained type parameters, but '<typeparametername>' has no class constraint\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"BC30793\"\n  - \"vbc30793\"\nhelpviewer_keywords: \n  - \"BC30793\"\nms.assetid: a38a1da9-4413-4a69-a2ce-0b6d51c2c4ef","nodes":[{"content":"'TryCast' operands must be class-constrained type parameters, but '<typeparametername>' has no class constraint","nodes":[{"pos":[0,111],"content":"'TryCast' operands must be class-constrained type parameters, but '<ph id=\"ph1\">&lt;typeparametername&gt;</ph>' has no class constraint","source":"'TryCast' operands must be class-constrained type parameters, but '<typeparametername>' has no class constraint"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[279,391],"content":"'TryCast' operands must be class-constrained type parameters, but '\\<typeparametername>' has no class constraint","linkify":"'TryCast' operands must be class-constrained type parameters, but '\\<typeparametername>' has no class constraint","nodes":[{"content":"'TryCast' operands must be class-constrained type parameters, but '<ph id=\"ph1\">\\&lt;</ph>typeparametername&gt;' has no class constraint","pos":[0,112],"source":"'TryCast' operands must be class-constrained type parameters, but '\\<typeparametername>' has no class constraint"}]},{"pos":[392,577],"content":"The <bpt id=\"p1\">[</bpt>TryCast Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/trycast-operator.md)</ept> operator is used with a type parameter operand that is not guaranteed to be a reference type.","source":"The [TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md) operator is used with a type parameter operand that is not guaranteed to be a reference type."},{"content":"<ph id=\"ph1\">`TryCast`</ph> operates only on reference types, such as classes or interfaces.","pos":[584,658],"source":"`TryCast` operates only on reference types, such as classes or interfaces."},{"content":"When you pass a type parameter as an argument to <ph id=\"ph1\">`TryCast`</ph>, you must constrain that type parameter to be a reference type.","pos":[659,781],"source":" When you pass a type parameter as an argument to `TryCast`, you must constrain that type parameter to be a reference type."},{"content":"You can do this by including one or more of the following in the type parameter's constraint list:","pos":[782,880]},{"content":"One or more interface names (the type argument must implement all of them)","pos":[890,964]},{"content":"At most one class name (the type argument must inherit from it)","pos":[974,1037]},{"pos":[1047,1269],"content":"The <bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/new-operator.md)</ept> constraint (the type argument must expose a parameterless constructor that the creating code can access, and therefore it must be a class)","source":"The [New Operator](../../visual-basic/language-reference/operators/new-operator.md) constraint (the type argument must expose a parameterless constructor that the creating code can access, and therefore it must be a class)"},{"pos":[1279,1430],"content":"The <bpt id=\"p1\">[</bpt>Class (Visual Basic)<ept id=\"p1\">](../../visual-basic/language-reference/statements/class-statement.md)</ept> constraint (the type argument must be a reference type)","source":"The [Class (Visual Basic)](../../visual-basic/language-reference/statements/class-statement.md) constraint (the type argument must be a reference type)"},{"pos":[1437,1458],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC30793","source":"**Error ID:** BC30793"},{"pos":[1467,1488],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[1498,1623],"content":"If you need to pass this type parameter to <ph id=\"ph1\">`TryCast`</ph>, constrain it with one or more of the constraints in the preceding list.","source":"If you need to pass this type parameter to `TryCast`, constrain it with one or more of the constraints in the preceding list."},{"content":"If you cannot require the type parameter to accept only a reference type, you cannot use it with <ph id=\"ph1\">`TryCast`</ph>.","pos":[1633,1740],"source":"If you cannot require the type parameter to accept only a reference type, you cannot use it with `TryCast`."},{"content":"You might be able to use the <bpt id=\"p1\">[</bpt>CType Function<ept id=\"p1\">](../../visual-basic/language-reference/functions/ctype-function.md)</ept> instead.","pos":[1741,1862],"source":" You might be able to use the [CType Function](../../visual-basic/language-reference/functions/ctype-function.md) instead."},{"pos":[1871,1879],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1883,1998],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[2001,2075],"content":"<bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../visual-basic/language-reference/statements/type-list.md)</ept>","source":"[Type List](../../visual-basic/language-reference/statements/type-list.md)"},{"pos":[2078,2213],"content":"<bpt id=\"p1\">[</bpt>Value Types and Reference Types<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>","source":"[Value Types and Reference Types](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)"},{"pos":[2216,2357],"content":"<bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>","source":"[Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)"},{"pos":[2360,2499],"content":"<bpt id=\"p1\">[</bpt>Implicit and Explicit Conversions<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>","source":"[Implicit and Explicit Conversions](../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)"}]}