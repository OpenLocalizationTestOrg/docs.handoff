<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="readonly.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7f3b1b1525277bf948070c9121d151f9f520127</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\readonly.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0466868eff6e700a86a1fe66033b99523fd355ab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02c6475e38e44205516b834d777500431478043f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>readonly keyword - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>readonly (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`readonly`</ph> keyword is a modifier that can be used in three contexts:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">[</bpt>field declaration<ept id="p1">](#readonly-field-example)</ept>, <ph id="ph1">`readonly`</ph> indicates that assignment to the field can only occur as part of the declaration or in a constructor in the same class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">[</bpt><ph id="ph1">`readonly struct`</ph> definition<ept id="p1">](#readonly-struct-example)</ept>, <ph id="ph2">`readonly`</ph> indicates that the <ph id="ph3">`struct`</ph> is immutable.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">[</bpt><ph id="ph1">`ref readonly`</ph> method return<ept id="p1">](#ref-readonly-return-example)</ept>, the <ph id="ph2">`readonly`</ph> modifier indicates that method returns a reference and writes are not allowed to that reference.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The final two contexts were added in C# 7.2.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Readonly field example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this example, the value of the field <ph id="ph1">`year`</ph> cannot be changed in the method <ph id="ph2">`ChangeYear`</ph>, even though it is assigned a value in the class constructor:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can assign a value to a <ph id="ph1">`readonly`</ph> field only in the following contexts:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When the variable is initialized in the declaration, for example:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In an instance constructor of the class that contains the instance field declaration.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the static constructor of the class that contains the static field declaration.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These constructor contexts are also the only contexts in which it is valid to pass a <ph id="ph1">`readonly`</ph> field as an <bpt id="p1">[</bpt>out<ept id="p1">](out-parameter-modifier.md)</ept> or <bpt id="p2">[</bpt>ref<ept id="p2">](ref.md)</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`readonly`</ph> keyword is different from the <bpt id="p1">[</bpt>const<ept id="p1">](const.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> field can only be initialized at the declaration of the field.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`readonly`</ph> field can be assigned multiple times in the field declaration and in any constructor.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`readonly`</ph> fields can have different values depending on the constructor used.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Also, while a <ph id="ph1">`const`</ph> field is a compile-time constant, the <ph id="ph2">`readonly`</ph> field can be used for runtime constants as in the following example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the preceding example, if you use a statement like the following example:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>you will get the compiler error message:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Readonly struct example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`readonly`</ph> modifier on a <ph id="ph2">`struct`</ph> definition declares that the struct is <bpt id="p1">**</bpt>immutable<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Every instance field of the <ph id="ph1">`struct`</ph> must be marked <ph id="ph2">`readonly`</ph>, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The preceding example uses <bpt id="p1">[</bpt>readonly auto properties<ept id="p1">](../../properties.md#read-only)</ept> to declare its storage.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>That instructs the compiler to create <ph id="ph1">`readonly`</ph> backing fields for those properties.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You could also declare <ph id="ph1">`readonly`</ph> fields directly:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Adding a field not marked <ph id="ph1">`readonly`</ph> generates compiler error <ph id="ph2">`CS8340`</ph>: "Instance fields of readonly structs must be readonly."</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Ref readonly return example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`readonly`</ph> modifier on a <ph id="ph2">`ref return`</ph> indicates that the returned reference cannot be modified.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example returns a reference to the origin.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It uses the <ph id="ph1">`readonly`</ph> modifier to indicate that callers cannot modify the origin:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type returned doesn't need to be a <ph id="ph1">`readonly struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Any type that can be returned by <ph id="ph1">`ref`</ph> can be returned by <ph id="ph2">`ref readonly`</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Modifiers<ept id="p1">](modifiers.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const<ept id="p1">](const.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fields<ept id="p1">](../../programming-guide/classes-and-structs/fields.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>