{"content":"---\ntitle: Design with nullable reference types\ndescription: This advanced tutorial provides an introduction to nullable reference types. You'll learn to express your design intent on when reference values may be null, and have the compiler enforce when they cannot be null.\nms.date: 02/19/2019\nms.custom: mvc\n---\n# Tutorial: Express your design intent more clearly with nullable and non-nullable reference types\n\nC# 8 introduces **nullable reference types**, which complement reference types the same way nullable value types complement value types. You declare a variable to be a **nullable reference type** by appending a `?` to the type. For example, `string?` represents a nullable `string`. You can use these new types to more clearly express your design intent: some variables *must always have a value*, others *may be missing a value*.\n\nIn this tutorial, you'll learn how to:\n\n> [!div class=\"checklist\"]\n> * Incorporate nullable and non-nullable reference types into your designs\n> * Enable nullable reference type checks throughout your code.\n> * Write code where the compiler enforces those design decisions.\n> * Use the nullable reference feature in your own designs\n\n## Prerequisites\n\nYou'll need to set up your machine to run .NET Core, including the C# 8.0 beta compiler. The C# 8 beta compiler is available with [Visual Studio 2019 preview 4](https://visualstudio.microsoft.com/vs/preview/?utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=inline+link&utm_content=download+vs2019+preview), or [.NET Core 3.0 preview 3](https://dotnet.microsoft.com/download/dotnet-core/3.0).\n\nThis tutorial assumes you're familiar with C# and .NET, including either Visual Studio or the .NET Core CLI.\n\n## Incorporate nullable reference types into your designs\n\nIn this tutorial, you'll build a library that models running a survey. The code uses both nullable reference types and non-nullable reference types to represent the real-world concepts. The survey questions can never be null. A respondent might prefer not to answer a question. The responses might be null in this case.\n\nThe code you'll write for this sample expresses that intent, and the compiler enforces that intent.\n\n## Create the application and enable nullable reference types\n\nCreate a new console application either in Visual Studio or from the command line using `dotnet new console`. Name the application `NullableIntroduction`. Once you've created the application, you'll need to enable C# 8 beta features. Open the `csproj` file and add a `LangVersion` element to the `PropertyGroup` element. You must opt into the **nullable reference types** feature, even in C# 8 projects. That's because once the feature is turned on, existing reference variable declarations become **non-nullable reference types**. While that decision will help find issues where existing code may not have proper null-checks, it may not accurately reflect your original design intent. You turn on the feature by setting the `NullableContextOptions` element to `enable`:\n\n```xml\n<LangVersion>8.0</LangVersion>\n<NullableContextOptions>enable</NullableContextOptions>\n```\n\n> [!NOTE]\n> When C# 8 is released (not in preview mode), the `NullableContextOptions` element will be added by new project templates. Until then, you'll need to add it manually.\n\n### Design the types for the application\n\nThis survey application requires creating a number of classes:\n\n- A class that models the list of questions.\n- A class that models a list of people contacted for the survey.\n- A class that models the answers from a person that took the survey.\n\nThese types will make use of both nullable and non-nullable reference types to express which members are required and which members are optional. Nullable reference types communicate that design intent clearly:\n\n- The questions that are part of the survey can never be null: It makes no sense to ask an empty question.\n- The respondents can never be null. You'll want to track people you contacted, even respondents that declined to participate.\n- Any response to a question may be null. Respondents can decline to answer some or all questions.\n\nIf you've programmed in C#, you may be so accustomed to reference types that allow null values that you may have missed other opportunities to declare non-nullable instances:\n\n- The collection of questions should be non-nullable.\n- The collection of respondents should be non-nullable.\n\nAs you write the code, you'll see that a non-nullable reference type as the default for references avoids common mistakes that could lead to null reference exceptions. One lesson from this tutorial is that you made decisions about which variables could or could not be null. The language didn't provide syntax to express those decisions. Now it does.\n\nThe app you'll build will do the following steps:\n\n1. Create a survey and add questions to it.\n1. Create a pseudo-random set of respondents for the survey.\n1. Contact respondents until the completed survey size reaches the goal number.\n1. Write out important statistics on the survey responses.\n\n## Build the survey with nullable and non-nullable types\n\nThe first code you'll write creates the survey. You'll write classes to model a survey question and a survey run. Your survey has three types of questions, distinguished by the format of the answer: Yes/No answers, number answers, and text answers. Create a `public` `SurveyQuestion` class:\n\n```csharp\nnamespace NullableIntroduction\n{\n    public class SurveyQuestion\n    {\n    }\n}\n```\n\nThe compiler interprets every reference type variable declaration as a **non-nullable** reference type for code in a nullable enabled context. You can see your first warning by adding properties for the question text and the type of question, as shown in the following code:\n\n```csharp\nnamespace NullableIntroduction\n{\n    public enum QuestionType\n    {\n        YesNo,\n        Number,\n        Text\n    }\n\n    public class SurveyQuestion\n    {\n        public string QuestionText { get; }\n        public QuestionType TypeOfQuestion { get; }\n    }\n}\n```\n\nBecause you haven't initialized `QuestionText`, the compiler issues a warning that a non-nullable property hasn't been initialized. Your design requires the question text to be non-null, so you add a constructor to initialize it and the `QuestionType` value as well. The finished class definition looks like the following code:\n\n[!code-csharp[DefineQuestion](../../../samples/csharp/NullableIntroduction/NullableIntroduction/SurveyQuestion.cs)]\n\nAdding the constructor removes the warning. The constructor argument is also a non-nullable reference type, so the compiler doesn't issue any warnings.\n\nNext, create a `public` class named `SurveyRun`. This class contains a list of `SurveyQuestion` objects and methods to add questions to the survey, as shown in the following code:\n\n```csharp\nusing System.Collections.Generic;\n\nnamespace NullableIntroduction\n{\n    public class SurveyRun\n    {\n        private List<SurveyQuestion> surveyQuestions = new List<SurveyQuestion>();\n\n        public void AddQuestion(QuestionType type, string question) =>\n            AddQuestion(new SurveyQuestion(type, question));\n        public void AddQuestion(SurveyQuestion surveyQuestion) => surveyQuestions.Add(surveyQuestion);\n    }\n}\n```\n\nAs before, you must initialize the list object to a non-null value or the compiler issues a warning. There are no null checks in the second overload of `AddQuestion` because they aren't needed: You've declared that variable to be non-nullable. Its value can't be `null`.\n\nSwitch to `Program.cs` in your editor and replace the contents of `Main` with the following lines of code:\n\n[!code-csharp[AddQuestions](../../../samples/csharp/NullableIntroduction/NullableIntroduction/Program.cs#AddQuestions)]\n\nBecause the entire project is in a nullable enabled context, you'll get warnings when you pass `null` to any method expecting a non-nullable reference type. Try it by adding the following line to `Main`:\n\n```csharp\nsurveyRun.AddQuestion(QuestionType.Text, default);\n```\n\n## Create respondents and get answers to the survey\n\nNext, write the code that generates answers to the survey. This process involves several small tasks:\n\n1. Build a method that generates respondent objects. These represent people asked to fill out the survey.\n1. Build logic to simulate asking the questions to a respondent and collecting answers or noting that a respondent didn't answer.\n1. Repeat until enough respondents have answered the survey.\n\nYou'll need a class to represent a survey response, so add that now. Enable nullable support. Add an `Id` property and a constructor that initializes it, as shown in the following code:\n\n```csharp\nnamespace NullableIntroduction\n{\n    public class SurveyResponse\n    {\n        public int Id { get; }\n\n        public SurveyResponse(int id) => Id = id;\n    }\n}\n```\n\nNext, add a `static` method to create new participants by generating a random ID:\n\n[!code-csharp[GenerateRespondents](../../../samples/csharp/NullableIntroduction/NullableIntroduction/SurveyResponse.cs#Random)]\n\nThe main responsibility of this class is to generate the responses for a participant to the questions in the survey. This responsibility has a few steps:\n\n1. Ask for participation in the survey. If the person doesn't consent, return a missing (or null) response.\n1. Ask each question and record the answer. Each answer may also be missing (or null).\n\nAdd the following code to your `SurveyResponse` class:\n\n[!code-csharp[AnswerSurvey](../../../samples/csharp/NullableIntroduction/NullableIntroduction/SurveyResponse.cs#AnswerSurvey)]\n\nThe storage for the survey answers is a `Dictionary<int, string>?`, indicating that it may be null. You're using the new language feature to declare your design intent, both to the compiler and to anyone reading your code later. If you ever dereference `surveyResponses` without checking for the null value first, you'll get a compiler warning. You don't get a warning in the `AnswerSurvey` method because the compiler can determine the `surveyResponses` variable was set to a non-null value above.\n\nUsing `null` for missing answers highlights a key point for working with nullable reference types: your goal isn't to remove all `null` values from your program. Rather, your goal is to ensure that the code you write expresses the intent of your design. Missing values are a necessary concept to express in your code. The `null` value is a clear way to express those missing values. Trying to remove all `null` values only leads to defining some other way to express those missing values without `null`.\n\nNext, you need to write the `PerformSurvey` method in the `SurveyRun` class. Add the following code in the `SurveyRun` class:\n\n[!code-csharp[PerformSurvey](../../../samples/csharp/NullableIntroduction/NullableIntroduction/SurveyRun.cs#PerformSurvey)]\n\nHere again, your choice of a nullable `List<SurveyResponse>?` indicates the response may be null. That indicates the survey hasn't been given to any respondents yet. Notice that respondents are added until enough have consented.\n\nThe last step to run the survey is to add a call to perform the survey at the end of the `Main` method:\n\n[!code-csharp[RunSurvey](../../../samples/csharp/NullableIntroduction/NullableIntroduction/Program.cs#RunSurvey)]\n\n## Examine survey responses\n\nThe last step is to display survey results. You'll add code to many of the classes you've written. This code demonstrates the value of distinguishing nullable and non-nullable reference types. Start by adding the following two expression-bodied members to the `SurveyResponse` class:\n\n[!code-csharp[ReportResponses](../../../samples/csharp/NullableIntroduction/NullableIntroduction/SurveyResponse.cs#SurveyStatus)]\n\nBecause `surveyResponses` is a non-nullable reference type, no checks are necessary before de-referencing it. The `Answer` method returns a non-nullable string, so choose the overload of `GetValueOrDefault` that takes a second argument for the default value.\n\nNext, add these three expression-bodied members to the `SurveyRun` class:\n\n[!code-csharp[ReportResults](../../../samples/csharp/NullableIntroduction/NullableIntroduction/SurveyRun.cs#RunReport)]\n\nThe `AllParticipants` member must take into account that the `respondents` variable might be null, but the return value can't be null. If you change that expression by removing the `??` and the empty sequence that follows, the compiler warns you the method might return `null` and its return signature returns a non-nullable type.\n\nFinally, add the following loop at the bottom of the `Main` method:\n\n[!code-csharp[DisplaySurveyResults](../../../samples/csharp/NullableIntroduction/NullableIntroduction/Program.cs#WriteAnswers)]\n\nYou don't need any `null` checks in this code because you've designed the underlying interfaces so that they all return non-nullable reference types.\n\n## Get the code\n\nYou can get the code for the finished tutorial from our [samples](https://github.com/dotnet/samples) repository in the [csharp/NullableIntroduction](https://github.com/dotnet/samples/tree/master/csharp/NullableIntroduction) folder.\n\nExperiment by changing the type declarations between nullable and non-nullable reference types. See how that generates different warnings to ensure you don't accidentally dereference a `null`.\n\n## Next steps\n\nLearn more by migrating an existing application to use nullable reference types:\n> [!div class=\"nextstepaction\"]\n> [Upgrade an application to use nullable reference types](upgrade-to-nullable-references.md)\n","nodes":[{"pos":[4,309],"embed":true,"restype":"x-metadata","content":"title: Design with nullable reference types\ndescription: This advanced tutorial provides an introduction to nullable reference types. You'll learn to express your design intent on when reference values may be null, and have the compiler enforce when they cannot be null.\nms.date: 02/19/2019\nms.custom: mvc","nodes":[{"content":"Design with nullable reference types","nodes":[{"pos":[0,36],"content":"Design with nullable reference types","nodes":[{"content":"Design with nullable reference types","pos":[0,36]}]}],"path":["title"],"nosxs":false},{"content":"This advanced tutorial provides an introduction to nullable reference types. You'll learn to express your design intent on when reference values may be null, and have the compiler enforce when they cannot be null.","nodes":[{"pos":[0,213],"content":"This advanced tutorial provides an introduction to nullable reference types. You'll learn to express your design intent on when reference values may be null, and have the compiler enforce when they cannot be null.","nodes":[{"content":"This advanced tutorial provides an introduction to nullable reference types. You'll learn to express your design intent on when reference values may be null, and have the compiler enforce when they cannot be null.","pos":[0,213],"nodes":[{"content":"This advanced tutorial provides an introduction to nullable reference types.","pos":[0,76]},{"content":"You'll learn to express your design intent on when reference values may be null, and have the compiler enforce when they cannot be null.","pos":[77,213]}]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[316,412],"content":"Tutorial: Express your design intent more clearly with nullable and non-nullable reference types","linkify":"Tutorial: Express your design intent more clearly with nullable and non-nullable reference types","nodes":[{"content":"Tutorial: Express your design intent more clearly with nullable and non-nullable reference types","pos":[0,96]}]},{"content":"C# 8 introduces <bpt id=\"p1\">**</bpt>nullable reference types<ept id=\"p1\">**</ept>, which complement reference types the same way nullable value types complement value types.","pos":[414,550],"source":"C# 8 introduces **nullable reference types**, which complement reference types the same way nullable value types complement value types."},{"content":"You declare a variable to be a <bpt id=\"p1\">**</bpt>nullable reference type<ept id=\"p1\">**</ept> by appending a <ph id=\"ph1\">`?`</ph> to the type.","pos":[551,641],"source":" You declare a variable to be a **nullable reference type** by appending a `?` to the type."},{"content":"For example, <ph id=\"ph1\">`string?`</ph> represents a nullable <ph id=\"ph2\">`string`</ph>.","pos":[642,696],"source":" For example, `string?` represents a nullable `string`."},{"content":"You can use these new types to more clearly express your design intent: some variables <bpt id=\"p1\">*</bpt>must always have a value<ept id=\"p1\">*</ept>, others <bpt id=\"p2\">*</bpt>may be missing a value<ept id=\"p2\">*</ept>.","pos":[697,844],"source":" You can use these new types to more clearly express your design intent: some variables *must always have a value*, others *may be missing a value*."},{"content":"In this tutorial, you'll learn how to:","pos":[846,884]},{"content":"Incorporate nullable and non-nullable reference types into your designs","pos":[917,988]},{"content":"Enable nullable reference type checks throughout your code.","pos":[993,1052]},{"content":"Write code where the compiler enforces those design decisions.","pos":[1057,1119]},{"content":"Use the nullable reference feature in your own designs","pos":[1124,1178]},{"pos":[1183,1196],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"You'll need to set up your machine to run .NET Core, including the C# 8.0 beta compiler.","pos":[1198,1286]},{"content":"The C# 8 beta compiler is available with <bpt id=\"p1\">[</bpt>Visual Studio 2019 preview 4<ept id=\"p1\">](https://visualstudio.microsoft.com/vs/preview/?utm_medium=microsoft&amp;utm_source=docs.microsoft.com&amp;utm_campaign=inline+link&amp;utm_content=download+vs2019+preview)</ept>, or <bpt id=\"p2\">[</bpt>.NET Core 3.0 preview 3<ept id=\"p2\">](https://dotnet.microsoft.com/download/dotnet-core/3.0)</ept>.","pos":[1287,1604],"source":" The C# 8 beta compiler is available with [Visual Studio 2019 preview 4](https://visualstudio.microsoft.com/vs/preview/?utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=inline+link&utm_content=download+vs2019+preview), or [.NET Core 3.0 preview 3](https://dotnet.microsoft.com/download/dotnet-core/3.0)."},{"content":"This tutorial assumes you're familiar with C# and .NET, including either Visual Studio or the .NET Core CLI.","pos":[1606,1714]},{"pos":[1719,1773],"content":"Incorporate nullable reference types into your designs","linkify":"Incorporate nullable reference types into your designs","nodes":[{"content":"Incorporate nullable reference types into your designs","pos":[0,54]}]},{"content":"In this tutorial, you'll build a library that models running a survey.","pos":[1775,1845]},{"content":"The code uses both nullable reference types and non-nullable reference types to represent the real-world concepts.","pos":[1846,1960]},{"content":"The survey questions can never be null.","pos":[1961,2000]},{"content":"A respondent might prefer not to answer a question.","pos":[2001,2052]},{"content":"The responses might be null in this case.","pos":[2053,2094]},{"content":"The code you'll write for this sample expresses that intent, and the compiler enforces that intent.","pos":[2096,2195]},{"pos":[2200,2258],"content":"Create the application and enable nullable reference types","linkify":"Create the application and enable nullable reference types","nodes":[{"content":"Create the application and enable nullable reference types","pos":[0,58]}]},{"content":"Create a new console application either in Visual Studio or from the command line using <ph id=\"ph1\">`dotnet new console`</ph>.","pos":[2260,2369],"source":"Create a new console application either in Visual Studio or from the command line using `dotnet new console`."},{"content":"Name the application <ph id=\"ph1\">`NullableIntroduction`</ph>.","pos":[2370,2414],"source":" Name the application `NullableIntroduction`."},{"content":"Once you've created the application, you'll need to enable C# 8 beta features.","pos":[2415,2493]},{"content":"Open the <ph id=\"ph1\">`csproj`</ph> file and add a <ph id=\"ph2\">`LangVersion`</ph> element to the <ph id=\"ph3\">`PropertyGroup`</ph> element.","pos":[2494,2580],"source":" Open the `csproj` file and add a `LangVersion` element to the `PropertyGroup` element."},{"content":"You must opt into the <bpt id=\"p1\">**</bpt>nullable reference types<ept id=\"p1\">**</ept> feature, even in C# 8 projects.","pos":[2581,2663],"source":" You must opt into the **nullable reference types** feature, even in C# 8 projects."},{"content":"That's because once the feature is turned on, existing reference variable declarations become <bpt id=\"p1\">**</bpt>non-nullable reference types<ept id=\"p1\">**</ept>.","pos":[2664,2791],"source":" That's because once the feature is turned on, existing reference variable declarations become **non-nullable reference types**."},{"content":"While that decision will help find issues where existing code may not have proper null-checks, it may not accurately reflect your original design intent.","pos":[2792,2945]},{"content":"You turn on the feature by setting the <ph id=\"ph1\">`NullableContextOptions`</ph> element to <ph id=\"ph2\">`enable`</ph>:","pos":[2946,3030],"source":" You turn on the feature by setting the `NullableContextOptions` element to `enable`:"},{"pos":[3133,3308],"content":"[!NOTE]\nWhen C# 8 is released (not in preview mode), the `NullableContextOptions` element will be added by new project templates. Until then, you'll need to add it manually.","leadings":["","> "],"nodes":[{"content":"When C# 8 is released (not in preview mode), the `NullableContextOptions` element will be added by new project templates. Until then, you'll need to add it manually.","pos":[8,173],"nodes":[{"content":"When C# 8 is released (not in preview mode), the <ph id=\"ph1\">`NullableContextOptions`</ph> element will be added by new project templates.","pos":[0,121],"source":"When C# 8 is released (not in preview mode), the `NullableContextOptions` element will be added by new project templates."},{"content":"Until then, you'll need to add it manually.","pos":[122,165]}]}]},{"pos":[3314,3350],"content":"Design the types for the application","linkify":"Design the types for the application","nodes":[{"content":"Design the types for the application","pos":[0,36]}]},{"content":"This survey application requires creating a number of classes:","pos":[3352,3414]},{"content":"A class that models the list of questions.","pos":[3418,3460]},{"content":"A class that models a list of people contacted for the survey.","pos":[3463,3525]},{"content":"A class that models the answers from a person that took the survey.","pos":[3528,3595]},{"content":"These types will make use of both nullable and non-nullable reference types to express which members are required and which members are optional.","pos":[3597,3742]},{"content":"Nullable reference types communicate that design intent clearly:","pos":[3743,3807]},{"content":"The questions that are part of the survey can never be null: It makes no sense to ask an empty question.","pos":[3811,3915]},{"content":"The respondents can never be null.","pos":[3918,3952]},{"content":"You'll want to track people you contacted, even respondents that declined to participate.","pos":[3953,4042]},{"content":"Any response to a question may be null.","pos":[4045,4084]},{"content":"Respondents can decline to answer some or all questions.","pos":[4085,4141]},{"content":"If you've programmed in C#, you may be so accustomed to reference types that allow null values that you may have missed other opportunities to declare non-nullable instances:","pos":[4143,4317]},{"content":"The collection of questions should be non-nullable.","pos":[4321,4372]},{"content":"The collection of respondents should be non-nullable.","pos":[4375,4428]},{"content":"As you write the code, you'll see that a non-nullable reference type as the default for references avoids common mistakes that could lead to null reference exceptions.","pos":[4430,4597]},{"content":"One lesson from this tutorial is that you made decisions about which variables could or could not be null.","pos":[4598,4704]},{"content":"The language didn't provide syntax to express those decisions.","pos":[4705,4767]},{"content":"Now it does.","pos":[4768,4780]},{"content":"The app you'll build will do the following steps:","pos":[4782,4831]},{"content":"Create a survey and add questions to it.","pos":[4836,4876]},{"content":"Create a pseudo-random set of respondents for the survey.","pos":[4880,4937]},{"content":"Contact respondents until the completed survey size reaches the goal number.","pos":[4941,5017]},{"content":"Write out important statistics on the survey responses.","pos":[5021,5076]},{"pos":[5081,5134],"content":"Build the survey with nullable and non-nullable types","linkify":"Build the survey with nullable and non-nullable types","nodes":[{"content":"Build the survey with nullable and non-nullable types","pos":[0,53]}]},{"content":"The first code you'll write creates the survey.","pos":[5136,5183]},{"content":"You'll write classes to model a survey question and a survey run.","pos":[5184,5249]},{"content":"Your survey has three types of questions, distinguished by the format of the answer: Yes/No answers, number answers, and text answers.","pos":[5250,5384]},{"content":"Create a <ph id=\"ph1\">`public`</ph> <ph id=\"ph2\">`SurveyQuestion`</ph> class:","pos":[5385,5426],"source":" Create a `public` `SurveyQuestion` class:"},{"content":"The compiler interprets every reference type variable declaration as a <bpt id=\"p1\">**</bpt>non-nullable<ept id=\"p1\">**</ept> reference type for code in a nullable enabled context.","pos":[5522,5664],"source":"The compiler interprets every reference type variable declaration as a **non-nullable** reference type for code in a nullable enabled context."},{"content":"You can see your first warning by adding properties for the question text and the type of question, as shown in the following code:","pos":[5665,5796]},{"content":"Because you haven't initialized <ph id=\"ph1\">`QuestionText`</ph>, the compiler issues a warning that a non-nullable property hasn't been initialized.","pos":[6074,6205],"source":"Because you haven't initialized `QuestionText`, the compiler issues a warning that a non-nullable property hasn't been initialized."},{"content":"Your design requires the question text to be non-null, so you add a constructor to initialize it and the <ph id=\"ph1\">`QuestionType`</ph> value as well.","pos":[6206,6340],"source":" Your design requires the question text to be non-null, so you add a constructor to initialize it and the `QuestionType` value as well."},{"content":"The finished class definition looks like the following code:","pos":[6341,6401]},{"content":"Adding the constructor removes the warning.","pos":[6520,6563]},{"content":"The constructor argument is also a non-nullable reference type, so the compiler doesn't issue any warnings.","pos":[6564,6671]},{"content":"Next, create a <ph id=\"ph1\">`public`</ph> class named <ph id=\"ph2\">`SurveyRun`</ph>.","pos":[6673,6721],"source":"Next, create a `public` class named `SurveyRun`."},{"content":"This class contains a list of <ph id=\"ph1\">`SurveyQuestion`</ph> objects and methods to add questions to the survey, as shown in the following code:","pos":[6722,6852],"source":" This class contains a list of `SurveyQuestion` objects and methods to add questions to the survey, as shown in the following code:"},{"content":"As before, you must initialize the list object to a non-null value or the compiler issues a warning.","pos":[7297,7397]},{"content":"There are no null checks in the second overload of <ph id=\"ph1\">`AddQuestion`</ph> because they aren't needed: You've declared that variable to be non-nullable.","pos":[7398,7540],"source":" There are no null checks in the second overload of `AddQuestion` because they aren't needed: You've declared that variable to be non-nullable."},{"content":"Its value can't be <ph id=\"ph1\">`null`</ph>.","pos":[7541,7567],"source":" Its value can't be `null`."},{"pos":[7569,7675],"content":"Switch to <ph id=\"ph1\">`Program.cs`</ph> in your editor and replace the contents of <ph id=\"ph2\">`Main`</ph> with the following lines of code:","source":"Switch to `Program.cs` in your editor and replace the contents of `Main` with the following lines of code:"},{"content":"Because the entire project is in a nullable enabled context, you'll get warnings when you pass <ph id=\"ph1\">`null`</ph> to any method expecting a non-nullable reference type.","pos":[7798,7954],"source":"Because the entire project is in a nullable enabled context, you'll get warnings when you pass `null` to any method expecting a non-nullable reference type."},{"content":"Try it by adding the following line to <ph id=\"ph1\">`Main`</ph>:","pos":[7955,8001],"source":" Try it by adding the following line to `Main`:"},{"pos":[8072,8120],"content":"Create respondents and get answers to the survey","linkify":"Create respondents and get answers to the survey","nodes":[{"content":"Create respondents and get answers to the survey","pos":[0,48]}]},{"content":"Next, write the code that generates answers to the survey.","pos":[8122,8180]},{"content":"This process involves several small tasks:","pos":[8181,8223]},{"content":"Build a method that generates respondent objects.","pos":[8228,8277]},{"content":"These represent people asked to fill out the survey.","pos":[8278,8330]},{"content":"Build logic to simulate asking the questions to a respondent and collecting answers or noting that a respondent didn't answer.","pos":[8334,8460]},{"content":"Repeat until enough respondents have answered the survey.","pos":[8464,8521]},{"content":"You'll need a class to represent a survey response, so add that now.","pos":[8523,8591]},{"content":"Enable nullable support.","pos":[8592,8616]},{"content":"Add an <ph id=\"ph1\">`Id`</ph> property and a constructor that initializes it, as shown in the following code:","pos":[8617,8708],"source":" Add an `Id` property and a constructor that initializes it, as shown in the following code:"},{"pos":[8886,8967],"content":"Next, add a <ph id=\"ph1\">`static`</ph> method to create new participants by generating a random ID:","source":"Next, add a `static` method to create new participants by generating a random ID:"},{"content":"The main responsibility of this class is to generate the responses for a participant to the questions in the survey.","pos":[9098,9214]},{"content":"This responsibility has a few steps:","pos":[9215,9251]},{"content":"Ask for participation in the survey.","pos":[9256,9292]},{"content":"If the person doesn't consent, return a missing (or null) response.","pos":[9293,9360]},{"content":"Ask each question and record the answer.","pos":[9364,9404]},{"content":"Each answer may also be missing (or null).","pos":[9405,9447]},{"pos":[9449,9503],"content":"Add the following code to your <ph id=\"ph1\">`SurveyResponse`</ph> class:","source":"Add the following code to your `SurveyResponse` class:"},{"content":"The storage for the survey answers is a <ph id=\"ph1\">`Dictionary&lt;int, string&gt;?`</ph>, indicating that it may be null.","pos":[9633,9732],"source":"The storage for the survey answers is a `Dictionary<int, string>?`, indicating that it may be null."},{"content":"You're using the new language feature to declare your design intent, both to the compiler and to anyone reading your code later.","pos":[9733,9861]},{"content":"If you ever dereference <ph id=\"ph1\">`surveyResponses`</ph> without checking for the null value first, you'll get a compiler warning.","pos":[9862,9977],"source":" If you ever dereference `surveyResponses` without checking for the null value first, you'll get a compiler warning."},{"content":"You don't get a warning in the <ph id=\"ph1\">`AnswerSurvey`</ph> method because the compiler can determine the <ph id=\"ph2\">`surveyResponses`</ph> variable was set to a non-null value above.","pos":[9978,10131],"source":" You don't get a warning in the `AnswerSurvey` method because the compiler can determine the `surveyResponses` variable was set to a non-null value above."},{"content":"Using <ph id=\"ph1\">`null`</ph> for missing answers highlights a key point for working with nullable reference types: your goal isn't to remove all <ph id=\"ph2\">`null`</ph> values from your program.","pos":[10133,10294],"source":"Using `null` for missing answers highlights a key point for working with nullable reference types: your goal isn't to remove all `null` values from your program."},{"content":"Rather, your goal is to ensure that the code you write expresses the intent of your design.","pos":[10295,10386]},{"content":"Missing values are a necessary concept to express in your code.","pos":[10387,10450]},{"content":"The <ph id=\"ph1\">`null`</ph> value is a clear way to express those missing values.","pos":[10451,10515],"source":" The `null` value is a clear way to express those missing values."},{"content":"Trying to remove all <ph id=\"ph1\">`null`</ph> values only leads to defining some other way to express those missing values without <ph id=\"ph2\">`null`</ph>.","pos":[10516,10636],"source":" Trying to remove all `null` values only leads to defining some other way to express those missing values without `null`."},{"content":"Next, you need to write the <ph id=\"ph1\">`PerformSurvey`</ph> method in the <ph id=\"ph2\">`SurveyRun`</ph> class.","pos":[10638,10714],"source":"Next, you need to write the `PerformSurvey` method in the `SurveyRun` class."},{"content":"Add the following code in the <ph id=\"ph1\">`SurveyRun`</ph> class:","pos":[10715,10763],"source":" Add the following code in the `SurveyRun` class:"},{"content":"Here again, your choice of a nullable <ph id=\"ph1\">`List&lt;SurveyResponse&gt;?`</ph> indicates the response may be null.","pos":[10890,10987],"source":"Here again, your choice of a nullable `List<SurveyResponse>?` indicates the response may be null."},{"content":"That indicates the survey hasn't been given to any respondents yet.","pos":[10988,11055]},{"content":"Notice that respondents are added until enough have consented.","pos":[11056,11118]},{"pos":[11120,11223],"content":"The last step to run the survey is to add a call to perform the survey at the end of the <ph id=\"ph1\">`Main`</ph> method:","source":"The last step to run the survey is to add a call to perform the survey at the end of the `Main` method:"},{"pos":[11343,11367],"content":"Examine survey responses","linkify":"Examine survey responses","nodes":[{"content":"Examine survey responses","pos":[0,24]}]},{"content":"The last step is to display survey results.","pos":[11369,11412]},{"content":"You'll add code to many of the classes you've written.","pos":[11413,11467]},{"content":"This code demonstrates the value of distinguishing nullable and non-nullable reference types.","pos":[11468,11561]},{"content":"Start by adding the following two expression-bodied members to the <ph id=\"ph1\">`SurveyResponse`</ph> class:","pos":[11562,11652],"source":" Start by adding the following two expression-bodied members to the `SurveyResponse` class:"},{"content":"Because <ph id=\"ph1\">`surveyResponses`</ph> is a non-nullable reference type, no checks are necessary before de-referencing it.","pos":[11785,11894],"source":"Because `surveyResponses` is a non-nullable reference type, no checks are necessary before de-referencing it."},{"content":"The <ph id=\"ph1\">`Answer`</ph> method returns a non-nullable string, so choose the overload of <ph id=\"ph2\">`GetValueOrDefault`</ph> that takes a second argument for the default value.","pos":[11895,12043],"source":" The `Answer` method returns a non-nullable string, so choose the overload of `GetValueOrDefault` that takes a second argument for the default value."},{"pos":[12045,12118],"content":"Next, add these three expression-bodied members to the <ph id=\"ph1\">`SurveyRun`</ph> class:","source":"Next, add these three expression-bodied members to the `SurveyRun` class:"},{"content":"The <ph id=\"ph1\">`AllParticipants`</ph> member must take into account that the <ph id=\"ph2\">`respondents`</ph> variable might be null, but the return value can't be null.","pos":[12241,12375],"source":"The `AllParticipants` member must take into account that the `respondents` variable might be null, but the return value can't be null."},{"content":"If you change that expression by removing the <ph id=\"ph1\">`??`</ph> and the empty sequence that follows, the compiler warns you the method might return <ph id=\"ph2\">`null`</ph> and its return signature returns a non-nullable type.","pos":[12376,12571],"source":" If you change that expression by removing the `??` and the empty sequence that follows, the compiler warns you the method might return `null` and its return signature returns a non-nullable type."},{"pos":[12573,12640],"content":"Finally, add the following loop at the bottom of the <ph id=\"ph1\">`Main`</ph> method:","source":"Finally, add the following loop at the bottom of the `Main` method:"},{"pos":[12771,12920],"content":"You don't need any <ph id=\"ph1\">`null`</ph> checks in this code because you've designed the underlying interfaces so that they all return non-nullable reference types.","source":"You don't need any `null` checks in this code because you've designed the underlying interfaces so that they all return non-nullable reference types."},{"pos":[12925,12937],"content":"Get the code","linkify":"Get the code","nodes":[{"content":"Get the code","pos":[0,12]}]},{"pos":[12939,13170],"content":"You can get the code for the finished tutorial from our <bpt id=\"p1\">[</bpt>samples<ept id=\"p1\">](https://github.com/dotnet/samples)</ept> repository in the <bpt id=\"p2\">[</bpt>csharp/NullableIntroduction<ept id=\"p2\">](https://github.com/dotnet/samples/tree/master/csharp/NullableIntroduction)</ept> folder.","source":"You can get the code for the finished tutorial from our [samples](https://github.com/dotnet/samples) repository in the [csharp/NullableIntroduction](https://github.com/dotnet/samples/tree/master/csharp/NullableIntroduction) folder."},{"content":"Experiment by changing the type declarations between nullable and non-nullable reference types.","pos":[13172,13267]},{"content":"See how that generates different warnings to ensure you don't accidentally dereference a <ph id=\"ph1\">`null`</ph>.","pos":[13268,13364],"source":" See how that generates different warnings to ensure you don't accidentally dereference a `null`."},{"pos":[13369,13379],"content":"Next steps","linkify":"Next steps","nodes":[{"content":"Next steps","pos":[0,10]}]},{"content":"Learn more by migrating an existing application to use nullable reference types:","pos":[13381,13461]},{"pos":[13464,13587],"content":"[!div class=\"nextstepaction\"]\n[Upgrade an application to use nullable reference types](upgrade-to-nullable-references.md)","leadings":["","> "],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Upgrade an application to use nullable reference types<ept id=\"p1\">](upgrade-to-nullable-references.md)</ept>","pos":[30,121],"source":"[Upgrade an application to use nullable reference types](upgrade-to-nullable-references.md)"}]}]}