{"content":"---\ntitle: \"Is Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.is\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"comparison operators\"\n  - \"equivalent objects\"\n  - \"TypeOf...Is expression\"\n  - \"Is operator [Visual Basic]\"\nms.assetid: 8045a6c8-2a83-45b6-ad47-d09a704c656d\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Is Operator (Visual Basic)\nCompares two object reference variables.  \n  \n## Syntax  \n  \n```  \n  \nresult = object1 Is object2  \n```  \n  \n## Parts  \n `result`  \n Required. Any `Boolean` value.  \n  \n `object1`  \n Required. Any `Object` name.  \n  \n `object2`  \n Required. Any `Object` name.  \n  \n## Remarks  \n The `Is` operator determines if two object references refer to the same object. However, it does not perform value comparisons. If `object1` and `object2` both refer to the exact same object instance, `result` is `True`; if they do not, `result` is `False`.  \n  \n `Is` can also be used with the `TypeOf` keyword to make a `TypeOf`...`Is` expression, which tests whether an object variable is compatible with a data type.  \n  \n> [!NOTE]\n>  The `Is` keyword is also used in the [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md).  \n  \n## Example  \n The following example uses the `Is` operator to compare pairs of object references. The results are assigned to a `Boolean` value representing whether the two objects are identical.  \n  \n [!code-vb[VbVbalrOperators#27](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/is-operator_1.vb)]  \n  \n As the preceding example demonstrates, you can use the `Is` operator to test both early bound and late bound objects.  \n  \n## See Also  \n [TypeOf Operator](../../../visual-basic/language-reference/operators/typeof-operator.md)   \n [IsNot Operator](../../../visual-basic/language-reference/operators/isnot-operator.md)   \n [Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)","nodes":[{"pos":[12,55],"content":"Is Operator (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Is Operator (Visual Basic) | Microsoft Docs","pos":[0,43]}]},{"pos":[677,703],"content":"Is Operator (Visual Basic)","linkify":"Is Operator (Visual Basic)","nodes":[{"content":"Is Operator (Visual Basic)","pos":[0,26]}]},{"content":"Compares two object reference variables.","pos":[704,744]},{"pos":[753,759],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[816,821],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[837,846]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> value.","pos":[847,867],"source":" Any `Boolean` value."},{"content":"Required.","pos":[887,896]},{"content":"Any <ph id=\"ph1\">`Object`</ph> name.","pos":[897,915],"source":" Any `Object` name."},{"content":"Required.","pos":[935,944]},{"content":"Any <ph id=\"ph1\">`Object`</ph> name.","pos":[945,963],"source":" Any `Object` name."},{"pos":[972,979],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Is`</ph> operator determines if two object references refer to the same object.","pos":[983,1062],"source":"The `Is` operator determines if two object references refer to the same object."},{"content":"However, it does not perform value comparisons.","pos":[1063,1110]},{"content":"If <ph id=\"ph1\">`object1`</ph> and <ph id=\"ph2\">`object2`</ph> both refer to the exact same object instance, <ph id=\"ph3\">`result`</ph> is <ph id=\"ph4\">`True`</ph>; if they do not, <ph id=\"ph5\">`result`</ph> is <ph id=\"ph6\">`False`</ph>.","pos":[1111,1240],"source":" If `object1` and `object2` both refer to the exact same object instance, `result` is `True`; if they do not, `result` is `False`."},{"pos":[1247,1403],"content":"<ph id=\"ph1\">`Is`</ph> can also be used with the <ph id=\"ph2\">`TypeOf`</ph> keyword to make a <ph id=\"ph3\">`TypeOf`</ph>...<ph id=\"ph4\">`Is`</ph> expression, which tests whether an object variable is compatible with a data type.","source":"`Is` can also be used with the `TypeOf` keyword to make a `TypeOf`...`Is` expression, which tests whether an object variable is compatible with a data type."},{"pos":[1411,1563],"content":"[!NOTE]\n The `Is` keyword is also used in the [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md).","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">`Is`</ph> keyword is also used in the <bpt id=\"p1\">[</bpt>Select...Case Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/select-case-statement.md)</ept>.","pos":[9,150],"source":" The `Is` keyword is also used in the [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md)."}]},{"pos":[1572,1579],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`Is`</ph> operator to compare pairs of object references.","pos":[1583,1666],"source":"The following example uses the `Is` operator to compare pairs of object references."},{"content":"The results are assigned to a <ph id=\"ph1\">`Boolean`</ph> value representing whether the two objects are identical.","pos":[1667,1764],"source":" The results are assigned to a `Boolean` value representing whether the two objects are identical."},{"pos":[1771,1895],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#27<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/is-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#27](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/is-operator_1.vb)]"},{"pos":[1902,2019],"content":"As the preceding example demonstrates, you can use the <ph id=\"ph1\">`Is`</ph> operator to test both early bound and late bound objects.","source":"As the preceding example demonstrates, you can use the `Is` operator to test both early bound and late bound objects."},{"pos":[2028,2036],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>TypeOf Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/typeof-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2040,2129],"source":"[TypeOf Operator](../../../visual-basic/language-reference/operators/typeof-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IsNot Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/isnot-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2132,2220],"source":" [IsNot Operator](../../../visual-basic/language-reference/operators/isnot-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2223,2372],"source":" [Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[2375,2489],"source":" [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[2492,2618],"source":" [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept>","pos":[2621,2743],"source":" [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)"}]}