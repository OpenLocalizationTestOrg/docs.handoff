{"content":"---\ntitle: \"Arithmetic operations on pointers - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"pointers [C#], arithmetic operations\"\nms.assetid: d4f0b623-827e-45ce-8649-cfcebc8692aa\n---\n# Arithmetic operations on pointers (C# Programming Guide)\nThis topic discusses using the arithmetic operators `+` and `-` to manipulate pointers.  \n  \n> [!NOTE]\n>  You cannot perform any arithmetic operations on void pointers.  \n  \n## Adding and subtracting numeric values to or from pointers  \n You can add a value `n` of type [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), or [ulong](../../../csharp/language-reference/keywords/ulong.md) to a pointer. If `p` is a pointer of the type `pointer-type*`, the result `p+n` is the pointer resulting from adding `n * sizeof(pointer-type)` to the address of `p`. Similarly, `p-n` is the pointer resulting from subtracting `n * sizeof(pointer-type)` from the address of `p`.  \n  \n## Subtracting pointers  \n You can also subtract pointers of the same type. The result is always of the type `long`. For example, if `p1` and `p2` are pointers of the type `pointer-type*`, then the expression `p1-p2` results in:  \n  \n `((long)p1 - (long)p2)/sizeof(pointer-type)`  \n  \n No exceptions are generated when the arithmetic operation overflows the domain of the pointer, and the result depends on the implementation.  \n  \n## Example  \n [!code-csharp[csProgGuidePointers#14](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuidePointers/CS/Pointers2.cs#14)]  \n  \n [!code-csharp[csProgGuidePointers#15](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuidePointers/CS/Pointers.cs#15)]  \n  \n## C# language specification  \n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)\n- [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)\n- [C# Operators](../../../csharp/language-reference/operators/index.md)\n- [Manipulating Pointers](../../../csharp/programming-guide/unsafe-code-pointers/manipulating-pointers.md)\n- [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)\n- [Types](../../../csharp/language-reference/keywords/types.md)\n- [unsafe](../../../csharp/language-reference/keywords/unsafe.md)\n- [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)\n- [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)\n","nodes":[{"pos":[4,223],"embed":true,"restype":"x-metadata","content":"title: \"Arithmetic operations on pointers - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"pointers [C#], arithmetic operations\"\nms.assetid: d4f0b623-827e-45ce-8649-cfcebc8692aa","nodes":[{"content":"Arithmetic operations on pointers - C# Programming Guide","nodes":[{"pos":[0,56],"content":"Arithmetic operations on pointers - C# Programming Guide","nodes":[{"content":"Arithmetic operations on pointers - C# Programming Guide","pos":[0,56]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[230,286],"content":"Arithmetic operations on pointers (C# Programming Guide)","linkify":"Arithmetic operations on pointers (C# Programming Guide)","nodes":[{"content":"Arithmetic operations on pointers (C# Programming Guide)","pos":[0,56]}]},{"pos":[287,374],"content":"This topic discusses using the arithmetic operators <ph id=\"ph1\">`+`</ph> and <ph id=\"ph2\">`-`</ph> to manipulate pointers.","source":"This topic discusses using the arithmetic operators `+` and `-` to manipulate pointers."},{"pos":[382,455],"content":"[!NOTE]\n You cannot perform any arithmetic operations on void pointers.","leadings":["","> "],"nodes":[{"content":"You cannot perform any arithmetic operations on void pointers.","pos":[9,71]}]},{"pos":[464,521],"content":"Adding and subtracting numeric values to or from pointers","linkify":"Adding and subtracting numeric values to or from pointers","nodes":[{"content":"Adding and subtracting numeric values to or from pointers","pos":[0,57]}]},{"content":"You can add a value <ph id=\"ph1\">`n`</ph> of type <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id=\"p2\">[</bpt>uint<ept id=\"p2\">](../../../csharp/language-reference/keywords/uint.md)</ept>, <bpt id=\"p3\">[</bpt>long<ept id=\"p3\">](../../../csharp/language-reference/keywords/long.md)</ept>, or <bpt id=\"p4\">[</bpt>ulong<ept id=\"p4\">](../../../csharp/language-reference/keywords/ulong.md)</ept> to a pointer.","pos":[525,816],"source":"You can add a value `n` of type [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), or [ulong](../../../csharp/language-reference/keywords/ulong.md) to a pointer."},{"content":"If <ph id=\"ph1\">`p`</ph> is a pointer of the type <ph id=\"ph2\">`pointer-type*`</ph>, the result <ph id=\"ph3\">`p+n`</ph> is the pointer resulting from adding <ph id=\"ph4\">`n * sizeof(pointer-type)`</ph> to the address of <ph id=\"ph5\">`p`</ph>.","pos":[817,969],"source":" If `p` is a pointer of the type `pointer-type*`, the result `p+n` is the pointer resulting from adding `n * sizeof(pointer-type)` to the address of `p`."},{"content":"Similarly, <ph id=\"ph1\">`p-n`</ph> is the pointer resulting from subtracting <ph id=\"ph2\">`n * sizeof(pointer-type)`</ph> from the address of <ph id=\"ph3\">`p`</ph>.","pos":[970,1080],"source":" Similarly, `p-n` is the pointer resulting from subtracting `n * sizeof(pointer-type)` from the address of `p`."},{"pos":[1089,1109],"content":"Subtracting pointers","linkify":"Subtracting pointers","nodes":[{"content":"Subtracting pointers","pos":[0,20]}]},{"content":"You can also subtract pointers of the same type.","pos":[1113,1161]},{"content":"The result is always of the type <ph id=\"ph1\">`long`</ph>.","pos":[1162,1202],"source":" The result is always of the type `long`."},{"content":"For example, if <ph id=\"ph1\">`p1`</ph> and <ph id=\"ph2\">`p2`</ph> are pointers of the type <ph id=\"ph3\">`pointer-type*`</ph>, then the expression <ph id=\"ph4\">`p1-p2`</ph> results in:","pos":[1203,1314],"source":" For example, if `p1` and `p2` are pointers of the type `pointer-type*`, then the expression `p1-p2` results in:"},{"content":"No exceptions are generated when the arithmetic operation overflows the domain of the pointer, and the result depends on the implementation.","pos":[1372,1512]},{"pos":[1521,1528],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1797,1822],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1894,1902],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1906,1972],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1975,2066],"content":"<bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept>","source":"[Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)"},{"pos":[2069,2169],"content":"<bpt id=\"p1\">[</bpt>Pointer Expressions<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept>","source":"[Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)"},{"pos":[2172,2241],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"},{"pos":[2244,2348],"content":"<bpt id=\"p1\">[</bpt>Manipulating Pointers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/manipulating-pointers.md)</ept>","source":"[Manipulating Pointers](../../../csharp/programming-guide/unsafe-code-pointers/manipulating-pointers.md)"},{"pos":[2351,2439],"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept>","source":"[Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)"},{"pos":[2442,2503],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept>","source":"[Types](../../../csharp/language-reference/keywords/types.md)"},{"pos":[2506,2569],"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept>","source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md)"},{"pos":[2572,2653],"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept>","source":"[fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)"},{"pos":[2656,2727],"content":"<bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>","source":"[stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)"}]}