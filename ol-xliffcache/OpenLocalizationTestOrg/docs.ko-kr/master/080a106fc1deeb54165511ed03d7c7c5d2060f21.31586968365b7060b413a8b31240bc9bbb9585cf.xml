{"content":"---\ntitle: \"Take While Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.QueryTakeWhile\"\nhelpviewer_keywords: \n  - \"queries [Visual Basic], Take While\"\n  - \"Take While clause [Visual Basic]\"\n  - \"Take While statement [Visual Basic]\"\nms.assetid: db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11\n---\n# Take While Clause (Visual Basic)\nIncludes elements in a collection as long as a specified condition is `true` and bypasses the remaining elements.  \n  \n## Syntax  \n  \n```  \nTake While expression  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`expression`|Required. An expression that represents a condition to test elements for. The expression must return a `Boolean` value or a functional equivalent, such as an `Integer` to be evaluated as a `Boolean`.|  \n  \n## Remarks  \n The `Take While` clause includes elements from the start of a query result until the supplied `expression` returns `false`. After the `expression` returns `false`, the query will bypass all remaining elements. The `expression` is ignored for the remaining results.  \n  \n The `Take While` clause differs from the `Where` clause in that the `Where` clause can be used to include all elements from a query that meet a particular condition. The `Take While` clause includes elements only until the first time that the condition is not satisfied. The `Take While` clause is most useful when you are working with an ordered query result.  \n  \n## Example  \n The following code example uses the `Take While` clause to retrieve results until the first customer without any orders is found.  \n  \n [!code-vb[VbSimpleQuerySamples#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbSimpleQuerySamples/VB/QuerySamples1.vb#2)]  \n  \n## See also\n\n- [Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)\n- [Queries](../../../visual-basic/language-reference/queries/index.md)\n- [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)\n- [From Clause](../../../visual-basic/language-reference/queries/from-clause.md)\n- [Take Clause](../../../visual-basic/language-reference/queries/take-clause.md)\n- [Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md)\n- [Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)\n","nodes":[{"pos":[4,296],"embed":true,"restype":"x-metadata","content":"title: \"Take While Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.QueryTakeWhile\"\nhelpviewer_keywords: \n  - \"queries [Visual Basic], Take While\"\n  - \"Take While clause [Visual Basic]\"\n  - \"Take While statement [Visual Basic]\"\nms.assetid: db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11","nodes":[{"content":"Take While Clause (Visual Basic)","nodes":[{"pos":[0,32],"content":"Take While Clause (Visual Basic)","nodes":[{"content":"Take While Clause (Visual Basic)","pos":[0,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[303,335],"content":"Take While Clause (Visual Basic)","linkify":"Take While Clause (Visual Basic)","nodes":[{"content":"Take While Clause (Visual Basic)","pos":[0,32]}]},{"pos":[336,449],"content":"Includes elements in a collection as long as a specified condition is <ph id=\"ph1\">`true`</ph> and bypasses the remaining elements.","source":"Includes elements in a collection as long as a specified condition is `true` and bypasses the remaining elements."},{"pos":[458,464],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[512,517],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[524,528]},{"content":"Definition","pos":[529,539]},{"content":"Required.","pos":[569,578]},{"content":"An expression that represents a condition to test elements for.","pos":[579,642]},{"content":"The expression must return a <ph id=\"ph1\">`Boolean`</ph> value or a functional equivalent, such as an <ph id=\"ph2\">`Integer`</ph> to be evaluated as a <ph id=\"ph3\">`Boolean`</ph>.","pos":[643,768],"source":" The expression must return a `Boolean` value or a functional equivalent, such as an `Integer` to be evaluated as a `Boolean`."},{"pos":[778,785],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Take While`</ph> clause includes elements from the start of a query result until the supplied <ph id=\"ph2\">`expression`</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[789,912],"source":"The `Take While` clause includes elements from the start of a query result until the supplied `expression` returns `false`."},{"content":"After the <ph id=\"ph1\">`expression`</ph> returns <ph id=\"ph2\">`false`</ph>, the query will bypass all remaining elements.","pos":[913,998],"source":" After the `expression` returns `false`, the query will bypass all remaining elements."},{"content":"The <ph id=\"ph1\">`expression`</ph> is ignored for the remaining results.","pos":[999,1053],"source":" The `expression` is ignored for the remaining results."},{"content":"The <ph id=\"ph1\">`Take While`</ph> clause differs from the <ph id=\"ph2\">`Where`</ph> clause in that the <ph id=\"ph3\">`Where`</ph> clause can be used to include all elements from a query that meet a particular condition.","pos":[1060,1225],"source":"The `Take While` clause differs from the `Where` clause in that the `Where` clause can be used to include all elements from a query that meet a particular condition."},{"content":"The <ph id=\"ph1\">`Take While`</ph> clause includes elements only until the first time that the condition is not satisfied.","pos":[1226,1330],"source":" The `Take While` clause includes elements only until the first time that the condition is not satisfied."},{"content":"The <ph id=\"ph1\">`Take While`</ph> clause is most useful when you are working with an ordered query result.","pos":[1331,1420],"source":" The `Take While` clause is most useful when you are working with an ordered query result."},{"pos":[1429,1436],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1440,1569],"content":"The following code example uses the <ph id=\"ph1\">`Take While`</ph> clause to retrieve results until the first customer without any orders is found.","source":"The following code example uses the `Take While` clause to retrieve results until the first customer without any orders is found."},{"pos":[1715,1723],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1727,1853],"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>","source":"[Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)"},{"pos":[1856,1924],"content":"<bpt id=\"p1\">[</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/index.md)</ept>","source":"[Queries](../../../visual-basic/language-reference/queries/index.md)"},{"pos":[1927,2009],"content":"<bpt id=\"p1\">[</bpt>Select Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/select-clause.md)</ept>","source":"[Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)"},{"pos":[2012,2090],"content":"<bpt id=\"p1\">[</bpt>From Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/from-clause.md)</ept>","source":"[From Clause](../../../visual-basic/language-reference/queries/from-clause.md)"},{"pos":[2093,2171],"content":"<bpt id=\"p1\">[</bpt>Take Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/take-clause.md)</ept>","source":"[Take Clause](../../../visual-basic/language-reference/queries/take-clause.md)"},{"pos":[2174,2264],"content":"<bpt id=\"p1\">[</bpt>Skip While Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/skip-while-clause.md)</ept>","source":"[Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md)"},{"pos":[2267,2347],"content":"<bpt id=\"p1\">[</bpt>Where Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/where-clause.md)</ept>","source":"[Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)"}]}