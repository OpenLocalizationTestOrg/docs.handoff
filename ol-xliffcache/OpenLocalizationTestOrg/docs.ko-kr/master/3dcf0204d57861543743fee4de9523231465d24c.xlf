<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3dcf0204d57861543743fee4de9523231465d24c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\console-webapiclient.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4df08422a92d4b500e782be826fe412b1b3910fb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e3faaf108dde083409c342999017f139d72120c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creates a REST client using .NET Core</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you a number of features in .NET Core and the C# language.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>REST client</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Introduction</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you a number of features in .NET Core and the C# language.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You’ll learn:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The basics of the .NET Core Command Line Interface (CLI).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An overview of C# Language features.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Managing dependencies with NuGet</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>HTTP Communications</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Processing JSON information</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Managing configuration with Attributes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You’ll build an application that issues HTTP Requests to a REST service on GitHub.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You'll read information in JSON format, and convert that JSON packet into C# objects.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Finally, you'll see how to work with C# objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There are a lot of features in this tutorial.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Let’s build them one by one.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you prefer to follow along with the <bpt id="p1">[</bpt>final sample<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/csharp/getting-started/console-webapiclient)</ept> for this topic, you can download it.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For download instructions, see <bpt id="p1">[</bpt>Samples and Tutorials<ept id="p1">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You’ll need to set up your machine to run .NET core.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can find the installation instructions on the <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://www.microsoft.com/net/core)</ept> page.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can run this application on Windows, Linux, macOS or in a Docker container.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You’ll need to install your favorite code editor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The descriptions below use <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://code.visualstudio.com/)</ept>, which is an open source, cross platform editor.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, you can use whatever tools you are comfortable with.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Create the Application</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The first step is to create a new application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Open a command prompt and create a new directory for your application.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Make that the current directory.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Type the command <ph id="ph1">`dotnet new console`</ph> at the command prompt.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This creates the starter files for a basic "Hello World" application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Before you start making modifications, let’s go through the steps to run the simple Hello World application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>After creating the application, type <ph id="ph1">`dotnet restore`</ph> at the command prompt.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This command runs the NuGet package restore process.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>NuGet is a .NET package manager.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This command downloads any of the missing dependencies for your project.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As this is a new project, none of the dependencies are in place, so the first run will download the .NET Core framework.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>After this initial step, you will only need to run <ph id="ph1">`dotnet restore`</ph> when you add new dependent packages, or update the versions of any of your dependencies.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>After restoring packages, you run <ph id="ph1">`dotnet build`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This executes the build engine and creates your application.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Finally, you execute <ph id="ph1">`dotnet run`</ph> to run your application.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Adding New Dependencies</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>One of the key design goals for .NET Core is to minimize the size of the .NET framework installation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The .NET Core Application framework contains only the most common elements of the .NET full framework.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If an application needs additional libraries for some of its features, you add those dependencies into your C# project (*.csproj) file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For our example, you'll need to add the <ph id="ph1">`System.Runtime.Serialization.Json`</ph> package so your application can process JSON responses.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`csproj`</ph> project file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The first line of the file should appear as:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Add the following immediately after this line:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Most code editors will provide completion for different versions of these libraries.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You'll usually want to use the latest version of any package that you add.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, it is important to make sure that the versions of all packages match, and that they also match the version of the .NET Core Application framework.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>After you've made these changes, you should run <ph id="ph1">`dotnet restore`</ph> again so that the package is installed on your system.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Making Web Requests</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Now you're ready to start retrieving data from the web.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this application, you'll read information from the <bpt id="p1">[</bpt>GitHub API<ept id="p1">](https://developer.github.com/v3/)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Let's read information about the projects under the <bpt id="p1">[</bpt>.NET Foundation<ept id="p1">](http://www.dotnetfoundation.org/)</ept> umbrella.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You'll start by making the request to the GitHub API to retrieve information on the projects.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The endpoint you'll use is: <bpt id="p1">[</bpt>https://api.github.com/orgs/dotnet/repos<ept id="p1">](https://api.github.com/orgs/dotnet/repos)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You want to retrieve all the information about these projects, so you'll use an HTTP GET request.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Your browser also uses HTTP GET requests, so you can paste that URL into your browser to see what information you'll be receiving and processing.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">@System.Net.Http.HttpClient</ph> class to make web requests.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Like all modern .NET APIs, <ph id="ph1">@System.Net.Http.HttpClient</ph> supports only async methods for its long-running APIs.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Start by making an async method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You'll fill in the implementation as you build the functionality of the application.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Start by opening the <ph id="ph1">`program.cs`</ph> file in your project directory and adding the following method to the <ph id="ph2">`Program`</ph> class:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You'll need to add a <ph id="ph1">`using`</ph> statement at the top of your <ph id="ph2">`Main`</ph> method so that the C# compiler recognizes the <ph id="ph3">@System.Threading.Tasks.Task</ph> type:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you build your project at this point, you'll get a warning generated for this method, because it does not contain any <ph id="ph1">`await`</ph> operators and will run synchronously.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Ignore that for now; you'll add <ph id="ph1">`await`</ph> operators as you fill in the method.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Next, rename the namespace defined in the <ph id="ph1">`namespace`</ph> statement from its default of <ph id="ph2">`ConsoleApp`</ph> to <ph id="ph3">`WebAPIClient`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>We'll later define a <ph id="ph1">`repo`</ph> class in this namespace.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Next, update the <ph id="ph1">`Main`</ph> method to call this method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProcessRepositories`</ph> method returns a Task, and you shouldn't exit the program before that task finishes.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Therefore, you must use the <ph id="ph1">`Wait`</ph> method to block and wait for the task to finish:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Now, you have a program that does nothing, but does it asynchronously.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Let's go back to the <ph id="ph1">`ProcessRepositories`</ph> method and fill in a first version of it:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You'll need to also add two new using statements at the top of the file for this to compile:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This first version makes a web request to read the list of all repositories under the dotnet foundation organization.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>(The gitHub ID for the .NET Foundation is 'dotnet').</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>First, you create a new <ph id="ph1">@System.Net.Http.HttpClient</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This object handles the request and the responses.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The next few lines set up the <ph id="ph1">@System.Net.Http.HttpClient</ph> for this request.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>First, it is configured to accept the GitHub JSON responses.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This format is simply JSON.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The next line adds a User Agent header to all requests from this object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>These two headers are checked by the GitHub server code, and are necessary to retrieve information from GitHub.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>After you've configured the <ph id="ph1">@System.Net.Http.HttpClient</ph>, you make a web request and retrieve the response.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In this first version, you use the <ph id="ph1">&lt;xref:System.Net.Http.HttpClient.GetStringAsync(System.String)?displayProperty=fullname&gt;</ph> convenience method.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This convenience method starts a task that makes the web request, and then when the request returns, it reads the response stream and extracts the content from the stream.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The body of the response is returned as a <ph id="ph1">@System.String</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The string is available when the task completes.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The final two lines of this method await that task, and then print the response to the console.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Build the app, and run it.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The build warning is gone now, because the <ph id="ph1">`ProcessRepositories`</ph> now does contain an <ph id="ph2">`await`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You'll see a long display of JSON formatted text.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Processing the JSON Result</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>At this point, you've written the code to retrieve a response from a web server, and display the text that is contained in that response.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Next, let's convert that JSON response into C# objects.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The JSON Serializer converts JSON data into C# Objects.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Your first task is to define a C# class type to contain the information you use from this response.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Let's build this slowly, so start with a simple C# type that contains the name of the repository:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Put the above code in a new file called 'repo.cs'.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This version of the class represents the simplest path to process JSON data.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The class name and the member name match the names used in the JSON packet, instead of following C# conventions.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You'll fix that by providing some configuration attributes later.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This class demonstrates another important feature of JSON serialization and deserialization: Not all the fields in the JSON packet are part of this class.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The JSON serializer will ignore information that is not included in the class type being used.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This feature makes it easier to create types that work with only a subset of the fields in the JSON packet.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Now that you've created the type, let's deserialize it.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You'll need to create a <ph id="ph1">@System.Runtime.Serialization.Json.DataContractJsonSerializer</ph> object.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This object must know the CLR type expected for the JSON packet it retrieves.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The packet from GitHub contains a sequence of repositories, so a <ph id="ph1">`List&lt;repo&gt;`</ph> is the correct type.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Add the following line to your <ph id="ph1">`ProcessRepositories`</ph> method:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You're using two new namespaces, so you'll need to add those as well:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Next, you'll use the serializer to convert JSON into C# objects.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Replace the call to <ph id="ph1">@System.Net.Http.HttpClient.GetStringAsync</ph>(System.String) in your <ph id="ph2">`ProcessRepositories`</ph> method with the following two lines:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Notice that you're now using <ph id="ph1">@System.Net.Http.HttpClient.GetStreamAsync</ph>(System.String) instead of <ph id="ph2">@System.Net.Http.HttpClient.GetStringAsync</ph>(System.String).</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The serializer uses a stream instead of a string as its source.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Let's explain a couple features of the C# language that are being used in the second line above.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The argument to <ph id="ph1">@System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject</ph>(System.IO.Stream) is an <ph id="ph2">`await`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Await expressions can appear almost anywhere in your code, even though up to now, you've only seen them as part of an assignment statement.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Secondly, the <ph id="ph1">`as`</ph> operator converts from the compile time type of <ph id="ph2">`object`</ph> to <ph id="ph3">`List&lt;repo&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The declaration of <ph id="ph1">@System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject</ph>(System.IO.Stream) declares that it returns an object of type <ph id="ph2">&lt;xref:System.Object?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">@System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject</ph>(System.IO.Stream) will return the type you specified when you constructed it (<ph id="ph2">`List&lt;repo&gt;`</ph> in this tutorial).</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If the conversion does not succeed, the <ph id="ph1">`as`</ph> operator evaluates to <ph id="ph2">`null`</ph>, instead of throwing an exception.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You're almost done with this section.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Now that you've converted the JSON to C# objects, let's display the name of each repository.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Replace the lines that read:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>with the following:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Compile and run the application.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It will print out the names of the repositories that are part of the .NET Foundation.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Controlling Serialization</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Before you add more features, let's address the <ph id="ph1">`repo`</ph> type and make it follow more standard C# conventions.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You'll do this by annotating the <ph id="ph1">`repo`</ph> type with <bpt id="p1">*</bpt>attributes<ept id="p1">*</ept> that control how the JSON Serializer works.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In your case, you'll use these attributes to define a mapping between the JSON key names and the C# class and member names.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The two attributes used are the <ph id="ph1">`DataContract`</ph> attribute and the <ph id="ph2">`DataMember`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>By convention, all Attribute classes end in the suffix <ph id="ph1">`Attribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>However, you do not need to use that suffix when you apply an attribute.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataContract`</ph> and <ph id="ph2">`DataMember`</ph> attributes are in a different library, so you'll need to add that library to your C# project file as a dependency.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Add the following line to the <ph id="ph1">`&lt;ItemGroup&gt;`</ph> section of your project file:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>After you save the file, run <ph id="ph1">`dotnet restore`</ph> to retrieve this package.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Next, open the <ph id="ph1">`repo.cs`</ph> file.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Let's change the name to use Pascal Case, and fully spell out the name <ph id="ph1">`Repository`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>We still want to map JSON 'repo' nodes to this type, so you'll need to add the <ph id="ph1">`DataContract`</ph> attribute to the class declaration.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You'll set the <ph id="ph1">`Name`</ph> property of the attribute to the name of the JSON nodes that map to this type:</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">@System.Runtime.Serialization.DataContractAttribute</ph> is a member of the <ph id="ph2">@System.Runtime.Serialization</ph> namespace, so you'll need to add the appropriate <ph id="ph3">`using`</ph> statement at the top of the file:</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>You changed the name of the <ph id="ph1">`repo`</ph> class to <ph id="ph2">`Repository`</ph>, so you'll need to make the same name change in Program.cs (some editors may support a rename refactoring that will make this change automatically:)</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Next, let's make the same change with the <ph id="ph1">`name`</ph> field by using the <ph id="ph2">@System.Runtime.Serialization.DataMemberAttribute</ph> class.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Make the following changes to the declaration of the <ph id="ph1">`name`</ph> field in repo.cs:</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This change means you need to change the code that writes the name of each repository in program.cs:</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Do a <ph id="ph1">`dotnet build`</ph> followed by a <ph id="ph2">`dotnet run`</ph> to make sure you've got the mappings correct.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>You should see the same output as before.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Before we process more properties from the web server, let's make one more change to the <ph id="ph1">`Repository`</ph> class.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Name`</ph> member is a publicly accessible field.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>That's not a good object-oriented practice, so let's change it to a property.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>For our purposes, we don't need any specific code to run when getting or setting the property, but changing to a property makes it easier to add those changes later without breaking any code that uses the <ph id="ph1">`Repository`</ph> class.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Remove the field definition, and replace it with an <bpt id="p1">[</bpt>auto-implemented property<ept id="p1">](../programming-guide/classes-and-structs/auto-implemented-properties.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The compiler generates the body of the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors, as well as a private field to store the name.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>It would be similar to the following code that you could type by hand:</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Let's make one more change before adding new features.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProcessRepositories`</ph> method can do the async work and return a collection of the repositories.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Let's return the <ph id="ph1">`List&lt;Repository&gt;`</ph> from that method, and move the code that writes the information into the <ph id="ph2">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Change the signature of <ph id="ph1">`ProcessRepositories`</ph> to return a task whose result is a list of <ph id="ph2">`Repository`</ph> objects:</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Then, just return the repositories after processing the JSON response:</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The compiler generates the <ph id="ph1">`Task&lt;T&gt;`</ph> object for the return because you've marked this method as <ph id="ph2">`async`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Then, let's modify the <ph id="ph1">`Main`</ph> method so that it captures those results and writes each repository name to the console.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`Main`</ph> method now looks like this:</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Accessing the <ph id="ph1">`Result`</ph> property of a Task blocks until the task has completed.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Normally, you would prefer to <ph id="ph1">`await`</ph> the completion of the task, as in the <ph id="ph2">`ProcessRepositories`</ph> method, but that isn't allowed in the <ph id="ph3">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Reading More Information</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Let's finish this by processing a few more of the properties in the JSON packet that gets sent from the GitHub API.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>You won't want to grab everything, but adding a few properties will demonstrate a few more features of the C# language.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Let's start by adding a few more simple types to the <ph id="ph1">`Repository`</ph> class definition.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Add these properties to that class:</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>These properties have built-in conversions from the string type (which is what the JSON packets contain) to the target type.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">@System.Uri</ph> type may be new to you.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>It represents a URI, or in this case, a URL.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>In the case of the <ph id="ph1">`Uri`</ph> and <ph id="ph2">`int`</ph> types, if the JSON packet contains data that does not convert to the target type, the serialization action will throw an exception.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Once you've added these, update the <ph id="ph1">`Main`</ph> method to display those elements:</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>As a final step, let's add the information for the last push operation.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This information is formatted in this fashion in the JSON response:</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>That format does not follow any of the standard .NET <ph id="ph1">@System.DateTime</ph> formats.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Because of that, you'll need to write a custom conversion method.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You also probably don't want the raw string exposed to users of the <ph id="ph1">`Repository`</ph> class.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Attributes can help control that as well.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>First, define a <ph id="ph1">`private`</ph> property that will hold the string representation of the date time in your <ph id="ph2">`Repository`</ph> class:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataMember`</ph> attribute informs the serializer that this should be processed, even though it is not a public member.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Next, you need to write a public read-only property that converts the string to a valid <ph id="ph1">@System.DateTime</ph> object, and returns that <ph id="ph2">@System.DateTime:</ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Let's go over the new constructs above.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IgnoreDataMember`</ph> attribute instructs the serializer that this type should not be read to or written from any JSON object.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This property contains only a <ph id="ph1">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>There is no <ph id="ph1">`set`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>That's how you define a <bpt id="p1">*</bpt>read-only<ept id="p1">*</ept> property in C#.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>(Yes, you can create <bpt id="p1">*</bpt>write-only<ept id="p1">*</ept> properties in C#, but their value is limited.) The <ph id="ph1">@System.DateTime.ParseExact</ph>(System.String,System.String,System.IFormatProvider) method parses a string and creates a <ph id="ph2">@System.DateTime</ph> object using a provided date format, and adds additional metadata to the <ph id="ph3">`DateTime`</ph> using a <ph id="ph4">`CultureInfo`</ph> object.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If the parse operation fails, the property accessor throws an exception.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">@System.Globalization.CultureInfo.InvariantCulture</ph>, you will need to add the <ph id="ph2">@System.Globalization</ph> namespace to the <ph id="ph3">`using`</ph> statements in <ph id="ph4">`repo.cs`</ph>:</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Finally, add one more output statement in the console, and you're ready to build and run this app again:</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Your version should now match the <bpt id="p1">[</bpt>finished sample<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/csharp/getting-started/console-webapiclient)</ept>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This tutorial showed you how to make web requests, parse the result, and display properties of those results.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>You've also added new packages as dependencies in your project.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>You've seen some of the features of the C# language that support object-oriented techniques.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>