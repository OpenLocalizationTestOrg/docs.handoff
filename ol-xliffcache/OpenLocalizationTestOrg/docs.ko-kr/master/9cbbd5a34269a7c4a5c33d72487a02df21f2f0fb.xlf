<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="interoperable-object-references.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cbbd5a34269a7c4a5c33d72487a02df21f2f0fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\interoperable-object-references.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab607d799d2b8c14f516486024c3713bcb34969c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3cc9d2296c49449237f4af04cbdabd0638e1a93</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Interoperable Object References</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interoperable Object References</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>By default the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> serializes objects by value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.IsReference%2A&gt;</ph> property to instruct the Data Contract Serializer to preserve object references when serializing objects of the type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Generated XML</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>As an example, consider the following object:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences%2A&gt;</ph> set to <ph id="ph2">`false`</ph> (the default), the following XML is generated:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences%2A&gt;</ph> set to <ph id="ph2">`true`</ph>, the following XML is generated:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> does not describe the <ph id="ph2">`id`</ph> and <ph id="ph3">`ref`</ph> attributes in its schema, even when the <ph id="ph4">`preserveObjectReferences`</ph> property is set to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using IsReference</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To generate object reference information that is valid according to the schema that describes it, apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute to a type, and set the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute.IsReference%2A&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`IsReference`</ph> in the previous example class <ph id="ph2">`X`</ph>:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The generated XML is as follows:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`IsReference`</ph> ensures compliance on message round-tripping.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Without it, when a type is generated from schema, what is sent back as XML for that type is not necessarily compatible with the schema originally assumed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In other words, although the <ph id="ph1">`id`</ph> and <ph id="ph2">`ref`</ph> attributes were serialized, the original schema could have barred these attributes (or all attributes) from occurring in the XML.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`IsReference`</ph> applied to a data member, the member continues to be recognized as "referenceable" when roundtripped.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>