{"content":"---\ntitle: \"How to: Request Data Using the WebRequest Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"downloading Internet resources, steps\"\n  - \"requesting data from Internet, steps\"\n  - \"WebRequest class, receiving data\"\n  - \"receiving data, using WebRequest class\"\n  - \"Internet, requesting data\"\nms.assetid: 368b8d0f-dc5e-4469-a8b8-b2adbf5dd800\ncaps.latest.revision: 8\nauthor: \"mcleblanc\"\nms.author: \"markl\"\nmanager: \"markl\"\n---\n# How to: Request Data Using the WebRequest Class\nThe following procedure describes the steps used to request a resource from a server, for example, a Web page or file. The resource must be identified by a URI.  \n  \n### To request data from a host server  \n  \n1.  Create a <xref:System.Net.WebRequest> instance by calling <xref:System.Net.WebRequest.Create%2A> with the URI of the resource.  \n  \n    ```csharp  \n    WebRequest request = WebRequest.Create(\"http://www.contoso.com/\");  \n    ```  \n  \n    ```vb  \n    Dim request as WebRequest = WebRequest.Create(\"http://www.contoso.com/\")  \n  \n    ```  \n  \n    > [!NOTE]\n    >  The .NET Framework provides protocol-specific classes derived from **WebRequest** and **WebResponse** for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\". To access resources using other protocols, you must implement protocol-specific classes that derive from **WebRequest** and **WebResponse**. For more information, see [Programming Pluggable Protocols](../../../docs/framework/network-programming/programming-pluggable-protocols.md) .  \n  \n2.  Set any property values that you need in the **WebRequest**. For example, to enable authentication, set the **Credentials** property to an instance of the <xref:System.Net.NetworkCredential> class.  \n  \n    ```csharp  \n    request.Credentials = CredentialCache.DefaultCredentials;  \n    ```  \n  \n    ```vb  \n    request.Credentials = CredentialCache.DefaultCredentials  \n    ```  \n  \n     In most cases, the **WebRequest** class is sufficient to receive data. However, if you need to set protocol-specific properties, you must cast the **WebRequest** to the protocol-specific type. For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebRequest>, cast the **WebRequest** to an **HttpWebRequest** reference. The following code example shows how to set the HTTP-specific <xref:System.Net.HttpWebRequest.UserAgent%2A> property.  \n  \n    ```csharp  \n    ((HttpWebRequest)request).UserAgent = \".NET Framework Example Client\";  \n    ```  \n  \n    ```vb  \n    Ctype(request,HttpWebRequest).UserAgent = \".NET Framework Example Client\"  \n  \n    ```  \n  \n3.  To send the request to the server, call <xref:System.Net.HttpWebRequest.GetResponse%2A>. The actual type of the returned **WebResponse** object is determined by the scheme of the requested URI.  \n  \n    ```csharp  \n    WebResponse response = request.GetResponse();  \n    ```  \n  \n    ```vb  \n    Dim response As WebResponse = request.GetResponse()  \n  \n    ```  \n  \n    > [!NOTE]\n    >  After you are finished with a <xref:System.Net.WebResponse> object, you must close it by calling the <xref:System.Net.WebResponse.Close%2A> method. Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method. If you do not close either the response or the stream, your application can run out of connections to the server and become unable to process additional requests.  \n  \n4.  You can access the properties of the **WebResponse** or cast the **WebResponse** to a protocol-specific instance to read protocol-specific properties. For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebResponse>, cast the **WebResponse** to a **HttpWebResponse** reference. The following code example shows how to display the status information sent with a response.  \n  \n    ```csharp  \n    Console.WriteLine (((HttpWebResponse)response).StatusDescription);  \n    ```  \n  \n    ```vb  \n    Console.WriteLine(CType(response,HttpWebResponse).StatusDescription)  \n    ```  \n  \n5.  To get the stream containing response data sent by the server, use the <xref:System.Net.HttpWebResponse.GetResponseStream%2A> method of the **WebResponse**.  \n  \n    ```csharp  \n    Stream dataStream = response.GetResponseStream ();  \n    ```  \n  \n    ```vb  \n    Dim dataStream As Stream = response.GetResponseStream()  \n  \n    ```  \n  \n6.  After reading the data from the response, you must either close the response stream using the **Stream.Close** method or close the response using the **WebResponse.Close** method. It is not necessary to call the **Close** method on both the response stream and the **WebResponse**, but doing so is not harmful. **WebResponse.Close** calls **Stream.Close** when closing the response.  \n  \n    ```csharp  \n    response.Close();  \n    ```  \n  \n    ```vb  \n    response.Close()  \n  \n    ```  \n  \n## Example  \n  \n```csharp  \nusing System;  \nusing System.IO;  \nusing System.Net;  \nusing System.Text;  \n  \nnamespace Examples.System.Net  \n{  \n    public class WebRequestGetExample  \n    {  \n        public static void Main ()  \n        {  \n            // Create a request for the URL.   \n            WebRequest request = WebRequest.Create (  \n              \"http://www.contoso.com/default.html\");  \n            // If required by the server, set the credentials.  \n            request.Credentials = CredentialCache.DefaultCredentials;  \n            // Get the response.  \n            WebResponse response = request.GetResponse ();  \n            // Display the status.  \n            Console.WriteLine (((HttpWebResponse)response).StatusDescription);  \n            // Get the stream containing content returned by the server.  \n            Stream dataStream = response.GetResponseStream ();  \n            // Open the stream using a StreamReader for easy access.  \n            StreamReader reader = new StreamReader (dataStream);  \n            // Read the content.  \n            string responseFromServer = reader.ReadToEnd ();  \n            // Display the content.  \n            Console.WriteLine (responseFromServer);  \n            // Clean up the streams and the response.  \n            reader.Close ();  \n            response.Close ();  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System  \nImports System.IO  \nImports System.Net  \nImports System.Text  \nNamespace Examples.System.Net  \n    Public Class WebRequestGetExample  \n  \n        Public Shared Sub Main()  \n            ' Create a request for the URL.   \n            Dim request As WebRequest = _  \n              WebRequest.Create(\"http://www.contoso.com/default.html\")  \n            ' If required by the server, set the credentials.  \n            request.Credentials = CredentialCache.DefaultCredentials  \n            ' Get the response.  \n            Dim response As WebResponse = request.GetResponse()  \n            ' Display the status.  \n            Console.WriteLine(CType(response,HttpWebResponse).StatusDescription)  \n            ' Get the stream containing content returned by the server.  \n            Dim dataStream As Stream = response.GetResponseStream()  \n            ' Open the stream using a StreamReader for easy access.  \n            Dim reader As New StreamReader(dataStream)  \n            ' Read the content.  \n            Dim responseFromServer As String = reader.ReadToEnd()  \n            ' Display the content.  \n            Console.WriteLine(responseFromServer)  \n            ' Clean up the streams and the response.  \n            reader.Close()  \n            response.Close()  \n        End Sub   \n    End Class   \nEnd Namespace  \n```  \n  \n## See Also  \n [Creating Internet Requests](../../../docs/framework/network-programming/creating-internet-requests.md)   \n [Using Streams on the Network](../../../docs/framework/network-programming/using-streams-on-the-network.md)   \n [Accessing the Internet Through a Proxy](../../../docs/framework/network-programming/accessing-the-internet-through-a-proxy.md)   \n [Requesting Data](../../../docs/framework/network-programming/requesting-data.md)   \n [How to: Send Data Using the WebRequest Class](../../../docs/framework/network-programming/how-to-send-data-using-the-webrequest-class.md)","nodes":[{"pos":[4,617],"nodes":[{"content":"How to: Request Data Using the WebRequest Class | Microsoft Docs","nodes":[{"pos":[0,64],"content":"How to: Request Data Using the WebRequest Class | Microsoft Docs","nodes":[{"content":"How to: Request Data Using the WebRequest Class | Microsoft Docs","pos":[0,64]}]}],"pos":[6,73],"yaml":true}],"content":"title: \"How to: Request Data Using the WebRequest Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"downloading Internet resources, steps\"\n  - \"requesting data from Internet, steps\"\n  - \"WebRequest class, receiving data\"\n  - \"receiving data, using WebRequest class\"\n  - \"Internet, requesting data\"\nms.assetid: 368b8d0f-dc5e-4469-a8b8-b2adbf5dd800\ncaps.latest.revision: 8\nauthor: \"mcleblanc\"\nms.author: \"markl\"\nmanager: \"markl\"","yamlblock":true},{"pos":[624,671],"content":"How to: Request Data Using the WebRequest Class","linkify":"How to: Request Data Using the WebRequest Class","nodes":[{"content":"How to: Request Data Using the WebRequest Class","pos":[0,47]}]},{"content":"The following procedure describes the steps used to request a resource from a server, for example, a Web page or file.","pos":[672,790]},{"content":"The resource must be identified by a URI.","pos":[791,832]},{"pos":[842,876],"content":"To request data from a host server","linkify":"To request data from a host server","nodes":[{"content":"To request data from a host server","pos":[0,34]}]},{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Net.WebRequest&gt;</ph> instance by calling <ph id=\"ph2\">&lt;xref:System.Net.WebRequest.Create%2A&gt;</ph> with the URI of the resource.","pos":[886,1012],"source":"Create a <xref:System.Net.WebRequest> instance by calling <xref:System.Net.WebRequest.Create%2A> with the URI of the resource."},{"pos":[1233,1698],"content":"[!NOTE]\nThe .NET Framework provides protocol-specific classes derived from **WebRequest** and **WebResponse** for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\". To access resources using other protocols, you must implement protocol-specific classes that derive from **WebRequest** and **WebResponse**. For more information, see [Programming Pluggable Protocols](../../../docs/framework/network-programming/programming-pluggable-protocols.md) .","leadings":["","    >  "],"nodes":[{"content":"The .NET Framework provides protocol-specific classes derived from **WebRequest** and **WebResponse** for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\". To access resources using other protocols, you must implement protocol-specific classes that derive from **WebRequest** and **WebResponse**. For more information, see [Programming Pluggable Protocols](../../../docs/framework/network-programming/programming-pluggable-protocols.md) .","pos":[8,458],"nodes":[{"content":"The .NET Framework provides protocol-specific classes derived from <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept> for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\".","pos":[0,167],"source":"The .NET Framework provides protocol-specific classes derived from **WebRequest** and **WebResponse** for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\"."},{"content":"To access resources using other protocols, you must implement protocol-specific classes that derive from <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept>.","pos":[168,308],"source":" To access resources using other protocols, you must implement protocol-specific classes that derive from **WebRequest** and **WebResponse**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Programming Pluggable Protocols<ept id=\"p1\">](../../../docs/framework/network-programming/programming-pluggable-protocols.md)</ept> .","pos":[309,450],"source":" For more information, see [Programming Pluggable Protocols](../../../docs/framework/network-programming/programming-pluggable-protocols.md) ."}]}]},{"content":"Set any property values that you need in the <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept>.","pos":[1708,1768],"source":"Set any property values that you need in the **WebRequest**."},{"content":"For example, to enable authentication, set the <bpt id=\"p1\">**</bpt>Credentials<ept id=\"p1\">**</ept> property to an instance of the <ph id=\"ph1\">&lt;xref:System.Net.NetworkCredential&gt;</ph> class.","pos":[1769,1905],"source":" For example, to enable authentication, set the **Credentials** property to an instance of the <xref:System.Net.NetworkCredential> class."},{"content":"In most cases, the <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> class is sufficient to receive data.","pos":[2097,2167],"source":"In most cases, the **WebRequest** class is sufficient to receive data."},{"content":"However, if you need to set protocol-specific properties, you must cast the <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> to the protocol-specific type.","pos":[2168,2289],"source":" However, if you need to set protocol-specific properties, you must cast the **WebRequest** to the protocol-specific type."},{"content":"For example, to access the HTTP-specific properties of <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest&gt;</ph>, cast the <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> to an <bpt id=\"p2\">**</bpt>HttpWebRequest<ept id=\"p2\">**</ept> reference.","pos":[2290,2438],"source":" For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebRequest>, cast the **WebRequest** to an **HttpWebRequest** reference."},{"content":"The following code example shows how to set the HTTP-specific <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.UserAgent%2A&gt;</ph> property.","pos":[2439,2556],"source":" The following code example shows how to set the HTTP-specific <xref:System.Net.HttpWebRequest.UserAgent%2A> property."},{"content":"To send the request to the server, call <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.GetResponse%2A&gt;</ph>.","pos":[2780,2868],"source":"To send the request to the server, call <xref:System.Net.HttpWebRequest.GetResponse%2A>."},{"content":"The actual type of the returned <bpt id=\"p1\">**</bpt>WebResponse<ept id=\"p1\">**</ept> object is determined by the scheme of the requested URI.","pos":[2869,2973],"source":" The actual type of the returned **WebResponse** object is determined by the scheme of the requested URI."},{"pos":[3152,3663],"content":"[!NOTE]\nAfter you are finished with a <xref:System.Net.WebResponse> object, you must close it by calling the <xref:System.Net.WebResponse.Close%2A> method. Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method. If you do not close either the response or the stream, your application can run out of connections to the server and become unable to process additional requests.","leadings":["","    >  "],"nodes":[{"content":"After you are finished with a <xref:System.Net.WebResponse> object, you must close it by calling the <xref:System.Net.WebResponse.Close%2A> method. Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method. If you do not close either the response or the stream, your application can run out of connections to the server and become unable to process additional requests.","pos":[8,504],"nodes":[{"content":"After you are finished with a <ph id=\"ph1\">&lt;xref:System.Net.WebResponse&gt;</ph> object, you must close it by calling the <ph id=\"ph2\">&lt;xref:System.Net.WebResponse.Close%2A&gt;</ph> method.","pos":[0,147],"source":"After you are finished with a <xref:System.Net.WebResponse> object, you must close it by calling the <xref:System.Net.WebResponse.Close%2A> method."},{"content":"Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> method.","pos":[148,333],"source":" Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method."},{"content":"If you do not close either the response or the stream, your application can run out of connections to the server and become unable to process additional requests.","pos":[334,496]}]}]},{"content":"You can access the properties of the <bpt id=\"p1\">**</bpt>WebResponse<ept id=\"p1\">**</ept> or cast the <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept> to a protocol-specific instance to read protocol-specific properties.","pos":[3673,3823],"source":"You can access the properties of the **WebResponse** or cast the **WebResponse** to a protocol-specific instance to read protocol-specific properties."},{"content":"For example, to access the HTTP-specific properties of <ph id=\"ph1\">&lt;xref:System.Net.HttpWebResponse&gt;</ph>, cast the <bpt id=\"p1\">**</bpt>WebResponse<ept id=\"p1\">**</ept> to a <bpt id=\"p2\">**</bpt>HttpWebResponse<ept id=\"p2\">**</ept> reference.","pos":[3824,3974],"source":" For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebResponse>, cast the **WebResponse** to a **HttpWebResponse** reference."},{"content":"The following code example shows how to display the status information sent with a response.","pos":[3975,4067]},{"pos":[4279,4435],"content":"To get the stream containing response data sent by the server, use the <ph id=\"ph1\">&lt;xref:System.Net.HttpWebResponse.GetResponseStream%2A&gt;</ph> method of the <bpt id=\"p1\">**</bpt>WebResponse<ept id=\"p1\">**</ept>.","source":"To get the stream containing response data sent by the server, use the <xref:System.Net.HttpWebResponse.GetResponseStream%2A> method of the **WebResponse**."},{"content":"After reading the data from the response, you must either close the response stream using the <bpt id=\"p1\">**</bpt>Stream.Close<ept id=\"p1\">**</ept> method or close the response using the <bpt id=\"p2\">**</bpt>WebResponse.Close<ept id=\"p2\">**</ept> method.","pos":[4621,4800],"source":"After reading the data from the response, you must either close the response stream using the **Stream.Close** method or close the response using the **WebResponse.Close** method."},{"content":"It is not necessary to call the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> method on both the response stream and the <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept>, but doing so is not harmful.","pos":[4801,4931],"source":" It is not necessary to call the **Close** method on both the response stream and the **WebResponse**, but doing so is not harmful."},{"content":"<bpt id=\"p1\">**</bpt>WebResponse.Close<ept id=\"p1\">**</ept> calls <bpt id=\"p2\">**</bpt>Stream.Close<ept id=\"p2\">**</ept> when closing the response.","pos":[4932,5003],"source":"**WebResponse.Close** calls **Stream.Close** when closing the response."},{"pos":[5116,5123],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7841,7849],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Creating Internet Requests<ept id=\"p1\">](../../../docs/framework/network-programming/creating-internet-requests.md)</ept><ph id=\"ph1\"> </ph>","pos":[7853,7957],"source":"[Creating Internet Requests](../../../docs/framework/network-programming/creating-internet-requests.md) "},{"content":"<bpt id=\"p1\">[</bpt>Using Streams on the Network<ept id=\"p1\">](../../../docs/framework/network-programming/using-streams-on-the-network.md)</ept><ph id=\"ph1\"> </ph>","pos":[7961,8069],"source":"[Using Streams on the Network](../../../docs/framework/network-programming/using-streams-on-the-network.md) "},{"content":"<bpt id=\"p1\">[</bpt>Accessing the Internet Through a Proxy<ept id=\"p1\">](../../../docs/framework/network-programming/accessing-the-internet-through-a-proxy.md)</ept><ph id=\"ph1\"> </ph>","pos":[8073,8201],"source":"[Accessing the Internet Through a Proxy](../../../docs/framework/network-programming/accessing-the-internet-through-a-proxy.md) "},{"content":"<bpt id=\"p1\">[</bpt>Requesting Data<ept id=\"p1\">](../../../docs/framework/network-programming/requesting-data.md)</ept><ph id=\"ph1\"> </ph>","pos":[8205,8287],"source":"[Requesting Data](../../../docs/framework/network-programming/requesting-data.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Send Data Using the WebRequest Class<ept id=\"p1\">](../../../docs/framework/network-programming/how-to-send-data-using-the-webrequest-class.md)</ept>","pos":[8291,8429],"source":"[How to: Send Data Using the WebRequest Class](../../../docs/framework/network-programming/how-to-send-data-using-the-webrequest-class.md)"}]}