<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="strongly-typed-extensions-sample.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">497bba4008ab5eed2a946005aba6e170cd9cff9e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\strongly-typed-extensions-sample.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3d449eeeb41834988e25541b679a1050ed9e8db</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6a44b78d518420c2ca35bdfe3e299c5786a24dc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Strongly-Typed Extensions Sample</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Strongly-Typed Extensions Sample</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The sample uses the <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed&gt;</ph> class for the purposes of the example.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, the patterns demonstrated in this sample can be used with all of the Syndication classes that support extension data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Syndication object model (<ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Syndication.SyndicationItem&gt;</ph>, and related classes) supports loosely-typed access to extension data by using the <ph id="ph3">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This sample shows how to provide strongly-typed access to extension data by implementing custom derived classes of <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Syndication.SyndicationItem&gt;</ph> that make available certain application-specific extensions as strongly-typed properties.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As an example, this sample shows how to implement an extension element defined in the proposed Atom Threading Extensions RFC.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is for demonstration purposes only and this sample is not intended to be a full implementation of the proposed specification.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Sample XML</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following XML example shows an Atom 1.0 entry with an additional <ph id="ph1">`&lt;in-reply-to&gt;`</ph> extension element.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;in-reply-to&gt;`</ph> element specifies three required attributes (<ph id="ph2">`ref`</ph>, <ph id="ph3">`type`</ph> and <ph id="ph4">`href`</ph>) while also allowing for the presence of additional extension attributes and extension elements.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Modeling the In-Reply-To element</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this sample, the <ph id="ph1">`&lt;in-reply-to&gt;`</ph> element is modeled as CLR that implements <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>, which enables its use with the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It also implements some methods and properties for accessing the elementâ€™s data, as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InReplyToElement`</ph> class implements properties for the required attribute (<ph id="ph2">`HRef`</ph>, <ph id="ph3">`MediaType`</ph>, and <ph id="ph4">`Source`</ph>) as well as collections to hold <ph id="ph5">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions%2A&gt;</ph> and <ph id="ph6">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InReplyToElement`</ph> class implements the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface, which allows direct control over how object instances are read from and written to XML.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ReadXml`</ph> method first reads the values for the <ph id="ph2">`Ref`</ph>, <ph id="ph3">`HRef`</ph>, <ph id="ph4">`Source`</ph>, and <ph id="ph5">`MediaType`</ph> properties from the <ph id="ph6">&lt;xref:System.Xml.XmlReader&gt;</ph> passed to it.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Any unknown attributes are stored in the <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When all the attributes have been read, <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadStartElement&gt;</ph> is called to advance the reader to the next element.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because the element modeled by this class has no required children, the child elements get buffered into <ph id="ph1">`XElement`</ph> instances and stored in the <ph id="ph2">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions%2A&gt;</ph> collection, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`WriteXml`</ph>, the <ph id="ph2">`InReplyToElement`</ph> method first writes out the values of the <ph id="ph3">`Ref`</ph>, <ph id="ph4">`HRef`</ph>, <ph id="ph5">`Source`</ph>, and <ph id="ph6">`MediaType`</ph> properties as XML attributes (<ph id="ph7">`WriteXml`</ph> is not responsible for writing the actual outer element itself, as that done by the caller of <ph id="ph8">`WriteXml`</ph>).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It also writes the contents of the <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions%2A&gt;</ph> to the writer, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>ThreadedFeed and ThreadedItem</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the sample, <ph id="ph1">`SyndicationItems`</ph> with <ph id="ph2">`InReplyTo`</ph> extensions are modeled by the <ph id="ph3">`ThreadedItem`</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Similarly, the <ph id="ph1">`ThreadedFeed`</ph> class is a <ph id="ph2">`SyndicationFeed`</ph> whose items are all instances of <ph id="ph3">`ThreadedItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ThreadedFeed`</ph> class inherits from <ph id="ph2">`SyndicationFeed`</ph> and overrides <ph id="ph3">`OnCreateItem`</ph> to return a <ph id="ph4">`ThreadedItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It also implements a method for accessing the <ph id="ph1">`Items`</ph> collection as <ph id="ph2">`ThreadedItems`</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`ThreadedItem`</ph> inherits from <ph id="ph2">`SyndicationItem`</ph> and makes <ph id="ph3">`InReplyToElement`</ph> as a strongly-typed property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This provides for convenient programmatic access to the <ph id="ph1">`InReplyTo`</ph> extension data.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It also implements <ph id="ph1">`TryParseElement`</ph> and <ph id="ph2">`WriteElementExtensions`</ph> for reading and writing its extension data, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id="p1">[</bpt>Running the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your computer.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id="ph1">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>