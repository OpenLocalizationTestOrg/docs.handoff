<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="emitting-user-code-traces.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93da2eb74705a0581923d0317315e628f374be3e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\diagnostics\tracing\emitting-user-code-traces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28df3bab5d411ef0af2bf41127947e9590b8731a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48f7bc031bf4ead631dbbb3f302645cc0b8ae152</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Emitting User-Code Traces</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Emitting User-Code Traces</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In addition to enabling tracing in configuration to collect instrumentation data generated by Windows Communication Foundation (WCF), you can also emit traces programmatically in user code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this way, you can proactively create instrumentation data that you can peruse later for diagnostic purpose.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic discusses how you can do this.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In addition, the <bpt id="p1">[</bpt>Extending Tracing<ept id="p1">](../../../../../docs/framework/wcf/samples/extending-tracing.md)</ept> sample includes all the code demonstrated in the following sections.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating a Trace Source</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use the following code to create a user trace source.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating Activities</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Activities are logical unit of processing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can create one activity for each major processing unit in which you want traces to be grouped together.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, you can create one activity for each request to the service.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To do so, perform the following steps.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Save the activity ID in scope.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Create a new activity ID.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Transfer from the activity in scope to the new one, set the new activity in scope and emit a start trace for that activity.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to do this.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Emitting Traces within a User Activity</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code emits traces within a user activity.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Stopping the Activities</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To stop the activities, transfer back to the old activity, stop the current activity id, and reset the old activity id in scope.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to do this.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Propagating the Activity ID to A Service</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you set the <ph id="ph1">`propagateActivity`</ph> attribute to <ph id="ph2">`true`</ph> for the <ph id="ph3">`System.ServiceModel`</ph> trace source in both the client and service configuration files, the service processing for the Add request occurs in the same activity as the one defined in the client.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the service defines its own activities and transfers, the service traces do not appear in the client-propagated activity.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Instead, they appear in an activity correlated by transfer traces to the activity whose ID is propagated by the client.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`propagateActivity`</ph> attribute is set to <ph id="ph2">`true`</ph> on both the client and service, the ambient activity in the operation scope of the service is set by WCF.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can use the following code to check whether an activity was set in scope by WCF.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Tracing Exceptions Thrown in Code</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When you throw an exception in code, you can also trace the exception at Warning level or up using the following code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Viewing User Traces in the Service Trace Viewer Tool</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This section contains screenshots of traces generated by running the <bpt id="p1">[</bpt>Extending Tracing<ept id="p1">](../../../../../docs/framework/wcf/samples/extending-tracing.md)</ept> sample, when viewed using the <bpt id="p2">[</bpt>Service Trace Viewer Tool (SvcTraceViewer.exe)<ept id="p2">](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the following diagram, the "Add request" activity created previously is selected on the left panel.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is listed with three other Math operation activities (Divide, Subtract, Multiply) that constitute the application client program.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The user code has defined one new activity for each operation to isolate potential error occurrences in different requests.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To demonstrate the use of transfers in the <bpt id="p1">[</bpt>Extending Tracing<ept id="p1">](../../../../../docs/framework/wcf/samples/extending-tracing.md)</ept> sample, a Calculator activity that encapsulates the four operation requests is also created.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For each request, there is a transfer back and forth from the Calculator activity to the request activity (trace is highlighted in the upper right panel in the figure).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you select an activity on the left panel, the traces included by this activity are shown on the upper right panel.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`propagateActivity`</ph> is <ph id="ph2">`true`</ph> at every endpoint in the request path, traces in the request activity are from all processes that participate in the request.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this example, you can see traces from both the client and service in the 4th column in the panel.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This activity shows the following order of processing:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Client sends message to Add.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Service receives Add request message.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Service sends Add response.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Client receives Add response.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All these traces were emitted at Information level.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Clicking a trace in the upper-right panel shows the details of that trace in the lower-right panel.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the following diagram, we also see transfer traces from and to the Calculator activity, as well as two pairs of Start and Stop traces per request activity, one for the client and one for the service (one for each trace source).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Trace Viewer: Emitting User&amp;#45;code traces<ept id="p1">]</ept><bpt id="p2">(../../../../../docs/framework/wcf/diagnostics/tracing/media/242c9358-475a-4baf-83f3-4227aa942fcd.gif "</bpt>242c9358-475a-4baf-83f3-4227aa942fcd<ept id="p2">")</ept> List of activities by creation time (left panel) and their nested activities (upper-right panel)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the service code throws an exception that causes the client to throw as well (for example, when the client did not get the response to its request), both the service and client warning or error messages occur in the same activity for direct correlation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the following image, the service throws an exception that states "The service refuses to process this request in user code."</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The client also throws an exception that states "The server was unable to process the request due to an internal error."</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following images shows that errors across endpoints for a given request appear in the same activity if the request activity id was propagated:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Screenshot that shows errors across endpoints for a given request.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Double-clicking the Multiply activity on the left panel shows the following graph, with the traces for the Multiply activity for each process involved.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>We can see a warning first occurred at the service (exception thrown), which is followed by warnings and errors on the client because the request could not be processed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Therefore, we can imply the causal error relationship between endpoints and derive the root cause of the error.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following image shows a graph view of error correlation:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Screenshot that shows the graph view of error correlation.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To obtain the previous traces, we set <ph id="ph1">`ActivityTracing`</ph> for the user trace sources and <ph id="ph2">`propagateActivity=true`</ph> for the <ph id="ph3">`System.ServiceModel`</ph> trace source.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>We did not set <ph id="ph1">`ActivityTracing`</ph> for the <ph id="ph2">`System.ServiceModel`</ph> trace source to enable user code to user code activity propagation.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>(When ServiceModel activity tracing is on, the activity ID defined in the client is not propagated all the way to the service user code; Transfers, however, correlate the client and service user code activities to the intermediate WCF activities.)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Defining activities and propagating the activity ID enables us to perform direct error correlation across endpoints.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In this way, we can locate the root cause of an error more quickly.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extending Tracing<ept id="p1">](../../../../../docs/framework/wcf/samples/extending-tracing.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>