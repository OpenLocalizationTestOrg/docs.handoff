{"content":"---\ntitle: \"How to: Use Indexed Properties in COM Interop Programming - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"indexed properties [C#]\"\n  - \"Office programming [C#], indexed properties\"\n  - \"properties [C#], indexed\"\nms.assetid: 756bfc1e-7c28-4d4d-b114-ac9288c73882\n---\n# How to: Use Indexed Properties in COM Interop Programming (C# Programming Guide)\n*Indexed properties* improve the way in which COM properties that have parameters are consumed in C# programming. Indexed properties work together with other features in Visual C#, such as [named and optional arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md), a new type ([dynamic](../../../csharp/language-reference/keywords/dynamic.md)), and [embedded type information](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md), to enhance Microsoft Office programming.  \n  \n In earlier versions of C#, methods are accessible as properties only if the `get` method has no parameters and the `set` method has one and only one value parameter. However, not all COM properties meet those restrictions. For example, the Excel <xref:Microsoft.Office.Interop.Excel.Range.Range%2A> property has a `get` accessor that requires a parameter for the name of the range. In the past, because you could not access the `Range` property directly, you had to use the `get_Range` method instead, as shown in the following example.  \n  \n [!code-csharp[csProgGuideIndexedProperties#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguideindexedproperties/cs/program.cs#1)]  \n  \n Indexed properties enable you to write the following instead:  \n  \n [!code-csharp[csProgGuideIndexedProperties#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguideindexedproperties/cs/program.cs#2)]  \n  \n> [!NOTE]\n>  The previous example also uses the [optional arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md) feature, which enables you to omit `Type.Missing`.  \n  \n Similarly to set the value of the `Value` property of a <xref:Microsoft.Office.Interop.Excel.Range> object in Visual C# 2008 and earlier, two arguments are required. One supplies an argument for an optional parameter that specifies the type of the range value. The other supplies the value for the `Value` property. The following examples illustrate these techniques. Both set the value of the A1 cell to `Name`.\n  \n [!code-csharp[csProgGuideIndexedProperties#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguideindexedproperties/cs/program.cs#3)]  \n  \n Indexed properties enable you to write the following code instead.  \n  \n [!code-csharp[csProgGuideIndexedProperties#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguideindexedproperties/cs/program.cs#4)]  \n  \n You cannot create indexed properties of your own. The feature only supports consumption of existing indexed properties.  \n  \n## Example  \n The following code shows a complete example. For more information about how to set up a project that accesses the Office API, see [How to: Access Office Interop Objects by Using Visual C# Features](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md).  \n  \n [!code-csharp[csProgGuideIndexedProperties#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csprogguideindexedproperties/cs/program.cs#5)]  \n  \n## See also\n\n- [Named and Optional Arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)\n- [dynamic](../../../csharp/language-reference/keywords/dynamic.md)\n- [Using Type dynamic](../../../csharp/programming-guide/types/using-type-dynamic.md)\n- [How to: Use Named and Optional Arguments in Office Programming](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)\n- [How to: Access Office Interop Objects by Using Visual C# Features](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)\n- [Walkthrough: Office Programming](../../../csharp/programming-guide/interop/walkthrough-office-programming.md)\n","nodes":[{"pos":[4,315],"embed":true,"restype":"x-metadata","content":"title: \"How to: Use Indexed Properties in COM Interop Programming - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"indexed properties [C#]\"\n  - \"Office programming [C#], indexed properties\"\n  - \"properties [C#], indexed\"\nms.assetid: 756bfc1e-7c28-4d4d-b114-ac9288c73882","nodes":[{"content":"How to: Use Indexed Properties in COM Interop Programming - C# Programming Guide","nodes":[{"pos":[0,80],"content":"How to: Use Indexed Properties in COM Interop Programming - C# Programming Guide","nodes":[{"content":"How to: Use Indexed Properties in COM Interop Programming - C# Programming Guide","pos":[0,80]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[322,402],"content":"How to: Use Indexed Properties in COM Interop Programming (C# Programming Guide)","linkify":"How to: Use Indexed Properties in COM Interop Programming (C# Programming Guide)","nodes":[{"content":"How to: Use Indexed Properties in COM Interop Programming (C# Programming Guide)","pos":[0,80]}]},{"content":"<bpt id=\"p1\">*</bpt>Indexed properties<ept id=\"p1\">*</ept> improve the way in which COM properties that have parameters are consumed in C# programming.","pos":[403,516],"source":"*Indexed properties* improve the way in which COM properties that have parameters are consumed in C# programming."},{"content":"Indexed properties work together with other features in Visual C#, such as <bpt id=\"p1\">[</bpt>named and optional arguments<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>, a new type (<bpt id=\"p2\">[</bpt>dynamic<ept id=\"p2\">](../../../csharp/language-reference/keywords/dynamic.md)</ept>), and <bpt id=\"p3\">[</bpt>embedded type information<ept id=\"p3\">](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)</ept>, to enhance Microsoft Office programming.","pos":[517,995],"source":" Indexed properties work together with other features in Visual C#, such as [named and optional arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md), a new type ([dynamic](../../../csharp/language-reference/keywords/dynamic.md)), and [embedded type information](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md), to enhance Microsoft Office programming."},{"content":"In earlier versions of C#, methods are accessible as properties only if the <ph id=\"ph1\">`get`</ph> method has no parameters and the <ph id=\"ph2\">`set`</ph> method has one and only one value parameter.","pos":[1002,1167],"source":"In earlier versions of C#, methods are accessible as properties only if the `get` method has no parameters and the `set` method has one and only one value parameter."},{"content":"However, not all COM properties meet those restrictions.","pos":[1168,1224]},{"content":"For example, the Excel <ph id=\"ph1\">&lt;xref:Microsoft.Office.Interop.Excel.Range.Range%2A&gt;</ph> property has a <ph id=\"ph2\">`get`</ph> accessor that requires a parameter for the name of the range.","pos":[1225,1383],"source":" For example, the Excel <xref:Microsoft.Office.Interop.Excel.Range.Range%2A> property has a `get` accessor that requires a parameter for the name of the range."},{"content":"In the past, because you could not access the <ph id=\"ph1\">`Range`</ph> property directly, you had to use the <ph id=\"ph2\">`get_Range`</ph> method instead, as shown in the following example.","pos":[1384,1538],"source":" In the past, because you could not access the `Range` property directly, you had to use the `get_Range` method instead, as shown in the following example."},{"content":"Indexed properties enable you to write the following instead:","pos":[1691,1752]},{"pos":[1906,2110],"content":"[!NOTE]\n The previous example also uses the [optional arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md) feature, which enables you to omit `Type.Missing`.","leadings":["","> "],"nodes":[{"content":"The previous example also uses the <bpt id=\"p1\">[</bpt>optional arguments<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept> feature, which enables you to omit <ph id=\"ph1\">`Type.Missing`</ph>.","pos":[9,202],"source":"The previous example also uses the [optional arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md) feature, which enables you to omit `Type.Missing`."}]},{"content":"Similarly to set the value of the <ph id=\"ph1\">`Value`</ph> property of a <ph id=\"ph2\">&lt;xref:Microsoft.Office.Interop.Excel.Range&gt;</ph> object in Visual C# 2008 and earlier, two arguments are required.","pos":[2117,2282],"source":"Similarly to set the value of the `Value` property of a <xref:Microsoft.Office.Interop.Excel.Range> object in Visual C# 2008 and earlier, two arguments are required."},{"content":"One supplies an argument for an optional parameter that specifies the type of the range value.","pos":[2283,2377]},{"content":"The other supplies the value for the <ph id=\"ph1\">`Value`</ph> property.","pos":[2378,2432],"source":" The other supplies the value for the `Value` property."},{"content":"The following examples illustrate these techniques.","pos":[2433,2484]},{"content":"Both set the value of the A1 cell to <ph id=\"ph1\">`Name`</ph>.","pos":[2485,2529],"source":" Both set the value of the A1 cell to `Name`."},{"content":"Indexed properties enable you to write the following code instead.","pos":[2680,2746]},{"content":"You cannot create indexed properties of your own.","pos":[2899,2948]},{"content":"The feature only supports consumption of existing indexed properties.","pos":[2949,3018]},{"pos":[3027,3034],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code shows a complete example.","pos":[3038,3082]},{"content":"For more information about how to set up a project that accesses the Office API, see <bpt id=\"p1\">[</bpt>How to: Access Office Interop Objects by Using Visual C# Features<ept id=\"p1\">](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)</ept>.","pos":[3083,3319],"source":" For more information about how to set up a project that accesses the Office API, see [How to: Access Office Interop Objects by Using Visual C# Features](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)."},{"pos":[3474,3482],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3486,3603],"content":"<bpt id=\"p1\">[</bpt>Named and Optional Arguments<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>","source":"[Named and Optional Arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)"},{"pos":[3606,3671],"content":"<bpt id=\"p1\">[</bpt>dynamic<ept id=\"p1\">](../../../csharp/language-reference/keywords/dynamic.md)</ept>","source":"[dynamic](../../../csharp/language-reference/keywords/dynamic.md)"},{"pos":[3674,3757],"content":"<bpt id=\"p1\">[</bpt>Using Type dynamic<ept id=\"p1\">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept>","source":"[Using Type dynamic](../../../csharp/programming-guide/types/using-type-dynamic.md)"},{"pos":[3760,3944],"content":"<bpt id=\"p1\">[</bpt>How to: Use Named and Optional Arguments in Office Programming<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)</ept>","source":"[How to: Use Named and Optional Arguments in Office Programming](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)"},{"pos":[3947,4097],"content":"<bpt id=\"p1\">[</bpt>How to: Access Office Interop Objects by Using Visual C# Features<ept id=\"p1\">](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)</ept>","source":"[How to: Access Office Interop Objects by Using Visual C# Features](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)"},{"pos":[4100,4210],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Office Programming<ept id=\"p1\">](../../../csharp/programming-guide/interop/walkthrough-office-programming.md)</ept>","source":"[Walkthrough: Office Programming](../../../csharp/programming-guide/interop/walkthrough-office-programming.md)"}]}