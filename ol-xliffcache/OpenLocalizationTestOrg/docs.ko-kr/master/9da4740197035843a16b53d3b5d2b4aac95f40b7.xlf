<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9da4740197035843a16b53d3b5d2b4aac95f40b7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\thread-local-storage-thread-relative-static-fields-and-data-slots.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3415a54f1793ed033249631b96eccf90e4c57a23</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fd2bfa24c548e8f728c55da135543cb1d881a6e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Thread Local Storage: Thread-Relative Static Fields and Data Slots | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Thread Local Storage: Thread-Relative Static Fields and Data Slots</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use managed thread local storage (TLS) to store data that is unique to a thread and application domain.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides two ways to use managed TLS: thread-relative static fields and data slots.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use thread-relative static fields (thread-relative <ph id="ph1">`Shared`</ph> fields in Visual Basic) if you can anticipate your exact needs at compile time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Thread-relative static fields provide the best performance.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>They also give you the benefits of compile-time type checking.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use data slots when your actual requirements might be discovered only at run time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Data slots are slower and more awkward to use than thread-relative static fields, and data is stored as type <ph id="ph1">&lt;xref:System.Object&gt;</ph>, so you must cast it to the correct type before you use it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In unmanaged C++, you use <ph id="ph1">`TlsAlloc`</ph> to allocate slots dynamically and <ph id="ph2">`__declspec(thread)`</ph> to declare that a variable should be allocated in thread-relative storage.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Thread-relative static fields and data slots provide the managed version of this behavior.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601?displayProperty=fullName&gt;</ph> class to create thread-local objects that are initialized lazily when the object is first consumed.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lazy Initialization<ept id="p1">](../../../docs/framework/performance/lazy-initialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Uniqueness of Data in Managed TLS</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Whether you use thread-relative static fields or data slots, data in managed TLS is unique to the combination of thread and application domain.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Within an application domain, one thread cannot modify data from another thread, even when both threads use the same field or slot.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When a thread accesses the same field or slot from multiple application domains, a separate value is maintained in each application domain.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, if a thread sets the value of a thread-relative static field, enters another application domain, and then retrieves the value of the field, the value retrieved in the second application domain differs from the value in the first application domain.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Setting a new value for the field in the second application domain does not affect the field's value in the first application domain.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Similarly, when a thread gets the same named data slot in two different application domains, the data in the first application domain remains independent of the data in the second application domain.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Thread-Relative Static Fields</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you know that a piece of data is always unique to a thread and application-domain combination, apply the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to the static field.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use the field as you would use any other static field.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The data in the field is unique to each thread that uses it.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Thread-relative static fields provide better performance than data slots and have the benefit of compile-time type checking.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Be aware that any class constructor code will run on the first thread in the first context that accesses the field.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In all other threads or contexts in the same application domain, the fields will be initialized to <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic) if they are reference types, or to their default values if they are value types.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Therefore, you should not rely on class constructors to initialize thread-relative static fields.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Instead, avoid initializing thread-relative static fields and assume that they are initialized to <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph>) or to their default values.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Data Slots</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides dynamic data slots that are unique to a combination of thread and application-domain.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There are two types of data slots: named slots and unnamed slots.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Both are implemented by using the <ph id="ph1">&lt;xref:System.LocalDataStoreSlot&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To create a named data slot, use the <ph id="ph1">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.GetNamedDataSlot%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To get a reference to an existing named slot, pass its name to the <ph id="ph1">&lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To create an unnamed data slot, use the <ph id="ph1">&lt;xref:System.Threading.Thread.AllocateDataSlot%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For both named and unnamed slots, use the <ph id="ph1">&lt;xref:System.Threading.Thread.SetData%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.GetData%2A?displayProperty=fullName&gt;</ph> methods to set and retrieve the information in the slot.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>These are static methods that always act on the data for the thread that is currently executing them.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Named slots can be convenient, because you can retrieve the slot when you need it by passing its name to the <ph id="ph1">&lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt;</ph> method, instead of maintaining a reference to an unnamed slot.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, if another component uses the same name for its thread-relative storage and a thread executes code from both your component and the other component, the two components might corrupt each other's data.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>(This scenario assumes that both components are running in the same application domain, and that they are not designed to share the same data.)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Threading<ept id="p1">](../../../docs/standard/threading/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>