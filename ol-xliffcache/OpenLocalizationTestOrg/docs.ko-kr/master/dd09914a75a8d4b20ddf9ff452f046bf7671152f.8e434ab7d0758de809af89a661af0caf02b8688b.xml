{"content":"---\ntitle: \"How to: Control the Type of a Projection (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: a0171276-0b46-4817-aee5-a8d5191b12fe\n---\n# How to: Control the Type of a Projection (Visual Basic)\nProjection is the process of taking one set of data, filtering it, changing its shape, and even changing its type. Most query expressions perform projections. Most of the query expressions shown in this section evaluate to <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, but you can control the type of the projection to create collections of other types. This topic shows how to do this.  \n  \n## Example  \n The following example defines a new type, `Customer`. The query expression then instantiates new `Customer` objects in the `Select` clause. This causes the type of the query expression to be <xref:System.Collections.Generic.IEnumerable%601> of `Customer`.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md).  \n  \n```vb  \nPublic Class Customer  \n    Private customerIDValue As String  \n    Public Property CustomerID() As String  \n        Get  \n            Return customerIDValue  \n        End Get  \n        Set(ByVal value As String)  \n            customerIDValue = value  \n        End Set  \n    End Property  \n  \n    Private companyNameValue As String  \n    Public Property CompanyName() As String  \n        Get  \n            Return companyNameValue  \n        End Get  \n        Set(ByVal value As String)  \n            companyNameValue = value  \n        End Set  \n    End Property  \n  \n    Private contactNameValue As String  \n    Public Property ContactName() As String  \n        Get  \n            Return contactNameValue  \n        End Get  \n        Set(ByVal value As String)  \n            contactNameValue = value  \n        End Set  \n    End Property  \n  \n    Public Sub New(ByVal customerID As String, _  \n                   ByVal companyName As String, _  \n                   ByVal contactName As String)  \n        CustomerIDValue = customerID  \n        CompanyNameValue = companyName  \n        ContactNameValue = contactName  \n    End Sub  \n  \n    Public Overrides Function ToString() As String  \n        Return String.Format(\"{0}:{1}:{2}\", Me.CustomerID, Me.CompanyName, Me.ContactName)  \n    End Function  \nEnd Class  \n  \nSub Main()  \n    Dim custOrd As XElement = XElement.Load(\"CustomersOrders.xml\")  \n    Dim custList As IEnumerable(Of Customer) = _  \n        From el In custOrd.<Customers>.<Customer> _  \n        Select New Customer( _  \n            el.@<CustomerID>, _  \n            el.<CompanyName>.Value, _  \n            el.<ContactName>.Value _  \n        )  \n    For Each cust In custList  \n        Console.WriteLine(cust)  \n    Next  \nEnd Sub  \n```  \n  \n This code produces the following output:  \n  \n```  \nGREAL:Great Lakes Food Market:Howard Snyder  \nHUNGC:Hungry Coyote Import Store:Yoshi Latimer  \nLAZYK:Lazy K Kountry Store:John Steel  \nLETSS:Let's Stop N Shop:Jaime Yorres  \n```  \n  \n## See also\n\n- <xref:System.Linq.Enumerable.Select%2A>\n- [Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)\n","nodes":[{"pos":[4,137],"embed":true,"restype":"x-metadata","content":"title: \"How to: Control the Type of a Projection (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: a0171276-0b46-4817-aee5-a8d5191b12fe","nodes":[{"content":"How to: Control the Type of a Projection (Visual Basic)","nodes":[{"pos":[0,55],"content":"How to: Control the Type of a Projection (Visual Basic)","nodes":[{"content":"How to: Control the Type of a Projection (Visual Basic)","pos":[0,55]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[144,199],"content":"How to: Control the Type of a Projection (Visual Basic)","linkify":"How to: Control the Type of a Projection (Visual Basic)","nodes":[{"content":"How to: Control the Type of a Projection (Visual Basic)","pos":[0,55]}]},{"content":"Projection is the process of taking one set of data, filtering it, changing its shape, and even changing its type.","pos":[200,314]},{"content":"Most query expressions perform projections.","pos":[315,358]},{"content":"Most of the query expressions shown in this section evaluate to <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, but you can control the type of the projection to create collections of other types.","pos":[359,593],"source":" Most of the query expressions shown in this section evaluate to <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, but you can control the type of the projection to create collections of other types."},{"content":"This topic shows how to do this.","pos":[594,626]},{"pos":[635,642],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example defines a new type, <ph id=\"ph1\">`Customer`</ph>.","pos":[646,699],"source":"The following example defines a new type, `Customer`."},{"content":"The query expression then instantiates new <ph id=\"ph1\">`Customer`</ph> objects in the <ph id=\"ph2\">`Select`</ph> clause.","pos":[700,785],"source":" The query expression then instantiates new `Customer` objects in the `Select` clause."},{"content":"This causes the type of the query expression to be <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph2\">`Customer`</ph>.","pos":[786,901],"source":" This causes the type of the query expression to be <xref:System.Collections.Generic.IEnumerable%601> of `Customer`."},{"pos":[908,1118],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)."},{"content":"This code produces the following output:","pos":[2884,2924]},{"pos":[3122,3130],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3176,3343],"content":"<bpt id=\"p1\">[</bpt>Projections and Transformations (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","source":"[Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}