{"content":"---\ntitle: \"Compiler Error CS0075\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0075\"\nhelpviewer_keywords: \n  - \"CS0075\"\nms.assetid: 5084d260-705e-4ff5-8f7a-7f74052fcbbb\n---\n# Compiler Error CS0075\nTo cast a negative value, you must enclose the value in parentheses  \n  \n If you are casting using a keyword that identifies a predefined type, then you do not need parentheses. Otherwise, you must put the parentheses because (x) –y will not be considered a cast expression. From the C# Specification, Section 7.6.6:  \n  \n *From the disambiguation rule it follows that, if x and y are identifiers, (x)y, (x)(y), and (x)(-y) are cast-expressions, but (x)-y is not, even if x identifies a type. However, if x is a keyword that identifies a predefined type (such as int), then all four forms are cast-expressions (because such a keyword could not possibly be an expression by itself).*  \n  \n The following code generates CS0075:  \n  \n```csharp  \n// CS0075  \nnamespace MyNamespace  \n{  \n    enum MyEnum { }  \n    public class MyClass  \n    {  \n        public static void Main()  \n        {  \n            // To fix the error, place the negative  \n            // values below in parentheses  \n            int i = (System.Int32) - 4; //CS0075  \n            MyEnum e = (MyEnum) - 1;    //CS0075  \n            System.Console.WriteLine(i); //to avoid warning  \n            System.Console.WriteLine(e); //to avoid warning  \n        }  \n    }  \n}  \n```  \n  \n## See also\n\n- [Casting and Type Conversions](../../csharp/programming-guide/types/casting-and-type-conversions.md)\n","nodes":[{"pos":[4,165],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Error CS0075\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0075\"\nhelpviewer_keywords: \n  - \"CS0075\"\nms.assetid: 5084d260-705e-4ff5-8f7a-7f74052fcbbb","nodes":[{"content":"Compiler Error CS0075","nodes":[{"pos":[0,21],"content":"Compiler Error CS0075","nodes":[{"content":"Compiler Error CS0075","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[172,193],"content":"Compiler Error CS0075","linkify":"Compiler Error CS0075","nodes":[{"content":"Compiler Error CS0075","pos":[0,21]}]},{"content":"To cast a negative value, you must enclose the value in parentheses","pos":[194,261]},{"content":"If you are casting using a keyword that identifies a predefined type, then you do not need parentheses.","pos":[268,371]},{"content":"Otherwise, you must put the parentheses because (x) –y will not be considered a cast expression.","pos":[372,468]},{"content":"From the C# Specification, Section 7.6.6:","pos":[469,510]},{"pos":[517,876],"content":"<bpt id=\"p1\">*</bpt>From the disambiguation rule it follows that, if x and y are identifiers, (x)y, (x)(y), and (x)(-y) are cast-expressions, but (x)-y is not, even if x identifies a type. However, if x is a keyword that identifies a predefined type (such as int), then all four forms are cast-expressions (because such a keyword could not possibly be an expression by itself).<ept id=\"p1\">*</ept>","source":"*From the disambiguation rule it follows that, if x and y are identifiers, (x)y, (x)(y), and (x)(-y) are cast-expressions, but (x)-y is not, even if x identifies a type. However, if x is a keyword that identifies a predefined type (such as int), then all four forms are cast-expressions (because such a keyword could not possibly be an expression by itself).*"},{"content":"The following code generates CS0075:","pos":[883,919]},{"pos":[1443,1451],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1455,1555],"content":"<bpt id=\"p1\">[</bpt>Casting and Type Conversions<ept id=\"p1\">](../../csharp/programming-guide/types/casting-and-type-conversions.md)</ept>","source":"[Casting and Type Conversions](../../csharp/programming-guide/types/casting-and-type-conversions.md)"}]}