<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="where-generic-type-constraint.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">094358dea9054bf198ded77736dc45af1a436787</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\where-generic-type-constraint.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53f815e0c6d190022a5a5037a123358ef71a4fc2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f99a626302c78aa3aafc5211b44343ab1e4cd27</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>where (generic type constraint) - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>where (generic type constraint) (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`where`</ph> clause in a generic definition specifies constraints on the types that are used as arguments for type parameters in a generic type, method, delegate, or local function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Constraints can specify interfaces, base classes, or require a generic type to be a reference, value or unmanaged type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They declare capabilities that the type argument must possess.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, you can declare a generic class, <ph id="ph1">`MyGenericClass`</ph>, such that the type parameter <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> interface:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information on the where clause in a query expression, see <bpt id="p1">[</bpt>where clause<ept id="p1">](where-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`where`</ph> clause can also include a base class constraint.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The base class constraint states that a type to be used as a type argument for that generic type has the specified class as a base class (or is that base class) to be used as a type argument for that generic type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the base class constraint is used, it must appear before any other constraints on that type parameter.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Some types are disallowed as a base class constraint: <ph id="ph1">&lt;xref:System.Object&gt;</ph>, <ph id="ph2">&lt;xref:System.Array&gt;</ph>, and <ph id="ph3">&lt;xref:System.ValueType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Prior to C# 7.3, <ph id="ph1">&lt;xref:System.Enum&gt;</ph>, <ph id="ph2">&lt;xref:System.Delegate&gt;</ph>, and <ph id="ph3">&lt;xref:System.MulticastDelegate&gt;</ph> were also disallowed as base class constraints.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example shows the types that can now be specified as a base class:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`where`</ph> clause can specify that the type is a <ph id="ph2">`class`</ph> or a <ph id="ph3">`struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`struct`</ph> constraint removes the need to specify a base class constraint of <ph id="ph2">`System.ValueType`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System.ValueType`</ph> type may not be used as a base class constraint.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows both the <ph id="ph1">`class`</ph> and <ph id="ph2">`struct`</ph> constraints:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`where`</ph> clause may also include an <ph id="ph2">`unmanaged`</ph> constraint.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unmanaged`</ph> constraint limits the type parameter to types known as <bpt id="p1">**</bpt>unmanaged types<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>unmanaged type<ept id="p1">**</ept> is a type that isn't a reference type and doesn't contain reference type fields at any level of nesting.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unmanaged`</ph> constraint makes it easier to write low-level interop code in C#.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This constraint enables reusable routines across all unmanaged types.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unmanaged`</ph> constraint can't be combined with the <ph id="ph2">`class`</ph> or <ph id="ph3">`struct`</ph> constraint.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unmanaged`</ph> constraint enforces that the type must be a <ph id="ph2">`struct`</ph>:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`where`</ph> clause may also include a constructor constraint, <ph id="ph2">`new()`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>That constraint makes it possible to create an instance of a type parameter using the <ph id="ph1">`new`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>new() Constraint<ept id="p1">](new-constraint.md)</ept> lets the compiler know that any type argument supplied must have an accessible parameterless--or default-- constructor.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`new()`</ph> constraint appears last in the <ph id="ph2">`where`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`new()`</ph> constraint can't be combined with the <ph id="ph2">`struct`</ph> or <ph id="ph3">`unmanaged`</ph> constraints.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All types satisfying those constraints must have an accessible parameterless constructor, making the <ph id="ph1">`new()`</ph> constraint redundant.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>With multiple type parameters, use one <ph id="ph1">`where`</ph> clause for each type parameter, for example:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can also attach constraints to type parameters of generic methods, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Notice that the syntax to describe type parameter constraints on delegates is the same as that of methods:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For information on generic delegates, see <bpt id="p1">[</bpt>Generic Delegates<ept id="p1">](../../../csharp/programming-guide/generics/generic-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For details on the syntax and use of constraints, see <bpt id="p1">[</bpt>Constraints on Type Parameters<ept id="p1">](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Generics<ept id="p1">](../../../csharp/programming-guide/generics/introduction-to-generics.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>new Constraint<ept id="p1">](../../../csharp/language-reference/keywords/new-constraint.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constraints on Type Parameters<ept id="p1">](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>