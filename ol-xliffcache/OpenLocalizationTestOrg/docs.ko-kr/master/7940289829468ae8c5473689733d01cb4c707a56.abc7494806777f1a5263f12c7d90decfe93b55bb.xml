{"content":"---\ntitle: \"Perform a subquery on a grouping operation\"\ndescription: How to perform a subquery on a grouping operation.\nkeywords: .NET, .NET Core, C#\nauthor: BillWagner\nmanager: wpickett\nms.author: wiwagn\nms.date: 12/1/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: d75a588e-9b6f-4f37-b195-f99ec8503855\n---\n# Perform a subquery on a grouping operation\n\nThis topic shows two different ways to create a query that orders the source data into groups, and then performs a subquery over each group individually. The basic technique in each example is to group the source elements by using a *continuation* named `newGroup`, and then generating a new subquery against `newGroup`. This subquery is run against each new group that is created by the outer query. Note that in this particular example the final output is not a group, but a flat sequence of anonymous types.  \n  \n For more information about how to group, see [group clause](../language-reference/keywords/group-clause.md).  \n  \n For more information about continuations, see [into](../language-reference/keywords/into.md). The following example uses an in-memory data structure as the data source, but the same principles apply for any kind of LINQ data source.  \n  \n## Example \n\n > [!NOTE]\n > This example contains references to objects that are defined in the sample code in [Query a collection of objects](query-a-collection-of-objects.md).\n\n [!code-cs[csProgGuideLINQ#23](../../../samples/snippets/csharp/concepts/linq/how-to-perform-a-subquery-on-a-grouping-operation_1.cs)]  \n   \n## See also  \n [LINQ Query Expressions](index.md)","nodes":[{"pos":[4,366],"embed":true,"restype":"x-metadata","content":"title: \"Perform a subquery on a grouping operation\"\ndescription: How to perform a subquery on a grouping operation.\nkeywords: .NET, .NET Core, C#\nauthor: BillWagner\nmanager: wpickett\nms.author: wiwagn\nms.date: 12/1/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: d75a588e-9b6f-4f37-b195-f99ec8503855","nodes":[{"content":"Perform a subquery on a grouping operation","nodes":[{"pos":[0,42],"content":"Perform a subquery on a grouping operation","nodes":[{"content":"Perform a subquery on a grouping operation","pos":[0,42]}]}],"path":["title"]},{"content":"How to perform a subquery on a grouping operation.","nodes":[{"pos":[0,50],"content":"How to perform a subquery on a grouping operation.","nodes":[{"content":"How to perform a subquery on a grouping operation.","pos":[0,50]}]}],"path":["description"]},{"content":".NET, .NET Core, C#","nodes":[{"pos":[0,19],"content":".NET, .NET Core, C#","nodes":[{"content":".NET, .NET Core, C#","pos":[0,19]}]}],"path":["keywords"]}],"yml":true},{"pos":[373,415],"content":"Perform a subquery on a grouping operation","linkify":"Perform a subquery on a grouping operation","nodes":[{"content":"Perform a subquery on a grouping operation","pos":[0,42]}]},{"content":"This topic shows two different ways to create a query that orders the source data into groups, and then performs a subquery over each group individually.","pos":[417,570]},{"content":"The basic technique in each example is to group the source elements by using a <bpt id=\"p1\">*</bpt>continuation<ept id=\"p1\">*</ept> named <ph id=\"ph1\">`newGroup`</ph>, and then generating a new subquery against <ph id=\"ph2\">`newGroup`</ph>.","pos":[571,737],"source":" The basic technique in each example is to group the source elements by using a *continuation* named `newGroup`, and then generating a new subquery against `newGroup`."},{"content":"This subquery is run against each new group that is created by the outer query.","pos":[738,817]},{"content":"Note that in this particular example the final output is not a group, but a flat sequence of anonymous types.","pos":[818,927]},{"pos":[934,1042],"content":"For more information about how to group, see <bpt id=\"p1\">[</bpt>group clause<ept id=\"p1\">](../language-reference/keywords/group-clause.md)</ept>.","source":"For more information about how to group, see [group clause](../language-reference/keywords/group-clause.md)."},{"content":"For more information about continuations, see <bpt id=\"p1\">[</bpt>into<ept id=\"p1\">](../language-reference/keywords/into.md)</ept>.","pos":[1049,1142],"source":"For more information about continuations, see [into](../language-reference/keywords/into.md)."},{"content":"The following example uses an in-memory data structure as the data source, but the same principles apply for any kind of LINQ data source.","pos":[1143,1281]},{"pos":[1290,1297],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1303,1463],"content":"[!NOTE]\nThis example contains references to objects that are defined in the sample code in [Query a collection of objects](query-a-collection-of-objects.md).","leadings":[""," > "],"nodes":[{"content":"This example contains references to objects that are defined in the sample code in <bpt id=\"p1\">[</bpt>Query a collection of objects<ept id=\"p1\">](query-a-collection-of-objects.md)</ept>.","pos":[8,157],"source":"This example contains references to objects that are defined in the sample code in [Query a collection of objects](query-a-collection-of-objects.md)."}]},{"pos":[1609,1617],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1621,1655],"content":"<bpt id=\"p1\">[</bpt>LINQ Query Expressions<ept id=\"p1\">](index.md)</ept>","source":"[LINQ Query Expressions](index.md)"}]}