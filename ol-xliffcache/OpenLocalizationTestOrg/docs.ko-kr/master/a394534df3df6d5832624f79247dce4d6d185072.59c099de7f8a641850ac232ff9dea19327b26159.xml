{"content":"---\ntitle: \"ReadOnly (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.ReadOnly\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"ReadOnly keyword\"\n  - \"variables [Visual Basic], read-only\"\n  - \"ReadOnly property\"\n  - \"properties [Visual Basic], read-only\"\n  - \"read-only variables\"\nms.assetid: e868185d-6142-4359-a2fd-a7965cadfce8\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ReadOnly (Visual Basic)\nSpecifies that a variable or property can be read but not written.  \n  \n## Remarks  \n  \n## Rules  \n  \n-   **Declaration Context.** You can use `ReadOnly` only at module level. This means the declaration context for a `ReadOnly` element must be a class, structure, or module, and cannot be a source file, namespace, or procedure.  \n  \n-   **Combined Modifiers.** You cannot specify `ReadOnly` together with `Static` in the same declaration.  \n  \n-   **Assigning a Value.** Code consuming a `ReadOnly` property cannot set its value. But code that has access to the underlying storage can assign or change the value at any time.  \n  \n     You can assign a value to a `ReadOnly` variable only in its declaration or in the constructor of a class or structure in which it is defined.  \n  \n## When to Use a ReadOnly Variable  \n There are situations in which you cannot use a [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md) to declare and assign a constant value. For example, the `Const` statement might not accept the data type you want to assign, or you might not be able to compute the value at compile time with a constant expression. You might not even know the value at compile time. In these cases, you can use a `ReadOnly` variable to hold a constant value.  \n  \n> [!IMPORTANT]\n>  If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is `ReadOnly`. The following example illustrates this.  \n  \n `ReadOnly characterArray() As Char = {\"x\"c, \"y\"c, \"z\"c}`  \n  \n `Sub changeArrayElement()`  \n  \n `characterArray(1) = \"M\"c`  \n  \n `End Sub`  \n  \n When initialized, the array pointed to by `characterArray()` holds \"x\", \"y\", and \"z\". Because the variable `characterArray` is `ReadOnly`, you cannot change its value once it is initialized; that is, you cannot assign a new array to it. However, you can change the values of one or more of the array members. Following a call to the procedure `changeArrayElement`, the array pointed to by `characterArray()` holds \"x\", \"M\", and \"z\".  \n  \n Note that this is similar to declaring a procedure parameter to be [ByVal](../../../visual-basic/language-reference/modifiers/byval.md), which prevents the procedure from changing the calling argument itself but allows it to change its members.  \n  \n## Example  \n The following example defines a `ReadOnly` property for the date on which an employee was hired. The class stores the property value internally as a `Private` variable, and only code inside the class can change that value. However, the property is `Public`, and any code that can access the class can read the property.  \n  \n [!code-vb[VbVbalrKeywords#4](../../../visual-basic/language-reference/codesnippet/VisualBasic/readonly_1.vb)]  \n  \n The `ReadOnly` modifier can be used in these contexts:  \n  \n [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n## See Also  \n [WriteOnly](../../../visual-basic/language-reference/modifiers/writeonly.md)   \n [Keywords](../../../visual-basic/language-reference/keywords/index.md)","nodes":[{"pos":[12,52],"content":"ReadOnly (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ReadOnly (Visual Basic) | Microsoft Docs","pos":[0,40]}]},{"pos":[709,732],"content":"ReadOnly (Visual Basic)","linkify":"ReadOnly (Visual Basic)","nodes":[{"content":"ReadOnly (Visual Basic)","pos":[0,23]}]},{"content":"Specifies that a variable or property can be read but not written.","pos":[733,799]},{"pos":[808,815],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[824,829],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Declaration Context.<ept id=\"p1\">**</ept>","pos":[839,863],"source":"**Declaration Context.**"},{"content":"You can use <ph id=\"ph1\">`ReadOnly`</ph> only at module level.","pos":[864,908],"source":" You can use `ReadOnly` only at module level."},{"content":"This means the declaration context for a <ph id=\"ph1\">`ReadOnly`</ph> element must be a class, structure, or module, and cannot be a source file, namespace, or procedure.","pos":[909,1061],"source":" This means the declaration context for a `ReadOnly` element must be a class, structure, or module, and cannot be a source file, namespace, or procedure."},{"content":"<bpt id=\"p1\">**</bpt>Combined Modifiers.<ept id=\"p1\">**</ept>","pos":[1071,1094],"source":"**Combined Modifiers.**"},{"content":"You cannot specify <ph id=\"ph1\">`ReadOnly`</ph> together with <ph id=\"ph2\">`Static`</ph> in the same declaration.","pos":[1095,1172],"source":" You cannot specify `ReadOnly` together with `Static` in the same declaration."},{"content":"<bpt id=\"p1\">**</bpt>Assigning a Value.<ept id=\"p1\">**</ept>","pos":[1182,1204],"source":"**Assigning a Value.**"},{"content":"Code consuming a <ph id=\"ph1\">`ReadOnly`</ph> property cannot set its value.","pos":[1205,1263],"source":" Code consuming a `ReadOnly` property cannot set its value."},{"content":"But code that has access to the underlying storage can assign or change the value at any time.","pos":[1264,1358]},{"pos":[1369,1510],"content":"You can assign a value to a <ph id=\"ph1\">`ReadOnly`</ph> variable only in its declaration or in the constructor of a class or structure in which it is defined.","source":"You can assign a value to a `ReadOnly` variable only in its declaration or in the constructor of a class or structure in which it is defined."},{"pos":[1519,1550],"content":"When to Use a ReadOnly Variable","linkify":"When to Use a ReadOnly Variable","nodes":[{"content":"When to Use a ReadOnly Variable","pos":[0,31]}]},{"content":"There are situations in which you cannot use a <bpt id=\"p1\">[</bpt>Const Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/const-statement.md)</ept> to declare and assign a constant value.","pos":[1554,1730],"source":"There are situations in which you cannot use a [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md) to declare and assign a constant value."},{"content":"For example, the <ph id=\"ph1\">`Const`</ph> statement might not accept the data type you want to assign, or you might not be able to compute the value at compile time with a constant expression.","pos":[1731,1906],"source":" For example, the `Const` statement might not accept the data type you want to assign, or you might not be able to compute the value at compile time with a constant expression."},{"content":"You might not even know the value at compile time.","pos":[1907,1957]},{"content":"In these cases, you can use a <ph id=\"ph1\">`ReadOnly`</ph> variable to hold a constant value.","pos":[1958,2033],"source":" In these cases, you can use a `ReadOnly` variable to hold a constant value."},{"pos":[2041,2258],"content":"[!IMPORTANT]\n If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is `ReadOnly`. The following example illustrates this.","leadings":["","> "],"nodes":[{"content":" If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is `ReadOnly`. The following example illustrates this.","pos":[13,215],"nodes":[{"content":"If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is <ph id=\"ph1\">`ReadOnly`</ph>.","pos":[1,162],"source":" If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is `ReadOnly`."},{"content":"The following example illustrates this.","pos":[163,202]}]}]},{"content":"When initialized, the array pointed to by <ph id=\"ph1\">`characterArray()`</ph> holds \"x\", \"y\", and \"z\".","pos":[2410,2495],"source":"When initialized, the array pointed to by `characterArray()` holds \"x\", \"y\", and \"z\"."},{"content":"Because the variable <ph id=\"ph1\">`characterArray`</ph> is <ph id=\"ph2\">`ReadOnly`</ph>, you cannot change its value once it is initialized; that is, you cannot assign a new array to it.","pos":[2496,2646],"source":" Because the variable `characterArray` is `ReadOnly`, you cannot change its value once it is initialized; that is, you cannot assign a new array to it."},{"content":"However, you can change the values of one or more of the array members.","pos":[2647,2718]},{"content":"Following a call to the procedure <ph id=\"ph1\">`changeArrayElement`</ph>, the array pointed to by <ph id=\"ph2\">`characterArray()`</ph> holds \"x\", \"M\", and \"z\".","pos":[2719,2842],"source":" Following a call to the procedure `changeArrayElement`, the array pointed to by `characterArray()` holds \"x\", \"M\", and \"z\"."},{"pos":[2849,3093],"content":"Note that this is similar to declaring a procedure parameter to be <bpt id=\"p1\">[</bpt>ByVal<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/byval.md)</ept>, which prevents the procedure from changing the calling argument itself but allows it to change its members.","source":"Note that this is similar to declaring a procedure parameter to be [ByVal](../../../visual-basic/language-reference/modifiers/byval.md), which prevents the procedure from changing the calling argument itself but allows it to change its members."},{"pos":[3102,3109],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example defines a <ph id=\"ph1\">`ReadOnly`</ph> property for the date on which an employee was hired.","pos":[3113,3209],"source":"The following example defines a `ReadOnly` property for the date on which an employee was hired."},{"content":"The class stores the property value internally as a <ph id=\"ph1\">`Private`</ph> variable, and only code inside the class can change that value.","pos":[3210,3335],"source":" The class stores the property value internally as a `Private` variable, and only code inside the class can change that value."},{"content":"However, the property is <ph id=\"ph1\">`Public`</ph>, and any code that can access the class can read the property.","pos":[3336,3432],"source":" However, the property is `Public`, and any code that can access the class can read the property."},{"pos":[3439,3548],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrKeywords#4<ept id=\"p2\">](../../../visual-basic/language-reference/codesnippet/VisualBasic/readonly_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrKeywords#4](../../../visual-basic/language-reference/codesnippet/VisualBasic/readonly_1.vb)]"},{"pos":[3555,3609],"content":"The <ph id=\"ph1\">`ReadOnly`</ph> modifier can be used in these contexts:","source":"The `ReadOnly` modifier can be used in these contexts:"},{"pos":[3616,3701],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[3708,3803],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[3812,3820],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>WriteOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/writeonly.md)</ept><ph id=\"ph1\"> </ph>","pos":[3824,3901],"source":"[WriteOnly](../../../visual-basic/language-reference/modifiers/writeonly.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Keywords<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/index.md)</ept>","pos":[3904,3975],"source":" [Keywords](../../../visual-basic/language-reference/keywords/index.md)"}]}