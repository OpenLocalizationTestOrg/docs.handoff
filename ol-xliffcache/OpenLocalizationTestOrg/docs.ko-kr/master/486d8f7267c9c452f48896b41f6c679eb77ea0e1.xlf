<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">486d8f7267c9c452f48896b41f6c679eb77ea0e1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\aspnet-caching-integration.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0af55ad517dc080b533694258824cf1c919cb27</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b622dbad33fb682a1957542e39962a1fd1c0ef20</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ASP.NET Caching Integration | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ASP.NET Caching Integration</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to utilize the ASP.NET output cache with the WCF WEB HTTP programming model.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Please see the <bpt id="p1">[</bpt>Basic Resource Service<ept id="p1">](../../../../docs/framework/wcf/samples/basic-resource-service.md)</ept> sample for a self-hosted version of this scenario that discusses the service implementation in depth.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic focuses on the ASP.NET output cache integration feature.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Demonstrates</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Integration with the ASP.NET Output Cache</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Discussion</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The sample uses the <ph id="ph1">&lt;xref:System.ServiceModel.Web.AspNetCacheProfileAttribute&gt;</ph> to utilize ASP.NET output caching with the <ph id="ph2">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> service.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Web.AspNetCacheProfileAttribute&gt;</ph> is applied to service operations, and provides the name of a cache profile in a configuration file that should be applied to responses from the given operation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the Service.cs file of the sample Service project, both the <ph id="ph1">`GetCustomer`</ph> and <ph id="ph2">`GetCustomers`</ph> operations are marked with the <ph id="ph3">&lt;xref:System.ServiceModel.Web.AspNetCacheProfileAttribute&gt;</ph>, which provides the cache profile name "CacheFor60Seconds".</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the Web.config file of the Service project, the cache profile "CacheFor60Seconds" is provided under the &lt;<ph id="ph1">`caching`</ph>&gt; element of &lt;<ph id="ph2">`system.web`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For this cache profile, the value of the <ph id="ph1">`duration`</ph> attribute is "60", so responses associated with this profile are cached in the ASP.NET output cache for 60 seconds.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Also, for this cache profile, the <ph id="ph1">`varmByParam`</ph> attribute is set to "format" so requests with different values for the <ph id="ph2">`format`</ph> query string parameter have their responses cached separately.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Lastly, the cache profileâ€™s <ph id="ph1">`varyByHeader`</ph> attribute is set to "Accept", so requests with different Accept header values have their responses cached separately.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Program.cs in the Client project demonstrates how such a client can be authored using <ph id="ph1">&lt;xref:System.Net.HttpWebRequest&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Note that this is just one way to access a WCF service.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It is also possible to access the service using other .NET Framework classes like the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> channel factory and <ph id="ph2">&lt;xref:System.Net.WebClient&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Other samples in the SDK (such as the <bpt id="p1">[</bpt>Basic HTTP Service<ept id="p1">](../../../../docs/framework/wcf/samples/basic-http-service.md)</ept> sample and the <bpt id="p2">[</bpt>Automatic Format Selection<ept id="p2">](../../../../docs/framework/wcf/samples/automatic-format-selection.md)</ept> sample) illustrate how to use these classes to communicate with a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To run the sample</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The sample consists of three projects:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service<ept id="p1">**</ept>: A Web Application project that includes a WCF HTTP service hosted in ASP.NET.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Client<ept id="p1">**</ept>: A console application project that makes calls to the service.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Common<ept id="p1">**</ept>: A shared library that contains the Customer type used by the client and service.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>As the Client console application runs, the client makes requests to the service and writes the pertinent information from the responses to the console window.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To run the sample</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Open the solution for the ASP.NET Caching Integration Sample.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Press CTRL+SHIFT+B to build the solution.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> window is not already open, press CTRL+W+S.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> window, right click the <bpt id="p2">**</bpt>Service<ept id="p2">**</ept> project and select <bpt id="p3">**</bpt>Start New Instance<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This launches the ASP.NET development server, which hosts the service.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> window, right click the <bpt id="p2">**</bpt>Client<ept id="p2">**</ept> project and select <bpt id="p3">**</bpt>Start New Instance<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The client console window appears and provides the URI of the running service and the URI of the HTML help page for the running service.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>At any point in time you can view the HTML help page by typing the URI of the help page in a browser.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As the sample runs, the client writes the status of the current activity.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Press any key to terminate the client console application.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Press SHIFT+F5 to stop debugging the service.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the Windows Notification Area, right click the ASP.NET development server icon and select <bpt id="p1">**</bpt>Stop<ept id="p1">**</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>