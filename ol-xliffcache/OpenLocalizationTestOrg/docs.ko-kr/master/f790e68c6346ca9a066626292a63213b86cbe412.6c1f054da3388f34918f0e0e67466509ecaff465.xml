{"content":"---\ntitle: \"&lt;&lt;= Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<<=_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"<<= operator (left-shift assignment) [C#]\"\n  - \"left shift assignment operator (<<=) [C#]\"\nms.assetid: 3bc99c78-1edb-4827-86fc-bce6c3048871\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;&lt;= Operator (C# Reference)\nThe left-shift assignment operator.  \n  \n## Remarks  \n An expression of the form  \n  \n```  \nx <<= y  \n```  \n  \n is evaluated as  \n  \n```  \nx = x << y  \n```  \n  \n except that `x` is only evaluated once. The [<< operator](../../../csharp/language-reference/operators/left-shift-operator.md) shifts `x` left by the number of bits specified by `y`.  \n  \n The `<<=` operator cannot be overloaded directly, but user-defined types can overload the [<< operator](../../../csharp/language-reference/operators/left-shift-operator.md) (see [operator](../../../csharp/language-reference/keywords/operator.md)).  \n  \n## Example  \n [!code-cs[csRefOperators#12](../../../csharp/language-reference/operators/codesnippet/CSharp/left-shift-assignment-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,634],"nodes":[{"content":"&lt;&lt;= Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,50],"content":"&lt;&lt;= Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph>= Operator (C# Reference) | Microsoft Docs","pos":[0,50],"source":"&lt;&lt;= Operator (C# Reference) | Microsoft Docs"}]}],"pos":[6,59],"yaml":true}],"content":"title: \"&lt;&lt;= Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<<=_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"<<= operator (left-shift assignment) [C#]\"\n  - \"left shift assignment operator (<<=) [C#]\"\nms.assetid: 3bc99c78-1edb-4827-86fc-bce6c3048871\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[641,674],"content":"&lt;&lt;= Operator (C# Reference)","linkify":"&lt;&lt;= Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph>= Operator (C# Reference)","pos":[0,33],"source":"&lt;&lt;= Operator (C# Reference)"}]},{"content":"The left-shift assignment operator.","pos":[675,710]},{"pos":[719,726],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An expression of the form","pos":[730,755]},{"content":"is evaluated as","pos":[787,802]},{"content":"except that <ph id=\"ph1\">`x`</ph> is only evaluated once.","pos":[837,876],"source":"except that `x` is only evaluated once."},{"content":"The <bpt id=\"p1\">[</bpt>&lt;&lt; operator<ept id=\"p1\">](../../../csharp/language-reference/operators/left-shift-operator.md)</ept> shifts <ph id=\"ph1\">`x`</ph> left by the number of bits specified by <ph id=\"ph2\">`y`</ph>.","pos":[877,1019],"source":" The [<< operator](../../../csharp/language-reference/operators/left-shift-operator.md) shifts `x` left by the number of bits specified by `y`."},{"pos":[1026,1273],"content":"The <ph id=\"ph1\">`&lt;&lt;=`</ph> operator cannot be overloaded directly, but user-defined types can overload the <bpt id=\"p1\">[</bpt>&lt;&lt; operator<ept id=\"p1\">](../../../csharp/language-reference/operators/left-shift-operator.md)</ept> (see <bpt id=\"p2\">[</bpt>operator<ept id=\"p2\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","source":"The `<<=` operator cannot be overloaded directly, but user-defined types can overload the [<< operator](../../../csharp/language-reference/operators/left-shift-operator.md) (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"pos":[1282,1289],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1293,1423],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#12<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/left-shift-assignment-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#12](../../../csharp/language-reference/operators/codesnippet/CSharp/left-shift-assignment-operator_1.cs)]"},{"pos":[1432,1440],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1444,1504],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1508,1575],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1579,1648],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}