<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba3a33e8c652f0e02eb5705b69ba4d5c828a809f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\modifiers\shared.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">503e57118aebb11e64fbbd3ecb29107ceb6fb43e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa6df89585e8e0e09116038965e2a3ddbdce1169</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Shared (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Shared (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies that one or more declared programming elements are associated with a class or structure at large, and not with a specific instance of the class or structure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When to Use Shared</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Sharing a member of a class or structure makes it available to every instance, rather than <bpt id="p1">*</bpt>nonshared<ept id="p1">*</ept>, where each instance keeps its own copy.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is useful, for example, if the value of a variable applies to the entire application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you declare that variable to be <ph id="ph1">`Shared`</ph>, then all instances access the same storage location, and if one instance changes the variable's value, all instances access the updated value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Sharing does not alter the access level of a member.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, a class member can be shared and private (accessible only from within the class), or nonshared and public.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Access Levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Rules</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Declaration Context.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Shared`</ph> only at module level.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This means the declaration context for a <ph id="ph1">`Shared`</ph> element must be a class or structure, and cannot be a source file, namespace, or procedure.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Combined Modifiers.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You cannot specify <ph id="ph1">`Shared`</ph> together with <bpt id="p1">[</bpt>Overrides<ept id="p1">](../../../visual-basic/language-reference/modifiers/overrides.md)</ept>, <bpt id="p2">[</bpt>Overridable<ept id="p2">](../../../visual-basic/language-reference/modifiers/overridable.md)</ept>, <bpt id="p3">[</bpt>NotOverridable<ept id="p3">](../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept>, <bpt id="p4">[</bpt>MustOverride<ept id="p4">](../../../visual-basic/language-reference/modifiers/mustoverride.md)</ept>, or <bpt id="p5">[</bpt>Static<ept id="p5">](../../../visual-basic/language-reference/modifiers/static.md)</ept> in the same declaration.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Accessing.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You access a shared element by qualifying it with its class or structure name, not with the variable name of a specific instance of its class or structure.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You do not even have to create an instance of a class or structure to access its shared members.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example calls the shared procedure <ph id="ph1">&lt;xref:System.Double.IsNaN%2A&gt;</ph> exposed by the <ph id="ph2">&lt;xref:System.Double&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implicit Sharing.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You cannot use the <ph id="ph1">`Shared`</ph> modifier in a <bpt id="p1">[</bpt>Const Statement<ept id="p1">](../../../visual-basic/language-reference/statements/const-statement.md)</ept>, but constants are implicitly shared.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Similarly, you cannot declare a member of a module or an interface to be <ph id="ph1">`Shared`</ph>, but they are implicitly shared.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Storage.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A shared variable or event is stored in memory only once, no matter how many or few instances you create of its class or structure.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Similarly, a shared procedure or property holds only one set of local variables.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Accessing through an Instance Variable.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is possible to access a shared element by qualifying it with the name of a variable that contains a specific instance of its class or structure.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although this usually works as expected, the compiler generates a warning message and makes the access through the class or structure name instead of the variable.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Accessing through an Instance Expression.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you access a shared element through an expression that returns an instance of its class or structure, the compiler makes the access through the class or structure name instead of evaluating the expression.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This produces unexpected results if you intended the expression to perform other actions as well as returning the instance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the preceding example, the compiler generates a warning message both times the code accesses the shared variable <ph id="ph1">`total`</ph> through an instance.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In each case it makes the access directly through the class <ph id="ph1">`shareTotal`</ph> and does not make use of any instance.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the case of the intended call to the procedure <ph id="ph1">`returnClass`</ph>, this means it does not even generate a call to <ph id="ph2">`returnClass`</ph>, so the additional action of displaying "Function returnClass() called" is not performed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Shared`</ph> modifier can be used in these contexts:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event Statement<ept id="p1">](../../../visual-basic/language-reference/statements/event-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Statement<ept id="p1">](../../../visual-basic/language-reference/statements/operator-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Property Statement<ept id="p1">](../../../visual-basic/language-reference/statements/property-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Statement<ept id="p1">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Static<ept id="p1">](../../../visual-basic/language-reference/modifiers/static.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Lifetime in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Objects and Classes<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>