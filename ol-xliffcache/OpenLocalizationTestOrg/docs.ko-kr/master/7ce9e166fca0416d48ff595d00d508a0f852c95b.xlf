<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-parallelism-task-parallel-library.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ce9e166fca0416d48ff595d00d508a0f852c95b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\data-parallelism-task-parallel-library.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08ba70d43c1c939fe4b7697a4ed780664ca51c32</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92ebd7a778441c7ba4d62398fcf2787c3097a277</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Parallelism (Task Parallel Library) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Parallelism (Task Parallel Library)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Data parallelism<ept id="p1">*</ept> refers to scenarios in which the same operation is performed concurrently (that is, in parallel) on elements in a source collection or array.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In data parallel operations, the source collection is partitioned so that multiple threads can operate on different segments concurrently.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Task Parallel Library (TPL) supports data parallelism through the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This class provides method-based parallel implementations of <bpt id="p1">[</bpt>for<ept id="p1">](~/docs/csharp/language-reference/keywords/for.md)</ept> and <bpt id="p2">[</bpt>foreach<ept id="p2">](~/docs/csharp/language-reference/keywords/foreach-in.md)</ept> loops (<ph id="ph1">`For`</ph> and <ph id="ph2">`For Each`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You write the loop logic for a <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> loop much as you would write a sequential loop.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You do not have to create threads or queue work items.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In basic loops, you do not have to take locks.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The TPL handles all the low-level work for you.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For in-depth information about the use of <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph>, download the document <bpt id="p1">[</bpt>Patterns for Parallel Programming: Understanding and Applying Parallel Patterns with the .NET Framework 4<ept id="p1">](http://www.microsoft.com/download/details.aspx?id=19222)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code example shows a simple <ph id="ph1">`foreach`</ph> loop and its parallel equivalent.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This documentation uses lambda expressions to define delegates in TPL.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you are not familiar with lambda expressions in C# or Visual Basic, see <bpt id="p1">[</bpt>Lambda Expressions in PLINQ and TPL<ept id="p1">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When a parallel loop runs, the TPL partitions the data source so that the loop can operate on multiple parts concurrently.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Behind the scenes, the Task Scheduler partitions the task based on system resources and workload.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When possible, the scheduler redistributes work among multiple threads and processors if the workload becomes unbalanced.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also supply your own custom partitioner or scheduler.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Custom Partitioners for PLINQ and TPL<ept id="p1">](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id="p2">[</bpt>Task Schedulers<ept id="p2">](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> methods have several overloads that let you stop or break loop execution, monitor the state of the loop on other threads, maintain thread-local state, finalize thread-local objects, control the degree of concurrency, and so on.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The helper types that enable this functionality include <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelOptions&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopResult&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.CancellationToken&gt;</ph>, and <ph id="ph5">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Patterns of Parallel Programming<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=265491)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Data parallelism with declarative, or query-like, syntax is supported by PLINQ.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Parallel LINQ (PLINQ)<ept id="p1">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Write a Simple Parallel.For Loop<ept id="p1">](../../../docs/standard/parallel-programming/how-to-write-a-simple-parallel-for-loop.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Describes how to write a <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A&gt;</ph> loop over any array or indexable <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> source collection.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Write a Simple Parallel.ForEach Loop<ept id="p1">](../../../docs/standard/parallel-programming/how-to-write-a-simple-parallel-foreach-loop.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Describes how to write a <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> loop over any <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> source collection.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Stop or Break from a Parallel.For Loop<ept id="p1">](http://msdn.microsoft.com/en-us/de52e4f1-9346-4ad5-b582-1a4d54dc7f7e)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Describes how to stop or break from a parallel loop so that all threads are informed of the action.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Write a Parallel.For Loop with Thread-Local Variables<ept id="p1">](../../../docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Describes how to write a <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A&gt;</ph> loop in which each thread maintains a private variable that is not visible to any other threads, and how to synchronize the results from all threads when the loop completes.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Write a Parallel.ForEach Loop with Thread-Local Variables<ept id="p1">](../../../docs/standard/parallel-programming/how-to-write-a-parallel-foreach-loop-with-thread-local-variables.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Describes how to write a <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> loop in which each thread maintains a private variable that is not visible to any other threads, and how to synchronize the results from all threads when the loop completes.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Cancel a Parallel.For or ForEach Loop<ept id="p1">](../../../docs/standard/parallel-programming/how-to-cancel-a-parallel-for-or-foreach-loop.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Describes how to cancel a parallel loop by using a <ph id="ph1">&lt;xref:System.Threading.CancellationToken?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Speed Up Small Loop Bodies<ept id="p1">](../../../docs/standard/parallel-programming/how-to-speed-up-small-loop-bodies.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Describes one way to speed up execution when a loop body is very small.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task Parallel Library (TPL)<ept id="p1">](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Provides an overview of the Task Parallel Library.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel Programming<ept id="p1">](../../../docs/standard/parallel-programming/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Introduces Parallel Programming in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel Programming<ept id="p1">](../../../docs/standard/parallel-programming/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>