{"content":"---\ntitle: \"How to: Declare Enumerations (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"declarations, enumerations\"\n  - \"enumerations [Visual Basic], declaring\"\n  - \"declaring enumerations\"\nms.assetid: db4ca1c3-f429-4c81-ae81-29e0157b29fd\ncaps.latest.revision: 24\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Declare Enumerations (Visual Basic)\nYou create an enumeration with the `Enum` statement in the declarations section of a class or module. You cannot declare an enumeration within a method. To specify the appropriate level of access, use `Private`, `Protected`, `Friend`, or `Public`.  \n  \n An `Enum` type has a name, an underlying type, and a set of fields, each representing a constant. The name must be a valid [!INCLUDE[vbprvblong](../../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)] qualifier. The underlying type must be one of the integer types—`Byte`, `Short`, `Long` or `Integer`. `Integer` is the default. Enumerations are always strongly typed and are not interchangeable with integer number types.  \n  \n Enumerations cannot have floating-point values. If an enumeration is assigned a floating-point value with `Option Strict On`, a compiler error results. If `Option Strict` is `Off`, the value is automatically converted to the `Enum` type.  \n  \n For information on names, and how to use the `Imports` statement to make name qualification unnecessary, see [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md).  \n  \n### To declare an enumeration  \n  \n1.  Write a declaration that includes a code access level, the `Enum` keyword, and a valid name, as in the following examples, each of which declares a different `Enum`.  \n  \n     [!code-vb[VbEnumsTask#3](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_1.vb)]  \n  \n2.  Define the constants in the enumeration. By default, the first constant in an enumeration is initialized to `0`, and subsequent constants are initialized to a value of one more than the previous constant. For example, the following enumeration, `Days`, contains a constant named `Sunday` with the value `0`, a constant named `Monday` with the value `1`, a constant named `Tuesday` with the value of `2`, and so on.  \n  \n     [!code-vb[VbEnumsTask#4](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_2.vb)]  \n  \n3.  You can explicitly assign values to constants in an enumeration by using an assignment statement. You can assign any integer value, including negative numbers. For example, you may want constants with values less than zero to represent error conditions. In the following enumeration, the constant `Invalid` is explicitly assigned the value `–1`, and the constant `Sunday` is assigned the value `0`. Because it is the first constant in the enumeration, `Saturday` is also initialized to the value `0`. The value of `Monday` is `1` (one more than the value of `Sunday`); the value of `Tuesday` is `2`, and so on.  \n  \n     [!code-vb[VbEnumsTask#5](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_3.vb)]  \n  \n### To declare an enumeration as an explicit type  \n  \n-   Specify the type of the enum by using the `As` clause, as shown in the following example.  \n  \n     [!code-vb[VbEnumsTask#6](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_4.vb)]  \n  \n## See Also  \n [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)   \n [How to: Refer to an Enumeration Member](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md)   \n [How to: Iterate Through An Enumeration in Visual Basic](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md)   \n [How to: Determine the String Associated with an Enumeration Value](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md)   \n [When to Use an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/when-to-use-an-enumeration.md)   \n [Constants Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)   \n [Constant and Literal Data Types](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md)   \n [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)","nodes":[{"pos":[4,667],"embed":true,"restype":"x-metadata","content":"title: \"How to: Declare Enumerations (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"declarations, enumerations\"\n  - \"enumerations [Visual Basic], declaring\"\n  - \"declaring enumerations\"\nms.assetid: db4ca1c3-f429-4c81-ae81-29e0157b29fd\ncaps.latest.revision: 24\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Declare Enumerations (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,60],"content":"How to: Declare Enumerations (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Declare Enumerations (Visual Basic) | Microsoft Docs","pos":[0,60]}]}],"path":["title"]}],"yml":true},{"pos":[674,717],"content":"How to: Declare Enumerations (Visual Basic)","linkify":"How to: Declare Enumerations (Visual Basic)","nodes":[{"content":"How to: Declare Enumerations (Visual Basic)","pos":[0,43]}]},{"content":"You create an enumeration with the <ph id=\"ph1\">`Enum`</ph> statement in the declarations section of a class or module.","pos":[718,819],"source":"You create an enumeration with the `Enum` statement in the declarations section of a class or module."},{"content":"You cannot declare an enumeration within a method.","pos":[820,870]},{"content":"To specify the appropriate level of access, use <ph id=\"ph1\">`Private`</ph>, <ph id=\"ph2\">`Protected`</ph>, <ph id=\"ph3\">`Friend`</ph>, or <ph id=\"ph4\">`Public`</ph>.","pos":[871,965],"source":" To specify the appropriate level of access, use `Private`, `Protected`, `Friend`, or `Public`."},{"content":"An <ph id=\"ph1\">`Enum`</ph> type has a name, an underlying type, and a set of fields, each representing a constant.","pos":[972,1069],"source":"An `Enum` type has a name, an underlying type, and a set of fields, each representing a constant."},{"content":"The name must be a valid <ph id=\"ph1\">[!INCLUDE[vbprvblong](../../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> qualifier.","pos":[1070,1221],"source":" The name must be a valid [!INCLUDE[vbprvblong](../../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)] qualifier."},{"content":"The underlying type must be one of the integer types—<ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`Short`</ph>, <ph id=\"ph3\">`Long`</ph> or <ph id=\"ph4\">`Integer`</ph>.","pos":[1222,1312],"source":" The underlying type must be one of the integer types—`Byte`, `Short`, `Long` or `Integer`."},{"content":"<ph id=\"ph1\">`Integer`</ph> is the default.","pos":[1313,1338],"source":"`Integer` is the default."},{"content":"Enumerations are always strongly typed and are not interchangeable with integer number types.","pos":[1339,1432]},{"content":"Enumerations cannot have floating-point values.","pos":[1439,1486]},{"content":"If an enumeration is assigned a floating-point value with <ph id=\"ph1\">`Option Strict On`</ph>, a compiler error results.","pos":[1487,1590],"source":" If an enumeration is assigned a floating-point value with `Option Strict On`, a compiler error results."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, the value is automatically converted to the <ph id=\"ph3\">`Enum`</ph> type.","pos":[1591,1676],"source":" If `Option Strict` is `Off`, the value is automatically converted to the `Enum` type."},{"pos":[1683,1947],"content":"For information on names, and how to use the <ph id=\"ph1\">`Imports`</ph> statement to make name qualification unnecessary, see <bpt id=\"p1\">[</bpt>Enumerations and Name Qualification<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept>.","source":"For information on names, and how to use the `Imports` statement to make name qualification unnecessary, see [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)."},{"pos":[1957,1982],"content":"To declare an enumeration","linkify":"To declare an enumeration","nodes":[{"content":"To declare an enumeration","pos":[0,25]}]},{"pos":[1992,2157],"content":"Write a declaration that includes a code access level, the <ph id=\"ph1\">`Enum`</ph> keyword, and a valid name, as in the following examples, each of which declares a different <ph id=\"ph2\">`Enum`</ph>.","source":"Write a declaration that includes a code access level, the `Enum` keyword, and a valid name, as in the following examples, each of which declares a different `Enum`."},{"content":"Define the constants in the enumeration.","pos":[2316,2356]},{"content":"By default, the first constant in an enumeration is initialized to <ph id=\"ph1\">`0`</ph>, and subsequent constants are initialized to a value of one more than the previous constant.","pos":[2357,2520],"source":" By default, the first constant in an enumeration is initialized to `0`, and subsequent constants are initialized to a value of one more than the previous constant."},{"content":"For example, the following enumeration, <ph id=\"ph1\">`Days`</ph>, contains a constant named <ph id=\"ph2\">`Sunday`</ph> with the value <ph id=\"ph3\">`0`</ph>, a constant named <ph id=\"ph4\">`Monday`</ph> with the value <ph id=\"ph5\">`1`</ph>, a constant named <ph id=\"ph6\">`Tuesday`</ph> with the value of <ph id=\"ph7\">`2`</ph>, and so on.","pos":[2521,2730],"source":" For example, the following enumeration, `Days`, contains a constant named `Sunday` with the value `0`, a constant named `Monday` with the value `1`, a constant named `Tuesday` with the value of `2`, and so on."},{"content":"You can explicitly assign values to constants in an enumeration by using an assignment statement.","pos":[2889,2986]},{"content":"You can assign any integer value, including negative numbers.","pos":[2987,3048]},{"content":"For example, you may want constants with values less than zero to represent error conditions.","pos":[3049,3142]},{"content":"In the following enumeration, the constant <ph id=\"ph1\">`Invalid`</ph> is explicitly assigned the value <ph id=\"ph2\">`–1`</ph>, and the constant <ph id=\"ph3\">`Sunday`</ph> is assigned the value <ph id=\"ph4\">`0`</ph>.","pos":[3143,3287],"source":" In the following enumeration, the constant `Invalid` is explicitly assigned the value `–1`, and the constant `Sunday` is assigned the value `0`."},{"content":"Because it is the first constant in the enumeration, <ph id=\"ph1\">`Saturday`</ph> is also initialized to the value <ph id=\"ph2\">`0`</ph>.","pos":[3288,3389],"source":" Because it is the first constant in the enumeration, `Saturday` is also initialized to the value `0`."},{"content":"The value of <ph id=\"ph1\">`Monday`</ph> is <ph id=\"ph2\">`1`</ph> (one more than the value of <ph id=\"ph3\">`Sunday`</ph>); the value of <ph id=\"ph4\">`Tuesday`</ph> is <ph id=\"ph5\">`2`</ph>, and so on.","pos":[3390,3499],"source":" The value of `Monday` is `1` (one more than the value of `Sunday`); the value of `Tuesday` is `2`, and so on."},{"pos":[3658,3703],"content":"To declare an enumeration as an explicit type","linkify":"To declare an enumeration as an explicit type","nodes":[{"content":"To declare an enumeration as an explicit type","pos":[0,45]}]},{"pos":[3713,3802],"content":"Specify the type of the enum by using the <ph id=\"ph1\">`As`</ph> clause, as shown in the following example.","source":"Specify the type of the enum by using the `As` clause, as shown in the following example."},{"pos":[3960,3968],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Enumerations and Name Qualification<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept><ph id=\"ph1\"> </ph>","pos":[3972,4127],"source":"[Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Refer to an Enumeration Member<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md)</ept><ph id=\"ph1\"> </ph>","pos":[4131,4291],"source":"[How to: Refer to an Enumeration Member](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Iterate Through An Enumeration in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md)</ept><ph id=\"ph1\"> </ph>","pos":[4295,4471],"source":"[How to: Iterate Through An Enumeration in Visual Basic](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Determine the String Associated with an Enumeration Value<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md)</ept><ph id=\"ph1\"> </ph>","pos":[4475,4689],"source":"[How to: Determine the String Associated with an Enumeration Value](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md) "},{"content":"<bpt id=\"p1\">[</bpt>When to Use an Enumeration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/when-to-use-an-enumeration.md)</ept><ph id=\"ph1\"> </ph>","pos":[4693,4830],"source":"[When to Use an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/when-to-use-an-enumeration.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constants Overview<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[4834,4955],"source":"[Constants Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constant and Literal Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4959,5106],"source":"[Constant and Literal Data Types](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constants and Enumerations<ept id=\"p1\">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept>","pos":[5110,5213],"source":"[Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)"}]}