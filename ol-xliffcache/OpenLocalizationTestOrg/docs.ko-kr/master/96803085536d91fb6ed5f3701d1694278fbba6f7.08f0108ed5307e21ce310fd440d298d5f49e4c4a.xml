{"content":"---\ntitle: \"Handling Errors | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"Internet, WebRequest and WebResponse classes exceptions\"\n  - \"Status property\"\n  - \"WebExceptions class, about WebExceptions class\"\n  - \"Timeout enumeration member\"\n  - \"ConnectFailure enumeration member\"\n  - \"TrustFailure enumeration member\"\n  - \"WebRequest class, exceptions\"\n  - \"requesting data from Internet, error handling\"\n  - \"Success enumeration member\"\n  - \"receiving data, errors\"\n  - \"ProtocolError enumeration member\"\n  - \"downloading Internet resources, error handling\"\n  - \"WebResponse class, exceptions\"\n  - \"SendFailure enumeration member\"\n  - \"errors [.NET Framework], WebRequest and WebResponse classes exceptions\"\n  - \"sending data, errors\"\n  - \"response to Internet request, error handling\"\n  - \"NameResolutionFailure enumeration member\"\n  - \"KeepAliveFailure enumeration member\"\n  - \"network resources, WebRequest and WebResponse classes exceptions\"\n  - \"RequestCanceled enumeration member\"\n  - \"ReceiveFailure enumeration member\"\n  - \"ServerProtocolViolation enumeration member\"\n  - \"ConnectionClosed enumeration member\"\n  - \"SecureChannelFailure enumeration member\"\nms.assetid: 657141cd-5cf5-4fdb-a4b2-4c040eba84b5\ncaps.latest.revision: 12\nauthor: \"mcleblanc\"\nms.author: \"markl\"\nmanager: \"markl\"\n---\n# Handling Errors\nThe <xref:System.Net.WebRequest> and <xref:System.Net.WebResponse> classes throw both system exceptions (such as <xref:System.ArgumentException>) and Web-specific exceptions (which are <xref:System.Net.WebException> thrown by the <xref:System.Net.WebRequest.GetResponse%2A> method).  \n  \n Each **WebException** includes a <xref:System.Net.WebException.Status%2A> property that contains a value from the <xref:System.Net.WebExceptionStatus> enumeration. You can examine the **Status** property to determine the error that occurred and take the proper steps to resolve the error.  \n  \n The following table describes the possible values for the **Status** property.  \n  \n|Status|Description|  \n|------------|-----------------|  \n|ConnectFailure|The remote service could not be contacted at the transport level.|  \n|ConnectionClosed|The connection was closed prematurely.|  \n|KeepAliveFailure|The server closed a connection made with the Keep-alive header set.|  \n|NameResolutionFailure|The name service could not resolve the host name.|  \n|ProtocolError|The response received from the server was complete but indicated an error at the protocol level.|  \n|ReceiveFailure|A complete response was not received from the remote server.|  \n|RequestCanceled|The request was canceled.|  \n|SecureChannelFailure|An error occurred in a secure channel link.|  \n|SendFailure|A complete request could not be sent to the remote server.|  \n|ServerProtocolViolation|The server response was not a valid HTTP response.|  \n|Success|No error was encountered.|  \n|Timeout|No response was received within the time-out set for the request.|  \n|TrustFailure|A server certificate could not be validated.|  \n|MessageLengthLimitExceeded|A message was received that exceeded the specified limit when sending a request or receiving a response from the server.|  \n|Pending|An internal asynchronous request is pending.|  \n|PipelineFailure|This value supports the .NET Framework infrastructure and is not intended to be used directly in your code.|  \n|ProxyNameResolutionFailure|The name resolver service could not resolve the proxy host name.|  \n|UnknownError|An exception of unknown type has occurred.|  \n  \n When the **Status** property is **WebExceptionStatus.ProtocolError**, a **WebResponse** that contains the response from the server is available. You can examine this response to determine the actual source of the protocol error.  \n  \n The following example shows how to catch a **WebException**.  \n  \n```csharp  \ntry   \n{  \n    // Create a request instance.  \n    WebRequest myRequest =   \n    WebRequest.Create(\"http://www.contoso.com\");  \n    // Get the response.  \n    WebResponse myResponse = myRequest.GetResponse();  \n    //Get a readable stream from the server.   \n    Stream sr = myResponse.GetResponseStream();  \n  \n    //Read from the stream and write any data to the console.  \n    bytesread = sr.Read( myBuffer, 0, length);  \n    while( bytesread > 0 )   \n    {  \n        for (int i=0; i<bytesread; i++) {  \n            Console.Write( \"{0}\", myBuffer[i]);  \n        }  \n        Console.WriteLine();  \n        bytesread = sr.Read( myBuffer, 0, length);  \n    }  \n    sr.Close();  \n    myResponse.Close();  \n}  \ncatch (WebException webExcp)   \n{  \n    // If you reach this point, an exception has been caught.  \n    Console.WriteLine(\"A WebException has been caught.\");  \n    // Write out the WebException message.  \n    Console.WriteLine(webExcp.ToString());  \n    // Get the WebException status code.  \n    WebExceptionStatus status =  webExcp.Status;  \n    // If status is WebExceptionStatus.ProtocolError,   \n    //   there has been a protocol error and a WebResponse   \n    //   should exist. Display the protocol error.  \n    if (status == WebExceptionStatus.ProtocolError) {  \n        Console.Write(\"The server returned protocol error \");  \n        // Get HttpWebResponse so that you can check the HTTP status code.  \n        HttpWebResponse httpResponse = (HttpWebResponse)webExcp.Response;  \n        Console.WriteLine((int)httpResponse.StatusCode + \" - \"  \n           + httpResponse.StatusCode);  \n    }  \n}  \ncatch (Exception e)   \n{  \n    // Code to catch other exceptions goes here.  \n}  \n```  \n  \n```vb  \nTry  \n    ' Create a request instance.  \n    Dim myRequest As WebRequest = WebRequest.Create(\"http://www.contoso.com\")  \n    ' Get the response.  \n    Dim myResponse As WebResponse = myRequest.GetResponse()  \n    'Get a readable stream from the server.   \n    Dim sr As Stream = myResponse.GetResponseStream()  \n  \n    Dim i As Integer      \n    'Read from the stream and write any data to the console.  \n    bytesread = sr.Read(myBuffer, 0, length)  \n    While bytesread > 0  \n        For i = 0 To bytesread - 1  \n            Console.Write(\"{0}\", myBuffer(i))  \n        Next i  \n        Console.WriteLine()  \n        bytesread = sr.Read(myBuffer, 0, length)  \n    End While  \n    sr.Close()  \n    myResponse.Close()  \nCatch webExcp As WebException  \n    ' If you reach this point, an exception has been caught.  \n    Console.WriteLine(\"A WebException has been caught.\")  \n    ' Write out the WebException message.  \n    Console.WriteLine(webExcp.ToString())  \n    ' Get the WebException status code.  \n    Dim status As WebExceptionStatus = webExcp.Status  \n    ' If status is WebExceptionStatus.ProtocolError,   \n    '   there has been a protocol error and a WebResponse   \n    '   should exist. Display the protocol error.  \n    If status = WebExceptionStatus.ProtocolError Then  \n        Console.Write(\"The server returned protocol error \")  \n        ' Get HttpWebResponse so that you can check the HTTP status code.  \n        Dim httpResponse As HttpWebResponse = _  \n           CType(webExcp.Response, HttpWebResponse)  \n        Console.WriteLine(CInt(httpResponse.StatusCode).ToString() & _  \n           \" - \" & httpResponse.StatusCode.ToString())  \n    End If  \nCatch e As Exception  \n    ' Code to catch other exceptions goes here.  \nEnd Try  \n```  \n  \n Applications that use the <xref:System.Net.Sockets.Socket> class throw <xref:System.Net.Sockets.SocketException> when errors occur on the Windows socket. The <xref:System.Net.Sockets.TcpClient>, <xref:System.Net.Sockets.TcpListener>, and <xref:System.Net.Sockets.UdpClient> classes are built on top of the **Socket** class and throw **SocketExceptions** as well.  \n  \n When a **SocketException** is thrown, the **SocketException** class sets the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to the last operating system socket error that occurred. For more information about socket error codes, see the Winsock 2.0 API error code documentation in MSDN.  \n  \n## See Also  \n [Exception Handling Fundamentals](../../../docs/standard/exceptions/exception-handling-fundamentals.md)   \n [Requesting Data](../../../docs/framework/network-programming/requesting-data.md)","nodes":[{"pos":[4,1478],"nodes":[{"content":"Handling Errors | Microsoft Docs","nodes":[{"pos":[0,32],"content":"Handling Errors | Microsoft Docs","nodes":[{"content":"Handling Errors | Microsoft Docs","pos":[0,32]}]}],"pos":[6,41],"yaml":true}],"content":"title: \"Handling Errors | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"Internet, WebRequest and WebResponse classes exceptions\"\n  - \"Status property\"\n  - \"WebExceptions class, about WebExceptions class\"\n  - \"Timeout enumeration member\"\n  - \"ConnectFailure enumeration member\"\n  - \"TrustFailure enumeration member\"\n  - \"WebRequest class, exceptions\"\n  - \"requesting data from Internet, error handling\"\n  - \"Success enumeration member\"\n  - \"receiving data, errors\"\n  - \"ProtocolError enumeration member\"\n  - \"downloading Internet resources, error handling\"\n  - \"WebResponse class, exceptions\"\n  - \"SendFailure enumeration member\"\n  - \"errors [.NET Framework], WebRequest and WebResponse classes exceptions\"\n  - \"sending data, errors\"\n  - \"response to Internet request, error handling\"\n  - \"NameResolutionFailure enumeration member\"\n  - \"KeepAliveFailure enumeration member\"\n  - \"network resources, WebRequest and WebResponse classes exceptions\"\n  - \"RequestCanceled enumeration member\"\n  - \"ReceiveFailure enumeration member\"\n  - \"ServerProtocolViolation enumeration member\"\n  - \"ConnectionClosed enumeration member\"\n  - \"SecureChannelFailure enumeration member\"\nms.assetid: 657141cd-5cf5-4fdb-a4b2-4c040eba84b5\ncaps.latest.revision: 12\nauthor: \"mcleblanc\"\nms.author: \"markl\"\nmanager: \"markl\"","yamlblock":true},{"pos":[1485,1500],"content":"Handling Errors","linkify":"Handling Errors","nodes":[{"content":"Handling Errors","pos":[0,15]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebRequest&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.WebResponse&gt;</ph> classes throw both system exceptions (such as <ph id=\"ph3\">&lt;xref:System.ArgumentException&gt;</ph>) and Web-specific exceptions (which are <ph id=\"ph4\">&lt;xref:System.Net.WebException&gt;</ph> thrown by the <ph id=\"ph5\">&lt;xref:System.Net.WebRequest.GetResponse%2A&gt;</ph> method).","pos":[1501,1783],"source":"The <xref:System.Net.WebRequest> and <xref:System.Net.WebResponse> classes throw both system exceptions (such as <xref:System.ArgumentException>) and Web-specific exceptions (which are <xref:System.Net.WebException> thrown by the <xref:System.Net.WebRequest.GetResponse%2A> method)."},{"content":"Each <bpt id=\"p1\">**</bpt>WebException<ept id=\"p1\">**</ept> includes a <ph id=\"ph1\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property that contains a value from the <ph id=\"ph2\">&lt;xref:System.Net.WebExceptionStatus&gt;</ph> enumeration.","pos":[1790,1953],"source":"Each **WebException** includes a <xref:System.Net.WebException.Status%2A> property that contains a value from the <xref:System.Net.WebExceptionStatus> enumeration."},{"content":"You can examine the <bpt id=\"p1\">**</bpt>Status<ept id=\"p1\">**</ept> property to determine the error that occurred and take the proper steps to resolve the error.","pos":[1954,2078],"source":" You can examine the **Status** property to determine the error that occurred and take the proper steps to resolve the error."},{"pos":[2085,2163],"content":"The following table describes the possible values for the <bpt id=\"p1\">**</bpt>Status<ept id=\"p1\">**</ept> property.","source":"The following table describes the possible values for the **Status** property."},{"content":"Status","pos":[2170,2176]},{"content":"Description","pos":[2177,2188]},{"content":"ConnectFailure","pos":[2228,2242]},{"content":"The remote service could not be contacted at the transport level.","pos":[2243,2308]},{"content":"ConnectionClosed","pos":[2313,2329]},{"content":"The connection was closed prematurely.","pos":[2330,2368]},{"content":"KeepAliveFailure","pos":[2373,2389]},{"content":"The server closed a connection made with the Keep-alive header set.","pos":[2390,2457]},{"content":"NameResolutionFailure","pos":[2462,2483]},{"content":"The name service could not resolve the host name.","pos":[2484,2533]},{"content":"ProtocolError","pos":[2538,2551]},{"content":"The response received from the server was complete but indicated an error at the protocol level.","pos":[2552,2648]},{"content":"ReceiveFailure","pos":[2653,2667]},{"content":"A complete response was not received from the remote server.","pos":[2668,2728]},{"content":"RequestCanceled","pos":[2733,2748]},{"content":"The request was canceled.","pos":[2749,2774]},{"content":"SecureChannelFailure","pos":[2779,2799]},{"content":"An error occurred in a secure channel link.","pos":[2800,2843]},{"content":"SendFailure","pos":[2848,2859]},{"content":"A complete request could not be sent to the remote server.","pos":[2860,2918]},{"content":"ServerProtocolViolation","pos":[2923,2946]},{"content":"The server response was not a valid HTTP response.","pos":[2947,2997]},{"content":"Success","pos":[3002,3009]},{"content":"No error was encountered.","pos":[3010,3035]},{"content":"Timeout","pos":[3040,3047]},{"content":"No response was received within the time-out set for the request.","pos":[3048,3113]},{"content":"TrustFailure","pos":[3118,3130]},{"content":"A server certificate could not be validated.","pos":[3131,3175]},{"content":"MessageLengthLimitExceeded","pos":[3180,3206]},{"content":"A message was received that exceeded the specified limit when sending a request or receiving a response from the server.","pos":[3207,3327]},{"content":"Pending","pos":[3332,3339]},{"content":"An internal asynchronous request is pending.","pos":[3340,3384]},{"content":"PipelineFailure","pos":[3389,3404]},{"content":"This value supports the .NET Framework infrastructure and is not intended to be used directly in your code.","pos":[3405,3512]},{"content":"ProxyNameResolutionFailure","pos":[3517,3543]},{"content":"The name resolver service could not resolve the proxy host name.","pos":[3544,3608]},{"content":"UnknownError","pos":[3613,3625]},{"content":"An exception of unknown type has occurred.","pos":[3626,3668]},{"content":"When the <bpt id=\"p1\">**</bpt>Status<ept id=\"p1\">**</ept> property is <bpt id=\"p2\">**</bpt>WebExceptionStatus.ProtocolError<ept id=\"p2\">**</ept>, a <bpt id=\"p3\">**</bpt>WebResponse<ept id=\"p3\">**</ept> that contains the response from the server is available.","pos":[3676,3820],"source":"When the **Status** property is **WebExceptionStatus.ProtocolError**, a **WebResponse** that contains the response from the server is available."},{"content":"You can examine this response to determine the actual source of the protocol error.","pos":[3821,3904]},{"pos":[3911,3971],"content":"The following example shows how to catch a <bpt id=\"p1\">**</bpt>WebException<ept id=\"p1\">**</ept>.","source":"The following example shows how to catch a **WebException**."},{"content":"Applications that use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class throw <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> when errors occur on the Windows socket.","pos":[7467,7620],"source":"Applications that use the <xref:System.Net.Sockets.Socket> class throw <xref:System.Net.Sockets.SocketException> when errors occur on the Windows socket."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> classes are built on top of the <bpt id=\"p1\">**</bpt>Socket<ept id=\"p1\">**</ept> class and throw <bpt id=\"p2\">**</bpt>SocketExceptions<ept id=\"p2\">**</ept> as well.","pos":[7621,7829],"source":" The <xref:System.Net.Sockets.TcpClient>, <xref:System.Net.Sockets.TcpListener>, and <xref:System.Net.Sockets.UdpClient> classes are built on top of the **Socket** class and throw **SocketExceptions** as well."},{"content":"When a <bpt id=\"p1\">**</bpt>SocketException<ept id=\"p1\">**</ept> is thrown, the <bpt id=\"p2\">**</bpt>SocketException<ept id=\"p2\">**</ept> class sets the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to the last operating system socket error that occurred.","pos":[7836,8033],"source":"When a **SocketException** is thrown, the **SocketException** class sets the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to the last operating system socket error that occurred."},{"content":"For more information about socket error codes, see the Winsock 2.0 API error code documentation in MSDN.","pos":[8034,8138]},{"pos":[8147,8155],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Exception Handling Fundamentals<ept id=\"p1\">](../../../docs/standard/exceptions/exception-handling-fundamentals.md)</ept><ph id=\"ph1\"> </ph>","pos":[8159,8263],"source":"[Exception Handling Fundamentals](../../../docs/standard/exceptions/exception-handling-fundamentals.md) "},{"content":"<bpt id=\"p1\">[</bpt>Requesting Data<ept id=\"p1\">](../../../docs/framework/network-programming/requesting-data.md)</ept>","pos":[8267,8348],"source":"[Requesting Data](../../../docs/framework/network-programming/requesting-data.md)"}]}