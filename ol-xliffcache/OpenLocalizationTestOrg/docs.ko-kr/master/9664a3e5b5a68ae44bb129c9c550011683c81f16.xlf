<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-know-the-difference-passing-a-struct-and-passing-a-class-to-a-method.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9664a3e5b5a68ae44bb129c9c550011683c81f16</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\how-to-know-the-difference-passing-a-struct-and-passing-a-class-to-a-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">306b435cd98614f7c94779028478319ef17a98e1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f16677646ac098fe43e9eca9961aa3fe76aaa2d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Know the Difference Between Passing a Struct and Passing a Class Reference to a Method - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Know the Difference Between Passing a Struct and Passing a Class Reference to a Method (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how passing a <bpt id="p1">[</bpt>struct<ept id="p1">](../../../csharp/language-reference/keywords/struct.md)</ept> to a method differs from passing a <bpt id="p2">[</bpt>class<ept id="p2">](../../../csharp/language-reference/keywords/class.md)</ept> instance to a method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the example, both of the arguments (struct and class instance) are passed by value, and both methods change the value of one field of the argument.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, the results of the two methods are not the same because what is passed when you pass a struct differs from what is passed when you pass an instance of a class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Because a struct is a <bpt id="p1">[</bpt>value type<ept id="p1">](../../../csharp/language-reference/keywords/value-types.md)</ept>, when you <bpt id="p2">[</bpt>pass a struct by value<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/passing-value-type-parameters.md)</ept> to a method, the method receives and operates on a copy of the struct argument.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The method has no access to the original struct in the calling method and therefore can't change it in any way.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The method can change only the copy.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A class instance is a <bpt id="p1">[</bpt>reference type<ept id="p1">](../../../csharp/language-reference/keywords/reference-types.md)</ept>, not a value type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">[</bpt>a reference type is passed by value<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md)</ept> to a method, the method receives a copy of the reference to the class instance.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>That is, the method receives a copy of the address of the instance, not a copy of the instance itself.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The class instance in the calling method has an address, the parameter in the called method has a copy of the address, and both addresses refer to the same object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because the parameter contains only a copy of the address, the called method cannot change the address of the class instance in the calling method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, the called method can use the address to access the class members that both the original address and the copy reference.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the called method changes a class member, the original class instance in the calling method also changes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The output of the following example illustrates the difference.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`willIChange`</ph> field of the class instance is changed by the call to method <ph id="ph2">`ClassTaker`</ph> because the method uses the address in the parameter to find the specified field of the class instance.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`willIChange`</ph> field of the struct in the calling method is not changed by the call to method <ph id="ph2">`StructTaker`</ph> because the value of the argument is a copy of the struct itself, not a copy of its address.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`StructTaker`</ph> changes the copy, and the copy is lost when the call to <ph id="ph2">`StructTaker`</ph> is completed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/classes.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Structs<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/structs.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing Parameters<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/passing-parameters.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>