{"content":"---\ntitle: \"How to: Project an Object Graph (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 293d15d5-3eaf-48de-9a02-3e13cb117b5b\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Project an Object Graph (C#)\nThis topic illustrates how to project, or populate, an object graph from XML.  \n  \n## Example  \n The following code populates an object graph with the `Address`, `PurchaseOrder`, and `PurchaseOrderItem` classes from the [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md) XML document.  \n  \n```csharp  \nclass Address  \n{  \n    public enum AddressUse  \n    {  \n        Shipping,  \n        Billing,  \n    }  \n  \n    private AddressUse addressType;  \n    private string name;  \n    private string street;  \n    private string city;  \n    private string state;  \n    private string zip;  \n    private string country;  \n  \n    public AddressUse AddressType {  \n        get { return addressType; } set { addressType = value; }  \n    }  \n  \n    public string Name {  \n        get { return name; } set { name = value; }  \n    }  \n  \n    public string Street {  \n        get { return street; } set { street = value; }  \n    }  \n  \n    public string City {  \n        get { return city; } set { city = value; }  \n    }  \n  \n    public string State {  \n        get { return state; } set { state = value; }  \n    }  \n  \n    public string Zip {  \n        get { return zip; } set { zip = value; }  \n    }  \n  \n    public string Country {  \n        get { return country; } set { country = value; }  \n    }  \n  \n    public override string ToString()  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        sb.Append(String.Format(\"Type: {0}\\n\",  \n          addressType == AddressUse.Shipping ? \"Shipping\" : \"Billing\"));  \n        sb.Append(String.Format(\"Name: {0}\\n\", name));  \n        sb.Append(String.Format(\"Street: {0}\\n\", street));  \n        sb.Append(String.Format(\"City: {0}\\n\", city));  \n        sb.Append(String.Format(\"State: {0}\\n\", state));  \n        sb.Append(String.Format(\"Zip: {0}\\n\", zip));  \n        sb.Append(String.Format(\"Country: {0}\\n\", country));  \n        return sb.ToString();  \n    }  \n}  \n  \nclass PurchaseOrderItem  \n{  \n    private string partNumber;  \n    private string productName;  \n    private int quantity;  \n    private Decimal usPrice;  \n    private string comment;  \n    private DateTime shipDate;  \n  \n    public string PartNumber {  \n        get { return partNumber; } set { partNumber = value; }  \n    }  \n  \n    public string ProductName {  \n        get { return productName; } set { productName = value; }  \n    }  \n  \n    public int Quantity {  \n        get { return quantity; } set { quantity = value; }  \n    }  \n  \n    public Decimal USPrice {  \n        get { return usPrice; } set { usPrice = value; }  \n    }  \n  \n    public string Comment {  \n        get { return comment; } set { comment = value; }  \n    }  \n  \n    public DateTime ShipDate {  \n        get { return shipDate; } set { shipDate = value; }  \n    }  \n  \n    public override string ToString()  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        sb.Append(String.Format(\"PartNumber: {0}\\n\", partNumber));  \n        sb.Append(String.Format(\"ProductName: {0}\\n\", productName));  \n        sb.Append(String.Format(\"Quantity: {0}\\n\", quantity));  \n        sb.Append(String.Format(\"USPrice: {0}\\n\", usPrice));  \n        if (comment != null)  \n            sb.Append(String.Format(\"Comment: {0}\\n\", comment));  \n        if (shipDate != DateTime.MinValue)  \n            sb.Append(String.Format(\"ShipDate: {0:d}\\n\", shipDate));  \n        return sb.ToString();  \n    }  \n}  \n  \nclass PurchaseOrder  \n{  \n    private string purchaseOrderNumber;  \n    private DateTime orderDate;  \n    private string comment;  \n    private List<Address> addresses;  \n    private List<PurchaseOrderItem> items;  \n  \n    public string PurchaseOrderNumber {  \n        get { return purchaseOrderNumber; } set { purchaseOrderNumber = value; }  \n    }  \n  \n    public DateTime OrderDate {  \n        get { return orderDate; } set { orderDate = value; }  \n    }  \n  \n    public string Comment {  \n        get { return comment; } set { comment = value; }  \n    }  \n  \n    public List<Address> Addresses {  \n        get { return addresses; } set { addresses = value; }  \n    }  \n  \n    public List<PurchaseOrderItem> Items {  \n        get { return items; } set { items = value; }  \n    }  \n  \n    public override string ToString()  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        sb.Append(String.Format(\"PurchaseOrderNumber: {0}\\n\", purchaseOrderNumber));  \n        sb.Append(String.Format(\"OrderDate: {0:d}\\n\", orderDate));  \n        sb.Append(\"\\n\");  \n        sb.Append(\"Addresses\\n\");  \n        sb.Append(\"=====\\n\");  \n        foreach (Address address in addresses)  \n        {  \n            sb.Append(address);  \n            sb.Append(\"\\n\");  \n        }  \n        sb.Append(\"Items\\n\");  \n        sb.Append(\"=====\\n\");  \n        foreach (PurchaseOrderItem item in items)  \n        {  \n            sb.Append(item);  \n            sb.Append(\"\\n\");  \n        }  \n        return sb.ToString();  \n    }  \n}  \n  \nclass Program {  \n    public static void Main()  \n    {  \n        XElement po = XElement.Load(\"PurchaseOrder.xml\");  \n        PurchaseOrder purchaseOrder = new PurchaseOrder {  \n            PurchaseOrderNumber = (string)po.Attribute(\"PurchaseOrderNumber\"),  \n            OrderDate = (DateTime)po.Attribute(\"OrderDate\"),  \n            Addresses = (  \n                            from a in po.Elements(\"Address\")  \n                            select new Address {  \n                                AddressType = ((string)a.Attribute(\"Type\") == \"Shipping\") ?  \n                                    Address.AddressUse.Shipping :   \n                                    Address.AddressUse.Billing,  \n                                Name = (string)a.Element(\"Name\"),  \n                                Street = (string)a.Element(\"Street\"),  \n                                City = (string)a.Element(\"City\"),  \n                                State = (string)a.Element(\"State\"),  \n                                Zip = (string)a.Element(\"Zip\"),  \n                                Country = (string)a.Element(\"Country\")  \n                            }  \n                        ).ToList(),  \n            Items = (  \n                        from i in po.Element(\"Items\").Elements(\"Item\")  \n                        select new PurchaseOrderItem {  \n                            PartNumber = (string)i.Attribute(\"PartNumber\"),  \n                            ProductName = (string)i.Element(\"ProductName\"),  \n                            Quantity = (int)i.Element(\"Quantity\"),  \n                            USPrice = (Decimal)i.Element(\"USPrice\"),  \n                            Comment = (string)i.Element(\"Comment\"),  \n                            ShipDate = (i.Element(\"ShipDate\") != null) ?  \n                                (DateTime)i.Element(\"ShipDate\") :  \n                                DateTime.MinValue  \n                        }  \n                    ).ToList()  \n        };  \n        Console.WriteLine(purchaseOrder);  \n    }  \n}  \n```  \n  \n In this example, the result of the [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query is returned as an <xref:System.Collections.Generic.IEnumerable%601> of `PurchaseOrderItem`. The items in the `PurchaseOrder` class are of type <xref:System.Collections.Generic.IEnumerable%601> of `PurchaseOrderItem`. The code uses the <xref:System.Linq.Enumerable.ToList%2A> extension method to create a <xref:System.Collections.Generic.List%601> collection from the results of the query.  \n  \n The example produces the following output:  \n  \n```  \nPurchaseOrderNumber: 99503  \nOrderDate: 10/20/1999  \n  \nAddresses  \n=====  \nType: Shipping  \nName: Ellen Adams  \nStreet: 123 Maple Street  \nCity: Mill Valley  \nState: CA  \nZip: 10999  \nCountry: USA  \n  \nType: Billing  \nName: Tai Yee  \nStreet: 8 Oak Avenue  \nCity: Old Town  \nState: PA  \nZip: 95819  \nCountry: USA  \n  \nItems  \n=====  \nPartNumber: 872-AA  \nProductName: Lawnmower  \nQuantity: 1  \nUSPrice: 148.95  \nComment: Confirm this is electric  \n  \nPartNumber: 926-AA  \nProductName: Baby Monitor  \nQuantity: 2  \nUSPrice: 39.98  \nShipDate: 5/21/1999  \n```  \n  \n## See Also  \n <xref:System.Linq.Enumerable.Select%2A>   \n <xref:System.Linq.Enumerable.ToList%2A>   \n [Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)","nodes":[{"pos":[12,65],"content":"How to: Project an Object Graph (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Project an Object Graph (C#) | Microsoft Docs","pos":[0,53]}]},{"pos":[350,386],"content":"How to: Project an Object Graph (C#)","linkify":"How to: Project an Object Graph (C#)","nodes":[{"content":"How to: Project an Object Graph (C#)","pos":[0,36]}]},{"content":"This topic illustrates how to project, or populate, an object graph from XML.","pos":[387,464]},{"pos":[473,480],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[484,784],"content":"The following code populates an object graph with the <ph id=\"ph1\">`Address`</ph>, <ph id=\"ph2\">`PurchaseOrder`</ph>, and <ph id=\"ph3\">`PurchaseOrderItem`</ph> classes from the <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md)</ept> XML document.","source":"The following code populates an object graph with the `Address`, `PurchaseOrder`, and `PurchaseOrderItem` classes from the [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md) XML document."},{"content":"In this example, the result of the <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query is returned as an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph3\">`PurchaseOrderItem`</ph>.","pos":[7449,7648],"source":"In this example, the result of the [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query is returned as an <xref:System.Collections.Generic.IEnumerable%601> of `PurchaseOrderItem`."},{"content":"The items in the <ph id=\"ph1\">`PurchaseOrder`</ph> class are of type <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph3\">`PurchaseOrderItem`</ph>.","pos":[7649,7773],"source":" The items in the `PurchaseOrder` class are of type <xref:System.Collections.Generic.IEnumerable%601> of `PurchaseOrderItem`."},{"content":"The code uses the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> extension method to create a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> collection from the results of the query.","pos":[7774,7945],"source":" The code uses the <xref:System.Linq.Enumerable.ToList%2A> extension method to create a <xref:System.Collections.Generic.List%601> collection from the results of the query."},{"content":"The example produces the following output:","pos":[7952,7994]},{"pos":[8571,8579],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>","pos":[8583,8622],"source":"<xref:System.Linq.Enumerable.Select%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph>","pos":[8627,8666],"source":" <xref:System.Linq.Enumerable.ToList%2A> "},{"content":"<bpt id=\"p1\"> [</bpt>Projections and Transformations (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","pos":[8670,8822],"source":" [Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}