<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="nothing.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97c651dbcc657fbab0706c9a959bd0031c0fe343</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\nothing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe2ff2c1ae964ef162e77504da01373c0446d056</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5becf40ff0ed01ae050aa27da80193ddce17c85</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Nothing (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Nothing (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents the default value of any data type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For reference types, the default value is the <ph id="ph1">`null`</ph> reference.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For value types, the default value depends on whether the value type is nullable.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For non-nullable value types, <ph id="ph1">`Nothing`</ph> in Visual Basic differs from <ph id="ph2">`null`</ph> in C#.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In Visual Basic, if you set a variable of a non-nullable value type to <ph id="ph1">`Nothing`</ph>, the variable is set to the default value for its declared type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In C#, if you assign a variable of a non-nullable value type to <ph id="ph1">`null`</ph>, a compile-time error occurs.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Nothing`</ph> represents the default value of a data type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The default value depends on whether the variable is of a value type or of a reference type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A variable of a <bpt id="p1">*</bpt>value type<ept id="p1">*</ept> directly contains its value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Value types include all numeric data types, <ph id="ph1">`Boolean`</ph>, <ph id="ph2">`Char`</ph>, <ph id="ph3">`Date`</ph>, all structures, and all enumerations.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A variable of a <bpt id="p1">*</bpt>reference type<ept id="p1">*</ept> stores a reference to an instance of the object in memory.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Reference types include classes, arrays, delegates, and strings.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Value Types and Reference Types<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If a variable is of a value type, the behavior of <ph id="ph1">`Nothing`</ph> depends on whether the variable is of a nullable data type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To represent a nullable value type, add a <ph id="ph1">`?`</ph> modifier to the type name.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Assigning <ph id="ph1">`Nothing`</ph> to a nullable variable sets the value to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <bpt id="p1">[</bpt>Nullable Value Types<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If a variable is of a value type that is not nullable, assigning <ph id="ph1">`Nothing`</ph> to it sets it to the default value for its declared type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If that type contains variable members, they are all set to their default values.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example illustrates this for scalar types.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If a variable is of a reference type, assigning <ph id="ph1">`Nothing`</ph> to the variable sets it to a <ph id="ph2">`null`</ph> reference of the variable's type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A variable that is set to a <ph id="ph1">`null`</ph> reference is not associated with any object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When checking whether a reference (or nullable value type) variable is <ph id="ph1">`null`</ph>, do not use <ph id="ph2">`= Nothing`</ph> or <ph id="ph3">`&lt;&gt; Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Always use <ph id="ph1">`Is Nothing`</ph> or <ph id="ph2">`IsNot Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For strings in Visual Basic, the empty string equals <ph id="ph1">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`"" = Nothing`</ph> is true.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example shows comparisons that use the <ph id="ph1">`Is`</ph> and <ph id="ph2">`IsNot`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you declare a variable without using an <ph id="ph1">`As`</ph> clause and set it to <ph id="ph2">`Nothing`</ph>, the variable has a type of <ph id="ph3">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An example of this is <ph id="ph1">`Dim something = Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A compile-time error occurs in this case when <ph id="ph1">`Option Strict`</ph> is on and <ph id="ph2">`Option Infer`</ph> is off.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you assign <ph id="ph1">`Nothing`</ph> to an object variable, it no longer refers to any object instance.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the variable had previously referred to an instance, setting it to <ph id="ph1">`Nothing`</ph> does not terminate the instance itself.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The instance is terminated, and the memory and system resources associated with it are released, only after the garbage collector (GC) detects that there are no active references remaining.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Nothing`</ph> differs from the <ph id="ph2">&lt;xref:System.DBNull&gt;</ph> object, which represents an uninitialized variant or a nonexistent database column.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../visual-basic/language-reference/statements/dim-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Lifetime: How Objects Are Created and Destroyed<ept id="p1">](../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lifetime in Visual Basic<ept id="p1">](../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Is Operator<ept id="p1">](../../visual-basic/language-reference/operators/is-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IsNot Operator<ept id="p1">](../../visual-basic/language-reference/operators/isnot-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable Value Types<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>