{"content":"---\ntitle: \"Polling in Console Applications | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 4ff084d5-5956-4db1-8e18-c5a66b000882\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Polling in Console Applications\nAsynchronous operations in ADO.NET allow you to initiate time-consuming database operations on one thread while performing other tasks on another thread. In most scenarios, however, you will eventually reach a point where your application should not continue until the database operation is complete. For such cases, it is useful to poll the asynchronous operation to determine whether the operation has completed or not.  \n  \n You can use the <xref:System.IAsyncResult.IsCompleted%2A> property to find out whether or not the operation has completed.  \n  \n## Example  \n The following console application updates data within the **AdventureWorks** sample database, doing its work asynchronously. In order to emulate a long-running process, this example inserts a WAITFOR statement in the command text. Normally, you would not try to make your commands run slower, but doing so in this case makes it easier to demonstrate asynchronous behavior.  \n  \n```vb  \nImports System  \nImports System.Data.SqlClient  \n  \nModule Module1  \n  \n    Sub Main()  \n        ' The WAITFOR statement simply adds enough time to prove the   \n        ' asynchronous nature of the command.  \n        Dim commandText As String = _  \n         \"UPDATE Production.Product \" & _  \n         \"SET ReorderPoint = ReorderPoint + 1 \" & _  \n         \"WHERE ReorderPoint Is Not Null;\" & _  \n         \"WAITFOR DELAY '0:0:3';\" & _  \n         \"UPDATE Production.Product \" & _  \n         \"SET ReorderPoint = ReorderPoint - 1 \" & _  \n         \"WHERE ReorderPoint Is Not Null\"  \n  \n        RunCommandAsynchronously(commandText, GetConnectionString())  \n  \n        Console.WriteLine(\"Press Enter to continue.\")  \n        Console.ReadLine()  \n    End Sub  \n  \n    Private Sub RunCommandAsynchronously( _  \n     ByVal commandText As String, ByVal connectionString As String)  \n  \n        ' Given command text and connection string, asynchronously   \n        ' execute the specified command against the connection. For   \n        ' this example, the code displays an indicator as it's working,   \n        ' verifying the asynchronous behavior.   \n        Using connection As New SqlConnection(connectionString)  \n            Try  \n                Dim count As Integer = 0  \n                Dim command As New SqlCommand(commandText, connection)  \n                connection.Open()  \n                Dim result As IAsyncResult = _  \n                 command.BeginExecuteNonQuery()  \n                While Not result.IsCompleted  \n                    Console.WriteLine(\"Waiting ({0})\", count)  \n                    ' Wait for 1/10 second, so the counter  \n                    ' doesn't consume all available resources   \n                    ' on the main thread.  \n                    Threading.Thread.Sleep(100)  \n                    count += 1  \n                End While  \n                Console.WriteLine( _  \n                 \"Command complete. Affected {0} rows.\", _  \n                 command.EndExecuteNonQuery(result))  \n            Catch ex As SqlException  \n                Console.WriteLine(\"Error ({0}): {1}\", _  \n                 ex.Number, ex.Message)  \n            Catch ex As InvalidOperationException  \n                Console.WriteLine(\"Error: {0}\", ex.Message)  \n            Catch ex As Exception  \n                ' You might want to pass these errors  \n                ' back out to the caller.  \n                Console.WriteLine(\"Error: {0}\", ex.Message)  \n            End Try  \n        End Using  \n    End Sub  \n  \n    Private Function GetConnectionString() As String  \n        ' To avoid storing the connection string in your code,              \n        ' you can retrieve it from a configuration file.   \n  \n        ' If you have not included \"Asynchronous Processing=true\"   \n        ' in the connection string, the command will not be able  \n        ' to execute asynchronously.  \n        Return \"Data Source=(local);Integrated Security=SSPI;\" & _  \n          \"Initial Catalog=AdventureWorks; \" & _  \n          \"Asynchronous Processing=true\"  \n    End Function  \nEnd Module   \n```  \n  \n```csharp  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n  \nclass Class1  \n{  \n    [STAThread]  \n    static void Main()  \n    {  \n        // The WAITFOR statement simply adds enough time to   \n        // prove the asynchronous nature of the command.  \n  \n        string commandText =  \n          \"UPDATE Production.Product SET ReorderPoint = \" +  \n          \"ReorderPoint + 1 \" +  \n          \"WHERE ReorderPoint Is Not Null;\" +  \n          \"WAITFOR DELAY '0:0:3';\" +  \n          \"UPDATE Production.Product SET ReorderPoint = \" +  \n          \"ReorderPoint - 1 \" +  \n          \"WHERE ReorderPoint Is Not Null\";  \n  \n        RunCommandAsynchronously(  \n            commandText, GetConnectionString());  \n  \n        Console.WriteLine(\"Press Enter to continue.\");  \n        Console.ReadLine();  \n    }  \n  \n    private static void RunCommandAsynchronously(  \n      string commandText, string connectionString)  \n    {  \n        // Given command text and connection string, asynchronously  \n        // execute the specified command against the connection.   \n        // For this example, the code displays an indicator as it's   \n        // working, verifying the asynchronous behavior.   \n        using (SqlConnection connection =  \n          new SqlConnection(connectionString))  \n        {  \n            try  \n            {  \n                int count = 0;  \n                SqlCommand command =   \n                    new SqlCommand(commandText, connection);  \n                connection.Open();  \n  \n                IAsyncResult result =   \n                    command.BeginExecuteNonQuery();  \n                while (!result.IsCompleted)  \n                {  \n                    Console.WriteLine(  \n                                    \"Waiting ({0})\", count++);  \n                    // Wait for 1/10 second, so the counter  \n                    // doesn't consume all available   \n                    // resources on the main thread.  \n                    System.Threading.Thread.Sleep(100);  \n                }  \n                Console.WriteLine(  \n                    \"Command complete. Affected {0} rows.\",  \n                command.EndExecuteNonQuery(result));  \n            }  \n            catch (SqlException ex)  \n            {  \n                Console.WriteLine(\"Error ({0}): {1}\",   \n                    ex.Number, ex.Message);  \n            }  \n            catch (InvalidOperationException ex)  \n            {  \n                Console.WriteLine(\"Error: {0}\", ex.Message);  \n            }  \n            catch (Exception ex)  \n            {  \n                // You might want to pass these errors  \n                // back out to the caller.  \n                Console.WriteLine(\"Error: {0}\", ex.Message);  \n            }  \n        }  \n    }  \n  \n    private static string GetConnectionString()  \n    {  \n        // To avoid storing the connection string in your code,              \n        // you can retrieve it from a configuration file.   \n  \n        // If you have not included \"Asynchronous Processing=true\"  \n        // in the connection string, the command will not be able  \n        // to execute asynchronously.  \n        return \"Data Source=(local);Integrated Security=SSPI;\" +  \n        \"Initial Catalog=AdventureWorks; \" +   \n        \"Asynchronous Processing=true\";  \n    }  \n}  \n```  \n  \n## See Also  \n [Asynchronous Operations](../../../../../docs/framework/data/adonet/sql/asynchronous-operations.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[12,60],"content":"Polling in Console Applications | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Polling in Console Applications | Microsoft Docs","pos":[0,48]}]},{"pos":[369,400],"content":"Polling in Console Applications","linkify":"Polling in Console Applications","nodes":[{"content":"Polling in Console Applications","pos":[0,31]}]},{"content":"Asynchronous operations in ADO.NET allow you to initiate time-consuming database operations on one thread while performing other tasks on another thread.","pos":[401,554]},{"content":"In most scenarios, however, you will eventually reach a point where your application should not continue until the database operation is complete.","pos":[555,701]},{"content":"For such cases, it is useful to poll the asynchronous operation to determine whether the operation has completed or not.","pos":[702,822]},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property to find out whether or not the operation has completed.","pos":[829,951],"source":"You can use the <xref:System.IAsyncResult.IsCompleted%2A> property to find out whether or not the operation has completed."},{"pos":[960,967],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following console application updates data within the <bpt id=\"p1\">**</bpt>AdventureWorks<ept id=\"p1\">**</ept> sample database, doing its work asynchronously.","pos":[971,1095],"source":"The following console application updates data within the **AdventureWorks** sample database, doing its work asynchronously."},{"content":"In order to emulate a long-running process, this example inserts a WAITFOR statement in the command text.","pos":[1096,1201]},{"content":"Normally, you would not try to make your commands run slower, but doing so in this case makes it easier to demonstrate asynchronous behavior.","pos":[1202,1343]},{"pos":[7808,7816],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Asynchronous Operations<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/asynchronous-operations.md)</ept><ph id=\"ph1\"> </ph>","pos":[7820,7920],"source":"[Asynchronous Operations](../../../../../docs/framework/data/adonet/sql/asynchronous-operations.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[7923,8027],"source":" [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}