<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="interpolated.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64728182fe0b758f8da668d19761305e2001f1a5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\tokens\interpolated.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c92aa49547e325dec7f3c633e447b363c3c97c31</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1d95a0d4728199f7d04d7a1f62627abe220471d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>$ - string interpolation - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>String interpolation provides a more readable and convenient syntax to format string output than traditional string composite formatting.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>$ - string interpolation (C# Reference)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$`</ph> special character identifies a string literal as an <bpt id="p1">*</bpt>interpolated string<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An interpolated string is a string literal that might contain <bpt id="p1">*</bpt>interpolated expressions<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When an interpolated string is resolved to a result string, items with interpolated expressions are replaced by the string representations of the expression results.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This feature is available in C# 6 and later versions of the language.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>String interpolation provides a more readable and convenient syntax to create formatted strings than a <bpt id="p1">[</bpt>string composite formatting<ept id="p1">](../../../standard/base-types/composite-formatting.md)</ept> feature.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example uses both features to produce the same output:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Structure of an interpolated string</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To identify a string literal as an interpolated string, prepend it with the <ph id="ph1">`$`</ph> symbol.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You cannot have any white space between the <ph id="ph1">`$`</ph> and the <ph id="ph2">`"`</ph> that starts a string literal.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Doing so causes a compile-time error.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The structure of an item with an interpolated expression is as follows:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following table describes each element:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The expression that produces a result to be formatted.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>String representation of the <ph id="ph1">`null`</ph> result is <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The constant expression whose value defines the minimum number of characters in the string representation of the result of the interpolated expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If positive, the string representation is right-aligned; if negative, it's left-aligned.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Alignment Component<ept id="p1">](../../../standard/base-types/composite-formatting.md#alignment-component)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A format string that is supported by the type of the expression result.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Format String Component<ept id="p1">](../../../standard/base-types/composite-formatting.md#format-string-component)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example uses optional formatting components described above:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Special characters</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To include a brace, "{" or "}", in the text produced by an interpolated string, use two braces, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Escaping Braces<ept id="p1">](../../../standard/base-types/composite-formatting.md#escaping-braces)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As the colon (":") has special meaning in an interpolated expression item, in order to use a <bpt id="p1">[</bpt>conditional operator<ept id="p1">](../operators/conditional-operator.md)</ept> in an interpolated expression, enclose that expression in parentheses.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example shows how to include a brace in a result string and how to use a conditional operator in an interpolated expression:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A verbatim interpolated string starts with the <ph id="ph1">`$`</ph> character followed by the <ph id="ph2">`@`</ph> character.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about verbatim strings, see the <bpt id="p1">[</bpt>string<ept id="p1">](../keywords/string.md)</ept> and <bpt id="p2">[</bpt>verbatim identifier<ept id="p2">](verbatim.md)</ept> topics.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$`</ph> token must appear before the <ph id="ph2">`@`</ph> token in a verbatim interpolated string.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Implicit conversions and specifying <ph id="ph1">`IFormatProvider`</ph> implementation</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>There are three implicit conversions from an interpolated string:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Conversion of an interpolated string to a <ph id="ph1">&lt;xref:System.String&gt;</ph> instance that is the result of interpolated string resolution with interpolated expression items being replaced with the properly formatted string representations of their results.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This conversion uses the current culture.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Conversion of an interpolated string to a <ph id="ph1">&lt;xref:System.FormattableString&gt;</ph> instance that represents a composite format string along with the expression results to be formatted.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>That allows you to create multiple result strings with culture-specific content from a single <ph id="ph1">&lt;xref:System.FormattableString&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To do that call one of the following methods:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.FormattableString.ToString&gt;</ph> overload that produces a result string for the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentCulture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.FormattableString.Invariant%2A&gt;</ph> method that produces a result string for the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.FormattableString.ToString(System.IFormatProvider)&gt;</ph> method that produces a result string for a specified culture.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You also can use the <ph id="ph1">&lt;xref:System.FormattableString.ToString(System.IFormatProvider)&gt;</ph> method to provide a user-defined implementation of the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> interface that supports custom formatting.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Custom Formatting with ICustomFormatter<ept id="p1">](../../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Conversion of an interpolated string to an <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> instance that also allows you to create multiple result strings with culture-specific content from a single <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example uses implicit conversion to <ph id="ph1">&lt;xref:System.FormattableString&gt;</ph> to create culture-specific result strings:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Additional resources</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you are new to string interpolation, see the <bpt id="p1">[</bpt>String interpolation in C#<ept id="p1">](../../tutorials/exploration/interpolated-strings.yml)</ept> interactive tutorial.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Or you can try the  <bpt id="p1">[</bpt>String interpolation in C#<ept id="p1">](../../tutorials/string-interpolation.md)</ept> tutorial locally on your machine.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite formatting<ept id="p1">](../../../standard/base-types/composite-formatting.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting numeric results table<ept id="p1">](../keywords/formatting-numeric-results-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strings<ept id="p1">](../../programming-guide/strings/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Special Characters<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>