<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6588df72b463d7d7be8db49449bf3b48a5f29d4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\mapping-between-json-and-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">842b7818c14084e1ade8fbcd394f9e360c92b59d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dd312d3e81aacb625e176fb3b6a0bea9e65bedc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Mapping Between JSON and XML | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Mapping Between JSON and XML</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The readers and writers produced by the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> provide an XML API over JavaScript Object Notation (JSON) content.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>JSON encodes data using a subset of the object literals of JavaScript.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The readers and writers produced by this factory are also used when JSON content is being sent or received by <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> applications using the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement&gt;</ph> or the <ph id="ph3">&lt;xref:System.ServiceModel.WebHttpBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When initialized with JSON content, the JSON reader behaves in the same way that a textual XML reader does over an instance of XML.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The JSON writer, when given a sequence of calls that on a textual XML reader produces a certain XML instance, writes out JSON content.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The mapping between this instance of XML and the JSON content is described in this topic for use in advanced scenarios.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Internally, JSON is represented as an XML infoset when processed by <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Normally you do not have to be concerned with this internal representation as the mapping is only a logical one: JSON is normally not physically converted to XML in memory or converted to JSON from XML.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The mapping means that XML APIs are used to access JSON content.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses JSON, the usual scenario is that the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> is automatically plugged in by the <ph id="ph3">&lt;xref:System.ServiceModel.Description.WebScriptEnablingBehavior&gt;</ph> behavior, or by the <ph id="ph4">&lt;xref:System.ServiceModel.Description.WebHttpBehavior&gt;</ph> behavior when appropriate.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> understands the mapping between JSON and the XML infoset and acts as if it is dealing with JSON directly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>(It is possible to use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> with any XML reader or writer, with the understanding that the XML conforms to the following mapping.)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In advanced scenarios, it may become necessary to directly access the following mapping.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These scenarios occur when you want to serialize and deserialize JSON in custom ways, without relying on the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>, or when dealing with the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> type directly for messages containing JSON.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The JSON-XML mapping is also used for message logging.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When using the message logging feature in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, JSON messages is logged as XML according to the mapping described in the next section.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To clarify the concept of a mapping, the following example is of a JSON document.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To read this JSON document using one of the readers previously mentioned, use the same sequence of <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> calls as you would to read the following XML document.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Furthermore, if the JSON message in the example is received by <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> and logged, you would see the XML fragment in the preceding log.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Mapping Between JSON and the XML Infoset</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Formally, the mapping is between JSON as described in <bpt id="p1">[</bpt>RFC 4627<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=98808)</ept> (except with certain restrictions relaxed and certain other restrictions added) and the XML infoset (and not textual XML) as described in <bpt id="p2">[</bpt>XML Information Set<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=98809)</ept> .</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See this topic for the definitions of <bpt id="p1">*</bpt>information items<ept id="p1">*</ept> and fields in [square brackets].</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A blank JSON document maps to blank XML document, and a blank XML document maps to a blank JSON document.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>On the XML to JSON mapping, preceding whitespace and trailing whitespace after the document are not allowed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The mapping is defined between either a Document Information Item (DII) or an Element Information Item (EII) and JSON.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The EII, or the DIIâ€™s [document element] property, is referred to as the Root JSON Element.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note that document fragments (XML with multiple root elements) are not supported in this mapping.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example: The following document:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>And the following element:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Both have a mapping to JSON.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The &lt;<ph id="ph1">`root`</ph>&gt; element is the Root JSON Element in both cases.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Furthermore, in the case of a DII, the following should be considered:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Some items in the [children] list must not be present.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Do not rely on this fact when reading XML mapped from JSON.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The [children] list holds no comment information items.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The [children] list holds no DTD information items.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The [children] list holds no personal Information (PI) information items (the <ph id="ph1">\&lt;</ph>?xmlâ€¦&gt; declaration is not considered a PI information item)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The [notations] set is empty.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The [unparsed entities] set is empty.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example: The following document has no mapping to JSON because [children] holds a PI and a comment.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The EII for the Root JSON Element has the following characteristics:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>[local name] has the value "root".</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>[namespace name] has no value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>[prefix] has no value.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>[children] may either contain EIIs (which represent Inner Elements as described further) or CIIs (Character Information Items as described further) or none of these, but not both.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>[attributes] may contain the following optional attribute information items (AIIs)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The JSON Type Attribute ("type") as described further.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This attribute is used to preserve the JSON type (string, number, boolean, object, array or null) in the mapped XML.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The Data Contract Name Attribute ("__type") as described further.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This attribute is can only be present if the JSON type attribute is also present and its [normalized value] is "object".</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This attribute is used by the <ph id="ph1">`DataContractJsonSerializer`</ph> to preserve data contract type information - for example, in polymorphic cases where a derived type is serialized and where a base type is expected.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you are not working with the <ph id="ph1">`DataContractJsonSerializer`</ph>, in most cases, this attribute is ignored.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>[in-scope namespaces] contains the binding of "xml" to "http://www.w3.org/XML/1998/namespace" as mandated by the infoset specification.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>[children], [attributes] and [in-scope namespaces] must not have any items other than as specified previously and [namespace attributes] must have no members, but do not rely on these facts when reading XML mapped from JSON.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example: The following document has no mapping to JSON because [namespace attributes] is not empty.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The AII for the JSON Type Attribute has the following characteristics:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>[namespace name] has no value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>[prefix] has no value.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>[local name] is "type".</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>[normalized value] is one of the possible type values described in the following section.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>[specified] is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>[attribute type] has no value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>[references] has no value.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The AII for the Data Contract Name Attribute has the following characteristics:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>[namespace name] has no value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>[prefix] has no value.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>[local name] is "__type" (two underscores and then "type").</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>[normalized value] is any valid Unicode string â€“ the mapping of this string to JSON is described in the following section.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>[specified] is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>[attribute type] has no value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>[references] has no value.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Inner elements contained within the Root JSON Element or other inner elements have the following characteristics:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>[local name] may have any value as described further</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>[namespace name], [prefix], [children], [attributes], [namespace attributes], and [in-scope namespaces] are subject to the same rules as the Root JSON Element.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In both the Root JSON Element and the inner elements, the JSON Type Attribute defines the mapping to JSON and the possible [children] and their interpretation.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The attributeâ€™s [normalized value] is case-sensitive and must be lowercase, and cannot contain whitespace.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>[normalized value] of <ph id="ph1">`JSON Type Attribute`</ph>â€™s AII</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Allowed [children] of the corresponding EII</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Mapping to JSON</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`string`</ph> (or absence of the JSON type AII)</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`string`</ph> and the absence of the JSON type AII are the same makes <ph id="ph2">`string`</ph> the default.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>So, <ph id="ph1">`&lt;root&gt; string1&lt;/root&gt;`</ph> maps to the JSON <ph id="ph2">`string`</ph> "string1".</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>0 or more CIIs</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A JSON <ph id="ph1">`string`</ph> (JSON RFC, section 2.5).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`char`</ph> is a character that corresponds to the [character code] from the CII.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If there are no CIIs, it maps to an empty JSON <ph id="ph1">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example: The following element maps to a JSON fragment:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The JSON fragment is "42".</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>On XML to JSON mapping, characters that must be escaped map to escaped characters, all others map to characters that are not escaped.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The "/" character is special â€“ it is escaped even though it does not have to be (written out as "<ph id="ph1">\\</ph>/").</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Example: The following element maps to a JSON fragment.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The JSON fragment is "the <ph id="ph1">\\</ph>"da<ph id="ph2">\\</ph>/ta<ph id="ph3">\\</ph>"".</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>On JSON to XML mapping, any escaped characters and characters that are not escaped map correctly to the corresponding [character code].</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Example: The JSON fragment "\u0041BC", maps to the following XML element.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The string can be surrounded by whitespace ('ws' in section 2 of the JSON RFC) that does not get mapped to XML.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Example: The JSON fragment           "ABC", (there are spaces before the first double quote), maps to the following XML element.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Any whitespace in XML maps to whitespace in JSON.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Example: The following XML element maps to a JSON fragment.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The JSON fragment is " A BC ".</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>1 or more CIIs</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A JSON <ph id="ph1">`number`</ph> (JSON RFC, section 2.4), possibly surrounded by whitespace.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Each character in the number/whitespace combination is a character that corresponds to the [character code] from the CII.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Example: The following element maps to a JSON fragment.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The JSON fragment is    42</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>(Whitespace is preserved).</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>4 or 5 CIIs (which corresponds to <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>), possibly surrounded by additional whitespace CIIs.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A CII sequence that corresponds to the string "true" is mapped to the literal <ph id="ph1">`true`</ph>, and a CII sequence that corresponds to the string "false" is mapped to the literal <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Surrounding whitespace is preserved.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Example: The following element maps to a JSON fragment.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The JSON fragment is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>None allowed.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The literal <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>On JSON to XML mapping, the <ph id="ph1">`null`</ph> may be surrounded by whitespace (â€˜wsâ€™ in section 2) that does not get mapped to XML.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example: The following element maps to a JSON fragment.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The JSON fragment in both cases is <ph id="ph1">`Null`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>0 or more EIIs.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`begin-object`</ph> (left curly brace) as in section 2.2 of the JSON RFC, followed by a member record for each EII as described further.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If there is more than one EII, there are value-separators (commas) between the member records.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>All this is followed by an end-object (right curly brace).</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Example: The following element maps to the JSON fragment.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>root type="object"&gt;</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>type1 type="string"&gt;aaa<ph id="ph2">\&lt;</ph>/type1&gt;</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>type2 type="string"&gt;bbb<ph id="ph2">\&lt;</ph>/type2&gt;</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>/root &gt;</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The JSON fragment is {"type1":"aaa","type2":"bbb"}.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If the Data Contract Type Attribute is present on XML to JSON mapping, then an additional Member Record is inserted at the beginning.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Its name is the [local name] of the Data Contract Type Attribute ("__type"), and its value is the attribute's [normalized value].</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Conversely, on JSON to XML mapping, if the first member-recordâ€™s name is the [local name] of the Data Contract Type Attribute (that is, "<ph id="ph1">\_</ph>_type"), a corresponding Data Contract Type Attribute is present in the mapped XML, but a corresponding EII is not present.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Note that this member record must occur first in the JSON object for this special mapping to apply.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This represents a departure from usual JSON processing, where the order of member records is not significant.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Example:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The following JSON fragment maps to XML.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The XML is the following code.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">\_</ph>_type AII is present, but there is no <ph id="ph2">\_</ph>_type EII.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, if the order in the JSON is reversed as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>{"name":"John","<ph id="ph1">\_</ph>_type":"Person"}</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The corresponding XML is shown.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>That is, <ph id="ph1">\_</ph>_type ceases to have special meaning and maps to an EII as usual, not AII.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Escaping/unescaping rules for the AIIâ€™s [normalized value] when mapped to a JSON value are the same as for JSON strings, specified in the "string" row of this table.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Example:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>to the previous example can be mapped to the following JSON.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>On an XML to JSON mapping, the first EIIâ€™s [local name] must not be "<ph id="ph1">\_</ph>_type".</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Whitespace (<ph id="ph1">`ws`</ph>) is never generated on XML to JSON mapping for objects and is ignored on JSON to XML mapping.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Example: The following JSON fragment maps to an XML element.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>{   "ccc"   :  "aaa",   "ddd"    :"bbb"}</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The XML element is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>ray`</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>0 or more EIIs</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A begin-array (left square bracket) as in section 2.3 of the JSON RFC, followed by an array record for each EII as described further.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If there is more than one EII, there are value-separators (commas) between the array records.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>All this is followed by an end-array.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Example: The following XML element maps to a JSON fragment.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The JSON fragment is ["aaa","bbb"]</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Whitespace (<ph id="ph1">`ws`</ph>) is never generated on XML to JSON mapping for arrays and is ignored on JSON to XML mapping.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Example: AJSON fragment.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>[     "aaa",     "bbb"]</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The XML element that it maps to.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Member Records work as follows:</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Inner elementâ€™s [local name] maps to the <ph id="ph1">`string`</ph> part of the <ph id="ph2">`member`</ph> as defined in section 2.2 of the JSON RFC.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Example: The following element maps to a JSON fragment.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The following JSON fragment is displayed.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>On the XML to JSON mapping, the characters that must be escaped in JSON are escaped, and the others are not escaped.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The "/" character, even though it is not a character that must be escaped, is escaped nevertheless (it does not have to be escaped on JSON to XML mapping).</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This is required to support the ASP.NET AJAX format for <ph id="ph1">`DateTime`</ph> data in JSON.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>On the JSON to XML mapping, all characters (including the not escaped characters, if necessary) are taken to form a <ph id="ph1">`string`</ph> that produces a [local name].</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Inner elements [children] map to the value in section 2.2, according to the <ph id="ph1">`JSON Type Attribute`</ph> just like for the <ph id="ph2">`Root JSON Element`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Multiple levels of nesting of EIIs (including nesting within arrays) are allowed.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Example: The following element maps to a JSON fragment.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The following JSON fragment is what it maps to.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>There is no XML encoding step in the preceding mapping.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> only supports JSON documents where all characters in key names are valid characters in XML element names.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>For example, the JSON document {"&lt;":"a"} is not supported because &lt; is not a valid name for an XML element.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The reverse situation (characters valid in XML but not in JSON) does not cause any problems because the preceding mapping includes JSON escaping/unescaping steps.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Array Records work as follows:</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Inner elementâ€™s [local name] is "item".</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Inner elementâ€™s [children] map to the value in section 2.3, according to the JSON Type Attribute as is does for the Root JSON Element.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Multiple levels of nesting of EIIs (including nesting within objects) are allowed.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Example: The following element maps to a JSON fragment.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The following is the JSON fragment.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Stand-Alone JSON Serialization<ept id="p1">](../../../../docs/framework/wcf/feature-details/stand-alone-json-serialization.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>