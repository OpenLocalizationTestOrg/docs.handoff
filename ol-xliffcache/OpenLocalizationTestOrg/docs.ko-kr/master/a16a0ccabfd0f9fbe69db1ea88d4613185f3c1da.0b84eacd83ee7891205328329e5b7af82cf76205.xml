{"content":"---\ntitle: \"Tutorial: Create a Windows Communication Foundation client\"\nms.date: 03/19/2019\nhelpviewer_keywords:\n  - \"clients [WCF], running\"\n  - \"WCF clients [WCF], running\"\nms.assetid: a67884cc-1c4b-416b-8c96-5c954099f19f\n---\n# Tutorial: Create a Windows Communication Foundation client\n\nThis tutorial describes the fourth of five tasks required to create a basic Windows Communication Foundation (WCF) application. For an overview of the tutorials, see [Tutorial: Get started with Windows Communication Foundation applications](getting-started-tutorial.md).\n\nThe next task for creating a WCF application is to create a client by retrieving metadata from a WCF service. You use Visual Studio to add a service reference, which gets the metadata from the service’s MEX endpoint. Visual Studio then generates a managed source code file for a client proxy in the language you've chosen. It also creates a client configuration file (*App.config*). This file enables the client application to connect to the service at an endpoint. \n\n> [!NOTE]\n> If you call a WCF service from a class library project in Visual Studio, use the **Add Service Reference** feature to automatically generate a proxy and associated configuration file. However, because class library projects don't use this configuration file, you need to add the settings in the generated configuration file to the *App.config* file for the executable that calls the class library.\n\n> [!NOTE]\n> As an alternative, use the [ServiceModel Metadata Utility tool](#servicemodel-metadata-utility-tool) instead of Visual Studio to generate the proxy class and configuration file.\n\nThe client application uses the generated proxy class to communicate with the service. This procedure is described in [Tutorial: Use a client](how-to-use-a-wcf-client.md).\n\nIn this tutorial, you learn how to:\n> [!div class=\"checklist\"]\n> - Create and configure a console app project for the WCF client.\n> - Add a service reference to the WCF service to generate the proxy class and configuration files.\n\n## Create a Windows Communication Foundation client\n\n1. Create a console app project in Visual Studio: \n\n    1. From the **File** menu, select **Open** > **Project/Solution** and browse to the **GettingStarted** solution you previously created (*GettingStarted.sln*). Select **Open**.\n\n    2. From the **View** menu, select **Solution Explorer**.\n\n    3. In the **Solution Explorer** window, select the **GettingStarted** solution (top node), and then select **Add** > **New Project** from the shortcut menu. \n    \n    4. In the **Add New Project** window, on the left side, select the **Windows Desktop** category under **Visual C#** or **Visual Basic**. \n\n    5. Select the **Console App (.NET Framework)** template, and enter *GettingStartedClient* for the **Name**. Select **OK**.\n\n2. Add a reference in the **GettingStartedClient** project to the <xref:System.ServiceModel> assembly: \n\n    1.  In the **Solution Explorer** window, select the **References** folder under the **GettingStartedClient** project, and then select **Add Reference** from the shortcut menu. \n\n    2. In the **Add Reference** window, under **Assemblies** on the left side of the window, select **Framework**.\n    \n    3. Find and select **System.ServiceModel**, and then choose **OK**. \n\n    4. Save the solution by selecting **File** > **Save All**.\n\n3. Add a service reference to the calculator service:\n\n   1. In the **Solution Explorer** window, select the **References** folder under the **GettingStartedClient** project, and then select **Add Service Reference** from the shortcut menu.\n\n   2. In the **Add Service Reference** window, select **Discover**.\n\n      The CalculatorService service starts and Visual Studio displays it in the **Services** box.\n\n   3. Select **CalculatorService** to expand it and display the service contracts implemented by the service. Leave the default **Namespace** and choose **OK**.\n\n      Visual Studio adds a new item under the **Connected Services** folder in the **GettingStartedClient** project. \n\n### ServiceModel Metadata Utility tool\n\nThe following examples show how to optionally use the [ServiceModel Metadata Utility tool (Svcutil.exe)](servicemodel-metadata-utility-tool-svcutil-exe.md) to generate the proxy class file. This tool generates the proxy class file and the *App.config* file. The following examples show how to generate the proxy in C# and Visual Basic, respectively:\n\n```shell\nsvcutil.exe /language:cs /out:generatedProxy.cs /config:app.config http://localhost:8000/GettingStarted/CalculatorService\n```\n\n```shell\nsvcutil.exe /language:vb /out:generatedProxy.vb /config:app.config http://localhost:8000/GettingStarted/CalculatorService\n```\n\n### Client configuration file\n\nAfter you've created the client, Visual Studio creates the **App.config** configuration file in the **GettingStartedClient** project, which should be similar to the following example:\n\n```xml\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <configuration>\n        <startup>\n            <!-- specifies the version of WCF to use-->\n            <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.6.1\" />\n        </startup>\n        <system.serviceModel>\n            <bindings>\n                <!-- Uses wsHttpBinding-->\n                <wsHttpBinding>\n                    <binding name=\"WSHttpBinding_ICalculator\" />\n                </wsHttpBinding>\n            </bindings>\n            <client>\n                <!-- specifies the endpoint to use when calling the service -->\n                <endpoint address=\"http://localhost:8000/GettingStarted/CalculatorService\"\n                    binding=\"wsHttpBinding\" bindingConfiguration=\"WSHttpBinding_ICalculator\"\n                    contract=\"ServiceReference1.ICalculator\" name=\"WSHttpBinding_ICalculator\">\n                    <identity>\n                        <dns value=\"localhost\" />\n                    </identity>\n                </endpoint>\n            </client>\n        </system.serviceModel>\n    </configuration>\n```\n\nUnder the [\\<system.serviceModel>](../configure-apps/file-schema/wcf/system-servicemodel.md) section, notice the [\\<endpoint>](../configure-apps/file-schema/wcf/endpoint-element.md) element. The **&lt;endpoint&gt;** element defines the endpoint that the client uses to access the service as follows:\n- Address: `http://localhost:8000/GettingStarted/CalculatorService`. The address of the endpoint.\n- Service contract: `ServiceReference1.ICalculator`. The service contract handles communication between the WCF client and the service. Visual Studio generated this contract when you used its **Add Service Reference** function. It's essentially a copy of the contract that you defined in the GettingStartedLib project. \n- Binding: <xref:System.ServiceModel.WSHttpBinding>. The binding specifies HTTP as the transport, interoperable security, and other configuration details.\n\n## Next steps\n\nIn this tutorial, you learned how to:\n> [!div class=\"checklist\"]\n> - Create and configure a console app project for the WCF client.\n> - Add a service reference to the WCF service to generate the proxy class and configuration files for the client application.\n\nAdvance to the next tutorial to learn how to use the generated client.\n\n> [!div class=\"nextstepaction\"]\n> [Tutorial: Use a WCF client](how-to-use-a-wcf-client.md)\n","nodes":[{"pos":[4,223],"embed":true,"restype":"x-metadata","content":"title: \"Tutorial: Create a Windows Communication Foundation client\"\nms.date: 03/19/2019\nhelpviewer_keywords:\n  - \"clients [WCF], running\"\n  - \"WCF clients [WCF], running\"\nms.assetid: a67884cc-1c4b-416b-8c96-5c954099f19f","nodes":[{"content":"Tutorial: Create a Windows Communication Foundation client","nodes":[{"pos":[0,58],"content":"Tutorial: Create a Windows Communication Foundation client","nodes":[{"content":"Tutorial: Create a Windows Communication Foundation client","pos":[0,58]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[230,288],"content":"Tutorial: Create a Windows Communication Foundation client","linkify":"Tutorial: Create a Windows Communication Foundation client","nodes":[{"content":"Tutorial: Create a Windows Communication Foundation client","pos":[0,58]}]},{"content":"This tutorial describes the fourth of five tasks required to create a basic Windows Communication Foundation (WCF) application.","pos":[290,417]},{"content":"For an overview of the tutorials, see <bpt id=\"p1\">[</bpt>Tutorial: Get started with Windows Communication Foundation applications<ept id=\"p1\">](getting-started-tutorial.md)</ept>.","pos":[418,560],"source":" For an overview of the tutorials, see [Tutorial: Get started with Windows Communication Foundation applications](getting-started-tutorial.md)."},{"content":"The next task for creating a WCF application is to create a client by retrieving metadata from a WCF service.","pos":[562,671]},{"content":"You use Visual Studio to add a service reference, which gets the metadata from the service’s MEX endpoint.","pos":[672,778]},{"content":"Visual Studio then generates a managed source code file for a client proxy in the language you've chosen.","pos":[779,884]},{"content":"It also creates a client configuration file (<bpt id=\"p1\">*</bpt>App.config<ept id=\"p1\">*</ept>).","pos":[885,944],"source":" It also creates a client configuration file (*App.config*)."},{"content":"This file enables the client application to connect to the service at an endpoint.","pos":[945,1027]},{"pos":[1032,1439],"content":"[!NOTE]\nIf you call a WCF service from a class library project in Visual Studio, use the **Add Service Reference** feature to automatically generate a proxy and associated configuration file. However, because class library projects don't use this configuration file, you need to add the settings in the generated configuration file to the *App.config* file for the executable that calls the class library.","leadings":["","> "],"nodes":[{"content":"If you call a WCF service from a class library project in Visual Studio, use the **Add Service Reference** feature to automatically generate a proxy and associated configuration file. However, because class library projects don't use this configuration file, you need to add the settings in the generated configuration file to the *App.config* file for the executable that calls the class library.","pos":[8,405],"nodes":[{"content":"If you call a WCF service from a class library project in Visual Studio, use the <bpt id=\"p1\">**</bpt>Add Service Reference<ept id=\"p1\">**</ept> feature to automatically generate a proxy and associated configuration file.","pos":[0,183],"source":"If you call a WCF service from a class library project in Visual Studio, use the **Add Service Reference** feature to automatically generate a proxy and associated configuration file."},{"content":"However, because class library projects don't use this configuration file, you need to add the settings in the generated configuration file to the <bpt id=\"p1\">*</bpt>App.config<ept id=\"p1\">*</ept> file for the executable that calls the class library.","pos":[184,397],"source":" However, because class library projects don't use this configuration file, you need to add the settings in the generated configuration file to the *App.config* file for the executable that calls the class library."}]}]},{"pos":[1443,1630],"content":"[!NOTE]\nAs an alternative, use the [ServiceModel Metadata Utility tool](#servicemodel-metadata-utility-tool) instead of Visual Studio to generate the proxy class and configuration file.","leadings":["","> "],"nodes":[{"content":"As an alternative, use the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility tool<ept id=\"p1\">](#servicemodel-metadata-utility-tool)</ept> instead of Visual Studio to generate the proxy class and configuration file.","pos":[8,185],"source":"As an alternative, use the [ServiceModel Metadata Utility tool](#servicemodel-metadata-utility-tool) instead of Visual Studio to generate the proxy class and configuration file."}]},{"content":"The client application uses the generated proxy class to communicate with the service.","pos":[1632,1718]},{"content":"This procedure is described in <bpt id=\"p1\">[</bpt>Tutorial: Use a client<ept id=\"p1\">](how-to-use-a-wcf-client.md)</ept>.","pos":[1719,1803],"source":" This procedure is described in [Tutorial: Use a client](how-to-use-a-wcf-client.md)."},{"content":"In this tutorial, you learn how to:","pos":[1805,1840]},{"content":"Create and configure a console app project for the WCF client.","pos":[1872,1934]},{"content":"Add a service reference to the WCF service to generate the proxy class and configuration files.","pos":[1939,2034]},{"pos":[2039,2087],"content":"Create a Windows Communication Foundation client","linkify":"Create a Windows Communication Foundation client","nodes":[{"content":"Create a Windows Communication Foundation client","pos":[0,48]}]},{"content":"Create a console app project in Visual Studio:","pos":[2092,2138]},{"content":"From the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Open<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Project/Solution<ept id=\"p3\">**</ept> and browse to the <bpt id=\"p4\">**</bpt>GettingStarted<ept id=\"p4\">**</ept> solution you previously created (<bpt id=\"p5\">*</bpt>GettingStarted.sln<ept id=\"p5\">*</ept>).","pos":[2148,2303],"source":"From the **File** menu, select **Open** > **Project/Solution** and browse to the **GettingStarted** solution you previously created (*GettingStarted.sln*)."},{"content":"Select <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>.","pos":[2304,2320],"source":" Select **Open**."},{"pos":[2329,2382],"content":"From the <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept>.","source":"From the **View** menu, select **Solution Explorer**."},{"pos":[2391,2544],"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> window, select the <bpt id=\"p2\">**</bpt>GettingStarted<ept id=\"p2\">**</ept> solution (top node), and then select <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p4\">**</bpt>New Project<ept id=\"p4\">**</ept> from the shortcut menu.","source":"In the **Solution Explorer** window, select the **GettingStarted** solution (top node), and then select **Add** > **New Project** from the shortcut menu."},{"pos":[2558,2691],"content":"In the <bpt id=\"p1\">**</bpt>Add New Project<ept id=\"p1\">**</ept> window, on the left side, select the <bpt id=\"p2\">**</bpt>Windows Desktop<ept id=\"p2\">**</ept> category under <bpt id=\"p3\">**</bpt>Visual C#<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>Visual Basic<ept id=\"p4\">**</ept>.","source":"In the **Add New Project** window, on the left side, select the **Windows Desktop** category under **Visual C#** or **Visual Basic**."},{"content":"Select the <bpt id=\"p1\">**</bpt>Console App (.NET Framework)<ept id=\"p1\">**</ept> template, and enter <bpt id=\"p2\">*</bpt>GettingStartedClient<ept id=\"p2\">*</ept> for the <bpt id=\"p3\">**</bpt>Name<ept id=\"p3\">**</ept>.","pos":[2701,2805],"source":"Select the **Console App (.NET Framework)** template, and enter *GettingStartedClient* for the **Name**."},{"content":"Select <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[2806,2820],"source":" Select **OK**."},{"pos":[2825,2924],"content":"Add a reference in the <bpt id=\"p1\">**</bpt>GettingStartedClient<ept id=\"p1\">**</ept> project to the <ph id=\"ph1\">&lt;xref:System.ServiceModel&gt;</ph> assembly:","source":"Add a reference in the **GettingStartedClient** project to the <xref:System.ServiceModel> assembly:"},{"pos":[2935,3106],"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> window, select the <bpt id=\"p2\">**</bpt>References<ept id=\"p2\">**</ept> folder under the <bpt id=\"p3\">**</bpt>GettingStartedClient<ept id=\"p3\">**</ept> project, and then select <bpt id=\"p4\">**</bpt>Add Reference<ept id=\"p4\">**</ept> from the shortcut menu.","source":"In the **Solution Explorer** window, select the **References** folder under the **GettingStartedClient** project, and then select **Add Reference** from the shortcut menu."},{"pos":[3116,3223],"content":"In the <bpt id=\"p1\">**</bpt>Add Reference<ept id=\"p1\">**</ept> window, under <bpt id=\"p2\">**</bpt>Assemblies<ept id=\"p2\">**</ept> on the left side of the window, select <bpt id=\"p3\">**</bpt>Framework<ept id=\"p3\">**</ept>.","source":"In the **Add Reference** window, under **Assemblies** on the left side of the window, select **Framework**."},{"pos":[3236,3300],"content":"Find and select <bpt id=\"p1\">**</bpt>System.ServiceModel<ept id=\"p1\">**</ept>, and then choose <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","source":"Find and select **System.ServiceModel**, and then choose **OK**."},{"pos":[3310,3365],"content":"Save the solution by selecting <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Save All<ept id=\"p2\">**</ept>.","source":"Save the solution by selecting **File** > **Save All**."},{"content":"Add a service reference to the calculator service:","pos":[3370,3420]},{"pos":[3428,3607],"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> window, select the <bpt id=\"p2\">**</bpt>References<ept id=\"p2\">**</ept> folder under the <bpt id=\"p3\">**</bpt>GettingStartedClient<ept id=\"p3\">**</ept> project, and then select <bpt id=\"p4\">**</bpt>Add Service Reference<ept id=\"p4\">**</ept> from the shortcut menu.","source":"In the **Solution Explorer** window, select the **References** folder under the **GettingStartedClient** project, and then select **Add Service Reference** from the shortcut menu."},{"pos":[3615,3676],"content":"In the <bpt id=\"p1\">**</bpt>Add Service Reference<ept id=\"p1\">**</ept> window, select <bpt id=\"p2\">**</bpt>Discover<ept id=\"p2\">**</ept>.","source":"In the **Add Service Reference** window, select **Discover**."},{"pos":[3684,3775],"content":"The CalculatorService service starts and Visual Studio displays it in the <bpt id=\"p1\">**</bpt>Services<ept id=\"p1\">**</ept> box.","source":"The CalculatorService service starts and Visual Studio displays it in the **Services** box."},{"content":"Select <bpt id=\"p1\">**</bpt>CalculatorService<ept id=\"p1\">**</ept> to expand it and display the service contracts implemented by the service.","pos":[3783,3886],"source":"Select **CalculatorService** to expand it and display the service contracts implemented by the service."},{"content":"Leave the default <bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> and choose <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","pos":[3887,3937],"source":" Leave the default **Namespace** and choose **OK**."},{"pos":[3945,4055],"content":"Visual Studio adds a new item under the <bpt id=\"p1\">**</bpt>Connected Services<ept id=\"p1\">**</ept> folder in the <bpt id=\"p2\">**</bpt>GettingStartedClient<ept id=\"p2\">**</ept> project.","source":"Visual Studio adds a new item under the **Connected Services** folder in the **GettingStartedClient** project."},{"pos":[4062,4096],"content":"ServiceModel Metadata Utility tool","linkify":"ServiceModel Metadata Utility tool","nodes":[{"content":"ServiceModel Metadata Utility tool","pos":[0,34]}]},{"content":"The following examples show how to optionally use the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility tool (Svcutil.exe)<ept id=\"p1\">](servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> to generate the proxy class file.","pos":[4098,4287],"source":"The following examples show how to optionally use the [ServiceModel Metadata Utility tool (Svcutil.exe)](servicemodel-metadata-utility-tool-svcutil-exe.md) to generate the proxy class file."},{"content":"This tool generates the proxy class file and the <bpt id=\"p1\">*</bpt>App.config<ept id=\"p1\">*</ept> file.","pos":[4288,4355],"source":" This tool generates the proxy class file and the *App.config* file."},{"content":"The following examples show how to generate the proxy in C# and Visual Basic, respectively:","pos":[4356,4447]},{"pos":[4725,4750],"content":"Client configuration file","linkify":"Client configuration file","nodes":[{"content":"Client configuration file","pos":[0,25]}]},{"pos":[4752,4935],"content":"After you've created the client, Visual Studio creates the <bpt id=\"p1\">**</bpt>App.config<ept id=\"p1\">**</ept> configuration file in the <bpt id=\"p2\">**</bpt>GettingStartedClient<ept id=\"p2\">**</ept> project, which should be similar to the following example:","source":"After you've created the client, Visual Studio creates the **App.config** configuration file in the **GettingStartedClient** project, which should be similar to the following example:"},{"content":"Under the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>system.serviceModel&gt;<ept id=\"p1\">](../configure-apps/file-schema/wcf/system-servicemodel.md)</ept> section, notice the <bpt id=\"p2\">[</bpt><ph id=\"ph2\">\\&lt;</ph>endpoint&gt;<ept id=\"p2\">](../configure-apps/file-schema/wcf/endpoint-element.md)</ept> element.","pos":[6034,6224],"source":"Under the [\\<system.serviceModel>](../configure-apps/file-schema/wcf/system-servicemodel.md) section, notice the [\\<endpoint>](../configure-apps/file-schema/wcf/endpoint-element.md) element."},{"content":"The <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;lt;</ph>endpoint<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> element defines the endpoint that the client uses to access the service as follows:","pos":[6225,6333],"source":" The **&lt;endpoint&gt;** element defines the endpoint that the client uses to access the service as follows:"},{"content":"Address: <ph id=\"ph1\">`http://localhost:8000/GettingStarted/CalculatorService`</ph>.","pos":[6336,6402],"source":"Address: `http://localhost:8000/GettingStarted/CalculatorService`."},{"content":"The address of the endpoint.","pos":[6403,6431]},{"content":"Service contract: <ph id=\"ph1\">`ServiceReference1.ICalculator`</ph>.","pos":[6434,6484],"source":"Service contract: `ServiceReference1.ICalculator`."},{"content":"The service contract handles communication between the WCF client and the service.","pos":[6485,6567]},{"content":"Visual Studio generated this contract when you used its <bpt id=\"p1\">**</bpt>Add Service Reference<ept id=\"p1\">**</ept> function.","pos":[6568,6659],"source":" Visual Studio generated this contract when you used its **Add Service Reference** function."},{"content":"It's essentially a copy of the contract that you defined in the GettingStartedLib project.","pos":[6660,6750]},{"content":"Binding: <ph id=\"ph1\">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph>.","pos":[6754,6804],"source":"Binding: <xref:System.ServiceModel.WSHttpBinding>."},{"content":"The binding specifies HTTP as the transport, interoperable security, and other configuration details.","pos":[6805,6906]},{"pos":[6911,6921],"content":"Next steps","linkify":"Next steps","nodes":[{"content":"Next steps","pos":[0,10]}]},{"content":"In this tutorial, you learned how to:","pos":[6923,6960]},{"content":"Create and configure a console app project for the WCF client.","pos":[6992,7054]},{"content":"Add a service reference to the WCF service to generate the proxy class and configuration files for the client application.","pos":[7059,7181]},{"content":"Advance to the next tutorial to learn how to use the generated client.","pos":[7183,7253]},{"pos":[7257,7345],"content":"[!div class=\"nextstepaction\"]\n[Tutorial: Use a WCF client](how-to-use-a-wcf-client.md)","leadings":["","> "],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Tutorial: Use a WCF client<ept id=\"p1\">](how-to-use-a-wcf-client.md)</ept>","pos":[30,86],"source":"[Tutorial: Use a WCF client](how-to-use-a-wcf-client.md)"}]}]}