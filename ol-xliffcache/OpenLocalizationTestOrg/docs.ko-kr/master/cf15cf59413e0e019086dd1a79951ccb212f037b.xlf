<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="processing-the-xml-file.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf15cf59413e0e019086dd1a79951ccb212f037b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\program-structure\processing-the-xml-file.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4890dd6a2d529e9b88f14fcad528737e98db53b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bc9fc94007d01c23a6856a5e526e6d700c19f6f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Processing the XML File (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Processing the XML File (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The compiler generates an ID string for each construct in your code that is tagged to generate documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(For information on how to tag your code, see <bpt id="p1">[</bpt>XML Comment Tags<ept id="p1">](../../../visual-basic/language-reference/xmldoc/recommended-xml-tags-for-documentation-comments.md)</ept>.) The ID string uniquely identifies the construct.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Programs that process the XML file can use the ID string to identify the corresponding <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> metadata/reflection item.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The XML file is not a hierarchical representation of your code; it is a flat list with a generated ID for each element.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The compiler observes the following rules when it generates the ID strings:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>No white space is placed in the string.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first part of the ID string identifies the kind of member being identified, with a single character followed by a colon.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following member types are used.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Character</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>N</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>namespace</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You cannot add documentation comments to a namespace, but you can make CREF references to them, where supported.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>T</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>type: <ph id="ph1">`Class`</ph>, <ph id="ph2">`Module`</ph>, <ph id="ph3">`Interface`</ph>, <ph id="ph4">`Structure`</ph>, <ph id="ph5">`Enum`</ph>, <ph id="ph6">`Delegate`</ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>F</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>field: <ph id="ph1">`Dim`</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>P</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>property: <ph id="ph1">`Property`</ph> (including default properties)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>M</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>method: <ph id="ph1">`Sub`</ph>, <ph id="ph2">`Function`</ph>, <ph id="ph3">`Declare`</ph>, <ph id="ph4">`Operator`</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>E</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>event: <ph id="ph1">`Event`</ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>!</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>error string</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The rest of the string provides information about the error.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler generates error information for links that cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The second part of the <ph id="ph1">`String`</ph> is the fully qualified name of the item, starting at the root of the namespace.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The name of the item, its enclosing type(s), and the namespace are separated by periods.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the name of the item itself contains periods, they are replaced by the number sign (#).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It is assumed that no item has a number sign directly in its name.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the fully qualified name of the <ph id="ph1">`String`</ph> constructor would be <ph id="ph2">`System.String.#ctor`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For properties and methods, if there are arguments to the method, the argument list enclosed in parentheses follows.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If there are no arguments, no parentheses are present.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The arguments are separated by commas.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The encoding of each argument follows directly how it is encoded in a <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> signature.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code shows how the ID strings for a class and its members are generated.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/doc<ept id="p1">](../../../visual-basic/reference/command-line-compiler/doc.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create XML Documentation<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-create-xml-documentation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>