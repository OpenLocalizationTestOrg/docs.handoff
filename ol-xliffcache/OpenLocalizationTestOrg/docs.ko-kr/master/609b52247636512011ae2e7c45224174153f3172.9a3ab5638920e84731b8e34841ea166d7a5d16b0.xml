{"content":"---\ntitle: \"Using Variance for Func and Action Generic Delegates (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 1826774f-2b7a-470f-b110-17cfdd6abdae\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Using Variance for Func and Action Generic Delegates (C#)\nThese examples demonstrate how to use covariance and contravariance in the `Func` and `Action` generic delegates to enable reuse of methods and provide more flexibility in your code.  \n  \n For more information about covariance and contravariance, see [Variance in Delegates (C#)](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md).  \n  \n## Using Delegates with Covariant Type Parameters  \n The following example illustrates the benefits of covariance support in the generic `Func` delegates. The `FindByTitle` method takes a parameter of the `String` type and returns an object of the `Employee` type. However, you can assign this method to the `Func<String, Person>` delegate because `Employee` inherits `Person`.  \n  \n```csharp  \n// Simple hierarchy of classes.  \npublic class Person { }  \npublic class Employee : Person { }  \nclass Program  \n{  \n    static Employee FindByTitle(String title)  \n    {  \n        // This is a stub for a method that returns  \n        // an employee that has the specified title.  \n        return new Employee();  \n    }  \n  \n    static void Test()  \n    {  \n        // Create an instance of the delegate without using variance.  \n        Func<String, Employee> findEmployee = FindByTitle;  \n  \n        // The delegate expects a method to return Person,  \n        // but you can assign it a method that returns Employee.  \n        Func<String, Person> findPerson = FindByTitle;  \n  \n        // You can also assign a delegate   \n        // that returns a more derived type   \n        // to a delegate that returns a less derived type.  \n        findPerson = findEmployee;  \n  \n    }  \n}  \n```  \n  \n## Using Delegates with Contravariant Type Parameters  \n The following example illustrates the benefits of contravariance support in the generic `Action` delegates. The `AddToContacts` method takes a parameter of the `Person` type. However, you can assign this method to the `Action<Employee>` delegate because `Employee` inherits `Person`.  \n  \n```csharp  \npublic class Person { }  \npublic class Employee : Person { }  \nclass Program  \n{  \n    static void AddToContacts(Person person)  \n    {  \n        // This method adds a Person object  \n        // to a contact list.  \n    }  \n  \n    static void Test()  \n    {  \n        // Create an instance of the delegate without using variance.  \n        Action<Person> addPersonToContacts = AddToContacts;  \n  \n        // The Action delegate expects   \n        // a method that has an Employee parameter,  \n        // but you can assign it a method that has a Person parameter  \n        // because Employee derives from Person.  \n        Action<Employee> addEmployeeToContacts = AddToContacts;  \n  \n        // You can also assign a delegate   \n        // that accepts a less derived parameter to a delegate   \n        // that accepts a more derived parameter.  \n        addEmployeeToContacts = addPersonToContacts;  \n    }  \n}  \n```  \n  \n## See Also  \n [Covariance and Contravariance (C#)](../../../../csharp/programming-guide/concepts/covariance-contravariance/index.md)   \n [Generics](https://msdn.microsoft.com/library/ms172192)","nodes":[{"pos":[12,86],"content":"Using Variance for Func and Action Generic Delegates (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Variance for Func and Action Generic Delegates (C#) | Microsoft Docs","pos":[0,74]}]},{"pos":[445,502],"content":"Using Variance for Func and Action Generic Delegates (C#)","linkify":"Using Variance for Func and Action Generic Delegates (C#)","nodes":[{"content":"Using Variance for Func and Action Generic Delegates (C#)","pos":[0,57]}]},{"pos":[503,685],"content":"These examples demonstrate how to use covariance and contravariance in the <ph id=\"ph1\">`Func`</ph> and <ph id=\"ph2\">`Action`</ph> generic delegates to enable reuse of methods and provide more flexibility in your code.","source":"These examples demonstrate how to use covariance and contravariance in the `Func` and `Action` generic delegates to enable reuse of methods and provide more flexibility in your code."},{"pos":[692,881],"content":"For more information about covariance and contravariance, see <bpt id=\"p1\">[</bpt>Variance in Delegates (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept>.","source":"For more information about covariance and contravariance, see [Variance in Delegates (C#)](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)."},{"pos":[890,936],"content":"Using Delegates with Covariant Type Parameters","linkify":"Using Delegates with Covariant Type Parameters","nodes":[{"content":"Using Delegates with Covariant Type Parameters","pos":[0,46]}]},{"content":"The following example illustrates the benefits of covariance support in the generic <ph id=\"ph1\">`Func`</ph> delegates.","pos":[940,1041],"source":"The following example illustrates the benefits of covariance support in the generic `Func` delegates."},{"content":"The <ph id=\"ph1\">`FindByTitle`</ph> method takes a parameter of the <ph id=\"ph2\">`String`</ph> type and returns an object of the <ph id=\"ph3\">`Employee`</ph> type.","pos":[1042,1151],"source":" The `FindByTitle` method takes a parameter of the `String` type and returns an object of the `Employee` type."},{"content":"However, you can assign this method to the <ph id=\"ph1\">`Func&lt;String, Person&gt;`</ph> delegate because <ph id=\"ph2\">`Employee`</ph> inherits <ph id=\"ph3\">`Person`</ph>.","pos":[1152,1264],"source":" However, you can assign this method to the `Func<String, Person>` delegate because `Employee` inherits `Person`."},{"pos":[2182,2232],"content":"Using Delegates with Contravariant Type Parameters","linkify":"Using Delegates with Contravariant Type Parameters","nodes":[{"content":"Using Delegates with Contravariant Type Parameters","pos":[0,50]}]},{"content":"The following example illustrates the benefits of contravariance support in the generic <ph id=\"ph1\">`Action`</ph> delegates.","pos":[2236,2343],"source":"The following example illustrates the benefits of contravariance support in the generic `Action` delegates."},{"content":"The <ph id=\"ph1\">`AddToContacts`</ph> method takes a parameter of the <ph id=\"ph2\">`Person`</ph> type.","pos":[2344,2410],"source":" The `AddToContacts` method takes a parameter of the `Person` type."},{"content":"However, you can assign this method to the <ph id=\"ph1\">`Action&lt;Employee&gt;`</ph> delegate because <ph id=\"ph2\">`Employee`</ph> inherits <ph id=\"ph3\">`Person`</ph>.","pos":[2411,2519],"source":" However, you can assign this method to the `Action<Employee>` delegate because `Employee` inherits `Person`."},{"pos":[3464,3472],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Covariance and Contravariance (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/covariance-contravariance/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3476,3595],"source":"[Covariance and Contravariance (C#)](../../../../csharp/programming-guide/concepts/covariance-contravariance/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generics<ept id=\"p1\">](https://msdn.microsoft.com/library/ms172192)</ept>","pos":[3598,3654],"source":" [Generics](https://msdn.microsoft.com/library/ms172192)"}]}