{"content":"---\ntitle: \"Concatenation Operators in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"& operator [Visual Basic], concatenation\"\n  - \"concatenation operators [Visual Basic]\"\n  - \"operators [Visual Basic], concatenation\"\n  - \"Visual Basic code, operators\"\n  - \"+ operator [Visual Basic], concatenation\"\n  - \"concatenation operators [Visual Basic]\"\nms.assetid: e59908c3-89e0-41ae-933d-3e8826c16a04\n---\n# Concatenation Operators in Visual Basic\nConcatenation operators join multiple strings into a single string. There are two concatenation operators, `+` and `&`. Both carry out the basic concatenation operation, as the following example shows.  \n  \n```vb\nDim x As String = \"Mic\" & \"ro\" & \"soft\" \nDim y As String = \"Mic\" + \"ro\" + \"soft\" \n' The preceding statements set both x and y to \"Microsoft\".\n```  \n  \n These operators can also concatenate `String` variables, as the following example shows.  \n  \n [!code-vb[VbVbalrOperators#76](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#76)]  \n  \n## Differences Between the Two Concatenation Operators  \n The [+ Operator](../../../../visual-basic/language-reference/operators/addition-operator.md) has the primary purpose of adding two numbers. However, it can also concatenate numeric operands with string operands. The `+` operator has a complex set of rules that determine whether to add, concatenate, signal a compiler error, or throw a run-time <xref:System.InvalidCastException> exception.  \n  \n The [& Operator](../../../../visual-basic/language-reference/operators/concatenation-operator.md) is defined only for `String` operands, and it always widens its operands to `String`, regardless of the setting of `Option Strict`. The `&` operator is recommended for string concatenation because it is defined exclusively for strings and reduces your chances of generating an unintended conversion.  \n  \n## Performance: String and StringBuilder  \n If you do a significant number of manipulations on a string, such as concatenations, deletions, and replacements, your performance might profit from the <xref:System.Text.StringBuilder> class in the <xref:System.Text> namespace. It takes an extra instruction to create and initialize a <xref:System.Text.StringBuilder> object, and another instruction to convert its final value to a `String`, but you might recover this time because <xref:System.Text.StringBuilder> can perform faster.  \n  \n## See also\n\n- [Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)\n- [Types of String Manipulation Methods in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/types-of-string-manipulation-methods.md)\n- [Arithmetic Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)\n- [Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)\n- [Logical and Bitwise Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)\n","nodes":[{"pos":[4,408],"embed":true,"restype":"x-metadata","content":"title: \"Concatenation Operators in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"& operator [Visual Basic], concatenation\"\n  - \"concatenation operators [Visual Basic]\"\n  - \"operators [Visual Basic], concatenation\"\n  - \"Visual Basic code, operators\"\n  - \"+ operator [Visual Basic], concatenation\"\n  - \"concatenation operators [Visual Basic]\"\nms.assetid: e59908c3-89e0-41ae-933d-3e8826c16a04","nodes":[{"content":"Concatenation Operators in Visual Basic","nodes":[{"pos":[0,39],"content":"Concatenation Operators in Visual Basic","nodes":[{"content":"Concatenation Operators in Visual Basic","pos":[0,39]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[415,454],"content":"Concatenation Operators in Visual Basic","linkify":"Concatenation Operators in Visual Basic","nodes":[{"content":"Concatenation Operators in Visual Basic","pos":[0,39]}]},{"content":"Concatenation operators join multiple strings into a single string.","pos":[455,522]},{"content":"There are two concatenation operators, <ph id=\"ph1\">`+`</ph> and <ph id=\"ph2\">`&amp;`</ph>.","pos":[523,574],"source":" There are two concatenation operators, `+` and `&`."},{"content":"Both carry out the basic concatenation operation, as the following example shows.","pos":[575,656]},{"pos":[820,908],"content":"These operators can also concatenate <ph id=\"ph1\">`String`</ph> variables, as the following example shows.","source":"These operators can also concatenate `String` variables, as the following example shows."},{"pos":[1041,1092],"content":"Differences Between the Two Concatenation Operators","linkify":"Differences Between the Two Concatenation Operators","nodes":[{"content":"Differences Between the Two Concatenation Operators","pos":[0,51]}]},{"content":"The <bpt id=\"p1\">[</bpt>+ Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/addition-operator.md)</ept> has the primary purpose of adding two numbers.","pos":[1096,1235],"source":"The [+ Operator](../../../../visual-basic/language-reference/operators/addition-operator.md) has the primary purpose of adding two numbers."},{"content":"However, it can also concatenate numeric operands with string operands.","pos":[1236,1307]},{"content":"The <ph id=\"ph1\">`+`</ph> operator has a complex set of rules that determine whether to add, concatenate, signal a compiler error, or throw a run-time <ph id=\"ph2\">&lt;xref:System.InvalidCastException&gt;</ph> exception.","pos":[1308,1486],"source":" The `+` operator has a complex set of rules that determine whether to add, concatenate, signal a compiler error, or throw a run-time <xref:System.InvalidCastException> exception."},{"content":"The <bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/concatenation-operator.md)</ept> is defined only for <ph id=\"ph1\">`String`</ph> operands, and it always widens its operands to <ph id=\"ph2\">`String`</ph>, regardless of the setting of <ph id=\"ph3\">`Option Strict`</ph>.","pos":[1493,1722],"source":"The [& Operator](../../../../visual-basic/language-reference/operators/concatenation-operator.md) is defined only for `String` operands, and it always widens its operands to `String`, regardless of the setting of `Option Strict`."},{"content":"The <ph id=\"ph1\">`&amp;`</ph> operator is recommended for string concatenation because it is defined exclusively for strings and reduces your chances of generating an unintended conversion.","pos":[1723,1890],"source":" The `&` operator is recommended for string concatenation because it is defined exclusively for strings and reduces your chances of generating an unintended conversion."},{"pos":[1899,1936],"content":"Performance: String and StringBuilder","linkify":"Performance: String and StringBuilder","nodes":[{"content":"Performance: String and StringBuilder","pos":[0,37]}]},{"content":"If you do a significant number of manipulations on a string, such as concatenations, deletions, and replacements, your performance might profit from the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class in the <ph id=\"ph2\">&lt;xref:System.Text&gt;</ph> namespace.","pos":[1940,2168],"source":"If you do a significant number of manipulations on a string, such as concatenations, deletions, and replacements, your performance might profit from the <xref:System.Text.StringBuilder> class in the <xref:System.Text> namespace."},{"content":"It takes an extra instruction to create and initialize a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and another instruction to convert its final value to a <ph id=\"ph2\">`String`</ph>, but you might recover this time because <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> can perform faster.","pos":[2169,2425],"source":" It takes an extra instruction to create and initialize a <xref:System.Text.StringBuilder> object, and another instruction to convert its final value to a `String`, but you might recover this time because <xref:System.Text.StringBuilder> can perform faster."},{"pos":[2434,2442],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2446,2554],"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>","source":"[Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)"},{"pos":[2557,2721],"content":"<bpt id=\"p1\">[</bpt>Types of String Manipulation Methods in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/strings/types-of-string-manipulation-methods.md)</ept>","source":"[Types of String Manipulation Methods in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/types-of-string-manipulation-methods.md)"},{"pos":[2724,2874],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"},{"pos":[2877,3027],"content":"<bpt id=\"p1\">[</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept>","source":"[Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)"},{"pos":[3030,3198],"content":"<bpt id=\"p1\">[</bpt>Logical and Bitwise Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept>","source":"[Logical and Bitwise Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)"}]}