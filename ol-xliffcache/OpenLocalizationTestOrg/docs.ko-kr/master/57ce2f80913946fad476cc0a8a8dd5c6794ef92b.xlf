<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="servicemodel-metadata-utility-tool-svcutil-exe.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57ce2f80913946fad476cc0a8a8dd5c6794ef92b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\servicemodel-metadata-utility-tool-svcutil-exe.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85ca94359508cdf3ea4b5062e3d84ec3f8401dc3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">545ee9996495fef0a7d58e0eeaf0e96fa94b3366</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>ServiceModel Metadata Utility Tool (Svcutil.exe) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ServiceModel Metadata Utility Tool (Svcutil.exe)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The ServiceModel Metadata Utility tool is used to generate service model code from metadata documents and metadata documents from service model code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SvcUtil.exe</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The ServiceModel Metadata Utility Tool can be found at the Windows SDK installation location, specifically, C:\Program Files\Microsoft SDKs\Windows\v6.0\Bin</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Functionalities</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following table summarizes the various functionalities provided by this tool and the corresponding topic that discusses how it is used.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Task</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Topic</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Generates code from running services or static metadata documents.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generating a WCF Client from Service Metadata<ept id="p1">](../../../docs/framework/wcf/feature-details/generating-a-wcf-client-from-service-metadata.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Exports metadata documents from compiled code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use Svcutil.exe to Export Metadata from Compiled Service Code<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-use-svcutil-exe-to-export-metadata-from-compiled-service-code.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Validates compiled service code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use Svcutil.exe to Validate Compiled Service Code<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-use-svcutil-exe-to-validate-compiled-service-code.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Downloads metadata documents from running services.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use Svcutil.exe to Download Metadata Documents<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-use-svcutil-exe-to-download-metadata-documents.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Generates serialization code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Improve the Startup Time of WCF Client Applications using the XmlSerializer<ept id="p1">](../../../docs/framework/wcf/feature-details/startup-time-of-wcf-client-applications-using-the-xmlserializer.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Svcutil will overwrite existing files on a disk if the names supplied as parameters are identical.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This can include code files, configuration or metadata files.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To avoid this when generating code and configuration flies, use the <ph id="ph1">`/mergeConfig`</ph> switch.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`/r`</ph> and <ph id="ph2">`/ct`</ph> switches for referencing types are for generating data contracts.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These switches do not work when using XmlSerializer.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Timeout</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The tool has a 5 minute timeout when retrieving metadata.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This timeout only applies to retrieving metadata over the network.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It does not apply to any processing of that metadata.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Multi-targetting</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The tool does not support multi-targeting.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you want to generate a .NET 4 artifact from svcutil.exe, you have to use the svcutil.exe from the .NET 4 SDK.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To generate a .NET 3.5 artifact, use the executable from the .NET 3.5 SDK.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Accessing WSDL Documents</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you use Svcutil to access a WSDL document that has a reference to a security token service (STS), Svcutil makes a WS-MetadataExchange call to the STS.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, the service can expose its WSDL documents using either WS-MetadataExchange or HTTP GET.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Therefore, if the STS has only exposed the WSDL document using HTTP GET, a client written in <ph id="ph1">[!INCLUDE[vstecwinfx](../../../includes/vstecwinfx-md.md)]</ph> will fail.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For clients written in <ph id="ph1">[!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)]</ph>, Svcutil will attempt to use both WS-MetadataExchange and HTTP GET to obtain the STS WSDL.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Using SvcUtil.exe</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Common Usages</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following table shows some commonly used options for this tool.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>/directory:<ph id="ph1">\&lt;</ph>directory&gt;</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Directory to create files in.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Default: The current directory.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Short form: <ph id="ph1">`/d`</ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>/help</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Displays the command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Short form: <ph id="ph1">`/?`</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>/noLogo</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Suppress the copyright and banner message.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>/svcutilConfig:<ph id="ph1">\&lt;</ph>configFile&gt;</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Specifies a custom configuration file to use instead of the App.config file.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This can be used to register system.serviceModel extensions without altering the tool's configuration file.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>/target:<ph id="ph1">\&lt;</ph>output type&gt;</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifies the output to be generated by the tool.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Valid values are code, metadata or xmlSerializer.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Short form: <ph id="ph1">`/t`</ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Code Generation</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Svcutil.exe can generate code for service contracts, clients and data types from metadata documents.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>These metadata documents can be on a durable storage, or be retrieved online.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Online retrieval follows either the WS-Metadata Exchange protocol or the DISCO protocol (for details see the Metadata Download section).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can use the SvcUtil.exe tool to generate service and data contracts based on a predefined WSDL document.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Use the /serviceContract switch and specify a URL or file location where the WSDL document can be downloaded or found.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This will generate the service and data contracts defined in the WSDL document that can then be used to implement a complaint service .</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>How to: Retrieve Metadata and Implement a Compliant Service<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-retrieve-metadata-and-implement-a-compliant-service.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For a service with a BasicHttpContextbinding endpoint, Svcutil.exe generates a BasicHttpBinding with the <ph id="ph1">`allowCookies`</ph> attribute set to <ph id="ph2">`true`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The cookies are used for context on the server.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you would like to manage context on the client when the service uses cookies, you can manually modify the configuration to use a context binding.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Svcutil.exe generates the client based on the WSDL or policy file received from the service.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The user principal name (UPN) is generated by concatenating username, "@" and a fully-qualified domain name (FQDN).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>However, for users who registered on Active Directory, this format is not valid and the UPN generated by the tool causes a failure in Kerberos authentication with the error message "The logon attempt failed".</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To resolve this problem, you should manually fix the client file generated by this tool.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The path to an XML file that contains a WS-Addressing EndpointReference for a service endpoint that supports WS-Metadata Exchange.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information, see the Metadata Download section.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The path to a metadata document (wsdl or xsd) that contains the contract to import into code (.wsdl, .xsd, .wspolicy or .wsmex).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Svcutil follows imports and includes when you specify a remote URL for metadata.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>However, if you want to process metadata files on the local file system, you must specify all files in this argument.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In this way, you can use Svcutil in a build environment where you cannot have network dependencies.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can use wildcards (*.xsd, <ph id="ph1">\*</ph>.wsdl) for this argument.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The URL to a service endpoint that provides metadata or to a metadata document hosted online.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information on how these documents are retrieved, see the Metadata Download section.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>/async</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Generates both synchronous and asynchronous method signatures.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Default: generate only synchronous method signatures.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/a`</ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>/collectionType:<ph id="ph1">\&lt;</ph>type&gt;</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Generates both synchronous and asynchronous method signatures.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Default: generate only synchronous method signatures.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/a`</ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>/config:<ph id="ph1">\&lt;</ph>configFile&gt;</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Specifies the filename for the generated configuration file.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Default: output.config</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>/dataContractOnly</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Generates code for data contract types only.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Service Contract types are not generated.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You should only specify local metadata files for this option.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/dconly`</ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>/enableDataBinding</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface on all Data Contract types to enable data binding.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/edb`</ph></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>/excludeType:<ph id="ph1">\&lt;</ph>type&gt;</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Specifies a fully-qualified or assembly-qualified type name to be excluded from referenced contract types.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When using this switch together with <ph id="ph1">`/r`</ph> from separate DLLs, the full name of the XSD class is referenced.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/et`</ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>/importXmlTypes</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Configures the Data Contract serializer to import non-Data Contract types as IXmlSerializable types.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>/internal</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Generates classes that are marked as internal.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Default: generate public classes only.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/i`</ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>/language:<ph id="ph1">\&lt;</ph>language&gt;</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Specifies the programming language to use for code generation.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You should provide either a language name registered in the Machine.config file, or the fully-qualified name of a class that inherits from <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Values: c#, cs, csharp, vb, visualbasic, c++, cpp</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Default: csharp</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Short form: <ph id="ph1">`/l`</ph> <bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  The switch only supports C++ for the code provider that ships with Visual Studio 2005 SP1.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>/mergeConfig</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Merges the generated configuration into an existing file, instead of overwriting the existing file.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>/messageContract</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Generates Message Contract types.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/mc`</ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>/namespace:<ph id="ph1">\&lt;</ph>string,string&gt;</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Specifies a mapping from a WSDL or XML Schema targetNamespace to a CLR namespace.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Using '<ph id="ph1">\*</ph>' for the targetNamespace maps all targetNamespaces without an explicit mapping to that CLR namespace.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To make sure that the message contract name does not collide with operation name, you should either qualify the type reference with <ph id="ph1">`::`</ph>, or make sure the names are unique.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Default: Derived from the target namespace of the schema document for Data Contracts.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The default namespace is used for all other generated types.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/n`</ph> <bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  When generating types to use with XmlSerializer, only a single namespace mapping is supported.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>All generated types will either be in the default namespace or the namespace specified by '*'.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>/noConfig</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Do not generate configuration files.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>/noStdLib</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Do not reference standard libraries.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Default: Mscorlib.dll and System.servicemodel.dll are referenced.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>/out:<ph id="ph1">\&lt;</ph>file&gt;</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Specifies the file name for the generated code.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Default: Derived from the WSDL definition name, WSDL service name or target namespace of one of the schemas.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Short form: <ph id="ph1">`/o`</ph></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>/reference:<ph id="ph1">\&lt;</ph>file path&gt;</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>References types in the specified assembly.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>When generating clients, use this option to specify assemblies that might contain types that represent the metadata being imported.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You cannot specify message contracts and <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> types using this switch.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> referenced, this type is used instead of generating a new type.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If the application is written using <ph id="ph1">[!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)]</ph>, SvcUtil.exe references <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> automatically.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/r`</ph></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>/serializable</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Generates classes marked with the Serializable Attribute.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/s`</ph></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>/serviceContract</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Generate code for service contracts only.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Client class and configuration will not be generated</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/sc`</ph></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>/serializer:Auto</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Generates classes marked with the Serializable Attribute.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/s`</ph></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>/serializer:DataContractSerializer</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Generates data types that use the Data Contract Serializer for serialization and deserialization.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/ser:DataContractSerializer`</ph></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>/serializer:XmlSerializer</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Generates data types that use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> for serialization and deserialization.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/ser:XmlSerializer`</ph></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>/targetClientVersion</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specify which version of <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> the application is targeting.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Valid values are <ph id="ph1">`Version30`</ph> and <ph id="ph2">`Version35`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`Version30`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/tcv`</ph></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Version30`</ph>: Use <ph id="ph2">`/tcv:Version30`</ph> if you are generating code for clients that use <ph id="ph3">[!INCLUDE[vstecwinfx](../../../includes/vstecwinfx-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Version35`</ph>: Use <ph id="ph2">`/tcv:Version35`</ph> if you are generating code for clients that use <ph id="ph3">[!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">`/tcv:Version35`</ph> with the <ph id="ph2">`/async`</ph> switch, both event-based and callback/delegate-based asynchronous methods are generated.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>In addition, support for LINQ-enabled DataSets and <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> is enabled.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>/wrapped</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Controls whether special-casing is used for document-literal styled documents with wrapped parameters.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>/wrapped<ept id="p1">**</ept> switch with the <bpt id="p2">[</bpt>Service Model Metadata Utility Tool (Svcutil.exe)<ept id="p2">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool to specify normal casing.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>When the service binding is one of the system-provided bindings (see <bpt id="p1">[</bpt>System-Provided Bindings<ept id="p1">](../../../docs/framework/wcf/system-provided-bindings.md)</ept>), and the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> property is set to either <ph id="ph2">`None`</ph> or <ph id="ph3">`Sign`</ph>, Svcutil generates a configuration file using the <bpt id="p2">[</bpt><ph id="ph4">\&lt;</ph>customBinding&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md)</ept> element instead of the expected system-provided element.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For example, if the service uses the <ph id="ph1">`&lt;wsHttpBinding&gt;`</ph> element with the <ph id="ph2">`ProtectionLevel`</ph> set to <ph id="ph3">`Sign`</ph>, the generated configuration has <ph id="ph4">`&lt;customBinding&gt;`</ph> in the bindings section instead of <ph id="ph5">`&lt;wsHttpBinding&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>For more information about the protection level, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](../../../docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Metadata Export</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Svcutil.exe can export metadata for services, contracts and data types in compiled assemblies.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>To export metadata for a service, you must use the <ph id="ph1">`/serviceName`</ph> option to specify the service you would like to export.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>To export all data contract types within an assembly, you should use the <ph id="ph1">`/dataContractOnly`</ph> option.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>By default, metadata is exported for all service contracts in the input assemblies.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Specifies the path to an assembly that contains services, contracts or data contract types to be exported.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Standard command line wildcards can be used to provide multiple files as input.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>/serviceName:<ph id="ph1">\&lt;</ph>serviceConfigName&gt;</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Specifies the configuration name of a service to be exported.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>If this option is used, an executable assembly with an associated configuration file must be passed as input.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Svcutil.exe searches all associated configuration files for the service configuration.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If the configuration files contain any extension types, the assemblies that contain these types must either be in the GAC or explicitly provided using the <ph id="ph1">`/reference`</ph> option.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>/reference:<ph id="ph1">\&lt;</ph>file path&gt;</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Adds the specified assembly to the set of assemblies used for resolving type references.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If you are exporting or validating a service that uses 3rd-party extensions (Behaviors, Bindings and BindingElements) registered in configuration, use this option to locate extension assemblies that are not in the GAC.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/r`</ph></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>/dataContractOnly</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Operates on data contract types only.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Service Contracts are not processed.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>You should only specify local metadata files for this option.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/dconly`</ph></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>/excludeType:<ph id="ph1">\&lt;</ph>type&gt;</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Specifies the fully-qualified or assembly-qualified name of a type to be excluded from export.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This option can be used when exporting metadata for a service, or a set of service contracts to exclude types from being exported.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This option cannot be used together with the <ph id="ph1">`/dconly`</ph> option.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>When you have a single assembly containing multiple services, and each uses separate classes with the same XSD name, you should specify the service name instead of the XSD class name for this switch.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>XSD or data contract types are not supported.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/et`</ph></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Service Validation</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Validation can be used to detect errors in service implementations without hosting the service.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>You must use the <ph id="ph1">`/serviceName`</ph> option to indicate the service you want to validate.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Specifies the path to an assembly that contains service types to be validated.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The assembly must have an associated configuration file to provide service configuration.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Standard command-line wildcards can be used to provide multiple assemblies.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>/validate</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Validates a service implementation specified by the <ph id="ph1">`/serviceName`</ph> option.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If this option is used, an executable assembly with an associated configuration file must be passed as input.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/v`</ph></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>/serviceName:<ph id="ph1">\&lt;</ph>serviceConfigName&gt;</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Specifies the configuration name of a service to be validated.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Svcutil.exe searches all associated configuration files of all input assemblies for the service configuration.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>If the configuration files contain any extension types, the assemblies that contains these types must either be in the GAC or explicitly provided using the <ph id="ph1">`/reference`</ph> option.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>/reference:<ph id="ph1">\&lt;</ph>file path&gt;</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Adds the specified assembly to the set of assemblies used for resolving type references.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>If you are exporting or validating a service that uses 3rd-party extensions (Behaviors, Bindings and BindingElements) registered in configuration, use this option to locate extension assemblies that are not in the GAC.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/r`</ph></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>/dataContractOnly</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Operates on data contract types only.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Service Contracts are not processed.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>You should only specify local metadata files for this option.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/dconly`</ph></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>/excludeType:<ph id="ph1">\&lt;</ph>type&gt;</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Specifies the fully-qualified or assembly-qualified name of a type to be excluded from validation.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/et`</ph></source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Metadata Download</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Svcutil.exe can be used to download metadata from running services, and save the metadata to local files.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>To download metadata, you must specify the <ph id="ph1">`/t:metadata`</ph> option.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Otherwise, client code is generated.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>For HTTP and HTTPS URL schemes, Svcutil.exe attempts to retrieve metadata using WS-Metadata Exchange and DISCO.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For all other URL schemes, Svcutil.exe only uses WS-Metadata Exchange.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Svcutil issues the following metadata requests simultaneously to retrieve metadata.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>MEX (WS-Transfer) request to the supplied address</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>MEX request to the supplied address with /mex appended</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>DISCO request (using the DiscoveryClientProtocol from ASMX) to the supplied address.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>By default, Svcutil.exe uses the bindings defined in the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeBindings&gt;</ph> class to make MEX requests.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>To configure the binding used for WS-Metadata Exchange, you must define a client endpoint in configuration that uses the IMetadataExchange contract.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>This can be defined either in the configuration file of Svcutil.exe, or in another configuration file specified using the <ph id="ph1">`/svcutilConfig`</ph> option.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The URL to a service endpoint that provides metadata or to a metadata document hosted online.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The path to an XML file that contains a WS-Addressing EndpointReference for a service endpoint that supports WS-Metadata Exchange.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>XmlSerializer Type Generation</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Services and client applications that use data types that are serializable using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> generate and compile serialization code for those data types at runtime, which can result in slow start-up performance.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Pre-generated serialization code can only be used in client applications and not in services.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Svcutil.exe can generate the necessary C# serialization code from the compiled assemblies for the application, thus improving start-up performance for these applications.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Improve the Startup Time of WCF Client Applications using the XmlSerializer<ept id="p1">](../../../docs/framework/wcf/feature-details/startup-time-of-wcf-client-applications-using-the-xmlserializer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Svcutil.exe only generates code for types used by Service Contracts found in the input assemblies.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Specifies the path to an assembly that contains service contract types.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Serialization types are generated for all Xml Serializable types in each contract.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>/reference:<ph id="ph1">\&lt;</ph>file path&gt;</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Adds the specified assembly to the set of assemblies used for resolving type references.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/r`</ph></source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>/excludeType:<ph id="ph1">\&lt;</ph>type&gt;</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Specifies the fully-qualified or assembly-qualified name of a type to be excluded from export or validation.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/et`</ph></source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>/out:<ph id="ph1">\&lt;</ph>file&gt;</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Specifies the filename for the generated code.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>This option is ignored when multiple assemblies are passed as input to the tool.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Default: Derived from the assembly name.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Short Form: <ph id="ph1">`/o`</ph></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>/UseSerializerForFaults</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Specifies that the <ph id="ph1">&lt;!--zz &lt;xref:System.Xml.XmlSerializer&gt; --&gt;</ph> <ph id="ph2">`xref:System.Xml.XmlSerializer `</ph> should be used for reading and writing faults, instead of the default <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The following command generates client code from a running service or online metadata documents.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The following command generates client code from local metadata documents.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The following command generates data contract types in Visual Basic from local schema documents.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The following command downloads metadata documents from running services.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The following command generates metadata documents for service contracts and associated types in an assembly.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The following command generates metadata documents for a service, and all associated service contracts and data types in an assembly.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The following command generates metadata documents for data types in an assembly.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The following command verifies service hosting.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The following command generates serialization types for <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> types used by any service contracts in the assembly.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Maximum Nametable Character Count Quota</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>When using svcutil to generate metadata for a service, you may get the following message:</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Error: Cannot obtain Metadata from http://localhost:8000/somesservice/mex The maximum nametable character count quota (16384) has been exceeded while reading XML data.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The nametable is a data structure used to store strings encountered during XML processing - long XML documents with non-repeating element names, attribute names and attribute values may trigger this quota.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>This quota may be increased by changing the MaxNameTableCharCount property on the XmlDictionaryReaderQuotas object used when creating the XML reader.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>This error can be caused by a service that returns a large WSDL file when you request its metadata.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The problem is that the character quota for the svcutil.exe tool is exceeded.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>This value is set to help prevent denial of service (dos) attacks.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>You can increase this quota by specifying the following config file for svcutil.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The following config file shows how to set the reader quotas for svcutil</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Create a new file called svcutil.exe.config and copy the XML example code into it.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Then place the file in the same directory as svcutil.exe.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The next time svcutil.exe is run it will pick up the new settings.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Security Concerns</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>You should use the appropriate Access Control List (ACL) to protect Svcutil.exe's installation folder, Svcutil.config, and files being pointed to by <ph id="ph1">`/svcutilConfig`</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>This can prevent malicious extensions from being registered and run.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>In addition, to minimize the chance that security be compromised, you should not add untrusted extensions to be part of the system, or use untrusted code providers with Svcutil.exe.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Finally, you should not use the tool in the middle-tier of your application, as it may cause denial-of-service to the current process.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Client<ept id="p1">](../../../docs/framework/wcf/how-to-create-a-wcf-client.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>