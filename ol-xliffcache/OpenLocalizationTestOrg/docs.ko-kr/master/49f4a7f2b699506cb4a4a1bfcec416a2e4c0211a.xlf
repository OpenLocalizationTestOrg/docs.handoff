<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49f4a7f2b699506cb4a4a1bfcec416a2e4c0211a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\asynchronous-programming.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26c1b52961bbb9621aed1fe0d3161d30347ccf98</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1a0867b250cd149af51352e3ae59e7872a2fab9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic discusses support for asynchronous programming in the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id="ph2">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> (SqlClient) including enhancements made to support asynchronous programming functionality that was introduced in <ph id="ph3">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Legacy Asynchronous Programming</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Prior to <ph id="ph1">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>, asynchronous programming with SqlClient was done with the following methods and the <ph id="ph2">`Asynchronous Processing=true`</ph> connection property:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This functionality remains in SqlClient in <ph id="ph1">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Beginning in the <ph id="ph1">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>, these methods no longer require <ph id="ph2">`Asynchronous Processing=true`</ph> in the connection string.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming Features Added in <ph id="ph1">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The new asynchronous programming feature provides a simple technique to make code asynchronous.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about the asynchronous programming feature that was introduced in <ph id="ph1">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>, see:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio Asynchronous Programming<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=220765)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using SqlDataReader’s new async methods in .Net 4.5 (Part 1)<ept id="p1">](http://blogs.msdn.com/b/adonet/archive/2012/04/20/using-sqldatareader-s-new-async-methods-in-net-4-5-beta.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using SqlDataReader’s new async methods in .Net 4.5 (Part 2)<ept id="p1">](http://blogs.msdn.com/b/adonet/archive/2012/07/15/using-sqldatareader-s-new-async-methods-in-net-4-5-beta-part-2-examples.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When your user interface is unresponsive or your server does not scale, it is likely that you need your code to be more asynchronous.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Writing asynchronous code has traditionally involved installing a callback (also called continuation) to express the logic that occurs after the asynchronous operation finishes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This complicates the structure of asynchronous code as compared with synchronous code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can now call into asynchronous methods without using callbacks, and without splitting your code across multiple methods or lambda expressions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`async`</ph> modifier specifies that a method is asynchronous.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When calling an <ph id="ph1">`async`</ph> method, a task is returned.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When calling an <ph id="ph1">`await`</ph> statement against the task, the current method exits immediately.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the task finishes, execution resumes in the same method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Asynchronous calls are not supported if an application also uses the <ph id="ph1">`Context Connection`</ph> connection string keyword.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Calling an <ph id="ph1">`async`</ph> method does not allocate any additional threads.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It may use the existing I/O completion thread briefly at the end.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following methods were added in <ph id="ph1">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph> to support asynchronous programming:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Other asynchronous members were added to support <bpt id="p1">[</bpt>SqlClient Streaming Support<ept id="p1">](../../../../docs/framework/data/adonet/sqlclient-streaming-support.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Synchronous to Asynchronous Connection Open</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can upgrade an existing application to use the new asynchronous feature.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, assume an application has a synchronous connection algorithm and blocks the UI thread every time it connects to the database and, once connected, the application calls a stored procedure that signals other users of the one who just signed in.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When converted to use the new asynchronous functionality, the program would look like:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Adding the New Asynchronous Feature in an Existing Application (Mixing Old and New Patterns)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It is also possible to add new asynchronous capability (SqlConnection::OpenAsync) without changing the existing asynchronous logic.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, if an application currently uses:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can begin to use the new asynchronous pattern without substantially changing the existing algorithm.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Using the Base Provider Model and the New Asynchronous Feature</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You may need to create a tool that is able to connect to different databases and execute queries.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use the base provider model and the new asynchronous feature.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The Microsoft Distributed Transaction Controller (MSDTC) must be enabled on the server to use distributed transactions.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For information on how to enable MSDTC, see <bpt id="p1">[</bpt>How to Enable MSDTC on a Web Server<ept id="p1">](http://msdn.microsoft.com/library/dd327979.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Using SQL Transactions and the New Asynchronous Feature</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Using SQL Transactions and the New Asynchronous Feature</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In an enterprise application, you may need to add distributed transactions in some scenarios, to enable transactions between multiple database servers.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use the System.Transactions namespace and enlist a distributed transaction, as follows:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Cancelling an Asynchronous Operation</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can cancel an asynchronous request by using the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Asynchronous Operations with SqlBulkCopy</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Asynchronous capabilities were also added to <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy?displayProperty=fullName&gt;</ph> with <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Asynchronously Using Multiple Commands with MARS</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The example opens a single connection to the <bpt id="p1">**</bpt>AdventureWorks<ept id="p1">**</ept> database.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> object, a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> is created.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>As the reader is used, a second <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> is opened, using data from the first <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> as input to the WHERE clause for the second reader.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example uses the sample <bpt id="p1">**</bpt>AdventureWorks<ept id="p1">**</ept> database included with <ph id="ph1">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The connection string provided in the sample code assumes that the database is installed and available on the local computer.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Modify the connection string as necessary for your environment.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Asynchronously Reading and Updating Data with MARS</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>MARS allows a connection to be used for both read operations and data manipulation language (DML) operations with more than one pending operation.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This feature eliminates the need for an application to deal with connection-busy errors.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In addition, MARS can replace the user of server-side cursors, which generally consume more resources.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Finally, because multiple operations can operate on a single connection, they can share the same transaction context, eliminating the need to use <bpt id="p1">**</bpt>sp_getbindtoken<ept id="p1">**</ept> and <bpt id="p2">**</bpt>sp_bindsession<ept id="p2">**</ept> system stored procedures.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following Console application demonstrates how to use two <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> objects with three <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> objects and a single <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> object with MARS enabled.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The first command object retrieves a list of vendors whose credit rating is 5.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second command object uses the vendor ID provided from a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> to load the second <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> with all of the products for the particular vendor.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Each product record is visited by the second <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A calculation is performed to determine what the new <bpt id="p1">**</bpt>OnOrderQty<ept id="p1">**</ept> should be.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The third command object is then used to update the <bpt id="p1">**</bpt>ProductVendor<ept id="p1">**</ept> table with the new value.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This entire process takes place within a single transaction, which is rolled back at the end.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example uses the sample <bpt id="p1">**</bpt>AdventureWorks<ept id="p1">**</ept> database included with <ph id="ph1">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The connection string provided in the sample code assumes that the database is installed and available on the local computer.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Modify the connection string as necessary for your environment.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving and Modifying Data in ADO.NET<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>