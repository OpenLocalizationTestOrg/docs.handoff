<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="specifying-fully-qualified-type-names.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32b68078306c2cf7ffe07870de9c4e3150adafe9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\specifying-fully-qualified-type-names.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">31735fa5765e0ac11b2d969f6d7bce345caa55a6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46e66d6caa3119fcb78bace3ac558ce3254facb8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Specifying Fully Qualified Type Names</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Specifying fully qualified type names</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You must specify type names to have valid input to various reflection operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A fully qualified type name consists of an assembly name specification, a namespace specification, and a type name.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Type name specifications are used by methods such as <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.ModuleBuilder.GetType%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Grammar for type names</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The grammar defines the syntax of formal languages.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following table lists lexical rules that describe how to recognize a valid input.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Terminals (those elements that are not further reducible) are shown in all uppercase letters.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Nonterminals (those elements that are further reducible) are shown in mixed-case or singly quoted strings, but the single quote (') is not a part of the syntax itself.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The pipe character (&amp;#124;) denotes rules that have subrules.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Specifying special characters</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In a type name, IDENTIFIER is any valid name determined by the rules of a language.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use the backslash (<ph id="ph1">\\</ph>) as an escape character to separate the following tokens when used as part of IDENTIFIER.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Token</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\\</ph>,</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Assembly separator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Nested type separator.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Reference type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Pointer type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\\</ph>[</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Array dimension delimiter.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\\</ph>]</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Array dimension delimiter.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\\</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use the backslash before a period only if the period is used in an array specification.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Periods in NamespaceSpec do not take the backslash.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\\</ph><ph id="ph2">\|</ph>Backslash when needed as a string literal.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Note that in all TypeSpec components except AssemblyNameSpec, spaces are relevant.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the AssemblyNameSpec, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Reflection classes, such as <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph>, return the mangled name so that the returned name can be used in a call to <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph>, as in <ph id="ph3">`MyType.GetType(myType.FullName)`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, the fully qualified name for a type might be <ph id="ph1">`Ozzy.OutBack.Kangaroo+Wallaby,MyAssembly`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the namespace were <ph id="ph1">`Ozzy.Out+Back`</ph>, then the plus sign must be preceded by a backslash.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Otherwise, the parser would interpret it as a nesting separator.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Reflection emits this string as <ph id="ph1">`Ozzy.Out\+Back.Kangaroo+Wallaby,MyAssembly`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Specifying assembly names</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The minimum information required in an assembly name specification is the textual name (IDENTIFIER) of the assembly.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can follow the IDENTIFIER by a comma-separated list of property/value pairs as described in the following table.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>IDENTIFIER naming should follow the rules for file naming.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The IDENTIFIER is case-insensitive.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Property name</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Allowable values</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Version<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Assembly version number</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Major.Minor.Build.Revision<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>Major<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Minor<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Build<ept id="p4">*</ept>, and <bpt id="p5">*</bpt>Revision<ept id="p5">*</ept> are integers between 0 and 65535 inclusive.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PublicKey<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Full public key</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>String value of full public key in hexadecimal format.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Specify a null reference (<bpt id="p1">**</bpt>Nothing<ept id="p1">**</ept> in Visual Basic) to explicitly indicate a private assembly.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PublicKeyToken<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Public key token (8-byte hash of the full public key)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>String value of public key token in hexadecimal format.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specify a null reference (<bpt id="p1">**</bpt>Nothing<ept id="p1">**</ept> in Visual Basic) to explicitly indicate a private assembly.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Culture<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Assembly culture</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Culture of the assembly in RFC-1766 format, or "neutral" for language-independent (nonsatellite) assemblies.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Custom<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Custom binary large object (BLOB).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is currently used only in assemblies generated by the <bpt id="p1">[</bpt>Native Image Generator (Ngen)<ept id="p1">](../../../docs/framework/tools/ngen-exe-native-image-generator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Custom string used by the Native Image Generator tool to notify the assembly cache that the assembly being installed is a native image, and is therefore to be installed in the native image cache.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Also called a zap string.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example shows an <bpt id="p1">**</bpt>AssemblyName<ept id="p1">**</ept> for a simply named assembly with default culture.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example shows a fully specified reference for a strongly named assembly with culture "en".</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following examples each show a partially specified <bpt id="p1">**</bpt>AssemblyName<ept id="p1">**</ept>, which can be satisfied by either a strong or a simply named assembly.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following examples each show a partially specified <bpt id="p1">**</bpt>AssemblyName<ept id="p1">**</ept>, which must be satisfied by a simply named assembly.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following examples each show a partially specified <bpt id="p1">**</bpt>AssemblyName<ept id="p1">**</ept>, which must be satisfied by a strongly named assembly.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Specifying generic types</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>SimpleTypeSpec<ph id="ph1">\`</ph>NUMBER represents an open generic type with from 1 to <bpt id="p1">*</bpt>n<ept id="p1">*</ept> generic type parameters.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, to get reference to the open generic type List<ph id="ph1">\&lt;</ph>T&gt; or the closed generic type List<ph id="ph2">\&lt;</ph>String&gt;, use <ph id="ph3">``Type.GetType("System.Collections.Generic.List`1")``</ph> To get a reference to the generic type Dictionary<ph id="ph4">\&lt;</ph>TKey,TValue&gt;, use <ph id="ph5">``Type.GetType("System.Collections.Generic.Dictionary`2")``</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Specifying pointers</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>SimpleTypeSpec* represents an unmanaged pointer.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, to get a pointer to type MyType, use <ph id="ph1">`Type.GetType("MyType*")`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To get a pointer to a pointer to type MyType, use <ph id="ph1">`Type.GetType("MyType**")`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Specifying references</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>SimpleTypeSpec &amp; represents a managed pointer or reference.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, to get a reference to type MyType, use <ph id="ph1">`Type.GetType("MyType &amp;")`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Note that unlike pointers, references are limited to one level.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Specifying arrays</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the BNF Grammar, ReflectionEmitDimension only applies to incomplete type definitions retrieved using <ph id="ph1">&lt;xref:System.Reflection.Emit.ModuleBuilder.GetType%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Incomplete type definitions are <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> objects constructed using <ph id="ph2">&lt;xref:System.Reflection.Emit?displayProperty=nameWithType&gt;</ph> but on which <ph id="ph3">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> has not been called.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>ReflectionDimension can be used to retrieve any type definition that has been completed, that is, a type that has been loaded.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Arrays are accessed in reflection by specifying the rank of the array:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Type.GetType("MyArray[]")`</ph> gets a single-dimension array with 0 lower bound.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Type.GetType("MyArray[*]")`</ph> gets a single-dimension array with unknown lower bound.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Type.GetType("MyArray[][]")`</ph> gets a two-dimensional array's array.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Type.GetType("MyArray[*,*]")`</ph> and <ph id="ph2">`Type.GetType("MyArray[,]")`</ph> gets a rectangular two-dimensional array with unknown lower bounds.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Note that from a runtime point of view, <ph id="ph1">`MyArray[] != MyArray[*]`</ph>, but for multidimensional arrays, the two notations are equivalent.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>That is, <ph id="ph1">`Type.GetType("MyArray [,]") == Type.GetType("MyArray[*,*]")`</ph> evaluates to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>ModuleBuilder.GetType<ept id="p1">**</ept>, <ph id="ph1">`MyArray[0..5]`</ph> indicates a single-dimension array with size 6, lower bound 0.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyArray[4…]`</ph> indicates a single-dimension array of unknown size and lower bound 4.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Viewing Type Information<ept id="p1">](../../../docs/framework/reflection-and-codedom/viewing-type-information.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>