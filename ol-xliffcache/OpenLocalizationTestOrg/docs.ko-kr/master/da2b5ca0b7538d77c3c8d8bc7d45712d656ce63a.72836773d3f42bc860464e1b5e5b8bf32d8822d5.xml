{"content":"---\ntitle: \"<<= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.<<=\"\nhelpviewer_keywords: \n  - \"operator <<=\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"<<= operator [Visual Basic]\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"operator<<=\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 8ad26613-faff-4e2f-89ee-63feee33bfda\n---\n# \\<\\<= Operator (Visual Basic)\nPerforms an arithmetic left shift on the value of a variable or property and assigns the result back to the variable or property.  \n  \n## Syntax  \n  \n```  \nvariableorproperty <<= amount  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Variable or property of an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`).  \n  \n `amount`  \n Required. Numeric expression of a data type that widens to `Integer`.  \n  \n## Remarks  \n The element on the left side of the `<<=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `<<=` operator first performs an arithmetic left shift on the value of the variable or property. The operator then assigns the result of that operation back to that variable or property.  \n  \n Arithmetic shifts are not circular, which means the bits shifted off one end of the result are not reintroduced at the other end. In an arithmetic left shift, the bits shifted beyond the range of the result data type are discarded, and the bit positions vacated on the right are set to zero.  \n  \n## Overloading  \n The [<< Operator](../../../visual-basic/language-reference/operators/left-shift-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `<<` operator affects the behavior of the `<<=` operator. If your code uses `<<=` on a class or structure that overloads `<<`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `<<=` operator to shift the bit pattern of an `Integer` variable left by the specified amount and assign the result to the variable.  \n  \n [!code-vb[VbVbalrOperators#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#13)]  \n  \n## See also\n\n- [<< Operator](../../../visual-basic/language-reference/operators/left-shift-operator.md)\n- [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)\n- [Bit Shift Operators](../../../visual-basic/language-reference/operators/bit-shift-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n","nodes":[{"pos":[4,387],"embed":true,"restype":"x-metadata","content":"title: \"<<= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.<<=\"\nhelpviewer_keywords: \n  - \"operator <<=\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"<<= operator [Visual Basic]\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"operator<<=\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 8ad26613-faff-4e2f-89ee-63feee33bfda","nodes":[{"content":"<<= Operator (Visual Basic)","nodes":[{"pos":[0,27],"content":"<<= Operator (Visual Basic)","nodes":[{"content":"&lt;&lt;= Operator (Visual Basic)","pos":[0,27],"source":"<<= Operator (Visual Basic)"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[394,423],"content":"\\<\\<= Operator (Visual Basic)","linkify":"\\<\\<= Operator (Visual Basic)","nodes":[{"content":"<ph id=\"ph1\">\\&lt;</ph><ph id=\"ph2\">\\&lt;</ph>= Operator (Visual Basic)","pos":[0,29],"source":"\\<\\<= Operator (Visual Basic)"}]},{"content":"Performs an arithmetic left shift on the value of a variable or property and assigns the result back to the variable or property.","pos":[424,553]},{"pos":[562,568],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[624,629],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[657,666]},{"content":"Variable or property of an integral type (<ph id=\"ph1\">`SByte`</ph>, <ph id=\"ph2\">`Byte`</ph>, <ph id=\"ph3\">`Short`</ph>, <ph id=\"ph4\">`UShort`</ph>, <ph id=\"ph5\">`Integer`</ph>, <ph id=\"ph6\">`UInteger`</ph>, <ph id=\"ph7\">`Long`</ph>, or <ph id=\"ph8\">`ULong`</ph>).","pos":[667,788],"source":" Variable or property of an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)."},{"content":"Required.","pos":[807,816]},{"content":"Numeric expression of a data type that widens to <ph id=\"ph1\">`Integer`</ph>.","pos":[817,876],"source":" Numeric expression of a data type that widens to `Integer`."},{"pos":[885,892],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`&lt;&lt;=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[896,1018],"source":"The element on the left side of the `<<=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[1019,1129],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`&lt;&lt;=`</ph> operator first performs an arithmetic left shift on the value of the variable or property.","pos":[1136,1236],"source":"The `<<=` operator first performs an arithmetic left shift on the value of the variable or property."},{"content":"The operator then assigns the result of that operation back to that variable or property.","pos":[1237,1326]},{"content":"Arithmetic shifts are not circular, which means the bits shifted off one end of the result are not reintroduced at the other end.","pos":[1333,1462]},{"content":"In an arithmetic left shift, the bits shifted beyond the range of the result data type are discarded, and the bit positions vacated on the right are set to zero.","pos":[1463,1624]},{"pos":[1633,1644],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>&lt;&lt; Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/left-shift-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1648,1882],"source":"The [<< Operator](../../../visual-basic/language-reference/operators/left-shift-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`&lt;&lt;`</ph> operator affects the behavior of the <ph id=\"ph2\">`&lt;&lt;=`</ph> operator.","pos":[1883,1956],"source":" Overloading the `<<` operator affects the behavior of the `<<=` operator."},{"content":"If your code uses <ph id=\"ph1\">`&lt;&lt;=`</ph> on a class or structure that overloads <ph id=\"ph2\">`&lt;&lt;`</ph>, be sure you understand its redefined behavior.","pos":[1957,2072],"source":" If your code uses `<<=` on a class or structure that overloads `<<`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[2073,2214],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[2223,2230],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2234,2397],"content":"The following example uses the <ph id=\"ph1\">`&lt;&lt;=`</ph> operator to shift the bit pattern of an <ph id=\"ph2\">`Integer`</ph> variable left by the specified amount and assign the result to the variable.","source":"The following example uses the `<<=` operator to shift the bit pattern of an `Integer` variable left by the specified amount and assign the result to the variable."},{"pos":[2530,2538],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2542,2630],"content":"<bpt id=\"p1\">[</bpt>&lt;&lt; Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/left-shift-operator.md)</ept>","source":"[<< Operator](../../../visual-basic/language-reference/operators/left-shift-operator.md)"},{"pos":[2633,2731],"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>","source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)"},{"pos":[2734,2830],"content":"<bpt id=\"p1\">[</bpt>Bit Shift Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/bit-shift-operators.md)</ept>","source":"[Bit Shift Operators](../../../visual-basic/language-reference/operators/bit-shift-operators.md)"},{"pos":[2833,2945],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[2948,3072],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[3075,3160],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}