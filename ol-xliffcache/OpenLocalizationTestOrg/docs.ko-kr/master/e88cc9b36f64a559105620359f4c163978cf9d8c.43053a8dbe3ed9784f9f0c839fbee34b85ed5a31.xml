{"content":"---\ntitle: \"Constructors - C# Programming Guide\"\nms.custom: seodec18\nms.date: 05/05/2017\nhelpviewer_keywords: \n  - \"constructors [C#]\"\n  - \"classes [C#], constructors\"\n  - \"C# language, constructors\"\nms.assetid: df2e2e9d-7998-418b-8e7d-890c17ff6c95\n---\n# Constructors (C# Programming Guide)\nWhenever a [class](../../../csharp/language-reference/keywords/class.md) or [struct](../../../csharp/language-reference/keywords/struct.md) is created, its constructor is called. A class or struct may have multiple constructors that take different arguments. Constructors enable the programmer to set default values, limit instantiation, and write code that is flexible and easy to read. For more information and examples, see [Using Constructors](../../../csharp/programming-guide/classes-and-structs/using-constructors.md) and [Instance Constructors](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md).  \n\n## Default constructors\n  \nIf you don't provide a constructor for your class, C# creates one by default that instantiates the object and sets member variables to the default values as listed in the [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md). If you don't provide a constructor for your struct, C# relies on an *implicit default constructor* to automatically initialize each field of a value type to its default value as listed in the [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md). For more information and examples, see [Instance Constructors](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md).  \n\n## Constructor syntax\n\nA constructor is a method whose name is the same as the name of its type. Its method signature includes only the method name and its parameter list; it does not include a return type. The following example shows the constructor for a class named `Person`.\n\n[!code-csharp[constructors](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/constructors1.cs#1)]  \n\nIf a constructor can be implemented as a single statement, you can use an [expression body definition](../statements-expressions-operators/expression-bodied-members.md). The following example defines a `Location` class whose constructor has a single string parameter named *name*. The expression body definition assigns the argument to the `locationName` field.\n\n[!code-csharp[expression-bodied-constructor](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-ctor.cs#1)]  \n\n## Static constructors\n\nThe previous examples have all shown instance constructors, which create a new object. A class or struct can also have a static constructor, which initializes static members of the type.  Static constructors are parameterless. If you don't provide a static constructor to initialize static fields, the C# compiler will supply a default static constructor that initializes static fields to their default value as listed in the [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md). \n\nThe following example uses a static constructor to initialize a static field.\n\n[!code-csharp[constructors](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/constructors1.cs#2)]  \n\nYou can also define a static constructor with an expression body definition, as the following example shows. \n\n[!code-csharp[constructors](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/constructors1.cs#3)]  \n\nFor more information and examples, see [Static Constructors](../../../csharp/programming-guide/classes-and-structs/static-constructors.md).  \n  \n## In This Section  \n [Using Constructors](../../../csharp/programming-guide/classes-and-structs/using-constructors.md)  \n  \n [Instance Constructors](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)  \n  \n [Private Constructors](../../../csharp/programming-guide/classes-and-structs/private-constructors.md)  \n  \n [Static Constructors](../../../csharp/programming-guide/classes-and-structs/static-constructors.md)  \n  \n [How to: Write a Copy Constructor](../../../csharp/programming-guide/classes-and-structs/how-to-write-a-copy-constructor.md)  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)\n- [Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)\n- [static](../../../csharp/language-reference/keywords/static.md)\n- [Why Do Initializers Run In The Opposite Order As Constructors? Part One](https://blogs.msdn.microsoft.com/ericlippert/2008/02/15/why-do-initializers-run-in-the-opposite-order-as-constructors-part-one)\n","nodes":[{"pos":[4,248],"embed":true,"restype":"x-metadata","content":"title: \"Constructors - C# Programming Guide\"\nms.custom: seodec18\nms.date: 05/05/2017\nhelpviewer_keywords: \n  - \"constructors [C#]\"\n  - \"classes [C#], constructors\"\n  - \"C# language, constructors\"\nms.assetid: df2e2e9d-7998-418b-8e7d-890c17ff6c95","nodes":[{"content":"Constructors - C# Programming Guide","nodes":[{"pos":[0,35],"content":"Constructors - C# Programming Guide","nodes":[{"content":"Constructors - C# Programming Guide","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[255,290],"content":"Constructors (C# Programming Guide)","linkify":"Constructors (C# Programming Guide)","nodes":[{"content":"Constructors (C# Programming Guide)","pos":[0,35]}]},{"content":"Whenever a <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](../../../csharp/language-reference/keywords/class.md)</ept> or <bpt id=\"p2\">[</bpt>struct<ept id=\"p2\">](../../../csharp/language-reference/keywords/struct.md)</ept> is created, its constructor is called.","pos":[291,469],"source":"Whenever a [class](../../../csharp/language-reference/keywords/class.md) or [struct](../../../csharp/language-reference/keywords/struct.md) is created, its constructor is called."},{"content":"A class or struct may have multiple constructors that take different arguments.","pos":[470,549]},{"content":"Constructors enable the programmer to set default values, limit instantiation, and write code that is flexible and easy to read.","pos":[550,678]},{"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Using Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/using-constructors.md)</ept> and <bpt id=\"p2\">[</bpt>Instance Constructors<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)</ept>.","pos":[679,924],"source":" For more information and examples, see [Using Constructors](../../../csharp/programming-guide/classes-and-structs/using-constructors.md) and [Instance Constructors](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)."},{"pos":[931,951],"content":"Default constructors","linkify":"Default constructors","nodes":[{"content":"Default constructors","pos":[0,20]}]},{"content":"If you don't provide a constructor for your class, C# creates one by default that instantiates the object and sets member variables to the default values as listed in the <bpt id=\"p1\">[</bpt>Default Values Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>.","pos":[955,1218],"source":"If you don't provide a constructor for your class, C# creates one by default that instantiates the object and sets member variables to the default values as listed in the [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)."},{"content":"If you don't provide a constructor for your struct, C# relies on an <bpt id=\"p1\">*</bpt>implicit default constructor<ept id=\"p1\">*</ept> to automatically initialize each field of a value type to its default value as listed in the <bpt id=\"p2\">[</bpt>Default Values Table<ept id=\"p2\">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>.","pos":[1219,1503],"source":" If you don't provide a constructor for your struct, C# relies on an *implicit default constructor* to automatically initialize each field of a value type to its default value as listed in the [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)."},{"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Instance Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)</ept>.","pos":[1504,1647],"source":" For more information and examples, see [Instance Constructors](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)."},{"pos":[1654,1672],"content":"Constructor syntax","linkify":"Constructor syntax","nodes":[{"content":"Constructor syntax","pos":[0,18]}]},{"content":"A constructor is a method whose name is the same as the name of its type.","pos":[1674,1747]},{"content":"Its method signature includes only the method name and its parameter list; it does not include a return type.","pos":[1748,1857]},{"content":"The following example shows the constructor for a class named <ph id=\"ph1\">`Person`</ph>.","pos":[1858,1929],"source":" The following example shows the constructor for a class named `Person`."},{"content":"If a constructor can be implemented as a single statement, you can use an <bpt id=\"p1\">[</bpt>expression body definition<ept id=\"p1\">](../statements-expressions-operators/expression-bodied-members.md)</ept>.","pos":[2057,2226],"source":"If a constructor can be implemented as a single statement, you can use an [expression body definition](../statements-expressions-operators/expression-bodied-members.md)."},{"content":"The following example defines a <ph id=\"ph1\">`Location`</ph> class whose constructor has a single string parameter named <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept>.","pos":[2227,2337],"source":" The following example defines a `Location` class whose constructor has a single string parameter named *name*."},{"content":"The expression body definition assigns the argument to the <ph id=\"ph1\">`locationName`</ph> field.","pos":[2338,2418],"source":" The expression body definition assigns the argument to the `locationName` field."},{"pos":[2569,2588],"content":"Static constructors","linkify":"Static constructors","nodes":[{"content":"Static constructors","pos":[0,19]}]},{"content":"The previous examples have all shown instance constructors, which create a new object.","pos":[2590,2676]},{"content":"A class or struct can also have a static constructor, which initializes static members of the type.","pos":[2677,2776]},{"content":"Static constructors are parameterless.","pos":[2778,2816]},{"content":"If you don't provide a static constructor to initialize static fields, the C# compiler will supply a default static constructor that initializes static fields to their default value as listed in the <bpt id=\"p1\">[</bpt>Default Values Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>.","pos":[2817,3108],"source":" If you don't provide a static constructor to initialize static fields, the C# compiler will supply a default static constructor that initializes static fields to their default value as listed in the [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)."},{"content":"The following example uses a static constructor to initialize a static field.","pos":[3111,3188]},{"content":"You can also define a static constructor with an expression body definition, as the following example shows.","pos":[3316,3424]},{"pos":[3553,3692],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Static Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.","source":"For more information and examples, see [Static Constructors](../../../csharp/programming-guide/classes-and-structs/static-constructors.md)."},{"pos":[3701,3716],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"pos":[3720,3817],"content":"<bpt id=\"p1\">[</bpt>Using Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/using-constructors.md)</ept>","source":"[Using Constructors](../../../csharp/programming-guide/classes-and-structs/using-constructors.md)"},{"pos":[3824,3927],"content":"<bpt id=\"p1\">[</bpt>Instance Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)</ept>","source":"[Instance Constructors](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)"},{"pos":[3934,4035],"content":"<bpt id=\"p1\">[</bpt>Private Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/private-constructors.md)</ept>","source":"[Private Constructors](../../../csharp/programming-guide/classes-and-structs/private-constructors.md)"},{"pos":[4042,4141],"content":"<bpt id=\"p1\">[</bpt>Static Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>","source":"[Static Constructors](../../../csharp/programming-guide/classes-and-structs/static-constructors.md)"},{"pos":[4148,4272],"content":"<bpt id=\"p1\">[</bpt>How to: Write a Copy Constructor<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/how-to-write-a-copy-constructor.md)</ept>","source":"[How to: Write a Copy Constructor](../../../csharp/programming-guide/classes-and-structs/how-to-write-a-copy-constructor.md)"},{"pos":[4281,4289],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4293,4359],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[4362,4447],"content":"<bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept>","source":"[Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)"},{"pos":[4450,4532],"content":"<bpt id=\"p1\">[</bpt>Finalizers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/destructors.md)</ept>","source":"[Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)"},{"pos":[4535,4598],"content":"<bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept>","source":"[static](../../../csharp/language-reference/keywords/static.md)"},{"pos":[4601,4802],"content":"<bpt id=\"p1\">[</bpt>Why Do Initializers Run In The Opposite Order As Constructors? Part One<ept id=\"p1\">](https://blogs.msdn.microsoft.com/ericlippert/2008/02/15/why-do-initializers-run-in-the-opposite-order-as-constructors-part-one)</ept>","source":"[Why Do Initializers Run In The Opposite Order As Constructors? Part One](https://blogs.msdn.microsoft.com/ericlippert/2008/02/15/why-do-initializers-run-in-the-opposite-order-as-constructors-part-one)"}]}