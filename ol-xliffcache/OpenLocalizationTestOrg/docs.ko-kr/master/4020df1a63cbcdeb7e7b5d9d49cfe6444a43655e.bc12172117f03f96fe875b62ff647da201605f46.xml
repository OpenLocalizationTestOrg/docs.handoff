{"content":"---\ntitle: Distinguising Delegates and Events\ndescription: Distinguising Delegates and Events\nkeywords: .NET, .NET Core\nauthor: BillWagner\nms.author: wiwagn\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: 0fdc8629-2fdb-4a7c-a433-5b9d04eaf911\n---\n\n# Distinguising Delegates and Events\n\n[Previous](modern-events.md)\n\nDevelopers that are new to the .NET Core platform often struggle\nwhen deciding between a design based on `delegates` and a design\nbased on `events`. This is a difficult concept, because the two\nlanguage features are very similar. Events are even built using\nthe language support for delegates. \n\nThey both offer a late binding scenario: they enable scenarios\nwhere a component communicates by calling a method that is only\nknown at runtime. They both support single and multiple subscriber\nmethods. You may find this referred to as singlecast and multicast\nsupport. They both support similar syntax for adding and removing\nhandlers. Finally, raising an event and calling a delegate use exactly the same method call syntax. They even both support the same `Invoke()`\nmethod syntax for use with the `?.` operator.\n\nWith all those similarities, it is easy to have trouble determining when\nto use which.\n\n## Listening to Events is Optional\n\nThe most important consideration in determining which language feature\nto use is whether or not there must be an attached subscriber. If your\ncode must call the code supplied by the subscriber, you should\nuse a design based on delegates. If your code can complete all its\nwork without calling any subscribers, you should use a\ndesign based on events. \n\nConsider the examples built during this section. The code you built\nusing `List.Sort()` must be given a comparer function in order to\nproperly sort the elements. LINQ queries must be supplied with delegates\nin order to determine what elements to return. Both used a design built\nwith delegates.\n\nConsider the `Progress` event. It reports progress on a task.\nThe task continues to proceed whether or not there are any listeners.\nThe `FileSearcher` is another example. It would still search and find\nall the files that were sought, even with no event subscribers attached.\nUX controls still work correctly, even when there are no subscribers\nlistening to the events. They both use designs based on events.\n\n## Return Values Require Delegates\n\nAnother consideration is the method prototype you would want for your\ndelegate method. As you've seen, the delegates used for events all\nhave a void return type. You've also seen that there are idioms to\ncreate event handlers that do pass information back to event sources\nthrough modifying properties of the event argument object. While these\nidioms do work, they are not as natural as returning a value from a\nmethod.\n\nNotice that these two heuristics may often both be present: If your\ndelegate method returns a value, it will likely impact the algorithm\nin some way.\n\n## Event Listeners Often Have Longer Lifetimes \n\nThis is a slightly weaker justification. However, you may find that\nevent-based designs are more natural when the event source will be\nraising events over a long period of time. You can see examples of\nthis for UX controls on many systems. Once you subscribe to an event,\nthe event source may raise events throughout the lifetime of the program.\n(You can unsubscribe from events when you no longer need them.)\n\nContrast that with many delegate-based designs, where a delegate is\nused as an argument to a method, and the delegate is not used after that\nmethod returns.\n\n## Evaluate Carefully\n\nThe above considerations are not hard and fast rules. Instead, they\nrepresent guidance that can help you decide which choice is best for\nyour particular usage. Because they are similar, you can even\nprototype both, and consider which would be more natural to work\nwith. They both handle late binding scenarios well. Use the one\nthat communicates your design the best.\n","nodes":[{"pos":[11,45],"content":"Distinguising Delegates and Events","needQuote":true,"needEscape":true,"nodes":[{"content":"Distinguising Delegates and Events","pos":[0,34]}]},{"pos":[59,93],"content":"Distinguising Delegates and Events","needQuote":true,"needEscape":true,"nodes":[{"content":"Distinguising Delegates and Events","pos":[0,34]}]},{"pos":[104,119],"content":".NET, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"pos":[314,348],"content":"Distinguising Delegates and Events","linkify":"Distinguising Delegates and Events","nodes":[{"content":"Distinguising Delegates and Events","pos":[0,34]}]},{"pos":[350,378],"content":"<bpt id=\"p1\">[</bpt>Previous<ept id=\"p1\">](modern-events.md)</ept>","source":"[Previous](modern-events.md)"},{"content":"Developers that are new to the .NET Core platform often struggle when deciding between a design based on <ph id=\"ph1\">`delegates`</ph> and a design based on <ph id=\"ph2\">`events`</ph>.","pos":[380,528],"source":"Developers that are new to the .NET Core platform often struggle\nwhen deciding between a design based on `delegates` and a design\nbased on `events`."},{"content":"This is a difficult concept, because the two language features are very similar.","pos":[529,609],"source":" This is a difficult concept, because the two\nlanguage features are very similar."},{"content":"Events are even built using the language support for delegates.","pos":[610,673],"source":" Events are even built using\nthe language support for delegates."},{"content":"They both offer a late binding scenario: they enable scenarios where a component communicates by calling a method that is only known at runtime.","pos":[676,820],"source":"They both offer a late binding scenario: they enable scenarios\nwhere a component communicates by calling a method that is only\nknown at runtime."},{"content":"They both support single and multiple subscriber methods.","pos":[821,878],"source":" They both support single and multiple subscriber\nmethods."},{"content":"You may find this referred to as singlecast and multicast support.","pos":[879,945],"source":" You may find this referred to as singlecast and multicast\nsupport."},{"content":"They both support similar syntax for adding and removing handlers.","pos":[946,1012],"source":" They both support similar syntax for adding and removing\nhandlers."},{"content":"Finally, raising an event and calling a delegate use exactly the same method call syntax.","pos":[1013,1102]},{"content":"They even both support the same <ph id=\"ph1\">`Invoke()`</ph> method syntax for use with the <ph id=\"ph2\">`?.`</ph> operator.","pos":[1103,1191],"source":" They even both support the same `Invoke()`\nmethod syntax for use with the `?.` operator."},{"pos":[1193,1279],"content":"With all those similarities, it is easy to have trouble determining when to use which.","source":"With all those similarities, it is easy to have trouble determining when\nto use which."},{"pos":[1284,1315],"content":"Listening to Events is Optional","linkify":"Listening to Events is Optional","nodes":[{"content":"Listening to Events is Optional","pos":[0,31]}]},{"content":"The most important consideration in determining which language feature to use is whether or not there must be an attached subscriber.","pos":[1317,1450],"source":"The most important consideration in determining which language feature\nto use is whether or not there must be an attached subscriber."},{"content":"If your code must call the code supplied by the subscriber, you should use a design based on delegates.","pos":[1451,1554],"source":" If your\ncode must call the code supplied by the subscriber, you should\nuse a design based on delegates."},{"content":"If your code can complete all its work without calling any subscribers, you should use a design based on events.","pos":[1555,1667],"source":" If your code can complete all its\nwork without calling any subscribers, you should use a\ndesign based on events."},{"content":"Consider the examples built during this section.","pos":[1670,1718]},{"content":"The code you built using <ph id=\"ph1\">`List.Sort()`</ph> must be given a comparer function in order to properly sort the elements.","pos":[1719,1831],"source":" The code you built\nusing `List.Sort()` must be given a comparer function in order to\nproperly sort the elements."},{"content":"LINQ queries must be supplied with delegates in order to determine what elements to return.","pos":[1832,1923],"source":" LINQ queries must be supplied with delegates\nin order to determine what elements to return."},{"content":"Both used a design built with delegates.","pos":[1924,1964],"source":" Both used a design built\nwith delegates."},{"content":"Consider the <ph id=\"ph1\">`Progress`</ph> event.","pos":[1966,1996],"source":"Consider the `Progress` event."},{"content":"It reports progress on a task.","pos":[1997,2027]},{"content":"The task continues to proceed whether or not there are any listeners.","pos":[2028,2097],"source":"\nThe task continues to proceed whether or not there are any listeners."},{"content":"The <ph id=\"ph1\">`FileSearcher`</ph> is another example.","pos":[2098,2136],"source":"\nThe `FileSearcher` is another example."},{"content":"It would still search and find all the files that were sought, even with no event subscribers attached.","pos":[2137,2240],"source":" It would still search and find\nall the files that were sought, even with no event subscribers attached."},{"content":"UX controls still work correctly, even when there are no subscribers listening to the events.","pos":[2241,2334],"source":"\nUX controls still work correctly, even when there are no subscribers\nlistening to the events."},{"content":"They both use designs based on events.","pos":[2335,2373]},{"pos":[2378,2409],"content":"Return Values Require Delegates","linkify":"Return Values Require Delegates","nodes":[{"content":"Return Values Require Delegates","pos":[0,31]}]},{"content":"Another consideration is the method prototype you would want for your delegate method.","pos":[2411,2497],"source":"Another consideration is the method prototype you would want for your\ndelegate method."},{"content":"As you've seen, the delegates used for events all have a void return type.","pos":[2498,2572],"source":" As you've seen, the delegates used for events all\nhave a void return type."},{"content":"You've also seen that there are idioms to create event handlers that do pass information back to event sources through modifying properties of the event argument object.","pos":[2573,2742],"source":" You've also seen that there are idioms to\ncreate event handlers that do pass information back to event sources\nthrough modifying properties of the event argument object."},{"content":"While these idioms do work, they are not as natural as returning a value from a method.","pos":[2743,2830],"source":" While these\nidioms do work, they are not as natural as returning a value from a\nmethod."},{"pos":[2832,2981],"content":"Notice that these two heuristics may often both be present: If your delegate method returns a value, it will likely impact the algorithm in some way.","source":"Notice that these two heuristics may often both be present: If your\ndelegate method returns a value, it will likely impact the algorithm\nin some way."},{"pos":[2986,3029],"content":"Event Listeners Often Have Longer Lifetimes","linkify":"Event Listeners Often Have Longer Lifetimes","nodes":[{"content":"Event Listeners Often Have Longer Lifetimes","pos":[0,43]}]},{"content":"This is a slightly weaker justification.","pos":[3032,3072]},{"content":"However, you may find that event-based designs are more natural when the event source will be raising events over a long period of time.","pos":[3073,3209],"source":" However, you may find that\nevent-based designs are more natural when the event source will be\nraising events over a long period of time."},{"content":"You can see examples of this for UX controls on many systems.","pos":[3210,3271],"source":" You can see examples of\nthis for UX controls on many systems."},{"content":"Once you subscribe to an event, the event source may raise events throughout the lifetime of the program.","pos":[3272,3377],"source":" Once you subscribe to an event,\nthe event source may raise events throughout the lifetime of the program."},{"content":"(You can unsubscribe from events when you no longer need them.)","pos":[3378,3441],"source":"\n(You can unsubscribe from events when you no longer need them.)"},{"pos":[3443,3599],"content":"Contrast that with many delegate-based designs, where a delegate is used as an argument to a method, and the delegate is not used after that method returns.","source":"Contrast that with many delegate-based designs, where a delegate is\nused as an argument to a method, and the delegate is not used after that\nmethod returns."},{"pos":[3604,3622],"content":"Evaluate Carefully","linkify":"Evaluate Carefully","nodes":[{"content":"Evaluate Carefully","pos":[0,18]}]},{"content":"The above considerations are not hard and fast rules.","pos":[3624,3677]},{"content":"Instead, they represent guidance that can help you decide which choice is best for your particular usage.","pos":[3678,3783],"source":" Instead, they\nrepresent guidance that can help you decide which choice is best for\nyour particular usage."},{"content":"Because they are similar, you can even prototype both, and consider which would be more natural to work with.","pos":[3784,3893],"source":" Because they are similar, you can even\nprototype both, and consider which would be more natural to work\nwith."},{"content":"They both handle late binding scenarios well.","pos":[3894,3939]},{"content":"Use the one that communicates your design the best.","pos":[3940,3991],"source":" Use the one\nthat communicates your design the best."}]}