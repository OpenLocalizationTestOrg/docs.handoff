{"content":"---\ntitle: \"SecurityBindingElement Authentication Modes\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 12300bf4-c730-4405-9f65-d286f68b5a43\n---\n# SecurityBindingElement Authentication Modes\nWindows Communication Foundation (WCF) provides several modes by which clients and services authenticate to one another. You can create security binding elements for these authentication modes by using static methods on the <xref:System.ServiceModel.Channels.SecurityBindingElement> class or through configuration. This topic briefly describes the 18 authentication modes.  \n  \n For an example of using the element for one of the authentication modes, see [How to: Create a SecurityBindingElement for a Specified Authentication Mode](../../../../docs/framework/wcf/feature-details/how-to-create-a-securitybindingelement-for-a-specified-authentication-mode.md).  \n  \n## Basic Configuration Programming  \n The following procedure describes how to set the authentication mode in a configuration file.  \n  \n#### To set the authentication mode in configuration  \n  \n1.  To the [\\<bindings>](../../../../docs/framework/configure-apps/file-schema/wcf/bindings.md) element, add a [\\<customBinding>](../../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md).  \n  \n2.  As a child element, add a [\\<binding>](../../../../docs/framework/misc/binding.md) element to the `<customBinding>` element.  \n  \n3.  Add a `<security>` element to the `<binding>` element.  \n  \n4.  Set the `authenticationMode` attribute to one of the values described below. For example, the following code sets the mode to `AnonymousForCertificate`.  \n  \n    ```xml  \n    <bindings>  \n      <customBinding>  \n        <binding name=\"SecureCustomBinding\">  \n         <security authenticationMode =\"AnonymousForCertificate\" />  \n        </binding>  \n      </customBinding>  \n    </bindings>  \n    ```  \n  \n#### To set the mode programmatically  \n  \n1.  Determine the return type, which can be one of the following: <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement>, <xref:System.ServiceModel.Channels.TransportSecurityBindingElement>, <xref:System.ServiceModel.Channels.AsymmetricSecurityBindingElement>, or <xref:System.ServiceModel.Channels.SecurityBindingElement>.  \n  \n2.  Call the appropriate static method of the <xref:System.ServiceModel.Channels.SecurityBindingElement> class. For example, the following code calls the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateAnonymousForCertificateBindingElement%2A> method.  \n  \n     [!code-csharp[c_CustomBindingsAuthMode#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_custombindingsauthmode/cs/source.cs#3)]\n     [!code-vb[c_CustomBindingsAuthMode#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_custombindingsauthmode/vb/source.vb#3)]  \n  \n3.  Use the binding element to create the custom binding. For more information, see [Custom Bindings](../../../../docs/framework/wcf/extending/custom-bindings.md).  \n  \n## Mode Descriptions  \n  \n### AnonymousForCertificate  \n With this authentication mode, the client is anonymous and the service is authenticated using an X.509 certificate. The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateAnonymousForCertificateBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute of the <`security`> element to `AnonymousForCertificate`.  \n  \n### AnonymousForSslNegotiated  \n With this authentication mode, the client is anonymous and the service is authenticated using an X.509 certificate that is negotiated at run time. The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSslNegotiationBindingElement%2A> method when a value of `false` is passed for the first parameter. Alternatively, set the `authenticationMode` attribute to `AnonymousForSslNegotiated`.  \n  \n### CertificateOverTransport  \n With this authentication mode, the client authenticates using an X.509 certificate that appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature. The service is authenticated using an X.509 certificate at the transport layer. The security binding element is a <xref:System.ServiceModel.Channels.TransportSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateCertificateOverTransportBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `CertificateOverTransport`.  \n  \n### IssuedToken  \n With this authentication mode, the client does not authenticate to the service, as such; instead, the client authenticates to a security token service and receives a SAML token, which it then presents to the server to prove its knowledge of a shared key. The service is not authenticated to the client, as such, but the security token service encrypts the shared key as part of the issued token so that only the service can decrypt the key. The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `IssuedToken`.  \n  \n### IssuedTokenForCertificate  \n With this authentication mode, the client does not authenticate to the service, as such; instead, the client authenticates to a security token service and receives a SAML token, which it then presents to the server to prove its knowledge of a shared key. The issued token appears at the SOAP layer as either an endorsing supporting token or a bearer token; that is, a token that signs the message signature. The service authenticates to the client using an X.509 certificate. The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenForCertificateBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `IssuedTokenForCertificate`.  \n  \n### IssuedTokenForSslNegotiated  \n With this authentication mode, the client does not authenticate to the service, as such; instead, the client authenticates to a security token service and receives a SAML token, which it then presents to the server to prove its knowledge of a shared key. The issued token appears at the SOAP layer as either an endorsing supporting token or a bearer token; that is, a token that signs the message signature. The service is authenticated using an X.509 certificate. The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenForSslBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `IssuedTokenForSslnegotiated`.  \n  \n### IssuedTokenOverTransport  \n With this authentication mode, the client does not authenticate to the service, as such; instead, the client authenticates to a security token service and receives a SAML token, which it then presents to the server to prove its knowledge of a shared key. The issued token appears at the SOAP layer as either an endorsing supporting token or a bearer token; that is, a token that signs the message signature. The service is authenticated using an X.509 certificate at the transport layer. The security binding element is a `TransportSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenOverTransportBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `IssuedTokenOverTransport`.  \n  \n### Kerberos  \n With this authentication mode, the client authenticates to the service using a Kerberos ticket. That same ticket also provides server authentication. The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateKerberosBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `Kerberos`.  \n  \n> [!NOTE]\n>  In order to use this authentication mode, the service account must be associated with a service principal name (SPN). To do this, run the service under the NETWORK SERVICE account or the LOCAL SYSTEM account. Alternatively, use the SetSpn.exe tool to create an SPN for the service account. In either case, the client must use the correct SPN in the [\\<servicePrincipalName>](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor. For more information, see [Service Identity and Authentication](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md).  \n  \n> [!NOTE]\n>  When the `Kerberos` authentication mode is used, the <xref:System.Security.Principal.TokenImpersonationLevel.Anonymous> and <xref:System.Security.Principal.TokenImpersonationLevel.Delegation> impersonation levels are not supported.  \n  \n### KerberosOverTransport  \n With this authentication mode, the client authenticates to the service using a Kerberos ticket. The Kerberos token appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature. The service is authenticated using an X.509 certificate at the transport layer. The security binding element is a `TransportSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateKerberosOverTransportBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `KerberosOverTransport`.  \n  \n> [!NOTE]\n>  In order to use this authentication mode, the service account must be associated with an SPN. To do this, run the service under the NETWORK SERVICE account or the LOCAL SYSTEM account. Alternatively, use the SetSpn.exe tool to create an SPN for the service account. In either case, the client must use the correct SPN in the [\\<servicePrincipalName>](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor. For more information, see [Service Identity and Authentication](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md).  \n  \n### MutualCertificate  \n With this authentication mode, the client authenticates using an X.509 certificate that appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature. The service is also authenticated using an X.509 certificate. The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `MutualCertificate`.  \n  \n### MutualCertificateDuplex  \n With this authentication mode, the client authenticates using an X.509 certificate that appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature. The service is also authenticated using an X.509 certificate. The binding is a `AsymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateDuplexBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `MutualCertificateDuplex`.  \n  \n### MutualSslNegotiated  \n With this authentication mode, the client and the service authenticate using X.509 certificates. The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSslNegotiationBindingElement%2A> method when a value of `true` is passed for the first parameter. Alternatively, set the `authenticationMode` attribute to `MutualSslNegotiated`.  \n  \n### SecureConversation  \n The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> method. This method takes a <xref:System.ServiceModel.Channels.SecurityBindingElement> as a parameter, which is used during initialization to establish the secure session. Alternatively, set the `authenticationMode` attribute to `SecureConversation`.  \n  \n If no bootstrap binding is specified, then the `SspiNegotiated` authentication mode is used for bootstrap.  \n  \n### SspiNegotiation  \n With this authentication mode, a negotiation protocol is used to perform client and server authentication. Kerberos is used if possible; otherwise, NT LanMan (NTLM) is used. The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `SspiNegotiated`.  \n  \n### SspiNegotiatedOverTransport  \n With this authentication mode, a negotiation protocol is used to perform client and server authentication. Kerberos protocol is used if possible; otherwise, NTLM is used. The resulting token appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature. The service is additionally authenticated at the transport layer by an X.509 certificate. The security binding element is a `TransportSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationOverTransportBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `SspiNegotiatedOverTransport`.  \n  \n### UserNameForCertificate  \n With this authentication mode, the client authenticates to the service using a Username Token that appears at the SOAP layer as a signed supporting token; that is, a token that is signed by the message signature. The service authenticates to the client using an X.509 certificate. The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameForCertificateBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `UserNameForCertificate`.  \n  \n For the `UserNameForCertificate` authentication mode, both the client and service must be using WS-Security 1.1.  \n  \n### UserNameForSslNegotiated  \n With this authentication mode, the client is authenticates using a Username Token which appears at the SOAP layer as a signed supporting token; that is, a token that is signed by the message signature. The service is authenticated using an X.509 certificate. The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameForSslBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `UserNameForSslNegotiated`.  \n  \n### UserNameOverTransport  \n With this authentication mode, the client authenticates using a Username Token that appears at the SOAP layer as a signed supporting token; that is, a token that is signed by the message signature. The service is authenticated using an X.509 certificate at the transport layer. The security binding element is a `TransportSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameOverTransportBindingElement%2A> method. Alternatively, set the `authenticationMode` attribute to `UserNameOverTransport`.  \n  \n## See also\n\n- <xref:System.ServiceModel.Channels.SecurityBindingElement>\n- [How to: Create a SecurityBindingElement for a Specified Authentication Mode](../../../../docs/framework/wcf/feature-details/how-to-create-a-securitybindingelement-for-a-specified-authentication-mode.md)\n","nodes":[{"pos":[4,161],"embed":true,"restype":"x-metadata","content":"title: \"SecurityBindingElement Authentication Modes\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 12300bf4-c730-4405-9f65-d286f68b5a43","nodes":[{"content":"SecurityBindingElement Authentication Modes","nodes":[{"pos":[0,43],"content":"SecurityBindingElement Authentication Modes","nodes":[{"content":"SecurityBindingElement Authentication Modes","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[168,211],"content":"SecurityBindingElement Authentication Modes","linkify":"SecurityBindingElement Authentication Modes","nodes":[{"content":"SecurityBindingElement Authentication Modes","pos":[0,43]}]},{"content":"Windows Communication Foundation (WCF) provides several modes by which clients and services authenticate to one another.","pos":[212,332]},{"content":"You can create security binding elements for these authentication modes by using static methods on the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement&gt;</ph> class or through configuration.","pos":[333,526],"source":" You can create security binding elements for these authentication modes by using static methods on the <xref:System.ServiceModel.Channels.SecurityBindingElement> class or through configuration."},{"content":"This topic briefly describes the 18 authentication modes.","pos":[527,584]},{"pos":[591,872],"content":"For an example of using the element for one of the authentication modes, see <bpt id=\"p1\">[</bpt>How to: Create a SecurityBindingElement for a Specified Authentication Mode<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-create-a-securitybindingelement-for-a-specified-authentication-mode.md)</ept>.","source":"For an example of using the element for one of the authentication modes, see [How to: Create a SecurityBindingElement for a Specified Authentication Mode](../../../../docs/framework/wcf/feature-details/how-to-create-a-securitybindingelement-for-a-specified-authentication-mode.md)."},{"pos":[881,912],"content":"Basic Configuration Programming","linkify":"Basic Configuration Programming","nodes":[{"content":"Basic Configuration Programming","pos":[0,31]}]},{"content":"The following procedure describes how to set the authentication mode in a configuration file.","pos":[916,1009]},{"pos":[1020,1067],"content":"To set the authentication mode in configuration","linkify":"To set the authentication mode in configuration","nodes":[{"content":"To set the authentication mode in configuration","pos":[0,47]}]},{"pos":[1077,1279],"content":"To the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>bindings&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/bindings.md)</ept> element, add a <bpt id=\"p2\">[</bpt><ph id=\"ph2\">\\&lt;</ph>customBinding&gt;<ept id=\"p2\">](../../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md)</ept>.","source":"To the [\\<bindings>](../../../../docs/framework/configure-apps/file-schema/wcf/bindings.md) element, add a [\\<customBinding>](../../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md)."},{"pos":[1289,1413],"content":"As a child element, add a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>binding&gt;<ept id=\"p1\">](../../../../docs/framework/misc/binding.md)</ept> element to the <ph id=\"ph2\">`&lt;customBinding&gt;`</ph> element.","source":"As a child element, add a [\\<binding>](../../../../docs/framework/misc/binding.md) element to the `<customBinding>` element."},{"pos":[1423,1477],"content":"Add a <ph id=\"ph1\">`&lt;security&gt;`</ph> element to the <ph id=\"ph2\">`&lt;binding&gt;`</ph> element.","source":"Add a `<security>` element to the `<binding>` element."},{"content":"Set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to one of the values described below.","pos":[1487,1563],"source":"Set the `authenticationMode` attribute to one of the values described below."},{"content":"For example, the following code sets the mode to <ph id=\"ph1\">`AnonymousForCertificate`</ph>.","pos":[1564,1639],"source":" For example, the following code sets the mode to `AnonymousForCertificate`."},{"pos":[1898,1930],"content":"To set the mode programmatically","linkify":"To set the mode programmatically","nodes":[{"content":"To set the mode programmatically","pos":[0,32]}]},{"pos":[1940,2272],"content":"Determine the return type, which can be one of the following: <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.TransportSecurityBindingElement&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.AsymmetricSecurityBindingElement&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement&gt;</ph>.","source":"Determine the return type, which can be one of the following: <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement>, <xref:System.ServiceModel.Channels.TransportSecurityBindingElement>, <xref:System.ServiceModel.Channels.AsymmetricSecurityBindingElement>, or <xref:System.ServiceModel.Channels.SecurityBindingElement>."},{"content":"Call the appropriate static method of the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement&gt;</ph> class.","pos":[2282,2389],"source":"Call the appropriate static method of the <xref:System.ServiceModel.Channels.SecurityBindingElement> class."},{"content":"For example, the following code calls the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateAnonymousForCertificateBindingElement%2A&gt;</ph> method.","pos":[2390,2545],"source":" For example, the following code calls the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateAnonymousForCertificateBindingElement%2A> method."},{"pos":[2556,2833],"content":"[!code-csharp[c_CustomBindingsAuthMode#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_custombindingsauthmode/cs/source.cs#3)]\n [!code-vb[c_CustomBindingsAuthMode#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_custombindingsauthmode/vb/source.vb#3)]","leadings":["","    "],"nodes":[]},{"content":"Use the binding element to create the custom binding.","pos":[2843,2896]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Bindings<ept id=\"p1\">](../../../../docs/framework/wcf/extending/custom-bindings.md)</ept>.","pos":[2897,3002],"source":" For more information, see [Custom Bindings](../../../../docs/framework/wcf/extending/custom-bindings.md)."},{"pos":[3011,3028],"content":"Mode Descriptions","linkify":"Mode Descriptions","nodes":[{"content":"Mode Descriptions","pos":[0,17]}]},{"pos":[3038,3061],"content":"AnonymousForCertificate","linkify":"AnonymousForCertificate","nodes":[{"content":"AnonymousForCertificate","pos":[0,23]}]},{"content":"With this authentication mode, the client is anonymous and the service is authenticated using an X.509 certificate.","pos":[3065,3180]},{"content":"The security binding element is a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateAnonymousForCertificateBindingElement%2A&gt;</ph> method.","pos":[3181,3412],"source":" The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateAnonymousForCertificateBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute of the &lt;<ph id=\"ph2\">`security`</ph>&gt; element to <ph id=\"ph3\">`AnonymousForCertificate`</ph>.","pos":[3413,3524],"source":" Alternatively, set the `authenticationMode` attribute of the <`security`> element to `AnonymousForCertificate`."},{"pos":[3534,3559],"content":"AnonymousForSslNegotiated","linkify":"AnonymousForSslNegotiated","nodes":[{"content":"AnonymousForSslNegotiated","pos":[0,25]}]},{"content":"With this authentication mode, the client is anonymous and the service is authenticated using an X.509 certificate that is negotiated at run time.","pos":[3563,3709]},{"content":"The security binding element is a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSslNegotiationBindingElement%2A&gt;</ph> method when a value of <ph id=\"ph3\">`false`</ph> is passed for the first parameter.","pos":[3710,3990],"source":" The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSslNegotiationBindingElement%2A> method when a value of `false` is passed for the first parameter."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`AnonymousForSslNegotiated`</ph>.","pos":[3991,4076],"source":" Alternatively, set the `authenticationMode` attribute to `AnonymousForSslNegotiated`."},{"pos":[4086,4110],"content":"CertificateOverTransport","linkify":"CertificateOverTransport","nodes":[{"content":"CertificateOverTransport","pos":[0,24]}]},{"content":"With this authentication mode, the client authenticates using an X.509 certificate that appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature.","pos":[4114,4312]},{"content":"The service is authenticated using an X.509 certificate at the transport layer.","pos":[4313,4392]},{"content":"The security binding element is a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.TransportSecurityBindingElement&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateCertificateOverTransportBindingElement%2A&gt;</ph> method.","pos":[4393,4625],"source":" The security binding element is a <xref:System.ServiceModel.Channels.TransportSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateCertificateOverTransportBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`CertificateOverTransport`</ph>.","pos":[4626,4710],"source":" Alternatively, set the `authenticationMode` attribute to `CertificateOverTransport`."},{"pos":[4720,4731],"content":"IssuedToken","linkify":"IssuedToken","nodes":[{"content":"IssuedToken","pos":[0,11]}]},{"content":"With this authentication mode, the client does not authenticate to the service, as such; instead, the client authenticates to a security token service and receives a SAML token, which it then presents to the server to prove its knowledge of a shared key.","pos":[4735,4989]},{"content":"The service is not authenticated to the client, as such, but the security token service encrypts the shared key as part of the issued token so that only the service can decrypt the key.","pos":[4990,5175]},{"content":"The security binding element is a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenBindingElement%2A&gt;</ph> method.","pos":[5176,5395],"source":" The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`IssuedToken`</ph>.","pos":[5396,5467],"source":" Alternatively, set the `authenticationMode` attribute to `IssuedToken`."},{"pos":[5477,5502],"content":"IssuedTokenForCertificate","linkify":"IssuedTokenForCertificate","nodes":[{"content":"IssuedTokenForCertificate","pos":[0,25]}]},{"content":"With this authentication mode, the client does not authenticate to the service, as such; instead, the client authenticates to a security token service and receives a SAML token, which it then presents to the server to prove its knowledge of a shared key.","pos":[5506,5760]},{"content":"The issued token appears at the SOAP layer as either an endorsing supporting token or a bearer token; that is, a token that signs the message signature.","pos":[5761,5913]},{"content":"The service authenticates to the client using an X.509 certificate.","pos":[5914,5981]},{"content":"The security binding element is a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenForCertificateBindingElement%2A&gt;</ph> method.","pos":[5982,6215],"source":" The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenForCertificateBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`IssuedTokenForCertificate`</ph>.","pos":[6216,6301],"source":" Alternatively, set the `authenticationMode` attribute to `IssuedTokenForCertificate`."},{"pos":[6311,6338],"content":"IssuedTokenForSslNegotiated","linkify":"IssuedTokenForSslNegotiated","nodes":[{"content":"IssuedTokenForSslNegotiated","pos":[0,27]}]},{"content":"With this authentication mode, the client does not authenticate to the service, as such; instead, the client authenticates to a security token service and receives a SAML token, which it then presents to the server to prove its knowledge of a shared key.","pos":[6342,6596]},{"content":"The issued token appears at the SOAP layer as either an endorsing supporting token or a bearer token; that is, a token that signs the message signature.","pos":[6597,6749]},{"content":"The service is authenticated using an X.509 certificate.","pos":[6750,6806]},{"content":"The security binding element is a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenForSslBindingElement%2A&gt;</ph> method.","pos":[6807,7032],"source":" The security binding element is a <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenForSslBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`IssuedTokenForSslnegotiated`</ph>.","pos":[7033,7120],"source":" Alternatively, set the `authenticationMode` attribute to `IssuedTokenForSslnegotiated`."},{"pos":[7130,7154],"content":"IssuedTokenOverTransport","linkify":"IssuedTokenOverTransport","nodes":[{"content":"IssuedTokenOverTransport","pos":[0,24]}]},{"content":"With this authentication mode, the client does not authenticate to the service, as such; instead, the client authenticates to a security token service and receives a SAML token, which it then presents to the server to prove its knowledge of a shared key.","pos":[7158,7412]},{"content":"The issued token appears at the SOAP layer as either an endorsing supporting token or a bearer token; that is, a token that signs the message signature.","pos":[7413,7565]},{"content":"The service is authenticated using an X.509 certificate at the transport layer.","pos":[7566,7645]},{"content":"The security binding element is a <ph id=\"ph1\">`TransportSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenOverTransportBindingElement%2A&gt;</ph> method.","pos":[7646,7844],"source":" The security binding element is a `TransportSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenOverTransportBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`IssuedTokenOverTransport`</ph>.","pos":[7845,7929],"source":" Alternatively, set the `authenticationMode` attribute to `IssuedTokenOverTransport`."},{"pos":[7939,7947],"content":"Kerberos","linkify":"Kerberos","nodes":[{"content":"Kerberos","pos":[0,8]}]},{"content":"With this authentication mode, the client authenticates to the service using a Kerberos ticket.","pos":[7951,8046]},{"content":"That same ticket also provides server authentication.","pos":[8047,8100]},{"content":"The security binding element is a <ph id=\"ph1\">`SymmetricSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateKerberosBindingElement%2A&gt;</ph> method.","pos":[8101,8283],"source":" The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateKerberosBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`Kerberos`</ph>.","pos":[8284,8352],"source":" Alternatively, set the `authenticationMode` attribute to `Kerberos`."},{"pos":[8360,9061],"content":"[!NOTE]\n In order to use this authentication mode, the service account must be associated with a service principal name (SPN). To do this, run the service under the NETWORK SERVICE account or the LOCAL SYSTEM account. Alternatively, use the SetSpn.exe tool to create an SPN for the service account. In either case, the client must use the correct SPN in the [\\<servicePrincipalName>](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor. For more information, see [Service Identity and Authentication](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md).","leadings":["","> "],"nodes":[{"content":"In order to use this authentication mode, the service account must be associated with a service principal name (SPN). To do this, run the service under the NETWORK SERVICE account or the LOCAL SYSTEM account. Alternatively, use the SetSpn.exe tool to create an SPN for the service account. In either case, the client must use the correct SPN in the [\\<servicePrincipalName>](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor. For more information, see [Service Identity and Authentication](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md).","pos":[9,699],"nodes":[{"content":"In order to use this authentication mode, the service account must be associated with a service principal name (SPN).","pos":[0,117]},{"content":"To do this, run the service under the NETWORK SERVICE account or the LOCAL SYSTEM account.","pos":[118,208]},{"content":"Alternatively, use the SetSpn.exe tool to create an SPN for the service account.","pos":[209,289]},{"content":"In either case, the client must use the correct SPN in the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>servicePrincipalName&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md)</ept> element, or by using the <ph id=\"ph2\">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> constructor.","pos":[290,538],"source":" In either case, the client must use the correct SPN in the [\\<servicePrincipalName>](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Service Identity and Authentication<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md)</ept>.","pos":[539,690],"source":" For more information, see [Service Identity and Authentication](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md)."}]}]},{"pos":[9069,9311],"content":"[!NOTE]\n When the `Kerberos` authentication mode is used, the <xref:System.Security.Principal.TokenImpersonationLevel.Anonymous> and <xref:System.Security.Principal.TokenImpersonationLevel.Delegation> impersonation levels are not supported.","leadings":["","> "],"nodes":[{"content":"When the <ph id=\"ph1\">`Kerberos`</ph> authentication mode is used, the <ph id=\"ph2\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Anonymous&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Delegation&gt;</ph> impersonation levels are not supported.","pos":[9,240],"source":"When the `Kerberos` authentication mode is used, the <xref:System.Security.Principal.TokenImpersonationLevel.Anonymous> and <xref:System.Security.Principal.TokenImpersonationLevel.Delegation> impersonation levels are not supported."}]},{"pos":[9321,9342],"content":"KerberosOverTransport","linkify":"KerberosOverTransport","nodes":[{"content":"KerberosOverTransport","pos":[0,21]}]},{"content":"With this authentication mode, the client authenticates to the service using a Kerberos ticket.","pos":[9346,9441]},{"content":"The Kerberos token appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature.","pos":[9442,9571]},{"content":"The service is authenticated using an X.509 certificate at the transport layer.","pos":[9572,9651]},{"content":"The security binding element is a <ph id=\"ph1\">`TransportSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateKerberosOverTransportBindingElement%2A&gt;</ph> method.","pos":[9652,9847],"source":" The security binding element is a `TransportSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateKerberosOverTransportBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`KerberosOverTransport`</ph>.","pos":[9848,9929],"source":" Alternatively, set the `authenticationMode` attribute to `KerberosOverTransport`."},{"pos":[9937,10614],"content":"[!NOTE]\n In order to use this authentication mode, the service account must be associated with an SPN. To do this, run the service under the NETWORK SERVICE account or the LOCAL SYSTEM account. Alternatively, use the SetSpn.exe tool to create an SPN for the service account. In either case, the client must use the correct SPN in the [\\<servicePrincipalName>](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor. For more information, see [Service Identity and Authentication](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md).","leadings":["","> "],"nodes":[{"content":"In order to use this authentication mode, the service account must be associated with an SPN. To do this, run the service under the NETWORK SERVICE account or the LOCAL SYSTEM account. Alternatively, use the SetSpn.exe tool to create an SPN for the service account. In either case, the client must use the correct SPN in the [\\<servicePrincipalName>](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor. For more information, see [Service Identity and Authentication](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md).","pos":[9,675],"nodes":[{"content":"In order to use this authentication mode, the service account must be associated with an SPN.","pos":[0,93]},{"content":"To do this, run the service under the NETWORK SERVICE account or the LOCAL SYSTEM account.","pos":[94,184]},{"content":"Alternatively, use the SetSpn.exe tool to create an SPN for the service account.","pos":[185,265]},{"content":"In either case, the client must use the correct SPN in the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>servicePrincipalName&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md)</ept> element, or by using the <ph id=\"ph2\">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> constructor.","pos":[266,514],"source":" In either case, the client must use the correct SPN in the [\\<servicePrincipalName>](../../../../docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Service Identity and Authentication<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md)</ept>.","pos":[515,666],"source":" For more information, see [Service Identity and Authentication](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md)."}]}]},{"pos":[10624,10641],"content":"MutualCertificate","linkify":"MutualCertificate","nodes":[{"content":"MutualCertificate","pos":[0,17]}]},{"content":"With this authentication mode, the client authenticates using an X.509 certificate that appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature.","pos":[10645,10843]},{"content":"The service is also authenticated using an X.509 certificate.","pos":[10844,10905]},{"content":"The security binding element is a <ph id=\"ph1\">`SymmetricSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateBindingElement%2A&gt;</ph> method.","pos":[10906,11097],"source":" The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`MutualCertificate`</ph>.","pos":[11098,11175],"source":" Alternatively, set the `authenticationMode` attribute to `MutualCertificate`."},{"pos":[11185,11208],"content":"MutualCertificateDuplex","linkify":"MutualCertificateDuplex","nodes":[{"content":"MutualCertificateDuplex","pos":[0,23]}]},{"content":"With this authentication mode, the client authenticates using an X.509 certificate that appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature.","pos":[11212,11410]},{"content":"The service is also authenticated using an X.509 certificate.","pos":[11411,11472]},{"content":"The binding is a <ph id=\"ph1\">`AsymmetricSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateDuplexBindingElement%2A&gt;</ph> method.","pos":[11473,11654],"source":" The binding is a `AsymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateDuplexBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`MutualCertificateDuplex`</ph>.","pos":[11655,11738],"source":" Alternatively, set the `authenticationMode` attribute to `MutualCertificateDuplex`."},{"pos":[11748,11767],"content":"MutualSslNegotiated","linkify":"MutualSslNegotiated","nodes":[{"content":"MutualSslNegotiated","pos":[0,19]}]},{"content":"With this authentication mode, the client and the service authenticate using X.509 certificates.","pos":[11771,11867]},{"content":"The security binding element is a <ph id=\"ph1\">`SymmetricSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSslNegotiationBindingElement%2A&gt;</ph> method when a value of <ph id=\"ph3\">`true`</ph> is passed for the first parameter.","pos":[11868,12113],"source":" The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSslNegotiationBindingElement%2A> method when a value of `true` is passed for the first parameter."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`MutualSslNegotiated`</ph>.","pos":[12114,12193],"source":" Alternatively, set the `authenticationMode` attribute to `MutualSslNegotiated`."},{"pos":[12203,12221],"content":"SecureConversation","linkify":"SecureConversation","nodes":[{"content":"SecureConversation","pos":[0,18]}]},{"content":"The security binding element is a <ph id=\"ph1\">`SymmetricSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A&gt;</ph> method.","pos":[12225,12417],"source":"The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> method."},{"content":"This method takes a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement&gt;</ph> as a parameter, which is used during initialization to establish the secure session.","pos":[12418,12581],"source":" This method takes a <xref:System.ServiceModel.Channels.SecurityBindingElement> as a parameter, which is used during initialization to establish the secure session."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`SecureConversation`</ph>.","pos":[12582,12660],"source":" Alternatively, set the `authenticationMode` attribute to `SecureConversation`."},{"pos":[12667,12773],"content":"If no bootstrap binding is specified, then the <ph id=\"ph1\">`SspiNegotiated`</ph> authentication mode is used for bootstrap.","source":"If no bootstrap binding is specified, then the `SspiNegotiated` authentication mode is used for bootstrap."},{"pos":[12783,12798],"content":"SspiNegotiation","linkify":"SspiNegotiation","nodes":[{"content":"SspiNegotiation","pos":[0,15]}]},{"content":"With this authentication mode, a negotiation protocol is used to perform client and server authentication.","pos":[12802,12908]},{"content":"Kerberos is used if possible; otherwise, NT LanMan (NTLM) is used.","pos":[12909,12975]},{"content":"The security binding element is a <ph id=\"ph1\">`SymmetricSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationBindingElement%2A&gt;</ph> method.","pos":[12976,13165],"source":" The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`SspiNegotiated`</ph>.","pos":[13166,13240],"source":" Alternatively, set the `authenticationMode` attribute to `SspiNegotiated`."},{"pos":[13250,13277],"content":"SspiNegotiatedOverTransport","linkify":"SspiNegotiatedOverTransport","nodes":[{"content":"SspiNegotiatedOverTransport","pos":[0,27]}]},{"content":"With this authentication mode, a negotiation protocol is used to perform client and server authentication.","pos":[13281,13387]},{"content":"Kerberos protocol is used if possible; otherwise, NTLM is used.","pos":[13388,13451]},{"content":"The resulting token appears at the SOAP layer as an endorsing supporting token; that is, a token that signs the message signature.","pos":[13452,13582]},{"content":"The service is additionally authenticated at the transport layer by an X.509 certificate.","pos":[13583,13672]},{"content":"The security binding element is a <ph id=\"ph1\">`TransportSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationOverTransportBindingElement%2A&gt;</ph> method.","pos":[13673,13875],"source":" The security binding element is a `TransportSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationOverTransportBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`SspiNegotiatedOverTransport`</ph>.","pos":[13876,13963],"source":" Alternatively, set the `authenticationMode` attribute to `SspiNegotiatedOverTransport`."},{"pos":[13973,13995],"content":"UserNameForCertificate","linkify":"UserNameForCertificate","nodes":[{"content":"UserNameForCertificate","pos":[0,22]}]},{"content":"With this authentication mode, the client authenticates to the service using a Username Token that appears at the SOAP layer as a signed supporting token; that is, a token that is signed by the message signature.","pos":[13999,14211]},{"content":"The service authenticates to the client using an X.509 certificate.","pos":[14212,14279]},{"content":"The security binding element is a <ph id=\"ph1\">`SymmetricSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameForCertificateBindingElement%2A&gt;</ph> method.","pos":[14280,14476],"source":" The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameForCertificateBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`UserNameForCertificate`</ph>.","pos":[14477,14559],"source":" Alternatively, set the `authenticationMode` attribute to `UserNameForCertificate`."},{"pos":[14566,14678],"content":"For the <ph id=\"ph1\">`UserNameForCertificate`</ph> authentication mode, both the client and service must be using WS-Security 1.1.","source":"For the `UserNameForCertificate` authentication mode, both the client and service must be using WS-Security 1.1."},{"pos":[14688,14712],"content":"UserNameForSslNegotiated","linkify":"UserNameForSslNegotiated","nodes":[{"content":"UserNameForSslNegotiated","pos":[0,24]}]},{"content":"With this authentication mode, the client is authenticates using a Username Token which appears at the SOAP layer as a signed supporting token; that is, a token that is signed by the message signature.","pos":[14716,14917]},{"content":"The service is authenticated using an X.509 certificate.","pos":[14918,14974]},{"content":"The security binding element is a <ph id=\"ph1\">`SymmetricSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameForSslBindingElement%2A&gt;</ph> method.","pos":[14975,15163],"source":" The security binding element is a `SymmetricSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameForSslBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`UserNameForSslNegotiated`</ph>.","pos":[15164,15248],"source":" Alternatively, set the `authenticationMode` attribute to `UserNameForSslNegotiated`."},{"pos":[15258,15279],"content":"UserNameOverTransport","linkify":"UserNameOverTransport","nodes":[{"content":"UserNameOverTransport","pos":[0,21]}]},{"content":"With this authentication mode, the client authenticates using a Username Token that appears at the SOAP layer as a signed supporting token; that is, a token that is signed by the message signature.","pos":[15283,15480]},{"content":"The service is authenticated using an X.509 certificate at the transport layer.","pos":[15481,15560]},{"content":"The security binding element is a <ph id=\"ph1\">`TransportSecurityBindingElement`</ph> returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameOverTransportBindingElement%2A&gt;</ph> method.","pos":[15561,15756],"source":" The security binding element is a `TransportSecurityBindingElement` returned by the <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameOverTransportBindingElement%2A> method."},{"content":"Alternatively, set the <ph id=\"ph1\">`authenticationMode`</ph> attribute to <ph id=\"ph2\">`UserNameOverTransport`</ph>.","pos":[15757,15838],"source":" Alternatively, set the `authenticationMode` attribute to `UserNameOverTransport`."},{"pos":[15847,15855],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[15920,16123],"content":"<bpt id=\"p1\">[</bpt>How to: Create a SecurityBindingElement for a Specified Authentication Mode<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-create-a-securitybindingelement-for-a-specified-authentication-mode.md)</ept>","source":"[How to: Create a SecurityBindingElement for a Specified Authentication Mode](../../../../docs/framework/wcf/feature-details/how-to-create-a-securitybindingelement-for-a-specified-authentication-mode.md)"}]}