{"content":"---\ntitle: \"Configuring Tracking for a Workflow | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 905adcc9-30a0-4918-acd6-563f86db988a\ncaps.latest.revision: 24\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Configuring Tracking for a Workflow\nA workflow can execute in three ways:  \n  \n-   Hosted in <xref:System.ServiceModel.Activities.WorkflowServiceHost>  \n  \n-   Executed as a <xref:System.Activities.WorkflowApplication>  \n  \n-   Executed directly using <xref:System.Activities.WorkflowInvoker>  \n  \n Depending on the workflow hosting option, a tracking participant can be added either through code or through a configuration file. This topic describes how tracking is configured by adding a tracking participant to a <xref:System.Activities.WorkflowApplication> and to a <xref:System.ServiceModel.Activities.WorkflowServiceHost>, and how to enable tracking when using <xref:System.Activities.WorkflowInvoker>.  \n  \n## Configuring Workflow Application Tracking  \n A workflow can run using the <xref:System.Activities.WorkflowApplication> class. This topic demonstrates how tracking is configured for a [!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)] workflow application by adding a tracking participant to the <xref:System.Activities.WorkflowApplication> workflow host. In this case, the workflow runs as a workflow application. You configure a workflow application through code (rather than by using a configuration file), which is a self-hosted .exe file using the <xref:System.Activities.WorkflowApplication> class. The tracking participant is added as an extension to the <xref:System.Activities.WorkflowApplication> instance. This is done by adding the <xref:System.Activities.Tracking.TrackingParticipant> to the extensions collection for the WorkflowApplication instance.  \n  \n For a workflow application, you can add the <xref:System.Activities.Tracking.EtwTrackingParticipant> behavior extension as shown in the following code.  \n  \n```csharp  \nLogActivity activity = new LogActivity();  \n  \nWorkflowApplication instance = new WorkflowApplication(activity);  \nEtwTrackingParticipant trackingParticipant =  \n    new EtwTrackingParticipant  \n{  \n  \n        TrackingProfile = new TrackingProfile  \n           {  \n               Name = \"SampleTrackingProfile\",  \n               ActivityDefinitionId = \"ProcessOrder\",  \n               Queries = new WorkflowInstanceQuery  \n               {  \n                  States = { \"*\" }  \n              }  \n          }  \n       };  \ninstance.Extensions.Add(trackingParticipant);  \n  \n```  \n  \n### Configuring Workflow Service Tracking  \n A workflow can be exposed as a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] service when hosted in the <xref:System.ServiceModel.Activities.WorkflowServiceHost> service host. <xref:System.ServiceModel.Activities.WorkflowServiceHost> is a specialized .NET ServiceHost implementation for a workflow-based service. This section explains how to configure tracking for a [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] workflow service running in <xref:System.ServiceModel.Activities.WorkflowServiceHost>. It is configured through a Web.config file (for a Web-hosted service) or an App.config file (for a service hosted in a stand-alone application, such as a console application) by specifying a service behavior or through code by adding a tracking-specific behavior to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> collection for the service host.  \n  \n For a workflow service hosted in <xref:System.ServiceModel.WorkflowServiceHost>, you can add the <xref:System.Activities.Tracking.EtwTrackingParticipant> using the <`behavior`> element in a configuration file, as shown in the following example.  \n  \n```  \n  \n<behaviors>  \n   <serviceBehaviors>  \n        <behavior>  \n          <etwTracking profileName=\"Sample Tracking Profile\" />  \n        </behavior>              \n   </serviceBehaviors>  \n<behaviors>  \n  \n```  \n  \n Alternatively, for a workflow service hosted in <xref:System.ServiceModel.WorkflowServiceHost>, you can add the <xref:System.Activities.Tracking.EtwTrackingParticipant> behavior extension through code. To add a custom tracking participant, create a new behavior extension and add it to the <xref:System.ServiceModel.ServiceHost> as shown in the following example code.  \n  \n> [!NOTE]\n>  If you want to view sample code that shows how to create a custom behavior element that adds a custom tracking participant, refer to the [Tracking](../../../docs/framework/windows-workflow-foundation/samples/tracking.md) samples.  \n  \n```  \nServiceHost svcHost = new ServiceHost(typeof(WorkflowService), new   \n                                 Uri(\"http://localhost:8001/Sample\"));  \nEtwTrackingBehavior trackingBehavior =   \n    new EtwTrackingBehavior  \n    {  \n        ProfileName = \"Sample Tracking Profile\"  \n    };  \nsvcHost.Description.Behaviors.Add(trackingBehavior);  \nsvcHost.Open();  \n  \n```  \n  \n The tracking participant is added to the workflow service host as an extension to the behavior.  \n  \n This sample code below shows how to read a tracking profile from configuration file.  \n  \n```  \nTrackingProfile GetProfile(string profileName, string displayName)  \n        {  \n            TrackingProfile trackingProfile = null;  \n            TrackingSection trackingSection = (TrackingSection)WebConfigurationManager.GetSection(\"system.serviceModel/tracking\");  \n            if (trackingSection == null)   \n            {  \n                return null;  \n            }  \n  \n            if (profileName == null)   \n            {  \n                profileName = \"\";  \n            }  \n  \n            //Find the profile with the specified profile name in the list of profile found in config  \n            var match = from p in new List<TrackingProfile>(trackingSection.TrackingProfiles)  \n                        where (p.Name == profileName) && ((p.ActivityDefinitionId == displayName) || (p.ActivityDefinitionId == \"*\"))  \n                        select p;  \n  \n            if (match.Count() == 0)  \n            {  \n                //return an empty profile  \n                trackingProfile = new TrackingProfile()  \n                {  \n                    ActivityDefinitionId = displayName  \n                };  \n  \n            }  \n            else  \n            {  \n                trackingProfile = match.First();  \n            }  \n  \n            return trackingProfile;  \n  \n```  \n  \n This sample code shows how to add a tracking profile to a workflow host.  \n  \n```  \nWorkflowServiceHost workflowServiceHost = serviceHostBase as WorkflowServiceHost;  \nif (null != workflowServiceHost)  \n{  \n              string workflowDisplayName = workflowServiceHost.Activity.DisplayName;  \n               TrackingProfile trackingProfile = GetProfile(this.profileName, workflowDisplayName);  \n                workflowServiceHost.WorkflowExtensions.Add(()  => new EtwTrackingParticipant  {  \n               TrackingProfile = trackingProfile  \n                        });  \n }  \n```  \n  \n> [!NOTE]\n>  For more information on tracking profiles, refer to [Tracking Profiles](http://go.microsoft.com/fwlink/?LinkId=201310).  \n  \n### Configuring tracking using WorkflowInvoker  \n To configure tracking for a workflow executed using <xref:System.Activities.WorkflowInvoker>, add the tracking provider as an extension to a <xref:System.Activities.WorkflowInvoker> instance. The following code example is from the [Custom Tracking](../../../docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.  \n  \n```  \nWorkflowInvoker invoker = new WorkflowInvoker(BuildSampleWorkflow());  \ninvoker.Extensions.Add(customTrackingParticipant);  \ninvoker.Invoke();  \n  \n```  \n  \n### Viewing tracking records in Event Viewer  \n There are two Event Viewer logs of particular interest to view when tracking WF execution - the Analytic log and the Debug log. Both reside under the Microsoft&#124;Windows&#124;Application Server-Applications node.  Logs within this section contain events from a single application rather than events that have an impact on the entire system.  \n  \n Debug trace events are written to the Debug Log. To collect WF debug trace events in the Event Viewer, enable the Debug Log.  \n  \n1.  To open Event Viewer, click **Start**, and then click **Run.** In the Run dialog, type `eventvwr`.  \n  \n2.  In the Event Viewer dialog, expand the **Applications and Services Logs** node.  \n  \n3.  Expand the **Microsoft**, **Windows**, and **Application Server-Applications** nodes.  \n  \n4.  Right-click the **Debug** node under the **Application Server-Applications** node, and select **Enable Log**.  \n  \n5.  Execute your tracing-enabled application to generate tracing events.  \n  \n6.  Right-click the **Debug** node and select **Refresh.** Tracing events should be visible in the center pane.  \n  \n WF 4 provides a tracking participant that writes tracking records to an ETW (Event Tracing for Windows) session. The ETW tracking participant is configured with a tracking profile to subscribe to tracking records.  When tracking is enabled, errors tracking records are emitted to ETW. ETW tracking events (between the range of 100-113) corresponding to the tracking events emitted by the ETW tracking participant are written to the Analytic Log.  \n  \n To view tracking records, follow these steps.  \n  \n1.  To open Event Viewer, click **Start**, and then click **Run.** In the Run dialog, type `eventvwr`.  \n  \n2.  In the Event Viewer dialog, expand the **Applications and Services Logs** node.  \n  \n3.  Expand the **Microsoft**, **Windows**, and **Application Server-Applications** nodes.  \n  \n4.  Right-click the **Analytic** node under the **Application Server-Applications** node, and select **Enable Log**.  \n  \n5.  Execute your tracking-enabled application to generate tracking records.  \n  \n6.  Right-click the **Analytic** node and select **Refresh.** Tracking records should be visible in the center pane.  \n  \n The following image shows tracking events in the event viewer.  \n  \n ![Event Viewer showing tracking records](../../../docs/framework/windows-workflow-foundation/media/trackingeventviewer.PNG \"TrackingEventViewer\")  \n  \n### Registering an application-specific provider ID  \n If events need to be written to a specific application log, follow these steps to register the new provider manifest.  \n  \n1.  Declare the provider ID in the application configuration file.  \n  \n    ```  \n    <system.serviceModel>  \n        <diagnostics etwProviderId=\"2720e974-9fe9-477a-bb60-81fe3bf91eec\"/>  \n    </system.serviceModel>  \n  \n    ```  \n  \n2.  Copy the manifest file from %windir%\\Microsoft.NET\\Framework\\\\<latest version of [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]>\\Microsoft.Windows.ApplicationServer.Applications.man to a temporary location, and rename it to Microsoft.Windows.ApplicationServer.Applications_Provider1.man  \n  \n3.  Change the GUID in the manifest file to the new GUID.  \n  \n    ```  \n    <provider name=\"Microsoft-Windows-Application Server-Applications\" guid=\"{2720e974-9fe9-477a-bb60-81fe3bf91eec}\"  \n  \n    ```  \n  \n4.  Change the provider name if you do not want to uninstall the default provider.  \n  \n    ```  \n    <provider name=\"Microsoft-Windows-Application Server-Applications\" guid=\"{2720e974-9fe9-477a-bb60-81fe3bf91eec}\"  \n  \n    ```  \n  \n5.  If you changed the provider name in the previous step, change the channel names in the manifest file to the new provider name.  \n  \n    ```  \n    <channel name=\"Microsoft-Windows-Application Server-Applications_Provider1/Admin\" chid=\"ADMIN_CHANNEL\" symbol=\"ADMIN_CHANNEL\" type=\"Admin\" enabled=\"false\" isolation=\"Application\" message=\"$(string.MICROSOFT_WINDOWS_APPLICATIONSERVER_APPLICATIONS.channel.ADMIN_CHANNEL.message)\" />  \n    <channel name=\"Microsoft-Windows-Application Server-Applications_Provider1/Operational\" chid=\"OPERATIONAL_CHANNEL\" symbol=\"OPERATIONAL_CHANNEL\" type=\"Operational\" enabled=\"false\" isolation=\"Application\" message=\"$(string.MICROSOFT_WINDOWS_APPLICATIONSERVER_APPLICATIONS.channel.OPERATIONAL_CHANNEL.message)\" />  \n    <channel name=\"Microsoft-Windows-Application Server-Applications_Provider1/Analytic\" chid=\"ANALYTIC_CHANNEL\" symbol=\"ANALYTIC_CHANNEL\" type=\"Analytic\" enabled=\"false\" isolation=\"Application\" message=\"$(string.MICROSOFT_WINDOWS_APPLICATIONSERVER_APPLICATIONS.channel.ANALYTIC_CHANNEL.message)\" />  \n    <channel name=\"Microsoft-Windows-Application Server-Applications_Provider1/Debug\" chid=\"DEBUG_CHANNEL\" symbol=\"DEBUG_CHANNEL\" type=\"Debug\" enabled=\"false\" isolation=\"Application\" message=\"$(string.MICROSOFT_WINDOWS_APPLICATIONSERVER_APPLICATIONS.channel.DEBUG_CHANNEL.message)\" />  \n    <channel name=\"Microsoft-Windows-Application Server-Applications_Provider1/Perf\" chid=\"PERF_CHANNEL\" symbol=\"PERF_CHANNEL\" type=\"Analytic\" enabled=\"false\" isolation=\"Application\" message=\"$(string.MICROSOFT_WINDOWS_APPLICATIONSERVER_APPLICATIONS.channel.PERF_CHANNEL.message)\" />  \n  \n    ```  \n  \n6.  Generate the resource DLL by following these steps.  \n  \n    1.  Install the Windows SDK. The Windows SDK includes the message compiler ([mc.exe](http://go.microsoft.com/fwlink/?LinkId=184606)) and resource compiler ([rc.exe](http://go.microsoft.com/fwlink/?LinkId=184605)).  \n  \n    2.  In a Windows SDK command prompt, run mc.exe on the new manifest file.  \n  \n        ```  \n        mc.exe Microsoft.Windows.ApplicationServer.Applications_Provider1.man  \n  \n        ```  \n  \n    3.  Run rc.exe on the resource file generated in the previous step.  \n  \n        ```  \n        rc.exe  Microsoft.Windows.ApplicationServer.Applications_Provider1.rc  \n  \n        ```  \n  \n    4.  Create an empty cs file called NewProviderReg.cs.  \n  \n    5.  Create a resource DLL using the C# compiler.  \n  \n        ```  \n        csc /target:library /win32res:Microsoft.Windows.ApplicationServer.Applications_Provider1.res NewProviderReg.cs /out:Microsoft.Windows.ApplicationServer.Applications_Provider1.dll  \n        ```  \n  \n    6.  Change the resource and message dl namel in the manifest file from `Microsoft.Windows.ApplicationServer.Applications.Provider1.man` to the new dll name.  \n  \n        ```  \n        <provider name=\"Microsoft-Windows-Application Server-Applications_Provider1\" guid=\"{2720e974-9fe9-477a-bb60-81fe3bf91eec}\" symbol=\"Microsoft_Windows_ApplicationServer_ApplicationEvents\" resourceFileName=\"<dll directory>\\Microsoft.Windows.ApplicationServer.Applications_Provider1.dll\" messageFileName=\"<dll directory>\\Microsoft.Windows.ApplicationServer.Applications_Provider1.dll\">  \n  \n        ```  \n  \n    7.  Use [wevtutil](http://go.microsoft.com/fwlink/?LinkId=184608) to register the manifest.  \n  \n        ```  \n        wevtutil im Microsoft.Windows.ApplicationServer.Applications_Provider1.man  \n        ```  \n  \n## See Also  \n [Windows Server App Fabric Monitoring](http://go.microsoft.com/fwlink/?LinkId=201273)   \n [Monitoring Applications with App Fabric](http://go.microsoft.com/fwlink/?LinkId=201275)\n","nodes":[{"pos":[4,323],"nodes":[{"content":"Configuring Tracking for a Workflow | Microsoft Docs","nodes":[{"pos":[0,52],"content":"Configuring Tracking for a Workflow | Microsoft Docs","nodes":[{"content":"Configuring Tracking for a Workflow | Microsoft Docs","pos":[0,52]}]}],"pos":[6,61],"yaml":true}],"content":"title: \"Configuring Tracking for a Workflow | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 905adcc9-30a0-4918-acd6-563f86db988a\ncaps.latest.revision: 24\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[330,365],"content":"Configuring Tracking for a Workflow","linkify":"Configuring Tracking for a Workflow","nodes":[{"content":"Configuring Tracking for a Workflow","pos":[0,35]}]},{"content":"A workflow can execute in three ways:","pos":[366,403]},{"content":"Hosted in <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph>","pos":[413,480],"source":"Hosted in <xref:System.ServiceModel.Activities.WorkflowServiceHost>"},{"content":"Executed as a <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>","pos":[490,548],"source":"Executed as a <xref:System.Activities.WorkflowApplication>"},{"content":"Executed directly using <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>","pos":[558,622],"source":"Executed directly using <xref:System.Activities.WorkflowInvoker>"},{"content":"Depending on the workflow hosting option, a tracking participant can be added either through code or through a configuration file.","pos":[629,759]},{"content":"This topic describes how tracking is configured by adding a tracking participant to a <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> and to a <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph>, and how to enable tracking when using <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>.","pos":[760,1038],"source":" This topic describes how tracking is configured by adding a tracking participant to a <xref:System.Activities.WorkflowApplication> and to a <xref:System.ServiceModel.Activities.WorkflowServiceHost>, and how to enable tracking when using <xref:System.Activities.WorkflowInvoker>."},{"pos":[1047,1088],"content":"Configuring Workflow Application Tracking","linkify":"Configuring Workflow Application Tracking","nodes":[{"content":"Configuring Workflow Application Tracking","pos":[0,41]}]},{"content":"A workflow can run using the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> class.","pos":[1092,1172],"source":"A workflow can run using the <xref:System.Activities.WorkflowApplication> class."},{"content":"This topic demonstrates how tracking is configured for a <ph id=\"ph1\">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph> workflow application by adding a tracking participant to the <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> workflow host.","pos":[1173,1425],"source":" This topic demonstrates how tracking is configured for a [!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)] workflow application by adding a tracking participant to the <xref:System.Activities.WorkflowApplication> workflow host."},{"content":"In this case, the workflow runs as a workflow application.","pos":[1426,1484]},{"content":"You configure a workflow application through code (rather than by using a configuration file), which is a self-hosted .exe file using the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> class.","pos":[1485,1674],"source":" You configure a workflow application through code (rather than by using a configuration file), which is a self-hosted .exe file using the <xref:System.Activities.WorkflowApplication> class."},{"content":"The tracking participant is added as an extension to the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance.","pos":[1675,1786],"source":" The tracking participant is added as an extension to the <xref:System.Activities.WorkflowApplication> instance."},{"content":"This is done by adding the <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> to the extensions collection for the WorkflowApplication instance.","pos":[1787,1934],"source":" This is done by adding the <xref:System.Activities.Tracking.TrackingParticipant> to the extensions collection for the WorkflowApplication instance."},{"content":"For a workflow application, you can add the <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.EtwTrackingParticipant&gt;</ph> behavior extension as shown in the following code.","pos":[1941,2092],"source":"For a workflow application, you can add the <xref:System.Activities.Tracking.EtwTrackingParticipant> behavior extension as shown in the following code."},{"pos":[2697,2734],"content":"Configuring Workflow Service Tracking","linkify":"Configuring Workflow Service Tracking","nodes":[{"content":"Configuring Workflow Service Tracking","pos":[0,37]}]},{"content":"A workflow can be exposed as a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service when hosted in the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph> service host.","pos":[2738,2920],"source":"A workflow can be exposed as a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] service when hosted in the <xref:System.ServiceModel.Activities.WorkflowServiceHost> service host."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph> is a specialized .NET ServiceHost implementation for a workflow-based service.","pos":[2921,3057],"source":" <xref:System.ServiceModel.Activities.WorkflowServiceHost> is a specialized .NET ServiceHost implementation for a workflow-based service."},{"content":"This section explains how to configure tracking for a <ph id=\"ph1\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> workflow service running in <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph>.","pos":[3058,3275],"source":" This section explains how to configure tracking for a [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] workflow service running in <xref:System.ServiceModel.Activities.WorkflowServiceHost>."},{"content":"It is configured through a Web.config file (for a Web-hosted service) or an App.config file (for a service hosted in a stand-alone application, such as a console application) by specifying a service behavior or through code by adding a tracking-specific behavior to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A&gt;</ph> collection for the service host.","pos":[3276,3649],"source":" It is configured through a Web.config file (for a Web-hosted service) or an App.config file (for a service hosted in a stand-alone application, such as a console application) by specifying a service behavior or through code by adding a tracking-specific behavior to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> collection for the service host."},{"pos":[3656,3900],"content":"For a workflow service hosted in <ph id=\"ph1\">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph>, you can add the <ph id=\"ph2\">&lt;xref:System.Activities.Tracking.EtwTrackingParticipant&gt;</ph> using the &lt;<ph id=\"ph3\">`behavior`</ph>&gt; element in a configuration file, as shown in the following example.","source":"For a workflow service hosted in <xref:System.ServiceModel.WorkflowServiceHost>, you can add the <xref:System.Activities.Tracking.EtwTrackingParticipant> using the <`behavior`> element in a configuration file, as shown in the following example."},{"content":"Alternatively, for a workflow service hosted in <ph id=\"ph1\">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph>, you can add the <ph id=\"ph2\">&lt;xref:System.Activities.Tracking.EtwTrackingParticipant&gt;</ph> behavior extension through code.","pos":[4126,4327],"source":"Alternatively, for a workflow service hosted in <xref:System.ServiceModel.WorkflowServiceHost>, you can add the <xref:System.Activities.Tracking.EtwTrackingParticipant> behavior extension through code."},{"content":"To add a custom tracking participant, create a new behavior extension and add it to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> as shown in the following example code.","pos":[4328,4494],"source":" To add a custom tracking participant, create a new behavior extension and add it to the <xref:System.ServiceModel.ServiceHost> as shown in the following example code."},{"pos":[4502,4742],"content":"[!NOTE]\n If you want to view sample code that shows how to create a custom behavior element that adds a custom tracking participant, refer to the [Tracking](../../../docs/framework/windows-workflow-foundation/samples/tracking.md) samples.","leadings":["","> "],"nodes":[{"content":"If you want to view sample code that shows how to create a custom behavior element that adds a custom tracking participant, refer to the <bpt id=\"p1\">[</bpt>Tracking<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/samples/tracking.md)</ept> samples.","pos":[9,238],"source":"If you want to view sample code that shows how to create a custom behavior element that adds a custom tracking participant, refer to the [Tracking](../../../docs/framework/windows-workflow-foundation/samples/tracking.md) samples."}]},{"content":"The tracking participant is added to the workflow service host as an extension to the behavior.","pos":[5122,5217]},{"content":"This sample code below shows how to read a tracking profile from configuration file.","pos":[5224,5308]},{"content":"This sample code shows how to add a tracking profile to a workflow host.","pos":[6613,6685]},{"pos":[7204,7334],"content":"[!NOTE]\n For more information on tracking profiles, refer to [Tracking Profiles](http://go.microsoft.com/fwlink/?LinkId=201310).","leadings":["","> "],"nodes":[{"content":"For more information on tracking profiles, refer to <bpt id=\"p1\">[</bpt>Tracking Profiles<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=201310)</ept>.","pos":[9,128],"source":"For more information on tracking profiles, refer to [Tracking Profiles](http://go.microsoft.com/fwlink/?LinkId=201310)."}]},{"pos":[7344,7386],"content":"Configuring tracking using WorkflowInvoker","linkify":"Configuring tracking using WorkflowInvoker","nodes":[{"content":"Configuring tracking using WorkflowInvoker","pos":[0,42]}]},{"content":"To configure tracking for a workflow executed using <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>, add the tracking provider as an extension to a <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> instance.","pos":[7390,7581],"source":"To configure tracking for a workflow executed using <xref:System.Activities.WorkflowInvoker>, add the tracking provider as an extension to a <xref:System.Activities.WorkflowInvoker> instance."},{"content":"The following code example is from the <bpt id=\"p1\">[</bpt>Custom Tracking<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/samples/custom-tracking.md)</ept> sample.","pos":[7582,7726],"source":" The following code example is from the [Custom Tracking](../../../docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample."},{"pos":[7899,7939],"content":"Viewing tracking records in Event Viewer","linkify":"Viewing tracking records in Event Viewer","nodes":[{"content":"Viewing tracking records in Event Viewer","pos":[0,40]}]},{"content":"There are two Event Viewer logs of particular interest to view when tracking WF execution - the Analytic log and the Debug log.","pos":[7943,8070]},{"content":"Both reside under the Microsoft&amp;#124;Windows&amp;#124;Application Server-Applications node.","pos":[8071,8158],"source":" Both reside under the Microsoft&#124;Windows&#124;Application Server-Applications node."},{"content":"Logs within this section contain events from a single application rather than events that have an impact on the entire system.","pos":[8160,8286]},{"content":"Debug trace events are written to the Debug Log.","pos":[8293,8341]},{"content":"To collect WF debug trace events in the Event Viewer, enable the Debug Log.","pos":[8342,8417]},{"content":"To open Event Viewer, click <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Run.<ept id=\"p2\">**</ept>","pos":[8427,8489],"source":"To open Event Viewer, click **Start**, and then click **Run.**"},{"content":"In the Run dialog, type <ph id=\"ph1\">`eventvwr`</ph>.","pos":[8490,8525],"source":" In the Run dialog, type `eventvwr`."},{"pos":[8535,8614],"content":"In the Event Viewer dialog, expand the <bpt id=\"p1\">**</bpt>Applications and Services Logs<ept id=\"p1\">**</ept> node.","source":"In the Event Viewer dialog, expand the **Applications and Services Logs** node."},{"pos":[8624,8709],"content":"Expand the <bpt id=\"p1\">**</bpt>Microsoft<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Windows<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Application Server-Applications<ept id=\"p3\">**</ept> nodes.","source":"Expand the **Microsoft**, **Windows**, and **Application Server-Applications** nodes."},{"pos":[8719,8828],"content":"Right-click the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> node under the <bpt id=\"p2\">**</bpt>Application Server-Applications<ept id=\"p2\">**</ept> node, and select <bpt id=\"p3\">**</bpt>Enable Log<ept id=\"p3\">**</ept>.","source":"Right-click the **Debug** node under the **Application Server-Applications** node, and select **Enable Log**."},{"content":"Execute your tracing-enabled application to generate tracing events.","pos":[8838,8906]},{"content":"Right-click the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> node and select <bpt id=\"p2\">**</bpt>Refresh.<ept id=\"p2\">**</ept>","pos":[8916,8970],"source":"Right-click the **Debug** node and select **Refresh.**"},{"content":"Tracing events should be visible in the center pane.","pos":[8971,9023]},{"content":"WF 4 provides a tracking participant that writes tracking records to an ETW (Event Tracing for Windows) session.","pos":[9030,9142]},{"content":"The ETW tracking participant is configured with a tracking profile to subscribe to tracking records.","pos":[9143,9243]},{"content":"When tracking is enabled, errors tracking records are emitted to ETW.","pos":[9245,9314]},{"content":"ETW tracking events (between the range of 100-113) corresponding to the tracking events emitted by the ETW tracking participant are written to the Analytic Log.","pos":[9315,9475]},{"content":"To view tracking records, follow these steps.","pos":[9482,9527]},{"content":"To open Event Viewer, click <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Run.<ept id=\"p2\">**</ept>","pos":[9537,9599],"source":"To open Event Viewer, click **Start**, and then click **Run.**"},{"content":"In the Run dialog, type <ph id=\"ph1\">`eventvwr`</ph>.","pos":[9600,9635],"source":" In the Run dialog, type `eventvwr`."},{"pos":[9645,9724],"content":"In the Event Viewer dialog, expand the <bpt id=\"p1\">**</bpt>Applications and Services Logs<ept id=\"p1\">**</ept> node.","source":"In the Event Viewer dialog, expand the **Applications and Services Logs** node."},{"pos":[9734,9819],"content":"Expand the <bpt id=\"p1\">**</bpt>Microsoft<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Windows<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Application Server-Applications<ept id=\"p3\">**</ept> nodes.","source":"Expand the **Microsoft**, **Windows**, and **Application Server-Applications** nodes."},{"pos":[9829,9941],"content":"Right-click the <bpt id=\"p1\">**</bpt>Analytic<ept id=\"p1\">**</ept> node under the <bpt id=\"p2\">**</bpt>Application Server-Applications<ept id=\"p2\">**</ept> node, and select <bpt id=\"p3\">**</bpt>Enable Log<ept id=\"p3\">**</ept>.","source":"Right-click the **Analytic** node under the **Application Server-Applications** node, and select **Enable Log**."},{"content":"Execute your tracking-enabled application to generate tracking records.","pos":[9951,10022]},{"content":"Right-click the <bpt id=\"p1\">**</bpt>Analytic<ept id=\"p1\">**</ept> node and select <bpt id=\"p2\">**</bpt>Refresh.<ept id=\"p2\">**</ept>","pos":[10032,10089],"source":"Right-click the **Analytic** node and select **Refresh.**"},{"content":"Tracking records should be visible in the center pane.","pos":[10090,10144]},{"content":"The following image shows tracking events in the event viewer.","pos":[10151,10213]},{"pos":[10220,10365],"content":"<bpt id=\"p1\">![</bpt>Event Viewer showing tracking records<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../docs/framework/windows-workflow-foundation/media/trackingeventviewer.PNG \"</bpt>TrackingEventViewer<ept id=\"p2\">\")</ept>","source":"![Event Viewer showing tracking records](../../../docs/framework/windows-workflow-foundation/media/trackingeventviewer.PNG \"TrackingEventViewer\")"},{"pos":[10375,10422],"content":"Registering an application-specific provider ID","linkify":"Registering an application-specific provider ID","nodes":[{"content":"Registering an application-specific provider ID","pos":[0,47]}]},{"content":"If events need to be written to a specific application log, follow these steps to register the new provider manifest.","pos":[10426,10543]},{"content":"Declare the provider ID in the application configuration file.","pos":[10553,10615]},{"pos":[10786,11102],"content":"Copy the manifest file from %windir%\\Microsoft.NET\\Framework<ph id=\"ph1\">\\\\</ph>&lt;latest version of <ph id=\"ph2\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph>&gt;\\Microsoft.Windows.ApplicationServer.Applications.man to a temporary location, and rename it to Microsoft.Windows.ApplicationServer.Applications_Provider1.man","source":"Copy the manifest file from %windir%\\Microsoft.NET\\Framework\\\\<latest version of [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]>\\Microsoft.Windows.ApplicationServer.Applications.man to a temporary location, and rename it to Microsoft.Windows.ApplicationServer.Applications_Provider1.man"},{"content":"Change the GUID in the manifest file to the new GUID.","pos":[11112,11165]},{"content":"Change the provider name if you do not want to uninstall the default provider.","pos":[11320,11398]},{"content":"If you changed the provider name in the previous step, change the channel names in the manifest file to the new provider name.","pos":[11553,11679]},{"content":"Generate the resource DLL by following these steps.","pos":[13194,13245]},{"content":"Install the Windows SDK.","pos":[13259,13283]},{"content":"The Windows SDK includes the message compiler (<bpt id=\"p1\">[</bpt>mc.exe<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=184606)</ept>) and resource compiler (<bpt id=\"p2\">[</bpt>rc.exe<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=184605)</ept>).","pos":[13284,13468],"source":" The Windows SDK includes the message compiler ([mc.exe](http://go.microsoft.com/fwlink/?LinkId=184606)) and resource compiler ([rc.exe](http://go.microsoft.com/fwlink/?LinkId=184605))."},{"content":"In a Windows SDK command prompt, run mc.exe on the new manifest file.","pos":[13482,13551]},{"content":"Run rc.exe on the resource file generated in the previous step.","pos":[13679,13742]},{"content":"Create an empty cs file called NewProviderReg.cs.","pos":[13870,13919]},{"content":"Create a resource DLL using the C# compiler.","pos":[13933,13977]},{"pos":[14211,14363],"content":"Change the resource and message dl namel in the manifest file from <ph id=\"ph1\">`Microsoft.Windows.ApplicationServer.Applications.Provider1.man`</ph> to the new dll name.","source":"Change the resource and message dl namel in the manifest file from `Microsoft.Windows.ApplicationServer.Applications.Provider1.man` to the new dll name."},{"pos":[14803,14890],"content":"Use <bpt id=\"p1\">[</bpt>wevtutil<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=184608)</ept> to register the manifest.","source":"Use [wevtutil](http://go.microsoft.com/fwlink/?LinkId=184608) to register the manifest."},{"pos":[15015,15023],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Windows Server App Fabric Monitoring<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=201273)</ept><ph id=\"ph1\"> </ph>","pos":[15027,15113],"source":"[Windows Server App Fabric Monitoring](http://go.microsoft.com/fwlink/?LinkId=201273) "},{"content":"<bpt id=\"p1\">[</bpt>Monitoring Applications with App Fabric<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=201275)</ept>","pos":[15117,15205],"source":"[Monitoring Applications with App Fabric](http://go.microsoft.com/fwlink/?LinkId=201275)"}]}