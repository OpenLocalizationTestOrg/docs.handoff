{"content":"---\ntitle: \"COM Interop Sample: .NET Client and COM Server | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"interoperation with unmanaged code, samples\"\n  - \"COM interop, samples\"\nms.assetid: a3f752bb-8945-4e1b-8163-71def6e9f137\ncaps.latest.revision: 9\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# COM Interop Sample: .NET Client and COM Server\nThis sample demonstrates how a [.NET client](#cpconcominteropsamplenetclientcomserveranchor1), built to access a [COM server](#cpconcominteropsamplenetclientcomserveranchor2), creates an instance of a COM coclass and calls class members to perform mortgage calculations.  \n  \n In this example, the client creates and calls an instance of the **Loan** coclass, passes four arguments (one of those four being equal to zero) to the instance, and displays the computations. Code fragments from this sample appear throughout this section.  \n  \n<a name=\"cpconcominteropsamplenetclientcomserveranchor1\"></a>   \n## .NET Client  \n  \n```vb  \nImports System  \nImports Microsoft.VisualBasic  \nImports LoanLib  \n  \nPublic Class LoanApp  \n  \n    Public Shared Sub Main()  \n        Dim Args As String()  \n        Args = System.Environment.GetCommandLineArgs()  \n  \n        Dim ln As New Loan()  \n  \n        If Args.Length < 5 Then  \n            Console.WriteLine(\"Usage: ConLoan Balance Rate Term Payment\")  \n            Console.WriteLine(\" Either Balance, Rate, Term, or Payment \" _  \n                                & \"must be 0\")  \n            Exit Sub  \n        End If  \n  \n        ln.OpeningBalance = Convert.ToDouble(Args(1))  \n        ln.Rate = Convert.ToDouble(Args(2)) / 100.0  \n        ln.Term = Convert.ToInt16(Args(3))  \n        ln.Payment = Convert.ToDouble(Args(4))  \n  \n        If ln.OpeningBalance = 0.0 Then  \n            ln.ComputeOpeningBalance()  \n        End If  \n        If ln.Rate = 0.0 Then  \n            ln.ComputeRate()  \n        End If  \n        If ln.Term = 0 Then  \n            ln.ComputeTerm()  \n        End If  \n        If ln.Payment = 0.0 Then  \n            ln.ComputePayment()  \n        End If   \n        Console.WriteLine(\"Balance = {0,10:0.00}\", ln.OpeningBalance)  \n        Console.WriteLine(\"Rate    = {0,10:0.0%}\", ln.Rate)  \n        Console.WriteLine(\"Term    = {0,10:0.00}\", ln.Term)  \n        Console.WriteLine(\"Payment = {0,10:0.00}\" & ControlChars.Cr, _  \n                          ln.Payment)  \n  \n        Dim MorePmts As Boolean  \n        Dim Balance As Double = 0.0  \n        Dim Principal As Double = 0.0  \n        Dim Interest As Double = 0.0  \n  \n        Console.WriteLine(\"{0,4}{1,10}{2,12}{3,10}{4,12}\", _  \n           \"Nbr\", \"Payment\", \"Principal\", \"Interest\", \"Balance\")  \n        Console.WriteLine(\"{0,4}{1,10}{2,12}{3,10}{4,12}\", _  \n           \"---\", \"-------\", \"---------\", \"--------\", \"-------\")  \n  \n        MorePmts = ln.GetFirstPmtDistribution(ln.Payment, Balance, _  \n           Principal, Interest)  \n  \n        Dim PmtNbr As Short  \n  \n        While MorePmts  \n  \n            Console.WriteLine(\"{0,4}{1,10:0.00}{2,12:0.00}{3,10:0.00}\" _  \n              & \"{4,12:0.00}\", PmtNbr, ln.Payment, Principal, Interest,  \n              Balance)  \n            MorePmts = ln.GetNextPmtDistribution(ln.Payment, Balance, _  \n              Principal, Interest)  \n            PmtNbr += CShort(1)  \n        End While  \n    End Sub  \nEnd Class  \n  \n```  \n  \n```csharp  \nusing System;  \nusing LoanLib;  \n  \npublic class LoanApp {  \n   public static void Main(String[] Args) {  \n  \n      Loan ln = new Loan();  \n  \n      if (Args.Length < 4)   \n      {  \n         Console.WriteLine(\"Usage: ConLoan Balance Rate Term Payment\");  \n         Console.WriteLine(\"    Either Balance, Rate, Term, or Payment   \n            must be 0\");  \n         return;  \n      }  \n  \n      ln.OpeningBalance = Convert.ToDouble(Args[0]);  \n      ln.Rate = Convert.ToDouble(Args[1])/100.0;  \n      ln.Term = Convert.ToInt16(Args[2]);  \n      ln.Payment = Convert.ToDouble(Args[3]);  \n  \n      if (ln.OpeningBalance == 0.00) ln.ComputeOpeningBalance();  \n      if (ln.Rate == 0.00) ln.ComputeRate();  \n      if (ln.Term == 0) ln.ComputeTerm();  \n      if (ln.Payment == 0.00) ln.ComputePayment();  \n  \n      Console.WriteLine(\"Balance = {0,10:0.00}\", ln.OpeningBalance);  \n      Console.WriteLine(\"Rate    = {0,10:0.0%}\", ln.Rate);  \n      Console.WriteLine(\"Term    = {0,10:0.00}\", ln.Term);  \n      Console.WriteLine(\"Payment = {0,10:0.00}\\n\", ln.Payment);  \n  \n      bool MorePmts;  \n      double Balance = 0.0;  \n      double Principal = 0.0;  \n      double Interest = 0.0;  \n  \n      Console.WriteLine(\"{0,4}{1,10}{2,12}{3,10}{4,12}\", \"Nbr\", \"Payment\",  \n        \"Principal\", \"Interest\", \"Balance\");  \n      Console.WriteLine(\"{0,4}{1,10}{2,12}{3,10}{4,12}\", \"---\", \"-------\",  \n        \"---------\", \"--------\", \"-------\");  \n  \n      MorePmts = ln.GetFirstPmtDistribution(ln.Payment, out Balance,   \n        out Principal, out Interest);  \n  \n      for (short PmtNbr = 1; MorePmts; PmtNbr++) {  \n         Console.WriteLine(\"{0,4}{1,10:0.00}{2,12:0.00}{3,10:0.00}  \n           {4,12:0.00}\", PmtNbr, ln.Payment, Principal, Interest,  \n            Balance);  \n         MorePmts = ln.GetNextPmtDistribution(ln.Payment, ref Balance,   \n           out Principal, out Interest);   \n      }  \n    }  \n}  \n```  \n  \n<a name=\"cpconcominteropsamplenetclientcomserveranchor2\"></a>   \n## COM Server  \n  \n```cpp  \n// Loan.cpp : Implementation of CLoan  \n#include \"stdafx.h\"  \n#include \"math.h\"  \n#include \"LoanLib.h\"  \n#include \"Loan.h\"  \n  \nstatic double Round(double value, short digits);   \n  \nSTDMETHODIMP CLoan::get_OpeningBalance(double *pVal)  \n{  \n    *pVal = OpeningBalance;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::put_OpeningBalance(double newVal)  \n{  \n    OpeningBalance = newVal;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::get_Rate(double *pVal)  \n{  \n    *pVal = Rate;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::put_Rate(double newVal)  \n{  \n    Rate = newVal;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::get_Payment(double *pVal)  \n{  \n    *pVal = Payment;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::put_Payment(double newVal)  \n{  \n    Payment = newVal;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::get_Term(short *pVal)  \n{  \n    *pVal = Term;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::put_Term(short newVal)  \n{  \n    Term = newVal;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::ComputePayment(double *pVal)  \n{  \n    Payment = Round(OpeningBalance * (Rate /   \n        (1 - pow((1 + Rate), -Term))),2);  \n    *pVal = Payment;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::ComputeOpeningBalance(double *pVal)  \n{  \n    OpeningBalance = Round(Payment / (Rate /   \n        (1 - pow((1 + Rate), -Term))),2);  \n    *pVal = OpeningBalance ;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::ComputeRate(double *pVal)  \n{  \n    double DesiredPayment = Payment;  \n  \n    for (Rate = 0.001; Rate < 28.0; Rate += 0.001)  \n    {  \n        Payment = Round(OpeningBalance * (Rate /   \n         (1 - pow((1 + Rate), -Term))),2);  \n  \n        if (Payment >= DesiredPayment)  \n            break;  \n    }  \n  \n    *pVal = Rate;     \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::ComputeTerm(short *pVal)  \n{  \n    double DesiredPayment = Payment;  \n    for (Term = 1; Term < 480 ; Term ++)  \n    {  \n        Payment = Round(OpeningBalance * (Rate /   \n         (1 - pow((1 + Rate), -Term))),2);  \n        if (Payment <= DesiredPayment)  \n            break;  \n    }  \n    *pVal = Term;     \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::GetFirstPmtDistribution(double PmtAmt, double *Balance, double *PrinPortion, double *IntPortion, VARIANT_BOOL *pVal)  \n{  \n    *Balance = OpeningBalance;  \n    GetNextPmtDistribution(PmtAmt, Balance, PrinPortion, IntPortion,   \n      pVal);  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::GetNextPmtDistribution(double PmtAmt, double *Balance, double *PrinPortion, double *IntPortion, VARIANT_BOOL *pVal)  \n{  \n    *IntPortion = Round(*Balance * Rate, 2);  \n    *PrinPortion = Round(PmtAmt - *IntPortion, 2);  \n    *Balance = Round(*Balance - *PrinPortion, 2);  \n  \n    if (*Balance <= 0.0)  \n        *pVal = FALSE;  \n    else  \n        *pVal = TRUE;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::get_RiskRating(BSTR *pVal)  \n{  \n    *pVal = (BSTR)RiskRating;  \n    return S_OK;  \n}  \n  \nSTDMETHODIMP CLoan::put_RiskRating(BSTR newVal)  \n{  \n    RiskRating = newVal;  \n    return S_OK;  \n}  \nstatic double Round(double value, short digits)   \n{  \n    double factor = pow(10, digits);  \n    return floor(value * factor + 0.5)/factor;  \n}  \n```  \n  \n## See Also  \n [Exposing COM Components to the .NET Framework](../../../docs/framework/interop/exposing-com-components.md)","nodes":[{"pos":[12,75],"content":"COM Interop Sample: .NET Client and COM Server | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COM Interop Sample: .NET Client and COM Server | Microsoft Docs","pos":[0,63]}]},{"pos":[534,580],"content":"COM Interop Sample: .NET Client and COM Server","linkify":"COM Interop Sample: .NET Client and COM Server","nodes":[{"content":"COM Interop Sample: .NET Client and COM Server","pos":[0,46]}]},{"pos":[581,851],"content":"This sample demonstrates how a <bpt id=\"p1\">[</bpt>.NET client<ept id=\"p1\">](#cpconcominteropsamplenetclientcomserveranchor1)</ept>, built to access a <bpt id=\"p2\">[</bpt>COM server<ept id=\"p2\">](#cpconcominteropsamplenetclientcomserveranchor2)</ept>, creates an instance of a COM coclass and calls class members to perform mortgage calculations.","source":"This sample demonstrates how a [.NET client](#cpconcominteropsamplenetclientcomserveranchor1), built to access a [COM server](#cpconcominteropsamplenetclientcomserveranchor2), creates an instance of a COM coclass and calls class members to perform mortgage calculations."},{"content":"In this example, the client creates and calls an instance of the <bpt id=\"p1\">**</bpt>Loan<ept id=\"p1\">**</ept> coclass, passes four arguments (one of those four being equal to zero) to the instance, and displays the computations.","pos":[858,1050],"source":"In this example, the client creates and calls an instance of the **Loan** coclass, passes four arguments (one of those four being equal to zero) to the instance, and displays the computations."},{"content":"Code fragments from this sample appear throughout this section.","pos":[1051,1114]},{"pos":[1188,1199],"content":".NET Client","linkify":".NET Client","nodes":[{"content":".NET Client","pos":[0,11]}]},{"pos":[5566,5576],"content":"COM Server","linkify":"COM Server","nodes":[{"content":"COM Server","pos":[0,10]}]},{"pos":[8806,8814],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[8818,8925],"content":"<bpt id=\"p1\">[</bpt>Exposing COM Components to the .NET Framework<ept id=\"p1\">](../../../docs/framework/interop/exposing-com-components.md)</ept>","source":"[Exposing COM Components to the .NET Framework](../../../docs/framework/interop/exposing-com-components.md)"}]}