{"content":"---\ntitle: \"How to: Use SpinLock for Low-Level Synchronization | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"SpinLock, how to use\"\nms.assetid: a9ed3e4e-4f29-4207-b730-ed0a51ecbc19\ncaps.latest.revision: 15\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Use SpinLock for Low-Level Synchronization\nThe following example demonstrates how to use a <xref:System.Threading.SpinLock>.  \n  \n## Example  \n In this example, the critical section performs a minimal amount of work, which makes it a good candidate for a <xref:System.Threading.SpinLock>. Increasing the work a small amount increases the performance of the <xref:System.Threading.SpinLock> compared to a standard lock. However, there is a point at which a SpinLock becomes more expensive than a standard lock. You can use the concurrency profiling functionality in the profiling tools to see which type of lock provides better performance in your program. For more information, see [Concurrency Visualizer](/visualstudio/profiling/concurrency-visualizer).  \n  \n [!code-csharp[CDS_SpinLock#02](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinlock/cs/spinlockdemo.cs#02)]\n [!code-vb[CDS_SpinLock#02](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinlock/vb/spinlock_vb.vb#02)]  \n  \n <xref:System.Threading.SpinLock> might be useful when a lock on a shared resource is not going to be held for very long. In such cases, on multi-core computers it can be efficient for the blocked thread to spin for a few cycles until the lock is released. By spinning, the thread does not become blocked, which is a CPU-intensive process. <xref:System.Threading.SpinLock> will stop spinning under certain conditions to prevent starvation of logical processors or priority inversion on systems with Hyper-Threading.  \n  \n This example uses the <xref:System.Collections.Generic.Queue%601?displayProperty=fullName> class, which requires user synchronization for multi-threaded access. In applications that target the .NET Framework version 4, another option is to use the <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=fullName>, which does not require any user locks.  \n  \n Note the use of `false` (`False` in Visual Basic) in the call to <xref:System.Threading.SpinLock.Exit%2A>. This provides the best performance. Specify `true` (`True`)on IA64 architectures to use the memory fence, which flushes the write buffers to ensure that the lock is now available for other threads to exit.  \n  \n## See Also  \n [Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md)","nodes":[{"pos":[4,413],"embed":true,"restype":"x-metadata","content":"title: \"How to: Use SpinLock for Low-Level Synchronization | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"SpinLock, how to use\"\nms.assetid: a9ed3e4e-4f29-4207-b730-ed0a51ecbc19\ncaps.latest.revision: 15\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Use SpinLock for Low-Level Synchronization | Microsoft Docs","nodes":[{"pos":[0,67],"content":"How to: Use SpinLock for Low-Level Synchronization | Microsoft Docs","nodes":[{"content":"How to: Use SpinLock for Low-Level Synchronization | Microsoft Docs","pos":[0,67]}]}],"path":["title"]}],"yml":true},{"pos":[420,470],"content":"How to: Use SpinLock for Low-Level Synchronization","linkify":"How to: Use SpinLock for Low-Level Synchronization","nodes":[{"content":"How to: Use SpinLock for Low-Level Synchronization","pos":[0,50]}]},{"content":"The following example demonstrates how to use a <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph>.","pos":[471,552],"source":"The following example demonstrates how to use a <xref:System.Threading.SpinLock>."},{"pos":[561,568],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the critical section performs a minimal amount of work, which makes it a good candidate for a <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph>.","pos":[572,716],"source":"In this example, the critical section performs a minimal amount of work, which makes it a good candidate for a <xref:System.Threading.SpinLock>."},{"content":"Increasing the work a small amount increases the performance of the <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> compared to a standard lock.","pos":[717,846],"source":" Increasing the work a small amount increases the performance of the <xref:System.Threading.SpinLock> compared to a standard lock."},{"content":"However, there is a point at which a SpinLock becomes more expensive than a standard lock.","pos":[847,937]},{"content":"You can use the concurrency profiling functionality in the profiling tools to see which type of lock provides better performance in your program.","pos":[938,1083]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Concurrency Visualizer<ept id=\"p1\">](/visualstudio/profiling/concurrency-visualizer)</ept>.","pos":[1084,1183],"source":" For more information, see [Concurrency Visualizer](/visualstudio/profiling/concurrency-visualizer)."},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CDS_SpinLock#02<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinlock/cs/spinlockdemo.cs#02)</ept><ept id=\"p1\">]</ept>","pos":[1190,1307],"source":"[!code-csharp[CDS_SpinLock#02](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinlock/cs/spinlockdemo.cs#02)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>CDS_SpinLock#02<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinlock/vb/spinlock_vb.vb#02)</ept><ept id=\"p1\">]</ept>","pos":[1309,1426],"source":"[!code-vb[CDS_SpinLock#02](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinlock/vb/spinlock_vb.vb#02)]"},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> might be useful when a lock on a shared resource is not going to be held for very long.","pos":[1433,1553],"source":"<xref:System.Threading.SpinLock> might be useful when a lock on a shared resource is not going to be held for very long."},{"content":"In such cases, on multi-core computers it can be efficient for the blocked thread to spin for a few cycles until the lock is released.","pos":[1554,1688]},{"content":"By spinning, the thread does not become blocked, which is a CPU-intensive process.","pos":[1689,1771]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph> will stop spinning under certain conditions to prevent starvation of logical processors or priority inversion on systems with Hyper-Threading.","pos":[1772,1947],"source":" <xref:System.Threading.SpinLock> will stop spinning under certain conditions to prevent starvation of logical processors or priority inversion on systems with Hyper-Threading."},{"content":"This example uses the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Queue%601?displayProperty=fullName&gt;</ph> class, which requires user synchronization for multi-threaded access.","pos":[1954,2114],"source":"This example uses the <xref:System.Collections.Generic.Queue%601?displayProperty=fullName> class, which requires user synchronization for multi-threaded access."},{"content":"In applications that target the .NET Framework version 4, another option is to use the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=fullName&gt;</ph>, which does not require any user locks.","pos":[2115,2323],"source":" In applications that target the .NET Framework version 4, another option is to use the <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=fullName>, which does not require any user locks."},{"content":"Note the use of <ph id=\"ph1\">`false`</ph> (<ph id=\"ph2\">`False`</ph> in Visual Basic) in the call to <ph id=\"ph3\">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph>.","pos":[2330,2436],"source":"Note the use of `false` (`False` in Visual Basic) in the call to <xref:System.Threading.SpinLock.Exit%2A>."},{"content":"This provides the best performance.","pos":[2437,2472]},{"content":"Specify <ph id=\"ph1\">`true`</ph> (<ph id=\"ph2\">`True`</ph>)on IA64 architectures to use the memory fence, which flushes the write buffers to ensure that the lock is now available for other threads to exit.","pos":[2473,2642],"source":" Specify `true` (`True`)on IA64 architectures to use the memory fence, which flushes the write buffers to ensure that the lock is now available for other threads to exit."},{"pos":[2651,2659],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2663,2763],"content":"<bpt id=\"p1\">[</bpt>Threading Objects and Features<ept id=\"p1\">](../../../docs/standard/threading/threading-objects-and-features.md)</ept>","source":"[Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md)"}]}