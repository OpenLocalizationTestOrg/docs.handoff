{"content":"---\ntitle: \"^ Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords:\n  - \"vb.^\"\nhelpviewer_keywords:\n  - \"raising numbers to powers\"\n  - \"^ operator [Visual Basic], exponentiation\"\n  - \"square operator [Visual Basic]\"\n  - \"^ operator [Visual Basic]\"\n  - \"exponentiation operator [Visual Basic]\"\n  - \"exponent\"\n  - \"numbers [Visual Basic], rasing\"\n  - \"powers\"\n  - \"arithmetic operators [Visual Basic], exponentiation\"\nms.assetid: d89a1ca8-83da-4784-a87b-a9d7dceb3f62\n---\n\n# ^ Operator (Visual Basic)\n\nRaises a number to the power of another number.\n\n## Syntax\n\n```\nnumber ^ exponent\n```\n\n## Parts\n\n`number`\\\nRequired. Any numeric expression.\n\n`exponent`\\\nRequired. Any numeric expression.\n\n## Result\n\nThe result is `number` raised to the power of `exponent`, always as a `Double` value.\n\n## Supported Types\n\n`Double`. Operands of any different type are converted to `Double`.\n\n## Remarks\n\nVisual Basic always performs exponentiation in the [Double Data Type](../../../visual-basic/language-reference/data-types/double-data-type.md).\n\nThe value of `exponent` can be fractional, negative, or both.\n\nWhen more than one exponentiation is performed in a single expression, the `^` operator is evaluated as it is encountered from left to right.\n\n> [!NOTE]\n> The `^` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).\n\n## Example\n\nThe following example uses the `^` operator to raise a number to the power of an exponent. The result is the first operand raised to the power of the second.\n\n[!code-vb[VbVbalrOperators#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#20)]\n\nThe preceding example produces the following results:\n\n`exp1` is set to 4 (2 squared).\n\n`exp2` is set to 19683 (3 cubed, then that value cubed).\n\n`exp3` is set to -125 (-5 cubed).\n\n`exp4` is set to 625 (-5 to the fourth power).\n\n`exp5` is set to 2 (cube root of 8).\n\n`exp6` is set to 0.5 (1.0 divided by the cube root of 8).\n\nNote the importance of the parentheses in the expressions in the preceding example. Because of *operator precedence*, Visual Basic normally performs the `^` operator before any others, even the unary `–` operator. If `exp4` and `exp6` had been calculated without parentheses, they would have produced the following results:\n\n`exp4 = -5 ^ 4` would be calculated as –(5 to the fourth power), which would result in -625.\n\n`exp6 = 8 ^ -1.0 / 3.0` would be calculated as (8 to the –1 power, or 0.125) divided by 3.0, which would result in 0.041666666666666666666666666666667.\n\n## See also\n\n- [^= Operator](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)\n","nodes":[{"pos":[4,469],"embed":true,"restype":"x-metadata","content":"title: \"^ Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords:\n  - \"vb.^\"\nhelpviewer_keywords:\n  - \"raising numbers to powers\"\n  - \"^ operator [Visual Basic], exponentiation\"\n  - \"square operator [Visual Basic]\"\n  - \"^ operator [Visual Basic]\"\n  - \"exponentiation operator [Visual Basic]\"\n  - \"exponent\"\n  - \"numbers [Visual Basic], rasing\"\n  - \"powers\"\n  - \"arithmetic operators [Visual Basic], exponentiation\"\nms.assetid: d89a1ca8-83da-4784-a87b-a9d7dceb3f62","nodes":[{"content":"^ Operator (Visual Basic)","nodes":[{"pos":[0,25],"content":"^ Operator (Visual Basic)","nodes":[{"content":"^ Operator (Visual Basic)","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[477,502],"content":"^ Operator (Visual Basic)","linkify":"^ Operator (Visual Basic)","nodes":[{"content":"^ Operator (Visual Basic)","pos":[0,25]}]},{"content":"Raises a number to the power of another number.","pos":[504,551]},{"pos":[556,562],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[594,599],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[611,620]},{"content":"Any numeric expression.","pos":[621,644]},{"content":"Required.","pos":[658,667]},{"content":"Any numeric expression.","pos":[668,691]},{"pos":[696,702],"content":"Result","linkify":"Result","nodes":[{"content":"Result","pos":[0,6]}]},{"pos":[704,789],"content":"The result is <ph id=\"ph1\">`number`</ph> raised to the power of <ph id=\"ph2\">`exponent`</ph>, always as a <ph id=\"ph3\">`Double`</ph> value.","source":"The result is `number` raised to the power of `exponent`, always as a `Double` value."},{"pos":[794,809],"content":"Supported Types","linkify":"Supported Types","nodes":[{"content":"Supported Types","pos":[0,15]}]},{"content":"<ph id=\"ph1\">`Double`</ph>.","pos":[811,820],"source":"`Double`."},{"content":"Operands of any different type are converted to <ph id=\"ph1\">`Double`</ph>.","pos":[821,878],"source":" Operands of any different type are converted to `Double`."},{"pos":[883,890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[892,1035],"content":"Visual Basic always performs exponentiation in the <bpt id=\"p1\">[</bpt>Double Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>.","source":"Visual Basic always performs exponentiation in the [Double Data Type](../../../visual-basic/language-reference/data-types/double-data-type.md)."},{"pos":[1037,1098],"content":"The value of <ph id=\"ph1\">`exponent`</ph> can be fractional, negative, or both.","source":"The value of `exponent` can be fractional, negative, or both."},{"pos":[1100,1241],"content":"When more than one exponentiation is performed in a single expression, the <ph id=\"ph1\">`^`</ph> operator is evaluated as it is encountered from left to right.","source":"When more than one exponentiation is performed in a single expression, the `^` operator is evaluated as it is encountered from left to right."},{"pos":[1245,1664],"content":"[!NOTE]\nThe `^` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":"The `^` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[8,417],"nodes":[{"content":"The <ph id=\"ph1\">`^`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[0,158],"source":"The `^` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[159,267]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[268,409],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[1669,1676],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`^`</ph> operator to raise a number to the power of an exponent.","pos":[1678,1768],"source":"The following example uses the `^` operator to raise a number to the power of an exponent."},{"content":"The result is the first operand raised to the power of the second.","pos":[1769,1835]},{"content":"The preceding example produces the following results:","pos":[1956,2009]},{"pos":[2011,2042],"content":"<ph id=\"ph1\">`exp1`</ph> is set to 4 (2 squared).","source":"`exp1` is set to 4 (2 squared)."},{"pos":[2044,2100],"content":"<ph id=\"ph1\">`exp2`</ph> is set to 19683 (3 cubed, then that value cubed).","source":"`exp2` is set to 19683 (3 cubed, then that value cubed)."},{"pos":[2102,2135],"content":"<ph id=\"ph1\">`exp3`</ph> is set to -125 (-5 cubed).","source":"`exp3` is set to -125 (-5 cubed)."},{"pos":[2137,2183],"content":"<ph id=\"ph1\">`exp4`</ph> is set to 625 (-5 to the fourth power).","source":"`exp4` is set to 625 (-5 to the fourth power)."},{"pos":[2185,2221],"content":"<ph id=\"ph1\">`exp5`</ph> is set to 2 (cube root of 8).","source":"`exp5` is set to 2 (cube root of 8)."},{"pos":[2223,2280],"content":"<ph id=\"ph1\">`exp6`</ph> is set to 0.5 (1.0 divided by the cube root of 8).","source":"`exp6` is set to 0.5 (1.0 divided by the cube root of 8)."},{"content":"Note the importance of the parentheses in the expressions in the preceding example.","pos":[2282,2365]},{"content":"Because of <bpt id=\"p1\">*</bpt>operator precedence<ept id=\"p1\">*</ept>, Visual Basic normally performs the <ph id=\"ph1\">`^`</ph> operator before any others, even the unary <ph id=\"ph2\">`–`</ph> operator.","pos":[2366,2495],"source":" Because of *operator precedence*, Visual Basic normally performs the `^` operator before any others, even the unary `–` operator."},{"content":"If <ph id=\"ph1\">`exp4`</ph> and <ph id=\"ph2\">`exp6`</ph> had been calculated without parentheses, they would have produced the following results:","pos":[2496,2605],"source":" If `exp4` and `exp6` had been calculated without parentheses, they would have produced the following results:"},{"pos":[2607,2699],"content":"<ph id=\"ph1\">`exp4 = -5 ^ 4`</ph> would be calculated as –(5 to the fourth power), which would result in -625.","source":"`exp4 = -5 ^ 4` would be calculated as –(5 to the fourth power), which would result in -625."},{"pos":[2701,2852],"content":"<ph id=\"ph1\">`exp6 = 8 ^ -1.0 / 3.0`</ph> would be calculated as (8 to the –1 power, or 0.125) divided by 3.0, which would result in 0.041666666666666666666666666666667.","source":"`exp6 = 8 ^ -1.0 / 3.0` would be calculated as (8 to the –1 power, or 0.125) divided by 3.0, which would result in 0.041666666666666666666666666666667."},{"pos":[2857,2865],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2869,2972],"content":"<bpt id=\"p1\">[</bpt>^= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)</ept>","source":"[^= Operator](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)"},{"pos":[2975,3073],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[3076,3188],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[3191,3315],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[3318,3465],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"}]}