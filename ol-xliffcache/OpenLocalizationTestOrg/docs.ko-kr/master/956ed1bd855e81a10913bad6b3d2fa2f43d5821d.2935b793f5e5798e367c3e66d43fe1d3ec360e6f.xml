{"content":"---\ntitle: \"How to: Ping a Host | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"Ping\"\nms.assetid: bbf20f5b-eca1-4661-af04-cb8837f9af05\ncaps.latest.revision: 4\nauthor: \"mcleblanc\"\nms.author: \"markl\"\nmanager: \"markl\"\n---\n# How to: Ping a Host\nThis sample shows how to ping a remote host.  \n  \n## Example  \n  \n```  \nusing System;  \nusing System.Text;  \nusing System.Net;  \nusing System.Net.NetworkInformation;  \nusing System.ComponentModel;  \nusing System.Threading;  \n  \nnamespace Examples.System.Net.NetworkInformation.PingTest  \n{  \n    public class PingExample  \n    {  \n        public static void Main (string[] args)  \n        {  \n            if (args.Length == 0)  \n                throw new ArgumentException (\"Ping needs a host or IP Address.\");  \n  \n            string who = args[0];  \n            AutoResetEvent waiter = new AutoResetEvent (false);  \n  \n            Ping pingSender = new Ping ();  \n  \n            // When the PingCompleted event is raised,  \n            // the PingCompletedCallback method is called.  \n            pingSender.PingCompleted += new PingCompletedEventHandler (PingCompletedCallback);  \n  \n            // Create a buffer of 32 bytes of data to be transmitted.  \n            string data = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";  \n            byte[] buffer = Encoding.ASCII.GetBytes (data);  \n  \n            // Wait 12 seconds for a reply.  \n            int timeout = 12000;  \n  \n            // Set options for transmission:  \n            // The data can go through 64 gateways or routers  \n            // before it is destroyed, and the data packet  \n            // cannot be fragmented.  \n            PingOptions options = new PingOptions (64, true);  \n  \n            Console.WriteLine (\"Time to live: {0}\", options.Ttl);  \n            Console.WriteLine (\"Don't fragment: {0}\", options.DontFragment);  \n  \n            // Send the ping asynchronously.  \n            // Use the waiter as the user token.  \n            // When the callback completes, it can wake up this thread.  \n            pingSender.SendAsync(who, timeout, buffer, options, waiter);  \n  \n            // Prevent this example application from ending.  \n            // A real application should do something useful  \n            // when possible.  \n            waiter.WaitOne ();  \n            Console.WriteLine (\"Ping example completed.\");  \n        }  \n  \n        public static void PingCompletedCallback (object sender, PingCompletedEventArgs e)  \n        {  \n            // If the operation was canceled, display a message to the user.  \n            if (e.Cancelled)  \n            {  \n                Console.WriteLine (\"Ping canceled.\");  \n  \n                // Let the main thread resume.   \n                // UserToken is the AutoResetEvent object that the main thread   \n                // is waiting for.  \n                ((AutoResetEvent)e.UserState).Set ();  \n            }  \n  \n            // If an error occurred, display the exception to the user.  \n            if (e.Error != null)  \n            {  \n                Console.WriteLine (\"Ping failed:\");  \n                Console.WriteLine (e.Error.ToString ());  \n  \n                // Let the main thread resume.   \n                ((AutoResetEvent)e.UserState).Set();  \n            }  \n  \n            PingReply reply = e.Reply;  \n  \n            DisplayReply (reply);  \n  \n            // Let the main thread resume.  \n            ((AutoResetEvent)e.UserState).Set();  \n        }  \n  \n        public static void DisplayReply (PingReply reply)  \n        {  \n            if (reply == null)  \n                return;  \n  \n            Console.WriteLine (\"ping status: {0}\", reply.Status);  \n            if (reply.Status == IPStatus.Success)  \n            {  \n                Console.WriteLine (\"Address: {0}\", reply.Address.ToString ());  \n                Console.WriteLine (\"RoundTrip time: {0}\", reply.RoundtripTime);  \n                Console.WriteLine (\"Time to live: {0}\", reply.Options.Ttl);  \n                Console.WriteLine (\"Don't fragment: {0}\", reply.Options.DontFragment);  \n                Console.WriteLine (\"Buffer size: {0}\", reply.Buffer.Length);  \n            }  \n        }  \n    }  \n}  \n```  \n  \n## Compiling the Code  \n This example requires:  \n  \n-   References to the **System.Net** namespace.","nodes":[{"pos":[12,48],"content":"How to: Ping a Host | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Ping a Host | Microsoft Docs","pos":[0,36]}]},{"pos":[404,423],"content":"How to: Ping a Host","linkify":"How to: Ping a Host","nodes":[{"content":"How to: Ping a Host","pos":[0,19]}]},{"content":"This sample shows how to ping a remote host.","pos":[424,468]},{"pos":[477,484],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4365,4383],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"This example requires:","pos":[4387,4409]},{"pos":[4419,4462],"content":"References to the <bpt id=\"p1\">**</bpt>System.Net<ept id=\"p1\">**</ept> namespace.","source":"References to the **System.Net** namespace."}]}