<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="delegation-and-impersonation-with-wcf.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">563679e88bd8963b93780c30bd91cd1e9c8f25d7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\delegation-and-impersonation-with-wcf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f7abb1debe9158325ab41a6d8c694a5b17c3d36</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d8c16d86e5642c8bccf3872c5b2785412db5c69</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Delegation and Impersonation with WCF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Delegation and Impersonation with WCF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Impersonation<ept id="p1">*</ept> is a common technique that services use to restrict client access to a service domain's resources.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service domain resources can either be machine resources, such as local files (impersonation), or a resource on another machine, such as a file share (delegation).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a sample application, see <bpt id="p1">[</bpt>Impersonating the Client<ept id="p1">](../../../../docs/framework/wcf/samples/impersonating-the-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For an example of how to use impersonation, see <bpt id="p1">[</bpt>How to: Impersonate a Client on a Service<ept id="p1">](../../../../docs/framework/wcf/how-to-impersonate-a-client-on-a-service.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Be aware that when impersonating a client on a service, the service runs with the client's credentials, which may have higher privileges than the server process.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Typically, clients call a service to have the service perform some action on the client’s behalf.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Impersonation allows the service to act as the client while performing the action.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Delegation allows a front-end service to forward the client’s request to a back-end service in such a way that the back-end service can also impersonate the client.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Impersonation is most commonly used as a way of checking whether a client is authorized to perform a particular action, while delegation is a way of flowing impersonation capabilities, along with the client’s identity, to a back-end service.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Delegation is a Windows domain feature that can be used when Kerberos-based authentication is performed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Delegation is distinct from identity flow and, because delegation transfers the ability to impersonate the client without possession of the client’s password, it is a much higher privileged operation than identity flow.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Both impersonation and delegation require that the client have a Windows identity.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If a client does not possess a Windows identity, then the only option available is to flow the client’s identity to the second service.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Impersonation Basics</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> supports impersonation for a variety of client credentials.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This topic describes service model support for impersonating the caller during the implementation of a service method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Also discussed are common deployment scenarios involving impersonation and SOAP security and <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> options in these scenarios.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This topic focuses on impersonation and delegation in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> when using SOAP security.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can also use impersonation and delegation with <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> when using transport security, as described in <bpt id="p1">[</bpt>Using Impersonation with Transport Security<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-impersonation-with-transport-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Two Methods</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> SOAP security has two distinct methods for performing impersonation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The method used depends on the binding.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>One is impersonation from a Windows token obtained from the Security Support Provider Interface (SSPI) or Kerberos authentication, which is then cached on the service.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The second is impersonation from a Windows token obtained from the Kerberos extensions, collectively called <bpt id="p1">*</bpt>Service-for-User<ept id="p1">*</ept> (S4U).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Cached Token Impersonation</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can perform cached-token impersonation with the following:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.WSDualHttpBinding&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.NetTcpBinding&gt;</ph> with a Windows client credential.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph> with a <ph id="ph2">&lt;xref:System.ServiceModel.BasicHttpSecurityMode&gt;</ph> set to the <ph id="ph3">&lt;xref:System.ServiceModel.BasicHttpSecurityMode&gt;</ph> credential, or any other standard binding where the client presents a user name credential that the service can map to a valid Windows account.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CustomBinding&gt;</ph> that uses a Windows client credential with the <ph id="ph2">`requireCancellation`</ph> set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(The property is available on the following classes: <ph id="ph1">&lt;xref:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters&gt;</ph>.) If a secure conversation is used on the binding, it must also have the <ph id="ph4">`requireCancellation`</ph> property set to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CustomBinding&gt;</ph> where the client presents a user name credential.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If secure conversation is used on the binding, it must also have the <ph id="ph1">`requireCancellation`</ph> property set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>S4U-Based Impersonation</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can perform S4U-based impersonation with the following:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.WSDualHttpBinding&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.NetTcpBinding&gt;</ph> with a certificate client credential that the service can map to a valid Windows account.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CustomBinding&gt;</ph> that uses a Windows client credential with the <ph id="ph2">`requireCancellation`</ph> property set to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CustomBinding&gt;</ph> that uses a user name or Windows client credential and secure conversation with the <ph id="ph2">`requireCancellation`</ph> property set to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The extent to which the service can impersonate the client depends on the privileges the service account holds when it attempts impersonation, the type of impersonation used, and possibly the extent of impersonation the client permits.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When the client and service are running on the same computer and the client is running under a system account (for example, <ph id="ph1">`Local System`</ph> or <ph id="ph2">`Network Service`</ph>), the client cannot be impersonated when a secure session is established with stateful Security Context tokens.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A Windows Form or console application typically runs under the currently logged-in account, so that account can be impersonated by default.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, when the client is an <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> page and that page is hosted in <ph id="ph2">[!INCLUDE[iis601](../../../../includes/iis601-md.md)]</ph> or <ph id="ph3">[!INCLUDE[iisver](../../../../includes/iisver-md.md)]</ph>, then the client does run under the <ph id="ph4">`Network Service`</ph> account by default.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>All of the system-provided bindings that support secure sessions use a stateless security context token (SCT) by default.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, if the client is an <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> page, and secure sessions with stateful SCTs are used, the client cannot be impersonated.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> using stateful SCTs in a secure session, see <bpt id="p1">[</bpt>How to: Create a Security Context Token for a Secure Session<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-security-context-token-for-a-secure-session.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Impersonation in a Service Method: Declarative Model</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Most impersonation scenarios involve executing the service method in the caller context.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides an impersonation feature that makes this easy to do by allowing the user to specify the impersonation requirement in the <ph id="ph2">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, in the following code, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> infrastructure impersonates the caller before executing the <ph id="ph2">`Hello`</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Any attempt to access native resources inside the <ph id="ph1">`Hello`</ph> method succeed only if the access control list (ACL) of the resource allows the caller access privileges.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To enable impersonation, set the <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A&gt;</ph> property to one of the <ph id="ph2">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph> enumeration values, either <ph id="ph3">&lt;xref:System.ServiceModel.ImpersonationOption?displayProperty=fullName&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ImpersonationOption?displayProperty=fullName&gt;</ph>, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When a service has higher credentials than the remote client, the credentials of the service are used if the <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>That is, if a low-privileged user provides its credentials, a higher-privileged service executes the method with the credentials of the service, and can use resources that the low-privileged user would otherwise not be able to use.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> infrastructure can impersonate the caller only if the caller is authenticated with credentials that can be mapped to a Windows user account.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the service is configured to authenticate using a credential that cannot be mapped to a Windows account, the service method is not executed.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>On <ph id="ph1">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>, impersonation fails if a stateful SCT is created, resulting in an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Unsupported Scenarios<ept id="p1">](../../../../docs/framework/wcf/feature-details/unsupported-scenarios.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Impersonation in a Service Method: Imperative Model</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Sometimes a caller does not need to impersonate the entire service method to function, but for only a portion of it.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In this case, obtain the Windows identity of the caller inside the service method and imperatively perform the impersonation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Do this by using the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceSecurityContext.WindowsIdentity%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph> to return an instance of the <ph id="ph3">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> class and calling the <ph id="ph4">&lt;xref:System.Security.Principal.WindowsIdentity.Impersonate%2A&gt;</ph> method before using the instance.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Be sure to use the <ph id="ph1">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph><ph id="ph2">`Using`</ph> statement or the C# <ph id="ph3">`using`</ph> statement to automatically revert the impersonation action.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you do not use the statement, or if you use a programming language other than <ph id="ph1">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph> or C#, be sure to revert the impersonation level.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Failure to do this can form the basis for denial of service and elevation of privilege attacks.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Impersonation for All Service Methods</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In some cases, you must perform all the methods of a service in the caller’s context.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Instead of explicitly enabling this feature on a per-method basis, use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>As shown in the following code, set the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior&gt;</ph> is retrieved from the collections of behaviors of the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Also note that the <ph id="ph1">`Impersonation`</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph> applied to each method must also be set to either <ph id="ph3">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following table describes <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> behavior for all possible combinations of <ph id="ph2">`ImpersonationOption`</ph> and <ph id="ph3">`ImpersonateCallerForAllServiceOperations`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Required</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> impersonates the caller</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not impersonate the caller</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Allowed</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> impersonates the caller</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>NotAllowed</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not impersonate the caller</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>NotAllowed</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Disallowed.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>(An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.)</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Impersonation Level Obtained from Windows Credentials and Cached Token Impersonation</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In some scenarios the client has partial control over the level of impersonation the service performs when a Windows client credential is used.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>One scenario occurs when the client specifies an Anonymous impersonation level.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The other occurs when performing impersonation with a cached token.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This is done by setting the <ph id="ph1">&lt;xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.Security.WindowsClientCredential&gt;</ph> class, which is accessed as a property of the generic <ph id="ph3">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Specifying an impersonation level of Anonymous causes the client to log on to the service anonymously.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The service must therefore allow anonymous logons, regardless of whether impersonation is performed.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The client can specify the impersonation level as <ph id="ph1">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, or <ph id="ph4">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Only a token at the specified level is produced, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following table specifies the impersonation level the service obtains when impersonating from a cached token.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AllowedImpersonationLevel`</ph> value</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Service has <ph id="ph1">`SeImpersonatePrivilege`</ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Service and client are capable of delegation</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Cached token <ph id="ph1">`ImpersonationLevel`</ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Anonymous</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Impersonation</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Anonymous</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Identification</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Identification</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Identification</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Impersonation</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Impersonation</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Impersonation</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Identification</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Delegation</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Delegation</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Delegation</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Impersonation</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Delegation</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Identification</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Impersonation Level Obtained from User Name Credentials and Cached Token Impersonation</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>By passing the service its user name and password, a client enables <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> to log on as that user, which is equivalent to setting the <ph id="ph2">`AllowedImpersonationLevel`</ph> property to <ph id="ph3">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>(The <ph id="ph1">`AllowedImpersonationLevel`</ph> is available on the <ph id="ph2">&lt;xref:System.ServiceModel.Security.WindowsClientCredential&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Security.HttpDigestClientCredential&gt;</ph> classes.) The following table provides the impersonation level obtained when the service receives user name credentials.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Service has <ph id="ph1">`SeImpersonatePrivilege`</ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Service and client are capable of delegation</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Cached token <ph id="ph1">`ImpersonationLevel`</ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Delegation</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Impersonation</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Identification</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Impersonation Level Obtained from S4U-Based Impersonation</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Service has <ph id="ph1">`SeTcbPrivilege`</ph></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Service has <ph id="ph1">`SeImpersonatePrivilege`</ph></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Service and client are capable of delegation</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Cached token <ph id="ph1">`ImpersonationLevel`</ph></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Impersonation</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Identification</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Identification</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Mapping a Client Certificate to a Windows Account</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>It is possible for a client to authenticate itself to a service using a certificate, and to have the service map the client to an existing account through Active Directory.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The following XML shows how to configure the service to map the certificate.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The following code shows how to configure the service.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Delegation</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To delegate to a back-end service, a service must perform Kerberos multi-leg (SSPI without NTLM fallback) or Kerberos direct authentication to the back-end service using the client’s Windows identity.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>To delegate to a back-end service, create a <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> and a channel, and then communicate through the channel while impersonating the client.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>With this form of delegation, the distance at which the back-end service can be located from the front-end service depends on the impersonation level achieved by the front-end service.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>When the impersonation level is <ph id="ph1">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, the front-end and back-end services must be running on the same machine.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>When the impersonation level is <ph id="ph1">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, the front-end and back-end services can be on separate machines or on the same machine.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Enabling delegation-level impersonation requires that Windows domain policy be configured to permit delegation.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For more information about configuring Active Directory for delegation support, see <bpt id="p1">[</bpt>Enabling Delegated Authentication<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=99690)</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>When a client authenticates to the front-end service using a user name and password that correspond to a Windows account on the back-end service, the front-end service can authenticate to the back-end service by reusing the client’s user name and password.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>This is a particularly powerful form of identity flow, because passing user name and password to the back-end service enables the back-end service to perform impersonation, but it does not constitute delegation because Kerberos is not used.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Active Directory controls on delegation do not apply to user name and password authentication.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Delegation Ability as a Function of Impersonation Level</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Impersonation level</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Service can perform cross-process delegation</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Service can perform cross-machine delegation</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to use delegation.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>How to Configure an Application to Use Constrained Delegation</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Before you can use constrained delegation, the sender, receiver, and the domain controller must be configured to do so.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The following procedure lists the steps that enable constrained delegation.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>For details about the differences between delegation and constrained delegation, see the portion of <bpt id="p1">[</bpt>Windows Server 2003 Kerberos Extensions<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=100194)</ept> that discusses constrained discussion.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>On the domain controller, clear the <bpt id="p1">**</bpt>Account is sensitive and cannot be delegated<ept id="p1">**</ept> check box for the account under which the client application is running.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>On the domain controller, select the <bpt id="p1">**</bpt>Account is trusted for delegation<ept id="p1">**</ept> check box for the account under which the client application is running.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>On the domain controller, configure the middle tier computer so that it is trusted for delegation, by clicking the <bpt id="p1">**</bpt>Trust computer for delegation<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>On the domain controller, configure the middle tier computer to use constrained delegation, by clicking the <bpt id="p1">**</bpt>Trust this computer for delegation to specified services only<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>For more detailed instructions about configuring constrained delegation, see the following topics on MSDN:</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Kerberos Delegation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=36724)</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Kerberos Protocol Transition and Constrained Delegation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=36725)</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ImpersonationOption&gt;</ph></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ServiceSecurityContext.WindowsIdentity%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior&gt;</ph></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Security.WindowsClientCredential&gt;</ph></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Impersonation with Transport Security<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-impersonation-with-transport-security.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Impersonating the Client<ept id="p1">](../../../../docs/framework/wcf/samples/impersonating-the-client.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Impersonate a Client on a Service<ept id="p1">](../../../../docs/framework/wcf/how-to-impersonate-a-client-on-a-service.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>