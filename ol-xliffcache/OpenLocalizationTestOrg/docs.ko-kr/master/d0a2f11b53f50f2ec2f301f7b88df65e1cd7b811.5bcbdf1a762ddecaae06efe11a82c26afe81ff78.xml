{"content":"---\ntitle: \"Static Class Design\"\nms.date: \"10/22/2008\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"type design guidelines, static classes\"\n  - \"class library design guidelines [.NET Framework], classes\"\n  - \"classes [.NET Framework], static\"\n  - \"static classes [.NET Framework]\"\n  - \"classes [.NET Framework], design guidelines\"\n  - \"type design guidelines, classes\"\nms.assetid: d67c14d8-c4dd-443f-affb-4ccae677c9b6\nauthor: \"KrzysztofCwalina\"\n---\n# Static Class Design\nA static class is defined as a class that contains only static members (of course besides the instance members inherited from <xref:System.Object?displayProperty=nameWithType> and possibly a private constructor). Some languages provide built-in support for static classes. In C# 2.0 and later, when a class is declared to be static, it is sealed, abstract, and no instance members can be overridden or declared.  \n  \n Static classes are a compromise between pure object-oriented design and simplicity. They are commonly used to provide shortcuts to other operations (such as <xref:System.IO.File?displayProperty=nameWithType>), holders of extension methods, or functionality for which a full object-oriented wrapper is unwarranted (such as <xref:System.Environment?displayProperty=nameWithType>).  \n  \n **✓ DO** use static classes sparingly.  \n  \n Static classes should be used only as supporting classes for the object-oriented core of the framework.  \n  \n **X DO NOT** treat static classes as a miscellaneous bucket.  \n  \n **X DO NOT** declare or override instance members in static classes.  \n  \n **✓ DO** declare static classes as sealed, abstract, and add a private instance constructor if your programming language does not have built-in support for static classes.  \n  \n *Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*  \n  \n *Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*  \n  \n## See also\n\n- [Type Design Guidelines](../../../docs/standard/design-guidelines/type.md)\n- [Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)\n","nodes":[{"pos":[4,457],"embed":true,"restype":"x-metadata","content":"title: \"Static Class Design\"\nms.date: \"10/22/2008\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"type design guidelines, static classes\"\n  - \"class library design guidelines [.NET Framework], classes\"\n  - \"classes [.NET Framework], static\"\n  - \"static classes [.NET Framework]\"\n  - \"classes [.NET Framework], design guidelines\"\n  - \"type design guidelines, classes\"\nms.assetid: d67c14d8-c4dd-443f-affb-4ccae677c9b6\nauthor: \"KrzysztofCwalina\"","nodes":[{"content":"Static Class Design","nodes":[{"pos":[0,19],"content":"Static Class Design","nodes":[{"content":"Static Class Design","pos":[0,19]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[464,483],"content":"Static Class Design","linkify":"Static Class Design","nodes":[{"content":"Static Class Design","pos":[0,19]}]},{"content":"A static class is defined as a class that contains only static members (of course besides the instance members inherited from <ph id=\"ph1\">&lt;xref:System.Object?displayProperty=nameWithType&gt;</ph> and possibly a private constructor).","pos":[484,696],"source":"A static class is defined as a class that contains only static members (of course besides the instance members inherited from <xref:System.Object?displayProperty=nameWithType> and possibly a private constructor)."},{"content":"Some languages provide built-in support for static classes.","pos":[697,756]},{"content":"In C# 2.0 and later, when a class is declared to be static, it is sealed, abstract, and no instance members can be overridden or declared.","pos":[757,895]},{"content":"Static classes are a compromise between pure object-oriented design and simplicity.","pos":[902,985]},{"content":"They are commonly used to provide shortcuts to other operations (such as <ph id=\"ph1\">&lt;xref:System.IO.File?displayProperty=nameWithType&gt;</ph>), holders of extension methods, or functionality for which a full object-oriented wrapper is unwarranted (such as <ph id=\"ph2\">&lt;xref:System.Environment?displayProperty=nameWithType&gt;</ph>).","pos":[986,1280],"source":" They are commonly used to provide shortcuts to other operations (such as <xref:System.IO.File?displayProperty=nameWithType>), holders of extension methods, or functionality for which a full object-oriented wrapper is unwarranted (such as <xref:System.Environment?displayProperty=nameWithType>)."},{"pos":[1287,1325],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use static classes sparingly.","source":"**✓ DO** use static classes sparingly."},{"content":"Static classes should be used only as supporting classes for the object-oriented core of the framework.","pos":[1332,1435]},{"pos":[1442,1502],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> treat static classes as a miscellaneous bucket.","source":"**X DO NOT** treat static classes as a miscellaneous bucket."},{"pos":[1509,1577],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> declare or override instance members in static classes.","source":"**X DO NOT** declare or override instance members in static classes."},{"pos":[1584,1755],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> declare static classes as sealed, abstract, and add a private instance constructor if your programming language does not have built-in support for static classes.","source":"**✓ DO** declare static classes as sealed, abstract, and add a private instance constructor if your programming language does not have built-in support for static classes."},{"pos":[1762,1829],"content":"<bpt id=\"p1\">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id=\"p1\">*</ept>","source":"*Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*"},{"pos":[1836,2241],"content":"<bpt id=\"p1\">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id=\"p2\">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id=\"p2\">](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id=\"p1\">*</ept>","source":"*Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*"},{"pos":[2250,2258],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2262,2336],"content":"<bpt id=\"p1\">[</bpt>Type Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/type.md)</ept>","source":"[Type Design Guidelines](../../../docs/standard/design-guidelines/type.md)"},{"pos":[2339,2419],"content":"<bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/index.md)</ept>","source":"[Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)"}]}