<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="queries-in-linq-to-dataset.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf4e36a8364ede046ac4d48827258ad049f5c2c4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\queries-in-linq-to-dataset.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3371b571bd1cc21ceade7a9af62f314d6c6b1641</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98b304e6bc23c3b5c8414372b68733c43ff5a0e1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Queries in LINQ to DataSet | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Queries in LINQ to DataSet</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A query is an expression that retrieves data from a data source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Queries are usually expressed in a specialized query language, such as SQL for relational databases and XQuery for XML.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Therefore, developers have had to learn a new query language for each type of data source or data format that they query.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinqext](../../../../includes/vbteclinqext-md.md)]</ph> offers a simpler, consistent model for working with data across various kinds of data sources and formats.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph> query, you always work with programming objects.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph> query operation consists of three actions: obtain the data source or sources, create the query, and execute the query.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Data sources that implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> generic interface can be queried through <ph id="ph2">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref:System.Data.DataTableExtensions.AsEnumerable%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> returns an object which implements the generic <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, which serves as the data source for <ph id="ph4">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> queries.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the query, you specify exactly the information that you want to retrieve from the data source.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A query can also specify how that information should be sorted, grouped, and shaped before it is returned.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph>, a query is stored in a variable.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the query is designed to return a sequence of values, the query variable itself must be a enumerable type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This query variable takes no action and returns no data; it only stores the query information.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>After you create a query you must execute that query to retrieve any data.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In a query that returns a sequence of values, the query variable itself never holds the query results and only stores the query commands.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Execution of the query is deferred until the query variable is iterated over in a <ph id="ph1">`foreach`</ph> or <ph id="ph2">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">*</bpt>deferred execution<ept id="p1">*</ept>; that is, query execution occurs some time after the query is constructed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This means that you can execute a query as often as you want to.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This is useful when, for example, you have a database that is being updated by other applications.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In your application, you can create a query to retrieve the latest information and repeatedly execute the query, returning the updated information every time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In contrast to deferred queries, which return a sequence of values, queries that return a singleton value are executed immediately.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Some examples of singleton queries are <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Linq.Enumerable.First%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These execute immediately because the query results are required to calculate the singleton result.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, in order to find the average of the query results the query must be executed so that the averaging function has input data to work with.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> methods on a query to force immediate execution of a query that does not produce a singleton value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>These techniques to force immediate execution can be useful when you want to cache the results of a query.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about deferred and immediate query execution, see <bpt id="p1">[</bpt>Getting Started with LINQ<ept id="p1">](http://msdn.microsoft.com/en-us/6cc9af04-950a-4cc3-83d4-2aeb4abe4de9)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Queries</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> queries can be formulated in two different syntaxes: query expression syntax and method-based query syntax.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Query Expression Syntax</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Query expressions are a declarative query syntax.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This syntax enables a developer to write queries in C# or Visual Basic in a format similar to SQL.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>By using query expression syntax, you can perform even complex filtering, ordering, and grouping operations on data sources with minimal code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>LINQ Query Expressions<ept id="p1">](http://msdn.microsoft.com/library/40638f19-fb46-4d26-a2d9-a383b48f5ed4)</ept> and <bpt id="p2">[</bpt>Basic Query Operations (Visual Basic)<ept id="p2">](~/docs/visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Query expression syntax is new in C# 3.0 and <ph id="ph1">[!INCLUDE[vb_orcas_long](../../../../includes/vb-orcas-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> common language runtime (CLR) cannot read the query expression syntax itself.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Therefore, at compile time, query expressions are translated to something that the CLR does understand: method calls.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These methods are referred to as the <bpt id="p1">*</bpt>standard query operators<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As a developer, you have the option of calling them directly by using method syntax, instead of using query syntax.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Query Syntax and Method Syntax in LINQ<ept id="p1">](~/docs/csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information about how to use the standard query operators, see <bpt id="p1">[</bpt>NOT IN BUILD: LINQ General Programming Guide<ept id="p1">](http://msdn.microsoft.com/en-us/609c7a6b-cbdd-429d-99f3-78d13d3bc049)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to return all the rows from <ph id="ph2">`Product`</ph> table and display the product names.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Method-Based Query Syntax</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The other way to formulate <ph id="ph1">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph> queries is by using method-based queries.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The method-based query syntax is a sequence of direct method calls to <ph id="ph1">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph> operator methods, passing lambda expressions as the parameters.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to return all the rows from <ph id="ph2">`Product`</ph> and display the product names.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Composing Queries</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>As mentioned earlier in this topic, the query variable itself only stores the query commands when the query is designed to return a sequence of values.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the query does not contain a method that will cause immediate execution, the actual execution of the query is deferred until you iterate over the query variable in a <ph id="ph1">`foreach`</ph> or <ph id="ph2">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Deferred execution enables multiple queries to be combined or a query to be extended.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When a query is extended, it is modified to include the new operations, and the eventual execution will reflect the changes.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the following example, the first query returns all the products.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The second query extends the first by using <ph id="ph1">`Where`</ph> to return all the products of size "L":</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>After a query has been executed, no additional queries can be composed, and all subsequent queries will use the in-memory <ph id="ph1">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph> operators.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Query execution will occur when you iterate over the query variable in a <ph id="ph1">`foreach`</ph> or <ph id="ph2">`For Each`</ph> statement, or by a call to one of the <ph id="ph3">[!INCLUDE[vbteclinq](../../../../includes/vbteclinq-md.md)]</ph> conversion operators that cause immediate execution.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These operators include the following: <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Linq.Enumerable.ToDictionary%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the following example, the first query returns all the products ordered by list price.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> method is used to force immediate query execution:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming Guide<ept id="p1">](../../../../docs/framework/data/adonet/programming-guide-linq-to-dataset.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Querying DataSets<ept id="p1">](../../../../docs/framework/data/adonet/querying-datasets-linq-to-dataset.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started with LINQ in C#<ept id="p1">](~/docs/csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started with LINQ in Visual Basic<ept id="p1">](~/docs/visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>