<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="developing-windows-forms-controls-at-design-time.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">641a6c1c99169c6836c33b3e84b2ae02aba298d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\developing-windows-forms-controls-at-design-time.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06e885bd89a5a430edf3eff6e3bc7cd1c3d7ca6c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93332d4540d6a6c36aa1e1f079e18e6add75b7d2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Developing Windows Forms Controls at Design Time</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Developing Windows Forms Controls at Design Time</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For control authors, the .NET Framework provides a wealth of control authoring technology.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Authors are no longer limited to designing composite controls that act as a collection of preexisting controls.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Through inheritance, you can create your own controls from preexisting composite controls or preexisting Windows Forms controls.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can also design your own controls that implement custom painting.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These options enable a great deal of flexibility to the design and functionality of the visual interface.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To take advantage of these features, you should be familiar with object-based programming concepts.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is not necessary to have a thorough understanding of inheritance, but you may find it useful to refer to <bpt id="p1">[</bpt>Inheritance basics (Visual Basic)<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you want to create custom controls to use on Web Forms, see <bpt id="p1">[</bpt>Developing Custom ASP.NET Server Controls<ept id="p1">](https://docs.microsoft.com/previous-versions/aspnet/zt27tfhy(v=vs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Authoring a Composite Control with Visual Basic<ept id="p1">](walkthrough-authoring-a-composite-control-with-visual-basic.md)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Shows how to create a simple composite control in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Authoring a Composite Control with Visual C#<ept id="p1">](walkthrough-authoring-a-composite-control-with-visual-csharp.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Shows how to create a simple composite control in C#.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual Basic<ept id="p1">](walkthrough-inheriting-from-a-windows-forms-control-with-visual-basic.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Shows how to create a simple Windows Forms control using inheritance in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual C#<ept id="p1">](walkthrough-inheriting-from-a-windows-forms-control-with-visual-csharp.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Shows how to create a simple Windows Forms control using inheritance in C#.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Performing Common Tasks Using Smart Tags on Windows Forms Controls<ept id="p1">](performing-common-tasks-using-smart-tags-on-wf-controls.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Shows how to use the smart tag feature on Windows Forms controls.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Serializing Collections of Standard Types with the DesignerSerializationVisibilityAttribute<ept id="p1">](serializing-collections-designerserializationvisibilityattribute.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Shows how to use the <ph id="ph1">&lt;xref:System.ComponentModel.DesignerSerializationVisibilityAttribute.Content?displayProperty=nameWithType&gt;</ph> attribute to serialize a collection.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Debugging Custom Windows Forms Controls at Design Time<ept id="p1">](walkthrough-debugging-custom-windows-forms-controls-at-design-time.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Shows how to debug the design-time behavior of a Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Creating a Windows Forms Control That Takes Advantage of Visual Studio Design-Time Features<ept id="p1">](creating-a-wf-control-design-time-features.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Shows how to tightly integrate a composite control into the design environment.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Author Controls for Windows Forms<ept id="p1">](how-to-author-controls-for-windows-forms.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Provides an overview of considerations for implementing a Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Author Composite Controls<ept id="p1">](how-to-author-composite-controls.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Shows how to create a control by inheriting from a composite control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Inherit from the UserControl Class<ept id="p1">](how-to-inherit-from-the-usercontrol-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Provides an overview of the procedure for creating a composite control.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Inherit from Existing Windows Forms Controls<ept id="p1">](how-to-inherit-from-existing-windows-forms-controls.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Shows how to create an extended control by inheriting from the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Inherit from the Control Class<ept id="p1">](how-to-inherit-from-the-control-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Provides an overview of creating an extended control.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Align a Control to the Edges of Forms at Design Time<ept id="p1">](how-to-align-a-control-to-the-edges-of-forms-at-design-time.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Shows how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> property to align your control to the edge of the form it occupies.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Display a Control in the Choose Toolbox Items Dialog Box<ept id="p1">](how-to-display-a-control-in-the-choose-toolbox-items-dialog-box.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Shows the procedure for installing your control so that it appears in the <bpt id="p1">**</bpt>Customize Toolbox<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Provide a Toolbox Bitmap for a Control<ept id="p1">](how-to-provide-a-toolbox-bitmap-for-a-control.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Shows how to use the <ph id="ph1">&lt;xref:System.Drawing.ToolboxBitmapAttribute&gt;</ph> to display an icon next to your custom control in the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Test the Run-Time Behavior of a UserControl<ept id="p1">](how-to-test-the-run-time-behavior-of-a-usercontrol.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Shows how to use the <bpt id="p1">**</bpt>UserControl Test Container<ept id="p1">**</ept> to test the behavior of a composite control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Design-Time Errors in the Windows Forms Designer<ept id="p1">](design-time-errors-in-the-windows-forms-designer.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Explains the meaning and use of the Design-Time Error List that appears in Microsoft Visual Studio when the Windows Forms designer fails to load.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Control and Component Authoring<ept id="p1">](troubleshooting-control-and-component-authoring.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Shows how to diagnose and fix common issues that can occur when you author a custom component or control.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Describes this class and has links to all of its members.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Describes this class and has links to all of its members.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Developing Custom Windows Forms Controls with the .NET Framework<ept id="p1">](developing-custom-windows-forms-controls.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Discusses how to create your own custom controls with the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Language Independence and Language-Independent Components<ept id="p1">](../../../standard/language-independence-and-language-independent-components.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Introduces the common language runtime, which is designed to simplify the creation and use of components.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An important aspect of this simplification is enhanced interoperability between components written using different programming languages.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The Common Language Specification (CLS) makes it possible to create tools and components that work with multiple programming languages.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Automatically Populating the Toolbox with Custom Components<ept id="p1">](walkthrough-automatically-populating-the-toolbox-with-custom-components.md)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Describes how to enable your component or control to be displayed in the <bpt id="p1">**</bpt>Customize Toolbox<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>