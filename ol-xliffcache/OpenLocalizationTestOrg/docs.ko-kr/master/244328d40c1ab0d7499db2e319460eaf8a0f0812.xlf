<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="cs4014.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">244328d40c1ab0d7499db2e319460eaf8a0f0812</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\compiler-messages\cs4014.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84d96ab8ca163317588d0ca6b59abdc2b6012f9c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">001ea7b3db016cf05de4252e02dca659f15557d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Compiler Warning (level 1) CS4014</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) CS4014</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Because this call is not awaited, execution of the current method continues before the call is completed.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Consider applying the 'await' operator to the result of the call.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The current method calls an async method that returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> and doesnâ€™t apply the <bpt id="p1">[</bpt>await<ept id="p1">](../../../csharp/language-reference/keywords/await.md)</ept> operator to the result.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The call to the async method starts an asynchronous task.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, because no <ph id="ph1">`await`</ph> operator is applied, the program continues without waiting for the task to complete.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In most cases, that behavior isn't what you expect.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Usually other aspects of the calling method depend on the results of the call or, minimally, the called method is expected to complete before you return from the method that contains the call.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An equally important issue is what happens to exceptions that are raised in the called async method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An exception that's raised in a method that returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or  <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is stored in the returned task.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you don't await the task or explicitly check for exceptions, the exception is lost.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you await the task, its exception is rethrown.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As a best practice, you should always await the call.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You should consider suppressing the warning only if you're sure that you don't want to wait for the asynchronous call to complete and that the called method won't raise any exceptions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In that case, you can suppress the warning by assigning the task result of the call to a variable.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows how to cause the warning, how to suppress it, and how to await the call.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the example, if you choose Call #1 or Call #2, the unawaited async method (<ph id="ph1">`CalledMethodAsync`</ph>) finishes after both its caller (<ph id="ph2">`CallingMethodAsync`</ph>) and the caller's caller (<ph id="ph3">`startButton_Click`</ph>) are complete.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The last line in the following output shows you when the called method finishes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Entry to and exit from the event handler that calls <ph id="ph1">`CallingMethodAsync`</ph> in the full example are marked in the output.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also suppress compiler warnings by using <bpt id="p1">[</bpt>#pragma warning<ept id="p1">](../../../csharp/language-reference/preprocessor-directives/preprocessor-pragma-warning.md)</ept> directives.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following Windows Presentation Foundation (WPF) application contains the methods from the previous example.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following steps set up the application.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Create a WPF application, and name it <ph id="ph1">`AsyncWarning`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the Visual Studio Code Editor, choose the <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the tab isn't visible, open the shortcut menu for MainWindow.xaml in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Replace the code in the <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> view of MainWindow.xaml with the following code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A simple window that contains a button and a text box appears in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> view of MainWindow.xaml.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about the XAML Designer, see <bpt id="p1">[</bpt>Creating a UI by using XAML Designer<ept id="p1">](/visualstudio/designers/creating-a-ui-by-using-xaml-designer-in-visual-studio)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For information about how to build your own simple UI, see the "To create a WPF application" and "To design a simple WPF MainWindow" sections of <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id="p1">](../../programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Replace the code in MainWindow.xaml.cs with the following code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The expected output appears at the end of the code.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](../../../csharp/language-reference/keywords/await.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with async and await<ept id="p1">](../../../csharp/programming-guide/concepts/async/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>