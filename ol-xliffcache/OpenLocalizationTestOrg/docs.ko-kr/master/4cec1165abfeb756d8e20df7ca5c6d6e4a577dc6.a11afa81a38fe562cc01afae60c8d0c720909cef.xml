{"content":"---\ntitle: \"While...End While Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.While\"\n  - \"vb.While...EndWhile\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"While statement, While...End While\"\n  - \"While statement\"\n  - \"While...End While statements\"\nms.assetid: b931d1ce-e8ed-44d8-a13d-92a4f5458a1e\ncaps.latest.revision: 22\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# While...End While Statement (Visual Basic)\nRuns a series of statements as long as a given condition is `True`.  \n  \n## Syntax  \n  \n```  \nWhile condition  \n    [ statements ]  \n    [ Continue While ]  \n    [ statements ]  \n    [ Exit While ]  \n    [ statements ]  \nEnd While  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`condition`|Required. `Boolean` expression. If `condition` is `Nothing`, Visual Basic treats it as `False`.|  \n|`statements`|Optional. One or more statements following `While`, which run every time `condition` is `True`.|  \n|`Continue While`|Optional. Transfers control to the next iteration of the `While` block.|  \n|`Exit While`|Optional. Transfers control out of the `While` block.|  \n|`End While`|Required. Terminates the definition of the `While` block.|  \n  \n## Remarks  \n Use a `While...End While` structure when you want to repeat a set of statements an indefinite number of times, as long as a condition remains `True`. If you want more flexibility with where you test the condition or what result you test it for, you might prefer the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md). If you want to repeat the statements a set number of times, the [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) is usually a better choice.  \n  \n> [!NOTE]\n>  The `While` keyword is also used in the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md), the [Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md) and the [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md).  \n  \n If `condition` is `True`, all of the `statements` run until the `End While` statement is encountered. Control then returns to the `While` statement, and `condition` is again checked. If `condition` is still `True`, the process is repeated. If it’s `False`, control passes to the statement that follows the `End While` statement.  \n  \n The `While` statement always checks the condition before it starts the loop. Looping continues while the condition remains `True`. If `condition` is `False` when you first enter the loop, it doesn’t run even once.  \n  \n The `condition` usually results from a comparison of two values, but it can be any expression that evaluates to a [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md) value (`True` or `False`). This expression can include a value of another data type, such as a numeric type, that has been converted to `Boolean`.  \n  \n You can nest `While` loops by placing one loop within another. You can also nest different kinds of control structures within one another. For more information, see [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md).  \n  \n## Exit While  \n The [Exit While](../../../visual-basic/language-reference/statements/exit-statement.md) statement can provide another way to exit a `While` loop. `Exit While` immediately transfers control to the statement that follows the `End While` statement.  \n  \n You typically use `Exit While` after some condition is evaluated (for example, in an `If...Then...Else` structure). You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request. You can use `Exit While` when you test for a condition that could cause an *endless loop*, which is a loop that could run an extremely large or even infinite number of times. You can then use `Exit While` to escape the loop.  \n  \n You can place any number of `Exit While` statements anywhere in the `While` loop.  \n  \n When used within nested `While` loops, `Exit While` transfers control out of the innermost loop and into the next higher level of nesting.  \n  \n The `Continue While` statement immediately transfers control to the next iteration of the loop. For more information, see [Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md).  \n  \n## Example  \n In the following example, the statements in the loop continue to run until the `index` variable is greater than 10.  \n  \n [!code-vb[VbVbalrStatements#171](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_1.vb)]  \n  \n## Example  \n The following example illustrates the use of the `Continue While` and `Exit While` statements.  \n  \n [!code-vb[VbVbalrStatements#172](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_2.vb)]  \n  \n## Example  \n The following example reads all lines in a text file. The <xref:System.IO.File.OpenText%2A> method opens the file and returns a <xref:System.IO.StreamReader> that reads the characters. In the `While` condition, the <xref:System.IO.StreamReader.Peek%2A> method of the `StreamReader` determines whether the file contains additional characters.  \n  \n [!code-vb[VbVbalrStatements#173](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_3.vb)]  \n  \n## See Also  \n [Loop Structures](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)   \n [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)   \n [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)   \n [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)   \n [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)   \n [Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md)   \n [Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md)\n","nodes":[{"pos":[4,699],"nodes":[{"content":"While...End While Statement (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,59],"content":"While...End While Statement (Visual Basic) | Microsoft Docs","nodes":[{"content":"While...End While Statement (Visual Basic) | Microsoft Docs","pos":[0,59]}]}],"pos":[6,68],"yaml":true}],"content":"title: \"While...End While Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.While\"\n  - \"vb.While...EndWhile\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"While statement, While...End While\"\n  - \"While statement\"\n  - \"While...End While statements\"\nms.assetid: b931d1ce-e8ed-44d8-a13d-92a4f5458a1e\ncaps.latest.revision: 22\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[706,748],"content":"While...End While Statement (Visual Basic)","linkify":"While...End While Statement (Visual Basic)","nodes":[{"content":"While...End While Statement (Visual Basic)","pos":[0,42]}]},{"pos":[749,816],"content":"Runs a series of statements as long as a given condition is <ph id=\"ph1\">`True`</ph>.","source":"Runs a series of statements as long as a given condition is `True`."},{"pos":[825,831],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[994,999],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1006,1010]},{"content":"Definition","pos":[1011,1021]},{"content":"Required.","pos":[1050,1059]},{"content":"<ph id=\"ph1\">`Boolean`</ph> expression.","pos":[1060,1081],"source":"`Boolean` expression."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`Nothing`</ph>, Visual Basic treats it as <ph id=\"ph3\">`False`</ph>.","pos":[1082,1145],"source":" If `condition` is `Nothing`, Visual Basic treats it as `False`."},{"content":"Optional.","pos":[1163,1172]},{"content":"One or more statements following <ph id=\"ph1\">`While`</ph>, which run every time <ph id=\"ph2\">`condition`</ph> is <ph id=\"ph3\">`True`</ph>.","pos":[1173,1258],"source":" One or more statements following `While`, which run every time `condition` is `True`."},{"content":"Optional.","pos":[1280,1289]},{"content":"Transfers control to the next iteration of the <ph id=\"ph1\">`While`</ph> block.","pos":[1290,1351],"source":" Transfers control to the next iteration of the `While` block."},{"content":"Optional.","pos":[1369,1378]},{"content":"Transfers control out of the <ph id=\"ph1\">`While`</ph> block.","pos":[1379,1422],"source":" Transfers control out of the `While` block."},{"content":"Required.","pos":[1439,1448]},{"content":"Terminates the definition of the <ph id=\"ph1\">`While`</ph> block.","pos":[1449,1496],"source":" Terminates the definition of the `While` block."},{"pos":[1506,1513],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use a <ph id=\"ph1\">`While...End While`</ph> structure when you want to repeat a set of statements an indefinite number of times, as long as a condition remains <ph id=\"ph2\">`True`</ph>.","pos":[1517,1666],"source":"Use a `While...End While` structure when you want to repeat a set of statements an indefinite number of times, as long as a condition remains `True`."},{"content":"If you want more flexibility with where you test the condition or what result you test it for, you might prefer the <bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>.","pos":[1667,1879],"source":" If you want more flexibility with where you test the condition or what result you test it for, you might prefer the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)."},{"content":"If you want to repeat the statements a set number of times, the <bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> is usually a better choice.","pos":[1880,2069],"source":" If you want to repeat the statements a set number of times, the [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) is usually a better choice."},{"pos":[2077,2419],"content":"[!NOTE]\n The `While` keyword is also used in the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md), the [Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md) and the [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md).","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">`While`</ph> keyword is also used in the <bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>, the <bpt id=\"p2\">[</bpt>Skip While Clause<ept id=\"p2\">](../../../visual-basic/language-reference/queries/skip-while-clause.md)</ept> and the <bpt id=\"p3\">[</bpt>Take While Clause<ept id=\"p3\">](../../../visual-basic/language-reference/queries/take-while-clause.md)</ept>.","pos":[9,340],"source":"The `While` keyword is also used in the [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md), the [Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md) and the [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md)."}]},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`True`</ph>, all of the <ph id=\"ph3\">`statements`</ph> run until the <ph id=\"ph4\">`End While`</ph> statement is encountered.","pos":[2426,2527],"source":"If `condition` is `True`, all of the `statements` run until the `End While` statement is encountered."},{"content":"Control then returns to the <ph id=\"ph1\">`While`</ph> statement, and <ph id=\"ph2\">`condition`</ph> is again checked.","pos":[2528,2608],"source":" Control then returns to the `While` statement, and `condition` is again checked."},{"content":"If <ph id=\"ph1\">`condition`</ph> is still <ph id=\"ph2\">`True`</ph>, the process is repeated.","pos":[2609,2665],"source":" If `condition` is still `True`, the process is repeated."},{"content":"If it’s <ph id=\"ph1\">`False`</ph>, control passes to the statement that follows the <ph id=\"ph2\">`End While`</ph> statement.","pos":[2666,2754],"source":" If it’s `False`, control passes to the statement that follows the `End While` statement."},{"content":"The <ph id=\"ph1\">`While`</ph> statement always checks the condition before it starts the loop.","pos":[2761,2837],"source":"The `While` statement always checks the condition before it starts the loop."},{"content":"Looping continues while the condition remains <ph id=\"ph1\">`True`</ph>.","pos":[2838,2891],"source":" Looping continues while the condition remains `True`."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`False`</ph> when you first enter the loop, it doesn’t run even once.","pos":[2892,2974],"source":" If `condition` is `False` when you first enter the loop, it doesn’t run even once."},{"content":"The <ph id=\"ph1\">`condition`</ph> usually results from a comparison of two values, but it can be any expression that evaluates to a <bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> value (<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>).","pos":[2981,3215],"source":"The `condition` usually results from a comparison of two values, but it can be any expression that evaluates to a [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md) value (`True` or `False`)."},{"content":"This expression can include a value of another data type, such as a numeric type, that has been converted to <ph id=\"ph1\">`Boolean`</ph>.","pos":[3216,3335],"source":" This expression can include a value of another data type, such as a numeric type, that has been converted to `Boolean`."},{"content":"You can nest <ph id=\"ph1\">`While`</ph> loops by placing one loop within another.","pos":[3342,3404],"source":"You can nest `While` loops by placing one loop within another."},{"content":"You can also nest different kinds of control structures within one another.","pos":[3405,3480]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.","pos":[3481,3636],"source":" For more information, see [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)."},{"pos":[3645,3655],"content":"Exit While","linkify":"Exit While","nodes":[{"content":"Exit While","pos":[0,10]}]},{"content":"The <bpt id=\"p1\">[</bpt>Exit While<ept id=\"p1\">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept> statement can provide another way to exit a <ph id=\"ph1\">`While`</ph> loop.","pos":[3659,3804],"source":"The [Exit While](../../../visual-basic/language-reference/statements/exit-statement.md) statement can provide another way to exit a `While` loop."},{"content":"<ph id=\"ph1\">`Exit While`</ph> immediately transfers control to the statement that follows the <ph id=\"ph2\">`End While`</ph> statement.","pos":[3805,3904],"source":"`Exit While` immediately transfers control to the statement that follows the `End While` statement."},{"content":"You typically use <ph id=\"ph1\">`Exit While`</ph> after some condition is evaluated (for example, in an <ph id=\"ph2\">`If...Then...Else`</ph> structure).","pos":[3911,4026],"source":"You typically use `Exit While` after some condition is evaluated (for example, in an `If...Then...Else` structure)."},{"content":"You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request.","pos":[4027,4198]},{"content":"You can use <ph id=\"ph1\">`Exit While`</ph> when you test for a condition that could cause an <bpt id=\"p1\">*</bpt>endless loop<ept id=\"p1\">*</ept>, which is a loop that could run an extremely large or even infinite number of times.","pos":[4199,4373],"source":" You can use `Exit While` when you test for a condition that could cause an *endless loop*, which is a loop that could run an extremely large or even infinite number of times."},{"content":"You can then use <ph id=\"ph1\">`Exit While`</ph> to escape the loop.","pos":[4374,4423],"source":" You can then use `Exit While` to escape the loop."},{"pos":[4430,4511],"content":"You can place any number of <ph id=\"ph1\">`Exit While`</ph> statements anywhere in the <ph id=\"ph2\">`While`</ph> loop.","source":"You can place any number of `Exit While` statements anywhere in the `While` loop."},{"pos":[4518,4656],"content":"When used within nested <ph id=\"ph1\">`While`</ph> loops, <ph id=\"ph2\">`Exit While`</ph> transfers control out of the innermost loop and into the next higher level of nesting.","source":"When used within nested `While` loops, `Exit While` transfers control out of the innermost loop and into the next higher level of nesting."},{"content":"The <ph id=\"ph1\">`Continue While`</ph> statement immediately transfers control to the next iteration of the loop.","pos":[4663,4758],"source":"The `Continue While` statement immediately transfers control to the next iteration of the loop."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Continue Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>.","pos":[4759,4881],"source":" For more information, see [Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md)."},{"pos":[4890,4897],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4901,5016],"content":"In the following example, the statements in the loop continue to run until the <ph id=\"ph1\">`index`</ph> variable is greater than 10.","source":"In the following example, the statements in the loop continue to run until the `index` variable is greater than 10."},{"pos":[5023,5168],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#171<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#171](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_1.vb)]"},{"pos":[5177,5184],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5188,5282],"content":"The following example illustrates the use of the <ph id=\"ph1\">`Continue While`</ph> and <ph id=\"ph2\">`Exit While`</ph> statements.","source":"The following example illustrates the use of the `Continue While` and `Exit While` statements."},{"pos":[5289,5434],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#172<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#172](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_2.vb)]"},{"pos":[5443,5450],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example reads all lines in a text file.","pos":[5454,5507]},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.File.OpenText%2A&gt;</ph> method opens the file and returns a <ph id=\"ph2\">&lt;xref:System.IO.StreamReader&gt;</ph> that reads the characters.","pos":[5508,5638],"source":" The <xref:System.IO.File.OpenText%2A> method opens the file and returns a <xref:System.IO.StreamReader> that reads the characters."},{"content":"In the <ph id=\"ph1\">`While`</ph> condition, the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.Peek%2A&gt;</ph> method of the <ph id=\"ph3\">`StreamReader`</ph> determines whether the file contains additional characters.","pos":[5639,5795],"source":" In the `While` condition, the <xref:System.IO.StreamReader.Peek%2A> method of the `StreamReader` determines whether the file contains additional characters."},{"pos":[5802,5947],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#173<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#173](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_3.vb)]"},{"pos":[5956,5964],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Loop Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[5968,6077],"source":"[Loop Structures](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6081,6177],"source":"[Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6181,6279],"source":"[For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[6283,6377],"source":"[Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[6381,6510],"source":"[Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Exit Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6514,6602],"source":"[Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Continue Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>","pos":[6606,6701],"source":"[Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md)"}]}