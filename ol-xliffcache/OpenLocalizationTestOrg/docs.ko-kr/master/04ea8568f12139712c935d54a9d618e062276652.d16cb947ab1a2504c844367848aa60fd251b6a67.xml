{"content":"---\ntitle: \"Event Statement | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Event\"\n  - \"vb.Custom\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Event statement\"\n  - \"declaring events, syntax\"\n  - \"Public keyword, Event statements\"\n  - \"Custom keyword\"\n  - \"declarations, events\"\n  - \"event keyword [Visual Basic]\"\n  - \"WithEvents keyword, Event statements\"\n  - \"events [Visual Basic], declaring\"\n  - \"ByVal keyword, Event statements\"\n  - \"events [Visual Basic], custom\"\n  - \"ByRef keyword, Event statements\"\n  - \"declaring user-defined events\"\nms.assetid: 306ff8ed-74dd-4b6a-bd2f-e91b17474042\ncaps.latest.revision: 33\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Event Statement\nDeclares a user-defined event.  \n  \n## Syntax  \n  \n```  \n[ <attrlist> ] [ accessmodifier ] _  \n[ Shared ] [ Shadows ] Event eventname[(parameterlist)] _  \n[ Implements implementslist ]  \n' -or-  \n[ <attrlist> ] [ accessmodifier ] _  \n[ Shared ] [ Shadows ] Event eventname As delegatename _  \n[ Implements implementslist ]  \n' -or-  \n [ <attrlist> ] [ accessmodifier ] _  \n[ Shared ] [ Shadows ] Custom Event eventname As delegatename _  \n[ Implements implementslist ]  \n   [ <attrlist> ] AddHandler(ByVal value As delegatename)  \n      [ statements ]  \n   End AddHandler  \n   [ <attrlist> ] RemoveHandler(ByVal value As delegatename)  \n      [ statements ]  \n   End RemoveHandler  \n   [ <attrlist> ] RaiseEvent(delegatesignature)  \n      [ statements ]  \n   End RaiseEvent  \nEnd Event  \n```  \n  \n## Parts  \n  \n|Part|Description|  \n|---|---|  \n|`attrlist`|Optional. List of attributes that apply to this event. Multiple attributes are separated by commas. You must enclose the [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md) in angle brackets (\"`<`\" and \"`>`\").|  \n|`accessmodifier`|Optional. Specifies what code can access the event. Can be one of the following:<br /><br /> -   [Public](../../../visual-basic/language-reference/modifiers/public.md)—any code that can access the element that declares it can access it.<br />-   [Protected](../../../visual-basic/language-reference/modifiers/protected.md)—only code within its class or a derived class can access it.<br />-   [Friend](../../../visual-basic/language-reference/modifiers/friend.md)—only code in the same assembly can access it.<br />-   [Private](../../../visual-basic/language-reference/modifiers/private.md)—only code in the element that declares it can access it.<br /><br /> You can specify `Protected Friend` to enable access from code in the event's class, a derived class, or the same assembly.|  \n|`Shared`|Optional. Specifies that this event is not associated with a specific instance of a class or structure.|  \n|`Shadows`|Optional. Indicates that this event redeclares and hides an identically named programming element, or set of overloaded elements, in a base class. You can shadow any kind of declared element with any other kind.<br /><br /> A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible. For example, if a `Private` element shadows a base-class element, code that does not have permission to access the `Private` element accesses the base-class element instead.|  \n|`eventname`|Required. Name of the event; follows standard variable naming conventions.|  \n|`parameterlist`|Optional. List of local variables that represent the parameters of this event. You must enclose the [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md) in parentheses.|  \n|`Implements`|Optional. Indicates that this event implements an event of an interface.|  \n|`implementslist`|Required if `Implements` is supplied. List of `Sub` procedures being implemented. Multiple procedures are separated by commas:<br /><br /> *implementedprocedure* [ , *implementedprocedure* ... ]<br /><br /> Each `implementedprocedure` has the following syntax and parts:<br /><br /> `interface`.`definedname`<br /><br /> -   `interface` - Required. Name of an interface that this procedure's containing class or structure is implementing.<br />-   `Definedname` - Required. Name by which the procedure is defined in `interface`. This does not have to be the same as `name`, the name that this procedure is using to implement the defined procedure.|  \n|`Custom`|Required. Events declared as `Custom` must define custom `AddHandler`, `RemoveHandler`, and `RaiseEvent` accessors.|  \n|`delegatename`|Optional. The name of a delegate that specifies the event-handler signature.|  \n|`AddHandler`|Required. Declares an `AddHandler` accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the `AddHandler` statement or implicitly by using the `Handles` clause.|  \n|`End AddHandler`|Required. Terminates the `AddHandler` block.|  \n|`value`|Required. Parameter name.|  \n|`RemoveHandler`|Required. Declares a `RemoveHandler` accessor, which specifies the statements to execute when an event handler is removed using the `RemoveHandler` statement.|  \n|`End RemoveHandler`|Required. Terminates the `RemoveHandler` block.|  \n|`RaiseEvent`|Required. Declares a `RaiseEvent` accessor, which specifies the statements to execute when the event is raised using the `RaiseEvent` statement. Typically, this invokes a list of delegates maintained by the `AddHandler` and `RemoveHandler` accessors.|  \n|`End RaiseEvent`|Required. Terminates the `RaiseEvent` block.|  \n|`delegatesignature`|Required. List of parameters that matches the parameters required by the `delegatename` delegate. You must enclose the [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md) in parentheses.|  \n|`statements`|Optional. Statements that contain the bodies of the `AddHandler`, `RemoveHandler`, and `RaiseEvent` methods.|  \n|`End Event`|Required. Terminates the `Event` block.|  \n  \n## Remarks  \n Once the event has been declared, use the `RaiseEvent` statement to raise the event. A typical event might be declared and raised as shown in the following fragments:  \n  \n [!code-vb[VbVbalrEvents#13](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/event-statement_1.vb)]  \n  \n> [!NOTE]\n>  You can declare event arguments just as you do arguments of procedures, with the following exceptions: events cannot have named arguments, `ParamArray` arguments, or `Optional` arguments. Events do not have return values.  \n  \n To handle an event, you must associate it with an event handler subroutine using either the `Handles` or `AddHandler` statement. The signatures of the subroutine and the event must match. To handle a shared event, you must use the `AddHandler` statement.  \n  \n You can use `Event` only at module level. This means the *declaration context* for an event must be a class, structure, module, or interface, and cannot be a source file, namespace, procedure, or block. For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md).  \n  \n In most circumstances, you can use the first syntax in the Syntax section of this topic for declaring events. However, some scenarios require that you have more control over the detailed behavior of the event. The last syntax in the Syntax section of this topic, which uses the `Custom` keyword, provides that control by enabling you to define custom events. In a custom event, you specify exactly what occurs when code adds or removes an event handler to or from the event, or when code raises the event. For examples, see [How to: Declare Custom Events To Conserve Memory](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-conserve-memory.md) and [How to: Declare Custom Events To Avoid Blocking](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-avoid-blocking.md).  \n  \n## Example  \n The following example uses events to count down seconds from 10 to 0. The code illustrates several of the event-related methods, properties, and statements. This includes the `RaiseEvent` statement.  \n  \n The class that raises an event is the event source, and the methods that process the event are the event handlers. An event source can have multiple handlers for the events it generates. When the class raises the event, that event is raised on every class that has elected to handle events for that instance of the object.  \n  \n The example also uses a form (`Form1`) with a button (`Button1`) and a text box (`TextBox1`). When you click the button, the first text box displays a countdown from 10 to 0 seconds. When the full time (10 seconds) has elapsed, the first text box displays \"Done\".  \n  \n The code for `Form1` specifies the initial and terminal states of the form. It also contains the code executed when events are raised.  \n  \n To use this example, open a new Windows Forms project. Then add a button named `Button1` and a text box named `TextBox1` to the main form, named `Form1`. Then right-click the form and click **View Code** to open the code editor.  \n  \n Add a `WithEvents` variable to the declarations section of the `Form1` class:  \n  \n [!code-vb[VbVbalrEvents#14](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/event-statement_2.vb)]  \n  \n Add the following code to the code for `Form1`. Replace any duplicate procedures that may exist, such as `Form_Load` or `Button_Click`.  \n  \n [!code-vb[VbVbalrEvents#15](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/event-statement_3.vb)]  \n  \n Press F5 to run the previous example, and click the button labeled **Start**. The first text box starts to count down the seconds. When the full time (10 seconds) has elapsed, the first text box displays \"Done\".  \n  \n> [!NOTE]\n>  The `My.Application.DoEvents` method does not process events in the same way the form does. To enable the form to handle the events directly, you can use multithreading. For more information, see [Threading](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c).  \n  \n## See Also  \n [RaiseEvent Statement](../../../visual-basic/language-reference/statements/raiseevent-statement.md)   \n [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md)   \n [Events](../../../visual-basic/programming-guide/language-features/events/index.md)   \n [AddHandler Statement](../../../visual-basic/language-reference/statements/addhandler-statement.md)   \n [RemoveHandler Statement](../../../visual-basic/language-reference/statements/removehandler-statement.md)   \n [Handles](../../../visual-basic/language-reference/statements/handles-clause.md)   \n [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)   \n [How to: Declare Custom Events To Conserve Memory](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-conserve-memory.md)   \n [How to: Declare Custom Events To Avoid Blocking](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-avoid-blocking.md)   \n [Shared](../../../visual-basic/language-reference/modifiers/shared.md)   \n [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)","nodes":[{"pos":[4,969],"nodes":[{"content":"Event Statement | Microsoft Docs","nodes":[{"pos":[0,32],"content":"Event Statement | Microsoft Docs","nodes":[{"content":"Event Statement | Microsoft Docs","pos":[0,32]}]}],"pos":[6,41],"yaml":true}],"content":"title: \"Event Statement | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Event\"\n  - \"vb.Custom\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Event statement\"\n  - \"declaring events, syntax\"\n  - \"Public keyword, Event statements\"\n  - \"Custom keyword\"\n  - \"declarations, events\"\n  - \"event keyword [Visual Basic]\"\n  - \"WithEvents keyword, Event statements\"\n  - \"events [Visual Basic], declaring\"\n  - \"ByVal keyword, Event statements\"\n  - \"events [Visual Basic], custom\"\n  - \"ByRef keyword, Event statements\"\n  - \"declaring user-defined events\"\nms.assetid: 306ff8ed-74dd-4b6a-bd2f-e91b17474042\ncaps.latest.revision: 33\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[976,991],"content":"Event Statement","linkify":"Event Statement","nodes":[{"content":"Event Statement","pos":[0,15]}]},{"content":"Declares a user-defined event.","pos":[992,1022]},{"pos":[1031,1037],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1792,1797],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Part","pos":[1804,1808]},{"content":"Description","pos":[1809,1820]},{"content":"Optional.","pos":[1848,1857]},{"content":"List of attributes that apply to this event.","pos":[1858,1902]},{"content":"Multiple attributes are separated by commas.","pos":[1903,1947]},{"content":"You must enclose the <bpt id=\"p1\">[</bpt>Attribute List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept> in angle brackets (\"<ph id=\"ph1\">`&lt;`</ph>\" and \"<ph id=\"ph2\">`&gt;`</ph>\").","pos":[1948,2093],"source":" You must enclose the [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md) in angle brackets (\"`<`\" and \"`>`\")."},{"content":"Optional.","pos":[2115,2124]},{"content":"Specifies what code can access the event.","pos":[2125,2166]},{"content":"Can be one of the following:","pos":[2167,2195]},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept>—any code that can access the element that declares it can access it.","pos":[2208,2351],"source":"-   [Public](../../../visual-basic/language-reference/modifiers/public.md)—any code that can access the element that declares it can access it."},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Protected<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/protected.md)</ept>—only code within its class or a derived class can access it.","pos":[2357,2498],"source":"-   [Protected](../../../visual-basic/language-reference/modifiers/protected.md)—only code within its class or a derived class can access it."},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>—only code in the same assembly can access it.","pos":[2504,2624],"source":"-   [Friend](../../../visual-basic/language-reference/modifiers/friend.md)—only code in the same assembly can access it."},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/private.md)</ept>—only code in the element that declares it can access it.","pos":[2630,2763],"source":"-   [Private](../../../visual-basic/language-reference/modifiers/private.md)—only code in the element that declares it can access it."},{"content":"You can specify <ph id=\"ph1\">`Protected Friend`</ph> to enable access from code in the event's class, a derived class, or the same assembly.","pos":[2776,2898],"source":"You can specify `Protected Friend` to enable access from code in the event's class, a derived class, or the same assembly."},{"content":"Optional.","pos":[2912,2921]},{"content":"Specifies that this event is not associated with a specific instance of a class or structure.","pos":[2922,3015]},{"content":"Optional.","pos":[3030,3039]},{"content":"Indicates that this event redeclares and hides an identically named programming element, or set of overloaded elements, in a base class.","pos":[3040,3176]},{"content":"You can shadow any kind of declared element with any other kind.","pos":[3177,3241]},{"content":"A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible.","pos":[3254,3391]},{"content":"For example, if a <ph id=\"ph1\">`Private`</ph> element shadows a base-class element, code that does not have permission to access the <ph id=\"ph2\">`Private`</ph> element accesses the base-class element instead.","pos":[3392,3565],"source":" For example, if a `Private` element shadows a base-class element, code that does not have permission to access the `Private` element accesses the base-class element instead."},{"content":"Required.","pos":[3582,3591]},{"content":"Name of the event; follows standard variable naming conventions.","pos":[3592,3656]},{"content":"Optional.","pos":[3677,3686]},{"content":"List of local variables that represent the parameters of this event.","pos":[3687,3755]},{"content":"You must enclose the <bpt id=\"p1\">[</bpt>Parameter List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept> in parentheses.","pos":[3756,3880],"source":" You must enclose the [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md) in parentheses."},{"content":"Optional.","pos":[3898,3907]},{"content":"Indicates that this event implements an event of an interface.","pos":[3908,3970]},{"content":"Required if <ph id=\"ph1\">`Implements`</ph> is supplied.","pos":[3992,4029],"source":"Required if `Implements` is supplied."},{"content":"List of <ph id=\"ph1\">`Sub`</ph> procedures being implemented.","pos":[4030,4073],"source":" List of `Sub` procedures being implemented."},{"content":"Multiple procedures are separated by commas:","pos":[4074,4118]},{"content":"<bpt id=\"p1\">*</bpt>implementedprocedure<ept id=\"p1\">*</ept> [ , <bpt id=\"p2\">*</bpt>implementedprocedure<ept id=\"p2\">*</ept> ... ]","pos":[4131,4186],"source":"*implementedprocedure* [ , *implementedprocedure* ... ]"},{"content":"Each <ph id=\"ph1\">`implementedprocedure`</ph> has the following syntax and parts:","pos":[4199,4262],"source":"Each `implementedprocedure` has the following syntax and parts:"},{"content":"<ph id=\"ph1\">`interface`</ph>.<ph id=\"ph2\">`definedname`</ph>","pos":[4275,4300],"source":"`interface`.`definedname`"},{"content":"<ph id=\"ph1\">-   </ph><ph id=\"ph2\">`interface`</ph> - Required.","pos":[4313,4340],"source":"-   `interface` - Required."},{"content":"Name of an interface that this procedure's containing class or structure is implementing.","pos":[4341,4430]},{"content":"<ph id=\"ph1\">-   </ph><ph id=\"ph2\">`Definedname`</ph> - Required.","pos":[4436,4465],"source":"-   `Definedname` - Required."},{"content":"Name by which the procedure is defined in <ph id=\"ph1\">`interface`</ph>.","pos":[4466,4520],"source":" Name by which the procedure is defined in `interface`."},{"content":"This does not have to be the same as <ph id=\"ph1\">`name`</ph>, the name that this procedure is using to implement the defined procedure.","pos":[4521,4639],"source":" This does not have to be the same as `name`, the name that this procedure is using to implement the defined procedure."},{"content":"Required.","pos":[4653,4662]},{"content":"Events declared as <ph id=\"ph1\">`Custom`</ph> must define custom <ph id=\"ph2\">`AddHandler`</ph>, <ph id=\"ph3\">`RemoveHandler`</ph>, and <ph id=\"ph4\">`RaiseEvent`</ph> accessors.","pos":[4663,4768],"source":" Events declared as `Custom` must define custom `AddHandler`, `RemoveHandler`, and `RaiseEvent` accessors."},{"content":"Optional.","pos":[4788,4797]},{"content":"The name of a delegate that specifies the event-handler signature.","pos":[4798,4864]},{"content":"Required.","pos":[4882,4891]},{"content":"Declares an <ph id=\"ph1\">`AddHandler`</ph> accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the <ph id=\"ph2\">`AddHandler`</ph> statement or implicitly by using the <ph id=\"ph3\">`Handles`</ph> clause.","pos":[4892,5099],"source":" Declares an `AddHandler` accessor, which specifies the statements to execute when an event handler is added, either explicitly by using the `AddHandler` statement or implicitly by using the `Handles` clause."},{"content":"Required.","pos":[5121,5130]},{"content":"Terminates the <ph id=\"ph1\">`AddHandler`</ph> block.","pos":[5131,5165],"source":" Terminates the `AddHandler` block."},{"content":"Required.","pos":[5178,5187]},{"content":"Parameter name.","pos":[5188,5203]},{"content":"Required.","pos":[5224,5233]},{"content":"Declares a <ph id=\"ph1\">`RemoveHandler`</ph> accessor, which specifies the statements to execute when an event handler is removed using the <ph id=\"ph2\">`RemoveHandler`</ph> statement.","pos":[5234,5382],"source":" Declares a `RemoveHandler` accessor, which specifies the statements to execute when an event handler is removed using the `RemoveHandler` statement."},{"content":"Required.","pos":[5407,5416]},{"content":"Terminates the <ph id=\"ph1\">`RemoveHandler`</ph> block.","pos":[5417,5454],"source":" Terminates the `RemoveHandler` block."},{"content":"Required.","pos":[5472,5481]},{"content":"Declares a <ph id=\"ph1\">`RaiseEvent`</ph> accessor, which specifies the statements to execute when the event is raised using the <ph id=\"ph2\">`RaiseEvent`</ph> statement.","pos":[5482,5616],"source":" Declares a `RaiseEvent` accessor, which specifies the statements to execute when the event is raised using the `RaiseEvent` statement."},{"content":"Typically, this invokes a list of delegates maintained by the <ph id=\"ph1\">`AddHandler`</ph> and <ph id=\"ph2\">`RemoveHandler`</ph> accessors.","pos":[5617,5722],"source":" Typically, this invokes a list of delegates maintained by the `AddHandler` and `RemoveHandler` accessors."},{"content":"Required.","pos":[5744,5753]},{"content":"Terminates the <ph id=\"ph1\">`RaiseEvent`</ph> block.","pos":[5754,5788],"source":" Terminates the `RaiseEvent` block."},{"content":"Required.","pos":[5813,5822]},{"content":"List of parameters that matches the parameters required by the <ph id=\"ph1\">`delegatename`</ph> delegate.","pos":[5823,5910],"source":" List of parameters that matches the parameters required by the `delegatename` delegate."},{"content":"You must enclose the <bpt id=\"p1\">[</bpt>Parameter List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept> in parentheses.","pos":[5911,6035],"source":" You must enclose the [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md) in parentheses."},{"content":"Optional.","pos":[6053,6062]},{"content":"Statements that contain the bodies of the <ph id=\"ph1\">`AddHandler`</ph>, <ph id=\"ph2\">`RemoveHandler`</ph>, and <ph id=\"ph3\">`RaiseEvent`</ph> methods.","pos":[6063,6161],"source":" Statements that contain the bodies of the `AddHandler`, `RemoveHandler`, and `RaiseEvent` methods."},{"content":"Required.","pos":[6178,6187]},{"content":"Terminates the <ph id=\"ph1\">`Event`</ph> block.","pos":[6188,6217],"source":" Terminates the `Event` block."},{"pos":[6227,6234],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Once the event has been declared, use the <ph id=\"ph1\">`RaiseEvent`</ph> statement to raise the event.","pos":[6238,6322],"source":"Once the event has been declared, use the `RaiseEvent` statement to raise the event."},{"content":"A typical event might be declared and raised as shown in the following fragments:","pos":[6323,6404]},{"pos":[6411,6537],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrEvents#13<ept id=\"p2\">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/event-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrEvents#13](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/event-statement_1.vb)]"},{"pos":[6545,6777],"content":"[!NOTE]\n You can declare event arguments just as you do arguments of procedures, with the following exceptions: events cannot have named arguments, `ParamArray` arguments, or `Optional` arguments. Events do not have return values.","leadings":["","> "],"nodes":[{"content":"You can declare event arguments just as you do arguments of procedures, with the following exceptions: events cannot have named arguments, `ParamArray` arguments, or `Optional` arguments. Events do not have return values.","pos":[9,230],"nodes":[{"content":"You can declare event arguments just as you do arguments of procedures, with the following exceptions: events cannot have named arguments, <ph id=\"ph1\">`ParamArray`</ph> arguments, or <ph id=\"ph2\">`Optional`</ph> arguments.","pos":[0,187],"source":"You can declare event arguments just as you do arguments of procedures, with the following exceptions: events cannot have named arguments, `ParamArray` arguments, or `Optional` arguments."},{"content":"Events do not have return values.","pos":[188,221]}]}]},{"content":"To handle an event, you must associate it with an event handler subroutine using either the <ph id=\"ph1\">`Handles`</ph> or <ph id=\"ph2\">`AddHandler`</ph> statement.","pos":[6784,6912],"source":"To handle an event, you must associate it with an event handler subroutine using either the `Handles` or `AddHandler` statement."},{"content":"The signatures of the subroutine and the event must match.","pos":[6913,6971]},{"content":"To handle a shared event, you must use the <ph id=\"ph1\">`AddHandler`</ph> statement.","pos":[6972,7038],"source":" To handle a shared event, you must use the `AddHandler` statement."},{"content":"You can use <ph id=\"ph1\">`Event`</ph> only at module level.","pos":[7045,7086],"source":"You can use `Event` only at module level."},{"content":"This means the <bpt id=\"p1\">*</bpt>declaration context<ept id=\"p1\">*</ept> for an event must be a class, structure, module, or interface, and cannot be a source file, namespace, procedure, or block.","pos":[7087,7247],"source":" This means the *declaration context* for an event must be a class, structure, module, or interface, and cannot be a source file, namespace, procedure, or block."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Declaration Contexts and Default Access Levels<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.","pos":[7248,7426],"source":" For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)."},{"content":"In most circumstances, you can use the first syntax in the Syntax section of this topic for declaring events.","pos":[7433,7542]},{"content":"However, some scenarios require that you have more control over the detailed behavior of the event.","pos":[7543,7642]},{"content":"The last syntax in the Syntax section of this topic, which uses the <ph id=\"ph1\">`Custom`</ph> keyword, provides that control by enabling you to define custom events.","pos":[7643,7791],"source":" The last syntax in the Syntax section of this topic, which uses the `Custom` keyword, provides that control by enabling you to define custom events."},{"content":"In a custom event, you specify exactly what occurs when code adds or removes an event handler to or from the event, or when code raises the event.","pos":[7792,7938]},{"content":"For examples, see <bpt id=\"p1\">[</bpt>How to: Declare Custom Events To Conserve Memory<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-conserve-memory.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Declare Custom Events To Avoid Blocking<ept id=\"p2\">](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-avoid-blocking.md)</ept>.","pos":[7939,8295],"source":" For examples, see [How to: Declare Custom Events To Conserve Memory](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-conserve-memory.md) and [How to: Declare Custom Events To Avoid Blocking](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-avoid-blocking.md)."},{"pos":[8304,8311],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses events to count down seconds from 10 to 0.","pos":[8315,8384]},{"content":"The code illustrates several of the event-related methods, properties, and statements.","pos":[8385,8471]},{"content":"This includes the <ph id=\"ph1\">`RaiseEvent`</ph> statement.","pos":[8472,8513],"source":" This includes the `RaiseEvent` statement."},{"content":"The class that raises an event is the event source, and the methods that process the event are the event handlers.","pos":[8520,8634]},{"content":"An event source can have multiple handlers for the events it generates.","pos":[8635,8706]},{"content":"When the class raises the event, that event is raised on every class that has elected to handle events for that instance of the object.","pos":[8707,8842]},{"content":"The example also uses a form (<ph id=\"ph1\">`Form1`</ph>) with a button (<ph id=\"ph2\">`Button1`</ph>) and a text box (<ph id=\"ph3\">`TextBox1`</ph>).","pos":[8849,8942],"source":"The example also uses a form (`Form1`) with a button (`Button1`) and a text box (`TextBox1`)."},{"content":"When you click the button, the first text box displays a countdown from 10 to 0 seconds.","pos":[8943,9031]},{"content":"When the full time (10 seconds) has elapsed, the first text box displays \"Done\".","pos":[9032,9112]},{"content":"The code for <ph id=\"ph1\">`Form1`</ph> specifies the initial and terminal states of the form.","pos":[9119,9194],"source":"The code for `Form1` specifies the initial and terminal states of the form."},{"content":"It also contains the code executed when events are raised.","pos":[9195,9253]},{"content":"To use this example, open a new Windows Forms project.","pos":[9260,9314]},{"content":"Then add a button named <ph id=\"ph1\">`Button1`</ph> and a text box named <ph id=\"ph2\">`TextBox1`</ph> to the main form, named <ph id=\"ph3\">`Form1`</ph>.","pos":[9315,9413],"source":" Then add a button named `Button1` and a text box named `TextBox1` to the main form, named `Form1`."},{"content":"Then right-click the form and click <bpt id=\"p1\">**</bpt>View Code<ept id=\"p1\">**</ept> to open the code editor.","pos":[9414,9488],"source":" Then right-click the form and click **View Code** to open the code editor."},{"pos":[9495,9572],"content":"Add a <ph id=\"ph1\">`WithEvents`</ph> variable to the declarations section of the <ph id=\"ph2\">`Form1`</ph> class:","source":"Add a `WithEvents` variable to the declarations section of the `Form1` class:"},{"pos":[9579,9705],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrEvents#14<ept id=\"p2\">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/event-statement_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrEvents#14](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/event-statement_2.vb)]"},{"content":"Add the following code to the code for <ph id=\"ph1\">`Form1`</ph>.","pos":[9712,9759],"source":"Add the following code to the code for `Form1`."},{"content":"Replace any duplicate procedures that may exist, such as <ph id=\"ph1\">`Form_Load`</ph> or <ph id=\"ph2\">`Button_Click`</ph>.","pos":[9760,9847],"source":" Replace any duplicate procedures that may exist, such as `Form_Load` or `Button_Click`."},{"pos":[9854,9980],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrEvents#15<ept id=\"p2\">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/event-statement_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrEvents#15](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/event-statement_3.vb)]"},{"content":"Press F5 to run the previous example, and click the button labeled <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>.","pos":[9987,10064],"source":"Press F5 to run the previous example, and click the button labeled **Start**."},{"content":"The first text box starts to count down the seconds.","pos":[10065,10117]},{"content":"When the full time (10 seconds) has elapsed, the first text box displays \"Done\".","pos":[10118,10198]},{"pos":[10206,10497],"content":"[!NOTE]\n The `My.Application.DoEvents` method does not process events in the same way the form does. To enable the form to handle the events directly, you can use multithreading. For more information, see [Threading](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c).","leadings":["","> "],"nodes":[{"content":"The `My.Application.DoEvents` method does not process events in the same way the form does. To enable the form to handle the events directly, you can use multithreading. For more information, see [Threading](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c).","pos":[9,289],"nodes":[{"content":"The <ph id=\"ph1\">`My.Application.DoEvents`</ph> method does not process events in the same way the form does.","pos":[0,91],"source":"The `My.Application.DoEvents` method does not process events in the same way the form does."},{"content":"To enable the form to handle the events directly, you can use multithreading.","pos":[92,169]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Threading<ept id=\"p1\">](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c)</ept>.","pos":[170,280],"source":" For more information, see [Threading](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c)."}]}]},{"pos":[10506,10514],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>RaiseEvent Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/raiseevent-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10518,10618],"source":"[RaiseEvent Statement](../../../visual-basic/language-reference/statements/raiseevent-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10622,10722],"source":"[Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/events/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[10726,10810],"source":"[Events](../../../visual-basic/programming-guide/language-features/events/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>AddHandler Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10814,10914],"source":"[AddHandler Statement](../../../visual-basic/language-reference/statements/addhandler-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>RemoveHandler Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/removehandler-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[10918,11024],"source":"[RemoveHandler Statement](../../../visual-basic/language-reference/statements/removehandler-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Handles<ept id=\"p1\">](../../../visual-basic/language-reference/statements/handles-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[11028,11109],"source":"[Handles](../../../visual-basic/language-reference/statements/handles-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[11113,11209],"source":"[Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Declare Custom Events To Conserve Memory<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-conserve-memory.md)</ept><ph id=\"ph1\"> </ph>","pos":[11213,11381],"source":"[How to: Declare Custom Events To Conserve Memory](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-conserve-memory.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Declare Custom Events To Avoid Blocking<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-avoid-blocking.md)</ept><ph id=\"ph1\"> </ph>","pos":[11385,11551],"source":"[How to: Declare Custom Events To Avoid Blocking](../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-avoid-blocking.md) "},{"content":"<bpt id=\"p1\">[</bpt>Shared<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shared.md)</ept><ph id=\"ph1\"> </ph>","pos":[11555,11626],"source":"[Shared](../../../visual-basic/language-reference/modifiers/shared.md) "},{"content":"<bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>","pos":[11630,11702],"source":"[Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)"}]}