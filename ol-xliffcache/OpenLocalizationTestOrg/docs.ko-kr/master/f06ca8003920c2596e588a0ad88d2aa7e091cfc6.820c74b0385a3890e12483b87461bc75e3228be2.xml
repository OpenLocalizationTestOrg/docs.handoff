{"content":"---\ntitle: \"Queries in LINQ to Entities | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: c015a609-29eb-4e95-abb1-2ca721c6e2ad\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Queries in LINQ to Entities\nA query is an expression that retrieves data from a data source. Queries are usually expressed in a specialized query language, such as SQL for relational databases and XQuery for XML. Therefore, developers have had to learn a new query language for each type of data source or data format that they query. Language-Integrated Query (LINQ) offers a simpler, consistent model for working with data across various kinds of data sources and formats. In a LINQ query, you always work with programming objects.  \n  \n A LINQ query operation consists of three actions: obtain the data source or sources, create the query, and execute the query.  \n  \n Data sources that implement the <xref:System.Collections.Generic.IEnumerable%601> generic interface or the <xref:System.Linq.IQueryable%601> generic interface can be queried through LINQ. Instances of the generic <xref:System.Data.Objects.ObjectQuery%601> class, which implements the generic <xref:System.Linq.IQueryable%601> interface, serve as the data source for [!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)] queries. The <xref:System.Data.Objects.ObjectQuery%601> generic class represents a query that returns a collection of zero or more typed objects. You can also let the compiler infer the type of an entity by using the C# keyword `var` (Dim in Visual Basic).  \n  \n In the query, you specify exactly the information that you want to retrieve from the data source. A query can also specify how that information should be sorted, grouped, and shaped before it is returned. In LINQ, a query is stored in a variable. If the query returns a sequence of values, the query variable itself must be a queryable type. This query variable takes no action and returns no data; it only stores the query information. After you create a query you must execute that query to retrieve any data.  \n  \n## Query Syntax  \n [!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)] queries can be composed in two different syntaxes: query expression syntax and method-based query syntax. Query expression syntax is new in C# 3.0 and Visual Basic 9.0, and it consists of a set of clauses written in a declarative syntax similar to Transact-SQL or XQuery. However, the [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] common language runtime (CLR) cannot read the query expression syntax itself. Therefore, at compile time, query expressions are translated to something that the CLR does understand: method calls. These methods are known as the *standard query operators*. As a developer, you have the option of calling them directly by using method syntax, instead of using query syntax. For more information, see [Query Syntax and Method Syntax in LINQ](~/docs/csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md).  \n  \n### Query Expression Syntax  \n Query expressions are a declarative query syntax. This syntax enables a developer to write queries in a high-level language that is formatted similar to Transact-SQL. By using query expression syntax, you can perform even complex filtering, ordering, and grouping operations on data sources with minimal code. For more information, [Basic Query Operations (Visual Basic)](~/docs/visual-basic/programming-guide/concepts/linq/basic-query-operations.md). For examples that demonstrate how to use the query expression syntax, see the following topics:  \n  \n-   [Query Expression Syntax Examples: Projection](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-projection.md)  \n  \n-   [Query Expression Syntax Examples: Filtering](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-filtering.md)  \n  \n-   [Query Expression Syntax Examples: Ordering](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-ordering.md)  \n  \n-   [Query Expression Syntax Examples: Aggregate Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-aggregate-operators.md)  \n  \n-   [Query Expression Syntax Examples: Partitioning](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-partitioning.md)  \n  \n-   [Query Expression Syntax Examples: Join Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-join-operators.md)  \n  \n-   [Query Expression Syntax Examples: Element Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-element-operators.md)  \n  \n-   [Query Expression Syntax Examples: Grouping](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-grouping.md)  \n  \n-   [Query Expression Syntax Examples: Navigating Relationships](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-navigating-relationships.md)  \n  \n### Method-Based Query Syntax  \n Another way to compose [!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)] queries is by using method-based queries. The method-based query syntax is a sequence of direct method calls to LINQ operator methods, passing lambda expressions as the parameters. For more information, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md). For examples that demonstrate how to use method-based syntax, see the following topics:  \n  \n-   [Method-Based Query Syntax Examples: Projection](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-projection.md)  \n  \n-   [Method-Based Query Syntax Examples: Filtering](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-filtering.md)  \n  \n-   [Method-Based Query Syntax Examples: Ordering](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-ordering.md)  \n  \n-   [Method-Based Query Syntax Examples: Aggregate Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-aggregate-operators.md)  \n  \n-   [Method-Based Query Syntax Examples: Partitioning](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-partitioning.md)  \n  \n-   [Method-Based Query Syntax Examples: Conversion](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-conversion.md)  \n  \n-   [Method-Based Query Syntax Examples: Join Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-join-operators.md)  \n  \n-   [Method-Based Query Syntax Examples: Element Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-element-operators.md)  \n  \n-   [Method-Based Query Syntax Examples: Grouping](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-grouping.md)  \n  \n-   [Method-Based Query Syntax Examples: Navigating Relationships](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-navigating-relationships.md)  \n  \n## See Also  \n [LINQ to Entities](../../../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)   \n [Getting Started with LINQ in C#](~/docs/csharp/programming-guide/concepts/linq/getting-started-with-linq.md)   \n [Getting Started with LINQ in Visual Basic](~/docs/visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)   \n [Entity Framework Merge Options and Compiled Queries](http://go.microsoft.com/fwlink/?LinkId=199591)","nodes":[{"pos":[4,402],"embed":true,"restype":"x-metadata","content":"title: \"Queries in LINQ to Entities | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: c015a609-29eb-4e95-abb1-2ca721c6e2ad\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Queries in LINQ to Entities | Microsoft Docs","nodes":[{"pos":[0,44],"content":"Queries in LINQ to Entities | Microsoft Docs","nodes":[{"content":"Queries in LINQ to Entities | Microsoft Docs","pos":[0,44]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[409,436],"content":"Queries in LINQ to Entities","linkify":"Queries in LINQ to Entities","nodes":[{"content":"Queries in LINQ to Entities","pos":[0,27]}]},{"content":"A query is an expression that retrieves data from a data source.","pos":[437,501]},{"content":"Queries are usually expressed in a specialized query language, such as SQL for relational databases and XQuery for XML.","pos":[502,621]},{"content":"Therefore, developers have had to learn a new query language for each type of data source or data format that they query.","pos":[622,743]},{"content":"Language-Integrated Query (LINQ) offers a simpler, consistent model for working with data across various kinds of data sources and formats.","pos":[744,883]},{"content":"In a LINQ query, you always work with programming objects.","pos":[884,942]},{"content":"A LINQ query operation consists of three actions: obtain the data source or sources, create the query, and execute the query.","pos":[949,1074]},{"content":"Data sources that implement the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> generic interface or the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> generic interface can be queried through LINQ.","pos":[1081,1268],"source":"Data sources that implement the <xref:System.Collections.Generic.IEnumerable%601> generic interface or the <xref:System.Linq.IQueryable%601> generic interface can be queried through LINQ."},{"content":"Instances of the generic <ph id=\"ph1\">&lt;xref:System.Data.Objects.ObjectQuery%601&gt;</ph> class, which implements the generic <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface, serve as the data source for <ph id=\"ph3\">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph> queries.","pos":[1269,1529],"source":" Instances of the generic <xref:System.Data.Objects.ObjectQuery%601> class, which implements the generic <xref:System.Linq.IQueryable%601> interface, serve as the data source for [!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)] queries."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.Objects.ObjectQuery%601&gt;</ph> generic class represents a query that returns a collection of zero or more typed objects.","pos":[1530,1666],"source":" The <xref:System.Data.Objects.ObjectQuery%601> generic class represents a query that returns a collection of zero or more typed objects."},{"content":"You can also let the compiler infer the type of an entity by using the C# keyword <ph id=\"ph1\">`var`</ph> (Dim in Visual Basic).","pos":[1667,1777],"source":" You can also let the compiler infer the type of an entity by using the C# keyword `var` (Dim in Visual Basic)."},{"content":"In the query, you specify exactly the information that you want to retrieve from the data source.","pos":[1784,1881]},{"content":"A query can also specify how that information should be sorted, grouped, and shaped before it is returned.","pos":[1882,1988]},{"content":"In LINQ, a query is stored in a variable.","pos":[1989,2030]},{"content":"If the query returns a sequence of values, the query variable itself must be a queryable type.","pos":[2031,2125]},{"content":"This query variable takes no action and returns no data; it only stores the query information.","pos":[2126,2220]},{"content":"After you create a query you must execute that query to retrieve any data.","pos":[2221,2295]},{"pos":[2304,2316],"content":"Query Syntax","linkify":"Query Syntax","nodes":[{"content":"Query Syntax","pos":[0,12]}]},{"content":"queries can be composed in two different syntaxes: query expression syntax and method-based query syntax.","pos":[2394,2499]},{"content":"Query expression syntax is new in C# 3.0 and Visual Basic 9.0, and it consists of a set of clauses written in a declarative syntax similar to Transact-SQL or XQuery.","pos":[2500,2665]},{"content":"However, the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)]</ph> common language runtime (CLR) cannot read the query expression syntax itself.","pos":[2666,2826],"source":" However, the [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] common language runtime (CLR) cannot read the query expression syntax itself."},{"content":"Therefore, at compile time, query expressions are translated to something that the CLR does understand: method calls.","pos":[2827,2944]},{"content":"These methods are known as the <bpt id=\"p1\">*</bpt>standard query operators<ept id=\"p1\">*</ept>.","pos":[2945,3003],"source":" These methods are known as the *standard query operators*."},{"content":"As a developer, you have the option of calling them directly by using method syntax, instead of using query syntax.","pos":[3004,3119]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Query Syntax and Method Syntax in LINQ<ept id=\"p1\">](~/docs/csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)</ept>.","pos":[3120,3276],"source":" For more information, see [Query Syntax and Method Syntax in LINQ](~/docs/csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)."},{"pos":[3286,3309],"content":"Query Expression Syntax","linkify":"Query Expression Syntax","nodes":[{"content":"Query Expression Syntax","pos":[0,23]}]},{"content":"Query expressions are a declarative query syntax.","pos":[3313,3362]},{"content":"This syntax enables a developer to write queries in a high-level language that is formatted similar to Transact-SQL.","pos":[3363,3479]},{"content":"By using query expression syntax, you can perform even complex filtering, ordering, and grouping operations on data sources with minimal code.","pos":[3480,3622]},{"content":"For more information, <bpt id=\"p1\">[</bpt>Basic Query Operations (Visual Basic)<ept id=\"p1\">](~/docs/visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept>.","pos":[3623,3764],"source":" For more information, [Basic Query Operations (Visual Basic)](~/docs/visual-basic/programming-guide/concepts/linq/basic-query-operations.md)."},{"content":"For examples that demonstrate how to use the query expression syntax, see the following topics:","pos":[3765,3860]},{"pos":[3870,4031],"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax Examples: Projection<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-projection.md)</ept>","source":"[Query Expression Syntax Examples: Projection](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-projection.md)"},{"pos":[4041,4200],"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax Examples: Filtering<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-filtering.md)</ept>","source":"[Query Expression Syntax Examples: Filtering](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-filtering.md)"},{"pos":[4210,4367],"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax Examples: Ordering<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-ordering.md)</ept>","source":"[Query Expression Syntax Examples: Ordering](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-ordering.md)"},{"pos":[4377,4556],"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax Examples: Aggregate Operators<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-aggregate-operators.md)</ept>","source":"[Query Expression Syntax Examples: Aggregate Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-aggregate-operators.md)"},{"pos":[4566,4731],"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax Examples: Partitioning<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-partitioning.md)</ept>","source":"[Query Expression Syntax Examples: Partitioning](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-partitioning.md)"},{"pos":[4741,4910],"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax Examples: Join Operators<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-join-operators.md)</ept>","source":"[Query Expression Syntax Examples: Join Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-join-operators.md)"},{"pos":[4920,5095],"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax Examples: Element Operators<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-element-operators.md)</ept>","source":"[Query Expression Syntax Examples: Element Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-element-operators.md)"},{"pos":[5105,5262],"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax Examples: Grouping<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-grouping.md)</ept>","source":"[Query Expression Syntax Examples: Grouping](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-grouping.md)"},{"pos":[5272,5461],"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax Examples: Navigating Relationships<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-navigating-relationships.md)</ept>","source":"[Query Expression Syntax Examples: Navigating Relationships](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expression-syntax-examples-navigating-relationships.md)"},{"pos":[5471,5496],"content":"Method-Based Query Syntax","linkify":"Method-Based Query Syntax","nodes":[{"content":"Method-Based Query Syntax","pos":[0,25]}]},{"content":"Another way to compose <ph id=\"ph1\">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph> queries is by using method-based queries.","pos":[5500,5638],"source":"Another way to compose [!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)] queries is by using method-based queries."},{"content":"The method-based query syntax is a sequence of direct method calls to LINQ operator methods, passing lambda expressions as the parameters.","pos":[5639,5777]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.","pos":[5778,5913],"source":" For more information, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)."},{"content":"For examples that demonstrate how to use method-based syntax, see the following topics:","pos":[5914,6001]},{"pos":[6011,6176],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Projection<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-projection.md)</ept>","source":"[Method-Based Query Syntax Examples: Projection](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-projection.md)"},{"pos":[6186,6349],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Filtering<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-filtering.md)</ept>","source":"[Method-Based Query Syntax Examples: Filtering](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-filtering.md)"},{"pos":[6359,6520],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Ordering<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-ordering.md)</ept>","source":"[Method-Based Query Syntax Examples: Ordering](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-ordering.md)"},{"pos":[6530,6713],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Aggregate Operators<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-aggregate-operators.md)</ept>","source":"[Method-Based Query Syntax Examples: Aggregate Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-aggregate-operators.md)"},{"pos":[6723,6892],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Partitioning<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-partitioning.md)</ept>","source":"[Method-Based Query Syntax Examples: Partitioning](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-partitioning.md)"},{"pos":[6902,7067],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Conversion<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-conversion.md)</ept>","source":"[Method-Based Query Syntax Examples: Conversion](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-conversion.md)"},{"pos":[7077,7250],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Join Operators<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-join-operators.md)</ept>","source":"[Method-Based Query Syntax Examples: Join Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-join-operators.md)"},{"pos":[7260,7439],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Element Operators<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-element-operators.md)</ept>","source":"[Method-Based Query Syntax Examples: Element Operators](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-element-operators.md)"},{"pos":[7449,7610],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Grouping<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-grouping.md)</ept>","source":"[Method-Based Query Syntax Examples: Grouping](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-grouping.md)"},{"pos":[7620,7813],"content":"<bpt id=\"p1\">[</bpt>Method-Based Query Syntax Examples: Navigating Relationships<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-navigating-relationships.md)</ept>","source":"[Method-Based Query Syntax Examples: Navigating Relationships](../../../../../../docs/framework/data/adonet/ef/language-reference/method-based-query-syntax-examples-navigating-relationships.md)"},{"pos":[7822,7830],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>LINQ to Entities<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)</ept><ph id=\"ph1\"> </ph>","pos":[7834,7941],"source":"[LINQ to Entities](../../../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md) "},{"content":"<bpt id=\"p1\">[</bpt>Getting Started with LINQ in C#<ept id=\"p1\">](~/docs/csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[7945,8055],"source":"[Getting Started with LINQ in C#](~/docs/csharp/programming-guide/concepts/linq/getting-started-with-linq.md) "},{"content":"<bpt id=\"p1\">[</bpt>Getting Started with LINQ in Visual Basic<ept id=\"p1\">](~/docs/visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[8059,8185],"source":"[Getting Started with LINQ in Visual Basic](~/docs/visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md) "},{"content":"<bpt id=\"p1\">[</bpt>Entity Framework Merge Options and Compiled Queries<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=199591)</ept>","pos":[8189,8289],"source":"[Entity Framework Merge Options and Compiled Queries](http://go.microsoft.com/fwlink/?LinkId=199591)"}]}