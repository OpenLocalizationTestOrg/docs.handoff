<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e32c169d3e791cdc452be4f28a5fbe47afbfbea0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\sending-and-receiving-faults.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf40124435d1aac617beb48f73f16d5104cdfef9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d15e60b3860412799d2775f3eb72876e1957451b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Sending and Receiving Faults | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Sending and Receiving Faults</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>SOAP faults convey error condition information from a service to a client and in the duplex case from a client to a service in an interoperable way.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Typically a service defines custom fault content and specifies which operations can return them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Defining and Specifying Faults<ept id="p1">](../../../docs/framework/wcf/defining-and-specifying-faults.md)</ept>.) This topic discusses how a service or duplex client can send those faults when the corresponding error condition has occurred and how a client or service application handles these faults.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For an overview of error handling in <ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> applications, see <bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](../../../docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Sending SOAP Faults</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Declared SOAP faults are those in which an operation has a <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName&gt;</ph> that specifies a custom SOAP fault type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Undeclared SOAP faults are those that are not specified in the contract for an operation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Sending Declared Faults</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To send a declared SOAP fault, detect the error condition for which the SOAP fault is appropriate and throw a new <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601?displayProperty=fullName&gt;</ph> where the type parameter is a new object of the type specified in the <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> for that operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code example shows the use of <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> to specify that the <ph id="ph2">`SampleMethod`</ph> operation can return a SOAP fault with the detail type of <ph id="ph3">`GreetingFault`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FaultContractAttribute#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FaultContractAttribute#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To convey the <ph id="ph1">`GreetingFault`</ph> error information to the client, catch the appropriate error condition and throw a new <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601?displayProperty=fullName&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> with a new <ph id="ph4">`GreetingFault`</ph> object as the argument, as in the following code example.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the client is an <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client application, it experiences this as a managed exception where the type is <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601?displayProperty=fullName&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FaultContractAttribute#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FaultContractAttribute#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Sending Undeclared Faults</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Sending undeclared faults can be very useful to quickly diagnose and debug problems in <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> applications, but its usefulness as a debugging tool is limited.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>More generally, when debugging it is recommended that you use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When you set this value to true, clients experience such faults as <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> exceptions of type <ph id="ph2">&lt;xref:System.ServiceModel.ExceptionDetail&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Because managed exceptions can expose internal application information, setting <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=fullName&gt;</ph> to <ph id="ph3">`true`</ph> can permit <ph id="ph4">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> clients to obtain information about internal service operation exceptions, including personally identifiable or other sensitive information.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Therefore, setting <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=fullName&gt;</ph> to <ph id="ph3">`true`</ph> is only recommended as a way of temporarily debugging a service application.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In addition, the WSDL for a method that returns unhandled managed exceptions in this way does not contain the contract for the <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.ServiceModel.ExceptionDetail&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Clients must expect the possibility of an unknown SOAP fault (returned to <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> clients as <ph id="ph2">&lt;xref:System.ServiceModel.FaultException?displayProperty=fullName&gt;</ph> objects) to obtain the debugging information properly.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To send an undeclared SOAP fault, throw a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException?displayProperty=fullName&gt;</ph> object (that is, not the generic type <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>) and pass the string to the constructor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is exposed to the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client applications as a thrown <ph id="ph2">&lt;xref:System.ServiceModel.FaultException?displayProperty=fullName&gt;</ph> exception where the string is available by calling the <ph id="ph3">&lt;xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you declare a SOAP fault of type string, and then throw this in your service as a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> where the type parameter is a <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph> the string value is assigned to the <ph id="ph3">&lt;xref:System.ServiceModel.FaultException%601.Detail%2A?displayProperty=fullName&gt;</ph> property, and is not available from <ph id="ph4">&lt;xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Handling Faults</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> clients, SOAP faults that occur during communication that are of interest to client applications are raised as managed exceptions.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>While there are many exceptions that can occur during the execution of any program, applications using the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client programming model can expect to handle exceptions of the following two types as a result of communication.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> objects are thrown when an operation exceeds the specified timeout period.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> objects are thrown when there is some recoverable communication error condition on either the service or the client.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> class has two important derived types, <ph id="ph2">&lt;xref:System.ServiceModel.FaultException&gt;</ph> and the generic <ph id="ph3">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> exceptions are thrown when a listener receives a fault that is not expected or specified in the operation contract; usually this occurs when the application is being debugged and the service has the <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=fullName&gt;</ph> property set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> exceptions are thrown on the client when a fault that is specified in the operation contract is received in response to a two-way operation (that is, a method with an <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute with <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> set to <ph id="ph4">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When an <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service has the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=fullName&gt;</ph> property set to <ph id="ph4">`true`</ph> the client experiences this as an undeclared <ph id="ph5">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph6">&lt;xref:System.ServiceModel.ExceptionDetail&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Clients can either catch this specific fault or handle the fault in a catch block for <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Typically, only <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>, <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> exceptions are of interest to clients and services.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Other exceptions, of course, do occur.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Unexpected exceptions include catastrophic failures like <ph id="ph1">&lt;xref:System.OutOfMemoryException?displayProperty=fullName&gt;</ph>; typically applications should not catch such methods.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Catch Fault Exceptions in the Correct Order</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> derives from <ph id="ph2">&lt;xref:System.ServiceModel.FaultException&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.FaultException&gt;</ph> derives from <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>, it is important to catch these exceptions in the proper order.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If, for example, you have a try/catch block in which you first catch <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>, all specified and unspecified SOAP faults are handled there; any subsequent catch blocks to handle a custom <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> exception are never invoked.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Remember that one operation can return any number of specified faults.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Each fault is a unique type and must be handled separately.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Handle Exceptions When Closing the Channel</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Most of the preceding discussion has to do with faults sent in the course of processing application messages, that is, messages explicitly sent by the client when the client application calls operations on the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Even with local objects disposing the object can either raise or mask exceptions that occur during the recycling process.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Something similar can occur when you use <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client objects.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When you call operations you are sending messages over an established connection.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Closing the channel can throw exceptions if the connection cannot be cleanly closed or is already closed, even if all the operations returned properly.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Typically, client object channels are closed in one of the following ways:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object is recycled.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When the client application calls <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601.Close%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the client application calls <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When the client application calls an operation that is a terminating operation for a session.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In all cases, closing the channel instructs the channel to begin closing any underlying channels that may be sending messages to support complex functionality at the application level.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, when a contract requires sessions a binding attempts to establish a session by exchanging messages with the service channel until a session is established.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When the channel is closed, the underlying session channel notifies the service that the session is terminated.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this case, if the channel has already aborted, closed, or is otherwise unusable (for example, when a network cable is unplugged), the client channel cannot inform the service channel that the session is terminated and an exception can result.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Abort the Channel If Necessary</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Because closing the channel can also throw exceptions, then, it is recommended that in addition to catching fault exceptions in the correct order, it is important to abort the channel that was used in making the call in the catch block.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the fault conveys error information specific to an operation and it remains possible that others can use it, there is no need to abort the channel (although these cases are rare).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In all other cases, it is recommended that you abort the channel.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For a sample that demonstrates all of these points, see <bpt id="p1">[</bpt>Expected Exceptions<ept id="p1">](../../../docs/framework/wcf/samples/expected-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following code example shows how to handle SOAP fault exceptions in a basic client application, including a declared fault and an undeclared fault.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This sample code does not use the <ph id="ph1">`using`</ph> construct.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because closing channels can throw exceptions, it is recommended that applications create a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client first, and then open, use, and close the <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client in the same try block.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>WCF Client Overview<ept id="p1">](../../../docs/framework/wcf/wcf-client-overview.md)</ept> and <bpt id="p2">[</bpt>Avoiding Problems with the Using Statement<ept id="p2">](../../../docs/framework/wcf/samples/avoiding-problems-with-the-using-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FaultContractAttribute#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FaultContractAttribute#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Expected Exceptions<ept id="p1">](../../../docs/framework/wcf/samples/expected-exceptions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Avoiding Problems with the Using Statement<ept id="p1">](../../../docs/framework/wcf/samples/avoiding-problems-with-the-using-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>