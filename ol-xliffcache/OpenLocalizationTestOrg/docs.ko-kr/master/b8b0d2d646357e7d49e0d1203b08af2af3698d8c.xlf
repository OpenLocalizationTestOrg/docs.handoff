<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-test-for-reference-equality-identity.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8b0d2d646357e7d49e0d1203b08af2af3698d8c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\how-to-test-for-reference-equality-identity.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">160d858b3e1d91d479866cb099104649c3b0d955</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb0f4fe80d36788d0637868aeddf03bf28aeee36</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Test for Reference Equality (Identity) (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Test for Reference Equality (Identity) (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You do not have to implement any custom logic to support reference equality comparisons in your types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This functionality is provided for all types by the static <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example shows how to determine whether two variables have <bpt id="p1">*</bpt>reference equality<ept id="p1">*</ept>, which means that they refer to the same object in memory.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The example also shows why <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> always returns <ph id="ph2">`false`</ph> for value types and why you should not use  <ph id="ph3">&lt;xref:System.Object.ReferenceEquals%2A&gt;</ph> to determine string equality.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The implementation of <ph id="ph1">`Equals`</ph> in the <ph id="ph2">&lt;xref:System.Object?displayProperty=fullName&gt;</ph> universal base class also performs a reference equality check, but it is best not to use this because, if a class happens to override the method, the results might not be what you expect.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The same is true for the <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When they are operating on reference types, the default behavior of == and <ph id="ph1">`!=`</ph> is to perform a reference equality check.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, derived classes can overload the operator to perform a value equality check.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To minimize the potential for error, it is best to always use <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A&gt;</ph> when you have to determine whether two objects have reference equality.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Constant strings within the same assembly are always interned by the runtime.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>That is, only one instance of each unique literal string is maintained.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, the runtime does not guarantee that strings created at runtime are interned, nor does it guarantee that two equal constant strings in different assemblies are interned.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Equality Comparisons<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/equality-comparisons.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>