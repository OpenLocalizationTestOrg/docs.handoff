{"content":"---\ntitle: \"Using Constructors - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"constructors [C#], about constructors\"\nms.assetid: 464253b2-fd5d-469a-836d-df0fdf2a43f7\n---\n# Using Constructors (C# Programming Guide)\nWhen a [class](../../../csharp/language-reference/keywords/class.md) or [struct](../../../csharp/language-reference/keywords/struct.md) is created, its constructor is called. Constructors have the same name as the class or struct, and they usually initialize the data members of the new object.  \n  \n In the following example, a class named `Taxi` is defined by using a simple constructor. This class is then instantiated with the [new](../../../csharp/language-reference/keywords/new.md) operator. The `Taxi` constructor is invoked by the `new` operator immediately after memory is allocated for the new object.  \n  \n [!code-csharp[csProgGuideObjects#53](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#53)]  \n  \n A constructor that takes no parameters is called a *default constructor*. Default constructors are invoked whenever an object is instantiated by using the `new` operator and no arguments are provided to `new`. For more information, see [Instance Constructors](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md).  \n  \n Unless the class is [static](../../../csharp/language-reference/keywords/static.md), classes without constructors are given a public default constructor by the C# compiler in order to enable class instantiation. For more information, see [Static Classes and Static Class Members](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md).  \n  \n You can prevent a class from being instantiated by making the constructor private, as follows:  \n  \n [!code-csharp[csProgGuideObjects#11](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#11)]  \n  \n For more information, see [Private Constructors](../../../csharp/programming-guide/classes-and-structs/private-constructors.md).  \n  \n Constructors for [struct](../../../csharp/language-reference/keywords/struct.md) types resemble class constructors, but `structs` cannot contain an explicit default constructor because one is provided automatically by the compiler. This constructor initializes each field in the `struct` to the default values. For more information, see [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md). However, this default constructor is only invoked if the `struct` is instantiated with `new`. For example, this code uses the default constructor for <xref:System.Int32>, so that you are assured that the integer is initialized:  \n  \n```csharp  \nint i = new int();  \nConsole.WriteLine(i);  \n```  \n  \n The following code, however, causes a compiler error because it does not use `new`, and because it tries to use an object that has not been initialized:  \n  \n```  \nint i;  \nConsole.WriteLine(i);  \n```  \n  \n Alternatively, objects based on `structs` (including all built-in numeric types) can be initialized or assigned and then used as in the following example:  \n  \n```  \nint a = 44;  // Initialize the value type...  \nint b;  \nb = 33;      // Or assign it before using it.  \nConsole.WriteLine(\"{0}, {1}\", a, b);  \n```  \n  \n So calling the default constructor for a value type is not required.  \n  \n Both classes and `structs` can define constructors that take parameters. Constructors that take parameters must be called through a `new` statement or a [base](../../../csharp/language-reference/keywords/base.md) statement. Classes and `structs` can also define multiple constructors, and neither is required to define a default constructor. For example:  \n  \n [!code-csharp[csProgGuideObjects#54](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#54)]  \n  \n This class can be created by using either of the following statements:  \n  \n [!code-csharp[csProgGuideObjects#55](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#55)]  \n  \n A constructor can use the `base` keyword to call the constructor of a base class. For example:  \n  \n [!code-csharp[csProgGuideObjects#56](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#56)]  \n  \n In this example, the constructor for the base class is called before the block for the constructor is executed. The `base` keyword can be used with or without parameters. Any parameters to the constructor can be used as parameters to `base`, or as part of an expression. For more information, see [base](../../../csharp/language-reference/keywords/base.md).  \n  \n In a derived class, if a base-class constructor is not called explicitly by using the `base` keyword, the default constructor, if there is one, is called implicitly. This means that the following constructor declarations are effectively the same:  \n  \n [!code-csharp[csProgGuideObjects#58](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#58)]  \n  \n [!code-csharp[csProgGuideObjects#57](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#57)]  \n  \n If a base class does not offer a default constructor, the derived class must make an explicit call to a base constructor by using `base`.  \n  \n A constructor can invoke another constructor in the same object by using the [this](../../../csharp/language-reference/keywords/this.md) keyword. Like `base`, `this` can be used with or without parameters, and any parameters in the constructor are available as parameters to `this`, or as part of an expression. For example, the second constructor in the previous example can be rewritten using `this`:  \n  \n [!code-csharp[csProgGuideObjects#59](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#59)]  \n  \n The use of the `this` keyword in the previous example causes this constructor to be called:  \n  \n [!code-csharp[csProgGuideObjects#60](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#60)]  \n  \n Constructors can be marked as [public](../../../csharp/language-reference/keywords/public.md), [private](../../../csharp/language-reference/keywords/private.md), [protected](../../../csharp/language-reference/keywords/protected.md), [internal](../../../csharp/language-reference/keywords/internal.md), [protected internal](../../../csharp/language-reference/keywords/protected-internal.md) or [private protected](../../../csharp/language-reference/keywords/private-protected.md). These access modifiers define how users of the class can construct the class. For more information, see [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md).  \n  \n A constructor can be declared static by using the [static](../../../csharp/language-reference/keywords/static.md) keyword. Static constructors are called automatically, immediately before any static fields are accessed, and are generally used to initialize static class members. For more information, see [Static Constructors](../../../csharp/programming-guide/classes-and-structs/static-constructors.md).  \n  \n## C# Language Specification  \n\nFor more information, see [Instance constructors](~/_csharplang/spec/classes.md#instance-constructors) and [Static constructors](~/_csharplang/spec/classes.md#static-constructors) in the [C# Language Specification](../../language-reference/language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)\n- [Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md)\n- [Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)\n","nodes":[{"pos":[4,209],"embed":true,"restype":"x-metadata","content":"title: \"Using Constructors - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"constructors [C#], about constructors\"\nms.assetid: 464253b2-fd5d-469a-836d-df0fdf2a43f7","nodes":[{"content":"Using Constructors - C# Programming Guide","nodes":[{"pos":[0,41],"content":"Using Constructors - C# Programming Guide","nodes":[{"content":"Using Constructors - C# Programming Guide","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[216,257],"content":"Using Constructors (C# Programming Guide)","linkify":"Using Constructors (C# Programming Guide)","nodes":[{"content":"Using Constructors (C# Programming Guide)","pos":[0,41]}]},{"content":"When a <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](../../../csharp/language-reference/keywords/class.md)</ept> or <bpt id=\"p2\">[</bpt>struct<ept id=\"p2\">](../../../csharp/language-reference/keywords/struct.md)</ept> is created, its constructor is called.","pos":[258,432],"source":"When a [class](../../../csharp/language-reference/keywords/class.md) or [struct](../../../csharp/language-reference/keywords/struct.md) is created, its constructor is called."},{"content":"Constructors have the same name as the class or struct, and they usually initialize the data members of the new object.","pos":[433,552]},{"content":"In the following example, a class named <ph id=\"ph1\">`Taxi`</ph> is defined by using a simple constructor.","pos":[559,647],"source":"In the following example, a class named `Taxi` is defined by using a simple constructor."},{"content":"This class is then instantiated with the <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../../../csharp/language-reference/keywords/new.md)</ept> operator.","pos":[648,756],"source":" This class is then instantiated with the [new](../../../csharp/language-reference/keywords/new.md) operator."},{"content":"The <ph id=\"ph1\">`Taxi`</ph> constructor is invoked by the <ph id=\"ph2\">`new`</ph> operator immediately after memory is allocated for the new object.","pos":[757,870],"source":" The `Taxi` constructor is invoked by the `new` operator immediately after memory is allocated for the new object."},{"content":"A constructor that takes no parameters is called a <bpt id=\"p1\">*</bpt>default constructor<ept id=\"p1\">*</ept>.","pos":[1005,1078],"source":"A constructor that takes no parameters is called a *default constructor*."},{"content":"Default constructors are invoked whenever an object is instantiated by using the <ph id=\"ph1\">`new`</ph> operator and no arguments are provided to <ph id=\"ph2\">`new`</ph>.","pos":[1079,1214],"source":" Default constructors are invoked whenever an object is instantiated by using the `new` operator and no arguments are provided to `new`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Instance Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)</ept>.","pos":[1215,1345],"source":" For more information, see [Instance Constructors](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)."},{"content":"Unless the class is <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept>, classes without constructors are given a public default constructor by the C# compiler in order to enable class instantiation.","pos":[1352,1563],"source":"Unless the class is [static](../../../csharp/language-reference/keywords/static.md), classes without constructors are given a public default constructor by the C# compiler in order to enable class instantiation."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Static Classes and Static Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md)</ept>.","pos":[1564,1730],"source":" For more information, see [Static Classes and Static Class Members](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md)."},{"content":"You can prevent a class from being instantiated by making the constructor private, as follows:","pos":[1737,1831]},{"pos":[1966,2094],"content":"For more information, see <bpt id=\"p1\">[</bpt>Private Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/private-constructors.md)</ept>.","source":"For more information, see [Private Constructors](../../../csharp/programming-guide/classes-and-structs/private-constructors.md)."},{"content":"Constructors for <bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](../../../csharp/language-reference/keywords/struct.md)</ept> types resemble class constructors, but <ph id=\"ph1\">`structs`</ph> cannot contain an explicit default constructor because one is provided automatically by the compiler.","pos":[2101,2332],"source":"Constructors for [struct](../../../csharp/language-reference/keywords/struct.md) types resemble class constructors, but `structs` cannot contain an explicit default constructor because one is provided automatically by the compiler."},{"content":"This constructor initializes each field in the <ph id=\"ph1\">`struct`</ph> to the default values.","pos":[2333,2411],"source":" This constructor initializes each field in the `struct` to the default values."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Default Values Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>.","pos":[2412,2530],"source":" For more information, see [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)."},{"content":"However, this default constructor is only invoked if the <ph id=\"ph1\">`struct`</ph> is instantiated with <ph id=\"ph2\">`new`</ph>.","pos":[2531,2624],"source":" However, this default constructor is only invoked if the `struct` is instantiated with `new`."},{"content":"For example, this code uses the default constructor for <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph>, so that you are assured that the integer is initialized:","pos":[2625,2758],"source":" For example, this code uses the default constructor for <xref:System.Int32>, so that you are assured that the integer is initialized:"},{"pos":[2831,2983],"content":"The following code, however, causes a compiler error because it does not use <ph id=\"ph1\">`new`</ph>, and because it tries to use an object that has not been initialized:","source":"The following code, however, causes a compiler error because it does not use `new`, and because it tries to use an object that has not been initialized:"},{"pos":[3038,3192],"content":"Alternatively, objects based on <ph id=\"ph1\">`structs`</ph> (including all built-in numeric types) can be initialized or assigned and then used as in the following example:","source":"Alternatively, objects based on `structs` (including all built-in numeric types) can be initialized or assigned and then used as in the following example:"},{"content":"So calling the default constructor for a value type is not required.","pos":[3357,3425]},{"content":"Both classes and <ph id=\"ph1\">`structs`</ph> can define constructors that take parameters.","pos":[3432,3504],"source":"Both classes and `structs` can define constructors that take parameters."},{"content":"Constructors that take parameters must be called through a <ph id=\"ph1\">`new`</ph> statement or a <bpt id=\"p1\">[</bpt>base<ept id=\"p1\">](../../../csharp/language-reference/keywords/base.md)</ept> statement.","pos":[3505,3655],"source":" Constructors that take parameters must be called through a `new` statement or a [base](../../../csharp/language-reference/keywords/base.md) statement."},{"content":"Classes and <ph id=\"ph1\">`structs`</ph> can also define multiple constructors, and neither is required to define a default constructor.","pos":[3656,3773],"source":" Classes and `structs` can also define multiple constructors, and neither is required to define a default constructor."},{"content":"For example:","pos":[3774,3786]},{"content":"This class can be created by using either of the following statements:","pos":[3921,3991]},{"content":"A constructor can use the <ph id=\"ph1\">`base`</ph> keyword to call the constructor of a base class.","pos":[4126,4207],"source":"A constructor can use the `base` keyword to call the constructor of a base class."},{"content":"For example:","pos":[4208,4220]},{"content":"In this example, the constructor for the base class is called before the block for the constructor is executed.","pos":[4355,4466]},{"content":"The <ph id=\"ph1\">`base`</ph> keyword can be used with or without parameters.","pos":[4467,4525],"source":" The `base` keyword can be used with or without parameters."},{"content":"Any parameters to the constructor can be used as parameters to <ph id=\"ph1\">`base`</ph>, or as part of an expression.","pos":[4526,4625],"source":" Any parameters to the constructor can be used as parameters to `base`, or as part of an expression."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>base<ept id=\"p1\">](../../../csharp/language-reference/keywords/base.md)</ept>.","pos":[4626,4712],"source":" For more information, see [base](../../../csharp/language-reference/keywords/base.md)."},{"content":"In a derived class, if a base-class constructor is not called explicitly by using the <ph id=\"ph1\">`base`</ph> keyword, the default constructor, if there is one, is called implicitly.","pos":[4719,4884],"source":"In a derived class, if a base-class constructor is not called explicitly by using the `base` keyword, the default constructor, if there is one, is called implicitly."},{"content":"This means that the following constructor declarations are effectively the same:","pos":[4885,4965]},{"pos":[5228,5365],"content":"If a base class does not offer a default constructor, the derived class must make an explicit call to a base constructor by using <ph id=\"ph1\">`base`</ph>.","source":"If a base class does not offer a default constructor, the derived class must make an explicit call to a base constructor by using `base`."},{"content":"A constructor can invoke another constructor in the same object by using the <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](../../../csharp/language-reference/keywords/this.md)</ept> keyword.","pos":[5372,5517],"source":"A constructor can invoke another constructor in the same object by using the [this](../../../csharp/language-reference/keywords/this.md) keyword."},{"content":"Like <ph id=\"ph1\">`base`</ph>, <ph id=\"ph2\">`this`</ph> can be used with or without parameters, and any parameters in the constructor are available as parameters to <ph id=\"ph3\">`this`</ph>, or as part of an expression.","pos":[5518,5683],"source":" Like `base`, `this` can be used with or without parameters, and any parameters in the constructor are available as parameters to `this`, or as part of an expression."},{"content":"For example, the second constructor in the previous example can be rewritten using <ph id=\"ph1\">`this`</ph>:","pos":[5684,5774],"source":" For example, the second constructor in the previous example can be rewritten using `this`:"},{"pos":[5909,6000],"content":"The use of the <ph id=\"ph1\">`this`</ph> keyword in the previous example causes this constructor to be called:","source":"The use of the `this` keyword in the previous example causes this constructor to be called:"},{"content":"Constructors can be marked as <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../../../csharp/language-reference/keywords/public.md)</ept>, <bpt id=\"p2\">[</bpt>private<ept id=\"p2\">](../../../csharp/language-reference/keywords/private.md)</ept>, <bpt id=\"p3\">[</bpt>protected<ept id=\"p3\">](../../../csharp/language-reference/keywords/protected.md)</ept>, <bpt id=\"p4\">[</bpt>internal<ept id=\"p4\">](../../../csharp/language-reference/keywords/internal.md)</ept>, <bpt id=\"p5\">[</bpt>protected internal<ept id=\"p5\">](../../../csharp/language-reference/keywords/protected-internal.md)</ept> or <bpt id=\"p6\">[</bpt>private protected<ept id=\"p6\">](../../../csharp/language-reference/keywords/private-protected.md)</ept>.","pos":[6135,6614],"source":"Constructors can be marked as [public](../../../csharp/language-reference/keywords/public.md), [private](../../../csharp/language-reference/keywords/private.md), [protected](../../../csharp/language-reference/keywords/protected.md), [internal](../../../csharp/language-reference/keywords/internal.md), [protected internal](../../../csharp/language-reference/keywords/protected-internal.md) or [private protected](../../../csharp/language-reference/keywords/private-protected.md)."},{"content":"These access modifiers define how users of the class can construct the class.","pos":[6615,6692]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)</ept>.","pos":[6693,6813],"source":" For more information, see [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)."},{"content":"A constructor can be declared static by using the <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> keyword.","pos":[6820,6942],"source":"A constructor can be declared static by using the [static](../../../csharp/language-reference/keywords/static.md) keyword."},{"content":"Static constructors are called automatically, immediately before any static fields are accessed, and are generally used to initialize static class members.","pos":[6943,7098]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Static Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.","pos":[7099,7225],"source":" For more information, see [Static Constructors](../../../csharp/programming-guide/classes-and-structs/static-constructors.md)."},{"pos":[7234,7259],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Instance constructors<ept id=\"p1\">](~/_csharplang/spec/classes.md#instance-constructors)</ept> and <bpt id=\"p2\">[</bpt>Static constructors<ept id=\"p2\">](~/_csharplang/spec/classes.md#static-constructors)</ept> in the <bpt id=\"p3\">[</bpt>C# Language Specification<ept id=\"p3\">](../../language-reference/language-specification/index.md)</ept>.","pos":[7263,7536],"source":"For more information, see [Instance constructors](~/_csharplang/spec/classes.md#instance-constructors) and [Static constructors](~/_csharplang/spec/classes.md#static-constructors) in the [C# Language Specification](../../language-reference/language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[7537,7613]},{"pos":[7620,7628],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7632,7698],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[7701,7786],"content":"<bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept>","source":"[Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)"},{"pos":[7789,7874],"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/constructors.md)</ept>","source":"[Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md)"},{"pos":[7877,7959],"content":"<bpt id=\"p1\">[</bpt>Finalizers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/destructors.md)</ept>","source":"[Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)"}]}