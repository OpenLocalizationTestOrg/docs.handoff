{"content":"---\ntitle: \"Fine-Tuning Your Async Application (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 4c3e7997-a95f-4fbe-a6ac-60ba042d30b9\n---\n# Fine-Tuning Your Async Application (Visual Basic)\nYou can add precision and flexibility to your async applications by using the methods and properties that the <xref:System.Threading.Tasks.Task> type makes available. The topics in this section show examples that use <xref:System.Threading.CancellationToken> and important `Task` methods such as <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=nameWithType>.  \n  \n By using `WhenAny` and `WhenAll`, you can more easily start multiple tasks and await their completion by monitoring a single task.  \n  \n-   `WhenAny` returns a task that completes when any task in a collection is complete.  \n  \n     For examples that use `WhenAny`, see  [Cancel Remaining Async Tasks after One Is Complete (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)and [Start Multiple Async Tasks and Process Them As They Complete (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md).  \n  \n-   `WhenAll` returns a task that completes when all tasks in a collection are complete.  \n  \n     For more information and an example that uses `WhenAll`, see [How to: Extend the Async Walkthrough by Using Task.WhenAll (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md).  \n  \n This section includes the following examples.  \n  \n-   [Cancel an Async Task or a List of Tasks (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md).  \n  \n-   [Cancel Async Tasks after a Period of Time (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md)  \n  \n-   [Cancel Remaining Async Tasks after One Is Complete (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)  \n  \n-   [Start Multiple Async Tasks and Process Them As They Complete (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)  \n  \n> [!NOTE]\n>  To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.  \n  \n The projects create a UI that contains a button that starts the process and a button that cancels it, as the following image shows. The buttons are named `startButton` and `cancelButton`.  \n  \n ![WPF window with Cancel button](./media/fine-tuning-your-async-application/cancellation-and-start-button.png \"Dialog box with a Start and Stop button\")  \n  \n You can download the complete Windows Presentation Foundation (WPF) projects from [Async Sample: Fine Tuning Your Application](https://code.msdn.microsoft.com/Async-Fine-Tuning-Your-a676abea).  \n  \n## See also\n\n- [Asynchronous Programming with Async and Await (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/index.md)\n","nodes":[{"pos":[4,131],"embed":true,"restype":"x-metadata","content":"title: \"Fine-Tuning Your Async Application (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 4c3e7997-a95f-4fbe-a6ac-60ba042d30b9","nodes":[{"content":"Fine-Tuning Your Async Application (Visual Basic)","nodes":[{"pos":[0,49],"content":"Fine-Tuning Your Async Application (Visual Basic)","nodes":[{"content":"Fine-Tuning Your Async Application (Visual Basic)","pos":[0,49]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[138,187],"content":"Fine-Tuning Your Async Application (Visual Basic)","linkify":"Fine-Tuning Your Async Application (Visual Basic)","nodes":[{"content":"Fine-Tuning Your Async Application (Visual Basic)","pos":[0,49]}]},{"content":"You can add precision and flexibility to your async applications by using the methods and properties that the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> type makes available.","pos":[188,354],"source":"You can add precision and flexibility to your async applications by using the methods and properties that the <xref:System.Threading.Tasks.Task> type makes available."},{"content":"The topics in this section show examples that use <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> and important <ph id=\"ph2\">`Task`</ph> methods such as <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=nameWithType&gt;</ph>.","pos":[355,638],"source":" The topics in this section show examples that use <xref:System.Threading.CancellationToken> and important `Task` methods such as <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=nameWithType>."},{"pos":[645,775],"content":"By using <ph id=\"ph1\">`WhenAny`</ph> and <ph id=\"ph2\">`WhenAll`</ph>, you can more easily start multiple tasks and await their completion by monitoring a single task.","source":"By using `WhenAny` and `WhenAll`, you can more easily start multiple tasks and await their completion by monitoring a single task."},{"pos":[785,867],"content":"<ph id=\"ph1\">`WhenAny`</ph> returns a task that completes when any task in a collection is complete.","source":"`WhenAny` returns a task that completes when any task in a collection is complete."},{"pos":[878,1301],"content":"For examples that use <ph id=\"ph1\">`WhenAny`</ph>, see  <bpt id=\"p1\">[</bpt>Cancel Remaining Async Tasks after One Is Complete (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)</ept>and <bpt id=\"p2\">[</bpt>Start Multiple Async Tasks and Process Them As They Complete (Visual Basic)<ept id=\"p2\">](../../../../visual-basic/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)</ept>.","source":"For examples that use `WhenAny`, see  [Cancel Remaining Async Tasks after One Is Complete (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)and [Start Multiple Async Tasks and Process Them As They Complete (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)."},{"pos":[1311,1395],"content":"<ph id=\"ph1\">`WhenAll`</ph> returns a task that completes when all tasks in a collection are complete.","source":"`WhenAll` returns a task that completes when all tasks in a collection are complete."},{"pos":[1406,1663],"content":"For more information and an example that uses <ph id=\"ph1\">`WhenAll`</ph>, see <bpt id=\"p1\">[</bpt>How to: Extend the Async Walkthrough by Using Task.WhenAll (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept>.","source":"For more information and an example that uses `WhenAll`, see [How to: Extend the Async Walkthrough by Using Task.WhenAll (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)."},{"content":"This section includes the following examples.","pos":[1670,1715]},{"pos":[1725,1884],"content":"<bpt id=\"p1\">[</bpt>Cancel an Async Task or a List of Tasks (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)</ept>.","source":"[Cancel an Async Task or a List of Tasks (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)."},{"pos":[1894,2056],"content":"<bpt id=\"p1\">[</bpt>Cancel Async Tasks after a Period of Time (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md)</ept>","source":"[Cancel Async Tasks after a Period of Time (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md)"},{"pos":[2066,2246],"content":"<bpt id=\"p1\">[</bpt>Cancel Remaining Async Tasks after One Is Complete (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)</ept>","source":"[Cancel Remaining Async Tasks after One Is Complete (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)"},{"pos":[2256,2456],"content":"<bpt id=\"p1\">[</bpt>Start Multiple Async Tasks and Process Them As They Complete (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)</ept>","source":"[Start Multiple Async Tasks and Process Them As They Complete (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)"},{"pos":[2464,2601],"content":"[!NOTE]\n To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.","leadings":["","> "],"nodes":[{"content":"To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.","pos":[9,135]}]},{"content":"The projects create a UI that contains a button that starts the process and a button that cancels it, as the following image shows.","pos":[2608,2739]},{"content":"The buttons are named <ph id=\"ph1\">`startButton`</ph> and <ph id=\"ph2\">`cancelButton`</ph>.","pos":[2740,2795],"source":" The buttons are named `startButton` and `cancelButton`."},{"pos":[2802,2954],"content":"<bpt id=\"p1\">![</bpt>WPF window with Cancel button<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/fine-tuning-your-async-application/cancellation-and-start-button.png \"</bpt>Dialog box with a Start and Stop button<ept id=\"p2\">\")</ept>","source":"![WPF window with Cancel button](./media/fine-tuning-your-async-application/cancellation-and-start-button.png \"Dialog box with a Start and Stop button\")"},{"pos":[2961,3153],"content":"You can download the complete Windows Presentation Foundation (WPF) projects from <bpt id=\"p1\">[</bpt>Async Sample: Fine Tuning Your Application<ept id=\"p1\">](https://code.msdn.microsoft.com/Async-Fine-Tuning-Your-a676abea)</ept>.","source":"You can download the complete Windows Presentation Foundation (WPF) projects from [Async Sample: Fine Tuning Your Application](https://code.msdn.microsoft.com/Async-Fine-Tuning-Your-a676abea)."},{"pos":[3162,3170],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3174,3304],"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>","source":"[Asynchronous Programming with Async and Await (Visual Basic)](../../../../visual-basic/programming-guide/concepts/async/index.md)"}]}