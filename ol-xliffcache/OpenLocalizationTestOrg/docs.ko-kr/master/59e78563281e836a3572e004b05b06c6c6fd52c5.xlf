<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="timers.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59e78563281e836a3572e004b05b06c6c6fd52c5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\timers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13673fab1aaa3cbe3ec543b8fa2e4e611799aae9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f7a44002b6d0328c767f6b9c56c4cb5b542f34b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Timers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Timers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Timers are lightweight objects that enable you to specify a delegate to be called at a specified time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A thread in the thread pool performs the wait operation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph> class is straightforward.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You create a <bpt id="p1">**</bpt>Timer<ept id="p1">**</ept>, passing a <ph id="ph1">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate to the callback method, an object representing state that will be passed to the callback, an initial raise time, and a time representing the period between callback invocations.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To cancel a pending timer, call the <bpt id="p1">**</bpt>Timer.Dispose<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are two other timer classes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;</ph> class is a control that works with visual designers and is meant to be used in user interface contexts; it raises events on the user interface thread.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> class derives from <ph id="ph2">&lt;xref:System.ComponentModel.Component&gt;</ph>, so it can be used with visual designers; it also raises events, but it raises them on a <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph> class makes callbacks on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread and does not use the event model at all.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It also provides a state object to the callback method, which the other timers do not.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is extremely lightweight.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code example starts a timer that starts after one second (1000 milliseconds) and ticks every second until you press the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The variable containing the reference to the timer is a class-level field, to ensure that the timer is not subject to garbage collection while it is still running.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information on aggressive garbage collection, see <ph id="ph1">&lt;xref:System.GC.KeepAlive%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](../../../docs/standard/threading/threading-objects-and-features.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>