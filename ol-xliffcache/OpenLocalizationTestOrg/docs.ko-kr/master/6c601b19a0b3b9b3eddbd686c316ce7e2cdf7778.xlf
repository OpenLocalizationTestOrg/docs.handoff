<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="caching-support-for-wcf-web-http-services.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c601b19a0b3b9b3eddbd686c316ce7e2cdf7778</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\caching-support-for-wcf-web-http-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1ab36cbc0072a7577862629dea3250eeb8d869e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3456d68e45af867e303f582597084900edab00a3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Caching Support for WCF Web HTTP Services</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Caching Support for WCF Web HTTP Services</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[netfx_current_long](../../../../includes/netfx-current-long-md.md)]</ph> enables you to use the declarative caching mechanism already available in ASP.NET in your WCF Web HTTP services.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This allows you to cache responses from your WCF Web HTTP service operations.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When a user sends an HTTP GET to your service that is configured for caching, ASP.NET sends back the cached response and the service method is not called.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When the cache expires, the next time a user sends an HTTP GET, your service method is called and the response is once again cached.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about ASP.NET caching, see <bpt id="p1">[</bpt>ASP.NET Caching Overview<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=152534)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Basic Web HTTP Service Caching</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To enable WEB HTTP service caching you must first enable ASP.NET compatibility by applying the <ph id="ph1">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute&gt;</ph> to the service setting <ph id="ph2">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute.RequirementsMode%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Required&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[netfx40_short](../../../../includes/netfx40-short-md.md)]</ph> introduces a new attribute called <ph id="ph2">&lt;xref:System.ServiceModel.Web.AspNetCacheProfileAttribute&gt;</ph> that allows you to specify a cache profile name.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This attribute is applied to a service operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example applies the <ph id="ph1">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute&gt;</ph> to a service to enable ASP.NET compatibility and configures the <ph id="ph2">`GetCustomer`</ph> operation for caching.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Web.AspNetCacheProfileAttribute&gt;</ph> attribute specifies a cache profile that contains the cache settings to be used.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You must also turn on ASP.NET compatibility mode in the Web.config file as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If ASP.NET compatibility mode is not turned on and the <ph id="ph1">&lt;xref:System.ServiceModel.Web.AspNetCacheProfileAttribute&gt;</ph> is used an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The cache profile name specified by the <ph id="ph1">&lt;xref:System.ServiceModel.Web.AspNetCacheProfileAttribute&gt;</ph> identifies a cache profile that is added to your Web.config configuration file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The cache profile is defined with in a &lt;<ph id="ph1">`outputCacheSetting`</ph>&gt; element as shown in the following configuration example.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is the same configuration element that is available to ASP.NET applications.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about ASP.NET cache profiles, see <ph id="ph1">&lt;xref:System.Web.Configuration.OutputCacheProfile&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For Web HTTP services, the most important attributes in the cache profile are: <ph id="ph1">`cacheDuration`</ph> and <ph id="ph2">`varyByParam`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Both of these attributes are required.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`cacheDuration`</ph> sets the amount of time a response should be cached in seconds.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`varyByParam`</ph> allows you to specify a query string parameter that is used to cache responses.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All requests made with different query string parameter values are cached separately.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, once an initial request is made to <ph id="ph1">`http://MyServer/MyHttpService/MyOperation?param=10`</ph>, all subsequent requests made with the same URI would be returned the cached response (so long as the cache duration has not elapsed).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Responses for a similar request that is the same but has a different value for the parameter query string parameter are cached separately.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you do not want this separate caching behavior, set <ph id="ph1">`varyByParam`</ph> to "none".</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>SQL Cache Dependency</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Web HTTP service responses can also be cached with a SQL cache dependency.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If your WCF Web HTTP service depends on data stored in a SQL database, you may want to cache the service's response and invalidate the cached response when data in the SQL database table changes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This behavior is configured completely within the Web.config file.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You must first define a connection string in the &lt;<ph id="ph1">`connectionStrings`</ph>&gt; element.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Then you must enable SQL cache dependency within a &lt;<ph id="ph1">`caching`</ph>&gt; element within the &lt;<ph id="ph2">`system.web`</ph>&gt; element as shown in the following config example.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Here SQL cache dependency is enabled and a polling time of 1000 milliseconds is set.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Each time the polling time elapses the database table is checked for updates.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If changes are detected the contents of the cache are removed and the next time the service operation is invoked a new response is cached.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Within the &lt;<ph id="ph1">`sqlCacheDependency`</ph>&gt; element add the databases and reference the connection strings within the &lt;<ph id="ph2">`databases`</ph>&gt; element as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Next you must configure the output cache settings within the &lt;<ph id="ph1">`caching`</ph>&gt; element as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Here the cache duration is set to 60 seconds, <ph id="ph1">`varyByParam`</ph> is set to none and <ph id="ph2">`sqlDependency`</ph> is set to a semicolon delimited list of database name/table pairs separated by colons.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When data in <ph id="ph1">`MyTable`</ph> is changed the cached response for the service operation is removed and when the operation is invoked a new response is generated (by calling the service operation), cached, and returned to the client.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For ASP.NET to access a SQL database, you must use the <bpt id="p1">[</bpt>ASP.NET SQL Server Registration Tool<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=152536)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In addition you must allow the appropriate user account access to the database and table.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing SQL Server from a Web Application<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=178988)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Conditional HTTP GET Based Caching</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In Web HTTP scenarios a conditional HTTP GET is often used by services to implement intelligent HTTP caching as described in the <bpt id="p1">[</bpt>HTTP Specification<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=165800)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To do this the service must set the value of the ETag header in the HTTP response.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It also must check the If-None-Match header in the HTTP request to see whether any of the ETag specified matches the current ETag.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For GET and HEAD requests, <ph id="ph1">&lt;xref:System.ServiceModel.Web.IncomingWebRequestContext.CheckConditionalRetrieve%2A&gt;</ph> takes an ETag value and checks it against the If-None-Match header of the request.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the header is present and there is a match, a <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebFaultException&gt;</ph> with a HTTP status code 304 (Not Modified) is thrown and an ETag header is added to the response with the matching ETag.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>One overload of the <ph id="ph1">&lt;xref:System.ServiceModel.Web.IncomingWebRequestContext.CheckConditionalRetrieve%2A&gt;</ph> method takes a last modified date and checks it against the If-Modified-Since header of the request.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the header is present and the resource has not been modified since, a <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebFaultException&gt;</ph> with an HTTP status code 304 (Not Modified) is thrown.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For PUT, POST, and DELETE requests, <ph id="ph1">&lt;xref:System.ServiceModel.Web.IncomingWebRequestContext.CheckConditionalUpdate%2A&gt;</ph> takes the current ETag value of a resource.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the current ETag value is null, the method checks that the If-None- Match header has a value of "*".</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the current ETag value is not a default value, then the method checks the current ETag value against the If- Match header of the request.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In either case, the method throws a <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebFaultException&gt;</ph> with an HTTP status code 412 (Precondition Failed) if the expected header is not present in the request or its value does not satisfy the conditional check and sets the ETag header of the response to the current ETag value.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">`CheckConditional`</ph> methods and the <ph id="ph2">&lt;xref:System.ServiceModel.Web.OutgoingWebResponseContext.SetETag%2A&gt;</ph> method ensures that the ETag value set on the response header is a valid ETag according to the HTTP specification.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This includes surrounding the ETag value in double quotes if they are not already present and properly escaping any internal double quote characters.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Weak ETag comparison is not supported.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example shows how to use these methods.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Requests that require authorization should not have their responses cached, because the authorization is not performed when the response is served from the cache.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Caching such responses would introduce a serious security vulnerability.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Usually, requests that require authorization provide user-specific data and therefore server-side caching is not even beneficial.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In such situations, client-side caching or simply not caching at all will be more appropriate.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>