<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="endpoint-addresses.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-229404f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">334726bd3bb2ea2c481f6df4344f2528870ca238</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\endpoint-addresses.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5fd4231d5fd4eeefcfe40dc62d7e8bf6b8e69eca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2583a2f79bb7a3cca584f6f0db5e7089b69304b0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Endpoint Addresses | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Endpoint Addresses</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Every endpoint has an address associated with it, which is used to locate and identify the endpoint.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This address consists primarily of a Uniform Resource Identifier (URI), which specifies the location of the endpoint.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The endpoint address is represented in the <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> programming model by the <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> class, which contains an optional <ph id="ph3">&lt;xref:System.ServiceModel.EndpointAddress.Identity%2A&gt;</ph> property that enables the authentication of the endpoint by other endpoints that exchange messages with it, and a set of optional <ph id="ph4">&lt;xref:System.ServiceModel.EndpointAddress.Headers%2A&gt;</ph> properties, which define any other SOAP headers required to reach the service.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The optional headers provide additional and more detailed addressing information to identify or interact with the service endpoint.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The address of an endpoint is represented on the wire as a WS-Addressing endpoint reference (EPR).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>URI Structure of an Address</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The address URI for most transports has four parts.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the four parts of the URI <ph id="ph1">http://www.fabrikam.com:322/mathservice.svc/secureEndpoint</ph> can be itemized as follows:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Scheme: http:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Machine: www.fabrikam.com</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(optional) Port: 322</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Path: /mathservice.svc/secureEndpoint</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Defining an Address for a Service</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The endpoint address for a service can be specified either imperatively using code or declaratively through configuration.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Defining endpoints in code is usually not practical because the bindings and addresses for a deployed service are typically different from those used while the service is being developed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Generally, it is more practical to define service endpoints using configuration rather than code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Keeping the binding and addressing information out of the code allows them to change without having to recompile or redeploy the application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Defining an Address in Configuration</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To define an endpoint in a configuration file, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>endpoint&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/endpoint-element.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For details and an example, see <bpt id="p1">[</bpt>Specifying an Endpoint Address<ept id="p1">](../../../../docs/framework/wcf/specifying-an-endpoint-address.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Defining an Address in Code</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An endpoint address can be created in code with the <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For details and an example, see <bpt id="p1">[</bpt>Specifying an Endpoint Address<ept id="p1">](../../../../docs/framework/wcf/specifying-an-endpoint-address.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Endpoints in WSDL</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An endpoint address can also be represented in WSDL as a WS-Addressing EPR element inside the corresponding endpoint's <ph id="ph1">`wsdl:port`</ph> element.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The EPR contains the endpoint's address as well as any address properties.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For details and an example, see <bpt id="p1">[</bpt>Specifying an Endpoint Address<ept id="p1">](../../../../docs/framework/wcf/specifying-an-endpoint-address.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Multiple IIS Binding Support in .NET Framework 3.5</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Internet service providers often host many applications on the same server and site to increase the site density and lower total cost of ownership.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These applications are typically bound to different base addresses.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An Internet Information Services (IIS) Web site can contain multiple applications.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The applications in a site can be accessed through one or more IIS bindings.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>IIS bindings provide two pieces of information: a binding protocol, and binding information.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The binding protocol defines the scheme over which communication occurs, and binding information is the information used to access the site.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example shows the components that can be present in an IIS binding:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Binding protocol: HTTP</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Binding Information: IP Address, Port, Host header</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>IIS can specify multiple bindings for each site, which results in multiple base addresses for each scheme.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Prior to <ph id="ph1">[!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)]</ph>, <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> did not support multiple addresses for a schema and, if they were specified, threw a <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph> during activation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)]</ph> enables Internet service providers to host multiple applications with different base addresses for the same scheme on the same site.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, a site could contain the following base addresses:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">[!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)]</ph>, you specify a prefix filter at the AppDomain level in the configuration file.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You do this with the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>baseAddressPrefixFilters&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/baseaddressprefixfilters.md)</ept> element, which contains a list of prefixes.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The incoming base addresses, supplied by IIS, are filtered based on the optional prefix list.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>By default, when a prefix is not specified, all addresses are passed through.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Specifying the prefix results in only the matching base address for that scheme to be passed through.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following is an example of configuration code that uses the prefix filters.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the preceding example, net.tcp://payroll.myorg.com:8000 and <ph id="ph1">http://shipping.myorg.com:8000</ph> are the only base addresses, for their respective schemes, which are passed through.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`baseAddressPrefixFilter`</ph> does not support wildcards.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The base addresses supplied by IIS may have addresses bound to other schemes not present in <ph id="ph1">`baseAddressPrefixFilters`</ph> list.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These addresses are not filtered out.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Multiple IIS Binding Support in .NET Framework 4 and later</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Starting in .NET 4, you can enable support for multiple bindings in IIS without having to pick a single base address, by setting <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostingEnvironment&gt;</ph>’s <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHostingEnvironment.MultipleSiteBindingsEnabled%2A&gt;</ph> setting to true.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This support is limited to HTTP protocol schemes.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following is an example of configuration code that uses multipleSiteBindingsEnabled on <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceHostingEnvironment&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicehostingenvironment.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Any baseAddressPrefixFilters settings are ignored, for both HTTP and non-HTTP protocols, when multiple site bindings are enabled using this setting.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For details and examples, see <bpt id="p1">[</bpt>Supporting Multiple IIS Site Bindings<ept id="p1">](../../../../docs/framework/wcf/feature-details/supporting-multiple-iis-site-bindings.md)</ept> and <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostingEnvironment.MultipleSiteBindingsEnabled%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Extending Addressing in WCF Services</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The default addressing model of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services uses the endpoint address URI for the following purposes:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To specify the service listening address, the location at which the endpoint listens for messages,</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To specify the SOAP address filter, the address an endpoint expects as a SOAP header.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The values for each of these purposes can be specified separately, allowing several extensions of addressing that cover useful scenarios:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>SOAP intermediaries: a message sent by a client traverses one or more additional services that process the message before it reaches its final destination.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>SOAP intermediaries can perform various tasks, such as caching, routing, load-balancing, or schema validation on the messages.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This scenario is accomplished by sending messages to a separate physical address (<ph id="ph1">`via`</ph>) that targets the intermediary rather than just to a logical address (<ph id="ph2">`wsa:To`</ph>) that targets the ultimate destination.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The listening address of the endpoint is a private URI and is set to a different value than its <ph id="ph1">`listenURI`</ph> property.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The transport address that the <ph id="ph1">`via`</ph> specifies is the location to which a message should initially be sent on its way to some other remote address specified by the <ph id="ph2">`to`</ph> parameter at which the service is located.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In most Internet scenarios, the <ph id="ph1">`via`</ph> URI is the same as the <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress.Uri%2A&gt;</ph> property of the final <ph id="ph3">`to`</ph> address of the service.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You only distinguish between these two addresses when you must do manual routing.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Addressing Headers</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An endpoint can be addressed by one or more SOAP headers in addition to its basic URI.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>One set of scenarios where this is useful is a set of SOAP intermediary scenarios where an endpoint requires clients of that endpoint to include SOAP headers targeted at intermediaries.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can define custom address headers in two ways—by using either code or configuration:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In code, create custom address headers by using the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.AddressHeader&gt;</ph> class, and then used in the construction of an <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In configuration, custom <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>headers&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/headers.md)</ept> are specified as children of the <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>endpoint&gt;<ept id="p2">](http://msdn.microsoft.com/en-us/13aa23b7-2f08-4add-8dbf-a99f8127c017)</ept> element.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Configuration is generally preferable to code, as it allows you to change the headers after deployment.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Custom Listening Addresses</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can set the listening address to a different value than the endpoint’s URI.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is useful in intermediary scenarios where the SOAP address to be exposed is that of a public SOAP intermediary, whereas the address where the endpoint actually listens is a private network address.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can specify a custom listening address by using either code or configuration:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In code, specify a custom listening address by adding a <ph id="ph1">&lt;xref:System.ServiceModel.Description.ClientViaBehavior&gt;</ph> class to the endpoint’s behavior collection.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In configuration, specify a custom listening address with the <ph id="ph1">`ListenUri`</ph> attribute of the service <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>endpoint&gt;<ept id="p1">](http://msdn.microsoft.com/en-us/13aa23b7-2f08-4add-8dbf-a99f8127c017)</ept> element.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Custom SOAP Address Filter</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress.Uri%2A&gt;</ph> is used in conjunction with any <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress.Headers%2A&gt;</ph> property to define an endpoint’s SOAP address filter (<ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>By default, this filter verifies that an incoming message has a <ph id="ph1">`To`</ph> message header that matches the endpoint’s URI and that all of the required endpoint headers are present in the message.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In some scenarios, an endpoint receives all messages that arrive on the underlying transport, and not just those with the appropriate <ph id="ph1">`To`</ph>header.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To enable this, the user can use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying an Endpoint Address<ept id="p1">](../../../../docs/framework/wcf/specifying-an-endpoint-address.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Service Identity and Authentication<ept id="p1">](../../../../docs/framework/wcf/feature-details/service-identity-and-authentication.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>