<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="stringbuilder.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f18bdfaee1d79ce84a5b2822d52231f4bed098c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\stringbuilder.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">222864f0365c795eefc4d0b260fc71559a3cc6bd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9dfd37ac1a0c91f5976e0ea479cbff09ff71eb68</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using the StringBuilder Class in .NET</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using the StringBuilder Class in .NET</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String&gt;</ph> object is immutable.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Every time you use one of the methods in the <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> class, you create a new string object in memory, which requires a new allocation of space for that new object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In situations where you need to perform repeated modifications to a string, the overhead associated with creating a new <ph id="ph1">&lt;xref:System.String&gt;</ph> object can be costly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph> class can be used when you want to modify a string without creating a new object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, using the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class can boost performance when concatenating many strings together in a loop.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Importing the System.Text Namespace</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class is found in the <ph id="ph2">&lt;xref:System.Text&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To avoid having to provide a fully qualified type name in your code,  you can import the <ph id="ph1">&lt;xref:System.Text&gt;</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Instantiating a StringBuilder Object</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can create a new instance of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class by initializing your variable with one of the overloaded constructor methods, as illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Setting the Capacity and Length</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> is a dynamic object that allows you to expand the number of characters in the string that it encapsulates, you can specify a value for the maximum number of characters that it can hold.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This value is called the capacity of the object and should not be confused with the length of the string that the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> holds.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, you might create a new instance of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class with the string "Hello", which has a length of 5, and you might specify that the object has a maximum capacity of 25.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When you modify the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>, it does not reallocate size for itself until the capacity is reached.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When this occurs, the new space is allocated automatically and the capacity is doubled.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can specify the capacity of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class using one of the overloaded constructors.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example specifies that the <ph id="ph1">`myStringBuilder`</ph> object can be expanded to a maximum of 25 spaces.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Additionally, you can use the read/write <ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property to set the maximum length of your object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>Capacity<ept id="p1">**</ept> property to define the maximum object length.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.EnsureCapacity%2A&gt;</ph> method can be used to check the capacity of the current <bpt id="p1">**</bpt>StringBuilder<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the capacity is greater than the passed value, no change is made; however, if the capacity is smaller than the passed value, the current capacity is changed to match the passed value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property can also be viewed or set.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you set the <bpt id="p1">**</bpt>Length<ept id="p1">**</ept> property to a value that is greater than the <bpt id="p2">**</bpt>Capacity<ept id="p2">**</ept> property, the <bpt id="p3">**</bpt>Capacity<ept id="p3">**</ept> property is automatically changed to the same value as the <bpt id="p4">**</bpt>Length<ept id="p4">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Setting the <bpt id="p1">**</bpt>Length<ept id="p1">**</ept> property to a value that is less than the length of the string within the current <bpt id="p2">**</bpt>StringBuilder<ept id="p2">**</ept> shortens the string.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Modifying the StringBuilder String</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following table lists the methods you can use to modify the contents of a <bpt id="p1">**</bpt>StringBuilder<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Method name</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Appends information to the end of the current <bpt id="p1">**</bpt>StringBuilder<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Replaces a format specifier passed in a string with formatted text.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Inserts a string or object into the specified index of the current <bpt id="p1">**</bpt>StringBuilder<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Removes a specified number of characters from the current <bpt id="p1">**</bpt>StringBuilder<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Replaces a specified character at a specified index.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Append</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Append<ept id="p1">**</ept> method can be used to add text or a string representation of an object to the end of a string represented by the current <bpt id="p2">**</bpt>StringBuilder<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example initializes a <bpt id="p1">**</bpt>StringBuilder<ept id="p1">**</ept> to "Hello World" and then appends some text to the end of the object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Space is allocated automatically as needed.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>AppendFormat</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType&gt;</ph> method adds text to the end of the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It supports the composite formatting feature (for more information, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](../../../docs/standard/base-types/composite-formatting.md)</ept>) by calling the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> implementation of the object or objects to be formatted.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Therefore, it accepts the standard format strings for numeric, date and time, and enumeration values, the custom format strings for numeric and date and time values, and the format strings defined for custom types.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(For information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](../../../docs/standard/base-types/formatting-types.md)</ept>.) You can use this method to customize the format of variables and append those values to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method to place an integer value formatted as a currency value at the end of a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Insert</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Insert%2A&gt;</ph> method adds a string or object to a specified position in the current <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example uses this method to insert a word into the sixth position of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Remove</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Remove<ept id="p1">**</ept> method to remove a specified number of characters from the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, beginning at a specified zero-based index.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>Remove<ept id="p1">**</ept> method to shorten a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Replace</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> method can be used to replace characters within the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object with another specified character.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> method to search a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object for all instances of the exclamation point character (!) and replace them with the question mark character (?).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Converting a StringBuilder Object to a String</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You must convert the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id="ph2">&lt;xref:System.String&gt;</ph> object before you can pass the string represented by the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a method that has a <ph id="ph4">&lt;xref:System.String&gt;</ph> parameter or display it in the user interface.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You do this conversion by calling the <ph id="ph1">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example calls a number of <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> methods and then calls the <ph id="ph2">&lt;xref:System.Text.StringBuilder.ToString?displayProperty=nameWithType&gt;</ph> method to display the string.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic String Operations<ept id="p1">](../../../docs/standard/base-types/basic-string-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting Types<ept id="p1">](../../../docs/standard/base-types/formatting-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>