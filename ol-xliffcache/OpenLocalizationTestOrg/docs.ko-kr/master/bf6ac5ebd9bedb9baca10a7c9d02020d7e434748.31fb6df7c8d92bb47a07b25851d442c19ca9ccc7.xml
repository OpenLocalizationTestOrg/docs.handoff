{"content":"---\ntitle: \"How to: Generate Text Files from XML (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 9ad283f7-7cac-42ff-bf32-92aa866e6883\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Generate Text Files from XML (C#)\nThis example shows how to generate a comma-separated values (CSV) file from an XML file.  \n  \n## Example  \n The C# version of this example uses method syntax and the `Aggregate` operator to generate a CSV file from an XML document in a single expression. For more information, see [Query Syntax and Method Syntax in LINQ](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md).  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md).  \n  \n```csharp  \nXElement custOrd = XElement.Load(\"CustomersOrders.xml\");  \nstring csv =  \n    (from el in custOrd.Element(\"Customers\").Elements(\"Customer\")  \n    select  \n        String.Format(\"{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}{10}\",  \n            (string)el.Attribute(\"CustomerID\"),  \n            (string)el.Element(\"CompanyName\"),  \n            (string)el.Element(\"ContactName\"),  \n            (string)el.Element(\"ContactTitle\"),  \n            (string)el.Element(\"Phone\"),  \n            (string)el.Element(\"FullAddress\").Element(\"Address\"),  \n            (string)el.Element(\"FullAddress\").Element(\"City\"),  \n            (string)el.Element(\"FullAddress\").Element(\"Region\"),  \n            (string)el.Element(\"FullAddress\").Element(\"PostalCode\"),  \n            (string)el.Element(\"FullAddress\").Element(\"Country\"),  \n            Environment.NewLine  \n        )  \n    )  \n    .Aggregate(  \n        new StringBuilder(),  \n        (sb, s) => sb.Append(s),  \n        sb => sb.ToString()  \n    );  \nConsole.WriteLine(csv);  \n```  \n  \n This code produces the following output:  \n  \n```  \nGREAL,Great Lakes Food Market,Howard Snyder,Marketing Manager,(503) 555-7555,2732 Baker Blvd.,Eugene,OR,97403,USA  \nHUNGC,Hungry Coyote Import Store,Yoshi Latimer,Sales Representative,(503) 555-6874,City Center Plaza 516 Main St.,Elgin,OR,97827,USA  \nLAZYK,Lazy K Kountry Store,John Steel,Marketing Manager,(509) 555-7969,12 Orchestra Terrace,Walla Walla,WA,99362,USA  \nLETSS,Let's Stop N Shop,Jaime Yorres,Owner,(415) 555-5938,87 Polk St. Suite 5,San Francisco,CA,94117,USA  \n```  \n  \n## See Also  \n [Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)","nodes":[{"pos":[12,70],"content":"How to: Generate Text Files from XML (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Generate Text Files from XML (C#) | Microsoft Docs","pos":[0,58]}]},{"pos":[355,396],"content":"How to: Generate Text Files from XML (C#)","linkify":"How to: Generate Text Files from XML (C#)","nodes":[{"content":"How to: Generate Text Files from XML (C#)","pos":[0,41]}]},{"content":"This example shows how to generate a comma-separated values (CSV) file from an XML file.","pos":[397,485]},{"pos":[494,501],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The C# version of this example uses method syntax and the <ph id=\"ph1\">`Aggregate`</ph> operator to generate a CSV file from an XML document in a single expression.","pos":[505,651],"source":"The C# version of this example uses method syntax and the `Aggregate` operator to generate a CSV file from an XML document in a single expression."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Query Syntax and Method Syntax in LINQ<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)</ept>.","pos":[652,813],"source":" For more information, see [Query Syntax and Method Syntax in LINQ](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)."},{"pos":[820,1026],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)."},{"content":"This code produces the following output:","pos":[2063,2103]},{"pos":[2604,2612],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2616,2767],"content":"<bpt id=\"p1\">[</bpt>Projections and Transformations (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","source":"[Projections and Transformations (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}