<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="notifications.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10f947fc44e69368e30614e0b41eaf7c73fb6563</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbage-collection\notifications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20300ef16285b92c146e4f824e0214fe6401826e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa6ccdced5d3b0edb3683e0fb56bfb4d7c3f429a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Garbage Collection Notifications</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Garbage Collection Notifications</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>There are situations in which a full garbage collection (that is, a generation 2 collection) by the common language runtime may adversely affect performance.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This can be an issue particularly with servers that process large volumes of requests; in this case, a long garbage collection can cause a request time-out. To prevent a full collection from occurring during a critical period, you can be notified that a full garbage collection is approaching and then take action to redirect the workload to another server instance.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also induce a collection yourself, provided that the current server instance does not need to process requests.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.GC.RegisterForFullGCNotification%2A&gt;</ph> method registers for a notification to be raised when the runtime senses that a full garbage collection is approaching.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are two parts to this notification: when the full garbage collection is approaching and when the full garbage collection has completed.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Only blocking garbage collections raise notifications.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>gcConcurrent&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md)</ept> configuration element is enabled, background garbage collections will not raise notifications.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To determine when a notification has been raised, use the <ph id="ph1">&lt;xref:System.GC.WaitForFullGCApproach%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.GC.WaitForFullGCComplete%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Typically, you use these methods in a <ph id="ph1">`while`</ph> loop to continually obtain a <ph id="ph2">&lt;xref:System.GCNotificationStatus&gt;</ph> enumeration that shows the status of the notification.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If that value is <ph id="ph1">&lt;xref:System.GCNotificationStatus.Succeeded&gt;</ph>, you can do the following:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In response to a notification obtained with the <ph id="ph1">&lt;xref:System.GC.WaitForFullGCApproach%2A&gt;</ph> method, you can redirect the workload and possibly induce a collection yourself.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In response to a notification obtained with the <ph id="ph1">&lt;xref:System.GC.WaitForFullGCComplete%2A&gt;</ph> method, you can make the current server instance available to process requests again.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also gather information.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.GC.CollectionCount%2A&gt;</ph> method to record the number of collections.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.GC.WaitForFullGCApproach%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.GC.WaitForFullGCComplete%2A&gt;</ph> methods are designed to work together.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Using one without the other can produce indeterminate results.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Full Garbage Collection</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The runtime causes a full garbage collection when any of the following scenarios are true:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Enough memory has been promoted into generation 2 to cause the next generation 2 collection.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Enough memory has been promoted into the large object heap to cause the next generation 2 collection.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A collection of generation 1 is escalated to a collection of generation 2 due to other factors.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The thresholds you specify in the <ph id="ph1">&lt;xref:System.GC.RegisterForFullGCNotification%2A&gt;</ph> method apply to the first two scenarios.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, in the first scenario you will not always receive the notification at the time proportional to the threshold values you specify for two reasons:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The runtime does not check each small object allocation (for performance reasons).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Only generation 1 collections promote memory into generation 2.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The third scenario also contributes to the uncertainty of when you will receive the notification.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Although this is not a guarantee, it does prove to be a useful way to mitigate the effects of an inopportune full garbage collection by redirecting the requests during this time or inducing the collection yourself when it can be better accommodated.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Notification Threshold Parameters</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.GC.RegisterForFullGCNotification%2A&gt;</ph> method has two parameters to specify the threshold values of the generation 2 objects and the large object heap.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When those values are met, a garbage collection notification should be raised.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following table describes these parameters.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A number between 1 and 99 that specifies when the notification should be raised based on the objects promoted in generation 2.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A number between 1 and 99 that specifies when the notification should be raised based on the objects that are allocated in the large object heap.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you specify a value that is too high, there is a high probability that you will receive a notification, but it could be too long a period to wait before the runtime causes a collection.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you induce a collection yourself, you may reclaim more objects than would be reclaimed if the runtime causes the collection.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you specify a value that is too low, the runtime may cause the collection before you have had sufficient time to be notified.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the following example, a group of servers service incoming Web requests.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To simulate the workload of processing requests, byte arrays are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Each server registers for a garbage collection notification and then starts a thread on the <ph id="ph1">`WaitForFullGCProc`</ph> user method to continuously monitor the <ph id="ph2">&lt;xref:System.GCNotificationStatus&gt;</ph> enumeration that is returned by the <ph id="ph3">&lt;xref:System.GC.WaitForFullGCApproach%2A&gt;</ph> and the <ph id="ph4">&lt;xref:System.GC.WaitForFullGCComplete%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.GC.WaitForFullGCApproach%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.GC.WaitForFullGCComplete%2A&gt;</ph> methods call their respective event-handling user methods when a notification is raised:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This method calls the <ph id="ph1">`RedirectRequests`</ph> user method, which instructs the request queuing server to suspend sending requests to the server.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This is simulated by setting the class-level variable <ph id="ph1">`bAllocate`</ph> to <ph id="ph2">`false`</ph> so that no more objects are allocated.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Next, the <ph id="ph1">`FinishExistingRequests`</ph> user method is called to finish processing the pending server requests.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This is simulated by clearing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Finally, a garbage collection is induced because the workload is light.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This method calls the user method <ph id="ph1">`AcceptRequests`</ph> to resume accepting requests because the server is no longer susceptible to a full garbage collection.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This action is simulated by setting the <ph id="ph1">`bAllocate`</ph> variable to <ph id="ph2">`true`</ph> so that objects can resume being added to the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following code contains the <ph id="ph1">`Main`</ph> method of the example.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following code contains the <ph id="ph1">`WaitForFullGCProc`</ph> user method, that contains a continuous while loop to check for garbage collection notifications.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following code contains the <ph id="ph1">`OnFullGCApproachNotify`</ph> method as called from the</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WaitForFullGCProc`</ph> method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code contains the <ph id="ph1">`OnFullGCApproachComplete`</ph> method as called from the</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WaitForFullGCProc`</ph> method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following code contains the user methods that are called from the <ph id="ph1">`OnFullGCApproachNotify`</ph> and <ph id="ph2">`OnFullGCCompleteNotify`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The user methods redirect requests, finish existing requests, and then resume requests after a full garbage collection has occurred.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The entire code sample is as follows:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](../../../docs/standard/garbage-collection/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>