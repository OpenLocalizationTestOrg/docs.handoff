{"content":"---\ntitle: Port a Windows Forms app to .NET Core 3.0\ndescription: Teaches you how to port a .NET Framework Windows Forms application to .NET Core 3.0 for Windows.\nauthor: Thraka\nms.author: adegeo\nms.date: 03/01/2019\nms.custom: \n---\n\n# How to: Port a Windows Forms desktop app to .NET Core\n\nThis article describes how to port your Windows Forms-based desktop app from .NET Framework to .NET Core 3.0. The .NET Core 3.0 SDK includes support for Windows Forms applications. Windows Forms is still a Windows-only framework and only runs on Windows. This example uses the .NET Core SDK CLI to create and manage your project.\n\nIn this article, various names are used to identify types of files used for migration. When migrating your project, your files will be named differently, so mentally match them to the ones listed below:\n\n| File | Description |\n| ---- | ----------- |\n| **MyApps.sln** | The name of the solution file. |\n| **MyForms.csproj** | The name of the .NET Framework Windows Forms project to port. |\n| **MyFormsCore.csproj** | The name of the new .NET Core project you create. |\n| **MyAppCore.exe** | The .NET Core Windows Forms app executable. |\n\n## Prerequisites\n\n- [Visual Studio 2019](https://visualstudio.microsoft.com/vs/preview/?utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=inline+link&utm_content=winforms+core) for any designer work you want to do.\n\n  Install the following Visual Studio workloads:\n  - .NET desktop development\n  - .NET cross-platform development\n\n- A working Windows Forms project in a solution that builds and runs without issue.\n- Your project must be coded in C#. \n- Install the latest [.NET Core 3.0](https://aka.ms/netcore3download) preview.\n\n>[!NOTE]\n>**Visual Studio 2017** doesn't support .NET Core 3.0 projects. **Visual Studio 2019 Preview/RC** supports .NET Core 3.0 projects but doesn't yet support the visual designer for .NET Core 3.0 Windows Forms projects. To use the visual designer, you must have a .NET Windows Forms project in your solution that shares the forms files with the .NET Core project.\n\n### Consider\n\nWhen porting a .NET Framework Windows Forms application, there are a few things you must consider.\n\n01. Check that your application is a good candidate for migration.\n\n    Use the [.NET Portability Analyzer](../../standard/analyzers/portability-analyzer.md) to determine if your project will migrate to .NET Core 3.0. If your project has issues with .NET Core 3.0, the analyzer helps you identify those problems.\n\n01. You're using a different version of Windows Forms.\n\n    When .NET Core 3.0 Preview 1 was released, Windows Forms went open-source on GitHub. The code for .NET Core Windows Forms is a fork of the .NET Framework Windows Forms code base. It's possible some differences exist and your app won't port.\n\n01. The [Windows Compatibility Pack][compat-pack] may help you migrate.\n\n    Some APIs that are available in .NET Framework aren't available in .NET Core 3.0. The [Windows Compatibility Pack][compat-pack] adds many of these APIs and may help your Windows Forms app become compatible with .NET Core.\n\n01. Update the NuGet packages used by your project.\n\n    It's always a good practice to use the latest versions of NuGet packages before any migration. If your application is referencing any NuGet packages, update them to the latest version. Ensure your application builds successfully. After upgrading, if there are any package errors, downgrade the package to the latest version that doesn't break your code.\n\n01. Visual Studio 2019 Preview/RC doesn't yet support the Forms Designer for .NET Core 3.0\n\n    Currently, you need to keep your existing .NET Framework Windows Forms project file if you want to use the Forms Designer from Visual Studio.\n\n## Create a new SDK project\n\nThe new .NET Core 3.0 project you create must be in a different directory from your .NET Framework project. If they're both in the same directory, you may run into conflicts with the files that are generated in the **obj** directory. In this example, we'll create a directory named **MyFormsAppCore** in the **SolutionFolder** directory:\n\n```\nSolutionFolder\n├───MyApps.sln\n├───MyFormsApp\n│   └───MyForms.csproj\n└───MyFormsAppCore      <--- New folder for core project\n```\n\nNext, you need to create the **MyFormsCore.csproj** project in the **MyFormsAppCore** directory. You can create this file manually by using the text editor of choice. Paste in the following XML:\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\n\n  <PropertyGroup>\n    <OutputType>WinExe</OutputType>\n    <TargetFramework>netcoreapp3.0</TargetFramework>\n    <UseWindowsForms>true</UseWindowsForms>\n  </PropertyGroup>\n\n</Project>\n```\n\nIf you don't want to create the project file manually, you can use Visual Studio or the .NET Core SDK to generate the project. However, you must delete all other files generated by the project template except for the project file. To use the SDK, run the following command from the **SolutionFolder** directory:\n\n```cli\ndotnet new winforms -o MyFormsAppCore -n MyFormsCore\n```\n\nAfter you create the **MyFormsCore.csproj**, your directory structure should look like the following:\n\n```\nSolutionFolder\n├───MyApps.sln\n├───MyFormsApp\n│   └───MyForms.csproj\n└───MyFormsAppCore\n    └───MyFormsCore.csproj\n```\n\nYou'll want to add the **MyFormsCore.csproj** project to **MyApps.sln** with either Visual Studio or the .NET Core CLI from the **SolutionFolder** directory:\n\n```cli\ndotnet sln add .\\MyFormsAppCore\\MyFormsCore.csproj\n```\n\n## Fix assembly info generation\n\nWindows Forms projects that were created with .NET Framework include an `AssemblyInfo.cs` file, which contains assembly attributes such as the version of the assembly to be generated. SDK-style projects automatically generate this information for you based on the SDK project file. Having both types of \"assembly info\" creates a conflict. Resolve this problem by disabling automatic generation, which forces the project to use your existing `AssemblyInfo.cs` file.\n\nThere are three settings to add to the main `<PropertyGroup>` node. \n\n- **GenerateAssemblyInfo**\\\nWhen you set this property to `false`, it won't generate the assembly attributes. This avoids the conflict with the existing `AssemblyInfo.cs` file from the .NET Framework project.\n\n- **AssemblyName**\\\nThe value of this property is the output binary created when you compile. The name doesn't need an extension added to it. For example, using `MyCoreApp` produces `MyCoreApp.exe`.\n\n- **RootNamespace**\\\nThe default namespace used by your project. This should match the default namespace of the .NET Framework project.\n\nAdd these three elements to the `<PropertyGroup>` node in the `MyFormsCore.csproj` file:\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\n\n  <PropertyGroup>\n    <OutputType>WinExe</OutputType>\n    <TargetFramework>netcoreapp3.0</TargetFramework>\n    <UseWindowsForms>true</UseWindowsForms>\n\n    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>\n    <AssemblyName>MyCoreApp</AssemblyName>\n    <RootNamespace>WindowsFormsApp1</RootNamespace>\n  </PropertyGroup>\n\n</Project>\n```\n\n## Add source code\n\nRight now, the **MyFormsCore.csproj** project doesn't compile any code. By default, .NET Core projects automatically include all source code in the current directory and any child directories. You must configure the project to include code from the .NET Framework project using a relative path. If your .NET Framework project used **.resx** files for icons and resources for your forms, you'll need to include those too. \n\nAdd the following `<ItemGroup>` node to your project. Each statement includes a file glob pattern that includes child directories.\n\n```xml\n  <ItemGroup>\n    <Compile Include=\"..\\MyFormsApp\\**\\*.cs\" />\n    <EmbeddedResource Include=\"..\\MyFormsApp\\**\\*.resx\" />\n  </ItemGroup>\n```\n\nAlternatively, you can create a `<Compile>` or `<EmbeddedResource>` entry for each file in your .NET Framework project.\n\n## Add NuGet packages\n\nAdd each NuGet package referenced by the .NET Framework project to the .NET Core project. \n\nMost likely your .NET Framework Windows Forms app has a **packages.config** file that contains a list of all of the NuGet packages that are referenced by your project. You can look at this list to determine which NuGet packages to add to the .NET Core project. For example, if the .NET Framework project referenced the `MetroFramework`, `MetroFramework.Design`, and `MetroFramework.Fonts` NuGet packages, add each to the project with either Visual Studio or the .NET Core CLI from the **SolutionFolder** directory:\n\n```cli\ndotnet add .\\MyFormsAppCore\\MyFormsCore.csproj package MetroFramework\ndotnet add .\\MyFormsAppCore\\MyFormsCore.csproj package MetroFramework.Design\ndotnet add .\\MyFormsAppCore\\MyFormsCore.csproj package MetroFramework.Fonts\n```\n\nThe previous commands would add the following NuGet references to the **MyFormsCore.csproj** project:\n\n```xml\n  <ItemGroup>\n    <PackageReference Include=\"MetroFramework\" Version=\"1.2.0.3\" />\n    <PackageReference Include=\"MetroFramework.Design\" Version=\"1.2.0.3\" />\n    <PackageReference Include=\"MetroFramework.Fonts\" Version=\"1.2.0.3\" />\n  </ItemGroup>\n```\n\n## Port control libraries\n\nIf you have a Windows Forms Controls library project to port, the directions are the same as porting a .NET Framework Windows Forms app project, except for a few settings. And instead of compiling to an executable, you compile to a library. The difference between the executable project and the library project, besides paths for the file globs that include your source code, is minimal.\n\nUsing the previous step's example, lets expand what projects and files we're working with.\n\n| File | Description |\n| ---- | ----------- |\n| **MyApps.sln** | The name of the solution file. |\n| **MyControls.csproj** | The name of the .NET Framework Windows Forms Controls project to port. |\n| **MyControlsCore.csproj** | The name of the new .NET Core library project you create. |\n| **MyCoreControls.dll** | The .NET Core Windows Forms Controls library. |\n\n```\nSolutionFolder\n├───MyApps.sln\n├───MyFormsApp\n│   └───MyForms.csproj\n├───MyFormsAppCore\n│   └───MyFormsCore.csproj\n│\n├───MyFormsControls\n│   └───MyControls.csproj\n└───MyFormsControlsCore\n    └───MyControlsCore.csproj   <--- New project for core controls\n```\n\nConsider the differences between the `MyControlsCore.csproj` project and the previously created `MyFormsCore.csproj` project.\n\n```diff\n <Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\n\n   <PropertyGroup>\n-    <OutputType>WinExe</OutputType>\n     <TargetFramework>netcoreapp3.0</TargetFramework>\n     <UseWindowsForms>true</UseWindowsForms>\n\n     <GenerateAssemblyInfo>false</GenerateAssemblyInfo>\n-    <AssemblyName>MyCoreApp</AssemblyName>\n-    <RootNamespace>WindowsFormsApp1</RootNamespace>\n+    <AssemblyName>MyControlsCore</AssemblyName>\n+    <RootNamespace>WindowsFormsControlLibrary1</RootNamespace>\n   </PropertyGroup>\n\n   <ItemGroup>\n-    <Compile Include=\"..\\MyFormsApp\\**\\*.cs\" />\n-    <EmbeddedResource Include=\"..\\MyFormsApp\\**\\*.resx\" />\n+    <Compile Include=\"..\\MyFormsControls\\**\\*.cs\" />\n+    <EmbeddedResource Include=\"..\\MyFormsControls\\**\\*.resx\" />\n   </ItemGroup>\n\n </Project>\n```\n\nHere is an example of what the .NET Core Windows Forms Controls library project file would look like:\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\n\n  <PropertyGroup>\n    \n    <TargetFramework>netcoreapp3.0</TargetFramework>\n    <UseWindowsForms>true</UseWindowsForms>\n\n    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>\n    <AssemblyName>MyCoreControls</AssemblyName>\n    <RootNamespace>WindowsFormsControlLibrary1</RootNamespace>\n  </PropertyGroup>\n  \n  <ItemGroup>\n    <Compile Include=\"..\\MyFormsControls\\**\\*.cs\" />\n    <EmbeddedResource Include=\"..\\MyFormsControls\\**\\*.resx\" />\n  </ItemGroup>\n  \n</Project>\n```\n\nAs you can see, the `<OutputType>` node was removed, which defaults the compiler to produce a library instead of an executable. The `<AssemblyName>` and `<RootNamespace>` were changed. Specifically the `<RootNamespace>` should match the namespace of the Windows Forms Controls library you are porting. And finally, the `<Compile>` and `<EmbeddedResource>` nodes were adjusted to point to the folder of the Windows Forms Controls library you are porting.\n\nNext, in the main .NET Core **MyFormsCore.csproj** project add reference to the new .NET Core Windows Forms Control library. Add a reference with either Visual Studio or the .NET Core CLI from the **SolutionFolder** directory:\n\n```cli\ndotnet add .\\MyFormsAppCore\\MyFormsCore.csproj reference .\\MyFormsControlsCore\\MyControlsCore.csproj\n```\n\nThe previous command adds the following to the **MyFormsCore.csproj** project:\n\n```xml\n  <ItemGroup>\n    <ProjectReference Include=\"..\\MyFormsControlsCore\\MyControlsCore.csproj\" />\n  </ItemGroup>\n```\n\n## Problems compiling\n\nIf you have problems compiling your projects, you may be using some Windows-only APIs that are available in .NET Framework but not available in .NET Core. You can try adding the [Windows Compatibility Pack][compat-pack] NuGet package to your project. This package only runs on Windows and adds about 20,000 Windows APIs to .NET Core and .NET Standard projects.\n\n```cli\ndotnet add .\\MyFormsAppCore\\MyFormsCore.csproj package Microsoft.Windows.Compatibility\n```\n\nThe previous command adds the following to the **MyFormsCore.csproj** project:\n\n```xml\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Windows.Compatibility\" Version=\"2.0.1\" />\n  </ItemGroup>\n```\n\n## Windows Forms Designer\n\nAs detailed in this article, Visual Studio 2019 Preview/RC only supports the Forms Designer in .NET Framework projects. By creating a side-by-side .NET Core project, you can test your project with .NET Core while you use the .NET Framework project to design forms. Your solution file includes both the .NET Framework and .NET Core projects. Add and design your forms and controls in the .NET Framework project, and based on the file glob patterns we added to the .NET Core projects, any new or changed files will automatically be included in the .NET Core projects.\n\nOnce Visual Studio 2019 supports the Windows Forms Designer, you can copy/paste the content of your .NET Core project file into the .NET Framework project file. Then delete the file glob patterns added with the `<Source>` and `<EmbeddedResource>` items. Fix the paths to any project reference used by your app. This effectively upgrades the .NET Framework project to a .NET Core project.\n \n## Next steps\n\n* Read more about the [Windows Compatibility Pack][compat-pack].\n* Watch a [video on porting](https://www.youtube.com/watch?v=upVQEUc_KwU) your .NET Framework Windows Forms project to .NET Core.\n\n[compat-pack]: windows-compat-pack.md\n","nodes":[{"pos":[4,227],"embed":true,"restype":"x-metadata","content":"title: Port a Windows Forms app to .NET Core 3.0\ndescription: Teaches you how to port a .NET Framework Windows Forms application to .NET Core 3.0 for Windows.\nauthor: Thraka\nms.author: adegeo\nms.date: 03/01/2019\nms.custom: ","nodes":[{"content":"Port a Windows Forms app to .NET Core 3.0","nodes":[{"pos":[0,41],"content":"Port a Windows Forms app to .NET Core 3.0","nodes":[{"content":"Port a Windows Forms app to .NET Core 3.0","pos":[0,41]}]}],"path":["title"],"nosxs":false},{"content":"Teaches you how to port a .NET Framework Windows Forms application to .NET Core 3.0 for Windows.","nodes":[{"pos":[0,96],"content":"Teaches you how to port a .NET Framework Windows Forms application to .NET Core 3.0 for Windows.","nodes":[{"content":"Teaches you how to port a .NET Framework Windows Forms application to .NET Core 3.0 for Windows.","pos":[0,96]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[235,288],"content":"How to: Port a Windows Forms desktop app to .NET Core","linkify":"How to: Port a Windows Forms desktop app to .NET Core","nodes":[{"content":"How to: Port a Windows Forms desktop app to .NET Core","pos":[0,53]}]},{"content":"This article describes how to port your Windows Forms-based desktop app from .NET Framework to .NET Core 3.0.","pos":[290,399]},{"content":"The .NET Core 3.0 SDK includes support for Windows Forms applications.","pos":[400,470]},{"content":"Windows Forms is still a Windows-only framework and only runs on Windows.","pos":[471,544]},{"content":"This example uses the .NET Core SDK CLI to create and manage your project.","pos":[545,619]},{"content":"In this article, various names are used to identify types of files used for migration.","pos":[621,707]},{"content":"When migrating your project, your files will be named differently, so mentally match them to the ones listed below:","pos":[708,823]},{"content":"File","pos":[827,831]},{"content":"Description","pos":[834,845]},{"pos":[873,887],"content":"<bpt id=\"p1\">**</bpt>MyApps.sln<ept id=\"p1\">**</ept>","source":"**MyApps.sln**"},{"content":"The name of the solution file.","pos":[890,920]},{"pos":[925,943],"content":"<bpt id=\"p1\">**</bpt>MyForms.csproj<ept id=\"p1\">**</ept>","source":"**MyForms.csproj**"},{"content":"The name of the .NET Framework Windows Forms project to port.","pos":[946,1007]},{"pos":[1012,1034],"content":"<bpt id=\"p1\">**</bpt>MyFormsCore.csproj<ept id=\"p1\">**</ept>","source":"**MyFormsCore.csproj**"},{"content":"The name of the new .NET Core project you create.","pos":[1037,1086]},{"pos":[1091,1108],"content":"<bpt id=\"p1\">**</bpt>MyAppCore.exe<ept id=\"p1\">**</ept>","source":"**MyAppCore.exe**"},{"content":"The .NET Core Windows Forms app executable.","pos":[1111,1154]},{"pos":[1161,1174],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[1178,1386],"content":"<bpt id=\"p1\">[</bpt>Visual Studio 2019<ept id=\"p1\">](https://visualstudio.microsoft.com/vs/preview/?utm_medium=microsoft&amp;utm_source=docs.microsoft.com&amp;utm_campaign=inline+link&amp;utm_content=winforms+core)</ept> for any designer work you want to do.","source":"[Visual Studio 2019](https://visualstudio.microsoft.com/vs/preview/?utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=inline+link&utm_content=winforms+core) for any designer work you want to do."},{"content":"Install the following Visual Studio workloads:","pos":[1390,1436]},{"content":".NET desktop development","pos":[1441,1465]},{"content":".NET cross-platform development","pos":[1470,1501]},{"content":"A working Windows Forms project in a solution that builds and runs without issue.","pos":[1505,1586]},{"content":"Your project must be coded in C#.","pos":[1589,1622]},{"pos":[1626,1702],"content":"Install the latest <bpt id=\"p1\">[</bpt>.NET Core 3.0<ept id=\"p1\">](https://aka.ms/netcore3download)</ept> preview.","source":"Install the latest [.NET Core 3.0](https://aka.ms/netcore3download) preview."},{"pos":[1705,2072],"content":"[!NOTE]\n**Visual Studio 2017** doesn't support .NET Core 3.0 projects. **Visual Studio 2019 Preview/RC** supports .NET Core 3.0 projects but doesn't yet support the visual designer for .NET Core 3.0 Windows Forms projects. To use the visual designer, you must have a .NET Windows Forms project in your solution that shares the forms files with the .NET Core project.","leadings":["",">"],"nodes":[{"content":"**Visual Studio 2017** doesn't support .NET Core 3.0 projects. **Visual Studio 2019 Preview/RC** supports .NET Core 3.0 projects but doesn't yet support the visual designer for .NET Core 3.0 Windows Forms projects. To use the visual designer, you must have a .NET Windows Forms project in your solution that shares the forms files with the .NET Core project.","pos":[8,366],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Visual Studio 2017<ept id=\"p1\">**</ept> doesn't support .NET Core 3.0 projects.","pos":[0,62],"source":"**Visual Studio 2017** doesn't support .NET Core 3.0 projects."},{"content":"<bpt id=\"p1\">**</bpt>Visual Studio 2019 Preview/RC<ept id=\"p1\">**</ept> supports .NET Core 3.0 projects but doesn't yet support the visual designer for .NET Core 3.0 Windows Forms projects.","pos":[63,214],"source":"**Visual Studio 2019 Preview/RC** supports .NET Core 3.0 projects but doesn't yet support the visual designer for .NET Core 3.0 Windows Forms projects."},{"content":"To use the visual designer, you must have a .NET Windows Forms project in your solution that shares the forms files with the .NET Core project.","pos":[215,358]}]}]},{"pos":[2078,2086],"content":"Consider","linkify":"Consider","nodes":[{"content":"Consider","pos":[0,8]}]},{"content":"When porting a .NET Framework Windows Forms application, there are a few things you must consider.","pos":[2088,2186]},{"content":"Check that your application is a good candidate for migration.","pos":[2192,2254]},{"content":"Use the <bpt id=\"p1\">[</bpt>.NET Portability Analyzer<ept id=\"p1\">](../../standard/analyzers/portability-analyzer.md)</ept> to determine if your project will migrate to .NET Core 3.0.","pos":[2260,2405],"source":"Use the [.NET Portability Analyzer](../../standard/analyzers/portability-analyzer.md) to determine if your project will migrate to .NET Core 3.0."},{"content":"If your project has issues with .NET Core 3.0, the analyzer helps you identify those problems.","pos":[2406,2500]},{"content":"You're using a different version of Windows Forms.","pos":[2506,2556]},{"content":"When .NET Core 3.0 Preview 1 was released, Windows Forms went open-source on GitHub.","pos":[2562,2646]},{"content":"The code for .NET Core Windows Forms is a fork of the .NET Framework Windows Forms code base.","pos":[2647,2740]},{"content":"It's possible some differences exist and your app won't port.","pos":[2741,2802]},{"pos":[2808,2875],"content":"The <bpt id=\"p1\">[</bpt>Windows Compatibility Pack<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt><ept id=\"p2\">compat-pack]</ept> may help you migrate.","source":"The [Windows Compatibility Pack][compat-pack] may help you migrate."},{"content":"Some APIs that are available in .NET Framework aren't available in .NET Core 3.0.","pos":[2881,2962]},{"content":"The <bpt id=\"p1\">[</bpt>Windows Compatibility Pack<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt><ept id=\"p2\">compat-pack]</ept> adds many of these APIs and may help your Windows Forms app become compatible with .NET Core.","pos":[2963,3102],"source":" The [Windows Compatibility Pack][compat-pack] adds many of these APIs and may help your Windows Forms app become compatible with .NET Core."},{"content":"Update the NuGet packages used by your project.","pos":[3108,3155]},{"content":"It's always a good practice to use the latest versions of NuGet packages before any migration.","pos":[3161,3255]},{"content":"If your application is referencing any NuGet packages, update them to the latest version.","pos":[3256,3345]},{"content":"Ensure your application builds successfully.","pos":[3346,3390]},{"content":"After upgrading, if there are any package errors, downgrade the package to the latest version that doesn't break your code.","pos":[3391,3514]},{"content":"Visual Studio 2019 Preview/RC doesn't yet support the Forms Designer for .NET Core 3.0","pos":[3520,3606]},{"content":"Currently, you need to keep your existing .NET Framework Windows Forms project file if you want to use the Forms Designer from Visual Studio.","pos":[3612,3753]},{"pos":[3758,3782],"content":"Create a new SDK project","linkify":"Create a new SDK project","nodes":[{"content":"Create a new SDK project","pos":[0,24]}]},{"content":"The new .NET Core 3.0 project you create must be in a different directory from your .NET Framework project.","pos":[3784,3891]},{"content":"If they're both in the same directory, you may run into conflicts with the files that are generated in the <bpt id=\"p1\">**</bpt>obj<ept id=\"p1\">**</ept> directory.","pos":[3892,4017],"source":" If they're both in the same directory, you may run into conflicts with the files that are generated in the **obj** directory."},{"content":"In this example, we'll create a directory named <bpt id=\"p1\">**</bpt>MyFormsAppCore<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>SolutionFolder<ept id=\"p2\">**</ept> directory:","pos":[4018,4121],"source":" In this example, we'll create a directory named **MyFormsAppCore** in the **SolutionFolder** directory:"},{"content":"Next, you need to create the <bpt id=\"p1\">**</bpt>MyFormsCore.csproj<ept id=\"p1\">**</ept> project in the <bpt id=\"p2\">**</bpt>MyFormsAppCore<ept id=\"p2\">**</ept> directory.","pos":[4257,4353],"source":"Next, you need to create the **MyFormsCore.csproj** project in the **MyFormsAppCore** directory."},{"content":"You can create this file manually by using the text editor of choice.","pos":[4354,4423]},{"content":"Paste in the following XML:","pos":[4424,4451]},{"content":"If you don't want to create the project file manually, you can use Visual Studio or the .NET Core SDK to generate the project.","pos":[4697,4823]},{"content":"However, you must delete all other files generated by the project template except for the project file.","pos":[4824,4927]},{"content":"To use the SDK, run the following command from the <bpt id=\"p1\">**</bpt>SolutionFolder<ept id=\"p1\">**</ept> directory:","pos":[4928,5008],"source":" To use the SDK, run the following command from the **SolutionFolder** directory:"},{"pos":[5075,5176],"content":"After you create the <bpt id=\"p1\">**</bpt>MyFormsCore.csproj<ept id=\"p1\">**</ept>, your directory structure should look like the following:","source":"After you create the **MyFormsCore.csproj**, your directory structure should look like the following:"},{"pos":[5301,5458],"content":"You'll want to add the <bpt id=\"p1\">**</bpt>MyFormsCore.csproj<ept id=\"p1\">**</ept> project to <bpt id=\"p2\">**</bpt>MyApps.sln<ept id=\"p2\">**</ept> with either Visual Studio or the .NET Core CLI from the <bpt id=\"p3\">**</bpt>SolutionFolder<ept id=\"p3\">**</ept> directory:","source":"You'll want to add the **MyFormsCore.csproj** project to **MyApps.sln** with either Visual Studio or the .NET Core CLI from the **SolutionFolder** directory:"},{"pos":[5526,5554],"content":"Fix assembly info generation","linkify":"Fix assembly info generation","nodes":[{"content":"Fix assembly info generation","pos":[0,28]}]},{"content":"Windows Forms projects that were created with .NET Framework include an <ph id=\"ph1\">`AssemblyInfo.cs`</ph> file, which contains assembly attributes such as the version of the assembly to be generated.","pos":[5556,5739],"source":"Windows Forms projects that were created with .NET Framework include an `AssemblyInfo.cs` file, which contains assembly attributes such as the version of the assembly to be generated."},{"content":"SDK-style projects automatically generate this information for you based on the SDK project file.","pos":[5740,5837]},{"content":"Having both types of \"assembly info\" creates a conflict.","pos":[5838,5894]},{"content":"Resolve this problem by disabling automatic generation, which forces the project to use your existing <ph id=\"ph1\">`AssemblyInfo.cs`</ph> file.","pos":[5895,6020],"source":" Resolve this problem by disabling automatic generation, which forces the project to use your existing `AssemblyInfo.cs` file."},{"pos":[6022,6089],"content":"There are three settings to add to the main <ph id=\"ph1\">`&lt;PropertyGroup&gt;`</ph> node.","source":"There are three settings to add to the main `<PropertyGroup>` node."},{"content":"<bpt id=\"p1\">**</bpt>GenerateAssemblyInfo<ept id=\"p1\">**</ept><ph id=\"ph1\">\\</ph>","pos":[6094,6119],"source":"**GenerateAssemblyInfo**\\"},{"content":"When you set this property to <ph id=\"ph1\">`false`</ph>, it won't generate the assembly attributes.","pos":[6120,6201],"source":"When you set this property to `false`, it won't generate the assembly attributes."},{"content":"This avoids the conflict with the existing <ph id=\"ph1\">`AssemblyInfo.cs`</ph> file from the .NET Framework project.","pos":[6202,6300],"source":" This avoids the conflict with the existing `AssemblyInfo.cs` file from the .NET Framework project."},{"content":"<bpt id=\"p1\">**</bpt>AssemblyName<ept id=\"p1\">**</ept><ph id=\"ph1\">\\</ph>","pos":[6304,6321],"source":"**AssemblyName**\\"},{"content":"The value of this property is the output binary created when you compile.","pos":[6322,6395]},{"content":"The name doesn't need an extension added to it.","pos":[6396,6443]},{"content":"For example, using <ph id=\"ph1\">`MyCoreApp`</ph> produces <ph id=\"ph2\">`MyCoreApp.exe`</ph>.","pos":[6444,6500],"source":" For example, using `MyCoreApp` produces `MyCoreApp.exe`."},{"content":"<bpt id=\"p1\">**</bpt>RootNamespace<ept id=\"p1\">**</ept><ph id=\"ph1\">\\</ph>","pos":[6504,6522],"source":"**RootNamespace**\\"},{"content":"The default namespace used by your project.","pos":[6523,6566]},{"content":"This should match the default namespace of the .NET Framework project.","pos":[6567,6637]},{"pos":[6639,6727],"content":"Add these three elements to the <ph id=\"ph1\">`&lt;PropertyGroup&gt;`</ph> node in the <ph id=\"ph2\">`MyFormsCore.csproj`</ph> file:","source":"Add these three elements to the `<PropertyGroup>` node in the `MyFormsCore.csproj` file:"},{"pos":[7127,7142],"content":"Add source code","linkify":"Add source code","nodes":[{"content":"Add source code","pos":[0,15]}]},{"content":"Right now, the <bpt id=\"p1\">**</bpt>MyFormsCore.csproj<ept id=\"p1\">**</ept> project doesn't compile any code.","pos":[7144,7215],"source":"Right now, the **MyFormsCore.csproj** project doesn't compile any code."},{"content":"By default, .NET Core projects automatically include all source code in the current directory and any child directories.","pos":[7216,7336]},{"content":"You must configure the project to include code from the .NET Framework project using a relative path.","pos":[7337,7438]},{"content":"If your .NET Framework project used <bpt id=\"p1\">**</bpt>.resx<ept id=\"p1\">**</ept> files for icons and resources for your forms, you'll need to include those too.","pos":[7439,7564],"source":" If your .NET Framework project used **.resx** files for icons and resources for your forms, you'll need to include those too."},{"content":"Add the following <ph id=\"ph1\">`&lt;ItemGroup&gt;`</ph> node to your project.","pos":[7567,7620],"source":"Add the following `<ItemGroup>` node to your project."},{"content":"Each statement includes a file glob pattern that includes child directories.","pos":[7621,7697]},{"pos":[7847,7966],"content":"Alternatively, you can create a <ph id=\"ph1\">`&lt;Compile&gt;`</ph> or <ph id=\"ph2\">`&lt;EmbeddedResource&gt;`</ph> entry for each file in your .NET Framework project.","source":"Alternatively, you can create a `<Compile>` or `<EmbeddedResource>` entry for each file in your .NET Framework project."},{"pos":[7971,7989],"content":"Add NuGet packages","linkify":"Add NuGet packages","nodes":[{"content":"Add NuGet packages","pos":[0,18]}]},{"content":"Add each NuGet package referenced by the .NET Framework project to the .NET Core project.","pos":[7991,8080]},{"content":"Most likely your .NET Framework Windows Forms app has a <bpt id=\"p1\">**</bpt>packages.config<ept id=\"p1\">**</ept> file that contains a list of all of the NuGet packages that are referenced by your project.","pos":[8083,8250],"source":"Most likely your .NET Framework Windows Forms app has a **packages.config** file that contains a list of all of the NuGet packages that are referenced by your project."},{"content":"You can look at this list to determine which NuGet packages to add to the .NET Core project.","pos":[8251,8343]},{"content":"For example, if the .NET Framework project referenced the <ph id=\"ph1\">`MetroFramework`</ph>, <ph id=\"ph2\">`MetroFramework.Design`</ph>, and <ph id=\"ph3\">`MetroFramework.Fonts`</ph> NuGet packages, add each to the project with either Visual Studio or the .NET Core CLI from the <bpt id=\"p1\">**</bpt>SolutionFolder<ept id=\"p1\">**</ept> directory:","pos":[8344,8597],"source":" For example, if the .NET Framework project referenced the `MetroFramework`, `MetroFramework.Design`, and `MetroFramework.Fonts` NuGet packages, add each to the project with either Visual Studio or the .NET Core CLI from the **SolutionFolder** directory:"},{"pos":[8834,8935],"content":"The previous commands would add the following NuGet references to the <bpt id=\"p1\">**</bpt>MyFormsCore.csproj<ept id=\"p1\">**</ept> project:","source":"The previous commands would add the following NuGet references to the **MyFormsCore.csproj** project:"},{"pos":[9198,9220],"content":"Port control libraries","linkify":"Port control libraries","nodes":[{"content":"Port control libraries","pos":[0,22]}]},{"content":"If you have a Windows Forms Controls library project to port, the directions are the same as porting a .NET Framework Windows Forms app project, except for a few settings.","pos":[9222,9393]},{"content":"And instead of compiling to an executable, you compile to a library.","pos":[9394,9462]},{"content":"The difference between the executable project and the library project, besides paths for the file globs that include your source code, is minimal.","pos":[9463,9609]},{"content":"Using the previous step's example, lets expand what projects and files we're working with.","pos":[9611,9701]},{"content":"File","pos":[9705,9709]},{"content":"Description","pos":[9712,9723]},{"pos":[9751,9765],"content":"<bpt id=\"p1\">**</bpt>MyApps.sln<ept id=\"p1\">**</ept>","source":"**MyApps.sln**"},{"content":"The name of the solution file.","pos":[9768,9798]},{"pos":[9803,9824],"content":"<bpt id=\"p1\">**</bpt>MyControls.csproj<ept id=\"p1\">**</ept>","source":"**MyControls.csproj**"},{"content":"The name of the .NET Framework Windows Forms Controls project to port.","pos":[9827,9897]},{"pos":[9902,9927],"content":"<bpt id=\"p1\">**</bpt>MyControlsCore.csproj<ept id=\"p1\">**</ept>","source":"**MyControlsCore.csproj**"},{"content":"The name of the new .NET Core library project you create.","pos":[9930,9987]},{"pos":[9992,10014],"content":"<bpt id=\"p1\">**</bpt>MyCoreControls.dll<ept id=\"p1\">**</ept>","source":"**MyCoreControls.dll**"},{"content":"The .NET Core Windows Forms Controls library.","pos":[10017,10062]},{"pos":[10328,10453],"content":"Consider the differences between the <ph id=\"ph1\">`MyControlsCore.csproj`</ph> project and the previously created <ph id=\"ph2\">`MyFormsCore.csproj`</ph> project.","source":"Consider the differences between the `MyControlsCore.csproj` project and the previously created `MyFormsCore.csproj` project."},{"content":"Here is an example of what the .NET Core Windows Forms Controls library project file would look like:","pos":[11234,11335]},{"content":"As you can see, the <ph id=\"ph1\">`&lt;OutputType&gt;`</ph> node was removed, which defaults the compiler to produce a library instead of an executable.","pos":[11868,11995],"source":"As you can see, the `<OutputType>` node was removed, which defaults the compiler to produce a library instead of an executable."},{"content":"The <ph id=\"ph1\">`&lt;AssemblyName&gt;`</ph> and <ph id=\"ph2\">`&lt;RootNamespace&gt;`</ph> were changed.","pos":[11996,12052],"source":" The `<AssemblyName>` and `<RootNamespace>` were changed."},{"content":"Specifically the <ph id=\"ph1\">`&lt;RootNamespace&gt;`</ph> should match the namespace of the Windows Forms Controls library you are porting.","pos":[12053,12169],"source":" Specifically the `<RootNamespace>` should match the namespace of the Windows Forms Controls library you are porting."},{"content":"And finally, the <ph id=\"ph1\">`&lt;Compile&gt;`</ph> and <ph id=\"ph2\">`&lt;EmbeddedResource&gt;`</ph> nodes were adjusted to point to the folder of the Windows Forms Controls library you are porting.","pos":[12170,12321],"source":" And finally, the `<Compile>` and `<EmbeddedResource>` nodes were adjusted to point to the folder of the Windows Forms Controls library you are porting."},{"content":"Next, in the main .NET Core <bpt id=\"p1\">**</bpt>MyFormsCore.csproj<ept id=\"p1\">**</ept> project add reference to the new .NET Core Windows Forms Control library.","pos":[12323,12447],"source":"Next, in the main .NET Core **MyFormsCore.csproj** project add reference to the new .NET Core Windows Forms Control library."},{"content":"Add a reference with either Visual Studio or the .NET Core CLI from the <bpt id=\"p1\">**</bpt>SolutionFolder<ept id=\"p1\">**</ept> directory:","pos":[12448,12549],"source":" Add a reference with either Visual Studio or the .NET Core CLI from the **SolutionFolder** directory:"},{"pos":[12664,12742],"content":"The previous command adds the following to the <bpt id=\"p1\">**</bpt>MyFormsCore.csproj<ept id=\"p1\">**</ept> project:","source":"The previous command adds the following to the **MyFormsCore.csproj** project:"},{"pos":[12868,12886],"content":"Problems compiling","linkify":"Problems compiling","nodes":[{"content":"Problems compiling","pos":[0,18]}]},{"content":"If you have problems compiling your projects, you may be using some Windows-only APIs that are available in .NET Framework but not available in .NET Core.","pos":[12888,13042]},{"content":"You can try adding the <bpt id=\"p1\">[</bpt>Windows Compatibility Pack<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt><ept id=\"p2\">compat-pack]</ept> NuGet package to your project.","pos":[13043,13138],"source":" You can try adding the [Windows Compatibility Pack][compat-pack] NuGet package to your project."},{"content":"This package only runs on Windows and adds about 20,000 Windows APIs to .NET Core and .NET Standard projects.","pos":[13139,13248]},{"pos":[13349,13427],"content":"The previous command adds the following to the <bpt id=\"p1\">**</bpt>MyFormsCore.csproj<ept id=\"p1\">**</ept> project:","source":"The previous command adds the following to the **MyFormsCore.csproj** project:"},{"pos":[13556,13578],"content":"Windows Forms Designer","linkify":"Windows Forms Designer","nodes":[{"content":"Windows Forms Designer","pos":[0,22]}]},{"content":"As detailed in this article, Visual Studio 2019 Preview/RC only supports the Forms Designer in .NET Framework projects.","pos":[13580,13699]},{"content":"By creating a side-by-side .NET Core project, you can test your project with .NET Core while you use the .NET Framework project to design forms.","pos":[13700,13844]},{"content":"Your solution file includes both the .NET Framework and .NET Core projects.","pos":[13845,13920]},{"content":"Add and design your forms and controls in the .NET Framework project, and based on the file glob patterns we added to the .NET Core projects, any new or changed files will automatically be included in the .NET Core projects.","pos":[13921,14145]},{"content":"Once Visual Studio 2019 supports the Windows Forms Designer, you can copy/paste the content of your .NET Core project file into the .NET Framework project file.","pos":[14147,14307]},{"content":"Then delete the file glob patterns added with the <ph id=\"ph1\">`&lt;Source&gt;`</ph> and <ph id=\"ph2\">`&lt;EmbeddedResource&gt;`</ph> items.","pos":[14308,14400],"source":" Then delete the file glob patterns added with the `<Source>` and `<EmbeddedResource>` items."},{"content":"Fix the paths to any project reference used by your app.","pos":[14401,14457]},{"content":"This effectively upgrades the .NET Framework project to a .NET Core project.","pos":[14458,14534]},{"pos":[14540,14550],"content":"Next steps","linkify":"Next steps","nodes":[{"content":"Next steps","pos":[0,10]}]},{"pos":[14554,14616],"content":"Read more about the <bpt id=\"p1\">[</bpt>Windows Compatibility Pack<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt><ept id=\"p2\">compat-pack]</ept>.","source":"Read more about the [Windows Compatibility Pack][compat-pack]."},{"pos":[14619,14746],"content":"Watch a <bpt id=\"p1\">[</bpt>video on porting<ept id=\"p1\">](https://www.youtube.com/watch?v=upVQEUc_KwU)</ept> your .NET Framework Windows Forms project to .NET Core.","source":"Watch a [video on porting](https://www.youtube.com/watch?v=upVQEUc_KwU) your .NET Framework Windows Forms project to .NET Core."}]}