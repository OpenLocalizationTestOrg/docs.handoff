{"content":"---\ntitle: \"internal - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"internal_CSharpKeyword\"\n  - \"internal\"\nhelpviewer_keywords: \n  - \"internal keyword [C#]\"\nms.assetid: 6ee0785c-d7c8-49b8-bb72-0a4dfbcb6461\n---\n# internal (C# Reference)\nThe `internal` keyword is an [access modifier](../../../csharp/language-reference/keywords/access-modifiers.md) for types and type members. \n  \n > This page covers `internal` access. The `internal` keyword is also part of the [`protected internal`](./protected-internal.md) access modifier.\n  \nInternal types or members are accessible only within files in the same assembly, as in this example:  \n  \n```csharp  \npublic class BaseClass   \n{  \n    // Only accessible within the same assembly  \n    internal static int x = 0;  \n}  \n```  \n\n For a comparison of `internal` with the other access modifiers, see [Accessibility Levels](../../../csharp/language-reference/keywords/accessibility-levels.md) and [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md).  \n  \n For more information about assemblies, see [Assemblies in .NET](../../../standard/assembly/index.md).  \n  \n A common use of internal access is in component-based development because it enables a group of components to cooperate in a private manner without being exposed to the rest of the application code. For example, a framework for building graphical user interfaces could provide `Control` and `Form` classes that cooperate by using members with internal access. Since these members are internal, they are not exposed to code that is using the framework.  \n  \n It is an error to reference a type or a member with internal access outside the assembly within which it was defined.  \n  \n## Example  \n This example contains two files, `Assembly1.cs` and `Assembly1_a.cs`. The first file contains an internal base class, `BaseClass`. In the second file, an attempt to instantiate `BaseClass` will produce an error.  \n  \n```csharp  \n// Assembly1.cs  \n// Compile with: /target:library  \ninternal class BaseClass   \n{  \n   public static int intM = 0;  \n}  \n```  \n  \n```csharp  \n// Assembly1_a.cs  \n// Compile with: /reference:Assembly1.dll  \nclass TestAccess   \n{  \n   static void Main()   \n   {  \n      BaseClass myBase = new BaseClass();   // CS0122  \n   }  \n}  \n```  \n  \n## Example  \n In this example, use the same files you used in example 1, and change the accessibility level of `BaseClass` to `public`. Also change the accessibility level of the member `IntM` to `internal`. In this case, you can instantiate the class, but you cannot access the internal member.  \n  \n```csharp  \n// Assembly2.cs  \n// Compile with: /target:library  \npublic class BaseClass   \n{  \n   internal static int intM = 0;  \n}  \n```  \n  \n```csharp  \n// Assembly2_a.cs  \n// Compile with: /reference:Assembly2.dll  \npublic class TestAccess   \n{  \n   static void Main()   \n   {  \n      BaseClass myBase = new BaseClass();   // Ok.  \n      BaseClass.intM = 444;    // CS0117  \n   }  \n}  \n```  \n  \n## C# Language Specification  \n\nFor more information, see [Declared accessibility](~/_csharplang/spec/basic-concepts.md#declared-accessibility) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n  \n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Access Modifiers](../../../csharp/language-reference/keywords/access-modifiers.md)\n- [Accessibility Levels](../../../csharp/language-reference/keywords/accessibility-levels.md)\n- [Modifiers](../../../csharp/language-reference/keywords/modifiers.md)\n- [public](../../../csharp/language-reference/keywords/public.md)\n- [private](../../../csharp/language-reference/keywords/private.md)\n- [protected](../../../csharp/language-reference/keywords/protected.md)\n","nodes":[{"pos":[4,234],"embed":true,"restype":"x-metadata","content":"title: \"internal - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"internal_CSharpKeyword\"\n  - \"internal\"\nhelpviewer_keywords: \n  - \"internal keyword [C#]\"\nms.assetid: 6ee0785c-d7c8-49b8-bb72-0a4dfbcb6461","nodes":[{"content":"internal - C# Reference","nodes":[{"pos":[0,23],"content":"internal - C# Reference","nodes":[{"content":"internal - C# Reference","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[241,264],"content":"internal (C# Reference)","linkify":"internal (C# Reference)","nodes":[{"content":"internal (C# Reference)","pos":[0,23]}]},{"pos":[265,404],"content":"The <ph id=\"ph1\">`internal`</ph> keyword is an <bpt id=\"p1\">[</bpt>access modifier<ept id=\"p1\">](../../../csharp/language-reference/keywords/access-modifiers.md)</ept> for types and type members.","source":"The `internal` keyword is an [access modifier](../../../csharp/language-reference/keywords/access-modifiers.md) for types and type members."},{"content":"This page covers <ph id=\"ph1\">`internal`</ph> access.","pos":[412,447],"source":"This page covers `internal` access."},{"content":"The <ph id=\"ph1\">`internal`</ph> keyword is also part of the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`protected internal`</ph><ept id=\"p1\">](./protected-internal.md)</ept> access modifier.","pos":[448,555],"source":" The `internal` keyword is also part of the [`protected internal`](./protected-internal.md) access modifier."},{"content":"Internal types or members are accessible only within files in the same assembly, as in this example:","pos":[559,659]},{"pos":[802,1060],"content":"For a comparison of <ph id=\"ph1\">`internal`</ph> with the other access modifiers, see <bpt id=\"p1\">[</bpt>Accessibility Levels<ept id=\"p1\">](../../../csharp/language-reference/keywords/accessibility-levels.md)</ept> and <bpt id=\"p2\">[</bpt>Access Modifiers<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)</ept>.","source":"For a comparison of `internal` with the other access modifiers, see [Accessibility Levels](../../../csharp/language-reference/keywords/accessibility-levels.md) and [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)."},{"pos":[1067,1168],"content":"For more information about assemblies, see <bpt id=\"p1\">[</bpt>Assemblies in .NET<ept id=\"p1\">](../../../standard/assembly/index.md)</ept>.","source":"For more information about assemblies, see [Assemblies in .NET](../../../standard/assembly/index.md)."},{"content":"A common use of internal access is in component-based development because it enables a group of components to cooperate in a private manner without being exposed to the rest of the application code.","pos":[1175,1373]},{"content":"For example, a framework for building graphical user interfaces could provide <ph id=\"ph1\">`Control`</ph> and <ph id=\"ph2\">`Form`</ph> classes that cooperate by using members with internal access.","pos":[1374,1534],"source":" For example, a framework for building graphical user interfaces could provide `Control` and `Form` classes that cooperate by using members with internal access."},{"content":"Since these members are internal, they are not exposed to code that is using the framework.","pos":[1535,1626]},{"content":"It is an error to reference a type or a member with internal access outside the assembly within which it was defined.","pos":[1633,1750]},{"pos":[1759,1766],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example contains two files, <ph id=\"ph1\">`Assembly1.cs`</ph> and <ph id=\"ph2\">`Assembly1_a.cs`</ph>.","pos":[1770,1839],"source":"This example contains two files, `Assembly1.cs` and `Assembly1_a.cs`."},{"content":"The first file contains an internal base class, <ph id=\"ph1\">`BaseClass`</ph>.","pos":[1840,1900],"source":" The first file contains an internal base class, `BaseClass`."},{"content":"In the second file, an attempt to instantiate <ph id=\"ph1\">`BaseClass`</ph> will produce an error.","pos":[1901,1981],"source":" In the second file, an attempt to instantiate `BaseClass` will produce an error."},{"pos":[2341,2348],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, use the same files you used in example 1, and change the accessibility level of <ph id=\"ph1\">`BaseClass`</ph> to <ph id=\"ph2\">`public`</ph>.","pos":[2352,2473],"source":"In this example, use the same files you used in example 1, and change the accessibility level of `BaseClass` to `public`."},{"content":"Also change the accessibility level of the member <ph id=\"ph1\">`IntM`</ph> to <ph id=\"ph2\">`internal`</ph>.","pos":[2474,2545],"source":" Also change the accessibility level of the member `IntM` to `internal`."},{"content":"In this case, you can instantiate the class, but you cannot access the internal member.","pos":[2546,2633]},{"pos":[3040,3065],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Declared accessibility<ept id=\"p1\">](~/_csharplang/spec/basic-concepts.md#declared-accessibility)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[3069,3252],"source":"For more information, see [Declared accessibility](~/_csharplang/spec/basic-concepts.md#declared-accessibility) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[3253,3329]},{"pos":[3336,3344],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3348,3407],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[3410,3476],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[3479,3546],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[3549,3632],"content":"<bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/access-modifiers.md)</ept>","source":"[Access Modifiers](../../../csharp/language-reference/keywords/access-modifiers.md)"},{"pos":[3635,3726],"content":"<bpt id=\"p1\">[</bpt>Accessibility Levels<ept id=\"p1\">](../../../csharp/language-reference/keywords/accessibility-levels.md)</ept>","source":"[Accessibility Levels](../../../csharp/language-reference/keywords/accessibility-levels.md)"},{"pos":[3729,3798],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/modifiers.md)</ept>","source":"[Modifiers](../../../csharp/language-reference/keywords/modifiers.md)"},{"pos":[3801,3864],"content":"<bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../../../csharp/language-reference/keywords/public.md)</ept>","source":"[public](../../../csharp/language-reference/keywords/public.md)"},{"pos":[3867,3932],"content":"<bpt id=\"p1\">[</bpt>private<ept id=\"p1\">](../../../csharp/language-reference/keywords/private.md)</ept>","source":"[private](../../../csharp/language-reference/keywords/private.md)"},{"pos":[3935,4004],"content":"<bpt id=\"p1\">[</bpt>protected<ept id=\"p1\">](../../../csharp/language-reference/keywords/protected.md)</ept>","source":"[protected](../../../csharp/language-reference/keywords/protected.md)"}]}