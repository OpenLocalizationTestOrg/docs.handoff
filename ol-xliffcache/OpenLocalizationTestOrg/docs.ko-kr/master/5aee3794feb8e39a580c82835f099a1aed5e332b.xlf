<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5aee3794feb8e39a580c82835f099a1aed5e332b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\generics\covariance-and-contravariance.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">138b78287a4e1163de634a9ded30c5eb2c313c9b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba852a701115f6ec6d8e44996de8f6f28c6cc92d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Covariance and Contravariance in Generics | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Covariance and Contravariance in Generics</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="top"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Covariance and contravariance are terms that refer to the ability to use a less derived (less specific) or more derived type (more specific) than originally specified.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Generic type parameters support covariance and contravariance to provide greater flexibility in assigning and using generic types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you are referring to a type system, covariance, contravariance, and invariance have the following definitions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The examples assume a base class named <ph id="ph1">`Base`</ph> and a derived class named <ph id="ph2">`Derived`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Enables you to use a more derived type than originally specified.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can assign an instance of <ph id="ph1">`IEnumerable&lt;Derived&gt;`</ph> (<ph id="ph2">`IEnumerable(Of Derived)`</ph> in Visual Basic) to a variable of type <ph id="ph3">`IEnumerable&lt;Base&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Enables you to use a more generic (less derived) type than originally specified.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can assign an instance of <ph id="ph1">`IEnumerable&lt;Base&gt;`</ph> (<ph id="ph2">`IEnumerable(Of Base)`</ph> in Visual Basic) to a variable of type <ph id="ph3">`IEnumerable&lt;Derived&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Means that you can use only the type originally specified; so an invariant generic type parameter is neither covariant nor contravariant.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You cannot assign an instance of <ph id="ph1">`IEnumerable&lt;Base&gt;`</ph> (<ph id="ph2">`IEnumerable(Of Base)`</ph> in Visual Basic) to a variable of type <ph id="ph3">`IEnumerable&lt;Derived&gt;`</ph> or vice versa.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Covariant type parameters enable you to make assignments that look much like ordinary <bpt id="p1">[</bpt>Polymorphism<ept id="p1">](~/docs/csharp/programming-guide/classes-and-structs/polymorphism.md)</ept>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CoContraSimpleIEnum#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/cocontrasimpleienum/cs/example.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CoContraSimpleIEnum#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/cocontrasimpleienum/vb/example.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, so <ph id="ph3">`List&lt;Derived&gt;`</ph> (<ph id="ph4">`List(Of Derived)`</ph> in Visual Basic) implements <ph id="ph5">`IEnumerable&lt;Derived&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The covariant type parameter does the rest.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Contravariance, on the other hand, seems counterintuitive.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example creates a delegate of type <ph id="ph1">`Action&lt;Base&gt;`</ph> (<ph id="ph2">`Action(Of Base)`</ph> in Visual Basic), and then assigns that delegate to a variable of type <ph id="ph3">`Action&lt;Derived&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CoContraSimpleAction#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/cocontrasimpleaction/cs/example.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CoContraSimpleAction#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/cocontrasimpleaction/vb/example.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This seems backward, but it is type-safe code that compiles and runs.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The lambda expression matches the delegate it is assigned to, so it defines a method that takes one parameter of type <ph id="ph1">`Base`</ph> and that has no return value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The resulting delegate can be assigned to a variable of type <ph id="ph1">`Action&lt;Derived&gt;`</ph> because the type parameter <ph id="ph2">`T`</ph> of the <ph id="ph3">&lt;xref:System.Action%601&gt;</ph> delegate is contravariant.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The code is type-safe because <ph id="ph1">`T`</ph> specifies a parameter type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the delegate of type <ph id="ph1">`Action&lt;Base&gt;`</ph> is invoked as if it were a delegate of type <ph id="ph2">`Action&lt;Derived&gt;`</ph>, its argument must be of type <ph id="ph3">`Derived`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This argument can always be passed safely to the underlying method, because the method's parameter is of type <ph id="ph1">`Base`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In general, a covariant type parameter can be used as the return type of a delegate, and contravariant type parameters can be used as parameter types.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For an interface, covariant type parameters can be used as the return types of the interface's methods, and contravariant type parameters can be used as the parameter types of the interface's methods.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Covariance and contravariance are collectively referred to as <bpt id="p1">*</bpt>variance<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A generic type parameter that is not marked covariant or contravariant is referred to as <bpt id="p1">*</bpt>invariant<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A brief summary of facts about variance in the common language runtime:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, variant type parameters are restricted to generic interface and generic delegate types.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A generic interface or generic delegate type can have both covariant and contravariant type parameters.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Variance applies only to reference types; if you specify a value type for a variant type parameter, that type parameter is invariant for the resulting constructed type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Variance does not apply to delegate combination.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>That is, given two delegates of types <ph id="ph1">`Action&lt;Derived&gt;`</ph> and <ph id="ph2">`Action&lt;Base&gt;`</ph> (<ph id="ph3">`Action(Of Derived)`</ph> and <ph id="ph4">`Action(Of Base)`</ph> in Visual Basic), you cannot combine the second delegate with the first although the result would be type safe.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Variance allows the second delegate to be assigned to a variable of type <ph id="ph1">`Action&lt;Derived&gt;`</ph>, but delegates can combine only if their types match exactly.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following subsections describe covariant and contravariant type parameters in detail:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Interfaces with Covariant Type Parameters<ept id="p1">](#InterfaceCovariantTypeParameters)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Interfaces with Contravariant Generic Type Parameters<ept id="p1">](#InterfaceCovariantTypeParameters)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Delegates with Variant Type Parameters<ept id="p1">](#DelegateVariantTypeParameters)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Defining Variant Generic Interfaces and Delegates<ept id="p1">](#DefiningVariantTypeParameters)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>List of Variant Generic Interface and Delegate Types<ept id="p1">](#VariantList)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Generic Interfaces with Covariant Type Parameters</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, several generic interfaces have covariant type parameters; for example: <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>All the type parameters of these interfaces are covariant, so the type parameters are used only for the return types of the members.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example illustrates covariant type parameters.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The example defines two types: <ph id="ph1">`Base`</ph> has a static method named <ph id="ph2">`PrintBases`</ph> that takes an <ph id="ph3">`IEnumerable&lt;Base&gt;`</ph> (<ph id="ph4">`IEnumerable(Of Base)`</ph> in Visual Basic) and prints the elements.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Derived`</ph> inherits from <ph id="ph2">`Base`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The example creates an empty <ph id="ph1">`List&lt;Derived&gt;`</ph> (<ph id="ph2">`List(Of Derived)`</ph> in Visual Basic) and demonstrates that this type can be passed to <ph id="ph3">`PrintBases`</ph> and assigned to a variable of type <ph id="ph4">`IEnumerable&lt;Base&gt;`</ph> without casting.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, which has a single covariant type parameter.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The covariant type parameter is the reason why an instance of <ph id="ph1">`IEnumerable&lt;Derived&gt;`</ph> can be used instead of <ph id="ph2">`IEnumerable&lt;Base&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CoContravarianceInClrGenericI#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/cocontravarianceinclrgenerici/cs/example.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CoContravarianceInClrGenericI#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/cocontravarianceinclrgenerici/vb/example.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Generic Interfaces with Contravariant Generic Type Parameters</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, several generic interfaces have contravariant type parameters; for example: <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>, <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>These interfaces have only contravariant type parameters, so the type parameters are used only as parameter types in the members of the interfaces.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example illustrates contravariant type parameters.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The example defines an abstract (<ph id="ph1">`MustInherit`</ph> in Visual Basic) <ph id="ph2">`Shape`</ph> class with an <ph id="ph3">`Area`</ph> property.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The example also defines a <ph id="ph1">`ShapeAreaComparer`</ph> class that implements <ph id="ph2">`IComparer&lt;Shape&gt;`</ph> (<ph id="ph3">`IComparer(Of Shape)`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601.Compare%2A?displayProperty=fullName&gt;</ph> method is based on the value of the <ph id="ph2">`Area`</ph> property, so <ph id="ph3">`ShapeAreaComparer`</ph> can be used to sort <ph id="ph4">`Shape`</ph> objects by area.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Circle`</ph> class inherits <ph id="ph2">`Shape`</ph> and overrides <ph id="ph3">`Area`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedSet%601&gt;</ph> of <ph id="ph2">`Circle`</ph> objects, using a constructor that takes an <ph id="ph3">`IComparer&lt;Circle&gt;`</ph> (<ph id="ph4">`IComparer(Of Circle)`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, instead of passing an <ph id="ph1">`IComparer&lt;Circle&gt;`</ph>, the example passes a <ph id="ph2">`ShapeAreaComparer`</ph> object, which implements <ph id="ph3">`IComparer&lt;Shape&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The example can pass a comparer of a less derived type (<ph id="ph1">`Shape`</ph>) when the code calls for a comparer of a more derived type (<ph id="ph2">`Circle`</ph>), because the type parameter of the <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> generic interface is contravariant.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When a new <ph id="ph1">`Circle`</ph> object is added to the <ph id="ph2">`SortedSet&lt;Circle&gt;`</ph>, the <ph id="ph3">`IComparer&lt;Shape&gt;.Compare`</ph> method (<ph id="ph4">`IComparer(Of Shape).Compare`</ph> method in Visual Basic) of the <ph id="ph5">`ShapeAreaComparer`</ph> object is called each time the new element is compared to an existing element.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The parameter type of the method (<ph id="ph1">`Shape`</ph>) is less derived than the type that is being passed (<ph id="ph2">`Circle`</ph>), so the call is type safe.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Contravariance enables <ph id="ph1">`ShapeAreaComparer`</ph> to sort a collection of any single type, as well as a mixed collection of types, that derive from <ph id="ph2">`Shape`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CoContravarianceInClrGenericI2#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/cocontravarianceinclrgenerici2/cs/example.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CoContravarianceInClrGenericI2#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/cocontravarianceinclrgenerici2/vb/example.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Generic Delegates with Variant Type Parameters</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, the <ph id="ph2">`Func`</ph> generic delegates, such as <ph id="ph3">&lt;xref:System.Func%602&gt;</ph>, have covariant return types and contravariant parameter types.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Action`</ph> generic delegates, such as <ph id="ph2">&lt;xref:System.Action%602&gt;</ph>, have contravariant parameter types.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This means that the delegates can be assigned to variables that have more derived parameter types and (in the case of the <ph id="ph1">`Func`</ph> generic delegates) less derived return types.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The last generic type parameter of the <ph id="ph1">`Func`</ph> generic delegates specifies the type of the return value in the delegate signature.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It is covariant (<ph id="ph1">`out`</ph> keyword), whereas the other generic type parameters are contravariant (<ph id="ph2">`in`</ph> keyword).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following code illustrates this.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The first piece of code defines a class named <ph id="ph1">`Base`</ph>, a class named <ph id="ph2">`Derived`</ph> that inherits <ph id="ph3">`Base`</ph>, and another class with a <ph id="ph4">`static`</ph> method (<ph id="ph5">`Shared`</ph> in Visual Basic) named <ph id="ph6">`MyMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The method takes an instance of <ph id="ph1">`Base`</ph> and returns an instance of <ph id="ph2">`Derived`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>(If the argument is an instance of <ph id="ph1">`Derived`</ph>, <ph id="ph2">`MyMethod`</ph> returns it; if the argument is an instance of <ph id="ph3">`Base`</ph>, <ph id="ph4">`MyMethod`</ph> returns a new instance of <ph id="ph5">`Derived`</ph>.) In <ph id="ph6">`Main()`</ph>, the example creates an instance of <ph id="ph7">`Func&lt;Base, Derived&gt;`</ph> (<ph id="ph8">`Func(Of Base, Derived)`</ph> in Visual Basic) that represents <ph id="ph9">`MyMethod`</ph>, and stores it in the variable <ph id="ph10">`f1`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CoContravarianceDelegates#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/cocontravariancedelegates/cs/example.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CoContravarianceDelegates#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/cocontravariancedelegates/vb/example.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The second piece of code shows that the delegate can be assigned to a variable of type <ph id="ph1">`Func&lt;Base, Base&gt;`</ph> (<ph id="ph2">`Func(Of Base, Base)`</ph> in Visual Basic), because the return type is covariant.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CoContravarianceDelegates#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/cocontravariancedelegates/cs/example.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CoContravarianceDelegates#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/cocontravariancedelegates/vb/example.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The third piece of code shows that the delegate can be assigned to a variable of type <ph id="ph1">`Func&lt;Derived, Derived&gt;`</ph> (<ph id="ph2">`Func(Of Derived, Derived)`</ph> in Visual Basic), because the parameter type is contravariant.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CoContravarianceDelegates#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/cocontravariancedelegates/cs/example.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CoContravarianceDelegates#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/cocontravariancedelegates/vb/example.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The final piece of code shows that the delegate can be assigned to a variable of type <ph id="ph1">`Func&lt;Derived, Base&gt;`</ph> (<ph id="ph2">`Func(Of Derived, Base)`</ph> in Visual Basic), combining the effects of the contravariant parameter type and the covariant return type.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CoContravarianceDelegates#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/cocontravariancedelegates/cs/example.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CoContravarianceDelegates#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/cocontravariancedelegates/vb/example.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Variance in Generic and Non-Generic Delegates</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the preceding code, the signature of <ph id="ph1">`MyMethod`</ph> exactly matches the signature of the constructed generic delegate: <ph id="ph2">`Func&lt;Base, Derived&gt;`</ph> (<ph id="ph3">`Func(Of Base, Derived)`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The example shows that this generic delegate can be stored in variables or method parameters that have more derived parameter types and less derived return types, as long as all the delegate types are constructed from the generic delegate type <ph id="ph1">&lt;xref:System.Func%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This is an important point.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The effects of covariance and contravariance in the type parameters of generic delegates are similar to the effects of covariance and contravariance in ordinary delegate binding (see <bpt id="p1">[</bpt>Variance in Delegates<ept id="p1">](http://msdn.microsoft.com/library/e3b98197-6c5b-4e55-9c6e-9739b60645ca)</ept>).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>However, variance in delegate binding works with all delegate types, not just with generic delegate types that have variant type parameters.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Furthermore, variance in delegate binding enables a method to be bound to any delegate that has more restrictive parameter types and a less restrictive return type, whereas the assignment of generic delegates works only if both delegate types are constructed from the same generic type definition.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following example shows the combined effects of variance in delegate binding and variance in generic type parameters.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The example defines a type hierarchy that includes three types, from least derived (<ph id="ph1">`Type1`</ph>) to most derived (<ph id="ph2">`Type3`</ph>).</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Variance in ordinary delegate binding is used to bind a method with a parameter type of <ph id="ph1">`Type1`</ph> and a return type of <ph id="ph2">`Type3`</ph> to a generic delegate with a parameter type of <ph id="ph3">`Type2`</ph> and a return type of <ph id="ph4">`Type2`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The resulting generic delegate is then assigned to another variable whose generic delegate type has a parameter of type <ph id="ph1">`Type3`</ph> and a return type of <ph id="ph2">`Type1`</ph>, using the covariance and contravariance of generic type parameters.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The second assignment requires both the variable type and the delegate type to be constructed from the same generic type definition, in this case, <ph id="ph1">&lt;xref:System.Func%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CoContravarianceDelegatesGenRelaxed#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/cocontravariancedelegatesgenrelaxed/cs/example.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CoContravarianceDelegatesGenRelaxed#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/cocontravariancedelegatesgenrelaxed/vb/example.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Defining Variant Generic Interfaces and Delegates</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, Visual Basic and C# have keywords that enable you to mark the generic type parameters of interfaces and delegates as covariant or contravariant.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework version 2.0, the common language runtime supports variance annotations on generic type parameters.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Prior to the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, the only way to define a generic class that has these annotations is to use Microsoft intermediate language (MSIL), either by compiling the class with <bpt id="p1">[</bpt>Ilasm.exe (IL Assembler)<ept id="p1">](../../../docs/framework/tools/ilasm-exe-il-assembler.md)</ept> or by emitting it in a dynamic assembly.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A covariant type parameter is marked with the <ph id="ph1">`out`</ph> keyword (<ph id="ph2">`Out`</ph> keyword in Visual Basic, <ph id="ph3">`+`</ph> for the <bpt id="p1">[</bpt>MSIL Assembler<ept id="p1">](../../../docs/framework/tools/ilasm-exe-il-assembler.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You can use a covariant type parameter as the return value of a method that belongs to an interface, or as the return type of a delegate.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You cannot use a covariant type parameter as a generic type constraint for interface methods.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If a method of an interface has a parameter that is a generic delegate type, a covariant type parameter of the interface type can be used to specify a contravariant type parameter of the delegate type.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A contravariant type parameter is marked with the <ph id="ph1">`in`</ph> keyword (<ph id="ph2">`In`</ph> keyword in Visual Basic, <ph id="ph3">`-`</ph> for the <bpt id="p1">[</bpt>MSIL Assembler<ept id="p1">](../../../docs/framework/tools/ilasm-exe-il-assembler.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can use a contravariant type parameter as the type of a parameter of a method that belongs to an interface, or as the type of a parameter of a delegate.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can use a contravariant type parameter as a generic type constraint for an interface method.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Only interface types and delegate types can have variant type parameters.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An interface or delegate type can have both covariant and contravariant type parameters.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Visual Basic and C# do not allow you to violate the rules for using covariant and contravariant type parameters, or to add covariance and contravariance annotations to the type parameters of types other than interfaces and delegates.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>MSIL Assembler<ept id="p1">](../../../docs/framework/tools/ilasm-exe-il-assembler.md)</ept> does not perform such checks, but a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown if you try to load a type that violates the rules.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For information and example code, see <bpt id="p1">[</bpt>Variance in Generic Interfaces<ept id="p1">](http://msdn.microsoft.com/library/e14322da-1db3-42f2-9a67-397daddd6b6a)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>List of Variant Generic Interface and Delegate Types</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, the following interface and delegate types have covariant and/or contravariant type parameters.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Covariant type parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Contravariant type parameters</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Action%601&gt;</ph> to <ph id="ph2">&lt;xref:System.Action%6016&gt;</ph></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Func%602&gt;</ph> to <ph id="ph2">&lt;xref:System.Func%6017&gt;</ph></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Covariance and Contravariance<ept id="p1">](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Variance in Delegates<ept id="p1">](http://msdn.microsoft.com/library/e3b98197-6c5b-4e55-9c6e-9739b60645ca)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>