{"content":"---\ntitle: \"ushort (C# Reference) | Microsoft Docs\"\nms.date: \"2017-03-14\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ushort\"\n  - \"ushort_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"ushort keyword [C#]\"\nms.assetid: 1a7dbaae-b7a0-4111-872a-c88a6d3981ac\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ushort (C# Reference)\n\nThe `ushort` keyword indicates an integral data type that stores values according to the size and range shown in the following table.  \n  \n|Type|Range|Size|.NET Framework type|  \n|----------|-----------|----------|-------------------------|  \n|`ushort`|0 to 65,535|Unsigned 16-bit integer|<xref:System.UInt16?displayProperty=fullName>|  \n  \n## Literals  \n\nYou can declare and initialize a `ushort` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it. If the integer literal is outside the range of `ushort` (that is, if it is less than <xref:System.UInt16.MinValue?displayProperty=fullName> or greater than <xref:System.UInt16.MaxValue?displayProperty=fullName>, a compilation error occurs.\n\nIn the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](../../../csharp/language-reference/keywords/int.md) to `ushort` values.    \n  \n[!code-cs[UShort](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UShort)]  \n\n> [!NOTE] \n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-cs[UShort](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UShortS)]  \n \n## Compiler overload resolution\n  \n A cast must be used when you call overloaded methods. Consider, for example, the following overloaded methods that use `ushort` and [int](../../../csharp/language-reference/keywords/int.md) parameters:  \n  \n```csharp  \npublic static void SampleMethod(int i) {}  \npublic static void SampleMethod(ushort s) {}  \n```  \n \n Using the `ushort` cast guarantees that the correct type is called, for example:  \n  \n```csharp  \n// Calls the method with the int parameter:  \nSampleMethod(5);  \n// Calls the method with the ushort parameter:  \nSampleMethod((ushort)5);    \n```  \n  \n## Conversions  \n There is a predefined implicit conversion from `ushort` to [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md).  \n  \n There is a predefined implicit conversion from [byte](../../../csharp/language-reference/keywords/byte.md) or [char](../../../csharp/language-reference/keywords/char.md) to `ushort`. Otherwise a cast must be used to perform an explicit conversion. Consider, for example, the following two `ushort` variables `x` and `y`:  \n  \n```csharp \nushort x = 5, y = 12;  \n```  \n  \n The following assignment statement will produce a compilation error, because the arithmetic expression on the right side of the assignment operator evaluates to `int` by default.  \n  \n```csharp  \nushort z = x + y;   // Error: conversion from int to ushort  \n```  \n  \n To fix this problem, use a cast:  \n  \n```csharp \nushort z = (ushort)(x + y);   // OK: explicit conversion   \n```  \n  \n It is possible though to use the following statements, where the destination variable has the same storage size or a larger storage size:  \n  \n```csharp\nint m = x + y;  \nlong n = x + y;  \n```  \n  \n Notice also that there is no implicit conversion from floating-point types to `ushort`. For example, the following statement generates a compiler error unless an explicit cast is used:  \n  \n```csharp  \n// Error -- no implicit conversion from double:  \nushort x = 3.0;   \n// OK -- explicit conversion:  \nushort y = (ushort)3.0;  \n```  \n  \n For information about arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md).  \n  \n For more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.UInt16>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)","nodes":[{"pos":[12,50],"content":"ushort (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ushort (C# Reference) | Microsoft Docs","pos":[0,38]}]},{"pos":[575,596],"content":"ushort (C# Reference)","linkify":"ushort (C# Reference)","nodes":[{"content":"ushort (C# Reference)","pos":[0,21]}]},{"pos":[598,731],"content":"The <ph id=\"ph1\">`ushort`</ph> keyword indicates an integral data type that stores values according to the size and range shown in the following table.","source":"The `ushort` keyword indicates an integral data type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[738,742]},{"content":"Range","pos":[743,748]},{"content":"Size","pos":[749,753]},{"content":".NET Framework type","pos":[754,773]},{"content":"0 to 65,535","pos":[851,862]},{"content":"Unsigned 16-bit integer","pos":[863,886]},{"pos":[942,950],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`ushort`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.","pos":[954,1107],"source":"You can declare and initialize a `ushort` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`ushort`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.UInt16.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1108,1347],"source":" If the integer literal is outside the range of `ushort` (that is, if it is less than <xref:System.UInt16.MinValue?displayProperty=fullName> or greater than <xref:System.UInt16.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1349,1573],"content":"In the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> to <ph id=\"ph1\">`ushort`</ph> values.","source":"In the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](../../../csharp/language-reference/keywords/int.md) to `ushort` values."},{"pos":[1581,1691],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>UShort<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UShort)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[UShort](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UShort)]"},{"pos":[1697,1860],"content":"[!NOTE] \nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[9,161],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"pos":[1862,2006],"content":"Starting with C# 7, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"pos":[2008,2119],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>UShort<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UShortS)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[UShort](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UShortS)]"},{"pos":[2127,2155],"content":"Compiler overload resolution","linkify":"Compiler overload resolution","nodes":[{"content":"Compiler overload resolution","pos":[0,28]}]},{"content":"A cast must be used when you call overloaded methods.","pos":[2160,2213]},{"content":"Consider, for example, the following overloaded methods that use <ph id=\"ph1\">`ushort`</ph> and <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> parameters:","pos":[2214,2361],"source":" Consider, for example, the following overloaded methods that use `ushort` and [int](../../../csharp/language-reference/keywords/int.md) parameters:"},{"pos":[2479,2559],"content":"Using the <ph id=\"ph1\">`ushort`</ph> cast guarantees that the correct type is called, for example:","source":"Using the `ushort` cast guarantees that the correct type is called, for example:"},{"pos":[2732,2743],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"pos":[2747,3247],"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`ushort`</ph> to <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id=\"p2\">[</bpt>uint<ept id=\"p2\">](../../../csharp/language-reference/keywords/uint.md)</ept>, <bpt id=\"p3\">[</bpt>long<ept id=\"p3\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p4\">[</bpt>ulong<ept id=\"p4\">](../../../csharp/language-reference/keywords/ulong.md)</ept>, <bpt id=\"p5\">[</bpt>float<ept id=\"p5\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p6\">[</bpt>double<ept id=\"p6\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p7\">[</bpt>decimal<ept id=\"p7\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","source":"There is a predefined implicit conversion from `ushort` to [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"There is a predefined implicit conversion from <bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](../../../csharp/language-reference/keywords/byte.md)</ept> or <bpt id=\"p2\">[</bpt>char<ept id=\"p2\">](../../../csharp/language-reference/keywords/char.md)</ept> to <ph id=\"ph1\">`ushort`</ph>.","pos":[3254,3436],"source":"There is a predefined implicit conversion from [byte](../../../csharp/language-reference/keywords/byte.md) or [char](../../../csharp/language-reference/keywords/char.md) to `ushort`."},{"content":"Otherwise a cast must be used to perform an explicit conversion.","pos":[3437,3501]},{"content":"Consider, for example, the following two <ph id=\"ph1\">`ushort`</ph> variables <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph>:","pos":[3502,3574],"source":" Consider, for example, the following two `ushort` variables `x` and `y`:"},{"pos":[3625,3803],"content":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right side of the assignment operator evaluates to <ph id=\"ph1\">`int`</ph> by default.","source":"The following assignment statement will produce a compilation error, because the arithmetic expression on the right side of the assignment operator evaluates to `int` by default."},{"content":"To fix this problem, use a cast:","pos":[3893,3925]},{"content":"It is possible though to use the following statements, where the destination variable has the same storage size or a larger storage size:","pos":[4012,4149]},{"content":"Notice also that there is no implicit conversion from floating-point types to <ph id=\"ph1\">`ushort`</ph>.","pos":[4210,4297],"source":"Notice also that there is no implicit conversion from floating-point types to `ushort`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[4298,4394]},{"pos":[4549,4780],"content":"For information about arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>.","source":"For information about arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md)."},{"pos":[4787,4977],"content":"For more information about implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"pos":[4986,5011],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[5125,5133],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5161,5222],"source":" [C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5225,5293],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5296,5365],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5368,5461],"source":" [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5464,5557],"source":" [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5560,5681],"source":" [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","pos":[5684,5804],"source":" [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}