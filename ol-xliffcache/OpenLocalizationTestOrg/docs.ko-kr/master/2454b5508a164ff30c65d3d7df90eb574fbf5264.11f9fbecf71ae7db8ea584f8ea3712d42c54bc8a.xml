{"content":"---\ntitle: \"SELECT (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"ESQL\"\nms.assetid: 9a33bd0d-ded1-41e7-ba3c-305502755e3b\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# SELECT (Entity SQL)\nSpecifies the elements returned by a query.  \n  \n## Syntax  \n  \n```  \n  \nSELECT [ ALL | DISTINCT ] [ topSubclause ] aliasedExpr   \n      [{ , aliasedExpr }] FROM fromClause [ WHERE whereClause ] [ GROUP BY groupByClause [ HAVING havingClause ] ] [ ORDER BY orderByClause ]  \nor  \nSELECT VALUE [ ALL | DISTINCT ] [ topSubclause ] expr FROM fromClause [ WHERE whereClause ] [ GROUP BY groupByClause [ HAVING havingClause ] ] [ ORDER BY orderByClause  \n```  \n  \n## Arguments  \n ALL  \n Specifies that duplicates can appear in the result set. ALL is the default.  \n  \n DISTINCT  \n Specifies that only unique results can appear in the result set.  \n  \n VALUE  \n Allows only one item to be specified, and does not add on a row wrapper.  \n  \n `topSubclause`  \n Any valid expression that indicates the number of first results to return from the query, of the form `top (``expr``)`.  \n  \n The LIMIT parameter of the [ORDER BY](../../../../../../docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) operator also lets you select the first n items in the result set.  \n  \n `aliasedExpr`  \n An expression of the form:  \n  \n `expr` as `identifier` &#124; `expr`  \n  \n `expr`  \n A literal or expression.  \n  \n## Remarks  \n The SELECT clause is evaluated after the [FROM](../../../../../../docs/framework/data/adonet/ef/language-reference/from-entity-sql.md), [GROUP BY](../../../../../../docs/framework/data/adonet/ef/language-reference/group-by-entity-sql.md), and [HAVING](../../../../../../docs/framework/data/adonet/ef/language-reference/having-entity-sql.md) clauses have been evaluated. The SELECT clause can only refer to items currently in-scope (from the FROM clause, or from outer scopes). If a GROUP BY clause has been specified, the SELECT clause is only allowed to reference the aliases for the GROUP BY keys. Referring to the FROM clause items is only permitted in aggregate functions.  \n  \n The list of one or more query expressions following the SELECT keyword is known as the select list, or more formally as the projection. The most general form of projection is a single query expression. If you select a member `member1` from a collection `collection1`, you will produce a new collection of all the `member1` values for each object in `collection1`, as illustrated in the following example.  \n  \n```  \nSELECT collection1.member1 FROM collection1  \n```  \n  \n For example, if `customers` is a collection of type `Customer` that has a property `Name` that is of type `string`, selecting `Name` from `customers` will yield a collection of strings, as illustrated in the following example.  \n  \n```  \nSELECT customers.Name FROM customers AS c  \n```  \n  \n It is also possible to use JOIN syntax (FULL, INNER, LEFT, OUTER, ON, and RIGHT). ON is required for inner joins and is nto allowed for cross joins.  \n  \n## Row and Value Select Clauses  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports two variants of the SELECT clause. The first variant, row select, is identified by the SELECT keyword, and can be used to specify one or more values that should be projected out. Because a row wrapper is implicitly added around the values returned, the result of the query expression is always a multiset of rows.  \n  \n Each query expression in a row select must specify an alias. If no alias is specified,[!INCLUDE[esql](../../../../../../includes/esql-md.md)] attempts to generate an alias by using the alias generation rules.  \n  \n The other variant of the SELECT clause, value select, is identified by the SELECT VALUE keyword. It allows only one value to be specified, and does not add a row wrapper.  \n  \n A row select is always expressible in terms of VALUE SELECT, as illustrated in the following example.  \n  \n```  \nSELECT 1 AS a, \"abc\" AS b FROM C  \nSELECT VALUE ROW(1 AS a, \"abc\" AS b) FROM C   \n```  \n  \n## All and Distinct Modifiers  \n Both variants of SELECT in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] allow the specification of an ALL or DISTINCT modifier. If the DISTINCT modifier is specified, duplicates are eliminated from the collection produced by the query expression (up to and including the SELECT clause). If the ALL modifier is specified, no duplicate elimination is performed; ALL is the default.  \n  \n## Differences from Transact-SQL  \n Unlike Transact-SQL, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support use of the * argument in the SELECT clause.  Instead, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] allows queries to project out entire records by referencing the collection aliases from the FROM clause, as illustrated in the following example.  \n  \n```  \nSELECT * FROM T1, T2  \n```  \n  \n The previous [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] query expression is expressed in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] in the following way.  \n  \n```  \nSELECT a1, a2 FROM T1 AS a1, T2 AS a2  \n```  \n  \n## Example  \n The following Entity SQL query uses the SELECT operator to specify the elements to be returned by a query. The query is based on the AdventureWorks Sales Model. To compile and run this query, follow these steps:  \n  \n1.  Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md).  \n  \n2.  Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:  \n  \n [!code-csharp[DP EntityServices Concepts 2#LESS](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts 2/cs/entitysql.cs#less)]  \n  \n## See Also  \n [Query Expressions](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expressions-entity-sql.md)   \n [Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)   \n [TOP](../../../../../../docs/framework/data/adonet/ef/language-reference/top-entity-sql.md)","nodes":[{"pos":[4,405],"embed":true,"restype":"x-metadata","content":"title: \"SELECT (Entity SQL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"ESQL\"\nms.assetid: 9a33bd0d-ded1-41e7-ba3c-305502755e3b\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"SELECT (Entity SQL) | Microsoft Docs","nodes":[{"pos":[0,36],"content":"SELECT (Entity SQL) | Microsoft Docs","nodes":[{"content":"SELECT (Entity SQL) | Microsoft Docs","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[412,431],"content":"SELECT (Entity SQL)","linkify":"SELECT (Entity SQL)","nodes":[{"content":"SELECT (Entity SQL)","pos":[0,19]}]},{"content":"Specifies the elements returned by a query.","pos":[432,475]},{"pos":[484,490],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[894,903],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"ALL","pos":[907,910]},{"content":"Specifies that duplicates can appear in the result set.","pos":[914,969]},{"content":"ALL is the default.","pos":[970,989]},{"content":"DISTINCT","pos":[996,1004]},{"content":"Specifies that only unique results can appear in the result set.","pos":[1008,1072]},{"content":"VALUE","pos":[1079,1084]},{"content":"Allows only one item to be specified, and does not add on a row wrapper.","pos":[1088,1160]},{"content":"Any valid expression that indicates the number of first results to return from the query, of the form <ph id=\"ph1\">`top (``expr``)`</ph>.","pos":[1185,1304],"source":"Any valid expression that indicates the number of first results to return from the query, of the form `top (``expr``)`."},{"pos":[1311,1506],"content":"The LIMIT parameter of the <bpt id=\"p1\">[</bpt>ORDER BY<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md)</ept> operator also lets you select the first n items in the result set.","source":"The LIMIT parameter of the [ORDER BY](../../../../../../docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) operator also lets you select the first n items in the result set."},{"content":"An expression of the form:","pos":[1530,1556]},{"pos":[1563,1599],"content":"<ph id=\"ph1\">`expr`</ph> as <ph id=\"ph2\">`identifier`</ph> &amp;#124; <ph id=\"ph3\">`expr`</ph>","source":"`expr` as `identifier` &#124; `expr`"},{"content":"A literal or expression.","pos":[1616,1640]},{"pos":[1649,1656],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The SELECT clause is evaluated after the <bpt id=\"p1\">[</bpt>FROM<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/from-entity-sql.md)</ept>, <bpt id=\"p2\">[</bpt>GROUP BY<ept id=\"p2\">](../../../../../../docs/framework/data/adonet/ef/language-reference/group-by-entity-sql.md)</ept>, and <bpt id=\"p3\">[</bpt>HAVING<ept id=\"p3\">](../../../../../../docs/framework/data/adonet/ef/language-reference/having-entity-sql.md)</ept> clauses have been evaluated.","pos":[1660,2029],"source":"The SELECT clause is evaluated after the [FROM](../../../../../../docs/framework/data/adonet/ef/language-reference/from-entity-sql.md), [GROUP BY](../../../../../../docs/framework/data/adonet/ef/language-reference/group-by-entity-sql.md), and [HAVING](../../../../../../docs/framework/data/adonet/ef/language-reference/having-entity-sql.md) clauses have been evaluated."},{"content":"The SELECT clause can only refer to items currently in-scope (from the FROM clause, or from outer scopes).","pos":[2030,2136]},{"content":"If a GROUP BY clause has been specified, the SELECT clause is only allowed to reference the aliases for the GROUP BY keys.","pos":[2137,2259]},{"content":"Referring to the FROM clause items is only permitted in aggregate functions.","pos":[2260,2336]},{"content":"The list of one or more query expressions following the SELECT keyword is known as the select list, or more formally as the projection.","pos":[2343,2478]},{"content":"The most general form of projection is a single query expression.","pos":[2479,2544]},{"content":"If you select a member <ph id=\"ph1\">`member1`</ph> from a collection <ph id=\"ph2\">`collection1`</ph>, you will produce a new collection of all the <ph id=\"ph3\">`member1`</ph> values for each object in <ph id=\"ph4\">`collection1`</ph>, as illustrated in the following example.","pos":[2545,2747],"source":" If you select a member `member1` from a collection `collection1`, you will produce a new collection of all the `member1` values for each object in `collection1`, as illustrated in the following example."},{"pos":[2815,3041],"content":"For example, if <ph id=\"ph1\">`customers`</ph> is a collection of type <ph id=\"ph2\">`Customer`</ph> that has a property <ph id=\"ph3\">`Name`</ph> that is of type <ph id=\"ph4\">`string`</ph>, selecting <ph id=\"ph5\">`Name`</ph> from <ph id=\"ph6\">`customers`</ph> will yield a collection of strings, as illustrated in the following example.","source":"For example, if `customers` is a collection of type `Customer` that has a property `Name` that is of type `string`, selecting `Name` from `customers` will yield a collection of strings, as illustrated in the following example."},{"content":"It is also possible to use JOIN syntax (FULL, INNER, LEFT, OUTER, ON, and RIGHT).","pos":[3107,3188]},{"content":"ON is required for inner joins and is nto allowed for cross joins.","pos":[3189,3255]},{"pos":[3264,3292],"content":"Row and Value Select Clauses","linkify":"Row and Value Select Clauses","nodes":[{"content":"Row and Value Select Clauses","pos":[0,28]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> supports two variants of the SELECT clause.","pos":[3296,3395],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports two variants of the SELECT clause."},{"content":"The first variant, row select, is identified by the SELECT keyword, and can be used to specify one or more values that should be projected out. Because a row wrapper is implicitly added around the values returned, the result of the query expression is always a multiset of rows.","pos":[3396,3674]},{"content":"Each query expression in a row select must specify an alias.","pos":[3681,3741]},{"content":"If no alias is specified,<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> attempts to generate an alias by using the alias generation rules.","pos":[3742,3889],"source":" If no alias is specified,[!INCLUDE[esql](../../../../../../includes/esql-md.md)] attempts to generate an alias by using the alias generation rules."},{"content":"The other variant of the SELECT clause, value select, is identified by the SELECT VALUE keyword.","pos":[3896,3992]},{"content":"It allows only one value to be specified, and does not add a row wrapper.","pos":[3993,4066]},{"content":"A row select is always expressible in terms of VALUE SELECT, as illustrated in the following example.","pos":[4073,4174]},{"pos":[4280,4306],"content":"All and Distinct Modifiers","linkify":"All and Distinct Modifiers","nodes":[{"content":"All and Distinct Modifiers","pos":[0,26]}]},{"content":"Both variants of SELECT in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> allow the specification of an ALL or DISTINCT modifier.","pos":[4310,4448],"source":"Both variants of SELECT in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] allow the specification of an ALL or DISTINCT modifier."},{"content":"If the DISTINCT modifier is specified, duplicates are eliminated from the collection produced by the query expression (up to and including the SELECT clause).","pos":[4449,4607]},{"content":"If the ALL modifier is specified, no duplicate elimination is performed; ALL is the default.","pos":[4608,4700]},{"pos":[4709,4738],"content":"Differences from Transact-SQL","linkify":"Differences from Transact-SQL","nodes":[{"content":"Differences from Transact-SQL","pos":[0,29]}]},{"content":"Unlike Transact-SQL, <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> does not support use of the * argument in the SELECT clause.","pos":[4742,4879],"source":"Unlike Transact-SQL, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support use of the * argument in the SELECT clause."},{"content":"Instead, <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> allows queries to project out entire records by referencing the collection aliases from the FROM clause, as illustrated in the following example.","pos":[4881,5091],"source":"  Instead, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] allows queries to project out entire records by referencing the collection aliases from the FROM clause, as illustrated in the following example."},{"pos":[5136,5315],"content":"The previous <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> query expression is expressed in <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> in the following way.","source":"The previous [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] query expression is expressed in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] in the following way."},{"pos":[5379,5386],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following Entity SQL query uses the SELECT operator to specify the elements to be returned by a query.","pos":[5390,5496]},{"content":"The query is based on the AdventureWorks Sales Model.","pos":[5497,5550]},{"content":"To compile and run this query, follow these steps:","pos":[5551,5601]},{"pos":[5611,5808],"content":"Follow the procedure in <bpt id=\"p1\">[</bpt>How to: Execute a Query that Returns StructuralType Results<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)</ept>.","source":"Follow the procedure in [How to: Execute a Query that Returns StructuralType Results](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)."},{"pos":[5818,5901],"content":"Pass the following query as an argument to the <ph id=\"ph1\">`ExecuteStructuralTypeQuery`</ph> method:","source":"Pass the following query as an argument to the `ExecuteStructuralTypeQuery` method:"},{"pos":[6076,6084],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Query Expressions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expressions-entity-sql.md)</ept><ph id=\"ph1\"> </ph>","pos":[6088,6208],"source":"[Query Expressions](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expressions-entity-sql.md) "},{"content":"<bpt id=\"p1\">[</bpt>Entity SQL Reference<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept><ph id=\"ph1\"> </ph>","pos":[6212,6327],"source":"[Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md) "},{"content":"<bpt id=\"p1\">[</bpt>TOP<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/top-entity-sql.md)</ept>","pos":[6331,6422],"source":"[TOP](../../../../../../docs/framework/data/adonet/ef/language-reference/top-entity-sql.md)"}]}