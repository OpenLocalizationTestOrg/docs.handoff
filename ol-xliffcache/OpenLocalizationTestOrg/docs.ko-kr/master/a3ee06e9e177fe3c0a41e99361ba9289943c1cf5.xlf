<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3ee06e9e177fe3c0a41e99361ba9289943c1cf5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\indexers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2348b18556d8c3a24b6ea6bb82c9c79ed0bab83</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13bfcda5bc7d9c243d5482861d0db200141e9796</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indexers</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Indexers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Indexers</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Indexers<ept id="p1">*</ept> are similar to properties.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In many ways indexers build on the same language features as <bpt id="p1">[</bpt>properties<ept id="p1">](properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Indexers enable <bpt id="p1">*</bpt>indexed<ept id="p1">*</ept> properties: properties referenced using one or more arguments.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Those arguments provide an index into some collection of values.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Indexer Syntax</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You access an indexer through a variable name and square brackets .</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You place the indexer arguments inside the brackets:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You declare indexers using the <ph id="ph1">`this`</ph> keyword as the property name, and declaring the arguments within square brackets.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This declaration would match the usage shown in the previous paragraph:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>From this initial example, you can see the relationship between the syntax for properties and for indexers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This analogy carries through most of the syntax rules for indexers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Indexers can have any valid access modifiers (public, protected internal, protected, internal, or private).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>They may be sealed, virtual, or abstract.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As with properties, you can specify different access modifiers for the get and set accesssors in an indexer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You may also specify read-only indexers (by omitting the set accessor), or write-only indexers (by omitting the get accessor).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can apply almost everything you learn from working with properties to indexers.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The only exception to that rule is <bpt id="p1">*</bpt>auto implemented properties<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The compiler cannot always generate the correct storage for an indexer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The presence of arguments to reference an item in a set of items distinguishes indexers from properties.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You may define multiple indexers on a type, as long as the argument lists for each indexer is unique.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Let's explore different scenarios where you might use one or more indexers in a class definition.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Scenarios</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You would define <bpt id="p1">*</bpt>indexers<ept id="p1">*</ept> in your type when its API models some collection where you define the arguments to that collection.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Your indexers may or may not map directly to the collection types that are part of the .NET core framework.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Your type may have other responsibilities in addition to modeling a collection.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Indexers enable you to provide the API that matches your type's abstraction without exposing the inner details of how the values for that abstraction are stored or computed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Let's walk through some of the common scenarios for using <bpt id="p1">*</bpt>indexers<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can access the <bpt id="p1">[</bpt>sample folder for indexers<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/csharp/indexers)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For download instructions, see <bpt id="p1">[</bpt>Samples and Tutorials<ept id="p1">](../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Arrays and Vectors</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>One of the most common scenarios for creating indexers is when your type models an array, or a vector.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can create an indexer to model an ordered list of data.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The advantage of creating your own indexer is that you can define the storage for that collection to suit your needs.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Imagine a scenario where your type models historical data that is too large to load into memory at once.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You need to load and unload sections of the collection based on usage.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The example following models this behavior.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It reports on how many data points exist.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It creates pages to hold sections of the data on demand.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It removes pages from memory to make room for pages needed by more recent requests.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can follow this design idiom to model any sort of collection where there are good reasons not to load the entire set of data into an in- memory collection.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`Page`</ph> class is a private nested class that is not part of the public interface.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Those details are hidden from any users of this class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Dictionaries</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Another common scenario is when you need to model a dictionary or a map.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This scenario is when your type stores values based on key, typically text keys.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This example creates a dictionary that maps command line arguments to <bpt id="p1">[</bpt>lamdba expressions<ept id="p1">](delegates-overview.md)</ept> that manage those options.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example shows two classes: an <ph id="ph1">`ArgsActions`</ph> class that maps a command line option to an <ph id="ph2">`Action`</ph> delegate, and an <ph id="ph3">`ArgsProcessor`</ph> that uses the <ph id="ph4">`ArgsActions`</ph> to execute each <ph id="ph5">`Action`</ph> when it encounters that option.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`ArgsAction`</ph> collection maps closely to the underlying collection.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get`</ph> determines if a given option has been configured.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If so, it returns the <ph id="ph1">`Action`</ph> associated with that option.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If not, it returns an <ph id="ph1">`Action`</ph> that does nothing.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The public accessor does not include a <ph id="ph1">`set`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Rather, the design using a public method for setting options.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Multi-Dimensional Maps</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can create indexers that use multiple arguments.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In addition, those arguments are not constrained to be the same type.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Let's look at two examples.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The first example shows a class that generates values for a Mandelbrot set.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information on the mathematics behind the set, read <bpt id="p1">[</bpt>this article<ept id="p1">](https://en.wikipedia.org/wiki/Mandelbrot_set)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The indexer uses two doubles to define a point in the X, Y plane.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The get accessor computes the number of iterations until a point is determined to be not in the set.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the maximum iterations is reached, the point is in the set, and the class's maxIterations value is returned.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>(The computer generated images popularized for the Mandelbrot set define colors for the number of iterations necessary to determine that a point is outside the set.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The Mandelbrot Set defines values at every (x,y) coordinate for real number values.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>That defines a dictionary that could contain an infinite number of values.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Therefore, there is no storage behind the set.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Instead, this class computes the value for each point when code calls the <ph id="ph1">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>There's no underlying storage used.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Let's examine one last use of indexers, where the indexer takes multiple arguments of different types.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Consider a program that manages historical temperature data.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This indexer uses a city and a date to set or get the high and low temperatures for that location:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This example creates an indexer that maps weather data on two different arguments: a city (represented by a <ph id="ph1">`string`</ph>) and a date (represented by a <ph id="ph2">`DateTime`</ph>).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The internal storage uses two <ph id="ph1">`Dictionary`</ph> classes to represent the two-dimensional dictionary.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The public API no longer represents the underlying storage.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Rather, the language features of indexers enables you to create a public interface that represents your abstraction, even though the underlying storage must use different core collection types.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>There are two parts of this code that may be unfamiliar to some developers.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>These two <ph id="ph1">`using`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>create an <bpt id="p1">*</bpt>alias<ept id="p1">*</ept> for a constructed generic type.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Those statements enable the code later to use the more descriptive <ph id="ph1">`DateMeasurements`</ph> and <ph id="ph2">`CityDateMeasurements`</ph> names instead of the generic construction of <ph id="ph3">`Dictionary&lt;DateTime, Measurements&gt;`</ph> and <ph id="ph4">`Dictionary&lt;string, Dictionary&lt;DateTime, Measurements&gt; &gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This construct does require using the fully qualified type names on the right side of the <ph id="ph1">`=`</ph> sign.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The second technique is to strip off the time portions of any <ph id="ph1">`DateTime`</ph> object used to index into the collections.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The .NET framework does not include a Date only type.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Developers use the <ph id="ph1">`DateTime`</ph> type, but use the <ph id="ph2">`Date`</ph> property to ensure that any <ph id="ph3">`DateTime`</ph> object from that day are equal.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Summing Up</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You should create indexers anytime you have a property-like element in your class where that property represents not a single value, but rather a collection of values where each individual item is identified by a set of arguments.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Those arguments can uniquely identify which item in the collection should be referenced.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Indexers extend the concept of <bpt id="p1">[</bpt>properties<ept id="p1">](properties.md)</ept>, where a member is treated like a data item from outside the class, but like a method on the side.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Indexers allow arguments to find a single item in a property that represents a set of items.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>