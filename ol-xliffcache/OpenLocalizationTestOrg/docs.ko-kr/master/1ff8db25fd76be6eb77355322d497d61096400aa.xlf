<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-convert-a-string-to-a-number.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ff8db25fd76be6eb77355322d497d61096400aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\types\how-to-convert-a-string-to-a-number.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a66357f146bcc95cfeb7f878e9832d78cd5171e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">260451f1df73a482aae895fd192efccba9560bb6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Convert a String to a Number - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Convert a String to a Number (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can convert a <bpt id="p1">[</bpt>string<ept id="p1">](../../../csharp/language-reference/keywords/string.md)</ept> to a number by calling the <ph id="ph1">`Parse`</ph> or <ph id="ph2">`TryParse`</ph> method found on the various numeric types (<ph id="ph3">`int`</ph>, <ph id="ph4">`long`</ph>, <ph id="ph5">`double`</ph>, etc.), or by using methods in the <ph id="ph6">&lt;xref:System.Convert?displayProperty=nameWithType&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you have a string, it is slightly more efficient and straightforward to call a <ph id="ph1">`TryParse`</ph> method (for example, <bpt id="p1">[</bpt><ph id="ph2">`int.TryParse("11", out number)`</ph><ept id="p1">](xref:System.Int32.TryParse%2A)</ept>) or <ph id="ph3">`Parse`</ph> method (for example, <bpt id="p2">[</bpt><ph id="ph4">`var number = int.Parse("11")`</ph><ept id="p2">](xref:System.Int32.Parse%2A)</ept>).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Using a <ph id="ph1">&lt;xref:System.Convert&gt;</ph> method is more useful for general objects that implement <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Parse`</ph> or <ph id="ph2">`TryParse`</ph> methods on the numeric type you expect the string contains, such as the <ph id="ph3">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToInt32%2A?displayProperty=nameWithType&gt;</ph> method uses <ph id="ph2">&lt;xref:System.Int32.Parse%2A&gt;</ph> internally.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Parse`</ph> method returns the converted number; the <ph id="ph2">`TryParse`</ph> method returns a <ph id="ph3">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded, and returns the converted number in an <bpt id="p1">[</bpt><ph id="ph4">`out`</ph> parameter<ept id="p1">](../../../csharp/language-reference/keywords/out.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the string is not in a valid format, <ph id="ph1">`Parse`</ph> throws an exception, whereas <ph id="ph2">`TryParse`</ph> returns <bpt id="p1">[</bpt>false<ept id="p1">](../../../csharp/language-reference/keywords/false.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When calling a <ph id="ph1">`Parse`</ph> method, you should always use exception handling to catch a <ph id="ph2">&lt;xref:System.FormatException&gt;</ph> in the event that the parse operation fails.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Calling the Parse and TryParse methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Parse`</ph> and <ph id="ph2">`TryParse`</ph> methods ignore white space at the beginning and at the end of the string, but all other characters must be characters that form the appropriate numeric type (<ph id="ph3">`int`</ph>, <ph id="ph4">`long`</ph>, <ph id="ph5">`ulong`</ph>, <ph id="ph6">`float`</ph>, <ph id="ph7">`decimal`</ph>, etc.).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Any white space within the string that forms the number causes an error.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, you can use <ph id="ph1">`decimal.TryParse`</ph> to parse "10", "10.3", or "  10  ", but you cannot use this method to parse 10 from "10X", "1 0" (note the embedded space), "10 .3" (note the embedded space), "10e1" (<ph id="ph2">`float.TryParse`</ph> works here), and so on.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In addition, a string whose value is <ph id="ph1">`null`</ph> or <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> fails to parse successfully.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can check for a null or empty string before attempting to parse it by calling the <ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example demonstrates both successful and unsuccessful calls to <ph id="ph1">`Parse`</ph> and <ph id="ph2">`TryParse`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example illustrates one a approach to parsing a string that is expected to include leading numeric characters (including hexadecimal characters) and trailing non-numeric characters.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It assigns valid characters from the beginning of a string to a new string before calling the <ph id="ph1">&lt;xref:System.Int32.TryParse%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because the strings to be parsed contain a small number of characters, the example calls the <ph id="ph1">&lt;xref:System.String.Concat%2A?displayProperty=nameWithType&gt;</ph> method to assign valid characters to a new string.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For a larger string, the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class can be used instead.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Calling the Convert methods</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following table lists some of the methods from the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class that you can use to convert a string to a number.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Numeric Type</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%29?displayProperty=nameWithType&gt;</ph> method to convert an input string to an <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept>. The example catches the two most common exceptions that can be thrown by this method, <ph id="ph2">&lt;xref:System.FormatException&gt;</ph> and <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the resulting number can be incremented without exceeding <ph id="ph1">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>, the example adds 1 to the result and displays the output.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types<ept id="p1">](../../../csharp/programming-guide/types/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Determine Whether a String Represents a Numeric Value<ept id="p1">](../../../csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework 4 Formatting Utility<ept id="p1">](https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>