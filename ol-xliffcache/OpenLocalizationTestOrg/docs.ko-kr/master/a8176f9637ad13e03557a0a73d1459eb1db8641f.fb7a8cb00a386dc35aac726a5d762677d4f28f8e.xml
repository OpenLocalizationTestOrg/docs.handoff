{"content":"---\ntitle: \"Specifying a Character Set | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"platform invoke, attribute fields\"\n  - \"attribute fields in platform invoke, CharSet\"\n  - \"CharSet field\"\nms.assetid: a8347eb1-295f-46b9-8a78-63331f9ecc50\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Specifying a Character Set\nThe <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field controls string marshaling and determines how platform invoke finds function names in a DLL. This topic describes both behaviors.  \n  \n Some APIs export two versions of functions that take string arguments: narrow (ANSI) and wide (Unicode). The Win32 API, for instance, includes the following entry-point names for the **MessageBox** function:  \n  \n-   **MessageBoxA**  \n  \n     Provides 1-byte character ANSI formatting, distinguished by an \"A\" appended to the entry-point name. Calls to **MessageBoxA** always marshal strings in ANSI format, as is common on Windows 95 and Windows 98 platforms.  \n  \n-   **MessageBoxW**  \n  \n     Provides 2-byte character Unicode formatting, distinguished by a \"W\" appended to the entry-point name. Calls to **MessageBoxW** always marshal strings in Unicode format, as is common on Windows NT, Windows 2000, and Windows XP platforms.  \n  \n## String Marshaling and Name Matching  \n The **CharSet** field accepts the following values:  \n  \n **CharSet.Ansi** (default value)  \n  \n-   String marshaling  \n  \n     Platform invoke marshals strings from their managed format (Unicode) to ANSI format.  \n  \n-   Name matching  \n  \n     When the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=fullName> field is **true**, as it is by default in [!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)], platform invoke searches only for the name you specify. For example, if you specify **MessageBox**, platform invoke searches for **MessageBox** and fails when it cannot locate the exact spelling.  \n  \n     When the **ExactSpelling** field is **false**, as it is by default in C++ and C#, platform invoke searches for the unmangled alias first (**MessageBox**), then the mangled name (**MessageBoxA**) if the unmangled alias is not found. Notice that ANSI name-matching behavior differs from Unicode name-matching behavior.  \n  \n **CharSet.Unicode**  \n  \n-   String marshaling  \n  \n     Platform invoke copies strings from their managed format (Unicode) to Unicode format.  \n  \n-   Name matching  \n  \n     When the **ExactSpelling** field is **true**, as it is by default in [!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)], platform invoke searches only for the name you specify. For example, if you specify **MessageBox**, platform invoke searches for **MessageBox** and fails if it cannot locate the exact spelling.  \n  \n     When the **ExactSpelling** field is **false**, as it is by default in C++ and C#, platform invoke searches for the mangled name first (**MessageBoxW**), then the unmangled alias (**MessageBox**) if the mangled name is not found. Notice that Unicode name-matching behavior differs from ANSI name-matching behavior.  \n  \n **CharSet.Auto**  \n  \n-   Platform invoke chooses between ANSI and Unicode formats at run time, based on the target platform.  \n  \n## Specifying a Character Set in Visual Basic  \n The following example declares the **MessageBox** function three times, each time with different character-set behavior. You can specify character-set behavior in Visual Basic by adding the **Ansi**, **Unicode**, or **Auto** keyword to the declaration statement.  \n  \n If you omit the character-set keyword, as is done in the first declaration statement, the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field defaults to the ANSI character set. The second and third statements in the example explicitly specify a character set with a keyword.  \n  \n```vb  \nImports System.Runtime.InteropServices  \n  \nPublic Class Win32  \n   Declare Function MessageBoxA Lib \"user32.dll\"(ByVal hWnd As Integer, _  \n       ByVal txt As String, ByVal caption As String, _  \n       ByVal Typ As Integer) As Integer  \n  \n   Declare Unicode Function MessageBoxW Lib \"user32.dll\" _  \n       (ByVal hWnd As Integer, ByVal txt As String, _  \n        ByVal caption As String, ByVal Typ As Integer) As Integer  \n  \n   Declare Auto Function MessageBox Lib \"user32.dll\" _  \n       (ByVal hWnd As Integer, ByVal txt As String, _  \n        ByVal caption As String, ByVal Typ As Integer) As Integer  \nEnd Class  \n```  \n  \n## Specifying a Character Set in C# and C++  \n The <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field identifies the underlying character set as ANSI or Unicode. The character set controls how string arguments to a method should be marshaled. Use one of the following forms to indicate the character set:  \n  \n```csharp  \n[DllImport(\"dllname\", CharSet=CharSet.Ansi)]  \n[DllImport(\"dllname\", CharSet=CharSet.Unicode)]  \n[DllImport(\"dllname\", CharSet=CharSet.Auto)]  \n  \n```  \n  \n```cpp  \n[DllImport(\"dllname\", CharSet=CharSet::Ansi)]  \n[DllImport(\"dllname\", CharSet=CharSet::Unicode)]  \n[DllImport(\"dllname\", CharSet=CharSet::Auto)]  \n```  \n  \n The following example shows three managed definitions of the **MessageBox** function attributed to specify a character set. In the first definition, by its omission, the **CharSet** field defaults to the ANSI character set.  \n  \n```csharp  \n[DllImport(\"user32.dll\")]  \n    public static extern int MessageBoxA(int hWnd, String text,   \n        String caption, uint type);  \n[DllImport(\"user32.dll\", CharSet=CharSet.Unicode)]  \n    public static extern int MessageBoxW(int hWnd, String text,   \n        String caption, uint type);  \n[DllImport(\"user32.dll\", CharSet=CharSet.Auto)]  \n    public static extern int MessageBox(int hWnd, String text,   \n        String caption, uint type);  \n  \n```  \n  \n```cpp  \ntypedef void* HWND;  \n  \n//Can use MessageBox or MessageBoxA.  \n[DllImport(\"user32\")]  \nextern \"C\" int MessageBox(HWND hWnd,  \n                          String* pText,  \n                          String* pCaption,  \n                          unsigned int uType);  \n  \n//Can use MessageBox or MessageBoxW.  \n[DllImport(\"user32\", CharSet=CharSet::Unicode)]  \nextern \"C\" int MessageBoxW(HWND hWnd,  \n                          String* pText,  \n                          String* pCaption,  \n                          unsigned int uType);  \n  \n//Must use MessageBox.  \n[DllImport(\"user32\", CharSet=CharSet::Auto)]  \nextern \"C\" int MessageBox(HWND hWnd,  \n                          String* pText,  \n                          String* pCaption,  \n                          unsigned int uType);  \n```  \n  \n## See Also  \n <xref:System.Runtime.InteropServices.DllImportAttribute>   \n [Creating Prototypes in Managed Code](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)   \n [Platform Invoke Examples](../../../docs/framework/interop/platform-invoke-examples.md)   \n [Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)","nodes":[{"pos":[4,542],"embed":true,"restype":"x-metadata","content":"title: \"Specifying a Character Set | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"platform invoke, attribute fields\"\n  - \"attribute fields in platform invoke, CharSet\"\n  - \"CharSet field\"\nms.assetid: a8347eb1-295f-46b9-8a78-63331f9ecc50\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"Specifying a Character Set | Microsoft Docs","nodes":[{"pos":[0,43],"content":"Specifying a Character Set | Microsoft Docs","nodes":[{"content":"Specifying a Character Set | Microsoft Docs","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[549,575],"content":"Specifying a Character Set","linkify":"Specifying a Character Set","nodes":[{"content":"Specifying a Character Set","pos":[0,26]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName&gt;</ph> field controls string marshaling and determines how platform invoke finds function names in a DLL.","pos":[576,768],"source":"The <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field controls string marshaling and determines how platform invoke finds function names in a DLL."},{"content":"This topic describes both behaviors.","pos":[769,805]},{"content":"Some APIs export two versions of functions that take string arguments: narrow (ANSI) and wide (Unicode).","pos":[812,916]},{"content":"The Win32 API, for instance, includes the following entry-point names for the <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept> function:","pos":[917,1019],"source":" The Win32 API, for instance, includes the following entry-point names for the **MessageBox** function:"},{"pos":[1029,1044],"content":"<bpt id=\"p1\">**</bpt>MessageBoxA<ept id=\"p1\">**</ept>","source":"**MessageBoxA**"},{"content":"Provides 1-byte character ANSI formatting, distinguished by an \"A\" appended to the entry-point name.","pos":[1055,1155]},{"content":"Calls to <bpt id=\"p1\">**</bpt>MessageBoxA<ept id=\"p1\">**</ept> always marshal strings in ANSI format, as is common on Windows 95 and Windows 98 platforms.","pos":[1156,1272],"source":" Calls to **MessageBoxA** always marshal strings in ANSI format, as is common on Windows 95 and Windows 98 platforms."},{"pos":[1282,1297],"content":"<bpt id=\"p1\">**</bpt>MessageBoxW<ept id=\"p1\">**</ept>","source":"**MessageBoxW**"},{"content":"Provides 2-byte character Unicode formatting, distinguished by a \"W\" appended to the entry-point name.","pos":[1308,1410]},{"content":"Calls to <bpt id=\"p1\">**</bpt>MessageBoxW<ept id=\"p1\">**</ept> always marshal strings in Unicode format, as is common on Windows NT, Windows 2000, and Windows XP platforms.","pos":[1411,1545],"source":" Calls to **MessageBoxW** always marshal strings in Unicode format, as is common on Windows NT, Windows 2000, and Windows XP platforms."},{"pos":[1554,1589],"content":"String Marshaling and Name Matching","linkify":"String Marshaling and Name Matching","nodes":[{"content":"String Marshaling and Name Matching","pos":[0,35]}]},{"pos":[1593,1644],"content":"The <bpt id=\"p1\">**</bpt>CharSet<ept id=\"p1\">**</ept> field accepts the following values:","source":"The **CharSet** field accepts the following values:"},{"pos":[1651,1683],"content":"<bpt id=\"p1\">**</bpt>CharSet.Ansi<ept id=\"p1\">**</ept> (default value)","source":"**CharSet.Ansi** (default value)"},{"content":"String marshaling","pos":[1693,1710]},{"content":"Platform invoke marshals strings from their managed format (Unicode) to ANSI format.","pos":[1721,1805]},{"content":"Name matching","pos":[1815,1828]},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=fullName&gt;</ph> field is <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>, as it is by default in <ph id=\"ph2\">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph>, platform invoke searches only for the name you specify.","pos":[1839,2101],"source":"When the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=fullName> field is **true**, as it is by default in [!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)], platform invoke searches only for the name you specify."},{"content":"For example, if you specify <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept>, platform invoke searches for <bpt id=\"p2\">**</bpt>MessageBox<ept id=\"p2\">**</ept> and fails when it cannot locate the exact spelling.","pos":[2102,2241],"source":" For example, if you specify **MessageBox**, platform invoke searches for **MessageBox** and fails when it cannot locate the exact spelling."},{"content":"When the <bpt id=\"p1\">**</bpt>ExactSpelling<ept id=\"p1\">**</ept> field is <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>, as it is by default in C++ and C#, platform invoke searches for the unmangled alias first (<bpt id=\"p3\">**</bpt>MessageBox<ept id=\"p3\">**</ept>), then the mangled name (<bpt id=\"p4\">**</bpt>MessageBoxA<ept id=\"p4\">**</ept>) if the unmangled alias is not found.","pos":[2252,2483],"source":"When the **ExactSpelling** field is **false**, as it is by default in C++ and C#, platform invoke searches for the unmangled alias first (**MessageBox**), then the mangled name (**MessageBoxA**) if the unmangled alias is not found."},{"content":"Notice that ANSI name-matching behavior differs from Unicode name-matching behavior.","pos":[2484,2568]},{"pos":[2575,2594],"content":"<bpt id=\"p1\">**</bpt>CharSet.Unicode<ept id=\"p1\">**</ept>","source":"**CharSet.Unicode**"},{"content":"String marshaling","pos":[2604,2621]},{"content":"Platform invoke copies strings from their managed format (Unicode) to Unicode format.","pos":[2632,2717]},{"content":"Name matching","pos":[2727,2740]},{"content":"When the <bpt id=\"p1\">**</bpt>ExactSpelling<ept id=\"p1\">**</ept> field is <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>, as it is by default in <ph id=\"ph1\">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph>, platform invoke searches only for the name you specify.","pos":[2751,2935],"source":"When the **ExactSpelling** field is **true**, as it is by default in [!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)], platform invoke searches only for the name you specify."},{"content":"For example, if you specify <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept>, platform invoke searches for <bpt id=\"p2\">**</bpt>MessageBox<ept id=\"p2\">**</ept> and fails if it cannot locate the exact spelling.","pos":[2936,3073],"source":" For example, if you specify **MessageBox**, platform invoke searches for **MessageBox** and fails if it cannot locate the exact spelling."},{"content":"When the <bpt id=\"p1\">**</bpt>ExactSpelling<ept id=\"p1\">**</ept> field is <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>, as it is by default in C++ and C#, platform invoke searches for the mangled name first (<bpt id=\"p3\">**</bpt>MessageBoxW<ept id=\"p3\">**</ept>), then the unmangled alias (<bpt id=\"p4\">**</bpt>MessageBox<ept id=\"p4\">**</ept>) if the mangled name is not found.","pos":[3084,3312],"source":"When the **ExactSpelling** field is **false**, as it is by default in C++ and C#, platform invoke searches for the mangled name first (**MessageBoxW**), then the unmangled alias (**MessageBox**) if the mangled name is not found."},{"content":"Notice that Unicode name-matching behavior differs from ANSI name-matching behavior.","pos":[3313,3397]},{"pos":[3404,3420],"content":"<bpt id=\"p1\">**</bpt>CharSet.Auto<ept id=\"p1\">**</ept>","source":"**CharSet.Auto**"},{"content":"Platform invoke chooses between ANSI and Unicode formats at run time, based on the target platform.","pos":[3430,3529]},{"pos":[3538,3580],"content":"Specifying a Character Set in Visual Basic","linkify":"Specifying a Character Set in Visual Basic","nodes":[{"content":"Specifying a Character Set in Visual Basic","pos":[0,42]}]},{"content":"The following example declares the <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept> function three times, each time with different character-set behavior.","pos":[3584,3704],"source":"The following example declares the **MessageBox** function three times, each time with different character-set behavior."},{"content":"You can specify character-set behavior in Visual Basic by adding the <bpt id=\"p1\">**</bpt>Ansi<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Unicode<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>Auto<ept id=\"p3\">**</ept> keyword to the declaration statement.","pos":[3705,3846],"source":" You can specify character-set behavior in Visual Basic by adding the **Ansi**, **Unicode**, or **Auto** keyword to the declaration statement."},{"content":"If you omit the character-set keyword, as is done in the first declaration statement, the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName&gt;</ph> field defaults to the ANSI character set.","pos":[3853,4074],"source":"If you omit the character-set keyword, as is done in the first declaration statement, the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field defaults to the ANSI character set."},{"content":"The second and third statements in the example explicitly specify a character set with a keyword.","pos":[4075,4172]},{"pos":[4822,4862],"content":"Specifying a Character Set in C# and C++","linkify":"Specifying a Character Set in C# and C++","nodes":[{"content":"Specifying a Character Set in C# and C++","pos":[0,40]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName&gt;</ph> field identifies the underlying character set as ANSI or Unicode.","pos":[4866,5025],"source":"The <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field identifies the underlying character set as ANSI or Unicode."},{"content":"The character set controls how string arguments to a method should be marshaled.","pos":[5026,5106]},{"content":"Use one of the following forms to indicate the character set:","pos":[5107,5168]},{"content":"The following example shows three managed definitions of the <bpt id=\"p1\">**</bpt>MessageBox<ept id=\"p1\">**</ept> function attributed to specify a character set.","pos":[5508,5631],"source":"The following example shows three managed definitions of the **MessageBox** function attributed to specify a character set."},{"content":"In the first definition, by its omission, the <bpt id=\"p1\">**</bpt>CharSet<ept id=\"p1\">**</ept> field defaults to the ANSI character set.","pos":[5632,5731],"source":" In the first definition, by its omission, the **CharSet** field defaults to the ANSI character set."},{"pos":[7014,7022],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Creating Prototypes in Managed Code<ept id=\"p1\">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept><ph id=\"ph1\"> </ph>","pos":[7087,7197],"source":"[Creating Prototypes in Managed Code](../../../docs/framework/interop/creating-prototypes-in-managed-code.md) "},{"content":"<bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](../../../docs/framework/interop/platform-invoke-examples.md)</ept><ph id=\"ph1\"> </ph>","pos":[7201,7289],"source":"[Platform Invoke Examples](../../../docs/framework/interop/platform-invoke-examples.md) "},{"content":"<bpt id=\"p1\">[</bpt>Marshaling Data with Platform Invoke<ept id=\"p1\">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept>","pos":[7293,7404],"source":"[Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)"}]}