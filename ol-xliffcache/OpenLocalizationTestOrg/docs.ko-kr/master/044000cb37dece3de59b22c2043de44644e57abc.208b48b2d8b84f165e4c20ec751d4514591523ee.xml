{"content":"---\ntitle: \"GetSchema and Schema Collections | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 7ab93b89-1221-427c-84ad-04803b3c64b4\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# GetSchema and Schema Collections\nThe **Connection** classes in each of the .NET Framework managed providers implement a **GetSchema** method which is used to retrieve schema information about the database that is currently connected, and the schema information returned from the **GetSchema** method comes in the form of a <xref:System.Data.DataTable>. The **GetSchema** method is an overloaded method that provides optional parameters for specifying the schema collection to return, and restricting the amount of information returned.  \n  \n## Specifying the Schema Collections  \n The first optional parameter of the **GetSchema** method is the collection name which is specified as a string. There are two types of schema collections: common schema collections that are common to all providers, and specific schema collections which are specific to each provider.  \n  \n You can query a .NET Framework managed provider to determine the list of supported schema collections by calling the **GetSchema** method with no arguments, or with the schema collection name \"MetaDataCollections\". This will return a <xref:System.Data.DataTable> with a list of the supported schema collections, the number of restrictions that they each support, and the number of identifier parts that they use.  \n  \n### Retrieving Schema Collections Example  \n The following examples demonstrate how to use the <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A> method of the .NET Framework Data Provider for the SQL Server <xref:System.Data.SqlClient.SqlConnection> class to retrieve schema information about all of the tables contained in the **AdventureWorks** sample database:  \n  \n```vb  \nImports System.Data.SqlClient  \n  \nModule Module1  \n   Sub Main()  \n      Dim connectionString As String = GetConnectionString()  \n      Using connection As New SqlConnection(connectionString)  \n         'Connect to the database then retrieve the schema information.  \n         connection.Open()  \n         Dim table As DataTable = connection.GetSchema(\"Tables\")  \n  \n         ' Display the contents of the table.  \n         DisplayData(table)  \n         Console.WriteLine(\"Press any key to continue.\")  \n         Console.ReadKey()  \n      End Using  \n   End Sub  \n  \n   Private Function GetConnectionString() As String  \n      ' To avoid storing the connection string in your code,    \n      ' you can retrieve it from a configuration file.  \n      Return \"Data Source=(local);Database=AdventureWorks;\" _  \n         & \"Integrated Security=true;\"  \n   End Function  \n  \n   Private Sub DisplayData(ByVal table As DataTable)  \n      For Each row As DataRow In table.Rows  \n         For Each col As DataColumn In table.Columns  \n            Console.WriteLine(\"{0} = {1}\", col.ColumnName, row(col))  \n         Next  \n         Console.WriteLine(\"============================\")  \n      Next  \n   End Sub  \nEnd Module  \n```  \n  \n```csharp  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n  \nclass Program  \n{  \n  static void Main()  \n  {  \n  string connectionString = GetConnectionString();  \n  using (SqlConnection connection = new SqlConnection(connectionString))  \n  {  \n   // Connect to the database then retrieve the schema information.  \n   connection.Open();  \n   DataTable table = connection.GetSchema(\"Tables\");  \n  \n   // Display the contents of the table.  \n   DisplayData(table);  \n   Console.WriteLine(\"Press any key to continue.\");  \n   Console.ReadKey();  \n   }  \n }  \n  \n  private static string GetConnectionString()  \n  {  \n   // To avoid storing the connection string in your code,  \n   // you can retrieve it from a configuration file.  \n   return \"Data Source=(local);Database=AdventureWorks;\" +  \n      \"Integrated Security=true;\";  \n  }  \n  \n  private static void DisplayData(System.Data.DataTable table)  \n  {  \n     foreach (System.Data.DataRow row in table.Rows)  \n     {  \n        foreach (System.Data.DataColumn col in table.Columns)  \n        {  \n           Console.WriteLine(\"{0} = {1}\", col.ColumnName, row[col]);  \n        }  \n     Console.WriteLine(\"============================\");  \n     }  \n  }  \n}  \n```  \n  \n## See Also  \n [Retrieving Database Schema Information](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[4,363],"nodes":[{"content":"GetSchema and Schema Collections | Microsoft Docs","nodes":[{"pos":[0,49],"content":"GetSchema and Schema Collections | Microsoft Docs","nodes":[{"content":"GetSchema and Schema Collections | Microsoft Docs","pos":[0,49]}]}],"pos":[6,58],"yaml":true}],"content":"title: \"GetSchema and Schema Collections | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 7ab93b89-1221-427c-84ad-04803b3c64b4\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","yamlblock":true},{"pos":[370,402],"content":"GetSchema and Schema Collections","linkify":"GetSchema and Schema Collections","nodes":[{"content":"GetSchema and Schema Collections","pos":[0,32]}]},{"content":"The <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> classes in each of the .NET Framework managed providers implement a <bpt id=\"p2\">**</bpt>GetSchema<ept id=\"p2\">**</ept> method which is used to retrieve schema information about the database that is currently connected, and the schema information returned from the <bpt id=\"p3\">**</bpt>GetSchema<ept id=\"p3\">**</ept> method comes in the form of a <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph>.","pos":[403,722],"source":"The **Connection** classes in each of the .NET Framework managed providers implement a **GetSchema** method which is used to retrieve schema information about the database that is currently connected, and the schema information returned from the **GetSchema** method comes in the form of a <xref:System.Data.DataTable>."},{"content":"The <bpt id=\"p1\">**</bpt>GetSchema<ept id=\"p1\">**</ept> method is an overloaded method that provides optional parameters for specifying the schema collection to return, and restricting the amount of information returned.","pos":[723,905],"source":" The **GetSchema** method is an overloaded method that provides optional parameters for specifying the schema collection to return, and restricting the amount of information returned."},{"pos":[914,947],"content":"Specifying the Schema Collections","linkify":"Specifying the Schema Collections","nodes":[{"content":"Specifying the Schema Collections","pos":[0,33]}]},{"content":"The first optional parameter of the <bpt id=\"p1\">**</bpt>GetSchema<ept id=\"p1\">**</ept> method is the collection name which is specified as a string.","pos":[951,1062],"source":"The first optional parameter of the **GetSchema** method is the collection name which is specified as a string."},{"content":"There are two types of schema collections: common schema collections that are common to all providers, and specific schema collections which are specific to each provider.","pos":[1063,1234]},{"content":"You can query a .NET Framework managed provider to determine the list of supported schema collections by calling the <bpt id=\"p1\">**</bpt>GetSchema<ept id=\"p1\">**</ept> method with no arguments, or with the schema collection name \"MetaDataCollections\".","pos":[1241,1455],"source":"You can query a .NET Framework managed provider to determine the list of supported schema collections by calling the **GetSchema** method with no arguments, or with the schema collection name \"MetaDataCollections\"."},{"content":"This will return a <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> with a list of the supported schema collections, the number of restrictions that they each support, and the number of identifier parts that they use.","pos":[1456,1653],"source":" This will return a <xref:System.Data.DataTable> with a list of the supported schema collections, the number of restrictions that they each support, and the number of identifier parts that they use."},{"pos":[1663,1700],"content":"Retrieving Schema Collections Example","linkify":"Retrieving Schema Collections Example","nodes":[{"content":"Retrieving Schema Collections Example","pos":[0,37]}]},{"pos":[1704,2028],"content":"The following examples demonstrate how to use the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.GetSchema%2A&gt;</ph> method of the .NET Framework Data Provider for the SQL Server <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> class to retrieve schema information about all of the tables contained in the <bpt id=\"p1\">**</bpt>AdventureWorks<ept id=\"p1\">**</ept> sample database:","source":"The following examples demonstrate how to use the <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A> method of the .NET Framework Data Provider for the SQL Server <xref:System.Data.SqlClient.SqlConnection> class to retrieve schema information about all of the tables contained in the **AdventureWorks** sample database:"},{"pos":[4503,4511],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Retrieving Database Schema Information<ept id=\"p1\">](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md)</ept><ph id=\"ph1\"> </ph>","pos":[4515,4638],"source":"[Retrieving Database Schema Information](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md) "},{"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[4642,4745],"source":"[ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}