{"content":"---\ntitle: \"Object Comparison Using XmlNameTable | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nms.assetid: 8d94e041-d340-4ddf-9a2c-d7319e3f4f86\ncaps.latest.revision: 4\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# Object Comparison Using XmlNameTable\n**XmlDocuments**, when created, have a name table created specifically for that document. When XML is loaded into the document, or new elements or attributes are created, the attribute and element names are put into the **XmlNameTable**. You can also create an **XmlDocument** using an existing **NameTable** from another document. When **XmlDocuments** are created with the constructor that takes an **XmlNameTable** parameter, the document has access to the node names, namespaces, and prefixes already stored in the **XmlNameTable**. Regardless of how the name table is loaded with names, once the names are stored in the table, names can be compared quickly using object comparison instead of string comparison. Strings can also be added to the name table using the <xref:System.Xml.NameTable.Add%2A>. The following code sample shows a name table being created and the string **MyString** being added to the table. After that, an **XmlDocument** is created using that table, and the element and attribute names in **Myfile.xml** are added to the existing name table.  \n  \n```vb  \nDim nt As New NameTable()  \nnt.Add(\"MyString\")  \nDim doc As New XmlDocument(nt)  \ndoc.Load(\"Myfile.xml\")  \n```  \n  \n```csharp  \nNameTable nt = new NameTable();  \nnt.Add(\"MyString\");  \nXmlDocument doc = new XmlDocument(nt);  \ndoc.Load(\"Myfile.xml\");  \n```  \n  \n The following code example shows the creation of a document, two new elements being added to the document, which also adds them to the document name table, and the object comparison on the names.  \n  \n```vb  \nDim doc1 As XmlDocument = imp.CreateDocument()  \nDim node1 As XmlElement = doc.CreateElement(\"node1\")  \nDim doc2 As XmlDocument = imp.CreateDocument()  \nDim node2 As XmlElement = doc.CreateElement(\"node2\")  \nif (CType(node1.Name, object) = CType(node2.Name, object))  \n```  \n  \n```csharp  \nXmlDocument doc1 = imp.CreateDocument();  \nnode1 = doc1.CreateElement (\"node1\");  \nXmlDocument doc2 = imp.CreateDocument();  \nnode2 = doc2.CreateElement (\"node1\");  \nif (((object)node1.Name) == ((object)node2.Name))  \n{ ...  \n```  \n  \n The above scenario of a name table passed between two documents is typical when the same type of document is being processed repeatedly, such as order documents at an ecommerce site, which conform to an XML Schema definition language (XSD) schema or document type definition (DTD) and the same strings are repeated. Using the same name table gives a performance improvement, as the same element name occurs in multiple documents.  \n  \n## See Also  \n [XML Document Object Model (DOM)](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)","nodes":[{"pos":[12,65],"content":"Object Comparison Using XmlNameTable | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Object Comparison Using XmlNameTable | Microsoft Docs","pos":[0,53]}]},{"pos":[410,446],"content":"Object Comparison Using XmlNameTable","linkify":"Object Comparison Using XmlNameTable","nodes":[{"content":"Object Comparison Using XmlNameTable","pos":[0,36]}]},{"content":"<bpt id=\"p1\">**</bpt>XmlDocuments<ept id=\"p1\">**</ept>, when created, have a name table created specifically for that document.","pos":[447,536],"source":"**XmlDocuments**, when created, have a name table created specifically for that document."},{"content":"When XML is loaded into the document, or new elements or attributes are created, the attribute and element names are put into the <bpt id=\"p1\">**</bpt>XmlNameTable<ept id=\"p1\">**</ept>.","pos":[537,684],"source":" When XML is loaded into the document, or new elements or attributes are created, the attribute and element names are put into the **XmlNameTable**."},{"content":"You can also create an <bpt id=\"p1\">**</bpt>XmlDocument<ept id=\"p1\">**</ept> using an existing <bpt id=\"p2\">**</bpt>NameTable<ept id=\"p2\">**</ept> from another document.","pos":[685,778],"source":" You can also create an **XmlDocument** using an existing **NameTable** from another document."},{"content":"When <bpt id=\"p1\">**</bpt>XmlDocuments<ept id=\"p1\">**</ept> are created with the constructor that takes an <bpt id=\"p2\">**</bpt>XmlNameTable<ept id=\"p2\">**</ept> parameter, the document has access to the node names, namespaces, and prefixes already stored in the <bpt id=\"p3\">**</bpt>XmlNameTable<ept id=\"p3\">**</ept>.","pos":[779,983],"source":" When **XmlDocuments** are created with the constructor that takes an **XmlNameTable** parameter, the document has access to the node names, namespaces, and prefixes already stored in the **XmlNameTable**."},{"content":"Regardless of how the name table is loaded with names, once the names are stored in the table, names can be compared quickly using object comparison instead of string comparison.","pos":[984,1162]},{"content":"Strings can also be added to the name table using the <ph id=\"ph1\">&lt;xref:System.Xml.NameTable.Add%2A&gt;</ph>.","pos":[1163,1252],"source":" Strings can also be added to the name table using the <xref:System.Xml.NameTable.Add%2A>."},{"content":"The following code sample shows a name table being created and the string <bpt id=\"p1\">**</bpt>MyString<ept id=\"p1\">**</ept> being added to the table.","pos":[1253,1365],"source":" The following code sample shows a name table being created and the string **MyString** being added to the table."},{"content":"After that, an <bpt id=\"p1\">**</bpt>XmlDocument<ept id=\"p1\">**</ept> is created using that table, and the element and attribute names in <bpt id=\"p2\">**</bpt>Myfile.xml<ept id=\"p2\">**</ept> are added to the existing name table.","pos":[1366,1517],"source":" After that, an **XmlDocument** is created using that table, and the element and attribute names in **Myfile.xml** are added to the existing name table."},{"content":"The following code example shows the creation of a document, two new elements being added to the document, which also adds them to the document name table, and the object comparison on the names.","pos":[1792,1987]},{"content":"The above scenario of a name table passed between two documents is typical when the same type of document is being processed repeatedly, such as order documents at an ecommerce site, which conform to an XML Schema definition language (XSD) schema or document type definition (DTD) and the same strings are repeated.","pos":[2527,2842]},{"content":"Using the same name table gives a performance improvement, as the same element name occurs in multiple documents.","pos":[2843,2956]},{"pos":[2965,2973],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2977,3079],"content":"<bpt id=\"p1\">[</bpt>XML Document Object Model (DOM)<ept id=\"p1\">](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)</ept>","source":"[XML Document Object Model (DOM)](../../../../docs/standard/data/xml/xml-document-object-model-dom.md)"}]}