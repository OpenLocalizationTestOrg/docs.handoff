{"content":"---\ntitle: \"IMetaDataDispenser::OpenScope Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"IMetaDataDispenser.OpenScope\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IMetaDataDispenser::OpenScope\"\nhelpviewer_keywords: \n  - \"IMetaDataDispenser::OpenScope method [.NET Framework metadata]\"\n  - \"OpenScope method, IMetaDataDispenser interface [.NET Framework metadata]\"\nms.assetid: 65063ad5-e0d9-4c01-8f8b-9a5950109fa6\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# IMetaDataDispenser::OpenScope Method\nOpens an existing, on-disk file and maps its metadata into memory.  \n  \n## Syntax  \n  \n```  \nHRESULT OpenScope (  \n    [in]  LPCWSTR     szScope,   \n    [in]  DWORD       dwOpenFlags,   \n    [in]  REFIID      riid,   \n    [out] IUnknown    **ppIUnk  \n);  \n```  \n  \n## Parameters  \n `szScope`  \n [in] The name of the file to be opened. The file must contain common language runtime (CLR) metadata.  \n  \n `dwOpenFlags`  \n [in] A value of the [CorOpenFlags](../../../../docs/framework/unmanaged-api/metadata/coropenflags-enumeration.md) enumeration to specify the mode (read, write, and so on) for opening.  \n  \n `riid`  \n [in] The IID of the desired metadata interface to be returned; the caller will use the interface to import (read) or emit (write) metadata.  \n  \n The value of `riid` must specify one of the \"import\" or \"emit\" interfaces. Valid values are IID_IMetaDataEmit, IID_IMetaDataImport, IID_IMetaDataAssemblyEmit, IID_IMetaDataAssemblyImport, IID_IMetaDataEmit2, or IID_IMetaDataImport2.  \n  \n `ppIUnk`  \n [out] The pointer to the returned interface.  \n  \n## Remarks  \n The in-memory copy of the metadata can be queried using methods from one of the \"import\" interfaces, or added to using methods from the one of the \"emit\" interfaces.  \n  \n If the target file does not contain CLR metadata, the `OpenScope` method will fail.  \n  \n In the .NET Framework version 1.0 and version 1.1, if a scope is opened with `dwOpenFlags` set to ofRead, it is eligible for sharing. That is, if subsequent calls to `OpenScope` pass in the name of a file that was previously opened, the existing scope is reused and a new set of data structures is not created. However, problems can arise due to this sharing.  \n  \n In the .NET Framework version 2.0, scopes opened with `dwOpenFlags` set to ofRead are no longer shared. Use the ofReadOnly value to allow the scope to be shared. When a scope is shared, queries that use \"read/write\" metadata interfaces will fail.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** Cor.h  \n  \n **Library:** Used as a resource in MsCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]  \n  \n## See also\n\n- [IMetaDataDispenser Interface](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenser-interface.md)\n- [IMetaDataDispenserEx Interface](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenserex-interface.md)\n- [IMetaDataAssemblyEmit Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataassemblyemit-interface.md)\n- [IMetaDataAssemblyImport Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataassemblyimport-interface.md)\n- [IMetaDataEmit Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)\n- [IMetaDataEmit2 Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataemit2-interface.md)\n- [IMetaDataImport Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md)\n- [IMetaDataImport2 Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataimport2-interface.md)\n","nodes":[{"pos":[4,503],"embed":true,"restype":"x-metadata","content":"title: \"IMetaDataDispenser::OpenScope Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"IMetaDataDispenser.OpenScope\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IMetaDataDispenser::OpenScope\"\nhelpviewer_keywords: \n  - \"IMetaDataDispenser::OpenScope method [.NET Framework metadata]\"\n  - \"OpenScope method, IMetaDataDispenser interface [.NET Framework metadata]\"\nms.assetid: 65063ad5-e0d9-4c01-8f8b-9a5950109fa6\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"IMetaDataDispenser::OpenScope Method","nodes":[{"pos":[0,36],"content":"IMetaDataDispenser::OpenScope Method","nodes":[{"content":"IMetaDataDispenser::OpenScope Method","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[510,546],"content":"IMetaDataDispenser::OpenScope Method","linkify":"IMetaDataDispenser::OpenScope Method","nodes":[{"content":"IMetaDataDispenser::OpenScope Method","pos":[0,36]}]},{"content":"Opens an existing, on-disk file and maps its metadata into memory.","pos":[547,613]},{"pos":[622,628],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[815,825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The name of the file to be opened.","pos":[842,881]},{"content":"The file must contain common language runtime (CLR) metadata.","pos":[882,943]},{"content":"[in] A value of the <bpt id=\"p1\">[</bpt>CorOpenFlags<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/coropenflags-enumeration.md)</ept> enumeration to specify the mode (read, write, and so on) for opening.","pos":[967,1150],"source":"[in] A value of the [CorOpenFlags](../../../../docs/framework/unmanaged-api/metadata/coropenflags-enumeration.md) enumeration to specify the mode (read, write, and so on) for opening."},{"content":"[in] The IID of the desired metadata interface to be returned; the caller will use the interface to import (read) or emit (write) metadata.","pos":[1167,1306]},{"content":"The value of <ph id=\"ph1\">`riid`</ph> must specify one of the \"import\" or \"emit\" interfaces.","pos":[1313,1387],"source":"The value of `riid` must specify one of the \"import\" or \"emit\" interfaces."},{"content":"Valid values are IID_IMetaDataEmit, IID_IMetaDataImport, IID_IMetaDataAssemblyEmit, IID_IMetaDataAssemblyImport, IID_IMetaDataEmit2, or IID_IMetaDataImport2.","pos":[1388,1545]},{"content":"[out] The pointer to the returned interface.","pos":[1564,1608]},{"pos":[1617,1624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The in-memory copy of the metadata can be queried using methods from one of the \"import\" interfaces, or added to using methods from the one of the \"emit\" interfaces.","pos":[1628,1793]},{"pos":[1800,1883],"content":"If the target file does not contain CLR metadata, the <ph id=\"ph1\">`OpenScope`</ph> method will fail.","source":"If the target file does not contain CLR metadata, the `OpenScope` method will fail."},{"content":"In the .NET Framework version 1.0 and version 1.1, if a scope is opened with <ph id=\"ph1\">`dwOpenFlags`</ph> set to ofRead, it is eligible for sharing.","pos":[1890,2023],"source":"In the .NET Framework version 1.0 and version 1.1, if a scope is opened with `dwOpenFlags` set to ofRead, it is eligible for sharing."},{"content":"That is, if subsequent calls to <ph id=\"ph1\">`OpenScope`</ph> pass in the name of a file that was previously opened, the existing scope is reused and a new set of data structures is not created.","pos":[2024,2200],"source":" That is, if subsequent calls to `OpenScope` pass in the name of a file that was previously opened, the existing scope is reused and a new set of data structures is not created."},{"content":"However, problems can arise due to this sharing.","pos":[2201,2249]},{"content":"In the .NET Framework version 2.0, scopes opened with <ph id=\"ph1\">`dwOpenFlags`</ph> set to ofRead are no longer shared.","pos":[2256,2359],"source":"In the .NET Framework version 2.0, scopes opened with `dwOpenFlags` set to ofRead are no longer shared."},{"content":"Use the ofReadOnly value to allow the scope to be shared.","pos":[2360,2417]},{"content":"When a scope is shared, queries that use \"read/write\" metadata interfaces will fail.","pos":[2418,2502]},{"pos":[2511,2523],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2527,2631],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2638,2655],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> Cor.h","source":"**Header:** Cor.h"},{"pos":[2662,2708],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Used as a resource in MsCorEE.dll","source":"**Library:** Used as a resource in MsCorEE.dll"},{"pos":[2715,2823],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]"},{"pos":[2832,2840],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2844,2957],"content":"<bpt id=\"p1\">[</bpt>IMetaDataDispenser Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenser-interface.md)</ept>","source":"[IMetaDataDispenser Interface](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenser-interface.md)"},{"pos":[2960,3077],"content":"<bpt id=\"p1\">[</bpt>IMetaDataDispenserEx Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenserex-interface.md)</ept>","source":"[IMetaDataDispenserEx Interface](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenserex-interface.md)"},{"pos":[3080,3199],"content":"<bpt id=\"p1\">[</bpt>IMetaDataAssemblyEmit Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataassemblyemit-interface.md)</ept>","source":"[IMetaDataAssemblyEmit Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataassemblyemit-interface.md)"},{"pos":[3202,3325],"content":"<bpt id=\"p1\">[</bpt>IMetaDataAssemblyImport Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataassemblyimport-interface.md)</ept>","source":"[IMetaDataAssemblyImport Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataassemblyimport-interface.md)"},{"pos":[3328,3431],"content":"<bpt id=\"p1\">[</bpt>IMetaDataEmit Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)</ept>","source":"[IMetaDataEmit Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)"},{"pos":[3434,3539],"content":"<bpt id=\"p1\">[</bpt>IMetaDataEmit2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit2-interface.md)</ept>","source":"[IMetaDataEmit2 Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataemit2-interface.md)"},{"pos":[3542,3649],"content":"<bpt id=\"p1\">[</bpt>IMetaDataImport Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md)</ept>","source":"[IMetaDataImport Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md)"},{"pos":[3652,3761],"content":"<bpt id=\"p1\">[</bpt>IMetaDataImport2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataimport2-interface.md)</ept>","source":"[IMetaDataImport2 Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataimport2-interface.md)"}]}