{"content":"---\ntitle: \"How to: Add Trace Statements to Application Code\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tracing [.NET Framework], conditional writes based on switches\"\n  - \"trace statements\"\n  - \"WriteLineIf method\"\n  - \"tracing [.NET Framework], adding trace statements\"\n  - \"Assert method, tracing code\"\n  - \"trace switches, conditional writes based on switches\"\n  - \"WriteIf method\"\nms.assetid: f3a93fa7-1717-467d-aaff-393e5c9828b4\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# How to: Add Trace Statements to Application Code\nThe methods used most often for tracing are the methods for writing output to listeners: **Write**, **WriteIf**, **WriteLine**, **WriteLineIf**, **Assert**, and **Fail**. These methods can be divided into two categories: **Write**, **WriteLine**, and **Fail** all emit output unconditionally, whereas **WriteIf**, **WriteLineIf**, and **Assert** test a Boolean condition, and write or do not write based on the value of the condition. **WriteIf** and **WriteLineIf** emit output if the condition is `true`, and **Assert** emits output if the condition is `false`.  \n  \n When designing your tracing and debugging strategy, you should think about how you want the output to look. Multiple **Write** statements filled with unrelated information will create a log that is difficult to read. On the other hand, using **WriteLine** to put related statements on separate lines may make it difficult to distinguish what information belongs together. In general, use multiple **Write** statements when you want to combine information from multiple sources to create a single informative message, and use the **WriteLine** statement when you want to create a single, complete message.  \n  \n### To write a complete line  \n  \n1.  Call the <xref:System.Diagnostics.Trace.WriteLine%2A> or <xref:System.Diagnostics.Trace.WriteLineIf%2A> method.  \n  \n     A carriage return is appended to the end of the message this method returns, so that the next message returned by **Write**, **WriteIf**, **WriteLine**, or **WriteLineIf** will begin on the following line:  \n  \n    ```vb  \n    Dim errorFlag As Boolean = False  \n    Trace.WriteLine(\"Error in AppendData procedure.\")  \n    Trace.WriteLineIf(errorFlag, \"Error in AppendData procedure.\")  \n    ```  \n  \n    ```csharp  \n    bool errorFlag = false;  \n    System.Diagnostics.Trace.WriteLine (\"Error in AppendData procedure.\");  \n    System.Diagnostics.Trace.WriteLineIf(errorFlag,   \n       \"Error in AppendData procedure.\");  \n    ```  \n  \n### To write a partial line  \n  \n1.  Call the <xref:System.Diagnostics.Trace.Write%2A> or <xref:System.Diagnostics.Trace.WriteIf%2A> method.  \n  \n     The next message put out by a **Write**, **WriteIf**, **WriteLine**, or **WriteLineIf** will begin on the same line as the message put out by the **Write** or **WriteIf** statement:  \n  \n    ```vb  \n    Dim errorFlag As Boolean = False  \n    Trace.WriteIf(errorFlag, \"Error in AppendData procedure.\")  \n    Debug.WriteIf(errorFlag, \"Transaction abandoned.\")  \n    Trace.Write(\"Invalid value for data request\")  \n    ```  \n  \n    ```csharp  \n    bool errorFlag = false;  \n    System.Diagnostics.Trace.WriteIf(errorFlag,   \n       \"Error in AppendData procedure.\");  \n    System.Diagnostics.Debug.WriteIf(errorFlag, \"Transaction abandoned.\");  \n    Trace.Write(\"Invalid value for data request\");  \n    ```  \n  \n### To verify that certain conditions exist either before or after you execute a method  \n  \n1.  Call the <xref:System.Diagnostics.Trace.Assert%2A> method.  \n  \n    ```vb  \n    Dim i As Integer = 4  \n    Trace.Assert(i = 5, \"i is not equal to 5.\")  \n    ```  \n  \n    ```csharp  \n    int i = 4;  \n    System.Diagnostics.Trace.Assert(i == 5, \"i is not equal to 5.\");  \n    ```  \n  \n    > [!NOTE]\n    >  You can use **Assert** with both tracing and debugging. This example outputs the call stack to any listener in the **Listeners** collection. For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code) and <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>.  \n  \n## See also\n\n- <xref:System.Diagnostics.Debug.WriteIf%2A?displayProperty=nameWithType>\n- <xref:System.Diagnostics.Debug.WriteLineIf%2A?displayProperty=nameWithType>\n- <xref:System.Diagnostics.Trace.WriteIf%2A?displayProperty=nameWithType>\n- <xref:System.Diagnostics.Trace.WriteLineIf%2A?displayProperty=nameWithType>\n- [Tracing and Instrumenting Applications](../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)\n- [How to: Create, Initialize and Configure Trace Switches](../../../docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)\n- [Trace Switches](../../../docs/framework/debug-trace-profile/trace-switches.md)\n- [Trace Listeners](../../../docs/framework/debug-trace-profile/trace-listeners.md)\n","nodes":[{"pos":[4,512],"embed":true,"restype":"x-metadata","content":"title: \"How to: Add Trace Statements to Application Code\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tracing [.NET Framework], conditional writes based on switches\"\n  - \"trace statements\"\n  - \"WriteLineIf method\"\n  - \"tracing [.NET Framework], adding trace statements\"\n  - \"Assert method, tracing code\"\n  - \"trace switches, conditional writes based on switches\"\n  - \"WriteIf method\"\nms.assetid: f3a93fa7-1717-467d-aaff-393e5c9828b4\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"How to: Add Trace Statements to Application Code","nodes":[{"pos":[0,48],"content":"How to: Add Trace Statements to Application Code","nodes":[{"content":"How to: Add Trace Statements to Application Code","pos":[0,48]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[519,567],"content":"How to: Add Trace Statements to Application Code","linkify":"How to: Add Trace Statements to Application Code","nodes":[{"content":"How to: Add Trace Statements to Application Code","pos":[0,48]}]},{"content":"The methods used most often for tracing are the methods for writing output to listeners: <bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>WriteIf<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>WriteLine<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>WriteLineIf<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Assert<ept id=\"p5\">**</ept>, and <bpt id=\"p6\">**</bpt>Fail<ept id=\"p6\">**</ept>.","pos":[568,738],"source":"The methods used most often for tracing are the methods for writing output to listeners: **Write**, **WriteIf**, **WriteLine**, **WriteLineIf**, **Assert**, and **Fail**."},{"content":"These methods can be divided into two categories: <bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>WriteLine<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Fail<ept id=\"p3\">**</ept> all emit output unconditionally, whereas <bpt id=\"p4\">**</bpt>WriteIf<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>WriteLineIf<ept id=\"p5\">**</ept>, and <bpt id=\"p6\">**</bpt>Assert<ept id=\"p6\">**</ept> test a Boolean condition, and write or do not write based on the value of the condition.","pos":[739,1002],"source":" These methods can be divided into two categories: **Write**, **WriteLine**, and **Fail** all emit output unconditionally, whereas **WriteIf**, **WriteLineIf**, and **Assert** test a Boolean condition, and write or do not write based on the value of the condition."},{"content":"<bpt id=\"p1\">**</bpt>WriteIf<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>WriteLineIf<ept id=\"p2\">**</ept> emit output if the condition is <ph id=\"ph1\">`true`</ph>, and <bpt id=\"p3\">**</bpt>Assert<ept id=\"p3\">**</ept> emits output if the condition is <ph id=\"ph2\">`false`</ph>.","pos":[1003,1131],"source":"**WriteIf** and **WriteLineIf** emit output if the condition is `true`, and **Assert** emits output if the condition is `false`."},{"content":"When designing your tracing and debugging strategy, you should think about how you want the output to look.","pos":[1138,1245]},{"content":"Multiple <bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept> statements filled with unrelated information will create a log that is difficult to read.","pos":[1246,1354],"source":" Multiple **Write** statements filled with unrelated information will create a log that is difficult to read."},{"content":"On the other hand, using <bpt id=\"p1\">**</bpt>WriteLine<ept id=\"p1\">**</ept> to put related statements on separate lines may make it difficult to distinguish what information belongs together.","pos":[1355,1509],"source":" On the other hand, using **WriteLine** to put related statements on separate lines may make it difficult to distinguish what information belongs together."},{"content":"In general, use multiple <bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept> statements when you want to combine information from multiple sources to create a single informative message, and use the <bpt id=\"p2\">**</bpt>WriteLine<ept id=\"p2\">**</ept> statement when you want to create a single, complete message.","pos":[1510,1742],"source":" In general, use multiple **Write** statements when you want to combine information from multiple sources to create a single informative message, and use the **WriteLine** statement when you want to create a single, complete message."},{"pos":[1752,1776],"content":"To write a complete line","linkify":"To write a complete line","nodes":[{"content":"To write a complete line","pos":[0,24]}]},{"pos":[1786,1897],"content":"Call the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Trace.WriteLine%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace.WriteLineIf%2A&gt;</ph> method.","source":"Call the <xref:System.Diagnostics.Trace.WriteLine%2A> or <xref:System.Diagnostics.Trace.WriteLineIf%2A> method."},{"pos":[1908,2113],"content":"A carriage return is appended to the end of the message this method returns, so that the next message returned by <bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>WriteIf<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>WriteLine<ept id=\"p3\">**</ept>, or <bpt id=\"p4\">**</bpt>WriteLineIf<ept id=\"p4\">**</ept> will begin on the following line:","source":"A carriage return is appended to the end of the message this method returns, so that the next message returned by **Write**, **WriteIf**, **WriteLine**, or **WriteLineIf** will begin on the following line:"},{"pos":[2547,2570],"content":"To write a partial line","linkify":"To write a partial line","nodes":[{"content":"To write a partial line","pos":[0,23]}]},{"pos":[2580,2683],"content":"Call the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Trace.Write%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace.WriteIf%2A&gt;</ph> method.","source":"Call the <xref:System.Diagnostics.Trace.Write%2A> or <xref:System.Diagnostics.Trace.WriteIf%2A> method."},{"pos":[2694,2875],"content":"The next message put out by a <bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>WriteIf<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>WriteLine<ept id=\"p3\">**</ept>, or <bpt id=\"p4\">**</bpt>WriteLineIf<ept id=\"p4\">**</ept> will begin on the same line as the message put out by the <bpt id=\"p5\">**</bpt>Write<ept id=\"p5\">**</ept> or <bpt id=\"p6\">**</bpt>WriteIf<ept id=\"p6\">**</ept> statement:","source":"The next message put out by a **Write**, **WriteIf**, **WriteLine**, or **WriteLineIf** will begin on the same line as the message put out by the **Write** or **WriteIf** statement:"},{"pos":[3407,3490],"content":"To verify that certain conditions exist either before or after you execute a method","linkify":"To verify that certain conditions exist either before or after you execute a method","nodes":[{"content":"To verify that certain conditions exist either before or after you execute a method","pos":[0,83]}]},{"pos":[3500,3558],"content":"Call the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Trace.Assert%2A&gt;</ph> method.","source":"Call the <xref:System.Diagnostics.Trace.Assert%2A> method."},{"pos":[3789,4126],"content":"[!NOTE]\nYou can use **Assert** with both tracing and debugging. This example outputs the call stack to any listener in the **Listeners** collection. For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code) and <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>.","leadings":["","    >  "],"nodes":[{"content":"You can use **Assert** with both tracing and debugging. This example outputs the call stack to any listener in the **Listeners** collection. For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code) and <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>.","pos":[8,330],"nodes":[{"content":"You can use <bpt id=\"p1\">**</bpt>Assert<ept id=\"p1\">**</ept> with both tracing and debugging.","pos":[0,55],"source":"You can use **Assert** with both tracing and debugging."},{"content":"This example outputs the call stack to any listener in the <bpt id=\"p1\">**</bpt>Listeners<ept id=\"p1\">**</ept> collection.","pos":[56,140],"source":" This example outputs the call stack to any listener in the **Listeners** collection."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Assertions in Managed Code<ept id=\"p1\">](/visualstudio/debugger/assertions-in-managed-code)</ept> and <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType&gt;</ph>.","pos":[141,322],"source":" For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code) and <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>."}]}]},{"pos":[4135,4143],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4451,4578],"content":"<bpt id=\"p1\">[</bpt>Tracing and Instrumenting Applications<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)</ept>","source":"[Tracing and Instrumenting Applications](../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)"},{"pos":[4581,4740],"content":"<bpt id=\"p1\">[</bpt>How to: Create, Initialize and Configure Trace Switches<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)</ept>","source":"[How to: Create, Initialize and Configure Trace Switches](../../../docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)"},{"pos":[4743,4822],"content":"<bpt id=\"p1\">[</bpt>Trace Switches<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/trace-switches.md)</ept>","source":"[Trace Switches](../../../docs/framework/debug-trace-profile/trace-switches.md)"},{"pos":[4825,4906],"content":"<bpt id=\"p1\">[</bpt>Trace Listeners<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/trace-listeners.md)</ept>","source":"[Trace Listeners](../../../docs/framework/debug-trace-profile/trace-listeners.md)"}]}