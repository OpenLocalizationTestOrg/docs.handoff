{"content":"---\ntitle: \"&lt;&lt; Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.<<\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"bit shift operators\"\n  - \"<< operator [Visual Basic]\"\n  - \"operator <<, Visual Basic left shift operator\"\nms.assetid: fdb93d25-81ba-417f-b808-41207bfb8440\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;&lt; Operator (Visual Basic)\nPerforms an arithmetic left shift on a bit pattern.  \n  \n## Syntax  \n  \n```  \n  \nresult = pattern << amount  \n```  \n  \n## Parts  \n `result`  \n Required. Integral numeric value. The result of shifting the bit pattern. The data type is the same as that of `pattern`.  \n  \n `pattern`  \n Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`).  \n  \n `amount`  \n Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be `Integer` or widen to `Integer`.  \n  \n## Remarks  \n Arithmetic shifts are not circular, which means the bits shifted off one end of the result are not reintroduced at the other end. In an arithmetic left shift, the bits shifted beyond the range of the result data type are discarded, and the bit positions vacated on the right are set to zero.  \n  \n To prevent a shift by more bits than the result can hold, Visual Basic masks the value of `amount` with a size mask that corresponds to the data type of `pattern`. The binary AND of these values is used for the shift amount. The size masks are as follows:  \n  \n|Data type of `pattern`|Size mask (decimal)|Size mask (hexadecimal)|  \n|----------------------------|---------------------------|-------------------------------|  \n|`SByte`, `Byte`|7|&H00000007|  \n|`Short`, `UShort`|15|&H0000000F|  \n|`Integer`, `UInteger`|31|&H0000001F|  \n|`Long`, `ULong`|63|&H0000003F|  \n  \n If `amount` is zero, the value of `result` is identical to the value of `pattern`. If `amount` is negative, it is taken as an unsigned value and masked with the appropriate size mask.  \n  \n Arithmetic shifts never generate overflow exceptions.  \n  \n> [!NOTE]\n>  The `<<` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure that you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `<<` operator to perform arithmetic left shifts on integral values. The result always has the same data type as that of the expression being shifted.  \n  \n [!code-vb[VbVbalrOperators#12](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/left-shift-operator_1.vb)]  \n  \n The results of the previous example are as follows:  \n  \n-   `result1` is 192 (0000 0000 1100 0000).  \n  \n-   `result2` is 3072 (0000 1100 0000 0000).  \n  \n-   `result3` is -32768 (1000 0000 0000 0000).  \n  \n-   `result4` is 384 (0000 0001 1000 0000).  \n  \n-   `result5` is 0 (shifted 15 places to the left).  \n  \n The shift amount for `result4` is calculated as 17 AND 15, which equals 1.  \n  \n## See Also  \n [Bit Shift Operators](../../../visual-basic/language-reference/operators/bit-shift-operators.md)   \n [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)   \n [<<= Operator](../../../visual-basic/language-reference/operators/left-shift-assignment-operator.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)","nodes":[{"pos":[4,673],"embed":true,"restype":"x-metadata","content":"title: \"&lt;&lt; Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.<<\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"bit shift operators\"\n  - \"<< operator [Visual Basic]\"\n  - \"operator <<, Visual Basic left shift operator\"\nms.assetid: fdb93d25-81ba-417f-b808-41207bfb8440\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"&lt;&lt; Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,49],"content":"&lt;&lt; Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph> Operator (Visual Basic) | Microsoft Docs","pos":[0,49],"source":"&lt;&lt; Operator (Visual Basic) | Microsoft Docs"}]}],"path":["title"]}],"yml":true},{"pos":[680,712],"content":"&lt;&lt; Operator (Visual Basic)","linkify":"&lt;&lt; Operator (Visual Basic)","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph> Operator (Visual Basic)","pos":[0,32],"source":"&lt;&lt; Operator (Visual Basic)"}]},{"content":"Performs an arithmetic left shift on a bit pattern.","pos":[713,764]},{"pos":[773,779],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[835,840],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[856,865]},{"content":"Integral numeric value.","pos":[866,889]},{"content":"The result of shifting the bit pattern.","pos":[890,929]},{"content":"The data type is the same as that of <ph id=\"ph1\">`pattern`</ph>.","pos":[930,977],"source":" The data type is the same as that of `pattern`."},{"content":"Required.","pos":[997,1006]},{"content":"Integral numeric expression.","pos":[1007,1035]},{"content":"The bit pattern to be shifted.","pos":[1036,1066]},{"content":"The data type must be an integral type (<ph id=\"ph1\">`SByte`</ph>, <ph id=\"ph2\">`Byte`</ph>, <ph id=\"ph3\">`Short`</ph>, <ph id=\"ph4\">`UShort`</ph>, <ph id=\"ph5\">`Integer`</ph>, <ph id=\"ph6\">`UInteger`</ph>, <ph id=\"ph7\">`Long`</ph>, or <ph id=\"ph8\">`ULong`</ph>).","pos":[1067,1186],"source":" The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)."},{"content":"Required.","pos":[1205,1214]},{"content":"Numeric expression.","pos":[1215,1234]},{"content":"The number of bits to shift the bit pattern.","pos":[1235,1279]},{"content":"The data type must be <ph id=\"ph1\">`Integer`</ph> or widen to <ph id=\"ph2\">`Integer`</ph>.","pos":[1280,1334],"source":" The data type must be `Integer` or widen to `Integer`."},{"pos":[1343,1350],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Arithmetic shifts are not circular, which means the bits shifted off one end of the result are not reintroduced at the other end.","pos":[1354,1483]},{"content":"In an arithmetic left shift, the bits shifted beyond the range of the result data type are discarded, and the bit positions vacated on the right are set to zero.","pos":[1484,1645]},{"content":"To prevent a shift by more bits than the result can hold, Visual Basic masks the value of <ph id=\"ph1\">`amount`</ph> with a size mask that corresponds to the data type of <ph id=\"ph2\">`pattern`</ph>.","pos":[1652,1815],"source":"To prevent a shift by more bits than the result can hold, Visual Basic masks the value of `amount` with a size mask that corresponds to the data type of `pattern`."},{"content":"The binary AND of these values is used for the shift amount.","pos":[1816,1876]},{"content":"The size masks are as follows:","pos":[1877,1907]},{"pos":[1914,1936],"content":"Data type of <ph id=\"ph1\">`pattern`</ph>","source":"Data type of `pattern`"},{"content":"Size mask (decimal)","pos":[1937,1956]},{"content":"Size mask (hexadecimal)","pos":[1957,1980]},{"pos":[2078,2093],"content":"<ph id=\"ph1\">`SByte`</ph>, <ph id=\"ph2\">`Byte`</ph>","source":"`SByte`, `Byte`"},{"content":"7","pos":[2094,2095]},{"content":"&amp;H00000007","pos":[2096,2106],"source":"&H00000007"},{"pos":[2111,2128],"content":"<ph id=\"ph1\">`Short`</ph>, <ph id=\"ph2\">`UShort`</ph>","source":"`Short`, `UShort`"},{"content":"15","pos":[2129,2131]},{"content":"&amp;H0000000F","pos":[2132,2142],"source":"&H0000000F"},{"pos":[2147,2168],"content":"<ph id=\"ph1\">`Integer`</ph>, <ph id=\"ph2\">`UInteger`</ph>","source":"`Integer`, `UInteger`"},{"content":"31","pos":[2169,2171]},{"content":"&amp;H0000001F","pos":[2172,2182],"source":"&H0000001F"},{"pos":[2187,2202],"content":"<ph id=\"ph1\">`Long`</ph>, <ph id=\"ph2\">`ULong`</ph>","source":"`Long`, `ULong`"},{"content":"63","pos":[2203,2205]},{"content":"&amp;H0000003F","pos":[2206,2216],"source":"&H0000003F"},{"content":"If <ph id=\"ph1\">`amount`</ph> is zero, the value of <ph id=\"ph2\">`result`</ph> is identical to the value of <ph id=\"ph3\">`pattern`</ph>.","pos":[2224,2306],"source":"If `amount` is zero, the value of `result` is identical to the value of `pattern`."},{"content":"If <ph id=\"ph1\">`amount`</ph> is negative, it is taken as an unsigned value and masked with the appropriate size mask.","pos":[2307,2407],"source":" If `amount` is negative, it is taken as an unsigned value and masked with the appropriate size mask."},{"content":"Arithmetic shifts never generate overflow exceptions.","pos":[2414,2467]},{"pos":[2475,2901],"content":"[!NOTE]\n The `<<` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure that you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":"The `<<` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure that you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[9,424],"nodes":[{"content":"The <ph id=\"ph1\">`&lt;&lt;`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[0,159],"source":"The `<<` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure that you understand its redefined behavior.","pos":[160,273]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[274,415],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[2910,2917],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`&lt;&lt;`</ph> operator to perform arithmetic left shifts on integral values.","pos":[2921,3019],"source":"The following example uses the `<<` operator to perform arithmetic left shifts on integral values."},{"content":"The result always has the same data type as that of the expression being shifted.","pos":[3020,3101]},{"content":"The results of the previous example are as follows:","pos":[3247,3298]},{"pos":[3308,3347],"content":"<ph id=\"ph1\">`result1`</ph> is 192 (0000 0000 1100 0000).","source":"`result1` is 192 (0000 0000 1100 0000)."},{"pos":[3357,3397],"content":"<ph id=\"ph1\">`result2`</ph> is 3072 (0000 1100 0000 0000).","source":"`result2` is 3072 (0000 1100 0000 0000)."},{"pos":[3407,3449],"content":"<ph id=\"ph1\">`result3`</ph> is -32768 (1000 0000 0000 0000).","source":"`result3` is -32768 (1000 0000 0000 0000)."},{"pos":[3459,3498],"content":"<ph id=\"ph1\">`result4`</ph> is 384 (0000 0001 1000 0000).","source":"`result4` is 384 (0000 0001 1000 0000)."},{"pos":[3508,3555],"content":"<ph id=\"ph1\">`result5`</ph> is 0 (shifted 15 places to the left).","source":"`result5` is 0 (shifted 15 places to the left)."},{"pos":[3562,3636],"content":"The shift amount for <ph id=\"ph1\">`result4`</ph> is calculated as 17 AND 15, which equals 1.","source":"The shift amount for `result4` is calculated as 17 AND 15, which equals 1."},{"pos":[3645,3653],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Bit Shift Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/bit-shift-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3657,3754],"source":"[Bit Shift Operators](../../../visual-basic/language-reference/operators/bit-shift-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3758,3857],"source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>&lt;&lt;= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/left-shift-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[3861,3962],"source":"[<<= Operator](../../../visual-basic/language-reference/operators/left-shift-assignment-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[3966,4079],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[4083,4208],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","pos":[4212,4359],"source":"[Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"}]}