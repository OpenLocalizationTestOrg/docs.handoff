{"content":"---\ntitle: \"OracleTypes\"\nms.date: \"03/30/2017\"\nms.assetid: 18143304-d5c7-4c95-9995-678088d0c142\n---\n# OracleTypes\nThe .NET Framework Data Provider for Oracle includes several structures you can use to work with Oracle data types. These include <xref:System.Data.OracleClient.OracleNumber> and <xref:System.Data.OracleClient.OracleString>.  \n  \n> [!NOTE]\n>  For a complete list of these structures, see <xref:System.Data.OracleClient>.  \n  \n The following C# examples:  \n  \n-   Create an Oracle table and load it with data.  \n  \n-   Use an <xref:System.Data.OracleClient.OracleDataReader> to access the data, and use several <xref:System.Data.OracleClient.OracleType> structures to display the data.  \n  \n## Creating an Oracle Table  \n This example creates an Oracle table and loads it with data. You must run this example before running the next example.  \n  \n```csharp  \npublic void Setup(string connectionString)  \n   {  \n   OracleConnection conn = new OracleConnection(connectionString);  \n   try  \n      {  \n      conn.Open();  \n      OracleCommand cmd = conn.CreateCommand();  \n      cmd.CommandText =\"CREATE TABLE OracleTypesTable \" +  \n        \"(MyVarchar2 varchar2(3000),MyNumber number(28,4) \" +  \n        \"PRIMARY KEY ,MyDate date, MyRaw raw(255))\";  \n      cmd.ExecuteNonQuery();  \n      cmd.CommandText =\"INSERT INTO OracleTypesTable VALUES \" +  \n        \"( 'test', 2, to_date('2000-01-11 12:54:01','yyyy-mm-dd \" +  \n        \"hh24:mi:ss'), '0001020304' )\";  \n      cmd.ExecuteNonQuery();  \n      }  \n   catch(Exception)  \n   {  \n   }  \n   finally  \n   {  \n      conn.Close();  \n   }  \n}  \n```  \n  \n## Retrieving Data from the Oracle Table  \n This example uses an **OracleDataReader** to access the data, and uses several **OracleType** structures to display the data.  \n  \n```csharp  \npublic void ReadOracleTypesExample(string connectionString)  \n   {  \n   OracleConnection myConnection =   \n      new OracleConnection(connectionString);  \n   myConnection.Open();  \n   OracleCommand myCommand = myConnection.CreateCommand();  \n  \n   try  \n      {  \n      myCommand.CommandText = \"SELECT * from OracleTypesTable\";  \n      OracleDataReader oracledatareader1 = myCommand.ExecuteReader();  \n      oracledatareader1.Read();  \n  \n      //Using the oracle specific getters for each type is faster than  \n      //using GetOracleValue.  \n  \n      //First column, MyVarchar2, is a VARCHAR2 data type in Oracle  \n      //Server and maps to OracleString.  \n      OracleString oraclestring1 =   \n        oracledatareader1.GetOracleString(0);  \n      Console.WriteLine(\"OracleString \" + oraclestring1.ToString());  \n  \n      //Second column, MyNumber, is a NUMBER data type in Oracle Server  \n      //and maps to OracleNumber.  \n      OracleNumber oraclenumber1 =   \n        oracledatareader1.GetOracleNumber(1);  \n      Console.WriteLine(\"OracleNumber \" + oraclenumber1.ToString());  \n  \n      //Third column, MyDate, is a DATA data type in Oracle Server  \n      //and maps to OracleDateTime.  \n      OracleDateTime oracledatetime1 =   \n        oracledatareader1.GetOracleDateTime(2);  \n      Console.WriteLine(\"OracleDateTime \" + oracledatetime1.ToString());  \n  \n      //Fourth column, MyRaw, is a RAW data type in Oracle Server and  \n      //maps to OracleBinary.  \n      OracleBinary oraclebinary1 =   \n        oracledatareader1.GetOracleBinary(3);  \n      //Calling value on a null OracleBinary throws  \n      //OracleNullValueException; therefore, check for a null value.  \n      if (oraclebinary1.IsNull==false)  \n      {  \n         foreach(byte b in oraclebinary1.Value)  \n         {  \n            Console.WriteLine(\"byte \" + b.ToString());  \n         }  \n      }  \n      oracledatareader1.Close();  \n   }  \n   catch(Exception e)  \n   {  \n       Console.WriteLine(e.ToString());  \n   }  \n   finally  \n   {  \n       myConnection.Close();  \n   }  \n}  \n```  \n  \n## See also\n\n- [Oracle and ADO.NET](../../../../docs/framework/data/adonet/oracle-and-adonet.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,95],"embed":true,"restype":"x-metadata","content":"title: \"OracleTypes\"\nms.date: \"03/30/2017\"\nms.assetid: 18143304-d5c7-4c95-9995-678088d0c142","nodes":[{"content":"OracleTypes","nodes":[{"pos":[0,11],"content":"OracleTypes","nodes":[{"content":"OracleTypes","pos":[0,11]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[102,113],"content":"OracleTypes","linkify":"OracleTypes","nodes":[{"content":"OracleTypes","pos":[0,11]}]},{"content":"The .NET Framework Data Provider for Oracle includes several structures you can use to work with Oracle data types.","pos":[114,229]},{"content":"These include <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleNumber&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleString&gt;</ph>.","pos":[230,338],"source":" These include <xref:System.Data.OracleClient.OracleNumber> and <xref:System.Data.OracleClient.OracleString>."},{"pos":[346,434],"content":"[!NOTE]\n For a complete list of these structures, see <xref:System.Data.OracleClient>.","leadings":["","> "],"nodes":[{"content":"For a complete list of these structures, see <ph id=\"ph1\">&lt;xref:System.Data.OracleClient&gt;</ph>.","pos":[9,86],"source":"For a complete list of these structures, see <xref:System.Data.OracleClient>."}]},{"content":"The following C# examples:","pos":[441,467]},{"content":"Create an Oracle table and load it with data.","pos":[477,522]},{"pos":[532,698],"content":"Use an <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> to access the data, and use several <ph id=\"ph2\">&lt;xref:System.Data.OracleClient.OracleType&gt;</ph> structures to display the data.","source":"Use an <xref:System.Data.OracleClient.OracleDataReader> to access the data, and use several <xref:System.Data.OracleClient.OracleType> structures to display the data."},{"pos":[707,731],"content":"Creating an Oracle Table","linkify":"Creating an Oracle Table","nodes":[{"content":"Creating an Oracle Table","pos":[0,24]}]},{"content":"This example creates an Oracle table and loads it with data.","pos":[735,795]},{"content":"You must run this example before running the next example.","pos":[796,854]},{"pos":[1613,1650],"content":"Retrieving Data from the Oracle Table","linkify":"Retrieving Data from the Oracle Table","nodes":[{"content":"Retrieving Data from the Oracle Table","pos":[0,37]}]},{"pos":[1654,1779],"content":"This example uses an <bpt id=\"p1\">**</bpt>OracleDataReader<ept id=\"p1\">**</ept> to access the data, and uses several <bpt id=\"p2\">**</bpt>OracleType<ept id=\"p2\">**</ept> structures to display the data.","source":"This example uses an **OracleDataReader** to access the data, and uses several **OracleType** structures to display the data."},{"pos":[3869,3877],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3881,3962],"content":"<bpt id=\"p1\">[</bpt>Oracle and ADO.NET<ept id=\"p1\">](../../../../docs/framework/data/adonet/oracle-and-adonet.md)</ept>","source":"[Oracle and ADO.NET](../../../../docs/framework/data/adonet/oracle-and-adonet.md)"},{"pos":[3965,4069],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}