<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="statements.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75f6c7bb29af7f9c809c5278c97d21683166a8e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tour-of-csharp\statements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fa85c0ff284afdd3246fb025fe93c4076de1902</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed6076593d16509a0b17cff207d225c08019d4f7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>C# Statements - A tour of the C# language</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>You create the actions of a C# program using statements</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Statements</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The actions of a program are expressed using <bpt id="p1">*</bpt>statements<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>C# supports several different kinds of statements, a number of which are defined in terms of embedded statements.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>block<ept id="p1">*</ept> permits multiple statements to be written in contexts where a single statement is allowed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A block consists of a list of statements written between the delimiters <ph id="ph1">`{`</ph> and <ph id="ph2">`}`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Declaration statements<ept id="p1">*</ept> are used to declare local variables and constants.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Expression statements<ept id="p1">*</ept> are used to evaluate expressions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Expressions that can be used as statements include method invocations, object allocations using the <ph id="ph1">`new`</ph> operator, assignments using <ph id="ph2">`=`</ph> and the compound assignment operators, increment and decrement operations using the <ph id="ph3">`++`</ph> and <ph id="ph4">`--`</ph> operators and <ph id="ph5">`await`</ph> expressions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Selection statements<ept id="p1">*</ept> are used to select one of a number of possible statements for execution based on the value of some expression.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this group are the <ph id="ph1">`if`</ph> and <ph id="ph2">`switch`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Iteration statements<ept id="p1">*</ept> are used to execute repeatedly an embedded statement.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this group are the <ph id="ph1">`while`</ph>, <ph id="ph2">`do`</ph>, <ph id="ph3">`for`</ph>, and <ph id="ph4">`foreach`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Jump statements<ept id="p1">*</ept> are used to transfer control.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this group are the <ph id="ph1">`break`</ph>, <ph id="ph2">`continue`</ph>, <ph id="ph3">`goto`</ph>, <ph id="ph4">`throw`</ph>, <ph id="ph5">`return`</ph>, and <ph id="ph6">`yield`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`try`</ph>...<ph id="ph2">`catch`</ph> statement is used to catch exceptions that occur during execution of a block, and the <ph id="ph3">`try`</ph>...<ph id="ph4">`finally`</ph> statement is used to specify finalization code that is always executed, whether an exception occurred or not.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`checked`</ph> and <ph id="ph2">`unchecked`</ph> statements are used to control the overflow-checking context for integral-type arithmetic operations and conversions.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock`</ph> statement is used to obtain the mutual-exclusion lock for a given object, execute a statement, and then release the lock.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`using`</ph> statement is used to obtain a resource, execute a statement, and then dispose of that resource.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following lists the kinds of statements that can be used, and provides an example for each.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Local variable declaration:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Local constant declaration:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Expression statement:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`if`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`switch`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`while`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`do`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`for`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`foreach`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`break`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`continue`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`goto`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`return`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`yield`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`throw`</ph> statements and <ph id="ph2">`try`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`checked`</ph> and <ph id="ph2">`unchecked`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`lock`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`using`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous<ept id="p1">](expressions.md)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Next<ept id="p2">](classes-and-objects.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>