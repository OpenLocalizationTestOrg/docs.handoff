{"content":"---\ntitle: \"How to: Bind to XDocument, XElement, or LINQ for XML Query Results | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"data binding [WPF], binding to XDocument\"\n  - \"data binding [WPF], binding to XElement\"\nms.assetid: 6a629a49-fe1c-465d-b76a-3dcbf4307b64\ncaps.latest.revision: 21\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Bind to XDocument, XElement, or LINQ for XML Query Results\nThis example demonstrates how to bind XML data to an <xref:System.Windows.Controls.ItemsControl> using <xref:System.Xml.Linq.XDocument>.  \n  \n## Example  \n The following XAML code defines an <xref:System.Windows.Controls.ItemsControl> and includes a data template for data of type `Planet` in the `http://planetsNS` XML namespace. An XML data type that occupies a namespace must include the namespace in braces, and if it appears where a XAML markup extension could appear, it must precede the namespace with a brace escape sequence. This code binds to dynamic properties that correspond to the <xref:System.Xml.Linq.XContainer.Element%2A> and <xref:System.Xml.Linq.XElement.Attribute%2A> methods of the <xref:System.Xml.Linq.XElement> class. Dynamic properties enable XAML to bind to dynamic properties that share the names of methods. To learn more, see [LINQ to XML Dynamic Properties](/visualstudio/designers/linq-to-xml-dynamic-properties). Notice how the default namespace declaration for the XML does not apply to attribute names.  \n  \n [!code-xml[XLinqExample#StackPanelResources](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml#stackpanelresources)]  \n[!code-xml[XLinqExample#ItemsControl](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml#itemscontrol)]  \n  \n The following C# code calls <xref:System.Xml.Linq.XDocument.Load%2A> and sets the stack panel data context to all subelements of the element named `SolarSystemPlanets` in the `http://planetsNS` XML namespace.  \n  \n [!code-csharp[XLinqExample#LoadDCFromFile](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml.cs#loaddcfromfile)]\n [!code-vb[XLinqExample#LoadDCFromFile](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/XLinqExample/visualbasic/window1.xaml.vb#loaddcfromfile)]  \n  \n XML data can be stored as a XAML resource using <xref:System.Windows.Data.ObjectDataProvider>. For a complete example, see  [L2DBForm.xaml Source Code](http://msdn.microsoft.com/library/624e96d4-6d27-4195-8ac2-2f3835f6c57e). The following sample shows how code can set the data context to an object resource.  \n  \n [!code-csharp[XLinqExample#LoadDCFromXAML](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml.cs#loaddcfromxaml)]\n [!code-vb[XLinqExample#LoadDCFromXAML](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/XLinqExample/visualbasic/window1.xaml.vb#loaddcfromxaml)]  \n  \n The dynamic properties that map to <xref:System.Xml.Linq.XContainer.Element%2A> and <xref:System.Xml.Linq.XElement.Attribute%2A> provide flexibility within XAML. Your code can also bind to the results of a LINQ for XML query. This example binds to query results ordered by an element value.  \n  \n [!code-csharp[XLinqExample#BindToResults](../../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml.cs#bindtoresults)]\n [!code-vb[XLinqExample#BindToResults](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/XLinqExample/visualbasic/window1.xaml.vb#bindtoresults)]  \n  \n## See Also  \n [Binding Sources Overview](../../../../docs/framework/wpf/data/binding-sources-overview.md)   \n [WPF Data Binding with LINQ to XML Overview](/visualstudio/designers/wpf-data-binding-with-linq-to-xml-overview)   \n [WPF Data Binding Using LINQ to XML Example](/visualstudio/designers/wpf-data-binding-using-linq-to-xml-example)   \n [LINQ to XML Dynamic Properties](/visualstudio/designers/linq-to-xml-dynamic-properties)","nodes":[{"pos":[4,511],"embed":true,"restype":"x-metadata","content":"title: \"How to: Bind to XDocument, XElement, or LINQ for XML Query Results | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"data binding [WPF], binding to XDocument\"\n  - \"data binding [WPF], binding to XElement\"\nms.assetid: 6a629a49-fe1c-465d-b76a-3dcbf4307b64\ncaps.latest.revision: 21\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"How to: Bind to XDocument, XElement, or LINQ for XML Query Results | Microsoft Docs","nodes":[{"pos":[0,83],"content":"How to: Bind to XDocument, XElement, or LINQ for XML Query Results | Microsoft Docs","nodes":[{"content":"How to: Bind to XDocument, XElement, or LINQ for XML Query Results | Microsoft Docs","pos":[0,83]}]}],"path":["title"]}],"yml":true},{"pos":[518,584],"content":"How to: Bind to XDocument, XElement, or LINQ for XML Query Results","linkify":"How to: Bind to XDocument, XElement, or LINQ for XML Query Results","nodes":[{"content":"How to: Bind to XDocument, XElement, or LINQ for XML Query Results","pos":[0,66]}]},{"content":"This example demonstrates how to bind XML data to an <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> using <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.","pos":[585,721],"source":"This example demonstrates how to bind XML data to an <xref:System.Windows.Controls.ItemsControl> using <xref:System.Xml.Linq.XDocument>."},{"pos":[730,737],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following XAML code defines an <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> and includes a data template for data of type <ph id=\"ph2\">`Planet`</ph> in the <ph id=\"ph3\">`http://planetsNS`</ph> XML namespace.","pos":[741,915],"source":"The following XAML code defines an <xref:System.Windows.Controls.ItemsControl> and includes a data template for data of type `Planet` in the `http://planetsNS` XML namespace."},{"content":"An XML data type that occupies a namespace must include the namespace in braces, and if it appears where a XAML markup extension could appear, it must precede the namespace with a brace escape sequence.","pos":[916,1118]},{"content":"This code binds to dynamic properties that correspond to the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Element%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;</ph> methods of the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class.","pos":[1119,1327],"source":" This code binds to dynamic properties that correspond to the <xref:System.Xml.Linq.XContainer.Element%2A> and <xref:System.Xml.Linq.XElement.Attribute%2A> methods of the <xref:System.Xml.Linq.XElement> class."},{"content":"Dynamic properties enable XAML to bind to dynamic properties that share the names of methods.","pos":[1328,1421]},{"content":"To learn more, see <bpt id=\"p1\">[</bpt>LINQ to XML Dynamic Properties<ept id=\"p1\">](/visualstudio/designers/linq-to-xml-dynamic-properties)</ept>.","pos":[1422,1530],"source":" To learn more, see [LINQ to XML Dynamic Properties](/visualstudio/designers/linq-to-xml-dynamic-properties)."},{"content":"Notice how the default namespace declaration for the XML does not apply to attribute names.","pos":[1531,1622]},{"pos":[1927,2135],"content":"The following C# code calls <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> and sets the stack panel data context to all subelements of the element named <ph id=\"ph2\">`SolarSystemPlanets`</ph> in the <ph id=\"ph3\">`http://planetsNS`</ph> XML namespace.","source":"The following C# code calls <xref:System.Xml.Linq.XDocument.Load%2A> and sets the stack panel data context to all subelements of the element named `SolarSystemPlanets` in the `http://planetsNS` XML namespace."},{"content":"XML data can be stored as a XAML resource using <ph id=\"ph1\">&lt;xref:System.Windows.Data.ObjectDataProvider&gt;</ph>.","pos":[2451,2545],"source":"XML data can be stored as a XAML resource using <xref:System.Windows.Data.ObjectDataProvider>."},{"content":"For a complete example, see  <bpt id=\"p1\">[</bpt>L2DBForm.xaml Source Code<ept id=\"p1\">](http://msdn.microsoft.com/library/624e96d4-6d27-4195-8ac2-2f3835f6c57e)</ept>.","pos":[2546,2675],"source":" For a complete example, see  [L2DBForm.xaml Source Code](http://msdn.microsoft.com/library/624e96d4-6d27-4195-8ac2-2f3835f6c57e)."},{"content":"The following sample shows how code can set the data context to an object resource.","pos":[2676,2759]},{"content":"The dynamic properties that map to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Element%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;</ph> provide flexibility within XAML.","pos":[3075,3236],"source":"The dynamic properties that map to <xref:System.Xml.Linq.XContainer.Element%2A> and <xref:System.Xml.Linq.XElement.Attribute%2A> provide flexibility within XAML."},{"content":"Your code can also bind to the results of a LINQ for XML query.","pos":[3237,3300]},{"content":"This example binds to query results ordered by an element value.","pos":[3301,3365]},{"pos":[3679,3687],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Binding Sources Overview<ept id=\"p1\">](../../../../docs/framework/wpf/data/binding-sources-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[3691,3783],"source":"[Binding Sources Overview](../../../../docs/framework/wpf/data/binding-sources-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>WPF Data Binding with LINQ to XML Overview<ept id=\"p1\">](/visualstudio/designers/wpf-data-binding-with-linq-to-xml-overview)</ept><ph id=\"ph1\"> </ph>","pos":[3787,3900],"source":"[WPF Data Binding with LINQ to XML Overview](/visualstudio/designers/wpf-data-binding-with-linq-to-xml-overview) "},{"content":"<bpt id=\"p1\">[</bpt>WPF Data Binding Using LINQ to XML Example<ept id=\"p1\">](/visualstudio/designers/wpf-data-binding-using-linq-to-xml-example)</ept><ph id=\"ph1\"> </ph>","pos":[3904,4017],"source":"[WPF Data Binding Using LINQ to XML Example](/visualstudio/designers/wpf-data-binding-using-linq-to-xml-example) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ to XML Dynamic Properties<ept id=\"p1\">](/visualstudio/designers/linq-to-xml-dynamic-properties)</ept>","pos":[4021,4109],"source":"[LINQ to XML Dynamic Properties](/visualstudio/designers/linq-to-xml-dynamic-properties)"}]}