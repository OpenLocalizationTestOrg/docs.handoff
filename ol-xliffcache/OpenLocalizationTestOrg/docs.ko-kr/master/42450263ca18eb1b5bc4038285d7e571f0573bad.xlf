<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42450263ca18eb1b5bc4038285d7e571f0573bad</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\how-to-transform-the-shape-of-an-xml-tree.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd6596532fa456fbc8ab496f5a697b3ef7c93de9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">778ade5b8c304dffe8de9455c4b88bc126d24a52</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Transform the Shape of an XML Tree (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Transform the Shape of an XML Tree (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>shape<ept id="p1">*</ept> of an XML document refers to its element names, attribute names, and the characteristics of its hierarchy.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sometimes you will have to change the shape of an XML document.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, you might have to send an existing XML document to another system that requires different element and attribute names.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You could go through the document, deleting and renaming elements as required, but using functional construction results in more readable and maintainable code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about functional construction, see <bpt id="p1">[</bpt>Functional Construction (LINQ to XML) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The first example changes the organization of the XML document.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It moves complex elements from one location in the tree to another.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The second example in this topic creates an XML document with a different shape than the source document.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It changes the casing of the element names, renames some elements, and leaves some elements from the source tree out of the transformed tree.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code changes the shape of an XML file using embedded query expressions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The source XML document in this example contains a <ph id="ph1">`Customers`</ph> element under the <ph id="ph2">`Root`</ph> element that contains all customers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It also contains an <ph id="ph1">`Orders`</ph> element under the <ph id="ph2">`Root`</ph> element that contains all orders.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example creates a new XML tree in which the orders for each customer are contained in an <ph id="ph1">`Orders`</ph> element within the <ph id="ph2">`Customer`</ph> element.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The original document also contains a <ph id="ph1">`CustomerID`</ph> element in the <ph id="ph2">`Order`</ph> element; this element will be removed from the re-shaped document.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This example renames some elements and converts some attributes to elements.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code calls <ph id="ph1">`ConvertAddress`</ph>, which returns a list of <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The argument to the method is a query that determines the <ph id="ph1">`Address`</ph> complex element where the <ph id="ph2">`Type`</ph> attribute has a value of <ph id="ph3">`"Shipping"`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Projections and Transformations (LINQ to XML) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>