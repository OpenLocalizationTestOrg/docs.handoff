{"content":"---\ntitle: \"Boolean Data Types\"\nms.date: \"03/30/2017\"\nms.assetid: 57f7376b-4b11-4b35-98a9-780382053ceb\n---\n# Boolean Data Types\nBoolean operators work as expected in the common language runtime (CLR), except that short-circuiting behavior is not translated. For example, the Visual Basic `AndAlso` operator behaves like the `And` operator. The C# `&&` operator behaves like the `&` operator.  \n  \n [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] supports the following operators.  \n  \n|Visual Basic|C#|  \n|------------------|---------|  \n|[And Operator](~/docs/visual-basic/language-reference/operators/and-operator.md)|[& Operator](~/docs/csharp/language-reference/operators/and-operator.md)|  \n|[AndAlso Operator](~/docs/visual-basic/language-reference/operators/andalso-operator.md)|[&& Operator](~/docs/csharp/language-reference/operators/conditional-and-operator.md)|  \n|[Or Operator](~/docs/visual-basic/language-reference/operators/or-operator.md)|[&#124; Operator](~/docs/csharp/language-reference/operators/or-operator.md)|  \n|[OrElse Operator](~/docs/visual-basic/language-reference/operators/orelse-operator.md)|[&#124;&#124; Operator](~/docs/csharp/language-reference/operators/conditional-or-operator.md)|  \n|[Xor Operator](~/docs/visual-basic/language-reference/operators/xor-operator.md)|[^ Operator](~/docs/csharp/language-reference/operators/xor-operator.md)|  \n|[Not Operator](~/docs/visual-basic/language-reference/operators/not-operator.md)|[\\! Operator](~/docs/csharp/language-reference/operators/logical-negation-operator.md)|  \n  \n## See also\n\n- [Data Types and Functions](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)\n","nodes":[{"pos":[4,102],"embed":true,"restype":"x-metadata","content":"title: \"Boolean Data Types\"\nms.date: \"03/30/2017\"\nms.assetid: 57f7376b-4b11-4b35-98a9-780382053ceb","nodes":[{"content":"Boolean Data Types","nodes":[{"pos":[0,18],"content":"Boolean Data Types","nodes":[{"content":"Boolean Data Types","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[109,127],"content":"Boolean Data Types","linkify":"Boolean Data Types","nodes":[{"content":"Boolean Data Types","pos":[0,18]}]},{"content":"Boolean operators work as expected in the common language runtime (CLR), except that short-circuiting behavior is not translated.","pos":[128,257]},{"content":"For example, the Visual Basic <ph id=\"ph1\">`AndAlso`</ph> operator behaves like the <ph id=\"ph2\">`And`</ph> operator.","pos":[258,339],"source":" For example, the Visual Basic `AndAlso` operator behaves like the `And` operator."},{"content":"The C# <ph id=\"ph1\">`&amp;&amp;`</ph> operator behaves like the <ph id=\"ph2\">`&amp;`</ph> operator.","pos":[340,391],"source":" The C# `&&` operator behaves like the `&` operator."},{"pos":[398,499],"content":"<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> supports the following operators.","source":"[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] supports the following operators."},{"content":"Visual Basic","pos":[506,518]},{"content":"C#","pos":[519,521]},{"pos":[559,639],"content":"<bpt id=\"p1\">[</bpt>And Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/and-operator.md)</ept>","source":"[And Operator](~/docs/visual-basic/language-reference/operators/and-operator.md)"},{"pos":[640,712],"content":"<bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/and-operator.md)</ept>","source":"[& Operator](~/docs/csharp/language-reference/operators/and-operator.md)"},{"pos":[717,805],"content":"<bpt id=\"p1\">[</bpt>AndAlso Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/andalso-operator.md)</ept>","source":"[AndAlso Operator](~/docs/visual-basic/language-reference/operators/andalso-operator.md)"},{"pos":[806,891],"content":"<bpt id=\"p1\">[</bpt>&amp;&amp; Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/conditional-and-operator.md)</ept>","source":"[&& Operator](~/docs/csharp/language-reference/operators/conditional-and-operator.md)"},{"pos":[896,974],"content":"<bpt id=\"p1\">[</bpt>Or Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/or-operator.md)</ept>","source":"[Or Operator](~/docs/visual-basic/language-reference/operators/or-operator.md)"},{"pos":[975,1051],"content":"<bpt id=\"p1\">[</bpt>&amp;#124; Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/or-operator.md)</ept>","source":"[&#124; Operator](~/docs/csharp/language-reference/operators/or-operator.md)"},{"pos":[1056,1142],"content":"<bpt id=\"p1\">[</bpt>OrElse Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/orelse-operator.md)</ept>","source":"[OrElse Operator](~/docs/visual-basic/language-reference/operators/orelse-operator.md)"},{"pos":[1143,1237],"content":"<bpt id=\"p1\">[</bpt>&amp;#124;&amp;#124; Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/conditional-or-operator.md)</ept>","source":"[&#124;&#124; Operator](~/docs/csharp/language-reference/operators/conditional-or-operator.md)"},{"pos":[1242,1322],"content":"<bpt id=\"p1\">[</bpt>Xor Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/xor-operator.md)</ept>","source":"[Xor Operator](~/docs/visual-basic/language-reference/operators/xor-operator.md)"},{"pos":[1323,1395],"content":"<bpt id=\"p1\">[</bpt>^ Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/xor-operator.md)</ept>","source":"[^ Operator](~/docs/csharp/language-reference/operators/xor-operator.md)"},{"pos":[1400,1480],"content":"<bpt id=\"p1\">[</bpt>Not Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/not-operator.md)</ept>","source":"[Not Operator](~/docs/visual-basic/language-reference/operators/not-operator.md)"},{"pos":[1481,1567],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\!</ph> Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/logical-negation-operator.md)</ept>","source":"[\\! Operator](~/docs/csharp/language-reference/operators/logical-negation-operator.md)"},{"pos":[1577,1585],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1589,1698],"content":"<bpt id=\"p1\">[</bpt>Data Types and Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)</ept>","source":"[Data Types and Functions](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)"}]}