{"content":"---\ntitle: \"How Entity SQL Differs from Transact-SQL\"\nms.date: \"03/30/2017\"\nms.assetid: 9c9ee36d-f294-4c8b-a196-f0114c94f559\n---\n# How Entity SQL Differs from Transact-SQL\nThis topic describes the differences between [!INCLUDE[esql](../../../../../../includes/esql-md.md)] and [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)].  \n  \n## Inheritance and Relationships Support  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] works directly with conceptual entity schemas and supports conceptual model features such as inheritance and relationships.  \n  \n When working with inheritance, it is often useful to select instances of a subtype from a collection of supertype instances. The [oftype](../../../../../../docs/framework/data/adonet/ef/language-reference/oftype-entity-sql.md) operator in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] (similar to `oftype` in C# Sequences) provides this capability.  \n  \n## Support for Collections  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] treats collections as first-class entities. For example:  \n  \n-   Collection expressions are valid in a `from` clause.  \n  \n-   `in` and `exists` subqueries have been generalized to allow any collections.  \n  \n     A subquery is one kind of collection. `e1 in e2` and `exists(e)` are the [!INCLUDE[esql](../../../../../../includes/esql-md.md)] constructs to perform these operations.  \n  \n-   Set operations, such as `union`, `intersect`, and `except`, now operate on collections.  \n  \n-   Joins operate on collections.  \n  \n## Support for Expressions  \n [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] has subqueries (tables) and expressions (rows and columns).  \n  \n To support collections and nested collections, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] makes everything an expression. [!INCLUDE[esql](../../../../../../includes/esql-md.md)] is more composable than [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]â€”every expression can be used anywhere. Query expressions always result in collections of the projected types and can be used anywhere a collection expression is allowed. For information about [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] expressions that are not supported in [!INCLUDE[esql](../../../../../../includes/esql-md.md)], see [Unsupported Expressions](../../../../../../docs/framework/data/adonet/ef/language-reference/unsupported-expressions-entity-sql.md).  \n  \n The following are all valid [!INCLUDE[esql](../../../../../../includes/esql-md.md)] queries:  \n  \n```  \n1+2 *3  \n\"abc\"  \nrow(1 as a, 2 as b)  \n{ 1, 3, 5}   \ne1 union all e2  \nset(e1)  \n```  \n  \n## Uniform Treatment of Subqueries  \n Given its emphasis on tables, [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] performs contextual interpretation of subqueries. For example, a subquery in the `from` clause is considered to be a multiset (table). But the same subquery used in the `select` clause is considered to be a scalar subquery. Similarly, a subquery used on the left side of an `in` operator is considered to be a scalar subquery, while the right side is expected to be a multiset subquery.  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] eliminates these differences. An expression has a uniform interpretation that does not depend on the context in which it is used. [!INCLUDE[esql](../../../../../../includes/esql-md.md)] considers all subqueries to be multiset subqueries. If a scalar value is desired from the subquery, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides the `anyelement` operator that operates on a collection (in this case, the subquery), and extracts a singleton value from the collection.  \n  \n### Avoiding Implicit Coercions for Subqueries  \n A related side effect of uniform treatment of subqueries is implicit conversion of subqueries to scalar values. Specifically, in [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)], a multiset of rows (with a single field) is implicitly converted into a scalar value whose data type is that of the field.  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support this implicit coercion. [!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides the ANYELEMENT operator to extract a singleton value from a collection, and a `select value` clause to avoid creating a row-wrapper during a query expression.  \n  \n## Select Value: Avoiding the Implicit Row Wrapper  \n The select clause in a [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] subquery implicitly creates a row wrapper around the items in the clause. This implies that we cannot create collections of scalars or objects. [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] allows an implicit coercion between a rowtype with one field, and a singleton value of the same data type.  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides the `select value` clause to skip the implicit row construction. Only one item may be specified in a `select value` clause. When such a clause is used, no row wrapper is constructed around the items in the `select` clause, and a collection of the desired shape may be produced, for example: `select value a`.  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] also provides the row constructor to construct arbitrary rows. `select` takes one or more elements in the projection and results in a data record with fields, as follows:  \n  \n `select a, b, c`  \n  \n## Left Correlation and Aliasing  \n In [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)], expressions in a given scope (a single clause like `select` or `from`) cannot reference expressions defined earlier in the same scope. Some dialects of SQL (including [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]) do support limited forms of these in the `from` clause.  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] generalizes left correlations in the `from` clause, and treats them uniformly. Expressions in the `from` clause can reference earlier definitions (definitions to the left) in the same clause without the need for additional syntax.  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] also imposes additional restrictions on queries involving `group by` clauses. Expressions in the `select` clause and `having` clause of such queries may only refer to the `group by` keys via their aliases. The following construct is valid in [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] but are not in [!INCLUDE[esql](../../../../../../includes/esql-md.md)]:  \n  \n```  \nselect t.x + t.y from T as t group by t.x + t.y  \n```  \n  \n To do this in [!INCLUDE[esql](../../../../../../includes/esql-md.md)]:  \n  \n```  \nselect k from T as t group by (t.x + t.y) as k  \n```  \n  \n## Referencing Columns (Properties) of Tables (Collections)  \n All column references in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] must be qualified with the table alias. The following construct (assuming that `a` is a valid column of table `T`) is valid in [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] but not in [!INCLUDE[esql](../../../../../../includes/esql-md.md)].  \n  \n```  \nselect a from T  \n```  \n  \n The [!INCLUDE[esql](../../../../../../includes/esql-md.md)] form is  \n  \n```  \nselect t.a as A from T as t  \n```  \n  \n The table aliases are optional in the `from` clause. The name of the table is used as the implicit alias. [!INCLUDE[esql](../../../../../../includes/esql-md.md)] allows the following form as well:  \n  \n```  \nselect Tab.a from Tab  \n```  \n  \n## Navigation Through Objects  \n [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] uses the \".\" notation for referencing columns of (a row of) a table. [!INCLUDE[esql](../../../../../../includes/esql-md.md)] extends this notation (borrowed from programming languages) to support navigation through properties of an object.  \n  \n For example, if `p` is an expression of type Person, the following is the [!INCLUDE[esql](../../../../../../includes/esql-md.md)] syntax for referencing the city of the address of this person.  \n  \n```  \np.Address.City   \n```  \n  \n## No Support for *  \n [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] supports the unqualified * syntax as an alias for the entire row, and the qualified \\* syntax (t.\\*) as a shortcut for the fields of that table. In addition, [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] allows for a special count(\\*) aggregate, which includes nulls.  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support the * construct. [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] queries of the form `select * from T` and `select T1.* from T1, T2...` can be expressed in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] as `select value t from T as t` and `select value t1 from T1 as t1, T2 as t2...`, respectively. Additionally, these constructs handle inheritance (value substitutability), while the `select *` variants are restricted to top-level properties of the declared type.  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support the `count(*)` aggregate. Use `count(0)` instead.  \n  \n## Changes to Group By  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports aliasing of `group by` keys. Expressions in the `select` clause and `having` clause must refer to the `group by` keys via these aliases. For example, this [!INCLUDE[esql](../../../../../../includes/esql-md.md)] syntax:  \n  \n```  \nselect k1, count(t.a), sum(t.a)  \nfrom T as t  \ngroup by t.b + t.c as k1  \n```  \n  \n ...is equivalent to the following [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]:  \n  \n```  \nselect b + c, count(*), sum(a)   \nfrom T  \ngroup by b + c  \n```  \n  \n## Collection-Based Aggregates  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports two kinds of aggregates.  \n  \n Collection-based aggregates operate on collections and produce the aggregated result. These can appear anywhere in the query, and do not require a `group by` clause. For example:  \n  \n```  \nselect t.a as a, count({1,2,3}) as b from T as t     \n```  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] also supports SQL-style aggregates. For example:  \n  \n```  \nselect a, sum(t.b) from T as t group by t.a as a  \n```  \n  \n## ORDER BY Clause Usage  \n [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] allows ORDER BY clauses to be specified only in the topmost SELECT .. FROM .. WHERE block. In [!INCLUDE[esql](../../../../../../includes/esql-md.md)] you can use a nested ORDER BY expression and it can be placed anywhere in the query, but ordering in a nested query is not preserved.  \n  \n```  \n-- The following query will order the results by the last name  \nSELECT C1.FirstName, C1.LastName  \n        FROM AdventureWorks.Contact as C1  \n        ORDER BY C1.LastName  \n```  \n  \n```  \n-- In the following query ordering of the nested query is ignored.  \nSELECT C2.FirstName, C2.LastName  \n    FROM (SELECT C1.FirstName, C1.LastName  \n        FROM AdventureWorks.Contact as C1  \n        ORDER BY C1.LastName) as C2  \n```  \n  \n## Identifiers  \n In [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)], identifier comparison is based on the collation of the current database. In [!INCLUDE[esql](../../../../../../includes/esql-md.md)], identifiers are always case insensitive and accent sensitive (that is, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] distinguishes between accented and unaccented characters; for example, 'a' is not equal to 'áº¥'). [!INCLUDE[esql](../../../../../../includes/esql-md.md)] treats versions of letters that appear the same but are from different code pages as different characters. For more information, see [Input Character Set](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md).  \n  \n## Transact-SQL Functionality Not Available in Entity SQL  \n The following [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] functionality is not available in [!INCLUDE[esql](../../../../../../includes/esql-md.md)].  \n  \n DML  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] currently provides no support for DML statements (insert, update, delete).  \n  \n DDL  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides no support for DDL in the current version.  \n  \n Imperative Programming  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides no support for imperative programming, unlike [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]. Use a programming language instead.  \n  \n Grouping Functions  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not yet provide support for grouping functions (for example, CUBE, ROLLUP, and GROUPING_SET).  \n  \n Analytic Functions  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not (yet) provide support for analytic functions.  \n  \n Built-in Functions, Operators  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports a subset of [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]'s built in functions and operators. These operators and functions are likely to be supported by the major store providers. [!INCLUDE[esql](../../../../../../includes/esql-md.md)] uses the store-specific functions declared in a provider manifest. Additionally, the [!INCLUDE[adonet_ef](../../../../../../includes/adonet-ef-md.md)] allows you to declare built-in and user-defined existing store functions, for [!INCLUDE[esql](../../../../../../includes/esql-md.md)] to use.  \n  \n Hints  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not provide mechanisms for query hints.  \n  \n Batching Query Results  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support batching query results. For example, the following is valid [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] (sending as a batch):  \n  \n```  \nselect * from products;  \nselect * from catagories;  \n```  \n  \n However, the equivalent [!INCLUDE[esql](../../../../../../includes/esql-md.md)] is not supported:  \n  \n```  \nSelect value p from Products as p;  \nSelect value c from Categories as c;  \n```  \n  \n [!INCLUDE[esql](../../../../../../includes/esql-md.md)] only supports one result-producing query statement per command.  \n  \n## See also\n\n- [Entity SQL Overview](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md)\n- [Unsupported Expressions](../../../../../../docs/framework/data/adonet/ef/language-reference/unsupported-expressions-entity-sql.md)\n","nodes":[{"pos":[4,124],"embed":true,"restype":"x-metadata","content":"title: \"How Entity SQL Differs from Transact-SQL\"\nms.date: \"03/30/2017\"\nms.assetid: 9c9ee36d-f294-4c8b-a196-f0114c94f559","nodes":[{"content":"How Entity SQL Differs from Transact-SQL","nodes":[{"pos":[0,40],"content":"How Entity SQL Differs from Transact-SQL","nodes":[{"content":"How Entity SQL Differs from Transact-SQL","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[131,171],"content":"How Entity SQL Differs from Transact-SQL","linkify":"How Entity SQL Differs from Transact-SQL","nodes":[{"content":"How Entity SQL Differs from Transact-SQL","pos":[0,40]}]},{"pos":[172,333],"content":"This topic describes the differences between <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>.","source":"This topic describes the differences between [!INCLUDE[esql](../../../../../../includes/esql-md.md)] and [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]."},{"pos":[342,379],"content":"Inheritance and Relationships Support","linkify":"Inheritance and Relationships Support","nodes":[{"content":"Inheritance and Relationships Support","pos":[0,37]}]},{"pos":[383,562],"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> works directly with conceptual entity schemas and supports conceptual model features such as inheritance and relationships.","source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] works directly with conceptual entity schemas and supports conceptual model features such as inheritance and relationships."},{"content":"When working with inheritance, it is often useful to select instances of a subtype from a collection of supertype instances.","pos":[569,693]},{"content":"The <bpt id=\"p1\">[</bpt>oftype<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/oftype-entity-sql.md)</ept> operator in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> (similar to <ph id=\"ph2\">`oftype`</ph> in C# Sequences) provides this capability.","pos":[694,927],"source":" The [oftype](../../../../../../docs/framework/data/adonet/ef/language-reference/oftype-entity-sql.md) operator in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] (similar to `oftype` in C# Sequences) provides this capability."},{"pos":[936,959],"content":"Support for Collections","linkify":"Support for Collections","nodes":[{"content":"Support for Collections","pos":[0,23]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> treats collections as first-class entities.","pos":[963,1062],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] treats collections as first-class entities."},{"content":"For example:","pos":[1063,1075]},{"pos":[1085,1137],"content":"Collection expressions are valid in a <ph id=\"ph1\">`from`</ph> clause.","source":"Collection expressions are valid in a `from` clause."},{"pos":[1147,1223],"content":"<ph id=\"ph1\">`in`</ph> and <ph id=\"ph2\">`exists`</ph> subqueries have been generalized to allow any collections.","source":"`in` and `exists` subqueries have been generalized to allow any collections."},{"content":"A subquery is one kind of collection.","pos":[1234,1271]},{"content":"<ph id=\"ph1\">`e1 in e2`</ph> and <ph id=\"ph2\">`exists(e)`</ph> are the <ph id=\"ph3\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> constructs to perform these operations.","pos":[1272,1402],"source":"`e1 in e2` and `exists(e)` are the [!INCLUDE[esql](../../../../../../includes/esql-md.md)] constructs to perform these operations."},{"pos":[1412,1499],"content":"Set operations, such as <ph id=\"ph1\">`union`</ph>, <ph id=\"ph2\">`intersect`</ph>, and <ph id=\"ph3\">`except`</ph>, now operate on collections.","source":"Set operations, such as `union`, `intersect`, and `except`, now operate on collections."},{"content":"Joins operate on collections.","pos":[1509,1538]},{"pos":[1547,1570],"content":"Support for Expressions","linkify":"Support for Expressions","nodes":[{"content":"Support for Expressions","pos":[0,23]}]},{"pos":[1574,1689],"content":"<ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> has subqueries (tables) and expressions (rows and columns).","source":"[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] has subqueries (tables) and expressions (rows and columns)."},{"content":"To support collections and nested collections, <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> makes everything an expression.","pos":[1696,1830],"source":"To support collections and nested collections, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] makes everything an expression."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> is more composable than <ph id=\"ph2\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>â€”every expression can be used anywhere.","pos":[1831,2005],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] is more composable than [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]â€”every expression can be used anywhere."},{"content":"Query expressions always result in collections of the projected types and can be used anywhere a collection expression is allowed.","pos":[2006,2136]},{"content":"For information about <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> expressions that are not supported in <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Unsupported Expressions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/unsupported-expressions-entity-sql.md)</ept>.","pos":[2137,2446],"source":" For information about [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] expressions that are not supported in [!INCLUDE[esql](../../../../../../includes/esql-md.md)], see [Unsupported Expressions](../../../../../../docs/framework/data/adonet/ef/language-reference/unsupported-expressions-entity-sql.md)."},{"pos":[2453,2545],"content":"The following are all valid <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> queries:","source":"The following are all valid [!INCLUDE[esql](../../../../../../includes/esql-md.md)] queries:"},{"pos":[2650,2681],"content":"Uniform Treatment of Subqueries","linkify":"Uniform Treatment of Subqueries","nodes":[{"content":"Uniform Treatment of Subqueries","pos":[0,31]}]},{"content":"Given its emphasis on tables, <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> performs contextual interpretation of subqueries.","pos":[2685,2820],"source":"Given its emphasis on tables, [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] performs contextual interpretation of subqueries."},{"content":"For example, a subquery in the <ph id=\"ph1\">`from`</ph> clause is considered to be a multiset (table).","pos":[2821,2905],"source":" For example, a subquery in the `from` clause is considered to be a multiset (table)."},{"content":"But the same subquery used in the <ph id=\"ph1\">`select`</ph> clause is considered to be a scalar subquery.","pos":[2906,2994],"source":" But the same subquery used in the `select` clause is considered to be a scalar subquery."},{"content":"Similarly, a subquery used on the left side of an <ph id=\"ph1\">`in`</ph> operator is considered to be a scalar subquery, while the right side is expected to be a multiset subquery.","pos":[2995,3157],"source":" Similarly, a subquery used on the left side of an `in` operator is considered to be a scalar subquery, while the right side is expected to be a multiset subquery."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> eliminates these differences.","pos":[3164,3249],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] eliminates these differences."},{"content":"An expression has a uniform interpretation that does not depend on the context in which it is used.","pos":[3250,3349]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> considers all subqueries to be multiset subqueries.","pos":[3350,3457],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] considers all subqueries to be multiset subqueries."},{"content":"If a scalar value is desired from the subquery, <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> provides the <ph id=\"ph2\">`anyelement`</ph> operator that operates on a collection (in this case, the subquery), and extracts a singleton value from the collection.","pos":[3458,3708],"source":" If a scalar value is desired from the subquery, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides the `anyelement` operator that operates on a collection (in this case, the subquery), and extracts a singleton value from the collection."},{"pos":[3718,3760],"content":"Avoiding Implicit Coercions for Subqueries","linkify":"Avoiding Implicit Coercions for Subqueries","nodes":[{"content":"Avoiding Implicit Coercions for Subqueries","pos":[0,42]}]},{"content":"A related side effect of uniform treatment of subqueries is implicit conversion of subqueries to scalar values.","pos":[3764,3875]},{"content":"Specifically, in <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>, a multiset of rows (with a single field) is implicitly converted into a scalar value whose data type is that of the field.","pos":[3876,4072],"source":" Specifically, in [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)], a multiset of rows (with a single field) is implicitly converted into a scalar value whose data type is that of the field."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> does not support this implicit coercion.","pos":[4079,4175],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support this implicit coercion."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> provides the ANYELEMENT operator to extract a singleton value from a collection, and a <ph id=\"ph2\">`select value`</ph> clause to avoid creating a row-wrapper during a query expression.","pos":[4176,4399],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides the ANYELEMENT operator to extract a singleton value from a collection, and a `select value` clause to avoid creating a row-wrapper during a query expression."},{"pos":[4408,4455],"content":"Select Value: Avoiding the Implicit Row Wrapper","linkify":"Select Value: Avoiding the Implicit Row Wrapper","nodes":[{"content":"Select Value: Avoiding the Implicit Row Wrapper","pos":[0,47]}]},{"content":"The select clause in a <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> subquery implicitly creates a row wrapper around the items in the clause.","pos":[4459,4611],"source":"The select clause in a [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] subquery implicitly creates a row wrapper around the items in the clause."},{"content":"This implies that we cannot create collections of scalars or objects.","pos":[4612,4681]},{"content":"<ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> allows an implicit coercion between a rowtype with one field, and a singleton value of the same data type.","pos":[4682,4844],"source":"[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] allows an implicit coercion between a rowtype with one field, and a singleton value of the same data type."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> provides the <ph id=\"ph2\">`select value`</ph> clause to skip the implicit row construction.","pos":[4851,4980],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides the `select value` clause to skip the implicit row construction."},{"content":"Only one item may be specified in a <ph id=\"ph1\">`select value`</ph> clause.","pos":[4981,5039],"source":" Only one item may be specified in a `select value` clause."},{"content":"When such a clause is used, no row wrapper is constructed around the items in the <ph id=\"ph1\">`select`</ph> clause, and a collection of the desired shape may be produced, for example: <ph id=\"ph2\">`select value a`</ph>.","pos":[5040,5224],"source":" When such a clause is used, no row wrapper is constructed around the items in the `select` clause, and a collection of the desired shape may be produced, for example: `select value a`."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> also provides the row constructor to construct arbitrary rows.","pos":[5231,5349],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] also provides the row constructor to construct arbitrary rows."},{"content":"<ph id=\"ph1\">`select`</ph> takes one or more elements in the projection and results in a data record with fields, as follows:","pos":[5350,5457],"source":"`select` takes one or more elements in the projection and results in a data record with fields, as follows:"},{"pos":[5489,5518],"content":"Left Correlation and Aliasing","linkify":"Left Correlation and Aliasing","nodes":[{"content":"Left Correlation and Aliasing","pos":[0,29]}]},{"content":"In <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>, expressions in a given scope (a single clause like <ph id=\"ph2\">`select`</ph> or <ph id=\"ph3\">`from`</ph>) cannot reference expressions defined earlier in the same scope.","pos":[5522,5716],"source":"In [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)], expressions in a given scope (a single clause like `select` or `from`) cannot reference expressions defined earlier in the same scope."},{"content":"Some dialects of SQL (including <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>) do support limited forms of these in the <ph id=\"ph2\">`from`</ph> clause.","pos":[5717,5861],"source":" Some dialects of SQL (including [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]) do support limited forms of these in the `from` clause."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> generalizes left correlations in the <ph id=\"ph2\">`from`</ph> clause, and treats them uniformly.","pos":[5868,6002],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] generalizes left correlations in the `from` clause, and treats them uniformly."},{"content":"Expressions in the <ph id=\"ph1\">`from`</ph> clause can reference earlier definitions (definitions to the left) in the same clause without the need for additional syntax.","pos":[6003,6154],"source":" Expressions in the `from` clause can reference earlier definitions (definitions to the left) in the same clause without the need for additional syntax."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> also imposes additional restrictions on queries involving <ph id=\"ph2\">`group by`</ph> clauses.","pos":[6161,6294],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] also imposes additional restrictions on queries involving `group by` clauses."},{"content":"Expressions in the <ph id=\"ph1\">`select`</ph> clause and <ph id=\"ph2\">`having`</ph> clause of such queries may only refer to the <ph id=\"ph3\">`group by`</ph> keys via their aliases.","pos":[6295,6422],"source":" Expressions in the `select` clause and `having` clause of such queries may only refer to the `group by` keys via their aliases."},{"content":"The following construct is valid in <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> but are not in <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>:","pos":[6423,6586],"source":" The following construct is valid in [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] but are not in [!INCLUDE[esql](../../../../../../includes/esql-md.md)]:"},{"pos":[6658,6728],"content":"To do this in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>:","source":"To do this in [!INCLUDE[esql](../../../../../../includes/esql-md.md)]:"},{"pos":[6801,6857],"content":"Referencing Columns (Properties) of Tables (Collections)","linkify":"Referencing Columns (Properties) of Tables (Collections)","nodes":[{"content":"Referencing Columns (Properties) of Tables (Collections)","pos":[0,56]}]},{"content":"All column references in <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> must be qualified with the table alias.","pos":[6861,6981],"source":"All column references in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] must be qualified with the table alias."},{"content":"The following construct (assuming that <ph id=\"ph1\">`a`</ph> is a valid column of table <ph id=\"ph2\">`T`</ph>) is valid in <ph id=\"ph3\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> but not in <ph id=\"ph4\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>.","pos":[6982,7192],"source":" The following construct (assuming that `a` is a valid column of table `T`) is valid in [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] but not in [!INCLUDE[esql](../../../../../../includes/esql-md.md)]."},{"pos":[7232,7299],"content":"The <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> form is","source":"The [!INCLUDE[esql](../../../../../../includes/esql-md.md)] form is"},{"content":"The table aliases are optional in the <ph id=\"ph1\">`from`</ph> clause.","pos":[7351,7403],"source":"The table aliases are optional in the `from` clause."},{"content":"The name of the table is used as the implicit alias.","pos":[7404,7456]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> allows the following form as well:","pos":[7457,7547],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] allows the following form as well:"},{"pos":[7595,7621],"content":"Navigation Through Objects","linkify":"Navigation Through Objects","nodes":[{"content":"Navigation Through Objects","pos":[0,26]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> uses the \".\" notation for referencing columns of (a row of) a table.","pos":[7625,7749],"source":"[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] uses the \".\" notation for referencing columns of (a row of) a table."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> extends this notation (borrowed from programming languages) to support navigation through properties of an object.","pos":[7750,7920],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] extends this notation (borrowed from programming languages) to support navigation through properties of an object."},{"pos":[7927,8119],"content":"For example, if <ph id=\"ph1\">`p`</ph> is an expression of type Person, the following is the <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> syntax for referencing the city of the address of this person.","source":"For example, if `p` is an expression of type Person, the following is the [!INCLUDE[esql](../../../../../../includes/esql-md.md)] syntax for referencing the city of the address of this person."},{"pos":[8161,8177],"content":"No Support for *","linkify":"No Support for *","nodes":[{"content":"No Support for *","pos":[0,16]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> supports the unqualified * syntax as an alias for the entire row, and the qualified <ph id=\"ph2\">\\*</ph> syntax (t.<ph id=\"ph3\">\\*</ph>) as a shortcut for the fields of that table.","pos":[8181,8381],"source":"[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] supports the unqualified * syntax as an alias for the entire row, and the qualified \\* syntax (t.\\*) as a shortcut for the fields of that table."},{"content":"In addition, <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> allows for a special count(<ph id=\"ph2\">\\*</ph>) aggregate, which includes nulls.","pos":[8382,8514],"source":" In addition, [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] allows for a special count(\\*) aggregate, which includes nulls."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> does not support the * construct.","pos":[8521,8610],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support the * construct."},{"content":"<ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> queries of the form <ph id=\"ph2\">`select * from T`</ph> and <ph id=\"ph3\">`select T1.* from T1, T2...`</ph> can be expressed in <ph id=\"ph4\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> as <ph id=\"ph5\">`select value t from T as t`</ph> and <ph id=\"ph6\">`select value t1 from T1 as t1, T2 as t2...`</ph>, respectively.","pos":[8611,8909],"source":"[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] queries of the form `select * from T` and `select T1.* from T1, T2...` can be expressed in [!INCLUDE[esql](../../../../../../includes/esql-md.md)] as `select value t from T as t` and `select value t1 from T1 as t1, T2 as t2...`, respectively."},{"content":"Additionally, these constructs handle inheritance (value substitutability), while the <ph id=\"ph1\">`select *`</ph> variants are restricted to top-level properties of the declared type.","pos":[8910,9076],"source":" Additionally, these constructs handle inheritance (value substitutability), while the `select *` variants are restricted to top-level properties of the declared type."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> does not support the <ph id=\"ph2\">`count(*)`</ph> aggregate.","pos":[9083,9181],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support the `count(*)` aggregate."},{"content":"Use <ph id=\"ph1\">`count(0)`</ph> instead.","pos":[9182,9205],"source":" Use `count(0)` instead."},{"pos":[9214,9233],"content":"Changes to Group By","linkify":"Changes to Group By","nodes":[{"content":"Changes to Group By","pos":[0,19]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> supports aliasing of <ph id=\"ph2\">`group by`</ph> keys.","pos":[9237,9330],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports aliasing of `group by` keys."},{"content":"Expressions in the <ph id=\"ph1\">`select`</ph> clause and <ph id=\"ph2\">`having`</ph> clause must refer to the <ph id=\"ph3\">`group by`</ph> keys via these aliases.","pos":[9331,9438],"source":" Expressions in the `select` clause and `having` clause must refer to the `group by` keys via these aliases."},{"content":"For example, this <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> syntax:","pos":[9439,9520],"source":" For example, this [!INCLUDE[esql](../../../../../../includes/esql-md.md)] syntax:"},{"pos":[9617,9707],"content":"...is equivalent to the following <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>:","source":"...is equivalent to the following [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]:"},{"pos":[9791,9818],"content":"Collection-Based Aggregates","linkify":"Collection-Based Aggregates","nodes":[{"content":"Collection-Based Aggregates","pos":[0,27]}]},{"pos":[9822,9911],"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> supports two kinds of aggregates.","source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports two kinds of aggregates."},{"content":"Collection-based aggregates operate on collections and produce the aggregated result.","pos":[9918,10003]},{"content":"These can appear anywhere in the query, and do not require a <ph id=\"ph1\">`group by`</ph> clause.","pos":[10004,10083],"source":" These can appear anywhere in the query, and do not require a `group by` clause."},{"content":"For example:","pos":[10084,10096]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> also supports SQL-style aggregates.","pos":[10172,10263],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] also supports SQL-style aggregates."},{"content":"For example:","pos":[10264,10276]},{"pos":[10351,10372],"content":"ORDER BY Clause Usage","linkify":"ORDER BY Clause Usage","nodes":[{"content":"ORDER BY Clause Usage","pos":[0,21]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> allows ORDER BY clauses to be specified only in the topmost SELECT ..","pos":[10376,10501],"source":"[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] allows ORDER BY clauses to be specified only in the topmost SELECT .."},{"content":"FROM ..","pos":[10502,10509]},{"content":"WHERE block.","pos":[10510,10522]},{"content":"In <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> you can use a nested ORDER BY expression and it can be placed anywhere in the query, but ordering in a nested query is not preserved.","pos":[10523,10715],"source":" In [!INCLUDE[esql](../../../../../../includes/esql-md.md)] you can use a nested ORDER BY expression and it can be placed anywhere in the query, but ordering in a nested query is not preserved."},{"pos":[11160,11171],"content":"Identifiers","linkify":"Identifiers","nodes":[{"content":"Identifiers","pos":[0,11]}]},{"content":"In <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>, identifier comparison is based on the collation of the current database.","pos":[11175,11307],"source":"In [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)], identifier comparison is based on the collation of the current database."},{"content":"In <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>, identifiers are always case insensitive and accent sensitive (that is, <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> distinguishes between accented and unaccented characters; for example, 'a' is not equal to 'áº¥').","pos":[11308,11591],"source":" In [!INCLUDE[esql](../../../../../../includes/esql-md.md)], identifiers are always case insensitive and accent sensitive (that is, [!INCLUDE[esql](../../../../../../includes/esql-md.md)] distinguishes between accented and unaccented characters; for example, 'a' is not equal to 'áº¥')."},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> treats versions of letters that appear the same but are from different code pages as different characters.","pos":[11592,11754],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] treats versions of letters that appear the same but are from different code pages as different characters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Character Set<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md)</ept>.","pos":[11755,11905],"source":" For more information, see [Input Character Set](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md)."},{"pos":[11914,11968],"content":"Transact-SQL Functionality Not Available in Entity SQL","linkify":"Transact-SQL Functionality Not Available in Entity SQL","nodes":[{"content":"Transact-SQL Functionality Not Available in Entity SQL","pos":[0,54]}]},{"pos":[11972,12132],"content":"The following <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> functionality is not available in <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>.","source":"The following [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] functionality is not available in [!INCLUDE[esql](../../../../../../includes/esql-md.md)]."},{"content":"DML","pos":[12139,12142]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> currently provides no support for DML statements (insert, update, delete).","pos":[12146,12276],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] currently provides no support for DML statements (insert, update, delete)."},{"content":"DDL","pos":[12283,12286]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> provides no support for DDL in the current version.","pos":[12290,12397],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides no support for DDL in the current version."},{"content":"Imperative Programming","pos":[12404,12426]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> provides no support for imperative programming, unlike <ph id=\"ph2\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>.","pos":[12430,12597],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] provides no support for imperative programming, unlike [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]."},{"content":"Use a programming language instead.","pos":[12598,12633]},{"content":"Grouping Functions","pos":[12640,12658]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> does not yet provide support for grouping functions (for example, CUBE, ROLLUP, and GROUPING_SET).","pos":[12662,12816],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not yet provide support for grouping functions (for example, CUBE, ROLLUP, and GROUPING_SET)."},{"content":"Analytic Functions","pos":[12823,12841]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> does not (yet) provide support for analytic functions.","pos":[12845,12955],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not (yet) provide support for analytic functions."},{"content":"Built-in Functions, Operators","pos":[12962,12991]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> supports a subset of <ph id=\"ph2\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>'s built in functions and operators.","pos":[12995,13163],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] supports a subset of [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]'s built in functions and operators."},{"content":"These operators and functions are likely to be supported by the major store providers.","pos":[13164,13250]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> uses the store-specific functions declared in a provider manifest.","pos":[13251,13373],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] uses the store-specific functions declared in a provider manifest."},{"content":"Additionally, the <ph id=\"ph1\">[!INCLUDE[adonet_ef](../../../../../../includes/adonet-ef-md.md)]</ph> allows you to declare built-in and user-defined existing store functions, for <ph id=\"ph2\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> to use.","pos":[13374,13599],"source":" Additionally, the [!INCLUDE[adonet_ef](../../../../../../includes/adonet-ef-md.md)] allows you to declare built-in and user-defined existing store functions, for [!INCLUDE[esql](../../../../../../includes/esql-md.md)] to use."},{"content":"Hints","pos":[13606,13611]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> does not provide mechanisms for query hints.","pos":[13615,13715],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not provide mechanisms for query hints."},{"content":"Batching Query Results","pos":[13722,13744]},{"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> does not support batching query results.","pos":[13748,13844],"source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] does not support batching query results."},{"content":"For example, the following is valid <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> (sending as a batch):","pos":[13845,13958],"source":" For example, the following is valid [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)] (sending as a batch):"},{"pos":[14034,14131],"content":"However, the equivalent <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> is not supported:","source":"However, the equivalent [!INCLUDE[esql](../../../../../../includes/esql-md.md)] is not supported:"},{"pos":[14229,14348],"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> only supports one result-producing query statement per command.","source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] only supports one result-producing query statement per command."},{"pos":[14357,14365],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[14369,14481],"content":"<bpt id=\"p1\">[</bpt>Entity SQL Overview<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md)</ept>","source":"[Entity SQL Overview](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md)"},{"pos":[14484,14615],"content":"<bpt id=\"p1\">[</bpt>Unsupported Expressions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/unsupported-expressions-entity-sql.md)</ept>","source":"[Unsupported Expressions](../../../../../../docs/framework/data/adonet/ef/language-reference/unsupported-expressions-entity-sql.md)"}]}