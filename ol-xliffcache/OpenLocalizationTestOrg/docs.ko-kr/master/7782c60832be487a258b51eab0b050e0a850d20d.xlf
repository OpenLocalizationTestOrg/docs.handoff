<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-debug-windows-service-applications.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7782c60832be487a258b51eab0b050e0a850d20d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-services\how-to-debug-windows-service-applications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f8e8377723ad46258df37953b010e9b55d7992c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">954a7d0b485719b3e8a5d3e4360a49bd9348ab7e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Debug Windows Service Applications</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Debug Windows Service Applications</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A service must be run from within the context of the Services Control Manager rather than from within Visual Studio.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For this reason, debugging a service is not as straightforward as debugging other Visual Studio application types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To debug a service, you must start the service and then attach a debugger to the process in which it is running.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can then debug your application by using all of the standard debugging functionality of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You should not attach to a process unless you know what the process is and understand the consequences of attaching to and possibly killing that process.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, if you attach to the WinLogon process and then stop debugging, the system will halt because it can’t operate without WinLogon.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can attach the debugger only to a running service.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The attachment process interrupts the current functioning of your service; it doesn’t actually stop or pause the service's processing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>That is, if your service is running when you begin debugging, it is still technically in the Started state as you debug it, but its processing has been suspended.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>After attaching to the process, you can set breakpoints and use these to debug your code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Once you exit the dialog box you use to attach to the process, you are effectively in debug mode.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use the Services Control Manager to start, stop, pause and continue your service, thus hitting the breakpoints you've set.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can later remove this dummy service after debugging is successful.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This article covers debugging a service that's running on the local computer, but you can also debug Windows Services that are running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Remote Debugging<ept id="p1">](/visualstudio/debugger/debug-installed-app-package)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Debugging the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method can be difficult because the Services Control Manager imposes a 30-second limit on all attempts to start a service.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Troubleshooting: Debugging Windows Services<ept id="p1">](../../../docs/framework/windows-services/troubleshooting-debugging-windows-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To get meaningful information for debugging, the Visual Studio debugger needs to find symbol files for the binaries that are being debugged.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you are debugging a service that you built in Visual Studio, the symbol files (.pdb files) are in the same folder as the executable or library, and the debugger loads them automatically.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you are debugging a service that you didn't build, you should first find symbols for the service and make sure they can be found by the debugger.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Specify Symbol (.pdb) and Source Files in the Visual Studio Debugger<ept id="p1">](/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you're debugging a system process or want to have symbols for system calls in your services, you should add the Microsoft Symbol Servers.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Debugging Symbols<ept id="p1">](/windows/desktop/DxTechArts/debugging-with-symbols)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To debug a service</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Build your service in the Debug configuration.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Install your service.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Install and Uninstall Services<ept id="p1">](../../../docs/framework/windows-services/how-to-install-and-uninstall-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Start your service, either from <bpt id="p1">**</bpt>Services Control Manager<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Server Explorer<ept id="p2">**</ept>, or from code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Start Services<ept id="p1">](../../../docs/framework/windows-services/how-to-start-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Start Visual Studio with administrative credentials so you can attach to system processes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(Optional) On the Visual Studio menu bar, choose <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Options<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Options<ept id="p1">**</ept> dialog box, choose <bpt id="p2">**</bpt>Debugging<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Symbols<ept id="p3">**</ept>, select the <bpt id="p4">**</bpt>Microsoft Symbol Servers<ept id="p4">**</ept> check box, and then choose the <bpt id="p5">**</bpt>OK<ept id="p5">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Attach to Process<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Tools<ept id="p3">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(Keyboard: Ctrl+Alt+P)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Processes<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Show processes from all users<ept id="p1">**</ept> check box.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Available Processes<ept id="p1">**</ept> section, choose the process for your service, and then choose <bpt id="p2">**</bpt>Attach<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The process will have the same name as the executable file for your service.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Attach to Process<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Choose the appropriate options, and then choose <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to close the dialog box.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You are now in debug mode.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Set any breakpoints you want to use in your code.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Access the Services Control Manager and manipulate your service, sending stop, pause, and continue commands to hit your breakpoints.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about running the Services Control Manager, see <bpt id="p1">[</bpt>How to: Start Services<ept id="p1">](../../../docs/framework/windows-services/how-to-start-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Also, see <bpt id="p1">[</bpt>Troubleshooting: Debugging Windows Services<ept id="p1">](../../../docs/framework/windows-services/troubleshooting-debugging-windows-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Debugging Tips for Windows Services</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Attaching to the service's process allows you to debug most, but not all, the code for that service.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, because the service has already been started, you cannot debug the code in the service's <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method or the code in the <ph id="ph2">`Main`</ph> method that is used to load the service this way.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>One way to work around this limitation is to create a temporary second service in your service application that exists only to aid in debugging.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can install both services, and then start this dummy service to load the service process.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Once the temporary service has started the process, you can use the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu in Visual Studio to attach to the service process.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Try adding calls to the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph> method to delay action until you’re able to attach to the process.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Try changing the program to a regular console application.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To do this, rewrite the <ph id="ph1">`Main`</ph> method as follows so it can run both as a Windows Service and as a console application, depending on how it's started.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>How to: Run a Windows Service as a console application</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Add a method to your service that runs the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Rewrite the <ph id="ph1">`Main`</ph> method as follows:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> tab of the project's properties, set the <bpt id="p2">**</bpt>Output type<ept id="p2">**</ept> to <bpt id="p3">**</bpt>Console Application<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Start Debugging<ept id="p1">**</ept> (F5).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To run the program as a Windows Service again, install it and start it as usual for a Windows Service.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It's not necessary to reverse these changes.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In some cases, such as when you want to debug an issue that occurs only on system startup, you have to use the Windows debugger.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Download the Windows Driver Kit (WDK)<ept id="p1">](/windows-hardware/drivers/download-the-wdk)</ept> and see <bpt id="p2">[</bpt>How to debug Windows Services<ept id="p2">](https://support.microsoft.com/kb/824344)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Windows Service Applications<ept id="p1">](../../../docs/framework/windows-services/introduction-to-windows-service-applications.md)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Install and Uninstall Services<ept id="p1">](../../../docs/framework/windows-services/how-to-install-and-uninstall-services.md)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Start Services<ept id="p1">](../../../docs/framework/windows-services/how-to-start-services.md)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debugging a Service<ept id="p1">](/windows/desktop/Services/debugging-a-service)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>