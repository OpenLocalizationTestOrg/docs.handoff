{"content":"---\ntitle: \"ICorProfilerCallback::ExceptionCatcherLeave Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerCallback.ExceptionCatcherLeave\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback::ExceptionCatcherLeave\"\nhelpviewer_keywords: \n  - \"ExceptionCatcherLeave method [.NET Framework profiling]\"\n  - \"ICorProfilerCallback::ExceptionCatcherLeave method [.NET Framework profiling]\"\nms.assetid: 1f3dbdf5-db0c-4b07-bbb7-375de2a63673\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# ICorProfilerCallback::ExceptionCatcherLeave Method\nNotifies the profiler that control is being passed out of the appropriate `catch` block.  \n  \n## Syntax  \n  \n```  \nHRESULT ExceptionCatcherLeave();  \n```  \n  \n## Remarks  \n The profiler should not block in its implementation of this method because the stack may not be in a state that allows garbage collection, and therefore preemptive garbage collection cannot be enabled. If the profiler blocks here and garbage collection is attempted, the runtime will block until this callback returns.  \n  \n The profiler's implementation of this method should not call into managed code or in any way cause a managed-memory allocation.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See also\n\n- [ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)\n- [ExceptionCatcherEnter Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptioncatcherenter-method.md)\n","nodes":[{"pos":[4,544],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerCallback::ExceptionCatcherLeave Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerCallback.ExceptionCatcherLeave\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback::ExceptionCatcherLeave\"\nhelpviewer_keywords: \n  - \"ExceptionCatcherLeave method [.NET Framework profiling]\"\n  - \"ICorProfilerCallback::ExceptionCatcherLeave method [.NET Framework profiling]\"\nms.assetid: 1f3dbdf5-db0c-4b07-bbb7-375de2a63673\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"ICorProfilerCallback::ExceptionCatcherLeave Method","nodes":[{"pos":[0,50],"content":"ICorProfilerCallback::ExceptionCatcherLeave Method","nodes":[{"content":"ICorProfilerCallback::ExceptionCatcherLeave Method","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[551,601],"content":"ICorProfilerCallback::ExceptionCatcherLeave Method","linkify":"ICorProfilerCallback::ExceptionCatcherLeave Method","nodes":[{"content":"ICorProfilerCallback::ExceptionCatcherLeave Method","pos":[0,50]}]},{"pos":[602,690],"content":"Notifies the profiler that control is being passed out of the appropriate <ph id=\"ph1\">`catch`</ph> block.","source":"Notifies the profiler that control is being passed out of the appropriate `catch` block."},{"pos":[699,705],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[764,771],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The profiler should not block in its implementation of this method because the stack may not be in a state that allows garbage collection, and therefore preemptive garbage collection cannot be enabled.","pos":[775,976]},{"content":"If the profiler blocks here and garbage collection is attempted, the runtime will block until this callback returns.","pos":[977,1093]},{"content":"The profiler's implementation of this method should not call into managed code or in any way cause a managed-memory allocation.","pos":[1100,1227]},{"pos":[1236,1248],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1252,1356],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[1363,1397],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[1404,1429],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[1436,1544],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[1553,1561],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1565,1683],"content":"<bpt id=\"p1\">[</bpt>ICorProfilerCallback Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept>","source":"[ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)"},{"pos":[1686,1821],"content":"<bpt id=\"p1\">[</bpt>ExceptionCatcherEnter Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptioncatcherenter-method.md)</ept>","source":"[ExceptionCatcherEnter Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptioncatcherenter-method.md)"}]}