{"content":"---\ntitle: \"Expressions1 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: c42341a9-43a1-462c-bffb-c5de004aa428\ncaps.latest.revision: 17\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Expressions\nA [!INCLUDE[wf](../../../includes/wf-md.md)] expression is any activity that returns a result. All expression activities derive indirectly from <xref:System.Activities.Activity%601>, which contains an <xref:System.Activities.OutArgument> property named <xref:System.Activities.Activity%601.Result%2A> as the activity’s return value. [!INCLUDE[wf1](../../../includes/wf1-md.md)] ships with a wide range of expression activities from simple ones like <xref:System.Activities.Expressions.VariableValue%601> and <xref:System.Activities.Expressions.VariableReference%601>, which provide access to single workflow variable through operator activities, to complex activities such as <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> and <xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601> that offer access to the full breadth of Visual Basic language to produce the result. Additional expression activities can be created by deriving from <xref:System.Activities.CodeActivity%601> or <xref:System.Activities.NativeActivity%601>.  \n  \n## Using Expressions  \n Workflow designer uses <xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601> and <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> for all expressions in Visual Basic projects, and <xref:Microsoft.CSharp.Activities.CSharpValue%601> and <xref:Microsoft.CSharp.Activities.CSharpReference%601> for expressions in C# workflow projects.  \n  \n> [!NOTE]\n>  Support for C# expressions in workflow projects was introduced in [!INCLUDE[net_v45](../../../includes/net-v45-md.md)]. [!INCLUDE[crdefault](../../../includes/crdefault-md.md)] [C# Expressions](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md).  \n  \n Workflows produced by designer are saved in XAML, where expressions appear enclosed in square brackets, as in the following example.  \n  \n```  \n<Sequence xmlns=\"http://schemas.microsoft.com/netfx/2009/xaml/activities\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">  \n  <Sequence.Variables>  \n    <Variable x:TypeArguments=\"x:Int32\" Default=\"1\" Name=\"a\" />  \n    <Variable x:TypeArguments=\"x:Int32\" Default=\"2\" Name=\"b\" />  \n    <Variable x:TypeArguments=\"x:Int32\" Default=\"3\" Name=\"c\" />  \n    <Variable x:TypeArguments=\"x:Int32\" Default=\"0\" Name=\"r\" />  \n  </Sequence.Variables>  \n  <Assign>  \n    <Assign.To>  \n      <OutArgument x:TypeArguments=\"x:Int32\">[r]</OutArgument>  \n    </Assign.To>  \n    <Assign.Value>  \n      <InArgument x:TypeArguments=\"x:Int32\">[a + b + c]</InArgument>  \n    </Assign.Value>  \n  </Assign>  \n</Sequence>  \n  \n```  \n  \n When defining a workflow in code, any expression activities can be used. The following example shows the usage of a composition of operator activities to add three numbers.  \n  \n```  \nVariable<int> a = new Variable<int>(\"a\", 1);  \nVariable<int> b = new Variable<int>(\"b\", 2);  \nVariable<int> c = new Variable<int>(\"c\", 3);  \nVariable<int> r = new Variable<int>(\"r\", 0);  \n  \nSequence w = new Sequence  \n{  \n    Variables = { a, b, c, r },  \n    Activities =   \n    {  \n        new Assign {  \n            To = new OutArgument<int>(r),  \n            Value = new InArgument<int> {  \n                Expression = new Add<int, int, int> {  \n                    Left = new Add<int, int, int> {  \n                        Left = new InArgument<int>(a),  \n                        Right = new InArgument<int>(b)  \n                    },  \n                    Right = new InArgument<int>(c)  \n                }  \n            }  \n        }  \n    }  \n};  \n  \n```  \n  \n The same workflow can be expressed more compactly by using C# lambda expressions, as shown in the following example.  \n  \n```  \nVariable<int> a = new Variable<int>(\"a\", 1);  \nVariable<int> b = new Variable<int>(\"b\", 2);  \nVariable<int> c = new Variable<int>(\"c\", 3);  \nVariable<int> r = new Variable<int>(\"r\", 0);  \n  \nSequence w = new Sequence  \n{  \n    Variables = { a, b, c, r },  \n    Activities =   \n    {  \n        new Assign {  \n            To = new OutArgument<int>(r),  \n            Value = new InArgument<int>((ctx) => a.Get(ctx) + b.Get(ctx) + c.Get(ctx))  \n        }  \n    }  \n};  \n  \n```  \n  \n The workflow can also be expressed by using Visual Basic expression activities, as shown in the following example.  \n  \n```  \nVariable<int> a = new Variable<int>(\"a\", 1);  \nVariable<int> b = new Variable<int>(\"b\", 2);  \nVariable<int> c = new Variable<int>(\"c\", 3);  \nVariable<int> r = new Variable<int>(\"r\", 0);  \n  \nSequence w = new Sequence  \n{  \n    Variables = { a, b, c, r },  \n    Activities =   \n    {  \n        new Assign {  \n            To = new OutArgument<int>(r),  \n            Value = new InArgument<int>(new VisualBasicValue<int>(\"a + b + c\"))  \n        }  \n    }  \n};  \n  \n```  \n  \n## Extending Available Expressions with Custom Expression Activities  \n Expressions in [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] are extensible allowing for additional expression activities to be created. The following example shows an activity that returns a sum of three integer values.  \n  \n```  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.Text;  \nusing System.Activities;  \n  \nnamespace ExpressionsDemo  \n{  \n    public sealed class AddThreeValues : CodeActivity<int>  \n    {  \n        public InArgument<int> Value1 { get; set; }  \n        public InArgument<int> Value2 { get; set; }  \n        public InArgument<int> Value3 { get; set; }  \n  \n        protected override int Execute(CodeActivityContext context)  \n        {  \n            return Value1.Get(context) +   \n                   Value2.Get(context) +   \n                   Value3.Get(context);  \n        }  \n    }  \n}  \n```  \n  \n With this new activity you can rewrite the previous workflow that added three values as shown in the following example.  \n  \n```  \nVariable<int> a = new Variable<int>(\"a\", 1);  \nVariable<int> b = new Variable<int>(\"b\", 2);  \nVariable<int> c = new Variable<int>(\"c\", 3);  \nVariable<int> r = new Variable<int>(\"r\", 0);  \n  \nSequence w = new Sequence  \n{  \n    Variables = { a, b, c, r },  \n    Activities =   \n    {  \n        new Assign {  \n            To = new OutArgument<int>(r),  \n            Value = new InArgument<int> {  \n                Expression = new AddThreeValues() {  \n                    Value1 = new InArgument<int>(a),  \n                    Value2 = new InArgument<int>(b),  \n                    Value3 = new InArgument<int>(c)  \n                }  \n            }  \n        }  \n    }  \n};  \n  \n```  \n  \n [!INCLUDE[crabout](../../../includes/crabout-md.md)]using expressions in code, see [Authoring Workflows, Activities, and Expressions Using Imperative Code](../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md).","nodes":[{"pos":[12,41],"content":"Expressions1 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Expressions1 | Microsoft Docs","pos":[0,29]}]},{"pos":[307,318],"content":"Expressions","linkify":"Expressions","nodes":[{"content":"Expressions","pos":[0,11]}]},{"content":"A <ph id=\"ph1\">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph> expression is any activity that returns a result.","pos":[319,413],"source":"A [!INCLUDE[wf](../../../includes/wf-md.md)] expression is any activity that returns a result."},{"content":"All expression activities derive indirectly from <ph id=\"ph1\">&lt;xref:System.Activities.Activity%601&gt;</ph>, which contains an <ph id=\"ph2\">&lt;xref:System.Activities.OutArgument&gt;</ph> property named <ph id=\"ph3\">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> as the activity’s return value.","pos":[414,651],"source":" All expression activities derive indirectly from <xref:System.Activities.Activity%601>, which contains an <xref:System.Activities.OutArgument> property named <xref:System.Activities.Activity%601.Result%2A> as the activity’s return value."},{"content":"<ph id=\"ph1\">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> ships with a wide range of expression activities from simple ones like <ph id=\"ph2\">&lt;xref:System.Activities.Expressions.VariableValue%601&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Activities.Expressions.VariableReference%601&gt;</ph>, which provide access to single workflow variable through operator activities, to complex activities such as <ph id=\"ph4\">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601&gt;</ph> and <ph id=\"ph5\">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph> that offer access to the full breadth of Visual Basic language to produce the result.","pos":[652,1210],"source":"[!INCLUDE[wf1](../../../includes/wf1-md.md)] ships with a wide range of expression activities from simple ones like <xref:System.Activities.Expressions.VariableValue%601> and <xref:System.Activities.Expressions.VariableReference%601>, which provide access to single workflow variable through operator activities, to complex activities such as <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> and <xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601> that offer access to the full breadth of Visual Basic language to produce the result."},{"content":"Additional expression activities can be created by deriving from <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity%601&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivity%601&gt;</ph>.","pos":[1211,1365],"source":" Additional expression activities can be created by deriving from <xref:System.Activities.CodeActivity%601> or <xref:System.Activities.NativeActivity%601>."},{"pos":[1374,1391],"content":"Using Expressions","linkify":"Using Expressions","nodes":[{"content":"Using Expressions","pos":[0,17]}]},{"content":"Workflow designer uses <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph> and <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601&gt;</ph> for all expressions in Visual Basic projects, and <ph id=\"ph3\">&lt;xref:Microsoft.CSharp.Activities.CSharpValue%601&gt;</ph> and <ph id=\"ph4\">&lt;xref:Microsoft.CSharp.Activities.CSharpReference%601&gt;</ph> for expressions in C# workflow projects.","pos":[1395,1748],"source":"Workflow designer uses <xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601> and <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> for all expressions in Visual Basic projects, and <xref:Microsoft.CSharp.Activities.CSharpValue%601> and <xref:Microsoft.CSharp.Activities.CSharpReference%601> for expressions in C# workflow projects."},{"pos":[1756,2036],"content":"[!NOTE]\n Support for C# expressions in workflow projects was introduced in [!INCLUDE[net_v45](../../../includes/net-v45-md.md)]. [!INCLUDE[crdefault](../../../includes/crdefault-md.md)] [C# Expressions](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md).","leadings":["","> "],"nodes":[{"content":" Support for C# expressions in workflow projects was introduced in [!INCLUDE[net_v45](../../../includes/net-v45-md.md)]. [!INCLUDE[crdefault](../../../includes/crdefault-md.md)] [C# Expressions](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md).","pos":[8,278],"nodes":[{"content":"Support for C# expressions in workflow projects was introduced in <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>.","pos":[1,120],"source":" Support for C# expressions in workflow projects was introduced in [!INCLUDE[net_v45](../../../includes/net-v45-md.md)]."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph> <bpt id=\"p1\">[</bpt>C# Expressions<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md)</ept>.","pos":[121,270],"source":"[!INCLUDE[crdefault](../../../includes/crdefault-md.md)] [C# Expressions](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md)."}]}]},{"content":"Workflows produced by designer are saved in XAML, where expressions appear enclosed in square brackets, as in the following example.","pos":[2043,2175]},{"content":"When defining a workflow in code, any expression activities can be used.","pos":[2904,2976]},{"content":"The following example shows the usage of a composition of operator activities to add three numbers.","pos":[2977,3076]},{"content":"The same workflow can be expressed more compactly by using C# lambda expressions, as shown in the following example.","pos":[3860,3976]},{"content":"The workflow can also be expressed by using Visual Basic expression activities, as shown in the following example.","pos":[4467,4581]},{"pos":[5067,5132],"content":"Extending Available Expressions with Custom Expression Activities","linkify":"Extending Available Expressions with Custom Expression Activities","nodes":[{"content":"Extending Available Expressions with Custom Expression Activities","pos":[0,65]}]},{"content":"Expressions in <ph id=\"ph1\">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> are extensible allowing for additional expression activities to be created.","pos":[5136,5303],"source":"Expressions in [!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)] are extensible allowing for additional expression activities to be created."},{"content":"The following example shows an activity that returns a sum of three integer values.","pos":[5304,5387]},{"content":"With this new activity you can rewrite the previous workflow that added three values as shown in the following example.","pos":[6035,6154]},{"pos":[6854,7135],"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph>using expressions in code, see <bpt id=\"p1\">[</bpt>Authoring Workflows, Activities, and Expressions Using Imperative Code<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)</ept>.","source":"[!INCLUDE[crabout](../../../includes/crabout-md.md)]using expressions in code, see [Authoring Workflows, Activities, and Expressions Using Imperative Code](../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)."}]}