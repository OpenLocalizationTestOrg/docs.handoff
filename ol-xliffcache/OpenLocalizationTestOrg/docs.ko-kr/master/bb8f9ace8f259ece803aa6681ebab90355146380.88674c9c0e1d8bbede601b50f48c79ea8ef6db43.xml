{"content":"---\ntitle: \"Command-line build with csc.exe\"\nms.date: 04/19/2017\nhelpviewer_keywords: \n  - \"builds [C#]\"\n  - \"command line [C#]\"\nms.assetid: 66e70056-dd20-453c-a9b3-507e0478b015\n---\n# Command-line build with csc.exe\nYou can invoke the C# compiler by typing the name of its executable file (*csc.exe*) at a command prompt.\n\nIf you use the **Developer Command Prompt for Visual Studio** window, all the necessary environment variables are set for you. For information on how to access this tool, see the [Developer Command Prompt for Visual Studio](../../../framework/tools/developer-command-prompt-for-vs.md) topic. \n\nIf you use a standard Command Prompt window, you must adjust your path before you can invoke *csc.exe* from any subdirectory on your computer. You also must run *vsvars32.bat* to set the appropriate environment variables to support command-line builds. For more information about *vsvars32.bat*, including instructions for how to find and run it, see [How to: Set Environment Variables for the Visual Studio Command Line](../../../csharp/language-reference/compiler-options/how-to-set-environment-variables-for-the-visual-studio-command-line.md).\n\nIf you're working on a computer that has only the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], you can use the C# compiler at the **SDK Command Prompt**, which you open from the **Microsoft .NET Framework SDK** menu option.\n\nYou can also use MSBuild to build C# programs programmatically. For more information, see [MSBuild](/visualstudio/msbuild/msbuild).\n\nThe *csc.exe* executable file usually is located in the Microsoft.NET\\Framework\\\\*\\<Version>* folder under the *Windows* directory. Its location might vary depending on the exact configuration of a particular computer. If more than one version of the .NET Framework is installed on your computer, you'll find multiple versions of this file. For more information about such installations, see [How to: determine which versions of the .NET Framework are installed](../../../framework/migration-guide/how-to-determine-which-versions-are-installed.md).\n\n> [!TIP]\n>  When you build a project by using the Visual Studio IDE, you can display the **csc** command and its associated compiler options in the **Output** window. To display this information, follow the instructions in [How to: View, Save, and Configure Build Log Files](/visualstudio/ide/how-to-view-save-and-configure-build-log-files#to-change-the-amount-of-information-included-in-the-build-log) to change the verbosity level of the log data to **Normal** or **Detailed**. After you rebuild your project, search the **Output** window for **csc** to find the invocation of the C# compiler.\n\n **In this topic**\n\n- [Rules for command-line syntax](#rules-for-command-line-syntax-for-the-c-compiler)\n\n- [Sample command lines](#sample-command-lines-for-the-c-compiler)\n\n- [Differences between C# compiler and C++ compiler output](#differences-between-c-compiler-and-c-compiler-output)\n\n## Rules for command-line syntax for the C# compiler\n\nThe C# compiler uses the following rules when it interprets arguments given on the operating system command line:\n\n- Arguments are delimited by white space, which is either a space or a tab.\n\n- The caret character (^) is not recognized as an escape character or delimiter. The character is handled by the command-line parser in the operating system before it's passed to the `argv` array in the program.\n\n- A string enclosed in double quotation marks (\"string\") is interpreted as a single argument, regardless of white space that is contained within. A quoted string can be embedded in an argument.\n\n- A double quotation mark preceded by a backslash (\\\\\") is interpreted as a literal double quotation mark character (\").\n\n- Backslashes are interpreted literally, unless they immediately precede a double quotation mark.\n\n- If an even number of backslashes is followed by a double quotation mark, one backslash is put in the `argv` array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter.\n\n- If an odd number of backslashes is followed by a double quotation mark, one backslash is put in the `argv` array for every pair of backslashes, and the double quotation mark is \"escaped\" by the remaining backslash. This causes a literal double quotation mark (\") to be added in `argv`.\n\n## Sample command lines for the C# compiler\n\n- Compiles *File.cs* producing *File.exe*:\n\n```console\ncsc File.cs \n```\n\n- Compiles *File.cs* producing *File.dll*:\n\n```console\ncsc -target:library File.cs\n```\n\n- Compiles *File.cs* and creates *My.exe*:\n\n```console\ncsc -out:My.exe File.cs\n```\n\n- Compiles all the C# files in the current directory with optimizations enabled and defines the DEBUG symbol. The output is *File2.exe*:\n\n```console\ncsc -define:DEBUG -optimize -out:File2.exe *.cs\n```\n\n- Compiles all the C# files in the current directory producing a debug version of *File2.dll*. No logo and no warnings are displayed:\n\n```console\ncsc -target:library -out:File2.dll -warn:0 -nologo -debug *.cs\n```\n\n- Compiles all the C# files in the current directory to *Something.xyz* (a DLL):\n\n```console\ncsc -target:library -out:Something.xyz *.cs\n```\n\n## Differences between C# compiler and C++ compiler output\nThere are no object (*.obj*) files created as a result of invoking the C# compiler; output files are created directly. As a result of this, the C# compiler does not need a linker.\n\n## See also\n\n- [C# Compiler Options](../../../csharp/language-reference/compiler-options/index.md)\n- [C# Compiler Options Listed Alphabetically](../../../csharp/language-reference/compiler-options/listed-alphabetically.md)\n- [C# Compiler Options Listed by Category](../../../csharp/language-reference/compiler-options/listed-by-category.md)\n- [Main() and Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/index.md)\n- [Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/command-line-arguments.md)\n- [How to: Display Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)\n- [How to: Access Command-Line Arguments Using foreach](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)\n- [Main() Return Values](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)\n","nodes":[{"pos":[4,177],"embed":true,"restype":"x-metadata","content":"title: \"Command-line build with csc.exe\"\nms.date: 04/19/2017\nhelpviewer_keywords: \n  - \"builds [C#]\"\n  - \"command line [C#]\"\nms.assetid: 66e70056-dd20-453c-a9b3-507e0478b015","nodes":[{"content":"Command-line build with csc.exe","nodes":[{"pos":[0,31],"content":"Command-line build with csc.exe","nodes":[{"content":"Command-line build with csc.exe","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[184,215],"content":"Command-line build with csc.exe","linkify":"Command-line build with csc.exe","nodes":[{"content":"Command-line build with csc.exe","pos":[0,31]}]},{"pos":[216,321],"content":"You can invoke the C# compiler by typing the name of its executable file (<bpt id=\"p1\">*</bpt>csc.exe<ept id=\"p1\">*</ept>) at a command prompt.","source":"You can invoke the C# compiler by typing the name of its executable file (*csc.exe*) at a command prompt."},{"content":"If you use the <bpt id=\"p1\">**</bpt>Developer Command Prompt for Visual Studio<ept id=\"p1\">**</ept> window, all the necessary environment variables are set for you.","pos":[323,449],"source":"If you use the **Developer Command Prompt for Visual Studio** window, all the necessary environment variables are set for you."},{"content":"For information on how to access this tool, see the <bpt id=\"p1\">[</bpt>Developer Command Prompt for Visual Studio<ept id=\"p1\">](../../../framework/tools/developer-command-prompt-for-vs.md)</ept> topic.","pos":[450,614],"source":" For information on how to access this tool, see the [Developer Command Prompt for Visual Studio](../../../framework/tools/developer-command-prompt-for-vs.md) topic."},{"content":"If you use a standard Command Prompt window, you must adjust your path before you can invoke <bpt id=\"p1\">*</bpt>csc.exe<ept id=\"p1\">*</ept> from any subdirectory on your computer.","pos":[617,759],"source":"If you use a standard Command Prompt window, you must adjust your path before you can invoke *csc.exe* from any subdirectory on your computer."},{"content":"You also must run <bpt id=\"p1\">*</bpt>vsvars32.bat<ept id=\"p1\">*</ept> to set the appropriate environment variables to support command-line builds.","pos":[760,869],"source":" You also must run *vsvars32.bat* to set the appropriate environment variables to support command-line builds."},{"content":"For more information about <bpt id=\"p1\">*</bpt>vsvars32.bat<ept id=\"p1\">*</ept>, including instructions for how to find and run it, see <bpt id=\"p2\">[</bpt>How to: Set Environment Variables for the Visual Studio Command Line<ept id=\"p2\">](../../../csharp/language-reference/compiler-options/how-to-set-environment-variables-for-the-visual-studio-command-line.md)</ept>.","pos":[870,1163],"source":" For more information about *vsvars32.bat*, including instructions for how to find and run it, see [How to: Set Environment Variables for the Visual Studio Command Line](../../../csharp/language-reference/compiler-options/how-to-set-environment-variables-for-the-visual-studio-command-line.md)."},{"pos":[1165,1396],"content":"If you're working on a computer that has only the <ph id=\"ph1\">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>, you can use the C# compiler at the <bpt id=\"p1\">**</bpt>SDK Command Prompt<ept id=\"p1\">**</ept>, which you open from the <bpt id=\"p2\">**</bpt>Microsoft .NET Framework SDK<ept id=\"p2\">**</ept> menu option.","source":"If you're working on a computer that has only the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], you can use the C# compiler at the **SDK Command Prompt**, which you open from the **Microsoft .NET Framework SDK** menu option."},{"content":"You can also use MSBuild to build C# programs programmatically.","pos":[1398,1461]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>MSBuild<ept id=\"p1\">](/visualstudio/msbuild/msbuild)</ept>.","pos":[1462,1529],"source":" For more information, see [MSBuild](/visualstudio/msbuild/msbuild)."},{"content":"The <bpt id=\"p1\">*</bpt>csc.exe<ept id=\"p1\">*</ept> executable file usually is located in the Microsoft.NET\\Framework<ph id=\"ph1\">\\\\</ph><bpt id=\"p2\">*</bpt><ph id=\"ph2\">\\&lt;</ph>Version&gt;<ept id=\"p2\">*</ept> folder under the <bpt id=\"p3\">*</bpt>Windows<ept id=\"p3\">*</ept> directory.","pos":[1531,1662],"source":"The *csc.exe* executable file usually is located in the Microsoft.NET\\Framework\\\\*\\<Version>* folder under the *Windows* directory."},{"content":"Its location might vary depending on the exact configuration of a particular computer.","pos":[1663,1749]},{"content":"If more than one version of the .NET Framework is installed on your computer, you'll find multiple versions of this file.","pos":[1750,1871]},{"content":"For more information about such installations, see <bpt id=\"p1\">[</bpt>How to: determine which versions of the .NET Framework are installed<ept id=\"p1\">](../../../framework/migration-guide/how-to-determine-which-versions-are-installed.md)</ept>.","pos":[1872,2079],"source":" For more information about such installations, see [How to: determine which versions of the .NET Framework are installed](../../../framework/migration-guide/how-to-determine-which-versions-are-installed.md)."},{"pos":[2083,2676],"content":"[!TIP]\n When you build a project by using the Visual Studio IDE, you can display the **csc** command and its associated compiler options in the **Output** window. To display this information, follow the instructions in [How to: View, Save, and Configure Build Log Files](/visualstudio/ide/how-to-view-save-and-configure-build-log-files#to-change-the-amount-of-information-included-in-the-build-log) to change the verbosity level of the log data to **Normal** or **Detailed**. After you rebuild your project, search the **Output** window for **csc** to find the invocation of the C# compiler.","leadings":["","> "],"nodes":[{"content":"When you build a project by using the Visual Studio IDE, you can display the **csc** command and its associated compiler options in the **Output** window. To display this information, follow the instructions in [How to: View, Save, and Configure Build Log Files](/visualstudio/ide/how-to-view-save-and-configure-build-log-files#to-change-the-amount-of-information-included-in-the-build-log) to change the verbosity level of the log data to **Normal** or **Detailed**. After you rebuild your project, search the **Output** window for **csc** to find the invocation of the C# compiler.","pos":[8,591],"nodes":[{"content":"When you build a project by using the Visual Studio IDE, you can display the <bpt id=\"p1\">**</bpt>csc<ept id=\"p1\">**</ept> command and its associated compiler options in the <bpt id=\"p2\">**</bpt>Output<ept id=\"p2\">**</ept> window.","pos":[0,154],"source":"When you build a project by using the Visual Studio IDE, you can display the **csc** command and its associated compiler options in the **Output** window."},{"content":"To display this information, follow the instructions in <bpt id=\"p1\">[</bpt>How to: View, Save, and Configure Build Log Files<ept id=\"p1\">](/visualstudio/ide/how-to-view-save-and-configure-build-log-files#to-change-the-amount-of-information-included-in-the-build-log)</ept> to change the verbosity level of the log data to <bpt id=\"p2\">**</bpt>Normal<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Detailed<ept id=\"p3\">**</ept>.","pos":[155,467],"source":" To display this information, follow the instructions in [How to: View, Save, and Configure Build Log Files](/visualstudio/ide/how-to-view-save-and-configure-build-log-files#to-change-the-amount-of-information-included-in-the-build-log) to change the verbosity level of the log data to **Normal** or **Detailed**."},{"content":"After you rebuild your project, search the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window for <bpt id=\"p2\">**</bpt>csc<ept id=\"p2\">**</ept> to find the invocation of the C# compiler.","pos":[468,583],"source":" After you rebuild your project, search the **Output** window for **csc** to find the invocation of the C# compiler."}]}]},{"pos":[2679,2696],"content":"<bpt id=\"p1\">**</bpt>In this topic<ept id=\"p1\">**</ept>","source":"**In this topic**"},{"pos":[2700,2782],"content":"<bpt id=\"p1\">[</bpt>Rules for command-line syntax<ept id=\"p1\">](#rules-for-command-line-syntax-for-the-c-compiler)</ept>","source":"[Rules for command-line syntax](#rules-for-command-line-syntax-for-the-c-compiler)"},{"pos":[2786,2850],"content":"<bpt id=\"p1\">[</bpt>Sample command lines<ept id=\"p1\">](#sample-command-lines-for-the-c-compiler)</ept>","source":"[Sample command lines](#sample-command-lines-for-the-c-compiler)"},{"pos":[2854,2966],"content":"<bpt id=\"p1\">[</bpt>Differences between C# compiler and C++ compiler output<ept id=\"p1\">](#differences-between-c-compiler-and-c-compiler-output)</ept>","source":"[Differences between C# compiler and C++ compiler output](#differences-between-c-compiler-and-c-compiler-output)"},{"pos":[2971,3020],"content":"Rules for command-line syntax for the C# compiler","linkify":"Rules for command-line syntax for the C# compiler","nodes":[{"content":"Rules for command-line syntax for the C# compiler","pos":[0,49]}]},{"content":"The C# compiler uses the following rules when it interprets arguments given on the operating system command line:","pos":[3022,3135]},{"content":"Arguments are delimited by white space, which is either a space or a tab.","pos":[3139,3212]},{"content":"The caret character (^) is not recognized as an escape character or delimiter.","pos":[3216,3294]},{"content":"The character is handled by the command-line parser in the operating system before it's passed to the <ph id=\"ph1\">`argv`</ph> array in the program.","pos":[3295,3425],"source":" The character is handled by the command-line parser in the operating system before it's passed to the `argv` array in the program."},{"content":"A string enclosed in double quotation marks (\"string\") is interpreted as a single argument, regardless of white space that is contained within.","pos":[3429,3572]},{"content":"A quoted string can be embedded in an argument.","pos":[3573,3620]},{"content":"A double quotation mark preceded by a backslash (<ph id=\"ph1\">\\\\</ph>\") is interpreted as a literal double quotation mark character (\").","pos":[3624,3742],"source":"A double quotation mark preceded by a backslash (\\\\\") is interpreted as a literal double quotation mark character (\")."},{"content":"Backslashes are interpreted literally, unless they immediately precede a double quotation mark.","pos":[3746,3841]},{"pos":[3845,4057],"content":"If an even number of backslashes is followed by a double quotation mark, one backslash is put in the <ph id=\"ph1\">`argv`</ph> array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter.","source":"If an even number of backslashes is followed by a double quotation mark, one backslash is put in the `argv` array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter."},{"content":"If an odd number of backslashes is followed by a double quotation mark, one backslash is put in the <ph id=\"ph1\">`argv`</ph> array for every pair of backslashes, and the double quotation mark is \"escaped\" by the remaining backslash.","pos":[4061,4275],"source":"If an odd number of backslashes is followed by a double quotation mark, one backslash is put in the `argv` array for every pair of backslashes, and the double quotation mark is \"escaped\" by the remaining backslash."},{"content":"This causes a literal double quotation mark (\") to be added in <ph id=\"ph1\">`argv`</ph>.","pos":[4276,4346],"source":" This causes a literal double quotation mark (\") to be added in `argv`."},{"pos":[4351,4391],"content":"Sample command lines for the C# compiler","linkify":"Sample command lines for the C# compiler","nodes":[{"content":"Sample command lines for the C# compiler","pos":[0,40]}]},{"pos":[4395,4435],"content":"Compiles <bpt id=\"p1\">*</bpt>File.cs<ept id=\"p1\">*</ept> producing <bpt id=\"p2\">*</bpt>File.exe<ept id=\"p2\">*</ept>:","source":"Compiles *File.cs* producing *File.exe*:"},{"pos":[4468,4508],"content":"Compiles <bpt id=\"p1\">*</bpt>File.cs<ept id=\"p1\">*</ept> producing <bpt id=\"p2\">*</bpt>File.dll<ept id=\"p2\">*</ept>:","source":"Compiles *File.cs* producing *File.dll*:"},{"pos":[4556,4596],"content":"Compiles <bpt id=\"p1\">*</bpt>File.cs<ept id=\"p1\">*</ept> and creates <bpt id=\"p2\">*</bpt>My.exe<ept id=\"p2\">*</ept>:","source":"Compiles *File.cs* and creates *My.exe*:"},{"content":"Compiles all the C# files in the current directory with optimizations enabled and defines the DEBUG symbol.","pos":[4640,4747]},{"content":"The output is <bpt id=\"p1\">*</bpt>File2.exe<ept id=\"p1\">*</ept>:","pos":[4748,4774],"source":" The output is *File2.exe*:"},{"content":"Compiles all the C# files in the current directory producing a debug version of <bpt id=\"p1\">*</bpt>File2.dll<ept id=\"p1\">*</ept>.","pos":[4842,4934],"source":"Compiles all the C# files in the current directory producing a debug version of *File2.dll*."},{"content":"No logo and no warnings are displayed:","pos":[4935,4973]},{"pos":[5056,5134],"content":"Compiles all the C# files in the current directory to <bpt id=\"p1\">*</bpt>Something.xyz<ept id=\"p1\">*</ept> (a DLL):","source":"Compiles all the C# files in the current directory to *Something.xyz* (a DLL):"},{"pos":[5199,5254],"content":"Differences between C# compiler and C++ compiler output","linkify":"Differences between C# compiler and C++ compiler output","nodes":[{"content":"Differences between C# compiler and C++ compiler output","pos":[0,55]}]},{"content":"There are no object (<bpt id=\"p1\">*</bpt>.obj<ept id=\"p1\">*</ept>) files created as a result of invoking the C# compiler; output files are created directly.","pos":[5255,5373],"source":"There are no object (*.obj*) files created as a result of invoking the C# compiler; output files are created directly."},{"content":"As a result of this, the C# compiler does not need a linker.","pos":[5374,5434]},{"pos":[5439,5447],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5451,5534],"content":"<bpt id=\"p1\">[</bpt>C# Compiler Options<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/index.md)</ept>","source":"[C# Compiler Options](../../../csharp/language-reference/compiler-options/index.md)"},{"pos":[5537,5658],"content":"<bpt id=\"p1\">[</bpt>C# Compiler Options Listed Alphabetically<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/listed-alphabetically.md)</ept>","source":"[C# Compiler Options Listed Alphabetically](../../../csharp/language-reference/compiler-options/listed-alphabetically.md)"},{"pos":[5661,5776],"content":"<bpt id=\"p1\">[</bpt>C# Compiler Options Listed by Category<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/listed-by-category.md)</ept>","source":"[C# Compiler Options Listed by Category](../../../csharp/language-reference/compiler-options/listed-by-category.md)"},{"pos":[5779,5880],"content":"<bpt id=\"p1\">[</bpt>Main() and Command-Line Arguments<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/index.md)</ept>","source":"[Main() and Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/index.md)"},{"pos":[5883,5990],"content":"<bpt id=\"p1\">[</bpt>Command-Line Arguments<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/command-line-arguments.md)</ept>","source":"[Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/command-line-arguments.md)"},{"pos":[5993,6131],"content":"<bpt id=\"p1\">[</bpt>How to: Display Command-Line Arguments<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)</ept>","source":"[How to: Display Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)"},{"pos":[6134,6298],"content":"<bpt id=\"p1\">[</bpt>How to: Access Command-Line Arguments Using foreach<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)</ept>","source":"[How to: Access Command-Line Arguments Using foreach](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)"},{"pos":[6301,6402],"content":"<bpt id=\"p1\">[</bpt>Main() Return Values<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)</ept>","source":"[Main() Return Values](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)"}]}