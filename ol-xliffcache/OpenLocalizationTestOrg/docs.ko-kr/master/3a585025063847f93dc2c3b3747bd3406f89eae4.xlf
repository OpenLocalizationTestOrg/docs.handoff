<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="processing-the-xml-file.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a585025063847f93dc2c3b3747bd3406f89eae4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\xmldoc\processing-the-xml-file.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4496e54842dfed4b9f113d29578bdd42e5abc3d6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7439153e4f7607fdd33bfd57ee1802e49d179dd8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Processing the XML File (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Processing the XML File (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The compiler generates an ID string for each construct in your code that is tagged to generate documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(For information about how to tag your code, see <bpt id="p1">[</bpt>Recommended Tags for Documentation Comments<ept id="p1">](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)</ept>.) The ID string uniquely identifies the construct.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Programs that process the XML file can use the ID string to identify the corresponding .NET Framework metadata/reflection item that the documentation applies to.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The XML file is not a hierarchical representation of your code; it is a flat list that has a generated ID for each element.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The compiler observes the following rules when it generates the ID strings:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>No whitespace is in the string.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first part of the ID string identifies the kind of member being identified, by way of a single character followed by a colon.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following member types are used:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Character</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>N</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>namespace</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You cannot add documentation comments to a namespace, but you can make cref references to them, where supported.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>T</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>type: class, interface, struct, enum, delegate</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>F</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>field</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>P</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>property (including indexers or other indexed properties)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>M</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>method (including such special methods as constructors, operators, and so forth)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>E</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>!</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>error string</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The rest of the string provides information about the error.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The C# compiler generates error information for links that cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The second part of the string is the fully qualified name of the item, starting at the root of the namespace.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The name of the item, its enclosing type(s), and namespace are separated by periods.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the name of the item itself has periods, they are replaced by the hash-sign ('#').</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It is assumed that no item has a hash-sign directly in its name.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the fully qualified name of the String constructor would be "System.String.#ctor".</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For properties and methods, if there are arguments to the method, the argument list enclosed in parentheses follows.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If there are no arguments, no parentheses are present.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The arguments are separated by commas.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The encoding of each argument follows directly how it is encoded in a .NET Framework signature:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Base types.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Regular types (ELEMENT_TYPE_CLASS or ELEMENT_TYPE_VALUETYPE) are represented as the fully qualified name of the type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Intrinsic types (for example, ELEMENT_TYPE_I4, ELEMENT_TYPE_OBJECT, ELEMENT_TYPE_STRING, ELEMENT_TYPE_TYPEDBYREF.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>and ELEMENT_TYPE_VOID) are represented as the fully qualified name of the corresponding full type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, System.Int32 or System.TypedReference.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_PTR is represented as a '*' following the modified type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_BYREF is represented as a '@' following the modified type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_PINNED is represented as a '^' following the modified type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The C# compiler never generates this.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_CMOD_REQ is represented as a '&amp;#124;' and the fully qualified name of the modifier class, following the modified type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The C# compiler never generates this.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_CMOD_OPT is represented as a '!' and the fully qualified name of the modifier class, following the modified type.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_SZARRAY is represented as "[]" following the element type of the array.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_GENERICARRAY is represented as "[?]" following the element type of the array.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The C# compiler never generates this.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_ARRAY is represented as [<bpt id="p1">*</bpt>lowerbound<ept id="p1">*</ept>:<ph id="ph1">`size`</ph>,<bpt id="p2">*</bpt>lowerbound<ept id="p2">*</ept>:<ph id="ph2">`size`</ph>] where the number of commas is the rank - 1, and the lower bounds and size of each dimension, if known, are represented in decimal.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If a lower bound or size is not specified, it is simply omitted.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the lower bound and size for a particular dimension are omitted, the ':' is omitted as well.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, a 2-dimensional array with 1 as the lower bounds and unspecified sizes is [1:,1:].</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_FNPTR is represented as "=FUNC:<ph id="ph1">`type`</ph>(<bpt id="p1">*</bpt>signature<ept id="p1">*</ept>)", where <ph id="ph2">`type`</ph> is the return type, and <bpt id="p2">*</bpt>signature<ept id="p2">*</ept> is the arguments of the method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If there are no arguments, the parentheses are omitted.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The C# compiler never generates this.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following signature components are not represented because they are never used for differentiating overloaded methods:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>calling convention</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>return type</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>ELEMENT_TYPE_SENTINEL</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For conversion operators only (op_Implicit and op_Explicit), the return value of the method is encoded as a '~' followed by the return type, as encoded above.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For generic types, the name of the type will be followed by a back tick and then a number that indicates the number of generic type parameters.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example,</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;member name="T:SampleClass`</ph>2"&gt;<ph id="ph2">` is the tag for a type that is defined as `</ph>public class SampleClass<ph id="ph3">\&lt;</ph>T, U&gt;`.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For methods taking generic types as parameters, the generic type parameters are specified as numbers prefaced with back ticks (for example <ph id="ph1">\`</ph>0,`1).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Each number representing a zero-based array notation for the type's generic parameters.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following examples show how the ID strings for a class and its members would be generated:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/doc (C# Compiler Options)<ept id="p1">](../../../csharp/language-reference/compiler-options/doc-compiler-option.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Documentation Comments<ept id="p1">](../../../csharp/programming-guide/xmldoc/xml-documentation-comments.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>