{"content":"---\ntitle: \"Ilasm.exe (IL Assembler) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MSIL generators\"\n  - \"metadata, MSIL Assembler\"\n  - \"MSIL Assembler\"\n  - \"portable executable files, MSIL Assembler\"\n  - \"PE files, MSIL Assembler\"\n  - \"MSIL\"\n  - \"Ilasm.exe\"\n  - \"verifying MSIL performance\"\nms.assetid: 4ca3a4f0-4400-47ce-8936-8e219961c76f\ncaps.latest.revision: 41\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Ilasm.exe (IL Assembler)\nThe IL Assembler generates a portable executable (PE) file from intermediate language (IL). (For more information on IL, see [Managed Execution Process](../../../docs/standard/managed-execution-process.md).) You can run the resulting executable, which contains IL and the required metadata, to determine whether the IL performs as expected.  \n  \n This tool is automatically installed with Visual Studio. To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7). For more information, see [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md).  \n  \n At the command prompt, type the following:  \n  \n## Syntax  \n  \n```  \n  \nilasm [options] filename [[options]filename...]  \n```  \n  \n#### Parameters  \n  \n|Argument|Description|  \n|--------------|-----------------|  \n|*filename*|The name of the .il source file. This file consists of metadata declaration directives and symbolic IL instructions. Multiple source file arguments can be supplied to produce a single PE file with Ilasm.exe. **Note:**  Ensure that the last line of code in the .il source file has either trailing white space or an end-of-line character.|  \n  \n|Option|Description|  \n|------------|-----------------|  \n|**/32bitpreferred**|Creates a 32-bit-preferred image (PE32).|  \n|**/alignment**=*integer*|Sets FileAlignment to the value specified by *integer* in the NT Optional header. If the .alignment IL directive is specified in the file, this option overrides it.|  \n|**/appcontainer**|Produces a .dll or .exe file that runs in the Windows app container, as output.|  \n|**/arm**|Specifies the Advanced RISC Machine (ARM) as the target processor.<br /><br /> If no image bitness is specified, the default is **/32bitpreferred**.|  \n|**/base**=*integer*|Sets ImageBase to the value specified by *integer* in the NT Optional header. If the .imagebase IL directive is specified in the file, this option overrides it.|  \n|**/clock**|Measures and reports the following compilation times in milliseconds for the specified .il source file:<br /><br /> **Total Run**: The total time spent performing all the specific operations that follow.<br /><br /> **Startup**: Loading and opening the file.<br /><br /> **Emitting MD**: Emitting metadata.<br /><br /> **Ref to Def Resolution**: Resolving references to definitions in the file.<br /><br /> **CEE File Generation**: Generating the file image in memory.<br /><br /> **PE File Writing**: Writing the image to a PE file.|  \n|**/debug**[=`IMPL`&#124;`OPT`]|Includes debug information (local variable and argument names, and line numbers). Creates a PDB file.<br /><br /> **/debug** with no additional value disables JIT optimization and uses sequence points from the PDB file.<br /><br /> **IMPL** disables JIT optimization and uses implicit sequence points.<br /><br /> **OPT** enables JIT optimization and uses implicit sequence points.|  \n|**/dll**|Produces a .dll file as output.|  \n|**/enc**=`file`|Creates Edit-and-Continue deltas from the specified source file.<br /><br /> This argument is for academic use only and is not supported for commercial use.|  \n|**/exe**|Produces an executable file as output. This is the default.|  \n|**/flags**=*integer*|Sets ImageFlags to the value specified by *integer* in the common language runtime header. If the .corflags IL directive is specified in the file, this option overrides it. See CorHdr.h, COMIMAGE_FLAGS for a list of valid values for *integer*.|  \n|**/fold**|Folds identical method bodies into one.|  \n|/**highentropyva**|Produces an output executable that supports high-entropy address space layout randomization (ASLR). (Default for **/appcontainer**.)|  \n|**/include**=`includePath`|Sets a path to search for files included with `#include`.|  \n|**/itanium**|Specifies Intel Itanium as the target processor.<br /><br /> If no image bitness is specified, the default is **/pe64**.|  \n|**/key:** *keyFile*|Compiles *filename* with a strong signature using the private key contained in *keyFile*.|  \n|**/key:@** *keySource*|Compiles *filename* with a strong signature using the private key produced at *keySource*.|  \n|**/listing**|Produces a listing file on the standard output. If you omit this option, no listing file is produced.<br /><br /> This parameter is not supported in the .NET Framework 2.0 or later.|  \n|**/mdv**=`versionString`|Sets the metadata version string.|  \n|**/msv**=`major``.``minor`|Sets the metadata stream version, where `major` and `minor` are integers.|  \n|**/noautoinherit**|Disables default inheritance from <xref:System.Object> when no base class is specified.|  \n|**/nocorstub**|Suppresses generation of the CORExeMain stub.|  \n|**/nologo**|Suppresses the Microsoft startup banner display.|  \n|**/output:** *22*|Specifies the output file name and extension. By default, the output file name is the same as the name of the first source file. The default extension is .exe. If you specify the **/dll** option, the default extension is .dll. **Note:**  Specifying **/output:**myfile.dll does not set the **/dll** option. If you do not specify **/dll**, the result will be an executable file named myfile.dll.|  \n|**/optimize**|Optimizes long instructions to short. For example, `br` to `br.s`.|  \n|**/pe64**|Creates a 64-bit image (PE32+).<br /><br /> If no target processor is specified, the default is `/itanium`.|  \n|**/pdb**|Creates a PDB file without enabling debug information tracking.|  \n|**/quiet**|Specifies quiet mode; does not report assembly progress.|  \n|**/resource:** *file.res*|Includes the specified resource file in \\*.res format in the resulting .exe or .dll file. Only one .res file can be specified with the **/resource** option.|  \n|**/ssver**=`int`.`int`|Sets the subsystem version number in the NT optional header. For **/appcontainer** and **/arm** the minimum version number is 6.02.|  \n|**/stack**=`stackSize`|Sets the SizeOfStackReserve value in the NT Optional header to `stackSize`.|  \n|**/stripreloc**|Specifies that no base relocations are needed.|  \n|**/subsystem**=*integer*|Sets subsystem to the value specified by *integer* in the NT Optional header. If the .subsystem IL directive is specified in the file, this command overrides it. See winnt.h, IMAGE_SUBSYSTEM for a list of valid values for *integer*.|  \n|**/x64**|Specifies a 64-bit AMD processor as the target processor.<br /><br /> If no image bitness is specified, the default is **/pe64**.|  \n|**/?**|Displays command syntax and options for the tool.|  \n  \n> [!NOTE]\n>  All options for Ilasm.exe are case-insensitive and recognized by the first three letters. For example, **/lis** is equivalent to **/listing** and **/res:**myresfile.res is equivalent to **/resource:**myresfile.res. Options that specify arguments accept either a colon (:) or an equal sign (=) as the separator between the option and the argument. For example, **/output:** *file.ext* is equivalent to **/output=** *file.ext*.  \n  \n## Remarks  \n The IL Assembler helps tool vendors design and implement IL generators. Using Ilasm.exe, tool and compiler developers can concentrate on IL and metadata generation without being concerned with emitting IL in the PE file format.  \n  \n Similar to other compilers that target the runtime, such as C# and Visual Basic, Ilasm.exe does not produce intermediate object files and does not require a linking stage to form a PE file.  \n  \n The IL Assembler can express all the existing metadata and IL features of the programming languages that target the runtime. This allows managed code written in any of these programming languages to be adequately expressed in IL Assembler and compiled with Ilasm.exe.  \n  \n> [!NOTE]\n>  Compilation might fail if the last line of code in the .il source file does not have either trailing white space or an end-of-line character.  \n  \n You can use Ilasm.exe in conjunction with its companion tool, [Ildasm.exe](../../../docs/framework/tools/ildasm-exe-il-disassembler.md). Ildasm.exe takes a PE file that contains IL code and creates a text file suitable as input to Ilasm.exe. This is useful, for example, when compiling code in a programming language that does not support all the runtime metadata attributes. After compiling the code and running the output through Ildasm.exe, the resulting IL text file can be hand-edited to add the missing attributes. You can then run this text file through the Ilasm.exe to produce a final executable file.  \n  \n You can also use this technique to produce a single PE file from several PE files originally generated by different compilers.  \n  \n> [!NOTE]\n>  Currently, you cannot use this technique with PE files that contain embedded native code (for example, PE files produced by Visual C++).  \n  \n To make this combined use of Ildasm.exe and Ilasm.exe as accurate as possible, by default the assembler does not substitute short encodings for long ones you might have written in your IL sources (or that might be emitted by another compiler). Use the **/optimize** option to substitute short encodings wherever possible.  \n  \n> [!NOTE]\n>  Ildasm.exe only operates on files on disk. It does not operate on files installed in the global assembly cache.  \n  \n For more information about the grammar of IL, see the asmparse.grammar file in the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)].  \n  \n## Version Information  \n Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], you can attach a custom attribute to an interface implementation by using code similar to the following:  \n  \n```  \n.class interface public abstract auto ansi IMyInterface  \n{  \n  .method public hidebysig newslot abstract virtual  \n    instance int32 method1() cil managed  \n  {  \n  } // end of method IMyInterface::method1  \n} // end of class IMyInterface  \n.class public auto ansi beforefieldinit MyClass  \n  extends [mscorlib]System.Object  \n  implements IMyInterface  \n  {  \n    .interfaceimpl type IMyInterface  \n    .custom instance void  \n      [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 )  \n      …  \n  \n```  \n  \n Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], you can specify an arbitrary marshal BLOB (binary large object) by using its raw binary representation, as shown in the following code:  \n  \n```  \n.method public hidebysig abstract virtual   \n        instance void   \n        marshal({ 38 01 02 FF })   \n        Test(object A_1) cil managed  \n  \n```  \n  \n For more information about the grammar of IL, see the asmparse.grammar file in the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)].  \n  \n## Examples  \n The following command assembles the IL file `myTestFile.il` and produces the executable `myTestFile.exe.`  \n  \n```  \nilasm myTestFile  \n```  \n  \n The following command assembles the IL file `myTestFile.il` and produces the .dll file `myTestFile.dll`.  \n  \n```  \nilasm myTestFile /dll   \n```  \n  \n The following command assembles the IL file `myTestFile.il` and produces the .dll file `myNewTestFile.dll`.  \n  \n```  \nilasm myTestFile /dll /output:myNewTestFile.dll  \n```  \n  \n The following code example shows an extremely simple application that displays \"Hello World!\" to the console.  You can compile this code and then use the [Ildasm.exe](../../../docs/framework/tools/ildasm-exe-il-disassembler.md) tool to generate an IL file.  \n  \n```csharp  \nusing System;  \npublic class Hello  \n{  \n    public static void Main(String[] args)  \n    {  \n        Console.WriteLine(\"Hello World!\");  \n    }  \n}  \n```  \n  \n The following IL code example corresponds to the previous C# code example.  You can compile this code into an assembly using the IL Assembler tool.  Both IL and C# code examples display \"Hello World!\" to the console.  \n  \n```  \n// Metadata version: v2.0.50215  \n.assembly extern mscorlib  \n{  \n  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\\V.4..  \n  .ver 2:0:0:0  \n}  \n.assembly sample  \n{  \n  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 )   \n  .hash algorithm 0x00008004  \n  .ver 0:0:0:0  \n}  \n.module sample.exe  \n// MVID: {A224F460-A049-4A03-9E71-80A36DBBBCD3}  \n.imagebase 0x00400000  \n.file alignment 0x00000200  \n.stackreserve 0x00100000  \n.subsystem 0x0003       // WINDOWS_CUI  \n.corflags 0x00000001    //  ILONLY  \n// Image base: 0x02F20000  \n  \n// =============== CLASS MEMBERS DECLARATION ===================  \n  \n.class public auto ansi beforefieldinit Hello  \n       extends [mscorlib]System.Object  \n{  \n  .method public hidebysig static void  Main(string[] args) cil managed  \n  {  \n    .entrypoint  \n    // Code size       13 (0xd)  \n    .maxstack  8  \n    IL_0000:  nop  \n    IL_0001:  ldstr      \"Hello World!\"  \n    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)  \n    IL_000b:  nop  \n    IL_000c:  ret  \n  } // end of method Hello::Main  \n  \n  .method public hidebysig specialname rtspecialname   \n          instance void  .ctor() cil managed  \n  {  \n    // Code size       7 (0x7)  \n    .maxstack  8  \n    IL_0000:  ldarg.0  \n    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()  \n    IL_0006:  ret  \n  } // end of method Hello::.ctor  \n  \n} // end of class Hello  \n```  \n  \n## See Also  \n [Tools](../../../docs/framework/tools/index.md)   \n [Ildasm.exe (IL Disassembler)](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)   \n [Managed Execution Process](../../../docs/standard/managed-execution-process.md)   \n [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md)","nodes":[{"pos":[4,642],"nodes":[{"content":"Ilasm.exe (IL Assembler) | Microsoft Docs","nodes":[{"pos":[0,41],"content":"Ilasm.exe (IL Assembler) | Microsoft Docs","nodes":[{"content":"Ilasm.exe (IL Assembler) | Microsoft Docs","pos":[0,41]}]}],"pos":[6,50],"yaml":true}],"content":"title: \"Ilasm.exe (IL Assembler) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MSIL generators\"\n  - \"metadata, MSIL Assembler\"\n  - \"MSIL Assembler\"\n  - \"portable executable files, MSIL Assembler\"\n  - \"PE files, MSIL Assembler\"\n  - \"MSIL\"\n  - \"Ilasm.exe\"\n  - \"verifying MSIL performance\"\nms.assetid: 4ca3a4f0-4400-47ce-8936-8e219961c76f\ncaps.latest.revision: 41\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[649,673],"content":"Ilasm.exe (IL Assembler)","linkify":"Ilasm.exe (IL Assembler)","nodes":[{"content":"Ilasm.exe (IL Assembler)","pos":[0,24]}]},{"content":"The IL Assembler generates a portable executable (PE) file from intermediate language (IL).","pos":[674,765]},{"content":"(For more information on IL, see <bpt id=\"p1\">[</bpt>Managed Execution Process<ept id=\"p1\">](../../../docs/standard/managed-execution-process.md)</ept>.) You can run the resulting executable, which contains IL and the required metadata, to determine whether the IL performs as expected.","pos":[766,1014],"source":" (For more information on IL, see [Managed Execution Process](../../../docs/standard/managed-execution-process.md).) You can run the resulting executable, which contains IL and the required metadata, to determine whether the IL performs as expected."},{"content":"This tool is automatically installed with Visual Studio.","pos":[1021,1077]},{"content":"To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7).","pos":[1078,1179]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Command Prompts<ept id=\"p1\">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>.","pos":[1180,1290],"source":" For more information, see [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md)."},{"content":"At the command prompt, type the following:","pos":[1297,1339]},{"pos":[1348,1354],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1433,1443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Argument","pos":[1450,1458]},{"content":"Description","pos":[1459,1470]},{"pos":[1512,1522],"content":"<bpt id=\"p1\">*</bpt>filename<ept id=\"p1\">*</ept>","source":"*filename*"},{"content":"The name of the .il source file.","pos":[1523,1555]},{"content":"This file consists of metadata declaration directives and symbolic IL instructions.","pos":[1556,1639]},{"content":"Multiple source file arguments can be supplied to produce a single PE file with Ilasm.exe.","pos":[1640,1730]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept>  Ensure that the last line of code in the .il source file has either trailing white space or an end-of-line character.","pos":[1731,1859],"source":"**Note:**  Ensure that the last line of code in the .il source file has either trailing white space or an end-of-line character."},{"content":"Option","pos":[1867,1873]},{"content":"Description","pos":[1874,1885]},{"pos":[1925,1944],"content":"<bpt id=\"p1\">**</bpt>/32bitpreferred<ept id=\"p1\">**</ept>","source":"**/32bitpreferred**"},{"content":"Creates a 32-bit-preferred image (PE32).","pos":[1945,1985]},{"pos":[1990,2014],"content":"<bpt id=\"p1\">**</bpt>/alignment<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><bpt id=\"p2\">*</bpt>integer<ept id=\"p2\">*</ept>","source":"**/alignment**=*integer*"},{"content":"Sets FileAlignment to the value specified by <bpt id=\"p1\">*</bpt>integer<ept id=\"p1\">*</ept> in the NT Optional header.","pos":[2015,2096],"source":"Sets FileAlignment to the value specified by *integer* in the NT Optional header."},{"content":"If the .alignment IL directive is specified in the file, this option overrides it.","pos":[2097,2179]},{"pos":[2184,2201],"content":"<bpt id=\"p1\">**</bpt>/appcontainer<ept id=\"p1\">**</ept>","source":"**/appcontainer**"},{"content":"Produces a .dll or .exe file that runs in the Windows app container, as output.","pos":[2202,2281]},{"pos":[2286,2294],"content":"<bpt id=\"p1\">**</bpt>/arm<ept id=\"p1\">**</ept>","source":"**/arm**"},{"content":"Specifies the Advanced RISC Machine (ARM) as the target processor.","pos":[2295,2361]},{"content":"If no image bitness is specified, the default is <bpt id=\"p1\">**</bpt>/32bitpreferred<ept id=\"p1\">**</ept>.","pos":[2374,2443],"source":"If no image bitness is specified, the default is **/32bitpreferred**."},{"pos":[2448,2467],"content":"<bpt id=\"p1\">**</bpt>/base<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><bpt id=\"p2\">*</bpt>integer<ept id=\"p2\">*</ept>","source":"**/base**=*integer*"},{"content":"Sets ImageBase to the value specified by <bpt id=\"p1\">*</bpt>integer<ept id=\"p1\">*</ept> in the NT Optional header.","pos":[2468,2545],"source":"Sets ImageBase to the value specified by *integer* in the NT Optional header."},{"content":"If the .imagebase IL directive is specified in the file, this option overrides it.","pos":[2546,2628]},{"pos":[2633,2643],"content":"<bpt id=\"p1\">**</bpt>/clock<ept id=\"p1\">**</ept>","source":"**/clock**"},{"content":"Measures and reports the following compilation times in milliseconds for the specified .il source file:","pos":[2644,2747]},{"content":"<bpt id=\"p1\">**</bpt>Total Run<ept id=\"p1\">**</ept>: The total time spent performing all the specific operations that follow.","pos":[2760,2847],"source":"**Total Run**: The total time spent performing all the specific operations that follow."},{"content":"<bpt id=\"p1\">**</bpt>Startup<ept id=\"p1\">**</ept>: Loading and opening the file.","pos":[2860,2902],"source":"**Startup**: Loading and opening the file."},{"content":"<bpt id=\"p1\">**</bpt>Emitting MD<ept id=\"p1\">**</ept>: Emitting metadata.","pos":[2915,2950],"source":"**Emitting MD**: Emitting metadata."},{"content":"<bpt id=\"p1\">**</bpt>Ref to Def Resolution<ept id=\"p1\">**</ept>: Resolving references to definitions in the file.","pos":[2963,3038],"source":"**Ref to Def Resolution**: Resolving references to definitions in the file."},{"content":"<bpt id=\"p1\">**</bpt>CEE File Generation<ept id=\"p1\">**</ept>: Generating the file image in memory.","pos":[3051,3112],"source":"**CEE File Generation**: Generating the file image in memory."},{"content":"<bpt id=\"p1\">**</bpt>PE File Writing<ept id=\"p1\">**</ept>: Writing the image to a PE file.","pos":[3125,3177],"source":"**PE File Writing**: Writing the image to a PE file."},{"pos":[3182,3212],"content":"<bpt id=\"p1\">**</bpt>/debug<ept id=\"p1\">**</ept>[=<ph id=\"ph1\">`IMPL`</ph>&amp;#124;<ph id=\"ph2\">`OPT`</ph>]","source":"**/debug**[=`IMPL`&#124;`OPT`]"},{"content":"Includes debug information (local variable and argument names, and line numbers).","pos":[3213,3294]},{"content":"Creates a PDB file.","pos":[3295,3314]},{"content":"<bpt id=\"p1\">**</bpt>/debug<ept id=\"p1\">**</ept> with no additional value disables JIT optimization and uses sequence points from the PDB file.","pos":[3327,3432],"source":"**/debug** with no additional value disables JIT optimization and uses sequence points from the PDB file."},{"content":"<bpt id=\"p1\">**</bpt>IMPL<ept id=\"p1\">**</ept> disables JIT optimization and uses implicit sequence points.","pos":[3445,3514],"source":"**IMPL** disables JIT optimization and uses implicit sequence points."},{"content":"<bpt id=\"p1\">**</bpt>OPT<ept id=\"p1\">**</ept> enables JIT optimization and uses implicit sequence points.","pos":[3527,3594],"source":"**OPT** enables JIT optimization and uses implicit sequence points."},{"pos":[3599,3607],"content":"<bpt id=\"p1\">**</bpt>/dll<ept id=\"p1\">**</ept>","source":"**/dll**"},{"content":"Produces a .dll file as output.","pos":[3608,3639]},{"pos":[3644,3659],"content":"<bpt id=\"p1\">**</bpt>/enc<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><ph id=\"ph2\">`file`</ph>","source":"**/enc**=`file`"},{"content":"Creates Edit-and-Continue deltas from the specified source file.","pos":[3660,3724]},{"content":"This argument is for academic use only and is not supported for commercial use.","pos":[3737,3816]},{"pos":[3821,3829],"content":"<bpt id=\"p1\">**</bpt>/exe<ept id=\"p1\">**</ept>","source":"**/exe**"},{"content":"Produces an executable file as output.","pos":[3830,3868]},{"content":"This is the default.","pos":[3869,3889]},{"pos":[3894,3914],"content":"<bpt id=\"p1\">**</bpt>/flags<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><bpt id=\"p2\">*</bpt>integer<ept id=\"p2\">*</ept>","source":"**/flags**=*integer*"},{"content":"Sets ImageFlags to the value specified by <bpt id=\"p1\">*</bpt>integer<ept id=\"p1\">*</ept> in the common language runtime header.","pos":[3915,4005],"source":"Sets ImageFlags to the value specified by *integer* in the common language runtime header."},{"content":"If the .corflags IL directive is specified in the file, this option overrides it.","pos":[4006,4087]},{"content":"See CorHdr.h, COMIMAGE_FLAGS for a list of valid values for <bpt id=\"p1\">*</bpt>integer<ept id=\"p1\">*</ept>.","pos":[4088,4158],"source":" See CorHdr.h, COMIMAGE_FLAGS for a list of valid values for *integer*."},{"pos":[4163,4172],"content":"<bpt id=\"p1\">**</bpt>/fold<ept id=\"p1\">**</ept>","source":"**/fold**"},{"content":"Folds identical method bodies into one.","pos":[4173,4212]},{"pos":[4217,4235],"content":"<ph id=\"ph1\">/</ph><bpt id=\"p1\">**</bpt>highentropyva<ept id=\"p1\">**</ept>","source":"/**highentropyva**"},{"content":"Produces an output executable that supports high-entropy address space layout randomization (ASLR).","pos":[4236,4335]},{"content":"(Default for <bpt id=\"p1\">**</bpt>/appcontainer<ept id=\"p1\">**</ept>.)","pos":[4336,4368],"source":" (Default for **/appcontainer**.)"},{"pos":[4373,4399],"content":"<bpt id=\"p1\">**</bpt>/include<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><ph id=\"ph2\">`includePath`</ph>","source":"**/include**=`includePath`"},{"pos":[4400,4457],"content":"Sets a path to search for files included with <ph id=\"ph1\">`#include`</ph>.","source":"Sets a path to search for files included with `#include`."},{"pos":[4462,4474],"content":"<bpt id=\"p1\">**</bpt>/itanium<ept id=\"p1\">**</ept>","source":"**/itanium**"},{"content":"Specifies Intel Itanium as the target processor.","pos":[4475,4523]},{"content":"If no image bitness is specified, the default is <bpt id=\"p1\">**</bpt>/pe64<ept id=\"p1\">**</ept>.","pos":[4536,4595],"source":"If no image bitness is specified, the default is **/pe64**."},{"pos":[4600,4619],"content":"<bpt id=\"p1\">**</bpt>/key:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>keyFile<ept id=\"p2\">*</ept>","source":"**/key:** *keyFile*"},{"pos":[4620,4709],"content":"Compiles <bpt id=\"p1\">*</bpt>filename<ept id=\"p1\">*</ept> with a strong signature using the private key contained in <bpt id=\"p2\">*</bpt>keyFile<ept id=\"p2\">*</ept>.","source":"Compiles *filename* with a strong signature using the private key contained in *keyFile*."},{"pos":[4714,4736],"content":"<bpt id=\"p1\">**</bpt>/key:@<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>keySource<ept id=\"p2\">*</ept>","source":"**/key:@** *keySource*"},{"pos":[4737,4827],"content":"Compiles <bpt id=\"p1\">*</bpt>filename<ept id=\"p1\">*</ept> with a strong signature using the private key produced at <bpt id=\"p2\">*</bpt>keySource<ept id=\"p2\">*</ept>.","source":"Compiles *filename* with a strong signature using the private key produced at *keySource*."},{"pos":[4832,4844],"content":"<bpt id=\"p1\">**</bpt>/listing<ept id=\"p1\">**</ept>","source":"**/listing**"},{"content":"Produces a listing file on the standard output.","pos":[4845,4892]},{"content":"If you omit this option, no listing file is produced.","pos":[4893,4946]},{"content":"This parameter is not supported in the .NET Framework 2.0 or later.","pos":[4959,5026]},{"pos":[5031,5055],"content":"<bpt id=\"p1\">**</bpt>/mdv<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><ph id=\"ph2\">`versionString`</ph>","source":"**/mdv**=`versionString`"},{"content":"Sets the metadata version string.","pos":[5056,5089]},{"pos":[5094,5120],"content":"<bpt id=\"p1\">**</bpt>/msv<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><ph id=\"ph2\">`major``.``minor`</ph>","source":"**/msv**=`major``.``minor`"},{"pos":[5121,5194],"content":"Sets the metadata stream version, where <ph id=\"ph1\">`major`</ph> and <ph id=\"ph2\">`minor`</ph> are integers.","source":"Sets the metadata stream version, where `major` and `minor` are integers."},{"pos":[5199,5217],"content":"<bpt id=\"p1\">**</bpt>/noautoinherit<ept id=\"p1\">**</ept>","source":"**/noautoinherit**"},{"content":"Disables default inheritance from <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> when no base class is specified.","pos":[5218,5305],"source":"Disables default inheritance from <xref:System.Object> when no base class is specified."},{"pos":[5310,5324],"content":"<bpt id=\"p1\">**</bpt>/nocorstub<ept id=\"p1\">**</ept>","source":"**/nocorstub**"},{"content":"Suppresses generation of the CORExeMain stub.","pos":[5325,5370]},{"pos":[5375,5386],"content":"<bpt id=\"p1\">**</bpt>/nologo<ept id=\"p1\">**</ept>","source":"**/nologo**"},{"content":"Suppresses the Microsoft startup banner display.","pos":[5387,5435]},{"pos":[5440,5457],"content":"<bpt id=\"p1\">**</bpt>/output:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>22<ept id=\"p2\">*</ept>","source":"**/output:** *22*"},{"content":"Specifies the output file name and extension.","pos":[5458,5503]},{"content":"By default, the output file name is the same as the name of the first source file.","pos":[5504,5586]},{"content":"The default extension is .exe.","pos":[5587,5617]},{"content":"If you specify the <bpt id=\"p1\">**</bpt>/dll<ept id=\"p1\">**</ept> option, the default extension is .dll.","pos":[5618,5684],"source":" If you specify the **/dll** option, the default extension is .dll."},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept>  Specifying <bpt id=\"p2\">**</bpt>/output:<ept id=\"p2\">**</ept>myfile.dll does not set the <bpt id=\"p3\">**</bpt>/dll<ept id=\"p3\">**</ept> option.","pos":[5685,5763],"source":"**Note:**  Specifying **/output:**myfile.dll does not set the **/dll** option."},{"content":"If you do not specify <bpt id=\"p1\">**</bpt>/dll<ept id=\"p1\">**</ept>, the result will be an executable file named myfile.dll.","pos":[5764,5851],"source":" If you do not specify **/dll**, the result will be an executable file named myfile.dll."},{"pos":[5856,5869],"content":"<bpt id=\"p1\">**</bpt>/optimize<ept id=\"p1\">**</ept>","source":"**/optimize**"},{"content":"Optimizes long instructions to short.","pos":[5870,5907]},{"content":"For example, <ph id=\"ph1\">`br`</ph> to <ph id=\"ph2\">`br.s`</ph>.","pos":[5908,5936],"source":" For example, `br` to `br.s`."},{"pos":[5941,5950],"content":"<bpt id=\"p1\">**</bpt>/pe64<ept id=\"p1\">**</ept>","source":"**/pe64**"},{"content":"Creates a 64-bit image (PE32+).","pos":[5951,5982]},{"content":"If no target processor is specified, the default is <ph id=\"ph1\">`/itanium`</ph>.","pos":[5995,6058],"source":"If no target processor is specified, the default is `/itanium`."},{"pos":[6063,6071],"content":"<bpt id=\"p1\">**</bpt>/pdb<ept id=\"p1\">**</ept>","source":"**/pdb**"},{"content":"Creates a PDB file without enabling debug information tracking.","pos":[6072,6135]},{"pos":[6140,6150],"content":"<bpt id=\"p1\">**</bpt>/quiet<ept id=\"p1\">**</ept>","source":"**/quiet**"},{"content":"Specifies quiet mode; does not report assembly progress.","pos":[6151,6207]},{"pos":[6212,6237],"content":"<bpt id=\"p1\">**</bpt>/resource:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>file.res<ept id=\"p2\">*</ept>","source":"**/resource:** *file.res*"},{"content":"Includes the specified resource file in <ph id=\"ph1\">\\*</ph>.res format in the resulting .exe or .dll file.","pos":[6238,6327],"source":"Includes the specified resource file in \\*.res format in the resulting .exe or .dll file."},{"content":"Only one .res file can be specified with the <bpt id=\"p1\">**</bpt>/resource<ept id=\"p1\">**</ept> option.","pos":[6328,6394],"source":" Only one .res file can be specified with the **/resource** option."},{"pos":[6399,6421],"content":"<bpt id=\"p1\">**</bpt>/ssver<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><ph id=\"ph2\">`int`</ph>.<ph id=\"ph3\">`int`</ph>","source":"**/ssver**=`int`.`int`"},{"content":"Sets the subsystem version number in the NT optional header.","pos":[6422,6482]},{"content":"For <bpt id=\"p1\">**</bpt>/appcontainer<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>/arm<ept id=\"p2\">**</ept> the minimum version number is 6.02.","pos":[6483,6553],"source":" For **/appcontainer** and **/arm** the minimum version number is 6.02."},{"pos":[6558,6580],"content":"<bpt id=\"p1\">**</bpt>/stack<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><ph id=\"ph2\">`stackSize`</ph>","source":"**/stack**=`stackSize`"},{"pos":[6581,6656],"content":"Sets the SizeOfStackReserve value in the NT Optional header to <ph id=\"ph1\">`stackSize`</ph>.","source":"Sets the SizeOfStackReserve value in the NT Optional header to `stackSize`."},{"pos":[6661,6676],"content":"<bpt id=\"p1\">**</bpt>/stripreloc<ept id=\"p1\">**</ept>","source":"**/stripreloc**"},{"content":"Specifies that no base relocations are needed.","pos":[6677,6723]},{"pos":[6728,6752],"content":"<bpt id=\"p1\">**</bpt>/subsystem<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><bpt id=\"p2\">*</bpt>integer<ept id=\"p2\">*</ept>","source":"**/subsystem**=*integer*"},{"content":"Sets subsystem to the value specified by <bpt id=\"p1\">*</bpt>integer<ept id=\"p1\">*</ept> in the NT Optional header.","pos":[6753,6830],"source":"Sets subsystem to the value specified by *integer* in the NT Optional header."},{"content":"If the .subsystem IL directive is specified in the file, this command overrides it.","pos":[6831,6914]},{"content":"See winnt.h, IMAGE_SUBSYSTEM for a list of valid values for <bpt id=\"p1\">*</bpt>integer<ept id=\"p1\">*</ept>.","pos":[6915,6985],"source":" See winnt.h, IMAGE_SUBSYSTEM for a list of valid values for *integer*."},{"pos":[6990,6998],"content":"<bpt id=\"p1\">**</bpt>/x64<ept id=\"p1\">**</ept>","source":"**/x64**"},{"content":"Specifies a 64-bit AMD processor as the target processor.","pos":[6999,7056]},{"content":"If no image bitness is specified, the default is <bpt id=\"p1\">**</bpt>/pe64<ept id=\"p1\">**</ept>.","pos":[7069,7128],"source":"If no image bitness is specified, the default is **/pe64**."},{"pos":[7133,7139],"content":"<bpt id=\"p1\">**</bpt>/?<ept id=\"p1\">**</ept>","source":"**/?**"},{"content":"Displays command syntax and options for the tool.","pos":[7140,7189]},{"pos":[7198,7634],"content":"[!NOTE]\n All options for Ilasm.exe are case-insensitive and recognized by the first three letters. For example, **/lis** is equivalent to **/listing** and **/res:**myresfile.res is equivalent to **/resource:**myresfile.res. Options that specify arguments accept either a colon (:) or an equal sign (=) as the separator between the option and the argument. For example, **/output:** *file.ext* is equivalent to **/output=** *file.ext*.","leadings":["","> "],"nodes":[{"content":"All options for Ilasm.exe are case-insensitive and recognized by the first three letters. For example, **/lis** is equivalent to **/listing** and **/res:**myresfile.res is equivalent to **/resource:**myresfile.res. Options that specify arguments accept either a colon (:) or an equal sign (=) as the separator between the option and the argument. For example, **/output:** *file.ext* is equivalent to **/output=** *file.ext*.","pos":[9,434],"nodes":[{"content":"All options for Ilasm.exe are case-insensitive and recognized by the first three letters.","pos":[0,89]},{"content":"For example, <bpt id=\"p1\">**</bpt>/lis<ept id=\"p1\">**</ept> is equivalent to <bpt id=\"p2\">**</bpt>/listing<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>/res:<ept id=\"p3\">**</ept>myresfile.res is equivalent to <bpt id=\"p4\">**</bpt>/resource:<ept id=\"p4\">**</ept>myresfile.res.","pos":[90,214],"source":" For example, **/lis** is equivalent to **/listing** and **/res:**myresfile.res is equivalent to **/resource:**myresfile.res."},{"content":"Options that specify arguments accept either a colon (:) or an equal sign (=) as the separator between the option and the argument.","pos":[215,346]},{"content":"For example, <bpt id=\"p1\">**</bpt>/output:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>file.ext<ept id=\"p2\">*</ept> is equivalent to <bpt id=\"p3\">**</bpt>/output=<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>file.ext<ept id=\"p4\">*</ept>.","pos":[347,425],"source":" For example, **/output:** *file.ext* is equivalent to **/output=** *file.ext*."}]}]},{"pos":[7643,7650],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The IL Assembler helps tool vendors design and implement IL generators.","pos":[7654,7725]},{"content":"Using Ilasm.exe, tool and compiler developers can concentrate on IL and metadata generation without being concerned with emitting IL in the PE file format.","pos":[7726,7881]},{"content":"Similar to other compilers that target the runtime, such as C# and Visual Basic, Ilasm.exe does not produce intermediate object files and does not require a linking stage to form a PE file.","pos":[7888,8077]},{"content":"The IL Assembler can express all the existing metadata and IL features of the programming languages that target the runtime.","pos":[8084,8208]},{"content":"This allows managed code written in any of these programming languages to be adequately expressed in IL Assembler and compiled with Ilasm.exe.","pos":[8209,8351]},{"pos":[8359,8511],"content":"[!NOTE]\n Compilation might fail if the last line of code in the .il source file does not have either trailing white space or an end-of-line character.","leadings":["","> "],"nodes":[{"content":"Compilation might fail if the last line of code in the .il source file does not have either trailing white space or an end-of-line character.","pos":[9,150]}]},{"content":"You can use Ilasm.exe in conjunction with its companion tool, <bpt id=\"p1\">[</bpt>Ildasm.exe<ept id=\"p1\">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.","pos":[8518,8654],"source":"You can use Ilasm.exe in conjunction with its companion tool, [Ildasm.exe](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)."},{"content":"Ildasm.exe takes a PE file that contains IL code and creates a text file suitable as input to Ilasm.exe.","pos":[8655,8759]},{"content":"This is useful, for example, when compiling code in a programming language that does not support all the runtime metadata attributes.","pos":[8760,8893]},{"content":"After compiling the code and running the output through Ildasm.exe, the resulting IL text file can be hand-edited to add the missing attributes.","pos":[8894,9038]},{"content":"You can then run this text file through the Ilasm.exe to produce a final executable file.","pos":[9039,9128]},{"content":"You can also use this technique to produce a single PE file from several PE files originally generated by different compilers.","pos":[9135,9261]},{"pos":[9269,9416],"content":"[!NOTE]\n Currently, you cannot use this technique with PE files that contain embedded native code (for example, PE files produced by Visual C++).","leadings":["","> "],"nodes":[{"content":"Currently, you cannot use this technique with PE files that contain embedded native code (for example, PE files produced by Visual C++).","pos":[9,145]}]},{"content":"To make this combined use of Ildasm.exe and Ilasm.exe as accurate as possible, by default the assembler does not substitute short encodings for long ones you might have written in your IL sources (or that might be emitted by another compiler).","pos":[9423,9666]},{"content":"Use the <bpt id=\"p1\">**</bpt>/optimize<ept id=\"p1\">**</ept> option to substitute short encodings wherever possible.","pos":[9667,9744],"source":" Use the **/optimize** option to substitute short encodings wherever possible."},{"pos":[9752,9874],"content":"[!NOTE]\n Ildasm.exe only operates on files on disk. It does not operate on files installed in the global assembly cache.","leadings":["","> "],"nodes":[{"content":"Ildasm.exe only operates on files on disk. It does not operate on files installed in the global assembly cache.","pos":[9,120],"nodes":[{"content":"Ildasm.exe only operates on files on disk.","pos":[0,42]},{"content":"It does not operate on files installed in the global assembly cache.","pos":[43,111]}]}]},{"pos":[9881,10023],"content":"For more information about the grammar of IL, see the asmparse.grammar file in the <ph id=\"ph1\">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph>.","source":"For more information about the grammar of IL, see the asmparse.grammar file in the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]."},{"pos":[10032,10051],"content":"Version Information","linkify":"Version Information","nodes":[{"content":"Version Information","pos":[0,19]}]},{"pos":[10055,10231],"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, you can attach a custom attribute to an interface implementation by using code similar to the following:","source":"Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], you can attach a custom attribute to an interface implementation by using code similar to the following:"},{"pos":[10789,10996],"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, you can specify an arbitrary marshal BLOB (binary large object) by using its raw binary representation, as shown in the following code:","source":"Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], you can specify an arbitrary marshal BLOB (binary large object) by using its raw binary representation, as shown in the following code:"},{"pos":[11166,11308],"content":"For more information about the grammar of IL, see the asmparse.grammar file in the <ph id=\"ph1\">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph>.","source":"For more information about the grammar of IL, see the asmparse.grammar file in the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]."},{"pos":[11317,11325],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[11329,11434],"content":"The following command assembles the IL file <ph id=\"ph1\">`myTestFile.il`</ph> and produces the executable <ph id=\"ph2\">`myTestFile.exe.`</ph>","source":"The following command assembles the IL file `myTestFile.il` and produces the executable `myTestFile.exe.`"},{"pos":[11475,11579],"content":"The following command assembles the IL file <ph id=\"ph1\">`myTestFile.il`</ph> and produces the .dll file <ph id=\"ph2\">`myTestFile.dll`</ph>.","source":"The following command assembles the IL file `myTestFile.il` and produces the .dll file `myTestFile.dll`."},{"pos":[11626,11733],"content":"The following command assembles the IL file <ph id=\"ph1\">`myTestFile.il`</ph> and produces the .dll file <ph id=\"ph2\">`myNewTestFile.dll`</ph>.","source":"The following command assembles the IL file `myTestFile.il` and produces the .dll file `myNewTestFile.dll`."},{"content":"The following code example shows an extremely simple application that displays \"Hello World!\"","pos":[11805,11898]},{"content":"to the console.","pos":[11899,11914]},{"content":"You can compile this code and then use the <bpt id=\"p1\">[</bpt>Ildasm.exe<ept id=\"p1\">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> tool to generate an IL file.","pos":[11916,12061],"source":"  You can compile this code and then use the [Ildasm.exe](../../../docs/framework/tools/ildasm-exe-il-disassembler.md) tool to generate an IL file."},{"content":"The following IL code example corresponds to the previous C# code example.","pos":[12240,12314]},{"content":"You can compile this code into an assembly using the IL Assembler tool.","pos":[12316,12387]},{"content":"Both IL and C# code examples display \"Hello World!\"","pos":[12389,12440]},{"content":"to the console.","pos":[12441,12456]},{"pos":[14006,14014],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Tools<ept id=\"p1\">](../../../docs/framework/tools/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[14018,14066],"source":"[Tools](../../../docs/framework/tools/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept><ph id=\"ph1\"> </ph>","pos":[14070,14162],"source":"[Ildasm.exe (IL Disassembler)](../../../docs/framework/tools/ildasm-exe-il-disassembler.md) "},{"content":"<bpt id=\"p1\">[</bpt>Managed Execution Process<ept id=\"p1\">](../../../docs/standard/managed-execution-process.md)</ept><ph id=\"ph1\"> </ph>","pos":[14166,14247],"source":"[Managed Execution Process](../../../docs/standard/managed-execution-process.md) "},{"content":"<bpt id=\"p1\">[</bpt>Command Prompts<ept id=\"p1\">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>","pos":[14251,14334],"source":"[Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md)"}]}