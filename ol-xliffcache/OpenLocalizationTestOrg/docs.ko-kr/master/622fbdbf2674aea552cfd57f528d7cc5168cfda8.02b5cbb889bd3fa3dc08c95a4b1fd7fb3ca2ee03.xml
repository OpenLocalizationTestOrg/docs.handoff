{"content":"---\ntitle: \"Using JSONP\"\nms.date: \"03/30/2017\"\nms.assetid: f386718c-b4ba-4931-a610-40c27a46672a\n---\n\n# Using JSONP\n\nJSON Padding (JSONP) is a mechanism that enables cross-site scripting support in Web browsers. JSONP is designed around the ability of Web browsers to load scripts from a site different from the one the current loaded document was retrieved from. The mechanism works by padding the JSON payload with a user-defined callback function name, as shown in the following example.\n\n```javascript\ncallback({\"a\" = \\\\\"b\\\\\"});\n```\n\nIn the preceding example the JSON payload, `{\"a\" = \\\\\"b\\\\\"}`, is wrapped in a function call, `callback`. The callback function must already be defined in the current Web page. The content type of a JSONP response is `application/javascript`.\n\nJSONP is not automatically enabled. To enable it, set the `javascriptCallbackEnabled` attribute to `true` on one of the HTTP standard endpoints (<xref:System.ServiceModel.Description.WebHttpEndpoint> or <xref:System.ServiceModel.Description.WebScriptEndpoint>), as shown in the following example.\n\n```xml\n<system.serviceModel>\n  <standardEndpoints>\n    <webHttpEndpoint>\n      <standardEndpoint name=\"\" javascriptCallbackEnabled=\"true\"/>\n    </webHttpEndpoint>\n  </standardEndpoints>\n</system.serviceModel>\n```\n\nThe name of the callback function can be specified in a query variable called callback as shown in the following URL.\n\n`http://baseaddress/Service/RestService?callback=functionName`\n\nWhen invoked, the service sends a response like the following.\n\n```javascript\nfunctionName({\"root\":\"Something\"});\n```  \n\nYou can also specify the callback function name by applying the <xref:System.ServiceModel.Web.JavascriptCallbackBehaviorAttribute> to the service class, as shown in the following example.\n\n```csharp\n[ServiceContract]\n[JavascriptCallbackBehavior(ParameterName = \"$callback\")]\npublic class Service1\n{\n    [OperationContract]\n    [WebGet(ResponseFormat=WebMessageFormat.Json)]\n    public string GetData()\n    {\n    }\n}\n```\n\nFor the service shown previously, a request looks like the following.\n\n`http://baseaddress/Service/RestService?$callback=anotherFunction`\n\nWhen invoked, the service responds with the following.\n\n```javascript\nanotherFunction ({\"root\":\"Something\"});\n```\n\n## HTTP Status Codes\n\nJSONP responses with HTTP status codes other than 200 include a second parameter with the numeric representation of the HTTP status code, as shown in the following example.\n\n```javascript\nanotherFunction ({\"root\":\"Something\"}, 201);\n```\n\n## Validations\n\nThe following validations are performed when JSONP is enabled:\n\n- The WCF infrastructure throws an exception if `javascriptCallback` is enabled, a callback query-string parameter is present in the request and the response format is set to JSON.\n\n- If the request contains the callback query string parameter but the operation is not an HTTP GET, the callback parameter is ignored.\n\n- If the callback name is `null` or empty string the response is not formatted as JSONP.\n\n## See also\n\n- [WCF Web HTTP Programming Model Overview](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)\n","nodes":[{"pos":[4,95],"embed":true,"restype":"x-metadata","content":"title: \"Using JSONP\"\nms.date: \"03/30/2017\"\nms.assetid: f386718c-b4ba-4931-a610-40c27a46672a","nodes":[{"content":"Using JSONP","nodes":[{"pos":[0,11],"content":"Using JSONP","nodes":[{"content":"Using JSONP","pos":[0,11]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[103,114],"content":"Using JSONP","linkify":"Using JSONP","nodes":[{"content":"Using JSONP","pos":[0,11]}]},{"content":"JSON Padding (JSONP) is a mechanism that enables cross-site scripting support in Web browsers.","pos":[116,210]},{"content":"JSONP is designed around the ability of Web browsers to load scripts from a site different from the one the current loaded document was retrieved from.","pos":[211,362]},{"content":"The mechanism works by padding the JSON payload with a user-defined callback function name, as shown in the following example.","pos":[363,489]},{"content":"In the preceding example the JSON payload, <ph id=\"ph1\">`{\"a\" = \\\\\"b\\\\\"}`</ph>, is wrapped in a function call, <ph id=\"ph2\">`callback`</ph>.","pos":[537,641],"source":"In the preceding example the JSON payload, `{\"a\" = \\\\\"b\\\\\"}`, is wrapped in a function call, `callback`."},{"content":"The callback function must already be defined in the current Web page.","pos":[642,712]},{"content":"The content type of a JSONP response is <ph id=\"ph1\">`application/javascript`</ph>.","pos":[713,778],"source":" The content type of a JSONP response is `application/javascript`."},{"content":"JSONP is not automatically enabled.","pos":[780,815]},{"content":"To enable it, set the <ph id=\"ph1\">`javascriptCallbackEnabled`</ph> attribute to <ph id=\"ph2\">`true`</ph> on one of the HTTP standard endpoints (<ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.WebHttpEndpoint&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.ServiceModel.Description.WebScriptEndpoint&gt;</ph>), as shown in the following example.","pos":[816,1076],"source":" To enable it, set the `javascriptCallbackEnabled` attribute to `true` on one of the HTTP standard endpoints (<xref:System.ServiceModel.Description.WebHttpEndpoint> or <xref:System.ServiceModel.Description.WebScriptEndpoint>), as shown in the following example."},{"content":"The name of the callback function can be specified in a query variable called callback as shown in the following URL.","pos":[1292,1409]},{"content":"When invoked, the service sends a response like the following.","pos":[1475,1537]},{"pos":[1596,1783],"content":"You can also specify the callback function name by applying the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Web.JavascriptCallbackBehaviorAttribute&gt;</ph> to the service class, as shown in the following example.","source":"You can also specify the callback function name by applying the <xref:System.ServiceModel.Web.JavascriptCallbackBehaviorAttribute> to the service class, as shown in the following example."},{"content":"For the service shown previously, a request looks like the following.","pos":[2017,2086]},{"content":"When invoked, the service responds with the following.","pos":[2156,2210]},{"pos":[2274,2291],"content":"HTTP Status Codes","linkify":"HTTP Status Codes","nodes":[{"content":"HTTP Status Codes","pos":[0,17]}]},{"content":"JSONP responses with HTTP status codes other than 200 include a second parameter with the numeric representation of the HTTP status code, as shown in the following example.","pos":[2293,2465]},{"pos":[2534,2545],"content":"Validations","linkify":"Validations","nodes":[{"content":"Validations","pos":[0,11]}]},{"content":"The following validations are performed when JSONP is enabled:","pos":[2547,2609]},{"pos":[2613,2791],"content":"The WCF infrastructure throws an exception if <ph id=\"ph1\">`javascriptCallback`</ph> is enabled, a callback query-string parameter is present in the request and the response format is set to JSON.","source":"The WCF infrastructure throws an exception if `javascriptCallback` is enabled, a callback query-string parameter is present in the request and the response format is set to JSON."},{"content":"If the request contains the callback query string parameter but the operation is not an HTTP GET, the callback parameter is ignored.","pos":[2795,2927]},{"pos":[2931,3017],"content":"If the callback name is <ph id=\"ph1\">`null`</ph> or empty string the response is not formatted as JSONP.","source":"If the callback name is `null` or empty string the response is not formatted as JSONP."},{"pos":[3022,3030],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3034,3166],"content":"<bpt id=\"p1\">[</bpt>WCF Web HTTP Programming Model Overview<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)</ept>","source":"[WCF Web HTTP Programming Model Overview](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)"}]}