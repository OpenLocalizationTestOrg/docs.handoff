{"content":"---\ntitle: \"How to: Use a Class that Defines Operators (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"operator procedures [Visual Basic], calling\"\n  - \"procedures [Visual Basic], operator\"\n  - \"procedures [Visual Basic], calling\"\n  - \"examples [Visual Basic], CType\"\n  - \"syntax [Visual Basic], Operator procedures\"\n  - \"operators [Visual Basic], overloading\"\n  - \"return values [Visual Basic], Operator procedures\"\n  - \"operator overloading\"\nms.assetid: 7ccce94a-6ca0-47d1-9f3f-13385d34f5d5\n---\n# How to: Use a Class that Defines Operators (Visual Basic)\nIf you are using a class or structure that defines its own operators, you can access those operators from Visual Basic.  \n  \n Defining an operator on a class or structure is also called *overloading* the operator.  \n  \n## Example  \n The following example accesses the SQL structure <xref:System.Data.SqlTypes.SqlString>, which defines the conversion operators ([CType Function](../../../../visual-basic/language-reference/functions/ctype-function.md)) in both directions between a SQL string and a Visual Basic string. Use `CType(`*SQL string expression*, `String)` to convert a SQL string to a Visual Basic string, and `CType(`*Visual Basic string expression*, <xref:System.Data.SqlTypes.SqlString>`)` to convert in the other direction.  \n  \n [!code-vb[VbVbcnProcedures#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnProcedures/VB/Class1.vb#30)]  \n  \n [!code-vb[VbVbcnProcedures#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnProcedures/VB/Class1.vb#31)]  \n  \n The <xref:System.Data.SqlTypes.SqlString> structure defines a conversion operator ([CType Function](../../../../visual-basic/language-reference/functions/ctype-function.md)) from `String` to <xref:System.Data.SqlTypes.SqlString> and another from <xref:System.Data.SqlTypes.SqlString> to `String`. The statement that assigns `title` to `jobTitle` makes use of the first operator, and the <xref:Microsoft.VisualBasic.Interaction.MsgBox%2A> function call uses the second.  \n  \n## Compiling the Code  \n Be sure the class or structure you are using defines the operator you want to use. Do not assume that the class or structure has defined every operator available for overloading. For a list of available operators, see [Operator Statement](../../../../visual-basic/language-reference/statements/operator-statement.md).  \n  \n Include the appropriate `Imports` statement for the SQL string at the beginning of your source file (in this case <xref:System.Data.SqlTypes>).  \n  \n Your project must have references to System.Data and System.XML.  \n  \n## See also\n\n- [Operator Procedures](./operator-procedures.md)\n- [How to: Define an Operator](./how-to-define-an-operator.md)\n- [How to: Define a Conversion Operator](./how-to-define-a-conversion-operator.md)\n- [How to: Call an Operator Procedure](./how-to-call-an-operator-procedure.md)\n- [Widening](../../../../visual-basic/language-reference/modifiers/widening.md)\n- [Narrowing](../../../../visual-basic/language-reference/modifiers/narrowing.md)\n- [Structure Statement](../../../../visual-basic/language-reference/statements/structure-statement.md)\n- [How to: Declare a Structure](../../../../visual-basic/programming-guide/language-features/data-types/how-to-declare-a-structure.md)\n- [Implicit and Explicit Conversions](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)\n- [Widening and Narrowing Conversions](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)\n","nodes":[{"pos":[4,507],"embed":true,"restype":"x-metadata","content":"title: \"How to: Use a Class that Defines Operators (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"operator procedures [Visual Basic], calling\"\n  - \"procedures [Visual Basic], operator\"\n  - \"procedures [Visual Basic], calling\"\n  - \"examples [Visual Basic], CType\"\n  - \"syntax [Visual Basic], Operator procedures\"\n  - \"operators [Visual Basic], overloading\"\n  - \"return values [Visual Basic], Operator procedures\"\n  - \"operator overloading\"\nms.assetid: 7ccce94a-6ca0-47d1-9f3f-13385d34f5d5","nodes":[{"content":"How to: Use a Class that Defines Operators (Visual Basic)","nodes":[{"pos":[0,57],"content":"How to: Use a Class that Defines Operators (Visual Basic)","nodes":[{"content":"How to: Use a Class that Defines Operators (Visual Basic)","pos":[0,57]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[514,571],"content":"How to: Use a Class that Defines Operators (Visual Basic)","linkify":"How to: Use a Class that Defines Operators (Visual Basic)","nodes":[{"content":"How to: Use a Class that Defines Operators (Visual Basic)","pos":[0,57]}]},{"content":"If you are using a class or structure that defines its own operators, you can access those operators from Visual Basic.","pos":[572,691]},{"pos":[698,785],"content":"Defining an operator on a class or structure is also called <bpt id=\"p1\">*</bpt>overloading<ept id=\"p1\">*</ept> the operator.","source":"Defining an operator on a class or structure is also called *overloading* the operator."},{"pos":[794,801],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example accesses the SQL structure <ph id=\"ph1\">&lt;xref:System.Data.SqlTypes.SqlString&gt;</ph>, which defines the conversion operators (<bpt id=\"p1\">[</bpt>CType Function<ept id=\"p1\">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept>) in both directions between a SQL string and a Visual Basic string.","pos":[805,1090],"source":"The following example accesses the SQL structure <xref:System.Data.SqlTypes.SqlString>, which defines the conversion operators ([CType Function](../../../../visual-basic/language-reference/functions/ctype-function.md)) in both directions between a SQL string and a Visual Basic string."},{"content":"Use <ph id=\"ph1\">`CType(`</ph><bpt id=\"p1\">*</bpt>SQL string expression<ept id=\"p1\">*</ept>, <ph id=\"ph2\">`String)`</ph> to convert a SQL string to a Visual Basic string, and <ph id=\"ph3\">`CType(`</ph><bpt id=\"p2\">*</bpt>Visual Basic string expression<ept id=\"p2\">*</ept>, <ph id=\"ph4\">&lt;xref:System.Data.SqlTypes.SqlString&gt;</ph><ph id=\"ph5\">`)`</ph> to convert in the other direction.","pos":[1091,1309],"source":" Use `CType(`*SQL string expression*, `String)` to convert a SQL string to a Visual Basic string, and `CType(`*Visual Basic string expression*, <xref:System.Data.SqlTypes.SqlString>`)` to convert in the other direction."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlTypes.SqlString&gt;</ph> structure defines a conversion operator (<bpt id=\"p1\">[</bpt>CType Function<ept id=\"p1\">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept>) from <ph id=\"ph2\">`String`</ph> to <ph id=\"ph3\">&lt;xref:System.Data.SqlTypes.SqlString&gt;</ph> and another from <ph id=\"ph4\">&lt;xref:System.Data.SqlTypes.SqlString&gt;</ph> to <ph id=\"ph5\">`String`</ph>.","pos":[1564,1860],"source":"The <xref:System.Data.SqlTypes.SqlString> structure defines a conversion operator ([CType Function](../../../../visual-basic/language-reference/functions/ctype-function.md)) from `String` to <xref:System.Data.SqlTypes.SqlString> and another from <xref:System.Data.SqlTypes.SqlString> to `String`."},{"content":"The statement that assigns <ph id=\"ph1\">`title`</ph> to <ph id=\"ph2\">`jobTitle`</ph> makes use of the first operator, and the <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt;</ph> function call uses the second.","pos":[1861,2032],"source":" The statement that assigns `title` to `jobTitle` makes use of the first operator, and the <xref:Microsoft.VisualBasic.Interaction.MsgBox%2A> function call uses the second."},{"pos":[2041,2059],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"Be sure the class or structure you are using defines the operator you want to use.","pos":[2063,2145]},{"content":"Do not assume that the class or structure has defined every operator available for overloading.","pos":[2146,2241]},{"content":"For a list of available operators, see <bpt id=\"p1\">[</bpt>Operator Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/operator-statement.md)</ept>.","pos":[2242,2380],"source":" For a list of available operators, see [Operator Statement](../../../../visual-basic/language-reference/statements/operator-statement.md)."},{"pos":[2387,2530],"content":"Include the appropriate <ph id=\"ph1\">`Imports`</ph> statement for the SQL string at the beginning of your source file (in this case <ph id=\"ph2\">&lt;xref:System.Data.SqlTypes&gt;</ph>).","source":"Include the appropriate `Imports` statement for the SQL string at the beginning of your source file (in this case <xref:System.Data.SqlTypes>)."},{"content":"Your project must have references to System.Data and System.XML.","pos":[2537,2601]},{"pos":[2610,2618],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2622,2669],"content":"<bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](./operator-procedures.md)</ept>","source":"[Operator Procedures](./operator-procedures.md)"},{"pos":[2672,2732],"content":"<bpt id=\"p1\">[</bpt>How to: Define an Operator<ept id=\"p1\">](./how-to-define-an-operator.md)</ept>","source":"[How to: Define an Operator](./how-to-define-an-operator.md)"},{"pos":[2735,2815],"content":"<bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](./how-to-define-a-conversion-operator.md)</ept>","source":"[How to: Define a Conversion Operator](./how-to-define-a-conversion-operator.md)"},{"pos":[2818,2894],"content":"<bpt id=\"p1\">[</bpt>How to: Call an Operator Procedure<ept id=\"p1\">](./how-to-call-an-operator-procedure.md)</ept>","source":"[How to: Call an Operator Procedure](./how-to-call-an-operator-procedure.md)"},{"pos":[2897,2974],"content":"<bpt id=\"p1\">[</bpt>Widening<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/widening.md)</ept>","source":"[Widening](../../../../visual-basic/language-reference/modifiers/widening.md)"},{"pos":[2977,3056],"content":"<bpt id=\"p1\">[</bpt>Narrowing<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/narrowing.md)</ept>","source":"[Narrowing](../../../../visual-basic/language-reference/modifiers/narrowing.md)"},{"pos":[3059,3159],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[3162,3294],"content":"<bpt id=\"p1\">[</bpt>How to: Declare a Structure<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/how-to-declare-a-structure.md)</ept>","source":"[How to: Declare a Structure](../../../../visual-basic/programming-guide/language-features/data-types/how-to-declare-a-structure.md)"},{"pos":[3297,3442],"content":"<bpt id=\"p1\">[</bpt>Implicit and Explicit Conversions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>","source":"[Implicit and Explicit Conversions](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)"},{"pos":[3445,3592],"content":"<bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>","source":"[Widening and Narrowing Conversions](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)"}]}