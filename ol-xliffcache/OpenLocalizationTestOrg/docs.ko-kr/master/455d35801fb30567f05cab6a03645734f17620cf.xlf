<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">455d35801fb30567f05cab6a03645734f17620cf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\user-drawn-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2d2ce3454a6a6a9280393afa8717e45c3ab09da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8205e8f37622698c962b221467c013e05d13e1fb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>User-Drawn Controls | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>User-Drawn Controls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides you with the ability to easily develop your own controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can create a user control, which is a set of standard controls bound together by code, or you can design your own control from the ground up.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can even use inheritance to create a control that inherits from an existing control and add to its inherent functionality.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Whatever approach you use, the .NET Framework provides the functionality to draw a custom graphical interface for any control you create.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Painting of a control is accomplished by the execution of code in the control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The single argument of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method is a <ph id="ph2">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> object that provides all of the information and functionality required to render your control.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> provides as properties two principal objects that will be used in the rendering of your control:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> object - the rectangle that represents the part of the control that will be drawn.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This can be the entire control, or part of the control depending on how the control is drawn.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object - encapsulates several graphics-oriented objects and methods that provide the functionality necessary to draw your control.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information on the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object and how to use it, see <bpt id="p1">[</bpt>How to: Create Graphics Objects for Drawing<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> event is fired whenever the control is drawn or refreshed on the screen, and the <ph id="ph2">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> object represents the rectangle in which painting will take place.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the entire control needs to be refreshed, the <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> will represent the size of the entire control.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If only part of the control needs to be refreshed, however, the <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs.ClipRectangle%2A&gt;</ph> object will represent only the region that needs to be redrawn.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An example of such a case would be when a control was partially obscured by another control or form in the user interface.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When inheriting from the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class, you must override the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method and provide graphics-rendering code within.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you want to provide a custom graphical interface to a user control or an inherited control, you can also do so by overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An example is shown below:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The preceding example demonstrates how to render a control with a very simple graphical representation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method of the base class, it creates a <ph id="ph2">&lt;xref:System.Drawing.Pen&gt;</ph> object with which to draw, and finally draws an ellipse in the rectangle determined by the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Although most rendering code will be significantly more complicated than this, this example demonstrates the use of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object contained within the <ph id="ph2">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that if you are inheriting from a class that already has a graphical representation, such as <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>, and you do not wish to incorporate that representation into your rendering, you should not call your base class's <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The code in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method of your control will execute when the control is first drawn, and whenever it is refreshed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To ensure that your control is redrawn every time it is resized, add the following line to the constructor of your control:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Region%2A?displayProperty=fullName&gt;</ph> property to implement a non-rectangular control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create Graphics Objects for Drawing<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Constituent Controls<ept id="p1">](../../../../docs/framework/winforms/controls/constituent-controls.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Varieties of Custom Controls<ept id="p1">](../../../../docs/framework/winforms/controls/varieties-of-custom-controls.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>