<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b158355fe0d2ed253cff3a0ffbc4dfdfc78ed41</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\expression-trees-explained.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50c2b4785f36c9ebb2276a8a34bc7499f7f74478</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5c394f4be37211a039be6405427c41216ba8010</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Expression Trees Explained</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Expression Trees Explained</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Expression Trees Explained</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous -- Overview<ept id="p1">](expression-trees.md)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An Expression Tree is a data structure that defines code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>They are based on the same structures that a compiler uses to analyze code and generate the compiled output.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As you read through this tutorial, you will notice quite a bit of similarity between Expression Trees and the types used in the Roslyn APIs to build <bpt id="p1">[</bpt>Analyzers and CodeFixes<ept id="p1">](https://github.com/dotnet/roslyn-analyzers)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>(Analyzers and CodeFixes are NuGet packages that perform static analysis on code and can suggest potential fixes for a developer.) The concepts are similar, and the end result is a data structure that allows examination of the source code in a meaningful way.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, Expression Trees are based on a totally different set of classes and APIs than the Roslyn APIs.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Let's look at a simple example.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Here's a line of code:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you were to analyze this as an expression tree, the tree contains several nodes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The outermost node is a variable declaration statement with assignment (<ph id="ph1">`var sum = 1 + 2;`</ph>) That outermost node contains several child nodes: a variable declaration, an assignment operator, and an expression representing the right hand side of the equals sign.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>That expression is further subdivided into expressions that represent the addition operation, and left and right operands of the addition.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Let's drill down a bit more into the expressions that make up the right side of the equals sign.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The expression is <ph id="ph1">`1 + 2`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>That's a binary expression.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>More specifically, it's a binary addition expression.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A binary addition expression has two children, representing the left and right nodes of the addition expression.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Here, both nodes are constant expressions: The left operand is the value <ph id="ph1">`1`</ph>, and the right operand is the value <ph id="ph2">`2`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Visually, the entire statement is a tree: You could start at the root node, and travel to each node in the tree to see the code that makes up the statement:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Variable declaration statement with assignment (<ph id="ph1">`var sum = 1 + 2;`</ph>)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Implicit variable type declaration (<ph id="ph1">`var sum`</ph>)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Implicit var keyword (<ph id="ph1">`var`</ph>)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Variable name declaration (<ph id="ph1">`sum`</ph>)</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Assignment operator (<ph id="ph1">`=`</ph>)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Binary addition expression (<ph id="ph1">`1 + 2`</ph>)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Left operand (<ph id="ph1">`1`</ph>)</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Addition operator (<ph id="ph1">`+`</ph>)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Right operand (<ph id="ph1">`2`</ph>)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This may look complicated, but it is very powerful.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Following the same process, you can decompose much more complicated expressions.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Consider this expression:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The expression above is also a variable declaration with an assignment.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this instance, the right hand side of the assignment is a much more complicated tree.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>I'm not going to decompose this expression, but consider what the different nodes might be.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There are method calls using the current object as a receiver, one that has an explicit <ph id="ph1">`this`</ph> receiver, one that does not.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>There are method calls using other receiver objects, there are constant arguments of different types.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>And finally, there is a binary addition operator.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Depending on the return type of <ph id="ph1">`SecretSauceFunction()`</ph> or <ph id="ph2">`MoreSecretSauce()`</ph>, that binary addition operator may be a method call to an overridden addition operator, resolving to a static method call to the binary addition operator defined for a class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Despite this perceived complexity, the expression above creates a tree structure that can be navigated as easily as the first sample.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can keep traversing child nodes to find leaf nodes in the expression.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parent nodes will have references to their children, and each node has a property that describes what kind of node it is.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The structure of an expression tree is very consistent.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Once you've learned the basics, you can understand even the most complex code when it is represented as an expression tree.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The elegance in the data structure explains how the C# compiler can analyze the most complex C# programs and create proper output from that complicated source code.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Once you become familiar with the structure of expression trees, you will find that knowledge you've gained quickly enables you to work with many more and more advanced scenarios.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>There is incredible power to expression trees.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In addition to translating algorithms to execute in other environments, expression trees can be used to make it easier to write algorithms that inspect code before executing it.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can write a method whose arguments are expressions and then examine those expressions before executing the code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Expression Tree is a full representation of the code: you can see values of any sub-expression.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can see method and property names.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can see the value of any constant expressions.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can also convert an expression tree into an executable delegate, and execute the code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The APIs for Expression Trees enable you to create trees that represent almost any valid code construct.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>However, to keep things as simple as possible, some C# idioms cannot be created in an expression tree.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>One example is asynchronous expressions (using the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If your needs require asynchronous algorithms, you would need to manipulate the <ph id="ph1">`Task`</ph> objects directly, rather than rely on the compiler support.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Another is in creating loops.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Typically, you create these by using <ph id="ph1">`for`</ph>, <ph id="ph2">`foreach`</ph>, <ph id="ph3">`while`</ph> or <ph id="ph4">`do`</ph> loops.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>As you'll see <bpt id="p1">[</bpt>later in this series<ept id="p1">](expression-trees-building.md)</ept>, the APIs for expression trees support a single loop expression, with <ph id="ph1">`break`</ph> and <ph id="ph2">`continue`</ph> expressions that control repeating the loop.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The one thing you can't do is modify an expression tree.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Expression Trees are immutable data structures.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you want to mutate (change) an expression tree, you must create a new tree that is a copy of the original, but with your desired changes.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Next -- Framework Types Supporting Expression Trees<ept id="p1">](expression-classes.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>