{"content":"---\ntitle: \"How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"delegates [C#], declaring and instantiating\"\nms.assetid: 61c4895f-f785-48f8-8bfe-db73b411c4ae\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide)\nIn C# 1.0 and later, delegates can be declared as shown in the following example.  \n  \n [!code-cs[csProgGuideDelegates#13](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_1.cs)]  \n  \n [!code-cs[csProgGuideDelegates#14](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_2.cs)]  \n  \n C# 2.0 provides a simpler way to write the previous declaration, as shown in the following example.  \n  \n [!code-cs[csProgGuideDelegates#32](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_3.cs)]  \n  \n In C# 2.0 and later, it is also possible to use an anonymous method to declare and initialize a [delegate](../../../csharp/language-reference/keywords/delegate.md), as shown in the following example.  \n  \n [!code-cs[csProgGuideDelegates#15](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_4.cs)]  \n  \n In C# 3.0 and later, delegates can also be declared and instantiated by using a lambda expression, as shown in the following example.  \n  \n [!code-cs[csProgGuideDelegates#31](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_5.cs)]  \n  \n For more information, see [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).  \n  \n The following example illustrates declaring, instantiating, and using a delegate. The `BookDB` class encapsulates a bookstore database that maintains a database of books. It exposes a method, `ProcessPaperbackBooks`, which finds all paperback books in the database and calls a delegate for each one. The `delegate` type that is used is named `ProcessBookDelegate`. The `Test` class uses this class to print the titles and average price of the paperback books.  \n  \n The use of delegates promotes good separation of functionality between the bookstore database and the client code. The client code has no knowledge of how the books are stored or how the bookstore code finds paperback books. The bookstore code has no knowledge of what processing is performed on the paperback books after it finds them.  \n  \n## Example  \n [!code-cs[csProgGuideDelegates#12](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_6.cs)]  \n  \n## Robust Programming  \n  \n-   Declaring a delegate.  \n  \n     The following statement declares a new delegate type.  \n  \n     [!code-cs[csProgGuideDelegates#16](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_7.cs)]  \n  \n     Each delegate type describes the number and types of the arguments, and the type of the return value of methods that it can encapsulate. Whenever a new set of argument types or return value type is needed, a new delegate type must be declared.  \n  \n-   Instantiating a delegate.  \n  \n     After a delegate type has been declared, a delegate object must be created and associated with a particular method. In the previous example, you do this by passing the `PrintTitle` method to the `ProcessPaperbackBooks` method as in the following example:  \n  \n     [!code-cs[csProgGuideDelegates#17](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_8.cs)]  \n  \n     This creates a new delegate object associated with the [static](../../../csharp/language-reference/keywords/static.md) method `Test.PrintTitle`. Similarly, the non-static method `AddBookToTotal` on the object `totaller` is passed as in the following example:  \n  \n     [!code-cs[csProgGuideDelegates#18](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_9.cs)]  \n  \n     In both cases a new delegate object is passed to the `ProcessPaperbackBooks` method.  \n  \n     After a delegate is created, the method it is associated with never changes; delegate objects are immutable.  \n  \n-   Calling a delegate.  \n  \n     After a delegate object is created, the delegate object is typically passed to other code that will call the delegate. A delegate object is called by using the name of the delegate object, followed by the parenthesized arguments to be passed to the delegate. Following is an example of a delegate call:  \n  \n     [!code-cs[csProgGuideDelegates#19](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_10.cs)]  \n  \n     A delegate can be either called synchronously, as in this example, or asynchronously by using `BeginInvoke` and `EndInvoke` methods.  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Events](../../../csharp/programming-guide/events/index.md)   \n [Delegates](../../../csharp/programming-guide/delegates/index.md)","nodes":[{"pos":[12,100],"content":"How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide) | Microsoft Docs","pos":[0,88]}]},{"pos":[600,671],"content":"How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide)","linkify":"How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide)","nodes":[{"content":"How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide)","pos":[0,71]}]},{"content":"In C# 1.0 and later, delegates can be declared as shown in the following example.","pos":[672,753]},{"pos":[760,910],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#13<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#13](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_1.cs)]"},{"pos":[917,1067],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#14<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#14](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_2.cs)]"},{"content":"C# 2.0 provides a simpler way to write the previous declaration, as shown in the following example.","pos":[1074,1173]},{"pos":[1180,1330],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#32<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#32](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_3.cs)]"},{"pos":[1337,1536],"content":"In C# 2.0 and later, it is also possible to use an anonymous method to declare and initialize a <bpt id=\"p1\">[</bpt>delegate<ept id=\"p1\">](../../../csharp/language-reference/keywords/delegate.md)</ept>, as shown in the following example.","source":"In C# 2.0 and later, it is also possible to use an anonymous method to declare and initialize a [delegate](../../../csharp/language-reference/keywords/delegate.md), as shown in the following example."},{"pos":[1543,1693],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#15<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#15](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_4.cs)]"},{"content":"In C# 3.0 and later, delegates can also be declared and instantiated by using a lambda expression, as shown in the following example.","pos":[1700,1833]},{"pos":[1840,1990],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#31<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_5.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#31](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_5.cs)]"},{"pos":[1997,2134],"content":"For more information, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.","source":"For more information, see [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)."},{"content":"The following example illustrates declaring, instantiating, and using a delegate.","pos":[2141,2222]},{"content":"The <ph id=\"ph1\">`BookDB`</ph> class encapsulates a bookstore database that maintains a database of books.","pos":[2223,2311],"source":" The `BookDB` class encapsulates a bookstore database that maintains a database of books."},{"content":"It exposes a method, <ph id=\"ph1\">`ProcessPaperbackBooks`</ph>, which finds all paperback books in the database and calls a delegate for each one.","pos":[2312,2440],"source":" It exposes a method, `ProcessPaperbackBooks`, which finds all paperback books in the database and calls a delegate for each one."},{"content":"The <ph id=\"ph1\">`delegate`</ph> type that is used is named <ph id=\"ph2\">`ProcessBookDelegate`</ph>.","pos":[2441,2505],"source":" The `delegate` type that is used is named `ProcessBookDelegate`."},{"content":"The <ph id=\"ph1\">`Test`</ph> class uses this class to print the titles and average price of the paperback books.","pos":[2506,2600],"source":" The `Test` class uses this class to print the titles and average price of the paperback books."},{"content":"The use of delegates promotes good separation of functionality between the bookstore database and the client code.","pos":[2607,2721]},{"content":"The client code has no knowledge of how the books are stored or how the bookstore code finds paperback books.","pos":[2722,2831]},{"content":"The bookstore code has no knowledge of what processing is performed on the paperback books after it finds them.","pos":[2832,2943]},{"pos":[2952,2959],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2963,3113],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#12<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_6.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#12](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_6.cs)]"},{"pos":[3122,3140],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"Declaring a delegate.","pos":[3150,3171]},{"content":"The following statement declares a new delegate type.","pos":[3182,3235]},{"pos":[3246,3396],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#16<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_7.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#16](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_7.cs)]"},{"content":"Each delegate type describes the number and types of the arguments, and the type of the return value of methods that it can encapsulate.","pos":[3407,3543]},{"content":"Whenever a new set of argument types or return value type is needed, a new delegate type must be declared.","pos":[3544,3650]},{"content":"Instantiating a delegate.","pos":[3660,3685]},{"content":"After a delegate type has been declared, a delegate object must be created and associated with a particular method.","pos":[3696,3811]},{"content":"In the previous example, you do this by passing the <ph id=\"ph1\">`PrintTitle`</ph> method to the <ph id=\"ph2\">`ProcessPaperbackBooks`</ph> method as in the following example:","pos":[3812,3950],"source":" In the previous example, you do this by passing the `PrintTitle` method to the `ProcessPaperbackBooks` method as in the following example:"},{"pos":[3961,4111],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#17<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_8.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#17](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_8.cs)]"},{"content":"This creates a new delegate object associated with the <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept> method <ph id=\"ph1\">`Test.PrintTitle`</ph>.","pos":[4122,4266],"source":"This creates a new delegate object associated with the [static](../../../csharp/language-reference/keywords/static.md) method `Test.PrintTitle`."},{"content":"Similarly, the non-static method <ph id=\"ph1\">`AddBookToTotal`</ph> on the object <ph id=\"ph2\">`totaller`</ph> is passed as in the following example:","pos":[4267,4380],"source":" Similarly, the non-static method `AddBookToTotal` on the object `totaller` is passed as in the following example:"},{"pos":[4391,4541],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#18<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_9.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#18](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_9.cs)]"},{"pos":[4552,4636],"content":"In both cases a new delegate object is passed to the <ph id=\"ph1\">`ProcessPaperbackBooks`</ph> method.","source":"In both cases a new delegate object is passed to the `ProcessPaperbackBooks` method."},{"content":"After a delegate is created, the method it is associated with never changes; delegate objects are immutable.","pos":[4647,4755]},{"content":"Calling a delegate.","pos":[4765,4784]},{"content":"After a delegate object is created, the delegate object is typically passed to other code that will call the delegate.","pos":[4795,4913]},{"content":"A delegate object is called by using the name of the delegate object, followed by the parenthesized arguments to be passed to the delegate.","pos":[4914,5053]},{"content":"Following is an example of a delegate call:","pos":[5054,5097]},{"pos":[5108,5259],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideDelegates#19<ept id=\"p2\">](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_10.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideDelegates#19](../../../csharp/programming-guide/delegates/codesnippet/CSharp/how-to-declare-instantiate-and-use-a-delegate_10.cs)]"},{"pos":[5270,5402],"content":"A delegate can be either called synchronously, as in this example, or asynchronously by using <ph id=\"ph1\">`BeginInvoke`</ph> and <ph id=\"ph2\">`EndInvoke`</ph> methods.","source":"A delegate can be either called synchronously, as in this example, or asynchronously by using `BeginInvoke` and `EndInvoke` methods."},{"pos":[5411,5419],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5423,5490],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5493,5554],"source":" [Events](../../../csharp/programming-guide/events/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept>","pos":[5557,5623],"source":" [Delegates](../../../csharp/programming-guide/delegates/index.md)"}]}