{"content":"---\ntitle: \"How to: Use SpinWait to Implement a Two-Phase Wait Operation | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"SpinWait, how to synchronize two-phase wait\"\nms.assetid: b2ac4e4a-051a-4f65-b4b9-f8e103aff195\ncaps.latest.revision: 8\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Use SpinWait to Implement a Two-Phase Wait Operation\nThe following example shows how to use a <xref:System.Threading.SpinWait?displayProperty=fullName> object to implement a two-phase wait operation. In the first phase, the synchronization object, a `Latch`, spins for a few cycles while it checks whether the lock has become available. In the second phase, if the lock becomes available, then the `Wait` method returns without using the <xref:System.Threading.ManualResetEvent?displayProperty=fullName> to perform its wait; otherwise, `Wait` performs the wait.  \n  \n## Example  \n This example shows a very basic implementation of a Latch synchronization primitive. You can use this data structure when wait times are expected to be very short. This example is for demonstration purposes only. If you require latch-type functionality in your program, consider using <xref:System.Threading.ManualResetEventSlim?displayProperty=fullName>.  \n  \n [!code-csharp[CDS_SpinWait#03](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinwait/cs/spinwait03.cs#03)]\n [!code-vb[CDS_SpinWait#03](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinwait/vb/spinwait2.vb#03)]  \n  \n The latch uses the <xref:System.Threading.SpinWait> object to spin in place only until the next call to `SpinOnce` causes the <xref:System.Threading.SpinWait> to yield the time slice of the thread. At that point, the latch causes its own context switch by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the <xref:System.Threading.ManualResetEvent> and passing in the remainder of the time-out value.  \n  \n The logging output shows how often the Latch was able to increase performance by acquiring the lock without using the <xref:System.Threading.ManualResetEvent>.  \n  \n## See Also  \n [SpinWait](../../../docs/standard/threading/spinwait.md)   \n [Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md)","nodes":[{"pos":[4,445],"embed":true,"restype":"x-metadata","content":"title: \"How to: Use SpinWait to Implement a Two-Phase Wait Operation | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"SpinWait, how to synchronize two-phase wait\"\nms.assetid: b2ac4e4a-051a-4f65-b4b9-f8e103aff195\ncaps.latest.revision: 8\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"How to: Use SpinWait to Implement a Two-Phase Wait Operation | Microsoft Docs","nodes":[{"pos":[0,77],"content":"How to: Use SpinWait to Implement a Two-Phase Wait Operation | Microsoft Docs","nodes":[{"content":"How to: Use SpinWait to Implement a Two-Phase Wait Operation | Microsoft Docs","pos":[0,77]}]}],"path":["title"]}],"yml":true},{"pos":[452,512],"content":"How to: Use SpinWait to Implement a Two-Phase Wait Operation","linkify":"How to: Use SpinWait to Implement a Two-Phase Wait Operation","nodes":[{"content":"How to: Use SpinWait to Implement a Two-Phase Wait Operation","pos":[0,60]}]},{"content":"The following example shows how to use a <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait?displayProperty=fullName&gt;</ph> object to implement a two-phase wait operation.","pos":[513,659],"source":"The following example shows how to use a <xref:System.Threading.SpinWait?displayProperty=fullName> object to implement a two-phase wait operation."},{"content":"In the first phase, the synchronization object, a <ph id=\"ph1\">`Latch`</ph>, spins for a few cycles while it checks whether the lock has become available.","pos":[660,796],"source":" In the first phase, the synchronization object, a `Latch`, spins for a few cycles while it checks whether the lock has become available."},{"content":"In the second phase, if the lock becomes available, then the <ph id=\"ph1\">`Wait`</ph> method returns without using the <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEvent?displayProperty=fullName&gt;</ph> to perform its wait; otherwise, <ph id=\"ph3\">`Wait`</ph> performs the wait.","pos":[797,1021],"source":" In the second phase, if the lock becomes available, then the `Wait` method returns without using the <xref:System.Threading.ManualResetEvent?displayProperty=fullName> to perform its wait; otherwise, `Wait` performs the wait."},{"pos":[1030,1037],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example shows a very basic implementation of a Latch synchronization primitive.","pos":[1041,1125]},{"content":"You can use this data structure when wait times are expected to be very short.","pos":[1126,1204]},{"content":"This example is for demonstration purposes only.","pos":[1205,1253]},{"content":"If you require latch-type functionality in your program, consider using <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim?displayProperty=fullName&gt;</ph>.","pos":[1254,1396],"source":" If you require latch-type functionality in your program, consider using <xref:System.Threading.ManualResetEventSlim?displayProperty=fullName>."},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CDS_SpinWait#03<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinwait/cs/spinwait03.cs#03)</ept><ept id=\"p1\">]</ept>","pos":[1403,1518],"source":"[!code-csharp[CDS_SpinWait#03](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinwait/cs/spinwait03.cs#03)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>CDS_SpinWait#03<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinwait/vb/spinwait2.vb#03)</ept><ept id=\"p1\">]</ept>","pos":[1520,1635],"source":"[!code-vb[CDS_SpinWait#03](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinwait/vb/spinwait2.vb#03)]"},{"content":"The latch uses the <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait&gt;</ph> object to spin in place only until the next call to <ph id=\"ph2\">`SpinOnce`</ph> causes the <ph id=\"ph3\">&lt;xref:System.Threading.SpinWait&gt;</ph> to yield the time slice of the thread.","pos":[1642,1839],"source":"The latch uses the <xref:System.Threading.SpinWait> object to spin in place only until the next call to `SpinOnce` causes the <xref:System.Threading.SpinWait> to yield the time slice of the thread."},{"content":"At that point, the latch causes its own context switch by calling <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> and passing in the remainder of the time-out value.","pos":[1840,2051],"source":" At that point, the latch causes its own context switch by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the <xref:System.Threading.ManualResetEvent> and passing in the remainder of the time-out value."},{"content":"The logging output shows how often the Latch was able to increase performance by acquiring the lock without using the <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>.","pos":[2058,2217],"source":"The logging output shows how often the Latch was able to increase performance by acquiring the lock without using the <xref:System.Threading.ManualResetEvent>."},{"pos":[2226,2234],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>SpinWait<ept id=\"p1\">](../../../docs/standard/threading/spinwait.md)</ept><ph id=\"ph1\"> </ph>","pos":[2238,2295],"source":"[SpinWait](../../../docs/standard/threading/spinwait.md) "},{"content":"<bpt id=\"p1\">[</bpt>Threading Objects and Features<ept id=\"p1\">](../../../docs/standard/threading/threading-objects-and-features.md)</ept>","pos":[2299,2399],"source":"[Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md)"}]}