{"content":"---\ntitle: \"Exposing .NET Framework Components to COM\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"exposing .NET Framework components to COM\"\n  - \"interoperation with unmanaged code, exposing .NET Framework components\"\n  - \"COM interop, exposing COM components\"\nms.assetid: e42a65f7-1e61-411f-b09a-aca1bbce24c6\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Exposing .NET Framework Components to COM\nWriting a .NET type and consuming that type from unmanaged code are distinct activities for developers. This section describes several tips for writing managed code that interoperates with COM clients:  \n  \n-   [Qualifying .NET types for interoperation](../../../docs/framework/interop/qualifying-net-types-for-interoperation.md).  \n  \n     All managed types, methods, properties, fields, and events that you want to expose to COM must be public. Types must have a public default constructor, which is the only constructor that can be invoked through COM.  \n  \n-   [Applying interop attributes](../../../docs/framework/interop/applying-interop-attributes.md).  \n  \n     Custom attributes within managed code can enhance the interoperability of a component.  \n  \n-   [Packaging an assembly for COM](../../../docs/framework/interop/packaging-an-assembly-for-com.md).  \n  \n     COM developers might require that you summarize the steps involved in referencing and deploying your assemblies.  \n  \n Additionally, this section identifies the tasks related to consuming a managed type from a COM client.  \n  \n#### To consume a managed type from COM  \n  \n1.  [Register assemblies with COM](../../../docs/framework/interop/registering-assemblies-with-com.md).  \n  \n     Types in an assembly (and type libraries) must be registered at design time. If an installer does not register the assembly, instruct COM developers to use Regasm.exe.  \n  \n2.  [Reference .NET types from COM](../../../docs/framework/interop/how-to-reference-net-types-from-com.md).  \n  \n     COM developers can reference types in an assembly using the same tools and techniques they use today.  \n  \n3.  [Call a .NET object](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/8hw8h46b(v=vs.100)).  \n  \n     COM developers can call methods on the .NET object the same way they call methods on any unmanaged type. For example, the COM **CoCreateInstance** API activates .NET objects.  \n  \n4.  [Deploy an application for COM access](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/c2850st8(v=vs.100)).  \n  \n     A strong-named assembly can be installed in the global assembly cache and requires a signature from its publisher. Assemblies that are not strong named must be installed in the application directory of the client.  \n  \n## See also\n\n- [Interoperating with Unmanaged Code](../../../docs/framework/interop/index.md)\n- [COM Interop Sample: COM Client and .NET Server](../../../docs/framework/interop/com-interop-sample-com-client-and-net-server.md)\n","nodes":[{"pos":[4,355],"embed":true,"restype":"x-metadata","content":"title: \"Exposing .NET Framework Components to COM\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"exposing .NET Framework components to COM\"\n  - \"interoperation with unmanaged code, exposing .NET Framework components\"\n  - \"COM interop, exposing COM components\"\nms.assetid: e42a65f7-1e61-411f-b09a-aca1bbce24c6\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Exposing .NET Framework Components to COM","nodes":[{"pos":[0,41],"content":"Exposing .NET Framework Components to COM","nodes":[{"content":"Exposing .NET Framework Components to COM","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[362,403],"content":"Exposing .NET Framework Components to COM","linkify":"Exposing .NET Framework Components to COM","nodes":[{"content":"Exposing .NET Framework Components to COM","pos":[0,41]}]},{"content":"Writing a .NET type and consuming that type from unmanaged code are distinct activities for developers.","pos":[404,507]},{"content":"This section describes several tips for writing managed code that interoperates with COM clients:","pos":[508,605]},{"pos":[615,734],"content":"<bpt id=\"p1\">[</bpt>Qualifying .NET types for interoperation<ept id=\"p1\">](../../../docs/framework/interop/qualifying-net-types-for-interoperation.md)</ept>.","source":"[Qualifying .NET types for interoperation](../../../docs/framework/interop/qualifying-net-types-for-interoperation.md)."},{"content":"All managed types, methods, properties, fields, and events that you want to expose to COM must be public.","pos":[745,850]},{"content":"Types must have a public default constructor, which is the only constructor that can be invoked through COM.","pos":[851,959]},{"pos":[969,1063],"content":"<bpt id=\"p1\">[</bpt>Applying interop attributes<ept id=\"p1\">](../../../docs/framework/interop/applying-interop-attributes.md)</ept>.","source":"[Applying interop attributes](../../../docs/framework/interop/applying-interop-attributes.md)."},{"content":"Custom attributes within managed code can enhance the interoperability of a component.","pos":[1074,1160]},{"pos":[1170,1268],"content":"<bpt id=\"p1\">[</bpt>Packaging an assembly for COM<ept id=\"p1\">](../../../docs/framework/interop/packaging-an-assembly-for-com.md)</ept>.","source":"[Packaging an assembly for COM](../../../docs/framework/interop/packaging-an-assembly-for-com.md)."},{"content":"COM developers might require that you summarize the steps involved in referencing and deploying your assemblies.","pos":[1279,1391]},{"content":"Additionally, this section identifies the tasks related to consuming a managed type from a COM client.","pos":[1398,1500]},{"pos":[1511,1545],"content":"To consume a managed type from COM","linkify":"To consume a managed type from COM","nodes":[{"content":"To consume a managed type from COM","pos":[0,34]}]},{"pos":[1555,1654],"content":"<bpt id=\"p1\">[</bpt>Register assemblies with COM<ept id=\"p1\">](../../../docs/framework/interop/registering-assemblies-with-com.md)</ept>.","source":"[Register assemblies with COM](../../../docs/framework/interop/registering-assemblies-with-com.md)."},{"content":"Types in an assembly (and type libraries) must be registered at design time.","pos":[1665,1741]},{"content":"If an installer does not register the assembly, instruct COM developers to use Regasm.exe.","pos":[1742,1832]},{"pos":[1842,1946],"content":"<bpt id=\"p1\">[</bpt>Reference .NET types from COM<ept id=\"p1\">](../../../docs/framework/interop/how-to-reference-net-types-from-com.md)</ept>.","source":"[Reference .NET types from COM](../../../docs/framework/interop/how-to-reference-net-types-from-com.md)."},{"content":"COM developers can reference types in an assembly using the same tools and techniques they use today.","pos":[1957,2058]},{"pos":[2068,2178],"content":"<bpt id=\"p1\">[</bpt>Call a .NET object<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/8hw8h46b(v=vs.100))</ept>.","source":"[Call a .NET object](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/8hw8h46b(v=vs.100))."},{"content":"COM developers can call methods on the .NET object the same way they call methods on any unmanaged type.","pos":[2189,2293]},{"content":"For example, the COM <bpt id=\"p1\">**</bpt>CoCreateInstance<ept id=\"p1\">**</ept> API activates .NET objects.","pos":[2294,2363],"source":" For example, the COM **CoCreateInstance** API activates .NET objects."},{"pos":[2373,2501],"content":"<bpt id=\"p1\">[</bpt>Deploy an application for COM access<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/c2850st8(v=vs.100))</ept>.","source":"[Deploy an application for COM access](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/c2850st8(v=vs.100))."},{"content":"A strong-named assembly can be installed in the global assembly cache and requires a signature from its publisher.","pos":[2512,2626]},{"content":"Assemblies that are not strong named must be installed in the application directory of the client.","pos":[2627,2725]},{"pos":[2734,2742],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2746,2824],"content":"<bpt id=\"p1\">[</bpt>Interoperating with Unmanaged Code<ept id=\"p1\">](../../../docs/framework/interop/index.md)</ept>","source":"[Interoperating with Unmanaged Code](../../../docs/framework/interop/index.md)"},{"pos":[2827,2956],"content":"<bpt id=\"p1\">[</bpt>COM Interop Sample: COM Client and .NET Server<ept id=\"p1\">](../../../docs/framework/interop/com-interop-sample-com-client-and-net-server.md)</ept>","source":"[COM Interop Sample: COM Client and .NET Server](../../../docs/framework/interop/com-interop-sample-com-client-and-net-server.md)"}]}