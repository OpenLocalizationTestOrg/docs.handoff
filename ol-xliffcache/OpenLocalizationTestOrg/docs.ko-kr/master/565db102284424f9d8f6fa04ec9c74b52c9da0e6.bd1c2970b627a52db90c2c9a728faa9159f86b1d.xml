{"content":"---\ntitle: What's new in C# 7.1\ndescription: An overview of new features in C# 7.1.\nms.date: 08/16/2017\n---\n# What's new in C# 7.1\n\nC# 7.1 is the first point release to the C# language. It marks an increased\nrelease cadence for the language. You can use the new features sooner, ideally\nwhen each new feature is ready. C# 7.1 adds the ability to configure\nthe compiler to match a specified version of the language. That enables you to\nseparate the decision to upgrade tools from the decision to upgrade language\nversions.\n\nC# 7.1 adds the [language version selection](../language-reference/configure-language-version.md)\nconfiguration element, three new language features and new compiler behavior.\n\nThe new language features in this release are:\n\n* [`async` `Main` method](#async-main)\n  - The entry point for an application can have the `async` modifier.\n* [`default` literal expressions](#default-literal-expressions)\n  - You can use default literal expressions in default value expressions when the target type can be inferred.\n* [Inferred tuple element names](#inferred-tuple-element-names)\n  - The names of tuple elements can be inferred from tuple initialization in many cases.\n\nFinally, the compiler has two options `/refout` and `/refonly` that\ncontrol [reference assembly generation](#reference-assembly-generation).\n\nTo use the latest features in a point release, you need to [configure the compiler language version](../language-reference/configure-language-version.md) and select the version.\n\n## Async main\n\nAn *async main* method enables you to use `await` in your `Main` method.\nPreviously you would need to write:\n\n```csharp\nstatic int Main()\n{\n    return DoAsyncWork().GetAwaiter().GetResult();\n}\n```\n\nYou can now write:\n\n```csharp\nstatic async Task<int> Main()\n{\n    // This could also be replaced with the body\n    // DoAsyncWork, including its await expressions:\n    return await DoAsyncWork();\n}\n```\n\nIf your program doesn't return an exit code, you can declare a `Main` method\nthat returns a <xref:System.Threading.Tasks.Task>:\n\n```csharp\nstatic async Task Main()\n{\n    await SomeAsyncMethod();\n}\n```\n\nYou can read more about the details in the\n[async main](../programming-guide/main-and-command-args/index.md) topic\nin the programming guide.\n\n## Default literal expressions\n\nDefault literal expressions are an enhancement to default value expressions.\nThese expressions initialize a variable to the default value. Where you previously\nwould write:\n\n```csharp\nFunc<string, bool> whereClause = default(Func<string, bool>);\n```\n\nYou can now omit the type on the right-hand side of the initialization:\n\n```csharp\nFunc<string, bool> whereClause = default;\n```\n\nYou can learn more about this enhancement in the C# Programming Guide topic\non [default value expressions](../programming-guide/statements-expressions-operators/default-value-expressions.md).\n\nThis enhancement also changes some of the parsing rules for the [default keyword](../language-reference/keywords/default.md).\n\n## Inferred tuple element names\n\nThis feature is a small enhancement to the tuples feature introduced in\nC# 7.0. Many times when you initialize a tuple, the variables used for the\nright side of the assignment are the same as the names you'd like for the\ntuple elements:\n\n```csharp\nint count = 5;\nstring label = \"Colors used in the map\";\nvar pair = (count: count, label: label);\n```\n\nThe names of tuple elements can be inferred from the variables used to initialize\nthe tuple in C# 7.1:\n\n```csharp\nint count = 5;\nstring label = \"Colors used in the map\";\nvar pair = (count, label); // element names are \"count\" and \"label\"\n```\n\nYou can learn more about this feature in the [Tuples](../tuples.md) topic.\n\n## Reference assembly generation\n\nThere are two new compiler options that generate *reference-only assemblies*:\n[/refout](../language-reference/compiler-options/refout-compiler-option.md)\nand [/refonly](../language-reference/compiler-options/refonly-compiler-option.md).\nThe linked topics explain these options and reference assemblies in more detail.\n","nodes":[{"pos":[4,103],"embed":true,"restype":"x-metadata","content":"title: What's new in C# 7.1\ndescription: An overview of new features in C# 7.1.\nms.date: 08/16/2017","nodes":[{"content":"What's new in C# 7.1","nodes":[{"pos":[0,20],"content":"What's new in C# 7.1","nodes":[{"content":"What's new in C# 7.1","pos":[0,20]}]}],"path":["title"],"nosxs":false},{"content":"An overview of new features in C# 7.1.","nodes":[{"pos":[0,38],"content":"An overview of new features in C# 7.1.","nodes":[{"content":"An overview of new features in C# 7.1.","pos":[0,38]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[110,130],"content":"What's new in C# 7.1","linkify":"What's new in C# 7.1","nodes":[{"content":"What's new in C# 7.1","pos":[0,20]}]},{"content":"C# 7.1 is the first point release to the C# language.","pos":[132,185]},{"content":"It marks an increased release cadence for the language.","pos":[186,241],"source":" It marks an increased\nrelease cadence for the language."},{"content":"You can use the new features sooner, ideally when each new feature is ready.","pos":[242,318],"source":" You can use the new features sooner, ideally\nwhen each new feature is ready."},{"content":"C# 7.1 adds the ability to configure the compiler to match a specified version of the language.","pos":[319,414],"source":" C# 7.1 adds the ability to configure\nthe compiler to match a specified version of the language."},{"content":"That enables you to separate the decision to upgrade tools from the decision to upgrade language versions.","pos":[415,521],"source":" That enables you to\nseparate the decision to upgrade tools from the decision to upgrade language\nversions."},{"pos":[523,698],"content":"C# 7.1 adds the <bpt id=\"p1\">[</bpt>language version selection<ept id=\"p1\">](../language-reference/configure-language-version.md)</ept> configuration element, three new language features and new compiler behavior.","source":"C# 7.1 adds the [language version selection](../language-reference/configure-language-version.md)\nconfiguration element, three new language features and new compiler behavior."},{"content":"The new language features in this release are:","pos":[700,746]},{"pos":[750,786],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`async`</ph> <ph id=\"ph2\">`Main`</ph> method<ept id=\"p1\">](#async-main)</ept>","source":"[`async` `Main` method](#async-main)"},{"pos":[791,856],"content":"The entry point for an application can have the <ph id=\"ph1\">`async`</ph> modifier.","source":"The entry point for an application can have the `async` modifier."},{"pos":[859,920],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`default`</ph> literal expressions<ept id=\"p1\">](#default-literal-expressions)</ept>","source":"[`default` literal expressions](#default-literal-expressions)"},{"content":"You can use default literal expressions in default value expressions when the target type can be inferred.","pos":[925,1031]},{"pos":[1034,1095],"content":"<bpt id=\"p1\">[</bpt>Inferred tuple element names<ept id=\"p1\">](#inferred-tuple-element-names)</ept>","source":"[Inferred tuple element names](#inferred-tuple-element-names)"},{"content":"The names of tuple elements can be inferred from tuple initialization in many cases.","pos":[1100,1184]},{"pos":[1186,1326],"content":"Finally, the compiler has two options <ph id=\"ph1\">`/refout`</ph> and <ph id=\"ph2\">`/refonly`</ph> that control <bpt id=\"p1\">[</bpt>reference assembly generation<ept id=\"p1\">](#reference-assembly-generation)</ept>.","source":"Finally, the compiler has two options `/refout` and `/refonly` that\ncontrol [reference assembly generation](#reference-assembly-generation)."},{"pos":[1328,1505],"content":"To use the latest features in a point release, you need to <bpt id=\"p1\">[</bpt>configure the compiler language version<ept id=\"p1\">](../language-reference/configure-language-version.md)</ept> and select the version.","source":"To use the latest features in a point release, you need to [configure the compiler language version](../language-reference/configure-language-version.md) and select the version."},{"pos":[1510,1520],"content":"Async main","linkify":"Async main","nodes":[{"content":"Async main","pos":[0,10]}]},{"content":"An <bpt id=\"p1\">*</bpt>async main<ept id=\"p1\">*</ept> method enables you to use <ph id=\"ph1\">`await`</ph> in your <ph id=\"ph2\">`Main`</ph> method.","pos":[1522,1594],"source":"An *async main* method enables you to use `await` in your `Main` method."},{"content":"Previously you would need to write:","pos":[1595,1630],"source":"\nPreviously you would need to write:"},{"content":"You can now write:","pos":[1720,1738]},{"pos":[1923,2050],"content":"If your program doesn't return an exit code, you can declare a <ph id=\"ph1\">`Main`</ph> method that returns a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph>:","source":"If your program doesn't return an exit code, you can declare a `Main` method\nthat returns a <xref:System.Threading.Tasks.Task>:"},{"pos":[2125,2265],"content":"You can read more about the details in the <bpt id=\"p1\">[</bpt>async main<ept id=\"p1\">](../programming-guide/main-and-command-args/index.md)</ept> topic in the programming guide.","source":"You can read more about the details in the\n[async main](../programming-guide/main-and-command-args/index.md) topic\nin the programming guide."},{"pos":[2270,2297],"content":"Default literal expressions","linkify":"Default literal expressions","nodes":[{"content":"Default literal expressions","pos":[0,27]}]},{"content":"Default literal expressions are an enhancement to default value expressions.","pos":[2299,2375]},{"content":"These expressions initialize a variable to the default value.","pos":[2376,2437],"source":"\nThese expressions initialize a variable to the default value."},{"content":"Where you previously would write:","pos":[2438,2471],"source":" Where you previously\nwould write:"},{"content":"You can now omit the type on the right-hand side of the initialization:","pos":[2550,2621]},{"pos":[2680,2871],"content":"You can learn more about this enhancement in the C# Programming Guide topic on <bpt id=\"p1\">[</bpt>default value expressions<ept id=\"p1\">](../programming-guide/statements-expressions-operators/default-value-expressions.md)</ept>.","source":"You can learn more about this enhancement in the C# Programming Guide topic\non [default value expressions](../programming-guide/statements-expressions-operators/default-value-expressions.md)."},{"pos":[2873,2998],"content":"This enhancement also changes some of the parsing rules for the <bpt id=\"p1\">[</bpt>default keyword<ept id=\"p1\">](../language-reference/keywords/default.md)</ept>.","source":"This enhancement also changes some of the parsing rules for the [default keyword](../language-reference/keywords/default.md)."},{"pos":[3003,3031],"content":"Inferred tuple element names","linkify":"Inferred tuple element names","nodes":[{"content":"Inferred tuple element names","pos":[0,28]}]},{"content":"This feature is a small enhancement to the tuples feature introduced in C# 7.0.","pos":[3033,3112],"source":"This feature is a small enhancement to the tuples feature introduced in\nC# 7.0."},{"content":"Many times when you initialize a tuple, the variables used for the right side of the assignment are the same as the names you'd like for the tuple elements:","pos":[3113,3269],"source":" Many times when you initialize a tuple, the variables used for the\nright side of the assignment are the same as the names you'd like for the\ntuple elements:"},{"pos":[3383,3485],"content":"The names of tuple elements can be inferred from the variables used to initialize the tuple in C# 7.1:","source":"The names of tuple elements can be inferred from the variables used to initialize\nthe tuple in C# 7.1:"},{"pos":[3626,3700],"content":"You can learn more about this feature in the <bpt id=\"p1\">[</bpt>Tuples<ept id=\"p1\">](../tuples.md)</ept> topic.","source":"You can learn more about this feature in the [Tuples](../tuples.md) topic."},{"pos":[3705,3734],"content":"Reference assembly generation","linkify":"Reference assembly generation","nodes":[{"content":"Reference assembly generation","pos":[0,29]}]},{"content":"There are two new compiler options that generate <bpt id=\"p1\">*</bpt>reference-only assemblies<ept id=\"p1\">*</ept>: <bpt id=\"p2\">[</bpt>/refout<ept id=\"p2\">](../language-reference/compiler-options/refout-compiler-option.md)</ept> and <bpt id=\"p3\">[</bpt>/refonly<ept id=\"p3\">](../language-reference/compiler-options/refonly-compiler-option.md)</ept>.","pos":[3736,3972],"source":"There are two new compiler options that generate *reference-only assemblies*:\n[/refout](../language-reference/compiler-options/refout-compiler-option.md)\nand [/refonly](../language-reference/compiler-options/refonly-compiler-option.md)."},{"content":"The linked topics explain these options and reference assemblies in more detail.","pos":[3973,4053],"source":"\nThe linked topics explain these options and reference assemblies in more detail."}]}