{"content":"---\ntitle: \"ICorProfilerCallback::ObjectReferences Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerCallback.ObjectReferences\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback::ObjectReferences\"\nhelpviewer_keywords: \n  - \"ObjectReferences method [.NET Framework profiling]\"\n  - \"ICorProfilerCallback::ObjectReferences method [.NET Framework profiling]\"\nms.assetid: dd5e9b64-b4a3-4ba6-9be6-ddb540f4ffcf\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# ICorProfilerCallback::ObjectReferences Method\nNotifies the profiler about objects in memory that are being referenced by the specified object.  \n  \n## Syntax  \n  \n```  \nHRESULT ObjectReferences(  \n    [in]  ObjectID objectId,  \n    [in]  ClassID  classId,  \n    [in]  ULONG    cObjectRefs,  \n    [in, size_is(cObjectRefs)] ObjectID objectRefIds[] );  \n```  \n  \n## Parameters  \n `objectId`  \n [in] The ID of the object that is referencing objects.  \n  \n `classId`  \n [in] The ID of the class that the specified object is an instance of.  \n  \n `cObjectRefs`  \n [in] The number of objects referenced by the specified object (that is, the number of elements in the `objectRefIds` array).  \n  \n `objectRefIds`  \n [in] An array of IDs of objects that are being referenced by `objectId`.  \n  \n## Remarks  \n The `ObjectReferences` method is called for each object remaining in the heap after a garbage collection has completed. If the profiler returns an error from this callback, the profiling services will discontinue invoking this callback until the next garbage collection.  \n  \n The `ObjectReferences` callback can be used in conjunction with the [ICorProfilerCallback::RootReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-rootreferences-method.md) callback to create a complete object reference graph for the runtime. The common language runtime (CLR) ensures that each object reference is reported only once by the `ObjectReferences` method.  \n  \n The object IDs returned by `ObjectReferences` are not valid during the callback itself, because the garbage collection might be in the middle of moving objects. Therefore, profilers must not attempt to inspect objects during an `ObjectReferences` call. When [ICorProfilerCallback2::GarbageCollectionFinished](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md) is called, the garbage collection is complete and inspection can be safely done.  \n  \n A null `ClassId` indicates that `objectId` has a type that is unloading.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See also\n\n- [ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)\n","nodes":[{"pos":[4,519],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerCallback::ObjectReferences Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerCallback.ObjectReferences\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback::ObjectReferences\"\nhelpviewer_keywords: \n  - \"ObjectReferences method [.NET Framework profiling]\"\n  - \"ICorProfilerCallback::ObjectReferences method [.NET Framework profiling]\"\nms.assetid: dd5e9b64-b4a3-4ba6-9be6-ddb540f4ffcf\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"ICorProfilerCallback::ObjectReferences Method","nodes":[{"pos":[0,45],"content":"ICorProfilerCallback::ObjectReferences Method","nodes":[{"content":"ICorProfilerCallback::ObjectReferences Method","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[526,571],"content":"ICorProfilerCallback::ObjectReferences Method","linkify":"ICorProfilerCallback::ObjectReferences Method","nodes":[{"content":"ICorProfilerCallback::ObjectReferences Method","pos":[0,45]}]},{"content":"Notifies the profiler about objects in memory that are being referenced by the specified object.","pos":[572,668]},{"pos":[677,683],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[890,900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The ID of the object that is referencing objects.","pos":[918,972]},{"content":"[in] The ID of the class that the specified object is an instance of.","pos":[992,1061]},{"content":"[in] The number of objects referenced by the specified object (that is, the number of elements in the <ph id=\"ph1\">`objectRefIds`</ph> array).","pos":[1085,1209],"source":"[in] The number of objects referenced by the specified object (that is, the number of elements in the `objectRefIds` array)."},{"content":"[in] An array of IDs of objects that are being referenced by <ph id=\"ph1\">`objectId`</ph>.","pos":[1234,1306],"source":"[in] An array of IDs of objects that are being referenced by `objectId`."},{"pos":[1315,1322],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`ObjectReferences`</ph> method is called for each object remaining in the heap after a garbage collection has completed.","pos":[1326,1445],"source":"The `ObjectReferences` method is called for each object remaining in the heap after a garbage collection has completed."},{"content":"If the profiler returns an error from this callback, the profiling services will discontinue invoking this callback until the next garbage collection.","pos":[1446,1596]},{"content":"The <ph id=\"ph1\">`ObjectReferences`</ph> callback can be used in conjunction with the <bpt id=\"p1\">[</bpt>ICorProfilerCallback::RootReferences<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-rootreferences-method.md)</ept> callback to create a complete object reference graph for the runtime.","pos":[1603,1877],"source":"The `ObjectReferences` callback can be used in conjunction with the [ICorProfilerCallback::RootReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-rootreferences-method.md) callback to create a complete object reference graph for the runtime."},{"content":"The common language runtime (CLR) ensures that each object reference is reported only once by the <ph id=\"ph1\">`ObjectReferences`</ph> method.","pos":[1878,2002],"source":" The common language runtime (CLR) ensures that each object reference is reported only once by the `ObjectReferences` method."},{"content":"The object IDs returned by <ph id=\"ph1\">`ObjectReferences`</ph> are not valid during the callback itself, because the garbage collection might be in the middle of moving objects.","pos":[2009,2169],"source":"The object IDs returned by `ObjectReferences` are not valid during the callback itself, because the garbage collection might be in the middle of moving objects."},{"content":"Therefore, profilers must not attempt to inspect objects during an <ph id=\"ph1\">`ObjectReferences`</ph> call.","pos":[2170,2261],"source":" Therefore, profilers must not attempt to inspect objects during an `ObjectReferences` call."},{"content":"When <bpt id=\"p1\">[</bpt>ICorProfilerCallback2::GarbageCollectionFinished<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md)</ept> is called, the garbage collection is complete and inspection can be safely done.","pos":[2262,2508],"source":" When [ICorProfilerCallback2::GarbageCollectionFinished](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md) is called, the garbage collection is complete and inspection can be safely done."},{"pos":[2515,2587],"content":"A null <ph id=\"ph1\">`ClassId`</ph> indicates that <ph id=\"ph2\">`objectId`</ph> has a type that is unloading.","source":"A null `ClassId` indicates that `objectId` has a type that is unloading."},{"pos":[2596,2608],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2612,2716],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2723,2757],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[2764,2789],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[2796,2904],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[2913,2921],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2925,3043],"content":"<bpt id=\"p1\">[</bpt>ICorProfilerCallback Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept>","source":"[ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)"}]}