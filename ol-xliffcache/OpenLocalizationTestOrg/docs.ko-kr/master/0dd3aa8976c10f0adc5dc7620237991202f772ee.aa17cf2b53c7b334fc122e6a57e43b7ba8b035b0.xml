{"content":"---\ntitle: \">= Operator - C# Reference\"\nms.custom: seodec18\nms.date: 12/18/2018\nf1_keywords: \n  - \">=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"greater than or equal to operator (>=) [C#]\"\n  - \">= operator [C#]\"\nms.assetid: 0db4dcaf-56a3-4884-a7ad-35f64978a58d\n---\n# >= Operator (C# Reference)\n\nThe \"greater than or equal\" relational operator `>=` returns `true` if its first operand is greater than or equal to its second operand, `false` otherwise. All numeric and  enumeration types support the `>=` operator. For operands of the same [enum](../keywords/enum.md) type, the corresponding values of the underlying integral type are compared.\n\n> [!NOTE]\n> For relational operators `==`, `>`, `<`, `>=`, and `<=`, if any of the operands is not a number (<xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType>) the result of operation is `false`. That means that the `NaN` value is neither greater than, less than, nor equal to any other `double` (or `float`) value. For more information and examples, see the <xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType> reference article.\n\nThe following example demonstrates the usage of the `>=` operator:\n\n[!code-csharp-interactive[greater than or equal example](~/samples/snippets/csharp/language-reference/operators/GreaterAndLessOperatorsExamples.cs#GreaterOrEqual)]\n\n## Operator overloadability\n\nUser-defined types can [overload](../keywords/operator.md) the `>=` operator. If a type overloads the \"greater than or equal\" operator `>=`, it must also overload the [\"less than or equal\" operator](less-than-equal-operator.md) `<=`.\n\n## C# language specification\n\nFor more information, see the [Relational and type-testing operators](~/_csharplang/spec/expressions.md#relational-and-type-testing-operators) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [> Operator](greater-than-operator.md)\n- [== Operator](equality-operators.md#equality-operator-)\n- <xref:System.IComparable%601?displayProperty=nameWithType>\n","nodes":[{"pos":[4,260],"embed":true,"restype":"x-metadata","content":"title: \">= Operator - C# Reference\"\nms.custom: seodec18\nms.date: 12/18/2018\nf1_keywords: \n  - \">=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"greater than or equal to operator (>=) [C#]\"\n  - \">= operator [C#]\"\nms.assetid: 0db4dcaf-56a3-4884-a7ad-35f64978a58d","nodes":[{"content":">= Operator - C# Reference","nodes":[{"pos":[1,26],"content":"= Operator - C# Reference","nodes":[{"content":"= Operator - C# Reference","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[267,293],"content":">= Operator (C# Reference)","linkify":">= Operator (C# Reference)","nodes":[{"content":"&gt;= Operator (C# Reference)","pos":[0,26],"source":">= Operator (C# Reference)"}]},{"content":"The \"greater than or equal\" relational operator <ph id=\"ph1\">`&gt;=`</ph> returns <ph id=\"ph2\">`true`</ph> if its first operand is greater than or equal to its second operand, <ph id=\"ph3\">`false`</ph> otherwise.","pos":[295,450],"source":"The \"greater than or equal\" relational operator `>=` returns `true` if its first operand is greater than or equal to its second operand, `false` otherwise."},{"content":"All numeric and  enumeration types support the <ph id=\"ph1\">`&gt;=`</ph> operator.","pos":[451,512],"source":" All numeric and  enumeration types support the `>=` operator."},{"content":"For operands of the same <bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](../keywords/enum.md)</ept> type, the corresponding values of the underlying integral type are compared.","pos":[513,642],"source":" For operands of the same [enum](../keywords/enum.md) type, the corresponding values of the underlying integral type are compared."},{"pos":[646,1193],"content":"[!NOTE]\nFor relational operators `==`, `>`, `<`, `>=`, and `<=`, if any of the operands is not a number (<xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType>) the result of operation is `false`. That means that the `NaN` value is neither greater than, less than, nor equal to any other `double` (or `float`) value. For more information and examples, see the <xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType> reference article.","leadings":["","> "],"nodes":[{"content":"For relational operators `==`, `>`, `<`, `>=`, and `<=`, if any of the operands is not a number (<xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType>) the result of operation is `false`. That means that the `NaN` value is neither greater than, less than, nor equal to any other `double` (or `float`) value. For more information and examples, see the <xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType> reference article.","pos":[8,545],"nodes":[{"content":"For relational operators <ph id=\"ph1\">`==`</ph>, <ph id=\"ph2\">`&gt;`</ph>, <ph id=\"ph3\">`&lt;`</ph>, <ph id=\"ph4\">`&gt;=`</ph>, and <ph id=\"ph5\">`&lt;=`</ph>, if any of the operands is not a number (<ph id=\"ph6\">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph7\">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph>) the result of operation is <ph id=\"ph8\">`false`</ph>.","pos":[0,244],"source":"For relational operators `==`, `>`, `<`, `>=`, and `<=`, if any of the operands is not a number (<xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType>) the result of operation is `false`."},{"content":"That means that the <ph id=\"ph1\">`NaN`</ph> value is neither greater than, less than, nor equal to any other <ph id=\"ph2\">`double`</ph> (or <ph id=\"ph3\">`float`</ph>) value.","pos":[245,364],"source":" That means that the `NaN` value is neither greater than, less than, nor equal to any other `double` (or `float`) value."},{"content":"For more information and examples, see the <ph id=\"ph1\">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph> reference article.","pos":[365,537],"source":" For more information and examples, see the <xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType> reference article."}]}]},{"pos":[1195,1261],"content":"The following example demonstrates the usage of the <ph id=\"ph1\">`&gt;=`</ph> operator:","source":"The following example demonstrates the usage of the `>=` operator:"},{"pos":[1431,1455],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"User-defined types can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../keywords/operator.md)</ept> the <ph id=\"ph1\">`&gt;=`</ph> operator.","pos":[1457,1534],"source":"User-defined types can [overload](../keywords/operator.md) the `>=` operator."},{"content":"If a type overloads the \"greater than or equal\" operator <ph id=\"ph1\">`&gt;=`</ph>, it must also overload the <bpt id=\"p1\">[</bpt>\"less than or equal\" operator<ept id=\"p1\">](less-than-equal-operator.md)</ept> <ph id=\"ph2\">`&lt;=`</ph>.","pos":[1535,1690],"source":" If a type overloads the \"greater than or equal\" operator `>=`, it must also overload the [\"less than or equal\" operator](less-than-equal-operator.md) `<=`."},{"pos":[1695,1720],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1722,1944],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Relational and type-testing operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#relational-and-type-testing-operators)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Relational and type-testing operators](~/_csharplang/spec/expressions.md#relational-and-type-testing-operators) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1949,1957],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1961,1988],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1991,2047],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2050,2074],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[2077,2115],"content":"<bpt id=\"p1\">[</bpt>&gt; Operator<ept id=\"p1\">](greater-than-operator.md)</ept>","source":"[> Operator](greater-than-operator.md)"},{"pos":[2118,2173],"content":"<bpt id=\"p1\">[</bpt>== Operator<ept id=\"p1\">](equality-operators.md#equality-operator-)</ept>","source":"[== Operator](equality-operators.md#equality-operator-)"}]}