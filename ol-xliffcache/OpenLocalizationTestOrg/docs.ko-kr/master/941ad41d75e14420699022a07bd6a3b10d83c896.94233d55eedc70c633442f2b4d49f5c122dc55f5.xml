{"content":"---\ntitle: \"let clause - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"let_CSharpKeyword\"\n  - \"let\"\nhelpviewer_keywords: \n  - \"let keyword [C#]\"\n  - \"let clause [C#]\"\nms.assetid: 13c9c1a4-ce57-48ef-8e1b-4c2a59b99fb4\n---\n# let clause (C# Reference)\n\nIn a query expression, it is sometimes useful to store the result of a sub-expression in order to use it in subsequent clauses. You can do this with the `let` keyword, which creates a new range variable and initializes it with the result of the expression you supply. Once initialized with a value, the range variable cannot be used to store another value. However, if the range variable holds a queryable type, it can be queried.\n\n## Example\n\nIn the following example `let` is used in two ways:\n\n1. To create an enumerable type that can itself be queried.\n\n2. To enable the query to call `ToLower` only one time on the range variable `word`. Without using `let`, you would have to call `ToLower` in each predicate in the `where` clause.\n\n[!code-csharp[cscsrefQueryKeywords#28](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsCsrefQueryKeywords/CS/Let.cs#28)]\n\n## See also\n\n- [C# Reference](../../language-reference/index.md)\n- [Query Keywords (LINQ)](query-keywords.md)\n- [Language Integrated Query (LINQ)](../../linq/index.md)\n- [Getting Started with LINQ in C#](../../programming-guide/concepts/linq/getting-started-with-linq.md)\n- [Handle exceptions in query expressions](../../linq/handle-exceptions-in-query-expressions.md)","nodes":[{"pos":[4,243],"embed":true,"restype":"x-metadata","content":"title: \"let clause - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"let_CSharpKeyword\"\n  - \"let\"\nhelpviewer_keywords: \n  - \"let keyword [C#]\"\n  - \"let clause [C#]\"\nms.assetid: 13c9c1a4-ce57-48ef-8e1b-4c2a59b99fb4","nodes":[{"content":"let clause - C# Reference","nodes":[{"pos":[0,25],"content":"let clause - C# Reference","nodes":[{"content":"let clause - C# Reference","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[250,275],"content":"let clause (C# Reference)","linkify":"let clause (C# Reference)","nodes":[{"content":"let clause (C# Reference)","pos":[0,25]}]},{"content":"In a query expression, it is sometimes useful to store the result of a sub-expression in order to use it in subsequent clauses.","pos":[277,404]},{"content":"You can do this with the <ph id=\"ph1\">`let`</ph> keyword, which creates a new range variable and initializes it with the result of the expression you supply.","pos":[405,544],"source":" You can do this with the `let` keyword, which creates a new range variable and initializes it with the result of the expression you supply."},{"content":"Once initialized with a value, the range variable cannot be used to store another value.","pos":[545,633]},{"content":"However, if the range variable holds a queryable type, it can be queried.","pos":[634,707]},{"pos":[712,719],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[721,772],"content":"In the following example <ph id=\"ph1\">`let`</ph> is used in two ways:","source":"In the following example `let` is used in two ways:"},{"content":"To create an enumerable type that can itself be queried.","pos":[777,833]},{"content":"To enable the query to call <ph id=\"ph1\">`ToLower`</ph> only one time on the range variable <ph id=\"ph2\">`word`</ph>.","pos":[838,919],"source":"To enable the query to call `ToLower` only one time on the range variable `word`."},{"content":"Without using <ph id=\"ph1\">`let`</ph>, you would have to call <ph id=\"ph2\">`ToLower`</ph> in each predicate in the <ph id=\"ph3\">`where`</ph> clause.","pos":[920,1014],"source":" Without using `let`, you would have to call `ToLower` in each predicate in the `where` clause."},{"pos":[1142,1150],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1154,1203],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../language-reference/index.md)</ept>","source":"[C# Reference](../../language-reference/index.md)"},{"pos":[1206,1248],"content":"<bpt id=\"p1\">[</bpt>Query Keywords (LINQ)<ept id=\"p1\">](query-keywords.md)</ept>","source":"[Query Keywords (LINQ)](query-keywords.md)"},{"pos":[1251,1306],"content":"<bpt id=\"p1\">[</bpt>Language Integrated Query (LINQ)<ept id=\"p1\">](../../linq/index.md)</ept>","source":"[Language Integrated Query (LINQ)](../../linq/index.md)"},{"pos":[1309,1410],"content":"<bpt id=\"p1\">[</bpt>Getting Started with LINQ in C#<ept id=\"p1\">](../../programming-guide/concepts/linq/getting-started-with-linq.md)</ept>","source":"[Getting Started with LINQ in C#](../../programming-guide/concepts/linq/getting-started-with-linq.md)"},{"pos":[1413,1507],"content":"<bpt id=\"p1\">[</bpt>Handle exceptions in query expressions<ept id=\"p1\">](../../linq/handle-exceptions-in-query-expressions.md)</ept>","source":"[Handle exceptions in query expressions](../../linq/handle-exceptions-in-query-expressions.md)"}]}