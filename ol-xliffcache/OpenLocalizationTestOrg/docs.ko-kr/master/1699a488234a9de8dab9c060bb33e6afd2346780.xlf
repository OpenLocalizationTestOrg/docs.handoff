<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1699a488234a9de8dab9c060bb33e6afd2346780</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\strings\how-to-compare-strings.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9e7043133e114e1115afbb4319892d763ad3d59</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ed9269fb161fb27380f3b6fdcaae8b6d3c74050</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Compare Strings (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Compare Strings (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you compare strings, you are producing a result that says one string is greater than or less than the other, or that the two strings are equal.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The rules by which the result is determined are different depending on whether you are performing <bpt id="p1">*</bpt>ordinal comparison<ept id="p1">*</ept> or <bpt id="p2">*</bpt>culture-sensitive comparison<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It is important to use the correct kind of comparison for the specific task.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use basic ordinal comparisons when you have to compare or sort the values of two strings without regard to linguistic conventions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A basic ordinal comparison (<ph id="ph1">`System.StringComparison.Ordinal`</ph>) is case-sensitive, which means that the two strings must match character for character: "and" does not equal "And" or "AND".</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A frequently-used variation is <ph id="ph1">`System.StringComparison.OrdinalIgnoreCase`</ph>, which will match "and", "And", and "AND".</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`StringComparison.OrdinalIgnoreCase`</ph> is often used to compare file names, path names, network paths, and any other string whose value does not change based on the locale of the user's computer.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Culture-sensitive comparisons are typically used to compare and sort strings that are input by end users, because the characters and sorting conventions of these strings might vary depending on the locale of the user's computer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Even strings that contain identical characters might sort differently depending on the culture of the current thread.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you compare strings, you should use the methods that explicitly specify what kind of comparison you intend to perform.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This makes your code much more maintainable and readable.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Whenever possible, use the overloads of the methods of the <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Array?displayProperty=fullName&gt;</ph> classes that take a <ph id="ph3">&lt;xref:System.StringComparison&gt;</ph> enumeration parameter, so that you can specify which type of comparison to perform.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It is best to avoid using the <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> operators when you compare strings.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Also, avoid using the <ph id="ph1">&lt;xref:System.String.CompareTo%2A?displayProperty=fullName&gt;</ph> instance methods because none of the overloads takes a <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example shows how to correctly compare strings whose values will not change based on the locale of the user's computer.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In addition, it also demonstrates the <bpt id="p1">*</bpt>string interning<ept id="p1">*</ept> feature of C#.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When a program declares two or more identical string variables, the compiler stores them all in the same location.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By calling the <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A&gt;</ph> method, you can see that the two strings actually refer to the same object in memory.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.String.Copy%2A?displayProperty=fullName&gt;</ph> method to avoid interning, as shown in the example.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStrings#11<ept id="p2">](../../../csharp/programming-guide/strings/codesnippet/CSharp/how-to-compare-strings_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows how to compare strings the preferred way by using the <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> methods that take a <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">&lt;xref:System.String.CompareTo%2A?displayProperty=fullName&gt;</ph> instance methods are not used here, because none of the overloads takes a <ph id="ph2">&lt;xref:System.StringComparison&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStrings#31<ept id="p2">](../../../csharp/programming-guide/strings/codesnippet/CSharp/how-to-compare-strings_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows how to sort and search for strings in an array in a culture-sensitive manner by using the static <ph id="ph1">&lt;xref:System.Array&gt;</ph> methods that take a <ph id="ph2">&lt;xref:System.StringComparer?displayProperty=fullName&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStrings#32<ept id="p2">](../../../csharp/programming-guide/strings/codesnippet/CSharp/how-to-compare-strings_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Collection classes such as <ph id="ph1">&lt;xref:System.Collections.Hashtable?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601?displayProperty=fullName&gt;</ph> have constructors that take a <ph id="ph4">&lt;xref:System.StringComparer?displayProperty=fullName&gt;</ph> parameter when the type of the elements or keys is <ph id="ph5">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In general, you should use these constructors whenever possible, and specify either <ph id="ph1">`Ordinal`</ph> or <ph id="ph2">`OrdinalIgnoreCase`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Strings<ept id="p1">](../../../csharp/programming-guide/strings/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Comparing Strings<ept id="p1">](../../../standard/base-types/comparing.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Globalizing and Localizing Applications<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/globalizing-and-localizing-applications)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>