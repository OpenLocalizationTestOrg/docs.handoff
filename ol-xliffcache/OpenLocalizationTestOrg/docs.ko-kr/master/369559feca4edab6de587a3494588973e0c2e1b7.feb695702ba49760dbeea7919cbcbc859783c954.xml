{"content":"---\ntitle: \"How to: Perform Action When a Dataflow Block Receives Data\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Task Parallel Library, dataflows\"\n  - \"TPL dataflow library, receiving data\"\nms.assetid: fc2585dc-965e-4632-ace7-73dd02684ed3\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Perform Action When a Dataflow Block Receives Data\n*Execution dataflow block* types call a user-provided delegate when they receive data. The <xref:System.Threading.Tasks.Dataflow.ActionBlock%601?displayProperty=nameWithType>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602?displayProperty=nameWithType>, and <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602?displayProperty=nameWithType> classes are execution dataflow block types. You can use the `delegate` keyword (`Sub` in Visual Basic), <xref:System.Action%601>, <xref:System.Func%602>, or a lambda expression when you provide a work function to an execution dataflow block. This document describes how to use <xref:System.Func%602> and lambda expressions to perform action in execution blocks.  \n\n[!INCLUDE [tpl-install-instructions](../../../includes/tpl-install-instructions.md)]\n\n## Example  \n The following example uses dataflow to read a file from disk and computes the number of bytes in that file that are equal to zero. It uses <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> to read the file and compute the number of zero bytes, and <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> to print the number of zero bytes to the console. The <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> object specifies a <xref:System.Func%602> object to perform work when the blocks receive data. The <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> object uses a lambda expression to print to the console the number of zero bytes that are read.  \n  \n [!code-csharp[TPLDataflow_ExecutionBlocks#1](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_executionblocks/cs/dataflowexecutionblocks.cs#1)]\n [!code-vb[TPLDataflow_ExecutionBlocks#1](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_executionblocks/vb/dataflowexecutionblocks.vb#1)]  \n  \n Although you can provide a lambda expression to a <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> object, this example uses <xref:System.Func%602> to enable other code to use the `CountBytes` method. The <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> object uses a lambda expression because the work to be performed is specific to this task and is not likely to be useful from other code. For more information about how lambda expressions work in the Task Parallel Library, see [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md).  \n  \n The section Summary of Delegate Types in the [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md) document summarizes the delegate types that you can provide to <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, and <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> objects. The table also specifies whether the delegate type operates synchronously or asynchronously.  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `DataflowExecutionBlocks.cs` (`DataflowExecutionBlocks.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.  \n  \n Visual C#  \n  \n **csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowExecutionBlocks.cs**  \n  \n Visual Basic  \n  \n **vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowExecutionBlocks.vb**  \n  \n## Robust Programming  \n This example provides a delegate of type <xref:System.Func%602> to the <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> object to perform the task of the dataflow block synchronously. To enable the dataflow block to behave asynchronously, provide a delegate of type <xref:System.Func%601> to the dataflow block. When a dataflow block behaves asynchronously, the task of the dataflow block is complete only when the returned <xref:System.Threading.Tasks.Task%601> object finishes. The following example modifies the `CountBytes` method and uses the [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) operators ([Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) in Visual Basic) to asynchronously compute the total number of bytes that are zero in the provided file. The <xref:System.IO.FileStream.ReadAsync%2A> method performs file read operations asynchronously.  \n  \n [!code-csharp[TPLDataflow_ExecutionBlocks#2](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_executionblocks/cs/dataflowexecutionblocks.cs#2)]\n [!code-vb[TPLDataflow_ExecutionBlocks#2](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_executionblocks/vb/dataflowexecutionblocks.vb#2)]  \n  \n You can also use asynchronous lambda expressions to perform action in an execution dataflow block. The following example modifies the <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> object that is used in the previous example so that it uses a lambda expression to perform the work asynchronously.  \n  \n [!code-csharp[TPLDataflow_ExecutionBlocks#3](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_executionblocks/cs/dataflowexecutionblocks.cs#3)]\n [!code-vb[TPLDataflow_ExecutionBlocks#3](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_executionblocks/vb/dataflowexecutionblocks.vb#3)]  \n  \n## See also\n\n- [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)\n","nodes":[{"pos":[4,351],"embed":true,"restype":"x-metadata","content":"title: \"How to: Perform Action When a Dataflow Block Receives Data\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Task Parallel Library, dataflows\"\n  - \"TPL dataflow library, receiving data\"\nms.assetid: fc2585dc-965e-4632-ace7-73dd02684ed3\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Perform Action When a Dataflow Block Receives Data","nodes":[{"pos":[0,58],"content":"How to: Perform Action When a Dataflow Block Receives Data","nodes":[{"content":"How to: Perform Action When a Dataflow Block Receives Data","pos":[0,58]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[358,416],"content":"How to: Perform Action When a Dataflow Block Receives Data","linkify":"How to: Perform Action When a Dataflow Block Receives Data","nodes":[{"content":"How to: Perform Action When a Dataflow Block Receives Data","pos":[0,58]}]},{"content":"<bpt id=\"p1\">*</bpt>Execution dataflow block<ept id=\"p1\">*</ept> types call a user-provided delegate when they receive data.","pos":[417,503],"source":"*Execution dataflow block* types call a user-provided delegate when they receive data."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602?displayProperty=nameWithType&gt;</ph> classes are execution dataflow block types.","pos":[504,819],"source":" The <xref:System.Threading.Tasks.Dataflow.ActionBlock%601?displayProperty=nameWithType>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602?displayProperty=nameWithType>, and <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602?displayProperty=nameWithType> classes are execution dataflow block types."},{"content":"You can use the <ph id=\"ph1\">`delegate`</ph> keyword (<ph id=\"ph2\">`Sub`</ph> in Visual Basic), <ph id=\"ph3\">&lt;xref:System.Action%601&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Func%602&gt;</ph>, or a lambda expression when you provide a work function to an execution dataflow block.","pos":[820,1017],"source":" You can use the `delegate` keyword (`Sub` in Visual Basic), <xref:System.Action%601>, <xref:System.Func%602>, or a lambda expression when you provide a work function to an execution dataflow block."},{"content":"This document describes how to use <ph id=\"ph1\">&lt;xref:System.Func%602&gt;</ph> and lambda expressions to perform action in execution blocks.","pos":[1018,1137],"source":" This document describes how to use <xref:System.Func%602> and lambda expressions to perform action in execution blocks."},{"pos":[1230,1237],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses dataflow to read a file from disk and computes the number of bytes in that file that are equal to zero.","pos":[1241,1371]},{"content":"It uses <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> to read the file and compute the number of zero bytes, and <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> to print the number of zero bytes to the console.","pos":[1372,1601],"source":" It uses <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> to read the file and compute the number of zero bytes, and <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> to print the number of zero bytes to the console."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> object specifies a <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> object to perform work when the blocks receive data.","pos":[1602,1758],"source":" The <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> object specifies a <xref:System.Func%602> object to perform work when the blocks receive data."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object uses a lambda expression to print to the console the number of zero bytes that are read.","pos":[1759,1913],"source":" The <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> object uses a lambda expression to print to the console the number of zero bytes that are read."},{"content":"Although you can provide a lambda expression to a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> object, this example uses <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> to enable other code to use the <ph id=\"ph3\">`CountBytes`</ph> method.","pos":[2242,2451],"source":"Although you can provide a lambda expression to a <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> object, this example uses <xref:System.Func%602> to enable other code to use the `CountBytes` method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object uses a lambda expression because the work to be performed is specific to this task and is not likely to be useful from other code.","pos":[2452,2648],"source":" The <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> object uses a lambda expression because the work to be performed is specific to this task and is not likely to be useful from other code."},{"content":"For more information about how lambda expressions work in the Task Parallel Library, see <bpt id=\"p1\">[</bpt>Lambda Expressions in PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>.","pos":[2649,2860],"source":" For more information about how lambda expressions work in the Task Parallel Library, see [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)."},{"content":"The section Summary of Delegate Types in the <bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept> document summarizes the delegate types that you can provide to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602&gt;</ph> objects.","pos":[2867,3254],"source":"The section Summary of Delegate Types in the [Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md) document summarizes the delegate types that you can provide to <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, and <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> objects."},{"content":"The table also specifies whether the delegate type operates synchronously or asynchronously.","pos":[3255,3347]},{"pos":[3356,3374],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[3378,3645],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`DataflowExecutionBlocks.cs`</ph> (<ph id=\"ph2\">`DataflowExecutionBlocks.vb`</ph> for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `DataflowExecutionBlocks.cs` (`DataflowExecutionBlocks.vb` for Visual Basic), and then run the following command in a Developer Command Prompt for Visual Studio window."},{"content":"Visual C#","pos":[3652,3661]},{"pos":[3668,3745],"content":"<bpt id=\"p1\">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowExecutionBlocks.cs<ept id=\"p1\">**</ept>","source":"**csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowExecutionBlocks.cs**"},{"content":"Visual Basic","pos":[3752,3764]},{"pos":[3771,3848],"content":"<bpt id=\"p1\">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowExecutionBlocks.vb<ept id=\"p1\">**</ept>","source":"**vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowExecutionBlocks.vb**"},{"pos":[3857,3875],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"This example provides a delegate of type <ph id=\"ph1\">&lt;xref:System.Func%602&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> object to perform the task of the dataflow block synchronously.","pos":[3879,4071],"source":"This example provides a delegate of type <xref:System.Func%602> to the <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> object to perform the task of the dataflow block synchronously."},{"content":"To enable the dataflow block to behave asynchronously, provide a delegate of type <ph id=\"ph1\">&lt;xref:System.Func%601&gt;</ph> to the dataflow block.","pos":[4072,4199],"source":" To enable the dataflow block to behave asynchronously, provide a delegate of type <xref:System.Func%601> to the dataflow block."},{"content":"When a dataflow block behaves asynchronously, the task of the dataflow block is complete only when the returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object finishes.","pos":[4200,4367],"source":" When a dataflow block behaves asynchronously, the task of the dataflow block is complete only when the returned <xref:System.Threading.Tasks.Task%601> object finishes."},{"content":"The following example modifies the <ph id=\"ph1\">`CountBytes`</ph> method and uses the <bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/async.md)</ept> and <bpt id=\"p2\">[</bpt>await<ept id=\"p2\">](~/docs/csharp/language-reference/keywords/await.md)</ept> operators (<bpt id=\"p3\">[</bpt>Async<ept id=\"p3\">](~/docs/visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id=\"p4\">[</bpt>Await<ept id=\"p4\">](~/docs/visual-basic/language-reference/operators/await-operator.md)</ept> in Visual Basic) to asynchronously compute the total number of bytes that are zero in the provided file.","pos":[4368,4822],"source":" The following example modifies the `CountBytes` method and uses the [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) operators ([Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) in Visual Basic) to asynchronously compute the total number of bytes that are zero in the provided file."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph> method performs file read operations asynchronously.","pos":[4823,4920],"source":" The <xref:System.IO.FileStream.ReadAsync%2A> method performs file read operations asynchronously."},{"content":"You can also use asynchronous lambda expressions to perform action in an execution dataflow block.","pos":[5249,5347]},{"content":"The following example modifies the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> object that is used in the previous example so that it uses a lambda expression to perform the work asynchronously.","pos":[5348,5556],"source":" The following example modifies the <xref:System.Threading.Tasks.Dataflow.TransformBlock%602> object that is used in the previous example so that it uses a lambda expression to perform the work asynchronously."},{"pos":[5887,5895],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5899,5988],"content":"<bpt id=\"p1\">[</bpt>Dataflow<ept id=\"p1\">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept>","source":"[Dataflow](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)"}]}