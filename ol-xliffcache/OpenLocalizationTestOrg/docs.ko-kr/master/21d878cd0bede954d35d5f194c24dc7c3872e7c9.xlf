<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="sbyte-data-type.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21d878cd0bede954d35d5f194c24dc7c3872e7c9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\data-types\sbyte-data-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7bbd9fd2d7a2fd9e6e1f5635bf9354e2d5ed531a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecdbb75f2442e0619488f78083486b0d16bfdf75</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>SByte Data Type (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SByte data type (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Holds signed 8-bit (1-byte) integers that range in value from -128 through 127.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`SByte`</ph> data type to contain integer values that do not require the full data width of <ph id="ph2">`Integer`</ph> or even the half data width of <ph id="ph3">`Short`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In some cases, the common language runtime might be able to pack your <ph id="ph1">`SByte`</ph> variables closely together and save memory consumption.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The default value of <ph id="ph1">`SByte`</ph> is 0.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Literal assignments</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can declare and initialize an <ph id="ph1">`SByte`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following example, integers equal to -102 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id="ph1">`SByte`</ph> values.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This example requires that you compile with the <ph id="ph1">`/removeintchecks`</ph> compiler switch.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You use the prefix <ph id="ph1">`&amp;h`</ph> or <ph id="ph2">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id="ph3">`&amp;b`</ph> or <ph id="ph4">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id="ph5">`&amp;o`</ph> or <ph id="ph6">`&amp;O`</ph> to denote an octal literal.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Decimal literals have no prefix.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Starting with Visual Basic 2017, you can also use the underscore character, <ph id="ph1">`_`</ph>, as a digit separator to enhance readability, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the integer literal is outside the range of <ph id="ph1">`SByte`</ph> (that is, if it is less than <ph id="ph2">&lt;xref:System.SByte.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id="ph3">&lt;xref:System.SByte.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When an integer literal has no suffix, an <bpt id="p1">[</bpt>Integer<ept id="p1">](integer-data-type.md)</ept> is inferred.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the integer literal is outside the range of the <ph id="ph1">`Integer`</ph> type, a <bpt id="p1">[</bpt>Long<ept id="p1">](long-data-type.md)</ept> is inferred.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This means that, in the previous examples, the numeric literals <ph id="ph1">`0x9A`</ph> and <ph id="ph2">`0b10011010`</ph> are interpreted as 32-bit signed integers with a value of 156, which exceeds <ph id="ph3">&lt;xref:System.SByte.MaxValue?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To successfully compile code like this that assigns a non-decimal integer to an <ph id="ph1">`SByte`</ph>, you can do either of the following:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Disable integer bounds checks by compiling with the <ph id="ph1">`/removeintchecks`</ph> compiler switch.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use a <bpt id="p1">[</bpt>type character<ept id="p1">](../../programming-guide\language-features\data-types/type-characters.md)</ept> to explicitly define the literal value that you want to assign to the <ph id="ph1">`SByte`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example assigns a negative literal <ph id="ph1">`Short`</ph> value to an <ph id="ph2">`SByte`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that, for negative numbers, the high-order bit of the high-order word of the numeric literal must be set.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the case of our example, this is bit 15 of the literal <ph id="ph1">`Short`</ph> value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Programming tips</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CLS Compliance.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SByte`</ph> data type is not part of the <bpt id="p1">[</bpt>Common Language Specification<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept> (CLS), so CLS-compliant code cannot consume a component that uses it.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Widening.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SByte`</ph> data type widens to <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, <ph id="ph4">`Long`</ph>, <ph id="ph5">`Decimal`</ph>, <ph id="ph6">`Single`</ph>, and <ph id="ph7">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This means you can convert <ph id="ph1">`SByte`</ph> to any of these types without encountering a <ph id="ph2">&lt;xref:System.OverflowException?displayProperty=fullName&gt;</ph> error.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Type Characters.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SByte`</ph> has no literal type character or identifier type character.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Framework Type.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The corresponding type in the .NET Framework is the <ph id="ph1">&lt;xref:System.SByte?displayProperty=fullName&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.SByte?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conversion Summary<ept id="p1">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Short Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integer Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Long Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Efficient Use of Data Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>