{"content":"---\ntitle: \"Short Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2014-04-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nf1_keywords: \n  - \"vb.Short\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"numbers, whole\"\n  - \"whole numbers\"\n  - \"integral data types\"\n  - \"integer numbers\"\n  - \"numbers, integer\"\n  - \"integers, data types\"\n  - \"integers, types\"\n  - \"data types [Visual Basic], integral\"\n  - \"S literal type character\"\n  - \"Short data type\"\n  - \"literal type characters, S\"\nms.assetid: 65fcbcf3-a841-400e-885e-301497729a8b\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Short data type (Visual Basic)\nHolds signed 16-bit (2-byte) integers that range in value from -32,768 through 32,767.  \n  \n## Remarks  \n Use the `Short` data type to contain integer values that do not require the full data width of `Integer`. In some cases, the common language runtime can pack your `Short` variables closely together and save memory consumption.  \n  \n The default value of `Short` is 0.  \n  \n## Literal assignments\n\nYou can declare and initialize a `Short` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal. If the integer literal is outside the range of `Short` (that is, if it is less than <xref:System.Int16.MinValue?displayProperty=fullName> or greater than <xref:System.Int16.MaxValue?displayProperty=fullName>, a compilation error occurs.\n\nIn the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [Integer](integer-data-type.md) to `Short` values.\n\n[!code-vb[Short](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#Short)]\n\n> [!NOTE]\n> You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.\n\nStarting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-vb[Short](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#ShortS)]\n\nNumeric literals can also include the `S` [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to denote the `Short` data type, as the following example shows.\n\n```vb\nDim number = &H0326S\n```\n\n## Programming tips\n\n-   **Widening.** The `Short` data type widens to `Integer`, `Long`, `Decimal`, `Single`, or `Double`. This means you can convert `Short` to any one of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error.  \n  \n-   **Type Characters.** Appending the literal type character `S` to a literal forces it to the `Short` data type. `Short` has no identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Int16?displayProperty=fullName> structure.  \n  \n## See also\n\n <xref:System.Int16?displayProperty=fullName>   \n [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)   \n [Integer Data Type](../../../visual-basic/language-reference/data-types/integer-data-type.md)   \n [Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md)   \n [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)","nodes":[{"pos":[12,59],"content":"Short Data Type (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Short Data Type (Visual Basic) | Microsoft Docs","pos":[0,47]}]},{"pos":[855,885],"content":"Short data type (Visual Basic)","linkify":"Short data type (Visual Basic)","nodes":[{"content":"Short data type (Visual Basic)","pos":[0,30]}]},{"content":"Holds signed 16-bit (2-byte) integers that range in value from -32,768 through 32,767.","pos":[886,972]},{"pos":[981,988],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the <ph id=\"ph1\">`Short`</ph> data type to contain integer values that do not require the full data width of <ph id=\"ph2\">`Integer`</ph>.","pos":[992,1097],"source":"Use the `Short` data type to contain integer values that do not require the full data width of `Integer`."},{"content":"In some cases, the common language runtime can pack your <ph id=\"ph1\">`Short`</ph> variables closely together and save memory consumption.","pos":[1098,1218],"source":" In some cases, the common language runtime can pack your `Short` variables closely together and save memory consumption."},{"pos":[1225,1259],"content":"The default value of <ph id=\"ph1\">`Short`</ph> is 0.","source":"The default value of `Short` is 0."},{"pos":[1268,1287],"content":"Literal assignments","linkify":"Literal assignments","nodes":[{"content":"Literal assignments","pos":[0,19]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`Short`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.","pos":[1289,1469],"source":"You can declare and initialize a `Short` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`Short`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Int16.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1470,1706],"source":" If the integer literal is outside the range of `Short` (that is, if it is less than <xref:System.Int16.MinValue?displayProperty=fullName> or greater than <xref:System.Int16.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1708,1904],"content":"In the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id=\"p1\">[</bpt>Integer<ept id=\"p1\">](integer-data-type.md)</ept> to <ph id=\"ph1\">`Short`</ph> values.","source":"In the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [Integer](integer-data-type.md) to `Short` values."},{"pos":[1906,2021],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>Short<ept id=\"p2\">](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#Short)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[Short](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#Short)]"},{"pos":[2025,2240],"content":"[!NOTE]\nYou use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","pos":[8,213],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`&amp;h`</ph> or <ph id=\"ph2\">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id=\"ph3\">`&amp;b`</ph> or <ph id=\"ph4\">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id=\"ph5\">`&amp;o`</ph> or <ph id=\"ph6\">`&amp;O`</ph> to denote an octal literal.","pos":[0,172],"source":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal."},{"content":"Decimal literals have no prefix.","pos":[173,205]}]}]},{"pos":[2242,2399],"content":"Starting with Visual Basic 2017, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"pos":[2401,2517],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>Short<ept id=\"p2\">](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#ShortS)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[Short](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#ShortS)]"},{"pos":[2519,2715],"content":"Numeric literals can also include the <ph id=\"ph1\">`S`</ph> <bpt id=\"p1\">[</bpt>type character<ept id=\"p1\">](../../programming-guide\\language-features\\data-types/type-characters.md)</ept> to denote the <ph id=\"ph2\">`Short`</ph> data type, as the following example shows.","source":"Numeric literals can also include the `S` [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to denote the `Short` data type, as the following example shows."},{"pos":[2752,2768],"content":"Programming tips","linkify":"Programming tips","nodes":[{"content":"Programming tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[2774,2787],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`Short`</ph> data type widens to <ph id=\"ph2\">`Integer`</ph>, <ph id=\"ph3\">`Long`</ph>, <ph id=\"ph4\">`Decimal`</ph>, <ph id=\"ph5\">`Single`</ph>, or <ph id=\"ph6\">`Double`</ph>.","pos":[2788,2872],"source":" The `Short` data type widens to `Integer`, `Long`, `Decimal`, `Single`, or `Double`."},{"content":"This means you can convert <ph id=\"ph1\">`Short`</ph> to any one of these types without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=fullName&gt;</ph> error.","pos":[2873,3020],"source":" This means you can convert `Short` to any one of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[3030,3050],"source":"**Type Characters.**"},{"content":"Appending the literal type character <ph id=\"ph1\">`S`</ph> to a literal forces it to the <ph id=\"ph2\">`Short`</ph> data type.","pos":[3051,3140],"source":" Appending the literal type character `S` to a literal forces it to the `Short` data type."},{"content":"<ph id=\"ph1\">`Short`</ph> has no identifier type character.","pos":[3141,3182],"source":"`Short` has no identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[3192,3211],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Int16?displayProperty=fullName&gt;</ph> structure.","pos":[3212,3319],"source":" The corresponding type in the .NET Framework is the <xref:System.Int16?displayProperty=fullName> structure."},{"pos":[3328,3336],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[3387,3475],"source":" [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3478,3588],"source":" [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[3591,3686],"source":" [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Integer Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[3689,3784],"source":" [Integer Data Type](../../../visual-basic/language-reference/data-types/integer-data-type.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Long Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[3787,3876],"source":" [Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","pos":[3879,4010],"source":" [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}