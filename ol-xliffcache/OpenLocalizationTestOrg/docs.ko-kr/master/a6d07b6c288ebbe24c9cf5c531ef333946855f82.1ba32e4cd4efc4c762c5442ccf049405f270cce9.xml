{"content":"---\ntitle: \"Recommended Tags for Documentation Comments - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"XML [C#], tags\"\n  - \"XML documentation [C#], tags\"\nms.assetid: 6e98f7a9-38f4-4d74-b644-1ff1b23320fd\n---\n# Recommended Tags for Documentation Comments (C# Programming Guide)\nThe C# compiler processes documentation comments in your code and formats them as XML in a file whose name you specify in the **/doc** command-line option. To create the final documentation based on the compiler-generated file, you can create a custom tool, or use a tool such as [DocFX](https://dotnet.github.io/docfx/) or [Sandcastle](https://github.com/EWSoftware/SHFB).  \n  \n Tags are processed on code constructs such as types and type members.  \n  \n> [!NOTE]\n>  Documentation comments cannot be applied to a namespace.  \n  \n The compiler will process any tag that is valid XML. The following tags provide generally used functionality in user documentation.  \n  \n## Tags  \n  \n||||  \n|---|---|---|  \n|[\\<c>](../../../csharp/programming-guide/xmldoc/code-inline.md)|[\\<para>](../../../csharp/programming-guide/xmldoc/para.md)|[\\<see>](../../../csharp/programming-guide/xmldoc/see.md)*|  \n|[\\<code>](../../../csharp/programming-guide/xmldoc/code.md)|[\\<param>](../../../csharp/programming-guide/xmldoc/param.md)*|[\\<seealso>](../../../csharp/programming-guide/xmldoc/seealso.md)*|  \n|[\\<example>](../../../csharp/programming-guide/xmldoc/example.md)|[\\<paramref>](../../../csharp/programming-guide/xmldoc/paramref.md)|[\\<summary>](../../../csharp/programming-guide/xmldoc/summary.md)|  \n|[\\<exception>](../../../csharp/programming-guide/xmldoc/exception.md)*|[\\<permission>](../../../csharp/programming-guide/xmldoc/permission.md)*|[\\<typeparam>](../../../csharp/programming-guide/xmldoc/typeparam.md)*|  \n|[\\<include>](../../../csharp/programming-guide/xmldoc/include.md)*|[\\<remarks>](../../../csharp/programming-guide/xmldoc/remarks.md)|[\\<typeparamref>](../../../csharp/programming-guide/xmldoc/typeparamref.md)|  \n|[\\<list>](../../../csharp/programming-guide/xmldoc/list.md)|[\\<returns>](../../../csharp/programming-guide/xmldoc/returns.md)|[\\<value>](../../../csharp/programming-guide/xmldoc/value.md)|  \n  \n (* denotes that the compiler verifies syntax.)  \n  \n If you want angle brackets to appear in the text of a documentation comment, use `<` and `>`, as shown in the following example.  \n  \n```csharp  \n/// <summary cref=\"C < T >\">  \n/// </summary>  \n```  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [/doc (C# Compiler Options)](../../../csharp/language-reference/compiler-options/doc-compiler-option.md)\n- [XML Documentation Comments](../../../csharp/programming-guide/xmldoc/xml-documentation-comments.md)\n","nodes":[{"pos":[4,246],"embed":true,"restype":"x-metadata","content":"title: \"Recommended Tags for Documentation Comments - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"XML [C#], tags\"\n  - \"XML documentation [C#], tags\"\nms.assetid: 6e98f7a9-38f4-4d74-b644-1ff1b23320fd","nodes":[{"content":"Recommended Tags for Documentation Comments - C# Programming Guide","nodes":[{"pos":[0,66],"content":"Recommended Tags for Documentation Comments - C# Programming Guide","nodes":[{"content":"Recommended Tags for Documentation Comments - C# Programming Guide","pos":[0,66]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[253,319],"content":"Recommended Tags for Documentation Comments (C# Programming Guide)","linkify":"Recommended Tags for Documentation Comments (C# Programming Guide)","nodes":[{"content":"Recommended Tags for Documentation Comments (C# Programming Guide)","pos":[0,66]}]},{"content":"The C# compiler processes documentation comments in your code and formats them as XML in a file whose name you specify in the <bpt id=\"p1\">**</bpt>/doc<ept id=\"p1\">**</ept> command-line option.","pos":[320,475],"source":"The C# compiler processes documentation comments in your code and formats them as XML in a file whose name you specify in the **/doc** command-line option."},{"content":"To create the final documentation based on the compiler-generated file, you can create a custom tool, or use a tool such as <bpt id=\"p1\">[</bpt>DocFX<ept id=\"p1\">](https://dotnet.github.io/docfx/)</ept> or <bpt id=\"p2\">[</bpt>Sandcastle<ept id=\"p2\">](https://github.com/EWSoftware/SHFB)</ept>.","pos":[476,693],"source":" To create the final documentation based on the compiler-generated file, you can create a custom tool, or use a tool such as [DocFX](https://dotnet.github.io/docfx/) or [Sandcastle](https://github.com/EWSoftware/SHFB)."},{"content":"Tags are processed on code constructs such as types and type members.","pos":[700,769]},{"pos":[777,844],"content":"[!NOTE]\n Documentation comments cannot be applied to a namespace.","leadings":["","> "],"nodes":[{"content":"Documentation comments cannot be applied to a namespace.","pos":[9,65]}]},{"content":"The compiler will process any tag that is valid XML.","pos":[851,903]},{"content":"The following tags provide generally used functionality in user documentation.","pos":[904,982]},{"pos":[991,995],"content":"Tags","linkify":"Tags","nodes":[{"content":"Tags","pos":[0,4]}]},{"pos":[1025,1088],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>c&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/code-inline.md)</ept>","source":"[\\<c>](../../../csharp/programming-guide/xmldoc/code-inline.md)"},{"pos":[1089,1148],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>para&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/para.md)</ept>","source":"[\\<para>](../../../csharp/programming-guide/xmldoc/para.md)"},{"pos":[1149,1207],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>see&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/see.md)</ept><ph id=\"ph2\">*</ph>","source":"[\\<see>](../../../csharp/programming-guide/xmldoc/see.md)*"},{"pos":[1212,1271],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>code&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/code.md)</ept>","source":"[\\<code>](../../../csharp/programming-guide/xmldoc/code.md)"},{"pos":[1272,1334],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>param&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/param.md)</ept><ph id=\"ph2\">*</ph>","source":"[\\<param>](../../../csharp/programming-guide/xmldoc/param.md)*"},{"pos":[1335,1401],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>seealso&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/seealso.md)</ept><ph id=\"ph2\">*</ph>","source":"[\\<seealso>](../../../csharp/programming-guide/xmldoc/seealso.md)*"},{"pos":[1406,1471],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>example&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/example.md)</ept>","source":"[\\<example>](../../../csharp/programming-guide/xmldoc/example.md)"},{"pos":[1472,1539],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>paramref&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/paramref.md)</ept>","source":"[\\<paramref>](../../../csharp/programming-guide/xmldoc/paramref.md)"},{"pos":[1540,1605],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>summary&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/summary.md)</ept>","source":"[\\<summary>](../../../csharp/programming-guide/xmldoc/summary.md)"},{"pos":[1610,1680],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>exception&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/exception.md)</ept><ph id=\"ph2\">*</ph>","source":"[\\<exception>](../../../csharp/programming-guide/xmldoc/exception.md)*"},{"pos":[1681,1753],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>permission&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/permission.md)</ept><ph id=\"ph2\">*</ph>","source":"[\\<permission>](../../../csharp/programming-guide/xmldoc/permission.md)*"},{"pos":[1754,1824],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>typeparam&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/typeparam.md)</ept><ph id=\"ph2\">*</ph>","source":"[\\<typeparam>](../../../csharp/programming-guide/xmldoc/typeparam.md)*"},{"pos":[1829,1895],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>include&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/include.md)</ept><ph id=\"ph2\">*</ph>","source":"[\\<include>](../../../csharp/programming-guide/xmldoc/include.md)*"},{"pos":[1896,1961],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>remarks&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/remarks.md)</ept>","source":"[\\<remarks>](../../../csharp/programming-guide/xmldoc/remarks.md)"},{"pos":[1962,2037],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>typeparamref&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/typeparamref.md)</ept>","source":"[\\<typeparamref>](../../../csharp/programming-guide/xmldoc/typeparamref.md)"},{"pos":[2042,2101],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>list&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/list.md)</ept>","source":"[\\<list>](../../../csharp/programming-guide/xmldoc/list.md)"},{"pos":[2102,2167],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>returns&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/returns.md)</ept>","source":"[\\<returns>](../../../csharp/programming-guide/xmldoc/returns.md)"},{"pos":[2168,2229],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>value&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/value.md)</ept>","source":"[\\<value>](../../../csharp/programming-guide/xmldoc/value.md)"},{"content":"(* denotes that the compiler verifies syntax.)","pos":[2237,2283]},{"pos":[2290,2418],"content":"If you want angle brackets to appear in the text of a documentation comment, use <ph id=\"ph1\">`&lt;`</ph> and <ph id=\"ph2\">`&gt;`</ph>, as shown in the following example.","source":"If you want angle brackets to appear in the text of a documentation comment, use `<` and `>`, as shown in the following example."},{"pos":[2496,2504],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2508,2574],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2577,2681],"content":"<bpt id=\"p1\">[</bpt>/doc (C# Compiler Options)<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/doc-compiler-option.md)</ept>","source":"[/doc (C# Compiler Options)](../../../csharp/language-reference/compiler-options/doc-compiler-option.md)"},{"pos":[2684,2784],"content":"<bpt id=\"p1\">[</bpt>XML Documentation Comments<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/xml-documentation-comments.md)</ept>","source":"[XML Documentation Comments](../../../csharp/programming-guide/xmldoc/xml-documentation-comments.md)"}]}