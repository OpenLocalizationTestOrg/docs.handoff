{"content":"---\ntitle: \"^ Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"^_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"^ operator [C#]\"\n  - \"bitwise exclusive OR operator [C#]\"\nms.assetid: b09bc815-570f-4db6-a637-5b4ed99d014a\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ^ Operator (C# Reference)\nBinary `^` operators are predefined for the integral types and `bool`. For integral types, `^` computes the bitwise exclusive-OR of its operands. For `bool` operands, `^` computes the logical exclusive-or of its operands; that is, the result is `true` if and only if exactly one of its operands is `true`.  \n  \n## Remarks  \n User-defined types can overload the `^` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)). Operations on integral types are generally allowed on enumeration.  \n  \n## Example  \n [!code-cs[csRefOperators#30](../../../csharp/language-reference/operators/codesnippet/CSharp/xor-operator_1.cs)]  \n  \n The computation of `0xf8 ^ 0x3f` in the previous example performs a bitwise exclusive-OR of the following two binary values, which correspond to the hexadecimal values F8 and 3F:  \n  \n `1111 1000`  \n  \n `0011 1111`  \n  \n The result of the exclusive-OR is `1100 0111`, which is C7 in hexadecimal.  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[12,54],"content":"^ Operator (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"^ Operator (C# Reference) | Microsoft Docs","pos":[0,42]}]},{"pos":[598,623],"content":"^ Operator (C# Reference)","linkify":"^ Operator (C# Reference)","nodes":[{"content":"^ Operator (C# Reference)","pos":[0,25]}]},{"content":"Binary <ph id=\"ph1\">`^`</ph> operators are predefined for the integral types and <ph id=\"ph2\">`bool`</ph>.","pos":[624,694],"source":"Binary `^` operators are predefined for the integral types and `bool`."},{"content":"For integral types, <ph id=\"ph1\">`^`</ph> computes the bitwise exclusive-OR of its operands.","pos":[695,769],"source":" For integral types, `^` computes the bitwise exclusive-OR of its operands."},{"content":"For <ph id=\"ph1\">`bool`</ph> operands, <ph id=\"ph2\">`^`</ph> computes the logical exclusive-or of its operands; that is, the result is <ph id=\"ph3\">`true`</ph> if and only if exactly one of its operands is <ph id=\"ph4\">`true`</ph>.","pos":[770,929],"source":" For `bool` operands, `^` computes the logical exclusive-or of its operands; that is, the result is `true` if and only if exactly one of its operands is `true`."},{"pos":[938,945],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"User-defined types can overload the <ph id=\"ph1\">`^`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","pos":[949,1072],"source":"User-defined types can overload the `^` operator (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"content":"Operations on integral types are generally allowed on enumeration.","pos":[1073,1139]},{"pos":[1148,1155],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1159,1271],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#30<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/xor-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#30](../../../csharp/language-reference/operators/codesnippet/CSharp/xor-operator_1.cs)]"},{"pos":[1278,1456],"content":"The computation of <ph id=\"ph1\">`0xf8 ^ 0x3f`</ph> in the previous example performs a bitwise exclusive-OR of the following two binary values, which correspond to the hexadecimal values F8 and 3F:","source":"The computation of `0xf8 ^ 0x3f` in the previous example performs a bitwise exclusive-OR of the following two binary values, which correspond to the hexadecimal values F8 and 3F:"},{"pos":[1499,1573],"content":"The result of the exclusive-OR is <ph id=\"ph1\">`1100 0111`</ph>, which is C7 in hexadecimal.","source":"The result of the exclusive-OR is `1100 0111`, which is C7 in hexadecimal."},{"pos":[1582,1590],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1594,1654],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1657,1725],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1728,1798],"source":" [C# Operators](../../../csharp/language-reference/operators/index.md)"}]}