{"content":"---\ntitle: \"Known Issues and Considerations in LINQ to Entities | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: acd71129-5ff0-4b4e-b266-c72cc0c53601\ncaps.latest.revision: 5\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Known Issues and Considerations in LINQ to Entities\nThis section provides information about known issues with [!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)] queries.  \n  \n-   [LINQ Queries That cannot be Cached](#LINQQueriesThatAreNotCached)  \n  \n-   [Ordering Information Lost](#OrderingInfoLost)  \n  \n-   [Unsigned Integers Not Supported](#UnsignedIntsUnsupported)  \n  \n-   [Type Conversion Errors](#TypeConversionErrors)  \n  \n-   [Referencing Non-Scalar Variables Not Supported](#RefNonScalarClosures)  \n  \n-   [Nested Queries May Fail with SQL Server 2000](#NestedQueriesSQL2000)  \n  \n-   [Projecting to an Anonymous Type](#ProjectToAnonymousType)  \n  \n<a name=\"LINQQueriesThatAreNotCached\"></a>   \n## LINQ Queries That cannot be Cached  \n Starting with .NET Framework 4.5, LINQ to Entities queries are automatically cached. However, LINQ to Entities queries that apply the `Enumerable.Contains` operator to in-memory collections are not automatically cached. Also parameterizing in-memory collections in compiled LINQ queries is not allowed.  \n  \n<a name=\"OrderingInfoLost\"></a>   \n## Ordering Information Lost  \n Projecting columns into an anonymous type will cause ordering information to be lost in some queries that are executed against a [!INCLUDE[ssVersion2005](../../../../../../includes/ssversion2005-md.md)] database set to a compatibility level of \"80\".  This occurs when a column name in the order-by list matches a column name in the selector, as shown in the following example:  \n  \n [!code-csharp[DP L2E Conceptual Examples#SBUDT543840](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DP L2E Conceptual Examples/CS/Program.cs#sbudt543840)]\n [!code-vb[DP L2E Conceptual Examples#SBUDT543840](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DP L2E Conceptual Examples/VB/Module1.vb#sbudt543840)]  \n  \n<a name=\"UnsignedIntsUnsupported\"></a>   \n## Unsigned Integers Not Supported  \n Specifying an unsigned integer type in a [!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)] query is not supported because the [!INCLUDE[adonet_ef](../../../../../../includes/adonet-ef-md.md)] does not support unsigned integers. If you specify an unsigned integer, an <xref:System.ArgumentException> exception will be thrown during the query expression translation, as shown in the following example. This example queries for an order with ID 48000.  \n  \n [!code-csharp[DP L2E Conceptual Examples#UIntAsQueryParam](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DP L2E Conceptual Examples/CS/Program.cs#uintasqueryparam)]\n [!code-vb[DP L2E Conceptual Examples#UIntAsQueryParam](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DP L2E Conceptual Examples/VB/Module1.vb#uintasqueryparam)]  \n  \n<a name=\"TypeConversionErrors\"></a>   \n## Type Conversion Errors  \n In Visual Basic, when a property is mapped to a column of SQL Server bit type with a value of 1 using the `CByte` function, a <xref:System.Data.SqlClient.SqlException> is thrown with an \"Arithmetic overflow error\" message. The following example queries the `Product.MakeFlag` column in the AdventureWorks sample database and an exception is thrown when the query results are iterated over.  \n  \n [!code-vb[DP L2E Conceptual Examples#SBUDT544355](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DP L2E Conceptual Examples/VB/Module1.vb#sbudt544355)]  \n  \n<a name=\"RefNonScalarClosures\"></a>   \n## Referencing Non-Scalar Variables Not Supported  \n Referencing a non-scalar variables, such as an entity, in a query is not supported. When such a query executes, a <xref:System.NotSupportedException> exception is thrown with a message that states \"Unable to create a constant value of type `EntityType`. Only primitive types ('such as Int32, String, and Guid') are supported in this context.\"  \n  \n> [!NOTE]\n>  Referencing a collection of scalar variables is supported.  \n  \n [!code-csharp[DP L2E Conceptual Examples#SBUDT555877](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DP L2E Conceptual Examples/CS/Program.cs#sbudt555877)]\n [!code-vb[DP L2E Conceptual Examples#SBUDT555877](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DP L2E Conceptual Examples/VB/Module1.vb#sbudt555877)]  \n  \n<a name=\"NestedQueriesSQL2000\"></a>   \n## Nested Queries May Fail with SQL Server 2000  \n With SQL Server 2000, LINQ to Entities queries may fail if they produce nested Transact-SQL queries that are three or more levels deep.  \n  \n<a name=\"ProjectToAnonymousType\"></a>   \n## Projecting to an Anonymous Type  \n If you define your initial query path to include related objects by using the <xref:System.Data.Objects.ObjectQuery%601.Include%2A> method on the <xref:System.Data.Objects.ObjectQuery%601> and then use LINQ to project the returned objects to an anonymous type, the objects specified in the include method are not included in the query results.  \n  \n [!code-csharp[DP L2E Conceptual Examples#ProjToAnonType1](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DP L2E Conceptual Examples/CS/Program.cs#projtoanontype1)]\n [!code-vb[DP L2E Conceptual Examples#ProjToAnonType1](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DP L2E Conceptual Examples/VB/Module1.vb#projtoanontype1)]  \n  \n To get related objects, do not project returned types to an anonymous type.  \n  \n [!code-csharp[DP L2E Conceptual Examples#ProjToAnonType2](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DP L2E Conceptual Examples/CS/Program.cs#projtoanontype2)]\n [!code-vb[DP L2E Conceptual Examples#ProjToAnonType2](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DP L2E Conceptual Examples/VB/Module1.vb#projtoanontype2)]  \n  \n## See Also  \n [LINQ to Entities](../../../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)","nodes":[{"pos":[4,426],"embed":true,"restype":"x-metadata","content":"title: \"Known Issues and Considerations in LINQ to Entities | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: acd71129-5ff0-4b4e-b266-c72cc0c53601\ncaps.latest.revision: 5\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Known Issues and Considerations in LINQ to Entities | Microsoft Docs","nodes":[{"pos":[0,68],"content":"Known Issues and Considerations in LINQ to Entities | Microsoft Docs","nodes":[{"content":"Known Issues and Considerations in LINQ to Entities | Microsoft Docs","pos":[0,68]}]}],"path":["title"]}],"yml":true},{"pos":[433,484],"content":"Known Issues and Considerations in LINQ to Entities","linkify":"Known Issues and Considerations in LINQ to Entities","nodes":[{"content":"Known Issues and Considerations in LINQ to Entities","pos":[0,51]}]},{"pos":[485,625],"content":"This section provides information about known issues with <ph id=\"ph1\">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph> queries.","source":"This section provides information about known issues with [!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)] queries."},{"pos":[635,701],"content":"<bpt id=\"p1\">[</bpt>LINQ Queries That cannot be Cached<ept id=\"p1\">](#LINQQueriesThatAreNotCached)</ept>","source":"[LINQ Queries That cannot be Cached](#LINQQueriesThatAreNotCached)"},{"pos":[711,757],"content":"<bpt id=\"p1\">[</bpt>Ordering Information Lost<ept id=\"p1\">](#OrderingInfoLost)</ept>","source":"[Ordering Information Lost](#OrderingInfoLost)"},{"pos":[767,826],"content":"<bpt id=\"p1\">[</bpt>Unsigned Integers Not Supported<ept id=\"p1\">](#UnsignedIntsUnsupported)</ept>","source":"[Unsigned Integers Not Supported](#UnsignedIntsUnsupported)"},{"pos":[836,883],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Errors<ept id=\"p1\">](#TypeConversionErrors)</ept>","source":"[Type Conversion Errors](#TypeConversionErrors)"},{"pos":[893,964],"content":"<bpt id=\"p1\">[</bpt>Referencing Non-Scalar Variables Not Supported<ept id=\"p1\">](#RefNonScalarClosures)</ept>","source":"[Referencing Non-Scalar Variables Not Supported](#RefNonScalarClosures)"},{"pos":[974,1043],"content":"<bpt id=\"p1\">[</bpt>Nested Queries May Fail with SQL Server 2000<ept id=\"p1\">](#NestedQueriesSQL2000)</ept>","source":"[Nested Queries May Fail with SQL Server 2000](#NestedQueriesSQL2000)"},{"pos":[1053,1111],"content":"<bpt id=\"p1\">[</bpt>Projecting to an Anonymous Type<ept id=\"p1\">](#ProjectToAnonymousType)</ept>","source":"[Projecting to an Anonymous Type](#ProjectToAnonymousType)"},{"pos":[1166,1200],"content":"LINQ Queries That cannot be Cached","linkify":"LINQ Queries That cannot be Cached","nodes":[{"content":"LINQ Queries That cannot be Cached","pos":[0,34]}]},{"content":"Starting with .NET Framework 4.5, LINQ to Entities queries are automatically cached.","pos":[1204,1288]},{"content":"However, LINQ to Entities queries that apply the <ph id=\"ph1\">`Enumerable.Contains`</ph> operator to in-memory collections are not automatically cached.","pos":[1289,1423],"source":" However, LINQ to Entities queries that apply the `Enumerable.Contains` operator to in-memory collections are not automatically cached."},{"content":"Also parameterizing in-memory collections in compiled LINQ queries is not allowed.","pos":[1424,1506]},{"pos":[1550,1575],"content":"Ordering Information Lost","linkify":"Ordering Information Lost","nodes":[{"content":"Ordering Information Lost","pos":[0,25]}]},{"content":"Projecting columns into an anonymous type will cause ordering information to be lost in some queries that are executed against a <ph id=\"ph1\">[!INCLUDE[ssVersion2005](../../../../../../includes/ssversion2005-md.md)]</ph> database set to a compatibility level of \"80\".","pos":[1579,1828],"source":"Projecting columns into an anonymous type will cause ordering information to be lost in some queries that are executed against a [!INCLUDE[ssVersion2005](../../../../../../includes/ssversion2005-md.md)] database set to a compatibility level of \"80\"."},{"content":"This occurs when a column name in the order-by list matches a column name in the selector, as shown in the following example:","pos":[1830,1955]},{"pos":[2350,2381],"content":"Unsigned Integers Not Supported","linkify":"Unsigned Integers Not Supported","nodes":[{"content":"Unsigned Integers Not Supported","pos":[0,31]}]},{"content":"Specifying an unsigned integer type in a <ph id=\"ph1\">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph> query is not supported because the <ph id=\"ph2\">[!INCLUDE[adonet_ef](../../../../../../includes/adonet-ef-md.md)]</ph> does not support unsigned integers.","pos":[2385,2636],"source":"Specifying an unsigned integer type in a [!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)] query is not supported because the [!INCLUDE[adonet_ef](../../../../../../includes/adonet-ef-md.md)] does not support unsigned integers."},{"content":"If you specify an unsigned integer, an <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> exception will be thrown during the query expression translation, as shown in the following example.","pos":[2637,2808],"source":" If you specify an unsigned integer, an <xref:System.ArgumentException> exception will be thrown during the query expression translation, as shown in the following example."},{"content":"This example queries for an order with ID 48000.","pos":[2809,2857]},{"pos":[3269,3291],"content":"Type Conversion Errors","linkify":"Type Conversion Errors","nodes":[{"content":"Type Conversion Errors","pos":[0,22]}]},{"content":"In Visual Basic, when a property is mapped to a column of SQL Server bit type with a value of 1 using the <ph id=\"ph1\">`CByte`</ph> function, a <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlException&gt;</ph> is thrown with an \"Arithmetic overflow error\" message.","pos":[3295,3517],"source":"In Visual Basic, when a property is mapped to a column of SQL Server bit type with a value of 1 using the `CByte` function, a <xref:System.Data.SqlClient.SqlException> is thrown with an \"Arithmetic overflow error\" message."},{"content":"The following example queries the <ph id=\"ph1\">`Product.MakeFlag`</ph> column in the AdventureWorks sample database and an exception is thrown when the query results are iterated over.","pos":[3518,3684],"source":" The following example queries the `Product.MakeFlag` column in the AdventureWorks sample database and an exception is thrown when the query results are iterated over."},{"pos":[3907,3953],"content":"Referencing Non-Scalar Variables Not Supported","linkify":"Referencing Non-Scalar Variables Not Supported","nodes":[{"content":"Referencing Non-Scalar Variables Not Supported","pos":[0,46]}]},{"content":"Referencing a non-scalar variables, such as an entity, in a query is not supported.","pos":[3957,4040]},{"content":"When such a query executes, a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph> exception is thrown with a message that states \"Unable to create a constant value of type <ph id=\"ph2\">`EntityType`</ph>.","pos":[4041,4210],"source":" When such a query executes, a <xref:System.NotSupportedException> exception is thrown with a message that states \"Unable to create a constant value of type `EntityType`."},{"content":"Only primitive types ('such as Int32, String, and Guid') are supported in this context.\"","pos":[4211,4299]},{"pos":[4307,4376],"content":"[!NOTE]\n Referencing a collection of scalar variables is supported.","leadings":["","> "],"nodes":[{"content":"Referencing a collection of scalar variables is supported.","pos":[9,67]}]},{"pos":[4768,4812],"content":"Nested Queries May Fail with SQL Server 2000","linkify":"Nested Queries May Fail with SQL Server 2000","nodes":[{"content":"Nested Queries May Fail with SQL Server 2000","pos":[0,44]}]},{"content":"With SQL Server 2000, LINQ to Entities queries may fail if they produce nested Transact-SQL queries that are three or more levels deep.","pos":[4816,4951]},{"pos":[5001,5032],"content":"Projecting to an Anonymous Type","linkify":"Projecting to an Anonymous Type","nodes":[{"content":"Projecting to an Anonymous Type","pos":[0,31]}]},{"content":"If you define your initial query path to include related objects by using the <ph id=\"ph1\">&lt;xref:System.Data.Objects.ObjectQuery%601.Include%2A&gt;</ph> method on the <ph id=\"ph2\">&lt;xref:System.Data.Objects.ObjectQuery%601&gt;</ph> and then use LINQ to project the returned objects to an anonymous type, the objects specified in the include method are not included in the query results.","pos":[5036,5379],"source":"If you define your initial query path to include related objects by using the <xref:System.Data.Objects.ObjectQuery%601.Include%2A> method on the <xref:System.Data.Objects.ObjectQuery%601> and then use LINQ to project the returned objects to an anonymous type, the objects specified in the include method are not included in the query results."},{"content":"To get related objects, do not project returned types to an anonymous type.","pos":[5746,5821]},{"pos":[6190,6198],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6202,6308],"content":"<bpt id=\"p1\">[</bpt>LINQ to Entities<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)</ept>","source":"[LINQ to Entities](../../../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)"}]}