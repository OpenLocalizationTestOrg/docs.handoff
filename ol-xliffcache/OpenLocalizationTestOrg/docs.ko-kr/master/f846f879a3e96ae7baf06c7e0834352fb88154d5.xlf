<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-binding.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f846f879a3e96ae7baf06c7e0834352fb88154d5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\data-binding.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c119a195fd6db6eada9be2ea40c1c21e037a55a6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84fbf253e62a96d7eecde3034e378118ab776a35</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Binding | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Binding</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> supports binding to common controls, such as grid controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Specifically, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> defines the basic patterns for binding to a data grid and handling master-detail binding, both with regard to display and updating.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Underlying Principle</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> translates <ph id="ph2">[!INCLUDE[vbteclinq](../../../../../../includes/vbteclinq-md.md)]</ph> queries to SQL for execution on a database.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The results are strongly typed <ph id="ph1">`IEnumerable`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because these objects are ordinary common language runtime (CLR) objects, ordinary object data binding can be used to display the results.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On the other hand, change operations (inserts, updates, and deletes) require additional steps.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Operation</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Implicitly binding to Windows Forms controls is accomplished by implementing <ph id="ph1">&lt;xref:System.ComponentModel.IListSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Data sources generic <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> (<ph id="ph2">`Table&lt;T&gt;`</ph> in C# or <ph id="ph3">`Table(Of T)`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph>) and generic <ph id="ph5">`DataQuery`</ph> have been updated to implement <ph id="ph6">&lt;xref:System.ComponentModel.IListSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>User interface (UI) data-binding engines (Windows Forms and Windows Presentation Foundation) both test whether their data source implements <ph id="ph1">&lt;xref:System.ComponentModel.IListSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Therefore, writing a direct affectation of a query to a data source of a control implicitly calls <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> collection generation, as in the following example:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqDataBinding#1<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqDataBinding/cs/Program.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqDataBinding#1<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqDataBinding/vb/Module1.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The same occurs with Windows Presentation Foundation:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqDataBinding#2<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqDataBinding/cs/Program.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DLinqDataBinding#2<ept id="p2">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqDataBinding/vb/Module1.vb#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Collection generations are implemented by generic <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> and generic <ph id="ph2">`DataQuery`</ph> in <ph id="ph3">&lt;xref:System.ComponentModel.IListSource.GetList%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>IListSource Implementation</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> implements <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> in two locations:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The data source is a <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph>: <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> browses the table to fill a <ph id="ph3">`DataBindingList`</ph> collection that keeps a reference on the table.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The data source is an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>There are two scenarios:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> finds the underlying <ph id="ph2">&lt;xref:System.Data.Linq.Table%601&gt;</ph> from the <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, the source allows for edition and the situation is the same as in the first bullet point.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> cannot find the underlying <ph id="ph2">&lt;xref:System.Data.Linq.Table%601&gt;</ph>, the source does not allow for edition (for example, <ph id="ph3">`groupby`</ph>).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> browses the query to fill a generic <ph id="ph2">`SortableBindingList`</ph>, which is a simple <ph id="ph3">&lt;xref:System.ComponentModel.BindingList%601&gt;</ph> that implements the sorting feature for T entities for a given property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specialized Collections</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For many features described earlier in this document, <ph id="ph1">&lt;xref:System.ComponentModel.BindingList%601&gt;</ph> has been specialized to some different classes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These classes are generic <ph id="ph1">`SortableBindingList`</ph> and generic <ph id="ph2">`DataBindingList`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Both are declared as internal.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Generic SortableBindingList</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This class inherits from <ph id="ph1">&lt;xref:System.ComponentModel.BindingList%601&gt;</ph>, and is a sortable version of <ph id="ph2">&lt;xref:System.ComponentModel.BindingList%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Sorting is an in-memory solution and never contacts the database itself.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BindingList%601&gt;</ph> implements <ph id="ph2">&lt;xref:System.ComponentModel.IBindingList&gt;</ph> but does not support sorting by default.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">&lt;xref:System.ComponentModel.BindingList%601&gt;</ph> implements <ph id="ph2">&lt;xref:System.ComponentModel.IBindingList&gt;</ph> with virtual <bpt id="p1">*</bpt>core<ept id="p1">*</ept> methods.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can easily override these methods.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Generic <ph id="ph1">`SortableBindingList`</ph> overrides <ph id="ph2">&lt;xref:System.ComponentModel.BindingList%601.SupportsSortingCore%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.BindingList%601.SortPropertyCore%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ComponentModel.BindingList%601.SortDirectionCore%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ComponentModel.BindingList%601.ApplySortCore%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ApplySortCore`</ph> is called by <ph id="ph2">&lt;xref:System.ComponentModel.IBindingList.ApplySort%2A&gt;</ph> and sorts the list of T items for a given property.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An exception is raised if the property does not belong to T.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To achieve sorting, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> creates a generic <ph id="ph2">`SortableBindingList.PropertyComparer`</ph> class that inherits from generic <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A&gt;</ph> and implements a default comparer for a given type T, a <ph id="ph4">`PropertyDescriptor`</ph>, and a direction.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This class dynamically creates a <ph id="ph1">`Comparer`</ph> of T where T is the <ph id="ph2">`PropertyType`</ph> of the <ph id="ph3">`PropertyDescriptor`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Then, the default comparer is retrieved from the static generic <ph id="ph1">`Comparer`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A default instance is obtained by using reflection.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Generic <ph id="ph1">`SortableBindingList`</ph> is also the base class for <ph id="ph2">`DataBindingList`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Generic <ph id="ph1">`SortableBindingList`</ph> offers two virtual methods for suspending or resuming items add/remove tracking.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Those two methods can be used for base features such as sorting, but will really be implemented by upper classes like generic <ph id="ph1">`DataBindingList`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Generic DataBindingList</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This class inherits from generic <ph id="ph1">`SortableBindingLIst`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Generic <ph id="ph1">`DataBindingList`</ph> keeps a reference on the underlying generic <ph id="ph2">`Table`</ph> of the generic <ph id="ph3">`IQueryable`</ph> used for the initial filling of the collection.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Generic <ph id="ph1">`DatabindingList`</ph> adds tracking for item add/remove to the collection by overriding <ph id="ph2">`InsertItem`</ph>() and <ph id="ph3">`RemoveItem`</ph>().</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It also implements the abstract suspend/resume tracking feature to make tracking conditional.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This feature makes generic <ph id="ph1">`DataBindingList`</ph> take advantage of all the polymorphic usage of the tracking feature of the parent classes.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Binding to EntitySets</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Binding to <ph id="ph1">`EntitySet`</ph> is a special case because <ph id="ph2">`EntitySet`</ph> is already a collection that implements <ph id="ph3">&lt;xref:System.ComponentModel.IBindingList&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> adds sorting and canceling (<ph id="ph2">&lt;xref:System.ComponentModel.ICancelAddNew&gt;</ph>) support.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`EntitySet`</ph> class uses an internal list to store entities.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This list is a low-level collection based on a generic array, the generic <ph id="ph1">`ItemList`</ph> class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Adding a Sorting Feature</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Arrays offer a sort method (<ph id="ph1">`Array.Sort()`</ph>) that you can be used with a <ph id="ph2">`Comparer`</ph> of T. <ph id="ph3">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> uses the generic <ph id="ph4">`SortableBindingList.PropertyComparer`</ph> class described earlier in this topic to obtain this <ph id="ph5">`Comparer`</ph> for the property and the direction to be sorted on.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`ApplySort`</ph> method is added to generic <ph id="ph2">`ItemList`</ph> to call this feature.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>On the <ph id="ph1">`EntitySet`</ph> side, you now have to declare sorting support:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.IBindingList.SupportsSorting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.IBindingList.ApplySort%2A&gt;</ph> calls <ph id="ph2">`entities.ApplySort()`</ph> and then <ph id="ph3">`OnListChanged()`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.IBindingList.SortDirection%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.IBindingList.SortProperty%2A&gt;</ph> properties expose the current sorting definition, which is stored in local members.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When you use a System.Windows.Forms.BindingSource and bind an EntitySet<ph id="ph1">\&lt;</ph>TEntity&gt; to the System.Windows.Forms.BindingSource.DataSource, you must call EntitySet<ph id="ph2">\&lt;</ph>Tentity&gt;.GetNewBindingList to update BindingSource.List.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you use a System.Windows.Forms.BindingSource and set the BindingSource.DataMember property and set BindingSource.DataSource to a class that has a property named in the BindingSource.DataMember that exposes the EntitySet<ph id="ph1">\&lt;</ph>TEntity&gt;, you don’t have to call EntitySet<ph id="ph2">\&lt;</ph>Tentity&gt;.GetNewBindingList to update the BindingSource.List but you lose Sorting capability.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Caching</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> queries implement <ph id="ph2">&lt;xref:System.ComponentModel.IListSource.GetList%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When the Windows Forms BindingSource class meets this interface, it calls GetList() threes time for a single connection.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To work around this situation, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> implements a cache per instance to store and always return the same generated collection.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Cancellation</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.IBindingList&gt;</ph> defines an <ph id="ph2">&lt;xref:System.ComponentModel.IBindingList.AddNew%2A&gt;</ph> method that is used by controls to create a new item from a bound collection.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataGridView`</ph> control shows this feature very well when the last visible row contains a star in its header.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The star shows you that you can add a new item.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In addition to this feature, a collection can also implement <ph id="ph1">&lt;xref:System.ComponentModel.ICancelAddNew&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This feature allows for the controls to cancel or validate that the new edited item has been validated or not.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ICancelAddNew&gt;</ph> is implemented in all <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> databound collections (generic <ph id="ph3">`SortableBindingList`</ph> and generic <ph id="ph4">`EntitySet`</ph>).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In both implementations the code performs as follows:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Lets items be inserted and then removed from the collection.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Does not track changes as long as the UI does not commit the edition.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Does not track changes as long as the edition is canceled (<ph id="ph1">&lt;xref:System.ComponentModel.ICancelAddNew.CancelNew%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Allows tracking when the edition is committed (<ph id="ph1">&lt;xref:System.ComponentModel.ICancelAddNew.EndNew%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Lets the collection behave normally if the new item does not come from <ph id="ph1">&lt;xref:System.ComponentModel.IBindingList.AddNew%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This section calls out several items that might help troubleshoot your <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> data binding applications.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You must use properties; using only fields is not sufficient.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Windows Forms require this usage.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`image`</ph>, <ph id="ph2">`varbinary`</ph>, and <ph id="ph3">`timestamp`</ph> database types map to byte array.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`ToString()`</ph> is not supported in this scenario, these objects cannot be displayed.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A class member mapped to a primary key has a setter, but <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not support object identity change.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Therefore, the primary/unique key that is used in mapping cannot be updated in the database.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A change in the grid causes an exception when you call <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If an entity is bound in two separate grids (for example, one master and another detail), a <ph id="ph1">`Delete`</ph> in the master grid is not propagated to the detail grid.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Background Information<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>