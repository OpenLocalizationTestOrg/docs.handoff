{"content":"---\ntitle: \"Asynchronous Client Socket Example | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"asynchronous client sockets\"\n  - \"sockets, code examples\"\n  - \"sockets, asynchronous client sockets\"\nms.assetid: d4ac53a0-b50b-4232-9726-d47d25fcc38a\ncaps.latest.revision: 8\nauthor: \"mcleblanc\"\nms.author: \"markl\"\nmanager: \"markl\"\n---\n# Asynchronous Client Socket Example\nThe following example program creates a client that connects to a server. The client is built with an asynchronous socket, so execution of the client application is not suspended while the server returns a response. The application sends a string to the server and then displays the string returned by the server on the console.  \n  \n```vb  \nImports System  \nImports System.Net  \nImports System.Net.Sockets  \nImports System.Threading  \nImports System.Text  \n  \n' State object for receiving data from remote device.  \n  \nPublic Class StateObject  \n    ' Client socket.  \n    Public workSocket As Socket = Nothing  \n    ' Size of receive buffer.  \n    Public Const BufferSize As Integer = 256  \n    ' Receive buffer.  \n    Public buffer(BufferSize) As Byte  \n    ' Received data string.  \n    Public sb As New StringBuilder  \nEnd Class 'StateObject  \n  \nPublic Class AsynchronousClient  \n    ' The port number for the remote device.  \n    Private Const port As Integer = 11000  \n  \n    ' ManualResetEvent instances signal completion.  \n    Private Shared connectDone As New ManualResetEvent(False)  \n    Private Shared sendDone As New ManualResetEvent(False)  \n    Private Shared receiveDone As New ManualResetEvent(False)  \n  \n    ' The response from the remote device.  \n    Private Shared response As String = String.Empty  \n  \n    Public Shared Sub Main()  \n        ' Establish the remote endpoint for the socket.  \n        ' For this example use local machine.  \n        Dim ipHostInfo As IPHostEntry = Dns.Resolve(Dns.GetHostName())  \n        Dim ipAddress As IPAddress = ipHostInfo.AddressList(0)  \n        Dim remoteEP As New IPEndPoint(ipAddress, port)  \n  \n        ' Create a TCP/IP socket.  \n        Dim client As New Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)  \n  \n        ' Connect to the remote endpoint.  \n        client.BeginConnect(remoteEP, New AsyncCallback(AddressOf ConnectCallback), client)  \n  \n        ' Wait for connect.  \n        connectDone.WaitOne()  \n  \n        ' Send test data to the remote device.  \n        Send(client, \"This is a test<EOF>\")  \n        sendDone.WaitOne()  \n  \n        ' Receive the response from the remote device.  \n        Receive(client)  \n        receiveDone.WaitOne()  \n  \n        ' Write the response to the console.  \n        Console.WriteLine(\"Response received : {0}\", response)  \n  \n        ' Release the socket.  \n        client.Shutdown(SocketShutdown.Both)  \n        client.Close()  \n    End Sub 'Main  \n  \n    Private Shared Sub ConnectCallback(ByVal ar As IAsyncResult)  \n        ' Retrieve the socket from the state object.  \n        Dim client As Socket = CType(ar.AsyncState, Socket)  \n  \n        ' Complete the connection.  \n        client.EndConnect(ar)  \n  \n        Console.WriteLine(\"Socket connected to {0}\", client.RemoteEndPoint.ToString())  \n  \n        ' Signal that the connection has been made.  \n        connectDone.Set()  \n    End Sub 'ConnectCallback  \n  \n    Private Shared Sub Receive(ByVal client As Socket)  \n  \n        ' Create the state object.  \n        Dim state As New StateObject  \n        state.workSocket = client  \n  \n        ' Begin receiving the data from the remote device.  \n        client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0, New AsyncCallback(AddressOf ReceiveCallback), state)  \n    End Sub 'Receive  \n  \n    Private Shared Sub ReceiveCallback(ByVal ar As IAsyncResult)  \n  \n        ' Retrieve the state object and the client socket   \n        ' from the asynchronous state object.  \n        Dim state As StateObject = CType(ar.AsyncState, StateObject)  \n        Dim client As Socket = state.workSocket  \n  \n        ' Read data from the remote device.  \n        Dim bytesRead As Integer = client.EndReceive(ar)  \n  \n        If bytesRead > 0 Then  \n            ' There might be more data, so store the data received so far.  \n            state.sb.Append(Encoding.ASCII.GetString(state.buffer, 0, bytesRead))  \n  \n            ' Get the rest of the data.  \n            client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0, New AsyncCallback(AddressOf ReceiveCallback), state)  \n        Else  \n            ' All the data has arrived; put it in response.  \n            If state.sb.Length > 1 Then  \n                response = state.sb.ToString()  \n            End If  \n            ' Signal that all bytes have been received.  \n            receiveDone.Set()  \n        End If  \n    End Sub 'ReceiveCallback  \n  \n    Private Shared Sub Send(ByVal client As Socket, ByVal data As String)  \n        ' Convert the string data to byte data using ASCII encoding.  \n        Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)  \n  \n        ' Begin sending the data to the remote device.  \n        client.BeginSend(byteData, 0, byteData.Length, 0, New AsyncCallback(AddressOf SendCallback), client)  \n    End Sub 'Send  \n  \n    Private Shared Sub SendCallback(ByVal ar As IAsyncResult)  \n        ' Retrieve the socket from the state object.  \n        Dim client As Socket = CType(ar.AsyncState, Socket)  \n  \n        ' Complete sending the data to the remote device.  \n        Dim bytesSent As Integer = client.EndSend(ar)  \n        Console.WriteLine(\"Sent {0} bytes to server.\", bytesSent)  \n  \n        ' Signal that all bytes have been sent.  \n        sendDone.Set()  \n    End Sub 'SendCallback  \nEnd Class 'AsynchronousClient  \n```  \n  \n```csharp  \nusing System;  \nusing System.Net;  \nusing System.Net.Sockets;  \nusing System.Threading;  \nusing System.Text;  \n  \n// State object for receiving data from remote device.  \npublic class StateObject {  \n    // Client socket.  \n    public Socket workSocket = null;  \n    // Size of receive buffer.  \n    public const int BufferSize = 256;  \n    // Receive buffer.  \n    public byte[] buffer = new byte[BufferSize];  \n    // Received data string.  \n    public StringBuilder sb = new StringBuilder();  \n}  \n  \npublic class AsynchronousClient {  \n    // The port number for the remote device.  \n    private const int port = 11000;  \n  \n    // ManualResetEvent instances signal completion.  \n    private static ManualResetEvent connectDone =   \n        new ManualResetEvent(false);  \n    private static ManualResetEvent sendDone =   \n        new ManualResetEvent(false);  \n    private static ManualResetEvent receiveDone =   \n        new ManualResetEvent(false);  \n  \n    // The response from the remote device.  \n    private static String response = String.Empty;  \n  \n    private static void StartClient() {  \n        // Connect to a remote device.  \n        try {  \n            // Establish the remote endpoint for the socket.  \n            // The name of the   \n            // remote device is \"host.contoso.com\".  \n            IPHostEntry ipHostInfo = Dns.Resolve(\"host.contoso.com\");  \n            IPAddress ipAddress = ipHostInfo.AddressList[0];  \n            IPEndPoint remoteEP = new IPEndPoint(ipAddress, port);  \n  \n            // Create a TCP/IP socket.  \n            Socket client = new Socket(AddressFamily.InterNetwork,  \n                SocketType.Stream, ProtocolType.Tcp);  \n  \n            // Connect to the remote endpoint.  \n            client.BeginConnect( remoteEP,   \n                new AsyncCallback(ConnectCallback), client);  \n            connectDone.WaitOne();  \n  \n            // Send test data to the remote device.  \n            Send(client,\"This is a test<EOF>\");  \n            sendDone.WaitOne();  \n  \n            // Receive the response from the remote device.  \n            Receive(client);  \n            receiveDone.WaitOne();  \n  \n            // Write the response to the console.  \n            Console.WriteLine(\"Response received : {0}\", response);  \n  \n            // Release the socket.  \n            client.Shutdown(SocketShutdown.Both);  \n            client.Close();  \n  \n        } catch (Exception e) {  \n            Console.WriteLine(e.ToString());  \n        }  \n    }  \n  \n    private static void ConnectCallback(IAsyncResult ar) {  \n        try {  \n            // Retrieve the socket from the state object.  \n            Socket client = (Socket) ar.AsyncState;  \n  \n            // Complete the connection.  \n            client.EndConnect(ar);  \n  \n            Console.WriteLine(\"Socket connected to {0}\",  \n                client.RemoteEndPoint.ToString());  \n  \n            // Signal that the connection has been made.  \n            connectDone.Set();  \n        } catch (Exception e) {  \n            Console.WriteLine(e.ToString());  \n        }  \n    }  \n  \n    private static void Receive(Socket client) {  \n        try {  \n            // Create the state object.  \n            StateObject state = new StateObject();  \n            state.workSocket = client;  \n  \n            // Begin receiving the data from the remote device.  \n            client.BeginReceive( state.buffer, 0, StateObject.BufferSize, 0,  \n                new AsyncCallback(ReceiveCallback), state);  \n        } catch (Exception e) {  \n            Console.WriteLine(e.ToString());  \n        }  \n    }  \n  \n    private static void ReceiveCallback( IAsyncResult ar ) {  \n        try {  \n            // Retrieve the state object and the client socket   \n            // from the asynchronous state object.  \n            StateObject state = (StateObject) ar.AsyncState;  \n            Socket client = state.workSocket;  \n  \n            // Read data from the remote device.  \n            int bytesRead = client.EndReceive(ar);  \n  \n            if (bytesRead > 0) {  \n                // There might be more data, so store the data received so far.  \n            state.sb.Append(Encoding.ASCII.GetString(state.buffer,0,bytesRead));  \n  \n                // Get the rest of the data.  \n                client.BeginReceive(state.buffer,0,StateObject.BufferSize,0,  \n                    new AsyncCallback(ReceiveCallback), state);  \n            } else {  \n                // All the data has arrived; put it in response.  \n                if (state.sb.Length > 1) {  \n                    response = state.sb.ToString();  \n                }  \n                // Signal that all bytes have been received.  \n                receiveDone.Set();  \n            }  \n        } catch (Exception e) {  \n            Console.WriteLine(e.ToString());  \n        }  \n    }  \n  \n    private static void Send(Socket client, String data) {  \n        // Convert the string data to byte data using ASCII encoding.  \n        byte[] byteData = Encoding.ASCII.GetBytes(data);  \n  \n        // Begin sending the data to the remote device.  \n        client.BeginSend(byteData, 0, byteData.Length, 0,  \n            new AsyncCallback(SendCallback), client);  \n    }  \n  \n    private static void SendCallback(IAsyncResult ar) {  \n        try {  \n            // Retrieve the socket from the state object.  \n            Socket client = (Socket) ar.AsyncState;  \n  \n            // Complete sending the data to the remote device.  \n            int bytesSent = client.EndSend(ar);  \n            Console.WriteLine(\"Sent {0} bytes to server.\", bytesSent);  \n  \n            // Signal that all bytes have been sent.  \n            sendDone.Set();  \n        } catch (Exception e) {  \n            Console.WriteLine(e.ToString());  \n        }  \n    }  \n  \n    public static int Main(String[] args) {  \n        StartClient();  \n        return 0;  \n    }  \n}  \n```  \n  \n## See Also  \n [Asynchronous Server Socket Example](../../../docs/framework/network-programming/asynchronous-server-socket-example.md)   \n [Using a Synchronous Server Socket](../../../docs/framework/network-programming/using-a-synchronous-server-socket.md)   \n [Socket Code Examples](../../../docs/framework/network-programming/socket-code-examples.md)","nodes":[{"pos":[4,507],"nodes":[{"content":"Asynchronous Client Socket Example | Microsoft Docs","nodes":[{"pos":[0,51],"content":"Asynchronous Client Socket Example | Microsoft Docs","nodes":[{"content":"Asynchronous Client Socket Example | Microsoft Docs","pos":[0,51]}]}],"pos":[6,60],"yaml":true}],"content":"title: \"Asynchronous Client Socket Example | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"asynchronous client sockets\"\n  - \"sockets, code examples\"\n  - \"sockets, asynchronous client sockets\"\nms.assetid: d4ac53a0-b50b-4232-9726-d47d25fcc38a\ncaps.latest.revision: 8\nauthor: \"mcleblanc\"\nms.author: \"markl\"\nmanager: \"markl\"","yamlblock":true},{"pos":[514,548],"content":"Asynchronous Client Socket Example","linkify":"Asynchronous Client Socket Example","nodes":[{"content":"Asynchronous Client Socket Example","pos":[0,34]}]},{"content":"The following example program creates a client that connects to a server.","pos":[549,622]},{"content":"The client is built with an asynchronous socket, so execution of the client application is not suspended while the server returns a response.","pos":[623,764]},{"content":"The application sends a string to the server and then displays the string returned by the server on the console.","pos":[765,877]},{"pos":[11869,11877],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Asynchronous Server Socket Example<ept id=\"p1\">](../../../docs/framework/network-programming/asynchronous-server-socket-example.md)</ept><ph id=\"ph1\"> </ph>","pos":[11881,12001],"source":"[Asynchronous Server Socket Example](../../../docs/framework/network-programming/asynchronous-server-socket-example.md) "},{"content":"<bpt id=\"p1\">[</bpt>Using a Synchronous Server Socket<ept id=\"p1\">](../../../docs/framework/network-programming/using-a-synchronous-server-socket.md)</ept><ph id=\"ph1\"> </ph>","pos":[12005,12123],"source":"[Using a Synchronous Server Socket](../../../docs/framework/network-programming/using-a-synchronous-server-socket.md) "},{"content":"<bpt id=\"p1\">[</bpt>Socket Code Examples<ept id=\"p1\">](../../../docs/framework/network-programming/socket-code-examples.md)</ept>","pos":[12127,12218],"source":"[Socket Code Examples](../../../docs/framework/network-programming/socket-code-examples.md)"}]}