{"content":"---\ntitle: \"Arrays - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"arrays [C#]\"\n  - \"C# language, arrays\"\nms.assetid: bb79bdde-e570-4c30-adb0-1dd5759ae041\n---\n# Arrays (C# Programming Guide)\n\nYou can store multiple variables of the same type in an array data structure. You declare an array by specifying the type of its elements.  \n  \n `type[] arrayName;`  \n  \n The following example creates single-dimensional, multidimensional, and jagged arrays:  \n  \n [!code-csharp[csProgGuideArrays#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#1)]  \n  \n## Array Overview\n\n An array has the following properties:  \n  \n-   An array can be [Single-Dimensional](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md), [Multidimensional](../../../csharp/programming-guide/arrays/multidimensional-arrays.md) or [Jagged](../../../csharp/programming-guide/arrays/jagged-arrays.md).  \n  \n-   The number of dimensions and the length of each dimension are established when the array instance is created. These values can't be changed during the lifetime of the instance.  \n  \n-   The default values of numeric array elements are set to zero, and reference elements are set to null.  \n  \n-   A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to `null`.  \n  \n-   Arrays are zero indexed: an array with `n` elements is indexed from `0` to `n-1`.  \n  \n-   Array elements can be of any type, including an array type.  \n  \n-   Array types are [reference types](../../../csharp/language-reference/keywords/reference-types.md) derived from the abstract base type <xref:System.Array>. Since this type implements <xref:System.Collections.IEnumerable> and <xref:System.Collections.Generic.IEnumerable%601>, you can use [foreach](../../../csharp/language-reference/keywords/foreach-in.md) iteration on all arrays in C#.  \n  \n## Related Sections  \n  \n-   [Arrays as Objects](../../../csharp/programming-guide/arrays/arrays-as-objects.md)  \n  \n-   [Using foreach with Arrays](../../../csharp/programming-guide/arrays/using-foreach-with-arrays.md)  \n  \n-   [Passing Arrays as Arguments](../../../csharp/programming-guide/arrays/passing-arrays-as-arguments.md)  \n  \n## C# Language Specification\n\n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Collections](../../../csharp/programming-guide/concepts/collections.md)\n","nodes":[{"pos":[4,197],"embed":true,"restype":"x-metadata","content":"title: \"Arrays - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"arrays [C#]\"\n  - \"C# language, arrays\"\nms.assetid: bb79bdde-e570-4c30-adb0-1dd5759ae041","nodes":[{"content":"Arrays - C# Programming Guide","nodes":[{"pos":[0,29],"content":"Arrays - C# Programming Guide","nodes":[{"content":"Arrays - C# Programming Guide","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[204,233],"content":"Arrays (C# Programming Guide)","linkify":"Arrays (C# Programming Guide)","nodes":[{"content":"Arrays (C# Programming Guide)","pos":[0,29]}]},{"content":"You can store multiple variables of the same type in an array data structure.","pos":[235,312]},{"content":"You declare an array by specifying the type of its elements.","pos":[313,373]},{"content":"The following example creates single-dimensional, multidimensional, and jagged arrays:","pos":[406,492]},{"pos":[624,638],"content":"Array Overview","linkify":"Array Overview","nodes":[{"content":"Array Overview","pos":[0,14]}]},{"content":"An array has the following properties:","pos":[641,679]},{"pos":[689,957],"content":"An array can be <bpt id=\"p1\">[</bpt>Single-Dimensional<ept id=\"p1\">](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)</ept>, <bpt id=\"p2\">[</bpt>Multidimensional<ept id=\"p2\">](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)</ept> or <bpt id=\"p3\">[</bpt>Jagged<ept id=\"p3\">](../../../csharp/programming-guide/arrays/jagged-arrays.md)</ept>.","source":"An array can be [Single-Dimensional](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md), [Multidimensional](../../../csharp/programming-guide/arrays/multidimensional-arrays.md) or [Jagged](../../../csharp/programming-guide/arrays/jagged-arrays.md)."},{"content":"The number of dimensions and the length of each dimension are established when the array instance is created.","pos":[967,1076]},{"content":"These values can't be changed during the lifetime of the instance.","pos":[1077,1143]},{"content":"The default values of numeric array elements are set to zero, and reference elements are set to null.","pos":[1153,1254]},{"pos":[1264,1379],"content":"A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to <ph id=\"ph1\">`null`</ph>.","source":"A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to `null`."},{"pos":[1389,1470],"content":"Arrays are zero indexed: an array with <ph id=\"ph1\">`n`</ph> elements is indexed from <ph id=\"ph2\">`0`</ph> to <ph id=\"ph3\">`n-1`</ph>.","source":"Arrays are zero indexed: an array with `n` elements is indexed from `0` to `n-1`."},{"content":"Array elements can be of any type, including an array type.","pos":[1480,1539]},{"content":"Array types are <bpt id=\"p1\">[</bpt>reference types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept> derived from the abstract base type <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph>.","pos":[1549,1703],"source":"Array types are [reference types](../../../csharp/language-reference/keywords/reference-types.md) derived from the abstract base type <xref:System.Array>."},{"content":"Since this type implements <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can use <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> iteration on all arrays in C#.","pos":[1704,1935],"source":" Since this type implements <xref:System.Collections.IEnumerable> and <xref:System.Collections.Generic.IEnumerable%601>, you can use [foreach](../../../csharp/language-reference/keywords/foreach-in.md) iteration on all arrays in C#."},{"pos":[1944,1960],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"pos":[1970,2052],"content":"<bpt id=\"p1\">[</bpt>Arrays as Objects<ept id=\"p1\">](../../../csharp/programming-guide/arrays/arrays-as-objects.md)</ept>","source":"[Arrays as Objects](../../../csharp/programming-guide/arrays/arrays-as-objects.md)"},{"pos":[2062,2160],"content":"<bpt id=\"p1\">[</bpt>Using foreach with Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/using-foreach-with-arrays.md)</ept>","source":"[Using foreach with Arrays](../../../csharp/programming-guide/arrays/using-foreach-with-arrays.md)"},{"pos":[2170,2272],"content":"<bpt id=\"p1\">[</bpt>Passing Arrays as Arguments<ept id=\"p1\">](../../../csharp/programming-guide/arrays/passing-arrays-as-arguments.md)</ept>","source":"[Passing Arrays as Arguments](../../../csharp/programming-guide/arrays/passing-arrays-as-arguments.md)"},{"pos":[2281,2306],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2377,2385],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2389,2455],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2458,2530],"content":"<bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../../csharp/programming-guide/concepts/collections.md)</ept>","source":"[Collections](../../../csharp/programming-guide/concepts/collections.md)"}]}