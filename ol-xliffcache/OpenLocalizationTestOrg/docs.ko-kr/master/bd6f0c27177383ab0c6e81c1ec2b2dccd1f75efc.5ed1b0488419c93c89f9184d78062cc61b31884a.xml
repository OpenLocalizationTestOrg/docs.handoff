{"content":"---\ntitle: \"Bitwise Canonical Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: 993868ca-16e3-47b6-9915-c29cd63b0a21\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Bitwise Canonical Functions\n[!INCLUDE[esql](../../../../../../includes/esql-md.md)] includes bitwise canonical functions.  \n  \n## Remarks  \n The following table shows the bitwise [!INCLUDE[esql](../../../../../../includes/esql-md.md)] canonical functions. These functions will return `Null` if `Null` input is provided. The return type of the functions is the same as the argument type(s). Arguments must be of the same type, if the function takes more than one argument. To perform bitwise operations across different types, you need to cast to the same type explicitly.  \n  \n|Function|Description|  \n|--------------|-----------------|  \n|`BitWiseAnd (` `value1` `,`  `value2` `)`|Returns the bitwise conjunction of `value1` and `value2` as the type of `value1` and `value2`.<br /><br /> **Arguments**<br /><br /> A `Byte`, `Int16`, `Int32`, and `Int64`.<br /><br /> **Example**<br /><br /> `-- The following example returns 1.`<br /><br /> `BitWiseAnd(1,3)`|  \n|`BitWiseNot (` `value` `)`|Returns the bitwise negation of `value`.<br /><br /> **Arguments**<br /><br /> A `Byte`, `Int16`, `Int32`, and `Int64`.<br /><br /> **Example**<br /><br /> `-- The following example returns -4.`<br /><br /> `BitWiseNot(3)`|  \n|`BitWiseOr (` `value1` `,`  `value2` `)`|Returns the bitwise disjunction of `value1` and `value2` as the type of `value1` and `value2`.<br /><br /> **Arguments**<br /><br /> A `Byte`, `Int16`, `Int32` and `Int64`.<br /><br /> **Example**<br /><br /> `-- The following example returns 3.`<br /><br /> `BitWiseOr(1,3)`|  \n|`BitWiseXor (` `value1` `,`  `value2` `)`|Returns the bitwise exclusive disjunction of `value1` and `value2` as the type of `value1` and `value2`.<br /><br /> **Arguments**<br /><br /> A `Byte`, `Int16`, `Int32` and `Int64`.<br /><br /> **Example**<br /><br /> `-- The following example returns 2.`<br /><br /> `BitWiseXor (1,3)`|  \n  \n## See Also  \n [Canonical Functions](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)","nodes":[{"pos":[4,402],"embed":true,"restype":"x-metadata","content":"title: \"Bitwise Canonical Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: 993868ca-16e3-47b6-9915-c29cd63b0a21\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Bitwise Canonical Functions | Microsoft Docs","nodes":[{"pos":[0,44],"content":"Bitwise Canonical Functions | Microsoft Docs","nodes":[{"content":"Bitwise Canonical Functions | Microsoft Docs","pos":[0,44]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[409,436],"content":"Bitwise Canonical Functions","linkify":"Bitwise Canonical Functions","nodes":[{"content":"Bitwise Canonical Functions","pos":[0,27]}]},{"pos":[437,530],"content":"<ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> includes bitwise canonical functions.","source":"[!INCLUDE[esql](../../../../../../includes/esql-md.md)] includes bitwise canonical functions."},{"pos":[539,546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table shows the bitwise <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> canonical functions.","pos":[550,664],"source":"The following table shows the bitwise [!INCLUDE[esql](../../../../../../includes/esql-md.md)] canonical functions."},{"content":"These functions will return <ph id=\"ph1\">`Null`</ph> if <ph id=\"ph2\">`Null`</ph> input is provided.","pos":[665,728],"source":" These functions will return `Null` if `Null` input is provided."},{"content":"The return type of the functions is the same as the argument type(s).","pos":[729,798]},{"content":"Arguments must be of the same type, if the function takes more than one argument.","pos":[799,880]},{"content":"To perform bitwise operations across different types, you need to cast to the same type explicitly.","pos":[881,980]},{"content":"Function","pos":[987,995]},{"content":"Description","pos":[996,1007]},{"pos":[1049,1090],"content":"<ph id=\"ph1\">`BitWiseAnd (`</ph> <ph id=\"ph2\">`value1`</ph> <ph id=\"ph3\">`,`</ph>  <ph id=\"ph4\">`value2`</ph> <ph id=\"ph5\">`)`</ph>","source":"`BitWiseAnd (` `value1` `,`  `value2` `)`"},{"content":"Returns the bitwise conjunction of <ph id=\"ph1\">`value1`</ph> and <ph id=\"ph2\">`value2`</ph> as the type of <ph id=\"ph3\">`value1`</ph> and <ph id=\"ph4\">`value2`</ph>.","pos":[1091,1185],"source":"Returns the bitwise conjunction of `value1` and `value2` as the type of `value1` and `value2`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1198,1211],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, and <ph id=\"ph4\">`Int64`</ph>.","pos":[1224,1264],"source":"A `Byte`, `Int16`, `Int32`, and `Int64`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1277,1288],"source":"**Example**"},{"pos":[1373,1399],"content":"<ph id=\"ph1\">`BitWiseNot (`</ph> <ph id=\"ph2\">`value`</ph> <ph id=\"ph3\">`)`</ph>","source":"`BitWiseNot (` `value` `)`"},{"content":"Returns the bitwise negation of <ph id=\"ph1\">`value`</ph>.","pos":[1400,1440],"source":"Returns the bitwise negation of `value`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1453,1466],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, and <ph id=\"ph4\">`Int64`</ph>.","pos":[1479,1519],"source":"A `Byte`, `Int16`, `Int32`, and `Int64`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1532,1543],"source":"**Example**"},{"pos":[1627,1667],"content":"<ph id=\"ph1\">`BitWiseOr (`</ph> <ph id=\"ph2\">`value1`</ph> <ph id=\"ph3\">`,`</ph>  <ph id=\"ph4\">`value2`</ph> <ph id=\"ph5\">`)`</ph>","source":"`BitWiseOr (` `value1` `,`  `value2` `)`"},{"content":"Returns the bitwise disjunction of <ph id=\"ph1\">`value1`</ph> and <ph id=\"ph2\">`value2`</ph> as the type of <ph id=\"ph3\">`value1`</ph> and <ph id=\"ph4\">`value2`</ph>.","pos":[1668,1762],"source":"Returns the bitwise disjunction of `value1` and `value2` as the type of `value1` and `value2`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1775,1788],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph> and <ph id=\"ph4\">`Int64`</ph>.","pos":[1801,1840],"source":"A `Byte`, `Int16`, `Int32` and `Int64`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1853,1864],"source":"**Example**"},{"pos":[1948,1989],"content":"<ph id=\"ph1\">`BitWiseXor (`</ph> <ph id=\"ph2\">`value1`</ph> <ph id=\"ph3\">`,`</ph>  <ph id=\"ph4\">`value2`</ph> <ph id=\"ph5\">`)`</ph>","source":"`BitWiseXor (` `value1` `,`  `value2` `)`"},{"content":"Returns the bitwise exclusive disjunction of <ph id=\"ph1\">`value1`</ph> and <ph id=\"ph2\">`value2`</ph> as the type of <ph id=\"ph3\">`value1`</ph> and <ph id=\"ph4\">`value2`</ph>.","pos":[1990,2094],"source":"Returns the bitwise exclusive disjunction of `value1` and `value2` as the type of `value1` and `value2`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[2107,2120],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph> and <ph id=\"ph4\">`Int64`</ph>.","pos":[2133,2172],"source":"A `Byte`, `Int16`, `Int32` and `Int64`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[2185,2196],"source":"**Example**"},{"pos":[2287,2295],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2299,2411],"content":"<bpt id=\"p1\">[</bpt>Canonical Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)</ept>","source":"[Canonical Functions](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)"}]}