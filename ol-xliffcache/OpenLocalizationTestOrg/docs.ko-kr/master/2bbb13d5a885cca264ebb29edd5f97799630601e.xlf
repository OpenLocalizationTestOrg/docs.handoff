<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bbb13d5a885cca264ebb29edd5f97799630601e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\tools\al-exe-assembly-linker.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ddf5eec8b9560e362e3df8b0f4cd337522b3ea78</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a56701e14610193d901af6bffa335c8f0cc164c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Al.exe (Assembly Linker) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Al.exe (Assembly Linker)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Assembly Linker generates a file that has an assembly manifest from one or more files that are either modules or resource files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A module is an intermediate language (IL) file that does not have an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To avoid being subject to virtualization on a Windows Vista computer, your assembly must include a Win32 manifest that specifies the requested execution level.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you use al.exe directly from the command line, you can either embed the manifest in a Win32 resource file or use mt.exe to append the manifest at a later stage in the build process.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[vs_orcas_long](../../../includes/vs-orcas-long-md.md)]</ph>, both the C# and Visual Basic compilers automatically embed a Win32 manifest into the assembly.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/win32manifest (C# Compiler Options)<ept id="p1">](~/docs/csharp/language-reference/compiler-options/win32manifest-compiler-option.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This tool is automatically installed with Visual Studio.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At the command prompt, type the following:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can specify one or more of the following <ph id="ph1">`sources`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Source</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`file`</ph>[,<ph id="ph2">`target`</ph>]</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Copies the contents of <ph id="ph1">`file`</ph> (a module) to the file name specified by <ph id="ph2">`target`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After copying, Al.exe compiles <ph id="ph1">`target`</ph> into an assembly.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/embed<ept id="p1">**</ept>[<ph id="ph1">`resource`</ph>]<ph id="ph2">`:``file`</ph>[,<ph id="ph3">`name`</ph>[,<ph id="ph4">`private`</ph>]]</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Embeds the resource specified by <ph id="ph1">`file`</ph> in the image that contains the assembly manifest; Al.exe copies the contents of <ph id="ph2">`file`</ph> into the portable executable (PE) image.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`name`</ph> parameter is an internal identifier for the resource.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By default, resources are public in the assembly (visible to other assemblies).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specifying <ph id="ph1">`private`</ph> makes the resource not visible to other assemblies.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`file`</ph> is a .NET Framework resource file created, for example, by the <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> or in the development environment, it can be accessed with members in the <ph id="ph2">&lt;xref:System.Resources&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For all other resources, use the <ph id="ph1">`GetManifestResource`</ph>* methods in the <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> to access the resource at run time.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If only resource files are passed to Al.exe, the output file is a satellite resource assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/link<ept id="p1">**</ept>[<ph id="ph1">`resource`</ph>]:<ph id="ph2">`file`</ph>[,<ph id="ph3">`name`</ph>[,<ph id="ph4">`target`</ph>[,<ph id="ph5">`private`</ph>]]]</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Links a resource file to an assembly.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The resource specified by <ph id="ph1">`file`</ph> becomes part of the assembly; the file is not copied.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`file`</ph> parameter can be in any file format.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, you can specify a native DLL as the <ph id="ph1">`file`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This will make the native DLL part of the assembly so that it can be installed into the global assembly cache and accessed from managed code in the assembly.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can also do this by using the <bpt id="p1">**</bpt>/linkresource<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/linkresource (C# Compiler Options)<ept id="p1">](~/docs/csharp/language-reference/compiler-options/linkresource-compiler-option.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The<ph id="ph1">`name`</ph> parameter is an internal identifier for the resource.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`target`</ph>parameter specifies a path and file name into which Al.exe copies the <ph id="ph2">`file`</ph><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>After copying, Al.exe compiles <ph id="ph1">`target`</ph> into an assembly.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>By default, resources are public in the assembly (visible to other assemblies).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Specifying <ph id="ph1">`private`</ph> makes the resource not visible to other assemblies.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`file`</ph> is a .NET Framework resource file created, for example, by the Resource File Generator (Resgen.exe) or in the development environment, it can be accessed with members in the <ph id="ph2">&lt;xref:System.Resources&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For all other resources, use the <ph id="ph1">`GetManifestResource`</ph> * methods in the <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> class to access the resource at run time.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If only resource files are passed to Al.exe, the output file is a satellite resource assembly.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can specify the following <ph id="ph1">`options`</ph>; you must specify <bpt id="p1">**</bpt>/out<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/algid<ept id="p1">**</ept>:<ph id="ph1">`id`</ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Specifies an algorithm to hash all files in a multifile assembly except the file that contains the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default algorithm is CALG_SHA1.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See ALG_ID in the Platform SDK documentation for other algorithms.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For the first release of the .NET Framework, only CALG_SHA1 and CALG_MD5 are valid.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The hash values are stored in the file table of the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>At installation and load time, the assembly's files are checked against their hashes.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyAlgorithmIdAttribute&gt;</ph>) in the source code for any module.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/base<ept id="p1">**</ept>[<ph id="ph1">`address`</ph>]:<ph id="ph2">`addr`</ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies the address at which a DLL will be loaded on the user's computer at run time.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Applications load faster if you specify the base address of the DLLs, instead of letting the operating system relocate the DLLs in the process space.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/bugreport<ept id="p1">**</ept>:<ph id="ph1">`filename`</ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Creates a file (<ph id="ph1">`filename`</ph>) that contains information for reporting bugs.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/comp<ept id="p1">**</ept>[<ph id="ph1">`any`</ph>]:<ph id="ph2">`text`</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies a string for the Company field in the assembly.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Place the string in double quotation marks (" ") if <ph id="ph1">`text`</ph> contains a space.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This string is a custom attribute on the assembly and is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <ph id="ph1">`text`</ph> appears in File Explorer as the <ph id="ph2">`Company`</ph> property for the file.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, the company information in the specified resource file appears as the <ph id="ph1">`Company`</ph> property in File Explorer.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If text is an empty string (""), the Win32 <ph id="ph1">`Company`</ph> resource appears as a single space.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/company<ept id="p2">**</ept> will not affect the Win32 resource information.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyCompanyAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/config<ept id="p1">**</ept>[<ph id="ph1">`uration`</ph>]:<ph id="ph2">`text`</ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Specifies a string for the Configuration field in the assembly.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Place the string in double quotation marks (" ") if <ph id="ph1">`text`</ph> contains a space.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This string is a custom attribute on the assembly and is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If text is an empty string, the Win32 Configuration resource appears as a single space.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyConfigurationAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/copy<ept id="p1">**</ept>[<ph id="ph1">`right`</ph>]:<ph id="ph2">`text`</ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Specifies a string for the Copyright field in the assembly.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Place the string in double quotation marks (" ") if <ph id="ph1">`text`</ph> contains a space.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This string is a custom attribute on the assembly and is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/copyright<ept id="p2">**</ept> appears in File Explorer as the Win32 Copyright resource.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If text is an empty string, the Win32 Copyright resource appears as a single space.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/copyright<ept id="p2">**</ept> will not affect the Win32 resource information.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyCopyrightAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/c<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ulture<ept id="p2">**</ept>]:<ph id="ph1">`text`</ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Specifies the culture string to associate with the assembly.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Valid values for cultures are those defined by the Internet Requests for Comments (RFC) document 1766 titled "Tags for the Identification of Languages."</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Place the string in double quotation marks (" ") if <ph id="ph1">`text`</ph> contains a space.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>There is no default culture string.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This string is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For information about valid <ph id="ph1">`text`</ph> strings, see the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyCultureAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/delay<ept id="p1">**</ept>[<ph id="ph1">`sign`</ph>][<ph id="ph2">`+&amp;#124;-`</ph>]</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Specifies whether the assembly will be fully or partially signed.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>/delaysign-<ept id="p1">**</ept> if you want a fully signed assembly.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>/delaysign+<ept id="p1">**</ept> if you only want to include the public key in the assembly.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When you request a fully signed assembly, Al.exe hashes the file that contains the manifest (assembly metadata) and signs that hash with the private key.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The resulting digital signature is stored in the file that contains the manifest.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When an assembly is delay signed, Al.exe does not compute and store the signature, but just reserves space in the file so the signature can be added later.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">**</bpt>/delaysign-<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/delaysign<ept id="p1">**</ept> option has no effect unless used with <bpt id="p2">**</bpt>/keyfile<ept id="p2">**</ept> or <bpt id="p3">**</bpt>/keyname<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, using <bpt id="p1">**</bpt>/delaysign+<ept id="p1">**</ept> enables a tester to put the assembly in the global cache.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>After testing, you can fully sign the assembly by including the private key in the assembly.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Note: Before using the <bpt id="p1">[</bpt>Gacutil.exe (Global Assembly Cache Tool)<ept id="p1">](../../../docs/framework/tools/gacutil-exe-gac-tool.md)</ept> to put a delay-signed assembly into the global cache, use the <bpt id="p2">[</bpt>Sn.exe (Strong Name Tool)<ept id="p2">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to register the assembly for verification skipping.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Sn.exe –Vr delaySignedAssembly`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Use this only for development.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyDelaySignAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/descr<ept id="p1">**</ept>[<bpt id="p2">**</bpt>iption<ept id="p2">**</ept>]<bpt id="p3">**</bpt>:<ept id="p3">**</ept><ph id="ph1">`text`</ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Specifies a string for the <ph id="ph1">&lt;xref:System.Reflection.AssemblyDescriptionAttribute.Description%2A&gt;</ph> field in the assembly.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Place the string in double quotation marks (" ") if <ph id="ph1">`text`</ph> contains a space.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This string is a custom attribute on the assembly and is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/description<ept id="p2">**</ept> appears in File Explorer as the Win32 <bpt id="p3">**</bpt>Comments<ept id="p3">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If text is an empty string, the Win32 <bpt id="p1">**</bpt>Comments<ept id="p1">**</ept> resource appears as a single space.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/description<ept id="p2">**</ept> will not affect the Win32 resource information.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyDescriptionAttribute.Description%2A&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/e[vidence]:<ept id="p1">**</ept> <ph id="ph1">`file`</ph></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Embeds <ph id="ph1">`file`</ph> in the assembly with the resource name of Security.Evidence.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You cannot use Security.Evidence for regular resources.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/fileversion:<ept id="p1">**</ept> <ph id="ph1">`version`</ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Specifies a string for the <bpt id="p1">**</bpt>File Version<ept id="p1">**</ept> field in the assembly.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This string is a custom attribute on the assembly and is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/fileversion<ept id="p2">**</ept> will be used as the Win32 <bpt id="p3">**</bpt>File Version<ept id="p3">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/fileversion<ept id="p1">**</ept>, the Win32 <bpt id="p2">**</bpt>File Version<ept id="p2">**</ept> resource will be populated by the Win32 <bpt id="p3">**</bpt>Assembly Version<ept id="p3">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept> is specified, <bpt id="p2">**</bpt>/fileversion<ept id="p2">**</ept> does not affect the Win32 resource.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (AssemblyFileVersionAttribute) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/flags:<ept id="p1">**</ept> <ph id="ph1">`flags`</ph></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Specifies a value for the <ph id="ph1">`Flags`</ph> field in the assembly.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Possible values for <ph id="ph1">`flags`</ph>:</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>0x0000</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The assembly is side-by-side compatible.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>0x0010</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The assembly cannot execute with other versions if they are executing in the same application domain.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>0x0020</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The assembly cannot execute with other versions if they are executing in the same process.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>0x0030</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The assembly cannot execute with other versions if they are executing on the same computer.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyFlagsAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/fullpaths<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Causes Al.exe to use the absolute path for any files that are reported in an error message.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/help<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Displays command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/keyf[ile]:<ept id="p1">**</ept> <ph id="ph1">`filename`</ph></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Specifies a file (<ph id="ph1">`filename`</ph>) that contains a key pair or just a public key to sign an assembly.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The compiler inserts the public key in the assembly manifest and then signs the final assembly with the private key.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept> for information about generating key files and installing key pairs into key containers.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If you are using delayed signing, this file will usually have the public key but not the private key.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The public key (of the key pair) information appears in the .publickey field of the assembly.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyKeyFileAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If both <bpt id="p1">**</bpt>/keyfile<ept id="p1">**</ept> and <bpt id="p2">**</bpt>/keyname<ept id="p2">**</ept> are specified (either by command-line option or by custom attribute) in the same compilation, Al.exe will first try the container specified with <bpt id="p3">**</bpt>/keyname<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If that succeeds, the assembly is signed with the information in the key container.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If Al.exe does not find the key container, it will try the file specified with <bpt id="p1">**</bpt>/keyfile<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If that succeeds, the assembly is signed with the information in the key file and the key information will be installed in the key container (similar to the -i option in <bpt id="p1">[</bpt>Sn.exe<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept>) so that on the next compilation, the <bpt id="p2">**</bpt>/keyname<ept id="p2">**</ept> option will be valid.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/keyn[ame]:<ept id="p1">**</ept> <ph id="ph1">`text`</ph></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Specifies a container that holds a key pair.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This will sign the assembly (give it a strong name) by inserting a public key into the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Al.exe will then sign the final assembly with the private key.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Use Sn.exe to generate a key pair.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The key information appears in the .publickey field of the assembly.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Place <ph id="ph1">`text`</ph> in double quotation marks (" ") if there is an embedded space.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyKeyNameAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/main:<ept id="p1">**</ept> <ph id="ph1">`method`</ph></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Specifies the fully qualified name (<ph id="ph1">`class`</ph>.<ph id="ph2">`method`</ph>) of the method to use as an entry point when converting a module to an executable file.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/nologo<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Suppresses the banner, or logo, displayed at the command line when you invoke Al.exe.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/out:<ept id="p1">**</ept> <ph id="ph1">`filename`</ph></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Specifies the name of the file produced by Al.exe.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This is a required option.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/platform<ept id="p1">**</ept>:<ph id="ph1">`text`</ph></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Limits which platform this code can run on; must be one of x86, Itanium, x64, anycpu (the default), or anycpu32bitpreferred.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/prod[uct]:<ept id="p1">**</ept> <ph id="ph1">`text`</ph></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Specifies a string for the <bpt id="p1">**</bpt>Product<ept id="p1">**</ept> field in the assembly.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Place the string in double quotation marks (" ") if <ph id="ph1">`text`</ph> contains a space.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This string is a custom attribute on the assembly and is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/product<ept id="p2">**</ept> appears in File Explorer as the Win32 <bpt id="p3">**</bpt>Product Name<ept id="p3">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If text is an empty string, the Win32 <bpt id="p1">**</bpt>Product Name<ept id="p1">**</ept> resource appears as a single space.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/product<ept id="p2">**</ept> will not affect the Win32 resource information.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyProductAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/productv[ersion]:<ept id="p1">**</ept> <ph id="ph1">`text`</ph></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Specifies a string for the <bpt id="p1">**</bpt>Product Version<ept id="p1">**</ept> field in the assembly.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Place the string in double quotation marks (" ") if <ph id="ph1">`text`</ph> contains a space.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>This string is a custom attribute on the assembly and is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/productversion<ept id="p2">**</ept> will be used as the Win32 <bpt id="p3">**</bpt>Product Version<ept id="p3">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/productversion<ept id="p1">**</ept>, the Win32 <bpt id="p2">**</bpt>Product Version<ept id="p2">**</ept> resource will be populated by the Win32 <bpt id="p3">**</bpt>File Version<ept id="p3">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/productversion<ept id="p2">**</ept> will not affect the Win32 resource information.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyInformationalVersionAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/t[arget]:lib[rary] &amp;#124; exe &amp;#124; win[exe]<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Specifies the file format of the output file: <ph id="ph1">`lib`</ph>rary (code library), <ph id="ph2">`exe`</ph> (console application), or <ph id="ph3">`win`</ph>exe (Windows-based application).</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The default is lib[rary].</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/template:<ept id="p1">**</ept> <ph id="ph1">`filename`</ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Specifies the assembly, <ph id="ph1">`filename`</ph>, from which to inherit all assembly metadata, except the culture field.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>An assembly that you create with <bpt id="p1">**</bpt>/template<ept id="p1">**</ept> will be a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/title:<ept id="p1">**</ept> <ph id="ph1">`text`</ph></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Specifies a string for the <bpt id="p1">**</bpt>Title<ept id="p1">**</ept> field in the assembly.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Place the string in double quotation marks (" ") if <ph id="ph1">`text`</ph> contains a space.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This string is a custom attribute on the assembly and is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/title<ept id="p2">**</ept> appears in File Explorer as the Win32 <bpt id="p3">**</bpt>Description<ept id="p3">**</ept> resource, which is used by the shell as the friendly name of an application.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>It is also displayed on the <bpt id="p1">**</bpt>Open With<ept id="p1">**</ept> submenu of the shortcut menu for a file type for which there are multiple supporting applications.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>If text is an empty string, the Win32 <bpt id="p1">**</bpt>Description<ept id="p1">**</ept> resource appears as a single space.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/title<ept id="p2">**</ept> will not affect the Win32 resource information.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyTitleAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/trade[mark]:<ept id="p1">**</ept> <ph id="ph1">`text`</ph></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Specifies a string for the <bpt id="p1">**</bpt>Trademark<ept id="p1">**</ept> field in the assembly.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Place the string in double quotation marks (" ") if <ph id="ph1">`text`</ph> contains a space.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This string is a custom attribute on the assembly and is available for viewing with reflection.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/trademark<ept id="p2">**</ept> appears in File Explorer as the Win32 <bpt id="p3">**</bpt>Trademark<ept id="p3">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>If text is an empty string, the Win32 <bpt id="p1">**</bpt>Trademark<ept id="p1">**</ept> resource appears as a single space.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/trademark<ept id="p2">**</ept> will not affect the Win32 resource information.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyTrademarkAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/v[ersion]:<ept id="p1">**</ept> <ph id="ph1">`version`</ph></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Specifies version information for this assembly.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The format of the version string is <ph id="ph1">`major`</ph>.<ph id="ph2">`minor`</ph>.<ph id="ph3">`build`</ph>.<ph id="ph4">`revision`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The default value is 0.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If you do specify <bpt id="p1">**</bpt>/version<ept id="p1">**</ept>, you must specify <ph id="ph1">`major`</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>If you specify <ph id="ph1">`major`</ph> and <ph id="ph2">`minor`</ph>, you can specify an asterisk (<ph id="ph3">\*</ph>)for <ph id="ph4">`build`</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>This causes <ph id="ph1">`build`</ph> to be equal to the number of days since January 1, 2000, local time, and <ph id="ph2">`revision`</ph> to be equal to the number of seconds since midnight of the current day, local time, divided by 2.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If you specify <ph id="ph1">`major`</ph>, <ph id="ph2">`minor`</ph>, and <ph id="ph3">`build`</ph>, you can specify an asterisk for <ph id="ph4">`revision`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This causes <ph id="ph1">`revision`</ph> to be equal to the number of seconds since midnight of the current day, local time, divided by 2.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>To summarize, the valid version strings are as follows:</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>X</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>X.X</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>X.X.<ph id="ph1">\*</ph></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>X.X.X</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>X.X.X.<ph id="ph1">\*</ph></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>X.X.X.X</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>where X is any unsigned short constant except 65535 (0-65534).</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/version<ept id="p2">**</ept> will be used as the Win32 <bpt id="p3">**</bpt>Assembly Version<ept id="p3">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/productversion<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>/fileversion<ept id="p3">**</ept>, <bpt id="p4">**</bpt>/version<ept id="p4">**</ept> will be used for the <bpt id="p5">**</bpt>Assembly Version<ept id="p5">**</ept>, File Version, and <bpt id="p6">**</bpt>Product Version<ept id="p6">**</ept> Win32 resources.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/version<ept id="p2">**</ept> will not affect the Win32 resource information.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>You can also specify this option as a custom attribute (<ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph>) in the source code for any MSIL module.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/win32icon:<ept id="p1">**</ept> <ph id="ph1">`filename`</ph></source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Inserts an .ico file in the assembly.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The .ico file gives the output file the desired appearance in File Explorer.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/win32res:<ept id="p1">**</ept> <ph id="ph1">`filename`</ph></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Inserts a Win32 resource (.res file) in the output file.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A Win32 resource file can be created by using the Resource Compiler.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The Resource Compiler is invoked when you compile a Visual C++ program; a .res file is created from the .rc file.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Specifies a response file that contains Al.exe commands.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Commands in the response file can appear one per line or on the same line, separated by one or more spaces.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/?<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Displays command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>All Visual Studio compilers produce assemblies.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>However, if you have one or more modules (metadata without a manifest), you can use Al.exe to create an assembly with the manifest in a separate file.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>To install assemblies in the cache, remove assemblies from the cache, or list the contents of the cache, use the <bpt id="p1">[</bpt>Global Assembly Cache Tool (Gacutil.exe)<ept id="p1">](../../../docs/framework/tools/gacutil-exe-gac-tool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Errors and Warnings</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The following table lists the errors generated by Al.exe.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Error</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>al1001</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Internal compiler error</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Try to determine whether Al.exe is failing because of its inability to parse unexpected syntax.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Then, contact Microsoft Product Support Services.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>al1002</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Out of memory</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Al.exe ran out of memory and stopped.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Increase the amount of available memory.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>al1003</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Compiler option 'option' must be followed by an argument</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Al.exe expected an argument to be passed to a command-line option.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>For example, if you specify <bpt id="p1">**</bpt>/algid:<ept id="p1">**</ept>, you must pass an algorithm identifier.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>al1004</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Unexpected common language runtime initialization error — 'reason'</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Al.exe reported an error with the installation of Visual Studio or the common language runtime for the specified reason.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>al1005</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>File 'file' too big to open</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>All files opened by Al.exe must be smaller than 4 gigabytes (GB).</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>al1006</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Response file 'file' was already included</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The same response file was specified (<ph id="ph1">`@file`</ph>) more than once on the command line.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The response file can only be included once.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>al1007</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Error opening response file 'file' — 'reason'</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Al.exe cannot open the specified response file for the specified reason.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>al1008</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Missing file specification for 'option' command-line option</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Al.exe expected a file to be passed to a command-line option.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>For example, if you specify the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> option, you must specify a file.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>al1009</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Can't open 'file' for writing</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Al.exe was unable to write to a file, such as the output assembly file.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The disk might be full, the file might be read-only, or you might not have permissions to the file.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>al1010</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Command-line syntax error: Missing ':text' for 'option' option</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Al.exe expected an argument to be passed to a command-line option.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>For example, if you specify the <bpt id="p1">**</bpt>/title<ept id="p1">**</ept> option, you must pass a string.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>al1011</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>File 'file' is an executable file and cannot be opened as a text file</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A binary file was specified where a text file was expected.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>For example, this error occurs if a binary file is passed on the command line as a response file.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>al1012</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>'value' is not a valid setting for option 'option'</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>An unexpected value was passed to a command-line option.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>For example, this error occurs if you specify an invalid value to the <bpt id="p1">**</bpt>/target<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>al1013</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Unrecognized command-line option: 'option'</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>An invalid command-line option was specified.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>al1014</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Unexpected initialization error — 'reason'</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Al.exe detected a COM initialization failure.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>This might be caused by a lack of memory, but a more likely cause is the system DLL files.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>You should see a similar error if you run any Automation-aware or COM-aware program, such as Microsoft Visual Studio.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Reinstall the operating system.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>al1015</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Unable to find messages file 'alinkui.dll'</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Al.exe requires Alinkui.dll.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Make sure that this file is on your path.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>If necessary, copy it from the product CD.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>al1016</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>No valid input files were specified</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Al.exe requires one or more input files that do not have assembly information.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>al1017</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>No target file name was specified</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The required <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> option specifying the target file name was missing.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>al1018</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Required file 'file' could not be loaded</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Certain DLL files cannot be loaded.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Reinstall Visual Studio or the <ph id="ph1">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>al1019</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Metadata failure while creating assembly — reason</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Generation of the assembly was interrupted for the specified reason.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>For example, this error occurs if a file that you specify with the <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept> option is not found.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>al1020</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Ignoring included assembly 'file'</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>An input file that contained an assembly was specified.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Al.exe input files cannot contain assemblies.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>al1021</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>'setting' : overriding previous setting</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>A module had a value for a particular setting, possibly assigned through custom attributes, which was overridden with a value passed using an Al.exe command-line option.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>al1022</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Error reading embedded resource 'file' — reason</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Al.exe cannot read the file passed to the <bpt id="p1">**</bpt>/embedresource<ept id="p1">**</ept> option for the specified reason.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>al1023</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Error embedding resource 'file' — reason</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The operating system cannot embed the resource file in the assembly for the specified reason.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>al1025</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>ComType record 'record' points to an invalid file record 'record'</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Metadata in the input module is invalid.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The tool that produced the module must be fixed.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>al1026</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The version specified 'version' is invalid</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>See information about the <bpt id="p1">**</bpt>/version<ept id="p1">**</ept> option for valid formats.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>al1028</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Key file 'file' is missing the private key needed for signing</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>A key file that contains only the public key was passed to the <bpt id="p1">**</bpt>/keyfile<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to generate a file that has both a public and private key, as shown in the following command.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>al1029</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The key container name 'container' does not exist</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The value passed to the <bpt id="p1">**</bpt>/keyname<ept id="p1">**</ept> option is not a valid container.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to create a container.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>al1030</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The cryptographic service is not installed properly or does not have a suitable key provider</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>You might have to either reinstall the operating system or install some cryptographic utility that was that is used to create the key.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>al1031</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Error reading icon 'file' — reason</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Al.exe cannot read the file that was passed to the <bpt id="p1">**</bpt>/win32icon<ept id="p1">**</ept> option for the specified reason</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>al1032</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Error generating resources for 'file' — reason</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Al.exe cannot create a file because of insufficient disk space or some other error.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>This error occurs when you specify the <bpt id="p1">**</bpt>/win32icon<ept id="p1">**</ept> option (which generates an .ico file) or do not specify the <bpt id="p2">**</bpt>/win32res<ept id="p2">**</ept> option (which generates a file that has resource information).</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>If you cannot resolve the file generation problem, use <bpt id="p1">**</bpt>/win32res<ept id="p1">**</ept>, which specifies a file that can contain version or bitmap (icon) information.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>al1033</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Assembly custom attribute 'attribute' was specified multiple times with different values</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Different values were passed to two occurrences of the same custom attribute in source modules that are specified as input to Al.exe.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>al1034</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Assembly 'file' cannot be copied or renamed</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>While using the Al.exe syntax that enables you to both specify an input file and copy it, a name conflict arose that stopped the compiler.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>For example, this error occurs if you specify <ph id="ph1">`input.dll,somename.dll /out:somename.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>al1035</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Libraries cannot have an entry point</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>You cannot specify both the <bpt id="p1">**</bpt>/target:lib<ept id="p1">**</ept> option (the default) and the <bpt id="p2">**</bpt>/main<ept id="p2">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>al1036</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Entry point required for executable applications</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>When using the <bpt id="p1">**</bpt>/target:exe<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/target:win<ept id="p2">**</ept> option, you must also specify the <bpt id="p3">**</bpt>/main<ept id="p3">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>al1037</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Unable to find the entry point method 'main'</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Al.exe cannot find a <ph id="ph1">`Main`</ph> method at the location specified by the <bpt id="p1">**</bpt>/main<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>al1039</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Initialization of global assembly cache manager failed — reason</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Reinstall Visual Studio or the <ph id="ph1">[!INCLUDE[winsdkshort](../../../includes/winsdkshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>al1040</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Failed to install assembly into cache — reason</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Only signed assemblies can be installed into the cache.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Global Assembly Cache<ept id="p1">](../../../docs/framework/app-domains/gac.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>al1041</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>'method': cannot be the entry point because the signature or visibility is incorrect, or it is generic</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>A method was specified with the <bpt id="p1">**</bpt>/main<ept id="p1">**</ept> option, but that method is not static, does not return <ph id="ph1">`int`</ph> or <ph id="ph2">`void`</ph>, was generic, or has invalid arguments.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>al1042</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>'exe': EXEs cannot be added modules</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>An .exe file that does not have an assembly was specified as an input file to Al.exe.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Al.exe can only take .dll files without assemblies as input files.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>al1043</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Manifest file name 'name' cannot be the same as any modules</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The name specified with the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> option cannot be the same as any one of the file names that are specified as input to Al.exe.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>al1044</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Error reading key file 'file' — reason</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>An error occurred while opening or reading from a file specified with <bpt id="p1">**</bpt>/keyfile<ept id="p1">**</ept> or the <ph id="ph1">&lt;xref:System.Reflection.AssemblyKeyFileAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>al1045</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Filename 'file' is too long or invalid</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>A file name longer than 260 characters was passed to Al.exe.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Choose a file name with fewer characters or a shorter path, or rename the file.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>al1046</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Resource identifier 'ID' has already been used in this assembly</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Two resources, embedded or linked, have the same identifier or name (the second argument).</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Remove or rename one of the conflicting resources.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>al1047</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Error importing file 'file' — reason</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>A module file cannot be opened for the specified reason.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>al1048</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Error importing module 'module' of assembly 'assembly' — reason</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>An error occurred when opening a nonmanifest file of a multifile assembly.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>This error is not emitted directly by Al.exe, but can be passed programmatically to a process that uses Al.exe.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>al1049</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Cannot auto-generate build and revision version numbers for dates before January 1, 2000</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The system clock on your computer is set to a date earlier than January 1, 2000.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>al1050</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The feature you are using 'old feature' is no longer supported; please use 'new feature' instead</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>A feature previously supported by Al.exe is now obsolete.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Use the recommended feature instead.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>al1051</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Error emitting 'attribute' attribute —'reason'</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>An assembly custom attribute was not processed by Al.exe for the specified reason.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>al1052</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>File 'filename' is not an assembly</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The file specified with <bpt id="p1">**</bpt>/template<ept id="p1">**</ept> must contain assembly metadata.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>This error indicates that the file specified by <bpt id="p1">**</bpt>/template<ept id="p1">**</ept> did not contain an assembly.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>al1053</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The version 'version' specified for the 'option' is not in the normal 'major.minor.build.revision' format</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Al.exe detected ill-formed version information specified with the <bpt id="p1">**</bpt>/fileversion<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/productversion<ept id="p2">**</ept> options.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>al1054</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The version 'version' specified for the 'option' is not in the normal 'major.minor.build.revision' format</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Al.exe detected ill-formed version information specified with the <ph id="ph1">&lt;xref:System.Resources.SatelliteContractVersionAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>al1055</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Referenced assembly 'filename' does not have a strong name</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>This error is issued when you are building an assembly with a strong name and reference an assembly that does not have a strong name.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>To fix this, you must either regenerate your assembly with a strong name, or attach a strong name to the assembly by using sn.exe (see the documentation for <bpt id="p1">[</bpt>sn.exe<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>A common occurrence of this error is when you are using COM objects by way of wrapper assemblies, such as when you add a reference to a COM module to a C# project by way of the Visual Studio IDE.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>To avoid the error, you can specify the strong name key file for COM wrapper assemblies in the Project Property "Wrapper Assembly Key File/Name"</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>If you are creating the wrapper assembly through tlbimp, see the <bpt id="p1">[</bpt>tlbimp<ept id="p1">](../../../docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> documentation for information about how to assign a strong name to the wrapper assembly.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>If an assembly has a strong name, it can be installed in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Consequently, referenced assemblies would also go into the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Only assemblies with strong names can go into the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>al1056</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Referenced assembly 'filename' is a localized satellite assembly</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>An assembly created by using the <ph id="ph1">&lt;xref:System.Reflection.AssemblyCultureAttribute&gt;</ph> attribute was referenced in creating the current assembly.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyCultureAttribute&gt;</ph> attribute indicates the file is a localized satellite assembly and it is not appropriate to reference a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>You should probably reference the main parent assembly instead.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>al1057</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Executables cannot be localized, Culture should always be empty</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>An assembly is being created by using <bpt id="p1">**</bpt>/target:exe<ept id="p1">**</ept> but <bpt id="p2">**</bpt>/culture<ept id="p2">**</ept> was specified.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Assemblies in the .exe cannot have information in the Culture field.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>al1058</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>'file' is an assembly and cannot be added as a module</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>In a C++ compilation, <bpt id="p1">**</bpt>/assemblymodule<ept id="p1">**</ept> (linker option) was passed a file that contained an assembly.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>al1059</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Unknown error (code)</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Al.exe received an unknown error code (<ph id="ph1">`code`</ph>).</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Possible solutions include the following:</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Reinstall Visual Studio.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Reinstall the <ph id="ph1">[!INCLUDE[winsdkshort](../../../includes/winsdkshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Check for missing files.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Check for adequate disk space.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Check for adequate memory.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Stop other processes that might be accessing the files.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Reboot your computer.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>al1060</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Cryptographic failure while creating hashes — reason</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>An error occurred while creating the file hashes for a multifile assembly.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>al1061</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Cannot set option 'option' because 'reason'</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The value specified for this option is invalid for the specified reason.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>al1062</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Module 'module' was specified multiple times; it will only be included once</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>This warning is generated when the same source, input, or module file is specified multiple times on the command line.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Make sure that you specify the file name only once.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>al1063</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Public type 'type' is defined in multiple locations in this assembly: 'file1' and 'file2'</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The same type was found in more than one module in the assembly.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Only one version of each type may be present in an assembly.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>al1064</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Cannot specify multiple /bugreport options.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Only one <bpt id="p1">**</bpt>/bugreport<ept id="p1">**</ept> option is allowed.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>al1065</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>File name 'File Name' is too long or invalid</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The specified file name is longer than the maximum allowed.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>al1066</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Character 'character' is not allowed on the command-line or in response files</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>An invalid character was found, either on the command line or in a file.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>al1067</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>'filename' is a binary file instead of a text file</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The file is in binary format instead of text.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>al1068</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Module 'ModuleName' is already defined in this assembly.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Each linked resource and module must have a unique file name.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>The module occurs more than once in this assembly.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>al1069</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Cannot create short file name 'filename' when a long file name with the same short file name already exists</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The current file has a name that is the short version of a file name that already exists.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>For example, compiling LongFileName.cs and then recompiling with the name LongFi~1.cs will cause a compiler error similar to this.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>If the compiler output files that have long names were deleted, but the analogous linker files remained, this error might occur.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>al1070</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Agnostic assembly cannot have a processor specific module 'Module Name'</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>If you are building using <bpt id="p1">**</bpt>/platform:agnostic<ept id="p1">**</ept> (or you don’t specify <bpt id="p2">**</bpt>/platform<ept id="p2">**</ept>), an error will be generated if you try to add a module (using <bpt id="p3">**</bpt>/addmodule<ept id="p3">**</ept>) that is not agnostic.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>This is like trying to link an i386 obj file to an ia64 obj.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The main source of non-agnostic modules is C++.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>If you are using <bpt id="p1">**</bpt>/addmodule<ept id="p1">**</ept> with a C++ module, you may have to modify your build scripts to specify the appropriate <bpt id="p2">**</bpt>/platform<ept id="p2">**</ept> setting.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>al1072</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Assembly and module 'Module Name' cannot target different processors</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>You cannot link an assembly and a module that are targeted for different processors, because the result has to run on a single processor.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>al1073</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Referenced assembly 'assembly' targets a different processor</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>You cannot link assemblies that are targeted for different processors, because the result has to run on a single processor.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>al1074</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Module name 'Module Name' stored in 'File Name' must match its file name</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>This is required of the linker.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>To resolve this problem, make the two names match.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>al1075</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Delay signing was requested, but no key was given</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>When an assembly is delay signed, the compiler does not compute and store the signature, but reserves space in the file so the signature can be added later.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>For example, using <bpt id="p1">**</bpt>/delaysign+<ept id="p1">**</ept> enables a tester to put the assembly in the global cache.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>After testing, you can fully sign the assembly by adding the private key to the assembly by using the Assembly Linker utility.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>al1076</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Type 'type' is forwarded to multiple assemblies: 'assembly' and 'assembly'.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>A type can only be forwarded to one assembly.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>al1077</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Public type 'type' is defined in 'assembly' and forwarded to 'assembly'.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>There is a duplicate public type in the assembly being generated.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>One is a valid type definition and the other is a type forwarder.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The following command creates an executable file <ph id="ph1">`t2a.exe`</ph> with an assembly from the <ph id="ph2">`t2.netmodule`</ph> module.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>The entry point is the <ph id="ph1">`Main`</ph> method in <ph id="ph2">`MyClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tools<ept id="p1">](../../../docs/framework/tools/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sn.exe (Strong Name Tool)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Gacutil.exe (Global Assembly Cache Tool)<ept id="p1">](../../../docs/framework/tools/gacutil-exe-gac-tool.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming with Assemblies<ept id="p1">](../../../docs/framework/app-domains/programming-with-assemblies.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>