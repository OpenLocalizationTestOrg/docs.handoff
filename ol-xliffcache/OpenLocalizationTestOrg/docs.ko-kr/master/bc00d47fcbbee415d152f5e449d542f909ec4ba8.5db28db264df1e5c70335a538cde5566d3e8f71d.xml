{"content":"---\ntitle: \"Efficient Combination of Operators (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"expressions [Visual Basic], parentheses\"\n  - \"operators [Visual Basic], associativity\"\n  - \"expressions [Visual Basic], operators\"\n  - \"operators [Visual Basic], precedence\"\n  - \"Visual Basic code, operators\"\n  - \"Visual Basic code, expressions\"\n  - \"operators [Visual Basic], complex expressions\"\n  - \"expressions [Visual Basic], complex\"\n  - \"parentheses, complex expressions\"\n  - \"numeric expressions\"\nms.assetid: bd22340e-b5be-458b-8772-3916c02309a4\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Efficient Combination of Operators (Visual Basic)\nComplex expressions can contain many different operators. The following example illustrates this.  \n  \n `x = (45 * (y + z)) ^ (2 / 85) * 5 + z`  \n  \n Creating complex expressions such as the one in the preceding example requires a thorough understanding of the rules of operator precedence. For more information, see [Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md).  \n  \n## Parenthetical Expressions  \n Often you want operations to proceed in a different order from that determined by operator precedence. Consider the following example.  \n  \n `x = z * y + 4`  \n  \n The preceding example multiplies `z` by `y`, then adds the result to `4`. But if you want to add `y` and `4` before multiplying the result by `z`, you can override normal operator precedence by using parentheses. By enclosing an expression in parentheses, you force that expression to be evaluated first, regardless of operator precedence. To force the preceding example to do the addition first, you could rewrite it as in the following example.  \n  \n `x = z * (y + 4)`  \n  \n The preceding example adds `y` and `4`, then multiplies that sum by `z`.  \n  \n### Nested Parenthetical Expressions  \n You can nest expressions in multiple levels of parentheses to override precedence even further. The expressions most deeply nested in parentheses are evaluated first, followed by the next most deeply nested, and so on to the least deeply nested, and finally the expressions outside parentheses. The following example illustrates this.  \n  \n `x = (z * 4) ^ (y * (z + 2))`  \n  \n In the preceding example, `z + 2` is evaluated first, then the other parenthetical expressions. Exponentiation, which normally has higher precedence than addition or multiplication, is evaluated last in this example because the other expressions are enclosed in parentheses.  \n  \n## See Also  \n [Arithmetic Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)   \n [Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)   \n [Logical and Bitwise Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)   \n [Logical/Bitwise Operators (Visual Basic)](../../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)   \n [Boolean Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)   \n [Value Comparisons](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)   \n [How to: Calculate Numeric Values](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-calculate-numeric-values.md)   \n [Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md)","nodes":[{"pos":[12,78],"content":"Efficient Combination of Operators (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Efficient Combination of Operators (Visual Basic) | Microsoft Docs","pos":[0,66]}]},{"pos":[983,1032],"content":"Efficient Combination of Operators (Visual Basic)","linkify":"Efficient Combination of Operators (Visual Basic)","nodes":[{"content":"Efficient Combination of Operators (Visual Basic)","pos":[0,49]}]},{"content":"Complex expressions can contain many different operators.","pos":[1033,1090]},{"content":"The following example illustrates this.","pos":[1091,1130]},{"content":"Creating complex expressions such as the one in the preceding example requires a thorough understanding of the rules of operator precedence.","pos":[1183,1323]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>.","pos":[1324,1466],"source":" For more information, see [Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md)."},{"pos":[1475,1500],"content":"Parenthetical Expressions","linkify":"Parenthetical Expressions","nodes":[{"content":"Parenthetical Expressions","pos":[0,25]}]},{"content":"Often you want operations to proceed in a different order from that determined by operator precedence.","pos":[1504,1606]},{"content":"Consider the following example.","pos":[1607,1638]},{"content":"The preceding example multiplies <ph id=\"ph1\">`z`</ph> by <ph id=\"ph2\">`y`</ph>, then adds the result to <ph id=\"ph3\">`4`</ph>.","pos":[1667,1740],"source":"The preceding example multiplies `z` by `y`, then adds the result to `4`."},{"content":"But if you want to add <ph id=\"ph1\">`y`</ph> and <ph id=\"ph2\">`4`</ph> before multiplying the result by <ph id=\"ph3\">`z`</ph>, you can override normal operator precedence by using parentheses.","pos":[1741,1879],"source":" But if you want to add `y` and `4` before multiplying the result by `z`, you can override normal operator precedence by using parentheses."},{"content":"By enclosing an expression in parentheses, you force that expression to be evaluated first, regardless of operator precedence.","pos":[1880,2006]},{"content":"To force the preceding example to do the addition first, you could rewrite it as in the following example.","pos":[2007,2113]},{"pos":[2144,2216],"content":"The preceding example adds <ph id=\"ph1\">`y`</ph> and <ph id=\"ph2\">`4`</ph>, then multiplies that sum by <ph id=\"ph3\">`z`</ph>.","source":"The preceding example adds `y` and `4`, then multiplies that sum by `z`."},{"pos":[2226,2258],"content":"Nested Parenthetical Expressions","linkify":"Nested Parenthetical Expressions","nodes":[{"content":"Nested Parenthetical Expressions","pos":[0,32]}]},{"content":"You can nest expressions in multiple levels of parentheses to override precedence even further.","pos":[2262,2357]},{"content":"The expressions most deeply nested in parentheses are evaluated first, followed by the next most deeply nested, and so on to the least deeply nested, and finally the expressions outside parentheses.","pos":[2358,2556]},{"content":"The following example illustrates this.","pos":[2557,2596]},{"content":"In the preceding example, <ph id=\"ph1\">`z + 2`</ph> is evaluated first, then the other parenthetical expressions.","pos":[2639,2734],"source":"In the preceding example, `z + 2` is evaluated first, then the other parenthetical expressions."},{"content":"Exponentiation, which normally has higher precedence than addition or multiplication, is evaluated last in this example because the other expressions are enclosed in parentheses.","pos":[2735,2913]},{"pos":[2922,2930],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2934,3085],"source":"[Arithmetic Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3088,3240],"source":" [Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Logical and Bitwise Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3243,3413],"source":" [Logical and Bitwise Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Logical/Bitwise Operators (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3416,3544],"source":" [Logical/Bitwise Operators (Visual Basic)](../../../../visual-basic/language-reference/operators/logical-bitwise-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Boolean Expressions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3547,3681],"source":" [Boolean Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Value Comparisons<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id=\"ph1\"> </ph>","pos":[3684,3814],"source":" [Value Comparisons](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Calculate Numeric Values<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-calculate-numeric-values.md)</ept><ph id=\"ph1\"> </ph>","pos":[3817,3976],"source":" [How to: Calculate Numeric Values](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-calculate-numeric-values.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","pos":[3979,4095],"source":" [Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md)"}]}