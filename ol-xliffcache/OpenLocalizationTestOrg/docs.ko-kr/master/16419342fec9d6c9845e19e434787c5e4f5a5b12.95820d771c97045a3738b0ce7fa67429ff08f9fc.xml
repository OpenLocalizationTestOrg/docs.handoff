{"content":"---\ntitle: \"^ operator - C# Reference\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"^_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"^ operator [C#]\"\n  - \"bitwise exclusive OR operator [C#]\"\nms.assetid: b09bc815-570f-4db6-a637-5b4ed99d014a\n---\n# ^ operator (C# Reference)\n\nBinary `^` operators are predefined for the integral types and `bool`. For integral types, `^` computes the bitwise exclusive-OR of its operands. For `bool` operands, `^` computes the logical exclusive-or of its operands; that is, the result is `true` if and only if exactly one of its operands is `true`.\n\n## Remarks\n\nUser-defined types can overload the `^` operator (see [operator](../keywords/operator.md)). Operations on integral types are generally allowed on enumeration.\n\n## Example\n\n[!code-csharp[csRefOperators#30](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefOperators/CS/csrefOperators.cs#30)]\n\nThe computation of `0xf8 ^ 0x3f` in the previous example performs a bitwise exclusive-OR of the following two binary values, which correspond to the hexadecimal values F8 and 3F:\n\n`1111 1000`\n\n`0011 1111`\n\nThe result of the exclusive-OR is `1100 0111`, which is C7 in hexadecimal.\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# operators](index.md)\n","nodes":[{"pos":[4,248],"embed":true,"restype":"x-metadata","content":"title: \"^ operator - C# Reference\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"^_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"^ operator [C#]\"\n  - \"bitwise exclusive OR operator [C#]\"\nms.assetid: b09bc815-570f-4db6-a637-5b4ed99d014a","nodes":[{"content":"^ operator - C# Reference","nodes":[{"pos":[0,25],"content":"^ operator - C# Reference","nodes":[{"content":"^ operator - C# Reference","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[255,280],"content":"^ operator (C# Reference)","linkify":"^ operator (C# Reference)","nodes":[{"content":"^ operator (C# Reference)","pos":[0,25]}]},{"content":"Binary <ph id=\"ph1\">`^`</ph> operators are predefined for the integral types and <ph id=\"ph2\">`bool`</ph>.","pos":[282,352],"source":"Binary `^` operators are predefined for the integral types and `bool`."},{"content":"For integral types, <ph id=\"ph1\">`^`</ph> computes the bitwise exclusive-OR of its operands.","pos":[353,427],"source":" For integral types, `^` computes the bitwise exclusive-OR of its operands."},{"content":"For <ph id=\"ph1\">`bool`</ph> operands, <ph id=\"ph2\">`^`</ph> computes the logical exclusive-or of its operands; that is, the result is <ph id=\"ph3\">`true`</ph> if and only if exactly one of its operands is <ph id=\"ph4\">`true`</ph>.","pos":[428,587],"source":" For `bool` operands, `^` computes the logical exclusive-or of its operands; that is, the result is `true` if and only if exactly one of its operands is `true`."},{"pos":[592,599],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"User-defined types can overload the <ph id=\"ph1\">`^`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../keywords/operator.md)</ept>).","pos":[601,692],"source":"User-defined types can overload the `^` operator (see [operator](../keywords/operator.md))."},{"content":"Operations on integral types are generally allowed on enumeration.","pos":[693,759]},{"pos":[764,771],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[895,1073],"content":"The computation of <ph id=\"ph1\">`0xf8 ^ 0x3f`</ph> in the previous example performs a bitwise exclusive-OR of the following two binary values, which correspond to the hexadecimal values F8 and 3F:","source":"The computation of `0xf8 ^ 0x3f` in the previous example performs a bitwise exclusive-OR of the following two binary values, which correspond to the hexadecimal values F8 and 3F:"},{"pos":[1101,1175],"content":"The result of the exclusive-OR is <ph id=\"ph1\">`1100 0111`</ph>, which is C7 in hexadecimal.","source":"The result of the exclusive-OR is `1100 0111`, which is C7 in hexadecimal."},{"pos":[1180,1188],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1192,1219],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1222,1278],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1281,1305],"content":"<bpt id=\"p1\">[</bpt>C# operators<ept id=\"p1\">](index.md)</ept>","source":"[C# operators](index.md)"}]}