{"content":"---\ntitle: \"How to: Implement a Client of the Event-based Asynchronous Pattern\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Event-based Asynchronous Pattern\"\n  - \"ProgressChangedEventArgs class\"\n  - \"BackgroundWorker component\"\n  - \"events [.NET Framework], asynchronous\"\n  - \"Asynchronous Pattern\"\n  - \"AsyncOperationManager class\"\n  - \"threading [.NET Framework], asynchronous features\"\n  - \"components [.NET Framework], asynchronous\"\n  - \"AsyncOperation class\"\n  - \"threading [Windows Forms], asynchronous features\"\n  - \"AsyncCompletedEventArgs class\"\nms.assetid: 21a858c1-3c99-4904-86ee-0d17b49804fa\n---\n# How to: Implement a Client of the Event-based Asynchronous Pattern\nThe following code example demonstrates how to use a component that adheres to the [Event-based Asynchronous Pattern Overview](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md). The form for this example uses the `PrimeNumberCalculator` component described in [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](../../../docs/standard/asynchronous-programming-patterns/component-that-supports-the-event-based-asynchronous-pattern.md).  \n  \n When you run a project that uses this example, you will see a \"Prime Number Calculator\" form with a grid and two buttons: **Start New Task** and **Cancel**. You can click the **Start New Task** button several times in succession, and for each click, an asynchronous operation will begin a computation to determine if a randomly generated test number is prime. The form will periodically display progress and incremental results. Each operation is assigned a unique task ID. The result of the computation is displayed in the **Result** column; if the test number is not prime, it is labeled as **Composite,** and its first divisor is displayed.  \n  \n Any pending operation can be canceled with the **Cancel** button. Multiple selections can be made.  \n  \n> [!NOTE]\n>  Most numbers will not be prime. If you have not found a prime number after several completed operations, simply start more tasks, and eventually you will find some prime numbers.  \n  \n## Example  \n [!code-csharp[System.ComponentModel.AsyncOperationManager#10](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#10)]\n [!code-vb[System.ComponentModel.AsyncOperationManager#10](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#10)]  \n  \n## See also\n\n- <xref:System.ComponentModel.AsyncOperation>\n- <xref:System.ComponentModel.AsyncOperationManager>\n- <xref:System.Windows.Forms.WindowsFormsSynchronizationContext>\n","nodes":[{"pos":[4,673],"embed":true,"restype":"x-metadata","content":"title: \"How to: Implement a Client of the Event-based Asynchronous Pattern\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Event-based Asynchronous Pattern\"\n  - \"ProgressChangedEventArgs class\"\n  - \"BackgroundWorker component\"\n  - \"events [.NET Framework], asynchronous\"\n  - \"Asynchronous Pattern\"\n  - \"AsyncOperationManager class\"\n  - \"threading [.NET Framework], asynchronous features\"\n  - \"components [.NET Framework], asynchronous\"\n  - \"AsyncOperation class\"\n  - \"threading [Windows Forms], asynchronous features\"\n  - \"AsyncCompletedEventArgs class\"\nms.assetid: 21a858c1-3c99-4904-86ee-0d17b49804fa","nodes":[{"content":"How to: Implement a Client of the Event-based Asynchronous Pattern","nodes":[{"pos":[0,66],"content":"How to: Implement a Client of the Event-based Asynchronous Pattern","nodes":[{"content":"How to: Implement a Client of the Event-based Asynchronous Pattern","pos":[0,66]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[680,746],"content":"How to: Implement a Client of the Event-based Asynchronous Pattern","linkify":"How to: Implement a Client of the Event-based Asynchronous Pattern","nodes":[{"content":"How to: Implement a Client of the Event-based Asynchronous Pattern","pos":[0,66]}]},{"content":"The following code example demonstrates how to use a component that adheres to the <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>.","pos":[747,977],"source":"The following code example demonstrates how to use a component that adheres to the [Event-based Asynchronous Pattern Overview](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)."},{"content":"The form for this example uses the <ph id=\"ph1\">`PrimeNumberCalculator`</ph> component described in <bpt id=\"p1\">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/component-that-supports-the-event-based-asynchronous-pattern.md)</ept>.","pos":[978,1265],"source":" The form for this example uses the `PrimeNumberCalculator` component described in [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](../../../docs/standard/asynchronous-programming-patterns/component-that-supports-the-event-based-asynchronous-pattern.md)."},{"content":"When you run a project that uses this example, you will see a \"Prime Number Calculator\" form with a grid and two buttons: <bpt id=\"p1\">**</bpt>Start New Task<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Cancel<ept id=\"p2\">**</ept>.","pos":[1272,1428],"source":"When you run a project that uses this example, you will see a \"Prime Number Calculator\" form with a grid and two buttons: **Start New Task** and **Cancel**."},{"content":"You can click the <bpt id=\"p1\">**</bpt>Start New Task<ept id=\"p1\">**</ept> button several times in succession, and for each click, an asynchronous operation will begin a computation to determine if a randomly generated test number is prime.","pos":[1429,1631],"source":" You can click the **Start New Task** button several times in succession, and for each click, an asynchronous operation will begin a computation to determine if a randomly generated test number is prime."},{"content":"The form will periodically display progress and incremental results.","pos":[1632,1700]},{"content":"Each operation is assigned a unique task ID.","pos":[1701,1745]},{"content":"The result of the computation is displayed in the <bpt id=\"p1\">**</bpt>Result<ept id=\"p1\">**</ept> column; if the test number is not prime, it is labeled as <bpt id=\"p2\">**</bpt>Composite,<ept id=\"p2\">**</ept> and its first divisor is displayed.","pos":[1746,1915],"source":" The result of the computation is displayed in the **Result** column; if the test number is not prime, it is labeled as **Composite,** and its first divisor is displayed."},{"content":"Any pending operation can be canceled with the <bpt id=\"p1\">**</bpt>Cancel<ept id=\"p1\">**</ept> button.","pos":[1922,1987],"source":"Any pending operation can be canceled with the **Cancel** button."},{"content":"Multiple selections can be made.","pos":[1988,2020]},{"pos":[2028,2217],"content":"[!NOTE]\n Most numbers will not be prime. If you have not found a prime number after several completed operations, simply start more tasks, and eventually you will find some prime numbers.","leadings":["","> "],"nodes":[{"content":"Most numbers will not be prime. If you have not found a prime number after several completed operations, simply start more tasks, and eventually you will find some prime numbers.","pos":[9,187],"nodes":[{"content":"Most numbers will not be prime.","pos":[0,31]},{"content":"If you have not found a prime number after several completed operations, simply start more tasks, and eventually you will find some prime numbers.","pos":[32,178]}]}]},{"pos":[2226,2233],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2641,2649],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]}]}