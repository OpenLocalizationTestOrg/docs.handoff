<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthroughs.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">928df9baa770185fd5d012e760ca96f3f878cf88</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\walkthroughs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b9e0a2e414c329855b5bc3192796fd853552c90</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9420861959c17906a42330bd43aee920eb952e3a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Visual Basic Language Walkthroughs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Visual Basic Language Walkthroughs</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Walkthroughs give step-by-step instructions for common scenarios, which makes them a good place to start learning about the product or a particular feature area.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing an Async Program<ept id="p1">](./programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Shows how to create an asynchronous solution by using <bpt id="p1">[</bpt>Async<ept id="p1">](../visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id="p2">[</bpt>Await<ept id="p2">](../visual-basic/language-reference/operators/await-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declaring and Raising Events<ept id="p1">](../visual-basic/programming-guide/language-features/events/walkthrough-declaring-and-raising-events.md)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Illustrates how events are declared and raised in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Handling Events<ept id="p1">](../visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Shows how to handle events using either the standard <ph id="ph1">`WithEvents`</ph> keyword or the new <ph id="ph2">`AddHandler`</ph><ph id="ph3">/</ph><ph id="ph4">`RemoveHandler`</ph> keywords.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating and Implementing Interfaces<ept id="p1">](../visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Shows how interfaces are declared and implemented in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Defining Classes<ept id="p1">](../visual-basic/programming-guide/language-features/objects-and-classes/walkthrough-defining-classes.md)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Describes how to declare a class and its fields, properties, methods, and events.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Queries in Visual Basic<ept id="p1">](../visual-basic/programming-guide/concepts/linq/walkthrough-writing-queries.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Demonstrates how you can use Visual Basic language features to write <ph id="ph1">[!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]</ph> query expressions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing IEnumerable(Of T) in Visual Basic<ept id="p1">](../visual-basic/programming-guide/language-features/control-flow/walkthrough-implementing-ienumerable-of-t.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Demonstrates how to create a class that implements the <ph id="ph1">`IEnumerable(Of String)`</ph> interface and a class that implements the <ph id="ph2">`IEnumerator(Of String)`</ph> interface to read a text file one line at a time.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Calling Windows APIs<ept id="p1">](../visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Explains how to use <ph id="ph1">`Declare`</ph> statements and call Windows APIs.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Includes information about using attributes to control marshaling for the API call and how to expose an API call as a method of a class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating COM Objects with Visual Basic<ept id="p1">](../visual-basic/programming-guide/com-interop/walkthrough-creating-com-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Demonstrates how to create COM objects in Visual Basic, both with and without the COM class template.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing Inheritance with COM Objects<ept id="p1">](../visual-basic/programming-guide/com-interop/walkthrough-implementing-inheritance-with-com-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Demonstrates how to use Visual Basic 6.0 to create a COM object containing a class, and then use it as a base class in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Determining Where My.Application.Log Writes Information<ept id="p1">](../visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Describes the default <ph id="ph1">`My.Application.Log`</ph> settings and how to determine the settings for your application.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Changing Where My.Application.Log Writes Information<ept id="p1">](../visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Shows how to override the default <ph id="ph1">`My.Application.Log`</ph> and <ph id="ph2">`My.Log`</ph> settings for logging event information and cause the <ph id="ph3">`Log`</ph> object to write to other log listeners.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Filtering My.Application.Log Output<ept id="p1">](../visual-basic/developing-apps/programming/log-info/walkthrough-filtering-my-application-log-output.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Demonstrates how to change the default log filtering for the <ph id="ph1">`My.Application.Log`</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Custom Log Listeners<ept id="p1">](../visual-basic/developing-apps/programming/log-info/walkthrough-creating-custom-log-listeners.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Demonstrates how to create a custom log listener and configure it to listen to the output of the <ph id="ph1">`My.Application.Log`</ph> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Embedding Types from Managed Assemblies<ept id="p1">](../visual-basic/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-vs.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Describes how to create an assembly and a client program that embeds types from it.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Validating That Passwords Are Complex (Visual Basic)<ept id="p1">](../visual-basic/programming-guide/language-features/strings/walkthrough-validating-that-passwords-are-complex.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Demonstrates how to check for strong-password characteristics and update a string parameter with information about which checks a password fails.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Encrypting and Decrypting Strings in Visual Basic<ept id="p1">](../visual-basic/programming-guide/language-features/strings/walkthrough-encrypting-and-decrypting-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Shows how to use the <ph id="ph1">&lt;xref:System.Security.Cryptography.DESCryptoServiceProvider&gt;</ph> class to encrypt and decrypt strings.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Manipulating Files and Folders in Visual Basic<ept id="p1">](../visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Demonstrates how to use Visual Basic functions to determine information about a file, search for a string in a file, and write to a file.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Manipulating Files Using .NET Framework Methods<ept id="p1">](../visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-by-using-net-framework-methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Demonstrates how to use <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> methods to determine information about a file, search for a string in a file, and write to a file.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Persisting an Object in Visual Basic<ept id="p1">](../visual-basic/programming-guide/concepts/serialization/walkthrough-persisting-an-object-in-visual-studio.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Demonstrates how to create a simple object and persist its data to a file.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Test-First Support with the Generate From Usage Feature<ept id="p1">](/visualstudio/ide/walkthrough-test-first-support-with-the-generate-from-usage-feature)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Demonstrates how to do test-first development, in which you first write unit tests and then write the source code to make the tests succeed.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>