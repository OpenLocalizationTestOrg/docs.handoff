{"content":"---\ntitle: \"ulong (C# Reference) | Microsoft Docs\"\nms.date: \"2017-03-14\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ulong_CSharpKeyword\"\n  - \"ulong\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"ulong keyword [C#]\"\nms.assetid: f2ece624-837a-40cf-92c5-343e7f33397c\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ulong (C# Reference)\n\nThe `ulong` keyword denotes an integral type that stores values according to the size and range shown in the following table.  \n  \n|Type|Range|Size|.NET Framework type|  \n|----------|-----------|----------|-------------------------|  \n|`ulong`|0 to 18,446,744,073,709,551,615|Unsigned 64-bit integer|<xref:System.UInt64?displayProperty=fullName>|  \n  \n## Literals  \n\nYou can declare and initialize a `ulong` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.  If the integer literal is outside the range of `ulong` (that is, if it is less than <xref:System.UInt64.MinValue?displayProperty=fullName> or greater than <xref:System.UInt64.MaxValue?displayProperty=fullName>, a compilation error occurs. \n\nIn the following example, integers equal to 7,934,076,125 that are represented as decimal, hexadecimal, and binary literals are assigned to `ulong` values.  \n  \n[!code-cs[ulong](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ULong)]  \n\n> [!NOTE] \n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix. \n\nStarting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-cs[long](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#LongS)]  \n \n Integer literals can also include a suffix that denotes the type. The suffix `UL` or `ul` unambiguously identifies a numeric literal as a `ulong` value. The `L` suffix denotes a `ulong` if the literal value exceeds <xref:System.Int64.MaxValue?displayProperty=fullName>. And the `U` or `u` suffix denotes a `ulong` if the literal value exceeds <xref:System.UInt32.MaxValue?displayProperty=fullName>. The following example uses the `ul` suffix to denote a long integer:\n \n[!code-cs[ulsuffix](../../../../samples/snippets/csharp/language-reference/keywords/numeric-suffixes.cs#2)]\n\nIf an integer literal has no suffix, its type is the first of the following types in which its value can be represented: \n\n1. [int](int.md)\n2. [uint](../../../csharp/language-reference/keywords/uint.md)\n3. [long](long.md)\n4. `ulong`\n\n## Compiler overload resolution\n  \n A common use of the suffix is with calling overloaded methods. Consider, for example, the following overloaded methods that use `ulong` and [int](../../../csharp/language-reference/keywords/int.md) parameters:  \n  \n```csharp  \npublic static void SampleMethod(int i) {}  \npublic static void SampleMethod(ulong l) {}  \n```  \n  \n Using a suffix with the `ulong` parameter guarantees that the correct type is called, for example:  \n  \n```csharp  \nSampleMethod(5);    // Calling the method with the int parameter  \nSampleMethod(5UL);  // Calling the method with the ulong parameter  \n```  \n  \n## Conversions  \n There is a predefined implicit conversion from `ulong` to [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md).  \n  \n There is no implicit conversion from `ulong` to any integral type. For example, the following statement will produce a compilation error without an explicit cast:  \n  \n```csharp  \nlong long1 = 8UL;   // Error: no implicit conversion from ulong  \n```  \n  \n There is a predefined implicit conversion from [byte](../../../csharp/language-reference/keywords/byte.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), [uint](../../../csharp/language-reference/keywords/uint.md), or [char](../../../csharp/language-reference/keywords/char.md) to `ulong`.  \n  \n Also, there is no implicit conversion from floating-point types to `ulong`. For example, the following statement generates a compiler error unless an explicit cast is used:  \n  \n```csharp  \n// Error -- no implicit conversion from double:  \nulong x = 3.0;  \n// OK -- explicit conversion:  \nulong y = (ulong)3.0;    \n```  \n  \n For information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md).  \n  \n For more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.UInt64>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)","nodes":[{"pos":[12,49],"content":"ulong (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ulong (C# Reference) | Microsoft Docs","pos":[0,37]}]},{"pos":[571,591],"content":"ulong (C# Reference)","linkify":"ulong (C# Reference)","nodes":[{"content":"ulong (C# Reference)","pos":[0,20]}]},{"pos":[593,718],"content":"The <ph id=\"ph1\">`ulong`</ph> keyword denotes an integral type that stores values according to the size and range shown in the following table.","source":"The `ulong` keyword denotes an integral type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[725,729]},{"content":"Range","pos":[730,735]},{"content":"Size","pos":[736,740]},{"content":".NET Framework type","pos":[741,760]},{"content":"0 to 18,446,744,073,709,551,615","pos":[837,868]},{"content":"Unsigned 64-bit integer","pos":[869,892]},{"pos":[948,956],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`ulong`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.","pos":[960,1112],"source":"You can declare and initialize a `ulong` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`ulong`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.UInt64.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.UInt64.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1114,1352],"source":"  If the integer literal is outside the range of `ulong` (that is, if it is less than <xref:System.UInt64.MinValue?displayProperty=fullName> or greater than <xref:System.UInt64.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1355,1510],"content":"In the following example, integers equal to 7,934,076,125 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`ulong`</ph> values.","source":"In the following example, integers equal to 7,934,076,125 that are represented as decimal, hexadecimal, and binary literals are assigned to `ulong` values."},{"pos":[1516,1624],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>ulong<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ULong)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[ulong](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ULong)]"},{"pos":[1630,1793],"content":"[!NOTE] \nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[9,161],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"pos":[1796,1940],"content":"Starting with C# 7, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"pos":[1942,2049],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>long<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#LongS)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[long](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#LongS)]"},{"content":"Integer literals can also include a suffix that denotes the type.","pos":[2055,2120]},{"content":"The suffix <ph id=\"ph1\">`UL`</ph> or <ph id=\"ph2\">`ul`</ph> unambiguously identifies a numeric literal as a <ph id=\"ph3\">`ulong`</ph> value.","pos":[2121,2207],"source":" The suffix `UL` or `ul` unambiguously identifies a numeric literal as a `ulong` value."},{"content":"The <ph id=\"ph1\">`L`</ph> suffix denotes a <ph id=\"ph2\">`ulong`</ph> if the literal value exceeds <ph id=\"ph3\">&lt;xref:System.Int64.MaxValue?displayProperty=fullName&gt;</ph>.","pos":[2208,2324],"source":" The `L` suffix denotes a `ulong` if the literal value exceeds <xref:System.Int64.MaxValue?displayProperty=fullName>."},{"content":"And the <ph id=\"ph1\">`U`</ph> or <ph id=\"ph2\">`u`</ph> suffix denotes a <ph id=\"ph3\">`ulong`</ph> if the literal value exceeds <ph id=\"ph4\">&lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;</ph>.","pos":[2325,2453],"source":" And the `U` or `u` suffix denotes a `ulong` if the literal value exceeds <xref:System.UInt32.MaxValue?displayProperty=fullName>."},{"content":"The following example uses the <ph id=\"ph1\">`ul`</ph> suffix to denote a long integer:","pos":[2454,2522],"source":" The following example uses the `ul` suffix to denote a long integer:"},{"pos":[2525,2632],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>ulsuffix<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-suffixes.cs#2)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[ulsuffix](../../../../samples/snippets/csharp/language-reference/keywords/numeric-suffixes.cs#2)]"},{"content":"If an integer literal has no suffix, its type is the first of the following types in which its value can be represented:","pos":[2634,2754]},{"pos":[2760,2773],"content":"<bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>","source":"[int](int.md)"},{"pos":[2777,2836],"content":"<bpt id=\"p1\">[</bpt>uint<ept id=\"p1\">](../../../csharp/language-reference/keywords/uint.md)</ept>","source":"[uint](../../../csharp/language-reference/keywords/uint.md)"},{"pos":[2840,2855],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](long.md)</ept>","source":"[long](long.md)"},{"pos":[2871,2899],"content":"Compiler overload resolution","linkify":"Compiler overload resolution","nodes":[{"content":"Compiler overload resolution","pos":[0,28]}]},{"content":"A common use of the suffix is with calling overloaded methods.","pos":[2904,2966]},{"content":"Consider, for example, the following overloaded methods that use <ph id=\"ph1\">`ulong`</ph> and <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> parameters:","pos":[2967,3113],"source":" Consider, for example, the following overloaded methods that use `ulong` and [int](../../../csharp/language-reference/keywords/int.md) parameters:"},{"pos":[3231,3329],"content":"Using a suffix with the <ph id=\"ph1\">`ulong`</ph> parameter guarantees that the correct type is called, for example:","source":"Using a suffix with the `ulong` parameter guarantees that the correct type is called, for example:"},{"pos":[3495,3506],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"pos":[3510,3765],"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`ulong`</ph> to <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p3\">[</bpt>decimal<ept id=\"p3\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","source":"There is a predefined implicit conversion from `ulong` to [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"There is no implicit conversion from <ph id=\"ph1\">`ulong`</ph> to any integral type.","pos":[3772,3838],"source":"There is no implicit conversion from `ulong` to any integral type."},{"content":"For example, the following statement will produce a compilation error without an explicit cast:","pos":[3839,3934]},{"pos":[4028,4336],"content":"There is a predefined implicit conversion from <bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](../../../csharp/language-reference/keywords/byte.md)</ept>, <bpt id=\"p2\">[</bpt>ushort<ept id=\"p2\">](../../../csharp/language-reference/keywords/ushort.md)</ept>, <bpt id=\"p3\">[</bpt>uint<ept id=\"p3\">](../../../csharp/language-reference/keywords/uint.md)</ept>, or <bpt id=\"p4\">[</bpt>char<ept id=\"p4\">](../../../csharp/language-reference/keywords/char.md)</ept> to <ph id=\"ph1\">`ulong`</ph>.","source":"There is a predefined implicit conversion from [byte](../../../csharp/language-reference/keywords/byte.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), [uint](../../../csharp/language-reference/keywords/uint.md), or [char](../../../csharp/language-reference/keywords/char.md) to `ulong`."},{"content":"Also, there is no implicit conversion from floating-point types to <ph id=\"ph1\">`ulong`</ph>.","pos":[4343,4418],"source":"Also, there is no implicit conversion from floating-point types to `ulong`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[4419,4515]},{"pos":[4668,4896],"content":"For information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>.","source":"For information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md)."},{"pos":[4903,5090],"content":"For more information on implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"pos":[5099,5124],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[5238,5246],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.UInt64&gt;</ph>","pos":[5250,5270],"source":"<xref:System.UInt64> "},{"content":"<bpt id=\"p1\"> [</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5274,5335],"source":" [C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5338,5406],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5409,5478],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5481,5574],"source":" [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5577,5670],"source":" [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5673,5794],"source":" [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","pos":[5797,5917],"source":" [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}