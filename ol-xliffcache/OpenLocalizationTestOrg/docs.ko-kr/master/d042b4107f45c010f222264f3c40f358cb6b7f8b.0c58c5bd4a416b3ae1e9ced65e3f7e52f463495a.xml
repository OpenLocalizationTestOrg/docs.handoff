{"content":"---\ntitle: \"How to: Access a Member with a Pointer (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"pointers [C#], member access\"\nms.assetid: 1e998498-8c85-4a78-8ce2-4d8c20f08342\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Access a Member with a Pointer (C# Programming Guide)\nTo access a member of a struct that is declared in an unsafe context, you can use the member access operator as shown in the following example in which `p` is a pointer to a [struct](../../../csharp/language-reference/keywords/struct.md) that contains a member `x`.  \n  \n```  \nCoOrds* p = &home;  \np -> x = 25; //member access operator ->  \n```  \n  \n## Example  \n In this example, a [struct](../../../csharp/language-reference/keywords/struct.md), `CoOrds`, that contains the two coordinates `x` and `y` is declared and instantiated. By using the member access operator `->` and a pointer to the instance `home`, `x` and `y` are assigned values.  \n  \n> [!NOTE]\n>  Notice that the expression `p->x` is equivalent to the expression `(*p).x`, and you can obtain the same result by using either of the two expressions.  \n  \n [!code-cs[csProgGuidePointers#9](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-a-member-with-a-pointer_1.cs)]  \n  \n [!code-cs[csProgGuidePointers#10](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-a-member-with-a-pointer_2.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)   \n [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)   \n [Types](../../../csharp/language-reference/keywords/types.md)   \n [unsafe](../../../csharp/language-reference/keywords/unsafe.md)   \n [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)   \n [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)","nodes":[{"pos":[4,568],"nodes":[{"content":"How to: Access a Member with a Pointer (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,78],"content":"How to: Access a Member with a Pointer (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Access a Member with a Pointer (C# Programming Guide) | Microsoft Docs","pos":[0,78]}]}],"pos":[6,87],"yaml":true}],"content":"title: \"How to: Access a Member with a Pointer (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"pointers [C#], member access\"\nms.assetid: 1e998498-8c85-4a78-8ce2-4d8c20f08342\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[575,636],"content":"How to: Access a Member with a Pointer (C# Programming Guide)","linkify":"How to: Access a Member with a Pointer (C# Programming Guide)","nodes":[{"content":"How to: Access a Member with a Pointer (C# Programming Guide)","pos":[0,61]}]},{"pos":[637,902],"content":"To access a member of a struct that is declared in an unsafe context, you can use the member access operator as shown in the following example in which <ph id=\"ph1\">`p`</ph> is a pointer to a <bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](../../../csharp/language-reference/keywords/struct.md)</ept> that contains a member <ph id=\"ph2\">`x`</ph>.","source":"To access a member of a struct that is declared in an unsafe context, you can use the member access operator as shown in the following example in which `p` is a pointer to a [struct](../../../csharp/language-reference/keywords/struct.md) that contains a member `x`."},{"pos":[990,997],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a <bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](../../../csharp/language-reference/keywords/struct.md)</ept>, <ph id=\"ph1\">`CoOrds`</ph>, that contains the two coordinates <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph> is declared and instantiated.","pos":[1001,1170],"source":"In this example, a [struct](../../../csharp/language-reference/keywords/struct.md), `CoOrds`, that contains the two coordinates `x` and `y` is declared and instantiated."},{"content":"By using the member access operator <ph id=\"ph1\">`-&gt;`</ph> and a pointer to the instance <ph id=\"ph2\">`home`</ph>, <ph id=\"ph3\">`x`</ph> and <ph id=\"ph4\">`y`</ph> are assigned values.","pos":[1171,1282],"source":" By using the member access operator `->` and a pointer to the instance `home`, `x` and `y` are assigned values."},{"pos":[1290,1451],"content":"[!NOTE]\n Notice that the expression `p->x` is equivalent to the expression `(*p).x`, and you can obtain the same result by using either of the two expressions.","leadings":["","> "],"nodes":[{"content":"Notice that the expression <ph id=\"ph1\">`p-&gt;x`</ph> is equivalent to the expression <ph id=\"ph2\">`(*p).x`</ph>, and you can obtain the same result by using either of the two expressions.","pos":[9,159],"source":"Notice that the expression `p->x` is equivalent to the expression `(*p).x`, and you can obtain the same result by using either of the two expressions."}]},{"pos":[1458,1609],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuidePointers#9<ept id=\"p2\">](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-a-member-with-a-pointer_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuidePointers#9](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-a-member-with-a-pointer_1.cs)]"},{"pos":[1616,1768],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuidePointers#10<ept id=\"p2\">](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-a-member-with-a-pointer_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuidePointers#10](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-access-a-member-with-a-pointer_2.cs)]"},{"pos":[1777,1785],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1789,1856],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Pointer Expressions<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[1860,1961],"source":"[Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[1965,2054],"source":"[Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2058,2120],"source":"[Types](../../../csharp/language-reference/keywords/types.md) "},{"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept><ph id=\"ph1\"> </ph>","pos":[2124,2188],"source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md) "},{"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2192,2274],"source":"[fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>","pos":[2278,2349],"source":"[stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)"}]}