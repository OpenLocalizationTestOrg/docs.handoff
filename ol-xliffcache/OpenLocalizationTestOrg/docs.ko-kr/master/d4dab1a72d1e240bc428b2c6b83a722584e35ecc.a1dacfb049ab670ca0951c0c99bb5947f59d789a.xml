{"content":"---\ntitle: \"Short Data Type (Visual Basic)\"\nms.date: 01/31/2018\nf1_keywords: \n  - \"vb.Short\"\nhelpviewer_keywords: \n  - \"numbers [Visual Basic], whole\"\n  - \"whole numbers\"\n  - \"integral data types [Visual Basic]\"\n  - \"integer numbers\"\n  - \"numbers [Visual Basic], integer\"\n  - \"integers [Visual Basic], data types\"\n  - \"integers [Visual Basic], types\"\n  - \"data types [Visual Basic], integral\"\n  - \"S literal type character [Visual Basic]\"\n  - \"Short data type\"\n  - \"literal type characters [Visual Basic], S\"\nms.assetid: 65fcbcf3-a841-400e-885e-301497729a8b\n---\n# Short data type (Visual Basic)\nHolds signed 16-bit (2-byte) integers that range in value from -32,768 through 32,767.  \n  \n## Remarks  \n Use the `Short` data type to contain integer values that do not require the full data width of `Integer`. In some cases, the common language runtime can pack your `Short` variables closely together and save memory consumption.  \n  \n The default value of `Short` is 0.  \n  \n## Literal assignments\n\nYou can declare and initialize a `Short` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal. If the integer literal is outside the range of `Short` (that is, if it is less than <xref:System.Int16.MinValue?displayProperty=nameWithType> or greater than <xref:System.Int16.MaxValue?displayProperty=nameWithType>, a compilation error occurs.\n\nIn the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [Integer](integer-data-type.md) to `Short` values.\n\n[!code-vb[Short](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#Short)]\n\n> [!NOTE]\n> You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.\n\nStarting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-vb[Short](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#ShortS)]\n\nStarting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits. For example:\n\n```vb\nDim number As Short = &H_3264\n```\n\n[!INCLUDE [supporting-underscores](../../../../includes/vb-separator-langversion.md)]\n\nNumeric literals can also include the `S` [type character](../../programming-guide/language-features/data-types/type-characters.md) to denote the `Short` data type, as the following example shows.\n\n```vb\nDim number = &H_3264S\n```\n\n## Programming tips\n\n-   **Widening.** The `Short` data type widens to `Integer`, `Long`, `Decimal`, `Single`, or `Double`. This means you can convert `Short` to any one of these types without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error.  \n  \n-   **Type Characters.** Appending the literal type character `S` to a literal forces it to the `Short` data type. `Short` has no identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Int16?displayProperty=nameWithType> structure.  \n  \n## See also\n\n- <xref:System.Int16?displayProperty=nameWithType>\n- [Data Types](../../../visual-basic/language-reference/data-types/index.md)\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)\n- [Integer Data Type](../../../visual-basic/language-reference/data-types/integer-data-type.md)\n- [Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md)\n- [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n","nodes":[{"pos":[4,557],"embed":true,"restype":"x-metadata","content":"title: \"Short Data Type (Visual Basic)\"\nms.date: 01/31/2018\nf1_keywords: \n  - \"vb.Short\"\nhelpviewer_keywords: \n  - \"numbers [Visual Basic], whole\"\n  - \"whole numbers\"\n  - \"integral data types [Visual Basic]\"\n  - \"integer numbers\"\n  - \"numbers [Visual Basic], integer\"\n  - \"integers [Visual Basic], data types\"\n  - \"integers [Visual Basic], types\"\n  - \"data types [Visual Basic], integral\"\n  - \"S literal type character [Visual Basic]\"\n  - \"Short data type\"\n  - \"literal type characters [Visual Basic], S\"\nms.assetid: 65fcbcf3-a841-400e-885e-301497729a8b","nodes":[{"content":"Short Data Type (Visual Basic)","nodes":[{"pos":[0,30],"content":"Short Data Type (Visual Basic)","nodes":[{"content":"Short Data Type (Visual Basic)","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[564,594],"content":"Short data type (Visual Basic)","linkify":"Short data type (Visual Basic)","nodes":[{"content":"Short data type (Visual Basic)","pos":[0,30]}]},{"content":"Holds signed 16-bit (2-byte) integers that range in value from -32,768 through 32,767.","pos":[595,681]},{"pos":[690,697],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the <ph id=\"ph1\">`Short`</ph> data type to contain integer values that do not require the full data width of <ph id=\"ph2\">`Integer`</ph>.","pos":[701,806],"source":"Use the `Short` data type to contain integer values that do not require the full data width of `Integer`."},{"content":"In some cases, the common language runtime can pack your <ph id=\"ph1\">`Short`</ph> variables closely together and save memory consumption.","pos":[807,927],"source":" In some cases, the common language runtime can pack your `Short` variables closely together and save memory consumption."},{"pos":[934,968],"content":"The default value of <ph id=\"ph1\">`Short`</ph> is 0.","source":"The default value of `Short` is 0."},{"pos":[977,996],"content":"Literal assignments","linkify":"Literal assignments","nodes":[{"content":"Literal assignments","pos":[0,19]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`Short`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.","pos":[998,1178],"source":"You can declare and initialize a `Short` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`Short`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Int16.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph>, a compilation error occurs.","pos":[1179,1423],"source":" If the integer literal is outside the range of `Short` (that is, if it is less than <xref:System.Int16.MinValue?displayProperty=nameWithType> or greater than <xref:System.Int16.MaxValue?displayProperty=nameWithType>, a compilation error occurs."},{"pos":[1425,1621],"content":"In the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id=\"p1\">[</bpt>Integer<ept id=\"p1\">](integer-data-type.md)</ept> to <ph id=\"ph1\">`Short`</ph> values.","source":"In the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [Integer](integer-data-type.md) to `Short` values."},{"pos":[1742,1957],"content":"[!NOTE]\nYou use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","pos":[8,213],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`&amp;h`</ph> or <ph id=\"ph2\">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id=\"ph3\">`&amp;b`</ph> or <ph id=\"ph4\">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id=\"ph5\">`&amp;o`</ph> or <ph id=\"ph6\">`&amp;O`</ph> to denote an octal literal.","pos":[0,172],"source":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal."},{"content":"Decimal literals have no prefix.","pos":[173,205]}]}]},{"pos":[1959,2116],"content":"Starting with Visual Basic 2017, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"content":"Starting with Visual Basic 15.5, you can also use the underscore character (<ph id=\"ph1\">`_`</ph>) as a leading separator between the prefix and the hexadecimal, binary, or octal digits.","pos":[2236,2404],"source":"Starting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits."},{"content":"For example:","pos":[2405,2417]},{"pos":[2547,2743],"content":"Numeric literals can also include the <ph id=\"ph1\">`S`</ph> <bpt id=\"p1\">[</bpt>type character<ept id=\"p1\">](../../programming-guide/language-features/data-types/type-characters.md)</ept> to denote the <ph id=\"ph2\">`Short`</ph> data type, as the following example shows.","source":"Numeric literals can also include the `S` [type character](../../programming-guide/language-features/data-types/type-characters.md) to denote the `Short` data type, as the following example shows."},{"pos":[2781,2797],"content":"Programming tips","linkify":"Programming tips","nodes":[{"content":"Programming tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[2803,2816],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`Short`</ph> data type widens to <ph id=\"ph2\">`Integer`</ph>, <ph id=\"ph3\">`Long`</ph>, <ph id=\"ph4\">`Decimal`</ph>, <ph id=\"ph5\">`Single`</ph>, or <ph id=\"ph6\">`Double`</ph>.","pos":[2817,2901],"source":" The `Short` data type widens to `Integer`, `Long`, `Decimal`, `Single`, or `Double`."},{"content":"This means you can convert <ph id=\"ph1\">`Short`</ph> to any one of these types without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=nameWithType&gt;</ph> error.","pos":[2902,3053],"source":" This means you can convert `Short` to any one of these types without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[3063,3083],"source":"**Type Characters.**"},{"content":"Appending the literal type character <ph id=\"ph1\">`S`</ph> to a literal forces it to the <ph id=\"ph2\">`Short`</ph> data type.","pos":[3084,3173],"source":" Appending the literal type character `S` to a literal forces it to the `Short` data type."},{"content":"<ph id=\"ph1\">`Short`</ph> has no identifier type character.","pos":[3174,3215],"source":"`Short` has no identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[3225,3244],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Int16?displayProperty=nameWithType&gt;</ph> structure.","pos":[3245,3356],"source":" The corresponding type in the .NET Framework is the <xref:System.Int16?displayProperty=nameWithType> structure."},{"pos":[3365,3373],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3428,3502],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[3505,3613],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[3616,3709],"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept>","source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)"},{"pos":[3712,3805],"content":"<bpt id=\"p1\">[</bpt>Integer Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>","source":"[Integer Data Type](../../../visual-basic/language-reference/data-types/integer-data-type.md)"},{"pos":[3808,3895],"content":"<bpt id=\"p1\">[</bpt>Long Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>","source":"[Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md)"},{"pos":[3898,4028],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}