<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="bidirectional-features-in-wpf-overview.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">226e9cbf921ab6602ac932e03537d9283e7b69bc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\bidirectional-features-in-wpf-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e28cbcd570f5899f4d5833bd452f6169e01a1f0c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6db9b8c9ade3d82dd712529d034eddad23571325</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Bidirectional Features in WPF Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Bidirectional Features in WPF Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Unlike any other development platform,              <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> has many features that support rapid development of bidirectional content, for example, mixed left to right and right to left data in the same document.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>At the same time,              <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> creates an excellent experience for users who require bidirectional features such as Arabic and Hebrew speaking users.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following sections explain many bidirectional features together with examples illustrating how to achieve the best display of bidirectional content.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Most of the samples use              <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](../../../../includes/tlasharptla-titlexaml-md.md)]</ph>, though you can easily apply the concepts to              <ph id="ph2">[!INCLUDE[TLA#tla_cshrp](../../../../includes/tlasharptla-cshrp-md.md)]</ph> or              <ph id="ph3">[!INCLUDE[TLA#tla_visualb](../../../../includes/tlasharptla-visualb-md.md)]</ph> code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>FlowDirection</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The basic property that defines the content flow direction in a                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application is                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This property can be set to one of two enumeration values,                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> or                  <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The property is available to all                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> elements that inherit from                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following examples set the flow direction of a                  <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Left-to-right flow direction<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Right-to-left flow direction<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following graphic shows how the previous code renders.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Illustrates FlowDirection<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>TextBlock alignment<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/lefttorightrighttoleft.PNG "</bpt>LefttoRightRighttoLeft<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An element within a                  <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> tree will inherit the                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> from its container.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the following example, the                  <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> is inside a                  <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>, which resides in a                  <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Setting the                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> for the                  <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> implies setting it for the                  <ph id="ph3">&lt;xref:System.Windows.Controls.Grid&gt;</ph> and                  <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> as well.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example demonstrates setting                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The top level                  <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> has a                  <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph><ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph>, so all elements contained within it also inherit the same                  <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For an element to override a specified                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> it must add an explicit direction change such as the second                  <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> in the previous example which changes to                  <ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When no                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> is defined, the default                  <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph> applies.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following graphic shows the output of the previous example.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Illustrates Explicitly Assigned FlowDirection<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Flow direction illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flowdir.PNG "</bpt>FlowDir<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>FlowDocument</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Many development platforms such as                  <ph id="ph1">[!INCLUDE[TLA#tla_html](../../../../includes/tlasharptla-html-md.md)]</ph>,                  <ph id="ph2">[!INCLUDE[TLA#tla_win32](../../../../includes/tlasharptla-win32-md.md)]</ph> and Java provide special support for bidirectional content development.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Markup languages such as                  <ph id="ph1">[!INCLUDE[TLA#tla_html](../../../../includes/tlasharptla-html-md.md)]</ph> give content writers the necessary markup to display text in any required direction, for example the                  <ph id="ph2">[!INCLUDE[TLA#tla_html](../../../../includes/tlasharptla-html-md.md)]</ph> 4.0 tag, "dir" that takes "rtl" or "ltr" as values.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This tag is similar to the                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> property, but the                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> property works in a more advanced way to layout textual content and can be used for content other than text.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, a                  <ph id="ph2">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> is a versatile                  <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> element that can host a combination of text, tables, images and other elements.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The samples in the following sections use this element.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Adding text to a                  <ph id="ph1">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> can be done in more that one way.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A simple way to do so is through a                  <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> which is a block-level element used to group content such as text.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To add text to inline-level elements the samples use                  <ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> is an inline-level flow content element used for grouping other inline elements, while a                  <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> is an inline-level flow content element intended to contain a run of unformatted text.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A                  <ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> can contain multiple                  <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The first document example contains a document that has a number of network share names; for example                  <ph id="ph1">`\\server1\folder\file.ext`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Whether you have this network link in an Arabic or English document, you always want it to appear in the same way.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following graphic shows the link in an Arabic                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> document.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Illustrates Using the Span Element<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Document that flows from right to left<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flowdocument.PNG "</bpt>FlowDocument<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because the text is                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph>, all special characters, such as the "<ph id="ph2">\\</ph>", separate the text in a right to left order.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>That results in the link not being shown in the correct order, therefore to solve the problem, the text must be embedded to preserve a separate                  <ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> flowing                  <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Instead of having a separate                  <ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> for each language, a better way to solve the problem is to embed the less frequently used English text into a larger Arabic                  <ph id="ph2">&lt;xref:System.Windows.Documents.Span&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following graphic illustrates this.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Illustrates Using the Run Element Embedded in a Span Element<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>XamlPad screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/runspan.PNG "</bpt>RunSpan<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example demonstrates using                  <ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Documents.Span&gt;</ph> elements in documents.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Span Elements</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> element works as a boundary separator between texts with different flow directions.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Even                  <ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> elements with the same flow direction are considered to have different bidirectional scopes which means that the                  <ph id="ph2">&lt;xref:System.Windows.Documents.Span&gt;</ph> elements are ordered in the container’s                  <ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph>, only the content within the                  <ph id="ph4">&lt;xref:System.Windows.Documents.Span&gt;</ph> element follows the                  <ph id="ph5">&lt;xref:System.Windows.FlowDirection&gt;</ph> of the                  <ph id="ph6">&lt;xref:System.Windows.Documents.Span&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following graphic shows the flow direction of several                  <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Illustrates FlowDirection in Several TextBlock Elements<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Text blocks with different flow directions<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/span.PNG "</bpt>Span<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the                  <ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> elements to produce the results shown in the previous graphic.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the                  <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements in the sample, the                  <ph id="ph2">&lt;xref:System.Windows.Documents.Span&gt;</ph> elements are laid out according to the                  <ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph> of their parents, but the text within each                  <ph id="ph4">&lt;xref:System.Windows.Documents.Span&gt;</ph> element flows according to its own                  <ph id="ph5">&lt;xref:System.Windows.FlowDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is applicable to Latin and Arabic – or any other language.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Adding xml:lang</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following graphic shows another example that uses numbers and arithmetic expressions, such as                          <ph id="ph1">`"200.0+21.4=221.4"`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Notice that only the                          <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> is set.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Displays Numbers Using Only FlowDirection<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Numbers that flow from right to left<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/langattribute.PNG "</bpt>LangAttribute<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Users of this application will be disappointed by the output, even though the                          <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> is correct the numbers are not shaped as Arabic numbers should be shaped.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>XAML elements can include an                          <ph id="ph1">[!INCLUDE[TLA#tla_xml](../../../../includes/tlasharptla-xml-md.md)]</ph> attribute (                         <ph id="ph2">`xml:lang`</ph>) that defines the language of each element.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>XAML also supports a                          <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> language principle whereby                          <ph id="ph2">`xml:lang`</ph> values applied to parent elements in the tree are used by child elements.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the previous example, because a language was not defined for the                          <ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> element or any of its top level elements, the default                          <ph id="ph2">`xml:lang`</ph> was used, which is                          <ph id="ph3">`en-US`</ph> for XAML.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The internal number shaping algorithm of                          <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> selects numbers in the corresponding language – in this case English.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To make the Arabic numbers render correctly                          <ph id="ph1">`xml:lang`</ph> needs to be set.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following graphic shows the example with                          <ph id="ph1">`xml:lang`</ph> added.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Illustrates Using the xml:lang Attribute<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Arabic numbers that flow from right to left<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/langattribute2.PNG "</bpt>LangAttribute2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following example adds                          <ph id="ph1">`xml:lang`</ph> to the application.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Be aware that many languages have different                          <ph id="ph1">`xml:lang`</ph> values depending on the targeted region, for example,                          <ph id="ph2">`"ar-SA"`</ph> and                          <ph id="ph3">`"ar-EG"`</ph> represent two variations of Arabic.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The previous examples illustrate that you need to define both the                          <ph id="ph1">`xml:lang`</ph> and                          <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>FlowDirection with Non-text Elements</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> defines not only how text flows in a textual element but also the flow direction of almost every other                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> element.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following graphic shows a                  <ph id="ph1">&lt;xref:System.Windows.Controls.ToolBar&gt;</ph> that uses a horizontal                  <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph> to draw its background.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Shows a ToolBar with a Left to Right Gradient<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Gradient screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/gradient.PNG "</bpt>Gradient<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>After setting the                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> to                  <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>, not only the                  <ph id="ph3">&lt;xref:System.Windows.Controls.ToolBar&gt;</ph> buttons are arranged from right to left, but even the                  <ph id="ph4">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph> realigns its offsets to flow from right to left.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following graphic shows the realignment of the                  <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Shows a ToolBar with a Right to Left Gradient<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A gradient that flows from right to left<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/gradient2-wpf.PNG "</bpt>Gradient2_WPF<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following example draws a                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph><ph id="ph2">&lt;xref:System.Windows.Controls.ToolBar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>(To draw it left to right, remove the                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> attribute on the                  <ph id="ph2">&lt;xref:System.Windows.Controls.ToolBar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>FlowDirection Exceptions</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>There are a few cases where                          <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> does not behave as expected.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This section covers two of these exceptions.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Image<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An                          <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> represents a control that displays an image.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In                          <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](../../../../includes/tlasharptla-titlexaml-md.md)]</ph> it can be used with a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Image.Source%2A&gt;</ph> property that defines the                          <ph id="ph3">[!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)]</ph> of the                          <ph id="ph4">&lt;xref:System.Windows.Controls.Image&gt;</ph> to display.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Unlike other                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> elements, an                          <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph> does not inherit the                          <ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph> from the container.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>However, if the                          <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> is set explicitly to                          <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>, an                          <ph id="ph3">&lt;xref:System.Windows.Controls.Image&gt;</ph> is displayed flipped horizontally.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This is implemented as a convenient feature for developers of bidirectional content; because in some cases, horizontally flipping the image produces the desired effect.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following graphic shows a flipped                          <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Illustrates a Flipped Image<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>XamlPad screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/image.PNG "</bpt>Image<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following example demonstrates that the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> fails to inherit the                          <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph> from the                          <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> that contains it.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> You must have a file named                          <bpt id="p2">**</bpt>ms_logo.jpg<ept id="p2">**</ept> on your C:\ drive to run this example.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> Included in the download files is an                          <bpt id="p2">**</bpt>ms_logo.jpg<ept id="p2">**</ept> file.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The code assumes that the .jpg file is not inside your project but somewhere on the C:\ drive.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You must copy the .jpg from the project files to your C:\ drive or change the code to look for the file inside the project.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To do this change                          <ph id="ph1">`Source="file://c:/ms_logo.jpg"`</ph> to                          <ph id="ph2">`Source="ms_logo.jpg"`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Paths<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In addition to an                          <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph>, another interesting element is                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A Path is an object that can draw a series of connected lines and curves.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>It behaves in a manner similar to an                          <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> regarding its                          <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>; for example its                          <ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph><ph id="ph4">&lt;xref:System.Windows.FlowDirection&gt;</ph> is a horizontal mirror of its                          <ph id="ph5">&lt;xref:System.Windows.FlowDirection&gt;</ph> one.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>However, unlike an                          <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph>,                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph> inherits its                          <ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph> from the container and one does not need to specify it explicitly.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following example draws a simple arrow using 3 lines.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The first arrow inherits the                          <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> flow direction from the                          <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> so that its start and end points are measured from a root on the right side.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The second arrow which has an explicit                          <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph><ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph> also starts on the right side.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>However, the third arrow has its starting root on the left side.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information on drawing see                          <ph id="ph1">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following graphic shows the output of the previous example.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Illustrates Arrows Drawn Using the Path Element<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Paths<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/paths.PNG "</bpt>Paths<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph> are two examples of a how                          <ph id="ph3">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> uses                          <ph id="ph4">&lt;xref:System.Windows.FlowDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Beside laying out                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> elements in a specific direction within a container,                          <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph> can be used with elements such as                          <ph id="ph3">&lt;xref:System.Windows.Controls.InkPresenter&gt;</ph> which renders ink on a surface,                          <ph id="ph4">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph>,                          <ph id="ph5">&lt;xref:System.Windows.Media.RadialGradientBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Whenever you need a right to left behavior for your content that mimics a left to right behavior, or vice versa,                          <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides that capability.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Number Substitution</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Historically,                  <ph id="ph1">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph> has supported number substitution by allowing the representation of different cultural shapes for the same digits while keeping the internal storage of these digits unified among different locales, for example numbers are stored in their well known hexadecimal values, 0x40, 0x41, but displayed according to the selected language.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This has allowed applications to process numerical values without the need to convert them from one language to another, for example a user can open an                  <ph id="ph1">[!INCLUDE[TLA#tla_xl](../../../../includes/tlasharptla-xl-md.md)]</ph> spreadsheet in a localized Arabic                  <ph id="ph2">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph> and see the numbers shaped in Arabic, but open it in a European version of                  <ph id="ph3">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph> and see European representation of the same numbers.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This is also necessary for other symbols such as comma separators and percentage symbol because they usually accompany numbers in the same document.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> continues the same tradition, and adds further support for this feature that allows more user control over when and how substitution is used.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>While this feature is designed for any language, it is particularly useful in bidirectional content where shaping digits for a specific language is usually a challenge for application developers because of the various cultures an application might run on.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The core property controlling how number substitution works in                  <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> is the                  <ph id="ph2">&lt;xref:System.Windows.Media.NumberSubstitution.Substitution%2A&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitution&gt;</ph> class specifies how numbers in text are to be displayed.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>It has three public properties that define its behavior.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Following is a summary of each of the properties.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CultureSource:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This property specifies how the culture for numbers is determined.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It takes one of three                  <ph id="ph1">&lt;xref:System.Windows.Media.NumberCultureSource&gt;</ph> enumeration values.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Override: Number culture is that of                          <ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitution.CultureOverride%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Text: Number culture is the culture of the text run.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In markup, this would be                          <ph id="ph1">`xml:lang`</ph>, or its alias                          <ph id="ph2">`Language`</ph> property (                         <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> or                          <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement.Language%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Also, it is the default for classes deriving from                          <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Such classes include                          <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph?displayProperty=fullName&gt;</ph>,                          <ph id="ph2">&lt;xref:System.Windows.Documents.Table?displayProperty=fullName&gt;</ph>,                          <ph id="ph3">&lt;xref:System.Windows.Documents.TableCell?displayProperty=fullName&gt;</ph> and so forth.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>User: Number culture is the culture of the current thread.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This property is the default for all subclasses of                          <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> such as                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>,                          <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> and                          <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CultureOverride<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitution.CultureOverride%2A&gt;</ph> property is used only if the                  <ph id="ph2">&lt;xref:System.Windows.Media.NumberSubstitution.CultureSource%2A&gt;</ph> property is set to                  <ph id="ph3">&lt;xref:System.Windows.Media.NumberCultureSource&gt;</ph> and is ignored otherwise.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It specifies the number culture.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A value of                  <ph id="ph1">`null`</ph>, the default value, is interpreted as en-US.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Substitution<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This property specifies the type of number substitution to perform.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>It takes one of the following                  <ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitutionMethod&gt;</ph> enumeration values.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitutionMethod&gt;</ph>: The substitution method is determined based on the number culture's                          <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This is the default.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitutionMethod&gt;</ph>: If the number culture is an Arabic or Farsi culture, it specifies that the digits depend on the context.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitutionMethod&gt;</ph>: Numbers are always rendered as European digits.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitutionMethod&gt;</ph>: Numbers are rendered using the national digits for the number culture, as specified by the culture's                          <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.NumberFormat%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitutionMethod&gt;</ph>: Numbers are rendered using the traditional digits for the number culture.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For most cultures, this is the same as                          <ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitutionMethod&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>However,                          <ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitutionMethod&gt;</ph> results in Latin digits for some Arabic cultures, whereas this value results in Arabic digits for all Arabic cultures.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>What do those values mean for a bidirectional content developer?</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In most cases, the developer might need only to define                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> and the language of each textual                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> element, for example                  <ph id="ph3">`Language="ar-SA"`</ph> and the                  <ph id="ph4">&lt;xref:System.Windows.Media.NumberSubstitution&gt;</ph> logic takes care of displaying the numbers according to the correct                  <ph id="ph5">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The following example demonstrates using Arabic and English numbers in a                  <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> application running in an Arabic version of                  <ph id="ph2">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The following graphic shows the output of the previous sample if you are running in an Arabic version of                  <ph id="ph1">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Shows Arabic and English Numbers Displayed<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>XamlPad screen shot with numbers<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/numbers.PNG "</bpt>Numbers<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> was important in this case because setting the                  <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph> to                  <ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph> instead would have yielded European digits.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The following sections discuss how to have a unified display of digits throughout your document.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If this example is not running on Arabic Windows, all the digits display as European digits.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defining Substitution Rules<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>In a real application you might need to set the Language programmatically.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For example, you want to set the                  <ph id="ph1">`xml:lang`</ph> attribute to be the same as the one used by the system’s                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, or maybe change the language depending on the application state.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>If you want to make changes based on the application's state, make use of other features provided by                  <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>First, set the application component’s                  <ph id="ph1">`NumberSubstitution.CultureSource="Text"`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Using this setting makes sure that the settings do not come from the                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> for text elements that have "User" as the default, such as                  <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>In the corresponding                  <ph id="ph1">[!INCLUDE[TLA2#tla_lhcshrp](../../../../includes/tla2sharptla-lhcshrp-md.md)]</ph> code, set the                  <ph id="ph2">`Language`</ph> property for example, to                  <ph id="ph3">`"ar-SA"`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you need to set the                  <ph id="ph1">`Language`</ph> property to the current user’s                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> language use the following code.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> represents the current culture used by the current thread at run time.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Your final                  <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](../../../../includes/tlasharptla-titlexaml-md.md)]</ph> example should be similar to the following example.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Your final                  <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](../../../../includes/tlasharptla-cshrp-md.md)]</ph> example should be similar to the following.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The following graphic shows what the window looks like for either programming language.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graphic That Displays Arabic Numbers<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Arabic numbers<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/numbers2.PNG "</bpt>Numbers2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Using the Substitution Property<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The way number substitution works in                  <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> depends on both the Language of the text element and its                  <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If the                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> is left to right, then European digits are rendered.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>However if it is preceded by Arabic text, or has the language set to "ar" and the                  <ph id="ph1">&lt;xref:System.Windows.FlowDirection&gt;</ph> is                  <ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>, Arabic digits are rendered instead.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>In some cases, however, you might want to create a unified application, for example European digits for all users.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Or Arabic digits in                  <ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph> cells with a specific                  <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>One easy way to do that is using the                  <ph id="ph1">&lt;xref:System.Windows.Media.NumberSubstitution.Substitution%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>In the following example, the first                  <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> does not have the                  <ph id="ph2">&lt;xref:System.Windows.Media.NumberSubstitution.Substitution%2A&gt;</ph> property set, so the algorithm displays Arabic digits as expected.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>However in the second                  <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, the substitution is set to European overriding the default substitution for Arabic numbers, and European digits are displayed.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>