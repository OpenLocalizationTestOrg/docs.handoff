{"content":"---\ntitle: \"How to: Create User-Defined Exceptions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"user-defined exceptions\"\n  - \"exceptions, examples\"\n  - \"exceptions, user-defined\"\nms.assetid: 25819a5a-f915-4fc8-b924-a76915674e04\ncaps.latest.revision: 10\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# How to create user-defined exceptions\n\n.NET provides a hierarchy of exception classes ultimately derived from the base class @System.Exception. However, if none of the predefined exceptions meets your needs, you can create your own exception classes by deriving from the @System.Exception class.\n\nWhen creating your own exceptions, end the class name of the user-defined exception with the word \"Exception,\" and implement the three common constructors, as shown in the following example. The example defines a new exception class named `EmployeeListNotFoundException`. The class is derived from @System.Exception and includes three constructors.\n\n[!code-cpp[dg_exceptionDesign#14](../../../samples/snippets/cpp/VS_Snippets_CLR/dg_exceptionDesign/cpp/example2.cpp#14)]\n[!code-csharp[dg_exceptionDesign#14](../../../samples/snippets/csharp/VS_Snippets_CLR/dg_exceptionDesign/cs/example2.cs#14)]\n[!code-vb[dg_exceptionDesign#14](../../../samples/snippets/visualbasic/VS_Snippets_CLR/dg_exceptionDesign/vb/example2.vb#14)]  \n\n> [!NOTE]\n> In situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller). For more information, see [Best practices for exceptions](best-practices-for-exceptions.md).\n\n## See Also  \n[Exceptions](index.md)","nodes":[{"pos":[12,67],"content":"How to: Create User-Defined Exceptions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Create User-Defined Exceptions | Microsoft Docs","pos":[0,55]}]},{"pos":[466,503],"content":"How to create user-defined exceptions","linkify":"How to create user-defined exceptions","nodes":[{"content":"How to create user-defined exceptions","pos":[0,37]}]},{"content":".NET provides a hierarchy of exception classes ultimately derived from the base class <ph id=\"ph1\">@System.Exception</ph>.","pos":[505,609],"source":".NET provides a hierarchy of exception classes ultimately derived from the base class @System.Exception."},{"content":"However, if none of the predefined exceptions meets your needs, you can create your own exception classes by deriving from the <ph id=\"ph1\">@System.Exception</ph> class.","pos":[610,761],"source":" However, if none of the predefined exceptions meets your needs, you can create your own exception classes by deriving from the @System.Exception class."},{"content":"When creating your own exceptions, end the class name of the user-defined exception with the word \"Exception,\" and implement the three common constructors, as shown in the following example.","pos":[763,953]},{"content":"The example defines a new exception class named <ph id=\"ph1\">`EmployeeListNotFoundException`</ph>.","pos":[954,1034],"source":" The example defines a new exception class named `EmployeeListNotFoundException`."},{"content":"The class is derived from <ph id=\"ph1\">@System.Exception</ph> and includes three constructors.","pos":[1035,1111],"source":" The class is derived from @System.Exception and includes three constructors."},{"pos":[1113,1484],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>dg_exceptionDesign#14<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/dg_exceptionDesign/cpp/example2.cpp#14)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>dg_exceptionDesign#14<ept id=\"p4\">](../../../samples/snippets/csharp/VS_Snippets_CLR/dg_exceptionDesign/cs/example2.cs#14)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>dg_exceptionDesign#14<ept id=\"p6\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/dg_exceptionDesign/vb/example2.vb#14)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[dg_exceptionDesign#14](../../../samples/snippets/cpp/VS_Snippets_CLR/dg_exceptionDesign/cpp/example2.cpp#14)]\n[!code-csharp[dg_exceptionDesign#14](../../../samples/snippets/csharp/VS_Snippets_CLR/dg_exceptionDesign/cs/example2.cs#14)]\n[!code-vb[dg_exceptionDesign#14](../../../samples/snippets/visualbasic/VS_Snippets_CLR/dg_exceptionDesign/vb/example2.vb#14)]"},{"pos":[1490,1786],"content":"[!NOTE]\nIn situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller). For more information, see [Best practices for exceptions](best-practices-for-exceptions.md).","leadings":["","> "],"nodes":[{"content":"In situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller). For more information, see [Best practices for exceptions](best-practices-for-exceptions.md).","pos":[8,294],"nodes":[{"content":"In situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller).","pos":[0,193]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best practices for exceptions<ept id=\"p1\">](best-practices-for-exceptions.md)</ept>.","pos":[194,286],"source":" For more information, see [Best practices for exceptions](best-practices-for-exceptions.md)."}]}]},{"pos":[1791,1799],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1802,1824],"content":"<bpt id=\"p1\">[</bpt>Exceptions<ept id=\"p1\">](index.md)</ept>","source":"[Exceptions](index.md)"}]}