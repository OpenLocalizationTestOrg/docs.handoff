{"content":"---\ntitle: \"How to: Create Unsigned Friend Assemblies (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 78cbc4f0-b021-4141-a4ff-eb4edbd814ca\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Create Unsigned Friend Assemblies (C#)\nThis example shows how to use friend assemblies with assemblies that are unsigned.  \n  \n### To create an assembly and a friend assembly  \n  \n1.  Open a command prompt.  \n  \n2.  Create a C# file named `friend_signed_A.` that contains the following code. The code uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to declare friend_signed_B as a friend assembly.  \n  \n    ```csharp  \n    // friend_unsigned_A.cs  \n    // Compile with:   \n    // csc /target:library friend_unsigned_A.cs  \n    using System.Runtime.CompilerServices;  \n    using System;  \n  \n    [assembly: InternalsVisibleTo(\"friend_unsigned_B\")]  \n  \n    // Type is internal by default.  \n    class Class1  \n    {  \n        public void Test()  \n        {  \n            Console.WriteLine(\"Class1.Test\");  \n        }  \n    }  \n  \n    // Public type with internal member.  \n    public class Class2  \n    {  \n        internal void Test()  \n        {  \n            Console.WriteLine(\"Class2.Test\");  \n        }  \n    }  \n    ```  \n  \n3.  Compile and sign friend_signed_A by using the following command.  \n  \n    ```csharp  \n    csc /target:library friend_unsigned_A.cs  \n    ```  \n  \n4.  Create a C# file named `friend_unsigned_B` that contains the following code. Because friend_unsigned_A specifies friend_unsigned_B as a friend assembly, the code in friend_unsigned_B can access `internal` types and members from friend_unsigned_A.  \n  \n    ```csharp  \n    // friend_unsigned_B.cs  \n    // Compile with:   \n    // csc /r:friend_unsigned_A.dll /out:friend_unsigned_B.exe friend_unsigned_B.cs  \n    public class Program  \n    {  \n        static void Main()  \n        {  \n            // Access an internal type.  \n            Class1 inst1 = new Class1();  \n            inst1.Test();  \n  \n            Class2 inst2 = new Class2();  \n            // Access an internal member of a public type.  \n            inst2.Test();  \n  \n            System.Console.ReadLine();  \n        }  \n    }  \n    ```  \n  \n5.  Compile friend_signed_B by using the following command.  \n  \n    ```csharp  \n    csc /r:friend_unsigned_A.dll /out:friend_unsigned_B.exe friend_unsigned_B.cs  \n    ```  \n  \n     The name of the assembly that is generated by the compiler must match the friend assembly name that is passed to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute. You must explicitly specify the name of the output assembly (.exe or .dll) by using the `/out` compiler option. For more information, see [/out (C# Compiler Options)](../../../../csharp/language-reference/compiler-options/out-compiler-option.md).  \n  \n6.  Run the friend_signed_B.exe file.  \n  \n     The program prints two strings: \"Class1.Test\" and \"Class2.Test\".  \n  \n## .NET Framework Security  \n There are similarities between the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute and the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The main difference is that <xref:System.Security.Permissions.StrongNameIdentityPermission> can demand security permissions to run a particular section of code, whereas the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute controls the visibility of `internal` types and members.  \n  \n## See Also  \n <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>   \n [Assemblies and the Global Assembly Cache (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/index.md)   \n [Friend Assemblies (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/friend-assemblies.md)   \n [How to: Create Signed Friend Assemblies (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/how-to-create-signed-friend-assemblies.md)   \n [C# Programming Guide](../../../../csharp/programming-guide/index.md)","nodes":[{"pos":[4,427],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create Unsigned Friend Assemblies (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 78cbc4f0-b021-4141-a4ff-eb4edbd814ca\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"How to: Create Unsigned Friend Assemblies (C#) | Microsoft Docs","nodes":[{"pos":[0,63],"content":"How to: Create Unsigned Friend Assemblies (C#) | Microsoft Docs","nodes":[{"content":"How to: Create Unsigned Friend Assemblies (C#) | Microsoft Docs","pos":[0,63]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[434,480],"content":"How to: Create Unsigned Friend Assemblies (C#)","linkify":"How to: Create Unsigned Friend Assemblies (C#)","nodes":[{"content":"How to: Create Unsigned Friend Assemblies (C#)","pos":[0,46]}]},{"content":"This example shows how to use friend assemblies with assemblies that are unsigned.","pos":[481,563]},{"pos":[573,616],"content":"To create an assembly and a friend assembly","linkify":"To create an assembly and a friend assembly","nodes":[{"content":"To create an assembly and a friend assembly","pos":[0,43]}]},{"content":"Open a command prompt.","pos":[626,648]},{"content":"Create a C# file named <ph id=\"ph1\">`friend_signed_A.`</ph> that contains the following code.","pos":[658,733],"source":"Create a C# file named `friend_signed_A.` that contains the following code."},{"content":"The code uses the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to declare friend_signed_B as a friend assembly.","pos":[734,877],"source":" The code uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to declare friend_signed_B as a friend assembly."},{"content":"Compile and sign friend_signed_A by using the following command.","pos":[1514,1578]},{"content":"Create a C# file named <ph id=\"ph1\">`friend_unsigned_B`</ph> that contains the following code.","pos":[1664,1740],"source":"Create a C# file named `friend_unsigned_B` that contains the following code."},{"content":"Because friend_unsigned_A specifies friend_unsigned_B as a friend assembly, the code in friend_unsigned_B can access <ph id=\"ph1\">`internal`</ph> types and members from friend_unsigned_A.","pos":[1741,1910],"source":" Because friend_unsigned_A specifies friend_unsigned_B as a friend assembly, the code in friend_unsigned_B can access `internal` types and members from friend_unsigned_A."},{"content":"Compile friend_signed_B by using the following command.","pos":[2477,2532]},{"content":"The name of the assembly that is generated by the compiler must match the friend assembly name that is passed to the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute.","pos":[2655,2849],"source":"The name of the assembly that is generated by the compiler must match the friend assembly name that is passed to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute."},{"content":"You must explicitly specify the name of the output assembly (.exe or .dll) by using the <ph id=\"ph1\">`/out`</ph> compiler option.","pos":[2850,2961],"source":" You must explicitly specify the name of the output assembly (.exe or .dll) by using the `/out` compiler option."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/out (C# Compiler Options)<ept id=\"p1\">](../../../../csharp/language-reference/compiler-options/out-compiler-option.md)</ept>.","pos":[2962,3096],"source":" For more information, see [/out (C# Compiler Options)](../../../../csharp/language-reference/compiler-options/out-compiler-option.md)."},{"content":"Run the friend_signed_B.exe file.","pos":[3106,3139]},{"content":"The program prints two strings: \"Class1.Test\" and \"Class2.Test\".","pos":[3150,3214]},{"pos":[3223,3246],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"There are similarities between the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute and the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.StrongNameIdentityPermission&gt;</ph> class.","pos":[3250,3440],"source":"There are similarities between the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute and the <xref:System.Security.Permissions.StrongNameIdentityPermission> class."},{"content":"The main difference is that <ph id=\"ph1\">&lt;xref:System.Security.Permissions.StrongNameIdentityPermission&gt;</ph> can demand security permissions to run a particular section of code, whereas the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute controls the visibility of <ph id=\"ph3\">`internal`</ph> types and members.","pos":[3441,3747],"source":" The main difference is that <xref:System.Security.Permissions.StrongNameIdentityPermission> can demand security permissions to run a particular section of code, whereas the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute controls the visibility of `internal` types and members."},{"pos":[3756,3764],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Assemblies and the Global Assembly Cache (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3839,3958],"source":"[Assemblies and the Global Assembly Cache (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Friend Assemblies (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/assemblies-gac/friend-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[3962,4070],"source":"[Friend Assemblies (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/friend-assemblies.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Create Signed Friend Assemblies (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/assemblies-gac/how-to-create-signed-friend-assemblies.md)</ept><ph id=\"ph1\"> </ph>","pos":[4074,4225],"source":"[How to: Create Signed Friend Assemblies (C#)](../../../../csharp/programming-guide/concepts/assemblies-gac/how-to-create-signed-friend-assemblies.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../../csharp/programming-guide/index.md)</ept>","pos":[4229,4298],"source":"[C# Programming Guide](../../../../csharp/programming-guide/index.md)"}]}