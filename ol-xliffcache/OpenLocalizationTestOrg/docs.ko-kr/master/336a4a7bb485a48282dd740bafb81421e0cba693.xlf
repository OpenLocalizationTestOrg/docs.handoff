<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">336a4a7bb485a48282dd740bafb81421e0cba693</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\decimal.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02c84fef1cbd46153767b07ef29a8d9f2d8c6456</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0fae0cbc63f37525df42ddd0865b405ea63c734</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>decimal (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>decimal (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`decimal`</ph> keyword indicates a 128-bit data type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Compared to floating-point types, the <ph id="ph1">`decimal`</ph> type has more precision and a smaller range, which makes it appropriate for financial and monetary calculations.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The approximate range and precision for the <ph id="ph1">`decimal`</ph> type are shown in the following table.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Approximate Range</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Precision</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>.NET Framework type</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(-7.9 x 10<bpt id="p1">&lt;sup&gt;</bpt>28<ept id="p1">&lt;/sup&gt;</ept> to 7.9 x 10<bpt id="p2">&lt;sup&gt;</bpt>28<ept id="p2">&lt;/sup&gt;</ept>) / (10<bpt id="p3">&lt;sup&gt;</bpt>0 to 28<ept id="p3">&lt;/sup&gt;</ept>)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>28-29 significant digits</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Literals</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you want a numeric real literal to be treated as <ph id="ph1">`decimal`</ph>, use the suffix m or M, for example:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Without the suffix m, the number is treated as a <bpt id="p1">[</bpt>double<ept id="p1">](../../../csharp/language-reference/keywords/double.md)</ept> and generates a compiler error.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Conversions</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The integral types are implicitly converted to <ph id="ph1">`decimal`</ph> and the result evaluates to <ph id="ph2">`decimal`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Therefore you can initialize a decimal variable using an integer literal, without the suffix, as follows:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There is no implicit conversion between floating-point types and the <ph id="ph1">`decimal`</ph> type; therefore, a cast must be used to convert between these two types.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also mix <ph id="ph1">`decimal`</ph> and numeric integral types in the same expression.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, mixing <ph id="ph1">`decimal`</ph> and floating-point types without a cast causes a compilation error.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information about implicit numeric conversions, see <bpt id="p1">[</bpt>Implicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information about explicit numeric conversions, see <bpt id="p1">[</bpt>Explicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Formatting Decimal Output</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can format the results by using the <ph id="ph1">`String.Format`</ph> method, or through the <ph id="ph2">&lt;xref:System.Console.Write%2A?displayProperty=fullName&gt;</ph> method, which calls <ph id="ph3">`String.Format()`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The currency format is specified by using the standard currency format string "C" or "c," as shown in the second example later in this article.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`String.Format`</ph> method, see <ph id="ph2">&lt;xref:System.String.Format%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example causes a compiler error by trying to add <bpt id="p1">[</bpt>double<ept id="p1">](../../../csharp/language-reference/keywords/double.md)</ept> and <ph id="ph1">`decimal`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The result is the following error:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this example, a <ph id="ph1">`decimal`</ph> and an <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept> are mixed in the same expression.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The result evaluates to the <ph id="ph1">`decimal`</ph> type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsTypes#6<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/decimal_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this example, the output is formatted by using the currency format string.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Notice that <ph id="ph1">`x`</ph> is rounded because the decimal places exceed $0.99.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`y`</ph>, which represents the maximum exact digits, is displayed exactly in the correct format.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsTypes#7<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/decimal_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Decimal&gt;</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integral Types Table<ept id="p1">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Built-In Types Table<ept id="p1">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Explicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](../../../standard/base-types/standard-numeric-format-strings.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>