{"content":"---\ntitle: \"How to: Write Object Data to an XML File (C#)\"\nms.date: 07/20/2015\nms.assetid: 7681eb98-703d-4005-a369-26a7bca0f894\n---\n# How to: Write Object Data to an XML File (C#)\nThis example writes the object from a class to an XML file using the <xref:System.Xml.Serialization.XmlSerializer> class.  \n  \n## Example  \n  \n```csharp  \npublic class XMLWrite  \n{  \n  \n   static void Main(string[] args)  \n    {  \n        WriteXML();  \n    }  \n  \n    public class Book  \n    {  \n        public String title;   \n    }  \n  \n    public static void WriteXML()  \n    {  \n        Book overview = new Book();  \n        overview.title = \"Serialization Overview\";  \n        System.Xml.Serialization.XmlSerializer writer =   \n            new System.Xml.Serialization.XmlSerializer(typeof(Book));  \n  \n        var path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"//SerializationOverview.xml\";  \n        System.IO.FileStream file = System.IO.File.Create(path);  \n  \n        writer.Serialize(file, overview);  \n        file.Close();  \n    }  \n}  \n```  \n  \n## Compiling the Code  \n The class must have a public constructor without parameters.  \n  \n## Robust Programming  \n The following conditions may cause an exception:  \n  \n-   The class being serialized does not have a public, parameterless constructor.  \n  \n-   The file exists and is read-only (<xref:System.IO.IOException>).  \n  \n-   The path is too long (<xref:System.IO.PathTooLongException>).  \n  \n-   The disk is full (<xref:System.IO.IOException>).  \n  \n## .NET Framework Security  \n This example creates a new file, if the file does not already exist. If an application needs to create a file, that application needs `Create` access for the folder. If the file already exists, the application needs only `Write` access, a lesser privilege. Where possible, it is more secure to create the file during deployment, and only grant `Read` access to a single file, rather than `Create` access for a folder.  \n  \n## See also\n\n- <xref:System.IO.StreamWriter>\n- [How to: Read Object Data from an XML File (C#)](../../../../csharp/programming-guide/concepts/serialization/how-to-read-object-data-from-an-xml-file.md)\n- [Serialization (C#)](../../../../csharp/programming-guide/concepts/serialization/index.md)\n","nodes":[{"pos":[4,127],"embed":true,"restype":"x-metadata","content":"title: \"How to: Write Object Data to an XML File (C#)\"\nms.date: 07/20/2015\nms.assetid: 7681eb98-703d-4005-a369-26a7bca0f894","nodes":[{"content":"How to: Write Object Data to an XML File (C#)","nodes":[{"pos":[0,45],"content":"How to: Write Object Data to an XML File (C#)","nodes":[{"content":"How to: Write Object Data to an XML File (C#)","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[134,179],"content":"How to: Write Object Data to an XML File (C#)","linkify":"How to: Write Object Data to an XML File (C#)","nodes":[{"content":"How to: Write Object Data to an XML File (C#)","pos":[0,45]}]},{"pos":[180,301],"content":"This example writes the object from a class to an XML file using the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class.","source":"This example writes the object from a class to an XML file using the <xref:System.Xml.Serialization.XmlSerializer> class."},{"pos":[310,317],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1069,1087],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"The class must have a public constructor without parameters.","pos":[1091,1151]},{"pos":[1160,1178],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"The following conditions may cause an exception:","pos":[1182,1230]},{"content":"The class being serialized does not have a public, parameterless constructor.","pos":[1240,1317]},{"pos":[1327,1391],"content":"The file exists and is read-only (<ph id=\"ph1\">&lt;xref:System.IO.IOException&gt;</ph>).","source":"The file exists and is read-only (<xref:System.IO.IOException>)."},{"pos":[1401,1462],"content":"The path is too long (<ph id=\"ph1\">&lt;xref:System.IO.PathTooLongException&gt;</ph>).","source":"The path is too long (<xref:System.IO.PathTooLongException>)."},{"pos":[1472,1520],"content":"The disk is full (<ph id=\"ph1\">&lt;xref:System.IO.IOException&gt;</ph>).","source":"The disk is full (<xref:System.IO.IOException>)."},{"pos":[1529,1552],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"This example creates a new file, if the file does not already exist.","pos":[1556,1624]},{"content":"If an application needs to create a file, that application needs <ph id=\"ph1\">`Create`</ph> access for the folder.","pos":[1625,1721],"source":" If an application needs to create a file, that application needs `Create` access for the folder."},{"content":"If the file already exists, the application needs only <ph id=\"ph1\">`Write`</ph> access, a lesser privilege.","pos":[1722,1812],"source":" If the file already exists, the application needs only `Write` access, a lesser privilege."},{"content":"Where possible, it is more secure to create the file during deployment, and only grant <ph id=\"ph1\">`Read`</ph> access to a single file, rather than <ph id=\"ph2\">`Create`</ph> access for a folder.","pos":[1813,1973],"source":" Where possible, it is more secure to create the file during deployment, and only grant `Read` access to a single file, rather than `Create` access for a folder."},{"pos":[1982,1990],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2026,2179],"content":"<bpt id=\"p1\">[</bpt>How to: Read Object Data from an XML File (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/serialization/how-to-read-object-data-from-an-xml-file.md)</ept>","source":"[How to: Read Object Data from an XML File (C#)](../../../../csharp/programming-guide/concepts/serialization/how-to-read-object-data-from-an-xml-file.md)"},{"pos":[2182,2272],"content":"<bpt id=\"p1\">[</bpt>Serialization (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/serialization/index.md)</ept>","source":"[Serialization (C#)](../../../../csharp/programming-guide/concepts/serialization/index.md)"}]}