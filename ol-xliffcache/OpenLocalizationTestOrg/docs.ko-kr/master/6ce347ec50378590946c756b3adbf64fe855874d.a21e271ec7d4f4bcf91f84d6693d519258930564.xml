{"content":"---\ntitle: \"Collections (C#) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 317d7dc3-8587-4873-8b3e-556f86497939\ncaps.latest.revision: 6\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Collections (C#)\nFor many applications, you want to create and manage groups of related objects. There are two ways to group objects: by creating arrays of objects, and by creating collections of objects.  \n  \n Arrays are most useful for creating and working with a fixed number of strongly-typed objects. For information about arrays, see [Arrays](../../../csharp/programming-guide/arrays/index.md).  \n  \n Collections provide a more flexible way to work with groups of objects. Unlike arrays, the group of objects you work with can grow and shrink dynamically as the needs of the application change. For some collections, you can assign a key to any object that you put into the collection so that you can quickly retrieve the object by using the key.  \n  \n A collection is a class, so you must declare an instance of the class before you can add elements to that collection.  \n  \n If your collection contains elements of only one data type, you can use one of the classes in the <xref:System.Collections.Generic?displayProperty=fullName> namespace. A generic collection enforces type safety so that no other data type can be added to it. When you retrieve an element from a generic collection, you do not have to determine its data type or convert it.  \n  \n> [!NOTE]\n>  For the examples in this topic, include [using](../../../csharp/language-reference/keywords/using-directive.md) directives for the `System.Collections.Generic` and `System.Linq` namespaces.  \n  \n **In this topic**  \n  \n-   [Using a Simple Collection](#BKMK_SimpleCollection)  \n  \n-   [Kinds of Collections](#BKMK_KindsOfCollections)  \n  \n    -   [System.Collections.Generic Classes](#BKMK_Generic)  \n  \n    -   [System.Collections.Concurrent Classes](#BKMK_Concurrent)  \n  \n    -   [System.Collections Classes](#BKMK_Collections)  \n  \n-   [Implementing a Collection of Key/Value Pairs](#BKMK_KeyValuePairs)  \n  \n-   [Using LINQ to Access a Collection](#BKMK_LINQ)  \n  \n-   [Sorting a Collection](#BKMK_Sorting)  \n  \n-   [Defining a Custom Collection](#BKMK_CustomCollection)  \n  \n-   [Iterators](#BKMK_Iterators)  \n  \n<a name=\"BKMK_SimpleCollection\"></a>\n## Using a Simple Collection  \n The examples in this section use the generic <xref:System.Collections.Generic.List%601> class, which enables you to work with a strongly typed list of objects.  \n  \n The following example creates a list of strings and then iterates through the strings by using a or [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement.  \n  \n```csharp  \n// Create a list of strings.  \nvar salmons = new List<string>();  \nsalmons.Add(\"chinook\");  \nsalmons.Add(\"coho\");  \nsalmons.Add(\"pink\");  \nsalmons.Add(\"sockeye\");  \n  \n// Iterate through the list.  \nforeach (var salmon in salmons)  \n{  \n    Console.Write(salmon + \" \");  \n}  \n// Output: chinook coho pink sockeye  \n```  \n  \n If the contents of a collection are known in advance, you can use a *collection initializer* to initialize the collection. For more information, see [Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md).  \n  \n The following example is the same as the previous example, except a collection initializer is used to add elements to the collection.  \n  \n```csharp  \n// Create a list of strings by using a  \n// collection initializer.  \nvar salmons = new List<string> { \"chinook\", \"coho\", \"pink\", \"sockeye\" };  \n  \n// Iterate through the list.  \nforeach (var salmon in salmons)  \n{  \n    Console.Write(salmon + \" \");  \n}  \n// Output: chinook coho pink sockeye  \n```  \n  \n You can use a [for](../../../csharp/language-reference/keywords/for.md) statement instead of a `foreach` statement to iterate through a collection. You accomplish this by accessing the collection elements by the index position. The index of the elements starts at 0 and ends at the element count minus 1.  \n  \n The following example iterates through the elements of a collection by using `for` instead of `foreach`.  \n  \n```csharp  \n// Create a list of strings by using a  \n// collection initializer.  \nvar salmons = new List<string> { \"chinook\", \"coho\", \"pink\", \"sockeye\" };  \n  \nfor (var index = 0; index < salmons.Count; index++)  \n{  \n    Console.Write(salmons[index] + \" \");  \n}  \n// Output: chinook coho pink sockeye  \n```  \n  \n The following example removes an element from the collection by specifying the object to remove.  \n  \n```csharp  \n// Create a list of strings by using a  \n// collection initializer.  \nvar salmons = new List<string> { \"chinook\", \"coho\", \"pink\", \"sockeye\" };  \n  \n// Remove an element from the list by specifying  \n// the object.  \nsalmons.Remove(\"coho\");  \n  \n// Iterate through the list.  \nforeach (var salmon in salmons)  \n{  \n    Console.Write(salmon + \" \");  \n}  \n// Output: chinook pink sockeye  \n```  \n  \n The following example removes elements from a generic list. Instead of a `foreach` statement, a [for](../../../csharp/language-reference/keywords/for.md) statement that iterates in descending order is used. This is because the <xref:System.Collections.Generic.List%601.RemoveAt%2A> method causes elements after a removed element to have a lower index value.  \n  \n```csharp  \nvar numbers = new List<int> { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };  \n  \n// Remove odd numbers.  \nfor (var index = numbers.Count - 1; index >= 0; index--)  \n{  \n    if (numbers[index] % 2 == 1)  \n    {  \n        // Remove the element by specifying  \n        // the zero-based index in the list.  \n        numbers.RemoveAt(index);  \n    }  \n}  \n  \n// Iterate through the list.  \n// A lambda expression is placed in the ForEach method  \n// of the List(T) object.  \nnumbers.ForEach(  \n    number => Console.Write(number + \" \"));  \n// Output: 0 2 4 6 8  \n```  \n  \n For the type of elements in the <xref:System.Collections.Generic.List%601>, you can also define your own class. In the following example, the `Galaxy` class that is used by the <xref:System.Collections.Generic.List%601> is defined in the code.  \n  \n```csharp  \nprivate static void IterateThroughList()  \n{  \n    var theGalaxies = new List<Galaxy>  \n        {  \n            new Galaxy() { Name=\"Tadpole\", MegaLightYears=400},  \n            new Galaxy() { Name=\"Pinwheel\", MegaLightYears=25},  \n            new Galaxy() { Name=\"Milky Way\", MegaLightYears=0},  \n            new Galaxy() { Name=\"Andromeda\", MegaLightYears=3}  \n        };  \n  \n    foreach (Galaxy theGalaxy in theGalaxies)  \n    {  \n        Console.WriteLine(theGalaxy.Name + \"  \" + theGalaxy.MegaLightYears);  \n    }  \n  \n    // Output:  \n    //  Tadpole  400  \n    //  Pinwheel  25  \n    //  Milky Way  0  \n    //  Andromeda  3  \n}  \n  \npublic class Galaxy  \n{  \n    public string Name { get; set; }  \n    public int MegaLightYears { get; set; }  \n}  \n```  \n\n<a name=\"BKMK_KindsOfCollections\"></a>\n## Kinds of Collections \n Many common collections are provided by the .NET Framework. Each type of collection is designed for a specific purpose.  \n  \n Some of the common collection classes are described in this section:  \n  \n-   @System.Collections.Generic classes  \n  \n-   @System.Collections.Concurrent classes  \n  \n-   @System.Collections classes  \n  \n<a name=\"BKMK_Generic\"></a>\n### System.Collections.Generic Classes  \n You can create a generic collection by using one of the classes in the <xref:System.Collections.Generic> namespace. A generic collection is useful when every item in the collection has the same data type. A generic collection enforces strong typing by allowing only the desired data type to be added.  \n  \n The following table lists some of the frequently used classes of the <xref:System.Collections.Generic?displayProperty=fullName> namespace:  \n\n|Class|Description| \n|---|---|  \n|<xref:System.Collections.Generic.Dictionary%602>|Represents a collection of key/value pairs that are organized based on the key.|  \n|<xref:System.Collections.Generic.List%601>|Represents a list of objects that can be accessed by index. Provides methods to search, sort, and modify lists.|  \n|<xref:System.Collections.Generic.Queue%601>|Represents a first in, first out (FIFO) collection of objects.|  \n|<xref:System.Collections.Generic.SortedList%602>|Represents a collection of key/value pairs that are sorted by key based on the associated <xref:System.Collections.Generic.IComparer%601> implementation.|  \n|<xref:System.Collections.Generic.Stack%601>|Represents a last in, first out (LIFO) collection of objects.|  \n  \n For additional information, see [Commonly Used Collection Types](../../../standard/collections/commonly-used-collection-types.md), [Selecting a Collection Class](../../../standard/collections/selecting-a-collection-class.md), and @System.Collections.Generic.  \n  \n<a name=\"BKMK_Concurrent\"></a>\n### System.Collections.Concurrent Classes  \n In the .NET Framework 4 or newer, the collections in the <xref:System.Collections.Concurrent> namespace provide efficient thread-safe operations for accessing collection items from multiple threads.  \n  \n The classes in the <xref:System.Collections.Concurrent> namespace should be used instead of the corresponding types in the <xref:System.Collections.Generic?displayProperty=fullName> and <xref:System.Collections?displayProperty=fullName> namespaces whenever multiple threads are accessing the collection concurrently. For more information, see [Thread-Safe Collections](../../../standard/collections/thread-safe/index.md) and <xref:System.Collections.Concurrent>.  \n  \n Some classes included in the <xref:System.Collections.Concurrent> namespace are <xref:System.Collections.Concurrent.BlockingCollection%601>, <xref:System.Collections.Concurrent.ConcurrentDictionary%602>, <xref:System.Collections.Concurrent.ConcurrentQueue%601>, and <xref:System.Collections.Concurrent.ConcurrentStack%601>.  \n  \n<a name=\"BKMK_Collections\"></a>\n### System.Collections Classes  \n The classes in the <xref:System.Collections?displayProperty=fullName> namespace do not store elements as specifically typed objects, but as objects of type `Object`.  \n  \n Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace or the <xref:System.Collections.Concurrent> namespace instead of the legacy types in the `System.Collections` namespace.  \n  \n The following table lists some of the frequently used classes in the `System.Collections` namespace:  \n  \n|Class|Description|  \n|---|---|  \n|<xref:System.Collections.ArrayList>|Represents an array of objects whose size is dynamically increased as required.|  \n|<xref:System.Collections.Hashtable>|Represents a collection of key/value pairs that are organized based on the hash code of the key.|  \n|<xref:System.Collections.Queue>|Represents a first in, first out (FIFO) collection of objects.|  \n|<xref:System.Collections.Stack>|Represents a last in, first out (LIFO) collection of objects.|  \n  \n The <xref:System.Collections.Specialized> namespace provides specialized and strongly typed collection classes, such as string-only collections and linked-list and hybrid dictionaries.  \n\n<a name=\"BKMK_KeyValuePairs\"></a>\n## Implementing a Collection of Key/Value Pairs  \n The <xref:System.Collections.Generic.Dictionary%602> generic collection enables you to access to elements in a collection by using the key of each element. Each addition to the dictionary consists of a value and its associated key. Retrieving a value by using its key is fast because the `Dictionary` class is implemented as a hash table.  \n  \n The following example creates a `Dictionary` collection and iterates through the dictionary by using a `foreach` statement.  \n  \n```csharp  \nprivate static void IterateThruDictionary()  \n{  \n    Dictionary<string, Element> elements = BuildDictionary();  \n  \n    foreach (KeyValuePair<string, Element> kvp in elements)  \n    {  \n        Element theElement = kvp.Value;  \n  \n        Console.WriteLine(\"key: \" + kvp.Key);  \n        Console.WriteLine(\"values: \" + theElement.Symbol + \" \" +  \n            theElement.Name + \" \" + theElement.AtomicNumber);  \n    }  \n}  \n  \nprivate static Dictionary<string, Element> BuildDictionary()  \n{  \n    var elements = new Dictionary<string, Element>();  \n  \n    AddToDictionary(elements, \"K\", \"Potassium\", 19);  \n    AddToDictionary(elements, \"Ca\", \"Calcium\", 20);  \n    AddToDictionary(elements, \"Sc\", \"Scandium\", 21);  \n    AddToDictionary(elements, \"Ti\", \"Titanium\", 22);  \n  \n    return elements;  \n}  \n  \nprivate static void AddToDictionary(Dictionary<string, Element> elements,  \n    string symbol, string name, int atomicNumber)  \n{  \n    Element theElement = new Element();  \n  \n    theElement.Symbol = symbol;  \n    theElement.Name = name;  \n    theElement.AtomicNumber = atomicNumber;  \n  \n    elements.Add(key: theElement.Symbol, value: theElement);  \n}  \n  \npublic class Element  \n{  \n    public string Symbol { get; set; }  \n    public string Name { get; set; }  \n    public int AtomicNumber { get; set; }  \n}  \n```  \n  \n To instead use a collection initializer to build the `Dictionary` collection, you can replace the `BuildDictionary` and `AddToDictionary` methods with the following method.  \n  \n```csharp  \nprivate static Dictionary<string, Element> BuildDictionary2()  \n{  \n    return new Dictionary<string, Element>  \n    {  \n        {\"K\",  \n            new Element() { Symbol=\"K\", Name=\"Potassium\", AtomicNumber=19}},  \n        {\"Ca\",  \n            new Element() { Symbol=\"Ca\", Name=\"Calcium\", AtomicNumber=20}},  \n        {\"Sc\",  \n            new Element() { Symbol=\"Sc\", Name=\"Scandium\", AtomicNumber=21}},  \n        {\"Ti\",  \n            new Element() { Symbol=\"Ti\", Name=\"Titanium\", AtomicNumber=22}}  \n    };  \n}  \n```  \n  \n The following example uses the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property of `Dictionary` to quickly find an item by key. The `Item` property enables you to access an item in the `elements` collection by using the `elements[symbol]` in C#.  \n  \n```csharp  \nprivate static void FindInDictionary(string symbol)  \n{  \n    Dictionary<string, Element> elements = BuildDictionary();  \n  \n    if (elements.ContainsKey(symbol) == false)  \n    {  \n        Console.WriteLine(symbol + \" not found\");  \n    }  \n    else  \n    {  \n        Element theElement = elements[symbol];  \n        Console.WriteLine(\"found: \" + theElement.Name);  \n    }  \n}  \n```  \n  \n The following example instead uses the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method quickly find an item by key.  \n  \n```csharp  \nprivate static void FindInDictionary2(string symbol)  \n{  \n    Dictionary<string, Element> elements = BuildDictionary();  \n  \n    Element theElement = null;  \n    if (elements.TryGetValue(symbol, out theElement) == false)  \n        Console.WriteLine(symbol + \" not found\");  \n    else  \n        Console.WriteLine(\"found: \" + theElement.Name);  \n}  \n```  \n\n<a name=\"BKMK_LINQ\"></a>\n## Using LINQ to Access a Collection  \n LINQ (Language-Integrated Query) can be used to access collections. LINQ queries provide filtering, ordering, and grouping capabilities. For more information, see  [Getting Started with LINQ in C#](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md).  \n  \n The following example runs a LINQ query against a generic `List`. The LINQ query returns a different collection that contains the results.  \n  \n```csharp  \nprivate static void ShowLINQ()  \n{  \n    List<Element> elements = BuildList();  \n  \n    // LINQ Query.  \n    var subset = from theElement in elements  \n                 where theElement.AtomicNumber < 22  \n                 orderby theElement.Name  \n                 select theElement;  \n  \n    foreach (Element theElement in subset)  \n    {  \n        Console.WriteLine(theElement.Name + \" \" + theElement.AtomicNumber);  \n    }  \n  \n    // Output:  \n    //  Calcium 20  \n    //  Potassium 19  \n    //  Scandium 21  \n}  \n  \nprivate static List<Element> BuildList()  \n{  \n    return new List<Element>  \n    {  \n        { new Element() { Symbol=\"K\", Name=\"Potassium\", AtomicNumber=19}},  \n        { new Element() { Symbol=\"Ca\", Name=\"Calcium\", AtomicNumber=20}},  \n        { new Element() { Symbol=\"Sc\", Name=\"Scandium\", AtomicNumber=21}},  \n        { new Element() { Symbol=\"Ti\", Name=\"Titanium\", AtomicNumber=22}}  \n    };  \n}  \n  \npublic class Element  \n{  \n    public string Symbol { get; set; }  \n    public string Name { get; set; }  \n    public int AtomicNumber { get; set; }  \n}  \n```  \n\n<a name=\"BKMK_Sorting\"></a>\n## Sorting a Collection  \n The following example illustrates a procedure for sorting a collection. The example sorts instances of the `Car` class that are stored in a <xref:System.Collections.Generic.List%601>. The `Car` class implements the <xref:System.IComparable%601> interface, which requires that the <xref:System.IComparable%601.CompareTo%2A> method be implemented.  \n  \n Each call to the <xref:System.IComparable%601.CompareTo%2A> method makes a single comparison that is used for sorting. User-written code in the `CompareTo` method returns a value for each comparison of the current object with another object. The value returned is less than zero if the current object is less than the other object, greater than zero if the current object is greater than the other object, and zero if they are equal. This enables you to define in code the criteria for greater than, less than, and equal.  \n  \n In the `ListCars` method, the `cars.Sort()` statement sorts the list. This call to the <xref:System.Collections.Generic.List%601.Sort%2A> method of the <xref:System.Collections.Generic.List%601> causes the `CompareTo` method to be called automatically for the `Car` objects in the `List`.  \n  \n```csharp  \nprivate static void ListCars()  \n{  \n    var cars = new List<Car>  \n    {  \n        { new Car() { Name = \"car1\", Color = \"blue\", Speed = 20}},  \n        { new Car() { Name = \"car2\", Color = \"red\", Speed = 50}},  \n        { new Car() { Name = \"car3\", Color = \"green\", Speed = 10}},  \n        { new Car() { Name = \"car4\", Color = \"blue\", Speed = 50}},  \n        { new Car() { Name = \"car5\", Color = \"blue\", Speed = 30}},  \n        { new Car() { Name = \"car6\", Color = \"red\", Speed = 60}},  \n        { new Car() { Name = \"car7\", Color = \"green\", Speed = 50}}  \n    };  \n  \n    // Sort the cars by color alphabetically, and then by speed  \n    // in descending order.  \n    cars.Sort();  \n  \n    // View all of the cars.  \n    foreach (Car thisCar in cars)  \n    {  \n        Console.Write(thisCar.Color.PadRight(5) + \" \");  \n        Console.Write(thisCar.Speed.ToString() + \" \");  \n        Console.Write(thisCar.Name);  \n        Console.WriteLine();  \n    }  \n  \n    // Output:  \n    //  blue  50 car4  \n    //  blue  30 car5  \n    //  blue  20 car1  \n    //  green 50 car7  \n    //  green 10 car3  \n    //  red   60 car6  \n    //  red   50 car2  \n}  \n  \npublic class Car : IComparable<Car>  \n{  \n    public string Name { get; set; }  \n    public int Speed { get; set; }  \n    public string Color { get; set; }  \n  \n    public int CompareTo(Car other)  \n    {  \n        // A call to this method makes a single comparison that is  \n        // used for sorting.  \n  \n        // Determine the relative order of the objects being compared.  \n        // Sort by color alphabetically, and then by speed in  \n        // descending order.  \n  \n        // Compare the colors.  \n        int compare;  \n        compare = String.Compare(this.Color, other.Color, true);  \n  \n        // If the colors are the same, compare the speeds.  \n        if (compare == 0)  \n        {  \n            compare = this.Speed.CompareTo(other.Speed);  \n  \n            // Use descending order for speed.  \n            compare = -compare;  \n        }  \n  \n        return compare;  \n    }  \n}  \n```  \n  \n<a name=\"BKMK_CustomCollection\"></a>\n## Defining a Custom Collection  \n You can define a collection by implementing the <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Collections.IEnumerable> interface. For additional information, see [How to: Access a Collection Class with foreach](../../../csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md).  \n  \n Although you can define a custom collection, it is usually better to instead use the collections that are included in the .NET Framework, which are described in [Kinds of Collections](#BKMK_KindsOfCollections) earlier in this topic.  \n  \n The following example defines a custom collection class named `AllColors`. This class implements the <xref:System.Collections.IEnumerable> interface, which requires that the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method be implemented.  \n  \n The `GetEnumerator` method returns an instance of the `ColorEnumerator` class. `ColorEnumerator` implements the <xref:System.Collections.IEnumerator> interface, which requires that the <xref:System.Collections.IEnumerator.Current%2A> property, <xref:System.Collections.IEnumerator.MoveNext%2A> method, and <xref:System.Collections.IEnumerator.Reset%2A> method be implemented.  \n  \n```csharp  \nprivate static void ListColors()  \n{  \n    var colors = new AllColors();  \n  \n    foreach (Color theColor in colors)  \n    {  \n        Console.Write(theColor.Name + \" \");  \n    }  \n    Console.WriteLine();  \n    // Output: red blue green  \n}  \n  \n// Collection class.  \npublic class AllColors : System.Collections.IEnumerable  \n{  \n    Color[] _colors =  \n    {  \n        new Color() { Name = \"red\" },  \n        new Color() { Name = \"blue\" },  \n        new Color() { Name = \"green\" }  \n    };  \n  \n    public System.Collections.IEnumerator GetEnumerator()  \n    {  \n        return new ColorEnumerator(_colors);  \n  \n        // Instead of creating a custom enumerator, you could  \n        // use the GetEnumerator of the array.  \n        //return _colors.GetEnumerator();  \n    }  \n  \n    // Custom enumerator.  \n    private class ColorEnumerator : System.Collections.IEnumerator  \n    {  \n        private Color[] _colors;  \n        private int _position = -1;  \n  \n        public ColorEnumerator(Color[] colors)  \n        {  \n            _colors = colors;  \n        }  \n  \n        object System.Collections.IEnumerator.Current  \n        {  \n            get  \n            {  \n                return _colors[_position];  \n            }  \n        }  \n  \n        bool System.Collections.IEnumerator.MoveNext()  \n        {  \n            _position++;  \n            return (_position < _colors.Length);  \n        }  \n  \n        void System.Collections.IEnumerator.Reset()  \n        {  \n            _position = -1;  \n        }  \n    }  \n}  \n  \n// Element class.  \npublic class Color  \n{  \n    public string Name { get; set; }  \n}  \n```  \n\n<a name=\"BKMK_Iterators\"></a> \n##  Iterators  \n An *iterator* is used to perform a custom iteration over a collection. An iterator can be a method or a `get` accessor. An iterator uses a [yield return](../../../csharp/language-reference/keywords/yield.md) statement to return each element of the collection one at a time.  \n  \n You call an iterator by using a [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement. Each iteration of the `foreach` loop calls the iterator. When a `yield return` statement is reached in the iterator, an expression is returned, and the current location in code is retained. Execution is restarted from that location the next time that the iterator is called.  \n  \n For more information, see [Iterators (C#)](../../../csharp/programming-guide/concepts/iterators.md).  \n  \n The following example uses an iterator method. The iterator method has a `yield return` statement that is inside a [for](../../../csharp/language-reference/keywords/for.md) loop. In the `ListEvenNumbers` method, each iteration of the `foreach` statement body creates a call to the iterator method, which proceeds to the next `yield return` statement.  \n  \n```csharp  \nprivate static void ListEvenNumbers()  \n{  \n    foreach (int number in EvenSequence(5, 18))  \n    {  \n        Console.Write(number.ToString() + \" \");  \n    }  \n    Console.WriteLine();  \n    // Output: 6 8 10 12 14 16 18  \n}  \n  \nprivate static IEnumerable<int> EvenSequence(  \n    int firstNumber, int lastNumber)  \n{  \n    // Yield even numbers in the range.  \n    for (var number = firstNumber; number <= lastNumber; number++)  \n    {  \n        if (number % 2 == 0)  \n        {  \n            yield return number;  \n        }  \n    }  \n}  \n```  \n  \n## See Also  \n [Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)   \n [Programming Concepts (C#)](../../../csharp/programming-guide/concepts/index.md)   \n [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)   \n [LINQ to Objects (C#)](../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)   \n [Parallel LINQ (PLINQ)](../../../standard/parallel-programming/parallel-linq-plinq.md)   \n [Collections and Data Structures](../../../standard/collections/index.md)   \n [Creating and Manipulating Collections](http://msdn.microsoft.com/en-us/2065398e-eb1a-4821-9188-75f16e42e069)   \n [Selecting a Collection Class](../../../standard/collections/selecting-a-collection-class.md)   \n [Comparisons and Sorts Within Collections](../../../standard/collections/comparisons-and-sorts-within-collections.md)   \n [When to Use Generic Collections](../../../standard/collections/when-to-use-generic-collections.md)   \n [How to: Access a Collection Class with foreach](../../../csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md)\n","nodes":[{"pos":[12,45],"content":"Collections (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Collections (C#) | Microsoft Docs","pos":[0,33]}]},{"pos":[376,392],"content":"Collections (C#)","linkify":"Collections (C#)","nodes":[{"content":"Collections (C#)","pos":[0,16]}]},{"content":"For many applications, you want to create and manage groups of related objects.","pos":[393,472]},{"content":"There are two ways to group objects: by creating arrays of objects, and by creating collections of objects.","pos":[473,580]},{"content":"Arrays are most useful for creating and working with a fixed number of strongly-typed objects.","pos":[587,681]},{"content":"For information about arrays, see <bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/index.md)</ept>.","pos":[682,776],"source":" For information about arrays, see [Arrays](../../../csharp/programming-guide/arrays/index.md)."},{"content":"Collections provide a more flexible way to work with groups of objects.","pos":[783,854]},{"content":"Unlike arrays, the group of objects you work with can grow and shrink dynamically as the needs of the application change.","pos":[855,976]},{"content":"For some collections, you can assign a key to any object that you put into the collection so that you can quickly retrieve the object by using the key.","pos":[977,1128]},{"content":"A collection is a class, so you must declare an instance of the class before you can add elements to that collection.","pos":[1135,1252]},{"content":"If your collection contains elements of only one data type, you can use one of the classes in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace.","pos":[1259,1426],"source":"If your collection contains elements of only one data type, you can use one of the classes in the <xref:System.Collections.Generic?displayProperty=fullName> namespace."},{"content":"A generic collection enforces type safety so that no other data type can be added to it.","pos":[1427,1515]},{"content":"When you retrieve an element from a generic collection, you do not have to determine its data type or convert it.","pos":[1516,1629]},{"pos":[1637,1837],"content":"[!NOTE]\n For the examples in this topic, include [using](../../../csharp/language-reference/keywords/using-directive.md) directives for the `System.Collections.Generic` and `System.Linq` namespaces.","leadings":["","> "],"nodes":[{"content":"For the examples in this topic, include <bpt id=\"p1\">[</bpt>using<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-directive.md)</ept> directives for the <ph id=\"ph1\">`System.Collections.Generic`</ph> and <ph id=\"ph2\">`System.Linq`</ph> namespaces.","pos":[9,198],"source":" For the examples in this topic, include [using](../../../csharp/language-reference/keywords/using-directive.md) directives for the `System.Collections.Generic` and `System.Linq` namespaces."}]},{"pos":[1844,1861],"content":"<bpt id=\"p1\">**</bpt>In this topic<ept id=\"p1\">**</ept>","source":"**In this topic**"},{"pos":[1871,1922],"content":"<bpt id=\"p1\">[</bpt>Using a Simple Collection<ept id=\"p1\">](#BKMK_SimpleCollection)</ept>","source":"[Using a Simple Collection](#BKMK_SimpleCollection)"},{"pos":[1932,1980],"content":"<bpt id=\"p1\">[</bpt>Kinds of Collections<ept id=\"p1\">](#BKMK_KindsOfCollections)</ept>","source":"[Kinds of Collections](#BKMK_KindsOfCollections)"},{"pos":[1994,2045],"content":"<bpt id=\"p1\">[</bpt>System.Collections.Generic Classes<ept id=\"p1\">](#BKMK_Generic)</ept>","source":"[System.Collections.Generic Classes](#BKMK_Generic)"},{"pos":[2059,2116],"content":"<bpt id=\"p1\">[</bpt>System.Collections.Concurrent Classes<ept id=\"p1\">](#BKMK_Concurrent)</ept>","source":"[System.Collections.Concurrent Classes](#BKMK_Concurrent)"},{"pos":[2130,2177],"content":"<bpt id=\"p1\">[</bpt>System.Collections Classes<ept id=\"p1\">](#BKMK_Collections)</ept>","source":"[System.Collections Classes](#BKMK_Collections)"},{"pos":[2187,2254],"content":"<bpt id=\"p1\">[</bpt>Implementing a Collection of Key/Value Pairs<ept id=\"p1\">](#BKMK_KeyValuePairs)</ept>","source":"[Implementing a Collection of Key/Value Pairs](#BKMK_KeyValuePairs)"},{"pos":[2264,2311],"content":"<bpt id=\"p1\">[</bpt>Using LINQ to Access a Collection<ept id=\"p1\">](#BKMK_LINQ)</ept>","source":"[Using LINQ to Access a Collection](#BKMK_LINQ)"},{"pos":[2321,2358],"content":"<bpt id=\"p1\">[</bpt>Sorting a Collection<ept id=\"p1\">](#BKMK_Sorting)</ept>","source":"[Sorting a Collection](#BKMK_Sorting)"},{"pos":[2368,2422],"content":"<bpt id=\"p1\">[</bpt>Defining a Custom Collection<ept id=\"p1\">](#BKMK_CustomCollection)</ept>","source":"[Defining a Custom Collection](#BKMK_CustomCollection)"},{"pos":[2432,2460],"content":"<bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](#BKMK_Iterators)</ept>","source":"[Iterators](#BKMK_Iterators)"},{"pos":[2506,2531],"content":"Using a Simple Collection","linkify":"Using a Simple Collection","nodes":[{"content":"Using a Simple Collection","pos":[0,25]}]},{"content":"The examples in this section use the generic <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, which enables you to work with a strongly typed list of objects.","pos":[2535,2694],"source":"The examples in this section use the generic <xref:System.Collections.Generic.List%601> class, which enables you to work with a strongly typed list of objects."},{"pos":[2701,2880],"content":"The following example creates a list of strings and then iterates through the strings by using a or <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> statement.","source":"The following example creates a list of strings and then iterates through the strings by using a or [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement."},{"content":"If the contents of a collection are known in advance, you can use a <bpt id=\"p1\">*</bpt>collection initializer<ept id=\"p1\">*</ept> to initialize the collection.","pos":[3223,3345],"source":"If the contents of a collection are known in advance, you can use a *collection initializer* to initialize the collection."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Object and Collection Initializers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>.","pos":[3346,3502],"source":" For more information, see [Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)."},{"content":"The following example is the same as the previous example, except a collection initializer is used to add elements to the collection.","pos":[3509,3642]},{"content":"You can use a <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../csharp/language-reference/keywords/for.md)</ept> statement instead of a <ph id=\"ph1\">`foreach`</ph> statement to iterate through a collection.","pos":[3965,4112],"source":"You can use a [for](../../../csharp/language-reference/keywords/for.md) statement instead of a `foreach` statement to iterate through a collection."},{"content":"You accomplish this by accessing the collection elements by the index position.","pos":[4113,4192]},{"content":"The index of the elements starts at 0 and ends at the element count minus 1.","pos":[4193,4269]},{"pos":[4276,4380],"content":"The following example iterates through the elements of a collection by using <ph id=\"ph1\">`for`</ph> instead of <ph id=\"ph2\">`foreach`</ph>.","source":"The following example iterates through the elements of a collection by using `for` instead of `foreach`."},{"content":"The following example removes an element from the collection by specifying the object to remove.","pos":[4700,4796]},{"content":"The following example removes elements from a generic list.","pos":[5211,5270]},{"content":"Instead of a <ph id=\"ph1\">`foreach`</ph> statement, a <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../csharp/language-reference/keywords/for.md)</ept> statement that iterates in descending order is used.","pos":[5271,5417],"source":" Instead of a `foreach` statement, a [for](../../../csharp/language-reference/keywords/for.md) statement that iterates in descending order is used."},{"content":"This is because the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph> method causes elements after a removed element to have a lower index value.","pos":[5418,5568],"source":" This is because the <xref:System.Collections.Generic.List%601.RemoveAt%2A> method causes elements after a removed element to have a lower index value."},{"content":"For the type of elements in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, you can also define your own class.","pos":[6141,6252],"source":"For the type of elements in the <xref:System.Collections.Generic.List%601>, you can also define your own class."},{"content":"In the following example, the <ph id=\"ph1\">`Galaxy`</ph> class that is used by the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is defined in the code.","pos":[6253,6384],"source":" In the following example, the `Galaxy` class that is used by the <xref:System.Collections.Generic.List%601> is defined in the code."},{"pos":[7207,7227],"content":"Kinds of Collections","linkify":"Kinds of Collections","nodes":[{"content":"Kinds of Collections","pos":[0,20]}]},{"content":"Many common collections are provided by the .NET Framework.","pos":[7230,7289]},{"content":"Each type of collection is designed for a specific purpose.","pos":[7290,7349]},{"content":"Some of the common collection classes are described in this section:","pos":[7356,7424]},{"content":"<ph id=\"ph1\">@System.Collections.Generic</ph> classes","pos":[7434,7469],"source":"@System.Collections.Generic classes"},{"content":"<ph id=\"ph1\">@System.Collections.Concurrent</ph> classes","pos":[7479,7517],"source":"@System.Collections.Concurrent classes"},{"content":"<ph id=\"ph1\">@System.Collections</ph> classes","pos":[7527,7554],"source":"@System.Collections classes"},{"pos":[7592,7626],"content":"System.Collections.Generic Classes","linkify":"System.Collections.Generic Classes","nodes":[{"content":"System.Collections.Generic Classes","pos":[0,34]}]},{"content":"You can create a generic collection by using one of the classes in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph> namespace.","pos":[7630,7745],"source":"You can create a generic collection by using one of the classes in the <xref:System.Collections.Generic> namespace."},{"content":"A generic collection is useful when every item in the collection has the same data type.","pos":[7746,7834]},{"content":"A generic collection enforces strong typing by allowing only the desired data type to be added.","pos":[7835,7930]},{"content":"The following table lists some of the frequently used classes of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace:","pos":[7937,8075],"source":"The following table lists some of the frequently used classes of the <xref:System.Collections.Generic?displayProperty=fullName> namespace:"},{"content":"Class","pos":[8080,8085]},{"content":"Description","pos":[8086,8097]},{"content":"Represents a collection of key/value pairs that are organized based on the key.","pos":[8162,8241]},{"content":"Represents a list of objects that can be accessed by index.","pos":[8289,8348]},{"content":"Provides methods to search, sort, and modify lists.","pos":[8349,8400]},{"content":"Represents a first in, first out (FIFO) collection of objects.","pos":[8449,8511]},{"content":"Represents a collection of key/value pairs that are sorted by key based on the associated <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.","pos":[8565,8718],"source":"Represents a collection of key/value pairs that are sorted by key based on the associated <xref:System.Collections.Generic.IComparer%601> implementation."},{"content":"Represents a last in, first out (LIFO) collection of objects.","pos":[8767,8828]},{"pos":[8836,9094],"content":"For additional information, see <bpt id=\"p1\">[</bpt>Commonly Used Collection Types<ept id=\"p1\">](../../../standard/collections/commonly-used-collection-types.md)</ept>, <bpt id=\"p2\">[</bpt>Selecting a Collection Class<ept id=\"p2\">](../../../standard/collections/selecting-a-collection-class.md)</ept>, and <ph id=\"ph1\">@System.Collections.Generic</ph>.","source":"For additional information, see [Commonly Used Collection Types](../../../standard/collections/commonly-used-collection-types.md), [Selecting a Collection Class](../../../standard/collections/selecting-a-collection-class.md), and @System.Collections.Generic."},{"pos":[9135,9172],"content":"System.Collections.Concurrent Classes","linkify":"System.Collections.Concurrent Classes","nodes":[{"content":"System.Collections.Concurrent Classes","pos":[0,37]}]},{"content":"In the .NET Framework 4 or newer, the collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace provide efficient thread-safe operations for accessing collection items from multiple threads.","pos":[9176,9374],"source":"In the .NET Framework 4 or newer, the collections in the <xref:System.Collections.Concurrent> namespace provide efficient thread-safe operations for accessing collection items from multiple threads."},{"content":"The classes in the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace should be used instead of the corresponding types in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Collections?displayProperty=fullName&gt;</ph> namespaces whenever multiple threads are accessing the collection concurrently.","pos":[9381,9697],"source":"The classes in the <xref:System.Collections.Concurrent> namespace should be used instead of the corresponding types in the <xref:System.Collections.Generic?displayProperty=fullName> and <xref:System.Collections?displayProperty=fullName> namespaces whenever multiple threads are accessing the collection concurrently."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Thread-Safe Collections<ept id=\"p1\">](../../../standard/collections/thread-safe/index.md)</ept> and <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph>.","pos":[9698,9843],"source":" For more information, see [Thread-Safe Collections](../../../standard/collections/thread-safe/index.md) and <xref:System.Collections.Concurrent>."},{"content":"Some classes included in the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace are <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.","pos":[9850,10173],"source":"Some classes included in the <xref:System.Collections.Concurrent> namespace are <xref:System.Collections.Concurrent.BlockingCollection%601>, <xref:System.Collections.Concurrent.ConcurrentDictionary%602>, <xref:System.Collections.Concurrent.ConcurrentQueue%601>, and <xref:System.Collections.Concurrent.ConcurrentStack%601>."},{"pos":[10215,10241],"content":"System.Collections Classes","linkify":"System.Collections Classes","nodes":[{"content":"System.Collections Classes","pos":[0,26]}]},{"pos":[10245,10410],"content":"The classes in the <ph id=\"ph1\">&lt;xref:System.Collections?displayProperty=fullName&gt;</ph> namespace do not store elements as specifically typed objects, but as objects of type <ph id=\"ph2\">`Object`</ph>.","source":"The classes in the <xref:System.Collections?displayProperty=fullName> namespace do not store elements as specifically typed objects, but as objects of type `Object`."},{"pos":[10417,10671],"content":"Whenever possible, you should use the generic collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace or the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of the legacy types in the <ph id=\"ph3\">`System.Collections`</ph> namespace.","source":"Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace or the <xref:System.Collections.Concurrent> namespace instead of the legacy types in the `System.Collections` namespace."},{"pos":[10678,10778],"content":"The following table lists some of the frequently used classes in the <ph id=\"ph1\">`System.Collections`</ph> namespace:","source":"The following table lists some of the frequently used classes in the `System.Collections` namespace:"},{"content":"Class","pos":[10785,10790]},{"content":"Description","pos":[10791,10802]},{"content":"Represents an array of objects whose size is dynamically increased as required.","pos":[10855,10934]},{"content":"Represents a collection of key/value pairs that are organized based on the hash code of the key.","pos":[10975,11071]},{"content":"Represents a first in, first out (FIFO) collection of objects.","pos":[11108,11170]},{"content":"Represents a last in, first out (LIFO) collection of objects.","pos":[11207,11268]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized&gt;</ph> namespace provides specialized and strongly typed collection classes, such as string-only collections and linked-list and hybrid dictionaries.","pos":[11276,11460],"source":"The <xref:System.Collections.Specialized> namespace provides specialized and strongly typed collection classes, such as string-only collections and linked-list and hybrid dictionaries."},{"pos":[11501,11545],"content":"Implementing a Collection of Key/Value Pairs","linkify":"Implementing a Collection of Key/Value Pairs","nodes":[{"content":"Implementing a Collection of Key/Value Pairs","pos":[0,44]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> generic collection enables you to access to elements in a collection by using the key of each element.","pos":[11549,11704],"source":"The <xref:System.Collections.Generic.Dictionary%602> generic collection enables you to access to elements in a collection by using the key of each element."},{"content":"Each addition to the dictionary consists of a value and its associated key.","pos":[11705,11780]},{"content":"Retrieving a value by using its key is fast because the <ph id=\"ph1\">`Dictionary`</ph> class is implemented as a hash table.","pos":[11781,11887],"source":" Retrieving a value by using its key is fast because the `Dictionary` class is implemented as a hash table."},{"pos":[11894,12017],"content":"The following example creates a <ph id=\"ph1\">`Dictionary`</ph> collection and iterates through the dictionary by using a <ph id=\"ph2\">`foreach`</ph> statement.","source":"The following example creates a `Dictionary` collection and iterates through the dictionary by using a `foreach` statement."},{"pos":[13364,13536],"content":"To instead use a collection initializer to build the <ph id=\"ph1\">`Dictionary`</ph> collection, you can replace the <ph id=\"ph2\">`BuildDictionary`</ph> and <ph id=\"ph3\">`AddToDictionary`</ph> methods with the following method.","source":"To instead use a collection initializer to build the `Dictionary` collection, you can replace the `BuildDictionary` and `AddToDictionary` methods with the following method."},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property of <ph id=\"ph3\">`Dictionary`</ph> to quickly find an item by key.","pos":[14079,14302],"source":"The following example uses the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property of `Dictionary` to quickly find an item by key."},{"content":"The <ph id=\"ph1\">`Item`</ph> property enables you to access an item in the <ph id=\"ph2\">`elements`</ph> collection by using the <ph id=\"ph3\">`elements[symbol]`</ph> in C#.","pos":[14303,14420],"source":" The `Item` property enables you to access an item in the `elements` collection by using the `elements[symbol]` in C#."},{"content":"The following example instead uses the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph> method quickly find an item by key.","pos":[14828,14966],"source":"The following example instead uses the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method quickly find an item by key."},{"pos":[15368,15401],"content":"Using LINQ to Access a Collection","linkify":"Using LINQ to Access a Collection","nodes":[{"content":"Using LINQ to Access a Collection","pos":[0,33]}]},{"content":"LINQ (Language-Integrated Query) can be used to access collections.","pos":[15405,15472]},{"content":"LINQ queries provide filtering, ordering, and grouping capabilities.","pos":[15473,15541]},{"content":"For more information, see  <bpt id=\"p1\">[</bpt>Getting Started with LINQ in C#<ept id=\"p1\">](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept>.","pos":[15542,15681],"source":" For more information, see  [Getting Started with LINQ in C#](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)."},{"content":"The following example runs a LINQ query against a generic <ph id=\"ph1\">`List`</ph>.","pos":[15688,15753],"source":"The following example runs a LINQ query against a generic `List`."},{"content":"The LINQ query returns a different collection that contains the results.","pos":[15754,15826]},{"pos":[16967,16987],"content":"Sorting a Collection","linkify":"Sorting a Collection","nodes":[{"content":"Sorting a Collection","pos":[0,20]}]},{"content":"The following example illustrates a procedure for sorting a collection.","pos":[16991,17062]},{"content":"The example sorts instances of the <ph id=\"ph1\">`Car`</ph> class that are stored in a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[17063,17174],"source":" The example sorts instances of the `Car` class that are stored in a <xref:System.Collections.Generic.List%601>."},{"content":"The <ph id=\"ph1\">`Car`</ph> class implements the <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph> interface, which requires that the <ph id=\"ph3\">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method be implemented.","pos":[17175,17336],"source":" The `Car` class implements the <xref:System.IComparable%601> interface, which requires that the <xref:System.IComparable%601.CompareTo%2A> method be implemented."},{"content":"Each call to the <ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method makes a single comparison that is used for sorting.","pos":[17343,17461],"source":"Each call to the <xref:System.IComparable%601.CompareTo%2A> method makes a single comparison that is used for sorting."},{"content":"User-written code in the <ph id=\"ph1\">`CompareTo`</ph> method returns a value for each comparison of the current object with another object.","pos":[17462,17584],"source":" User-written code in the `CompareTo` method returns a value for each comparison of the current object with another object."},{"content":"The value returned is less than zero if the current object is less than the other object, greater than zero if the current object is greater than the other object, and zero if they are equal.","pos":[17585,17776]},{"content":"This enables you to define in code the criteria for greater than, less than, and equal.","pos":[17777,17864]},{"content":"In the <ph id=\"ph1\">`ListCars`</ph> method, the <ph id=\"ph2\">`cars.Sort()`</ph> statement sorts the list.","pos":[17871,17940],"source":"In the `ListCars` method, the `cars.Sort()` statement sorts the list."},{"content":"This call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> causes the <ph id=\"ph3\">`CompareTo`</ph> method to be called automatically for the <ph id=\"ph4\">`Car`</ph> objects in the <ph id=\"ph5\">`List`</ph>.","pos":[17941,18159],"source":" This call to the <xref:System.Collections.Generic.List%601.Sort%2A> method of the <xref:System.Collections.Generic.List%601> causes the `CompareTo` method to be called automatically for the `Car` objects in the `List`."},{"pos":[20283,20311],"content":"Defining a Custom Collection","linkify":"Defining a Custom Collection","nodes":[{"content":"Defining a Custom Collection","pos":[0,28]}]},{"content":"You can define a collection by implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.","pos":[20315,20464],"source":"You can define a collection by implementing the <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Collections.IEnumerable> interface."},{"content":"For additional information, see <bpt id=\"p1\">[</bpt>How to: Access a Collection Class with foreach<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md)</ept>.","pos":[20465,20650],"source":" For additional information, see [How to: Access a Collection Class with foreach](../../../csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md)."},{"pos":[20657,20889],"content":"Although you can define a custom collection, it is usually better to instead use the collections that are included in the .NET Framework, which are described in <bpt id=\"p1\">[</bpt>Kinds of Collections<ept id=\"p1\">](#BKMK_KindsOfCollections)</ept> earlier in this topic.","source":"Although you can define a custom collection, it is usually better to instead use the collections that are included in the .NET Framework, which are described in [Kinds of Collections](#BKMK_KindsOfCollections) earlier in this topic."},{"content":"The following example defines a custom collection class named <ph id=\"ph1\">`AllColors`</ph>.","pos":[20896,20970],"source":"The following example defines a custom collection class named `AllColors`."},{"content":"This class implements the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, which requires that the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> method be implemented.","pos":[20971,21147],"source":" This class implements the <xref:System.Collections.IEnumerable> interface, which requires that the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method be implemented."},{"content":"The <ph id=\"ph1\">`GetEnumerator`</ph> method returns an instance of the <ph id=\"ph2\">`ColorEnumerator`</ph> class.","pos":[21154,21232],"source":"The `GetEnumerator` method returns an instance of the `ColorEnumerator` class."},{"content":"<ph id=\"ph1\">`ColorEnumerator`</ph> implements the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface, which requires that the <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property, <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method, and <ph id=\"ph5\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method be implemented.","pos":[21233,21529],"source":"`ColorEnumerator` implements the <xref:System.Collections.IEnumerator> interface, which requires that the <xref:System.Collections.IEnumerator.Current%2A> property, <xref:System.Collections.IEnumerator.MoveNext%2A> method, and <xref:System.Collections.IEnumerator.Reset%2A> method be implemented."},{"pos":[23213,23222],"content":"Iterators","linkify":"Iterators","nodes":[{"content":"Iterators","pos":[0,9]}]},{"content":"An <bpt id=\"p1\">*</bpt>iterator<ept id=\"p1\">*</ept> is used to perform a custom iteration over a collection.","pos":[23226,23296],"source":"An *iterator* is used to perform a custom iteration over a collection."},{"content":"An iterator can be a method or a <ph id=\"ph1\">`get`</ph> accessor.","pos":[23297,23345],"source":" An iterator can be a method or a `get` accessor."},{"content":"An iterator uses a <bpt id=\"p1\">[</bpt>yield return<ept id=\"p1\">](../../../csharp/language-reference/keywords/yield.md)</ept> statement to return each element of the collection one at a time.","pos":[23346,23499],"source":" An iterator uses a [yield return](../../../csharp/language-reference/keywords/yield.md) statement to return each element of the collection one at a time."},{"content":"You call an iterator by using a <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> statement.","pos":[23506,23617],"source":"You call an iterator by using a [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement."},{"content":"Each iteration of the <ph id=\"ph1\">`foreach`</ph> loop calls the iterator.","pos":[23618,23674],"source":" Each iteration of the `foreach` loop calls the iterator."},{"content":"When a <ph id=\"ph1\">`yield return`</ph> statement is reached in the iterator, an expression is returned, and the current location in code is retained.","pos":[23675,23807],"source":" When a `yield return` statement is reached in the iterator, an expression is returned, and the current location in code is retained."},{"content":"Execution is restarted from that location the next time that the iterator is called.","pos":[23808,23892]},{"pos":[23899,23999],"content":"For more information, see <bpt id=\"p1\">[</bpt>Iterators (C#)<ept id=\"p1\">](../../../csharp/programming-guide/concepts/iterators.md)</ept>.","source":"For more information, see [Iterators (C#)](../../../csharp/programming-guide/concepts/iterators.md)."},{"content":"The following example uses an iterator method.","pos":[24006,24052]},{"content":"The iterator method has a <ph id=\"ph1\">`yield return`</ph> statement that is inside a <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../csharp/language-reference/keywords/for.md)</ept> loop.","pos":[24053,24184],"source":" The iterator method has a `yield return` statement that is inside a [for](../../../csharp/language-reference/keywords/for.md) loop."},{"content":"In the <ph id=\"ph1\">`ListEvenNumbers`</ph> method, each iteration of the <ph id=\"ph2\">`foreach`</ph> statement body creates a call to the iterator method, which proceeds to the next <ph id=\"ph3\">`yield return`</ph> statement.","pos":[24185,24356],"source":" In the `ListEvenNumbers` method, each iteration of the `foreach` statement body creates a call to the iterator method, which proceeds to the next `yield return` statement."},{"pos":[24928,24936],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Object and Collection Initializers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept><ph id=\"ph1\"> </ph>","pos":[24940,25070],"source":"[Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Programming Concepts (C#)<ept id=\"p1\">](../../../csharp/programming-guide/concepts/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[25073,25155],"source":" [Programming Concepts (C#)](../../../csharp/programming-guide/concepts/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[25158,25265],"source":" [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>LINQ to Objects (C#)<ept id=\"p1\">](../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept><ph id=\"ph1\"> </ph>","pos":[25268,25360],"source":" [LINQ to Objects (C#)](../../../csharp/programming-guide/concepts/linq/linq-to-objects.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Parallel LINQ (PLINQ)<ept id=\"p1\">](../../../standard/parallel-programming/parallel-linq-plinq.md)</ept><ph id=\"ph1\"> </ph>","pos":[25363,25451],"source":" [Parallel LINQ (PLINQ)](../../../standard/parallel-programming/parallel-linq-plinq.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Collections and Data Structures<ept id=\"p1\">](../../../standard/collections/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[25454,25529],"source":" [Collections and Data Structures](../../../standard/collections/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Creating and Manipulating Collections<ept id=\"p1\">](http://msdn.microsoft.com/en-us/2065398e-eb1a-4821-9188-75f16e42e069)</ept><ph id=\"ph1\"> </ph>","pos":[25532,25643],"source":" [Creating and Manipulating Collections](http://msdn.microsoft.com/en-us/2065398e-eb1a-4821-9188-75f16e42e069) "},{"content":"<bpt id=\"p1\"> [</bpt>Selecting a Collection Class<ept id=\"p1\">](../../../standard/collections/selecting-a-collection-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[25646,25741],"source":" [Selecting a Collection Class](../../../standard/collections/selecting-a-collection-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Comparisons and Sorts Within Collections<ept id=\"p1\">](../../../standard/collections/comparisons-and-sorts-within-collections.md)</ept><ph id=\"ph1\"> </ph>","pos":[25744,25863],"source":" [Comparisons and Sorts Within Collections](../../../standard/collections/comparisons-and-sorts-within-collections.md) "},{"content":"<bpt id=\"p1\"> [</bpt>When to Use Generic Collections<ept id=\"p1\">](../../../standard/collections/when-to-use-generic-collections.md)</ept><ph id=\"ph1\"> </ph>","pos":[25866,25967],"source":" [When to Use Generic Collections](../../../standard/collections/when-to-use-generic-collections.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Access a Collection Class with foreach<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md)</ept>","pos":[25970,26123],"source":" [How to: Access a Collection Class with foreach](../../../csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md)"}]}