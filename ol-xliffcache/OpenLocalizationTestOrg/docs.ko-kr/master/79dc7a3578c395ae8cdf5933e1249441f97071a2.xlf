<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="3-d-graphics-overview.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79dc7a3578c395ae8cdf5933e1249441f97071a2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\3-d-graphics-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3a9ce8eec30052db65ac3c649bf8e8b59e0568e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23290599ee05580685e5b0117d810642b998ccb3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>3-D Graphics Overview</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>3-D Graphics Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> The <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> functionality in <ph id="ph2">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> enables developers to draw, transform, and animate 3-D graphics in both markup and procedural code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Developers can combine <ph id="ph1">[!INCLUDE[TLA#tla_2d](../../../../includes/tlasharptla-2d-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> graphics to create rich controls, provide complex illustrations of data, or enhance the user experience of an application's interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> support in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is not designed to provide a full-featured game-development platform.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of <ph id="ph1">[!INCLUDE[TLA#tla_3d](../../../../includes/tlasharptla-3d-md.md)]</ph> functionality in the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> graphics system.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>3-D in a 2-D Container</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> graphics content in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is encapsulated in an element, <ph id="ph3">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph>, that can participate in the two-dimensional element structure.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The graphics system treats <ph id="ph1">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph> as a two-dimensional visual element like many others in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph> functions as a window—a viewport—into a three-dimensional scene.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>More accurately, it is a surface on which a <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> scene is projected.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In a conventional <ph id="ph1">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> application, use <ph id="ph2">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph> as you would another container element like Grid or Canvas.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Although you can use <ph id="ph1">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph> with other <ph id="ph2">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> drawing objects in the same scene graph, you cannot interpenetrate <ph id="ph3">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> and <ph id="ph4">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> objects within a <ph id="ph5">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This topic will focus on how to draw <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> graphics inside the <ph id="ph2">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>3-D Coordinate Space</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> coordinate system for <ph id="ph2">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> graphics locates the origin in the upper left of the rendering area (typically the screen).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> system, positive x-axis values proceed to the right and positive y-axis values proceed downward.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> coordinate system, however, the origin is located in the center of the rendering area, with positive x-axis values proceeding to the right but positive y-axis values proceeding upward instead, and positive z-axis values proceeding outward from the origin, toward the viewer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Coordinate systems<ept id="p1">]</ept><bpt id="p2">(./media/coordsystem-1.png "</bpt>CoordSystem-1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Conventional 2-D and 3-D coordinate system representations</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The space defined by these axes is the stationary frame of reference for <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> objects in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>As you build models in this space and create lights and cameras to view them, it's helpful to distinguish this stationary frame of reference, or "world space," from the local frame of reference you create for each model when you apply transformations to it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remember also that objects in world space might look entirely different, or not be visible at all, depending on light and camera settings, but the position of the camera does not change the location of objects in world space.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Cameras and Projections</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Developers who work in <ph id="ph1">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> are accustomed to positioning drawing primitives on a two-dimensional screen.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> scene, it's important to remember that you are really creating a <ph id="ph2">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> representation of <ph id="ph3">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> objects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Because a <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> scene looks different depending on the onlooker's point of view, you must specify that point of view.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Camera&gt;</ph> class allows you to specify this point of view for a <ph id="ph2">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> scene.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Another way to understand how a <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> scene is represented on a <ph id="ph2">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> surface is by describing the scene as a projection onto the viewing surface.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.ProjectionCamera&gt;</ph> allows you to specify different projections and their properties to change how the onlooker sees <ph id="ph2">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> models.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.PerspectiveCamera&gt;</ph> specifies a projection that foreshortens the scene.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In other words, the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.PerspectiveCamera&gt;</ph> provides vanishing-point perspective.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can specify the position of the camera in the coordinate space of the scene, the direction and field of view for the camera, and a vector that defines the direction of "up" in the scene.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following diagram illustrates the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.PerspectiveCamera&gt;</ph>'s projection.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistance%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistance%2A&gt;</ph> properties of <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.ProjectionCamera&gt;</ph> limit the range of the camera's projection.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because cameras can be located anywhere in the scene, it's possible for the camera to be actually positioned inside a model or very near a model, making it hard to distinguish objects properly.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistance%2A&gt;</ph> allows you to specify a minimum distance from the camera beyond which objects will not be drawn.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Conversely, <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistance%2A&gt;</ph> lets you specify a distance from the camera beyond which objects will not be drawn, which ensures that objects too far away to be recognizable won't be included in the scene.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Camera setup<ept id="p1">]</ept><bpt id="p2">(./media/coordsystem-6.png "</bpt>CoordSystem-6<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Camera position</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.OrthographicCamera&gt;</ph> specifies an orthogonal projection of a <ph id="ph2">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> model to a <ph id="ph3">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> visual surface.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Like other cameras, it specifies a position, viewing direction, and "upward" direction.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.PerspectiveCamera&gt;</ph>, however, <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.OrthographicCamera&gt;</ph> describes a projection that does not include perspective foreshortening.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In other words, <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.OrthographicCamera&gt;</ph> describes a viewing box whose sides are parallel, instead of one whose sides meet in a point at the camera.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following image shows the same model as viewed using <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.PerspectiveCamera&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.OrthographicCamera&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Orthographic and perspective projection<ept id="p1">]</ept><bpt id="p2">(./media/camera-projections4.png "</bpt>Camera_projections4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Perspective and Orthographic Projections</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following code shows some typical camera settings.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Model and Mesh Primitives</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Model3D&gt;</ph> is the abstract base class that represents a generic <ph id="ph2">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To build a <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> scene, you need some objects to view, and the objects that make up the scene graph derive from <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.Model3D&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Currently, the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> supports modeling geometries with <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.GeometryModel3D&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.GeometryModel3D.Geometry%2A&gt;</ph> property of this model takes a mesh primitive.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To build a model, begin by building a primitive, or mesh.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> primitive is a collection of vertices that form a single <ph id="ph2">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> entity.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Most <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> systems provide primitives modeled on the simplest closed figure: a triangle defined by three vertices.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Because the three points of a triangle are coplanar, you can continue adding triangles in order to model more complex shapes, called meshes.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> system currently provides the <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D&gt;</ph> class, which allows you to specify any geometry; it does not currently support predefined <ph id="ph4">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> primitives like spheres and cubic forms.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Begin creating a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D&gt;</ph> by specifying a list of triangle vertices as its <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.Positions%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Each vertex is specified as a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Point3D&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>(In <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>, specify this property as a list of numbers grouped in threes that represent the coordinates of each vertex.) Depending on its geometry, your mesh might be composed of many triangles, some of which share the same corners (vertices).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To draw the mesh correctly, the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> needs information about which vertices are shared by which triangles.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You provide this information by specifying a list of triangle indices with the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndices%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This list specifies the order in which the points specified in the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.Positions%2A&gt;</ph> list will determine a triangle.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the preceding example, the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.Positions%2A&gt;</ph> list specifies eight vertices to define a cube-shaped mesh.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndices%2A&gt;</ph> property specifies a list of twelve groups of three indices.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Each number in the list refers to an offset into the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.Positions%2A&gt;</ph> list.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, the first three vertices specified by the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.Positions%2A&gt;</ph> list are (1,1,0), (0,1,0), and (0,0,0).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The first three indices specified by the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndices%2A&gt;</ph> list are 0, 2, and 1, which correspond to the first, third, and second points in the <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.Positions%2A&gt;</ph> list.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>As a result, the first triangle that makes up the cube model will be composed from (1,1,0) to (0,1,0) to  (0,0,0), and the remaining eleven triangles will be determined similarly.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can continue defining the model by specifying values for the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.Normals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinates%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To render the surface of the model, the graphics system needs information about which direction the surface is facing at any given triangle.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It uses this information to make lighting calculations for the model: surfaces that face directly towards a light source appear brighter than those angled away from the light.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Though the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> can determine default normal vectors by using the position coordinates, you can also specify different normal vectors to approximate the appearance of curved surfaces.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinates%2A&gt;</ph> property specifies a collection of <ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph>s that tell the graphics system how to map the coordinates that determine how a texture is drawn to the vertices of the mesh.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinates%2A&gt;</ph> are specified as a value between zero and 1, inclusive.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>As with the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MeshGeometry3D.Normals%2A&gt;</ph> property, the graphics system can calculate default texture coordinates, but you might choose to set different texture coordinates to control the mapping of a texture that includes part of a repeating pattern, for example.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>More information about texture coordinates can be found in subsequent topics or in the Managed Direct3D SDK.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following example shows how to create one face of the cube model in procedural code.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Note that you can draw the entire cube as a single GeometryModel3D; this example draws the cube's face as a distinct model in order to apply separate textures to each face later.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Applying Materials to the Model</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For a mesh to look like a three-dimensional object, it must have an applied texture to cover the surface defined by its vertices and triangles so it can be lit and projected by the camera.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph>, you use the <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph> class to apply colors, patterns, gradients, or other visual content to areas of the screen.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The appearance of <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> objects, however, is a function of the lighting model, not just of the color or pattern applied to them.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Real-world objects reflect light differently depending on the quality of their surfaces: glossy and shiny surfaces don't look the same as rough or matte surfaces, and some objects seem to absorb light while others glow.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can apply all the same brushes to <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> objects that you can apply to <ph id="ph2">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> objects, but you can't apply them directly.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To define the characteristics of a model's surface, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> uses the <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.Material&gt;</ph> abstract class.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The concrete subclasses of Material determine some of the appearance characteristics of the model's surface, and each also provides a Brush property to which you can pass a SolidColorBrush, TileBrush, or VisualBrush.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.DiffuseMaterial&gt;</ph> specifies that the brush will be applied to the model as though that model were lit diffusely.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Using DiffuseMaterial most resembles using brushes directly on <ph id="ph1">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> models; model surfaces do not reflect light as though shiny.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.SpecularMaterial&gt;</ph> specifies that the brush will be applied to the model as though the model's surface were hard or shiny, capable of reflecting highlights.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can set the degree to which the texture will suggest this reflective quality, or "shine," by specifying a value for the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.SpecularMaterial.SpecularPower%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.EmissiveMaterial&gt;</ph> allows you to specify that the texture will be applied as though the model were emitting light equal to the color of the brush.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This does not make the model a light; however, it will participate differently in shadowing than it would if textured with DiffuseMaterial or SpecularMaterial.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For better performance, the backfaces of a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.GeometryModel3D&gt;</ph> (those faces that are out of view because they are on the opposite side of the model from the camera) are culled from the scene.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To specify a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Material&gt;</ph> to apply to the backface of a model like a plane, set the model's <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.GeometryModel3D.BackMaterial%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To achieve some surface qualities, like glowing or reflective effects, you might want to apply several different brushes to a model in succession.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can apply and reuse multiple Materials by using the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.MaterialGroup&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The children of the MaterialGroup are applied first to last in multiple rendering passes.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following code examples show how to apply a solid color and a drawing as brushes to <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> models.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Illuminating the Scene</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Lights in <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> graphics do what lights do in the real world: they make surfaces visible.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>More to the point, lights determine what part of a scene will be included in the projection.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Light objects in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> create a variety of light and shadow effects and are modeled after the behavior of various real-world lights.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You must include at least one light in your scene, or no models will be visible.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following lights derive from the base class <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Light&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.AmbientLight&gt;</ph>: Provides ambient lighting that illuminates all objects uniformly regardless of their location or orientation.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.DirectionalLight&gt;</ph>: Illuminates like a distant light source.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Directional lights have a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.DirectionalLight.Direction%2A&gt;</ph> specified as a Vector3D, but no specified location.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.PointLight&gt;</ph>: Illuminates like a nearby light source.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>PointLights have a position and cast light from that position.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Objects in the scene are illuminated depending on their position and distance with respect to the light.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.PointLightBase&gt;</ph> exposes a <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.PointLightBase.Range%2A&gt;</ph> property, which determines a distance beyond which models will not be illuminated by the light.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>PointLight also exposes attenuation properties which determine how the light's intensity diminishes over distance.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can specify constant, linear, or quadratic interpolations for the light's attenuation.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.SpotLight&gt;</ph>: Inherits from <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.PointLight&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Spotlights illuminate like PointLight and have both position and direction.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>They project light in a cone-shaped area set by <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.SpotLight.InnerConeAngle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.SpotLight.OuterConeAngle%2A&gt;</ph> properties, specified in degrees.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Lights are <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Model3D&gt;</ph> objects, so you can transform and animate light properties, including position, color, direction, and range.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Transforming Models</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>When you create models, they have a particular location in the scene.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To move those models around in the scene, to rotate them, or to change their size, it's not practical to change the vertices that define the models themselves.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Instead, just as in <ph id="ph1">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph>, you apply transformations to models.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Each model object has a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Model3D.Transform%2A&gt;</ph> property with which you can move, re-orient, or resize the model.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When you apply a transform, you effectively offset all the points of the model by whatever vector or value specified by the transform.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In other words, you've transformed the coordinate space in which the model is defined ("model space"), but you haven't changed the values that make up the model's geometry in the coordinate system of the entire scene ("world space").</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For more information about transforming models, see <bpt id="p1">[</bpt>3-D Transformations Overview<ept id="p1">](3-d-transformations-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Animating Models</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> implementation participates in the same timing and animation system as <ph id="ph3">[!INCLUDE[TLA2#tla_2d](../../../../includes/tla2sharptla-2d-md.md)]</ph> graphics.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In other words, to animate a 3-D scene, animate the properties of its models.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>It's possible to animate properties of primitives directly, but it's typically easier to animate transformations that change the position or appearance of models.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Because transformations can be applied to <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Model3DGroup&gt;</ph> objects as well as individual models, it's possible to apply one set of animations to a child of a Model3DGroup and another set of animations to a group of child objects.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You can also achieve a variety of visual effects by animating the properties of your scene's lighting.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Finally, you might choose to animate the projection itself by animating the camera position or field of view.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For background information on the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> timing and animation system, see the <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](animation-overview.md)</ept>, <bpt id="p2">[</bpt>Storyboards Overview<ept id="p2">](storyboards-overview.md)</ept>, and <bpt id="p3">[</bpt>Freezable Objects Overview<ept id="p3">](../advanced/freezable-objects-overview.md)</ept> topics.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>To animate an object in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, you create a timeline, define an animation (which is really a change in some property value over time), and specify the property to which to apply the animation.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Because all the objects in a <ph id="ph1">[!INCLUDE[TLA2#tla_3d](../../../../includes/tla2sharptla-3d-md.md)]</ph> scene are children of <ph id="ph2">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph>, the properties targeted by any animation you want to apply to the scene are properties of properties of Viewport3D.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Suppose you want to make a model appear to wobble in place.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You might choose to apply a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.RotateTransform3D&gt;</ph> to the model, and animate the axis of its rotation from one vector to another.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates applying a Vector3DAnimation to the Axis property of the transformation's Rotation3D, assuming the RotateTransform3D to be one of several transforms applied to the model with a TransformGroup.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Add 3-D Content to the Window</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To render the scene, add models and lights to a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Model3DGroup&gt;</ph>, then set the <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.Model3DGroup&gt;</ph> as the <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.ModelVisual3D.Content%2A&gt;</ph> of a <ph id="ph4">&lt;xref:System.Windows.Media.Media3D.ModelVisual3D&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.ModelVisual3D&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Controls.Viewport3D.Children%2A&gt;</ph> collection of the <ph id="ph3">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Add cameras to the <ph id="ph1">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph> by setting its <ph id="ph2">&lt;xref:System.Windows.Controls.Viewport3D.Camera%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Finally, add the <ph id="ph1">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph> to the window.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph> is included as the content of a layout element like Canvas, specify the size of the Viewport3D by setting its <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> properties (inherited from <ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>3-D Transformations Overview<ept id="p1">](3-d-transformations-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Maximize WPF 3D Performance<ept id="p1">](maximize-wpf-3d-performance.md)</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How-to Topics<ept id="p1">](3-d-graphics-how-to-topics.md)</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Shapes and Basic Drawing in WPF Overview<ept id="p1">](shapes-and-basic-drawing-in-wpf-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Painting with Images, Drawings, and Visuals<ept id="p1">](painting-with-images-drawings-and-visuals.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>