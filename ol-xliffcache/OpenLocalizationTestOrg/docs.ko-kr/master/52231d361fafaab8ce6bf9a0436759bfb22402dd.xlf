<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-round-trip-date-and-time-values.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52231d361fafaab8ce6bf9a0436759bfb22402dd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\how-to-round-trip-date-and-time-values.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a230e61433d7db88a3a48a91c21684b700f12f90</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5b5b21431a56f530c6b7820f4b497d18b6c6b48</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Round-trip Date and Time Values | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Round-trip Date and Time Values</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In many applications, a date and time value is intended to unambiguously identify a single point in time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic shows how to save and restore a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value, a <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> value, and a date and time value with time zone information so that the restored value identifies the same time as the saved value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To round-trip a DateTime value</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Convert the <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to its string representation by calling the <ph id="ph2">&lt;xref:System.DateTime.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method with the "o" format specifier.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Save the string representation of the <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to a file, or pass it across a process, application domain, or machine boundary.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Retrieve the string that represents the <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;</ph> method, and pass <ph id="ph2">&lt;xref:System.Globalization.DateTimeStyles?displayProperty=fullName&gt;</ph> as the value of the <ph id="ph3">`styles`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to round-trip a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.HowTo.RoundTrip#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Formatting.HowTo.RoundTrip#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When round-tripping a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value, this technique successfully preserves the time for all local and universal times.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, if a local <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value is saved on a system in the U.S. Pacific Standard Time zone and is restored on a system in the U.S. Central Standard Time zone, the restored date and time will be two hours later than the original time, which reflects the time difference between the two time zones.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, this technique is not necessarily accurate for unspecified times.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> values whose <ph id="ph2">&lt;xref:System.DateTime.Kind%2A&gt;</ph> property is <ph id="ph3">&lt;xref:System.DateTimeKind&gt;</ph> are treated as if they are local times.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If this is not the case, the <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> will not successfully identify the correct point in time.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The workaround for this limitation is to tightly couple a date and time value with its time zone for the save and restore operation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To round-trip a DateTimeOffset value</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Convert the <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> value to its string representation by calling the <ph id="ph2">&lt;xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method with the "o" format specifier.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Save the string representation of the <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> value to a file, or pass it across a process, application domain, or machine boundary.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Retrieve the string that represents the <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;</ph> method, and pass <ph id="ph2">&lt;xref:System.Globalization.DateTimeStyles?displayProperty=fullName&gt;</ph> as the value of the <ph id="ph3">`styles`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to round-trip a <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.HowTo.RoundTrip#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Formatting.HowTo.RoundTrip#2<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This technique always unambiguously identifies a <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> value as a single point in time.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The value can then be converted to Coordinated Universal Time (UTC) by calling the <ph id="ph1">&lt;xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName&gt;</ph> method, or it can be converted to the time in a particular time zone by calling the <ph id="ph2">&lt;xref:System.DateTimeOffset.ToOffset%2A?displayProperty=fullName&gt;</ph> or <ph id="ph3">&lt;xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The major limitation of this technique is that date and time arithmetic, when performed on a <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> value that represents the time in a particular time zone, may not produce accurate results for that time zone.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is because when a <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> value is instantiated, it is disassociated from its time zone.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Therefore, that time zone's adjustment rules can no longer be applied when you perform date and time calculations.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can work around this problem by defining a custom type that includes both a date and time value and its accompanying time zone.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To round-trip a date and time value with its time zone</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Define a class or a structure with two fields.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first field is either a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> or a <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> object, and the second is a <ph id="ph3">&lt;xref:System.TimeZoneInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example is a simple version of such a type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.HowTo.RoundTrip#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Formatting.HowTo.RoundTrip#3<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Mark the class with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Serialize the object using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Restore the object using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Cast (in C#) or convert (in Visual Basic) the deserialized object to an object of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to round-trip an object that stores both date and time and time zone information.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.HowTo.RoundTrip#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Formatting.HowTo.RoundTrip#4<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This technique should always unambiguously reflect the correct point of time both before and after it is saved and restored, provided that the implementation of the combined date and time and time zone object does not allow the date value to become out of sync with the time zone value.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>These examples require:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>That the following namespaces be imported with C# <ph id="ph1">`using`</ph> statements or <ph id="ph2">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> <ph id="ph3">`Imports`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System&gt;</ph> (C# only).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A reference to System.Core.dll.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Each code example, other than the <ph id="ph1">`DateInTimeZone`</ph> class, should be included in a class or Visual Basic module, wrapped in methods, and called from the <ph id="ph2">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performing Formatting Operations<ept id="p1">](../../../docs/standard/base-types/performing-formatting-operations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo<ept id="p1">](../../../docs/standard/datetime/choosing-between-datetime.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-date-and-time-format-strings.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>