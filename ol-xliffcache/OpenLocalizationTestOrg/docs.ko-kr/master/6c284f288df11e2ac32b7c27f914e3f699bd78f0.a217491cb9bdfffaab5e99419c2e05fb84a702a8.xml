{"content":"---\ntitle: \"as (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"as_CSharpKeyword\"\n  - \"as\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"type conversion [C#], as keyword\"\n  - \"as keyword [C#]\"\nms.assetid: a9be126b-cbf4-4990-a70d-d0e1983cad0e\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# as (C# Reference)\nYou can use the `as` operator to perform certain types of conversions between compatible reference types or [nullable types](../../../csharp/programming-guide/nullable-types/index.md). The following code shows an example.  \n  \n [!code-cs[csrefKeywordsOperator#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/as_1.cs)]  \n  \n## Remarks  \n The `as` operator is like a cast operation. However, if the conversion isn't possible, `as` returns `null` instead of raising an exception. Consider the following example:  \n  \n```  \nexpression as type  \n```  \n  \n The code is equivalent to the following expression except that the `expression` variable is evaluated only one time.  \n  \n```  \nexpression is type ? (type)expression : (type)null  \n```  \n  \n Note that the `as` operator performs only reference conversions, nullable conversions, and boxing conversions. The `as` operator can't perform other conversions, such as user-defined conversions, which should instead be performed by using cast expressions.  \n  \n## Example  \n [!code-cs[csrefKeywordsOperator#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/as_2.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [is](../../../csharp/language-reference/keywords/is.md)   \n [?: Operator](../../../csharp/language-reference/operators/conditional-operator.md)   \n [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)","nodes":[{"pos":[12,46],"content":"as (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"as (C# Reference) | Microsoft Docs","pos":[0,34]}]},{"pos":[598,615],"content":"as (C# Reference)","linkify":"as (C# Reference)","nodes":[{"content":"as (C# Reference)","pos":[0,17]}]},{"content":"You can use the <ph id=\"ph1\">`as`</ph> operator to perform certain types of conversions between compatible reference types or <bpt id=\"p1\">[</bpt>nullable types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept>.","pos":[616,800],"source":"You can use the `as` operator to perform certain types of conversions between compatible reference types or [nullable types](../../../csharp/programming-guide/nullable-types/index.md)."},{"content":"The following code shows an example.","pos":[801,837]},{"pos":[844,951],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsOperator#1<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/as_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsOperator#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/as_1.cs)]"},{"pos":[960,967],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`as`</ph> operator is like a cast operation.","pos":[971,1014],"source":"The `as` operator is like a cast operation."},{"content":"However, if the conversion isn't possible, <ph id=\"ph1\">`as`</ph> returns <ph id=\"ph2\">`null`</ph> instead of raising an exception.","pos":[1015,1110],"source":" However, if the conversion isn't possible, `as` returns `null` instead of raising an exception."},{"content":"Consider the following example:","pos":[1111,1142]},{"pos":[1185,1301],"content":"The code is equivalent to the following expression except that the <ph id=\"ph1\">`expression`</ph> variable is evaluated only one time.","source":"The code is equivalent to the following expression except that the `expression` variable is evaluated only one time."},{"content":"Note that the <ph id=\"ph1\">`as`</ph> operator performs only reference conversions, nullable conversions, and boxing conversions.","pos":[1376,1486],"source":"Note that the `as` operator performs only reference conversions, nullable conversions, and boxing conversions."},{"content":"The <ph id=\"ph1\">`as`</ph> operator can't perform other conversions, such as user-defined conversions, which should instead be performed by using cast expressions.","pos":[1487,1632],"source":" The `as` operator can't perform other conversions, such as user-defined conversions, which should instead be performed by using cast expressions."},{"pos":[1641,1648],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1652,1759],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsOperator#2<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/as_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsOperator#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/as_2.cs)]"},{"pos":[1768,1793],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[1907,1915],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1919,1979],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1982,2050],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2053,2122],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>is<ept id=\"p1\">](../../../csharp/language-reference/keywords/is.md)</ept><ph id=\"ph1\"> </ph>","pos":[2125,2182],"source":" [is](../../../csharp/language-reference/keywords/is.md) "},{"content":"<bpt id=\"p1\"> [</bpt>?: Operator<ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2185,2270],"source":" [?: Operator](../../../csharp/language-reference/operators/conditional-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept>","pos":[2273,2359],"source":" [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)"}]}