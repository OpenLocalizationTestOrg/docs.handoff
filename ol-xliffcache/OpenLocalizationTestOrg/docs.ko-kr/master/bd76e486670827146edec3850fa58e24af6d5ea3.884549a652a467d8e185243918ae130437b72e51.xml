{"content":"---\ntitle: \"Pausing and Resuming a Workflow | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 11f38339-79c7-4295-b610-24a7223bbf6d\ncaps.latest.revision: 4\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Pausing and Resuming a Workflow\nWorkflows will pause and resume in response to bookmarks and blocking activities such as <xref:System.Activities.Statements.Delay>, but a workflow can also be explicitly paused, unloaded, and resumed by using persistence.  \n  \n## Pausing a Workflow  \n To pause a workflow, use <xref:System.Activities.WorkflowApplication.Unload%2A>.  This method requests that the workflow persist and unload, and will throw a <xref:System.TimeoutException> if the workflow does not unload in 30 seconds.  \n  \n```csharp  \ntry  \n{  \n    // attempt to unload will fail if the workflow is idle within a NoPersistZone  \n    application.Unload(TimeSpan.FromSeconds(5));  \n}  \ncatch (TimeoutException e)  \n{  \n    Console.WriteLine(e.Message);  \n}  \n  \n```  \n  \n## Resuming a Workflow  \n To resume a previously paused and unloaded workflow, use <xref:System.Activities.WorkflowApplication.Load%2A>. This method loads a workflow from a persistence store into memory.  \n  \n```csharp  \nWorkflowApplication application = new WorkflowApplication(activity);  \napplication.InstanceStore = instanceStore;  \napplication.Load(id);  \n  \n```  \n  \n## Example  \n The following code sample demonstrates how to pause and resume a workflow by using persistence.  \n  \n```csharp  \nstatic string bkName = \"bkName\";  \nstatic void Main(string[] args)   \n{  \n    StartAndUnloadInstance();  \n}  \n  \nstatic void StartAndUnloadInstance()   \n{  \n    AutoResetEvent waitHandler = new AutoResetEvent(false);  \n    WorkflowApplication wfApp = new WorkflowApplication(GetDelayedWF());  \n    SqlWorkflowInstanceStore instanceStore = SetupSqlpersistenceStore();  \n    wfApp.InstanceStore = instanceStore;  \n    wfApp.Extensions.Add(SetupMyFileTrackingParticipant);  \n    wfApp.PersistableIdle = (e) => {          ///persists application state and remove it from memory   \n    return PersistableIdleAction.Unload;  \n    };  \n    wfApp.Unloaded = (e) => {  \n        waitHandler.Set();  \n    };  \n    Guid id = wfApp.Id;  \n    wfApp.Run();  \n    waitHandler.WaitOne();  \n    LoadAndCompleteInstance(id);  \n}  \n  \nstatic void LoadAndCompleteInstance(Guid id)   \n{            \n    Console.WriteLine(\"Press <enter> to load the persisted workflow\");  \n    Console.ReadLine();  \n    AutoResetEvent waitHandler = new AutoResetEvent(false);  \n    WorkflowApplication wfApp = new WorkflowApplication(new Workflow1());  \n    wfApp.InstanceStore =  \n        new SqlWorkflowInstanceStore(ConfigurationManager.AppSettings[\"SqlWF4PersistenceConnectionString\"].ToString());  \n    wfApp.Completed = (workflowApplicationCompletedEventArgs) => {  \n        Console.WriteLine(\"\\nWorkflowApplication has Completed in the {0} state.\",  \n            workflowApplicationCompletedEventArgs.CompletionState);  \n    };  \n    wfApp.Unloaded = (workflowApplicationEventArgs) => {  \n        Console.WriteLine(\"WorkflowApplication has Unloaded\\n\");  \n        waitHandler.Set();  \n    };  \n    wfApp.Load(id);  \n    wfApp.Run();  \n    waitHandler.WaitOne();  \n}  \n  \npublic static Activity GetDelayedWF()   \n{  \n    return new Sequence {  \n        Activities ={  \n            new WriteLine{Text=\"Workflow Started\"},  \n            new Delay{Duration=TimeSpan.FromSeconds(10)},  \n            new WriteLine{Text=\"Workflow Ended\"}  \n        }  \n    };  \n}  \n  \nprivate static SqlWorkflowInstanceStore SetupSqlpersistenceStore()   \n{   \n     string connectionString = ConfigurationManager.AppSettings[\"SqlWF4PersistenceConnectionString\"].ToString();  \n    SqlWorkflowInstanceStore sqlWFInstanceStore = new SqlWorkflowInstanceStore(connectionString);  \n    sqlWFInstanceStore.InstanceCompletionAction = InstanceCompletionAction.DeleteAll;  \n    InstanceHandle handle = sqlWFInstanceStore.CreateInstanceHandle();  \n    InstanceView view = sqlWFInstanceStore.Execute(handle, new CreateWorkflowOwnerCommand(), TimeSpan.FromSeconds(5));  \n    handle.Free();  \n    sqlWFInstanceStore.DefaultInstanceOwner = view.InstanceOwner;  \n    return sqlWFInstanceStore;  \n}  \n  \n```\n","nodes":[{"pos":[12,60],"content":"Pausing and Resuming a Workflow | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Pausing and Resuming a Workflow | Microsoft Docs","pos":[0,48]}]},{"pos":[325,356],"content":"Pausing and Resuming a Workflow","linkify":"Pausing and Resuming a Workflow","nodes":[{"content":"Pausing and Resuming a Workflow","pos":[0,31]}]},{"content":"Workflows will pause and resume in response to bookmarks and blocking activities such as <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Delay&gt;</ph>, but a workflow can also be explicitly paused, unloaded, and resumed by using persistence.","pos":[357,578],"source":"Workflows will pause and resume in response to bookmarks and blocking activities such as <xref:System.Activities.Statements.Delay>, but a workflow can also be explicitly paused, unloaded, and resumed by using persistence."},{"pos":[587,605],"content":"Pausing a Workflow","linkify":"Pausing a Workflow","nodes":[{"content":"Pausing a Workflow","pos":[0,18]}]},{"content":"To pause a workflow, use <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication.Unload%2A&gt;</ph>.","pos":[609,689],"source":"To pause a workflow, use <xref:System.Activities.WorkflowApplication.Unload%2A>."},{"content":"This method requests that the workflow persist and unload, and will throw a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> if the workflow does not unload in 30 seconds.","pos":[691,844],"source":"  This method requests that the workflow persist and unload, and will throw a <xref:System.TimeoutException> if the workflow does not unload in 30 seconds."},{"pos":[1099,1118],"content":"Resuming a Workflow","linkify":"Resuming a Workflow","nodes":[{"content":"Resuming a Workflow","pos":[0,19]}]},{"content":"To resume a previously paused and unloaded workflow, use <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication.Load%2A&gt;</ph>.","pos":[1122,1232],"source":"To resume a previously paused and unloaded workflow, use <xref:System.Activities.WorkflowApplication.Load%2A>."},{"content":"This method loads a workflow from a persistence store into memory.","pos":[1233,1299]},{"pos":[1472,1479],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code sample demonstrates how to pause and resume a workflow by using persistence.","pos":[1483,1578]}]}