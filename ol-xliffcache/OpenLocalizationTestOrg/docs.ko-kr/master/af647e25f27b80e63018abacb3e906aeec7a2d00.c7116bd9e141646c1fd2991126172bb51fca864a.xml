{"content":"---\ntitle: \"Handle null values in query expressions\"\ndescription: How to handle null values in query expressions.\nkeywords: .NET, .NET Core, C#\nauthor: BillWagner\nmanager: wpickett\nms.author: wiwagn\nms.date: 12/1/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: ac63ae8b-724d-4251-9334-528f4e884ae7\n---\n# Handle null values in query expressions\n\nThis example shows how to handle possible null values in source collections. An object collection such as an <xref:System.Collections.Generic.IEnumerable%601> can contain elements whose value is [null](../language-reference/keywords/null.md). If a source collection is null or contains an element whose value is null, and your query does not handle null values, a <xref:System.NullReferenceException> will be thrown when you execute the query.  \n  \n## Example\n\n You can code defensively to avoid a null reference exception as shown in the following example:  \n  \n [!code-cs[csProgGuideLINQ#82](../../../samples/snippets/csharp/concepts/linq/how-to-handle-null-values-in-query-expressions_1.cs)]  \n  \n In the previous example, the `where` clause filters out all null elements in the categories sequence. This technique is independent of the null check in the join clause. The conditional expression with null in this example works because `Products.CategoryID` is of type `int?` which is shorthand for `Nullable<int>`.  \n  \n## Example\n\n In a join clause, if only one of the comparison keys is a nullable value type, you can cast the other to a nullable type in the query expression. In the following example, assume that `EmployeeID` is a column that contains values of type `int?`:  \n  \n [!code-cs[csProgGuideLINQ#83](../../../samples/snippets/csharp/concepts/linq/how-to-handle-null-values-in-query-expressions_2.cs)]  \n  \n## See also  \n <xref:System.Nullable%601>   \n [LINQ query expressions](index.md)   \n [Nullable types](../programming-guide/nullable-types/index.md)","nodes":[{"pos":[12,51],"content":"Handle null values in query expressions","needQuote":false,"needEscape":true,"nodes":[{"content":"Handle null values in query expressions","pos":[0,39]}]},{"pos":[66,113],"content":"How to handle null values in query expressions.","needQuote":true,"needEscape":true,"nodes":[{"content":"How to handle null values in query expressions.","pos":[0,47]}]},{"pos":[124,143],"content":".NET, .NET Core, C#","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core, C#","pos":[0,19]}]},{"pos":[367,406],"content":"Handle null values in query expressions","linkify":"Handle null values in query expressions","nodes":[{"content":"Handle null values in query expressions","pos":[0,39]}]},{"content":"This example shows how to handle possible null values in source collections.","pos":[408,484]},{"content":"An object collection such as an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> can contain elements whose value is <bpt id=\"p1\">[</bpt>null<ept id=\"p1\">](../language-reference/keywords/null.md)</ept>.","pos":[485,650],"source":" An object collection such as an <xref:System.Collections.Generic.IEnumerable%601> can contain elements whose value is [null](../language-reference/keywords/null.md)."},{"content":"If a source collection is null or contains an element whose value is null, and your query does not handle null values, a <ph id=\"ph1\">&lt;xref:System.NullReferenceException&gt;</ph> will be thrown when you execute the query.","pos":[651,851],"source":" If a source collection is null or contains an element whose value is null, and your query does not handle null values, a <xref:System.NullReferenceException> will be thrown when you execute the query."},{"pos":[860,867],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"You can code defensively to avoid a null reference exception as shown in the following example:","pos":[870,965]},{"pos":[972,1102],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#82<ept id=\"p2\">](../../../samples/snippets/csharp/concepts/linq/how-to-handle-null-values-in-query-expressions_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#82](../../../samples/snippets/csharp/concepts/linq/how-to-handle-null-values-in-query-expressions_1.cs)]"},{"content":"In the previous example, the <ph id=\"ph1\">`where`</ph> clause filters out all null elements in the categories sequence.","pos":[1109,1210],"source":"In the previous example, the `where` clause filters out all null elements in the categories sequence."},{"content":"This technique is independent of the null check in the join clause.","pos":[1211,1278]},{"content":"The conditional expression with null in this example works because <ph id=\"ph1\">`Products.CategoryID`</ph> is of type <ph id=\"ph2\">`int?`</ph> which is shorthand for <ph id=\"ph3\">`Nullable&lt;int&gt;`</ph>.","pos":[1279,1425],"source":" The conditional expression with null in this example works because `Products.CategoryID` is of type `int?` which is shorthand for `Nullable<int>`."},{"pos":[1434,1441],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In a join clause, if only one of the comparison keys is a nullable value type, you can cast the other to a nullable type in the query expression.","pos":[1444,1589]},{"content":"In the following example, assume that <ph id=\"ph1\">`EmployeeID`</ph> is a column that contains values of type <ph id=\"ph2\">`int?`</ph>:","pos":[1590,1689],"source":" In the following example, assume that `EmployeeID` is a column that contains values of type `int?`:"},{"pos":[1696,1826],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#83<ept id=\"p2\">](../../../samples/snippets/csharp/concepts/linq/how-to-handle-null-values-in-query-expressions_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#83](../../../samples/snippets/csharp/concepts/linq/how-to-handle-null-values-in-query-expressions_2.cs)]"},{"pos":[1835,1843],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Nullable%601&gt;</ph>","pos":[1847,1873],"source":"<xref:System.Nullable%601> "},{"content":"<bpt id=\"p1\"> [</bpt>LINQ query expressions<ept id=\"p1\">](index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1877,1913],"source":" [LINQ query expressions](index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Nullable types<ept id=\"p1\">](../programming-guide/nullable-types/index.md)</ept>","pos":[1916,1979],"source":" [Nullable types](../programming-guide/nullable-types/index.md)"}]}