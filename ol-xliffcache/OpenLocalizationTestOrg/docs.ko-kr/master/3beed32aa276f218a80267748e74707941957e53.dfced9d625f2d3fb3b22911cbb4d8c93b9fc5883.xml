{"content":"---\ntitle: \"Tutorial: Chaining Queries Together (C#)\"\nms.date: 07/20/2015\nms.assetid: 44f54444-c4c5-4c23-9d19-986b957b8eda\n---\n# Tutorial: Chaining Queries Together (C#)\nThis tutorial illustrates the processing model when you chain queries together. Chaining queries together is a key part of writing functional transformations. It is important to understand exactly how chained queries work.  \n  \n The queries that process Office Open XML documents use this technique extensively.  \n  \n## In This Section  \n  \n|Topic|Description|  \n|-----------|-----------------|  \n|[Deferred Execution and Lazy Evaluation in LINQ to XML (C#)](../../../../csharp/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)|Describes the concepts of deferred execution and lazy evaluation.|  \n|[Deferred Execution Example (C#)](../../../../csharp/programming-guide/concepts/linq/deferred-execution-example.md)|Provides an example of deferred execution.|  \n|[Chaining Queries Example (C#)](../../../../csharp/programming-guide/concepts/linq/chaining-queries-example.md)|Shows how deferred execution works when chaining queries together.|  \n|[Intermediate Materialization (C#)](../../../../csharp/programming-guide/concepts/linq/intermediate-materialization.md)|Identifies and illustrates the semantics of intermediate materialization.|  \n|[Chaining Standard Query Operators Together (C#)](../../../../csharp/programming-guide/concepts/linq/chaining-standard-query-operators-together.md)|Describes the lazy semantics of the standard query operators.|  \n  \n## See also\n\n- [Pure Functional Transformations of XML (C#)](../../../../csharp/programming-guide/concepts/linq/pure-functional-transformations-of-xml.md)\n","nodes":[{"pos":[4,122],"embed":true,"restype":"x-metadata","content":"title: \"Tutorial: Chaining Queries Together (C#)\"\nms.date: 07/20/2015\nms.assetid: 44f54444-c4c5-4c23-9d19-986b957b8eda","nodes":[{"content":"Tutorial: Chaining Queries Together (C#)","nodes":[{"pos":[0,40],"content":"Tutorial: Chaining Queries Together (C#)","nodes":[{"content":"Tutorial: Chaining Queries Together (C#)","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[129,169],"content":"Tutorial: Chaining Queries Together (C#)","linkify":"Tutorial: Chaining Queries Together (C#)","nodes":[{"content":"Tutorial: Chaining Queries Together (C#)","pos":[0,40]}]},{"content":"This tutorial illustrates the processing model when you chain queries together.","pos":[170,249]},{"content":"Chaining queries together is a key part of writing functional transformations.","pos":[250,328]},{"content":"It is important to understand exactly how chained queries work.","pos":[329,392]},{"content":"The queries that process Office Open XML documents use this technique extensively.","pos":[399,481]},{"pos":[490,505],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"content":"Topic","pos":[512,517]},{"content":"Description","pos":[518,529]},{"pos":[568,737],"content":"<bpt id=\"p1\">[</bpt>Deferred Execution and Lazy Evaluation in LINQ to XML (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>","source":"[Deferred Execution and Lazy Evaluation in LINQ to XML (C#)](../../../../csharp/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)"},{"content":"Describes the concepts of deferred execution and lazy evaluation.","pos":[738,803]},{"pos":[808,923],"content":"<bpt id=\"p1\">[</bpt>Deferred Execution Example (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/deferred-execution-example.md)</ept>","source":"[Deferred Execution Example (C#)](../../../../csharp/programming-guide/concepts/linq/deferred-execution-example.md)"},{"content":"Provides an example of deferred execution.","pos":[924,966]},{"pos":[971,1082],"content":"<bpt id=\"p1\">[</bpt>Chaining Queries Example (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/chaining-queries-example.md)</ept>","source":"[Chaining Queries Example (C#)](../../../../csharp/programming-guide/concepts/linq/chaining-queries-example.md)"},{"content":"Shows how deferred execution works when chaining queries together.","pos":[1083,1149]},{"pos":[1154,1273],"content":"<bpt id=\"p1\">[</bpt>Intermediate Materialization (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/intermediate-materialization.md)</ept>","source":"[Intermediate Materialization (C#)](../../../../csharp/programming-guide/concepts/linq/intermediate-materialization.md)"},{"content":"Identifies and illustrates the semantics of intermediate materialization.","pos":[1274,1347]},{"pos":[1352,1499],"content":"<bpt id=\"p1\">[</bpt>Chaining Standard Query Operators Together (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/chaining-standard-query-operators-together.md)</ept>","source":"[Chaining Standard Query Operators Together (C#)](../../../../csharp/programming-guide/concepts/linq/chaining-standard-query-operators-together.md)"},{"content":"Describes the lazy semantics of the standard query operators.","pos":[1500,1561]},{"pos":[1571,1579],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1583,1722],"content":"<bpt id=\"p1\">[</bpt>Pure Functional Transformations of XML (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/pure-functional-transformations-of-xml.md)</ept>","source":"[Pure Functional Transformations of XML (C#)](../../../../csharp/programming-guide/concepts/linq/pure-functional-transformations-of-xml.md)"}]}