{"content":"---\ntitle: \"Retrieving the Paragraphs and Their Styles (C#)\"\nms.date: 07/20/2015\nms.assetid: c2f767f8-57b1-4b4b-af04-89ffb1f7067d\n---\n# Retrieving the Paragraphs and Their Styles (C#)\nIn this example, we write a query that retrieves the paragraph nodes from a WordprocessingML document. It also identifies the style of each paragraph.  \n  \n This query builds on the query in the previous example, [Finding the Default Paragraph Style (C#)](../../../../csharp/programming-guide/concepts/linq/finding-the-default-paragraph-style.md), which retrieves the default style from the list of styles. This information is required so that the query can identify the style of paragraphs that do not have a style explicitly set. Paragraph styles are set through the `w:pPr` element; if a paragraph does not contain this element, it is formatted with the default style.  \n  \n This topic explains the significance of some pieces of the query, then shows the query as part of a complete, working example.  \n  \n## Example  \n The source of the query to retrieve all the paragraphs in a document and their styles is as follows:  \n  \n```csharp  \nxDoc.Root.Element(w + \"body\").Descendants(w + \"p\")  \n```  \n  \n This expression is similar to the source of the query in the previous example, [Finding the Default Paragraph Style (C#)](../../../../csharp/programming-guide/concepts/linq/finding-the-default-paragraph-style.md). The main difference is that it uses the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis instead of the <xref:System.Xml.Linq.XContainer.Elements%2A> axis. The query uses the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis because in documents that have sections, the paragraphs will not be the direct children of the body element; rather, the paragraphs will be two levels down in the hierarchy. By using the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis, the code will work of whether or not the document uses sections.  \n  \n## Example  \n The query uses a `let` clause to determine the element that contains the style node. If there is no element, then `styleNode` is set to `null`:  \n  \n```csharp  \nlet styleNode = para.Elements(w + \"pPr\").Elements(w + \"pStyle\").FirstOrDefault()  \n```  \n  \n The `let` clause first uses the <xref:System.Xml.Linq.XContainer.Elements%2A> axis to find all elements named `pPr`, then uses the <xref:System.Xml.Linq.Extensions.Elements%2A> extension method to find all child elements named `pStyle`, and finally uses the <xref:System.Linq.Enumerable.FirstOrDefault%2A> standard query operator to convert the collection to a singleton. If the collection is empty, `styleNode` is set to `null`. This is a useful idiom to look for the `pStyle` descendant node. Note that if the `pPr` child node does not exist, the code does nor fail by throwing an exception; instead, `styleNode` is set to `null`, which is the desired behavior of this `let` clause.  \n  \n The query projects a collection of an anonymous type with two members, `StyleName` and `ParagraphNode`.  \n  \n## Example  \n This example processes a WordprocessingML document, retrieving the paragraph nodes from a WordprocessingML document. It also identifies the style of each paragraph. This example builds on the previous examples in this tutorial. The new query is called out in comments in the code below.  \n  \n You can find instructions for creating the source document for this example in [Creating the Source Office Open XML Document (C#)](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md).  \n  \n This example uses classes found in the WindowsBase assembly. It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace.  \n  \n```csharp  \nconst string fileName = \"SampleDoc.docx\";  \n  \nconst string documentRelationshipType = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\";  \nconst string stylesRelationshipType = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\";  \nconst string wordmlNamespace = \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\";  \nXNamespace w = wordmlNamespace;  \n  \nXDocument xDoc = null;  \nXDocument styleDoc = null;  \n  \nusing (Package wdPackage = Package.Open(fileName, FileMode.Open, FileAccess.Read))  \n{  \n    PackageRelationship docPackageRelationship = wdPackage.GetRelationshipsByType(documentRelationshipType).FirstOrDefault();  \n    if (docPackageRelationship != null)  \n    {  \n        Uri documentUri = PackUriHelper.ResolvePartUri(new Uri(\"/\", UriKind.Relative), docPackageRelationship.TargetUri);  \n        PackagePart documentPart = wdPackage.GetPart(documentUri);  \n  \n        //  Load the document XML in the part into an XDocument instance.  \n        xDoc = XDocument.Load(XmlReader.Create(documentPart.GetStream()));  \n  \n        //  Find the styles part. There will only be one.  \n        PackageRelationship styleRelation = documentPart.GetRelationshipsByType(stylesRelationshipType).FirstOrDefault();  \n        if (styleRelation != null)  \n        {  \n            Uri styleUri = PackUriHelper.ResolvePartUri(documentUri, styleRelation.TargetUri);  \n            PackagePart stylePart = wdPackage.GetPart(styleUri);  \n  \n            //  Load the style XML in the part into an XDocument instance.  \n            styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()));  \n        }  \n    }  \n}  \n  \nstring defaultStyle =   \n    (string)(  \n        from style in styleDoc.Root.Elements(w + \"style\")  \n        where (string)style.Attribute(w + \"type\") == \"paragraph\"&&  \n              (string)style.Attribute(w + \"default\") == \"1\"  \n              select style  \n    ).First().Attribute(w + \"styleId\");  \n  \n// Following is the new query that finds all paragraphs in the  \n// document and their styles.  \nvar paragraphs =  \n    from para in xDoc  \n                 .Root  \n                 .Element(w + \"body\")  \n                 .Descendants(w + \"p\")  \n    let styleNode = para  \n                    .Elements(w + \"pPr\")  \n                    .Elements(w + \"pStyle\")  \n                    .FirstOrDefault()  \n    select new  \n    {  \n        ParagraphNode = para,  \n        StyleName = styleNode != null ?  \n            (string)styleNode.Attribute(w + \"val\") :  \n            defaultStyle  \n    };  \n  \nforeach (var p in paragraphs)  \n    Console.WriteLine(\"StyleName:{0}\", p.StyleName);  \n```  \n  \n This example produces the following output when applied to the document described in [Creating the Source Office Open XML Document (C#)](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md).  \n  \n```  \nStyleName:Heading1  \nStyleName:Normal  \nStyleName:Normal  \nStyleName:Normal  \nStyleName:Code  \nStyleName:Code  \nStyleName:Code  \nStyleName:Code  \nStyleName:Code  \nStyleName:Code  \nStyleName:Code  \nStyleName:Normal  \nStyleName:Normal  \nStyleName:Normal  \nStyleName:Code  \n```  \n  \n## Next Steps  \n In the next topic, [Retrieving the Text of the Paragraphs (C#)](../../../../csharp/programming-guide/concepts/linq/retrieving-the-text-of-the-paragraphs.md), you'll create a query to retrieve the text of paragraphs.  \n  \n## See also\n\n- [Tutorial: Manipulating Content in a WordprocessingML Document (C#)](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)\n","nodes":[{"pos":[4,129],"embed":true,"restype":"x-metadata","content":"title: \"Retrieving the Paragraphs and Their Styles (C#)\"\nms.date: 07/20/2015\nms.assetid: c2f767f8-57b1-4b4b-af04-89ffb1f7067d","nodes":[{"content":"Retrieving the Paragraphs and Their Styles (C#)","nodes":[{"pos":[0,47],"content":"Retrieving the Paragraphs and Their Styles (C#)","nodes":[{"content":"Retrieving the Paragraphs and Their Styles (C#)","pos":[0,47]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[136,183],"content":"Retrieving the Paragraphs and Their Styles (C#)","linkify":"Retrieving the Paragraphs and Their Styles (C#)","nodes":[{"content":"Retrieving the Paragraphs and Their Styles (C#)","pos":[0,47]}]},{"content":"In this example, we write a query that retrieves the paragraph nodes from a WordprocessingML document.","pos":[184,286]},{"content":"It also identifies the style of each paragraph.","pos":[287,334]},{"content":"This query builds on the query in the previous example, <bpt id=\"p1\">[</bpt>Finding the Default Paragraph Style (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/finding-the-default-paragraph-style.md)</ept>, which retrieves the default style from the list of styles.","pos":[341,590],"source":"This query builds on the query in the previous example, [Finding the Default Paragraph Style (C#)](../../../../csharp/programming-guide/concepts/linq/finding-the-default-paragraph-style.md), which retrieves the default style from the list of styles."},{"content":"This information is required so that the query can identify the style of paragraphs that do not have a style explicitly set.","pos":[591,715]},{"content":"Paragraph styles are set through the <ph id=\"ph1\">`w:pPr`</ph> element; if a paragraph does not contain this element, it is formatted with the default style.","pos":[716,855],"source":" Paragraph styles are set through the `w:pPr` element; if a paragraph does not contain this element, it is formatted with the default style."},{"content":"This topic explains the significance of some pieces of the query, then shows the query as part of a complete, working example.","pos":[862,988]},{"pos":[997,1004],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The source of the query to retrieve all the paragraphs in a document and their styles is as follows:","pos":[1008,1108]},{"content":"This expression is similar to the source of the query in the previous example, <bpt id=\"p1\">[</bpt>Finding the Default Paragraph Style (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/finding-the-default-paragraph-style.md)</ept>.","pos":[1189,1402],"source":"This expression is similar to the source of the query in the previous example, [Finding the Default Paragraph Style (C#)](../../../../csharp/programming-guide/concepts/linq/finding-the-default-paragraph-style.md)."},{"content":"The main difference is that it uses the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis instead of the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XContainer.Elements%2A&gt;</ph> axis.","pos":[1403,1563],"source":" The main difference is that it uses the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis instead of the <xref:System.Xml.Linq.XContainer.Elements%2A> axis."},{"content":"The query uses the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis because in documents that have sections, the paragraphs will not be the direct children of the body element; rather, the paragraphs will be two levels down in the hierarchy.","pos":[1564,1810],"source":" The query uses the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis because in documents that have sections, the paragraphs will not be the direct children of the body element; rather, the paragraphs will be two levels down in the hierarchy."},{"content":"By using the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis, the code will work of whether or not the document uses sections.","pos":[1811,1943],"source":" By using the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis, the code will work of whether or not the document uses sections."},{"pos":[1952,1959],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The query uses a <ph id=\"ph1\">`let`</ph> clause to determine the element that contains the style node.","pos":[1963,2047],"source":"The query uses a `let` clause to determine the element that contains the style node."},{"content":"If there is no element, then <ph id=\"ph1\">`styleNode`</ph> is set to <ph id=\"ph2\">`null`</ph>:","pos":[2048,2106],"source":" If there is no element, then `styleNode` is set to `null`:"},{"content":"The <ph id=\"ph1\">`let`</ph> clause first uses the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XContainer.Elements%2A&gt;</ph> axis to find all elements named <ph id=\"ph3\">`pPr`</ph>, then uses the <ph id=\"ph4\">&lt;xref:System.Xml.Linq.Extensions.Elements%2A&gt;</ph> extension method to find all child elements named <ph id=\"ph5\">`pStyle`</ph>, and finally uses the <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> standard query operator to convert the collection to a singleton.","pos":[2217,2588],"source":"The `let` clause first uses the <xref:System.Xml.Linq.XContainer.Elements%2A> axis to find all elements named `pPr`, then uses the <xref:System.Xml.Linq.Extensions.Elements%2A> extension method to find all child elements named `pStyle`, and finally uses the <xref:System.Linq.Enumerable.FirstOrDefault%2A> standard query operator to convert the collection to a singleton."},{"content":"If the collection is empty, <ph id=\"ph1\">`styleNode`</ph> is set to <ph id=\"ph2\">`null`</ph>.","pos":[2589,2646],"source":" If the collection is empty, `styleNode` is set to `null`."},{"content":"This is a useful idiom to look for the <ph id=\"ph1\">`pStyle`</ph> descendant node.","pos":[2647,2711],"source":" This is a useful idiom to look for the `pStyle` descendant node."},{"content":"Note that if the <ph id=\"ph1\">`pPr`</ph> child node does not exist, the code does nor fail by throwing an exception; instead, <ph id=\"ph2\">`styleNode`</ph> is set to <ph id=\"ph3\">`null`</ph>, which is the desired behavior of this <ph id=\"ph4\">`let`</ph> clause.","pos":[2712,2901],"source":" Note that if the `pPr` child node does not exist, the code does nor fail by throwing an exception; instead, `styleNode` is set to `null`, which is the desired behavior of this `let` clause."},{"pos":[2908,3011],"content":"The query projects a collection of an anonymous type with two members, <ph id=\"ph1\">`StyleName`</ph> and <ph id=\"ph2\">`ParagraphNode`</ph>.","source":"The query projects a collection of an anonymous type with two members, `StyleName` and `ParagraphNode`."},{"pos":[3020,3027],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example processes a WordprocessingML document, retrieving the paragraph nodes from a WordprocessingML document.","pos":[3031,3147]},{"content":"It also identifies the style of each paragraph.","pos":[3148,3195]},{"content":"This example builds on the previous examples in this tutorial.","pos":[3196,3258]},{"content":"The new query is called out in comments in the code below.","pos":[3259,3317]},{"pos":[3324,3555],"content":"You can find instructions for creating the source document for this example in <bpt id=\"p1\">[</bpt>Creating the Source Office Open XML Document (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>.","source":"You can find instructions for creating the source document for this example in [Creating the Source Office Open XML Document (C#)](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)."},{"content":"This example uses classes found in the WindowsBase assembly.","pos":[3562,3622]},{"content":"It uses types in the <ph id=\"ph1\">&lt;xref:System.IO.Packaging?displayProperty=nameWithType&gt;</ph> namespace.","pos":[3623,3710],"source":" It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace."},{"pos":[6415,6652],"content":"This example produces the following output when applied to the document described in <bpt id=\"p1\">[</bpt>Creating the Source Office Open XML Document (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>.","source":"This example produces the following output when applied to the document described in [Creating the Source Office Open XML Document (C#)](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)."},{"pos":[6947,6957],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"pos":[6961,7176],"content":"In the next topic, <bpt id=\"p1\">[</bpt>Retrieving the Text of the Paragraphs (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/retrieving-the-text-of-the-paragraphs.md)</ept>, you'll create a query to retrieve the text of paragraphs.","source":"In the next topic, [Retrieving the Text of the Paragraphs (C#)](../../../../csharp/programming-guide/concepts/linq/retrieving-the-text-of-the-paragraphs.md), you'll create a query to retrieve the text of paragraphs."},{"pos":[7185,7193],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7197,7381],"content":"<bpt id=\"p1\">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept>","source":"[Tutorial: Manipulating Content in a WordprocessingML Document (C#)](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)"}]}