{"content":"---\ntitle: Debug your Hello World .NET Core application with Visual Studio 2017\ndescription: Learn how to debug a Hello World app written in C# or Visual Basic with Visual Studio 2017.\nms.date: 12/15/2017\nms.custom: \"vs-dotnet, seodec18\"\n---\n# Debug your C# or Visual Basic .NET Core Hello World application using Visual Studio 2017\n\nSo far, you've followed the steps in [Build a C# Hello World Application with .NET Core in Visual Studio 2017](with-visual-studio.md) or [Build a Visual Basic Hello World Application with .NET Core in Visual Studio 2017](vb-with-visual-studio.md) to create and run a simple console application. Once you've written and compiled your application, you can begin testing it. Visual Studio includes a comprehensive set of debugging tools that you can use when testing and troubleshooting your application.\n\n## Debugging in Debug mode\n\n*Debug* and *Release* are two of Visual Studio's default build configurations. The current build configuration is shown on the toolbar. The following toolbar image shows that Visual Studio is configured to compile your application in **Debug** mode.\n\n   ![default Visual Studio toolbar with debug highlighted](./media/debugging-with-visual-studio/visual-studio-toolbar-debug.png)\n\nYou should always begin by testing your program in Debug mode. Debug mode turns off most compiler optimizations and provides richer information during the build process.\n\n## Setting a breakpoint\n\nRun your program in Debug mode and try a few debugging features:\n\n# [C#](#tab/csharp)\n1. A *breakpoint* temporarily interrupts the execution of the application *before* the line with the breakpoint is executed. \n\n   Set a breakpoint on the line that reads `Console.WriteLine($\"\\nHello, {name}, on {date:d} at {date:t}!\");` by clicking in the left margin of the code window on that line or by choosing the **Debug** > **Toggle Breakpoint** menu item with the line selected. As the following figure shows, Visual Studio indicates the line on which the breakpoint is set by highlighting it and displaying a red circle in its left margin.\n\n   ![Visual Studio Program window with breakpoint set](./media/debugging-with-visual-studio/set-breakpoint-in-editor.png)\n\n1. Run the program in Debug mode by selecting the **HelloWorld** button with the green arrow on the toolbar, pressing F5, or choosing **Debug** > **Start Debugging**.\n\n1. Enter a string in the console window when the program prompts for a name and press Enter.\n\n1. Program execution stops when it reaches the breakpoint and before the `Console.WriteLine` method executes. The **Autos** window displays the values of variables that are used around the current line. The **Locals** window (which you can view by clicking the **Locals** tab) displays the values of variables that are defined in the currently executing method.\n\n   ![Screenshot of a breakpoint in Visual Studio.](./media/debugging-with-visual-studio/breakpoint-console-window.png)\n\n1. You can change the value of the variables to see how it affects your program. If the **Immediate Window** is not visible, display it by choosing the **Debug** > **Windows** > **Immediate** menu item. The **Immediate Window** lets you interact with the application you're debugging.\n\n1. You can interactively change the values of variables. Enter `name = \"Gracie\"` in the **Immediate Window** and press the Enter key.\n\n1. Enter `date = new DateTime(2016,11,01,11,59,00)` in the **Immediate Window** and press the Enter key.\n\n   The **Immediate Window** displays the value of the string variable and the properties of the <xref:System.DateTime> value. In addition, the value of the variables is updated in the **Autos** and **Locals** windows.\n\n   ![Autos window and Immediate Window](./media/debugging-with-visual-studio/autos-immediate-window.png)\n\n1. Continue program execution by selecting the **Continue** button in the toolbar or by selecting the **Debug** > **Continue** menu item. The values displayed in the console window correspond to the changes you made in the **Immediate Window**.\n\n   ![Console window showing the value Jack at the What is your name? prompt followed by Hello Gracie](./media/debugging-with-visual-studio/debug-changed-value.png)\n\n1. Press any key to exit the application and end Debug mode.\n# [Visual Basic](#tab/vb)\n1. A *breakpoint* temporarily interrupts the execution of the application *before* the line with the breakpoint is executed. \n\n   Set a breakpoint on the line that reads `Console.WriteLine(vbCrLf + $\"Hello, {name}, on {currentDate:d} at {currentDate:t}!\")` by clicking in the left margin of the code window on that line or by choosing the **Debug** > **Toggle Breakpoint** menu item with the line selected. As the following figure shows, Visual Studio indicates the line on which the breakpoint is set by highlighting it and displaying a red circle in its left margin.\n\n   ![Visual Studio Program window with breakpoint set](./media/debugging-with-visual-studio/vb-set-breakpoint-in-editor.png)\n\n1. Run the program in Debug mode by selecting the **HelloWorld** button with the green arrow on the toolbar, pressing F5, or choosing **Debug** > **Start Debugging**.\n\n1. Enter a string in the console window when the program prompts for a name and press Enter.\n\n1. Program execution stops when it reaches the breakpoint and before the `Console.WriteLine` method executes. The **Autos** window displays the values of variables that are used around the current line. The **Locals** window (which you can view by clicking the **Locals** tab) displays the values of variables that are defined in the currently executing method.\n\n   ![Visual Studio application window at breakpoint](./media/debugging-with-visual-studio/vb-stop-at-breakpoint.png)\n\n1. You can change the value of the variables to see how it affects your program. If the **Immediate Window** is not visible, display it by choosing the **Debug** > **Windows** > **Immediate** menu item. The **Immediate Window** lets you interact with the application you're debugging.\n\n1. You can interactively change the values of variables. Enter `name = \"Gracie\"` in the **Immediate Window** and press the Enter key.\n\n1. Enter `currentDate = new DateTime(2016,11,01,11,59,00)` in the **Immediate Window** and press the Enter key.\n\n1. Continue program execution by selecting the **Continue** button in the toolbar or by selecting the **Debug** > **Continue** menu item. The values displayed in the console window correspond to the changes you made in the **Immediate Window**.\n\n   ![Console window showing the changed values entered in the Immediate Window](./media/debugging-with-visual-studio/debug-changed-value.png)\n\n1. Press any key to exit the application and end Debug mode.\n---\n\n## Setting a conditional breakpoint\n\nYour program displays the string that the user enters. What happens if the user doesn't enter anything? You can test this with a useful debugging feature, the *conditional breakpoint*, which breaks program execution when one or more conditions are met.\n\nTo set a conditional breakpoint and test what happens when the user fails to enter a string, do the following:\n\n# [C#](#tab/csharp)\n1. Right-click on the red dot that represents the breakpoint. On the context menu, select **Conditions** to open the **Breakpoint Settings** dialog. Check the box for **Conditions**.\n\n   ![Editor showing breakpoint settings panel - C#](./media/debugging-with-visual-studio/breakpoint-settings.png)\n\n1. For the **Conditional Expression** replace \"e.g. x == 5\" with the following:\n\n   ```csharp\n   String.IsNullOrEmpty(name)\n   ```\n\n   You're testing for a code condition, that the `String.IsNullOrEmpty(name)` method call is `true` either because *name* has not been assigned a value or because its value is an empty string (\"\"). You can also specify a *hit count*, which interrupts program execution before a statement is executed a specified number of times, or a *filter condition*, which interrupts program execution based on such attributes as a thread identifier, process name, or thread name.\n\n1. Select the **Close** button to close the dialog.\n\n1. Run the program in Debug mode.\n\n1. In the console window, press the Enter key when prompted to enter your name.\n\n1. Because the condition we specified, `name` is either `null` or <xref:System.String.Empty?displayProperty=nameWithType>, has been satisfied, program execution stops when it reaches the breakpoint and before the `Console.WriteLine` method executes.\n\n1. Select the **Locals** window, which shows the values of variables that are local to the currently executing method, which is the `Main` method in your program. Observe that the value of the `name` variable is `\"\"`, or <xref:System.String.Empty?displayProperty=nameWithType>.\n\n1. Confirm the value is an empty string by entering the following statement in the **Immediate Window**. The result is `true`.\n\n   ```csharp\n   ? name == String.Empty\n   ```\n\n   ![Immediate Window returning a value of true after the statement is executed - C#](./media/debugging-with-visual-studio/immediate-window-output.png)\n\n1. Select the **Continue** button on the toolbar to continue program execution.\n\n1. Press any key to close the console window and exit Debug mode.\n\n1. Clear the breakpoint by clicking on the dot in the left margin of the code window or by choosing the **Debug > Toggle Breakpoint** menu item with the row selected.\n# [Visual Basic](#tab/vb)\n1. Right-click on the red dot that represents the breakpoint. On the context menu, select **Conditions** to open the **Breakpoint Settings** dialog. Check the box for **Conditions**.\n\n   ![Editor showing breakpoint settings panel - Visual Basic](./media/debugging-with-visual-studio/vb-breakpointsettings.png)\n\n1. For the **Conditional Expression** replace \"e.g. x = 5\" with the following:\n\n   ```vb\n   String.IsNullOrEmpty(name)\n   ```\n\n   You're testing for a code condition, that the `String.IsNullOrEmpty(name)` method call is `True` either because *name* has not been assigned a value or because its value is an empty string (\"\"). You can also specify a *hit count*, which interrupts program execution before a statement is executed a specified number of times, or a *filter condition*, which interrupts program execution based on such attributes as a thread identifier, process name, or thread name.\n\n1. Select the **Close** button to close the dialog.\n\n1. Run the program in Debug mode.\n\n1. In the console window, press the Enter key when prompted to enter your name.\n\n1. Because the condition we specified, `name` is either `null` or <xref:System.String.Empty?displayProperty=nameWithType>, has been satisfied, program execution stops when it reaches the breakpoint and before the `Console.WriteLine` method executes.\n\n1. Select the **Locals** window, which shows the values of variables that are local to the currently executing method, which is the `Main` method in your program. Observe that the value of the `name` variable is `\"\"`, or <xref:System.String.Empty?displayProperty=nameWithType>.\n\n1. Confirm the value is an empty string by entering the following statement in the **Immediate Window**. The result is `true`.\n\n   ```vb\n   ? String.IsNullOrEmpty(name)\n   ```\n  ![Immediate Window returning a value of true after the statement is executed - Visual Basic](./media/debugging-with-visual-studio/vb-immediate-window-output.png)\n\n1. Select the **Continue** button on the toolbar to continue program execution.\n\n1. Press any key to close the console window and exit Debug mode.\n\n1. Clear the breakpoint by clicking on the dot in the left margin of the code window or by choosing the **Debug > Toggle Breakpoint** menu item with the row selected.\n---\n## Stepping through a program\n\nVisual Studio also allows you to step line by line through a program and monitor its execution. Ordinarily, you'd set a breakpoint and use this feature to follow program flow through a small part of your program code. Since your program is small, you can step through the entire program by doing the following:\n\n# [C#](#tab/csharp)\n1. On the menu bar, choose **Debug** > **Step Into** or press the F11 key. Visual Studio highlights and displays an arrow beside the next line of execution.\n\n   ![Visual Studio step into method - C#](./media/debugging-with-visual-studio/step-into-method.png)\n\n   At this point, the **Autos** window shows that your program has defined only one variable, `args`. Because you haven't passed any command-line arguments to the program, its value is an empty string array. In addition, Visual Studio has opened a blank console window.\n\n1. Select **Debug** > **Step Into** or press the F11 key. Visual Studio now highlights the next line of execution. As the figure shows, it has taken less than one millisecond to execute the code between the last statement and this one. `args` remains the only declared variable, and the console window remains blank.\n\n   ![Visual Studio step in method source - C#](./media/debugging-with-visual-studio/step-into-source-method.png)\n\n1. Select **Debug** > **Step Into** or press the F11 key. Visual Studio highlights the statement that includes the `name` variable assignment. The **Autos** window shows that `name` is `null`, and the console window displays the string \"What is your name?\".\n\n1. Respond to the prompt by entering a string in the console window and pressing Enter. The console is unresponsive, and the string you enter isn't displayed in the console window, but the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method will nevertheless capture your input.\n\n1. Select **Debug** > **Step Into** or press the F11 key. Visual Studio highlights the statement that includes the `date` (in C#) or `currentDate` (in Visual Basic) variable assignment. The **Autos** window shows the <xref:System.DateTime.Now?displayProperty=nameWithType> property value and the value returned by the call to the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method. The console window also displays the string entered when the console prompted for input.\n\n1. Select **Debug** > **Step Into** or press the F11 key. The **Autos** window shows the value of the `date` variable after the assignment from the <xref:System.DateTime.Now?displayProperty=nameWithType> property. The console window is unchanged.\n\n1. Select **Debug** > **Step Into** or press the F11 key. Visual Studio calls the <xref:System.Console.WriteLine(System.String,System.Object,System.Object)?displayProperty=nameWithType> method. The values of the `date` (or `currentDate`) and `name` variables appear in the **Autos** window, and the console window displays the formatted string.\n\n1. Select **Debug** > **Step Out** or press Shift and the F11 key. This stops step-by-step execution. The console window displays a message and waits for you to press a key.\n\n1. Press any key to close the console window and exit Debug mode.\n# [Visual Basic](#tab/vb)\n1. On the menu bar, choose **Debug** > **Step Into** or press the F11 key. Visual Studio highlights and displays an arrow beside the next line of execution.\n\n   ![Visual Studio step into method - Visual Basic](./media/debugging-with-visual-studio/vb-step-into-method.png)\n\n   At this point, because you haven't passed any command-line arguments to the program, the **Autos** window shows that the value of the `args` variable is an empty string array. In addition, Visual Studio has opened a blank console window.\n\n1. Select **Debug** > **Step Into** or press the F11 key. Visual Studio now highlights the next line of execution. As the figure shows, it has taken less than one millisecond to execute the code between the last statement and this one. `args` remains the only declared variable, and the console window remains blank.\n\n   ![Visual Studio step into method source - Visual Basic](./media/debugging-with-visual-studio/vb-step-into-source-method.png)\n\n1. Select **Debug** > **Step Into** or press the F11 key. Visual Studio highlights the statement that includes the `name` variable assignment. The **Autos** window shows that `name` is `Nothing`, and the console window displays the string \"What is your name?\".\n\n1. Respond to the prompt by entering a string in the console window and pressing Enter. The console is unresponsive, and the string you enter isn't displayed in the console window, but the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method will nevertheless capture your input.\n\n1. Select **Debug** > **Step Into** or press the F11 key. Visual Studio highlights the statement that includes the `date` (in C#) or `currentDate` (in Visual Basic) variable assignment. The **Autos** window shows the <xref:System.DateTime.Now?displayProperty=nameWithType> property value and the value returned by the call to the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method. The console window also displays the string entered when the console prompted for input.\n\n1. Select **Debug** > **Step Into** or press the F11 key. The **Autos** window shows the value of the `date` variable after the assignment from the <xref:System.DateTime.Now?displayProperty=nameWithType> property. The console window is unchanged.\n\n1. Select **Debug** > **Step Into** or press the F11 key. Visual Studio calls the <xref:System.Console.WriteLine(System.String,System.Object,System.Object)?displayProperty=nameWithType> method. The values of the `date` (or `currentDate`) and `name` variables appear in the **Autos** window, and the console window displays the formatted string.\n\n1. Select **Debug** > **Step Out** or press Shift and the F11 key. This stops step-by-step execution. The console window displays a message and waits for you to press a key.\n\n1. Press any key to close the console window and exit Debug mode.\n---\n\n## Building a Release version\n\nOnce you've tested the Debug build of your application, you should also compile and test the Release version. The Release version incorporates compiler optimizations that can sometimes negatively affect the behavior of an application. For example, compiler optimizations that are designed to improve performance can create race conditions in asynchronous or multithreaded applications.\n\nTo build and test the Release version of your console application, change the build configuration on the toolbar from **Debug** to **Release**.\n\n![default Visual Studio toolbar with debug highlighted](./media/debugging-with-visual-studio/visual-studio-toolbar-release.png)\n\nWhen you press F5 or choose **Build Solution** from the **Build** menu, Visual Studio compiles the Release version of your console application. You can test it as you did the Debug version of the application.\n\nOnce you've finished debugging your application, the next step is to publish a deployable version of your application. For information on how to do this, see [Publish the Hello World application with Visual Studio 2017](publishing-with-visual-studio.md).\n","nodes":[{"pos":[4,237],"embed":true,"restype":"x-metadata","content":"title: Debug your Hello World .NET Core application with Visual Studio 2017\ndescription: Learn how to debug a Hello World app written in C# or Visual Basic with Visual Studio 2017.\nms.date: 12/15/2017\nms.custom: \"vs-dotnet, seodec18\"","nodes":[{"content":"Debug your Hello World .NET Core application with Visual Studio 2017","nodes":[{"pos":[0,68],"content":"Debug your Hello World .NET Core application with Visual Studio 2017","nodes":[{"content":"Debug your Hello World .NET Core application with Visual Studio 2017","pos":[0,68]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to debug a Hello World app written in C# or Visual Basic with Visual Studio 2017.","nodes":[{"pos":[0,91],"content":"Learn how to debug a Hello World app written in C# or Visual Basic with Visual Studio 2017.","nodes":[{"content":"Learn how to debug a Hello World app written in C# or Visual Basic with Visual Studio 2017.","pos":[0,91]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[244,332],"content":"Debug your C# or Visual Basic .NET Core Hello World application using Visual Studio 2017","linkify":"Debug your C# or Visual Basic .NET Core Hello World application using Visual Studio 2017","nodes":[{"content":"Debug your C# or Visual Basic .NET Core Hello World application using Visual Studio 2017","pos":[0,88]}]},{"content":"So far, you've followed the steps in <bpt id=\"p1\">[</bpt>Build a C# Hello World Application with .NET Core in Visual Studio 2017<ept id=\"p1\">](with-visual-studio.md)</ept> or <bpt id=\"p2\">[</bpt>Build a Visual Basic Hello World Application with .NET Core in Visual Studio 2017<ept id=\"p2\">](vb-with-visual-studio.md)</ept> to create and run a simple console application.","pos":[334,628],"source":"So far, you've followed the steps in [Build a C# Hello World Application with .NET Core in Visual Studio 2017](with-visual-studio.md) or [Build a Visual Basic Hello World Application with .NET Core in Visual Studio 2017](vb-with-visual-studio.md) to create and run a simple console application."},{"content":"Once you've written and compiled your application, you can begin testing it.","pos":[629,705]},{"content":"Visual Studio includes a comprehensive set of debugging tools that you can use when testing and troubleshooting your application.","pos":[706,835]},{"pos":[840,863],"content":"Debugging in Debug mode","linkify":"Debugging in Debug mode","nodes":[{"content":"Debugging in Debug mode","pos":[0,23]}]},{"content":"<bpt id=\"p1\">*</bpt>Debug<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>Release<ept id=\"p2\">*</ept> are two of Visual Studio's default build configurations.","pos":[865,943],"source":"*Debug* and *Release* are two of Visual Studio's default build configurations."},{"content":"The current build configuration is shown on the toolbar.","pos":[944,1000]},{"content":"The following toolbar image shows that Visual Studio is configured to compile your application in <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> mode.","pos":[1001,1114],"source":" The following toolbar image shows that Visual Studio is configured to compile your application in **Debug** mode."},{"content":"default Visual Studio toolbar with debug highlighted","pos":[1121,1173]},{"content":"You should always begin by testing your program in Debug mode.","pos":[1246,1308]},{"content":"Debug mode turns off most compiler optimizations and provides richer information during the build process.","pos":[1309,1415]},{"pos":[1420,1440],"content":"Setting a breakpoint","linkify":"Setting a breakpoint","nodes":[{"content":"Setting a breakpoint","pos":[0,20]}]},{"content":"Run your program in Debug mode and try a few debugging features:","pos":[1442,1506]},{"pos":[1510,1527],"content":"<bpt id=\"p1\">[</bpt>C#<ept id=\"p1\">](#tab/csharp)</ept>","linkify":"[C#](#tab/csharp)","source":"[C#](#tab/csharp)"},{"pos":[1531,1652],"content":"A <bpt id=\"p1\">*</bpt>breakpoint<ept id=\"p1\">*</ept> temporarily interrupts the execution of the application <bpt id=\"p2\">*</bpt>before<ept id=\"p2\">*</ept> the line with the breakpoint is executed.","source":"A *breakpoint* temporarily interrupts the execution of the application *before* the line with the breakpoint is executed."},{"content":"Set a breakpoint on the line that reads <ph id=\"ph1\">`Console.WriteLine($\"\\nHello, {name}, on {date:d} at {date:t}!\");`</ph> by clicking in the left margin of the code window on that line or by choosing the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p2\">**</bpt>Toggle Breakpoint<ept id=\"p2\">**</ept> menu item with the line selected.","pos":[1658,1914],"source":"Set a breakpoint on the line that reads `Console.WriteLine($\"\\nHello, {name}, on {date:d} at {date:t}!\");` by clicking in the left margin of the code window on that line or by choosing the **Debug** > **Toggle Breakpoint** menu item with the line selected."},{"content":"As the following figure shows, Visual Studio indicates the line on which the breakpoint is set by highlighting it and displaying a red circle in its left margin.","pos":[1915,2076]},{"content":"Visual Studio Program window with breakpoint set","pos":[2083,2131]},{"pos":[2204,2367],"content":"Run the program in Debug mode by selecting the <bpt id=\"p1\">**</bpt>HelloWorld<ept id=\"p1\">**</ept> button with the green arrow on the toolbar, pressing F5, or choosing <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Start Debugging<ept id=\"p3\">**</ept>.","source":"Run the program in Debug mode by selecting the **HelloWorld** button with the green arrow on the toolbar, pressing F5, or choosing **Debug** > **Start Debugging**."},{"content":"Enter a string in the console window when the program prompts for a name and press Enter.","pos":[2372,2461]},{"content":"Program execution stops when it reaches the breakpoint and before the <ph id=\"ph1\">`Console.WriteLine`</ph> method executes.","pos":[2466,2572],"source":"Program execution stops when it reaches the breakpoint and before the `Console.WriteLine` method executes."},{"content":"The <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window displays the values of variables that are used around the current line.","pos":[2573,2665],"source":" The **Autos** window displays the values of variables that are used around the current line."},{"content":"The <bpt id=\"p1\">**</bpt>Locals<ept id=\"p1\">**</ept> window (which you can view by clicking the <bpt id=\"p2\">**</bpt>Locals<ept id=\"p2\">**</ept> tab) displays the values of variables that are defined in the currently executing method.","pos":[2666,2824],"source":" The **Locals** window (which you can view by clicking the **Locals** tab) displays the values of variables that are defined in the currently executing method."},{"content":"Screenshot of a breakpoint in Visual Studio.","pos":[2831,2875]},{"content":"You can change the value of the variables to see how it affects your program.","pos":[2949,3026]},{"content":"If the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept> is not visible, display it by choosing the <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Windows<ept id=\"p3\">**</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p4\">**</bpt>Immediate<ept id=\"p4\">**</ept> menu item.","pos":[3027,3148],"source":" If the **Immediate Window** is not visible, display it by choosing the **Debug** > **Windows** > **Immediate** menu item."},{"content":"The <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept> lets you interact with the application you're debugging.","pos":[3149,3230],"source":" The **Immediate Window** lets you interact with the application you're debugging."},{"content":"You can interactively change the values of variables.","pos":[3235,3288]},{"content":"Enter <ph id=\"ph1\">`name = \"Gracie\"`</ph> in the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept> and press the Enter key.","pos":[3289,3365],"source":" Enter `name = \"Gracie\"` in the **Immediate Window** and press the Enter key."},{"pos":[3370,3471],"content":"Enter <ph id=\"ph1\">`date = new DateTime(2016,11,01,11,59,00)`</ph> in the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept> and press the Enter key.","source":"Enter `date = new DateTime(2016,11,01,11,59,00)` in the **Immediate Window** and press the Enter key."},{"content":"The <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept> displays the value of the string variable and the properties of the <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value.","pos":[3476,3598],"source":"The **Immediate Window** displays the value of the string variable and the properties of the <xref:System.DateTime> value."},{"content":"In addition, the value of the variables is updated in the <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Locals<ept id=\"p2\">**</ept> windows.","pos":[3599,3690],"source":" In addition, the value of the variables is updated in the **Autos** and **Locals** windows."},{"content":"Autos window and Immediate Window","pos":[3697,3730]},{"content":"Continue program execution by selecting the <bpt id=\"p1\">**</bpt>Continue<ept id=\"p1\">**</ept> button in the toolbar or by selecting the <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Continue<ept id=\"p3\">**</ept> menu item.","pos":[3801,3935],"source":"Continue program execution by selecting the **Continue** button in the toolbar or by selecting the **Debug** > **Continue** menu item."},{"content":"The values displayed in the console window correspond to the changes you made in the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept>.","pos":[3936,4042],"source":" The values displayed in the console window correspond to the changes you made in the **Immediate Window**."},{"content":"Console window showing the value Jack at the What is your name? prompt followed by Hello Gracie","pos":[4049,4144]},{"content":"Press any key to exit the application and end Debug mode.","pos":[4212,4269]},{"pos":[4272,4295],"content":"<bpt id=\"p1\">[</bpt>Visual Basic<ept id=\"p1\">](#tab/vb)</ept>","linkify":"[Visual Basic](#tab/vb)","source":"[Visual Basic](#tab/vb)"},{"pos":[4299,4420],"content":"A <bpt id=\"p1\">*</bpt>breakpoint<ept id=\"p1\">*</ept> temporarily interrupts the execution of the application <bpt id=\"p2\">*</bpt>before<ept id=\"p2\">*</ept> the line with the breakpoint is executed.","source":"A *breakpoint* temporarily interrupts the execution of the application *before* the line with the breakpoint is executed."},{"content":"Set a breakpoint on the line that reads <ph id=\"ph1\">`Console.WriteLine(vbCrLf + $\"Hello, {name}, on {currentDate:d} at {currentDate:t}!\")`</ph> by clicking in the left margin of the code window on that line or by choosing the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p2\">**</bpt>Toggle Breakpoint<ept id=\"p2\">**</ept> menu item with the line selected.","pos":[4426,4702],"source":"Set a breakpoint on the line that reads `Console.WriteLine(vbCrLf + $\"Hello, {name}, on {currentDate:d} at {currentDate:t}!\")` by clicking in the left margin of the code window on that line or by choosing the **Debug** > **Toggle Breakpoint** menu item with the line selected."},{"content":"As the following figure shows, Visual Studio indicates the line on which the breakpoint is set by highlighting it and displaying a red circle in its left margin.","pos":[4703,4864]},{"content":"Visual Studio Program window with breakpoint set","pos":[4871,4919]},{"pos":[4995,5158],"content":"Run the program in Debug mode by selecting the <bpt id=\"p1\">**</bpt>HelloWorld<ept id=\"p1\">**</ept> button with the green arrow on the toolbar, pressing F5, or choosing <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Start Debugging<ept id=\"p3\">**</ept>.","source":"Run the program in Debug mode by selecting the **HelloWorld** button with the green arrow on the toolbar, pressing F5, or choosing **Debug** > **Start Debugging**."},{"content":"Enter a string in the console window when the program prompts for a name and press Enter.","pos":[5163,5252]},{"content":"Program execution stops when it reaches the breakpoint and before the <ph id=\"ph1\">`Console.WriteLine`</ph> method executes.","pos":[5257,5363],"source":"Program execution stops when it reaches the breakpoint and before the `Console.WriteLine` method executes."},{"content":"The <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window displays the values of variables that are used around the current line.","pos":[5364,5456],"source":" The **Autos** window displays the values of variables that are used around the current line."},{"content":"The <bpt id=\"p1\">**</bpt>Locals<ept id=\"p1\">**</ept> window (which you can view by clicking the <bpt id=\"p2\">**</bpt>Locals<ept id=\"p2\">**</ept> tab) displays the values of variables that are defined in the currently executing method.","pos":[5457,5615],"source":" The **Locals** window (which you can view by clicking the **Locals** tab) displays the values of variables that are defined in the currently executing method."},{"content":"Visual Studio application window at breakpoint","pos":[5622,5668]},{"content":"You can change the value of the variables to see how it affects your program.","pos":[5738,5815]},{"content":"If the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept> is not visible, display it by choosing the <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Windows<ept id=\"p3\">**</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p4\">**</bpt>Immediate<ept id=\"p4\">**</ept> menu item.","pos":[5816,5937],"source":" If the **Immediate Window** is not visible, display it by choosing the **Debug** > **Windows** > **Immediate** menu item."},{"content":"The <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept> lets you interact with the application you're debugging.","pos":[5938,6019],"source":" The **Immediate Window** lets you interact with the application you're debugging."},{"content":"You can interactively change the values of variables.","pos":[6024,6077]},{"content":"Enter <ph id=\"ph1\">`name = \"Gracie\"`</ph> in the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept> and press the Enter key.","pos":[6078,6154],"source":" Enter `name = \"Gracie\"` in the **Immediate Window** and press the Enter key."},{"pos":[6159,6267],"content":"Enter <ph id=\"ph1\">`currentDate = new DateTime(2016,11,01,11,59,00)`</ph> in the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept> and press the Enter key.","source":"Enter `currentDate = new DateTime(2016,11,01,11,59,00)` in the **Immediate Window** and press the Enter key."},{"content":"Continue program execution by selecting the <bpt id=\"p1\">**</bpt>Continue<ept id=\"p1\">**</ept> button in the toolbar or by selecting the <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Continue<ept id=\"p3\">**</ept> menu item.","pos":[6272,6406],"source":"Continue program execution by selecting the **Continue** button in the toolbar or by selecting the **Debug** > **Continue** menu item."},{"content":"The values displayed in the console window correspond to the changes you made in the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept>.","pos":[6407,6513],"source":" The values displayed in the console window correspond to the changes you made in the **Immediate Window**."},{"content":"Console window showing the changed values entered in the Immediate Window","pos":[6520,6593]},{"content":"Press any key to exit the application and end Debug mode.","pos":[6661,6718]},{"pos":[6727,6759],"content":"Setting a conditional breakpoint","linkify":"Setting a conditional breakpoint","nodes":[{"content":"Setting a conditional breakpoint","pos":[0,32]}]},{"content":"Your program displays the string that the user enters.","pos":[6761,6815]},{"content":"What happens if the user doesn't enter anything?","pos":[6816,6864]},{"content":"You can test this with a useful debugging feature, the <bpt id=\"p1\">*</bpt>conditional breakpoint<ept id=\"p1\">*</ept>, which breaks program execution when one or more conditions are met.","pos":[6865,7013],"source":" You can test this with a useful debugging feature, the *conditional breakpoint*, which breaks program execution when one or more conditions are met."},{"content":"To set a conditional breakpoint and test what happens when the user fails to enter a string, do the following:","pos":[7015,7125]},{"pos":[7129,7146],"content":"<bpt id=\"p1\">[</bpt>C#<ept id=\"p1\">](#tab/csharp)</ept>","linkify":"[C#](#tab/csharp)","source":"[C#](#tab/csharp)"},{"content":"Right-click on the red dot that represents the breakpoint.","pos":[7150,7208]},{"content":"On the context menu, select <bpt id=\"p1\">**</bpt>Conditions<ept id=\"p1\">**</ept> to open the <bpt id=\"p2\">**</bpt>Breakpoint Settings<ept id=\"p2\">**</ept> dialog.","pos":[7209,7295],"source":" On the context menu, select **Conditions** to open the **Breakpoint Settings** dialog."},{"content":"Check the box for <bpt id=\"p1\">**</bpt>Conditions<ept id=\"p1\">**</ept>.","pos":[7296,7329],"source":" Check the box for **Conditions**."},{"content":"Editor showing breakpoint settings panel - C#","pos":[7336,7381]},{"pos":[7449,7525],"content":"For the <bpt id=\"p1\">**</bpt>Conditional Expression<ept id=\"p1\">**</ept> replace \"e.g. x == 5\" with the following:","source":"For the **Conditional Expression** replace \"e.g. x == 5\" with the following:"},{"content":"You're testing for a code condition, that the <ph id=\"ph1\">`String.IsNullOrEmpty(name)`</ph> method call is <ph id=\"ph2\">`true`</ph> either because <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> has not been assigned a value or because its value is an empty string (\"\").","pos":[7581,7775],"source":"You're testing for a code condition, that the `String.IsNullOrEmpty(name)` method call is `true` either because *name* has not been assigned a value or because its value is an empty string (\"\")."},{"content":"You can also specify a <bpt id=\"p1\">*</bpt>hit count<ept id=\"p1\">*</ept>, which interrupts program execution before a statement is executed a specified number of times, or a <bpt id=\"p2\">*</bpt>filter condition<ept id=\"p2\">*</ept>, which interrupts program execution based on such attributes as a thread identifier, process name, or thread name.","pos":[7776,8045],"source":" You can also specify a *hit count*, which interrupts program execution before a statement is executed a specified number of times, or a *filter condition*, which interrupts program execution based on such attributes as a thread identifier, process name, or thread name."},{"pos":[8050,8098],"content":"Select the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button to close the dialog.","source":"Select the **Close** button to close the dialog."},{"content":"Run the program in Debug mode.","pos":[8103,8133]},{"content":"In the console window, press the Enter key when prompted to enter your name.","pos":[8138,8214]},{"pos":[8219,8465],"content":"Because the condition we specified, <ph id=\"ph1\">`name`</ph> is either <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, has been satisfied, program execution stops when it reaches the breakpoint and before the <ph id=\"ph4\">`Console.WriteLine`</ph> method executes.","source":"Because the condition we specified, `name` is either `null` or <xref:System.String.Empty?displayProperty=nameWithType>, has been satisfied, program execution stops when it reaches the breakpoint and before the `Console.WriteLine` method executes."},{"content":"Select the <bpt id=\"p1\">**</bpt>Locals<ept id=\"p1\">**</ept> window, which shows the values of variables that are local to the currently executing method, which is the <ph id=\"ph1\">`Main`</ph> method in your program.","pos":[8470,8629],"source":"Select the **Locals** window, which shows the values of variables that are local to the currently executing method, which is the `Main` method in your program."},{"content":"Observe that the value of the <ph id=\"ph1\">`name`</ph> variable is <ph id=\"ph2\">`\"\"`</ph>, or <ph id=\"ph3\">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.","pos":[8630,8744],"source":" Observe that the value of the `name` variable is `\"\"`, or <xref:System.String.Empty?displayProperty=nameWithType>."},{"content":"Confirm the value is an empty string by entering the following statement in the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept>.","pos":[8749,8850],"source":"Confirm the value is an empty string by entering the following statement in the **Immediate Window**."},{"content":"The result is <ph id=\"ph1\">`true`</ph>.","pos":[8851,8872],"source":" The result is `true`."},{"content":"Immediate Window returning a value of true after the statement is executed - C#","pos":[8926,9005]},{"pos":[9077,9153],"content":"Select the <bpt id=\"p1\">**</bpt>Continue<ept id=\"p1\">**</ept> button on the toolbar to continue program execution.","source":"Select the **Continue** button on the toolbar to continue program execution."},{"content":"Press any key to close the console window and exit Debug mode.","pos":[9158,9220]},{"pos":[9225,9388],"content":"Clear the breakpoint by clicking on the dot in the left margin of the code window or by choosing the <bpt id=\"p1\">**</bpt>Debug &gt; Toggle Breakpoint<ept id=\"p1\">**</ept> menu item with the row selected.","source":"Clear the breakpoint by clicking on the dot in the left margin of the code window or by choosing the **Debug > Toggle Breakpoint** menu item with the row selected."},{"pos":[9391,9414],"content":"<bpt id=\"p1\">[</bpt>Visual Basic<ept id=\"p1\">](#tab/vb)</ept>","linkify":"[Visual Basic](#tab/vb)","source":"[Visual Basic](#tab/vb)"},{"content":"Right-click on the red dot that represents the breakpoint.","pos":[9418,9476]},{"content":"On the context menu, select <bpt id=\"p1\">**</bpt>Conditions<ept id=\"p1\">**</ept> to open the <bpt id=\"p2\">**</bpt>Breakpoint Settings<ept id=\"p2\">**</ept> dialog.","pos":[9477,9563],"source":" On the context menu, select **Conditions** to open the **Breakpoint Settings** dialog."},{"content":"Check the box for <bpt id=\"p1\">**</bpt>Conditions<ept id=\"p1\">**</ept>.","pos":[9564,9597],"source":" Check the box for **Conditions**."},{"content":"Editor showing breakpoint settings panel - Visual Basic","pos":[9604,9659]},{"pos":[9729,9804],"content":"For the <bpt id=\"p1\">**</bpt>Conditional Expression<ept id=\"p1\">**</ept> replace \"e.g. x = 5\" with the following:","source":"For the **Conditional Expression** replace \"e.g. x = 5\" with the following:"},{"content":"You're testing for a code condition, that the <ph id=\"ph1\">`String.IsNullOrEmpty(name)`</ph> method call is <ph id=\"ph2\">`True`</ph> either because <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> has not been assigned a value or because its value is an empty string (\"\").","pos":[9856,10050],"source":"You're testing for a code condition, that the `String.IsNullOrEmpty(name)` method call is `True` either because *name* has not been assigned a value or because its value is an empty string (\"\")."},{"content":"You can also specify a <bpt id=\"p1\">*</bpt>hit count<ept id=\"p1\">*</ept>, which interrupts program execution before a statement is executed a specified number of times, or a <bpt id=\"p2\">*</bpt>filter condition<ept id=\"p2\">*</ept>, which interrupts program execution based on such attributes as a thread identifier, process name, or thread name.","pos":[10051,10320],"source":" You can also specify a *hit count*, which interrupts program execution before a statement is executed a specified number of times, or a *filter condition*, which interrupts program execution based on such attributes as a thread identifier, process name, or thread name."},{"pos":[10325,10373],"content":"Select the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button to close the dialog.","source":"Select the **Close** button to close the dialog."},{"content":"Run the program in Debug mode.","pos":[10378,10408]},{"content":"In the console window, press the Enter key when prompted to enter your name.","pos":[10413,10489]},{"pos":[10494,10740],"content":"Because the condition we specified, <ph id=\"ph1\">`name`</ph> is either <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, has been satisfied, program execution stops when it reaches the breakpoint and before the <ph id=\"ph4\">`Console.WriteLine`</ph> method executes.","source":"Because the condition we specified, `name` is either `null` or <xref:System.String.Empty?displayProperty=nameWithType>, has been satisfied, program execution stops when it reaches the breakpoint and before the `Console.WriteLine` method executes."},{"content":"Select the <bpt id=\"p1\">**</bpt>Locals<ept id=\"p1\">**</ept> window, which shows the values of variables that are local to the currently executing method, which is the <ph id=\"ph1\">`Main`</ph> method in your program.","pos":[10745,10904],"source":"Select the **Locals** window, which shows the values of variables that are local to the currently executing method, which is the `Main` method in your program."},{"content":"Observe that the value of the <ph id=\"ph1\">`name`</ph> variable is <ph id=\"ph2\">`\"\"`</ph>, or <ph id=\"ph3\">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.","pos":[10905,11019],"source":" Observe that the value of the `name` variable is `\"\"`, or <xref:System.String.Empty?displayProperty=nameWithType>."},{"content":"Confirm the value is an empty string by entering the following statement in the <bpt id=\"p1\">**</bpt>Immediate Window<ept id=\"p1\">**</ept>.","pos":[11024,11125],"source":"Confirm the value is an empty string by entering the following statement in the **Immediate Window**."},{"content":"The result is <ph id=\"ph1\">`true`</ph>.","pos":[11126,11147],"source":" The result is `true`."},{"content":"Immediate Window returning a value of true after the statement is executed - Visual Basic","pos":[11201,11290]},{"pos":[11365,11441],"content":"Select the <bpt id=\"p1\">**</bpt>Continue<ept id=\"p1\">**</ept> button on the toolbar to continue program execution.","source":"Select the **Continue** button on the toolbar to continue program execution."},{"content":"Press any key to close the console window and exit Debug mode.","pos":[11446,11508]},{"pos":[11513,11676],"content":"Clear the breakpoint by clicking on the dot in the left margin of the code window or by choosing the <bpt id=\"p1\">**</bpt>Debug &gt; Toggle Breakpoint<ept id=\"p1\">**</ept> menu item with the row selected.","source":"Clear the breakpoint by clicking on the dot in the left margin of the code window or by choosing the **Debug > Toggle Breakpoint** menu item with the row selected."},{"pos":[11684,11710],"content":"Stepping through a program","linkify":"Stepping through a program","nodes":[{"content":"Stepping through a program","pos":[0,26]}]},{"content":"Visual Studio also allows you to step line by line through a program and monitor its execution.","pos":[11712,11807]},{"content":"Ordinarily, you'd set a breakpoint and use this feature to follow program flow through a small part of your program code.","pos":[11808,11929]},{"content":"Since your program is small, you can step through the entire program by doing the following:","pos":[11930,12022]},{"pos":[12026,12043],"content":"<bpt id=\"p1\">[</bpt>C#<ept id=\"p1\">](#tab/csharp)</ept>","linkify":"[C#](#tab/csharp)","source":"[C#](#tab/csharp)"},{"content":"On the menu bar, choose <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[12047,12118],"source":"On the menu bar, choose **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio highlights and displays an arrow beside the next line of execution.","pos":[12119,12200]},{"content":"Visual Studio step into method - C#","pos":[12207,12242]},{"content":"At this point, the <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window shows that your program has defined only one variable, <ph id=\"ph1\">`args`</ph>.","pos":[12307,12405],"source":"At this point, the **Autos** window shows that your program has defined only one variable, `args`."},{"content":"Because you haven't passed any command-line arguments to the program, its value is an empty string array.","pos":[12406,12511]},{"content":"In addition, Visual Studio has opened a blank console window.","pos":[12512,12573]},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[12578,12632],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio now highlights the next line of execution.","pos":[12633,12689]},{"content":"As the figure shows, it has taken less than one millisecond to execute the code between the last statement and this one.","pos":[12690,12810]},{"content":"<ph id=\"ph1\">`args`</ph> remains the only declared variable, and the console window remains blank.","pos":[12811,12891],"source":"`args` remains the only declared variable, and the console window remains blank."},{"content":"Visual Studio step in method source - C#","pos":[12898,12938]},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[13010,13064],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio highlights the statement that includes the <ph id=\"ph1\">`name`</ph> variable assignment.","pos":[13065,13149],"source":" Visual Studio highlights the statement that includes the `name` variable assignment."},{"content":"The <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window shows that <ph id=\"ph1\">`name`</ph> is <ph id=\"ph2\">`null`</ph>, and the console window displays the string \"What is your name?\".","pos":[13150,13264],"source":" The **Autos** window shows that `name` is `null`, and the console window displays the string \"What is your name?\"."},{"content":"Respond to the prompt by entering a string in the console window and pressing Enter.","pos":[13269,13353]},{"content":"The console is unresponsive, and the string you enter isn't displayed in the console window, but the <ph id=\"ph1\">&lt;xref:System.Console.ReadLine%2A?displayProperty=nameWithType&gt;</ph> method will nevertheless capture your input.","pos":[13354,13562],"source":" The console is unresponsive, and the string you enter isn't displayed in the console window, but the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method will nevertheless capture your input."},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[13567,13621],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio highlights the statement that includes the <ph id=\"ph1\">`date`</ph> (in C#) or <ph id=\"ph2\">`currentDate`</ph> (in Visual Basic) variable assignment.","pos":[13622,13749],"source":" Visual Studio highlights the statement that includes the `date` (in C#) or `currentDate` (in Visual Basic) variable assignment."},{"content":"The <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window shows the <ph id=\"ph1\">&lt;xref:System.DateTime.Now?displayProperty=nameWithType&gt;</ph> property value and the value returned by the call to the <ph id=\"ph2\">&lt;xref:System.Console.ReadLine%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[13750,13964],"source":" The **Autos** window shows the <xref:System.DateTime.Now?displayProperty=nameWithType> property value and the value returned by the call to the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method."},{"content":"The console window also displays the string entered when the console prompted for input.","pos":[13965,14053]},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[14058,14112],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"The <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window shows the value of the <ph id=\"ph1\">`date`</ph> variable after the assignment from the <ph id=\"ph2\">&lt;xref:System.DateTime.Now?displayProperty=nameWithType&gt;</ph> property.","pos":[14113,14268],"source":" The **Autos** window shows the value of the `date` variable after the assignment from the <xref:System.DateTime.Now?displayProperty=nameWithType> property."},{"content":"The console window is unchanged.","pos":[14269,14301]},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[14306,14360],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio calls the <ph id=\"ph1\">&lt;xref:System.Console.WriteLine(System.String,System.Object,System.Object)?displayProperty=nameWithType&gt;</ph> method.","pos":[14361,14496],"source":" Visual Studio calls the <xref:System.Console.WriteLine(System.String,System.Object,System.Object)?displayProperty=nameWithType> method."},{"content":"The values of the <ph id=\"ph1\">`date`</ph> (or <ph id=\"ph2\">`currentDate`</ph>) and <ph id=\"ph3\">`name`</ph> variables appear in the <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window, and the console window displays the formatted string.","pos":[14497,14647],"source":" The values of the `date` (or `currentDate`) and `name` variables appear in the **Autos** window, and the console window displays the formatted string."},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Out<ept id=\"p2\">**</ept> or press Shift and the F11 key.","pos":[14652,14715],"source":"Select **Debug** > **Step Out** or press Shift and the F11 key."},{"content":"This stops step-by-step execution.","pos":[14716,14750]},{"content":"The console window displays a message and waits for you to press a key.","pos":[14751,14822]},{"content":"Press any key to close the console window and exit Debug mode.","pos":[14827,14889]},{"pos":[14892,14915],"content":"<bpt id=\"p1\">[</bpt>Visual Basic<ept id=\"p1\">](#tab/vb)</ept>","linkify":"[Visual Basic](#tab/vb)","source":"[Visual Basic](#tab/vb)"},{"content":"On the menu bar, choose <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[14919,14990],"source":"On the menu bar, choose **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio highlights and displays an arrow beside the next line of execution.","pos":[14991,15072]},{"content":"Visual Studio step into method - Visual Basic","pos":[15079,15124]},{"content":"At this point, because you haven't passed any command-line arguments to the program, the <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window shows that the value of the <ph id=\"ph1\">`args`</ph> variable is an empty string array.","pos":[15192,15367],"source":"At this point, because you haven't passed any command-line arguments to the program, the **Autos** window shows that the value of the `args` variable is an empty string array."},{"content":"In addition, Visual Studio has opened a blank console window.","pos":[15368,15429]},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[15434,15488],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio now highlights the next line of execution.","pos":[15489,15545]},{"content":"As the figure shows, it has taken less than one millisecond to execute the code between the last statement and this one.","pos":[15546,15666]},{"content":"<ph id=\"ph1\">`args`</ph> remains the only declared variable, and the console window remains blank.","pos":[15667,15747],"source":"`args` remains the only declared variable, and the console window remains blank."},{"content":"Visual Studio step into method source - Visual Basic","pos":[15754,15806]},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[15881,15935],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio highlights the statement that includes the <ph id=\"ph1\">`name`</ph> variable assignment.","pos":[15936,16020],"source":" Visual Studio highlights the statement that includes the `name` variable assignment."},{"content":"The <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window shows that <ph id=\"ph1\">`name`</ph> is <ph id=\"ph2\">`Nothing`</ph>, and the console window displays the string \"What is your name?\".","pos":[16021,16138],"source":" The **Autos** window shows that `name` is `Nothing`, and the console window displays the string \"What is your name?\"."},{"content":"Respond to the prompt by entering a string in the console window and pressing Enter.","pos":[16143,16227]},{"content":"The console is unresponsive, and the string you enter isn't displayed in the console window, but the <ph id=\"ph1\">&lt;xref:System.Console.ReadLine%2A?displayProperty=nameWithType&gt;</ph> method will nevertheless capture your input.","pos":[16228,16436],"source":" The console is unresponsive, and the string you enter isn't displayed in the console window, but the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method will nevertheless capture your input."},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[16441,16495],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio highlights the statement that includes the <ph id=\"ph1\">`date`</ph> (in C#) or <ph id=\"ph2\">`currentDate`</ph> (in Visual Basic) variable assignment.","pos":[16496,16623],"source":" Visual Studio highlights the statement that includes the `date` (in C#) or `currentDate` (in Visual Basic) variable assignment."},{"content":"The <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window shows the <ph id=\"ph1\">&lt;xref:System.DateTime.Now?displayProperty=nameWithType&gt;</ph> property value and the value returned by the call to the <ph id=\"ph2\">&lt;xref:System.Console.ReadLine%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[16624,16838],"source":" The **Autos** window shows the <xref:System.DateTime.Now?displayProperty=nameWithType> property value and the value returned by the call to the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method."},{"content":"The console window also displays the string entered when the console prompted for input.","pos":[16839,16927]},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[16932,16986],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"The <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window shows the value of the <ph id=\"ph1\">`date`</ph> variable after the assignment from the <ph id=\"ph2\">&lt;xref:System.DateTime.Now?displayProperty=nameWithType&gt;</ph> property.","pos":[16987,17142],"source":" The **Autos** window shows the value of the `date` variable after the assignment from the <xref:System.DateTime.Now?displayProperty=nameWithType> property."},{"content":"The console window is unchanged.","pos":[17143,17175]},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Into<ept id=\"p2\">**</ept> or press the F11 key.","pos":[17180,17234],"source":"Select **Debug** > **Step Into** or press the F11 key."},{"content":"Visual Studio calls the <ph id=\"ph1\">&lt;xref:System.Console.WriteLine(System.String,System.Object,System.Object)?displayProperty=nameWithType&gt;</ph> method.","pos":[17235,17370],"source":" Visual Studio calls the <xref:System.Console.WriteLine(System.String,System.Object,System.Object)?displayProperty=nameWithType> method."},{"content":"The values of the <ph id=\"ph1\">`date`</ph> (or <ph id=\"ph2\">`currentDate`</ph>) and <ph id=\"ph3\">`name`</ph> variables appear in the <bpt id=\"p1\">**</bpt>Autos<ept id=\"p1\">**</ept> window, and the console window displays the formatted string.","pos":[17371,17521],"source":" The values of the `date` (or `currentDate`) and `name` variables appear in the **Autos** window, and the console window displays the formatted string."},{"content":"Select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Step Out<ept id=\"p2\">**</ept> or press Shift and the F11 key.","pos":[17526,17589],"source":"Select **Debug** > **Step Out** or press Shift and the F11 key."},{"content":"This stops step-by-step execution.","pos":[17590,17624]},{"content":"The console window displays a message and waits for you to press a key.","pos":[17625,17696]},{"content":"Press any key to close the console window and exit Debug mode.","pos":[17701,17763]},{"pos":[17772,17798],"content":"Building a Release version","linkify":"Building a Release version","nodes":[{"content":"Building a Release version","pos":[0,26]}]},{"content":"Once you've tested the Debug build of your application, you should also compile and test the Release version.","pos":[17800,17909]},{"content":"The Release version incorporates compiler optimizations that can sometimes negatively affect the behavior of an application.","pos":[17910,18034]},{"content":"For example, compiler optimizations that are designed to improve performance can create race conditions in asynchronous or multithreaded applications.","pos":[18035,18185]},{"pos":[18187,18330],"content":"To build and test the Release version of your console application, change the build configuration on the toolbar from <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>Release<ept id=\"p2\">**</ept>.","source":"To build and test the Release version of your console application, change the build configuration on the toolbar from **Debug** to **Release**."},{"content":"default Visual Studio toolbar with debug highlighted","pos":[18334,18386]},{"content":"When you press F5 or choose <bpt id=\"p1\">**</bpt>Build Solution<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Build<ept id=\"p2\">**</ept> menu, Visual Studio compiles the Release version of your console application.","pos":[18461,18604],"source":"When you press F5 or choose **Build Solution** from the **Build** menu, Visual Studio compiles the Release version of your console application."},{"content":"You can test it as you did the Debug version of the application.","pos":[18605,18669]},{"content":"Once you've finished debugging your application, the next step is to publish a deployable version of your application.","pos":[18671,18789]},{"content":"For information on how to do this, see <bpt id=\"p1\">[</bpt>Publish the Hello World application with Visual Studio 2017<ept id=\"p1\">](publishing-with-visual-studio.md)</ept>.","pos":[18790,18925],"source":" For information on how to do this, see [Publish the Hello World application with Visual Studio 2017](publishing-with-visual-studio.md)."}]}