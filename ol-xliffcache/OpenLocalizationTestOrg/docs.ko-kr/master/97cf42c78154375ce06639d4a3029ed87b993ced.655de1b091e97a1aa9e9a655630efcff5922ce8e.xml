{"content":"---\ntitle: Unit testing C# code in .NET Core using dotnet test and xUnit\ndescription: Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.\nauthor: ardalis\nms.author: wiwagn\nms.date: 11/29/2017\nms.custom: \"seodec18\"\n---\n# Unit testing C# in .NET Core using dotnet test and xUnit\n\nThis tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts. If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-using-dotnet-test/) before you begin. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\n## Creating the source project\n\nOpen a shell window. Create a directory called *unit-testing-using-dotnet-test* to hold the solution.\nInside this new directory, run [`dotnet new sln`](../tools/dotnet-new.md) to create a new solution. Having a solution \nmakes it easier to manage both the class library and the unit test project.\nInside the solution directory, create a *PrimeService* directory. The directory and file structure thus far should be as follows:\n\n```\n/unit-testing-using-dotnet-test\n    unit-testing-using-dotnet-test.sln\n    /PrimeService\n```\n\nMake *PrimeService* the current directory and run [`dotnet new classlib`](../tools/dotnet-new.md) to create the source project. Rename *Class1.cs* to *PrimeService.cs*. You first create a failing implementation of the `PrimeService` class:\n\n```csharp\nusing System;\n\nnamespace Prime.Services\n{\n    public class PrimeService\n    {\n        public bool IsPrime(int candidate)\n        {\n            throw new NotImplementedException(\"Please create a test first\");\n        }\n    }\n}\n```\n\nChange the directory back to the *unit-testing-using-dotnet-test* directory.\n\nRun the [dotnet sln](../tools/dotnet-sln.md) command to add the class library project to the solution:\n\n```\ndotnet sln add ./PrimeService/PrimeService.csproj\n```\n\n## Creating the test project\n\nNext, create the *PrimeService.Tests* directory. The following outline shows the directory structure:\n\n```\n/unit-testing-using-dotnet-test\n    unit-testing-using-dotnet-test.sln\n    /PrimeService\n        Source Files\n        PrimeService.csproj\n    /PrimeService.Tests\n```\n\nMake the *PrimeService.Tests* directory the current directory and create a new project using [`dotnet new xunit`](../tools/dotnet-new.md). This command creates a test project that uses [xUnit](https://xunit.github.io/) as the test library. The generated template configures the test runner in the *PrimeServiceTests.csproj* file similar to the following code:\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.3.0\" />\n  <PackageReference Include=\"xunit\" Version=\"2.2.0\" />\n  <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.2.0\" />\n</ItemGroup>\n```\n\nThe test project requires other packages to create and run unit tests. `dotnet new` in the previous step added xUnit and the xUnit runner. Now, add the `PrimeService` class library as another dependency to the project. Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:\n\n```\ndotnet add reference ../PrimeService/PrimeService.csproj\n```\n\nYou can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService.Tests.csproj) on GitHub.\n\nThe following shows the final solution layout:\n\n```\n/unit-testing-using-dotnet-test\n    unit-testing-using-dotnet-test.sln\n    /PrimeService\n        Source Files\n        PrimeService.csproj\n    /PrimeService.Tests\n        Test Source Files\n        PrimeServiceTests.csproj\n```\n\nTo add the test project to the solution, run the [dotnet sln](../tools/dotnet-sln.md) command in the *unit-testing-using-dotnet-test* directory:\n\n```\ndotnet sln add ./PrimeService.Tests/PrimeService.Tests.csproj\n```\n\n## Creating the first test\n\nYou write one failing test, make it pass, then repeat the process. Remove *UnitTest1.cs* from the *PrimeService.Tests* directory and create a new C# file named *PrimeService_IsPrimeShould.cs*. Add the following code:\n\n```csharp\nusing Xunit;\nusing Prime.Services;\n\nnamespace Prime.UnitTests.Services\n{\n    public class PrimeService_IsPrimeShould\n    {\n        private readonly PrimeService _primeService;\n\n        public PrimeService_IsPrimeShould()\n        {\n            _primeService = new PrimeService();\n        }\n\n        [Fact]\n        public void ReturnFalseGivenValueOf1()\n        {\n            var result = _primeService.IsPrime(1);\n\n            Assert.False(result, \"1 should not be prime\");\n        }\n    }\n}\n```\n\nThe `[Fact]` attribute indicates a test method that is run by the test runner. From the *PrimeService.Tests* folder, execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests. The xUnit test runner contains the program entry point to run your tests. `dotnet test` starts the test runner using the unit test project you've created.\n\nYour test fails. You haven't created the implementation yet. Make this test pass by writing the simplest code in the `PrimeService` class that works. Replace the existing `IsPrime` method implementation with the following code:\n\n```csharp\npublic bool IsPrime(int candidate)\n{\n    if (candidate == 1)\n    {\n        return false;\n    }\n    throw new NotImplementedException(\"Please create a test first\");\n}\n```\n\nIn the *PrimeService.Tests* directory, run `dotnet test` again. The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project. After building both projects, it runs this single test. It passes.\n\n## Adding more features\n\nNow that you've made one test pass, it's time to write more. There are a few other simple cases for prime numbers: 0, -1. You could add those cases as new tests with the `[Fact]` attribute, but that quickly becomes tedious. There are other xUnit attributes that enable you to write a suite of similar tests:\n\n- `[Theory]` represents a suite of tests that execute the same code but have different input arguments.\n\n- `[InlineData]` attribute specifies values for those inputs.\n\nInstead of creating new tests, apply these two attributes, `[Theory]` and `[InlineData]`, to create a single theory in the *PrimeService_IsPrimeShould.cs* file. The theory is a method that tests several values less than two, which is the lowest prime number:\n\n[!code-csharp[Sample_TestCode](../../../samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs?name=Sample_TestCode)]\n\nRun `dotnet test` again, and two of these tests should fail. To make all of the tests pass, change the `if` clause at the beginning of the `IsPrime` method in the *PrimeService.cs* file:\n\n```csharp\nif (candidate < 2)\n```\n\nContinue to iterate by adding more tests, more theories, and more code in the main library. You have the [finished version of the tests](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs) and the [complete implementation of the library](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-dotnet-test/PrimeService/PrimeService.cs).\n\n### Additional resources\n\n- [xUnit.net official site](https://xunit.github.io)\n- [Testing controller logic in ASP.NET Core](/aspnet/core/mvc/controllers/testing)\n","nodes":[{"pos":[4,309],"embed":true,"restype":"x-metadata","content":"title: Unit testing C# code in .NET Core using dotnet test and xUnit\ndescription: Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.\nauthor: ardalis\nms.author: wiwagn\nms.date: 11/29/2017\nms.custom: \"seodec18\"","nodes":[{"content":"Unit testing C# code in .NET Core using dotnet test and xUnit","nodes":[{"pos":[0,61],"content":"Unit testing C# code in .NET Core using dotnet test and xUnit","nodes":[{"content":"Unit testing C# code in .NET Core using dotnet test and xUnit","pos":[0,61]}]}],"path":["title"],"nosxs":false},{"content":"Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.","nodes":[{"pos":[0,147],"content":"Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.","nodes":[{"content":"Learn unit test concepts in C# and .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.","pos":[0,147]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[316,372],"content":"Unit testing C# in .NET Core using dotnet test and xUnit","linkify":"Unit testing C# in .NET Core using dotnet test and xUnit","nodes":[{"content":"Unit testing C# in .NET Core using dotnet test and xUnit","pos":[0,56]}]},{"content":"This tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts.","pos":[374,503]},{"content":"If you prefer to follow the tutorial using a pre-built solution, <bpt id=\"p1\">[</bpt>view or download the sample code<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-using-dotnet-test/)</ept> before you begin.","pos":[504,721],"source":" If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-using-dotnet-test/) before you begin."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[722,847],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"pos":[852,879],"content":"Creating the source project","linkify":"Creating the source project","nodes":[{"content":"Creating the source project","pos":[0,27]}]},{"content":"Open a shell window.","pos":[881,901]},{"content":"Create a directory called <bpt id=\"p1\">*</bpt>unit-testing-using-dotnet-test<ept id=\"p1\">*</ept> to hold the solution.","pos":[902,982],"source":" Create a directory called *unit-testing-using-dotnet-test* to hold the solution."},{"content":"Inside this new directory, run <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet new sln`</ph><ept id=\"p1\">](../tools/dotnet-new.md)</ept> to create a new solution.","pos":[983,1082],"source":"\nInside this new directory, run [`dotnet new sln`](../tools/dotnet-new.md) to create a new solution."},{"content":"Having a solution makes it easier to manage both the class library and the unit test project.","pos":[1083,1177],"source":" Having a solution \nmakes it easier to manage both the class library and the unit test project."},{"content":"Inside the solution directory, create a <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> directory.","pos":[1178,1243],"source":"\nInside the solution directory, create a *PrimeService* directory."},{"content":"The directory and file structure thus far should be as follows:","pos":[1244,1307]},{"content":"Make <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> the current directory and run <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new classlib`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept> to create the source project.","pos":[1407,1534],"source":"Make *PrimeService* the current directory and run [`dotnet new classlib`](../tools/dotnet-new.md) to create the source project."},{"content":"Rename <bpt id=\"p1\">*</bpt>Class1.cs<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>PrimeService.cs<ept id=\"p2\">*</ept>.","pos":[1535,1575],"source":" Rename *Class1.cs* to *PrimeService.cs*."},{"content":"You first create a failing implementation of the <ph id=\"ph1\">`PrimeService`</ph> class:","pos":[1576,1646],"source":" You first create a failing implementation of the `PrimeService` class:"},{"pos":[1889,1965],"content":"Change the directory back to the <bpt id=\"p1\">*</bpt>unit-testing-using-dotnet-test<ept id=\"p1\">*</ept> directory.","source":"Change the directory back to the *unit-testing-using-dotnet-test* directory."},{"pos":[1967,2069],"content":"Run the <bpt id=\"p1\">[</bpt>dotnet sln<ept id=\"p1\">](../tools/dotnet-sln.md)</ept> command to add the class library project to the solution:","source":"Run the [dotnet sln](../tools/dotnet-sln.md) command to add the class library project to the solution:"},{"pos":[2133,2158],"content":"Creating the test project","linkify":"Creating the test project","nodes":[{"content":"Creating the test project","pos":[0,25]}]},{"content":"Next, create the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory.","pos":[2160,2208],"source":"Next, create the *PrimeService.Tests* directory."},{"content":"The following outline shows the directory structure:","pos":[2209,2261]},{"content":"Make the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory the current directory and create a new project using <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new xunit`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept>.","pos":[2434,2572],"source":"Make the *PrimeService.Tests* directory the current directory and create a new project using [`dotnet new xunit`](../tools/dotnet-new.md)."},{"content":"This command creates a test project that uses <bpt id=\"p1\">[</bpt>xUnit<ept id=\"p1\">](https://xunit.github.io/)</ept> as the test library.","pos":[2573,2673],"source":" This command creates a test project that uses [xUnit](https://xunit.github.io/) as the test library."},{"content":"The generated template configures the test runner in the <bpt id=\"p1\">*</bpt>PrimeServiceTests.csproj<ept id=\"p1\">*</ept> file similar to the following code:","pos":[2674,2793],"source":" The generated template configures the test runner in the *PrimeServiceTests.csproj* file similar to the following code:"},{"content":"The test project requires other packages to create and run unit tests.","pos":[3035,3105]},{"content":"<ph id=\"ph1\">`dotnet new`</ph> in the previous step added xUnit and the xUnit runner.","pos":[3106,3173],"source":"`dotnet new` in the previous step added xUnit and the xUnit runner."},{"content":"Now, add the <ph id=\"ph1\">`PrimeService`</ph> class library as another dependency to the project.","pos":[3174,3253],"source":" Now, add the `PrimeService` class library as another dependency to the project."},{"content":"Use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add reference`</ph><ept id=\"p1\">](../tools/dotnet-add-reference.md)</ept> command:","pos":[3254,3329],"source":" Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:"},{"pos":[3397,3607],"content":"You can see the entire file in the <bpt id=\"p1\">[</bpt>samples repository<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService.Tests.csproj)</ept> on GitHub.","source":"You can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService.Tests.csproj) on GitHub."},{"content":"The following shows the final solution layout:","pos":[3609,3655]},{"pos":[3887,4031],"content":"To add the test project to the solution, run the <bpt id=\"p1\">[</bpt>dotnet sln<ept id=\"p1\">](../tools/dotnet-sln.md)</ept> command in the <bpt id=\"p2\">*</bpt>unit-testing-using-dotnet-test<ept id=\"p2\">*</ept> directory:","source":"To add the test project to the solution, run the [dotnet sln](../tools/dotnet-sln.md) command in the *unit-testing-using-dotnet-test* directory:"},{"pos":[4107,4130],"content":"Creating the first test","linkify":"Creating the first test","nodes":[{"content":"Creating the first test","pos":[0,23]}]},{"content":"You write one failing test, make it pass, then repeat the process.","pos":[4132,4198]},{"content":"Remove <bpt id=\"p1\">*</bpt>UnitTest1.cs<ept id=\"p1\">*</ept> from the <bpt id=\"p2\">*</bpt>PrimeService.Tests<ept id=\"p2\">*</ept> directory and create a new C# file named <bpt id=\"p3\">*</bpt>PrimeService_IsPrimeShould.cs<ept id=\"p3\">*</ept>.","pos":[4199,4324],"source":" Remove *UnitTest1.cs* from the *PrimeService.Tests* directory and create a new C# file named *PrimeService_IsPrimeShould.cs*."},{"content":"Add the following code:","pos":[4325,4348]},{"content":"The <ph id=\"ph1\">`[Fact]`</ph> attribute indicates a test method that is run by the test runner.","pos":[4856,4934],"source":"The `[Fact]` attribute indicates a test method that is run by the test runner."},{"content":"From the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> folder, execute <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet test`</ph><ept id=\"p2\">](../tools/dotnet-test.md)</ept> to build the tests and the class library and then run the tests.","pos":[4935,5086],"source":" From the *PrimeService.Tests* folder, execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests."},{"content":"The xUnit test runner contains the program entry point to run your tests.","pos":[5087,5160]},{"content":"<ph id=\"ph1\">`dotnet test`</ph> starts the test runner using the unit test project you've created.","pos":[5161,5241],"source":"`dotnet test` starts the test runner using the unit test project you've created."},{"content":"Your test fails.","pos":[5243,5259]},{"content":"You haven't created the implementation yet.","pos":[5260,5303]},{"content":"Make this test pass by writing the simplest code in the <ph id=\"ph1\">`PrimeService`</ph> class that works.","pos":[5304,5392],"source":" Make this test pass by writing the simplest code in the `PrimeService` class that works."},{"content":"Replace the existing <ph id=\"ph1\">`IsPrime`</ph> method implementation with the following code:","pos":[5393,5470],"source":" Replace the existing `IsPrime` method implementation with the following code:"},{"content":"In the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory, run <ph id=\"ph1\">`dotnet test`</ph> again.","pos":[5653,5716],"source":"In the *PrimeService.Tests* directory, run `dotnet test` again."},{"content":"The <ph id=\"ph1\">`dotnet test`</ph> command runs a build for the <ph id=\"ph2\">`PrimeService`</ph> project and then for the <ph id=\"ph3\">`PrimeService.Tests`</ph> project.","pos":[5717,5833],"source":" The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project."},{"content":"After building both projects, it runs this single test.","pos":[5834,5889]},{"content":"It passes.","pos":[5890,5900]},{"pos":[5905,5925],"content":"Adding more features","linkify":"Adding more features","nodes":[{"content":"Adding more features","pos":[0,20]}]},{"content":"Now that you've made one test pass, it's time to write more.","pos":[5927,5987]},{"content":"There are a few other simple cases for prime numbers: 0, -1.","pos":[5988,6048]},{"content":"You could add those cases as new tests with the <ph id=\"ph1\">`[Fact]`</ph> attribute, but that quickly becomes tedious.","pos":[6049,6150],"source":" You could add those cases as new tests with the `[Fact]` attribute, but that quickly becomes tedious."},{"content":"There are other xUnit attributes that enable you to write a suite of similar tests:","pos":[6151,6234]},{"pos":[6238,6339],"content":"<ph id=\"ph1\">`[Theory]`</ph> represents a suite of tests that execute the same code but have different input arguments.","source":"`[Theory]` represents a suite of tests that execute the same code but have different input arguments."},{"pos":[6343,6402],"content":"<ph id=\"ph1\">`[InlineData]`</ph> attribute specifies values for those inputs.","source":"`[InlineData]` attribute specifies values for those inputs."},{"content":"Instead of creating new tests, apply these two attributes, <ph id=\"ph1\">`[Theory]`</ph> and <ph id=\"ph2\">`[InlineData]`</ph>, to create a single theory in the <bpt id=\"p1\">*</bpt>PrimeService_IsPrimeShould.cs<ept id=\"p1\">*</ept> file.","pos":[6404,6564],"source":"Instead of creating new tests, apply these two attributes, `[Theory]` and `[InlineData]`, to create a single theory in the *PrimeService_IsPrimeShould.cs* file."},{"content":"The theory is a method that tests several values less than two, which is the lowest prime number:","pos":[6565,6662]},{"content":"Run <ph id=\"ph1\">`dotnet test`</ph> again, and two of these tests should fail.","pos":[6837,6897],"source":"Run `dotnet test` again, and two of these tests should fail."},{"content":"To make all of the tests pass, change the <ph id=\"ph1\">`if`</ph> clause at the beginning of the <ph id=\"ph2\">`IsPrime`</ph> method in the <bpt id=\"p1\">*</bpt>PrimeService.cs<ept id=\"p1\">*</ept> file:","pos":[6898,7023],"source":" To make all of the tests pass, change the `if` clause at the beginning of the `IsPrime` method in the *PrimeService.cs* file:"},{"content":"Continue to iterate by adding more tests, more theories, and more code in the main library.","pos":[7059,7150]},{"content":"You have the <bpt id=\"p1\">[</bpt>finished version of the tests<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs)</ept> and the <bpt id=\"p2\">[</bpt>complete implementation of the library<ept id=\"p2\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-dotnet-test/PrimeService/PrimeService.cs)</ept>.","pos":[7151,7521],"source":" You have the [finished version of the tests](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs) and the [complete implementation of the library](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-using-dotnet-test/PrimeService/PrimeService.cs)."},{"pos":[7527,7547],"content":"Additional resources","linkify":"Additional resources","nodes":[{"content":"Additional resources","pos":[0,20]}]},{"pos":[7551,7601],"content":"<bpt id=\"p1\">[</bpt>xUnit.net official site<ept id=\"p1\">](https://xunit.github.io)</ept>","source":"[xUnit.net official site](https://xunit.github.io)"},{"pos":[7604,7684],"content":"<bpt id=\"p1\">[</bpt>Testing controller logic in ASP.NET Core<ept id=\"p1\">](/aspnet/core/mvc/controllers/testing)</ept>","source":"[Testing controller logic in ASP.NET Core](/aspnet/core/mvc/controllers/testing)"}]}