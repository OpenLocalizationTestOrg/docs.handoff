<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="linq-and-file-directories.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2153d755b63e1ec14c11b5e94116f7d6b9490f7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\linq-and-file-directories.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0db420899f0afccabd4ce9b83ca9132836b32ffe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29afca40e650f8aac8bcf97b222d390cbd04f37c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>LINQ and File Directories (C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ and File Directories (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Many file system operations are essentially queries and are therefore well-suited to the LINQ approach.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Note that the queries in this section are non-destructive.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They are not used to change the contents of the original files or folders.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This follows the rule that queries should not cause any side-effects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In general, any code (including queries that perform create / update / delete operators) that modifies source data should be kept separate from the code that just queries the data.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This section contains the following topics:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Query for Files with a Specified Attribute or Name (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/how-to-query-for-files-with-a-specified-attribute-or-name.md)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Shows how to search for files by examining one or more properties of its <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Group Files by Extension (LINQ) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Shows how to return groups of <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> object based on their file name extension.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Query for the Total Number of Bytes in a Set of Folders (LINQ) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/how-to-query-for-the-total-number-of-bytes-in-a-set-of-folders-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Shows how to return the total number of bytes in all the files in a specified directory tree.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Compare the Contents of Two Folders (LINQ) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md)</ept>s</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Shows how to return all the files that are present in two specified folders, and also all the files that are present in one folder but not the other.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Query for the Largest File or Files in a Directory Tree (LINQ) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/how-to-query-for-the-largest-file-or-files-in-a-directory-tree-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Shows how to return the largest or smallest file, or a specified number of files, in a directory tree.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Shows how to group for all file names that occur in more than one location in a specified directory tree.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Also shows how to perform more complex comparisons based on a custom comparer.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Query the Contents of Files in a Folder (LINQ) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/how-to-query-the-contents-of-files-in-a-folder-lin.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Shows how to iterate through folders in a tree, open each file, and query the file's contents.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>There is some complexity involved in creating a data source that accurately represents the contents of the file system and handles exceptions gracefully.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The examples in this section create a snapshot collection of <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> objects that represents all the files under a specified root folder and all its subfolders.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The actual state of each <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> may change in the time between when you begin and end executing a query.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, you can create a list of <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> objects to use as a data source.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you try to access the <ph id="ph1">`Length`</ph> property in a query, the <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> object will try to access the file system to update the value of <ph id="ph3">`Length`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the file no longer exists, you will get a <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> in your query, even though you are not querying the file system directly.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Some queries in this section use a separate method that consumes these particular exceptions in certain cases.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Another option is to keep your data source updated dynamically by using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to Objects (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>