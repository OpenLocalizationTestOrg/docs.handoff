{"content":"---\ntitle: \"Client Channel-Level Programming | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 3b787719-4e77-4e77-96a6-5b15a11b995a\ncaps.latest.revision: 6\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Client Channel-Level Programming\nThis topic describes how to write a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] client application without using the <xref:System.ServiceModel.ClientBase%601?displayProperty=fullName> class and its associated object model.  \n  \n## Sending Messages  \n To be ready to send messages and receive and process replies, the following steps are required:  \n  \n1.  Create a binding.  \n  \n2.  Build a channel factory.  \n  \n3.  Create a channel.  \n  \n4.  Send a request and read the reply.  \n  \n5.  Close all channel objects.  \n  \n#### Creating a Binding  \n Similar to the receiving case (see [Service Channel-Level Programming](../../../../docs/framework/wcf/extending/service-channel-level-programming.md)), sending messages starts by creating a binding. This example creates a new <xref:System.ServiceModel.Channels.CustomBinding?displayProperty=fullName> and adds an <xref:System.ServiceModel.Channels.HttpTransportBindingElement?displayProperty=fullName> to its Elements collection.  \n  \n#### Building a ChannelFactory  \n Instead of creating a <xref:System.ServiceModel.Channels.IChannelListener?displayProperty=fullName>, this time we create a <xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName> by calling <xref:System.ServiceModel.ChannelFactory.CreateFactory%2A?displayProperty=fullName> on the binding where the type parameter is <xref:System.ServiceModel.Channels.IRequestChannel?displayProperty=fullName>. While channel listeners are used by the side that waits for incoming messages, channel factories are used by the side that initiates the communication to create a channel. Just like channel listeners, channel factories must be opened first before they can be used.  \n  \n#### Creating a Channel  \n We then call <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=fullName> to create an <xref:System.ServiceModel.Channels.IRequestChannel>. This call takes the address of the endpoint with which we want to communicate using the new channel being created. Once we have a channel, we call Open on it to put it in a state ready for communication. Depending on the nature of the transport, this call to Open may initiate a connection with the target endpoint or may do nothing at all on the network.  \n  \n#### Sending a Request and Reading the Reply  \n Once we have an opened channel, we can create a message and use the channel’s Request method to send the request and wait for the reply to come back. When this method returns, we have a reply message that we can read to find out what the endpoint’s reply was.  \n  \n#### Closing Objects  \n To avoid leaking resources, we close objects used in communications when they are no longer required.  \n  \n The following code example shows a basic client using the channel factory to send a message and read the reply.  \n  \n [!code-csharp[ChannelProgrammingBasic#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/channelprogrammingbasic/cs/clientprogram.cs#2)]\n [!code-vb[ChannelProgrammingBasic#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/channelprogrammingbasic/vb/clientprogram.vb#2)]","nodes":[{"pos":[4,352],"embed":true,"restype":"x-metadata","content":"title: \"Client Channel-Level Programming | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 3b787719-4e77-4e77-96a6-5b15a11b995a\ncaps.latest.revision: 6\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"Client Channel-Level Programming | Microsoft Docs","nodes":[{"pos":[0,49],"content":"Client Channel-Level Programming | Microsoft Docs","nodes":[{"content":"Client Channel-Level Programming | Microsoft Docs","pos":[0,49]}]}],"path":["title"]}],"yml":true},{"pos":[359,391],"content":"Client Channel-Level Programming","linkify":"Client Channel-Level Programming","nodes":[{"content":"Client Channel-Level Programming","pos":[0,32]}]},{"pos":[392,626],"content":"This topic describes how to write a <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> client application without using the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ClientBase%601?displayProperty=fullName&gt;</ph> class and its associated object model.","source":"This topic describes how to write a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] client application without using the <xref:System.ServiceModel.ClientBase%601?displayProperty=fullName> class and its associated object model."},{"pos":[635,651],"content":"Sending Messages","linkify":"Sending Messages","nodes":[{"content":"Sending Messages","pos":[0,16]}]},{"content":"To be ready to send messages and receive and process replies, the following steps are required:","pos":[655,750]},{"content":"Create a binding.","pos":[760,777]},{"content":"Build a channel factory.","pos":[787,811]},{"content":"Create a channel.","pos":[821,838]},{"content":"Send a request and read the reply.","pos":[848,882]},{"content":"Close all channel objects.","pos":[892,918]},{"pos":[929,947],"content":"Creating a Binding","linkify":"Creating a Binding","nodes":[{"content":"Creating a Binding","pos":[0,18]}]},{"content":"Similar to the receiving case (see <bpt id=\"p1\">[</bpt>Service Channel-Level Programming<ept id=\"p1\">](../../../../docs/framework/wcf/extending/service-channel-level-programming.md)</ept>), sending messages starts by creating a binding.","pos":[951,1149],"source":"Similar to the receiving case (see [Service Channel-Level Programming](../../../../docs/framework/wcf/extending/service-channel-level-programming.md)), sending messages starts by creating a binding."},{"content":"This example creates a new <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.CustomBinding?displayProperty=fullName&gt;</ph> and adds an <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.HttpTransportBindingElement?displayProperty=fullName&gt;</ph> to its Elements collection.","pos":[1150,1380],"source":" This example creates a new <xref:System.ServiceModel.Channels.CustomBinding?displayProperty=fullName> and adds an <xref:System.ServiceModel.Channels.HttpTransportBindingElement?displayProperty=fullName> to its Elements collection."},{"pos":[1391,1416],"content":"Building a ChannelFactory","linkify":"Building a ChannelFactory","nodes":[{"content":"Building a ChannelFactory","pos":[0,25]}]},{"content":"Instead of creating a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.IChannelListener?displayProperty=fullName&gt;</ph>, this time we create a <ph id=\"ph2\">&lt;xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName&gt;</ph> by calling <ph id=\"ph3\">&lt;xref:System.ServiceModel.ChannelFactory.CreateFactory%2A?displayProperty=fullName&gt;</ph> on the binding where the type parameter is <ph id=\"ph4\">&lt;xref:System.ServiceModel.Channels.IRequestChannel?displayProperty=fullName&gt;</ph>.","pos":[1420,1829],"source":"Instead of creating a <xref:System.ServiceModel.Channels.IChannelListener?displayProperty=fullName>, this time we create a <xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName> by calling <xref:System.ServiceModel.ChannelFactory.CreateFactory%2A?displayProperty=fullName> on the binding where the type parameter is <xref:System.ServiceModel.Channels.IRequestChannel?displayProperty=fullName>."},{"content":"While channel listeners are used by the side that waits for incoming messages, channel factories are used by the side that initiates the communication to create a channel.","pos":[1830,2001]},{"content":"Just like channel listeners, channel factories must be opened first before they can be used.","pos":[2002,2094]},{"pos":[2105,2123],"content":"Creating a Channel","linkify":"Creating a Channel","nodes":[{"content":"Creating a Channel","pos":[0,18]}]},{"content":"We then call <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=fullName&gt;</ph> to create an <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph>.","pos":[2127,2293],"source":"We then call <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=fullName> to create an <xref:System.ServiceModel.Channels.IRequestChannel>."},{"content":"This call takes the address of the endpoint with which we want to communicate using the new channel being created.","pos":[2294,2408]},{"content":"Once we have a channel, we call Open on it to put it in a state ready for communication.","pos":[2409,2497]},{"content":"Depending on the nature of the transport, this call to Open may initiate a connection with the target endpoint or may do nothing at all on the network.","pos":[2498,2649]},{"pos":[2660,2699],"content":"Sending a Request and Reading the Reply","linkify":"Sending a Request and Reading the Reply","nodes":[{"content":"Sending a Request and Reading the Reply","pos":[0,39]}]},{"content":"Once we have an opened channel, we can create a message and use the channel’s Request method to send the request and wait for the reply to come back.","pos":[2703,2852]},{"content":"When this method returns, we have a reply message that we can read to find out what the endpoint’s reply was.","pos":[2853,2962]},{"pos":[2973,2988],"content":"Closing Objects","linkify":"Closing Objects","nodes":[{"content":"Closing Objects","pos":[0,15]}]},{"content":"To avoid leaking resources, we close objects used in communications when they are no longer required.","pos":[2992,3093]},{"content":"The following code example shows a basic client using the channel factory to send a message and read the reply.","pos":[3100,3211]}]}