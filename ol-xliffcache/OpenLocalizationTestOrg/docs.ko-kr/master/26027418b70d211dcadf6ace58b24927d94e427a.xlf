<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26027418b70d211dcadf6ace58b24927d94e427a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\join-clause.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ec31a034e5669b31da87f63dc436d8ca257c0d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cd3e8b7caaed7a387da7fb3e8926f21a5b5b589</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>join clause (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>join clause (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`join`</ph> clause is useful for associating elements from different source sequences that have no direct relationship in the object model.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The only requirement is that the elements in each source share some value that can be compared for equality.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, a food distributor might have a list of suppliers of a certain product, and a list of buyers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`join`</ph> clause can be used, for example, to create a list of the suppliers and buyers of that product who are all in the same specified region.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`join`</ph> clause takes two source sequences as input.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The elements in each sequence must either be or contain a property that can be compared to a corresponding property in the other sequence.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`join`</ph> clause compares the specified keys for equality by using the special <ph id="ph2">`equals`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>All joins performed by the <ph id="ph1">`join`</ph> clause are equijoins.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The shape of the output of a <ph id="ph1">`join`</ph> clause depends on the specific type of join you are performing.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following are three most common join types:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Inner join</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Group join</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Left outer join</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Inner Join</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows a simple inner equijoin.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This query produces a flat sequence of "product name / category" pairs.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The same category string will appear in multiple elements.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If an element from <ph id="ph1">`categories`</ph> has no matching <ph id="ph2">`products`</ph>, that category will not appear in the results.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#24<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/join-clause_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Perform Inner Joins<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-perform-inner-joins.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Group Join</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`join`</ph> clause with an <ph id="ph2">`into`</ph> expression is called a group join.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#25<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/join-clause_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A group join produces a hierarchical result sequence, which associates elements in the left source sequence with one or more matching elements in the right side source sequence.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A group join has no equivalent in relational terms; it is essentially a sequence of object arrays.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If no elements from the right source sequence are found to match an element in the left source, the <ph id="ph1">`join`</ph> clause will produce an empty array for that item.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Therefore, the group join is still basically an inner-equijoin except that the result sequence is organized into groups.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you just select the results of a group join, you can access the items, but you cannot identify the key that they match on.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Therefore, it is generally more useful to select the results of the group join into a new type that also has the key name, as shown in the previous example.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can also, of course, use the result of a group join as the generator of another subquery:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#26<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/join-clause_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Perform Grouped Joins<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-perform-grouped-joins.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Left Outer Join</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In a left outer join, all the elements in the left source sequence are returned, even if no matching elements are in the right sequence.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To perform a left outer join in <ph id="ph1">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph>, use the <ph id="ph2">`DefaultIfEmpty`</ph> method in combination with a group join to specify a default right-side element to produce if a left-side element has no matches.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`null`</ph> as the default value for any reference type, or you can specify a user-defined default type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the following example, a user-defined default type is shown:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#27<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/join-clause_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Perform Left Outer Joins<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-perform-left-outer-joins.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The equals operator</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`join`</ph> clause performs an equijoin.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In other words, you can only base matches on the equality of two keys.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Other types of comparisons such as "greater than" or "not equals" are not supported.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To make clear that all joins are equijoins, the <ph id="ph1">`join`</ph> clause uses the <ph id="ph2">`equals`</ph> keyword instead of the <ph id="ph3">`==`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`equals`</ph> keyword can only be used in a <ph id="ph2">`join`</ph> clause and it differs from the <ph id="ph3">`==`</ph> operator in one important way.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`equals`</ph>, the left key consumes the outer source sequence, and the right key consumes the inner source.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The outer source is only in scope on the left side of <ph id="ph1">`equals`</ph> and the inner source sequence is only in scope on the right side.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Non-Equijoins</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can perform non-equijoins, cross joins, and other custom join operations by using multiple <ph id="ph1">`from`</ph> clauses to introduce new sequences independently into a query.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Perform Custom Join Operations<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-perform-custom-join-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Joins on object collections vs. relational tables</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph> query expression, join operations are performed on object collections.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Object collections cannot be "joined" in exactly the same way as two relational tables.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph>, explicit <ph id="ph2">`join`</ph> clauses are only required when two source sequences are not tied by any relationship.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When working with <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../csharp/includes/vbtecdlinq_md.md)]</ph>, foreign key tables are represented in the object model as properties of the primary table.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, in the Northwind database, the Customer table has a foreign key relationship with the Orders table.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When you map the tables to the object model, the Customer class has an Orders property that contains the collection of Orders associated with that Customer.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In effect, the join has already been done for you.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information about querying across related tables in the context of <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../csharp/includes/vbtecdlinq_md.md)]</ph>, see <bpt id="p1">[</bpt>How to: Map Database Relationships<ept id="p1">](../../../framework/data/adonet/sql/linq/how-to-map-database-relationships.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Composite Keys</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can test for equality of multiple values by using a composite key.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Join by Using Composite Keys<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-join-by-using-composite-keys.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Composite keys can be also used in a <ph id="ph1">`group`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example compares the results of an inner join, a group join, and a left outer join on the same data sources by using the same matching keys.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Some extra code is added to these examples to clarify the results in the console display.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#23<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/join-clause_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`join`</ph> clause that is not followed by <ph id="ph2">`into`</ph> is translated into a <ph id="ph3">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`join`</ph> clause that is followed by <ph id="ph2">`into`</ph> is translated to a <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Keywords (LINQ)<ept id="p1">](../../../csharp/language-reference/keywords/query-keywords.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ Query Expressions<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>group clause<ept id="p1">](../../../csharp/language-reference/keywords/group-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Perform Left Outer Joins<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-perform-left-outer-joins.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Perform Inner Joins<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-perform-inner-joins.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Perform Grouped Joins<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-perform-grouped-joins.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Order the Results of a Join Clause<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-order-the-results-of-a-join-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Join by Using Composite Keys<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-join-by-using-composite-keys.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Install Sample Databases<ept id="p1">](http://msdn.microsoft.com/library/ed1291f6-604c-4972-ae22-0345c6dea12e)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>