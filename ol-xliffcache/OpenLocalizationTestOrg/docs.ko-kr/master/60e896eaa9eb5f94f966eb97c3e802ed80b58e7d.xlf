<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-examine-and-instantiate-generic-types-with-reflection.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60e896eaa9eb5f94f966eb97c3e802ed80b58e7d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\how-to-examine-and-instantiate-generic-types-with-reflection.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">adb289e61874c5c5a86421dbbf4bad75442aab81</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">646b0cfacc32bd2d60b2443d4ae0448f6388fa7a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Examine and Instantiate Generic Types with Reflection | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Examine and Instantiate Generic Types with Reflection</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Information about generic types is obtained in the same way as information about other types: by examining a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the generic type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The principle difference is that a generic type has a list of <ph id="ph1">&lt;xref:System.Type&gt;</ph> objects representing its generic type parameters.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The first procedure in this section examines generic types.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can create a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents a constructed type by binding type arguments to the type parameters of a generic type definition.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The second procedure demonstrates this.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To examine a generic type and its type parameters</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Get an instance of <ph id="ph1">&lt;xref:System.Type&gt;</ph> that represents the generic type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following code, the type is obtained using the C# <ph id="ph1">`typeof`</ph> operator (<ph id="ph2">`GetType`</ph> in Visual Basic, <ph id="ph3">`typeid`</ph> in Visual C++).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class topic for other ways to get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Note that in the rest of this procedure, the type is contained in a method parameter named <ph id="ph1">`t`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A&gt;</ph> property to determine whether the type is generic, and use the <ph id="ph2">&lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;</ph> property to determine whether the type is a generic type definition.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Get an array that contains the generic type arguments, using the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For each type argument, determine whether it is a type parameter (for example, in a generic type definition) or a type that has been specified for a type parameter (for example, in a constructed type), using the <ph id="ph1">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the type system, a generic type parameter is represented by an instance of <ph id="ph1">&lt;xref:System.Type&gt;</ph>, just as ordinary types are.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code displays the name and parameter position of a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents a generic type parameter.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The parameter position is trivial information here; it is of more interest when you are examining a type parameter that has been used as a type argument of another generic type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Determine the base type constraint and the interface constraints of a generic type parameter by using the <ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;</ph> method to obtain all the constraints in a single array.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Constraints are not guaranteed to be in any particular order.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph> property to discover the special constraints on a type parameter, such as requiring that it be a reference type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The property also includes values that represent variance, which you can mask off as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The special constraint attributes are flags, and the same flag (<ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName&gt;</ph>) that represents no special constraints also represents no covariance or contravariance.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Thus, to test for either of these conditions you must use the appropriate mask.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this case, use <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName&gt;</ph> to isolate the special constraint flags.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Constructing an Instance of a Generic Type</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A generic type is like a template.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You cannot create instances of it unless you specify real types for its generic type parameters.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To do this at run time, using reflection, requires the <ph id="ph1">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To construct an instance of a generic type</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the generic type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code gets the generic type <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> in two different ways: by using the <ph id="ph2">&lt;xref:System.Type.GetType%28System.String%29?displayProperty=fullName&gt;</ph> method overload with a string describing the type, and by calling the <ph id="ph3">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph> method on the constructed type <ph id="ph4">`Dictionary\&lt;String, Example&gt;`</ph> (<ph id="ph5">`Dictionary(Of String, Example)`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method requires a generic type definition.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Construct an array of type arguments to substitute for the type parameters.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The array must contain the correct number of <ph id="ph1">&lt;xref:System.Type&gt;</ph> objects, in the same order as they appear in the type parameter list.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this case, the key (first type parameter) is of type <ph id="ph1">&lt;xref:System.String&gt;</ph>, and the values in the dictionary are instances of a class named <ph id="ph2">`Example`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method to bind the type arguments to the type parameters and construct the type.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%28System.Type%29&gt;</ph> method overload to create an object of the constructed type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following code stores two instances of the <ph id="ph1">`Example`</ph> class in the resulting <ph id="ph2">`Dictionary&lt;String, Example&gt;`</ph> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following code example defines a <ph id="ph1">`DisplayGenericType`</ph> method to examine the generic type definitions and constructed types used in the code and display their information.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DisplayGenericType`</ph> method shows how to use the <ph id="ph2">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Type.GenericParameterPosition%2A&gt;</ph> properties and the <ph id="ph5">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The example also defines a <ph id="ph1">`DisplayGenericParameter`</ph> method to examine a generic type parameter and display its constraints.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The code example defines a set of test types, including a generic type that illustrates type parameter constraints, and shows how to display information about these types.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The example constructs a type from the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class by creating an array of type arguments and calling the <ph id="ph2">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The program compares the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object constructed using <ph id="ph2">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> with a <ph id="ph3">&lt;xref:System.Type&gt;</ph> object obtained using <ph id="ph4">`typeof`</ph> (<ph id="ph5">`GetType`</ph> in Visual Basic), demonstrating that they are the same.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Similarly, the program uses the <ph id="ph1">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph> method to obtain the generic type definition of the constructed type, and compares it to the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object representing the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The code contains the C# <ph id="ph1">`using`</ph> statements (<ph id="ph2">`Imports`</ph> in Visual Basic) necessary for compilation.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>No additional assembly references are required.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Compile the code at the command line using csc.exe, vbc.exe, or cl.exe.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To compile the code in Visual Studio, place it in a console application project template.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reflection and Generic Types<ept id="p1">](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Viewing Type Information<ept id="p1">](../../../docs/framework/reflection-and-codedom/viewing-type-information.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](../../../docs/standard/generics/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>