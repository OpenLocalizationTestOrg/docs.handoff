{"content":"---\ntitle: \"readonly keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 06/21/2018\nf1_keywords: \n  - \"readonly_CSharpKeyword\"\n  - \"readonly\"\nhelpviewer_keywords: \n  - \"readonly keyword [C#]\"\nms.assetid: 2f8081f6-0de2-4903-898d-99696c48d2f4\n---\n# readonly (C# Reference)\n\nThe `readonly` keyword is a modifier that can be used in three contexts:\n\n- In a [field declaration](#readonly-field-example), `readonly` indicates that assignment to the field can only occur as part of the declaration or in a constructor in the same class.\n- In a [`readonly struct` definition](#readonly-struct-example), `readonly` indicates that the `struct` is immutable.\n- In a [`ref readonly` method return](#ref-readonly-return-example), the `readonly` modifier indicates that method returns a reference and writes are not allowed to that reference.\n\nThe final two contexts were added in C# 7.2.\n\n## Readonly field example\n\nIn this example, the value of the field `year` cannot be changed in the method `ChangeYear`, even though it is assigned a value in the class constructor:\n\n[!code-csharp[Readonly Field example](~/samples/snippets/csharp/keywords/ReadonlyKeywordExamples.cs#ReadonlyField)]\n\nYou can assign a value to a `readonly` field only in the following contexts:\n\n- When the variable is initialized in the declaration, for example:\n\n```csharp\npublic readonly int y = 5;\n```\n\n- In an instance constructor of the class that contains the instance field declaration.\n- In the static constructor of the class that contains the static field declaration.\n\nThese constructor contexts are also the only contexts in which it is valid to pass a `readonly` field as an [out](out-parameter-modifier.md) or [ref](ref.md) parameter.\n\n> [!NOTE]\n> The `readonly` keyword is different from the [const](const.md) keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be assigned multiple times in the field declaration and in any constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, while a `const` field is a compile-time constant, the `readonly` field can be used for runtime constants as in the following example:\n>\n> ```csharp\n> public static readonly uint timeStamp = (uint)DateTime.Now.Ticks;\n> ```\n\n[!code-csharp[Initialize readonly Field example](~/samples/snippets/csharp/keywords/ReadonlyKeywordExamples.cs#InitReadonlyField)]\n\nIn the preceding example, if you use a statement like the following example:\n\n`p2.y = 66;        // Error`\n\nyou will get the compiler error message:\n\n`A readonly field cannot be assigned to (except in a constructor or a variable initializer)`\n\n## Readonly struct example\n\nThe `readonly` modifier on a `struct` definition declares that the struct is **immutable**. Every instance field of the `struct` must be marked `readonly`, as shown in the following example:\n\n[!code-csharp[readonly struct example](~/samples/snippets/csharp/keywords/ReadonlyKeywordExamples.cs#ReadonlyStruct)]\n\nThe preceding example uses [readonly auto properties](../../properties.md#read-only) to declare its storage. That instructs the compiler to create `readonly` backing fields for those properties. You could also declare `readonly` fields directly:\n\n```csharp\npublic readonly struct Point\n{\n    public readonly double X;\n    public readonly double Y;\n\n    public Point(double x, double y) => (X, Y) = (x, y);\n\n    public override string ToString() => $\"({X}, {Y})\";\n}\n```\n\nAdding a field not marked `readonly` generates compiler error `CS8340`: \"Instance fields of readonly structs must be readonly.\"\n\n## Ref readonly return example\n\nThe `readonly` modifier on a `ref return` indicates that the returned reference cannot be modified. The following example returns a reference to the origin. It uses the `readonly` modifier to indicate that callers cannot modify the origin:\n\n[!code-csharp[readonly struct example](~/samples/snippets/csharp/keywords/ReadonlyKeywordExamples.cs#ReadonlyReturn)]\nThe type returned doesn't need to be a `readonly struct`. Any type that can be returned by `ref` can be returned by `ref readonly`\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Modifiers](modifiers.md)\n- [const](const.md)\n- [Fields](../../programming-guide/classes-and-structs/fields.md)\n","nodes":[{"pos":[4,242],"embed":true,"restype":"x-metadata","content":"title: \"readonly keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 06/21/2018\nf1_keywords: \n  - \"readonly_CSharpKeyword\"\n  - \"readonly\"\nhelpviewer_keywords: \n  - \"readonly keyword [C#]\"\nms.assetid: 2f8081f6-0de2-4903-898d-99696c48d2f4","nodes":[{"content":"readonly keyword - C# Reference","nodes":[{"pos":[0,31],"content":"readonly keyword - C# Reference","nodes":[{"content":"readonly keyword - C# Reference","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[249,272],"content":"readonly (C# Reference)","linkify":"readonly (C# Reference)","nodes":[{"content":"readonly (C# Reference)","pos":[0,23]}]},{"pos":[274,346],"content":"The <ph id=\"ph1\">`readonly`</ph> keyword is a modifier that can be used in three contexts:","source":"The `readonly` keyword is a modifier that can be used in three contexts:"},{"pos":[350,531],"content":"In a <bpt id=\"p1\">[</bpt>field declaration<ept id=\"p1\">](#readonly-field-example)</ept>, <ph id=\"ph1\">`readonly`</ph> indicates that assignment to the field can only occur as part of the declaration or in a constructor in the same class.","source":"In a [field declaration](#readonly-field-example), `readonly` indicates that assignment to the field can only occur as part of the declaration or in a constructor in the same class."},{"pos":[534,649],"content":"In a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`readonly struct`</ph> definition<ept id=\"p1\">](#readonly-struct-example)</ept>, <ph id=\"ph2\">`readonly`</ph> indicates that the <ph id=\"ph3\">`struct`</ph> is immutable.","source":"In a [`readonly struct` definition](#readonly-struct-example), `readonly` indicates that the `struct` is immutable."},{"pos":[652,830],"content":"In a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`ref readonly`</ph> method return<ept id=\"p1\">](#ref-readonly-return-example)</ept>, the <ph id=\"ph2\">`readonly`</ph> modifier indicates that method returns a reference and writes are not allowed to that reference.","source":"In a [`ref readonly` method return](#ref-readonly-return-example), the `readonly` modifier indicates that method returns a reference and writes are not allowed to that reference."},{"content":"The final two contexts were added in C# 7.2.","pos":[832,876]},{"pos":[881,903],"content":"Readonly field example","linkify":"Readonly field example","nodes":[{"content":"Readonly field example","pos":[0,22]}]},{"pos":[905,1058],"content":"In this example, the value of the field <ph id=\"ph1\">`year`</ph> cannot be changed in the method <ph id=\"ph2\">`ChangeYear`</ph>, even though it is assigned a value in the class constructor:","source":"In this example, the value of the field `year` cannot be changed in the method `ChangeYear`, even though it is assigned a value in the class constructor:"},{"pos":[1177,1253],"content":"You can assign a value to a <ph id=\"ph1\">`readonly`</ph> field only in the following contexts:","source":"You can assign a value to a `readonly` field only in the following contexts:"},{"content":"When the variable is initialized in the declaration, for example:","pos":[1257,1322]},{"content":"In an instance constructor of the class that contains the instance field declaration.","pos":[1368,1453]},{"content":"In the static constructor of the class that contains the static field declaration.","pos":[1456,1538]},{"pos":[1540,1708],"content":"These constructor contexts are also the only contexts in which it is valid to pass a <ph id=\"ph1\">`readonly`</ph> field as an <bpt id=\"p1\">[</bpt>out<ept id=\"p1\">](out-parameter-modifier.md)</ept> or <bpt id=\"p2\">[</bpt>ref<ept id=\"p2\">](ref.md)</ept> parameter.","source":"These constructor contexts are also the only contexts in which it is valid to pass a `readonly` field as an [out](out-parameter-modifier.md) or [ref](ref.md) parameter."},{"pos":[1712,2195],"content":"[!NOTE]\nThe `readonly` keyword is different from the [const](const.md) keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be assigned multiple times in the field declaration and in any constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, while a `const` field is a compile-time constant, the `readonly` field can be used for runtime constants as in the following example:","leadings":["","> "],"nodes":[{"content":"The `readonly` keyword is different from the [const](const.md) keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be assigned multiple times in the field declaration and in any constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, while a `const` field is a compile-time constant, the `readonly` field can be used for runtime constants as in the following example:","pos":[8,481],"nodes":[{"content":"The <ph id=\"ph1\">`readonly`</ph> keyword is different from the <bpt id=\"p1\">[</bpt>const<ept id=\"p1\">](const.md)</ept> keyword.","pos":[0,71],"source":"The `readonly` keyword is different from the [const](const.md) keyword."},{"content":"A <ph id=\"ph1\">`const`</ph> field can only be initialized at the declaration of the field.","pos":[72,144],"source":" A `const` field can only be initialized at the declaration of the field."},{"content":"A <ph id=\"ph1\">`readonly`</ph> field can be assigned multiple times in the field declaration and in any constructor.","pos":[145,243],"source":" A `readonly` field can be assigned multiple times in the field declaration and in any constructor."},{"content":"Therefore, <ph id=\"ph1\">`readonly`</ph> fields can have different values depending on the constructor used.","pos":[244,333],"source":" Therefore, `readonly` fields can have different values depending on the constructor used."},{"content":"Also, while a <ph id=\"ph1\">`const`</ph> field is a compile-time constant, the <ph id=\"ph2\">`readonly`</ph> field can be used for runtime constants as in the following example:","pos":[334,473],"source":" Also, while a `const` field is a compile-time constant, the `readonly` field can be used for runtime constants as in the following example:"}]}]},{"content":"In the preceding example, if you use a statement like the following example:","pos":[2417,2493]},{"content":"you will get the compiler error message:","pos":[2525,2565]},{"pos":[2664,2687],"content":"Readonly struct example","linkify":"Readonly struct example","nodes":[{"content":"Readonly struct example","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">`readonly`</ph> modifier on a <ph id=\"ph2\">`struct`</ph> definition declares that the struct is <bpt id=\"p1\">**</bpt>immutable<ept id=\"p1\">**</ept>.","pos":[2689,2780],"source":"The `readonly` modifier on a `struct` definition declares that the struct is **immutable**."},{"content":"Every instance field of the <ph id=\"ph1\">`struct`</ph> must be marked <ph id=\"ph2\">`readonly`</ph>, as shown in the following example:","pos":[2781,2879],"source":" Every instance field of the `struct` must be marked `readonly`, as shown in the following example:"},{"content":"The preceding example uses <bpt id=\"p1\">[</bpt>readonly auto properties<ept id=\"p1\">](../../properties.md#read-only)</ept> to declare its storage.","pos":[3000,3108],"source":"The preceding example uses [readonly auto properties](../../properties.md#read-only) to declare its storage."},{"content":"That instructs the compiler to create <ph id=\"ph1\">`readonly`</ph> backing fields for those properties.","pos":[3109,3194],"source":" That instructs the compiler to create `readonly` backing fields for those properties."},{"content":"You could also declare <ph id=\"ph1\">`readonly`</ph> fields directly:","pos":[3195,3245],"source":" You could also declare `readonly` fields directly:"},{"pos":[3470,3597],"content":"Adding a field not marked <ph id=\"ph1\">`readonly`</ph> generates compiler error <ph id=\"ph2\">`CS8340`</ph>: \"Instance fields of readonly structs must be readonly.\"","source":"Adding a field not marked `readonly` generates compiler error `CS8340`: \"Instance fields of readonly structs must be readonly.\""},{"pos":[3602,3629],"content":"Ref readonly return example","linkify":"Ref readonly return example","nodes":[{"content":"Ref readonly return example","pos":[0,27]}]},{"content":"The <ph id=\"ph1\">`readonly`</ph> modifier on a <ph id=\"ph2\">`ref return`</ph> indicates that the returned reference cannot be modified.","pos":[3631,3730],"source":"The `readonly` modifier on a `ref return` indicates that the returned reference cannot be modified."},{"content":"The following example returns a reference to the origin.","pos":[3731,3787]},{"content":"It uses the <ph id=\"ph1\">`readonly`</ph> modifier to indicate that callers cannot modify the origin:","pos":[3788,3870],"source":" It uses the `readonly` modifier to indicate that callers cannot modify the origin:"},{"content":"The type returned doesn't need to be a <ph id=\"ph1\">`readonly struct`</ph>.","pos":[3990,4047],"source":"The type returned doesn't need to be a `readonly struct`."},{"content":"Any type that can be returned by <ph id=\"ph1\">`ref`</ph> can be returned by <ph id=\"ph2\">`ref readonly`</ph>","pos":[4048,4120],"source":" Any type that can be returned by `ref` can be returned by `ref readonly`"},{"pos":[4125,4150],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[4216,4224],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4228,4255],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4258,4314],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4317,4340],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[4343,4368],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](modifiers.md)</ept>","source":"[Modifiers](modifiers.md)"},{"pos":[4371,4388],"content":"<bpt id=\"p1\">[</bpt>const<ept id=\"p1\">](const.md)</ept>","source":"[const](const.md)"},{"pos":[4391,4454],"content":"<bpt id=\"p1\">[</bpt>Fields<ept id=\"p1\">](../../programming-guide/classes-and-structs/fields.md)</ept>","source":"[Fields](../../programming-guide/classes-and-structs/fields.md)"}]}