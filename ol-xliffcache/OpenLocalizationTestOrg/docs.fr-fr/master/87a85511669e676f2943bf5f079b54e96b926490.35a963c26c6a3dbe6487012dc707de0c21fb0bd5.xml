{"content":"---\ntitle: \"Exception Handling - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"exception handling [C#], about exception handling\"\n  - \"exceptions [C#], handling\"\nms.assetid: b4e4ecf2-b907-4e58-891f-2563762258e9\n---\n# Exception Handling (C# Programming Guide)\nA [try](../../../csharp/language-reference/keywords/try-catch.md) block is used by C# programmers to partition code that might be affected by an exception. Associated [catch](../../../csharp/language-reference/keywords/try-catch.md) blocks are used to handle any resulting exceptions. A [finally](../../../csharp/language-reference/keywords/try-finally.md) block contains code that is run regardless of whether or not an exception is thrown in the `try` block, such as releasing resources that are allocated in the `try` block. A `try` block requires one or more associated `catch` blocks, or a `finally` block, or both.  \n  \n The following examples show a `try-catch` statement, a `try-finally` statement, and a `try-catch-finally` statement.  \n  \n [!code-csharp[csProgGuideExceptions#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideExceptions/CS/Exceptions.cs#6)]  \n  \n [!code-csharp[csProgGuideExceptions#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideExceptions/CS/Exceptions.cs#7)]  \n  \n [!code-csharp[csProgGuideExceptions#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideExceptions/CS/Exceptions.cs#8)]  \n  \n A `try` block without a `catch` or `finally` block causes a compiler error.  \n  \n## Catch Blocks  \n A `catch` block can specify the type of exception to catch. The type specification is called an *exception filter*. The exception type should be derived from <xref:System.Exception>. In general, do not specify <xref:System.Exception> as the exception filter unless either you know how to handle all exceptions that might be thrown in the `try` block, or you have included a [throw](../../../csharp/language-reference/keywords/throw.md) statement at the end of your `catch` block.  \n  \n Multiple `catch` blocks with different exception filters can be chained together. The `catch` blocks are evaluated from top to bottom in your code, but only one `catch` block is executed for each exception that is thrown. The first `catch` block that specifies the exact type or a base class of the thrown exception is executed. If no `catch` block specifies a matching exception filter, a `catch` block that does not have a filter is selected, if one is present in the statement. It is important to position `catch` blocks with the most specific (that is, the most derived) exception types first.  \n  \n You should catch exceptions when the following conditions are true:  \n  \n-   You have a good understanding of why the exception might be thrown, and you can implement a specific recovery, such as prompting the user to enter a new file name when you catch a <xref:System.IO.FileNotFoundException> object.  \n  \n-   You can create and throw a new, more specific exception.  \n  \n     [!code-csharp[csProgGuideExceptions#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideExceptions/CS/Exceptions.cs#9)]  \n  \n-   You want to partially handle an exception before passing it on for additional handling. In the following example, a `catch` block is used to add an entry to an error log before re-throwing the exception.  \n  \n     [!code-csharp[csProgGuideExceptions#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideExceptions/CS/Exceptions.cs#10)]  \n  \n## Finally Blocks  \n A `finally` block enables you to clean up actions that are performed in a `try` block. If present, the `finally` block executes last, after the `try` block and any matched `catch` block. A `finally` block always runs, regardless of whether an exception is thrown or a `catch` block matching the exception type is found.  \n  \n The `finally` block can be used to release resources such as file streams, database connections, and graphics handles without waiting for the garbage collector in the runtime to finalize the objects. See [using Statement](../../../csharp/language-reference/keywords/using-statement.md) for more information.  \n  \n In the following example, the `finally` block is used to close a file that is opened in the `try` block. Notice that the state of the file handle is checked before the file is closed. If the `try` block cannot open the file, the file handle still has the value `null` and the `finally` block does not try to close it. Alternatively, if the file is opened successfully in the `try` block, the `finally` block closes the open file.  \n  \n [!code-csharp[csProgGuideExceptions#11](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideExceptions/CS/Exceptions.cs#11)]  \n  \n## C# Language Specification  \n\nFor more information, see [Exceptions](~/_csharplang/spec/exceptions.md) and [The try statement](~/_csharplang/spec/statements.md#the-try-statement) in the [C# Language Specification](../../language-reference/language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n  \n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md)\n- [try-catch](../../../csharp/language-reference/keywords/try-catch.md)\n- [try-finally](../../../csharp/language-reference/keywords/try-finally.md)\n- [try-catch-finally](../../../csharp/language-reference/keywords/try-catch-finally.md)\n- [using Statement](../../../csharp/language-reference/keywords/using-statement.md)\n","nodes":[{"pos":[4,253],"embed":true,"restype":"x-metadata","content":"title: \"Exception Handling - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"exception handling [C#], about exception handling\"\n  - \"exceptions [C#], handling\"\nms.assetid: b4e4ecf2-b907-4e58-891f-2563762258e9","nodes":[{"content":"Exception Handling - C# Programming Guide","nodes":[{"pos":[0,41],"content":"Exception Handling - C# Programming Guide","nodes":[{"content":"Exception Handling - C# Programming Guide","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[260,301],"content":"Exception Handling (C# Programming Guide)","linkify":"Exception Handling (C# Programming Guide)","nodes":[{"content":"Exception Handling (C# Programming Guide)","pos":[0,41]}]},{"content":"A <bpt id=\"p1\">[</bpt>try<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept> block is used by C# programmers to partition code that might be affected by an exception.","pos":[302,457],"source":"A [try](../../../csharp/language-reference/keywords/try-catch.md) block is used by C# programmers to partition code that might be affected by an exception."},{"content":"Associated <bpt id=\"p1\">[</bpt>catch<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept> blocks are used to handle any resulting exceptions.","pos":[458,586],"source":" Associated [catch](../../../csharp/language-reference/keywords/try-catch.md) blocks are used to handle any resulting exceptions."},{"content":"A <bpt id=\"p1\">[</bpt>finally<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-finally.md)</ept> block contains code that is run regardless of whether or not an exception is thrown in the <ph id=\"ph1\">`try`</ph> block, such as releasing resources that are allocated in the <ph id=\"ph2\">`try`</ph> block.","pos":[587,829],"source":" A [finally](../../../csharp/language-reference/keywords/try-finally.md) block contains code that is run regardless of whether or not an exception is thrown in the `try` block, such as releasing resources that are allocated in the `try` block."},{"content":"A <ph id=\"ph1\">`try`</ph> block requires one or more associated <ph id=\"ph2\">`catch`</ph> blocks, or a <ph id=\"ph3\">`finally`</ph> block, or both.","pos":[830,922],"source":" A `try` block requires one or more associated `catch` blocks, or a `finally` block, or both."},{"pos":[929,1045],"content":"The following examples show a <ph id=\"ph1\">`try-catch`</ph> statement, a <ph id=\"ph2\">`try-finally`</ph> statement, and a <ph id=\"ph3\">`try-catch-finally`</ph> statement.","source":"The following examples show a `try-catch` statement, a `try-finally` statement, and a `try-catch-finally` statement."},{"pos":[1457,1532],"content":"A <ph id=\"ph1\">`try`</ph> block without a <ph id=\"ph2\">`catch`</ph> or <ph id=\"ph3\">`finally`</ph> block causes a compiler error.","source":"A `try` block without a `catch` or `finally` block causes a compiler error."},{"pos":[1541,1553],"content":"Catch Blocks","linkify":"Catch Blocks","nodes":[{"content":"Catch Blocks","pos":[0,12]}]},{"content":"A <ph id=\"ph1\">`catch`</ph> block can specify the type of exception to catch.","pos":[1557,1616],"source":"A `catch` block can specify the type of exception to catch."},{"content":"The type specification is called an <bpt id=\"p1\">*</bpt>exception filter<ept id=\"p1\">*</ept>.","pos":[1617,1672],"source":" The type specification is called an *exception filter*."},{"content":"The exception type should be derived from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[1673,1739],"source":" The exception type should be derived from <xref:System.Exception>."},{"content":"In general, do not specify <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> as the exception filter unless either you know how to handle all exceptions that might be thrown in the <ph id=\"ph2\">`try`</ph> block, or you have included a <bpt id=\"p1\">[</bpt>throw<ept id=\"p1\">](../../../csharp/language-reference/keywords/throw.md)</ept> statement at the end of your <ph id=\"ph3\">`catch`</ph> block.","pos":[1740,2036],"source":" In general, do not specify <xref:System.Exception> as the exception filter unless either you know how to handle all exceptions that might be thrown in the `try` block, or you have included a [throw](../../../csharp/language-reference/keywords/throw.md) statement at the end of your `catch` block."},{"content":"Multiple <ph id=\"ph1\">`catch`</ph> blocks with different exception filters can be chained together.","pos":[2043,2124],"source":"Multiple `catch` blocks with different exception filters can be chained together."},{"content":"The <ph id=\"ph1\">`catch`</ph> blocks are evaluated from top to bottom in your code, but only one <ph id=\"ph2\">`catch`</ph> block is executed for each exception that is thrown.","pos":[2125,2264],"source":" The `catch` blocks are evaluated from top to bottom in your code, but only one `catch` block is executed for each exception that is thrown."},{"content":"The first <ph id=\"ph1\">`catch`</ph> block that specifies the exact type or a base class of the thrown exception is executed.","pos":[2265,2371],"source":" The first `catch` block that specifies the exact type or a base class of the thrown exception is executed."},{"content":"If no <ph id=\"ph1\">`catch`</ph> block specifies a matching exception filter, a <ph id=\"ph2\">`catch`</ph> block that does not have a filter is selected, if one is present in the statement.","pos":[2372,2523],"source":" If no `catch` block specifies a matching exception filter, a `catch` block that does not have a filter is selected, if one is present in the statement."},{"content":"It is important to position <ph id=\"ph1\">`catch`</ph> blocks with the most specific (that is, the most derived) exception types first.","pos":[2524,2640],"source":" It is important to position `catch` blocks with the most specific (that is, the most derived) exception types first."},{"content":"You should catch exceptions when the following conditions are true:","pos":[2647,2714]},{"pos":[2724,2950],"content":"You have a good understanding of why the exception might be thrown, and you can implement a specific recovery, such as prompting the user to enter a new file name when you catch a <ph id=\"ph1\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> object.","source":"You have a good understanding of why the exception might be thrown, and you can implement a specific recovery, such as prompting the user to enter a new file name when you catch a <xref:System.IO.FileNotFoundException> object."},{"content":"You can create and throw a new, more specific exception.","pos":[2960,3016]},{"content":"You want to partially handle an exception before passing it on for additional handling.","pos":[3165,3252]},{"content":"In the following example, a <ph id=\"ph1\">`catch`</ph> block is used to add an entry to an error log before re-throwing the exception.","pos":[3253,3368],"source":" In the following example, a `catch` block is used to add an entry to an error log before re-throwing the exception."},{"pos":[3518,3532],"content":"Finally Blocks","linkify":"Finally Blocks","nodes":[{"content":"Finally Blocks","pos":[0,14]}]},{"content":"A <ph id=\"ph1\">`finally`</ph> block enables you to clean up actions that are performed in a <ph id=\"ph2\">`try`</ph> block.","pos":[3536,3622],"source":"A `finally` block enables you to clean up actions that are performed in a `try` block."},{"content":"If present, the <ph id=\"ph1\">`finally`</ph> block executes last, after the <ph id=\"ph2\">`try`</ph> block and any matched <ph id=\"ph3\">`catch`</ph> block.","pos":[3623,3722],"source":" If present, the `finally` block executes last, after the `try` block and any matched `catch` block."},{"content":"A <ph id=\"ph1\">`finally`</ph> block always runs, regardless of whether an exception is thrown or a <ph id=\"ph2\">`catch`</ph> block matching the exception type is found.","pos":[3723,3855],"source":" A `finally` block always runs, regardless of whether an exception is thrown or a `catch` block matching the exception type is found."},{"content":"The <ph id=\"ph1\">`finally`</ph> block can be used to release resources such as file streams, database connections, and graphics handles without waiting for the garbage collector in the runtime to finalize the objects.","pos":[3862,4061],"source":"The `finally` block can be used to release resources such as file streams, database connections, and graphics handles without waiting for the garbage collector in the runtime to finalize the objects."},{"content":"See <bpt id=\"p1\">[</bpt>using Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-statement.md)</ept> for more information.","pos":[4062,4169],"source":" See [using Statement](../../../csharp/language-reference/keywords/using-statement.md) for more information."},{"content":"In the following example, the <ph id=\"ph1\">`finally`</ph> block is used to close a file that is opened in the <ph id=\"ph2\">`try`</ph> block.","pos":[4176,4280],"source":"In the following example, the `finally` block is used to close a file that is opened in the `try` block."},{"content":"Notice that the state of the file handle is checked before the file is closed.","pos":[4281,4359]},{"content":"If the <ph id=\"ph1\">`try`</ph> block cannot open the file, the file handle still has the value <ph id=\"ph2\">`null`</ph> and the <ph id=\"ph3\">`finally`</ph> block does not try to close it.","pos":[4360,4493],"source":" If the `try` block cannot open the file, the file handle still has the value `null` and the `finally` block does not try to close it."},{"content":"Alternatively, if the file is opened successfully in the <ph id=\"ph1\">`try`</ph> block, the <ph id=\"ph2\">`finally`</ph> block closes the open file.","pos":[4494,4605],"source":" Alternatively, if the file is opened successfully in the `try` block, the `finally` block closes the open file."},{"pos":[4751,4776],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Exceptions<ept id=\"p1\">](~/_csharplang/spec/exceptions.md)</ept> and <bpt id=\"p2\">[</bpt>The try statement<ept id=\"p2\">](~/_csharplang/spec/statements.md#the-try-statement)</ept> in the <bpt id=\"p3\">[</bpt>C# Language Specification<ept id=\"p3\">](../../language-reference/language-specification/index.md)</ept>.","pos":[4780,5022],"source":"For more information, see [Exceptions](~/_csharplang/spec/exceptions.md) and [The try statement](~/_csharplang/spec/statements.md#the-try-statement) in the [C# Language Specification](../../language-reference/language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[5023,5099]},{"pos":[5106,5114],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5118,5177],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[5180,5246],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[5249,5339],"content":"<bpt id=\"p1\">[</bpt>Exceptions and Exception Handling<ept id=\"p1\">](../../../csharp/programming-guide/exceptions/index.md)</ept>","source":"[Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md)"},{"pos":[5342,5411],"content":"<bpt id=\"p1\">[</bpt>try-catch<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept>","source":"[try-catch](../../../csharp/language-reference/keywords/try-catch.md)"},{"pos":[5414,5487],"content":"<bpt id=\"p1\">[</bpt>try-finally<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-finally.md)</ept>","source":"[try-finally](../../../csharp/language-reference/keywords/try-finally.md)"},{"pos":[5490,5575],"content":"<bpt id=\"p1\">[</bpt>try-catch-finally<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch-finally.md)</ept>","source":"[try-catch-finally](../../../csharp/language-reference/keywords/try-catch-finally.md)"},{"pos":[5578,5659],"content":"<bpt id=\"p1\">[</bpt>using Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-statement.md)</ept>","source":"[using Statement](../../../csharp/language-reference/keywords/using-statement.md)"}]}