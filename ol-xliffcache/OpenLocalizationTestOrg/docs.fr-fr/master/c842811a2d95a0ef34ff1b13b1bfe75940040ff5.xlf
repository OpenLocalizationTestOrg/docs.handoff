<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c842811a2d95a0ef34ff1b13b1bfe75940040ff5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\wpf-and-win32-interoperation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51650f2f349045100cc0887b0a52e18d0c96d8b3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ddc4a4291aaa290dd8b87c34513e987d606190d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>WPF and Win32 Interoperation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WPF and Win32 Interoperation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of how to interoperate <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides a rich environment for creating applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, when you have a substantial investment in <ph id="ph1">[!INCLUDE[TLA#tla_win32](../../../../includes/tlasharptla-win32-md.md)]</ph> code, it might be more effective to reuse some of that code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>WPF and Win32 Interoperation Basics</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are two basic techniques for interoperation between <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Host <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>With this technique, you can use the advanced graphics capabilities of <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> within the framework of a standard <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window and application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Host a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>With this technique, you can use an existing custom <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> control in the context of other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content, and pass data across the boundaries.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each of these techniques is conceptually introduced in this topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For a more code-oriented illustration of hosting <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph>, see <bpt id="p1">[</bpt>Walkthrough: Hosting WPF Content in Win32<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-hosting-wpf-content-in-win32.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For a more code-oriented illustration of hosting <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, see <bpt id="p1">[</bpt>Walkthrough: Hosting a Win32 Control in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-hosting-a-win32-control-in-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>WPF Interoperation Projects</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> are managed code, but most existing <ph id="ph3">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> programs are written in unmanaged <ph id="ph4">[!INCLUDE[TLA2#tla_cpp](../../../../includes/tla2sharptla-cpp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You cannot call <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> from a true unmanaged program.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, by using the <ph id="ph1">`/clr`</ph> option with the <ph id="ph2">[!INCLUDE[TLA#tla_visualcpp](../../../../includes/tlasharptla-visualcpp-md.md)]</ph> compiler, you can create a mixed managed-unmanaged program where you can seamlessly mix managed and unmanaged <ph id="ph3">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph> calls.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>One project-level complication is that you cannot compile <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> files into a <ph id="ph2">[!INCLUDE[TLA2#tla_cpp](../../../../includes/tla2sharptla-cpp-md.md)]</ph> project.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There are several project division techniques to compensate for this.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">[!INCLUDE[TLA2#tla_cshrp](../../../../includes/tla2sharptla-cshrp-md.md)]</ph> DLL that contains all your <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> pages as a compiled assembly, and then have your <ph id="ph3">[!INCLUDE[TLA2#tla_cpp](../../../../includes/tla2sharptla-cpp-md.md)]</ph> executable include that <ph id="ph4">[!INCLUDE[TLA2#tla_dll](../../../../includes/tla2sharptla-dll-md.md)]</ph> as a reference.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">[!INCLUDE[TLA2#tla_cshrp](../../../../includes/tla2sharptla-cshrp-md.md)]</ph> executable for the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content, and have it reference a <ph id="ph3">[!INCLUDE[TLA2#tla_cpp](../../../../includes/tla2sharptla-cpp-md.md)]</ph> <ph id="ph4">[!INCLUDE[TLA2#tla_dll](../../../../includes/tla2sharptla-dll-md.md)]</ph> that contains the <ph id="ph5">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;</ph> to load any <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> at run time, instead of compiling your <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> at all, and write all your <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> in code, building up the element tree from <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use whatever approach works best for you.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you have not used <ph id="ph1">[!INCLUDE[TLA#tla_cppcli](../../../../includes/tlasharptla-cppcli-md.md)]</ph> before, you might notice some "new" keywords such as <ph id="ph2">`gcnew`</ph> and <ph id="ph3">`nullptr`</ph> in the interoperation code examples.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>These keywords supersede the older double-underscore syntax (<ph id="ph1">`__gc`</ph>) and provide a more natural syntax for managed code in <ph id="ph2">[!INCLUDE[TLA2#tla_cpp](../../../../includes/tla2sharptla-cpp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To learn more about the <ph id="ph1">[!INCLUDE[TLA#tla_cppcli](../../../../includes/tlasharptla-cppcli-md.md)]</ph> managed features, see <bpt id="p1">[</bpt>Component Extensions for Runtime Platforms<ept id="p1">](/cpp/windows/component-extensions-for-runtime-platforms)</ept> and <bpt id="p2">[</bpt>Hello, C++/CLI<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=98739)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>How WPF Uses Hwnds</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To make the most of <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> "HWND interop", you need to understand how <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> uses HWNDs.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For any HWND, you cannot mix <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> rendering with <ph id="ph2">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph> rendering or <ph id="ph3">[!INCLUDE[TLA2#tla_gdi](../../../../includes/tla2sharptla-gdi-md.md)]</ph><ph id="ph4"> / </ph><ph id="ph5">[!INCLUDE[TLA2#tla_gdiplus](../../../../includes/tla2sharptla-gdiplus-md.md)]</ph> rendering.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This has a number of implications.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Primarily, in order to mix these rendering models at all, you must create an interoperation solution, and use designated segments of interoperation for each rendering model that you choose to use.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Also, the rendering behavior creates an "airspace" restriction for what your interoperation solution can accomplish.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The "airspace" concept is explained in greater detail in the topic <bpt id="p1">[</bpt>Technology Regions Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/technology-regions-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> elements on the screen are ultimately backed by a HWND.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> creates a top-level HWND, and uses an <ph id="ph4">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> to put the <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> and its <ph id="ph6">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content inside the HWND.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The rest of your <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content in the application shares that singular HWND.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An exception is menus, combo box drop downs, and other pop-ups.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These elements create their own top-level window, which is why a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> menu can potentially go past the edge of the window HWND that contains it.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> to put an HWND inside <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> informs <ph id="ph4">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> how to position the new child HWND relative to the <ph id="ph5">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph6">&lt;xref:System.Windows.Window&gt;</ph> HWND.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A related concept to HWND is transparency within and between each HWND.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is also discussed in the topic <bpt id="p1">[</bpt>Technology Regions Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/technology-regions-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Hosting WPF Content in a Microsoft Win32 Window</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The key to hosting a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> on a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window is the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This class wraps the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window, so that the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content can be incorporated into your <ph id="ph4">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> as a child window.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following approach combines the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> in a single application.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Implement your <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content (the content root element) as a managed class.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Typically, the class inherits from one of the classes that can contain multiple child elements and/or used as a root element, such as <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In subsequent steps, this class is referred to as the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content class, and instances of the class are referred to as <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content objects.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Implement a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> application with <ph id="ph2">[!INCLUDE[TLA2#tla_cppcli](../../../../includes/tla2sharptla-cppcli-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you are starting with an existing unmanaged <ph id="ph1">[!INCLUDE[TLA2#tla_cpp](../../../../includes/tla2sharptla-cpp-md.md)]</ph> application, you can usually enable it to call managed code by changing your project settings to include the <ph id="ph2">`/clr`</ph> compiler flag (the full scope of what might be necessary to support <ph id="ph3">`/clr`</ph> compilation is not described in this topic).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Set the threading model to Single Threaded Apartment (STA).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> uses this threading model.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Handle the WM_CREATE notification in your window procedure.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Within the handler (or a function that the handler calls), do the following:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Create a new <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object with the parent window HWND as its <ph id="ph2">`parent`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Create an instance of your <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Assign a reference to the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content object to the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;</ph> property contains the window handle (HWND).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To get an HWND that you can use in the unmanaged part of your application, cast <ph id="ph1">`Handle.ToPointer()`</ph> to an HWND.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Implement a managed class that contains a static field that holds a reference to your <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This class allows you to get a reference to the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content object from your <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> code, but more importantly it prevents your <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> from being inadvertently garbage collected.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Receive notifications from the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content object by attaching a handler to one or more of the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content object events.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Communicate with the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content object by using the reference that you stored in the static field to set properties, call methods, etc.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can do some or all of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content class definition for Step One in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> using the default partial class of the content class, if you produce a separate assembly and then reference it.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Although you typically include an <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object as part of compiling the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> into an assembly, you do not end up using that <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph> as part of the interoperation, you just use one or more of the root classes for <ph id="ph4">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> files referred to by the application and reference their partial classes.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The remainder of the procedure is essentially similar to that outlined above.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Each of these steps is illustrated through code in the topic <bpt id="p1">[</bpt>Walkthrough: Hosting WPF Content in Win32<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-hosting-wpf-content-in-win32.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Hosting a Microsoft Win32 Window in WPF</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The key to hosting a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window within other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content is the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This class wraps the window in a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> element which can be added to a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> element tree.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> also supports <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> that allow you to do such tasks as process messages for the hosted window.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The basic procedure is:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Create an element tree for a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application (can be through code or markup).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Find an appropriate and permissible point in the element tree where the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> implementation can be added as a child element.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the remainder of these steps, this element is referred to as the reserving element.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Derive from <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> to create an object that holds your <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In that host class, override the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> method <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost.BuildWindowCore%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Return the HWND of the hosted window.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You might want to wrap the actual control(s) as a child window of the returned window; wrapping the controls in a host window provides a simple way for your <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content to receive notifications from the controls.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This technique helps correct for some <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> issues regarding message handling at the hosted control boundary.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> methods <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost.DestroyWindowCore%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost.WndProc%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The intention here is to process cleanup and remove references to the hosted content, particularly if you created references to unmanaged objects.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In your code-behind file, create an instance of the control hosting class and make it a child of the reserving element.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Typically you would use an event handler such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>, or use the partial class constructor.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>But you could also add the interoperation content through a runtime behavior.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Process selected window messages, such as control notifications.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>There are two approaches.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Both provide identical access to the message stream, so your choice is largely a matter of programming convenience.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Implement message processing for all messages (not just shutdown messages) in your override of the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> method <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost.WndProc%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Have the hosting <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> element process the messages by handling the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost.MessageHook&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This event is raised for every message that is sent to the main window procedure of the hosted window.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You cannot process messages from windows that are out of process using <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost.WndProc%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Communicate with the hosted window by using platform invoke to call the unmanaged <ph id="ph1">`SendMessage`</ph> function.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Following these steps creates an application that works with mouse input.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can add tabbing support for your hosted window by implementing the <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Each of these steps is illustrated through code in the topic <bpt id="p1">[</bpt>Walkthrough: Hosting a Win32 Control in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-hosting-a-win32-control-in-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Hwnds Inside WPF</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can think of <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> as a special control.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>(Technically, <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, not a <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> derived class, but it can be considered a control for purposes of interoperation.) <ph id="ph4">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> abstracts the underlying <ph id="ph5">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> nature of the hosted content such that the remainder of <ph id="ph6">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> considers the hosted content to be another control-like object, which should render and process input.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> generally behaves like any other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, although there are some important differences around output (drawing and graphics) and input (mouse and keyboard) based on limitations of what the underlying HWNDs can support.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Notable Differences in Output Behavior</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, which is the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> base class, has quite a few properties that imply changes to the UI.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>These include properties such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName&gt;</ph>, which changes the layout of elements within that element as a parent.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>However, most of these properties are not mapped to possible <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> equivalents, even if such equivalents might exist.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Too many of these properties and their meanings are too rendering-technology specific for mappings to be practical.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Therefore, setting properties such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> on <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> has no effect.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> cannot be rotated, scaled, skewed, or otherwise affected by a Transform.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> does not support the <ph id="ph2">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property (alpha blending).</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If content inside the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> performs <ph id="ph2">&lt;xref:System.Drawing&gt;</ph> operations that include alpha information, that is itself not a violation, but the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> as a whole only supports Opacity = 1.0 (100%).</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> will appear on top of other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> elements in the same top-level window.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>However, a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> generated menu is a separate top-level window, and so will behave correctly with <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> does not respect the clipping region of its parent <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This is potentially an issue if you attempt to put an <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> class inside a scrolling region or <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Notable Differences in Input Behavior</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In general, while input devices are scoped within the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> hosted <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> region, input events go directly to <ph id="ph3">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>While the mouse is over the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>, your application does not receive <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> mouse events, and the value of the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property <ph id="ph4">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> will be <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>While the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> has keyboard focus, your application will not receive <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> keyboard events and the value of the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property <ph id="ph4">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> will be <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When focus is within the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> and changes to another control inside the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>, your application will not receive the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> events <ph id="ph4">&lt;xref:System.Windows.UIElement.GotFocus&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.UIElement.LostFocus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Related stylus properties and events are analogous, and do not report information while the stylus is over <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Tabbing, Mnemonics, and Accelerators</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSite&gt;</ph> interfaces allow you to create a seamless keyboard experience for mixed <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> and <ph id="ph4">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> applications:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Tabbing between <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> components</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Mnemonics and accelerators that work both when focus is within a Win32 component and when it is within a WPF component.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> classes both provide implementations of <ph id="ph3">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph>, but they may not handle all the input messages that you want for more advanced scenarios.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Override the appropriate methods to get the keyboard behavior you want.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The interfaces only provide support for what happens on the transition between the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> regions.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Within the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> region, tabbing behavior is entirely controlled by the <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> implemented logic for tabbing, if any.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop&gt;</ph></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Hosting a Win32 Control in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-hosting-a-win32-control-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Hosting WPF Content in Win32<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-hosting-wpf-content-in-win32.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>