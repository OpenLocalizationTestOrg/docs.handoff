{"content":"---\ntitle: \"IMetaDataImport::FindMethod Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"IMetaDataImport.FindMethod\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IMetaDataImport::FindMethod\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"FindMethod method [.NET Framework metadata]\"\n  - \"IMetaDataImport::FindMethod method [.NET Framework metadata]\"\nms.assetid: 0f9bde1d-e306-438d-941b-d0925b322304\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 12\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# IMetaDataImport::FindMethod Method\nGets a pointer to the MethodDef token for the method that is enclosed by the specified <xref:System.Type> and that has the specified name and metadata signature.  \n  \n## Syntax  \n  \n```  \nHRESULT FindMethod (  \n   [in]  mdTypeDef          td,  \n   [in]  LPCWSTR            szName,   \n   [in]  PCCOR_SIGNATURE    pvSigBlob,   \n   [in]  ULONG              cbSigBlob,   \n   [out] mdMethodDef        *pmb  \n);  \n```  \n  \n#### Parameters  \n `td`  \n [in] The `mdTypeDef` token for the type (a class or interface) that encloses the member to search for. If this value is `mdTokenNil`, then the lookup is done for a global function.  \n  \n `szName`  \n [in] The name of the method to search for.  \n  \n `pvSigBlob`  \n [in] A pointer to the binary metadata signature of the method.  \n  \n `cbSigBlob`  \n [in] The size in bytes of `pvSigBlob`.  \n  \n `pmb`  \n [out] A pointer to the matching MethodDef token.  \n  \n## Remarks  \n You specify the method using its enclosing class or interface (`td`), its name (`szName`), and optionally its signature (`pvSigBlob`). There might be multiple methods with the same name in a class or interface. In that case, pass the method's signature to find the unique match.  \n  \n The signature passed to `FindMethod` must have been generated in the current scope, because signatures are bound to a particular scope. A signature can embed a token that identifies the enclosing class or value type. The token is an index into the local TypeDef table. You cannot build a run-time signature outside the context of the current scope and use that signature as input to input to `FindMethod`.  \n  \n `FindMethod` finds only methods that were defined directly in the class or interface; it does not find inherited methods.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** Cor.h  \n  \n **Library:** Included as a resource in MsCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]  \n  \n## See Also  \n <xref:System.Reflection.MethodInfo>   \n [IMetaDataImport Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md)   \n [IMetaDataImport2 Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataimport2-interface.md)","nodes":[{"pos":[4,692],"nodes":[{"content":"IMetaDataImport::FindMethod Method | Microsoft Docs","nodes":[{"pos":[0,51],"content":"IMetaDataImport::FindMethod Method | Microsoft Docs","nodes":[{"content":"IMetaDataImport::FindMethod Method | Microsoft Docs","pos":[0,51]}]}],"pos":[6,60],"yaml":true}],"content":"title: \"IMetaDataImport::FindMethod Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"IMetaDataImport.FindMethod\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IMetaDataImport::FindMethod\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"FindMethod method [.NET Framework metadata]\"\n  - \"IMetaDataImport::FindMethod method [.NET Framework metadata]\"\nms.assetid: 0f9bde1d-e306-438d-941b-d0925b322304\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 12\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[699,733],"content":"IMetaDataImport::FindMethod Method","linkify":"IMetaDataImport::FindMethod Method","nodes":[{"content":"IMetaDataImport::FindMethod Method","pos":[0,34]}]},{"content":"Gets a pointer to the MethodDef token for the method that is enclosed by the specified <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> and that has the specified name and metadata signature.","pos":[734,895],"source":"Gets a pointer to the MethodDef token for the method that is enclosed by the specified <xref:System.Type> and that has the specified name and metadata signature."},{"pos":[904,910],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1156,1166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The <ph id=\"ph1\">`mdTypeDef`</ph> token for the type (a class or interface) that encloses the member to search for.","pos":[1178,1280],"source":"[in] The `mdTypeDef` token for the type (a class or interface) that encloses the member to search for."},{"content":"If this value is <ph id=\"ph1\">`mdTokenNil`</ph>, then the lookup is done for a global function.","pos":[1281,1358],"source":" If this value is `mdTokenNil`, then the lookup is done for a global function."},{"content":"[in] The name of the method to search for.","pos":[1377,1419]},{"content":"[in] A pointer to the binary metadata signature of the method.","pos":[1441,1503]},{"content":"[in] The size in bytes of <ph id=\"ph1\">`pvSigBlob`</ph>.","pos":[1525,1563],"source":"[in] The size in bytes of `pvSigBlob`."},{"content":"[out] A pointer to the matching MethodDef token.","pos":[1579,1627]},{"pos":[1636,1643],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You specify the method using its enclosing class or interface (<ph id=\"ph1\">`td`</ph>), its name (<ph id=\"ph2\">`szName`</ph>), and optionally its signature (<ph id=\"ph3\">`pvSigBlob`</ph>).","pos":[1647,1781],"source":"You specify the method using its enclosing class or interface (`td`), its name (`szName`), and optionally its signature (`pvSigBlob`)."},{"content":"There might be multiple methods with the same name in a class or interface.","pos":[1782,1857]},{"content":"In that case, pass the method's signature to find the unique match.","pos":[1858,1925]},{"content":"The signature passed to <ph id=\"ph1\">`FindMethod`</ph> must have been generated in the current scope, because signatures are bound to a particular scope.","pos":[1932,2067],"source":"The signature passed to `FindMethod` must have been generated in the current scope, because signatures are bound to a particular scope."},{"content":"A signature can embed a token that identifies the enclosing class or value type.","pos":[2068,2148]},{"content":"The token is an index into the local TypeDef table.","pos":[2149,2200]},{"content":"You cannot build a run-time signature outside the context of the current scope and use that signature as input to input to <ph id=\"ph1\">`FindMethod`</ph>.","pos":[2201,2337],"source":" You cannot build a run-time signature outside the context of the current scope and use that signature as input to input to `FindMethod`."},{"pos":[2344,2465],"content":"<ph id=\"ph1\">`FindMethod`</ph> finds only methods that were defined directly in the class or interface; it does not find inherited methods.","source":"`FindMethod` finds only methods that were defined directly in the class or interface; it does not find inherited methods."},{"pos":[2474,2486],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2490,2594],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2601,2618],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> Cor.h","source":"**Header:** Cor.h"},{"pos":[2625,2675],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Included as a resource in MsCorEE.dll","source":"**Library:** Included as a resource in MsCorEE.dll"},{"pos":[2682,2790],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]"},{"pos":[2799,2807],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>","pos":[2811,2846],"source":"<xref:System.Reflection.MethodInfo> "},{"content":"<bpt id=\"p1\">[</bpt>IMetaDataImport Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[2851,2959],"source":"[IMetaDataImport Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md) "},{"content":"<bpt id=\"p1\">[</bpt>IMetaDataImport2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadataimport2-interface.md)</ept>","pos":[2963,3072],"source":"[IMetaDataImport2 Interface](../../../../docs/framework/unmanaged-api/metadata/imetadataimport2-interface.md)"}]}