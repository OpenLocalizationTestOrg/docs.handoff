<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="conditional-operator.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">210b7cabb658c6f068d9ab34c83050ad6267e426</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\conditional-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7bc5d97f2794cfcf4a7a6c877e7e0d182866dd2d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2633091885a0de2d4a46e67d74ffcdc98b7936e5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>?: Operator - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>?: Operator (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The conditional operator <ph id="ph1">`?:`</ph>, commonly known as the ternary conditional operator, evaluates a Boolean expression, and returns the result of evaluating one of two expressions, depending on whether the Boolean expression evaluates to <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.2, the <bpt id="p1">[</bpt>conditional ref expression<ept id="p1">](#conditional-ref-expression)</ept> returns the reference to the result of one of the two expressions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The syntax for the conditional operator is as follows:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`condition`</ph> expression must evaluate to <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`condition`</ph> evaluates to <ph id="ph2">`true`</ph>, the <ph id="ph3">`consequence`</ph> expression is evaluated, and its result becomes the result of the operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`condition`</ph> evaluates to <ph id="ph2">`false`</ph>, the <ph id="ph3">`alternative`</ph> expression is evaluated, and its result becomes the result of the operation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Only <ph id="ph1">`consequence`</ph> or <ph id="ph2">`alternative`</ph> is evaluated.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`consequence`</ph> and <ph id="ph2">`alternative`</ph> must be the same, or there must be an implicit conversion from one type to the other.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The conditional operator is right-associative, that is, an expression of the form</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>is evaluated as</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the usage of the conditional operator:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Conditional ref expression</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.2, you can use the conditional ref expression to return the reference to the result of one of the two expressions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can assign that reference to a <bpt id="p1">[</bpt>ref local<ept id="p1">](../keywords/ref.md#ref-locals)</ept> or <bpt id="p2">[</bpt>ref readonly local<ept id="p2">](../keywords/ref.md#ref-readonly-locals)</ept> variable, or use it as a <bpt id="p3">[</bpt>reference return value<ept id="p3">](../keywords/ref.md#reference-return-values)</ept> or as a <bpt id="p4">[</bpt><ph id="ph1">`ref`</ph> method parameter<ept id="p4">](../keywords/ref.md#passing-an-argument-by-reference)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The syntax for the conditional ref expression is as follows:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Like the original conditional operator, the conditional ref expression evaluates only one of the two expressions: either <ph id="ph1">`consequence`</ph> or <ph id="ph2">`alternative`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the case of the conditional ref expression, the type of <ph id="ph1">`consequence`</ph> and <ph id="ph2">`alternative`</ph> must be the same.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the usage of the conditional ref expression:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>feature proposal note<ept id="p1">](../../../../_csharplang/proposals/csharp-7.2/conditional-ref.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Conditional operator and an <ph id="ph1">`if..else`</ph> statement</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use of the conditional operator over an <bpt id="p1">[</bpt>if-else<ept id="p1">](../keywords/if-else.md)</ept> statement might result in more concise code in cases when you need conditionally to compute a value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example demonstrates two ways to classify an integer as negative or nonnegative:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Operator overloadability</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The conditional operator cannot be overloaded.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Conditional operator<ept id="p1">](~/_csharplang/spec/expressions.md#conditional-operator)</ept> section of the <bpt id="p2">[</bpt>C# language specification<ept id="p2">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>if-else statement<ept id="p1">](../keywords/if-else.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>?. and ?[] Operators<ept id="p1">](null-conditional-operators.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>?? Operator<ept id="p1">](null-coalescing-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ref keyword<ept id="p1">](../keywords/ref.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>