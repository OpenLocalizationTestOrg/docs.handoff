{"content":"---\ntitle: \"Asynchronous programming patterns\"\nms.date: \"10/16/2018\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"asynchronous design patterns, .NET\"\n  - \".NET Framework, asynchronous design patterns\"\nms.assetid: 4ece5c0b-f8fe-4114-9862-ac02cfe5a5d7\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Asynchronous programming patterns\n\n.NET provides three patterns for performing asynchronous operations:  \n\n- **Task-based Asynchronous Pattern (TAP)**, which uses a single method to represent the initiation and completion of an asynchronous operation. TAP was introduced in the .NET Framework 4. **It's the recommended approach to asynchronous programming in .NET.** The [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) keywords in C# and the [Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) operators in Visual Basic add language support for TAP. For more information, see [Task-based Asynchronous Pattern (TAP)](task-based-asynchronous-pattern-tap.md).  \n\n- **Event-based Asynchronous Pattern (EAP)**, which is the event-based legacy model for providing asynchronous behavior. It requires a method that has the `Async` suffix and one or more events, event handler delegate types, and `EventArg`-derived types. EAP was introduced in the .NET Framework 2.0. It's no longer recommended for new development. For more information, see [Event-based Asynchronous Pattern (EAP)](event-based-asynchronous-pattern-eap.md).  \n\n- **Asynchronous Programming Model (APM)** pattern (also called the <xref:System.IAsyncResult> pattern), which is the legacy model that uses the <xref:System.IAsyncResult> interface to provide asynchronous behavior. In this pattern, synchronous operations require `Begin` and `End` methods (for example, `BeginWrite` and `EndWrite` to implement an asynchronous write operation). This pattern is no longer recommended for new development. For more information, see [Asynchronous Programming Model (APM)](asynchronous-programming-model-apm.md).  \n  \n## Comparison of patterns\n\nFor a quick comparison of how the three patterns model asynchronous operations, consider a `Read` method that reads a specified amount of data into a provided buffer starting at a specified offset:  \n  \n```csharp  \npublic class MyClass  \n{  \n    public int Read(byte [] buffer, int offset, int count);  \n}  \n```  \n\nThe TAP counterpart of this method would expose the following single `ReadAsync` method:  \n  \n```csharp\npublic class MyClass  \n{  \n    public Task<int> ReadAsync(byte [] buffer, int offset, int count);  \n}  \n```\n\nThe EAP counterpart would expose the following set of types and members:  \n  \n```csharp  \npublic class MyClass  \n{  \n    public void ReadAsync(byte [] buffer, int offset, int count);  \n    public event ReadCompletedEventHandler ReadCompleted;  \n}  \n```  \n  \nThe APM counterpart would expose the `BeginRead` and `EndRead` methods:  \n  \n```csharp  \npublic class MyClass  \n{  \n    public IAsyncResult BeginRead(  \n        byte [] buffer, int offset, int count,   \n        AsyncCallback callback, object state);  \n    public int EndRead(IAsyncResult asyncResult);  \n}  \n```  \n\n## See also\n\n- [Async in depth](../async-in-depth.md)\n- [Asynchronous programming in C#](~/docs/csharp/async.md)\n- [Async Programming in F#](~/docs/fsharp/tutorials/asynchronous-and-concurrent-programming/async.md)\n- [Asynchronous Programming with Async and Await (Visual Basic)](~/docs/visual-basic/programming-guide/concepts/async/index.md)\n","nodes":[{"pos":[4,302],"embed":true,"restype":"x-metadata","content":"title: \"Asynchronous programming patterns\"\nms.date: \"10/16/2018\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"asynchronous design patterns, .NET\"\n  - \".NET Framework, asynchronous design patterns\"\nms.assetid: 4ece5c0b-f8fe-4114-9862-ac02cfe5a5d7\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Asynchronous programming patterns","nodes":[{"pos":[0,33],"content":"Asynchronous programming patterns","nodes":[{"content":"Asynchronous programming patterns","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[309,342],"content":"Asynchronous programming patterns","linkify":"Asynchronous programming patterns","nodes":[{"content":"Asynchronous programming patterns","pos":[0,33]}]},{"content":".NET provides three patterns for performing asynchronous operations:","pos":[344,412]},{"content":"<bpt id=\"p1\">**</bpt>Task-based Asynchronous Pattern (TAP)<ept id=\"p1\">**</ept>, which uses a single method to represent the initiation and completion of an asynchronous operation.","pos":[418,560],"source":"**Task-based Asynchronous Pattern (TAP)**, which uses a single method to represent the initiation and completion of an asynchronous operation."},{"content":"TAP was introduced in the .NET Framework 4.","pos":[561,604]},{"content":"<bpt id=\"p1\">**</bpt>It's the recommended approach to asynchronous programming in .NET.<ept id=\"p1\">**</ept>","pos":[605,675],"source":"**It's the recommended approach to asynchronous programming in .NET.**"},{"content":"The <bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/async.md)</ept> and <bpt id=\"p2\">[</bpt>await<ept id=\"p2\">](~/docs/csharp/language-reference/keywords/await.md)</ept> keywords in C# and the <bpt id=\"p3\">[</bpt>Async<ept id=\"p3\">](~/docs/visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id=\"p4\">[</bpt>Await<ept id=\"p4\">](~/docs/visual-basic/language-reference/operators/await-operator.md)</ept> operators in Visual Basic add language support for TAP.","pos":[676,1029],"source":" The [async](~/docs/csharp/language-reference/keywords/async.md) and [await](~/docs/csharp/language-reference/keywords/await.md) keywords in C# and the [Async](~/docs/visual-basic/language-reference/modifiers/async.md) and [Await](~/docs/visual-basic/language-reference/operators/await-operator.md) operators in Visual Basic add language support for TAP."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id=\"p1\">](task-based-asynchronous-pattern-tap.md)</ept>.","pos":[1030,1136],"source":" For more information, see [Task-based Asynchronous Pattern (TAP)](task-based-asynchronous-pattern-tap.md)."},{"content":"<bpt id=\"p1\">**</bpt>Event-based Asynchronous Pattern (EAP)<ept id=\"p1\">**</ept>, which is the event-based legacy model for providing asynchronous behavior.","pos":[1142,1260],"source":"**Event-based Asynchronous Pattern (EAP)**, which is the event-based legacy model for providing asynchronous behavior."},{"content":"It requires a method that has the <ph id=\"ph1\">`Async`</ph> suffix and one or more events, event handler delegate types, and <ph id=\"ph2\">`EventArg`</ph>-derived types.","pos":[1261,1393],"source":" It requires a method that has the `Async` suffix and one or more events, event handler delegate types, and `EventArg`-derived types."},{"content":"EAP was introduced in the .NET Framework 2.0.","pos":[1394,1439]},{"content":"It's no longer recommended for new development.","pos":[1440,1487]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id=\"p1\">](event-based-asynchronous-pattern-eap.md)</ept>.","pos":[1488,1596],"source":" For more information, see [Event-based Asynchronous Pattern (EAP)](event-based-asynchronous-pattern-eap.md)."},{"content":"<bpt id=\"p1\">**</bpt>Asynchronous Programming Model (APM)<ept id=\"p1\">**</ept> pattern (also called the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> pattern), which is the legacy model that uses the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> interface to provide asynchronous behavior.","pos":[1602,1815],"source":"**Asynchronous Programming Model (APM)** pattern (also called the <xref:System.IAsyncResult> pattern), which is the legacy model that uses the <xref:System.IAsyncResult> interface to provide asynchronous behavior."},{"content":"In this pattern, synchronous operations require <ph id=\"ph1\">`Begin`</ph> and <ph id=\"ph2\">`End`</ph> methods (for example, <ph id=\"ph3\">`BeginWrite`</ph> and <ph id=\"ph4\">`EndWrite`</ph> to implement an asynchronous write operation).","pos":[1816,1978],"source":" In this pattern, synchronous operations require `Begin` and `End` methods (for example, `BeginWrite` and `EndWrite` to implement an asynchronous write operation)."},{"content":"This pattern is no longer recommended for new development.","pos":[1979,2037]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Programming Model (APM)<ept id=\"p1\">](asynchronous-programming-model-apm.md)</ept>.","pos":[2038,2142],"source":" For more information, see [Asynchronous Programming Model (APM)](asynchronous-programming-model-apm.md)."},{"pos":[2151,2173],"content":"Comparison of patterns","linkify":"Comparison of patterns","nodes":[{"content":"Comparison of patterns","pos":[0,22]}]},{"pos":[2175,2372],"content":"For a quick comparison of how the three patterns model asynchronous operations, consider a <ph id=\"ph1\">`Read`</ph> method that reads a specified amount of data into a provided buffer starting at a specified offset:","source":"For a quick comparison of how the three patterns model asynchronous operations, consider a `Read` method that reads a specified amount of data into a provided buffer starting at a specified offset:"},{"pos":[2490,2578],"content":"The TAP counterpart of this method would expose the following single <ph id=\"ph1\">`ReadAsync`</ph> method:","source":"The TAP counterpart of this method would expose the following single `ReadAsync` method:"},{"content":"The EAP counterpart would expose the following set of types and members:","pos":[2703,2775]},{"pos":[2961,3032],"content":"The APM counterpart would expose the <ph id=\"ph1\">`BeginRead`</ph> and <ph id=\"ph2\">`EndRead`</ph> methods:","source":"The APM counterpart would expose the `BeginRead` and `EndRead` methods:"},{"pos":[3279,3287],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3291,3329],"content":"<bpt id=\"p1\">[</bpt>Async in depth<ept id=\"p1\">](../async-in-depth.md)</ept>","source":"[Async in depth](../async-in-depth.md)"},{"pos":[3332,3388],"content":"<bpt id=\"p1\">[</bpt>Asynchronous programming in C#<ept id=\"p1\">](~/docs/csharp/async.md)</ept>","source":"[Asynchronous programming in C#](~/docs/csharp/async.md)"},{"pos":[3391,3490],"content":"<bpt id=\"p1\">[</bpt>Async Programming in F#<ept id=\"p1\">](~/docs/fsharp/tutorials/asynchronous-and-concurrent-programming/async.md)</ept>","source":"[Async Programming in F#](~/docs/fsharp/tutorials/asynchronous-and-concurrent-programming/async.md)"},{"pos":[3493,3618],"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id=\"p1\">](~/docs/visual-basic/programming-guide/concepts/async/index.md)</ept>","source":"[Asynchronous Programming with Async and Await (Visual Basic)](~/docs/visual-basic/programming-guide/concepts/async/index.md)"}]}