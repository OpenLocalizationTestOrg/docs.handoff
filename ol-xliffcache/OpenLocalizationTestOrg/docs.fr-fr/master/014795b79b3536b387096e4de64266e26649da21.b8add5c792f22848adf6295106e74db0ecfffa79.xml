{"content":"---\ntitle: \"Activity Tree Inspection\"\nms.date: \"03/30/2017\"\nms.assetid: 100d00e4-8c1d-4233-8fbb-dd443a01155d\n---\n# Activity Tree Inspection\nActivity tree inspection is used by workflow application authors to inspect the workflows hosted by the application. By using <xref:System.Activities.WorkflowInspectionServices>, workflows can be searched for specific child activities, individual activities and their properties can be enumerated, and runtime metadata of the activities can be cached at a specific time. This topic provides an overview of <xref:System.Activities.WorkflowInspectionServices> and how to use it to inspect an activity tree.  \n  \n## Using WorkflowInspectionServices  \n The <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> method is used to enumerate all of the activities in the specified activity tree. <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> returns an enumerable that touches all activities within the tree including children, delegate handlers, variable defaults, and argument expressions. In the following example, a workflow definition is created by using a <xref:System.Activities.Statements.Sequence>, <xref:System.Activities.Statements.While>, <xref:System.Activities.Statements.ForEach%601>, <xref:System.Activities.Statements.WriteLine>, and expressions. After the workflow definition is created, it is invoked and then the `InspectActivity` method is called.  \n  \n [!code-csharp[CFX_WorkflowApplicationExample#45](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#45)]  \n  \n To enumerate the activities, the <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> is called on the root activity, and again recursively on each returned activity. In the following example, the <xref:System.Activities.Activity.DisplayName%2A> of each activity and expression in the activity tree is written to the console.  \n  \n [!code-csharp[CFX_WorkflowApplicationExample#46](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#46)]  \n  \n This sample code provides the following output.  \n  \n **List Item 1**  \n**List Item 2**   \n**List Item 3**   \n**List Item 4**   \n**List Item 5**   \n**Items added to collection.**   \n**Sequence**   \n **Literal<List\\<String>>**  \n **While**  \n **AddToCollection\\<String>**  \n **VariableValue<ICollection\\<String>>**  \n **LambdaValue\\<String>**  \n **LocationReferenceValue<List\\<String>>**  \n **LambdaValue\\<Boolean>**  \n **LocationReferenceValue<List\\<String>>**  \n **ForEach\\<String>**  \n **VariableValue<IEnumerable\\<String>>**  \n **WriteLine**  \n **DelegateArgumentValue\\<String>**  \n **Sequence**  \n **WriteLine**  \n **Literal\\<String>**  To retrieve a specific activity instead of enumerating all of the activities, <xref:System.Activities.WorkflowInspectionServices.Resolve%2A> is used. Both <xref:System.Activities.WorkflowInspectionServices.Resolve%2A> and <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> perform metadata caching if `WorkflowInspectionServices.CacheMetadata` has not been previously called. If <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> has been called then <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> is based on the existing metadata. Therefore, if tree changes have been made since the last call to <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A>, <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> might give unexpected results. If changes have been made to the workflow after calling <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A>, metadata can be re-cached by calling the <xref:System.Activities.Validation.ActivityValidationServices> <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> method. Caching metadata is discussed in the next section.  \n  \n### Caching Metadata  \n Caching the metadata for an activity builds and validates a description of the activityâ€™s arguments, variables, child activities, and activity delegates. Metadata, by default, is cached by the runtime when an activity is prepared for execution. If a workflow host author wants to cache the metadata for an activity or activity tree before this, for example to take all of the cost upfront, then <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> can be used to cache the metadata at the desired time.\n","nodes":[{"pos":[4,108],"embed":true,"restype":"x-metadata","content":"title: \"Activity Tree Inspection\"\nms.date: \"03/30/2017\"\nms.assetid: 100d00e4-8c1d-4233-8fbb-dd443a01155d","nodes":[{"content":"Activity Tree Inspection","nodes":[{"pos":[0,24],"content":"Activity Tree Inspection","nodes":[{"content":"Activity Tree Inspection","pos":[0,24]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[115,139],"content":"Activity Tree Inspection","linkify":"Activity Tree Inspection","nodes":[{"content":"Activity Tree Inspection","pos":[0,24]}]},{"content":"Activity tree inspection is used by workflow application authors to inspect the workflows hosted by the application.","pos":[140,256]},{"content":"By using <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices&gt;</ph>, workflows can be searched for specific child activities, individual activities and their properties can be enumerated, and runtime metadata of the activities can be cached at a specific time.","pos":[257,510],"source":" By using <xref:System.Activities.WorkflowInspectionServices>, workflows can be searched for specific child activities, individual activities and their properties can be enumerated, and runtime metadata of the activities can be cached at a specific time."},{"content":"This topic provides an overview of <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices&gt;</ph> and how to use it to inspect an activity tree.","pos":[511,644],"source":" This topic provides an overview of <xref:System.Activities.WorkflowInspectionServices> and how to use it to inspect an activity tree."},{"pos":[653,685],"content":"Using WorkflowInspectionServices","linkify":"Using WorkflowInspectionServices","nodes":[{"content":"Using WorkflowInspectionServices","pos":[0,32]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> method is used to enumerate all of the activities in the specified activity tree.","pos":[689,843],"source":"The <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> method is used to enumerate all of the activities in the specified activity tree."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> returns an enumerable that touches all activities within the tree including children, delegate handlers, variable defaults, and argument expressions.","pos":[844,1062],"source":"<xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> returns an enumerable that touches all activities within the tree including children, delegate handlers, variable defaults, and argument expressions."},{"content":"In the following example, a workflow definition is created by using a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.Statements.While&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph>, and expressions.","pos":[1063,1334],"source":" In the following example, a workflow definition is created by using a <xref:System.Activities.Statements.Sequence>, <xref:System.Activities.Statements.While>, <xref:System.Activities.Statements.ForEach%601>, <xref:System.Activities.Statements.WriteLine>, and expressions."},{"content":"After the workflow definition is created, it is invoked and then the <ph id=\"ph1\">`InspectActivity`</ph> method is called.","pos":[1335,1439],"source":" After the workflow definition is created, it is invoked and then the `InspectActivity` method is called."},{"content":"To enumerate the activities, the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> is called on the root activity, and again recursively on each returned activity.","pos":[1593,1775],"source":"To enumerate the activities, the <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> is called on the root activity, and again recursively on each returned activity."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.Activities.Activity.DisplayName%2A&gt;</ph> of each activity and expression in the activity tree is written to the console.","pos":[1776,1934],"source":" In the following example, the <xref:System.Activities.Activity.DisplayName%2A> of each activity and expression in the activity tree is written to the console."},{"content":"This sample code provides the following output.","pos":[2088,2135]},{"content":"<bpt id=\"p1\">**</bpt>List Item 1<ept id=\"p1\">**</ept>","pos":[2142,2157],"source":"**List Item 1**"},{"content":"<bpt id=\"p1\">**</bpt>List Item 2<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2160,2176],"source":"**List Item 2** "},{"content":"<bpt id=\"p1\">**</bpt>List Item 3<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2179,2195],"source":"**List Item 3** "},{"content":"<bpt id=\"p1\">**</bpt>List Item 4<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2198,2214],"source":"**List Item 4** "},{"content":"<bpt id=\"p1\">**</bpt>List Item 5<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2217,2233],"source":"**List Item 5** "},{"content":"<bpt id=\"p1\">**</bpt>Items added to collection.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2236,2267],"source":"**Items added to collection.** "},{"content":"<bpt id=\"p1\">**</bpt>Sequence<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2270,2283],"source":"**Sequence** "},{"content":"<bpt id=\"p1\">**</bpt>Literal&lt;List<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept>","pos":[2287,2313],"source":"**Literal<List\\<String>>**"},{"content":"<bpt id=\"p1\">**</bpt>While<ept id=\"p1\">**</ept>","pos":[2317,2326],"source":"**While**"},{"content":"<bpt id=\"p1\">**</bpt>AddToCollection<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept>","pos":[2330,2358],"source":"**AddToCollection\\<String>**"},{"content":"<bpt id=\"p1\">**</bpt>VariableValue&lt;ICollection<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept>","pos":[2362,2401],"source":"**VariableValue<ICollection\\<String>>**"},{"content":"<bpt id=\"p1\">**</bpt>LambdaValue<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept>","pos":[2405,2429],"source":"**LambdaValue\\<String>**"},{"content":"<bpt id=\"p1\">**</bpt>LocationReferenceValue&lt;List<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept>","pos":[2433,2474],"source":"**LocationReferenceValue<List\\<String>>**"},{"content":"<bpt id=\"p1\">**</bpt>LambdaValue<ph id=\"ph1\">\\&lt;</ph>Boolean&gt;<ept id=\"p1\">**</ept>","pos":[2478,2503],"source":"**LambdaValue\\<Boolean>**"},{"content":"<bpt id=\"p1\">**</bpt>LocationReferenceValue&lt;List<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept>","pos":[2507,2548],"source":"**LocationReferenceValue<List\\<String>>**"},{"content":"<bpt id=\"p1\">**</bpt>ForEach<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept>","pos":[2552,2572],"source":"**ForEach\\<String>**"},{"content":"<bpt id=\"p1\">**</bpt>VariableValue&lt;IEnumerable<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept>","pos":[2576,2615],"source":"**VariableValue<IEnumerable\\<String>>**"},{"content":"<bpt id=\"p1\">**</bpt>WriteLine<ept id=\"p1\">**</ept>","pos":[2619,2632],"source":"**WriteLine**"},{"content":"<bpt id=\"p1\">**</bpt>DelegateArgumentValue<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept>","pos":[2636,2670],"source":"**DelegateArgumentValue\\<String>**"},{"content":"<bpt id=\"p1\">**</bpt>Sequence<ept id=\"p1\">**</ept>","pos":[2674,2686],"source":"**Sequence**"},{"content":"<bpt id=\"p1\">**</bpt>WriteLine<ept id=\"p1\">**</ept>","pos":[2690,2703],"source":"**WriteLine**"},{"content":"<bpt id=\"p1\">**</bpt>Literal<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept>  To retrieve a specific activity instead of enumerating all of the activities, <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInspectionServices.Resolve%2A&gt;</ph> is used.","pos":[2707,2878],"source":"**Literal\\<String>**  To retrieve a specific activity instead of enumerating all of the activities, <xref:System.Activities.WorkflowInspectionServices.Resolve%2A> is used."},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.Resolve%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> perform metadata caching if <ph id=\"ph3\">`WorkflowInspectionServices.CacheMetadata`</ph> has not been previously called.","pos":[2879,3122],"source":" Both <xref:System.Activities.WorkflowInspectionServices.Resolve%2A> and <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> perform metadata caching if `WorkflowInspectionServices.CacheMetadata` has not been previously called."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt;</ph> has been called then <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> is based on the existing metadata.","pos":[3123,3319],"source":" If <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> has been called then <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> is based on the existing metadata."},{"content":"Therefore, if tree changes have been made since the last call to <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> might give unexpected results.","pos":[3320,3554],"source":" Therefore, if tree changes have been made since the last call to <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A>, <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> might give unexpected results."},{"content":"If changes have been made to the workflow after calling <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph>, metadata can be re-cached by calling the <ph id=\"ph2\">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> <ph id=\"ph3\">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> method.","pos":[3555,3867],"source":" If changes have been made to the workflow after calling <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A>, metadata can be re-cached by calling the <xref:System.Activities.Validation.ActivityValidationServices> <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> method."},{"content":"Caching metadata is discussed in the next section.","pos":[3868,3918]},{"pos":[3928,3944],"content":"Caching Metadata","linkify":"Caching Metadata","nodes":[{"content":"Caching Metadata","pos":[0,16]}]},{"content":"Caching the metadata for an activity builds and validates a description of the activityâ€™s arguments, variables, child activities, and activity delegates.","pos":[3948,4101]},{"content":"Metadata, by default, is cached by the runtime when an activity is prepared for execution.","pos":[4102,4192]},{"content":"If a workflow host author wants to cache the metadata for an activity or activity tree before this, for example to take all of the cost upfront, then <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt;</ph> can be used to cache the metadata at the desired time.","pos":[4193,4466],"source":" If a workflow host author wants to cache the metadata for an activity or activity tree before this, for example to take all of the cost upfront, then <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> can be used to cache the metadata at the desired time."}]}