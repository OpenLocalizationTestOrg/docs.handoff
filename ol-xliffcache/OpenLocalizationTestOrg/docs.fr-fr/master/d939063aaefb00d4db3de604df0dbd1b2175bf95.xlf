<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="debugging-interfaces.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d939063aaefb00d4db3de604df0dbd1b2175bf95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\debugging\debugging-interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7b06710e5f297bfb7101992da370f23624d93ce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a21a8ca7899074410e083fb68803d6f4181414c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Debugging Interfaces</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Debugging Interfaces</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This section describes the unmanaged interfaces that handle the debugging of a program that is executing in the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICLRDataEnumMemoryRegions Interface<ept id="p1">](iclrdataenummemoryregions-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Provides a method to enumerate regions of memory that are specified by callers.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICLRDataEnumMemoryRegionsCallback Interface<ept id="p1">](iclrdataenummemoryregionscallback-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Provides a callback method for <ph id="ph1">`EnumMemoryRegions`</ph> to report to the debugger, the result of an attempt to enumerate a specified region of memory.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICLRDataTarget Interface<ept id="p1">](iclrdatatarget-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Provides methods for interaction with a target CLR process.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICLRDataTarget2 Interface<ept id="p1">](iclrdatatarget2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">`ICLRDataTarget`</ph> that is used by the data access services layer to manipulate virtual memory regions in the target process.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICLRDataTarget3 Interface<ept id="p1">](iclrdatatarget3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A subclass of <bpt id="p1">[</bpt>ICLRDataTarget2<ept id="p1">](iclrdatatarget2-interface.md)</ept> that provides access to exception information.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICLRDebugging Interface<ept id="p1">](iclrdebugging-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Provides methods that handle loading and unloading modules for debugging.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICLRDebuggingLibraryProvider Interface<ept id="p1">](iclrdebugginglibraryprovider-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Includes the <bpt id="p1">[</bpt>ProvideLibrary Method<ept id="p1">](iclrdebugginglibraryprovider-providelibrary-method.md)</ept> method, which gets a library provider callback interface that allows common language runtime version-specific debugging libraries to be located and loaded on demand.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICLRMetadataLocator Interface<ept id="p1">](iclrmetadatalocator-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Interface used by the data access services layer to locate metadata of assemblies in a target process.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebug Interface<ept id="p1">](icordebug-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Provides methods that allow developers to debug applications in the CLR environment.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAppDomain Interface<ept id="p1">](icordebugappdomain-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Provides methods for debugging application domains.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAppDomain2 Interface<ept id="p1">](icordebugappdomain2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Provides methods to work with arrays, pointers, function pointers, and ByRef types.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This interface is an extension of the <ph id="ph1">`ICorDebugAppDomain`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAppDomain3 Interface<ept id="p1">](icordebugappdomain3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Provides methods to work with the <ph id="ph1">[!INCLUDE[wrt](../../../../includes/wrt-md.md)]</ph> types in an application domain.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This interface is an extension of the <ph id="ph1">`ICorDebugAppDomain`</ph> and <ph id="ph2">`ICorDebugAppDomain2`</ph> interfaces.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAppDomain4 Interface<ept id="p1">](icordebugappdomain4-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Logically extends the <bpt id="p1">[</bpt>ICorDebugAppDomain<ept id="p1">](icordebugappdomain-interface.md)</ept> interface to get a managed object from a COM callable wrapper.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAppDomainEnum Interface<ept id="p1">](icordebugappdomainenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Provides a method that returns a specified number of <ph id="ph1">`ICorDebugAppDomain`</ph> values starting at the next location in the enumeration.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugArrayValue Interface<ept id="p1">](icordebugarrayvalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">`ICorDebugHeapValue`</ph> that represents a single-dimensional or multi-dimensional array.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAssembly Interface<ept id="p1">](icordebugassembly-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Represents an assembly.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAssembly2 Interface<ept id="p1">](icordebugassembly2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Represents an assembly.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This interface is an extension of the <ph id="ph1">`ICorDebugAssembly`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAssembly3 Interface<ept id="p1">](icordebugassembly3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Logically extends the <bpt id="p1">[</bpt>ICorDebugAssembly<ept id="p1">](icordebugassembly-interface.md)</ept> interface to provide support for container assemblies and their contained assemblies.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAssemblyEnum Interface<ept id="p1">](icordebugassemblyenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugAssembly`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugBlockingObjectEnum Interface<ept id="p1">](icordebugblockingobjectenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Provides an enumerator for a list of <bpt id="p1">[</bpt>CorDebugBlockingObject<ept id="p1">](cordebugblockingobject-structure.md)</ept> structures.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugBoxValue Interface<ept id="p1">](icordebugboxvalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">`ICorDebugHeapValue`</ph> that represents a boxed value class object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugBreakpoint Interface<ept id="p1">](icordebugbreakpoint-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Represents a breakpoint in a function or a watch point on a value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugBreakpointEnum Interface<ept id="p1">](icordebugbreakpointenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugBreakpoint`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugChain Interface<ept id="p1">](icordebugchain-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Represents a segment of a physical or logical call stack.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugChainEnum Interface<ept id="p1">](icordebugchainenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugChain`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugClass Interface<ept id="p1">](icordebugclass-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Represents a type, which can be either basic or complex (that is, user-defined).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the type is generic, <ph id="ph1">`ICorDebugClass`</ph> represents the uninstantiated generic type.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugClass2 Interface<ept id="p1">](icordebugclass2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Represents a generic class or a class with a method parameter of type <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This interface extends <ph id="ph1">`ICorDebugClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugCode Interface<ept id="p1">](icordebugcode-interface1.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Represents a segment of either Microsoft intermediate language (MSIL) code or native code.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugCode2 Interface<ept id="p1">](icordebugcode2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Provides methods that extend the capabilities of <ph id="ph1">`ICorDebugCode`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugCode3 Interface<ept id="p1">](icordebugcode3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Provides a method that extends <bpt id="p1">[</bpt>ICorDebugCode<ept id="p1">](icordebugcode-interface1.md)</ept> and <bpt id="p2">[</bpt>ICorDebugCode2<ept id="p2">](icordebugcode2-interface.md)</ept> to provide information about a managed return value.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugCode4 Interface<ept id="p1">](icordebugcode4-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Provides a method that enables a debugger to enumerate the local variables and arguments in a function.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugCodeEnum Interface<ept id="p1">](icordebugcodeenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugCode`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugComObjectValue Interface<ept id="p1">](icordebugcomobjectvalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Provides methods to retrieve cached interface objects.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugContext Interface<ept id="p1">](icordebugcontext-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Represents a context object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This interface has not been implemented yet.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugController Interface<ept id="p1">](icordebugcontroller-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Represents a scope, either a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> or an <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>, in which code execution context can be controlled.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugDataTarget Interface<ept id="p1">](icordebugdatatarget-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Provides a callback interface that provides access to a particular target process.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugDataTarget2 Interface<ept id="p1">](icordebugdatatarget2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Logically extends the <bpt id="p1">[</bpt>ICorDebugDataTarget<ept id="p1">](icordebugdatatarget-interface.md)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugDataTarget3 Interface<ept id="p1">](icordebugdatatarget3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Logically extends the <bpt id="p1">[</bpt>ICorDebugDataTarget<ept id="p1">](icordebugdatatarget-interface.md)</ept> interface to provide information about loaded modules.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugDebugEvent Interface<ept id="p1">](icordebugdebugevent-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Defines the base interface from which all <ph id="ph1">`ICorDebug`</ph> debug events derive.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugEditAndContinueErrorInfo Interface<ept id="p1">](icordebugeditandcontinueerrorinfo-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Obsolete.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Do not use this interface.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugEditAndContinueSnapshot Interface<ept id="p1">](icordebugeditandcontinuesnapshot-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Obsolete.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Do not use this interface.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugEnum Interface<ept id="p1">](icordebugenum-interface1.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Serves as the abstract base interface for debugging enumerators.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugErrorInfoEnum Interface<ept id="p1">](icordebugerrorinfoenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Obsolete.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Do not use this interface.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugEval Interface<ept id="p1">](icordebugeval-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Provides methods to enable the debugger to execute code within the context of the code being debugged.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugEval2 Interface<ept id="p1">](icordebugeval2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Extends <ph id="ph1">`ICorDebugEval`</ph> to provide support for generic types.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugExceptionDebugEvent Interface<ept id="p1">](icordebugexceptiondebugevent-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Extends the <bpt id="p1">[</bpt>ICorDebugDebugEvent<ept id="p1">](icordebugdebugevent-interface.md)</ept> interface to support exception events.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugExceptionObjectCallStackEnum Interface<ept id="p1">](icordebugexceptionobjectcallstackenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Provides an enumerator for call stack information that is embedded in an exception object.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugExceptionObjectValue Interface<ept id="p1">](icordebugexceptionobjectvalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Extends the <bpt id="p1">[</bpt>ICorDebugObjectValue<ept id="p1">](icordebugobjectvalue-interface.md)</ept> interface to provide stack trace information from a managed exception object.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugFrame Interface<ept id="p1">](icordebugframe-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Represents a frame on the current stack.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugFrameEnum Interface<ept id="p1">](icordebugframeenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugFrame`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugFunction Interface<ept id="p1">](icordebugfunction-interface1.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Represents a managed function or method.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugFunction2 Interface<ept id="p1">](icordebugfunction2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Logically extends <ph id="ph1">`ICorDebugFunction`</ph> to provide support for Just My Code step-through debugging.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugFunction3 Interface<ept id="p1">](icordebugfunction3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Logically extends the <bpt id="p1">[</bpt>ICorDebugFunction<ept id="p1">](icordebugfunction-interface1.md)</ept> interface to provide access to code from a ReJIT request.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugFunctionBreakpoint Interface<ept id="p1">](icordebugfunctionbreakpoint-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Extends <ph id="ph1">`ICorDebugBreakpoint`</ph> to support breakpoints within functions.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugGCReferenceEnum Interface<ept id="p1">](icordebuggcreferenceenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Provides an enumerator for objects that will be garbage-collected.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugGenericValue Interface<ept id="p1">](icordebuggenericvalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">`ICorDebugValue`</ph> that applies to all values.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This interface provides Get and Set methods for the value.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugGuidToTypeEnum Interface<ept id="p1">](icordebugguidtotypeenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Provides an enumerator for an object that maps GUIDs and their corresponding <ph id="ph1">`ICorDebugType`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugHandleValue Interface<ept id="p1">](icordebughandlevalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">`ICorDebugReferenceValue`</ph> that represents a reference value to which the debugger has created a handle for garbage collection.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugHeapEnum Interface<ept id="p1">](icordebugheapenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Provides an enumerator for objects on the managed heap.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugHeapSegmentEnum Interface<ept id="p1">](icordebugheapsegmentenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Provides an enumerator for the memory regions of the managed heap.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugHeapValue Interface<ept id="p1">](icordebugheapvalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">`ICorDebugValue`</ph> that represents an object that has been collected by the CLR garbage collector.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugHeapValue2 Interface<ept id="p1">](icordebugheapvalue2-interface1.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>An extension of <ph id="ph1">`ICorDebugHeapValue`</ph> that provides support for runtime handles.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugHeapValue3 Interface<ept id="p1">](icordebugheapvalue3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Exposes the monitor lock properties of objects.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugILCode Interface<ept id="p1">](icordebugilcode-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Represents a segment of intermediate language (IL) code.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugILCode2 Interface<ept id="p1">](icordebugilcode2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Logically extends the <bpt id="p1">[</bpt>ICorDebugILCode<ept id="p1">](icordebugilcode-interface.md)</ept> interface to provide methods that return the token for a function's local variable signature, and that map a profiler's instrumented intermediate language (IL) offsets to original method IL offsets.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugILFrame Interface<ept id="p1">](icordebugilframe-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Represents a stack frame of MSIL code.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugILFrame2 Interface<ept id="p1">](icordebugilframe2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A logical extension of <ph id="ph1">`ICorDebugILFrame`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugILFrame3 Interface<ept id="p1">](icordebugilframe3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Provides a method that encapsulates the return value of a function.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugILFrame4 Interface<ept id="p1">](icordebugilframe4-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Provides methods that allow you to access the local variables and code in a stack frame of intermediate language (IL) code.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A parameter specifies whether the debugger has access to variables and code added in profiler ReJIT instrumentation.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugInstanceFieldSymbol Interface<ept id="p1">](icordebuginstancefieldsymbol-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Represents the debug symbol information for an instance field.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugInternalFrame Interface<ept id="p1">](icordebuginternalframe-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Identifies frame types for the debugger.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugInternalFrame2 Interface<ept id="p1">](icordebuginternalframe2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Provides information about internal frames, including stack address and position in relation to <bpt id="p1">[</bpt>ICorDebugFrame<ept id="p1">](icordebugframe-interface.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugLoadedModule Interface<ept id="p1">](icordebugloadedmodule-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Provides information about a loaded module.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugManagedCallback Interface<ept id="p1">](icordebugmanagedcallback-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Provides methods to process debugger callbacks.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugManagedCallback2 Interface<ept id="p1">](icordebugmanagedcallback2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Provides methods to support debugger exception handling and managed debugging assistants (MDAs).</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ICorDebugManagedCallback2`</ph> is a logical extension of <ph id="ph2">`ICorDebugManagedCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugManagedCallback3 Interface<ept id="p1">](icordebugmanagedcallback3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Provides a callback method that indicates that an enabled custom debugger notification has been raised.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugMDA Interface<ept id="p1">](icordebugmda-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Represents a managed debugging assistant (MDA) message.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugMemoryBuffer Interface<ept id="p1">](icordebugmemorybuffer-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Represents an in-memory buffer.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugMergedAssemblyRecord Interface<ept id="p1">](icordebugmergedassemblyrecord-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Provides information about a merged assembly.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugMetaDataLocator Interface<ept id="p1">](icordebugmetadatalocator-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Provides metadata information to the debugger.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugModule Interface<ept id="p1">](icordebugmodule-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Represents a CLR module, which is either an executable or a dynamic-link library (DLL).</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugModule2 Interface<ept id="p1">](icordebugmodule2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Serves as a logical extension to <ph id="ph1">`ICorDebugModule`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugModule3 Interface<ept id="p1">](icordebugmodule3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Creates a symbol reader for a dynamic module.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugModuleBreakpoint Interface<ept id="p1">](icordebugmodulebreakpoint-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Extends <ph id="ph1">`ICorDebugBreakpoint`</ph> to provide access to specific modules.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugModuleDebugEvent Interface<ept id="p1">](icordebugmoduledebugevent-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Extends the <bpt id="p1">[</bpt>ICorDebugDebugEvent<ept id="p1">](icordebugdebugevent-interface.md)</ept> interface to support module-level events.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugModuleEnum Interface<ept id="p1">](icordebugmoduleenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugModule`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugMutableDataTarget Interface<ept id="p1">](icordebugmutabledatatarget-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Extends the <bpt id="p1">[</bpt>ICorDebugDataTarget<ept id="p1">](icordebugdatatarget-interface.md)</ept> interface to support mutable data targets.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugNativeFrame Interface<ept id="p1">](icordebugnativeframe-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A specialized implementation of <ph id="ph1">`ICorDebugFrame`</ph> used for native frames.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugNativeFrame2 Interface<ept id="p1">](icordebugnativeframe2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Provides methods that test for child and parent frame relationships.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugObjectEnum Interface<ept id="p1">](icordebugobjectenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates arrays of objects by their relative virtual addresses (RVAs).</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugObjectValue Interface<ept id="p1">](icordebugobjectvalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">`ICorDebugValue`</ph> that represents a value that contains an object.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugObjectValue2 Interface<ept id="p1">](icordebugobjectvalue2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Extends <ph id="ph1">`ICorDebugObjectValue`</ph> to support inheritance and overrides.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcess Interface<ept id="p1">](icordebugprocess-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Represents a process that is executing managed code.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcess2 Interface<ept id="p1">](icordebugprocess2-interface1.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A logical extension of <ph id="ph1">`ICorDebugProcess`</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcess3 Interface<ept id="p1">](icordebugprocess3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Controls custom debugger notifications.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcess4 Interface<ept id="p1">](icordebugprocess4-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Provides support for out of process execution control.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcess5 Interface<ept id="p1">](icordebugprocess5-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Extends the <bpt id="p1">[</bpt>ICorDebugProcess<ept id="p1">](icordebugprocess-interface.md)</ept> interface to support access to the managed heap, to provide information about garbage collection of managed objects, and to determine whether a debugger loads images from the application's local native image cache.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcess6 Interface<ept id="p1">](icordebugprocess6-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Logically extends the <bpt id="p1">[</bpt>ICorDebugProcess<ept id="p1">](icordebugprocess-interface.md)</ept> interface to enable features such as decoding managed debug events that are encoded in native exception debug events and virtual module splitting.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcess7 Interface<ept id="p1">](icordebugprocess7-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Provides a method that configures the debugger to handle in-memory metadata updates in the target process.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcess8 Interface<ept id="p1">](icordebugprocess8-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Logically extends the <bpt id="p1">[</bpt>ICorDebugProcess<ept id="p1">](icordebugprocess-interface.md)</ept> interface to enable or disable certain types of <bpt id="p2">[</bpt>ICorDebugManagedCallback2<ept id="p2">](icordebugmanagedcallback2-interface.md)</ept> exception callbacks.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcessEnum Interface<ept id="p1">](icordebugprocessenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugProcess`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugReferenceValue Interface<ept id="p1">](icordebugreferencevalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">`ICorDebugValue`</ph> that supports reference types.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugRegisterSet Interface<ept id="p1">](icordebugregisterset-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Represents the set of registers available on the machine that is currently executing code.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugRegisterSet2 Interface<ept id="p1">](icordebugregisterset2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Extends the capabilities of <ph id="ph1">`ICorDebugRegisterSet`</ph> for hardware platforms that have more than 64 registers.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugRemote Interface<ept id="p1">](icordebugremote-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Provides the ability to launch or attach a managed debugger to a remote target process.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugRemoteTarget Interface<ept id="p1">](icordebugremotetarget-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Provides methods that enable you to debug Silverlight-based applications in the CLR environment.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugRuntimeUnwindableFrame Interface<ept id="p1">](icordebugruntimeunwindableframe-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Provides support for unmanaged methods that require the common language runtime (CLR) to unwind a frame.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugStackWalk Interface<ept id="p1">](icordebugstackwalk-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Provides methods for getting the managed methods, or frames, on a thread’s stack.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugStaticFieldSymbol Interface<ept id="p1">](icordebugstaticfieldsymbol-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Represents the debug symbol information for a static field.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugStepper Interface<ept id="p1">](icordebugstepper-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Represents a step in code execution that is performed by a debugger, serves as an identifier between the issuance and completion of a command, and provides a way to cancel a step.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugStepper2 Interface<ept id="p1">](icordebugstepper2-interface1.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Provides support for Just My Code (JMC) debugging.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugStepperEnum Interface<ept id="p1">](icordebugstepperenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugStepper`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugStringValue Interface<ept id="p1">](icordebugstringvalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">`ICorDebugHeapValue`</ph> that applies to string values.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugSymbolProvider Interface<ept id="p1">](icordebugsymbolprovider-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Provides methods that can be used to retrieve debug symbol information.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugSymbolProvider2 Interface<ept id="p1">](icordebugsymbolprovider2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Logically extends the <bpt id="p1">[</bpt>ICorDebugSymbolProvider<ept id="p1">](icordebugsymbolprovider-interface.md)</ept> interface to retrieve additional debug symbol information.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugThread Interface<ept id="p1">](icordebugthread-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Represents a thread in a process.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The lifetime of an <ph id="ph1">`ICorDebugThread`</ph> instance is the same as the lifetime of the thread it represents.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugThread2 Interface<ept id="p1">](icordebugthread2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Serves as a logical extension to <ph id="ph1">`ICorDebugThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugThread3 Interface<ept id="p1">](icordebugthread3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Provides the entry point to the <bpt id="p1">[</bpt>ICorDebugStackWalk<ept id="p1">](icordebugstackwalk-interface.md)</ept> and corresponding interfaces.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugThread4 Interface<ept id="p1">](icordebugthread4-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Provides thread blocking information.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugThreadEnum Interface<ept id="p1">](icordebugthreadenum-interface1.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugThread`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugType Interface<ept id="p1">](icordebugtype-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Represents a type, which can be either basic or complex (that is, user-defined).</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>If the type is generic, <ph id="ph1">`ICorDebugType`</ph> represents the instantiated generic type.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugType2 Interface<ept id="p1">](icordebugtype2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Extends the <bpt id="p1">[</bpt>ICorDebugType<ept id="p1">](icordebugtype-interface.md)</ept> interface to retrieve the type identifier  of a base type or complex (user-defined) type.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugTypeEnum Interface<ept id="p1">](icordebugtypeenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugType`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugUnmanagedCallback Interface<ept id="p1">](icordebugunmanagedcallback-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Provides notification of native events that are not directly related to the CLR.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugValue<ept id="p1">](icordebugvalue-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Represents a read or write value in the process being debugged.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugValue2<ept id="p1">](icordebugvalue2-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Extends <ph id="ph1">`ICorDebugValue`</ph> to provide support for <ph id="ph2">`ICorDebugType`</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugValue3 Interface<ept id="p1">](icordebugvalue3-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Extends the "ICorDebugValue" and "ICorDebugValue2" interfaces to provide support for arrays that are larger than 2 GB.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugValueBreakpoint<ept id="p1">](icordebugvaluebreakpoint-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Extends <ph id="ph1">`ICorDebugBreakpoint`</ph> to provide access to specific values.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugValueEnum<ept id="p1">](icordebugvalueenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">`ICorDebugEnum`</ph> methods, and enumerates <ph id="ph2">`ICorDebugValue`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugVariableHome Interface<ept id="p1">](icordebugvariablehome-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Represents a local variable or argument of a function.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugVariableHomeEnum Interface<ept id="p1">](icordebugvariablehomeenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Provides an enumerator to the local variables and arguments in a function.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugVariableSymbol Interface<ept id="p1">](icordebugvariablesymbol-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Retrieves the debug symbol information for a variable.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugVirtualUnwinder Interface<ept id="p1">](icordebugvirtualunwinder-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Provides methods to help in stack unwinding.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Available on .NET Native only.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorPublish Interface<ept id="p1">](icorpublish-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Serves as the general interface for the publishing processes.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorPublishAppDomain Interface<ept id="p1">](icorpublishappdomain-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Represents and provides information about an application domain.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorPublishAppDomainEnum Interface<ept id="p1">](icorpublishappdomainenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Provides methods that traverse a collection of <ph id="ph1">`ICorPublishAppDomain`</ph> objects that currently exist within a process.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorPublishEnum Interface<ept id="p1">](icorpublishenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Serves as the abstract base for publishing enumerators.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorPublishProcess Interface<ept id="p1">](icorpublishprocess-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Provides methods that access information about a process.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorPublishProcessEnum Interface<ept id="p1">](icorpublishprocessenum-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Provides methods that traverse a collection of <ph id="ph1">`ICorPublishProcess`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ISOSDacInterface Interface<ept id="p1">](isosdacinterface-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Provides helper methods to access data from <ph id="ph1">`SOS`</ph>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IXCLRDataMethodDefinition Interface<ept id="p1">](ixclrdatamethoddefinition-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Provides methods for querying information about a method definition.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IXCLRDataMethodInstance Interface<ept id="p1">](ixclrdatamethodinstance-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Provides methods for querying information about a method instance.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IXCLRDataModule Interface<ept id="p1">](ixclrdatamodule-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Provides methods for querying information about a loaded module.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IXCLRDataProcess Interface<ept id="p1">](ixclrdataprocess-interface.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Provides methods for querying information about a process.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debugging Coclasses<ept id="p1">](debugging-coclasses.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debugging Global Static Functions<ept id="p1">](debugging-global-static-functions.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debugging Enumerations<ept id="p1">](debugging-enumerations.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debugging Structures<ept id="p1">](debugging-structures.md)</ept><ph id="ph1">\</ph></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>