<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="if-operator.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ab01755d75c91ce87acf83e7f406b26c466aef6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\if-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5178b1b90f58e90bee51157d2bb6b718da7e20b9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db9ca89061fceffa444150e2400fb10ff5cdae43</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>If Operator (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>If Operator (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Uses short-circuit evaluation to conditionally return one of two values.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If`</ph> operator can be called with three arguments or with two arguments.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If Operator Called with Three Arguments</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`If`</ph> is called by using three arguments, the first argument must evaluate to a value that can be cast as a <ph id="ph2">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>That <ph id="ph1">`Boolean`</ph> value will determine which of the other two arguments is evaluated and returned.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following list applies only when the <ph id="ph1">`If`</ph> operator is called by using three arguments.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Determines which of the other arguments to evaluate and return.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Evaluated and returned if <ph id="ph1">`argument1`</ph> evaluates to <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Evaluated and returned if <ph id="ph1">`argument1`</ph> evaluates to <ph id="ph2">`False`</ph> or if <ph id="ph3">`argument1`</ph> is a <bpt id="p1">[</bpt>Nullable<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept><ph id="ph4">`Boolean`</ph> variable that evaluates to <bpt id="p2">[</bpt>Nothing<ept id="p2">](../../../visual-basic/language-reference/nothing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`If`</ph> operator that is called with three arguments works like an <ph id="ph2">`IIf`</ph> function except that it uses short-circuit evaluation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`IIf`</ph> function always evaluates all three of its arguments, whereas an <ph id="ph2">`If`</ph> operator that has three arguments evaluates only two of them.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`If`</ph> argument is evaluated and the result is cast as a <ph id="ph2">`Boolean`</ph> value, <ph id="ph3">`True`</ph> or <ph id="ph4">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`True`</ph>, <ph id="ph2">`argument2`</ph> is evaluated and its value is returned, but <ph id="ph3">`argument3`</ph> is not evaluated.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the value of the <ph id="ph1">`Boolean`</ph> expression is <ph id="ph2">`False`</ph>, <ph id="ph3">`argument3`</ph> is evaluated and its value is returned, but <ph id="ph4">`argument2`</ph> is not evaluated.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following examples illustrate the use of <ph id="ph1">`If`</ph> when three arguments are used:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example illustrates the value of short-circuit evaluation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The example shows two attempts to divide variable <ph id="ph1">`number`</ph> by variable <ph id="ph2">`divisor`</ph> except when <ph id="ph3">`divisor`</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In that case, a 0 should be returned, and no attempt should be made to perform the division because a run-time error would result.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`If`</ph> expression uses short-circuit evaluation, it evaluates either the second or the third argument, depending on the value of the first argument.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the first argument is true, the divisor is not zero and it is safe to evaluate the second argument and perform the division.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the first argument is false, only the third argument is evaluated and a 0 is returned.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Therefore, when the divisor is 0, no attempt is made to perform the division and no error results.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, because <ph id="ph1">`IIf`</ph> does not use short-circuit evaluation, the second argument is evaluated even when the first argument is false.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This causes a run-time divide-by-zero error.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If Operator Called with Two Arguments</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The first argument to <ph id="ph1">`If`</ph> can be omitted.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This enables the operator to be called by using only two arguments.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following list applies only when the <ph id="ph1">`If`</ph> operator is called with two arguments.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Must be a reference or nullable type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Evaluated and returned when it evaluates to anything other than <ph id="ph1">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Evaluated and returned if <ph id="ph1">`argument2`</ph> evaluates to <ph id="ph2">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Boolean`</ph> argument is omitted, the first argument must be a reference or nullable type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the first argument evaluates to <ph id="ph1">`Nothing`</ph>, the value of the second argument is returned.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In all other cases, the value of the first argument is returned.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example illustrates how this evaluation works.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable Value Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../visual-basic/language-reference/nothing.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>