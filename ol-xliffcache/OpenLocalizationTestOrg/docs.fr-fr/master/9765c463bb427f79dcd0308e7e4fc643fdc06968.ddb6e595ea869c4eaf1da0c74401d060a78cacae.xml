{"content":"---\ntitle: Unit testing F# in .NET Core with dotnet test and xUnit\ndescription: Learn unit test concepts for F# in .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.\nauthor: billwagner\nms.author: wiwagn\nms.date: 08/30/2017\ndev_langs: \n  - \"fsharp\"\nms.custom: \"seodec18\"\n---\n# Unit testing F# libraries in .NET Core using dotnet test and xUnit\n\nThis tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts. If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-with-fsharp/) before you begin. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\n## Creating the source project\n\nOpen a shell window. Create a directory called *unit-testing-with-fsharp* to hold the solution.\nInside this new directory, run [`dotnet new sln`](../tools/dotnet-new.md) to create a new solution. This\nmakes it easier to manage both the class library and the unit test project.\nInside the solution directory, create a *MathService* directory. The directory and file structure thus far is shown below:\n\n```\n/unit-testing-with-fsharp\n    unit-testing-with-fsharp.sln\n    /MathService\n```\n\nMake *MathService* the current directory and run [`dotnet new classlib -lang F#`](../tools/dotnet-new.md) to create the source project.  You'll create a failing implementation of the math service:\n\n```fsharp\nmodule MyMath =\n    let squaresOfOdds xs = raise (System.NotImplementedException(\"You haven't written a test yet!\"))\n```\n\nChange the directory back to the *unit-testing-with-fsharp* directory. Run [`dotnet sln add .\\MathService\\MathService.fsproj`](../tools/dotnet-sln.md)\nto add the class library project to the solution.\n\n## Creating the test project\n\nNext, create the *MathService.Tests* directory. The following outline shows the directory structure:\n\n```\n/unit-testing-with-fsharp\n    unit-testing-with-fsharp.sln\n    /MathService\n        Source Files\n        MathService.fsproj\n    /MathService.Tests\n```\n\nMake the *MathService.Tests* directory the current directory and create a new project using [`dotnet new xunit -lang F#`](../tools/dotnet-new.md). This creates a test project that uses xUnit as the test library. The generated template configures the test runner in the *MathServiceTests.fsproj*:\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.3.0-preview-20170628-02\" />\n  <PackageReference Include=\"xunit\" Version=\"2.2.0\" />\n  <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.2.0\" />\n</ItemGroup>\n```\n\nThe test project requires other packages to create and run unit tests. `dotnet new` in the previous step added xUnit and the xUnit runner. Now, add the `MathService` class library as another dependency to the project. Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:\n\n```\ndotnet add reference ../MathService/MathService.fsproj\n```\n\nYou can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-with-fsharp/MathService.Tests/MathService.Tests.fsproj) on GitHub.\n\nYou have the following final solution layout:\n\n```\n/unit-testing-with-fsharp\n    unit-testing-with-fsharp.sln\n    /MathService\n        Source Files\n        MathService.fsproj\n    /MathService.Tests\n        Test Source Files\n        MathServiceTests.fsproj\n```\n\nExecute [`dotnet sln add .\\MathService.Tests\\MathService.Tests.fsproj`](../tools/dotnet-sln.md) in the *unit-testing-with-fsharp* directory. \n\n## Creating the first test\n\nYou write one failing test, make it pass, then repeat the process. Open *Tests.fs* and add the following code:\n\n```fsharp\n[<Fact>]\nlet ``My test`` () =\n    Assert.True(true)\n\n[<Fact>]\nlet ``Fail every time`` () = Assert.True(false)\n```\n\nThe `[<Fact>]` attribute denotes a test method that is run by the test runner. From the *unit-testing-with-fsharp*, execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests. The xUnit test runner contains the program entry point to run your tests. `dotnet test` starts the test runner using the unit test project you've created.\n\nThese two tests show the most basic passing and failing tests. `My test` passes, and `Fail every time` fails. Now, create a test for the `squaresOfOdds` method. The `squaresOfOdds` method returns a sequence of the squares of all odd integer values that are part of the input sequence. Rather than trying to write all of those functions at once, you can iteratively create tests that validate the functionality. Making each test pass means creating the necessary functionality for the method.\n\nThe simplest test we can write is to call `squaresOfOdds` with all even numbers, where the result should be an empty sequence of integers.  Here's that test:\n\n```fsharp\n[<Fact>]\nlet ``Sequence of Evens returns empty collection`` () =\n    let expected = Seq.empty<int>\n    let actual = MyMath.squaresOfOdds [2; 4; 6; 8; 10]\n    Assert.Equal<Collections.Generic.IEnumerable<int>>(expected, actual)\n```\n\nYour test fails. You haven't created the implementation yet. Make this test by writing the simplest code in the `MathService` class that works:\n\n```csharp\nlet squaresOfOdds xs =\n    Seq.empty<int>\n```\n\nIn the *unit-testing-with-fsharp* directory, run `dotnet test` again. The `dotnet test` command runs a build for the `MathService` project and then for the `MathService.Tests` project. After building both projects, it runs this single test. It passes.\n\n## Completing the requirements\n\nNow that you've made one test pass, it's time to write more. The next simple case works with a sequence whose only odd number is `1`. The number 1 is easier because the square of 1 is 1. Here's that next test:\n\n```fsharp\n[<Fact>]\nlet ``Sequences of Ones and Evens returns Ones`` () =\n    let expected = [1; 1; 1; 1]\n    let actual = MyMath.squaresOfOdds [2; 1; 4; 1; 6; 1; 8; 1; 10]\n    Assert.Equal<Collections.Generic.IEnumerable<int>>(expected, actual)\n```\n\nExecuting `dotnet test` runs your tests and shows you that the new test fails. Now, update the `squaresOfOdds` method to handle this new test. You filter all the even numbers out of the sequence to make this test pass. You can do that by writing a small filter function and using `Seq.filter`:\n\n```fsharp\nlet private isOdd x = x % 2 <> 0\n\nlet squaresOfOdds xs =\n    xs\n    |> Seq.filter isOdd\n```\n\nThere's one more step to go: square each of the odd numbers. Start by writing a new test:\n\n```fsharp\n[<Fact>]\nlet ``SquaresOfOdds works`` () =\n    let expected = [1; 9; 25; 49; 81]\n    let actual = MyMath.squaresOfOdds [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n    Assert.Equal(expected, actual)\n```\n\nYou can fix the test by piping the filtered sequence through a map operation to compute the square of each odd number:\n\n```fsharp\nlet private square x = x * x\nlet private isOdd x = x % 2 <> 0\n\nlet squaresOfOdds xs = \n    xs \n    |> Seq.filter isOdd \n    |> Seq.map square\n```\n\nYou've built a small library and a set of unit tests for that library. You've structured the solution so that adding new packages and tests is part of the normal workflow. You've concentrated most of your time and effort on solving the goals of the application.\n","nodes":[{"pos":[4,331],"embed":true,"restype":"x-metadata","content":"title: Unit testing F# in .NET Core with dotnet test and xUnit\ndescription: Learn unit test concepts for F# in .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.\nauthor: billwagner\nms.author: wiwagn\nms.date: 08/30/2017\ndev_langs: \n  - \"fsharp\"\nms.custom: \"seodec18\"","nodes":[{"content":"Unit testing F# in .NET Core with dotnet test and xUnit","nodes":[{"pos":[0,55],"content":"Unit testing F# in .NET Core with dotnet test and xUnit","nodes":[{"content":"Unit testing F# in .NET Core with dotnet test and xUnit","pos":[0,55]}]}],"path":["title"],"nosxs":false},{"content":"Learn unit test concepts for F# in .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.","nodes":[{"pos":[0,147],"content":"Learn unit test concepts for F# in .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.","nodes":[{"content":"Learn unit test concepts for F# in .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and xUnit.","pos":[0,147]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[338,404],"content":"Unit testing F# libraries in .NET Core using dotnet test and xUnit","linkify":"Unit testing F# libraries in .NET Core using dotnet test and xUnit","nodes":[{"content":"Unit testing F# libraries in .NET Core using dotnet test and xUnit","pos":[0,66]}]},{"content":"This tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts.","pos":[406,535]},{"content":"If you prefer to follow the tutorial using a pre-built solution, <bpt id=\"p1\">[</bpt>view or download the sample code<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-with-fsharp/)</ept> before you begin.","pos":[536,747],"source":" If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-with-fsharp/) before you begin."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[748,873],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"pos":[878,905],"content":"Creating the source project","linkify":"Creating the source project","nodes":[{"content":"Creating the source project","pos":[0,27]}]},{"content":"Open a shell window.","pos":[907,927]},{"content":"Create a directory called <bpt id=\"p1\">*</bpt>unit-testing-with-fsharp<ept id=\"p1\">*</ept> to hold the solution.","pos":[928,1002],"source":" Create a directory called *unit-testing-with-fsharp* to hold the solution."},{"content":"Inside this new directory, run <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet new sln`</ph><ept id=\"p1\">](../tools/dotnet-new.md)</ept> to create a new solution.","pos":[1003,1102],"source":"\nInside this new directory, run [`dotnet new sln`](../tools/dotnet-new.md) to create a new solution."},{"content":"This makes it easier to manage both the class library and the unit test project.","pos":[1103,1183],"source":" This\nmakes it easier to manage both the class library and the unit test project."},{"content":"Inside the solution directory, create a <bpt id=\"p1\">*</bpt>MathService<ept id=\"p1\">*</ept> directory.","pos":[1184,1248],"source":"\nInside the solution directory, create a *MathService* directory."},{"content":"The directory and file structure thus far is shown below:","pos":[1249,1306]},{"content":"Make <bpt id=\"p1\">*</bpt>MathService<ept id=\"p1\">*</ept> the current directory and run <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new classlib -lang F#`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept> to create the source project.","pos":[1393,1528],"source":"Make *MathService* the current directory and run [`dotnet new classlib -lang F#`](../tools/dotnet-new.md) to create the source project."},{"content":"You'll create a failing implementation of the math service:","pos":[1530,1589]},{"content":"Change the directory back to the <bpt id=\"p1\">*</bpt>unit-testing-with-fsharp<ept id=\"p1\">*</ept> directory.","pos":[1723,1793],"source":"Change the directory back to the *unit-testing-with-fsharp* directory."},{"content":"Run <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet sln add .\\MathService\\MathService.fsproj`</ph><ept id=\"p1\">](../tools/dotnet-sln.md)</ept> to add the class library project to the solution.","pos":[1794,1923],"source":" Run [`dotnet sln add .\\MathService\\MathService.fsproj`](../tools/dotnet-sln.md)\nto add the class library project to the solution."},{"pos":[1928,1953],"content":"Creating the test project","linkify":"Creating the test project","nodes":[{"content":"Creating the test project","pos":[0,25]}]},{"content":"Next, create the <bpt id=\"p1\">*</bpt>MathService.Tests<ept id=\"p1\">*</ept> directory.","pos":[1955,2002],"source":"Next, create the *MathService.Tests* directory."},{"content":"The following outline shows the directory structure:","pos":[2003,2055]},{"content":"Make the <bpt id=\"p1\">*</bpt>MathService.Tests<ept id=\"p1\">*</ept> directory the current directory and create a new project using <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new xunit -lang F#`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept>.","pos":[2213,2359],"source":"Make the *MathService.Tests* directory the current directory and create a new project using [`dotnet new xunit -lang F#`](../tools/dotnet-new.md)."},{"content":"This creates a test project that uses xUnit as the test library.","pos":[2360,2424]},{"content":"The generated template configures the test runner in the <bpt id=\"p1\">*</bpt>MathServiceTests.fsproj<ept id=\"p1\">*</ept>:","pos":[2425,2508],"source":" The generated template configures the test runner in the *MathServiceTests.fsproj*:"},{"content":"The test project requires other packages to create and run unit tests.","pos":[2770,2840]},{"content":"<ph id=\"ph1\">`dotnet new`</ph> in the previous step added xUnit and the xUnit runner.","pos":[2841,2908],"source":"`dotnet new` in the previous step added xUnit and the xUnit runner."},{"content":"Now, add the <ph id=\"ph1\">`MathService`</ph> class library as another dependency to the project.","pos":[2909,2987],"source":" Now, add the `MathService` class library as another dependency to the project."},{"content":"Use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add reference`</ph><ept id=\"p1\">](../tools/dotnet-add-reference.md)</ept> command:","pos":[2988,3063],"source":" Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:"},{"pos":[3129,3331],"content":"You can see the entire file in the <bpt id=\"p1\">[</bpt>samples repository<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-with-fsharp/MathService.Tests/MathService.Tests.fsproj)</ept> on GitHub.","source":"You can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-with-fsharp/MathService.Tests/MathService.Tests.fsproj) on GitHub."},{"content":"You have the following final solution layout:","pos":[3333,3378]},{"pos":[3594,3734],"content":"Execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet sln add .\\MathService.Tests\\MathService.Tests.fsproj`</ph><ept id=\"p1\">](../tools/dotnet-sln.md)</ept> in the <bpt id=\"p2\">*</bpt>unit-testing-with-fsharp<ept id=\"p2\">*</ept> directory.","source":"Execute [`dotnet sln add .\\MathService.Tests\\MathService.Tests.fsproj`](../tools/dotnet-sln.md) in the *unit-testing-with-fsharp* directory."},{"pos":[3740,3763],"content":"Creating the first test","linkify":"Creating the first test","nodes":[{"content":"Creating the first test","pos":[0,23]}]},{"content":"You write one failing test, make it pass, then repeat the process.","pos":[3765,3831]},{"content":"Open <bpt id=\"p1\">*</bpt>Tests.fs<ept id=\"p1\">*</ept> and add the following code:","pos":[3832,3875],"source":" Open *Tests.fs* and add the following code:"},{"content":"The <ph id=\"ph1\">`[&lt;Fact&gt;]`</ph> attribute denotes a test method that is run by the test runner.","pos":[4002,4080],"source":"The `[<Fact>]` attribute denotes a test method that is run by the test runner."},{"content":"From the <bpt id=\"p1\">*</bpt>unit-testing-with-fsharp<ept id=\"p1\">*</ept>, execute <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet test`</ph><ept id=\"p2\">](../tools/dotnet-test.md)</ept> to build the tests and the class library and then run the tests.","pos":[4081,4231],"source":" From the *unit-testing-with-fsharp*, execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests."},{"content":"The xUnit test runner contains the program entry point to run your tests.","pos":[4232,4305]},{"content":"<ph id=\"ph1\">`dotnet test`</ph> starts the test runner using the unit test project you've created.","pos":[4306,4386],"source":"`dotnet test` starts the test runner using the unit test project you've created."},{"content":"These two tests show the most basic passing and failing tests.","pos":[4388,4450]},{"content":"<ph id=\"ph1\">`My test`</ph> passes, and <ph id=\"ph2\">`Fail every time`</ph> fails.","pos":[4451,4497],"source":"`My test` passes, and `Fail every time` fails."},{"content":"Now, create a test for the <ph id=\"ph1\">`squaresOfOdds`</ph> method.","pos":[4498,4548],"source":" Now, create a test for the `squaresOfOdds` method."},{"content":"The <ph id=\"ph1\">`squaresOfOdds`</ph> method returns a sequence of the squares of all odd integer values that are part of the input sequence.","pos":[4549,4672],"source":" The `squaresOfOdds` method returns a sequence of the squares of all odd integer values that are part of the input sequence."},{"content":"Rather than trying to write all of those functions at once, you can iteratively create tests that validate the functionality.","pos":[4673,4798]},{"content":"Making each test pass means creating the necessary functionality for the method.","pos":[4799,4879]},{"content":"The simplest test we can write is to call <ph id=\"ph1\">`squaresOfOdds`</ph> with all even numbers, where the result should be an empty sequence of integers.","pos":[4881,5019],"source":"The simplest test we can write is to call `squaresOfOdds` with all even numbers, where the result should be an empty sequence of integers."},{"content":"Here's that test:","pos":[5021,5038]},{"content":"Your test fails.","pos":[5282,5298]},{"content":"You haven't created the implementation yet.","pos":[5299,5342]},{"content":"Make this test by writing the simplest code in the <ph id=\"ph1\">`MathService`</ph> class that works:","pos":[5343,5425],"source":" Make this test by writing the simplest code in the `MathService` class that works:"},{"content":"In the <bpt id=\"p1\">*</bpt>unit-testing-with-fsharp<ept id=\"p1\">*</ept> directory, run <ph id=\"ph1\">`dotnet test`</ph> again.","pos":[5484,5553],"source":"In the *unit-testing-with-fsharp* directory, run `dotnet test` again."},{"content":"The <ph id=\"ph1\">`dotnet test`</ph> command runs a build for the <ph id=\"ph2\">`MathService`</ph> project and then for the <ph id=\"ph3\">`MathService.Tests`</ph> project.","pos":[5554,5668],"source":" The `dotnet test` command runs a build for the `MathService` project and then for the `MathService.Tests` project."},{"content":"After building both projects, it runs this single test.","pos":[5669,5724]},{"content":"It passes.","pos":[5725,5735]},{"pos":[5740,5767],"content":"Completing the requirements","linkify":"Completing the requirements","nodes":[{"content":"Completing the requirements","pos":[0,27]}]},{"content":"Now that you've made one test pass, it's time to write more.","pos":[5769,5829]},{"content":"The next simple case works with a sequence whose only odd number is <ph id=\"ph1\">`1`</ph>.","pos":[5830,5902],"source":" The next simple case works with a sequence whose only odd number is `1`."},{"content":"The number 1 is easier because the square of 1 is 1.","pos":[5903,5955]},{"content":"Here's that next test:","pos":[5956,5978]},{"content":"Executing <ph id=\"ph1\">`dotnet test`</ph> runs your tests and shows you that the new test fails.","pos":[6230,6308],"source":"Executing `dotnet test` runs your tests and shows you that the new test fails."},{"content":"Now, update the <ph id=\"ph1\">`squaresOfOdds`</ph> method to handle this new test.","pos":[6309,6372],"source":" Now, update the `squaresOfOdds` method to handle this new test."},{"content":"You filter all the even numbers out of the sequence to make this test pass.","pos":[6373,6448]},{"content":"You can do that by writing a small filter function and using <ph id=\"ph1\">`Seq.filter`</ph>:","pos":[6449,6523],"source":" You can do that by writing a small filter function and using `Seq.filter`:"},{"content":"There's one more step to go: square each of the odd numbers.","pos":[6628,6688]},{"content":"Start by writing a new test:","pos":[6689,6717]},{"content":"You can fix the test by piping the filtered sequence through a map operation to compute the square of each odd number:","pos":[6919,7037]},{"content":"You've built a small library and a set of unit tests for that library.","pos":[7196,7266]},{"content":"You've structured the solution so that adding new packages and tests is part of the normal workflow.","pos":[7267,7367]},{"content":"You've concentrated most of your time and effort on solving the goals of the application.","pos":[7368,7457]}]}