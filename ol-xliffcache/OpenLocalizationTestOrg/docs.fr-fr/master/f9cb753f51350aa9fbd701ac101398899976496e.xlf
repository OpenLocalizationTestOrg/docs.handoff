<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="throw.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9cb753f51350aa9fbd701ac101398899976496e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\throw.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9afc4615bd50b08e935d1b4c07fa4ca61d68d5d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0c9d658d3325508acab95737487062211e38ca4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>throw (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>throw (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Signals the occurrence of an exception during program execution.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The syntax of <ph id="ph1">`throw`</ph> is:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`e`</ph> is an instance of a class derived from <ph id="ph2">&lt;xref:System.Exception?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`throw`</ph> statement to throw an <ph id="ph2">@System.IndexOutOfRangeException</ph> if the argument passed to a method named <ph id="ph3">`GetNumber`</ph> does not correspond to a valid index of an internal array.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Method callers then use a <ph id="ph1">`try-catch`</ph> or <ph id="ph2">`try-catch-finally`</ph> block to handle the thrown exception.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example handles the exception thrown by the <ph id="ph1">`GetNumber`</ph> method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Re-throwing an exception</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`throw`</ph> can also be used in a <ph id="ph2">`catch`</ph> block to re-throw an exception handled in a <ph id="ph3">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`throw`</ph> does not take an exception operand.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is most useful when a method passes on an argument from a caller to some other library method, and the library method throws an exception that must be passed on to the caller.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, the following example re-throws an <ph id="ph1">@System.NullReferenceException</ph> that is thrown when attempting to retrieve the first character of an uninitialized string.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`throw e`</ph> syntax in a <ph id="ph2">`catch`</ph> block to instantiate a new exception that you pass on to the caller.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this case, the stack trace of the original exception, which is available from the <ph id="ph1">@System.Exception.Stacktrace</ph> property, is not preserved.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`throw`</ph> expression</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, <ph id="ph1">`throw`</ph> can be used as an expression as well as a statement.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This allows an exception to be thrown in contexts that were previously unsupported.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>the conditional operator<ept id="p1">](../operators/conditional-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">`throw`</ph> expression to throw an <ph id="ph2">@System.ArgumentException</ph> if a method is passed an empty string array.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Before C# 7, this logic would need to appear in an <ph id="ph1">`if`</ph><ph id="ph2">/</ph><ph id="ph3">`else`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>the null-coalescing operator<ept id="p1">](../operators/null-conditional-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">`throw`</ph> expression is used with a null-coalescing operator to throw an exception if the string assigned to a <ph id="ph2">`Name`</ph> property is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>an expression-bodied <bpt id="p1">[</bpt>lambda<ept id="p1">](../../lambda-expressions.md)</ept> or method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example illustrates an expression-bodied method that throws an <ph id="ph1">@System.InvalidCastException</ph> because a conversion to a <ph id="ph2">@System.DateTime</ph> value is not supported.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>try-catch<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The try, catch, and throw Statements in C++<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Handling Statements<ept id="p1">](../../../csharp/language-reference/keywords/exception-handling-statements.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Explicitly Throw Exceptions<ept id="p1">](https://msdn.microsoft.com/library/xhcbs8fz)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>