<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="durable-duplex-correlation.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2f5fe557f1f8754758d0dd9b4042cacc62cc61f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\durable-duplex-correlation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bdd0fad9ca22100abf2c57f3d7fadaae3a57236</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">811454b25612e8ac5fe45ebe1ef2e780c53b11fc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Durable Duplex Correlation</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Durable Duplex Correlation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Durable duplex correlation, also known as callback correlation, is useful when a workflow service has a requirement to send a callback to the initial caller.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unlike WCF duplex, the callback can happen at any time in the future and is not tied to the same channel or the channel lifetime; the only requirement is that the caller have an active endpoint listening for the callback message.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This allows two workflow services to communicate in a long-running conversation.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of durable duplex correlation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using Durable Duplex Correlation</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To use durable duplex correlation, the two services must use a context-enabled binding that supports two-way operations, such as <ph id="ph1">&lt;xref:System.ServiceModel.NetTcpContextBinding&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.WSHttpContextBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The calling service registers a <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpContextBinding.ClientCallbackAddress%2A&gt;</ph> with the desired binding on their client <ph id="ph2">&lt;xref:System.ServiceModel.Endpoint&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The receiving service receives this data in the initial call and then uses it on its own <ph id="ph1">&lt;xref:System.ServiceModel.Endpoint&gt;</ph> in the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity that makes the call back to the calling service.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In this example, two services communicate with each other.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The first service invokes a method on the second service and then waits for a reply.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The second service knows the name of the callback method, but the endpoint of the service that implements this method is not known at design time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Durable duplex can only be used when the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.AddressingVersion&gt;</ph> of the endpoint is configured with <ph id="ph2">&lt;xref:System.ServiceModel.Channels.AddressingVersion.WSAddressing10%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If it is not, then an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown with the following message: "The message contains a callback context header with an endpoint reference for <bpt id="p1">[</bpt>AddressingVersion<ept id="p1">](http://schemas.xmlsoap.org/ws/2004/08/addressing)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Callback context can only be transmitted when the AddressingVersion is configured with 'WSAddressing10'.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the following example, a workflow service is hosted that creates a callback <ph id="ph1">&lt;xref:System.ServiceModel.Endpoint&gt;</ph> using <ph id="ph2">&lt;xref:System.ServiceModel.WSHttpContextBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The workflow that implements this workflow service initializes the callback correlation with its <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity, and references this callback endpoint from the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity that correlates with the <ph id="ph3">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example represents the workflow that is returned from the <ph id="ph1">`GetWF1`</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The second workflow service is hosted using a system-provided, context-based binding.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The workflow that implements this workflow service begins with a <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This receive activity initializes the callback correlation for this service, delays for a period of time to simulate long-running work, and then calls back into the first service using the callback context that was passed in the first call into the service.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example represents the workflow that is returned from a call to <ph id="ph1">`GetWF2`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity has a placeholder address of <ph id="ph2">`http://www.contoso.com`</ph>; the actual address used at runtime is the supplied callback address.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`StartOrder`</ph> method is invoked on the first workflow, the following output is displayed, which shows the flow of execution through the two workflows.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this example, both workflows explicitly manage correlation using a <ph id="ph1">&lt;xref:System.ServiceModel.Activities.CallbackCorrelationInitializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Because there was only a single correlation in these sample workflows, the default <ph id="ph1">&lt;xref:System.ServiceModel.Activities.CorrelationHandle&gt;</ph> management would have been sufficient.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>