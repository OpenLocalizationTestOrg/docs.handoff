{"content":"---\ntitle: \"Group results by contiguous keys\"\ndescription: How to group results by contiguous keys.\nkeywords: .NET, .NET Core, C#\nauthor: BillWagner\nmanager: wpickett\nms.author: wiwagn\nms.date: 12/1/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: cbda9c08-151b-4c9e-82f7-c3d7f3dac66b\n---\n# Group results by contiguous keys\n\nThe following example shows how to group elements into chunks that represent subsequences of contiguous keys. For example, assume that you are given the following sequence of key-value pairs:  \n  \n|Key|Value|  \n|---------|-----------|  \n|A|We|  \n|A|think|  \n|A|that|  \n|B|Linq|  \n|C|is|  \n|A|really|  \n|B|cool|  \n|B|!|  \n  \n The following groups will be created in this order:  \n  \n1.  We, think, that  \n  \n2.  Linq  \n  \n3.  is  \n  \n4.  really  \n  \n5.  cool, !  \n  \n The solution is implemented as an extension method that is thread-safe and that returns its results in a streaming manner. In other words, it produces its groups as it moves through the source sequence. Unlike the `group` or `orderby` operators, it can begin returning groups to the caller before all of the sequence has been read.  \n  \n Thread-safety is accomplished by making a copy of each group or chunk as the source sequence is iterated, as explained in the source code comments. If the source sequence has a large sequence of contiguous items, the common language runtime may throw an <xref:System.OutOfMemoryException>.  \n  \n## Example  \n The following example shows both the extension method and the client code that uses it.  \n  \n [!code-cs[cscsrefContiguousGroups#1](../../../samples/snippets/csharp/concepts/linq/how-to-group-results-by-contiguous-keys_1.cs)]  \n  \n To use the extension method in your project, copy the `MyExtensions` static class to a new or existing source code file and if it is required, add a `using` directive for the namespace where it is located.  \n  \n## See also  \n [LINQ Query Expressions](index.md)   \n ","nodes":[{"pos":[4,346],"embed":true,"restype":"x-metadata","content":"title: \"Group results by contiguous keys\"\ndescription: How to group results by contiguous keys.\nkeywords: .NET, .NET Core, C#\nauthor: BillWagner\nmanager: wpickett\nms.author: wiwagn\nms.date: 12/1/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: cbda9c08-151b-4c9e-82f7-c3d7f3dac66b","nodes":[{"content":"Group results by contiguous keys","nodes":[{"pos":[0,32],"content":"Group results by contiguous keys","nodes":[{"content":"Group results by contiguous keys","pos":[0,32]}]}],"path":["title"]},{"content":"How to group results by contiguous keys.","nodes":[{"pos":[0,40],"content":"How to group results by contiguous keys.","nodes":[{"content":"How to group results by contiguous keys.","pos":[0,40]}]}],"path":["description"]},{"content":".NET, .NET Core, C#","nodes":[{"pos":[0,19],"content":".NET, .NET Core, C#","nodes":[{"content":".NET, .NET Core, C#","pos":[0,19]}]}],"path":["keywords"]}],"yml":true},{"pos":[353,385],"content":"Group results by contiguous keys","linkify":"Group results by contiguous keys","nodes":[{"content":"Group results by contiguous keys","pos":[0,32]}]},{"content":"The following example shows how to group elements into chunks that represent subsequences of contiguous keys.","pos":[387,496]},{"content":"For example, assume that you are given the following sequence of key-value pairs:","pos":[497,578]},{"content":"Key","pos":[585,588]},{"content":"Value","pos":[589,594]},{"content":"A","pos":[625,626]},{"content":"We","pos":[627,629]},{"content":"A","pos":[634,635]},{"content":"think","pos":[636,641]},{"content":"A","pos":[646,647]},{"content":"that","pos":[648,652]},{"content":"B","pos":[657,658]},{"content":"Linq","pos":[659,663]},{"content":"C","pos":[668,669]},{"content":"is","pos":[670,672]},{"content":"A","pos":[677,678]},{"content":"really","pos":[679,685]},{"content":"B","pos":[690,691]},{"content":"cool","pos":[692,696]},{"content":"B","pos":[701,702]},{"content":"!","pos":[703,704]},{"content":"The following groups will be created in this order:","pos":[712,763]},{"content":"We, think, that","pos":[773,788]},{"content":"Linq","pos":[798,802]},{"content":"is","pos":[812,814]},{"content":"really","pos":[824,830]},{"content":"cool, !","pos":[840,847]},{"content":"The solution is implemented as an extension method that is thread-safe and that returns its results in a streaming manner.","pos":[854,976]},{"content":"In other words, it produces its groups as it moves through the source sequence.","pos":[977,1056]},{"content":"Unlike the <ph id=\"ph1\">`group`</ph> or <ph id=\"ph2\">`orderby`</ph> operators, it can begin returning groups to the caller before all of the sequence has been read.","pos":[1057,1185],"source":" Unlike the `group` or `orderby` operators, it can begin returning groups to the caller before all of the sequence has been read."},{"content":"Thread-safety is accomplished by making a copy of each group or chunk as the source sequence is iterated, as explained in the source code comments.","pos":[1192,1339]},{"content":"If the source sequence has a large sequence of contiguous items, the common language runtime may throw an <ph id=\"ph1\">&lt;xref:System.OutOfMemoryException&gt;</ph>.","pos":[1340,1481],"source":" If the source sequence has a large sequence of contiguous items, the common language runtime may throw an <xref:System.OutOfMemoryException>."},{"pos":[1490,1497],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows both the extension method and the client code that uses it.","pos":[1501,1588]},{"pos":[1732,1937],"content":"To use the extension method in your project, copy the <ph id=\"ph1\">`MyExtensions`</ph> static class to a new or existing source code file and if it is required, add a <ph id=\"ph2\">`using`</ph> directive for the namespace where it is located.","source":"To use the extension method in your project, copy the `MyExtensions` static class to a new or existing source code file and if it is required, add a `using` directive for the namespace where it is located."},{"pos":[1946,1954],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1958,1992],"content":"<bpt id=\"p1\">[</bpt>LINQ Query Expressions<ept id=\"p1\">](index.md)</ept>","source":"[LINQ Query Expressions](index.md)"}]}