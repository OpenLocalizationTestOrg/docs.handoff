<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="identifiers-entity-sql.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">702a9c69c37b572fde18dd57c44608678174fb15</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\language-reference\identifiers-entity-sql.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebb56ae37265ff6aac6cb135bcf483de53fbe20b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e05bc269ba8347c1cafb32795618de4972b7b78</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Identifiers (Entity SQL)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Identifiers (Entity SQL)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Identifiers are used in <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> to represent query expression aliases, variable references, properties of objects, functions, and so on.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> provides two kinds of identifiers: simple identifiers and quoted identifiers.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Simple Identifiers</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A simple identifier in <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> is a sequence of alphanumeric and underscore characters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The first character of the identifier must be an alphabetical character (a-z or A-Z).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Quoted Identifiers</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A quoted identifier is any sequence of characters enclosed in square brackets ([]).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Quoted identifiers let you specify identifiers with characters that are not valid in identifiers.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All characters between the square brackets become part of the identifier, including all white space.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A quoted identifier cannot include the following characters:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Newline.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Carriage returns.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Tabs.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Backspace.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Additional square brackets (that is, square brackets within the square brackets that delineate the identifier).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A quoted-identifier can include Unicode characters.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Quoted identifiers enable you to create property name characters that are not valid in identifiers, as illustrated in the following example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also use quoted identifiers to specify an identifier that is a reserved keyword of <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if the type <ph id="ph1">`Email`</ph> has a property named "From", you can disambiguate it from the reserved keyword FROM by using square brackets, as follows:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can use a quoted identifier on the right side of a dot (.) operator.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To use the square bracket in an identifier, add an extra square bracket.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the following example "<ph id="ph1">`abc]`</ph>" is the identifier:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For quoted identifier comparison semantics, see <bpt id="p1">[</bpt>Input Character Set<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Aliasing Rules</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We recommend specifying aliases in <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> queries whenever needed, including the following <ph id="ph2">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> constructs:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Fields of a row constructor.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Items in the FROM clause of a query expression.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Items in the SELECT clause of a query expression.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Items in the GROUP BY clause of a query expression.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Valid Aliases</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Valid aliases in <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> are any simple identifier or quoted identifier.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Alias Generation</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If no alias is specified in an <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> query expression, <ph id="ph2">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> tries to generate an alias based on the following simple rules:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the query expression (for which the alias is unspecified) is a simple or quoted identifier, that identifier is used as the alias.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`ROW(a, [b])`</ph> becomes <ph id="ph2">`ROW(a AS a, [b] AS [b])`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the query expression is a more complex expression, but the last component of that query expression is a simple identifier, then that identifier is used as the alias.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`ROW(a.a1, b.[b1])`</ph> becomes <ph id="ph2">`ROW(a.a1 AS a1, b.[b1] AS [b1])`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>We recommend that you do not use implicit aliasing if you want to use the alias name later.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Anytime aliases (implicit or explicit) conflict or are repeated in the same scope, there will be a compile error.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An implicit alias will pass compilation even if there is an explicit or implicit alias of the same name.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Implicit aliases are autogenerated based on user input.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, the following line of code will generate NAME as an alias for both columns and therefore will conflict.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following line of code, which uses explicit aliases, will also fail.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, the failure will be more apparent by reading the code.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Scoping Rules</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> defines scoping rules that determine when particular variables are visible in the query language.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Some expressions or statements introduce new names.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The scoping rules determine where those names can be used, and when or where a new declaration with the same name as another can hide its predecessor.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When names are defined in an <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> query, they are said to be defined within a scope.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A scope covers an entire region of the query.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>All expressions or name references within a certain scope can see names that are defined within that scope.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Before a scope begins and after it ends, names that are defined within the scope cannot be referenced.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Scopes can be nested.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parts of <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> introduce new scopes that cover entire regions, and these regions can contain other <ph id="ph2">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> expressions that also introduce scopes.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When scopes are nested, references can be made to names that are defined in the innermost scope, which contains the reference.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>References can also be made to any names that are defined in any outer scopes.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Any two scopes defined within the same scope are considered sibling scopes.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>References cannot be made to names that are defined within sibling scopes.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If a name declared in an inner scope matches a name declared in an outer scope, references within the inner scope or within scopes declared within that scope refer only to the newly declared name.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The name in the outer scope is hidden.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Even within the same scope, names cannot be referenced before they are defined.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Global names can exist as part of the execution environment.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This can include names of persistent collections or environment variables.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For a name to be global, it must be declared in the outermost scope.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Parameters are not in a scope.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because references to parameters include special syntax, names of parameters will never collide with other names in the query.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Query Expressions</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> query expression introduces a new scope.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Names that are defined in the FROM clause are introduced into the from scope in order of appearance, left to right.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In the join list, expressions can refer to names that were defined earlier in the list.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Public properties (fields and so on) of elements identified in the FROM clause are not added to the from-scope.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>They must be always referenced by the alias-qualified name.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Typically, all parts of the SELECT expression are considered within the from-scope.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The GROUP BY clause also introduces a new sibling scope.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Each group can have a group name that refers to the collection of elements in the group.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Each grouping expression will also introduce a new name into the group-scope.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Additionally, the nest aggregate (or the named group) is also added to the scope.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The grouping expressions themselves are within the from-scope.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>However, when a GROUP BY clause is used, the select-list (projection), HAVING clause, and ORDER BY clause are considered to be within the group-scope, and not the from-scope.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Aggregates receive special treatment, as described in the following bulleted list.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following are additional notes about scopes:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The select-list can introduce new names into the scope, in order.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Projection expressions to the right might refer to names projected on the left.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The ORDER BY clause can refer to names (aliases) specified in the select list.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The order of evaluation of clauses within the SELECT expression determines the order that names are introduced into the scope.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The FROM clause is evaluated first, followed by the WHERE clause, GROUP BY clause, HAVING clause, SELECT clause, and finally the ORDER BY clause.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Aggregate Handling</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> supports two forms of aggregates: collection-based aggregates and group-based aggregates.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Collection-based aggregates are the preferred construct in <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph>, and group-based aggregates are supported for SQL compatibility.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>When resolving an aggregate, <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> first tries to treat it as a collection-based aggregate.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If that fails, <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> transforms the aggregate input into a reference to the nest aggregate and tries to resolve this new expression, as illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Entity SQL Reference<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Entity SQL Overview<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Input Character Set<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/input-character-set-entity-sql.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>