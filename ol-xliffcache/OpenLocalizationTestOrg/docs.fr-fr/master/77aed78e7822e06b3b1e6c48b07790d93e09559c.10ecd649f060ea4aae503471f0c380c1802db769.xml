{"content":"---\ntitle: \"Value types - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/26/2018\nf1_keywords: \n  - \"cs.valuetypes\"\nhelpviewer_keywords: \n  - \"value types [C#]\"\n  - \"types [C#], value types\"\n  - \"C# language, value types\"\nms.assetid: 471eb994-2958-49d5-a6be-19b4313f80a3\n---\n# Value types (C# Reference)\n\nThere are two kinds of value types:\n\n- [Structs](struct.md)\n\n- [Enumerations](enum.md)\n\n## Main features of value types\n\nA variable of a value type contains a value of the type. For example, a variable of the `int` type might contain the value `42`. This differs from a variable of a reference type, which contains a reference to an instance of the type, also known as an object. When you assign a new value to a variable of a value type, that value is copied. When you assign a new value to a variable of a reference type, the reference is copied, not the object itself.\n\nAll value types are derived implicitly from the <xref:System.ValueType?displayProperty=nameWithType>.\n\nUnlike with reference types, you cannot derive a new type from a value type. However, like reference types, structs can implement interfaces.\n\nValue type variables cannot be `null` by default. However, variables of the corresponding [nullable types](../../../csharp/programming-guide/nullable-types/index.md) can be `null`.\n\nEach value type has an implicit default constructor that initializes the default value of that type. For information about default values of value types, see [Default values table](default-values-table.md).\n\n## Simple types\n\nThe *simple types* are a set of predefined struct types provided by C# and comprise the following types:\n\n- [Integral types](integral-types-table.md): integer numeric types and the [char](char.md) type\n- [Floating-point types](floating-point-types-table.md)\n- [bool](bool.md)\n\nThe simple types are identified through keywords, but these keywords are simply aliases for predefined struct types in the <xref:System> namespace. For example, [int](int.md) is an alias of <xref:System.Int32?displayProperty=nameWithType>. For a complete list of aliases, see [Built-in types table](built-in-types-table.md).\n\nThe simple types differ from other struct types in that they permit certain additional operations:\n\n- Simple types can be initialized by using literals. For example, `'A'` is a literal of the type `char` and `2001` is a literal of the type `int`.\n\n- You can declare constants of the simple types with the [const](const.md) keyword. It's not possible to have constants of other struct types.\n\n- Constant expressions, whose operands are all simple type constants, are evaluated at compile time.\n\nFor more information, see the [Simple types](~/_csharplang/spec/types.md#simple-types) section of the [C# language specification](../language-specification/index.md).\n\n## Initializing value types\n\nLocal variables in C# must be initialized before they are used. For example, you might declare a local variable without initialization as in the following example:\n\n```csharp\nint myInt;\n```\n\nYou cannot use it before you initialize it. You can initialize it using the following statement:\n\n```csharp\nmyInt = new int();  // Invoke default constructor for int type.\n```\n\nThis statement is equivalent to the following statement:\n\n```csharp\nmyInt = 0;         // Assign an initial value, 0 in this example.\n```\n\nYou can, of course, have the declaration and the initialization in the same statement as in the following examples:\n\n```csharp\nint myInt = new int();\n```\n\n–or–\n\n```csharp\nint myInt = 0;\n```\n\nUsing the [new](new.md) operator calls the default constructor of the specific type and assigns the default value to the variable. In the preceding example, the default constructor assigned the value `0` to `myInt`. For more information about values assigned by calling default constructors, see [Default values table](default-values-table.md).\n\nWith user-defined types, use [new](new.md) to invoke the default constructor. For example, the following statement invokes the default constructor of the `Point` struct:\n\n```csharp\nPoint p = new Point(); // Invoke default constructor for the struct.\n```\n\nAfter this call, the struct is considered to be definitely assigned; that is, all its members are initialized to their default values.\n\nFor more information about the `new` operator, see [new](new.md).\n\nFor information about formatting the output of numeric types, see [Formatting numeric results table](formatting-numeric-results-table.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Types](types.md)\n- [Reference tables for types](reference-tables-for-types.md)\n- [Reference Types](reference-types.md)\n- [Nullable types](../../programming-guide/nullable-types/index.md)","nodes":[{"pos":[4,269],"embed":true,"restype":"x-metadata","content":"title: \"Value types - C# Reference\"\nms.custom: seodec18\n\nms.date: 11/26/2018\nf1_keywords: \n  - \"cs.valuetypes\"\nhelpviewer_keywords: \n  - \"value types [C#]\"\n  - \"types [C#], value types\"\n  - \"C# language, value types\"\nms.assetid: 471eb994-2958-49d5-a6be-19b4313f80a3","nodes":[{"content":"Value types - C# Reference","nodes":[{"pos":[0,26],"content":"Value types - C# Reference","nodes":[{"content":"Value types - C# Reference","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[276,302],"content":"Value types (C# Reference)","linkify":"Value types (C# Reference)","nodes":[{"content":"Value types (C# Reference)","pos":[0,26]}]},{"content":"There are two kinds of value types:","pos":[304,339]},{"pos":[343,363],"content":"<bpt id=\"p1\">[</bpt>Structs<ept id=\"p1\">](struct.md)</ept>","source":"[Structs](struct.md)"},{"pos":[367,390],"content":"<bpt id=\"p1\">[</bpt>Enumerations<ept id=\"p1\">](enum.md)</ept>","source":"[Enumerations](enum.md)"},{"pos":[395,423],"content":"Main features of value types","linkify":"Main features of value types","nodes":[{"content":"Main features of value types","pos":[0,28]}]},{"content":"A variable of a value type contains a value of the type.","pos":[425,481]},{"content":"For example, a variable of the <ph id=\"ph1\">`int`</ph> type might contain the value <ph id=\"ph2\">`42`</ph>.","pos":[482,553],"source":" For example, a variable of the `int` type might contain the value `42`."},{"content":"This differs from a variable of a reference type, which contains a reference to an instance of the type, also known as an object.","pos":[554,683]},{"content":"When you assign a new value to a variable of a value type, that value is copied.","pos":[684,764]},{"content":"When you assign a new value to a variable of a reference type, the reference is copied, not the object itself.","pos":[765,875]},{"pos":[877,978],"content":"All value types are derived implicitly from the <ph id=\"ph1\">&lt;xref:System.ValueType?displayProperty=nameWithType&gt;</ph>.","source":"All value types are derived implicitly from the <xref:System.ValueType?displayProperty=nameWithType>."},{"content":"Unlike with reference types, you cannot derive a new type from a value type.","pos":[980,1056]},{"content":"However, like reference types, structs can implement interfaces.","pos":[1057,1121]},{"content":"Value type variables cannot be <ph id=\"ph1\">`null`</ph> by default.","pos":[1123,1172],"source":"Value type variables cannot be `null` by default."},{"content":"However, variables of the corresponding <bpt id=\"p1\">[</bpt>nullable types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept> can be <ph id=\"ph1\">`null`</ph>.","pos":[1173,1303],"source":" However, variables of the corresponding [nullable types](../../../csharp/programming-guide/nullable-types/index.md) can be `null`."},{"content":"Each value type has an implicit default constructor that initializes the default value of that type.","pos":[1305,1405]},{"content":"For information about default values of value types, see <bpt id=\"p1\">[</bpt>Default values table<ept id=\"p1\">](default-values-table.md)</ept>.","pos":[1406,1511],"source":" For information about default values of value types, see [Default values table](default-values-table.md)."},{"pos":[1516,1528],"content":"Simple types","linkify":"Simple types","nodes":[{"content":"Simple types","pos":[0,12]}]},{"pos":[1530,1634],"content":"The <bpt id=\"p1\">*</bpt>simple types<ept id=\"p1\">*</ept> are a set of predefined struct types provided by C# and comprise the following types:","source":"The *simple types* are a set of predefined struct types provided by C# and comprise the following types:"},{"pos":[1638,1731],"content":"<bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](integral-types-table.md)</ept>: integer numeric types and the <bpt id=\"p2\">[</bpt>char<ept id=\"p2\">](char.md)</ept> type","source":"[Integral types](integral-types-table.md): integer numeric types and the [char](char.md) type"},{"pos":[1734,1787],"content":"<bpt id=\"p1\">[</bpt>Floating-point types<ept id=\"p1\">](floating-point-types-table.md)</ept>","source":"[Floating-point types](floating-point-types-table.md)"},{"pos":[1790,1805],"content":"<bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](bool.md)</ept>","source":"[bool](bool.md)"},{"content":"The simple types are identified through keywords, but these keywords are simply aliases for predefined struct types in the <ph id=\"ph1\">&lt;xref:System&gt;</ph> namespace.","pos":[1807,1954],"source":"The simple types are identified through keywords, but these keywords are simply aliases for predefined struct types in the <xref:System> namespace."},{"content":"For example, <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept> is an alias of <ph id=\"ph1\">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph>.","pos":[1955,2046],"source":" For example, [int](int.md) is an alias of <xref:System.Int32?displayProperty=nameWithType>."},{"content":"For a complete list of aliases, see <bpt id=\"p1\">[</bpt>Built-in types table<ept id=\"p1\">](built-in-types-table.md)</ept>.","pos":[2047,2131],"source":" For a complete list of aliases, see [Built-in types table](built-in-types-table.md)."},{"content":"The simple types differ from other struct types in that they permit certain additional operations:","pos":[2133,2231]},{"content":"Simple types can be initialized by using literals.","pos":[2235,2285]},{"content":"For example, <ph id=\"ph1\">`'A'`</ph> is a literal of the type <ph id=\"ph2\">`char`</ph> and <ph id=\"ph3\">`2001`</ph> is a literal of the type <ph id=\"ph4\">`int`</ph>.","pos":[2286,2379],"source":" For example, `'A'` is a literal of the type `char` and `2001` is a literal of the type `int`."},{"content":"You can declare constants of the simple types with the <bpt id=\"p1\">[</bpt>const<ept id=\"p1\">](const.md)</ept> keyword.","pos":[2383,2464],"source":"You can declare constants of the simple types with the [const](const.md) keyword."},{"content":"It's not possible to have constants of other struct types.","pos":[2465,2523]},{"content":"Constant expressions, whose operands are all simple type constants, are evaluated at compile time.","pos":[2527,2625]},{"pos":[2627,2793],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Simple types<ept id=\"p1\">](~/_csharplang/spec/types.md#simple-types)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Simple types](~/_csharplang/spec/types.md#simple-types) section of the [C# language specification](../language-specification/index.md)."},{"pos":[2798,2822],"content":"Initializing value types","linkify":"Initializing value types","nodes":[{"content":"Initializing value types","pos":[0,24]}]},{"content":"Local variables in C# must be initialized before they are used.","pos":[2824,2887]},{"content":"For example, you might declare a local variable without initialization as in the following example:","pos":[2888,2987]},{"content":"You cannot use it before you initialize it.","pos":[3015,3058]},{"content":"You can initialize it using the following statement:","pos":[3059,3111]},{"content":"This statement is equivalent to the following statement:","pos":[3192,3248]},{"content":"You can, of course, have the declaration and the initialization in the same statement as in the following examples:","pos":[3331,3446]},{"content":"–or–","pos":[3486,3490]},{"content":"Using the <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](new.md)</ept> operator calls the default constructor of the specific type and assigns the default value to the variable.","pos":[3522,3652],"source":"Using the [new](new.md) operator calls the default constructor of the specific type and assigns the default value to the variable."},{"content":"In the preceding example, the default constructor assigned the value <ph id=\"ph1\">`0`</ph> to <ph id=\"ph2\">`myInt`</ph>.","pos":[3653,3737],"source":" In the preceding example, the default constructor assigned the value `0` to `myInt`."},{"content":"For more information about values assigned by calling default constructors, see <bpt id=\"p1\">[</bpt>Default values table<ept id=\"p1\">](default-values-table.md)</ept>.","pos":[3738,3866],"source":" For more information about values assigned by calling default constructors, see [Default values table](default-values-table.md)."},{"content":"With user-defined types, use <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](new.md)</ept> to invoke the default constructor.","pos":[3868,3945],"source":"With user-defined types, use [new](new.md) to invoke the default constructor."},{"content":"For example, the following statement invokes the default constructor of the <ph id=\"ph1\">`Point`</ph> struct:","pos":[3946,4037],"source":" For example, the following statement invokes the default constructor of the `Point` struct:"},{"content":"After this call, the struct is considered to be definitely assigned; that is, all its members are initialized to their default values.","pos":[4123,4257]},{"pos":[4259,4324],"content":"For more information about the <ph id=\"ph1\">`new`</ph> operator, see <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](new.md)</ept>.","source":"For more information about the `new` operator, see [new](new.md)."},{"pos":[4326,4464],"content":"For information about formatting the output of numeric types, see <bpt id=\"p1\">[</bpt>Formatting numeric results table<ept id=\"p1\">](formatting-numeric-results-table.md)</ept>.","source":"For information about formatting the output of numeric types, see [Formatting numeric results table](formatting-numeric-results-table.md)."},{"pos":[4469,4477],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4481,4508],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4511,4567],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4570,4593],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[4596,4613],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](types.md)</ept>","source":"[Types](types.md)"},{"pos":[4616,4675],"content":"<bpt id=\"p1\">[</bpt>Reference tables for types<ept id=\"p1\">](reference-tables-for-types.md)</ept>","source":"[Reference tables for types](reference-tables-for-types.md)"},{"pos":[4678,4715],"content":"<bpt id=\"p1\">[</bpt>Reference Types<ept id=\"p1\">](reference-types.md)</ept>","source":"[Reference Types](reference-types.md)"},{"pos":[4718,4783],"content":"<bpt id=\"p1\">[</bpt>Nullable types<ept id=\"p1\">](../../programming-guide/nullable-types/index.md)</ept>","source":"[Nullable types](../../programming-guide/nullable-types/index.md)"}]}