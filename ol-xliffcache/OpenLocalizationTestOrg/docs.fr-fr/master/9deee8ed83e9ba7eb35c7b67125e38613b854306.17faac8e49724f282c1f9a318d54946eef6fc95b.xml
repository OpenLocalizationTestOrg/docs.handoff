{"content":"---\ntitle: \"let clause (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"let_CSharpKeyword\"\n  - \"let\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"let keyword [C#]\"\n  - \"let clause [C#]\"\nms.assetid: 13c9c1a4-ce57-48ef-8e1b-4c2a59b99fb4\ncaps.latest.revision: 15\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# let clause (C# Reference)\nIn a query expression, it is sometimes useful to store the result of a sub-expression in order to use it in subsequent clauses. You can do this with the `let` keyword, which creates a new range variable and initializes it with the result of the expression you supply. Once initialized with a value, the range variable cannot be used to store another value. However, if the range variable holds a queryable type, it can be queried.  \n  \n## Example  \n In the following example `let` is used in two ways:  \n  \n1.  To create an enumerable type that can itself be queried.  \n  \n2.  To enable the query to call `ToLower` only one time on the range variable `word`. Without using `let`, you would have to call `ToLower` in each predicate in the `where` clause.  \n  \n [!code-cs[cscsrefQueryKeywords#28](../../../csharp/language-reference/keywords/codesnippet/CSharp/let-clause_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [Query Keywords (LINQ)](../../../csharp/language-reference/keywords/query-keywords.md)   \n [LINQ Query Expressions](../../../csharp/programming-guide/linq-query-expressions/index.md)   \n [Getting Started with LINQ in C#](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)   \n [How to: Handle Exceptions in Query Expressions](../../../csharp/programming-guide/linq-query-expressions/how-to-handle-exceptions-in-query-expressions.md)","nodes":[{"pos":[4,585],"embed":true,"restype":"x-metadata","content":"title: \"let clause (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"let_CSharpKeyword\"\n  - \"let\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"let keyword [C#]\"\n  - \"let clause [C#]\"\nms.assetid: 13c9c1a4-ce57-48ef-8e1b-4c2a59b99fb4\ncaps.latest.revision: 15\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"let clause (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,42],"content":"let clause (C# Reference) | Microsoft Docs","nodes":[{"content":"let clause (C# Reference) | Microsoft Docs","pos":[0,42]}]}],"path":["title"]}],"yml":true},{"pos":[592,617],"content":"let clause (C# Reference)","linkify":"let clause (C# Reference)","nodes":[{"content":"let clause (C# Reference)","pos":[0,25]}]},{"content":"In a query expression, it is sometimes useful to store the result of a sub-expression in order to use it in subsequent clauses.","pos":[618,745]},{"content":"You can do this with the <ph id=\"ph1\">`let`</ph> keyword, which creates a new range variable and initializes it with the result of the expression you supply.","pos":[746,885],"source":" You can do this with the `let` keyword, which creates a new range variable and initializes it with the result of the expression you supply."},{"content":"Once initialized with a value, the range variable cannot be used to store another value.","pos":[886,974]},{"content":"However, if the range variable holds a queryable type, it can be queried.","pos":[975,1048]},{"pos":[1057,1064],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1068,1119],"content":"In the following example <ph id=\"ph1\">`let`</ph> is used in two ways:","source":"In the following example `let` is used in two ways:"},{"content":"To create an enumerable type that can itself be queried.","pos":[1129,1185]},{"content":"To enable the query to call <ph id=\"ph1\">`ToLower`</ph> only one time on the range variable <ph id=\"ph2\">`word`</ph>.","pos":[1195,1276],"source":"To enable the query to call `ToLower` only one time on the range variable `word`."},{"content":"Without using <ph id=\"ph1\">`let`</ph>, you would have to call <ph id=\"ph2\">`ToLower`</ph> in each predicate in the <ph id=\"ph3\">`where`</ph> clause.","pos":[1277,1371],"source":" Without using `let`, you would have to call `ToLower` in each predicate in the `where` clause."},{"pos":[1502,1510],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1514,1574],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Query Keywords (LINQ)<ept id=\"p1\">](../../../csharp/language-reference/keywords/query-keywords.md)</ept><ph id=\"ph1\"> </ph>","pos":[1578,1665],"source":"[Query Keywords (LINQ)](../../../csharp/language-reference/keywords/query-keywords.md) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ Query Expressions<ept id=\"p1\">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1669,1761],"source":"[LINQ Query Expressions](../../../csharp/programming-guide/linq-query-expressions/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Getting Started with LINQ in C#<ept id=\"p1\">](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[1765,1877],"source":"[Getting Started with LINQ in C#](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Handle Exceptions in Query Expressions<ept id=\"p1\">](../../../csharp/programming-guide/linq-query-expressions/how-to-handle-exceptions-in-query-expressions.md)</ept>","pos":[1881,2036],"source":"[How to: Handle Exceptions in Query Expressions](../../../csharp/programming-guide/linq-query-expressions/how-to-handle-exceptions-in-query-expressions.md)"}]}