<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="imports-statement-xml-namespace.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97d08113a37477add9d770b0a680c303fe7e3040</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\imports-statement-xml-namespace.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cce0b6108eb63b7eb9c2f78d4a1916c01ed5669</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">430b4024bf509db4b97ca1d6ab053869403ae1d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Imports Statement - XML Namespace (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Imports Statement (XML Namespace)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Imports XML namespace prefixes for use in XML literals and XML axis properties.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The string by which XML elements and attributes can refer to <ph id="ph1">`xmlNamespaceName`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`xmlNamespacePrefix`</ph> is supplied, the imported XML namespace is the default XML namespace.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Must be a valid XML identifier.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Names of Declared XML Elements and Attributes<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/names-of-declared-xml-elements-and-attributes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The string identifying the XML namespace being imported.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Imports`</ph> statement to define global XML namespaces that you can use with XML literals and XML axis properties, or as parameters passed to the <ph id="ph2">`GetXmlNamespace`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>(For information about using the <ph id="ph1">`Imports`</ph> statement to import an alias that can be used where type names are used in your code, see <bpt id="p1">[</bpt>Imports Statement (.NET Namespace and Type)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept>.) The syntax for declaring an XML namespace by using the <ph id="ph2">`Imports`</ph> statement is identical to the syntax used in XML.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Therefore, you can copy a namespace declaration from an XML file and use it in an <ph id="ph1">`Imports`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>XML namespace prefixes are useful when you want to repeatedly create XML elements that are from the same namespace.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The XML namespace prefix declared with the <ph id="ph1">`Imports`</ph> statement is global in the sense that it is available to all code in the file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use it when you create XML element literals and when you access XML axis properties.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XML Element Literal<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)</ept> and <bpt id="p2">[</bpt>XML Axis Properties<ept id="p2">](../../../visual-basic/language-reference/xml-axis/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you define a global XML namespace without a namespace prefix (for example, <ph id="ph1">`Imports &lt;xmlns="http://SomeNameSpace&gt;"`</ph>), that namespace is considered the default XML namespace.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The default XML namespace is used for any XML element literals or XML attribute axis properties that do not explicitly specify a namespace.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The default namespace is also used if the specified namespace is the empty namespace (that is, <ph id="ph1">`xmlns=""`</ph>).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The default XML namespace does not apply to XML attributes in XML literals or to XML attribute axis properties that do not have a namespace.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>XML namespaces that are defined in an XML literal, which are called <bpt id="p1">*</bpt>local XML namespaces<ept id="p1">*</ept>, take precedence over XML namespaces that are defined by the <ph id="ph1">`Imports`</ph> statement as global.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>XML namespaces that are defined by the <ph id="ph1">`Imports`</ph> statement take precedence over XML namespaces imported for a Visual Basic project.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If an XML literal defines an XML namespace, that local namespace does not apply to embedded expressions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Global XML namespaces follow the same scoping and definition rules as .NET Framework namespaces.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>As a result, you can include an <ph id="ph1">`Imports`</ph> statement to define a global XML namespace anywhere you can import a .NET Framework namespace.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This includes both code files and project-level imported namespaces.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For information about project-level imported namespaces, see <bpt id="p1">[</bpt>References Page, Project Designer (Visual Basic)<ept id="p1">](/visualstudio/ide/reference/references-page-project-designer-visual-basic)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each source file can contain any number of <ph id="ph1">`Imports`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>These must follow option declarations, such as the <ph id="ph1">`Option Strict`</ph> statement, and they must precede programming element declarations, such as <ph id="ph2">`Module`</ph> or <ph id="ph3">`Class`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example imports a default XML namespace and an XML namespace identified with the prefix <ph id="ph1">`ns`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It then creates XML literals that use both namespaces.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This code displays the following text:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example imports the XML namespace prefix <ph id="ph1">`ns`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It then creates an XML literal that uses the namespace prefix and displays the element's final form.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This code displays the following text:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Notice that the compiler converted the XML namespace prefix from a global prefix to a local prefix definition.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example imports the XML namespace prefix <ph id="ph1">`ns`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It then uses the prefix of the namespace to create an XML literal and access the first child node with the qualified name <ph id="ph1">`ns:name`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This code displays the following text:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Element Literal<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Axis Properties<ept id="p1">](../../../visual-basic/language-reference/xml-axis/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Names of Declared XML Elements and Attributes<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/names-of-declared-xml-elements-and-attributes.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetXmlNamespace Operator<ept id="p1">](../../../visual-basic/language-reference/operators/getxmlnamespace-operator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>