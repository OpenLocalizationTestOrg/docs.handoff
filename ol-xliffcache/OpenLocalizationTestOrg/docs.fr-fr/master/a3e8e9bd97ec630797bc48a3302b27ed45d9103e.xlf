<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="perform-inner-joins.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3e8e9bd97ec630797bc48a3302b27ed45d9103e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\linq\perform-inner-joins.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ba4e79ff830bfac2049a8dcc3657d097177efcc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f67c974f6d12bfffc41d3a2fae79aa092809f3f2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Perform inner joins (LINQ in C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to perform inner joins using LINQ in C#.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Perform inner joins</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In relational database terms, an <bpt id="p1">*</bpt>inner join<ept id="p1">*</ept> produces a result set in which each element of the first collection appears one time for every matching element in the second collection.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If an element in the first collection has no matching elements, it does not appear in the result set.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method, which is called by the <ph id="ph2">`join`</ph> clause in C#, implements an inner join.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article shows you how to perform four variations of an inner join:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A simple inner join that correlates elements from two data sources based on a simple key.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An inner join that correlates elements from two data sources based on a <bpt id="p1">*</bpt>composite<ept id="p1">*</ept> key.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A composite key, which is a key that consists of more than one value, enables you to correlate elements based on more than one property.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>multiple join<ept id="p1">*</ept> in which successive join operations are appended to each other.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An inner join that is implemented by using a group join.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example - Simple key join</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example creates two collections that contain objects of two user-defined types, <ph id="ph1">`Person`</ph> and <ph id="ph2">`Pet`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The query uses the <ph id="ph1">`join`</ph> clause in C# to match <ph id="ph2">`Person`</ph> objects with <ph id="ph3">`Pet`</ph> objects whose <ph id="ph4">`Owner`</ph> is that <ph id="ph5">`Person`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`select`</ph> clause in C# defines how the resulting objects will look.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this example the resulting objects are anonymous types that consist of the owner's first name and the pet's name.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`Person`</ph> object whose <ph id="ph2">`LastName`</ph> is "Huff" does not appear in the result set because there is no <ph id="ph3">`Pet`</ph> object that has <ph id="ph4">`Pet.Owner`</ph> equal to that <ph id="ph5">`Person`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example - Composite key join</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Instead of correlating elements based on just one property, you can use a composite key to compare elements based on multiple properties.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To do this, specify the key selector function for each collection to return an anonymous type that consists of the properties you want to compare.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you label the properties, they must have the same label in each key's anonymous type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The properties must also appear in the same order.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example uses a list of <ph id="ph1">`Employee`</ph> objects and a list of <ph id="ph2">`Student`</ph> objects to determine which employees are also students.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Both of these types have a <ph id="ph1">`FirstName`</ph> and a <ph id="ph2">`LastName`</ph> property of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The functions that create the join keys from each list's elements return an anonymous type that consists of the <ph id="ph1">`FirstName`</ph> and <ph id="ph2">`LastName`</ph> properties of each element.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The join operation compares these composite keys for equality and returns pairs of objects from each list where both the first name and the last name match.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example - Multiple join</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Any number of join operations can be appended to each other to perform a multiple join.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`join`</ph> clause in C# correlates a specified data source with the results of the previous join.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example creates three collections: a list of <ph id="ph1">`Person`</ph> objects, a list of <ph id="ph2">`Cat`</ph> objects, and a list of <ph id="ph3">`Dog`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`join`</ph> clause in C# matches people and cats based on a <ph id="ph2">`Person`</ph> object matching <ph id="ph3">`Cat.Owner`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It returns a sequence of anonymous types that contain the <ph id="ph1">`Person`</ph> object and <ph id="ph2">`Cat.Name`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">`join`</ph> clause in C# correlates the anonymous types returned by the first join with <ph id="ph2">`Dog`</ph> objects in the supplied list of dogs, based on a composite key that consists of the <ph id="ph3">`Owner`</ph> property of type <ph id="ph4">`Person`</ph>, and the first letter of the animal's name.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It returns a sequence of anonymous types that contain the <ph id="ph1">`Cat.Name`</ph> and <ph id="ph2">`Dog.Name`</ph> properties from each matching pair.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because this is an inner join, only those objects from the first data source that have a match in the second data source are returned.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example - Inner join by using grouped join</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example shows you how to implement an inner join by using a group join.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`query1`</ph>, the list of <ph id="ph2">`Person`</ph> objects is group-joined to the list of <ph id="ph3">`Pet`</ph> objects based on the <ph id="ph4">`Person`</ph> matching the <ph id="ph5">`Pet.Owner`</ph> property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The group join creates a collection of intermediate groups, where each group consists of a <ph id="ph1">`Person`</ph> object and a sequence of matching <ph id="ph2">`Pet`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>By adding a second <ph id="ph1">`from`</ph> clause to the query, this sequence of sequences is combined (or flattened) into one longer sequence.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The type of the elements of the final sequence is specified by the <ph id="ph1">`select`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this example, that type is an anonymous type that consists of the <ph id="ph1">`Person.FirstName`</ph> and <ph id="ph2">`Pet.Name`</ph> properties for each matching pair.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The result of <ph id="ph1">`query1`</ph> is equivalent to the result set that would have been obtained by using the <ph id="ph2">`join`</ph> clause without the <ph id="ph3">`into`</ph> clause to perform an inner join.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`query2`</ph> variable demonstrates this equivalent query.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Perform grouped joins<ept id="p1">](perform-grouped-joins.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Perform left outer joins<ept id="p1">](perform-left-outer-joins.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous types<ept id="p1">](../programming-guide/classes-and-structs/anonymous-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>