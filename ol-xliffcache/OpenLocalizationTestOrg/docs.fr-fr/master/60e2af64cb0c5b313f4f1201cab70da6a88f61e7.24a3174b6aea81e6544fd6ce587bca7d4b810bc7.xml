{"content":"---\ntitle: \"How to: Erase Ink on a Custom Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"custom controls [WPF], erasing ink on\"\n  - \"ink [WPF], erasing on custom control\"\nms.assetid: d88c50f9-b4d8-4962-a28b-67d6a15a5fe0\n---\n# How to: Erase Ink on a Custom Control\nThe <xref:System.Windows.Ink.IncrementalStrokeHitTester> determines whether the currently drawn stroke intersects another stroke.  This is useful for creating a control that enables a user to erase parts of a stroke, the way a user can on an <xref:System.Windows.Controls.InkCanvas> when the <xref:System.Windows.Controls.InkCanvas.EditingMode%2A> is set to <xref:System.Windows.Controls.InkCanvasEditingMode.EraseByPoint>.  \n  \n## Example  \n The following example creates a custom control that enables the user to erase parts of strokes.  This example creates a control that contains ink when it is initialized.  To create a control that collects ink, see [Creating an Ink Input Control](creating-an-ink-input-control.md).  \n  \n [!code-csharp[HowToEraseInk#1](~/samples/snippets/csharp/VS_Snippets_Wpf/HowToEraseInk/CSharp/InkEraser.cs#1)]\n [!code-vb[HowToEraseInk#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HowToEraseInk/VisualBasic/InkEraser.vb#1)]\n","nodes":[{"pos":[4,264],"embed":true,"restype":"x-metadata","content":"title: \"How to: Erase Ink on a Custom Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"custom controls [WPF], erasing ink on\"\n  - \"ink [WPF], erasing on custom control\"\nms.assetid: d88c50f9-b4d8-4962-a28b-67d6a15a5fe0","nodes":[{"content":"How to: Erase Ink on a Custom Control","nodes":[{"pos":[0,37],"content":"How to: Erase Ink on a Custom Control","nodes":[{"content":"How to: Erase Ink on a Custom Control","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[271,308],"content":"How to: Erase Ink on a Custom Control","linkify":"How to: Erase Ink on a Custom Control","nodes":[{"content":"How to: Erase Ink on a Custom Control","pos":[0,37]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Ink.IncrementalStrokeHitTester&gt;</ph> determines whether the currently drawn stroke intersects another stroke.","pos":[309,438],"source":"The <xref:System.Windows.Ink.IncrementalStrokeHitTester> determines whether the currently drawn stroke intersects another stroke."},{"content":"This is useful for creating a control that enables a user to erase parts of a stroke, the way a user can on an <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> when the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.InkCanvas.EditingMode%2A&gt;</ph> is set to <ph id=\"ph3\">&lt;xref:System.Windows.Controls.InkCanvasEditingMode.EraseByPoint&gt;</ph>.","pos":[440,732],"source":"  This is useful for creating a control that enables a user to erase parts of a stroke, the way a user can on an <xref:System.Windows.Controls.InkCanvas> when the <xref:System.Windows.Controls.InkCanvas.EditingMode%2A> is set to <xref:System.Windows.Controls.InkCanvasEditingMode.EraseByPoint>."},{"pos":[741,748],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates a custom control that enables the user to erase parts of strokes.","pos":[752,847]},{"content":"This example creates a control that contains ink when it is initialized.","pos":[849,921]},{"content":"To create a control that collects ink, see <bpt id=\"p1\">[</bpt>Creating an Ink Input Control<ept id=\"p1\">](creating-an-ink-input-control.md)</ept>.","pos":[923,1032],"source":"  To create a control that collects ink, see [Creating an Ink Input Control](creating-an-ink-input-control.md)."}]}