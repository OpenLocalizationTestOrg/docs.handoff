{"content":"---\ntitle: \"^= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.^=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"^= operator [Visual Basic]\"\n  - \"compound assignment statements\"\nms.assetid: 397da132-2d96-4a85-a7bc-f7c730a608c9\ncaps.latest.revision: 17\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ^= Operator (Visual Basic)\nRaises the value of a variable or property to the power of an expression and assigns the result back to the variable or property.  \n  \n## Syntax  \n  \n```  \n  \nvariableorproperty ^= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric variable or property.  \n  \n `expression`  \n Required. Any numeric expression.  \n  \n## Remarks  \n The element on the left side of the `^=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `^=` operator first raises the value of the variable or property (on the left-hand side of the operator) to the power of the value of the expression (on the right-hand side of the operator). The operator then assigns the result of that operation back to the variable or property.  \n  \n Visual Basic always performs exponentiation in the [Double Data Type](../../../visual-basic/language-reference/data-types/double-data-type.md). Operands of any different type are converted to `Double`, and the result is always `Double`.  \n  \n The value of `expression` can be fractional, negative, or both.  \n  \n## Overloading  \n The [^ Operator](../../../visual-basic/language-reference/operators/exponentiation-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `^` operator affects the behavior of the `^=` operator. If your code uses `^=` on a class or structure that overloads `^`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `^=` operator to raise the value of one `Integer` variable to the power of a second variable and assign the result to the first variable.  \n  \n [!code-vb[VbVbalrOperators#21](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/exponentiation-assignment-operator_1.vb)]  \n  \n## See Also  \n [^ Operator](../../../visual-basic/language-reference/operators/exponentiation-operator.md)   \n [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)   \n [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Statements](../../../visual-basic/programming-guide/language-features/statements.md)","nodes":[{"pos":[4,717],"nodes":[{"content":"^= Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,43],"content":"^= Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"^= Operator (Visual Basic) | Microsoft Docs","pos":[0,43]}]}],"pos":[6,52],"yaml":true}],"content":"title: \"^= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.^=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"^= operator [Visual Basic]\"\n  - \"compound assignment statements\"\nms.assetid: 397da132-2d96-4a85-a7bc-f7c730a608c9\ncaps.latest.revision: 17\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[724,750],"content":"^= Operator (Visual Basic)","linkify":"^= Operator (Visual Basic)","nodes":[{"content":"^= Operator (Visual Basic)","pos":[0,26]}]},{"content":"Raises the value of a variable or property to the power of an expression and assigns the result back to the variable or property.","pos":[751,880]},{"pos":[889,895],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[957,962],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[990,999]},{"content":"Any numeric variable or property.","pos":[1000,1033]},{"content":"Required.","pos":[1056,1065]},{"content":"Any numeric expression.","pos":[1066,1089]},{"pos":[1098,1105],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`^=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[1109,1230],"source":"The element on the left side of the `^=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[1231,1341],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`^=`</ph> operator first raises the value of the variable or property (on the left-hand side of the operator) to the power of the value of the expression (on the right-hand side of the operator).","pos":[1348,1542],"source":"The `^=` operator first raises the value of the variable or property (on the left-hand side of the operator) to the power of the value of the expression (on the right-hand side of the operator)."},{"content":"The operator then assigns the result of that operation back to the variable or property.","pos":[1543,1631]},{"content":"Visual Basic always performs exponentiation in the <bpt id=\"p1\">[</bpt>Double Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>.","pos":[1638,1781],"source":"Visual Basic always performs exponentiation in the [Double Data Type](../../../visual-basic/language-reference/data-types/double-data-type.md)."},{"content":"Operands of any different type are converted to <ph id=\"ph1\">`Double`</ph>, and the result is always <ph id=\"ph2\">`Double`</ph>.","pos":[1782,1874],"source":" Operands of any different type are converted to `Double`, and the result is always `Double`."},{"pos":[1881,1944],"content":"The value of <ph id=\"ph1\">`expression`</ph> can be fractional, negative, or both.","source":"The value of `expression` can be fractional, negative, or both."},{"pos":[1953,1964],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>^ Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/exponentiation-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1968,2205],"source":"The [^ Operator](../../../visual-basic/language-reference/operators/exponentiation-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`^`</ph> operator affects the behavior of the <ph id=\"ph2\">`^=`</ph> operator.","pos":[2206,2277],"source":" Overloading the `^` operator affects the behavior of the `^=` operator."},{"content":"If your code uses <ph id=\"ph1\">`^=`</ph> on a class or structure that overloads <ph id=\"ph2\">`^`</ph>, be sure you understand its redefined behavior.","pos":[2278,2391],"source":" If your code uses `^=` on a class or structure that overloads `^`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[2392,2533],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[2542,2549],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2553,2721],"content":"The following example uses the <ph id=\"ph1\">`^=`</ph> operator to raise the value of one <ph id=\"ph2\">`Integer`</ph> variable to the power of a second variable and assign the result to the first variable.","source":"The following example uses the `^=` operator to raise the value of one `Integer` variable to the power of a second variable and assign the result to the first variable."},{"pos":[2728,2875],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#21<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/exponentiation-assignment-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#21](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/exponentiation-assignment-operator_1.vb)]"},{"pos":[2884,2892],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>^ Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/exponentiation-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2896,2988],"source":"[^ Operator](../../../visual-basic/language-reference/operators/exponentiation-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2992,3091],"source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3095,3194],"source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[3198,3311],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[3315,3440],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","pos":[3444,3529],"source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}