{"content":"---\ntitle: \"How to: Implement Validation Logic on Custom Objects\"\nms.date: \"08/02/2018\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"checking for validation errors [WPF]\"\n  - \"validation errors [WPF], checking for\"\n  - \"implementing validation logic on custom objects [WPF]\"\n  - \"custom objects [WPF], implementing validation logic on\"\nms.assetid: 751fda9b-44f9-4d63-b4f2-1df07ac41e0f\n---\n# How to: Implement Validation Logic on Custom Objects\nThis example shows how to implement validation logic on a custom object and then bind to it.  \n  \n## Example  \n You can provide validation logic on the business layer if your source object implements <xref:System.ComponentModel.IDataErrorInfo>, as in the following example, which defines a `Person` object that implements <xref:System.ComponentModel.IDataErrorInfo>:  \n  \n [!code-csharp[BusinessLayerValidation#IDataErrorInfo](~/samples/snippets/csharp/VS_Snippets_Wpf/BusinessLayerValidation/CSharp/Data.cs#idataerrorinfo)]\n [!code-vb[BusinessLayerValidation#IDataErrorInfo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BusinessLayerValidation/VisualBasic/Data.vb#idataerrorinfo)]  \n  \n In the following example, the text property of the text box binds to the `Person.Age` property, which has been made available for binding through a resource declaration that is given the `x:Key` `data`. The <xref:System.Windows.Controls.DataErrorValidationRule> checks for the validation errors raised by the <xref:System.ComponentModel.IDataErrorInfo> implementation.  \n  \n [!code-xaml[BusinessLayerValidation#BoundTextBox](~/samples/snippets/csharp/VS_Snippets_Wpf/BusinessLayerValidation/CSharp/Window1.xaml?highlight=8,11-19,25-42)]  \n  \n Alternatively, instead of using the <xref:System.Windows.Controls.DataErrorValidationRule>, you can set the <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> property to `true`.  \n  \n## See also\n\n- <xref:System.Windows.Controls.ExceptionValidationRule>\n- [Implement Binding Validation](how-to-implement-binding-validation.md)\n- [How-to Topics](data-binding-how-to-topics.md)\n","nodes":[{"pos":[4,400],"embed":true,"restype":"x-metadata","content":"title: \"How to: Implement Validation Logic on Custom Objects\"\nms.date: \"08/02/2018\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"checking for validation errors [WPF]\"\n  - \"validation errors [WPF], checking for\"\n  - \"implementing validation logic on custom objects [WPF]\"\n  - \"custom objects [WPF], implementing validation logic on\"\nms.assetid: 751fda9b-44f9-4d63-b4f2-1df07ac41e0f","nodes":[{"content":"How to: Implement Validation Logic on Custom Objects","nodes":[{"pos":[0,52],"content":"How to: Implement Validation Logic on Custom Objects","nodes":[{"content":"How to: Implement Validation Logic on Custom Objects","pos":[0,52]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[407,459],"content":"How to: Implement Validation Logic on Custom Objects","linkify":"How to: Implement Validation Logic on Custom Objects","nodes":[{"content":"How to: Implement Validation Logic on Custom Objects","pos":[0,52]}]},{"content":"This example shows how to implement validation logic on a custom object and then bind to it.","pos":[460,552]},{"pos":[561,568],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[572,826],"content":"You can provide validation logic on the business layer if your source object implements <ph id=\"ph1\">&lt;xref:System.ComponentModel.IDataErrorInfo&gt;</ph>, as in the following example, which defines a <ph id=\"ph2\">`Person`</ph> object that implements <ph id=\"ph3\">&lt;xref:System.ComponentModel.IDataErrorInfo&gt;</ph>:","source":"You can provide validation logic on the business layer if your source object implements <xref:System.ComponentModel.IDataErrorInfo>, as in the following example, which defines a `Person` object that implements <xref:System.ComponentModel.IDataErrorInfo>:"},{"content":"In the following example, the text property of the text box binds to the <ph id=\"ph1\">`Person.Age`</ph> property, which has been made available for binding through a resource declaration that is given the <ph id=\"ph2\">`x:Key`</ph> <ph id=\"ph3\">`data`</ph>.","pos":[1150,1352],"source":"In the following example, the text property of the text box binds to the `Person.Age` property, which has been made available for binding through a resource declaration that is given the `x:Key` `data`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph> checks for the validation errors raised by the <ph id=\"ph2\">&lt;xref:System.ComponentModel.IDataErrorInfo&gt;</ph> implementation.","pos":[1353,1518],"source":" The <xref:System.Windows.Controls.DataErrorValidationRule> checks for the validation errors raised by the <xref:System.ComponentModel.IDataErrorInfo> implementation."},{"pos":[1693,1880],"content":"Alternatively, instead of using the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph>, you can set the <ph id=\"ph2\">&lt;xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A&gt;</ph> property to <ph id=\"ph3\">`true`</ph>.","source":"Alternatively, instead of using the <xref:System.Windows.Controls.DataErrorValidationRule>, you can set the <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> property to `true`."},{"pos":[1889,1897],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1958,2028],"content":"<bpt id=\"p1\">[</bpt>Implement Binding Validation<ept id=\"p1\">](how-to-implement-binding-validation.md)</ept>","source":"[Implement Binding Validation](how-to-implement-binding-validation.md)"},{"pos":[2031,2077],"content":"<bpt id=\"p1\">[</bpt>How-to Topics<ept id=\"p1\">](data-binding-how-to-topics.md)</ept>","source":"[How-to Topics](data-binding-how-to-topics.md)"}]}