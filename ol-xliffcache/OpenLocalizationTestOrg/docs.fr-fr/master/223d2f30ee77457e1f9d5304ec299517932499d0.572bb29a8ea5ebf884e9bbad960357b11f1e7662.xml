{"content":"---\ntitle: \"&amp;= Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 10/29/2018\nf1_keywords: \n  - \"&=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"AND assignment operator (&=) [C#]\"\n  - \"&= operator [C#]\"\nms.assetid: e8d58f3f-72dd-4b5a-b995-452fcce7e6bb\n---\n# &amp;= Operator (C# Reference)\n\nThe AND assignment operator.\n\nAn expression using the `&=` operator, such as\n\n```csharp\nx &= y\n```\n\nis equivalent to\n\n```csharp\nx = x & y\n```\n\nexcept that `x` is only evaluated once.\n\nFor integer operands, the [`&` operator](and-operator.md) computes the bitwise logical AND of its operands; for [bool](../keywords/bool.md) operands, it computes the logical AND of its operands.\n\nThe following example demonstrates the usage of the `&=` operator:\n\n[!code-csharp-interactive[AND assignment example](~/samples/snippets/csharp/language-reference/operators/AndOperatorExamples.cs#AndAssignmentExample)]\n\n## Operator overloadability\n\nIf a user-defined type [overloads](../keywords/operator.md) the [`&` operator](and-operator.md), the AND assignment operator `&=` is implicitly overloaded. A user-defined type cannot explicitly overload the AND assignment operator.\n\n## C# language specification\n\nFor more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n","nodes":[{"pos":[4,255],"embed":true,"restype":"x-metadata","content":"title: \"&amp;= Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 10/29/2018\nf1_keywords: \n  - \"&=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"AND assignment operator (&=) [C#]\"\n  - \"&= operator [C#]\"\nms.assetid: e8d58f3f-72dd-4b5a-b995-452fcce7e6bb","nodes":[{"content":"&amp;= Operator - C# Reference","nodes":[{"pos":[0,30],"content":"&amp;= Operator - C# Reference","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph>= Operator - C# Reference","pos":[0,30],"source":"&amp;= Operator - C# Reference"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[262,292],"content":"&amp;= Operator (C# Reference)","linkify":"&amp;= Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph>= Operator (C# Reference)","pos":[0,30],"source":"&amp;= Operator (C# Reference)"}]},{"content":"The AND assignment operator.","pos":[294,322]},{"pos":[324,370],"content":"An expression using the <ph id=\"ph1\">`&amp;=`</ph> operator, such as","source":"An expression using the `&=` operator, such as"},{"content":"is equivalent to","pos":[394,410]},{"pos":[437,476],"content":"except that <ph id=\"ph1\">`x`</ph> is only evaluated once.","source":"except that `x` is only evaluated once."},{"pos":[478,672],"content":"For integer operands, the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`&amp;`</ph> operator<ept id=\"p1\">](and-operator.md)</ept> computes the bitwise logical AND of its operands; for <bpt id=\"p2\">[</bpt>bool<ept id=\"p2\">](../keywords/bool.md)</ept> operands, it computes the logical AND of its operands.","source":"For integer operands, the [`&` operator](and-operator.md) computes the bitwise logical AND of its operands; for [bool](../keywords/bool.md) operands, it computes the logical AND of its operands."},{"pos":[674,740],"content":"The following example demonstrates the usage of the <ph id=\"ph1\">`&amp;=`</ph> operator:","source":"The following example demonstrates the usage of the `&=` operator:"},{"pos":[897,921],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"If a user-defined type <bpt id=\"p1\">[</bpt>overloads<ept id=\"p1\">](../keywords/operator.md)</ept> the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`&amp;`</ph> operator<ept id=\"p2\">](and-operator.md)</ept>, the AND assignment operator <ph id=\"ph2\">`&amp;=`</ph> is implicitly overloaded.","pos":[923,1078],"source":"If a user-defined type [overloads](../keywords/operator.md) the [`&` operator](and-operator.md), the AND assignment operator `&=` is implicitly overloaded."},{"content":"A user-defined type cannot explicitly overload the AND assignment operator.","pos":[1079,1154]},{"pos":[1159,1184],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1186,1372],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Compound assignment<ept id=\"p1\">](~/_csharplang/spec/expressions.md#compound-assignment)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1377,1385],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1389,1416],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1419,1475],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1478,1502],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"}]}