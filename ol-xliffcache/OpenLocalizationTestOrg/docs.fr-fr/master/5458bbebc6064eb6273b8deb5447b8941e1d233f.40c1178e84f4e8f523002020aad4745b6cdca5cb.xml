{"content":"---\ntitle: \"#Const Directive (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.#Const\"\n  - \"#vb.Const\"\n  - \"#Const\"\nhelpviewer_keywords: \n  - \"#Const directive\"\n  - \"conditional compilation [Visual Basic], directives\"\n  - \"Const directive (#Const)\"\n  - \"Visual Basic compiler, compiler directives\"\n  - \"constants [Visual Basic], Const directive\"\n  - \"constants [Visual Basic], declaring\"\n  - \"Const statement [Visual Basic], directive (#Const)\"\n  - \"declaring constants [Visual Basic], #const directive\"\nms.assetid: 707669e5-23f9-4f17-8622-a0d534429386\n---\n# #Const Directive\nDefines conditional compiler constants for Visual Basic.  \n  \n## Syntax  \n  \n```  \n#Const constname = expression  \n```  \n  \n## Parts  \n `constname`  \n Required. Name of the constant being defined.  \n  \n `expression`  \n Required. Literal, other conditional compiler constant, or any combination that includes any or all arithmetic or logical operators except `Is`.  \n  \n## Remarks  \n Conditional compiler constants are always private to the file in which they appear. You cannot create public compiler constants using the `#Const` directive; you can create them only in the user interface or with the `/define` compiler option.  \n  \n You can use only conditional compiler constants and literals in `expression`. Using a standard constant defined with `Const` causes an error. Conversely, you can use constants defined with the `#Const` keyword only for conditional compilation. Constants can also be undefined, in which case they have a value of `Nothing`.  \n  \n## Example  \n This example uses the `#Const` directive.  \n  \n [!code-vb[VbVbalrConditionalComp#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrConditionalComp/VB/Class1.vb#3)]  \n  \n## See also\n\n- [/define (Visual Basic)](../../../visual-basic/reference/command-line-compiler/define.md)\n- [#If...Then...#Else Directives](../../../visual-basic/language-reference/directives/if-then-else-directives.md)\n- [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md)\n- [Conditional Compilation](../../../visual-basic/programming-guide/program-structure/conditional-compilation.md)\n- [If...Then...Else Statement](../../../visual-basic/language-reference/statements/if-then-else-statement.md)\n","nodes":[{"pos":[4,560],"embed":true,"restype":"x-metadata","content":"title: \"#Const Directive (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.#Const\"\n  - \"#vb.Const\"\n  - \"#Const\"\nhelpviewer_keywords: \n  - \"#Const directive\"\n  - \"conditional compilation [Visual Basic], directives\"\n  - \"Const directive (#Const)\"\n  - \"Visual Basic compiler, compiler directives\"\n  - \"constants [Visual Basic], Const directive\"\n  - \"constants [Visual Basic], declaring\"\n  - \"Const statement [Visual Basic], directive (#Const)\"\n  - \"declaring constants [Visual Basic], #const directive\"\nms.assetid: 707669e5-23f9-4f17-8622-a0d534429386","nodes":[{"content":"#Const Directive (Visual Basic)","nodes":[{"pos":[1,31],"content":"Const Directive (Visual Basic)","linkify":"Const Directive (Visual Basic)","nodes":[{"content":"Const Directive (Visual Basic)","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[567,583],"content":"#Const Directive","linkify":"#Const Directive","nodes":[{"content":"#Const Directive","pos":[0,16]}]},{"content":"Defines conditional compiler constants for Visual Basic.","pos":[584,640]},{"pos":[649,655],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[711,716],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[735,744]},{"content":"Name of the constant being defined.","pos":[745,780]},{"content":"Required.","pos":[803,812]},{"content":"Literal, other conditional compiler constant, or any combination that includes any or all arithmetic or logical operators except <ph id=\"ph1\">`Is`</ph>.","pos":[813,947],"source":" Literal, other conditional compiler constant, or any combination that includes any or all arithmetic or logical operators except `Is`."},{"pos":[956,963],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Conditional compiler constants are always private to the file in which they appear.","pos":[967,1050]},{"content":"You cannot create public compiler constants using the <ph id=\"ph1\">`#Const`</ph> directive; you can create them only in the user interface or with the <ph id=\"ph2\">`/define`</ph> compiler option.","pos":[1051,1210],"source":" You cannot create public compiler constants using the `#Const` directive; you can create them only in the user interface or with the `/define` compiler option."},{"content":"You can use only conditional compiler constants and literals in <ph id=\"ph1\">`expression`</ph>.","pos":[1217,1294],"source":"You can use only conditional compiler constants and literals in `expression`."},{"content":"Using a standard constant defined with <ph id=\"ph1\">`Const`</ph> causes an error.","pos":[1295,1358],"source":" Using a standard constant defined with `Const` causes an error."},{"content":"Conversely, you can use constants defined with the <ph id=\"ph1\">`#Const`</ph> keyword only for conditional compilation.","pos":[1359,1460],"source":" Conversely, you can use constants defined with the `#Const` keyword only for conditional compilation."},{"content":"Constants can also be undefined, in which case they have a value of <ph id=\"ph1\">`Nothing`</ph>.","pos":[1461,1539],"source":" Constants can also be undefined, in which case they have a value of `Nothing`."},{"pos":[1548,1555],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1559,1600],"content":"This example uses the <ph id=\"ph1\">`#Const`</ph> directive.","source":"This example uses the `#Const` directive."},{"pos":[1743,1751],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1755,1844],"content":"<bpt id=\"p1\">[</bpt>/define (Visual Basic)<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/define.md)</ept>","source":"[/define (Visual Basic)](../../../visual-basic/reference/command-line-compiler/define.md)"},{"pos":[1847,1958],"content":"<bpt id=\"p1\">[</bpt>#If...Then...#Else Directives<ept id=\"p1\">](../../../visual-basic/language-reference/directives/if-then-else-directives.md)</ept>","source":"[#If...Then...#Else Directives](../../../visual-basic/language-reference/directives/if-then-else-directives.md)"},{"pos":[1961,2050],"content":"<bpt id=\"p1\">[</bpt>Const Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/const-statement.md)</ept>","source":"[Const Statement](../../../visual-basic/language-reference/statements/const-statement.md)"},{"pos":[2053,2164],"content":"<bpt id=\"p1\">[</bpt>Conditional Compilation<ept id=\"p1\">](../../../visual-basic/programming-guide/program-structure/conditional-compilation.md)</ept>","source":"[Conditional Compilation](../../../visual-basic/programming-guide/program-structure/conditional-compilation.md)"},{"pos":[2167,2274],"content":"<bpt id=\"p1\">[</bpt>If...Then...Else Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/if-then-else-statement.md)</ept>","source":"[If...Then...Else Statement](../../../visual-basic/language-reference/statements/if-then-else-statement.md)"}]}