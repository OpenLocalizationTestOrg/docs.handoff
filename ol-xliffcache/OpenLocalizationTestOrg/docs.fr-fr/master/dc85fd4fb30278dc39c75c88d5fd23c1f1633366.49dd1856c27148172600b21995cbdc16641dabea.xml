{"content":"---\ntitle: Asynchronous programming in C#\ndescription: An overview of the C# language support for asynchronous programming using async, await, Task, and Task<T>\nms.date: 03/18/2019\n---\n# The Task asynchronous programming model in C\\#\n\nThe Task asynchronous programming model (TAP) provides an abstraction over asynchronous code. You write code as a sequence of statements, just like always. You can read that code as though each statement completes before the next begins. The compiler performs a number of transformations because some of those statements may start work and return a <xref:System.Threading.Tasks.Task> that represents the ongoing work.\n\nThat's the goal of this syntax: enable code that reads like a sequence of statements, but executes in a much more complicated order based on external resource allocation and when tasks complete. It's analogous to how people give instructions for processes that include asynchronous tasks. Throughout this article, you'll use an example of instructions for making a breakfast to see how the `async` and `await` keywords make it easier to reason about code that includes a series of asynchronous instructions. You'd write the instructions something like the following list to explain how to make a breakfast:\n\n1. Pour a cup of coffee.\n1. Heat up a pan, then fry two eggs.\n1. Fry three slices of bacon.\n1. Toast two pieces of bread.\n1. Add butter and jam to the toast.\n1. Pour a glass of orange juice.\n\nIf you have experience cooking, you'd execute those instructions **asynchronously**. you'd start warming the pan for eggs, then start the bacon. You'd put the bread in the toaster, then start the eggs. At each step of the process, you'd start a task, then turn your attention to tasks that are ready for your attention.\n\nCooking breakfast is a good example of asynchronous work that isn't parallel. One person (or thread) can handle all these tasks. Continuing the breakfast analogy, one person can make breakfast asynchronously by starting the next task before the first completes. The cooking progresses whether or not someone is watching it. As soon as you start warming the pan for the eggs, you can begin frying the bacon. Once the bacon starts, you can put the bread into the toaster.\n\nFor a parallel algorithm, you'd need multiple cooks (or threads). One would make the eggs, one the bacon, and so on. Each one would be focused on just that one task. Each cook (or thread) would be blocked synchronously waiting for bacon to be ready to flip, or the toast to pop. \n\nNow, consider those same instructions written as C# statements:\n\n[!code-csharp[SynchronousBreakfast](~/samples/snippets/csharp/tour-of-async/AsyncBreakfast-starter/Program.cs#Main)]\n\nComputers don't interpret those instructions the same way people do. The computer will block on each statement until the work is complete before moving on to the next statement. That creates an unsatisfying breakfast. The later tasks wouldn't be started until the earlier tasks had completed. It would take much longer to create the breakfast, and some items would have gotten cold before being served. \n\nIf you want the computer to execute the above instructions asynchronously, you must write asynchronous code.\n\nThese concerns are important for the programs you write today. When you write client programs, you want the UI to be responsive to user input. Your application shouldn't make a phone appear frozen while it's downloading data from the web. When you write server programs, you don't want threads blocked. Those threads could be serving other requests. Using synchronous code when asynchronous alternatives exist hurts your ability to scale out less expensively. You pay for those blocked threads.\n\nSuccessful modern applications require asynchronous code. Without language support, writing asynchronous code required callbacks, completion events, or other means that obscured the original intent of the code. The advantage of the synchronous code is that it's easy to understand. The step-by-step actions make it easy to scan and understand. Traditional asynchronous models forced you to focus on the asynchronous nature of the code, not on the fundamental actions of the code.\n\n## Don't block, await instead\n\nThe preceding code demonstrates a bad practice: constructing synchronous code to perform asynchronous operations. As written, this code blocks the thread executing it from doing any other work. It won't be interrupted while any of the tasks are in progress. It would be as though you stared at the toaster after putting the bread in. You'd ignore anyone talking to you until the toast popped. \n\nLet's start by updating this code so that the thread doesn't block while tasks are running. The `await` keyword provides a non-blocking way to start a task, then continue execution when that task completes. A simple asynchronous version of the make a breakfast code would look like the following snippet:\n\n[!code-csharp[SimpleAsyncBreakfast](~/samples/snippets/csharp/tour-of-async/AsyncBreakfast-V2/Program.cs#Main)]\n\nThis code doesn't block while the eggs or the bacon are cooking. This code won't start any other tasks though. You'd still put the toast in the toaster and stare at it until it pops. But at least, you'd respond to anyone that wanted your attention. In a restaurant where multiple orders are placed, the cook could start another breakfast while the first is cooking.\n\nNow, the thread working on the breakfast isn't blocked while awaiting any started task that hasn't yet finished. For some applications, this change is all that's needed. A GUI application still responds to the user with just this change. However, for this scenario, you want more. You don't want each of the component tasks to be executed sequentially. It's better to start each of the component tasks before awaiting the previous task's completion.\n\n## Start tasks concurrently\n\nIn many scenarios, you want to start several independent tasks immediately. Then, as each task finishes, you can continue other work that's ready. In the breakfast analogy, that's how you get breakfast done more quickly. You also get everything done close to the same time. You'll get a hot breakfast.\n\nThe <xref:System.Threading.Tasks.Task?displayProperty=nameWithType> and related types are classes you can use to reason about tasks that are in progress. That enables you to write code that more closely resembles the way you'd actually create breakfast. You'd start cooking the eggs, bacon, and toast at the same time. As each requires action, you'd turn your attention to that task, take care of the next action, then await for something else that requires your attention.\n\nYou start a task and hold on to the <xref:System.Threading.Tasks.Task> object that represents the work. You'll `await` each task before working with its result.\n\nLet's make these changes to the breakfast code. The first step is to store the tasks for operations when they start, rather than awaiting them:\n\n```csharp\nCoffee cup = PourCoffee();\nConsole.WriteLine(\"coffee is ready\");\nTask<Egg> eggTask = FryEggs(2);\nEgg eggs = await eggTask;\nConsole.WriteLine(\"eggs are ready\");\nTask<Bacon> baconTask = FryBacon(3);\nBacon bacon = await baconTask;\nConsole.WriteLine(\"bacon is ready\");\nTask<Toast> toastTask = ToastBread(2);\nToast toast = await toastTask;\nApplyButter(toast);\nApplyJam(toast);\nConsole.WriteLine(\"toast is ready\");\nJuice oj = PourOJ();\nConsole.WriteLine(\"oj is ready\");\n\nConsole.WriteLine(\"Breakfast is ready!\");\n```\n\nNext, you can move the `await` statements for the bacon and eggs to the end of the method, before serving breakfast:\n\n```csharp\nCoffee cup = PourCoffee();\nConsole.WriteLine(\"coffee is ready\");\nTask<Egg> eggTask = FryEggs(2);\nTask<Bacon> baconTask = FryBacon(3);\nTask<Toast> toastTask = ToastBread(2);\nToast toast = await toastTask;\nApplyButter(toast);\nApplyJam(toast);\nConsole.WriteLine(\"toast is ready\");\nJuice oj = PourOJ();\nConsole.WriteLine(\"oj is ready\");\n\nEgg eggs = await eggTask;\nConsole.WriteLine(\"eggs are ready\");\nBacon bacon = await baconTask;\nConsole.WriteLine(\"bacon is ready\");\n\nConsole.WriteLine(\"Breakfast is ready!\");\n```\n\nThe preceding code works better. You start all the asynchronous tasks at once. You await each task only when you need the results. The preceding code may be similar to code in a web application that makes requests of different microservices, then combines the results into a single page. You'll make all the requests immediately, then `await` all those tasks and compose the web page.\n\n## Composition with tasks\n\n You have everything ready for breakfast at the same time except the toast. Making the toast is the composition of an asynchronous operation (toasting the bread), and synchronous operations (adding the butter and the jam). Updating this code illustrates an important concept:\n\n> [!IMPORTANT]\n> The composition of an asynchronous operation followed by synchronous work is an asynchronous operation. Stated another way, if any portion of an operation is asynchronous, the entire operation is asynchronous.\n\nThe preceding code showed you that you can use <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> objects to hold running tasks. You `await` each task before using its result. The next step is to create methods that represent the combination of other work. Before serving breakfast, you want to await the task that represents toasting the bread before adding butter and jam. You can represent that work with the following code:\n\n[!code-csharp[ComposeToastTask](~/samples/snippets/csharp/tour-of-async/AsyncBreakfast-V3/Program.cs#ComposeToastTask)]\n\nThe preceding method has the `async` modifier in its signature. That signals to the compiler that this method contains an `await` statement; it contains asynchronous operations. This method represents the task that toasts the bread, then adds butter and jam. This method returns a <xref:System.Threading.Tasks.Task%601> that represents the composition of those three operations. The main block of code now becomes:\n\n[!code-csharp[StartConcurrentTasks](~/samples/snippets/csharp/tour-of-async/AsyncBreakfast-V3/Program.cs#Main)]\n\nThe previous change illustrated an important technique for working with asynchronous code. You compose tasks by separating the operations into a new method that returns a task. You can choose when to await that task. You can start other tasks concurrently.\n\n## Await tasks efficiently\n\nThe series of `await` statements at the end of the preceding code can be improved by using methods of the `Task` class. One of those APIs is <xref:System.Threading.Tasks.Task.WhenAll%2A>, which returns a <xref:System.Threading.Tasks.Task> that completes when all the tasks in its argument list have completed, as shown in the following code:\n\n```csharp\nawait Task.WhenAll(eggTask, baconTask, toastTask);\nConsole.WriteLine(\"eggs are ready\");\nConsole.WriteLine(\"bacon is ready\");\nConsole.WriteLine(\"toast is ready\");\nConsole.WriteLine(\"Breakfast is ready!\");\n```\n\nAnother option is to use <xref:System.Threading.Tasks.Task.WhenAny%2A>, which returns a `Task<Task>` that completes when any of its arguments completes. You can await the returned task, knowing that it has already finished. The following code shows how you could use <xref:System.Threading.Tasks.Task.WhenAny%2A> to await the first task to finish and then process its result. After processing the result from the completed task, you remove that completed task from the list of tasks passed to `WhenAny`.\n\n[!code-csharp[AwaitAnyTask](~/samples/snippets/csharp/tour-of-async/AsyncBreakfast-final/Program.cs#AwaitAnyTask)]\n\nAfter all those changes, the final version of `Main` looks like the following code:\n\n[!code-csharp[Final](~/samples/snippets/csharp/tour-of-async/AsyncBreakfast-final/Program.cs#Main)]\n\nThis final code is asynchronous. It more accurately reflects how a person would cook a breakfast. Compare the preceding code with the first code sample in this article. The core actions are still clear from reading the code. You can read this code the same way you'd read those instructions for making a breakfast at the beginning of this article. The language features for `async` and `await` provide the translation every person makes to follow those written instructions: start tasks as you can and don't block waiting for tasks to complete.\n","nodes":[{"pos":[4,180],"embed":true,"restype":"x-metadata","content":"title: Asynchronous programming in C#\ndescription: An overview of the C# language support for asynchronous programming using async, await, Task, and Task<T>\nms.date: 03/18/2019","nodes":[{"content":"Asynchronous programming in C#","nodes":[{"pos":[0,30],"content":"Asynchronous programming in C#","nodes":[{"content":"Asynchronous programming in C#","pos":[0,30]}]}],"path":["title"],"nosxs":false},{"content":"An overview of the C# language support for asynchronous programming using async, await, Task, and Task<T>","nodes":[{"pos":[0,105],"content":"An overview of the C# language support for asynchronous programming using async, await, Task, and Task<ph id=\"ph1\">&lt;T&gt;</ph>","source":"An overview of the C# language support for asynchronous programming using async, await, Task, and Task<T>"}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[187,233],"content":"The Task asynchronous programming model in C\\#","linkify":"The Task asynchronous programming model in C\\#","nodes":[{"content":"The Task asynchronous programming model in C<ph id=\"ph1\">\\#</ph>","pos":[0,46],"source":"The Task asynchronous programming model in C\\#"}]},{"content":"The Task asynchronous programming model (TAP) provides an abstraction over asynchronous code.","pos":[235,328]},{"content":"You write code as a sequence of statements, just like always.","pos":[329,390]},{"content":"You can read that code as though each statement completes before the next begins.","pos":[391,472]},{"content":"The compiler performs a number of transformations because some of those statements may start work and return a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> that represents the ongoing work.","pos":[473,652],"source":" The compiler performs a number of transformations because some of those statements may start work and return a <xref:System.Threading.Tasks.Task> that represents the ongoing work."},{"content":"That's the goal of this syntax: enable code that reads like a sequence of statements, but executes in a much more complicated order based on external resource allocation and when tasks complete.","pos":[654,848]},{"content":"It's analogous to how people give instructions for processes that include asynchronous tasks.","pos":[849,942]},{"content":"Throughout this article, you'll use an example of instructions for making a breakfast to see how the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords make it easier to reason about code that includes a series of asynchronous instructions.","pos":[943,1161],"source":" Throughout this article, you'll use an example of instructions for making a breakfast to see how the `async` and `await` keywords make it easier to reason about code that includes a series of asynchronous instructions."},{"content":"You'd write the instructions something like the following list to explain how to make a breakfast:","pos":[1162,1260]},{"content":"Pour a cup of coffee.","pos":[1265,1286]},{"content":"Heat up a pan, then fry two eggs.","pos":[1290,1323]},{"content":"Fry three slices of bacon.","pos":[1327,1353]},{"content":"Toast two pieces of bread.","pos":[1357,1383]},{"content":"Add butter and jam to the toast.","pos":[1387,1419]},{"content":"Pour a glass of orange juice.","pos":[1423,1452]},{"content":"If you have experience cooking, you'd execute those instructions <bpt id=\"p1\">**</bpt>asynchronously<ept id=\"p1\">**</ept>.","pos":[1454,1538],"source":"If you have experience cooking, you'd execute those instructions **asynchronously**."},{"content":"you'd start warming the pan for eggs, then start the bacon.","pos":[1539,1598]},{"content":"You'd put the bread in the toaster, then start the eggs.","pos":[1599,1655]},{"content":"At each step of the process, you'd start a task, then turn your attention to tasks that are ready for your attention.","pos":[1656,1773]},{"content":"Cooking breakfast is a good example of asynchronous work that isn't parallel.","pos":[1775,1852]},{"content":"One person (or thread) can handle all these tasks.","pos":[1853,1903]},{"content":"Continuing the breakfast analogy, one person can make breakfast asynchronously by starting the next task before the first completes.","pos":[1904,2036]},{"content":"The cooking progresses whether or not someone is watching it.","pos":[2037,2098]},{"content":"As soon as you start warming the pan for the eggs, you can begin frying the bacon.","pos":[2099,2181]},{"content":"Once the bacon starts, you can put the bread into the toaster.","pos":[2182,2244]},{"content":"For a parallel algorithm, you'd need multiple cooks (or threads).","pos":[2246,2311]},{"content":"One would make the eggs, one the bacon, and so on.","pos":[2312,2362]},{"content":"Each one would be focused on just that one task.","pos":[2363,2411]},{"content":"Each cook (or thread) would be blocked synchronously waiting for bacon to be ready to flip, or the toast to pop.","pos":[2412,2524]},{"content":"Now, consider those same instructions written as C# statements:","pos":[2527,2590]},{"content":"Computers don't interpret those instructions the same way people do.","pos":[2710,2778]},{"content":"The computer will block on each statement until the work is complete before moving on to the next statement.","pos":[2779,2887]},{"content":"That creates an unsatisfying breakfast.","pos":[2888,2927]},{"content":"The later tasks wouldn't be started until the earlier tasks had completed.","pos":[2928,3002]},{"content":"It would take much longer to create the breakfast, and some items would have gotten cold before being served.","pos":[3003,3112]},{"content":"If you want the computer to execute the above instructions asynchronously, you must write asynchronous code.","pos":[3115,3223]},{"content":"These concerns are important for the programs you write today.","pos":[3225,3287]},{"content":"When you write client programs, you want the UI to be responsive to user input.","pos":[3288,3367]},{"content":"Your application shouldn't make a phone appear frozen while it's downloading data from the web.","pos":[3368,3463]},{"content":"When you write server programs, you don't want threads blocked.","pos":[3464,3527]},{"content":"Those threads could be serving other requests.","pos":[3528,3574]},{"content":"Using synchronous code when asynchronous alternatives exist hurts your ability to scale out less expensively.","pos":[3575,3684]},{"content":"You pay for those blocked threads.","pos":[3685,3719]},{"content":"Successful modern applications require asynchronous code.","pos":[3721,3778]},{"content":"Without language support, writing asynchronous code required callbacks, completion events, or other means that obscured the original intent of the code.","pos":[3779,3931]},{"content":"The advantage of the synchronous code is that it's easy to understand.","pos":[3932,4002]},{"content":"The step-by-step actions make it easy to scan and understand.","pos":[4003,4064]},{"content":"Traditional asynchronous models forced you to focus on the asynchronous nature of the code, not on the fundamental actions of the code.","pos":[4065,4200]},{"pos":[4205,4231],"content":"Don't block, await instead","linkify":"Don't block, await instead","nodes":[{"content":"Don't block, await instead","pos":[0,26]}]},{"content":"The preceding code demonstrates a bad practice: constructing synchronous code to perform asynchronous operations.","pos":[4233,4346]},{"content":"As written, this code blocks the thread executing it from doing any other work.","pos":[4347,4426]},{"content":"It won't be interrupted while any of the tasks are in progress.","pos":[4427,4490]},{"content":"It would be as though you stared at the toaster after putting the bread in.","pos":[4491,4566]},{"content":"You'd ignore anyone talking to you until the toast popped.","pos":[4567,4625]},{"content":"Let's start by updating this code so that the thread doesn't block while tasks are running.","pos":[4628,4719]},{"content":"The <ph id=\"ph1\">`await`</ph> keyword provides a non-blocking way to start a task, then continue execution when that task completes.","pos":[4720,4834],"source":" The `await` keyword provides a non-blocking way to start a task, then continue execution when that task completes."},{"content":"A simple asynchronous version of the make a breakfast code would look like the following snippet:","pos":[4835,4932]},{"content":"This code doesn't block while the eggs or the bacon are cooking.","pos":[5047,5111]},{"content":"This code won't start any other tasks though.","pos":[5112,5157]},{"content":"You'd still put the toast in the toaster and stare at it until it pops.","pos":[5158,5229]},{"content":"But at least, you'd respond to anyone that wanted your attention.","pos":[5230,5295]},{"content":"In a restaurant where multiple orders are placed, the cook could start another breakfast while the first is cooking.","pos":[5296,5412]},{"content":"Now, the thread working on the breakfast isn't blocked while awaiting any started task that hasn't yet finished.","pos":[5414,5526]},{"content":"For some applications, this change is all that's needed.","pos":[5527,5583]},{"content":"A GUI application still responds to the user with just this change.","pos":[5584,5651]},{"content":"However, for this scenario, you want more.","pos":[5652,5694]},{"content":"You don't want each of the component tasks to be executed sequentially.","pos":[5695,5766]},{"content":"It's better to start each of the component tasks before awaiting the previous task's completion.","pos":[5767,5863]},{"pos":[5868,5892],"content":"Start tasks concurrently","linkify":"Start tasks concurrently","nodes":[{"content":"Start tasks concurrently","pos":[0,24]}]},{"content":"In many scenarios, you want to start several independent tasks immediately.","pos":[5894,5969]},{"content":"Then, as each task finishes, you can continue other work that's ready.","pos":[5970,6040]},{"content":"In the breakfast analogy, that's how you get breakfast done more quickly.","pos":[6041,6114]},{"content":"You also get everything done close to the same time.","pos":[6115,6167]},{"content":"You'll get a hot breakfast.","pos":[6168,6195]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task?displayProperty=nameWithType&gt;</ph> and related types are classes you can use to reason about tasks that are in progress.","pos":[6197,6350],"source":"The <xref:System.Threading.Tasks.Task?displayProperty=nameWithType> and related types are classes you can use to reason about tasks that are in progress."},{"content":"That enables you to write code that more closely resembles the way you'd actually create breakfast.","pos":[6351,6450]},{"content":"You'd start cooking the eggs, bacon, and toast at the same time.","pos":[6451,6515]},{"content":"As each requires action, you'd turn your attention to that task, take care of the next action, then await for something else that requires your attention.","pos":[6516,6670]},{"content":"You start a task and hold on to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object that represents the work.","pos":[6672,6775],"source":"You start a task and hold on to the <xref:System.Threading.Tasks.Task> object that represents the work."},{"content":"You'll <ph id=\"ph1\">`await`</ph> each task before working with its result.","pos":[6776,6832],"source":" You'll `await` each task before working with its result."},{"content":"Let's make these changes to the breakfast code.","pos":[6834,6881]},{"content":"The first step is to store the tasks for operations when they start, rather than awaiting them:","pos":[6882,6977]},{"pos":[7501,7617],"content":"Next, you can move the <ph id=\"ph1\">`await`</ph> statements for the bacon and eggs to the end of the method, before serving breakfast:","source":"Next, you can move the `await` statements for the bacon and eggs to the end of the method, before serving breakfast:"},{"content":"The preceding code works better.","pos":[8142,8174]},{"content":"You start all the asynchronous tasks at once.","pos":[8175,8220]},{"content":"You await each task only when you need the results.","pos":[8221,8272]},{"content":"The preceding code may be similar to code in a web application that makes requests of different microservices, then combines the results into a single page.","pos":[8273,8429]},{"content":"You'll make all the requests immediately, then <ph id=\"ph1\">`await`</ph> all those tasks and compose the web page.","pos":[8430,8526],"source":" You'll make all the requests immediately, then `await` all those tasks and compose the web page."},{"pos":[8531,8553],"content":"Composition with tasks","linkify":"Composition with tasks","nodes":[{"content":"Composition with tasks","pos":[0,22]}]},{"content":"You have everything ready for breakfast at the same time except the toast.","pos":[8556,8630]},{"content":"Making the toast is the composition of an asynchronous operation (toasting the bread), and synchronous operations (adding the butter and the jam).","pos":[8631,8777]},{"content":"Updating this code illustrates an important concept:","pos":[8778,8830]},{"pos":[8834,9058],"content":"[!IMPORTANT]\nThe composition of an asynchronous operation followed by synchronous work is an asynchronous operation. Stated another way, if any portion of an operation is asynchronous, the entire operation is asynchronous.","leadings":["","> "],"nodes":[{"content":"The composition of an asynchronous operation followed by synchronous work is an asynchronous operation. Stated another way, if any portion of an operation is asynchronous, the entire operation is asynchronous.","pos":[13,222],"nodes":[{"content":"The composition of an asynchronous operation followed by synchronous work is an asynchronous operation.","pos":[0,103]},{"content":"Stated another way, if any portion of an operation is asynchronous, the entire operation is asynchronous.","pos":[104,209]}]}]},{"content":"The preceding code showed you that you can use <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects to hold running tasks.","pos":[9060,9214],"source":"The preceding code showed you that you can use <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> objects to hold running tasks."},{"content":"You <ph id=\"ph1\">`await`</ph> each task before using its result.","pos":[9215,9261],"source":" You `await` each task before using its result."},{"content":"The next step is to create methods that represent the combination of other work.","pos":[9262,9342]},{"content":"Before serving breakfast, you want to await the task that represents toasting the bread before adding butter and jam.","pos":[9343,9460]},{"content":"You can represent that work with the following code:","pos":[9461,9513]},{"content":"The preceding method has the <ph id=\"ph1\">`async`</ph> modifier in its signature.","pos":[9636,9699],"source":"The preceding method has the `async` modifier in its signature."},{"content":"That signals to the compiler that this method contains an <ph id=\"ph1\">`await`</ph> statement; it contains asynchronous operations.","pos":[9700,9813],"source":" That signals to the compiler that this method contains an `await` statement; it contains asynchronous operations."},{"content":"This method represents the task that toasts the bread, then adds butter and jam.","pos":[9814,9894]},{"content":"This method returns a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> that represents the composition of those three operations.","pos":[9895,10014],"source":" This method returns a <xref:System.Threading.Tasks.Task%601> that represents the composition of those three operations."},{"content":"The main block of code now becomes:","pos":[10015,10050]},{"content":"The previous change illustrated an important technique for working with asynchronous code.","pos":[10165,10255]},{"content":"You compose tasks by separating the operations into a new method that returns a task.","pos":[10256,10341]},{"content":"You can choose when to await that task.","pos":[10342,10381]},{"content":"You can start other tasks concurrently.","pos":[10382,10421]},{"pos":[10426,10449],"content":"Await tasks efficiently","linkify":"Await tasks efficiently","nodes":[{"content":"Await tasks efficiently","pos":[0,23]}]},{"content":"The series of <ph id=\"ph1\">`await`</ph> statements at the end of the preceding code can be improved by using methods of the <ph id=\"ph2\">`Task`</ph> class.","pos":[10451,10570],"source":"The series of `await` statements at the end of the preceding code can be improved by using methods of the `Task` class."},{"content":"One of those APIs is <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph>, which returns a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> that completes when all the tasks in its argument list have completed, as shown in the following code:","pos":[10571,10792],"source":" One of those APIs is <xref:System.Threading.Tasks.Task.WhenAll%2A>, which returns a <xref:System.Threading.Tasks.Task> that completes when all the tasks in its argument list have completed, as shown in the following code:"},{"content":"Another option is to use <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph>, which returns a <ph id=\"ph2\">`Task&lt;Task&gt;`</ph> that completes when any of its arguments completes.","pos":[11013,11165],"source":"Another option is to use <xref:System.Threading.Tasks.Task.WhenAny%2A>, which returns a `Task<Task>` that completes when any of its arguments completes."},{"content":"You can await the returned task, knowing that it has already finished.","pos":[11166,11236]},{"content":"The following code shows how you could use <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph> to await the first task to finish and then process its result.","pos":[11237,11388],"source":" The following code shows how you could use <xref:System.Threading.Tasks.Task.WhenAny%2A> to await the first task to finish and then process its result."},{"content":"After processing the result from the completed task, you remove that completed task from the list of tasks passed to <ph id=\"ph1\">`WhenAny`</ph>.","pos":[11389,11516],"source":" After processing the result from the completed task, you remove that completed task from the list of tasks passed to `WhenAny`."},{"pos":[11634,11717],"content":"After all those changes, the final version of <ph id=\"ph1\">`Main`</ph> looks like the following code:","source":"After all those changes, the final version of `Main` looks like the following code:"},{"content":"This final code is asynchronous.","pos":[11820,11852]},{"content":"It more accurately reflects how a person would cook a breakfast.","pos":[11853,11917]},{"content":"Compare the preceding code with the first code sample in this article.","pos":[11918,11988]},{"content":"The core actions are still clear from reading the code.","pos":[11989,12044]},{"content":"You can read this code the same way you'd read those instructions for making a breakfast at the beginning of this article.","pos":[12045,12167]},{"content":"The language features for <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> provide the translation every person makes to follow those written instructions: start tasks as you can and don't block waiting for tasks to complete.","pos":[12168,12364],"source":" The language features for `async` and `await` provide the translation every person makes to follow those written instructions: start tasks as you can and don't block waiting for tasks to complete."}]}