<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="database-access-activities.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c6c36ea19f8c5ef8490811b6cd9e3426d020aea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\database-access-activities.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7da350f844d02c092ae7633e4fb4c62e6c09a3e6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa4cc4468b339442b587e3b1b3952e86bd8a24b6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Database Access Activities | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Database Access Activities</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Database access activities allow you to access a database within a workflow.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These activities allow accessing databases to retrieve or modify information and use <bpt id="p1">[</bpt>ADO.NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=166081)</ept> to access the database.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to (download page) to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Database Activities</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following sections detail the list of activities included in this sample.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>DbUpdate</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Executes a SQL query that produces a modification in the database (insert, update, delete, and other modifications).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This class performs its work asynchronously (it derives from <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> and uses its asynchronous capabilities).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The connection information can be configured by setting a provider invariant name (<ph id="ph1">`ProviderName`</ph>) and the connection string (<ph id="ph2">`ConnectionString`</ph>) or just using a connection string configuration name (<ph id="ph3">`ConfigFileSectionName`</ph>) from the application configuration file.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The query to be executed is configured in its <ph id="ph1">`Sql`</ph> property and the parameters are passed through the <ph id="ph2">`Parameters`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`DbUpdate`</ph> is executed, the number of affected records is returned in the <ph id="ph2">`AffectedRecords`</ph> property.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>ProviderName</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>ADO.NET provider invariant name.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If this argument is set, then the <ph id="ph1">`ConnectionString`</ph> must also be set.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>ConnectionString</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Connection string to connect to the database.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If this argument is set, then <ph id="ph1">`ProviderName`</ph> must also be set.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>ConfigName</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Name of the configuration file section where the connection information is stored.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When this argument is set <ph id="ph1">`ProviderName`</ph> and <ph id="ph2">`ConnectionString`</ph> are not required.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CommandType</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Type of the <ph id="ph1">&lt;xref:System.Data.Common.DbCommand&gt;</ph> to be executed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Sql</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The SQL command to be executed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Collection of the parameters of the SQL query.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>AffectedRecords</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Number of records affected by the last operation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>DbQueryScalar</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Executes a query that retrieves a single value from the database.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This class performs its work asynchronously (it derives from <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity%601&gt;</ph> and uses its asynchronous capabilities).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The connection information can be configured by setting a provider invariant name (<ph id="ph1">`ProviderName`</ph>) and the connection string (<ph id="ph2">`ConnectionString`</ph>) or just using a connection string configuration name (<ph id="ph3">`ConfigFileSectionName`</ph>) from the application configuration file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The query to be executed is configured in its <ph id="ph1">`Sql`</ph> property and the parameters are passed through the <ph id="ph2">`Parameters`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`DbQueryScalar`</ph> is executed, the scalar is returned in the <ph id="ph2">`Result``out`</ph> argument (of type <ph id="ph3">`TResult`</ph>, that is defined in the base class <ph id="ph4">&lt;xref:System.Activities.AsyncCodeActivity%601&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ProviderName</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ADO.NET provider invariant name.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If this argument is set, then the <ph id="ph1">`ConnectionString`</ph> must also be set.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>ConnectionString</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Connection string to connect to the database.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If this argument is set, then <ph id="ph1">`ProviderName`</ph> must also be set.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>ConfigName</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Name of the configuration file section where the connection information is stored.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When this argument is set <ph id="ph1">`ProviderName`</ph> and <ph id="ph2">`ConnectionString`</ph> are not required.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CommandType</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Type of the <ph id="ph1">&lt;xref:System.Data.Common.DbCommand&gt;</ph> to be executed.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Sql</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The SQL command to be executed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Collection of the parameters of the SQL query.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Result</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Scalar that is obtained after the query is executed.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This argument is of type <ph id="ph1">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>DbQuery</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Executes a query that retrieves a list of objects.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>After the query is executed, a mapping function is executed (it can be <ph id="ph1">&lt;xref:System.Func%601&gt;</ph><ph id="ph2">&lt;</ph><ph id="ph3">`DbDataReader`</ph>, <ph id="ph4">`TResult`</ph>&gt; or an <ph id="ph5">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph><ph id="ph6">&lt;</ph><ph id="ph7">`DbDataReader`</ph>, <ph id="ph8">`TResult`</ph>&gt;).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This mapping function gets a record in a <ph id="ph1">`DbDataReader`</ph> and maps it to the object to be returned.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The connection information can be configured by setting a provider invariant name (<ph id="ph1">`ProviderName`</ph>) and the connection string (<ph id="ph2">`ConnectionString`</ph>) or just using a connection string configuration name (<ph id="ph3">`ConfigFileSectionName`</ph>) from the application configuration file.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The query to be executed is configured in its <ph id="ph1">`Sql`</ph> property and the parameters are passed through the <ph id="ph2">`Parameters`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The results of the SQL query are retrieved using a <ph id="ph1">`DbDataReader`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The activity iterates through the <ph id="ph1">`DbDataReader`</ph> and maps the rows in the <ph id="ph2">`DbDataReader`</ph> to an instance of <ph id="ph3">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The user of <ph id="ph1">`DbQuery`</ph> has to provide the mapping code and this can be done in two ways: using a <ph id="ph2">&lt;xref:System.Func%601&gt;</ph><ph id="ph3">&lt;</ph><ph id="ph4">`DbDataReader`</ph>, <ph id="ph5">`TResult`</ph>&gt; or an <ph id="ph6">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph><ph id="ph7">&lt;</ph><ph id="ph8">`DbDataReader`</ph>, <ph id="ph9">`TResult`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the first case, the map is done in a single pulse of execution.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Therefore, it is faster, but this cannot be serialized to XAML.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the last case, the map is performed in multiple pulses.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Therefore, it might be slower but can be serialized to XAML and authored declaratively (any existing activity can participate in the mapping).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>ProviderName</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ADO.NET provider invariant name.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If this argument is set, then the <ph id="ph1">`ConnectionString`</ph> must also be set.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ConnectionString</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Connection string to connect to the database.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If this argument is set, then <ph id="ph1">`ProviderName`</ph> must also be set.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>ConfigName</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Name of the configuration file section where the connection information is stored.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>When this argument is set <ph id="ph1">`ProviderName`</ph> and <ph id="ph2">`ConnectionString`</ph> are not required.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CommandType</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Type of the <ph id="ph1">&lt;xref:System.Data.Common.DbCommand&gt;</ph> to be executed.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Sql</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The SQL command to be executed.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Collection of the parameters of the SQL query.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Mapper</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Mapping function (<ph id="ph1">&lt;xref:System.Func%601&gt;</ph><ph id="ph2">&lt;</ph><ph id="ph3">`DbDataReader`</ph>, <ph id="ph4">`TResult`</ph>&gt;) that takes a record in the <ph id="ph5">`DataReader`</ph> obtained as result of executing the query and returns an instance of an object of type <ph id="ph6">`TResult`</ph> to be added to the <ph id="ph7">`Result`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In this case, mapping is done in a single pulse of execution, but it cannot be authored declaratively using the designer.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>MapperFunc</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Mapping function (<ph id="ph1">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph><ph id="ph2">&lt;</ph><ph id="ph3">`DbDataReader`</ph>, <ph id="ph4">`TResult`</ph>&gt;) that takes a record in the <ph id="ph5">`DataReader`</ph> obtained as result of executing the query and returns an instance of an object of type <ph id="ph6">`TResult`</ph> to be added to the <ph id="ph7">`Result`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In this case, the mapping is done in multiple pulses of execution.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This function can be serialized to XAML and authored declaratively (any existing activity can participate in the mapping).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Result</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>List of objects obtained as result of executing the query and executing the mapping function for each record in the <ph id="ph1">`DataReader`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>DbQueryDataSet</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Executes a query that returns a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This class performs its work asynchronously.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It derives from <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph><ph id="ph2">&lt;</ph><ph id="ph3">`TResult`</ph>&gt; and uses its asynchronous capabilities.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The connection information can be configured by setting a provider invariant name (<ph id="ph1">`ProviderName`</ph>) and the connection string (<ph id="ph2">`ConnectionString`</ph>) or just using a connection string configuration name (<ph id="ph3">`ConfigFileSectionName`</ph>) from the application configuration file.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The query to be executed is configured in its <ph id="ph1">`Sql`</ph> property and the parameters are passed through the <ph id="ph2">`Parameters`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`DbQueryDataSet`</ph> is executed the <ph id="ph2">`DataSet`</ph> is returned in the <ph id="ph3">`Result``out`</ph> argument (of type <ph id="ph4">`TResult`</ph>, that is defined in the base class <ph id="ph5">&lt;xref:System.Activities.AsyncCodeActivity%601&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>ProviderName</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>ADO.NET provider invariant name.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If this argument is set, then the <ph id="ph1">`ConnectionString`</ph> must also be set.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>ConnectionString</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Connection string to connect to the database.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If this argument is set, then <ph id="ph1">`ProviderName`</ph> must also be set.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>ConfigName</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Name of the configuration file section where the connection information is stored.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>When this argument is set <ph id="ph1">`ProviderName`</ph> and <ph id="ph2">`ConnectionString`</ph> are not required.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CommandType</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Type of the <ph id="ph1">&lt;xref:System.Data.Common.DbCommand&gt;</ph> to be executed.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Sql</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The SQL command to be executed.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Collection of the parameters of the SQL query.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Result</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> that is obtained after the query is executed.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Configuring Connection Information</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>All DbActivities share the same configuration parameters.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>They can be configured in two ways:</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ConnectionString + InvariantName`</ph>: Set the ADO.NET provider invariant name and connection string.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ConfigName`</ph>: Set the name of the configuration section that contains the connection information.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In the activity:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Running this sample</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Setup instructions</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This sample uses a database.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A set-up and load script (Setup.cmd) is provided with the sample.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>You must execute that file using the command prompt.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The Setup.cmd script invokes the CreateDb.sql script file, which contains SQL commands that do the following:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Creates a database called DbActivitiesSample.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Creates the Roles table.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Creates Employees table.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Inserts three records into the Roles table.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Inserts twelve records into the Employees table.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To run Setup.cmd</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Open a command prompt.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Go to the DbActivities sample folder.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Type "setup.cmd" and press ENTER.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Setup.cmd attempts to install the sample in your local machine SqlExpress instance.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If you want to install it in other SQL server instance, edit Setup.cmd with the new instance name.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To uninstall the sample database</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Run Cleanup.cmd from the sample folder in a command prompt.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To run the sample</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Open the solution in <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To compile the solution, press CTRL+SHIFT+B.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>To run the sample without debugging, press CTRL+F5.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>