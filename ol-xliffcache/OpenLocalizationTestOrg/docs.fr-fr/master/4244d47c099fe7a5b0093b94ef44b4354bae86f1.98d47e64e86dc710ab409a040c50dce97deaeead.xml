{"content":"---\ntitle: \"<TypeInstantiation> Element (.NET Native)\"\nms.date: \"03/30/2017\"\nms.assetid: a5eada64-075b-4162-9655-ded84e4681f2\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# \\<TypeInstantiation> Element (.NET Native)\nApplies runtime reflection policy to a constructed generic type.  \n  \n## Syntax  \n  \n```xml  \n<TypeInstantiation Name=\"type_name\"  \n                   Arguments=\"type_arguments\"  \n                   Activate=\"policy_type\"  \n                   Browse=\"policy_type\"  \n                   Dynamic=\"policy_type\"  \n                   Serialize=\"policy_type\"  \n                   DataContractSerializer=\"policy_setting\"  \n                   DataContractJsonSerializer=\"policy_setting\"  \n                   XmlSerializer=\"policy_setting\"  \n                   MarshalObject=\"policy_setting\"  \n                   MarshalDelegate=\"policy_setting\"  \n                   MarshalStructure=\"policy_setting\" />  \n```  \n  \n## Attributes and Elements  \n The following sections describe attributes, child elements, and parent elements.  \n  \n### Attributes  \n  \n|Attribute|Attribute type|Description|  \n|---------------|--------------------|-----------------|  \n|`Name`|General|Required attribute. Specifies the type name.|  \n|`Arguments`|General|Required attribute. Specifies the generic type arguments. If multiple arguments are present, they are separated by commas.|  \n|`Activate`|Reflection|Optional attribute. Controls runtime access to constructors to enable activation of instances.|  \n|`Browse`|Reflection|Optional attribute. Controls querying for information about program elements, but does not enable any runtime access.|  \n|`Dynamic`|Reflection|Optional attribute. Controls runtime access to all type members, including constructors, methods, fields, properties, and events, to enable dynamic programming.|  \n|`Serialize`|Serialization|Optional attribute. Controls runtime access to constructors, fields, and properties, to enable type instances to be serialized and deserialized by libraries such as the Newtonsoft JSON serializer.|  \n|`DataContractSerializer`|Serialization|Optional attribute. Controls policy for serialization that uses the <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType> class.|  \n|`DataContractJsonSerializer`|Serialization|Optional attribute. Controls policy for JSON serialization that uses the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer?displayProperty=nameWithType> class.|  \n|`XmlSerializer`|Serialization|Optional attribute. Controls policy for XML serialization that uses the <xref:System.Xml.Serialization.XmlSerializer?displayProperty=nameWithType> class.|  \n|`MarshalObject`|Interop|Optional attribute. Controls policy for marshaling reference types to Windows Runtime and COM.|  \n|`MarshalDelegate`|Interop|Optional attribute. Controls policy for marshaling delegate types as function pointers to native code.|  \n|`MarshalStructure`|Interop|Optional attribute. Controls policy for marshaling structures to native code.|  \n  \n## Name attribute  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|*type_name*|The type name. If this `<TypeInstantiation>` element is the child of a [\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md) element, a [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md) element, or another `<TypeInstantiation>` element, *type_name* can specify the name of the type without its namespace. Otherwise, *type_name* must include the fully qualified type name. The type name isn't decorated. For example, for a <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> object, the `<TypeInstantiation>` element might appear as follows:<br /><br /> `\\<TypeInstantiation Name=System.Collections.Generic.List Dynamic=\"Required Public\" />`|  \n  \n## Arguments attribute  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|*type_argument*|Specifies the generic type arguments. If multiple arguments are present, they are separated by commas. Each argument must consist of the fully qualified type name.|  \n  \n## All other attributes  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|*policy_setting*|The setting to apply to this policy type for the constructed generic type. Possible values are `All`, `Auto`, `Excluded`, `Public`, `PublicAndInternal`, `Required Public`, `Required PublicAndInternal`, and `Required All`. For more information, see [Runtime Directive Policy Settings](../../../docs/framework/net-native/runtime-directive-policy-settings.md).|  \n  \n### Child Elements  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|[\\<Event>](../../../docs/framework/net-native/event-element-net-native.md)|Applies reflection policy to an event belonging to this type.|  \n|[\\<Field>](../../../docs/framework/net-native/field-element-net-native.md)|Applies reflection policy to a field belonging to this type.|  \n|[\\<ImpliesType>](../../../docs/framework/net-native/impliestype-element-net-native.md)|Applies policy to a type, if that policy has been applied to the type represented by the containing `<TypeInstantiation>` element.|  \n|[\\<Method>](../../../docs/framework/net-native/method-element-net-native.md)|Applies reflection policy to a method belonging to this type.|  \n|[\\<MethodInstantiation>](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)|Applies reflection policy to a constructed generic method belonging to this type.|  \n|[\\<Property>](../../../docs/framework/net-native/property-element-net-native.md)|Applies reflection policy to a property belonging to this type.|  \n|[\\<Type>](../../../docs/framework/net-native/type-element-net-native.md)|Applies reflection policy to a nested type.|  \n|`<TypeInstantiation>`|Applies reflection policy to a nested constructed generic type.|  \n  \n### Parent Elements  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|[\\<Application>](../../../docs/framework/net-native/application-element-net-native.md)|Serves as a container for application-wide types and type members whose metadata is available for reflection at run time.|  \n|[\\<Assembly>](../../../docs/framework/net-native/assembly-element-net-native.md)|Applies reflection policy to all the types in a specified assembly.|  \n|[\\<Library>](../../../docs/framework/net-native/library-element-net-native.md)|Defines the assembly that contains types and type members whose metadata is available for reflection at run time.|  \n|[\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md)|Applies reflection policy to all the types in a namespace.|  \n|[\\<Type>](../../../docs/framework/net-native/type-element-net-native.md)|Applies reflection policy to a type and all its members.|  \n|`<TypeInstantiation>`|Applies reflection policy to a constructed generic type and all its members.|  \n  \n## Remarks  \n The reflection, serialization, and interop attributes are all optional. However, at least one must be present.  \n  \n If a `<TypeInstantiation>` element is the child of an [\\<Assembly>](../../../docs/framework/net-native/assembly-element-net-native.md), [\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md), or [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md), element, it overrides the policy settings defined by the parent element. If a [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md) element defines a corresponding generic type definition, the `<TypeInstantiation>` element overrides runtime reflection policy only for instantiations of the specified constructed generic type.  \n  \n## Example  \n The following example uses reflection to retrieve the generic type definition from a constructed <xref:System.Collections.Generic.Dictionary%602> object. It also uses reflection to display information about <xref:System.Type> objects that represent constructed generic types and generic type definitions. The variable `b` in the example is a <xref:Windows.UI.Xaml.Controls.TextBlock> control.  \n  \n [!code-csharp[ProjectN_Reflection#2](../../../samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/cs/makegenerictype1.cs#2)]  \n  \n After compilation with the [!INCLUDE[net_native](../../../includes/net-native-md.md)] tool chain, the example throws a [MissingMetadataException](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md) exception on the line that calls the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType> method. You can eliminate the exception and provide the necessary metadata by adding the following `<TypeInstantiation>` element to the runtime directives file:  \n  \n```xml  \n<Directives xmlns=\"http://schemas.microsoft.com/netfx/2013/01/metadata\">  \n  <Application>  \n    <Assembly Name=\"*Application*\" Dynamic=\"Required All\" />  \n     <TypeInstantiation Name=\"System.Collections.Generic.Dictionary\"  \n                        Arguments=\"System.String,GenericType.Example\"  \n                        Dynamic=\"Required Public\" />  \n  </Application>  \n</Directives>  \n```  \n  \n## See also\n\n- [Runtime Directives (rd.xml) Configuration File Reference](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)\n- [Runtime Directive Elements](../../../docs/framework/net-native/runtime-directive-elements.md)\n- [Runtime Directive Policy Settings](../../../docs/framework/net-native/runtime-directive-policy-settings.md)\n","nodes":[{"pos":[4,165],"embed":true,"restype":"x-metadata","content":"title: \"<TypeInstantiation> Element (.NET Native)\"\nms.date: \"03/30/2017\"\nms.assetid: a5eada64-075b-4162-9655-ded84e4681f2\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"<TypeInstantiation> Element (.NET Native)","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;TypeInstantiation&gt;</ph> Element (.NET Native)","source":"<TypeInstantiation> Element (.NET Native)"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[172,214],"content":"\\<TypeInstantiation> Element (.NET Native)","linkify":"\\<TypeInstantiation> Element (.NET Native)","nodes":[{"content":"<ph id=\"ph1\">\\&lt;</ph>TypeInstantiation&gt; Element (.NET Native)","pos":[0,42],"source":"\\<TypeInstantiation> Element (.NET Native)"}]},{"content":"Applies runtime reflection policy to a constructed generic type.","pos":[215,279]},{"pos":[288,294],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[923,946],"content":"Attributes and Elements","linkify":"Attributes and Elements","nodes":[{"content":"Attributes and Elements","pos":[0,23]}]},{"content":"The following sections describe attributes, child elements, and parent elements.","pos":[950,1030]},{"pos":[1040,1050],"content":"Attributes","linkify":"Attributes","nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"Attribute","pos":[1057,1066]},{"content":"Attribute type","pos":[1067,1081]},{"content":"Description","pos":[1082,1093]},{"content":"General","pos":[1164,1171]},{"content":"Required attribute.","pos":[1172,1191]},{"content":"Specifies the type name.","pos":[1192,1216]},{"content":"General","pos":[1233,1240]},{"content":"Required attribute.","pos":[1241,1260]},{"content":"Specifies the generic type arguments.","pos":[1261,1298]},{"content":"If multiple arguments are present, they are separated by commas.","pos":[1299,1363]},{"content":"Reflection","pos":[1379,1389]},{"content":"Optional attribute.","pos":[1390,1409]},{"content":"Controls runtime access to constructors to enable activation of instances.","pos":[1410,1484]},{"content":"Reflection","pos":[1498,1508]},{"content":"Optional attribute.","pos":[1509,1528]},{"content":"Controls querying for information about program elements, but does not enable any runtime access.","pos":[1529,1626]},{"content":"Reflection","pos":[1641,1651]},{"content":"Optional attribute.","pos":[1652,1671]},{"content":"Controls runtime access to all type members, including constructors, methods, fields, properties, and events, to enable dynamic programming.","pos":[1672,1812]},{"content":"Serialization","pos":[1829,1842]},{"content":"Optional attribute.","pos":[1843,1862]},{"content":"Controls runtime access to constructors, fields, and properties, to enable type instances to be serialized and deserialized by libraries such as the Newtonsoft JSON serializer.","pos":[1863,2039]},{"content":"Serialization","pos":[2069,2082]},{"content":"Optional attribute.","pos":[2083,2102]},{"content":"Controls policy for serialization that uses the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType&gt;</ph> class.","pos":[2103,2245],"source":" Controls policy for serialization that uses the <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType> class."},{"content":"Serialization","pos":[2279,2292]},{"content":"Optional attribute.","pos":[2293,2312]},{"content":"Controls policy for JSON serialization that uses the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer?displayProperty=nameWithType&gt;</ph> class.","pos":[2313,2469],"source":" Controls policy for JSON serialization that uses the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer?displayProperty=nameWithType> class."},{"content":"Serialization","pos":[2490,2503]},{"content":"Optional attribute.","pos":[2504,2523]},{"content":"Controls policy for XML serialization that uses the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer?displayProperty=nameWithType&gt;</ph> class.","pos":[2524,2657],"source":" Controls policy for XML serialization that uses the <xref:System.Xml.Serialization.XmlSerializer?displayProperty=nameWithType> class."},{"content":"Interop","pos":[2678,2685]},{"content":"Optional attribute.","pos":[2686,2705]},{"content":"Controls policy for marshaling reference types to Windows Runtime and COM.","pos":[2706,2780]},{"content":"Interop","pos":[2803,2810]},{"content":"Optional attribute.","pos":[2811,2830]},{"content":"Controls policy for marshaling delegate types as function pointers to native code.","pos":[2831,2913]},{"content":"Interop","pos":[2937,2944]},{"content":"Optional attribute.","pos":[2945,2964]},{"content":"Controls policy for marshaling structures to native code.","pos":[2965,3022]},{"pos":[3032,3046],"content":"Name attribute","linkify":"Name attribute","nodes":[{"content":"Name attribute","pos":[0,14]}]},{"content":"Value","pos":[3053,3058]},{"content":"Description","pos":[3059,3070]},{"pos":[3109,3120],"content":"<bpt id=\"p1\">*</bpt>type_name<ept id=\"p1\">*</ept>","source":"*type_name*"},{"content":"The type name.","pos":[3121,3135]},{"content":"If this <ph id=\"ph1\">`&lt;TypeInstantiation&gt;`</ph> element is the child of a <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>Namespace&gt;<ept id=\"p1\">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> element, a <bpt id=\"p2\">[</bpt><ph id=\"ph3\">\\&lt;</ph>Type&gt;<ept id=\"p2\">](../../../docs/framework/net-native/type-element-net-native.md)</ept> element, or another <ph id=\"ph4\">`&lt;TypeInstantiation&gt;`</ph> element, <bpt id=\"p3\">*</bpt>type_name<ept id=\"p3\">*</ept> can specify the name of the type without its namespace.","pos":[3136,3477],"source":" If this `<TypeInstantiation>` element is the child of a [\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md) element, a [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md) element, or another `<TypeInstantiation>` element, *type_name* can specify the name of the type without its namespace."},{"content":"Otherwise, <bpt id=\"p1\">*</bpt>type_name<ept id=\"p1\">*</ept> must include the fully qualified type name.","pos":[3478,3544],"source":" Otherwise, *type_name* must include the fully qualified type name."},{"content":"The type name isn't decorated.","pos":[3545,3575]},{"content":"For example, for a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601?displayProperty=nameWithType&gt;</ph> object, the <ph id=\"ph2\">`&lt;TypeInstantiation&gt;`</ph> element might appear as follows:","pos":[3576,3733],"source":" For example, for a <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> object, the `<TypeInstantiation>` element might appear as follows:"},{"pos":[3843,3862],"content":"Arguments attribute","linkify":"Arguments attribute","nodes":[{"content":"Arguments attribute","pos":[0,19]}]},{"content":"Value","pos":[3869,3874]},{"content":"Description","pos":[3875,3886]},{"pos":[3925,3940],"content":"<bpt id=\"p1\">*</bpt>type_argument<ept id=\"p1\">*</ept>","source":"*type_argument*"},{"content":"Specifies the generic type arguments.","pos":[3941,3978]},{"content":"If multiple arguments are present, they are separated by commas.","pos":[3979,4043]},{"content":"Each argument must consist of the fully qualified type name.","pos":[4044,4104]},{"pos":[4114,4134],"content":"All other attributes","linkify":"All other attributes","nodes":[{"content":"All other attributes","pos":[0,20]}]},{"content":"Value","pos":[4141,4146]},{"content":"Description","pos":[4147,4158]},{"pos":[4197,4213],"content":"<bpt id=\"p1\">*</bpt>policy_setting<ept id=\"p1\">*</ept>","source":"*policy_setting*"},{"content":"The setting to apply to this policy type for the constructed generic type.","pos":[4214,4288]},{"content":"Possible values are <ph id=\"ph1\">`All`</ph>, <ph id=\"ph2\">`Auto`</ph>, <ph id=\"ph3\">`Excluded`</ph>, <ph id=\"ph4\">`Public`</ph>, <ph id=\"ph5\">`PublicAndInternal`</ph>, <ph id=\"ph6\">`Required Public`</ph>, <ph id=\"ph7\">`Required PublicAndInternal`</ph>, and <ph id=\"ph8\">`Required All`</ph>.","pos":[4289,4435],"source":" Possible values are `All`, `Auto`, `Excluded`, `Public`, `PublicAndInternal`, `Required Public`, `Required PublicAndInternal`, and `Required All`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Runtime Directive Policy Settings<ept id=\"p1\">](../../../docs/framework/net-native/runtime-directive-policy-settings.md)</ept>.","pos":[4436,4571],"source":" For more information, see [Runtime Directive Policy Settings](../../../docs/framework/net-native/runtime-directive-policy-settings.md)."},{"pos":[4582,4596],"content":"Child Elements","linkify":"Child Elements","nodes":[{"content":"Child Elements","pos":[0,14]}]},{"content":"Element","pos":[4603,4610]},{"content":"Description","pos":[4611,4622]},{"pos":[4663,4737],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Event&gt;<ept id=\"p1\">](../../../docs/framework/net-native/event-element-net-native.md)</ept>","source":"[\\<Event>](../../../docs/framework/net-native/event-element-net-native.md)"},{"content":"Applies reflection policy to an event belonging to this type.","pos":[4738,4799]},{"pos":[4804,4878],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Field&gt;<ept id=\"p1\">](../../../docs/framework/net-native/field-element-net-native.md)</ept>","source":"[\\<Field>](../../../docs/framework/net-native/field-element-net-native.md)"},{"content":"Applies reflection policy to a field belonging to this type.","pos":[4879,4939]},{"pos":[4944,5030],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>ImpliesType&gt;<ept id=\"p1\">](../../../docs/framework/net-native/impliestype-element-net-native.md)</ept>","source":"[\\<ImpliesType>](../../../docs/framework/net-native/impliestype-element-net-native.md)"},{"pos":[5031,5161],"content":"Applies policy to a type, if that policy has been applied to the type represented by the containing <ph id=\"ph1\">`&lt;TypeInstantiation&gt;`</ph> element.","source":"Applies policy to a type, if that policy has been applied to the type represented by the containing `<TypeInstantiation>` element."},{"pos":[5166,5242],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Method&gt;<ept id=\"p1\">](../../../docs/framework/net-native/method-element-net-native.md)</ept>","source":"[\\<Method>](../../../docs/framework/net-native/method-element-net-native.md)"},{"content":"Applies reflection policy to a method belonging to this type.","pos":[5243,5304]},{"pos":[5309,5411],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>MethodInstantiation&gt;<ept id=\"p1\">](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)</ept>","source":"[\\<MethodInstantiation>](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)"},{"content":"Applies reflection policy to a constructed generic method belonging to this type.","pos":[5412,5493]},{"pos":[5498,5578],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Property&gt;<ept id=\"p1\">](../../../docs/framework/net-native/property-element-net-native.md)</ept>","source":"[\\<Property>](../../../docs/framework/net-native/property-element-net-native.md)"},{"content":"Applies reflection policy to a property belonging to this type.","pos":[5579,5642]},{"pos":[5647,5719],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Type&gt;<ept id=\"p1\">](../../../docs/framework/net-native/type-element-net-native.md)</ept>","source":"[\\<Type>](../../../docs/framework/net-native/type-element-net-native.md)"},{"content":"Applies reflection policy to a nested type.","pos":[5720,5763]},{"content":"Applies reflection policy to a nested constructed generic type.","pos":[5790,5853]},{"pos":[5864,5879],"content":"Parent Elements","linkify":"Parent Elements","nodes":[{"content":"Parent Elements","pos":[0,15]}]},{"content":"Element","pos":[5886,5893]},{"content":"Description","pos":[5894,5905]},{"pos":[5946,6032],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Application&gt;<ept id=\"p1\">](../../../docs/framework/net-native/application-element-net-native.md)</ept>","source":"[\\<Application>](../../../docs/framework/net-native/application-element-net-native.md)"},{"content":"Serves as a container for application-wide types and type members whose metadata is available for reflection at run time.","pos":[6033,6154]},{"pos":[6159,6239],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Assembly&gt;<ept id=\"p1\">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept>","source":"[\\<Assembly>](../../../docs/framework/net-native/assembly-element-net-native.md)"},{"content":"Applies reflection policy to all the types in a specified assembly.","pos":[6240,6307]},{"pos":[6312,6390],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Library&gt;<ept id=\"p1\">](../../../docs/framework/net-native/library-element-net-native.md)</ept>","source":"[\\<Library>](../../../docs/framework/net-native/library-element-net-native.md)"},{"content":"Defines the assembly that contains types and type members whose metadata is available for reflection at run time.","pos":[6391,6504]},{"pos":[6509,6591],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Namespace&gt;<ept id=\"p1\">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept>","source":"[\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md)"},{"content":"Applies reflection policy to all the types in a namespace.","pos":[6592,6650]},{"pos":[6655,6727],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Type&gt;<ept id=\"p1\">](../../../docs/framework/net-native/type-element-net-native.md)</ept>","source":"[\\<Type>](../../../docs/framework/net-native/type-element-net-native.md)"},{"content":"Applies reflection policy to a type and all its members.","pos":[6728,6784]},{"content":"Applies reflection policy to a constructed generic type and all its members.","pos":[6811,6887]},{"pos":[6897,6904],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The reflection, serialization, and interop attributes are all optional.","pos":[6908,6979]},{"content":"However, at least one must be present.","pos":[6980,7018]},{"content":"If a <ph id=\"ph1\">`&lt;TypeInstantiation&gt;`</ph> element is the child of an <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>Assembly&gt;<ept id=\"p1\">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph3\">\\&lt;</ph>Namespace&gt;<ept id=\"p2\">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept>, or <bpt id=\"p3\">[</bpt><ph id=\"ph4\">\\&lt;</ph>Type&gt;<ept id=\"p3\">](../../../docs/framework/net-native/type-element-net-native.md)</ept>, element, it overrides the policy settings defined by the parent element.","pos":[7025,7394],"source":"If a `<TypeInstantiation>` element is the child of an [\\<Assembly>](../../../docs/framework/net-native/assembly-element-net-native.md), [\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md), or [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md), element, it overrides the policy settings defined by the parent element."},{"content":"If a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Type&gt;<ept id=\"p1\">](../../../docs/framework/net-native/type-element-net-native.md)</ept> element defines a corresponding generic type definition, the <ph id=\"ph2\">`&lt;TypeInstantiation&gt;`</ph> element overrides runtime reflection policy only for instantiations of the specified constructed generic type.","pos":[7395,7666],"source":" If a [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md) element defines a corresponding generic type definition, the `<TypeInstantiation>` element overrides runtime reflection policy only for instantiations of the specified constructed generic type."},{"pos":[7675,7682],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses reflection to retrieve the generic type definition from a constructed <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> object.","pos":[7686,7839],"source":"The following example uses reflection to retrieve the generic type definition from a constructed <xref:System.Collections.Generic.Dictionary%602> object."},{"content":"It also uses reflection to display information about <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> objects that represent constructed generic types and generic type definitions.","pos":[7840,7990],"source":" It also uses reflection to display information about <xref:System.Type> objects that represent constructed generic types and generic type definitions."},{"content":"The variable <ph id=\"ph1\">`b`</ph> in the example is a <ph id=\"ph2\">&lt;xref:Windows.UI.Xaml.Controls.TextBlock&gt;</ph> control.","pos":[7991,8078],"source":" The variable `b` in the example is a <xref:Windows.UI.Xaml.Controls.TextBlock> control."},{"content":"After compilation with the <ph id=\"ph1\">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> tool chain, the example throws a <bpt id=\"p1\">[</bpt>MissingMetadataException<ept id=\"p1\">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept> exception on the line that calls the <ph id=\"ph2\">&lt;xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[8224,8571],"source":"After compilation with the [!INCLUDE[net_native](../../../includes/net-native-md.md)] tool chain, the example throws a [MissingMetadataException](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md) exception on the line that calls the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType> method."},{"content":"You can eliminate the exception and provide the necessary metadata by adding the following <ph id=\"ph1\">`&lt;TypeInstantiation&gt;`</ph> element to the runtime directives file:","pos":[8572,8724],"source":" You can eliminate the exception and provide the necessary metadata by adding the following `<TypeInstantiation>` element to the runtime directives file:"},{"pos":[9140,9148],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[9152,9304],"content":"<bpt id=\"p1\">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id=\"p1\">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept>","source":"[Runtime Directives (rd.xml) Configuration File Reference](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)"},{"pos":[9307,9401],"content":"<bpt id=\"p1\">[</bpt>Runtime Directive Elements<ept id=\"p1\">](../../../docs/framework/net-native/runtime-directive-elements.md)</ept>","source":"[Runtime Directive Elements](../../../docs/framework/net-native/runtime-directive-elements.md)"},{"pos":[9404,9512],"content":"<bpt id=\"p1\">[</bpt>Runtime Directive Policy Settings<ept id=\"p1\">](../../../docs/framework/net-native/runtime-directive-policy-settings.md)</ept>","source":"[Runtime Directive Policy Settings](../../../docs/framework/net-native/runtime-directive-policy-settings.md)"}]}