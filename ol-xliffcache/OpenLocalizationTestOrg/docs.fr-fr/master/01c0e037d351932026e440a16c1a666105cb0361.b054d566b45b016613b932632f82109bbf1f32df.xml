{"content":"---\ntitle: \"Performing Culture-Insensitive String Operations in Collections | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"CaseInsensitiveComparer class, using\"\n  - \"CollectionsUtil.CreateCaseInsensitiveHashtable method\"\n  - \"culture-insensitive string operations, collections\"\n  - \"collections [.NET Framework], culture-insensitive string operations\"\n  - \"CaseInsensitiveHashCodeProvider class, using\"\n  - \"ArrayList.Sort method\"\n  - \"SortedList class, culture-insensitive string operations\"\n  - \"culture parameter\"\nms.assetid: 5cdc9396-a64b-4615-a1cd-b605db4c5983\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Performing Culture-Insensitive String Operations in Collections\nThere are classes and members in the <xref:System.Collections> namespace that provide culture-sensitive behavior by default. The default constructors for the <xref:System.Collections.CaseInsensitiveComparer> and <xref:System.Collections.CaseInsensitiveHashCodeProvider> classes initialize a new instance using the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> property. All overloads of the <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A?displayProperty=fullName> method create a new instance of the <xref:System.Collections.Hashtable> class using the `Thread.CurrentCulture` property by default. Overloads of the <xref:System.Collections.ArrayList.Sort%2A?displayProperty=fullName> method perform culture-sensitive sorts by default using `Thread.CurrentCulture`. Sorting and lookup in a <xref:System.Collections.SortedList> can be affected by `Thread.CurrentCulture` when strings are used as the keys. Follow the usage recommendations provided in this section to obtain culture-insensitive results from these classes and methods in the `Collections` namespace.  \n  \n **Note** Passing <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> to a comparison method does perform a culture-insensitive comparison. However, it does not cause a non-linguistic comparison, for example, for file paths, registry keys, and environment variables. Neither does it support security decisions based on the comparison result. For a non-linguistic comparison or support for result-based security decisions, the application should use a comparison method that accepts a <xref:System.StringComparison> value. The application should then pass <xref:System.StringComparison>.  \n  \n## Using the CaseInsensitiveComparer and CaseInsensitiveHashCodeProvider Classes  \n The default constructors for `CaseInsensitiveHashCodeProvider` and `CaseInsensitiveComparer` initialize a new instance of the class using the `Thread.CurrentCulture`, resulting in culture-sensitive behavior. The following code example demonstrates the constructor for a `Hashtable` that is culture-sensitive because it uses the default constructors for `CaseInsensitiveHashCodeProvider` and `CaseInsensitiveComparer`.  \n  \n```vb  \ninternalHashtable = New Hashtable(CaseInsensitiveHashCodeProvider.Default, CaseInsensitiveComparer.Default)  \n  \n```  \n  \n```csharp  \ninternalHashtable = new Hashtable(CaseInsensitiveHashCodeProvider.Default, CaseInsensitiveComparer.Default);  \n```  \n  \n If you want to create a culture-insensitive `Hashtable`using the `CaseInsensitiveComparer` and `CaseInsensitiveHashCodeProvider` classes, initialize new instances of these classes using the constructors that accept a `culture` parameter. For the `culture` parameter, specify <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>. The following code example demonstrates the constructor for a culture-insensitive `Hashtable`.  \n  \n```vb  \ninternalHashtable = New Hashtable(New  \n    CaseInsensitiveHashCodeProvider(CultureInfo.InvariantCulture),  \n    New CaseInsensitiveComparer(CultureInfo.InvariantCulture))  \n  \n```  \n  \n```csharp  \ninternalHashtable = new Hashtable(new CaseInsensitiveHashCodeProvider  \n    (CultureInfo.InvariantCulture),   \n    new CaseInsensitiveComparer(CultureInfo.InvariantCulture));  \n```  \n  \n## Using the CollectionsUtil.CreateCaseInsensitiveHashTable Method  \n The `CollectionsUtil.CreateCaseInsensitiveHashTable` method is a useful shortcut for creating a new instance of the `Hashtable` class that ignores the case of strings. However, all overloads of the `CollectionsUtil.CreateCaseInsensitiveHashTable` method are culture-sensitive because they use the `Thread.CurrentCulture` property. You cannot create a culture-insensitive `Hashtable` using this method. To create a culture-insensitive `Hashtable`, use the `Hashtable` constructor that accepts a `culture` parameter. For the `culture` parameter, specify `CultureInfo.InvariantCulture`. The following code example demonstrates the constructor for a culture-insensitive `Hashtable`.  \n  \n```vb  \ninternalHashtable = New Hashtable(New  \n    CaseInsensitiveHashCodeProvider(CultureInfo.InvariantCulture),  \n    New CaseInsensitiveComparer(CultureInfo.InvariantCulture))  \n  \n```  \n  \n```csharp  \ninternalHashtable = new Hashtable(new CaseInsensitiveHashCodeProvider  \n    (CultureInfo.InvariantCulture),   \n    new CaseInsensitiveComparer(CultureInfo.InvariantCulture));  \n```  \n  \n<a name=\"cpconperformingculture-insensitivestringoperationsincollectionsanchor1\"></a>   \n## Using the SortedList Class  \n A `SortedList` represents a collection of key-and-value pairs that are sorted by the keys and are accessible by key and by index. When you use a `SortedList` where strings are the keys, the sorting and lookup can be affected by the `Thread.CurrentCulture` property. To obtain culture-insensitive behavior from a `SortedList`, create a `SortedList` using one of the constructors that accepts a `comparer` parameter. The `comparer` parameter specifies the <xref:System.Collections.IComparer> implementation to use when comparing keys. For the parameter, specify a custom comparer class that uses `CultureInfo.InvariantCulture` to compare keys. The following example illustrates a custom culture-insensitive comparer class that you can specify as the `comparer` parameter to a `SortedList` constructor.  \n  \n```vb  \nImports System  \nImports System.Collections  \nImports System.Globalization  \n  \nFriend Class InvariantComparer  \n    Implements IComparer   \n    Private m_compareInfo As CompareInfo  \n    Friend Shared [Default] As New InvariantComparer()  \n  \n    Friend Sub New()  \n        m_compareInfo = CultureInfo.InvariantCulture.CompareInfo  \n    End Sub     \n  \n    Public Function Compare(a As Object, b As Object) As Integer _  \n            Implements IComparer.Compare  \n        Dim sa As String = CType(a, String)  \n        Dim sb As String = CType(b, String)  \n        If Not (sa Is Nothing) And Not (sb Is Nothing) Then  \n            Return m_compareInfo.Compare(sa, sb)  \n        Else  \n            Return Comparer.Default.Compare(a, b)  \n        End If  \n    End Function  \nEnd Class  \n  \n```  \n  \n```csharp  \nusing System;  \nusing System.Collections;  \nusing System.Globalization;  \n  \ninternal class InvariantComparer : IComparer   \n{  \n    private CompareInfo m_compareInfo;  \n    internal static readonly InvariantComparer Default = new  \n        InvariantComparer();  \n  \n    internal InvariantComparer()   \n    {  \n        m_compareInfo = CultureInfo.InvariantCulture.CompareInfo;  \n    }  \n  \n    public int Compare(Object a, Object b)  \n    {  \n        String sa = a as String;  \n        String sb = b as String;  \n        if (sa != null && sb != null)  \n            return m_compareInfo.Compare(sa, sb);  \n        else  \n            return Comparer.Default.Compare(a,b);  \n    }  \n}  \n```  \n  \n In general, if you use a `SortedList` on strings without specifying a custom invariant comparer, a change to `Thread.CurrentCulture` after the list has been populated can invalidate the list.  \n  \n## Using the ArrayList.Sort Method  \n Overloads of the `ArrayList.Sort` method perform culture-sensitive sorts by default using the `Thread.CurrentCulture` property. Results can vary by culture due to different sort orders. To eliminate culture-sensitive behavior, use the overloads of this method that accept an `IComparer` implementation. For the `comparer` parameter, specify a custom invariant comparer class that uses `CultureInfo.InvariantCulture`. An example of a custom invariant comparer class is provided in the [Using the SortedList Class](#cpconperformingculture-insensitivestringoperationsincollectionsanchor1) topic.  \n  \n## See Also  \n <xref:System.Collections.CaseInsensitiveComparer>   \n <xref:System.Collections.CaseInsensitiveHashCodeProvider>   \n <xref:System.Collections.ArrayList.Sort%2A?displayProperty=fullName>   \n <xref:System.Collections.SortedList>   \n <xref:System.Collections.Hashtable>   \n <xref:System.Collections.IComparer>   \n [Performing Culture-Insensitive String Operations](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md)   \n <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A?displayProperty=fullName>","nodes":[{"pos":[12,92],"content":"Performing Culture-Insensitive String Operations in Collections | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Performing Culture-Insensitive String Operations in Collections | Microsoft Docs","pos":[0,80]}]},{"pos":[805,868],"content":"Performing Culture-Insensitive String Operations in Collections","linkify":"Performing Culture-Insensitive String Operations in Collections","nodes":[{"content":"Performing Culture-Insensitive String Operations in Collections","pos":[0,63]}]},{"content":"There are classes and members in the <ph id=\"ph1\">&lt;xref:System.Collections&gt;</ph> namespace that provide culture-sensitive behavior by default.","pos":[869,993],"source":"There are classes and members in the <xref:System.Collections> namespace that provide culture-sensitive behavior by default."},{"content":"The default constructors for the <ph id=\"ph1\">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.CaseInsensitiveHashCodeProvider&gt;</ph> classes initialize a new instance using the <ph id=\"ph3\">&lt;xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName&gt;</ph> property.","pos":[994,1266],"source":" The default constructors for the <xref:System.Collections.CaseInsensitiveComparer> and <xref:System.Collections.CaseInsensitiveHashCodeProvider> classes initialize a new instance using the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> property."},{"content":"All overloads of the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A?displayProperty=fullName&gt;</ph> method create a new instance of the <ph id=\"ph2\">&lt;xref:System.Collections.Hashtable&gt;</ph> class using the <ph id=\"ph3\">`Thread.CurrentCulture`</ph> property by default.","pos":[1267,1533],"source":" All overloads of the <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A?displayProperty=fullName> method create a new instance of the <xref:System.Collections.Hashtable> class using the `Thread.CurrentCulture` property by default."},{"content":"Overloads of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Sort%2A?displayProperty=fullName&gt;</ph> method perform culture-sensitive sorts by default using <ph id=\"ph2\">`Thread.CurrentCulture`</ph>.","pos":[1534,1700],"source":" Overloads of the <xref:System.Collections.ArrayList.Sort%2A?displayProperty=fullName> method perform culture-sensitive sorts by default using `Thread.CurrentCulture`."},{"content":"Sorting and lookup in a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> can be affected by <ph id=\"ph2\">`Thread.CurrentCulture`</ph> when strings are used as the keys.","pos":[1701,1839],"source":" Sorting and lookup in a <xref:System.Collections.SortedList> can be affected by `Thread.CurrentCulture` when strings are used as the keys."},{"content":"Follow the usage recommendations provided in this section to obtain culture-insensitive results from these classes and methods in the <ph id=\"ph1\">`Collections`</ph> namespace.","pos":[1840,1998],"source":" Follow the usage recommendations provided in this section to obtain culture-insensitive results from these classes and methods in the `Collections` namespace."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> Passing <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph> to a comparison method does perform a culture-insensitive comparison.","pos":[2005,2176],"source":"**Note** Passing <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> to a comparison method does perform a culture-insensitive comparison."},{"content":"However, it does not cause a non-linguistic comparison, for example, for file paths, registry keys, and environment variables.","pos":[2177,2303]},{"content":"Neither does it support security decisions based on the comparison result.","pos":[2304,2378]},{"content":"For a non-linguistic comparison or support for result-based security decisions, the application should use a comparison method that accepts a <ph id=\"ph1\">&lt;xref:System.StringComparison&gt;</ph> value.","pos":[2379,2558],"source":" For a non-linguistic comparison or support for result-based security decisions, the application should use a comparison method that accepts a <xref:System.StringComparison> value."},{"content":"The application should then pass <ph id=\"ph1\">&lt;xref:System.StringComparison&gt;</ph>.","pos":[2559,2623],"source":" The application should then pass <xref:System.StringComparison>."},{"pos":[2632,2709],"content":"Using the CaseInsensitiveComparer and CaseInsensitiveHashCodeProvider Classes","linkify":"Using the CaseInsensitiveComparer and CaseInsensitiveHashCodeProvider Classes","nodes":[{"content":"Using the CaseInsensitiveComparer and CaseInsensitiveHashCodeProvider Classes","pos":[0,77]}]},{"content":"The default constructors for <ph id=\"ph1\">`CaseInsensitiveHashCodeProvider`</ph> and <ph id=\"ph2\">`CaseInsensitiveComparer`</ph> initialize a new instance of the class using the <ph id=\"ph3\">`Thread.CurrentCulture`</ph>, resulting in culture-sensitive behavior.","pos":[2713,2920],"source":"The default constructors for `CaseInsensitiveHashCodeProvider` and `CaseInsensitiveComparer` initialize a new instance of the class using the `Thread.CurrentCulture`, resulting in culture-sensitive behavior."},{"content":"The following code example demonstrates the constructor for a <ph id=\"ph1\">`Hashtable`</ph> that is culture-sensitive because it uses the default constructors for <ph id=\"ph2\">`CaseInsensitiveHashCodeProvider`</ph> and <ph id=\"ph3\">`CaseInsensitiveComparer`</ph>.","pos":[2921,3130],"source":" The following code example demonstrates the constructor for a `Hashtable` that is culture-sensitive because it uses the default constructors for `CaseInsensitiveHashCodeProvider` and `CaseInsensitiveComparer`."},{"content":"If you want to create a culture-insensitive <ph id=\"ph1\">`Hashtable`</ph>using the <ph id=\"ph2\">`CaseInsensitiveComparer`</ph> and <ph id=\"ph3\">`CaseInsensitiveHashCodeProvider`</ph> classes, initialize new instances of these classes using the constructors that accept a <ph id=\"ph4\">`culture`</ph> parameter.","pos":[3399,3636],"source":"If you want to create a culture-insensitive `Hashtable`using the `CaseInsensitiveComparer` and `CaseInsensitiveHashCodeProvider` classes, initialize new instances of these classes using the constructors that accept a `culture` parameter."},{"content":"For the <ph id=\"ph1\">`culture`</ph> parameter, specify <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph>.","pos":[3637,3759],"source":" For the `culture` parameter, specify <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>."},{"content":"The following code example demonstrates the constructor for a culture-insensitive <ph id=\"ph1\">`Hashtable`</ph>.","pos":[3760,3854],"source":" The following code example demonstrates the constructor for a culture-insensitive `Hashtable`."},{"pos":[4255,4318],"content":"Using the CollectionsUtil.CreateCaseInsensitiveHashTable Method","linkify":"Using the CollectionsUtil.CreateCaseInsensitiveHashTable Method","nodes":[{"content":"Using the CollectionsUtil.CreateCaseInsensitiveHashTable Method","pos":[0,63]}]},{"content":"The <ph id=\"ph1\">`CollectionsUtil.CreateCaseInsensitiveHashTable`</ph> method is a useful shortcut for creating a new instance of the <ph id=\"ph2\">`Hashtable`</ph> class that ignores the case of strings.","pos":[4322,4489],"source":"The `CollectionsUtil.CreateCaseInsensitiveHashTable` method is a useful shortcut for creating a new instance of the `Hashtable` class that ignores the case of strings."},{"content":"However, all overloads of the <ph id=\"ph1\">`CollectionsUtil.CreateCaseInsensitiveHashTable`</ph> method are culture-sensitive because they use the <ph id=\"ph2\">`Thread.CurrentCulture`</ph> property.","pos":[4490,4652],"source":" However, all overloads of the `CollectionsUtil.CreateCaseInsensitiveHashTable` method are culture-sensitive because they use the `Thread.CurrentCulture` property."},{"content":"You cannot create a culture-insensitive <ph id=\"ph1\">`Hashtable`</ph> using this method.","pos":[4653,4723],"source":" You cannot create a culture-insensitive `Hashtable` using this method."},{"content":"To create a culture-insensitive <ph id=\"ph1\">`Hashtable`</ph>, use the <ph id=\"ph2\">`Hashtable`</ph> constructor that accepts a <ph id=\"ph3\">`culture`</ph> parameter.","pos":[4724,4836],"source":" To create a culture-insensitive `Hashtable`, use the `Hashtable` constructor that accepts a `culture` parameter."},{"content":"For the <ph id=\"ph1\">`culture`</ph> parameter, specify <ph id=\"ph2\">`CultureInfo.InvariantCulture`</ph>.","pos":[4837,4905],"source":" For the `culture` parameter, specify `CultureInfo.InvariantCulture`."},{"content":"The following code example demonstrates the constructor for a culture-insensitive <ph id=\"ph1\">`Hashtable`</ph>.","pos":[4906,5000],"source":" The following code example demonstrates the constructor for a culture-insensitive `Hashtable`."},{"pos":[5490,5516],"content":"Using the SortedList Class","linkify":"Using the SortedList Class","nodes":[{"content":"Using the SortedList Class","pos":[0,26]}]},{"content":"A <ph id=\"ph1\">`SortedList`</ph> represents a collection of key-and-value pairs that are sorted by the keys and are accessible by key and by index.","pos":[5520,5649],"source":"A `SortedList` represents a collection of key-and-value pairs that are sorted by the keys and are accessible by key and by index."},{"content":"When you use a <ph id=\"ph1\">`SortedList`</ph> where strings are the keys, the sorting and lookup can be affected by the <ph id=\"ph2\">`Thread.CurrentCulture`</ph> property.","pos":[5650,5785],"source":" When you use a `SortedList` where strings are the keys, the sorting and lookup can be affected by the `Thread.CurrentCulture` property."},{"content":"To obtain culture-insensitive behavior from a <ph id=\"ph1\">`SortedList`</ph>, create a <ph id=\"ph2\">`SortedList`</ph> using one of the constructors that accepts a <ph id=\"ph3\">`comparer`</ph> parameter.","pos":[5786,5934],"source":" To obtain culture-insensitive behavior from a `SortedList`, create a `SortedList` using one of the constructors that accepts a `comparer` parameter."},{"content":"The <ph id=\"ph1\">`comparer`</ph> parameter specifies the <ph id=\"ph2\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation to use when comparing keys.","pos":[5935,6052],"source":" The `comparer` parameter specifies the <xref:System.Collections.IComparer> implementation to use when comparing keys."},{"content":"For the parameter, specify a custom comparer class that uses <ph id=\"ph1\">`CultureInfo.InvariantCulture`</ph> to compare keys.","pos":[6053,6161],"source":" For the parameter, specify a custom comparer class that uses `CultureInfo.InvariantCulture` to compare keys."},{"content":"The following example illustrates a custom culture-insensitive comparer class that you can specify as the <ph id=\"ph1\">`comparer`</ph> parameter to a <ph id=\"ph2\">`SortedList`</ph> constructor.","pos":[6162,6319],"source":" The following example illustrates a custom culture-insensitive comparer class that you can specify as the `comparer` parameter to a `SortedList` constructor."},{"pos":[7837,8028],"content":"In general, if you use a <ph id=\"ph1\">`SortedList`</ph> on strings without specifying a custom invariant comparer, a change to <ph id=\"ph2\">`Thread.CurrentCulture`</ph> after the list has been populated can invalidate the list.","source":"In general, if you use a `SortedList` on strings without specifying a custom invariant comparer, a change to `Thread.CurrentCulture` after the list has been populated can invalidate the list."},{"pos":[8037,8068],"content":"Using the ArrayList.Sort Method","linkify":"Using the ArrayList.Sort Method","nodes":[{"content":"Using the ArrayList.Sort Method","pos":[0,31]}]},{"content":"Overloads of the <ph id=\"ph1\">`ArrayList.Sort`</ph> method perform culture-sensitive sorts by default using the <ph id=\"ph2\">`Thread.CurrentCulture`</ph> property.","pos":[8072,8199],"source":"Overloads of the `ArrayList.Sort` method perform culture-sensitive sorts by default using the `Thread.CurrentCulture` property."},{"content":"Results can vary by culture due to different sort orders.","pos":[8200,8257]},{"content":"To eliminate culture-sensitive behavior, use the overloads of this method that accept an <ph id=\"ph1\">`IComparer`</ph> implementation.","pos":[8258,8374],"source":" To eliminate culture-sensitive behavior, use the overloads of this method that accept an `IComparer` implementation."},{"content":"For the <ph id=\"ph1\">`comparer`</ph> parameter, specify a custom invariant comparer class that uses <ph id=\"ph2\">`CultureInfo.InvariantCulture`</ph>.","pos":[8375,8488],"source":" For the `comparer` parameter, specify a custom invariant comparer class that uses `CultureInfo.InvariantCulture`."},{"content":"An example of a custom invariant comparer class is provided in the <bpt id=\"p1\">[</bpt>Using the SortedList Class<ept id=\"p1\">](#cpconperformingculture-insensitivestringoperationsincollectionsanchor1)</ept> topic.","pos":[8489,8664],"source":" An example of a custom invariant comparer class is provided in the [Using the SortedList Class](#cpconperformingculture-insensitivestringoperationsincollectionsanchor1) topic."},{"pos":[8673,8681],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph>","pos":[8685,8734],"source":"<xref:System.Collections.CaseInsensitiveComparer> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.CaseInsensitiveHashCodeProvider&gt;</ph>","pos":[8739,8796],"source":" <xref:System.Collections.CaseInsensitiveHashCodeProvider> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Sort%2A?displayProperty=fullName&gt;</ph>","pos":[8801,8869],"source":" <xref:System.Collections.ArrayList.Sort%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>","pos":[8874,8910],"source":" <xref:System.Collections.SortedList> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph>","pos":[8915,8950],"source":" <xref:System.Collections.Hashtable> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph>","pos":[8955,8990],"source":" <xref:System.Collections.IComparer> "},{"content":"<bpt id=\"p1\"> [</bpt>Performing Culture-Insensitive String Operations<ept id=\"p1\">](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md)</ept><ph id=\"ph1\"> </ph>","pos":[8994,9149],"source":" [Performing Culture-Insensitive String Operations](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md) "},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A?displayProperty=fullName&gt;</ph>","pos":[9153,9265],"source":" <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A?displayProperty=fullName>"}]}