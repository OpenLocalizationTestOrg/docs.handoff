{"content":"---\ntitle: \"Using Async for File Access (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: bb018fea-5313-4c80-ab3f-7c24b2145bd9\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Using Async for File Access (C#)\nYou can use the async feature to access files. By using the async feature, you can call into asynchronous methods without using callbacks or splitting your code across multiple methods or lambda expressions. To make synchronous code asynchronous, you just call an asynchronous method instead of a synchronous method and add a few keywords to the code.  \n  \n You might consider the following reasons for adding asynchrony to file access calls:  \n  \n-   Asynchrony makes UI applications more responsive because the UI thread that launches the operation can perform other work. If the UI thread must execute code that takes a long time (for example, more than 50 milliseconds), the UI may freeze until the I/O is complete and the UI thread can again process keyboard and mouse input and other events.  \n  \n-   Asynchrony improves the scalability of ASP.NET and other server-based applications by reducing the need for threads. If the application uses a dedicated thread per response and a thousand requests are being handled simultaneously, a thousand threads are needed. Asynchronous operations often don’t need to use a thread during the wait. They use the existing I/O completion thread briefly at the end.  \n  \n-   The latency of a file access operation might be very low under current conditions, but the latency may greatly increase in the future. For example, a file may be moved to a server that's across the world.  \n  \n-   The added overhead of using the Async feature is small.  \n  \n-   Asynchronous tasks can easily be run in parallel.  \n  \n## Running the Examples  \n To run the examples in this topic, you can create a **WPF Application** or a **Windows Forms Application** and then add a **Button**. In the button's `Click` event, add a call to the first method in each example.  \n  \n In the following examples, include the following `using` statements.  \n  \n```csharp  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Diagnostics;  \nusing System.IO;  \nusing System.Text;  \nusing System.Threading.Tasks;  \n```  \n  \n## Use of the FileStream Class  \n The examples in this topic use the <xref:System.IO.FileStream> class, which has an option that causes asynchronous I/O to occur at the operating system level. By using this option, you can avoid blocking a ThreadPool thread in many cases. To enable this option, you specify the `useAsync=true` or `options=FileOptions.Asynchronous` argument in the constructor call.  \n  \n You can’t use this option with <xref:System.IO.StreamReader> and <xref:System.IO.StreamWriter> if you open them directly by specifying a file path. However, you can use this option if you provide them a <xref:System.IO.Stream> that the <xref:System.IO.FileStream> class opened. Note that asynchronous calls are faster in UI apps even if a ThreadPool thread is blocked, because the UI thread isn’t blocked during the wait.  \n  \n## Writing Text  \n The following example writes text to a file. At each await statement, the method immediately exits. When the file I/O is complete, the method resumes at the statement that follows the await statement. Note that the async modifier is in the definition of methods that use the await statement.  \n  \n```csharp  \npublic async void ProcessWrite()  \n{  \n    string filePath = @\"temp2.txt\";  \n    string text = \"Hello World\\r\\n\";  \n  \n    await WriteTextAsync(filePath, text);  \n}  \n  \nprivate async Task WriteTextAsync(string filePath, string text)  \n{  \n    byte[] encodedText = Encoding.Unicode.GetBytes(text);  \n  \n    using (FileStream sourceStream = new FileStream(filePath,  \n        FileMode.Append, FileAccess.Write, FileShare.None,  \n        bufferSize: 4096, useAsync: true))  \n    {  \n        await sourceStream.WriteAsync(encodedText, 0, encodedText.Length);  \n    };  \n}  \n```  \n  \n The original example has the statement `await sourceStream.WriteAsync(encodedText, 0, encodedText.Length);`, which is a contraction of the following two statements:  \n  \n```csharp  \nTask theTask = sourceStream.WriteAsync(encodedText, 0, encodedText.Length);  \nawait theTask;  \n```  \n  \n The first statement returns a task and causes file processing to start. The second statement with the await causes the method to immediately exit and return a different task. When the file processing later completes, execution returns to the statement that follows the await. For more information, see  [Control Flow in Async Programs (C#)](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md).  \n  \n## Reading Text  \n The following example reads text from a file. The text is buffered and, in this case, placed into a <xref:System.Text.StringBuilder>. Unlike in the previous example, the evaluation of the await produces a value. The <xref:System.IO.Stream.ReadAsync%2A> method returns a <xref:System.Threading.Tasks.Task>\\<<xref:System.Int32>>, so the evaluation of the await produces an `Int32` value (`numRead`) after the operation completes. For more information, see [Async Return Types (C#)](../../../../csharp/programming-guide/concepts/async/async-return-types.md).  \n  \n```csharp  \npublic async void ProcessRead()  \n{  \n    string filePath = @\"temp2.txt\";  \n  \n    if (File.Exists(filePath) == false)  \n    {  \n        Debug.WriteLine(\"file not found: \" + filePath);  \n    }  \n    else  \n    {  \n        try  \n        {  \n            string text = await ReadTextAsync(filePath);  \n            Debug.WriteLine(text);  \n        }  \n        catch (Exception ex)  \n        {  \n            Debug.WriteLine(ex.Message);  \n        }  \n    }  \n}  \n  \nprivate async Task<string> ReadTextAsync(string filePath)  \n{  \n    using (FileStream sourceStream = new FileStream(filePath,  \n        FileMode.Open, FileAccess.Read, FileShare.Read,  \n        bufferSize: 4096, useAsync: true))  \n    {  \n        StringBuilder sb = new StringBuilder();  \n  \n        byte[] buffer = new byte[0x1000];  \n        int numRead;  \n        while ((numRead = await sourceStream.ReadAsync(buffer, 0, buffer.Length)) != 0)  \n        {  \n            string text = Encoding.Unicode.GetString(buffer, 0, numRead);  \n            sb.Append(text);  \n        }  \n  \n        return sb.ToString();  \n    }  \n}  \n```  \n  \n## Parallel Asynchronous I/O  \n The following example demonstrates parallel processing by writing 10 text files. For each file, the <xref:System.IO.Stream.WriteAsync%2A> method returns a task that is then added to a list of tasks. The `await Task.WhenAll(tasks);` statement exits the method and resumes within the method when file processing is complete for all of the tasks.  \n  \n The example closes all <xref:System.IO.FileStream> instances in a `finally` block after the tasks are complete. If each `FileStream` was instead created in a `using` statement, the `FileStream` might be disposed of before the task was complete.  \n  \n Note that any performance boost is almost entirely from the parallel processing and not the asynchronous processing. The advantages of asynchrony are that it doesn’t tie up multiple threads, and that it doesn’t tie up the user interface thread.  \n  \n```csharp  \npublic async void ProcessWriteMult()  \n{  \n    string folder = @\"tempfolder\\\";  \n    List<Task> tasks = new List<Task>();  \n    List<FileStream> sourceStreams = new List<FileStream>();  \n  \n    try  \n    {  \n        for (int index = 1; index <= 10; index++)  \n        {  \n            string text = \"In file \" + index.ToString() + \"\\r\\n\";  \n  \n            string fileName = \"thefile\" + index.ToString(\"00\") + \".txt\";  \n            string filePath = folder + fileName;  \n  \n            byte[] encodedText = Encoding.Unicode.GetBytes(text);  \n  \n            FileStream sourceStream = new FileStream(filePath,  \n                FileMode.Append, FileAccess.Write, FileShare.None,  \n                bufferSize: 4096, useAsync: true);  \n  \n            Task theTask = sourceStream.WriteAsync(encodedText, 0, encodedText.Length);  \n            sourceStreams.Add(sourceStream);  \n  \n            tasks.Add(theTask);  \n        }  \n  \n        await Task.WhenAll(tasks);  \n    }  \n  \n    finally  \n    {  \n        foreach (FileStream sourceStream in sourceStreams)  \n        {  \n            sourceStream.Close();  \n        }  \n    }  \n}  \n```  \n  \n When using the <xref:System.IO.Stream.WriteAsync%2A> and <xref:System.IO.Stream.ReadAsync%2A> methods, you can specify a <xref:System.Threading.CancellationToken>, which you can use to cancel the operation mid-stream. For more information, see [Fine-Tuning Your Async Application (C#)](../../../../csharp/programming-guide/concepts/async/fine-tuning-your-async-application.md) and [Cancellation in Managed Threads](../../../../standard/threading/cancellation-in-managed-threads.md).  \n  \n## See Also  \n [Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md)   \n [Async Return Types (C#)](../../../../csharp/programming-guide/concepts/async/async-return-types.md)   \n [Control Flow in Async Programs (C#)](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)","nodes":[{"pos":[4,413],"nodes":[{"content":"Using Async for File Access (C#) | Microsoft Docs","nodes":[{"pos":[0,49],"content":"Using Async for File Access (C#) | Microsoft Docs","nodes":[{"content":"Using Async for File Access (C#) | Microsoft Docs","pos":[0,49]}]}],"pos":[6,58],"yaml":true}],"content":"title: \"Using Async for File Access (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: bb018fea-5313-4c80-ab3f-7c24b2145bd9\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[420,452],"content":"Using Async for File Access (C#)","linkify":"Using Async for File Access (C#)","nodes":[{"content":"Using Async for File Access (C#)","pos":[0,32]}]},{"content":"You can use the async feature to access files.","pos":[453,499]},{"content":"By using the async feature, you can call into asynchronous methods without using callbacks or splitting your code across multiple methods or lambda expressions.","pos":[500,660]},{"content":"To make synchronous code asynchronous, you just call an asynchronous method instead of a synchronous method and add a few keywords to the code.","pos":[661,804]},{"content":"You might consider the following reasons for adding asynchrony to file access calls:","pos":[811,895]},{"content":"Asynchrony makes UI applications more responsive because the UI thread that launches the operation can perform other work.","pos":[905,1027]},{"content":"If the UI thread must execute code that takes a long time (for example, more than 50 milliseconds), the UI may freeze until the I/O is complete and the UI thread can again process keyboard and mouse input and other events.","pos":[1028,1250]},{"content":"Asynchrony improves the scalability of ASP.NET and other server-based applications by reducing the need for threads.","pos":[1260,1376]},{"content":"If the application uses a dedicated thread per response and a thousand requests are being handled simultaneously, a thousand threads are needed.","pos":[1377,1521]},{"content":"Asynchronous operations often don’t need to use a thread during the wait.","pos":[1522,1595]},{"content":"They use the existing I/O completion thread briefly at the end.","pos":[1596,1659]},{"content":"The latency of a file access operation might be very low under current conditions, but the latency may greatly increase in the future.","pos":[1669,1803]},{"content":"For example, a file may be moved to a server that's across the world.","pos":[1804,1873]},{"content":"The added overhead of using the Async feature is small.","pos":[1883,1938]},{"content":"Asynchronous tasks can easily be run in parallel.","pos":[1948,1997]},{"pos":[2006,2026],"content":"Running the Examples","linkify":"Running the Examples","nodes":[{"content":"Running the Examples","pos":[0,20]}]},{"content":"To run the examples in this topic, you can create a <bpt id=\"p1\">**</bpt>WPF Application<ept id=\"p1\">**</ept> or a <bpt id=\"p2\">**</bpt>Windows Forms Application<ept id=\"p2\">**</ept> and then add a <bpt id=\"p3\">**</bpt>Button<ept id=\"p3\">**</ept>.","pos":[2030,2163],"source":"To run the examples in this topic, you can create a **WPF Application** or a **Windows Forms Application** and then add a **Button**."},{"content":"In the button's <ph id=\"ph1\">`Click`</ph> event, add a call to the first method in each example.","pos":[2164,2242],"source":" In the button's `Click` event, add a call to the first method in each example."},{"pos":[2249,2317],"content":"In the following examples, include the following <ph id=\"ph1\">`using`</ph> statements.","source":"In the following examples, include the following `using` statements."},{"pos":[2499,2526],"content":"Use of the FileStream Class","linkify":"Use of the FileStream Class","nodes":[{"content":"Use of the FileStream Class","pos":[0,27]}]},{"content":"The examples in this topic use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> class, which has an option that causes asynchronous I/O to occur at the operating system level.","pos":[2530,2688],"source":"The examples in this topic use the <xref:System.IO.FileStream> class, which has an option that causes asynchronous I/O to occur at the operating system level."},{"content":"By using this option, you can avoid blocking a ThreadPool thread in many cases.","pos":[2689,2768]},{"content":"To enable this option, you specify the <ph id=\"ph1\">`useAsync=true`</ph> or <ph id=\"ph2\">`options=FileOptions.Asynchronous`</ph> argument in the constructor call.","pos":[2769,2895],"source":" To enable this option, you specify the `useAsync=true` or `options=FileOptions.Asynchronous` argument in the constructor call."},{"content":"You can’t use this option with <ph id=\"ph1\">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter&gt;</ph> if you open them directly by specifying a file path.","pos":[2902,3049],"source":"You can’t use this option with <xref:System.IO.StreamReader> and <xref:System.IO.StreamWriter> if you open them directly by specifying a file path."},{"content":"However, you can use this option if you provide them a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> that the <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> class opened.","pos":[3050,3179],"source":" However, you can use this option if you provide them a <xref:System.IO.Stream> that the <xref:System.IO.FileStream> class opened."},{"content":"Note that asynchronous calls are faster in UI apps even if a ThreadPool thread is blocked, because the UI thread isn’t blocked during the wait.","pos":[3180,3323]},{"pos":[3332,3344],"content":"Writing Text","linkify":"Writing Text","nodes":[{"content":"Writing Text","pos":[0,12]}]},{"content":"The following example writes text to a file.","pos":[3348,3392]},{"content":"At each await statement, the method immediately exits.","pos":[3393,3447]},{"content":"When the file I/O is complete, the method resumes at the statement that follows the await statement.","pos":[3448,3548]},{"content":"Note that the async modifier is in the definition of methods that use the await statement.","pos":[3549,3639]},{"pos":[4238,4402],"content":"The original example has the statement <ph id=\"ph1\">`await sourceStream.WriteAsync(encodedText, 0, encodedText.Length);`</ph>, which is a contraction of the following two statements:","source":"The original example has the statement `await sourceStream.WriteAsync(encodedText, 0, encodedText.Length);`, which is a contraction of the following two statements:"},{"content":"The first statement returns a task and causes file processing to start.","pos":[4525,4596]},{"content":"The second statement with the await causes the method to immediately exit and return a different task.","pos":[4597,4699]},{"content":"When the file processing later completes, execution returns to the statement that follows the await.","pos":[4700,4800]},{"content":"For more information, see  <bpt id=\"p1\">[</bpt>Control Flow in Async Programs (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.","pos":[4801,4953],"source":" For more information, see  [Control Flow in Async Programs (C#)](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)."},{"pos":[4962,4974],"content":"Reading Text","linkify":"Reading Text","nodes":[{"content":"Reading Text","pos":[0,12]}]},{"content":"The following example reads text from a file.","pos":[4978,5023]},{"content":"The text is buffered and, in this case, placed into a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph>.","pos":[5024,5111],"source":" The text is buffered and, in this case, placed into a <xref:System.Text.StringBuilder>."},{"content":"Unlike in the previous example, the evaluation of the await produces a value.","pos":[5112,5189]},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph><ph id=\"ph3\">\\&lt;</ph><ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>&gt;, so the evaluation of the await produces an <ph id=\"ph5\">`Int32`</ph> value (<ph id=\"ph6\">`numRead`</ph>) after the operation completes.","pos":[5190,5405],"source":" The <xref:System.IO.Stream.ReadAsync%2A> method returns a <xref:System.Threading.Tasks.Task>\\<<xref:System.Int32>>, so the evaluation of the await produces an `Int32` value (`numRead`) after the operation completes."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Async Return Types (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept>.","pos":[5406,5533],"source":" For more information, see [Async Return Types (C#)](../../../../csharp/programming-guide/concepts/async/async-return-types.md)."},{"pos":[6651,6676],"content":"Parallel Asynchronous I/O","linkify":"Parallel Asynchronous I/O","nodes":[{"content":"Parallel Asynchronous I/O","pos":[0,25]}]},{"content":"The following example demonstrates parallel processing by writing 10 text files.","pos":[6680,6760]},{"content":"For each file, the <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method returns a task that is then added to a list of tasks.","pos":[6761,6878],"source":" For each file, the <xref:System.IO.Stream.WriteAsync%2A> method returns a task that is then added to a list of tasks."},{"content":"The <ph id=\"ph1\">`await Task.WhenAll(tasks);`</ph> statement exits the method and resumes within the method when file processing is complete for all of the tasks.","pos":[6879,7023],"source":" The `await Task.WhenAll(tasks);` statement exits the method and resumes within the method when file processing is complete for all of the tasks."},{"content":"The example closes all <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> instances in a <ph id=\"ph2\">`finally`</ph> block after the tasks are complete.","pos":[7030,7141],"source":"The example closes all <xref:System.IO.FileStream> instances in a `finally` block after the tasks are complete."},{"content":"If each <ph id=\"ph1\">`FileStream`</ph> was instead created in a <ph id=\"ph2\">`using`</ph> statement, the <ph id=\"ph3\">`FileStream`</ph> might be disposed of before the task was complete.","pos":[7142,7274],"source":" If each `FileStream` was instead created in a `using` statement, the `FileStream` might be disposed of before the task was complete."},{"content":"Note that any performance boost is almost entirely from the parallel processing and not the asynchronous processing.","pos":[7281,7397]},{"content":"The advantages of asynchrony are that it doesn’t tie up multiple threads, and that it doesn’t tie up the user interface thread.","pos":[7398,7525]},{"content":"When using the <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> methods, you can specify a <ph id=\"ph3\">&lt;xref:System.Threading.CancellationToken&gt;</ph>, which you can use to cancel the operation mid-stream.","pos":[8678,8895],"source":"When using the <xref:System.IO.Stream.WriteAsync%2A> and <xref:System.IO.Stream.ReadAsync%2A> methods, you can specify a <xref:System.Threading.CancellationToken>, which you can use to cancel the operation mid-stream."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Fine-Tuning Your Async Application (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/fine-tuning-your-async-application.md)</ept> and <bpt id=\"p2\">[</bpt>Cancellation in Managed Threads<ept id=\"p2\">](../../../../standard/threading/cancellation-in-managed-threads.md)</ept>.","pos":[8896,9160],"source":" For more information, see [Fine-Tuning Your Async Application (C#)](../../../../csharp/programming-guide/concepts/async/fine-tuning-your-async-application.md) and [Cancellation in Managed Threads](../../../../standard/threading/cancellation-in-managed-threads.md)."},{"pos":[9169,9177],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[9181,9296],"source":"[Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Async Return Types (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[9300,9401],"source":"[Async Return Types (C#)](../../../../csharp/programming-guide/concepts/async/async-return-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Control Flow in Async Programs (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>","pos":[9405,9529],"source":"[Control Flow in Async Programs (C#)](../../../../csharp/programming-guide/concepts/async/control-flow-in-async-programs.md)"}]}